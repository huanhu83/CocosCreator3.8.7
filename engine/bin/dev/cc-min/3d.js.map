{"version":3,"file":"3d.js","sources":["../../../cocos/3d/misc/ppm.ts","../../../cocos/3d/misc/batch-utils.ts","../../../cocos/3d/framework/deprecated.ts","../../../cocos/3d/lights/light-component.ts","../../../cocos/3d/lights/directional-light-component.ts","../../../cocos/3d/lights/sphere-light-component.ts","../../../cocos/3d/lights/spot-light-component.ts","../../../cocos/3d/lights/point-light-component.ts","../../../cocos/3d/lights/ranged-directional-light-component.ts","../../../cocos/3d/lights/deprecated.ts","../../../cocos/3d/lod/lodgroup-component.ts","../../../cocos/3d/reflection-probe/reflection-probe-manager.ts","../../../cocos/3d/reflection-probe/reflection-probe-component.ts","../../../cocos/3d/index.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @en\r\n * save a color buffer to a PPM file\r\n * @zh\r\n * 保存一个颜色缓冲到 PPM 文件中\r\n * @param buffer color buffer\r\n * @param w width\r\n * @param h height\r\n */\r\nexport function toPPM (buffer: Uint8Array, w: number, h: number): string {\r\n    return `P3 ${w} ${h} 255\\n${buffer.filter((e, i) => i % 4 < 3).toString()}\\n`;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { MeshRenderer } from '../framework/mesh-renderer';\r\nimport { Mesh } from '../assets/mesh';\r\nimport { Mat4 } from '../../core';\r\nimport { Node } from '../../scene-graph/node';\r\n\r\nfunction checkMaterialisSame (comp1: MeshRenderer, comp2: MeshRenderer): boolean {\r\n    const matNum = comp1.sharedMaterials.length;\r\n    if (matNum !== comp2.sharedMaterials.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < matNum; i++) {\r\n        if (comp1.getRenderMaterial(i) !== comp2.getRenderMaterial(i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * @en Utility for 3d model static batching\r\n * @zh 服务于 3D 模型静态合批的工具类\r\n */\r\nexport class BatchingUtility {\r\n    /**\r\n     * @en\r\n     * Collect the Models under `staticModelRoot`,\r\n     * merge all the meshes statically into one (while disabling each component),\r\n     * and attach it to a new Model on `batchedRoot`.\r\n     * The world transform of each model is guaranteed to be preserved.\r\n     *\r\n     * For a more fine-grained control over the process, use `Mesh.merge` directly.\r\n     * @zh\r\n     * 在`staticModelRoot`下收集模型。\r\n     * 将所有的网格静态地合并成一个（同时禁用每个组件）。\r\n     * 并将其附加到 `batchedRoot` 上的一个新模型。\r\n     * 每个模型的世界变换都被保证保留下来。\r\n     * 如果要对这个过程进行更精细的控制，可以直接使用 `Mesh.merge`。\r\n     * @param staticModelRoot root of all the static models to be batched\r\n     * @param batchedRoot the target output node\r\n     */\r\n    public static batchStaticModel (staticModelRoot: Node, batchedRoot: Node): boolean {\r\n        const models = staticModelRoot.getComponentsInChildren(MeshRenderer);\r\n        if (models.length < 2) {\r\n            console.error('the number of static models to batch is less than 2,it needn\\'t batch.');\r\n            return false;\r\n        }\r\n        for (let i = 1; i < models.length; i++) {\r\n            if (!models[0].mesh!.validateMergingMesh(models[i].mesh!)) {\r\n                console.error(`the meshes of ${models[0].node.name} and ${models[i].node.name} can't be merged`);\r\n                return false;\r\n            }\r\n            if (!checkMaterialisSame(models[0], models[i])) {\r\n                console.error(`the materials of ${models[0].node.name} and ${models[i].node.name} can't be merged`);\r\n                return false;\r\n            }\r\n        }\r\n        const batchedMesh = new Mesh();\r\n        const worldMat = new Mat4();\r\n        const rootWorldMatInv = new Mat4();\r\n        staticModelRoot.getWorldMatrix(rootWorldMatInv);\r\n        Mat4.invert(rootWorldMatInv, rootWorldMatInv);\r\n        for (let i = 0; i < models.length; i++) {\r\n            const comp = models[i];\r\n            comp.node.getWorldMatrix(worldMat);\r\n            Mat4.multiply(worldMat, rootWorldMatInv, worldMat);\r\n            batchedMesh.merge(models[i].mesh!, worldMat);\r\n            comp.enabled = false;\r\n        }\r\n        const batchedModel = batchedRoot.addComponent(MeshRenderer);\r\n        batchedModel.mesh = batchedMesh;\r\n        batchedModel.sharedMaterials = models[0].sharedMaterials;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Undoes everything `batchStaticModel` did.\r\n     * @zh\r\n     * 回退 `batchStaticModel` 做的工作\r\n     *\r\n     * @param staticModelRoot root of all the static models to be batched\r\n     * @param batchedRoot the target output node\r\n     */\r\n    public static unbatchStaticModel (staticModelRoot: Node, batchedRoot: Node): boolean {\r\n        const models = staticModelRoot.getComponentsInChildren(MeshRenderer);\r\n        for (let i = 0; i < models.length; i++) {\r\n            const comp = models[i];\r\n            comp.enabled = true;\r\n        }\r\n        const batchedModel = batchedRoot.getComponent(MeshRenderer);\r\n        if (batchedModel) {\r\n            if (batchedModel.mesh) {\r\n                batchedModel.mesh.destroyRenderingMesh();\r\n            }\r\n            batchedModel.destroy();\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { removeProperty, js, cclegacy } from '../../core';\r\nimport { MeshRenderer } from './mesh-renderer';\r\n\r\nremoveProperty(MeshRenderer.prototype, 'MeshRenderer.prototype', [\r\n    {\r\n        name: 'enableDynamicBatching',\r\n    },\r\n    {\r\n        name: 'recieveShadows',\r\n    },\r\n]);\r\n\r\n/**\r\n * Alias of [[MeshRenderer]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { MeshRenderer as ModelComponent };\r\ncclegacy.ModelComponent = MeshRenderer;\r\njs.setClassAlias(MeshRenderer, 'cc.ModelComponent');\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, range, slide, type, displayOrder, serializable, editable } from 'cc.decorator';\r\nimport { Component } from '../../scene-graph/component';\r\nimport { Color, Vec3, Enum, cclegacy } from '../../core';\r\nimport { scene } from '../../render-scene';\r\nimport { Root } from '../../root';\r\nimport { CAMERA_DEFAULT_MASK } from '../../rendering/define';\r\nimport { Layers } from '../../scene-graph/layers';\r\nimport type { LightType } from '../../render-scene/scene';\r\n\r\nconst _color_tmp = new Vec3();\r\n\r\n/**\r\n * @en The physical term used for light.\r\n * @zh 光源所使用的物理计量单位。\r\n */\r\nexport const PhotometricTerm = Enum({\r\n    LUMINOUS_FLUX: 0,\r\n    LUMINANCE: 1,\r\n});\r\n\r\n/**\r\n * @en Static light settings.\r\n * @zh 静态灯光设置\r\n */\r\n@ccclass('cc.StaticLightSettings')\r\nclass StaticLightSettings {\r\n    @serializable\r\n    protected _baked = false;\r\n    @serializable\r\n    protected _editorOnly = false;\r\n    @serializable\r\n    protected _castShadow = false;\r\n\r\n    /**\r\n     * @en Whether the light is editor only.\r\n     * @zh 是否只在编辑器里生效。\r\n     */\r\n    @editable\r\n    get editorOnly (): boolean {\r\n        return this._editorOnly;\r\n    }\r\n    set editorOnly (val) {\r\n        this._editorOnly = val;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the light is baked\r\n     * @zh 光源是否被烘焙\r\n     */\r\n    get baked (): boolean {\r\n        return this._baked;\r\n    }\r\n\r\n    set baked (val) {\r\n        this._baked = val;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the light will cast shadow during baking process.\r\n     * @zh 光源在烘焙时是否投射阴影。\r\n     */\r\n    @editable\r\n    get castShadow (): boolean {\r\n        return this._castShadow;\r\n    }\r\n\r\n    set castShadow (val) {\r\n        this._castShadow = val;\r\n    }\r\n}\r\n\r\nexport declare namespace Light {\r\n    export type Type = EnumAlias<typeof scene.LightType>;\r\n    export type PhotometricTerm = EnumAlias<typeof PhotometricTerm>;\r\n}\r\n\r\n/**\r\n * @en The base class of all light components, contains basic light settings for both real time light and baked light.\r\n * @zh 光源组件基类，包含实时光源和烘焙光源的基本配置信息。\r\n */\r\n@ccclass('cc.Light')\r\nexport class Light extends Component {\r\n    /**\r\n     * @en The light type enumeration.\r\n     * @zh 光源类型枚举。\r\n     */\r\n    public static Type = scene.LightType;\r\n    /**\r\n     * @en The physical term used for light.\r\n     * @zh 光源所使用的物理计量单位。\r\n     */\r\n    public static PhotometricTerm = PhotometricTerm;\r\n\r\n    @serializable\r\n    protected _color = Color.WHITE.clone();\r\n    @serializable\r\n    protected _useColorTemperature = false;\r\n    @serializable\r\n    protected _colorTemperature = 6550;\r\n    @serializable\r\n    protected _staticSettings: StaticLightSettings = new StaticLightSettings();\r\n    @serializable\r\n    protected _visibility = CAMERA_DEFAULT_MASK;\r\n\r\n    protected _type = scene.LightType.UNKNOWN;\r\n    protected _lightType: typeof scene.Light;\r\n    protected _light: scene.Light | null = null;\r\n\r\n    /**\r\n     * @en The color of the light.\r\n     * @zh 光源颜色。\r\n     */\r\n    @tooltip('i18n:lights.color')\r\n    get color (): Readonly<Color> {\r\n        return this._color;\r\n    }\r\n    set color (val: Readonly<Color>) {\r\n        this._color = val.clone();\r\n        if (this._light) {\r\n            _color_tmp.x = val.r / 255.0;\r\n            _color_tmp.y = val.g / 255.0;\r\n            _color_tmp.z = val.b / 255.0;\r\n            this._light.color = _color_tmp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether to enable light color temperature.\r\n     * @zh\r\n     * 是否启用光源色温。\r\n     */\r\n    @tooltip('i18n:lights.use_color_temperature')\r\n    get useColorTemperature (): boolean {\r\n        return this._useColorTemperature;\r\n    }\r\n    set useColorTemperature (enable) {\r\n        this._useColorTemperature = enable;\r\n        if (this._light) { this._light.useColorTemperature = enable; }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The light color temperature.\r\n     * @zh\r\n     * 光源色温。\r\n     */\r\n    @slide\r\n    @range([1000, 15000, 100])\r\n    @tooltip('i18n:lights.color_temperature')\r\n    get colorTemperature (): number {\r\n        return this._colorTemperature;\r\n    }\r\n\r\n    set colorTemperature (val) {\r\n        this._colorTemperature = val;\r\n        if (this._light) { this._light.colorTemperature = val; }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * static light settings.\r\n     * @zh\r\n     * 静态灯光设置。\r\n     */\r\n    @type(StaticLightSettings)\r\n    @displayOrder(50)\r\n    get staticSettings (): StaticLightSettings {\r\n        return this._staticSettings;\r\n    }\r\n\r\n    set staticSettings (val) {\r\n        this._staticSettings = val;\r\n    }\r\n\r\n    /**\r\n     * @en The light type.\r\n     * @zh 光源类型。\r\n     */\r\n    get type (): LightType {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the light is baked\r\n     * @zh 光源是否被烘焙\r\n     */\r\n    get baked (): boolean {\r\n        return this.staticSettings.baked;\r\n    }\r\n\r\n    set baked (val) {\r\n        this.staticSettings.baked = val;\r\n        if (this._light !== null) {\r\n            this._light.baked = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Visibility mask of the light, declaring a set of node layers that will be visible to this light.\r\n     * @zh 光照的可见性掩码，声明在当前光照中可见的节点层级集合。\r\n     */\r\n    @tooltip('i18n:lights.visibility')\r\n    @displayOrder(255)\r\n    @type(Layers.BitMask)\r\n    set visibility (vis: number) {\r\n        this._visibility = vis;\r\n        if (this._light) { this._light.visibility = vis; }\r\n        this._onUpdateReceiveDirLight();\r\n    }\r\n    get visibility (): number {\r\n        return this._visibility;\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._lightType = scene.Light;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        this._createLight();\r\n    }\r\n\r\n    public onEnable (): void {\r\n        this._attachToScene();\r\n    }\r\n\r\n    public onDisable (): void {\r\n        this._detachFromScene();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        this._destroyLight();\r\n    }\r\n\r\n    protected _createLight (): void {\r\n        if (!this._light) {\r\n            this._light = (cclegacy.director.root as Root).createLight(this._lightType);\r\n        }\r\n        this.color = this._color;\r\n        this.useColorTemperature = this._useColorTemperature;\r\n        this.colorTemperature = this._colorTemperature;\r\n        this._light.node = this.node;\r\n        this._light.baked = this.baked;\r\n        this._light.visibility = this.visibility;\r\n    }\r\n\r\n    protected _destroyLight (): void {\r\n        if (this._light) {\r\n            (cclegacy.director.root as Root).recycleLight(this._light);\r\n            this._light = null;\r\n        }\r\n    }\r\n\r\n    protected _attachToScene (): void {\r\n        this._detachFromScene();\r\n        if (this._light && !this._light.scene && this.node.scene) {\r\n            const renderScene = this._getRenderScene();\r\n            switch (this._type) {\r\n            case scene.LightType.DIRECTIONAL:\r\n                renderScene.addDirectionalLight(this._light as scene.DirectionalLight);\r\n                renderScene.setMainLight(this._light as scene.DirectionalLight);\r\n                break;\r\n            case scene.LightType.SPHERE:\r\n                renderScene.addSphereLight(this._light as scene.SphereLight);\r\n                break;\r\n            case scene.LightType.SPOT:\r\n                renderScene.addSpotLight(this._light as scene.SpotLight);\r\n                break;\r\n            case scene.LightType.POINT:\r\n                renderScene.addPointLight(this._light as scene.PointLight);\r\n                break;\r\n            case scene.LightType.RANGED_DIRECTIONAL:\r\n                renderScene.addRangedDirLight(this._light as scene.RangedDirectionalLight);\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _detachFromScene (): void {\r\n        if (this._light && this._light.scene) {\r\n            const renderScene = this._light.scene;\r\n            switch (this._type) {\r\n            case scene.LightType.DIRECTIONAL:\r\n                renderScene.removeDirectionalLight(this._light as scene.DirectionalLight);\r\n                renderScene.unsetMainLight(this._light as scene.DirectionalLight);\r\n                break;\r\n            case scene.LightType.SPHERE:\r\n                renderScene.removeSphereLight(this._light as scene.SphereLight);\r\n                break;\r\n            case scene.LightType.SPOT:\r\n                renderScene.removeSpotLight(this._light as scene.SpotLight);\r\n                break;\r\n            case scene.LightType.POINT:\r\n                renderScene.removePointLight(this._light as scene.PointLight);\r\n                break;\r\n            case scene.LightType.RANGED_DIRECTIONAL:\r\n                renderScene.removeRangedDirLight(this._light as scene.RangedDirectionalLight);\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _onUpdateReceiveDirLight (): void {\r\n        // do nothing\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Light } from './light-component';\r\nimport { scene } from '../../render-scene';\r\nimport { clamp, warnID, CCBoolean, CCFloat, _decorator, settings, CCInteger, SettingsCategory } from '../../core';\r\nimport { Camera, PCFType, Shadows, ShadowType, CSMOptimizationMode, CSMLevel } from '../../render-scene/scene';\r\nimport { Root } from '../../root';\r\nimport { MeshRenderer } from '../framework/mesh-renderer';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\n\r\nconst { ccclass, menu, executeInEditMode, property, serializable, formerlySerializedAs, tooltip, help,\r\n    visible, type, editable, slide, range } = _decorator;\r\n\r\n/**\r\n * @en The directional light component, only one real time directional light is permitted in one scene, it act as the main light of the scene.\r\n * @zh 平行光源组件，一个场景只允许存在一个实时的平行光源，作为场景的主光源存在。\r\n */\r\n@ccclass('cc.DirectionalLight')\r\n@help('i18n:cc.DirectionalLight')\r\n@menu('Light/DirectionalLight')\r\n@executeInEditMode\r\nexport class DirectionalLight extends Light {\r\n    @property\r\n    @formerlySerializedAs('_illuminance')\r\n    private _illuminanceHDR = 65000;\r\n\r\n    @serializable\r\n    private _illuminanceLDR = 65000 * Camera.standardExposureValue;\r\n\r\n    // Public properties of shadow\r\n    @serializable\r\n    private _shadowEnabled = false;\r\n\r\n    // Shadow map properties\r\n    @serializable\r\n    private _shadowPcf = PCFType.HARD;\r\n    @serializable\r\n    private _shadowBias = 0.00001;\r\n    @serializable\r\n    private _shadowNormalBias = 0.0;\r\n    @serializable\r\n    private _shadowSaturation = 1.0;\r\n    @serializable\r\n    private _shadowDistance = 50;\r\n    @serializable\r\n    private _shadowInvisibleOcclusionRange = 200;\r\n    @serializable\r\n    private _csmLevel = CSMLevel.LEVEL_4;\r\n    @serializable\r\n    private _csmLayerLambda = 0.75;\r\n    @serializable\r\n    private _csmOptimizationMode = CSMOptimizationMode.RemoveDuplicates;\r\n\r\n    @serializable\r\n    private _csmAdvancedOptions = false;\r\n    @serializable\r\n    private _csmLayersTransition = false;\r\n    @serializable\r\n    private _csmTransitionRange = 0.05;\r\n\r\n    // fixed area properties\r\n    @serializable\r\n    private _shadowFixedArea = false;\r\n    @serializable\r\n    private _shadowNear = 0.1;\r\n    @serializable\r\n    private _shadowFar = 10.0;\r\n    @serializable\r\n    private _shadowOrthoSize = 5;\r\n\r\n    /**\r\n     * @en The light source intensity.\r\n     * @zh 光源强度。\r\n     */\r\n    @tooltip('i18n:lights.illuminance')\r\n    @editable\r\n    @range([0, Number.POSITIVE_INFINITY, 10])\r\n    @type(CCInteger)\r\n    get illuminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._illuminanceHDR;\r\n        } else {\r\n            return this._illuminanceLDR;\r\n        }\r\n    }\r\n    set illuminance (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this._illuminanceHDR = val;\r\n            this._light && ((this._light as scene.DirectionalLight).illuminanceHDR = this._illuminanceHDR);\r\n        } else {\r\n            this._illuminanceLDR = val;\r\n            this._light && ((this._light as scene.DirectionalLight).illuminanceLDR = this._illuminanceLDR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether activate real time shadow.\r\n     * @zh 是否启用实时阴影？\r\n     */\r\n    @tooltip('i18n:lights.shadowEnabled')\r\n    @visible(() => getPipelineSceneData().shadows.enabled\r\n    && getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 1 } })\r\n    @editable\r\n    @type(CCBoolean)\r\n    get shadowEnabled (): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    set shadowEnabled (val) {\r\n        this._shadowEnabled = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowEnabled = this._shadowEnabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The shadow pcf for real time shadow.\r\n     * @zh 实时阴影计算中的阴影 pcf 等级。\r\n     */\r\n    @tooltip('i18n:lights.shadowPcf')\r\n    @visible(() => getPipelineSceneData().shadows.enabled\r\n    && getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 5  } })\r\n    @editable\r\n    @type(PCFType)\r\n    get shadowPcf (): number {\r\n        return this._shadowPcf;\r\n    }\r\n    set shadowPcf (val) {\r\n        this._shadowPcf = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowPcf = this._shadowPcf;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The shadow map sampler offset for real time shadow.\r\n     * @zh 实时阴影计算中的阴影纹理偏移值。\r\n     */\r\n    @tooltip('i18n:lights.shadowBias')\r\n    @visible(() => getPipelineSceneData().shadows.enabled\r\n    && getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 6 } })\r\n    @editable\r\n    @type(CCFloat)\r\n    get shadowBias (): number {\r\n        return this._shadowBias;\r\n    }\r\n    set shadowBias (val) {\r\n        this._shadowBias = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowBias = this._shadowBias;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The global normal bias for real time shadow.\r\n     * @zh 实时阴影计算中的法线偏移。\r\n     */\r\n    @tooltip('i18n:lights.shadowNormalBias')\r\n    @visible(() => getPipelineSceneData().shadows.enabled\r\n    && getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 7 } })\r\n    @editable\r\n    @type(CCFloat)\r\n    get shadowNormalBias (): number {\r\n        return this._shadowNormalBias;\r\n    }\r\n    set shadowNormalBias (val) {\r\n        this._shadowNormalBias = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowNormalBias = this._shadowNormalBias;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The shadow color saturation for real time shadow.\r\n     * @zh 实时阴影计算中的阴影颜色饱和度。\r\n     */\r\n    @tooltip('i18n:lights.shadowSaturation')\r\n    @visible(() => getPipelineSceneData().shadows.enabled\r\n    && getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 8 } })\r\n    @editable\r\n    @range([0.0, 1.0, 0.01])\r\n    @slide\r\n    @type(CCFloat)\r\n    get shadowSaturation (): number {\r\n        return this._shadowSaturation;\r\n    }\r\n    set shadowSaturation (val) {\r\n        this._shadowSaturation = clamp(val, 0.0, 1.0);\r\n\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowSaturation = this._shadowSaturation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The potential shadow distance from the camera for real time shadow.\r\n     * @zh 实时阴影计算中潜在阴影产生的范围\r\n     */\r\n    @tooltip('i18n:lights.shadowDistance')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n        && getPipelineSceneData().shadows.type\r\n        === ShadowType.ShadowMap && this._shadowFixedArea === false;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 9 } })\r\n    @editable\r\n    @tooltip('shadow visible distance: shadow quality is inversely proportional of the magnitude of this value')\r\n    @range([0.0, 2000.0, 0.1])\r\n    @slide\r\n    @type(CCFloat)\r\n    get shadowDistance (): number {\r\n        return this._shadowDistance;\r\n    }\r\n    set shadowDistance (val) {\r\n        this._shadowDistance = Math.min(val, Shadows.MAX_FAR);\r\n        if (this._shadowDistance / 0.1 < 10.0) { warnID(15003, this._shadowDistance); }\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowDistance = this._shadowDistance;\r\n            (this._light as scene.DirectionalLight).csmNeedUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The occlusion range for real time shadow.\r\n     * @zh 实时阴影计算中剔除阴影的范围\r\n    */\r\n    @tooltip('i18n:lights.shadowInvisibleOcclusionRange')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n        && getPipelineSceneData().shadows.type\r\n        === ShadowType.ShadowMap && this._shadowFixedArea === false\r\n        && this._csmAdvancedOptions;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 22 } })\r\n    @editable\r\n    @tooltip('if shadow has been culled, increase this value to fix it')\r\n    @range([0.0, 2000.0, 1.0])\r\n    @slide\r\n    @type(CCFloat)\r\n    get shadowInvisibleOcclusionRange (): number {\r\n        return this._shadowInvisibleOcclusionRange;\r\n    }\r\n    set shadowInvisibleOcclusionRange (val) {\r\n        this._shadowInvisibleOcclusionRange = Math.min(val, Shadows.MAX_FAR);\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowInvisibleOcclusionRange = this._shadowInvisibleOcclusionRange;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow CSM level\r\n     * @zh 获取或者设置阴影层级\r\n     */\r\n    @visible(false)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 10 } })\r\n    @editable\r\n    @tooltip('CSM Level')\r\n    @type(CSMLevel)\r\n    get csmLevel (): number {\r\n        return this._csmLevel;\r\n    }\r\n    set csmLevel (val) {\r\n        this._csmLevel = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).csmLevel = this._csmLevel;\r\n            (this._light as scene.DirectionalLight).csmNeedUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en enable csm\r\n     * @zh 开启或关闭 csm 模式\r\n     */\r\n    @tooltip('i18n:lights.enableCSM')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n        && getPipelineSceneData().shadows.type\r\n            === ShadowType.ShadowMap && this._shadowFixedArea === false;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 11 } })\r\n    @editable\r\n    @tooltip('enable CSM')\r\n    @type(CCBoolean)\r\n    get enableCSM (): boolean {\r\n        return this._csmLevel > CSMLevel.LEVEL_1;\r\n    }\r\n    set enableCSM (val) {\r\n        this._csmLevel = val ? CSMLevel.LEVEL_4 : CSMLevel.LEVEL_1;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).csmLevel = this._csmLevel;\r\n            (this._light as scene.DirectionalLight).csmNeedUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow CSM level ratio\r\n     * @zh 获取或者设置阴影层级系数\r\n     */\r\n    @visible(false)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 12 } })\r\n    @editable\r\n    @tooltip('CSM Level ratio')\r\n    @range([0.0, 1.0, 0.01])\r\n    @slide\r\n    @type(CCFloat)\r\n    get csmLayerLambda (): number {\r\n        return this._csmLayerLambda;\r\n    }\r\n    set csmLayerLambda (val) {\r\n        this._csmLayerLambda = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).csmLayerLambda = this._csmLayerLambda;\r\n            (this._light as scene.DirectionalLight).csmNeedUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow CSM performance optimization mode\r\n     * @zh 获取或者设置级联阴影性能优化模式\r\n     * @internal\r\n     */\r\n    @visible(false)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 13 } })\r\n    @editable\r\n    @tooltip('CSM Performance Optimization Mode')\r\n    @type(CSMOptimizationMode)\r\n    get csmOptimizationMode (): number {\r\n        return this._csmOptimizationMode;\r\n    }\r\n    set csmOptimizationMode (val) {\r\n        this._csmOptimizationMode = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).csmOptimizationMode = this._csmOptimizationMode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use fixed area shadow in real time shadow.\r\n     * @zh 实时阴影计算中是否使用固定区域阴影。\r\n     */\r\n    @tooltip('i18n:lights.shadowFixedArea')\r\n    @visible(() => getPipelineSceneData().shadows.enabled\r\n    && getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 14 } })\r\n    @editable\r\n    @type(CCBoolean)\r\n    get shadowFixedArea (): boolean {\r\n        return this._shadowFixedArea;\r\n    }\r\n    set shadowFixedArea (val) {\r\n        this._shadowFixedArea = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowFixedArea = this._shadowFixedArea;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The near clip plane of the shadow camera for fixed area shadow\r\n     * @zh 固定区域阴影设置中阴影相机近裁剪面\r\n     */\r\n    @tooltip('i18n:lights.shadowNear')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n        && getPipelineSceneData().shadows.type\r\n        === ShadowType.ShadowMap && this._shadowFixedArea === true;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 15 } })\r\n    @editable\r\n    @type(CCFloat)\r\n    get shadowNear (): number {\r\n        return this._shadowNear;\r\n    }\r\n    set shadowNear (val) {\r\n        this._shadowNear = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowNear = this._shadowNear;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The far clip plane of the shadow camera for fixed area shadow.\r\n     * @zh 固定区域阴影设置中阴影相机远裁剪面。\r\n     */\r\n    @tooltip('i18n:lights.shadowFar')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n        && getPipelineSceneData().shadows.type\r\n        === ShadowType.ShadowMap && this._shadowFixedArea === true;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 16 } })\r\n    @editable\r\n    @type(CCFloat)\r\n    get shadowFar (): number {\r\n        return this._shadowFar;\r\n    }\r\n    set shadowFar (val) {\r\n        this._shadowFar = Math.min(val, Shadows.MAX_FAR);\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowFar = this._shadowFar;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The orthogonal size of the shadow camera for fixed area shadow.\r\n     * @zh 固定区域阴影设置中阴影相机的正交尺寸\r\n     */\r\n    @tooltip('i18n:lights.shadowOrthoSize')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n        && getPipelineSceneData().shadows.type\r\n        === ShadowType.ShadowMap && this._shadowFixedArea === true;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 17 } })\r\n    @type(CCFloat)\r\n    get shadowOrthoSize (): number {\r\n        return this._shadowOrthoSize;\r\n    }\r\n    set shadowOrthoSize (val) {\r\n        this._shadowOrthoSize = val;\r\n        if (this._light) {\r\n            (this._light as scene.DirectionalLight).shadowOrthoSize = this._shadowOrthoSize;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Enabled shadow advanced options\r\n     * @zh 是否启用高级选项？\r\n     */\r\n    @tooltip('i18n:lights.shadowAdvancedOptions')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n         && getPipelineSceneData().shadows.type === ShadowType.ShadowMap\r\n         && this._csmLevel > CSMLevel.LEVEL_1;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 19 } })\r\n    @editable\r\n    @type(CCBoolean)\r\n    get csmAdvancedOptions (): boolean {\r\n        return this._csmAdvancedOptions;\r\n    }\r\n    set csmAdvancedOptions (val) {\r\n        this._csmAdvancedOptions = val;\r\n    }\r\n\r\n    /**\r\n     * @en Enabled csm layers transition\r\n     * @zh 是否启用级联阴影层级过渡？\r\n     */\r\n    @tooltip('i18n:lights.csmLayersTransition')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n         && getPipelineSceneData().shadows.type === ShadowType.ShadowMap\r\n         && this._csmLevel > CSMLevel.LEVEL_1\r\n         && this._csmAdvancedOptions;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 20 } })\r\n    @editable\r\n    @type(CCBoolean)\r\n    get csmLayersTransition (): boolean {\r\n        return this._csmLayersTransition;\r\n    }\r\n    set csmLayersTransition (val) {\r\n        this._csmLayersTransition = val;\r\n        if (this._light) { (this._light as scene.DirectionalLight).csmLayersTransition = val; }\r\n    }\r\n\r\n    /**\r\n     * @en get or set csm layers transition range\r\n     * @zh 获取或者设置级联阴影层级过渡范围？\r\n     */\r\n    @tooltip('i18n:lights.csmTransitionRange')\r\n    @visible(function (this: DirectionalLight) {\r\n        return getPipelineSceneData().shadows.enabled\r\n         && getPipelineSceneData().shadows.type === ShadowType.ShadowMap\r\n         && this._csmLevel > CSMLevel.LEVEL_1\r\n         && this._csmAdvancedOptions;\r\n    })\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 21 } })\r\n    @editable\r\n    @range([0.0, 1.0, 0.01])\r\n    @slide\r\n    @type(CCFloat)\r\n    get csmTransitionRange (): number {\r\n        return this._csmTransitionRange;\r\n    }\r\n    set csmTransitionRange (val) {\r\n        this._csmTransitionRange = val;\r\n        if (this._light) { (this._light as scene.DirectionalLight).csmTransitionRange = val; }\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._lightType = scene.DirectionalLight;\r\n\r\n        const highQualityMode = settings.querySettings(SettingsCategory.RENDERING, 'highQualityMode');\r\n\r\n        if (highQualityMode) {\r\n            this._shadowPcf = PCFType.SOFT_2X;\r\n            this._shadowDistance = 50;\r\n            this.enableCSM = true;\r\n            this.staticSettings.castShadow = true;\r\n        }\r\n    }\r\n\r\n    protected _createLight (): void {\r\n        super._createLight();\r\n        this._type = scene.LightType.DIRECTIONAL;\r\n        if (this._light) {\r\n            const dirLight = this._light as scene.DirectionalLight;\r\n            dirLight.illuminanceHDR = this._illuminanceHDR;\r\n            dirLight.illuminanceLDR = this._illuminanceLDR;\r\n            // shadow info\r\n            dirLight.shadowEnabled = this._shadowEnabled;\r\n            dirLight.shadowPcf = this._shadowPcf;\r\n            dirLight.shadowBias = this._shadowBias;\r\n            dirLight.shadowNormalBias = this._shadowNormalBias;\r\n            dirLight.shadowSaturation = this._shadowSaturation;\r\n            dirLight.shadowDistance = this._shadowDistance;\r\n            dirLight.shadowInvisibleOcclusionRange = this._shadowInvisibleOcclusionRange;\r\n            dirLight.shadowFixedArea = this._shadowFixedArea;\r\n            dirLight.shadowNear = this._shadowNear;\r\n            dirLight.shadowFar = this._shadowFar;\r\n            dirLight.shadowOrthoSize = this._shadowOrthoSize;\r\n            dirLight.csmLevel = this._csmLevel;\r\n            dirLight.csmLayerLambda = this._csmLayerLambda;\r\n            dirLight.csmOptimizationMode = this._csmOptimizationMode;\r\n            dirLight.csmLayersTransition = this._csmLayersTransition;\r\n            dirLight.csmTransitionRange = this._csmTransitionRange;\r\n        }\r\n    }\r\n\r\n    protected _onUpdateReceiveDirLight (): void {\r\n        if (!this._light) {\r\n            return;\r\n        }\r\n        super._onUpdateReceiveDirLight();\r\n\r\n        const scene = this.node.scene;\r\n        if (!scene || !scene.renderScene) {\r\n            return;\r\n        }\r\n        if (scene.renderScene.mainLight !== this._light) {\r\n            return;\r\n        }\r\n        const models = scene.renderScene.models;\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (!model.node) continue;\r\n            const meshRender = model.node.getComponent(MeshRenderer);\r\n            if (!meshRender) continue;\r\n            meshRender.onUpdateReceiveDirLight(this._visibility);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, help, executeInEditMode, menu, tooltip, type, displayOrder, serializable, formerlySerializedAs,\r\n    editable, slide, rangeMin, range } from 'cc.decorator';\r\nimport { scene } from '../../render-scene';\r\nimport { Light, PhotometricTerm } from './light-component';\r\nimport { CCFloat, CCInteger, cclegacy } from '../../core';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\n\r\n/**\r\n * @en The sphere light component, multiple sphere lights can be added to one scene.\r\n * @zh 球面光源组件，场景中可以添加多个球面光源。\r\n */\r\n@ccclass('cc.SphereLight')\r\n@help('i18n:cc.SphereLight')\r\n@menu('Light/SphereLight')\r\n@executeInEditMode\r\nexport class SphereLight extends Light {\r\n    @serializable\r\n    private _size = 0.15;\r\n    @serializable\r\n    @formerlySerializedAs('_luminance')\r\n    private _luminanceHDR = 1700 / scene.nt2lm(0.15);\r\n    @serializable\r\n    private _luminanceLDR = 1700 / scene.nt2lm(0.15) * Camera.standardExposureValue * Camera.standardLightMeterScale;\r\n    @serializable\r\n    private _term = PhotometricTerm.LUMINOUS_FLUX;\r\n    @serializable\r\n    private _range = 1;\r\n\r\n    /**\r\n     * @en Luminous flux of the light.\r\n     * @zh 光通量。\r\n     */\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:lights.luminous_flux')\r\n    @editable\r\n    @range([0, Number.POSITIVE_INFINITY, 100])\r\n    @type(CCInteger)\r\n    get luminousFlux (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR * scene.nt2lm(this._size);\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminousFlux (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        let result = 0;\r\n        if (isHDR) {\r\n            this._luminanceHDR = val / scene.nt2lm(this._size);\r\n            result = this._luminanceHDR;\r\n        } else {\r\n            this._luminanceLDR = val;\r\n            result = this._luminanceLDR;\r\n        }\r\n        this._light && ((this._light as scene.SphereLight).luminance = result);\r\n    }\r\n\r\n    /**\r\n     * @en Luminance of the light.\r\n     * @zh 光亮度。\r\n     */\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:lights.luminance')\r\n    @editable\r\n    @range([0, Number.POSITIVE_INFINITY, 10])\r\n    @type(CCInteger)\r\n    get luminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR;\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminance (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this._luminanceHDR = val;\r\n            this._light && ((this._light as scene.SphereLight).luminanceHDR = this._luminanceHDR);\r\n        } else {\r\n            this._luminanceLDR = val;\r\n            this._light && ((this._light as scene.SphereLight).luminanceLDR = this._luminanceLDR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The photometric term currently being used.\r\n     * @zh 当前使用的光度学计量单位。\r\n     */\r\n    @type(PhotometricTerm)\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:lights.term')\r\n    @editable\r\n    get term (): number {\r\n        return this._term;\r\n    }\r\n    set term (val) {\r\n        this._term = val;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Size of the light.\r\n     * @zh\r\n     * 光源大小。\r\n     */\r\n    @tooltip('i18n:lights.size')\r\n    @editable\r\n    @slide\r\n    @range([0.0, 10.0, 0.001])\r\n    @type(CCFloat)\r\n    get size (): number {\r\n        return this._size;\r\n    }\r\n    set size (val) {\r\n        this._size = val;\r\n        if (this._light) { (this._light as scene.SphereLight).size = val; }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Range of the light.\r\n     * @zh\r\n     * 光源范围。\r\n     */\r\n    @tooltip('i18n:lights.range')\r\n    @editable\r\n    @rangeMin(0)\r\n    @type(CCFloat)\r\n    get range (): number {\r\n        return this._range;\r\n    }\r\n    set range (val) {\r\n        this._range = val;\r\n        if (this._light) { (this._light as scene.SphereLight).range = val; }\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._lightType = scene.SphereLight;\r\n    }\r\n\r\n    protected _createLight (): void {\r\n        super._createLight();\r\n        this._type = scene.LightType.SPHERE;\r\n        this.size = this._size;\r\n        this.range = this._range;\r\n\r\n        if (this._light) {\r\n            (this._light as scene.SphereLight).luminanceHDR = this._luminanceHDR;\r\n            (this._light as scene.SphereLight).luminanceLDR = this._luminanceLDR;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { toRadian,  CCBoolean, CCFloat, _decorator } from '../../core';\r\nimport { scene } from '../../render-scene';\r\nimport { Light, PhotometricTerm } from './light-component';\r\nimport { Camera, PCFType, ShadowType } from '../../render-scene/scene';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\n\r\nconst { ccclass, range, slide, type, editable, displayOrder, help, executeInEditMode,\r\n    menu, tooltip, serializable, formerlySerializedAs, visible, property } = _decorator;\r\n\r\n/**\r\n * @en The spot light component, multiple spot lights can be added to one scene.\r\n * @zh 聚光灯光源组件，场景中可以添加多个聚光灯光源。\r\n */\r\n@ccclass('cc.SpotLight')\r\n@help('i18n:cc.SpotLight')\r\n@menu('Light/SpotLight')\r\n@executeInEditMode\r\nexport class SpotLight extends Light {\r\n    @serializable\r\n    private _size = 0.15;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('_luminance')\r\n    private _luminanceHDR = 1700 / scene.nt2lm(0.15);\r\n\r\n    @serializable\r\n    private _luminanceLDR = 1700 / scene.nt2lm(0.15) * Camera.standardExposureValue * Camera.standardLightMeterScale;\r\n\r\n    @serializable\r\n    private _term = PhotometricTerm.LUMINOUS_FLUX;\r\n\r\n    @serializable\r\n    private _range = 1;\r\n\r\n    @serializable\r\n    private _spotAngle = 60;\r\n\r\n    @serializable\r\n    private _angleAttenuationStrength = 0;\r\n\r\n    // Shadow map properties\r\n    @serializable\r\n    private _shadowEnabled = false;\r\n    @serializable\r\n    private _shadowPcf = PCFType.HARD;\r\n    @serializable\r\n    private _shadowBias = 0.00001;\r\n    @serializable\r\n    private _shadowNormalBias = 0.0;\r\n\r\n    /**\r\n     * @en Luminous flux of the light.\r\n     * @zh 光通量。\r\n     */\r\n    @tooltip('i18n:lights.luminous_flux')\r\n    @displayOrder(-1)\r\n    @range([0, Number.POSITIVE_INFINITY, 100])\r\n    get luminousFlux (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR * scene.nt2lm(this._size);\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n\r\n    set luminousFlux (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        let result = 0;\r\n        if (isHDR) {\r\n            this._luminanceHDR = val / scene.nt2lm(this._size);\r\n            result = this._luminanceHDR;\r\n        } else {\r\n            this._luminanceLDR = val;\r\n            result = this._luminanceLDR;\r\n        }\r\n        this._light && ((this._light as scene.SpotLight).luminance = result);\r\n    }\r\n\r\n    /**\r\n      * @en Luminance of the light.\r\n      * @zh 光亮度。\r\n      */\r\n    @tooltip('i18n:lights.luminance')\r\n    @displayOrder(-1)\r\n    @range([0, Number.POSITIVE_INFINITY, 10])\r\n    get luminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR;\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n\r\n    set luminance (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this._luminanceHDR = val;\r\n            this._light && ((this._light as scene.SpotLight).luminanceHDR = this._luminanceHDR);\r\n        } else {\r\n            this._luminanceLDR = val;\r\n            this._light && ((this._light as scene.SpotLight).luminanceLDR = this._luminanceLDR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The photometric term currently being used.\r\n     * @zh 当前使用的光度学计量单位。\r\n     */\r\n    @type(PhotometricTerm)\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:lights.term')\r\n    get term (): number {\r\n        return this._term;\r\n    }\r\n\r\n    set term (val) {\r\n        this._term = val;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Size of the light.\r\n     * @zh\r\n     * 光源大小。\r\n     */\r\n    @tooltip('i18n:lights.size')\r\n    @editable\r\n    @slide\r\n    @range([0.0, 10.0, 0.001])\r\n    @type(CCFloat)\r\n    get size (): number {\r\n        return this._size;\r\n    }\r\n\r\n    set size (val) {\r\n        this._size = val;\r\n        if (this._light) { (this._light as scene.SpotLight).size = val; }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Range of the light.\r\n     * @zh\r\n     * 光源范围。\r\n     */\r\n    @tooltip('i18n:lights.range')\r\n    get range (): number {\r\n        return this._range;\r\n    }\r\n\r\n    set range (val) {\r\n        this._range = val;\r\n        if (this._light) { (this._light as scene.SpotLight).range = val; }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The spot light cone angle.\r\n     * @zh\r\n     * 聚光灯锥角。\r\n     */\r\n    @slide\r\n    @range([2, 180, 1])\r\n    @tooltip('i18n:lights.spotAngle')\r\n    get spotAngle (): number {\r\n        return this._spotAngle;\r\n    }\r\n\r\n    set spotAngle (val) {\r\n        this._spotAngle = val;\r\n        if (this._light) { (this._light as scene.SpotLight).spotAngle = toRadian(val); }\r\n    }\r\n\r\n    /**\r\n     * @en The angle attenuation strength of the spot light.\r\n     * The larger the value, the softer the edge, and the smaller the value, the harder the edge.\r\n     * @zh 聚光灯角度衰减强度。值越大，边缘越柔和，值越小，边缘越硬。\r\n     */\r\n    @slide\r\n    @range([0, 1, 0.001])\r\n    @tooltip('i18n:lights.angleAttenuationStrength')\r\n    get angleAttenuationStrength (): number {\r\n        return this._angleAttenuationStrength;\r\n    }\r\n\r\n    set angleAttenuationStrength (val) {\r\n        this._angleAttenuationStrength = val;\r\n        if (this._light) { (this._light as scene.SpotLight).angleAttenuationStrength = val; }\r\n    }\r\n\r\n    /**\r\n     * @en Whether activate shadow\r\n     * @zh 是否启用阴影？\r\n     */\r\n    @tooltip('i18n:lights.shadowEnabled')\r\n    @visible(() => getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 1 } })\r\n    @editable\r\n    @type(CCBoolean)\r\n    get shadowEnabled (): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    set shadowEnabled (val) {\r\n        this._shadowEnabled = val;\r\n        if (this._light) {\r\n            (this._light as scene.SpotLight).shadowEnabled = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The pcf level of the shadow generation.\r\n     * @zh 获取或者设置阴影 pcf 等级。\r\n     */\r\n    @tooltip('i18n:lights.shadowPcf')\r\n    @visible(() => getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 2  } })\r\n    @editable\r\n    @type(PCFType)\r\n    get shadowPcf (): number {\r\n        return this._shadowPcf;\r\n    }\r\n    set shadowPcf (val) {\r\n        this._shadowPcf = val;\r\n        if (this._light) {\r\n            (this._light as scene.SpotLight).shadowPcf = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The depth offset of shadow to avoid moire pattern artifacts\r\n     * @zh 阴影的深度偏移, 可以减弱跨像素导致的条纹状失真\r\n     */\r\n    @tooltip('i18n:lights.shadowBias')\r\n    @visible(() => getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 3 } })\r\n    @editable\r\n    @type(CCFloat)\r\n    get shadowBias (): number {\r\n        return this._shadowBias;\r\n    }\r\n    set shadowBias (val) {\r\n        this._shadowBias = val;\r\n        if (this._light) {\r\n            (this._light as scene.SpotLight).shadowBias = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The normal bias of the shadow map.\r\n     * @zh 设置或者获取法线偏移。\r\n     */\r\n    @tooltip('i18n:lights.shadowNormalBias')\r\n    @visible(() => getPipelineSceneData().shadows.type === ShadowType.ShadowMap)\r\n    @property({ group: { name: 'DynamicShadowSettings', displayOrder: 4 } })\r\n    @editable\r\n    @type(CCFloat)\r\n    get shadowNormalBias (): number {\r\n        return this._shadowNormalBias;\r\n    }\r\n    set shadowNormalBias (val) {\r\n        this._shadowNormalBias = val;\r\n        if (this._light) {\r\n            (this._light as scene.SpotLight).shadowNormalBias = val;\r\n        }\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._lightType = scene.SpotLight;\r\n    }\r\n\r\n    protected _createLight (): void {\r\n        super._createLight();\r\n        this._type = scene.LightType.SPOT;\r\n        this.size = this._size;\r\n        this.range = this._range;\r\n        this.spotAngle = this._spotAngle;\r\n        this.angleAttenuationStrength = this._angleAttenuationStrength;\r\n\r\n        if (this._light) {\r\n            const spotLight = this._light as scene.SpotLight;\r\n            spotLight.luminanceHDR = this._luminanceHDR;\r\n            spotLight.luminanceLDR = this._luminanceLDR;\r\n            // shadow info\r\n            spotLight.shadowEnabled = this._shadowEnabled;\r\n            spotLight.shadowPcf = this._shadowPcf;\r\n            spotLight.shadowBias = this._shadowBias;\r\n            spotLight.shadowNormalBias = this._shadowNormalBias;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, help, executeInEditMode, menu, tooltip, type, displayOrder,\r\n    serializable, formerlySerializedAs, editable, rangeMin, range } from 'cc.decorator';\r\nimport { scene } from '../../render-scene';\r\nimport { Camera, LightType } from '../../render-scene/scene';\r\nimport { Light, PhotometricTerm } from './light-component';\r\nimport { CCFloat, CCInteger } from '../../core';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\n\r\n/**\r\n * @en The point light component, multiple point lights can be added to one scene.\r\n * @zh 点光源组件，场景中可以添加多个点光源。\r\n */\r\n@ccclass('cc.PointLight')\r\n@help('i18n:cc.PointLight')\r\n@menu('Light/PointLight')\r\n@executeInEditMode\r\nexport class PointLight extends Light {\r\n    @serializable\r\n    @formerlySerializedAs('_luminance')\r\n    private _luminanceHDR = 1700 / scene.nt2lm(0.15);\r\n    @serializable\r\n    private _luminanceLDR = 1700 / scene.nt2lm(0.15) * Camera.standardExposureValue * Camera.standardLightMeterScale;\r\n    @serializable\r\n    private _term = PhotometricTerm.LUMINOUS_FLUX;\r\n    @serializable\r\n    private _range = 1;\r\n\r\n    /**\r\n     * @en Luminous flux of the light.\r\n     * @zh 光通量。\r\n     */\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:lights.luminous_flux')\r\n    @editable\r\n    @range([0, Number.POSITIVE_INFINITY, 100])\r\n    @type(CCInteger)\r\n    get luminousFlux (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR * scene.nt2lm(1.0);\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminousFlux (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        let result = 0;\r\n        if (isHDR) {\r\n            this._luminanceHDR = val / scene.nt2lm(1.0);\r\n            result = this._luminanceHDR;\r\n        } else {\r\n            this._luminanceLDR = val;\r\n            result = this._luminanceLDR;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n        this._light && ((this._light as scene.PointLight).luminance = result);\r\n    }\r\n\r\n    /**\r\n     * @en Luminance of the light.\r\n     * @zh 光亮度。\r\n     */\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:lights.luminance')\r\n    @editable\r\n    @range([0, Number.POSITIVE_INFINITY, 10])\r\n    @type(CCInteger)\r\n    get luminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR;\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminance (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this._luminanceHDR = val;\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n            this._light && ((this._light as scene.PointLight).luminanceHDR = this._luminanceHDR);\r\n        } else {\r\n            this._luminanceLDR = val;\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\r\n            this._light && ((this._light as scene.PointLight).luminanceLDR = this._luminanceLDR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The photometric term currently being used.\r\n     * @zh 当前使用的光度学计量单位。\r\n     */\r\n    @type(PhotometricTerm)\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:lights.term')\r\n    @editable\r\n    get term (): number {\r\n        return this._term;\r\n    }\r\n    set term (val) {\r\n        this._term = val;\r\n    }\r\n\r\n    /**\r\n     * @en Range of the light.\r\n     * @zh 光源范围。\r\n     */\r\n    @tooltip('i18n:lights.range')\r\n    @editable\r\n    @rangeMin(0)\r\n    @type(CCFloat)\r\n    get range (): number {\r\n        return this._range;\r\n    }\r\n    set range (val) {\r\n        this._range = val;\r\n        if (this._light) { (this._light as scene.PointLight).range = val; }\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._lightType = scene.PointLight;\r\n    }\r\n\r\n    protected _createLight (): void {\r\n        super._createLight();\r\n        this._type = LightType.POINT;\r\n        this.range = this._range;\r\n\r\n        if (this._light) {\r\n            (this._light as scene.PointLight).luminanceHDR = this._luminanceHDR;\r\n            (this._light as scene.PointLight).luminanceLDR = this._luminanceLDR;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n http://www.cocos2d-x.org\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights\r\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n copies of the Software, and to permit persons to whom the Software is\r\n furnished to do so, subject to the following conditions:\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Light } from './light-component';\r\nimport { ccclass, help, property, menu, executeInEditMode, formerlySerializedAs, serializable,\r\n    tooltip, editable, type } from '../../core/data/class-decorator';\r\nimport { Camera, LightType } from '../../render-scene/scene';\r\nimport { scene } from '../../render-scene';\r\nimport { CCInteger, cclegacy } from '../../core';\r\nimport { range } from '../../core/data/decorators';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\n\r\n/**\r\n * @en The ranged directional light component, Multiple ranged directional light sources are allowed in a scene.\r\n * @zh 范围平行光光源组件，一个场景允许存在多个范围平行光光源。\r\n */\r\n@ccclass('cc.RangedDirectionalLight')\r\n@help('i18n:cc.RangedDirectionalLight')\r\n@menu('Light/RangedDirectionalLight')\r\n@executeInEditMode\r\nexport class RangedDirectionalLight extends Light {\r\n    @property\r\n    @formerlySerializedAs('_illuminance')\r\n    private _illuminanceHDR = 65000;\r\n\r\n    @serializable\r\n    private _illuminanceLDR = 65000 * Camera.standardExposureValue;\r\n\r\n    /**\r\n     * @en The light source intensity.\r\n     * @zh 光源强度。\r\n     */\r\n    @tooltip('i18n:lights.illuminance')\r\n    @editable\r\n    @range([0, Number.POSITIVE_INFINITY, 10])\r\n    @type(CCInteger)\r\n    get illuminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._illuminanceHDR;\r\n        } else {\r\n            return this._illuminanceLDR;\r\n        }\r\n    }\r\n    set illuminance (val) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this._illuminanceHDR = val;\r\n            this._light && ((this._light as scene.RangedDirectionalLight).illuminanceHDR = this._illuminanceHDR);\r\n        } else {\r\n            this._illuminanceLDR = val;\r\n            this._light && ((this._light as scene.RangedDirectionalLight).illuminanceLDR = this._illuminanceLDR);\r\n        }\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._lightType = scene.RangedDirectionalLight;\r\n    }\r\n\r\n    protected _createLight (): void {\r\n        super._createLight();\r\n        this._type = LightType.RANGED_DIRECTIONAL;\r\n        if (this._light) {\r\n            (this._light as scene.RangedDirectionalLight).illuminanceHDR = this._illuminanceHDR;\r\n            (this._light as scene.RangedDirectionalLight).illuminanceLDR = this._illuminanceLDR;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Light } from './light-component';\r\nimport { SpotLight } from './spot-light-component';\r\nimport { SphereLight } from './sphere-light-component';\r\nimport { DirectionalLight } from './directional-light-component';\r\nimport { cclegacy, js, replaceProperty } from '../../core';\r\n\r\n/**\r\n * Alias of [[Light]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { Light as LightComponent };\r\ncclegacy.LightComponent = Light;\r\njs.setClassAlias(Light, 'cc.LightComponent');\r\n/**\r\n * Alias of [[DirectionalLight]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { DirectionalLight as DirectionalLightComponent };\r\ncclegacy.DirectionalLightComponent = DirectionalLight;\r\njs.setClassAlias(DirectionalLight, 'cc.DirectionalLightComponent');\r\n/**\r\n * Alias of [[SphereLight]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { SphereLight as SphereLightComponent };\r\ncclegacy.SphereLightComponent = SphereLight;\r\njs.setClassAlias(SphereLight, 'cc.SphereLightComponent');\r\n/**\r\n * Alias of [[SpotLight]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { SpotLight as SpotLightComponent };\r\ncclegacy.SpotLightComponent = SpotLight;\r\njs.setClassAlias(SpotLight, 'cc.SpotLightComponent');\r\n\r\nreplaceProperty(SpotLight.prototype, 'SpotLight.prototype', [\r\n    {\r\n        name: 'luminousPower',\r\n        newName: 'luminousFlux',\r\n        customGetter (this: SpotLight): number {\r\n            return this.luminousFlux;\r\n        },\r\n        customSetter (this: SpotLight, value: number): void {\r\n            this.luminousFlux = value;\r\n        },\r\n    },\r\n]);\r\n\r\nreplaceProperty(SphereLight.prototype, 'SphereLight.prototype', [\r\n    {\r\n        name: 'luminousPower',\r\n        newName: 'luminousFlux',\r\n        customGetter (this: SpotLight): number {\r\n            return this.luminousFlux;\r\n        },\r\n        customSetter (this: SpotLight, value: number): void {\r\n            this.luminousFlux = value;\r\n        },\r\n    },\r\n]);\r\n\r\nreplaceProperty(Light.PhotometricTerm, 'Light.PhotometricTerm', [\r\n    {\r\n        name: 'LUMINOUS_POWER',\r\n        newName: 'LUMINOUS_FLUX',\r\n    },\r\n]);\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { EDITOR, JSB } from 'internal:constants';\r\nimport { ccclass, editable, executeInEditMode, menu, serializable, type } from 'cc.decorator';\r\nimport { Vec3, Mat4, geometry, CCInteger, CCFloat, warn, error } from '../../core';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { Component } from '../../scene-graph/component';\r\nimport { MeshRenderer } from '../framework/mesh-renderer';\r\nimport { Mesh } from '../assets/mesh';\r\nimport { scene } from '../../render-scene';\r\nimport { NodeEventType } from '../../scene-graph/node-event';\r\nimport type { LODData } from '../../render-scene/scene';\r\n\r\n// Ratio of objects occupying the screen\r\nconst DEFAULT_SCREEN_OCCUPATION: number[] = [0.25, 0.125, 0.01];\r\n\r\nexport type ModelAddedCallback = () => void;\r\n@ccclass('cc.LOD')\r\nexport class LOD {\r\n    // Minimum percentage of screen usage for the current lod in effect, range in [0, 1]\r\n    @serializable\r\n    protected _screenUsagePercentage = 1.0;\r\n    // Mesh renderers components contained in this LOD level.\r\n    @type([MeshRenderer])\r\n    @serializable\r\n    protected _renderers: MeshRenderer[] = [];\r\n    // renderer internal LOD data block.\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    private _LODData: scene.LODData = new scene.LODData();\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    private _modelAddedCallback: ModelAddedCallback | null;\r\n\r\n    constructor () {\r\n        this._LODData.screenUsagePercentage = this._screenUsagePercentage;\r\n        this._modelAddedCallback = null;\r\n    }\r\n\r\n    /**\r\n     * @en Minimum percentage of screen usage for the current lod in effect, range in [0, 1]\r\n     * @zh 本层级生效时，占用屏幕的最小百分比, 取值范围[0, 1]\r\n     */\r\n    @type(CCFloat)\r\n    get screenUsagePercentage (): number { return this._screenUsagePercentage; }\r\n    set screenUsagePercentage (val: number) {\r\n        this._screenUsagePercentage = val;\r\n        this._LODData.screenUsagePercentage = val;\r\n    }\r\n\r\n    /**\r\n     * @en Get the list of [[MeshRenderer]] used by the current lod.\r\n     * @zh 获取当前lod使用的 [[MeshRenderer]] 列表\r\n     */\r\n    @type([MeshRenderer])\r\n    get renderers (): readonly MeshRenderer[]  {\r\n        return this._renderers;\r\n    }\r\n\r\n    /**\r\n     * @en reset _renderers to meshList or [], LODData's model will be reset too.\r\n     * @zh 重置 _renderers 为 meshList或空数组, LODData上的model也会被重置\r\n     */\r\n    set renderers (meshList: readonly MeshRenderer[]) {\r\n        if (meshList === this._renderers) return;\r\n        let modelAdded = false;\r\n        this._renderers.length = 0;\r\n        this._LODData.clearModels();\r\n        for (let i = 0; i < meshList.length; i++) {\r\n            this._renderers[i] = meshList[i];\r\n            const model = meshList[i]?.model;\r\n            if (model) {\r\n                modelAdded = true;\r\n                this._LODData.addModel(model);\r\n            }\r\n        }\r\n        if (this._modelAddedCallback && modelAdded) {\r\n            this._modelAddedCallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @en Get the total number of all mesh's triangle.\r\n     * @zh 获取所有模型的三角形总数\r\n     */\r\n    @editable\r\n    @type([CCInteger])\r\n    get triangleCount (): number[] {\r\n        const tris: number[] = [];\r\n        this._renderers.forEach((meshRenderer: MeshRenderer | null) => {\r\n            let count = 0;\r\n            if (meshRenderer && meshRenderer.mesh) {\r\n                const primitives = meshRenderer.mesh.struct.primitives;\r\n                primitives?.forEach((subMesh: Mesh.ISubMesh) => {\r\n                    if (subMesh && subMesh.indexView) {\r\n                        count += subMesh.indexView.count;\r\n                    }\r\n                });\r\n            }\r\n            tris.push(count / 3);\r\n        });\r\n        return tris;\r\n    }\r\n\r\n    /**\r\n     * @en Get the number of LOD.\r\n     * @zh 获取LOD的数量\r\n     */\r\n    get rendererCount (): number { return this._renderers.length; }\r\n\r\n    /**\r\n      * @engineInternal\r\n      * @en Get internal LOD object.\r\n      */\r\n    get lodData (): LODData { return this._LODData; }\r\n\r\n    /**\r\n      * @engineInternal\r\n      */\r\n    set modelAddedCallback (callback: ModelAddedCallback) {\r\n        this._modelAddedCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * @en Insert a [[MeshRenderer]] before specific index position.\r\n     * @zh 在指定的数组索引处插入一个[[MeshRenderer]]\r\n     * @param index @en The rendering array is indexed from 0. If - 1 is passed, it will be added to the end of the list.\r\n     * @zh renderers数组从0开始索引，若传递-1将会被添加到列表末尾。\r\n     * @param renderer @en The mesh-renderer object. @zh [[MeshRenderer]] 对象\r\n     * @returns @en The inserted [[MeshRenderer]] @zh 返回被插入的 [[MeshRenderer]] 对象\r\n     */\r\n    public insertRenderer (index: number, renderer: MeshRenderer): MeshRenderer {\r\n        // make sure insert at the tail of the list.\r\n        if (index < 0 || index > this._renderers.length) {\r\n            index = this._renderers.length;\r\n        }\r\n        this._renderers.splice(index, 0, renderer);\r\n        let modelAdded = false;\r\n        if (renderer.model) {\r\n            modelAdded = true;\r\n            this._LODData.addModel(renderer.model);\r\n        }\r\n        if (this._modelAddedCallback && modelAdded) {\r\n            this._modelAddedCallback();\r\n        }\r\n        return renderer;\r\n    }\r\n\r\n    /**\r\n     * @en Delete the [[MeshRenderer]] at specific index position.\r\n     * @zh 删除指定索引处的[[MeshRenderer]]\r\n     * @param index @en 0 indexed position in renderer array, when -1 is specified, the last element will be deleted.\r\n     * @zh _renderers从0开始索引，传递-1则最后一个元素会被删除。\r\n     * @returns @en The deleted [[MeshRenderer]], or null if the specified index does not exist. @zh 如果指定索引处的对象存在，返回被删除对象否则返回null。\r\n     */\r\n    public deleteRenderer (index: number): MeshRenderer | null {\r\n        const renders = this._renderers.splice(index, 1);\r\n        const model = renders.length > 0 ? renders[0]?.model : null;\r\n        if (model) {\r\n            this._LODData.eraseModel(model);\r\n        }\r\n\r\n        return renders[0];\r\n    }\r\n\r\n    /**\r\n     * @en Get the [[MeshRenderer]] at specific index position.\r\n     * @zh 获取指定索引处的[[MeshRenderer]]\r\n     * @param index @en Value range from 0 to _renderers's length. @zh 取值范围是[0, _renderers长度]\r\n     * @return @en Returns the [[MeshRenderer]] at the specified index, or null if the specified index does not exist. @zh 返回指定索引处的对象，若不存在则返回null。\r\n     */\r\n    public getRenderer (index: number): MeshRenderer | null {\r\n        return this._renderers[index] || null;\r\n    }\r\n\r\n    /**\r\n     * @en Update the [[MeshRenderer]] at specific index position.\r\n     * @zh 更新指定索引处的 [[MeshRenderer]]\r\n     * @param index @en Value range from 0 to _renderers's length @zh 取值范围是 [0, _renderers数组长度]\r\n     */\r\n    public setRenderer (index: number, renderer: MeshRenderer): void {\r\n        if (index < 0 || index >= this.rendererCount) {\r\n            error('setRenderer to LOD error, index out of range');\r\n            return;\r\n        }\r\n        this.deleteRenderer(index);\r\n        this.insertRenderer(index, renderer);\r\n    }\r\n}\r\n\r\n@ccclass('cc.LODGroup')\r\n@menu('Rendering/LOD Group')\r\n@executeInEditMode\r\nexport class LODGroup extends Component {\r\n    /**\r\n     * @en Object reference point in local space, e.g. center of the bound volume for all LODs\r\n     */\r\n    @serializable\r\n    protected _localBoundaryCenter: Vec3 = new Vec3(0, 0, 0);\r\n\r\n    /**\r\n     * @en Object Size in local space, may be auto-calculated value from object bounding box or value from user input.\r\n     */\r\n    @serializable\r\n    protected _objectSize = 0;\r\n\r\n    /**\r\n     *@en The array of LODs\r\n     */\r\n    @serializable\r\n    protected _LODs: LOD[] = [];\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    protected _lodGroup = new scene.LODGroup();\r\n\r\n    private _eventRegistered = false;\r\n\r\n    private _forceUsedLevels: number[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set localBoundaryCenter (val: Readonly<Vec3>) {\r\n        this._localBoundaryCenter.set(val);\r\n        this._lodGroup.localBoundaryCenter = val;\r\n    }\r\n\r\n    /**\r\n     * @en Obtain the center point of AABB composed of all models\r\n     * @zh 获取所有模型组成的AABB的中心点\r\n     */\r\n    get localBoundaryCenter (): Readonly<Vec3> { return this._localBoundaryCenter.clone(); }\r\n\r\n    /**\r\n     * @en Obtain LOD level numbers.\r\n     * @zh 获取LOD层级数\r\n     */\r\n    get lodCount (): number { return this._LODs.length; }\r\n\r\n    /**\r\n     * @en Set current AABB's size.\r\n     * @zh 设置当前包围盒的大小\r\n     */\r\n    @type(CCFloat)\r\n    set objectSize (val: number) {\r\n        this._objectSize = val;\r\n        this._lodGroup.objectSize = val;\r\n    }\r\n\r\n    /**\r\n     * @en Get current AABB's size.\r\n     * @zh 获取当前包围盒的大小\r\n     */\r\n    get objectSize (): number { return this._objectSize; }\r\n\r\n    /**\r\n     * @en Get LOD array config.\r\n     * @zh 获取 LOD 数组\r\n     */\r\n    @type([LOD])\r\n    get LODs (): readonly LOD[] {\r\n        return this._LODs;\r\n    }\r\n\r\n    /**\r\n     * @en Reset current LODs to new value.\r\n     * @ 重置 LODs 为当前新设置的值。\r\n     */\r\n    set LODs (valArray: readonly LOD[]) {\r\n        if (valArray === this._LODs) {\r\n            //_LODs maybe changed, we need to notify the scene to update.\r\n            this._updateDataToScene();\r\n            return;\r\n        }\r\n        this._LODs.length = 0;\r\n        this.lodGroup.clearLODs();\r\n        valArray.forEach((lod: LOD, index: number) => {\r\n            this.lodGroup.insertLOD(index, lod.lodData);\r\n            this._LODs[index] = lod;\r\n            lod.modelAddedCallback = this.onLodModelAddedCallback.bind(this);\r\n        });\r\n        //_LODs has been changed, we need to notify the scene to update.\r\n        this._updateDataToScene();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    get lodGroup (): scene.LODGroup { return this._lodGroup; }\r\n\r\n    private onLodModelAddedCallback (): void {\r\n        if (this.objectSize === 0) {\r\n            this.recalculateBounds();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Insert the [[LOD]] at specific index position, [[LOD]] will be inserted to the last position if index less than 0 or greater than lodCount.\r\n     * @zh 在指定索引处插入 [[LOD]], 若索引为负或超过lodCount，则在末尾添加\r\n     * @param index @en location where lod is added. @zh lod被插入的位置\r\n     * @param screenUsagePercentage @en The minimum screen usage percentage that the currently set lod starts to use, range in[0, 1].\r\n     * @zh lod生效时的最低屏幕显示百分比要求，取值范围[0, 1]\r\n     * @param lod @en If this parameter is not set, it will be created by default. @zh 如果参数没传，则内部创建\r\n     * @returns @en The new lod added. @zh 返回被添加的lod\r\n     */\r\n    public insertLOD (index: number, screenUsagePercentage?: number, lod?: LOD): LOD {\r\n        if (index < 0 || index > this.lodCount) {\r\n            index = this.lodCount;\r\n        }\r\n\r\n        if (!lod) {\r\n            lod = new LOD();\r\n        }\r\n        lod.modelAddedCallback = this.onLodModelAddedCallback.bind(this);\r\n        if (!screenUsagePercentage) {\r\n            const preLod = this.getLOD(index - 1);\r\n            const nextLod = this.getLOD(index);\r\n            if (preLod && nextLod) {\r\n                screenUsagePercentage = (preLod.screenUsagePercentage + nextLod.screenUsagePercentage) / 2;\r\n            } else if (preLod && !nextLod) { // insert at last position\r\n                screenUsagePercentage = preLod.screenUsagePercentage / 2;\r\n                if (screenUsagePercentage > 0.01) {\r\n                    screenUsagePercentage = 0.01;\r\n                }\r\n            } else if (nextLod && !preLod) {\r\n                //insert at first position\r\n                screenUsagePercentage = nextLod.screenUsagePercentage;\r\n                const curNextLOD = this.getLOD(index + 1);\r\n                nextLod.screenUsagePercentage = (screenUsagePercentage + (curNextLOD ? curNextLOD.screenUsagePercentage : 0)) / 2;\r\n            } else { //lod count is zero\r\n                screenUsagePercentage = DEFAULT_SCREEN_OCCUPATION[0];\r\n            }\r\n        }\r\n        lod.screenUsagePercentage = screenUsagePercentage;\r\n        this._LODs.splice(index, 0, lod);\r\n        this._lodGroup.insertLOD(index, lod.lodData);\r\n        this._updateDataToScene();\r\n        if (this.node) {\r\n            this._emitChangeNode(this.node);\r\n        }\r\n        return lod;\r\n    }\r\n\r\n    /**\r\n     * @en Erase the [[LOD]] at specific index position.\r\n     * @zh 删除指定索引处的 [[LOD]]\r\n     * @param index @en Index of the erased lod, range in [0, lodCount]. @zh 被删除对象索引, 取值范围[0, lodCount]\r\n     * @returns @en Erased lod. @zh 被删除的对象\r\n     */\r\n    public eraseLOD (index: number): LOD | null {\r\n        if (index < 0 || index >= this.lodCount) {\r\n            warn('eraseLOD error, index out of range');\r\n            return null;\r\n        }\r\n        const lod = this._LODs[index];\r\n        if (!lod) {\r\n            warn('eraseLOD error, LOD not exist at specified index.');\r\n            return null;\r\n        }\r\n        this._LODs.splice(index, 1);\r\n        this._lodGroup.eraseLOD(index);\r\n        this._updateDataToScene();\r\n        this._emitChangeNode(this.node);\r\n        return lod;\r\n    }\r\n\r\n    /**\r\n     * @en Get [[LOD]] at specific index position.\r\n     * @zh 获取指定索引处的 [[LOD]]\r\n     * @param index @en Range in [0, lodCount]. @zh 取值范围[0, lodCount]\r\n     * @returns @en Lod at specified index, or null. @zh 返回指定索引的lod或null\r\n     */\r\n    public getLOD (index: number): LOD | null {\r\n        if (index < 0 || index >= this.lodCount) {\r\n            warn('getLOD error, index out of range');\r\n            return null;\r\n        }\r\n        return this._LODs[index];\r\n    }\r\n\r\n    /**\r\n     * @en Update the [[LOD]] at specific index position.\r\n     * @zh 更新指定索引处的 [[LOD]]\r\n     * @param index, update lod at specified index.\r\n     * @param lod, the updated lod.\r\n     */\r\n    public setLOD (index: number, lod: LOD): void {\r\n        if (index < 0 || index >= this.lodCount) {\r\n            warn('setLOD error, index out of range');\r\n            return;\r\n        }\r\n        this._LODs[index] = lod;\r\n        lod.modelAddedCallback = this.onLodModelAddedCallback.bind(this);\r\n        this.lodGroup.updateLOD(index, lod.lodData);\r\n        this._updateDataToScene();\r\n    }\r\n\r\n    /**\r\n     * @en Recalculate the bounding box, and the interface will recalculate the localBoundaryCenter and objectSize\r\n     * @zh 重新计算包围盒，该接口会更新 localBoundaryCenter 和 objectSize\r\n     */\r\n    public recalculateBounds (): void {\r\n        function getTransformedBoundary (c: /* center */Vec3, e: /*extents*/Vec3, transform: Mat4): [Vec3, Vec3] {\r\n            let minPos: Vec3;\r\n            let maxPos: Vec3;\r\n\r\n            const pts = new Array<Vec3>(\r\n                new Vec3(c.x - e.x, c.y - e.y, c.z - e.z),\r\n                new Vec3(c.x - e.x, c.y + e.y, c.z - e.z),\r\n                new Vec3(c.x + e.x, c.y + e.y, c.z - e.z),\r\n                new Vec3(c.x + e.x, c.y - e.y, c.z - e.z),\r\n                new Vec3(c.x - e.x, c.y - e.y, c.z + e.z),\r\n                new Vec3(c.x - e.x, c.y + e.y, c.z + e.z),\r\n                new Vec3(c.x + e.x, c.y + e.y, c.z + e.z),\r\n                new Vec3(c.x + e.x, c.y - e.y, c.z + e.z),\r\n            );\r\n\r\n            minPos = pts[0].transformMat4(transform);\r\n            maxPos = minPos.clone();\r\n            for (let i = 1; i < 8; ++i) {\r\n                const pt = pts[i].transformMat4(transform);\r\n                minPos = Vec3.min(minPos, minPos, pt);\r\n                maxPos = Vec3.max(maxPos, maxPos, pt);\r\n            }\r\n            return [minPos, maxPos];\r\n        }\r\n\r\n        const minPos = new Vec3();\r\n        const maxPos = new Vec3();\r\n        let boundsMin: Vec3 | null = null;\r\n        let boundsMax: Vec3 = new Vec3();\r\n\r\n        for (let i = 0; i < this.lodCount; ++i) {\r\n            const lod = this.getLOD(i);\r\n            if (lod) {\r\n                for (let j = 0; j < lod.rendererCount; ++j) {\r\n                    const renderer = lod.getRenderer(j);\r\n                    if (!renderer) {\r\n                        continue;\r\n                    }\r\n                    renderer.model?.updateWorldBound();\r\n                    let worldBounds = renderer.model?.worldBounds;\r\n                    if (worldBounds) {\r\n                        if (JSB) {\r\n                            const center = worldBounds.center;\r\n                            const halfExtents = worldBounds.halfExtents;\r\n                            worldBounds = geometry.AABB.create(center.x, center.y, center.z, halfExtents.x, halfExtents.y, halfExtents.z);\r\n                        }\r\n                        worldBounds.getBoundary(minPos, maxPos);\r\n\r\n                        if (boundsMin) {\r\n                            Vec3.min(boundsMin, boundsMin, minPos);\r\n                            Vec3.max(boundsMax, boundsMax, maxPos);\r\n                        } else {\r\n                            boundsMin = minPos.clone();\r\n                            boundsMax = maxPos.clone();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (boundsMin) {\r\n            // Transform world bounds to local space bounds\r\n            const boundsMin2 = boundsMin;\r\n            const c = new Vec3((boundsMax.x + boundsMin2.x) * 0.5, (boundsMax.y + boundsMin2.y) * 0.5, (boundsMax.z + boundsMin2.z) * 0.5);\r\n            const e = new Vec3((boundsMax.x - boundsMin2.x) * 0.5, (boundsMax.y - boundsMin2.y) * 0.5, (boundsMax.z - boundsMin2.z) * 0.5);\r\n\r\n            const [minPos, maxPos] = getTransformedBoundary(c, e, this.node.worldMatrix.clone().invert());\r\n\r\n            // Set bounding volume center and extents in local space\r\n            c.set((maxPos.x + minPos.x) * 0.5, (maxPos.y + minPos.y) * 0.5, (maxPos.z + minPos.z) * 0.5);\r\n            e.set((maxPos.x - minPos.x) * 0.5, (maxPos.y - minPos.y) * 0.5, (maxPos.z - minPos.z) * 0.5);\r\n\r\n            // Save the result\r\n            this.localBoundaryCenter = c;\r\n            this.objectSize = Math.max(e.x, e.y, e.z) * 2.0;\r\n        } else {\r\n            // No model exists, reset to default value\r\n            this.localBoundaryCenter = new Vec3(0, 0, 0);\r\n            this.objectSize = 0;\r\n        }\r\n        this._emitChangeNode(this.node);\r\n    }\r\n\r\n    /**\r\n     * @en reset current objectSize to 1, and recalculate screenUsagePercentage.\r\n     * @zh 重置 objectSize 的大小为1，该接口会重新计算 screenUsagePercentage\r\n     */\r\n    public resetObjectSize (): void {\r\n        if (this.objectSize === 1.0) return;\r\n\r\n        if (this.objectSize === 0) {\r\n            this.objectSize = 1.0;\r\n        }\r\n\r\n        // 1 will be new object size\r\n        const scale = 1.0 / this.objectSize;\r\n        // reset object size to 1\r\n        this.objectSize = 1.0;\r\n\r\n        for (let i = 0; i < this.lodCount; ++i) {\r\n            const lod = this.getLOD(i);\r\n            if (lod) {\r\n                lod.screenUsagePercentage *= scale;\r\n            }\r\n        }\r\n        this._emitChangeNode(this.node);\r\n    }\r\n\r\n    /**\r\n     * @zh 强制使用某一级的LOD\r\n     * @en Force LOD level to use.\r\n     * lodLevel @en The LOD level to use. Passing lodLevel < 0 will return to standard LOD processing. @zh 要使用的LOD层级，为负数时使用标准的处理流程\r\n     */\r\n    public forceLOD (lodLevel: number): void {\r\n        this._forceUsedLevels = lodLevel < 0 ? [] : [lodLevel];\r\n        this.lodGroup.lockLODLevels(this._forceUsedLevels);\r\n    }\r\n\r\n    /**\r\n     * @en Force multi LOD level to use, This function is only called in editor.<br/>\r\n     * @zh 强制使用某几级的LOD,该接口只会在编辑器下调用。\r\n     * lodIndexArray @en The LOD level array. Passing [] will return to standard LOD processing. @zh 要使用的LOD层级数组，传[]时将使用标准的处理流程。\r\n     */\r\n    public forceLODs (lodIndexArray: number[]): void {\r\n        if (EDITOR) {\r\n            this._forceUsedLevels = lodIndexArray.slice();\r\n            this.lodGroup.lockLODLevels(this._forceUsedLevels);\r\n        }\r\n    }\r\n\r\n    onLoad (): void {\r\n        this._lodGroup.node = this.node;\r\n        // objectSize maybe initialized from deserialize\r\n        this._lodGroup.objectSize = this._objectSize;\r\n        this._lodGroup.localBoundaryCenter = this._localBoundaryCenter;\r\n        if (!this._eventRegistered) {\r\n            this.node.on(NodeEventType.COMPONENT_REMOVED, this._onRemove, this);\r\n            this._eventRegistered = true;\r\n        }\r\n        this._constructLOD();\r\n    }\r\n\r\n    _onRemove (comp: Component): void {\r\n        if (comp === this) {\r\n            this.onDisable();\r\n        }\r\n    }\r\n\r\n    private _constructLOD (): void {\r\n        // generate default lod for lodGroup\r\n        if (this.lodCount < 1) {\r\n            const size = DEFAULT_SCREEN_OCCUPATION.length;\r\n            for (let i = 0; i < size; i++) {\r\n                this.insertLOD(i, DEFAULT_SCREEN_OCCUPATION[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Redo, Undo, Prefab restore, etc.\r\n    onRestore (): void {\r\n        this._constructLOD();\r\n        if (this.enabledInHierarchy) {\r\n            this._attachToScene();\r\n        }\r\n    }\r\n\r\n    onEnable (): void {\r\n        this._attachToScene();\r\n        if (this.objectSize === 0) {\r\n            this.recalculateBounds();\r\n        }\r\n        this.lodGroup.lockLODLevels(this._forceUsedLevels);\r\n\r\n        // cache lod for scene\r\n        if (this.lodCount > 0 && this._lodGroup.lodCount < 1) {\r\n            this._LODs.forEach((lod: LOD, index) => {\r\n                lod.lodData.screenUsagePercentage = lod.screenUsagePercentage;\r\n                const renderers = lod.renderers;\r\n                if (renderers !== null && renderers.length > 0) {\r\n                    for (let i = 0; i < renderers.length; i++) {\r\n                        const lodInstance = lod.lodData;\r\n                        const renderer = renderers[i];\r\n                        if (lodInstance && renderer && renderer.model) {\r\n                            lodInstance.addModel(renderer.model);\r\n                        }\r\n                    }\r\n                }\r\n                this._lodGroup.insertLOD(index, lod.lodData);\r\n            });\r\n        }\r\n    }\r\n\r\n    onDisable (): void {\r\n        this._detachFromScene();\r\n        this.lodGroup.lockLODLevels([]);\r\n    }\r\n\r\n    private _attachToScene (): void {\r\n        if (this.node && this.node.scene) {\r\n            const renderScene = this._getRenderScene();\r\n            if (this._lodGroup.scene) {\r\n                this._detachFromScene();\r\n            }\r\n            renderScene.addLODGroup(this._lodGroup);\r\n        }\r\n    }\r\n\r\n    private _detachFromScene (): void {\r\n        if (this._lodGroup.scene) { this._lodGroup.scene.removeLODGroup(this._lodGroup); }\r\n    }\r\n\r\n    private _emitChangeNode (node: Node): void {\r\n        if (EDITOR) {\r\n            EditorExtends.Node.emit('change', node.uuid, node);\r\n        }\r\n    }\r\n\r\n    private _updateDataToScene (): void {\r\n        this._detachFromScene();\r\n        this._attachToScene();\r\n    }\r\n}\r\n","/* eslint-disable max-len */\r\n/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { MeshRenderer } from '../framework/mesh-renderer';\r\nimport { ReflectionProbeType } from './reflection-probe-enum';\r\nimport { ImageAsset, Texture2D } from '../../asset/assets';\r\nimport { TextureFilter, PixelFormat, WrapMode } from '../../asset/assets/asset-enum';\r\nimport { Vec3, geometry, cclegacy } from '../../core';\r\nimport { AABB } from '../../core/geometry';\r\nimport { Texture } from '../../gfx';\r\nimport { Camera, Model } from '../../render-scene/scene';\r\nimport { ProbeType, ReflectionProbe } from '../../render-scene/scene/reflection-probe';\r\nimport { Layers } from '../../scene-graph/layers';\r\nimport { ENABLE_PROBE_BLEND } from '../../rendering/define';\r\n\r\nconst REFLECTION_PROBE_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.UI_3D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR,\r\n    Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER, Layers.Enum.IGNORE_RAYCAST]);\r\nexport class ReflectionProbeManager {\r\n    public static probeManager: ReflectionProbeManager;\r\n    private _probes: ReflectionProbe[] = [];\r\n    /**\r\n     * @en\r\n     * All models in the scene that use cube type reflection probe.\r\n     * @zh\r\n     * 场景中所有使用cube类型反射探针的模型\r\n     */\r\n    private _useCubeModels = new Map<Model, ReflectionProbe>();\r\n\r\n    /**\r\n     * @en\r\n     * All models in the scene that use planar type reflection probe.\r\n     * @zh\r\n     * 场景中所有使用planar类型反射探针的模型\r\n     */\r\n    private _usePlanarModels = new Map<Model, ReflectionProbe>();\r\n    private _updateForRuntime = true;\r\n    private _dataTexture: Texture2D | null = null;\r\n    private _registeredEvent = false;\r\n    /**\r\n     * @en Set and get whether to detect objects leaving or entering the reflection probe's bounding box at runtime.\r\n     * @zh 设置和获取是否在运行时检测物体离开或者进入反射探针的包围盒。\r\n     */\r\n    set updateForRuntime (val: boolean) {\r\n        this._updateForRuntime = val;\r\n    }\r\n\r\n    get updateForRuntime (): boolean {\r\n        return this._updateForRuntime;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public registerEvent (): void {\r\n        if (!this._registeredEvent) {\r\n            cclegacy.director.on(cclegacy.DirectorEvent.BEFORE_UPDATE, this.onUpdateProbes, this);\r\n            this._registeredEvent = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Refresh all reflection probe.\r\n     * @zh 刷新所有反射探针。\r\n     */\r\n    public onUpdateProbes (): void {\r\n        if (this._probes.length === 0) return;\r\n        const scene = cclegacy.director.getScene();\r\n        if (!scene || !scene.renderScene) {\r\n            return;\r\n        }\r\n        const models = scene.renderScene.models as Model[];\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (!model.node) continue;\r\n            if (model.node.layer & REFLECTION_PROBE_DEFAULT_MASK) {\r\n                if (model.reflectionProbeType === ReflectionProbeType.BAKED_CUBEMAP || this._isUsedBlending(model)) {\r\n                    this.selectReflectionProbe(model);\r\n                } else if (model.reflectionProbeType === ReflectionProbeType.PLANAR_REFLECTION) {\r\n                    this.selectPlanarReflectionProbe(model);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en filter models that use planar reflection.\r\n     * @zh 筛选使用平面反射的模型\r\n     */\r\n    public filterModelsForPlanarReflection (): void {\r\n        if (this._probes.length === 0) return;\r\n        const scene = cclegacy.director.getScene();\r\n        if (!scene || !scene.renderScene) {\r\n            return;\r\n        }\r\n        const models = scene.renderScene.models as Model[];\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (!model.node) continue;\r\n            if ((model.node.layer & REFLECTION_PROBE_DEFAULT_MASK) && model.reflectionProbeType === ReflectionProbeType.PLANAR_REFLECTION) {\r\n                this.selectPlanarReflectionProbe(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public clearPlanarReflectionMap (probe: ReflectionProbe): void {\r\n        for (const entry of this._usePlanarModels.entries()) {\r\n            if (entry[1] === probe) {\r\n                this._updatePlanarMapOfModel(entry[0], null, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public register (probe: ReflectionProbe): void {\r\n        const index = this._probes.indexOf(probe);\r\n        if (index === -1) {\r\n            this._probes.push(probe);\r\n            this.updateProbeData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public unregister (probe: ReflectionProbe): void {\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if (this._probes[i] === probe) {\r\n                const del = this._probes.splice(i, 1);\r\n                if (del[0]) {\r\n                    this._removeDependentModels(del[0]);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        this.updateProbeData();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public exists (probeId: number): boolean {\r\n        if (this._probes.length === 0) return false;\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if (this._probes[i].getProbeId() === probeId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public getNewReflectionProbeId (): number {\r\n        let probeId = 0;\r\n        // eslint-disable-next-line no-constant-condition\r\n        while (true) {\r\n            if (this.exists(probeId)) {\r\n                probeId++;\r\n            } else {\r\n                return probeId;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Get all reflection probes in the scene.\r\n     * @zh 获取场景中所有的反射探针\r\n     */\r\n    public getProbes (): ReflectionProbe[] {\r\n        return this._probes;\r\n    }\r\n\r\n    /**\r\n     * @en Get reflection probe by id.\r\n     * @zh 根据id获取反射探针\r\n     */\r\n    public getProbeById (probeId: number): ReflectionProbe | null {\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if (this._probes[i].getProbeId() === probeId) {\r\n                return this._probes[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public clearAll (): void {\r\n        this._probes = [];\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public getProbeByCamera (camera: Camera): ReflectionProbe | null {\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if (this._probes[i].camera === camera) {\r\n                return this._probes[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Update the cubemap captured by the reflection probe.\r\n     * @zh 更新反射探针捕获的cubemap\r\n     * @param probe update the texture for this probe\r\n     */\r\n    public updateBakedCubemap (probe: ReflectionProbe): void {\r\n        const models = this._getModelsByProbe(probe);\r\n        if (!probe.cubemap) return;\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            this._updateCubemapOfModel(model, probe);\r\n        }\r\n        probe.needRefresh = false;\r\n        //if used for blend,when baked end need refresh cubemap\r\n        if (models.length === 0) {\r\n            for (const entry of this._useCubeModels.entries()) {\r\n                if (entry[0].reflectionProbeBlendId === probe.getProbeId()) {\r\n                    this._updateBlendCubemap(entry[0], probe);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the plane reflection map for reflection probe render.\r\n     * @zh 更新反射探针渲染的平面反射贴图\r\n     * @param probe update the texture for this probe\r\n     */\r\n    public updatePlanarMap (probe: ReflectionProbe, texture: Texture | null): void {\r\n        if (!probe.node || !probe.node.scene) return;\r\n        const models = this._getModelsByProbe(probe);\r\n        for (let i = 0; i < models.length; i++) {\r\n            this._updatePlanarMapOfModel(models[i], texture, probe);\r\n        }\r\n        if (probe.previewPlane) {\r\n            const meshRender = probe.previewPlane.getComponent(MeshRenderer);\r\n            if (meshRender) {\r\n                meshRender.updateProbePlanarMap(texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update objects using reflection probe for planar reflection.\r\n     * @zh 更新使用反射探针进行平面反射的物体。\r\n     * @param probe update the model for reflection probe\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public selectPlanarReflectionProbe (model: Model): void {\r\n        if (!model.node || !model.worldBounds || model.reflectionProbeType !== ReflectionProbeType.PLANAR_REFLECTION) return;\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            const probe = this._probes[i];\r\n            if (probe.probeType !== ProbeType.PLANAR) continue;\r\n            if (model.node.layer & REFLECTION_PROBE_DEFAULT_MASK) {\r\n                model.updateWorldBound();\r\n                if (geometry.intersect.aabbWithAABB(model.worldBounds, probe.boundingBox!)) {\r\n                    this._usePlanarModels.set(model, probe);\r\n                } else if (this._usePlanarModels.has(model)) {\r\n                    const old = this._usePlanarModels.get(model);\r\n                    if (old === probe) {\r\n                        this._usePlanarModels.delete(model);\r\n                        this._updatePlanarMapOfModel(model, null, null);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if (this._probes[i].probeType === ProbeType.PLANAR) {\r\n                if (!this._probes[i].realtimePlanarTexture) {\r\n                    this.updatePlanarMap(this._probes[i], null);\r\n                } else {\r\n                    this.updatePlanarMap(this._probes[i], this._probes[i].realtimePlanarTexture!.getGFXTexture());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Selecting the appropriate reflection probe for the model, it will use the closest one based on distance.\r\n     * @zh 为模型选择适用的反射探针，会使用距离最近的。\r\n     * @param model select for this model\r\n     */\r\n    public selectReflectionProbe (model: Model): void {\r\n        if (model.node && model.worldBounds && ((model.node.layer & REFLECTION_PROBE_DEFAULT_MASK))) {\r\n            model.updateWorldBound();\r\n            const nearest = this._getNearestProbe(model);\r\n            if (!nearest) {\r\n                //not in the range of any probe,set default texture for the model\r\n                this._updateCubemapOfModel(model, null);\r\n                this._useCubeModels.delete(model);\r\n            } else if (this._useCubeModels.has(model)) {\r\n                const old = this._useCubeModels.get(model);\r\n                // if used other probe,reset texture\r\n                if (old !== nearest) {\r\n                    this._useCubeModels.set(model, nearest);\r\n                }\r\n                nearest.needRefresh = true;\r\n            } else {\r\n                this._useCubeModels.set(model, nearest);\r\n                nearest.needRefresh = true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if ((this._probes[i].needRefresh && this._probes[i].probeType === ProbeType.CUBE) || this._isUsedBlending(model)) {\r\n                this.updateBakedCubemap(this._probes[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the preview sphere of the Reflection Probe cube mode.\r\n     * @zh 更新反射探针cube模式的预览球\r\n     */\r\n    public updatePreviewSphere (probe: ReflectionProbe): void {\r\n        if (!probe || !probe.previewSphere) return;\r\n        const meshRender = probe.previewSphere.getComponent(MeshRenderer);\r\n        if (meshRender) {\r\n            meshRender.updateProbeCubemap(probe.cubemap);\r\n            meshRender.updateReflectionProbeId(probe.getProbeId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the preview plane of the Reflection Probe planar mode.\r\n     * @zh 更新反射探针预览平面\r\n     */\r\n    public updatePreviewPlane (probe: ReflectionProbe): void {\r\n        if (!probe || !probe.previewPlane) return;\r\n        const meshRender = probe.previewPlane.getComponent(MeshRenderer);\r\n        if (meshRender) {\r\n            if (probe.realtimePlanarTexture) {\r\n                this.updatePlanarMap(probe, probe.realtimePlanarTexture.getGFXTexture());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update reflection probe data of model bind.\r\n     * @zh 更新模型绑定的反射探针数据。\r\n     */\r\n    public updateProbeData (): void {\r\n        if (this._probes.length === 0) return;\r\n        const maxId = this.getMaxProbeId();\r\n        const height = maxId + 1;\r\n        const dataWidth = 3;\r\n        if (this._dataTexture) {\r\n            this._dataTexture.destroy();\r\n        }\r\n\r\n        const buffer = new Float32Array(4 * dataWidth * height);\r\n        let bufferOffset = 0;\r\n        for (let i = 0; i <= maxId; i++) {\r\n            const probe = this.getProbeById(i);\r\n            if (!probe) {\r\n                bufferOffset += 4 * dataWidth;\r\n                continue;\r\n            }\r\n            if (probe.probeType === ProbeType.CUBE) {\r\n                //world pos\r\n                buffer[bufferOffset] = probe.node.worldPosition.x;\r\n                buffer[bufferOffset + 1] = probe.node.worldPosition.y;\r\n                buffer[bufferOffset + 2] = probe.node.worldPosition.z;\r\n                buffer[bufferOffset + 3] = 0.0;\r\n\r\n                buffer[bufferOffset + 4] = probe.size.x;\r\n                buffer[bufferOffset + 5] = probe.size.y;\r\n                buffer[bufferOffset + 6] = probe.size.z;\r\n                buffer[bufferOffset + 7] = 0.0;\r\n                const mipAndUseRGBE = probe.isRGBE() ? 1000 : 0;\r\n                buffer[bufferOffset + 8] = probe.cubemap ? probe.cubemap.mipmapLevel + mipAndUseRGBE : 1.0 + mipAndUseRGBE;\r\n            } else {\r\n                //plane.xyz;\r\n                buffer[bufferOffset] = probe.node.up.x;\r\n                buffer[bufferOffset + 1] = probe.node.up.y;\r\n                buffer[bufferOffset + 2] = probe.node.up.z;\r\n                buffer[bufferOffset + 3] = 1.0;\r\n                //plane.w;\r\n                buffer[bufferOffset + 4] = 1.0;\r\n                //planarReflectionDepthScale\r\n                buffer[bufferOffset + 5] = 1.0;\r\n                buffer[bufferOffset + 6] = 0.0;\r\n                buffer[bufferOffset + 7] = 0.0;\r\n                //mipCount;\r\n                buffer[bufferOffset + 8] = 1.0;\r\n            }\r\n            bufferOffset += 4 * dataWidth;\r\n        }\r\n        const updateView = new Uint8Array(buffer.buffer);\r\n        const image = new ImageAsset({\r\n            _data: updateView,\r\n            _compressed: false,\r\n            width: dataWidth * 4,\r\n            height,\r\n            format: PixelFormat.RGBA8888,\r\n        });\r\n\r\n        this._dataTexture = new Texture2D();\r\n        this._dataTexture.setFilters(TextureFilter.NONE, TextureFilter.NONE);\r\n        this._dataTexture.setMipFilter(TextureFilter.NONE);\r\n        this._dataTexture.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);\r\n        this._dataTexture.image = image;\r\n\r\n        this._dataTexture.uploadData(updateView);\r\n\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            const probe = this._probes[i];\r\n            const models = this._getModelsByProbe(probe);\r\n            for (let j = 0; j < models.length; j++) {\r\n                const meshRender = models[j].node.getComponent(MeshRenderer);\r\n                if (meshRender) {\r\n                    meshRender.updateReflectionProbeDataMap(this._dataTexture);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en get max value of probe id.\r\n     * @zh 获取反射探针id的最大值。\r\n     */\r\n    public getMaxProbeId (): number {\r\n        if (this._probes.length === 0) {\r\n            return -1;\r\n        }\r\n        if (this._probes.length === 1) {\r\n            return this._probes[0].getProbeId();\r\n        }\r\n        this._probes.sort((a: ReflectionProbe, b: ReflectionProbe) => a.getProbeId() - b.getProbeId());\r\n        return this._probes[this._probes.length - 1].getProbeId();\r\n    }\r\n    /**\r\n     * @en Get the reflection probe used by the model.\r\n     * @zh 获取模型使用的反射探针。\r\n     */\r\n    public getUsedReflectionProbe (model: Model, planarReflection: boolean): ReflectionProbe | null | undefined {\r\n        if (planarReflection) {\r\n            if (this._usePlanarModels.has(model)) {\r\n                return this._usePlanarModels.get(model);\r\n            }\r\n        } else if (this._useCubeModels.has(model)) {\r\n            return this._useCubeModels.get(model);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en Set reflection probe used by the model.\r\n     * @zh 手动设置模型使用的反射探针。\r\n     * @param model set the probe for this model\r\n     * @param probe reflection probe to be set\r\n     * @param blendProbe reflection probe for blend\r\n     */\r\n    public setReflectionProbe (model: Model, probe: ReflectionProbe, blendProbe: ReflectionProbe | null = null): void {\r\n        if (!probe) return;\r\n        this._useCubeModels.set(model, probe);\r\n        this._updateCubemapOfModel(model, probe);\r\n        if (blendProbe) {\r\n            this._updateBlendProbeInfo(model, probe, blendProbe);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public updateProbeOfModels (): void {\r\n        if (this._probes.length === 0) return;\r\n        const scene = cclegacy.director.getScene();\r\n        if (!scene || !scene.renderScene) {\r\n            return;\r\n        }\r\n        const models = scene.renderScene.models as Model[];\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (!model.node) continue;\r\n            if (model.node.layer & REFLECTION_PROBE_DEFAULT_MASK) {\r\n                if (model.reflectionProbeType === ReflectionProbeType.BAKED_CUBEMAP\r\n                    || model.reflectionProbeType === ReflectionProbeType.PLANAR_REFLECTION\r\n                    || this._isUsedBlending(model)) {\r\n                    model.updateReflectionProbeId();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * select the probe with the nearest distance.\r\n     * @zh\r\n     * 选择距离最近的probe。\r\n     * @param model select the probe for this model\r\n     */\r\n    private _getNearestProbe (model: Model): ReflectionProbe | null {\r\n        if (!model.node || !model.worldBounds || this._probes.length === 0) return null;\r\n\r\n        let nearestProbe: ReflectionProbe | null = null;\r\n        let minDistance = Infinity;\r\n\r\n        for (const probe of this._probes) {\r\n            if (probe.probeType !== ProbeType.CUBE || !probe.validate() || !geometry.intersect.aabbWithAABB(model.worldBounds, probe.boundingBox!)) {\r\n                continue;\r\n            }\r\n\r\n            const distance = Vec3.distance(model.node.worldPosition, probe.node.worldPosition);\r\n            if (distance < minDistance) {\r\n                minDistance = distance;\r\n                nearestProbe = probe;\r\n            }\r\n        }\r\n\r\n        return nearestProbe;\r\n    }\r\n\r\n    private _getBlendProbe (model: Model): ReflectionProbe | null {\r\n        if (!model || !model.node || !model.worldBounds || this._probes.length < 2) {\r\n            return null;\r\n        }\r\n        const temp: ReflectionProbe[] = [];\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            if (this._probes[i].probeType !== ProbeType.CUBE || !this._probes[i].validate() || !geometry.intersect.aabbWithAABB(model.worldBounds, this._probes[i].boundingBox!)) {\r\n                continue;\r\n            }\r\n            temp.push(this._probes[i]);\r\n        }\r\n        temp.sort((a: ReflectionProbe, b: ReflectionProbe) => {\r\n            const aDistance = Vec3.distance(model.node.worldPosition, a.node.worldPosition);\r\n            const bDistance = Vec3.distance(model.node.worldPosition, b.node.worldPosition);\r\n            return aDistance - bDistance;\r\n        });\r\n        return temp.length > 1 ? temp[1] : null;\r\n    }\r\n\r\n    private _getModelsByProbe (probe: ReflectionProbe): Model[] {\r\n        const models: Model[] = [];\r\n        let useModels = this._useCubeModels;\r\n        if (probe.probeType === ProbeType.PLANAR) {\r\n            useModels = this._usePlanarModels;\r\n        }\r\n        for (const entry of useModels.entries()) {\r\n            if (entry[1] === probe) {\r\n                models.push(entry[0]);\r\n            }\r\n        }\r\n        return models;\r\n    }\r\n\r\n    private _removeDependentModels (probe: ReflectionProbe): void {\r\n        for (const key of this._useCubeModels.keys()) {\r\n            const p = this._useCubeModels.get(key);\r\n            if (p !== undefined && p === probe) {\r\n                this._useCubeModels.delete(key);\r\n                this.selectReflectionProbe(key);\r\n            }\r\n        }\r\n        for (const key of this._usePlanarModels.keys()) {\r\n            const p = this._usePlanarModels.get(key);\r\n            if (p !== undefined && p === probe) {\r\n                this._usePlanarModels.delete(key);\r\n                this.selectPlanarReflectionProbe(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateCubemapOfModel (model: Model, probe: ReflectionProbe | null): void {\r\n        const node = model.node;\r\n        if (!node) {\r\n            return;\r\n        }\r\n        const meshRender = node.getComponent(MeshRenderer);\r\n        if (!meshRender) {\r\n            return;\r\n        }\r\n\r\n        meshRender.updateProbeCubemap(probe ? probe.cubemap : null);\r\n        meshRender.updateReflectionProbeId(probe && probe.cubemap ? probe.getProbeId() : -1);\r\n\r\n        if (probe) {\r\n            meshRender.updateReflectionProbeDataMap(this._dataTexture);\r\n            if (this._isUsedBlending(model)) {\r\n                const blendProbe = this._getBlendProbe(model);\r\n                this._updateBlendProbeInfo(model, probe, blendProbe);\r\n            }\r\n        }\r\n    }\r\n    private _updatePlanarMapOfModel (model: Model, texture: Texture | null, probe: ReflectionProbe | null): void {\r\n        const meshRender = model.node.getComponent(MeshRenderer);\r\n        if (meshRender) {\r\n            meshRender.updateProbePlanarMap(texture);\r\n            if (probe) {\r\n                meshRender.updateReflectionProbeId(probe.getProbeId());\r\n                meshRender.updateReflectionProbeDataMap(this._dataTexture);\r\n            } else {\r\n                meshRender.updateReflectionProbeId(-1);\r\n            }\r\n        }\r\n    }\r\n    private _isUsedBlending (model: Model): boolean {\r\n        if (model.reflectionProbeType === ReflectionProbeType.BLEND_PROBES\r\n            || model.reflectionProbeType === ReflectionProbeType.BLEND_PROBES_AND_SKYBOX) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _updateBlendProbeInfo (model: Model, probe: ReflectionProbe, blendProbe: ReflectionProbe | null): void {\r\n        const node = model.node;\r\n        if (!node) {\r\n            return;\r\n        }\r\n        const meshRender = node.getComponent(MeshRenderer);\r\n        if (!meshRender) {\r\n            return;\r\n        }\r\n        if (ENABLE_PROBE_BLEND && blendProbe) {\r\n            meshRender.updateReflectionProbeBlendId(blendProbe.getProbeId());\r\n            meshRender.updateProbeBlendCubemap(blendProbe.cubemap);\r\n            meshRender.updateReflectionProbeBlendWeight(this._calculateBlendWeight(model, probe, blendProbe));\r\n        } else {\r\n            meshRender.updateReflectionProbeBlendId(-1);\r\n            if (model.reflectionProbeType === ReflectionProbeType.BLEND_PROBES_AND_SKYBOX) {\r\n                meshRender.updateReflectionProbeBlendWeight(this._calculateBlendWeight(model, probe, blendProbe));\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateBlendCubemap (model: Model, probe: ReflectionProbe): void {\r\n        const node = model.node;\r\n        if (!node) {\r\n            return;\r\n        }\r\n        if (!this._isUsedBlending(model)) {\r\n            return;\r\n        }\r\n        const meshRender = node.getComponent(MeshRenderer);\r\n        if (meshRender) {\r\n            meshRender.updateProbeBlendCubemap(probe.cubemap);\r\n        }\r\n    }\r\n\r\n    private _calculateBlendWeight (model: Model, probe: ReflectionProbe, blendProbe: ReflectionProbe | null): number {\r\n        if (blendProbe) {\r\n            const d1 = Vec3.distance(model.node.worldPosition, probe.node.worldPosition);\r\n            const d2 = Vec3.distance(model.node.worldPosition, blendProbe.node.worldPosition);\r\n            return 1.0 - d2 / (d1 + d2);\r\n        }\r\n        if (model.reflectionProbeType === ReflectionProbeType.BLEND_PROBES) {\r\n            return 0.0;\r\n        } else if (model.reflectionProbeType === ReflectionProbeType.BLEND_PROBES_AND_SKYBOX) {\r\n            return this._calculateBlendOfSkybox(model.worldBounds, probe.boundingBox!);\r\n        }\r\n        return 0.0;\r\n    }\r\n\r\n    private _calculateBlendOfSkybox (aabb1: AABB | null, aabb2: AABB): number {\r\n        if (!aabb1) return 1.0;\r\n        const aMin = new Vec3();\r\n        const aMax = new Vec3();\r\n        const bMin = new Vec3();\r\n        const bMax = new Vec3();\r\n        Vec3.subtract(aMin, aabb1.center, aabb1.halfExtents);\r\n        Vec3.add(aMax, aabb1.center, aabb1.halfExtents);\r\n\r\n        Vec3.subtract(bMin, aabb2.center, aabb2.halfExtents);\r\n        Vec3.add(bMax, aabb2.center, aabb2.halfExtents);\r\n\r\n        const inside = (aMin.x <= bMax.x && aMax.x >= bMin.x)\r\n                && (aMin.y <= bMax.y && aMax.y >= bMin.y)\r\n                && (aMin.z <= bMax.z && aMax.z >= bMin.z);\r\n        if (inside) {\r\n            const fullSize = new Vec3();\r\n            Vec3.multiplyScalar(fullSize, aabb1.halfExtents, 2.0);\r\n            const boundaryXAdd = (aMin.x + fullSize.x) <= bMax.x && (aMax.x + fullSize.x) >= bMin.x;\r\n            const boundaryXSub = (aMin.x - fullSize.x) <= bMax.x && (aMax.x - fullSize.x) >= bMin.x;\r\n            const boundaryYAdd = (aMin.y + fullSize.y) <= bMax.y && (aMax.y + fullSize.y) >= bMin.y;\r\n            const boundaryYSub = (aMin.y - fullSize.y) <= bMax.y && (aMax.y - fullSize.y) >= bMin.y;\r\n            const boundaryZAdd = (aMin.z + fullSize.z) <= bMax.z && (aMax.z + fullSize.z) >= bMin.z;\r\n            const boundaryZSub = (aMin.z - fullSize.z) <= bMax.z && (aMax.z - fullSize.z) >= bMin.z;\r\n\r\n            const weights: number[] = [];\r\n            if (!boundaryXAdd) {\r\n                const offset = aMax.x - bMax.x;\r\n                weights.push(offset / fullSize.x);\r\n            }\r\n            if (!boundaryXSub) {\r\n                const offset = Math.abs(aMin.x - bMin.x);\r\n                weights.push(offset / fullSize.x);\r\n            }\r\n            if (!boundaryYAdd) {\r\n                const offset = aMax.y - bMax.y;\r\n                weights.push(offset / fullSize.y);\r\n            }\r\n            if (!boundaryYSub) {\r\n                const offset = Math.abs(aMin.y - bMin.y);\r\n                weights.push(offset / fullSize.y);\r\n            }\r\n            if (!boundaryZAdd) {\r\n                const offset = aMax.z - bMax.z;\r\n                weights.push(offset / fullSize.z);\r\n            }\r\n            if (!boundaryZSub) {\r\n                const offset = Math.abs(aMin.z - bMin.z);\r\n                weights.push(offset / fullSize.z);\r\n            }\r\n            if (weights.length > 0) {\r\n                weights.sort((a: number, b: number) => b - a);\r\n                return weights[0];\r\n            } else {\r\n                return 0.0;\r\n            }\r\n        }\r\n        return 1.0;\r\n    }\r\n}\r\n\r\nReflectionProbeManager.probeManager = new ReflectionProbeManager();\r\ncclegacy.internal.reflectionProbeManager = ReflectionProbeManager.probeManager;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { ccclass, executeInEditMode, help, menu, playOnFocus, serializable, tooltip, type, visible } from 'cc.decorator';\r\nimport { EDITOR, EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { CCBoolean, Color, screen, Enum, Vec3, warn, CCObjectFlags, v3 } from '../../core';\r\n\r\nimport { TextureCube } from '../../asset/assets';\r\nimport { scene } from '../../render-scene';\r\nimport { CAMERA_DEFAULT_MASK } from '../../rendering/define';\r\nimport { ReflectionProbeManager } from './reflection-probe-manager';\r\nimport { Component } from '../../scene-graph/component';\r\nimport { Layers } from '../../scene-graph/layers';\r\nimport { Camera } from '../../misc/camera-component';\r\nimport { Node, TransformBit } from '../../scene-graph';\r\nimport { ProbeClearFlag, ProbeType } from '../../render-scene/scene/reflection-probe';\r\nimport { absolute } from '../../physics/utils/util';\r\n\r\nconst tmpVec3 = v3();\r\n\r\nexport enum ProbeResolution {\r\n    /**\r\n     * @zh 分辨率 256 * 256。\r\n     * @en renderTexture resolution 256 * 256.\r\n     * @readonly\r\n     */\r\n    Low_256x256 = 256,\r\n\r\n    /**\r\n      * @zh 分辨率 512 * 512。\r\n      * @en renderTexture resolution 512 * 512.\r\n      * @readonly\r\n      */\r\n    Medium_512x512 = 512,\r\n\r\n    /**\r\n      * @zh 分辨率 768 * 768\r\n      * @en renderTexture resolution 768 * 768.\r\n      * @readonly\r\n      */\r\n    High_768x768 = 768,\r\n}\r\n@ccclass('cc.ReflectionProbe')\r\n@menu('Rendering/ReflectionProbe')\r\n@executeInEditMode\r\n@playOnFocus\r\n@help('i18n:cc.ReflectionProbe')\r\nexport class ReflectionProbe extends Component {\r\n    protected static readonly DEFAULT_CUBE_SIZE: Readonly<Vec3> = v3(1, 1, 1);\r\n    protected static readonly DEFAULT_PLANER_SIZE: Readonly<Vec3> = v3(5, 0.5, 5);\r\n    protected readonly _lastSize = v3();\r\n    @serializable\r\n    protected _resolution = 256;\r\n    @serializable\r\n    protected _clearFlag = ProbeClearFlag.SKYBOX;\r\n\r\n    @serializable\r\n    protected _backgroundColor = new Color(0, 0, 0, 255);\r\n\r\n    @serializable\r\n    protected _visibility = CAMERA_DEFAULT_MASK;\r\n\r\n    @serializable\r\n    protected _probeType = ProbeType.CUBE;\r\n\r\n    @serializable\r\n    protected _cubemap: TextureCube | null = null;\r\n\r\n    @serializable\r\n    protected readonly _size = v3(1, 1, 1);\r\n\r\n    @serializable\r\n    protected _sourceCamera: Camera | null = null;\r\n\r\n    @serializable\r\n    private _probeId = -1;\r\n\r\n    @serializable\r\n    private _fastBake = false;\r\n\r\n    protected _probe: scene.ReflectionProbe | null = null;\r\n\r\n    protected _previewSphere: Node | null = null;\r\n    protected _previewPlane: Node | null = null;\r\n\r\n    private _sourceCameraPos = v3();\r\n    private _position = v3();\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the size of the box\r\n     * @zh\r\n     * 获取或设置包围盒的大小。\r\n     */\r\n    set size (value: Vec3) {\r\n        this._size.set(value);\r\n        absolute(this._size);\r\n        this.probe.size = this._size;\r\n        if (this.probe) {\r\n            this.probe.updateBoundingBox();\r\n            ReflectionProbeManager.probeManager.onUpdateProbes();\r\n            ReflectionProbeManager.probeManager.updateProbeData();\r\n            ReflectionProbeManager.probeManager.updateProbeOfModels();\r\n        }\r\n    }\r\n    @type(Vec3)\r\n    get size (): Vec3 {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * @en Environment reflection or plane reflection.\r\n     * @zh 设置探针类型，环境反射或者平面反射\r\n     */\r\n    @type(Enum(ProbeType))\r\n    set probeType (value: ProbeType) {\r\n        this.probe.probeType = value;\r\n        if (value !== this._probeType) {\r\n            const lastSize = this._size.clone();\r\n            const lastSizeIsNoExist = Vec3.equals(this._lastSize, Vec3.ZERO);\r\n            this._probeType = value;\r\n\r\n            if (this._probeType === ProbeType.CUBE) {\r\n                if (lastSizeIsNoExist) {\r\n                    this._size.set(ReflectionProbe.DEFAULT_CUBE_SIZE);\r\n                }\r\n                this.probe.switchProbeType(value, null);\r\n                if (EDITOR) {\r\n                    this._objFlags |= CCObjectFlags.IsRotationLocked;\r\n                }\r\n                ReflectionProbeManager.probeManager.clearPlanarReflectionMap(this.probe);\r\n            } else {\r\n                if (lastSizeIsNoExist) {\r\n                    this._size.set(ReflectionProbe.DEFAULT_PLANER_SIZE);\r\n                }\r\n                if (EDITOR && this._objFlags & CCObjectFlags.IsRotationLocked) {\r\n                    this._objFlags ^= CCObjectFlags.IsRotationLocked;\r\n                }\r\n                if (!this._sourceCamera) {\r\n                    warn('the reflection camera is invalid, please set the reflection camera');\r\n                } else {\r\n                    this.probe.switchProbeType(value, this._sourceCamera.camera);\r\n                }\r\n            }\r\n            if (!lastSizeIsNoExist) {\r\n                this._size.set(this._lastSize);\r\n            }\r\n            this._lastSize.set(lastSize);\r\n            this.size = this._size;\r\n        }\r\n    }\r\n    get probeType (): ProbeType {\r\n        return this._probeType;\r\n    }\r\n\r\n    /**\r\n     * @en set render texture size\r\n     * @zh 设置渲染纹理大小\r\n     */\r\n    @visible(function (this: ReflectionProbe) { return this.probeType === ProbeType.CUBE; })\r\n    @type(Enum(ProbeResolution))\r\n    set resolution (value: number) {\r\n        this._resolution = value;\r\n        this.probe.resolution = value;\r\n    }\r\n\r\n    get resolution (): number {\r\n        return this._resolution;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing flags of the camera, specifies which part of the framebuffer will be actually cleared every frame.\r\n     * @zh 相机的缓冲清除标志位，指定帧缓冲的哪部分要每帧清除。\r\n     */\r\n    @type(Enum(ProbeClearFlag))\r\n    @visible(function (this: ReflectionProbe) { return this.probeType === ProbeType.CUBE; })\r\n    set clearFlag (value: number) {\r\n        this._clearFlag = value;\r\n        this.probe.clearFlag = this._clearFlag;\r\n    }\r\n    get clearFlag (): number {\r\n        return this._clearFlag;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing color of the camera.\r\n     * @zh 相机的颜色缓冲默认值。\r\n     */\r\n    @visible(function (this: ReflectionProbe) { return this._clearFlag === ProbeClearFlag.SOLID_COLOR && this.probeType === ProbeType.CUBE; })\r\n    @type(Color)\r\n    set backgroundColor (val: Color) {\r\n        this._backgroundColor = val;\r\n        this.probe.backgroundColor = this._backgroundColor;\r\n    }\r\n    get backgroundColor (): Color {\r\n        return this._backgroundColor;\r\n    }\r\n\r\n    /**\r\n     * @en Visibility mask, declaring a set of node layers that will be visible to this camera.\r\n     * @zh 可见性掩码，声明在当前相机中可见的节点层级集合。\r\n     */\r\n    @type(Layers.BitMask)\r\n    @tooltip('i18n:camera.visibility')\r\n    get visibility (): number {\r\n        return this._visibility;\r\n    }\r\n    set visibility (val) {\r\n        this._visibility = val;\r\n        this.probe.visibility = this._visibility;\r\n    }\r\n\r\n    /**\r\n     * @en The camera to render planar reflections, specified by the user\r\n     * @zh 需要渲染平面反射的相机，由用户指定\r\n     */\r\n    @visible(function (this: ReflectionProbe) { return this.probeType === ProbeType.PLANAR; })\r\n    @type(Camera)\r\n    set sourceCamera (camera: Camera) {\r\n        this._sourceCamera = camera;\r\n        if (camera) {\r\n            this.visibility = camera.visibility;\r\n            this.clearFlag = camera.clearFlags;\r\n            this.backgroundColor = camera.clearColor as Color;\r\n            if (this.probeType === ProbeType.PLANAR) {\r\n                this.probe.switchProbeType(this.probeType, camera.camera);\r\n            }\r\n        }\r\n    }\r\n    get sourceCamera (): Camera {\r\n        return this._sourceCamera!;\r\n    }\r\n\r\n    /**\r\n     * @en fast bake no convolution.\r\n     * @zh 快速烘焙不会进行卷积。\r\n     */\r\n    @visible(function (this: ReflectionProbe) { return this.probeType === ProbeType.CUBE; })\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:reflection_probe.fastBake')\r\n    get fastBake (): boolean {\r\n        return this._fastBake;\r\n    }\r\n\r\n    set fastBake (val) {\r\n        this._fastBake = val;\r\n    }\r\n\r\n    set cubemap (val: TextureCube | null) {\r\n        this._cubemap = val;\r\n        this.probe.cubemap = val;\r\n        ReflectionProbeManager.probeManager.onUpdateProbes();\r\n    }\r\n    @type(TextureCube)\r\n    @visible(false)\r\n    get cubemap (): TextureCube | null {\r\n        return this._cubemap;\r\n    }\r\n\r\n    get probe (): scene.ReflectionProbe {\r\n        return this._probe!;\r\n    }\r\n\r\n    /**\r\n     * @en Reflection probe cube mode preview sphere\r\n     * @zh 反射探针cube模式的预览小球\r\n     */\r\n    set previewSphere (val: Node | null) {\r\n        this._previewSphere = val;\r\n        if (this.probe) {\r\n            this.probe.previewSphere = val;\r\n            if (this._previewSphere) {\r\n                ReflectionProbeManager.probeManager.updatePreviewSphere(this.probe);\r\n            }\r\n        }\r\n    }\r\n\r\n    get previewSphere (): Node | null {\r\n        return this._previewSphere!;\r\n    }\r\n\r\n    /**\r\n     * @en Reflection probe planar mode preview plane\r\n     * @zh 反射探针Planar模式的预览平面\r\n     */\r\n    set previewPlane (val: Node) {\r\n        this._previewPlane = val;\r\n        if (this.probe) {\r\n            this.probe.previewPlane = val;\r\n            if (this._previewPlane) {\r\n                ReflectionProbeManager.probeManager.updatePreviewPlane(this.probe);\r\n            }\r\n        }\r\n    }\r\n\r\n    get previewPlane (): Node {\r\n        return this._previewPlane!;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        this._createProbe();\r\n        if (EDITOR) {\r\n            ReflectionProbeManager.probeManager.registerEvent();\r\n        }\r\n    }\r\n\r\n    private _handleResize$ (): void {\r\n        if (this.probe && this.sourceCamera && this.probeType === ProbeType.PLANAR) {\r\n            this.probe.renderPlanarReflection(this.sourceCamera.camera);\r\n        }\r\n    }\r\n\r\n    onEnable (): void {\r\n        if (this._probe) {\r\n            const probe = ReflectionProbeManager.probeManager.getProbeById(this._probeId);\r\n            if (probe !== null && probe !== this._probe) {\r\n                this._probeId = ReflectionProbeManager.probeManager.getNewReflectionProbeId();\r\n                this._probe.updateProbeId(this._probeId);\r\n            }\r\n            ReflectionProbeManager.probeManager.register(this._probe);\r\n            ReflectionProbeManager.probeManager.onUpdateProbes();\r\n            this._probe.enable();\r\n        }\r\n        screen.on('window-resize', this._handleResize$, this);\r\n        screen.on('fullscreen-change', this._handleResize$, this);\r\n    }\r\n    onDisable (): void {\r\n        if (this._probe) {\r\n            ReflectionProbeManager.probeManager.unregister(this._probe);\r\n            this._probe.disable();\r\n        }\r\n        screen.off('window-resize', this._handleResize$, this);\r\n        screen.off('fullscreen-change', this._handleResize$, this);\r\n    }\r\n\r\n    public start (): void {\r\n        if (this._sourceCamera && this.probeType === ProbeType.PLANAR) {\r\n            this.probe.renderPlanarReflection(this.sourceCamera.camera);\r\n            ReflectionProbeManager.probeManager.filterModelsForPlanarReflection();\r\n        }\r\n        ReflectionProbeManager.probeManager.updateProbeData();\r\n        this.node.getWorldPosition(this._position);\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        if (this.probe) {\r\n            this.probe.destroy();\r\n        }\r\n    }\r\n\r\n    public update (dt: number): void {\r\n        if (!this.probe) return;\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (this.probeType === ProbeType.PLANAR) {\r\n                const cameraLst: scene.Camera[] | undefined = this.node.scene.renderScene?.cameras;\r\n                if (cameraLst !== undefined) {\r\n                    for (let i = 0; i < cameraLst.length; ++i) {\r\n                        const camera: scene.Camera = cameraLst[i];\r\n                        if (camera.name === 'Editor Camera') {\r\n                            this.probe.renderPlanarReflection(camera);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.probeType === ProbeType.PLANAR && this.sourceCamera) {\r\n            if ((this.sourceCamera.node.hasChangedFlags & TransformBit.TRS)\r\n            || !this._sourceCameraPos.equals(this.sourceCamera.node.getWorldPosition())) {\r\n                this._sourceCameraPos = this.sourceCamera.node.getWorldPosition();\r\n                this.probe.renderPlanarReflection(this.sourceCamera.camera);\r\n            }\r\n        }\r\n\r\n        if (this.node.hasChangedFlags & TransformBit.POSITION) {\r\n            this.probe.updateBoundingBox();\r\n            ReflectionProbeManager.probeManager.onUpdateProbes();\r\n            ReflectionProbeManager.probeManager.updateProbeData();\r\n        }\r\n\r\n        //update probe info for realtime\r\n        if (!EDITOR) {\r\n            this.node.getWorldPosition(tmpVec3);\r\n            if (!this._position.equals(tmpVec3)) {\r\n                this._position.set(tmpVec3);\r\n                this.probe.updateBoundingBox();\r\n                ReflectionProbeManager.probeManager.updateProbeData();\r\n                ReflectionProbeManager.probeManager.updateProbeOfModels();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clear the baked cubemap.\r\n     * @zh 清除烘焙的cubemap\r\n     */\r\n    public clearBakedCubemap (): void {\r\n        this.cubemap = null;\r\n        ReflectionProbeManager.probeManager.updateBakedCubemap(this.probe);\r\n        ReflectionProbeManager.probeManager.updatePreviewSphere(this.probe);\r\n    }\r\n\r\n    private _createProbe (): void {\r\n        if (this._probeId === -1 || ReflectionProbeManager.probeManager.exists(this._probeId)) {\r\n            this._probeId = ReflectionProbeManager.probeManager.getNewReflectionProbeId();\r\n        }\r\n        this._probe = new scene.ReflectionProbe(this._probeId);\r\n        if (this._probe) {\r\n            const cameraNode = new Node('ReflectionProbeCamera');\r\n            cameraNode.hideFlags |= CCObjectFlags.DontSave | CCObjectFlags.HideInHierarchy;\r\n            this.node.scene.addChild(cameraNode);\r\n\r\n            this._probe.initialize(this.node, cameraNode);\r\n            if (this.enabled) {\r\n                ReflectionProbeManager.probeManager.register(this._probe);\r\n            }\r\n            this._probe.resolution = this._resolution;\r\n            this._probe.clearFlag = this._clearFlag;\r\n            this._probe.backgroundColor = this._backgroundColor;\r\n            this._probe.visibility = this._visibility;\r\n            this._probe.probeType = this._probeType;\r\n            this._probe.size = this._size;\r\n            this._probe.cubemap = this._cubemap!;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport * as utils from './misc';\r\nimport { legacyCC } from '../core/global-exports';\r\n\r\nexport * from './misc/batch-utils';\r\nexport * from './assets';\r\nexport * from './framework';\r\n\r\nexport * from './lights';\r\nexport * from './skinned-mesh-renderer';\r\nexport * from './lod';\r\nexport * from './reflection-probe';\r\n\r\nexport {\r\n    utils,\r\n};\r\nlegacyCC.utils = utils;\r\n"],"names":["buffer","w","h","filter","e","i","toString","checkMaterialisSame","comp1","comp2","matNum","sharedMaterials","length","getRenderMaterial","BatchingUtility","batchStaticModel","staticModelRoot","batchedRoot","models","getComponentsInChildren","MeshRenderer","console","error","mesh","validateMergingMesh","node","name","batchedMesh","Mesh","worldMat","Mat4","rootWorldMatInv","getWorldMatrix","invert","comp","multiply","merge","enabled","batchedModel","addComponent","unbatchStaticModel","getComponent","destroyRenderingMesh","destroy","removeProperty","prototype","cclegacy","ModelComponent","js","_color_tmp","Vec3","PhotometricTerm","Enum","LUMINOUS_FLUX","LUMINANCE","StaticLightSettings","ccclass","_dec","_class2","this","_baked","_initializer","_editorOnly","_initializer2","_castShadow","_initializer3","_createClass","key","get","set","val","_applyDecoratedInitializer","serializable","_class","Light","type","Layers","BitMask","_dec2","_class6","_Component","_this","call","_color","_initializer4","_useColorTemperature","_initializer5","_colorTemperature","_initializer6","_staticSettings","_initializer7","_visibility","_initializer8","_type","scene","UNKNOWN","_lightType","_light","_inheritsLoose","_proto","onLoad","_createLight","onEnable","_attachToScene","onDisable","_detachFromScene","onDestroy","_destroyLight","director","root","createLight","color","useColorTemperature","colorTemperature","baked","visibility","recycleLight","renderScene","_getRenderScene","DIRECTIONAL","addDirectionalLight","setMainLight","SPHERE","addSphereLight","SPOT","addSpotLight","POINT","addPointLight","RANGED_DIRECTIONAL","addRangedDirLight","removeDirectionalLight","unsetMainLight","removeSphereLight","removeSpotLight","removePointLight","removeRangedDirLight","_onUpdateReceiveDirLight","clone","x","r","y","g","z","b","enable","staticSettings","vis","Component","Type","_class5","Color","WHITE","CAMERA_DEFAULT_MASK","_applyDecoratedDescriptor","_dec3","Object","getOwnPropertyDescriptor","_dec4","_class4","exports","LightComponent","property","_decorator","formerlySerializedAs","DirectionalLight","CCInteger","group","displayOrder","CCBoolean","_dec6","PCFType","_dec8","CCFloat","_dec10","_dec12","_dec14","_dec16","_dec18","CSMLevel","_dec20","_dec22","_dec24","CSMOptimizationMode","_dec26","_dec28","_dec30","_dec32","_dec34","_dec36","_dec38","_dec39","_Light","_illuminanceHDR","_illuminanceLDR","_shadowEnabled","_shadowPcf","_shadowBias","_shadowNormalBias","_shadowSaturation","_shadowDistance","_shadowInvisibleOcclusionRange","_initializer9","_csmLevel","_initializer10","_csmLayerLambda","_initializer11","_csmOptimizationMode","_initializer12","_csmAdvancedOptions","_initializer13","_csmLayersTransition","_initializer14","_csmTransitionRange","_initializer15","_shadowFixedArea","_initializer16","_shadowNear","_initializer17","_shadowFar","_initializer18","_shadowOrthoSize","_initializer19","settings","querySettings","SettingsCategory","RENDERING","SOFT_2X","enableCSM","castShadow","dirLight","illuminanceHDR","illuminanceLDR","shadowEnabled","shadowPcf","shadowBias","shadowNormalBias","shadowSaturation","shadowDistance","shadowInvisibleOcclusionRange","shadowFixedArea","shadowNear","shadowFar","shadowOrthoSize","csmLevel","csmLayerLambda","csmOptimizationMode","csmLayersTransition","csmTransitionRange","mainLight","model","meshRender","onUpdateReceiveDirLight","getPipelineSceneData","isHDR","clamp","Math","min","Shadows","MAX_FAR","warnID","csmNeedUpdate","LEVEL_1","LEVEL_4","Camera","standardExposureValue","HARD","RemoveDuplicates","_dec5","_dec7","_dec9","_dec11","_dec13","_dec15","_dec17","_dec19","_dec21","_dec23","_dec25","_dec27","_dec29","_dec31","_dec33","_dec35","_dec37","DirectionalLightComponent","SphereLight","_size","_luminanceHDR","_luminanceLDR","_term","_range","size","range","luminanceHDR","luminanceLDR","result","luminance","standardLightMeterScale","SphereLightComponent","SpotLight","_spotAngle","_angleAttenuationStrength","spotAngle","angleAttenuationStrength","spotLight","toRadian","SpotLightComponent","PointLight","LightType","RangedDirectionalLight","replaceProperty","newName","customGetter","luminousFlux","customSetter","value","DEFAULT_SCREEN_OCCUPATION","LOD","_screenUsagePercentage","_renderers","_LODData","_modelAddedCallback","screenUsagePercentage","insertRenderer","index","renderer","splice","modelAdded","addModel","deleteRenderer","_renders$","renders","eraseModel","getRenderer","setRenderer","rendererCount","meshList","clearModels","_meshList$i","tris","forEach","meshRenderer","count","primitives","struct","subMesh","indexView","push","callback","REFLECTION_PROBE_DEFAULT_MASK","LODGroup","_localBoundaryCenter","_objectSize","_LODs","_lodGroup","_eventRegistered","_forceUsedLevels","_proto2","onLodModelAddedCallback","objectSize","recalculateBounds","insertLOD","lod","lodCount","modelAddedCallback","bind","preLod","getLOD","nextLod","curNextLOD","lodData","_updateDataToScene","_emitChangeNode","eraseLOD","warn","setLOD","lodGroup","updateLOD","minPos","maxPos","boundsMin","boundsMax","j","_renderer$model","_renderer$model2","updateWorldBound","worldBounds","getBoundary","max","boundsMin2","c","_getTransformedBounda2","transform","pts","Array","transformMat4","pt","getTransformedBoundary","worldMatrix","localBoundaryCenter","resetObjectSize","scale","forceLOD","lodLevel","lockLODLevels","forceLODs","on","NodeEventType","COMPONENT_REMOVED","_onRemove","_constructLOD","onRestore","enabledInHierarchy","_this2","renderers","lodInstance","addLODGroup","removeLODGroup","valArray","_this3","clearLODs","makeMaskExclude","UI_2D","UI_3D","GIZMOS","EDITOR","SCENE_GIZMO","PROFILER","IGNORE_RAYCAST","ReflectionProbeManager","_probes","_useCubeModels","Map","_usePlanarModels","_updateForRuntime","_dataTexture","_registeredEvent","registerEvent","DirectorEvent","BEFORE_UPDATE","onUpdateProbes","getScene","layer","reflectionProbeType","ReflectionProbeType","BAKED_CUBEMAP","_isUsedBlending","selectReflectionProbe","PLANAR_REFLECTION","selectPlanarReflectionProbe","filterModelsForPlanarReflection","clearPlanarReflectionMap","probe","_step","_iterator","_createForOfIteratorHelperLoose","entries","done","entry","_updatePlanarMapOfModel","register","indexOf","updateProbeData","unregister","del","_removeDependentModels","exists","probeId","getProbeId","getNewReflectionProbeId","getProbes","getProbeById","clearAll","getProbeByCamera","camera","updateBakedCubemap","_getModelsByProbe","cubemap","_updateCubemapOfModel","needRefresh","_step2","_iterator2","reflectionProbeBlendId","_updateBlendCubemap","updatePlanarMap","texture","previewPlane","updateProbePlanarMap","probeType","ProbeType","PLANAR","geometry","aabbWithAABB","boundingBox","has","realtimePlanarTexture","getGFXTexture","nearest","_getNearestProbe","CUBE","updatePreviewSphere","previewSphere","updateProbeCubemap","updateReflectionProbeId","updatePreviewPlane","maxId","getMaxProbeId","height","Float32Array","bufferOffset","worldPosition","mipAndUseRGBE","isRGBE","mipmapLevel","up","updateView","Uint8Array","image","ImageAsset","_data","_compressed","width","dataWidth","format","PixelFormat","RGBA8888","Texture2D","setFilters","TextureFilter","NONE","setMipFilter","setWrapMode","WrapMode","CLAMP_TO_EDGE","uploadData","updateReflectionProbeDataMap","sort","a","getUsedReflectionProbe","planarReflection","setReflectionProbe","blendProbe","_updateBlendProbeInfo","updateProbeOfModels","_step3","nearestProbe","minDistance","Infinity","_iterator3","validate","distance","_getBlendProbe","temp","useModels","_step4","_iterator4","_step5","_iterator5","keys","p","undefined","_step6","_iterator6","BLEND_PROBES","BLEND_PROBES_AND_SKYBOX","updateReflectionProbeBlendId","updateReflectionProbeBlendWeight","_calculateBlendWeight","updateProbeBlendCubemap","d1","d2","_calculateBlendOfSkybox","aabb1","aabb2","aMin","aMax","bMin","bMax","subtract","center","halfExtents","add","fullSize","multiplyScalar","boundaryXAdd","boundaryXSub","boundaryYAdd","boundaryYSub","boundaryZAdd","boundaryZSub","weights","offset","abs","probeManager","internal","reflectionProbeManager","ProbeResolution","tmpVec3","v3","ProbeClearFlag","TextureCube","_class3","ReflectionProbe","_len","arguments","args","_key","apply","concat","_lastSize","_resolution","_clearFlag","_backgroundColor","_probeType","_cubemap","_sourceCamera","_probeId","_fastBake","_probe","_previewSphere","_previewPlane","_sourceCameraPos","_position","_createProbe","_handleResize$","sourceCamera","renderPlanarReflection","updateProbeId","screen","disable","off","start","getWorldPosition","update","hasChangedFlags","TransformBit","TRS","equals","POSITION","updateBoundingBox","clearBakedCubemap","cameraNode","Node","hideFlags","CCObjectFlags","DontSave","HideInHierarchy","addChild","initialize","resolution","clearFlag","backgroundColor","absolute","lastSize","lastSizeIsNoExist","ZERO","DEFAULT_CUBE_SIZE","switchProbeType","DEFAULT_PLANER_SIZE","clearFlags","clearColor","SKYBOX","legacyCC","utils"],"mappings":"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"}