{"version":3,"file":"ZipUtils-0TovRG4S.js","sources":["../../../external/compression/base64-values.ts","../../../external/compression/base64.js","../../../external/compression/gzip.js","../../../external/compression/ZipUtils.js"],"sourcesContent":["\r\nconst BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n\r\nconst BASE64_VALUES = new Array<number>(123); // max char code in base64Keys\r\n\r\nfor (let i = 0; i < 123; ++i) {\r\n    BASE64_VALUES[i] = 64; // fill with placeholder('=') index\r\n}\r\n\r\nfor (let i = 0; i < 64; ++i) {\r\n    BASE64_VALUES[BASE64_KEYS.charCodeAt(i)] = i;\r\n}\r\n\r\nexport default BASE64_VALUES;\r\n","/*--\r\n Copyright 2009-2010 by Stefan Rusterholz.\r\n All rights reserved.\r\n You can choose between MIT and BSD-3-Clause license. License file will be added later.\r\n --*/\r\n\r\nimport strValue from './base64-values';\r\n\r\n/**\r\n * mixin cc.Codec.Base64\r\n */\r\nvar Base64 = {name:'Jacob__Codec__Base64'};\r\n\r\n/**\r\n * <p>\r\n *    cc.Codec.Base64.decode(input[, unicode=false]) -> String (http://en.wikipedia.org/wiki/Base64).\r\n * </p>\r\n * @function\r\n * @param {String} input The base64 encoded string to decode\r\n * @return {String} Decodes a base64 encoded String\r\n * @example\r\n * //decode string\r\n * cc.Codec.Base64.decode(\"U29tZSBTdHJpbmc=\"); // => \"Some String\"\r\n */\r\nBase64.decode = function Jacob__Codec__Base64__decode(input) {\r\n    var output = [],\r\n        chr1, chr2, chr3,\r\n        enc1, enc2, enc3, enc4,\r\n        i = 0;\r\n\r\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n    while (i < input.length) {\r\n        enc1 = strValue[input.charCodeAt(i++)];\r\n        enc2 = strValue[input.charCodeAt(i++)];\r\n        enc3 = strValue[input.charCodeAt(i++)];\r\n        enc4 = strValue[input.charCodeAt(i++)];\r\n\r\n        chr1 = (enc1 << 2) | (enc2 >> 4);\r\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n        chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n        output.push(String.fromCharCode(chr1));\r\n\r\n        if (enc3 !== 64) {\r\n            output.push(String.fromCharCode(chr2));\r\n        }\r\n        if (enc4 !== 64) {\r\n            output.push(String.fromCharCode(chr3));\r\n        }\r\n    }\r\n\r\n    output = output.join('');\r\n\r\n    return output;\r\n};\r\n\r\n/**\r\n * <p>\r\n *    Converts an input string encoded in base64 to an array of integers whose<br/>\r\n *    values represent the decoded string's characters' bytes.\r\n * </p>\r\n * @function\r\n * @param {String} input The String to convert to an array of Integers\r\n * @param {Number} bytes\r\n * @return {Array}\r\n * @example\r\n * //decode string to array\r\n * var decodeArr = cc.Codec.Base64.decodeAsArray(\"U29tZSBTdHJpbmc=\");\r\n */\r\nBase64.decodeAsArray = function Jacob__Codec__Base64___decodeAsArray(input, bytes) {\r\n    var dec = this.decode(input),\r\n        ar = [], i, j, len;\r\n    for (i = 0, len = dec.length / bytes; i < len; i++) {\r\n        ar[i] = 0;\r\n        for (j = bytes - 1; j >= 0; --j) {\r\n            ar[i] += dec.charCodeAt((i * bytes) + j) << (j * 8);\r\n        }\r\n    }\r\n\r\n    return ar;\r\n};\r\n\r\nexport default Base64;\r\n","/*--\r\n Copyright 2009-2010 by Stefan Rusterholz.\r\n All rights reserved.\r\n You can choose between MIT and BSD-3-Clause license. License file will be added later.\r\n --*/\r\n\r\n/**\r\n * See cc.Codec.GZip.gunzip.\r\n * @param {Array | String} data The bytestream to decompress\r\n * Constructor\r\n */\r\nvar GZip = function Jacob__GZip(data) {\r\n    this.data = data;\r\n\r\n    this.debug = false;\r\n    this.gpflags = undefined;\r\n    this.files = 0;\r\n    this.unzipped = [];\r\n    this.buf32k = new Array(32768);\r\n    this.bIdx = 0;\r\n    this.modeZIP = false;\r\n    this.bytepos = 0;\r\n    this.bb = 1;\r\n    this.bits = 0;\r\n    this.nameBuf = [];\r\n    this.fileout = undefined;\r\n    this.literalTree = new Array(GZip.LITERALS);\r\n    this.distanceTree = new Array(32);\r\n    this.treepos = 0;\r\n    this.Places = null;\r\n    this.len = 0;\r\n    this.fpos = new Array(17);\r\n    this.fpos[0] = 0;\r\n    this.flens = undefined;\r\n    this.fmax = undefined;\r\n};\r\n\r\n/**\r\n * Unzips the gzipped data of the 'data' argument.\r\n * @param string  The bytestream to decompress. Either an array of Integers between 0 and 255, or a String.\r\n * @return {String}\r\n */\r\nGZip.gunzip = function (string) {\r\n    if (string.constructor === Array) {\r\n    } else if (string.constructor === String) {\r\n    }\r\n    var gzip = new GZip(string);\r\n    return gzip.gunzip()[0][0];\r\n};\r\n\r\nGZip.HufNode = function () {\r\n    this.b0 = 0;\r\n    this.b1 = 0;\r\n    this.jump = null;\r\n    this.jumppos = -1;\r\n};\r\n\r\n/**\r\n * @constant\r\n * @type Number\r\n */\r\nGZip.LITERALS = 288;\r\n/**\r\n * @constant\r\n * @type Number\r\n */\r\nGZip.NAMEMAX = 256;\r\n\r\nGZip.bitReverse = [\r\n    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,\r\n    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,\r\n    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,\r\n    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,\r\n    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,\r\n    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,\r\n    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,\r\n    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,\r\n    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,\r\n    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,\r\n    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,\r\n    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,\r\n    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,\r\n    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,\r\n    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,\r\n    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,\r\n    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,\r\n    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,\r\n    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,\r\n    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,\r\n    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,\r\n    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,\r\n    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,\r\n    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,\r\n    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,\r\n    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,\r\n    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,\r\n    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,\r\n    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,\r\n    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,\r\n    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,\r\n    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff\r\n];\r\nGZip.cplens = [\r\n    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\r\n    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\r\n];\r\nGZip.cplext = [\r\n    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\r\n    3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99\r\n];\r\n/* 99==invalid */\r\nGZip.cpdist = [\r\n    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d,\r\n    0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1,\r\n    0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01,\r\n    0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001\r\n];\r\nGZip.cpdext = [\r\n    0, 0, 0, 0, 1, 1, 2, 2,\r\n    3, 3, 4, 4, 5, 5, 6, 6,\r\n    7, 7, 8, 8, 9, 9, 10, 10,\r\n    11, 11, 12, 12, 13, 13\r\n];\r\nGZip.border = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\r\n\r\n\r\n/**\r\n * gunzip\r\n * @return {Array}\r\n */\r\nGZip.prototype.gunzip = function () {\r\n    this.outputArr = [];\r\n\r\n    //convertToByteArray(input);\r\n    //if (this.debug) alert(this.data);\r\n\r\n    this.nextFile();\r\n    return this.unzipped;\r\n};\r\n\r\nGZip.prototype.readByte = function () {\r\n    this.bits += 8;\r\n    if (this.bytepos < this.data.length) {\r\n        //return this.data[this.bytepos++]; // Array\r\n        return this.data.charCodeAt(this.bytepos++);\r\n    } else {\r\n        return -1;\r\n    }\r\n};\r\n\r\nGZip.prototype.byteAlign = function () {\r\n    this.bb = 1;\r\n};\r\n\r\nGZip.prototype.readBit = function () {\r\n    var carry;\r\n    this.bits++;\r\n    carry = (this.bb & 1);\r\n    this.bb >>= 1;\r\n    if (this.bb === 0) {\r\n        this.bb = this.readByte();\r\n        carry = (this.bb & 1);\r\n        this.bb = (this.bb >> 1) | 0x80;\r\n    }\r\n    return carry;\r\n};\r\n\r\nGZip.prototype.readBits = function (a) {\r\n    var res = 0,\r\n        i = a;\r\n\r\n    while (i--) res = (res << 1) | this.readBit();\r\n    if (a) res = GZip.bitReverse[res] >> (8 - a);\r\n\r\n    return res;\r\n};\r\n\r\nGZip.prototype.flushBuffer = function () {\r\n    this.bIdx = 0;\r\n};\r\n\r\nGZip.prototype.addBuffer = function (a) {\r\n    this.buf32k[this.bIdx++] = a;\r\n    this.outputArr.push(String.fromCharCode(a));\r\n    if (this.bIdx === 0x8000) this.bIdx = 0;\r\n};\r\n\r\nGZip.prototype.IsPat = function () {\r\n    while (1) {\r\n        if (this.fpos[this.len] >= this.fmax)       return -1;\r\n        if (this.flens[this.fpos[this.len]] === this.len) return this.fpos[this.len]++;\r\n        this.fpos[this.len]++;\r\n    }\r\n};\r\n\r\nGZip.prototype.Rec = function () {\r\n    var curplace = this.Places[this.treepos];\r\n    var tmp;\r\n    //if (this.debug) document.write(\"<br>len:\"+this.len+\" treepos:\"+this.treepos);\r\n    if (this.len === 17) { //war 17\r\n        return -1;\r\n    }\r\n    this.treepos++;\r\n    this.len++;\r\n\r\n    tmp = this.IsPat();\r\n    //if (this.debug) document.write(\"<br>IsPat \"+tmp);\r\n    if (tmp >= 0) {\r\n        curplace.b0 = tmp;\r\n        /* leaf cell for 0-bit */\r\n        //if (this.debug) document.write(\"<br>b0 \"+curplace.b0);\r\n    } else {\r\n        /* Not a Leaf cell */\r\n        curplace.b0 = 0x8000;\r\n        //if (this.debug) document.write(\"<br>b0 \"+curplace.b0);\r\n        if (this.Rec()) return -1;\r\n    }\r\n    tmp = this.IsPat();\r\n    if (tmp >= 0) {\r\n        curplace.b1 = tmp;\r\n        /* leaf cell for 1-bit */\r\n        //if (this.debug) document.write(\"<br>b1 \"+curplace.b1);\r\n        curplace.jump = null;\r\n        /* Just for the display routine */\r\n    } else {\r\n        /* Not a Leaf cell */\r\n        curplace.b1 = 0x8000;\r\n        //if (this.debug) document.write(\"<br>b1 \"+curplace.b1);\r\n        curplace.jump = this.Places[this.treepos];\r\n        curplace.jumppos = this.treepos;\r\n        if (this.Rec()) return -1;\r\n    }\r\n    this.len--;\r\n    return 0;\r\n};\r\n\r\nGZip.prototype.CreateTree = function (currentTree, numval, lengths, show) {\r\n    var i;\r\n    /* Create the Huffman decode tree/table */\r\n    //if (this.debug) document.write(\"currentTree \"+currentTree+\" numval \"+numval+\" lengths \"+lengths+\" show \"+show);\r\n    this.Places = currentTree;\r\n    this.treepos = 0;\r\n    this.flens = lengths;\r\n    this.fmax = numval;\r\n    for (i = 0; i < 17; i++) this.fpos[i] = 0;\r\n    this.len = 0;\r\n    if (this.Rec()) {\r\n        //if (this.debug) alert(\"invalid huffman tree\\n\");\r\n        return -1;\r\n    }\r\n    // if (this.debug) {\r\n    //   document.write('<br>Tree: '+this.Places.length);\r\n    //   for (var a=0;a<32;a++){\r\n    //     document.write(\"Places[\"+a+\"].b0=\"+this.Places[a].b0+\"<br>\");\r\n    //     document.write(\"Places[\"+a+\"].b1=\"+this.Places[a].b1+\"<br>\");\r\n    //   }\r\n    // }\r\n\r\n    return 0;\r\n};\r\n\r\nGZip.prototype.DecodeValue = function (currentTree) {\r\n    var len, i,\r\n        xtreepos = 0,\r\n        X = currentTree[xtreepos],\r\n        b;\r\n\r\n    /* decode one symbol of the data */\r\n    while (1) {\r\n        b = this.readBit();\r\n        // if (this.debug) document.write(\"b=\"+b);\r\n        if (b) {\r\n            if (!(X.b1 & 0x8000)) {\r\n                // if (this.debug) document.write(\"ret1\");\r\n                return X.b1;\r\n                /* If leaf node, return data */\r\n            }\r\n            X = X.jump;\r\n            len = currentTree.length;\r\n            for (i = 0; i < len; i++) {\r\n                if (currentTree[i] === X) {\r\n                    xtreepos = i;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            if (!(X.b0 & 0x8000)) {\r\n                // if (this.debug) document.write(\"ret2\");\r\n                return X.b0;\r\n                /* If leaf node, return data */\r\n            }\r\n            xtreepos++;\r\n            X = currentTree[xtreepos];\r\n        }\r\n    }\r\n    // if (this.debug) document.write(\"ret3\");\r\n\r\n    return -1;\r\n};\r\n\r\nGZip.prototype.DeflateLoop = function () {\r\n    var last, c, type, i, len;\r\n    do {\r\n        last = this.readBit();\r\n        type = this.readBits(2);\r\n\r\n        if (type === 0) {\r\n            var blockLen, cSum;\r\n\r\n            // Stored\r\n            this.byteAlign();\r\n            blockLen = this.readByte();\r\n            blockLen |= (this.readByte() << 8);\r\n\r\n            cSum = this.readByte();\r\n            cSum |= (this.readByte() << 8);\r\n\r\n            if (((blockLen ^ ~cSum) & 0xffff)) {\r\n                document.write(\"BlockLen checksum mismatch\\n\"); // FIXME: use throw\r\n            }\r\n            while (blockLen--) {\r\n                c = this.readByte();\r\n                this.addBuffer(c);\r\n            }\r\n        } else if (type === 1) {\r\n            var j;\r\n\r\n            /* Fixed Huffman tables -- fixed decode routine */\r\n            while (1) {\r\n                /*\r\n                 256    0000000        0\r\n                 :   :     :\r\n                 279    0010111        23\r\n                 0   00110000    48\r\n                 :    :      :\r\n                 143    10111111    191\r\n                 280 11000000    192\r\n                 :    :      :\r\n                 287 11000111    199\r\n                 144    110010000    400\r\n                 :    :       :\r\n                 255    111111111    511\r\n\r\n                 Note the bit order!\r\n                 */\r\n                j = (GZip.bitReverse[this.readBits(7)] >> 1);\r\n                if (j > 23) {\r\n                    j = (j << 1) | this.readBit();\r\n                    /* 48..255 */\r\n\r\n                    if (j > 199) {              /* 200..255 */\r\n                        j -= 128;\r\n                        /*  72..127 */\r\n                        j = (j << 1) | this.readBit();\r\n                        /* 144..255 << */\r\n                    } else {                    /*  48..199 */\r\n                        j -= 48;\r\n                        /*   0..151 */\r\n                        if (j > 143) {\r\n                            j = j + 136;\r\n                            /* 280..287 << */\r\n                            /*   0..143 << */\r\n                        }\r\n                    }\r\n                } else {                      /*   0..23 */\r\n                    j += 256;\r\n                    /* 256..279 << */\r\n                }\r\n                if (j < 256) {\r\n                    this.addBuffer(j);\r\n                } else if (j === 256) {\r\n                    /* EOF */\r\n                    break; // FIXME: make this the loop-condition\r\n                } else {\r\n                    var len, dist;\r\n\r\n                    j -= 256 + 1;\r\n                    /* bytes + EOF */\r\n                    len = this.readBits(GZip.cplext[j]) + GZip.cplens[j];\r\n\r\n                    j = GZip.bitReverse[this.readBits(5)] >> 3;\r\n                    if (GZip.cpdext[j] > 8) {\r\n                        dist = this.readBits(8);\r\n                        dist |= (this.readBits(GZip.cpdext[j] - 8) << 8);\r\n                    } else {\r\n                        dist = this.readBits(GZip.cpdext[j]);\r\n                    }\r\n                    dist += GZip.cpdist[j];\r\n\r\n                    for (j = 0; j < len; j++) {\r\n                        var c = this.buf32k[(this.bIdx - dist) & 0x7fff];\r\n                        this.addBuffer(c);\r\n                    }\r\n                }\r\n            } // while\r\n\r\n        } else if (type === 2) {\r\n            var j, n, literalCodes, distCodes, lenCodes;\r\n            var ll = new Array(288 + 32);    // \"static\" just to preserve stack\r\n\r\n            // Dynamic Huffman tables\r\n\r\n            literalCodes = 257 + this.readBits(5);\r\n            distCodes = 1 + this.readBits(5);\r\n            lenCodes = 4 + this.readBits(4);\r\n            for (j = 0; j < 19; j++) {\r\n                ll[j] = 0;\r\n            }\r\n\r\n            // Get the decode tree code lengths\r\n\r\n            for (j = 0; j < lenCodes; j++) {\r\n                ll[GZip.border[j]] = this.readBits(3);\r\n            }\r\n            len = this.distanceTree.length;\r\n            for (i = 0; i < len; i++) this.distanceTree[i] = new GZip.HufNode();\r\n            if (this.CreateTree(this.distanceTree, 19, ll, 0)) {\r\n                this.flushBuffer();\r\n                return 1;\r\n            }\r\n            // if (this.debug) {\r\n            //   document.write(\"<br>distanceTree\");\r\n            //   for(var a=0;a<this.distanceTree.length;a++){\r\n            //     document.write(\"<br>\"+this.distanceTree[a].b0+\" \"+this.distanceTree[a].b1+\" \"+this.distanceTree[a].jump+\" \"+this.distanceTree[a].jumppos);\r\n            //   }\r\n            // }\r\n\r\n            //read in literal and distance code lengths\r\n            n = literalCodes + distCodes;\r\n            i = 0;\r\n            var z = -1;\r\n            // if (this.debug) document.write(\"<br>n=\"+n+\" bits: \"+this.bits+\"<br>\");\r\n            while (i < n) {\r\n                z++;\r\n                j = this.DecodeValue(this.distanceTree);\r\n                // if (this.debug) document.write(\"<br>\"+z+\" i:\"+i+\" decode: \"+j+\"    bits \"+this.bits+\"<br>\");\r\n                if (j < 16) {    // length of code in bits (0..15)\r\n                    ll[i++] = j;\r\n                } else if (j === 16) {    // repeat last length 3 to 6 times\r\n                    var l;\r\n                    j = 3 + this.readBits(2);\r\n                    if (i + j > n) {\r\n                        this.flushBuffer();\r\n                        return 1;\r\n                    }\r\n                    l = i ? ll[i - 1] : 0;\r\n                    while (j--) {\r\n                        ll[i++] = l;\r\n                    }\r\n                } else {\r\n                    if (j === 17) {        // 3 to 10 zero length codes\r\n                        j = 3 + this.readBits(3);\r\n                    } else {        // j == 18: 11 to 138 zero length codes\r\n                        j = 11 + this.readBits(7);\r\n                    }\r\n                    if (i + j > n) {\r\n                        this.flushBuffer();\r\n                        return 1;\r\n                    }\r\n                    while (j--) {\r\n                        ll[i++] = 0;\r\n                    }\r\n                }\r\n            } // while\r\n\r\n            // Can overwrite tree decode tree as it is not used anymore\r\n            len = this.literalTree.length;\r\n            for (i = 0; i < len; i++)\r\n                this.literalTree[i] = new GZip.HufNode();\r\n            if (this.CreateTree(this.literalTree, literalCodes, ll, 0)) {\r\n                this.flushBuffer();\r\n                return 1;\r\n            }\r\n            len = this.literalTree.length;\r\n            for (i = 0; i < len; i++) this.distanceTree[i] = new GZip.HufNode();\r\n            var ll2 = new Array();\r\n            for (i = literalCodes; i < ll.length; i++) ll2[i - literalCodes] = ll[i];\r\n            if (this.CreateTree(this.distanceTree, distCodes, ll2, 0)) {\r\n                this.flushBuffer();\r\n                return 1;\r\n            }\r\n            // if (this.debug) document.write(\"<br>literalTree\");\r\n            while (1) {\r\n                j = this.DecodeValue(this.literalTree);\r\n                if (j >= 256) {        // In C64: if carry set\r\n                    var len, dist;\r\n                    j -= 256;\r\n                    if (j === 0) {\r\n                        // EOF\r\n                        break;\r\n                    }\r\n                    j--;\r\n                    len = this.readBits(GZip.cplext[j]) + GZip.cplens[j];\r\n\r\n                    j = this.DecodeValue(this.distanceTree);\r\n                    if (GZip.cpdext[j] > 8) {\r\n                        dist = this.readBits(8);\r\n                        dist |= (this.readBits(GZip.cpdext[j] - 8) << 8);\r\n                    } else {\r\n                        dist = this.readBits(GZip.cpdext[j]);\r\n                    }\r\n                    dist += GZip.cpdist[j];\r\n                    while (len--) {\r\n                        var c = this.buf32k[(this.bIdx - dist) & 0x7fff];\r\n                        this.addBuffer(c);\r\n                    }\r\n                } else {\r\n                    this.addBuffer(j);\r\n                }\r\n            } // while\r\n        }\r\n    } while (!last);\r\n    this.flushBuffer();\r\n\r\n    this.byteAlign();\r\n    return 0;\r\n};\r\n\r\nGZip.prototype.unzipFile = function (name) {\r\n    var i;\r\n    this.gunzip();\r\n    for (i = 0; i < this.unzipped.length; i++) {\r\n        if (this.unzipped[i][1] === name) {\r\n            return this.unzipped[i][0];\r\n        }\r\n    }\r\n};\r\n\r\nGZip.prototype.nextFile = function () {\r\n    // if (this.debug) alert(\"NEXTFILE\");\r\n\r\n    this.outputArr = [];\r\n    this.modeZIP = false;\r\n\r\n    var tmp = [];\r\n    tmp[0] = this.readByte();\r\n    tmp[1] = this.readByte();\r\n    // if (this.debug) alert(\"type: \"+tmp[0]+\" \"+tmp[1]);\r\n\r\n    if (tmp[0] === 0x78 && tmp[1] === 0xda) { //GZIP\r\n        // if (this.debug) alert(\"GEONExT-GZIP\");\r\n        this.DeflateLoop();\r\n        // if (this.debug) alert(this.outputArr.join(''));\r\n        this.unzipped[this.files] = [this.outputArr.join(''), \"geonext.gxt\"];\r\n        this.files++;\r\n    }\r\n    if (tmp[0] === 0x1f && tmp[1] === 0x8b) { //GZIP\r\n        // if (this.debug) alert(\"GZIP\");\r\n        this.skipdir();\r\n        // if (this.debug) alert(this.outputArr.join(''));\r\n        this.unzipped[this.files] = [this.outputArr.join(''), \"file\"];\r\n        this.files++;\r\n    }\r\n    if (tmp[0] === 0x50 && tmp[1] === 0x4b) { //ZIP\r\n        this.modeZIP = true;\r\n        tmp[2] = this.readByte();\r\n        tmp[3] = this.readByte();\r\n        if (tmp[2] === 0x03 && tmp[3] === 0x04) {\r\n            //MODE_ZIP\r\n            tmp[0] = this.readByte();\r\n            tmp[1] = this.readByte();\r\n            // if (this.debug) alert(\"ZIP-Version: \"+tmp[1]+\" \"+tmp[0]/10+\".\"+tmp[0]%10);\r\n\r\n            this.gpflags = this.readByte();\r\n            this.gpflags |= (this.readByte() << 8);\r\n            // if (this.debug) alert(\"gpflags: \"+this.gpflags);\r\n\r\n            var method = this.readByte();\r\n            method |= (this.readByte() << 8);\r\n            // if (this.debug) alert(\"method: \"+method);\r\n\r\n            this.readByte();\r\n            this.readByte();\r\n            this.readByte();\r\n            this.readByte();\r\n\r\n//       var crc = this.readByte();\r\n//       crc |= (this.readByte()<<8);\r\n//       crc |= (this.readByte()<<16);\r\n//       crc |= (this.readByte()<<24);\r\n\r\n            var compSize = this.readByte();\r\n            compSize |= (this.readByte() << 8);\r\n            compSize |= (this.readByte() << 16);\r\n            compSize |= (this.readByte() << 24);\r\n\r\n            var size = this.readByte();\r\n            size |= (this.readByte() << 8);\r\n            size |= (this.readByte() << 16);\r\n            size |= (this.readByte() << 24);\r\n\r\n            // if (this.debug) alert(\"local CRC: \"+crc+\"\\nlocal Size: \"+size+\"\\nlocal CompSize: \"+compSize);\r\n\r\n            var filelen = this.readByte();\r\n            filelen |= (this.readByte() << 8);\r\n\r\n            var extralen = this.readByte();\r\n            extralen |= (this.readByte() << 8);\r\n\r\n            // if (this.debug) alert(\"filelen \"+filelen);\r\n            i = 0;\r\n            this.nameBuf = [];\r\n            while (filelen--) {\r\n                var c = this.readByte();\r\n                if (c === \"/\" | c === \":\") {\r\n                    i = 0;\r\n                } else if (i < GZip.NAMEMAX - 1) {\r\n                    this.nameBuf[i++] = String.fromCharCode(c);\r\n                }\r\n            }\r\n            // if (this.debug) alert(\"nameBuf: \"+this.nameBuf);\r\n\r\n            if (!this.fileout) this.fileout = this.nameBuf;\r\n\r\n            var i = 0;\r\n            while (i < extralen) {\r\n                c = this.readByte();\r\n                i++;\r\n            }\r\n\r\n            // if (size = 0 && this.fileOut.charAt(this.fileout.length-1)==\"/\"){\r\n            //   //skipdir\r\n            //   // if (this.debug) alert(\"skipdir\");\r\n            // }\r\n            if (method === 8) {\r\n                this.DeflateLoop();\r\n                // if (this.debug) alert(this.outputArr.join(''));\r\n                this.unzipped[this.files] = [this.outputArr.join(''), this.nameBuf.join('')];\r\n                this.files++;\r\n            }\r\n            this.skipdir();\r\n        }\r\n    }\r\n};\r\n\r\nGZip.prototype.skipdir = function () {\r\n    var tmp = [];\r\n    var compSize, size, os, i, c;\r\n\r\n    if ((this.gpflags & 8)) {\r\n        tmp[0] = this.readByte();\r\n        tmp[1] = this.readByte();\r\n        tmp[2] = this.readByte();\r\n        tmp[3] = this.readByte();\r\n\r\n//     if (tmp[0] == 0x50 && tmp[1] == 0x4b && tmp[2] == 0x07 && tmp[3] == 0x08) {\r\n//       crc = this.readByte();\r\n//       crc |= (this.readByte()<<8);\r\n//       crc |= (this.readByte()<<16);\r\n//       crc |= (this.readByte()<<24);\r\n//     } else {\r\n//       crc = tmp[0] | (tmp[1]<<8) | (tmp[2]<<16) | (tmp[3]<<24);\r\n//     }\r\n\r\n        compSize = this.readByte();\r\n        compSize |= (this.readByte() << 8);\r\n        compSize |= (this.readByte() << 16);\r\n        compSize |= (this.readByte() << 24);\r\n\r\n        size = this.readByte();\r\n        size |= (this.readByte() << 8);\r\n        size |= (this.readByte() << 16);\r\n        size |= (this.readByte() << 24);\r\n    }\r\n\r\n    if (this.modeZIP) this.nextFile();\r\n\r\n    tmp[0] = this.readByte();\r\n    if (tmp[0] !== 8) {\r\n        // if (this.debug) alert(\"Unknown compression method!\");\r\n        return 0;\r\n    }\r\n\r\n    this.gpflags = this.readByte();\r\n    // if (this.debug && (this.gpflags & ~(0x1f))) alert(\"Unknown flags set!\");\r\n\r\n    this.readByte();\r\n    this.readByte();\r\n    this.readByte();\r\n    this.readByte();\r\n\r\n    this.readByte();\r\n    os = this.readByte();\r\n\r\n    if ((this.gpflags & 4)) {\r\n        tmp[0] = this.readByte();\r\n        tmp[2] = this.readByte();\r\n        this.len = tmp[0] + 256 * tmp[1];\r\n        // if (this.debug) alert(\"Extra field size: \"+this.len);\r\n        for (i = 0; i < this.len; i++)\r\n            this.readByte();\r\n    }\r\n\r\n    if ((this.gpflags & 8)) {\r\n        i = 0;\r\n        this.nameBuf = [];\r\n        while (c = this.readByte()) {\r\n            if (c === \"7\" || c === \":\")\r\n                i = 0;\r\n            if (i < GZip.NAMEMAX - 1)\r\n                this.nameBuf[i++] = c;\r\n        }\r\n        //this.nameBuf[i] = \"\\0\";\r\n        // if (this.debug) alert(\"original file name: \"+this.nameBuf);\r\n    }\r\n\r\n    if ((this.gpflags & 16)) {\r\n        while (c = this.readByte()) { // FIXME: looks like they read to the end of the stream, should be doable more efficiently\r\n            //FILE COMMENT\r\n        }\r\n    }\r\n\r\n    if ((this.gpflags & 2)) {\r\n        this.readByte();\r\n        this.readByte();\r\n    }\r\n\r\n    this.DeflateLoop();\r\n\r\n//   crc = this.readByte();\r\n//   crc |= (this.readByte()<<8);\r\n//   crc |= (this.readByte()<<16);\r\n//   crc |= (this.readByte()<<24);\r\n\r\n    size = this.readByte();\r\n    size |= (this.readByte() << 8);\r\n    size |= (this.readByte() << 16);\r\n    size |= (this.readByte() << 24);\r\n\r\n    if (this.modeZIP) this.nextFile();\r\n};\r\n\r\nexport default GZip;\r\n","/*--\r\n Copyright 2009-2010 by Stefan Rusterholz.\r\n All rights reserved.\r\n You can choose between MIT and BSD-3-Clause license. License file will be added later.\r\n --*/\r\nimport Base64 from './base64';\r\nimport GZip from './gzip';\r\nvar codec = {name:'Jacob__Codec'};\r\n\r\ncodec.Base64 = Base64;\r\ncodec.GZip = GZip;\r\n\r\n/**\r\n * Unpack a gzipped byte array\r\n * @param {Array} input Byte array\r\n * @returns {String} Unpacked byte string\r\n */\r\ncodec.unzip = function () {\r\n    return codec.GZip.gunzip.apply(codec.GZip, arguments);\r\n};\r\n\r\n/**\r\n * Unpack a gzipped byte string encoded as base64\r\n * @param {String} input Byte string encoded as base64\r\n * @returns {String} Unpacked byte string\r\n */\r\ncodec.unzipBase64 = function () {\r\n    var buffer = codec.Base64.decode.apply(codec.Base64, arguments);\r\n    try {\r\n        return codec.GZip.gunzip.call(codec.GZip, buffer);\r\n    }\r\n    catch(e) {\r\n        // if not zipped, just skip\r\n        return buffer.slice(7); // get image data\r\n    }\r\n};\r\n\r\n/**\r\n * Unpack a gzipped byte string encoded as base64\r\n * @param {String} input Byte string encoded as base64\r\n * @param {Number} bytes Bytes per array item\r\n * @returns {Array} Unpacked byte array\r\n */\r\ncodec.unzipBase64AsArray = function (input, bytes) {\r\n    bytes = bytes || 1;\r\n\r\n    var dec = this.unzipBase64(input),\r\n        ar = [], i, j, len;\r\n    for (i = 0, len = dec.length / bytes; i < len; i++) {\r\n        ar[i] = 0;\r\n        for (j = bytes - 1; j >= 0; --j) {\r\n            ar[i] += dec.charCodeAt((i * bytes) + j) << (j * 8);\r\n        }\r\n    }\r\n    return ar;\r\n};\r\n\r\n/**\r\n * Unpack a gzipped byte array\r\n * @param {Array} input Byte array\r\n * @param {Number} bytes Bytes per array item\r\n * @returns {Array} Unpacked byte array\r\n */\r\ncodec.unzipAsArray = function (input, bytes) {\r\n    bytes = bytes || 1;\r\n\r\n    var dec = this.unzip(input),\r\n        ar = [], i, j, len;\r\n    for (i = 0, len = dec.length / bytes; i < len; i++) {\r\n        ar[i] = 0;\r\n        for (j = bytes - 1; j >= 0; --j) {\r\n            ar[i] += dec.charCodeAt((i * bytes) + j) << (j * 8);\r\n        }\r\n    }\r\n    return ar;\r\n};\r\n\r\nexport default codec;"],"names":["BASE64_VALUES","Array","i","charCodeAt","Base64","name","input","chr1","chr2","chr3","enc2","enc3","enc4","output","replace","length","strValue","push","String","fromCharCode","join","bytes","j","len","dec","this","decode","ar","GZip","data","debug","gpflags","undefined","files","unzipped","buf32k","bIdx","modeZIP","bytepos","bb","bits","nameBuf","fileout","literalTree","LITERALS","distanceTree","treepos","Places","fpos","flens","fmax","gunzip","string","constructor","HufNode","b0","b1","jump","jumppos","NAMEMAX","bitReverse","cplens","cplext","cpdist","cpdext","border","prototype","outputArr","nextFile","readByte","byteAlign","readBit","carry","readBits","a","res","flushBuffer","addBuffer","IsPat","Rec","tmp","curplace","CreateTree","currentTree","numval","lengths","DecodeValue","xtreepos","X","DeflateLoop","last","type","blockLen","cSum","document","write","c","dist","n","literalCodes","distCodes","lenCodes","ll","l","ll2","unzipFile","skipdir","method","filelen","extralen","codec","exports","unzip","apply","arguments","unzipBase64","buffer","call","e","slice","unzipBase64AsArray","unzipAsArray"],"mappings":"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"}