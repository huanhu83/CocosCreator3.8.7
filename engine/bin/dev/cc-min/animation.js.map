{"version":3,"file":"animation.js","sources":["../../../cocos/animation/embedded-player/embedded-player.ts","../../../cocos/animation/embedded-player/embedded-animation-clip-player.ts","../../../cocos/animation/embedded-player/embedded-particle-system-player.ts","../../../cocos/animation/tracks/array-track.ts","../../../cocos/animation/value-proxy-factories/uniform.ts","../../../cocos/animation/value-proxy-factories/morph-weights.ts","../../../cocos/animation/marionette/variable/basic.ts","../../../cocos/animation/marionette/ownership.ts","../../../cocos/animation/marionette/variable/trigger-variable.ts","../../../cocos/animation/marionette/variable/primitive-variable.ts","../../../cocos/animation/marionette/variable/vec3-variable.ts","../../../cocos/animation/marionette/variable/quat-variable.ts","../../../cocos/animation/marionette/variable/index.ts","../../../cocos/animation/marionette/errors.ts","../../../cocos/animation/marionette/animation-graph-editor-extras-clone-helper.ts","../../../cocos/animation/marionette/state-machine/state.ts","../../../cocos/animation/marionette/event/event-binding.ts","../../../cocos/animation/marionette/state-machine/motion-state.ts","../../../cocos/serialization/deserialize-symbols.ts","../../../cocos/animation/marionette/animation-graph-like.ts","../../../cocos/core/utils/internal.ts","../../../cocos/animation/marionette/pose-graph/foundation/node-shell.ts","../../../cocos/animation/marionette/pose-graph/foundation/type-system.ts","../../../cocos/animation/marionette/pose-graph/foundation/errors.ts","../../../cocos/animation/marionette/pose-graph/foundation/pose-graph-node.ts","../../../cocos/animation/marionette/pose-graph/foundation/authoring/node-authoring.ts","../../../cocos/animation/marionette/pose-graph/decorator/node.ts","../../../cocos/animation/marionette/pose-graph/foundation/authoring/input-authoring.ts","../../../cocos/animation/core/transform.ts","../../../cocos/animation/core/pose.ts","../../../cocos/animation/marionette/pose-graph/pose-node.ts","../../../cocos/animation/marionette/pose-graph/pure-value-node.ts","../../../cocos/animation/marionette/pose-graph/decorator/input.ts","../../../cocos/animation/marionette/pose-graph/graph-output-node.ts","../../../cocos/animation/marionette/pose-graph/pose-graph.ts","../../../cocos/animation/marionette/animation-graph.ts","../../../cocos/animation/marionette/create-eval.ts","../../../cocos/animation/marionette/motion/motion.ts","../../../cocos/animation/wrap.ts","../../../cocos/animation/marionette/animation-graph-animation-clip-binding.ts","../../../cocos/animation/marionette/motion/clip-motion.ts","../../../cocos/animation/marionette/motion/animation-blend.ts","../../../cocos/animation/marionette/parametric.ts","../../../cocos/animation/marionette/motion/blend-1d.ts","../../../cocos/animation/marionette/motion/animation-blend-1d.ts","../../../cocos/animation/marionette/motion/blend-2d.ts","../../../cocos/animation/marionette/motion/animation-blend-2d.ts","../../../cocos/animation/marionette/motion/animation-blend-direct.ts","../../../cocos/animation/marionette/state-machine/condition/unary-condition.ts","../../../cocos/animation/marionette/animation-mask.ts","../../../cocos/animation/marionette/animation-graph-variant.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/menu-common.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/use-stashed-pose.ts","../../../cocos/animation/marionette/state-machine/condition/binding/binding.ts","../../../cocos/animation/marionette/state-machine/condition/binding/editor.ts","../../../cocos/animation/marionette/state-machine/condition/binding/variable-binding.ts","../../../cocos/animation/marionette/state-machine/condition/binding/auxiliary-curve-binding.ts","../../../cocos/animation/marionette/state-machine/condition/binding/state-weight-binding.ts","../../../cocos/animation/marionette/state-machine/condition/binding/state-motion-time-binding.ts","../../../cocos/animation/marionette/state-machine/condition/binary-condition.ts","../../../cocos/animation/marionette/state-machine/condition/trigger-condition.ts","../../../cocos/animation/marionette/state-machine/state-machine-component.ts","../../../cocos/animation/core/transform-array.ts","../../../cocos/animation/core/shared-stack-based-allocator.ts","../../../cocos/animation/core/pose-allocator.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/transform-space.ts","../../../cocos/core/algorithm/partition.ts","../../../cocos/animation/core/pose-heap-allocator.ts","../../../cocos/animation/marionette/animation-graph-context.ts","../../../cocos/animation/marionette/pose-graph/motion-sync/motion-sync-info.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/play-or-sample-motion-pose-node-shared.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/play-motion.ts","../../../cocos/animation/marionette/pose-graph/instantiation.ts","../../../cocos/animation/marionette/state-machine/state-machine-eval.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/state-machine.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/sample-motion.ts","../../../cocos/animation/marionette/pose-graph/utils.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/additively-blend.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/blend-in-proportion.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/blend-two-pose-base.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/blend-two-pose.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/filtering-blend.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/choose-pose/menu.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/intensity-specification.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/choose-pose/choose-pose-base.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/choose-pose/choose-pose-by-boolean.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/choose-pose/choose-pose-by-index.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/modify-pose-base.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/apply-transform.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/copy-transform.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/set-auxiliary-curve.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/ik/two-bone-ik-debugger.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/ik/solve-two-bone-ik.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/ik/two-bone-ik-solver.ts","../../../cocos/animation/marionette/pose-graph/pose-nodes/ik/menu.ts","../../../cocos/animation/marionette/pose-graph/stash/runtime-stash.ts","../../../cocos/animation/marionette/pose-graph/pure-value-nodes/get-variable.ts","../../../cocos/animation/marionette/pose-graph/motion-sync/runtime-motion-sync.ts","../../../cocos/animation/marionette/pose-graph/default-top-level-pose-node.ts","../../../cocos/animation/marionette/graph-eval.ts","../../../cocos/3d/skeletal-animation/limits.ts","../../../cocos/animation/marionette/animation-controller.ts","../../../cocos/3d/skeletal-animation/skeletal-animation-blending.ts","../../../cocos/animation/animation-manager.ts"],"sourcesContent":["/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable } from 'cc.decorator';\r\nimport { EditorExtendable } from '../../core';\r\nimport type { Node } from '../../scene-graph';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}EmbeddedPlayer`)\r\nexport class EmbeddedPlayer extends EditorExtendable {\r\n    /**\r\n     * @en\r\n     * Begin time, in seconds.\r\n     * @zh\r\n     * 开始时间，以秒为单位。\r\n     */\r\n    @serializable\r\n    public begin = 0.0;\r\n\r\n    /**\r\n      * @en\r\n      * End time, in seconds.\r\n      * @zh\r\n      * 结束时间，以秒为单位。\r\n      */\r\n    @serializable\r\n    public end = 0.0;\r\n\r\n    /**\r\n      * @en\r\n      * Whether the speed of this embedded player should be reconciled with the host animation clip.\r\n      * @zh\r\n      * 子区域的播放速度是否应和宿主动画剪辑保持一致。\r\n      */\r\n    @serializable\r\n    public reconciledSpeed = false;\r\n\r\n    /**\r\n     * @en\r\n     * Player of the embedded player.\r\n     * @zh\r\n     * 子区域的播放器。\r\n     */\r\n    @serializable\r\n    public playable: EmbeddedPlayable | null = null;\r\n}\r\n\r\nexport abstract class EmbeddedPlayable {\r\n    /**\r\n     * @en\r\n     * Instantiates this sub region.\r\n     * @zh\r\n     * 实例化此子区域。\r\n     * @param root The root node of animation context.\r\n     * @internal\r\n     */\r\n    public abstract instantiate(root: Node): EmbeddedPlayableState | null;\r\n}\r\n\r\nexport abstract class EmbeddedPlayableState {\r\n    constructor (randomAccess: boolean) {\r\n        this._randomAccess = randomAccess;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 是否可以随意调整此播放器到任何时间。\r\n     * @en\r\n     * Indicates if this player can be adjusted to any time.\r\n     */\r\n    public get randomAccess (): boolean {\r\n        return this._randomAccess;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 销毁此播放器。\r\n     * @zh\r\n     * Destroys this player state.\r\n     */\r\n    public abstract destroy (): void;\r\n\r\n    /**\r\n     * @zh\r\n     * 该方法在此播放器开始播放时触发。\r\n     * @en\r\n     * This method is called when this player gets to play.\r\n     */\r\n    public abstract play(): void;\r\n\r\n    /**\r\n     * @zh\r\n     * 该方法在此播放器暂停播放时触发。\r\n     * @en\r\n     * This method is called when this player pauses.\r\n     */\r\n    public abstract pause(): void;\r\n\r\n    /**\r\n     * @zh\r\n     * 该方法在此播放器结束播放时触发，或在宿主动画剪辑本身停止播放时触发。\r\n     * @en\r\n     * This method is called when this player ends its playback, and is called when the host animation clip is stopped.\r\n     */\r\n    public abstract stop(): void;\r\n\r\n    /**\r\n     * @zh\r\n     * 如果 [[`EmbeddedPlayer.reconciledSpeed`]] 为 `true`，则在宿主的播放速度改变时触发。\r\n     * @en\r\n     * If [[`EmbeddedPlayer.reconciledSpeed`]] is `true`, is called when the host changes its speed.\r\n     * @param speed The speed.\r\n     */\r\n    public abstract setSpeed(speed: number): void;\r\n\r\n    public setTime (_time: number): void {\r\n    }\r\n\r\n    private declare _randomAccess: boolean;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable } from 'cc.decorator';\r\nimport { errorID } from '../../core';\r\nimport type { Node } from '../../scene-graph/node';\r\nimport { AnimationClip } from '../animation-clip';\r\nimport { AnimationState } from '../animation-state';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\nimport { EmbeddedPlayableState, EmbeddedPlayable } from './embedded-player';\r\n\r\n/**\r\n * @en\r\n * The embedded animation clip playable. The playable play animation clip on a embedded player.\r\n * @zh\r\n * 动画剪辑子区域播放器。此播放器在子区域上播放动画剪辑。\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}EmbeddedAnimationClipPlayable`)\r\nexport class EmbeddedAnimationClipPlayable extends EmbeddedPlayable {\r\n    /**\r\n     * @en\r\n     * Path to the node onto which the animation clip would be played, relative from animation context root.\r\n     * @zh\r\n     * 要播放动画剪辑的节点的路径，相对于动画上下文的根节点。\r\n     */\r\n    @serializable\r\n    public path = '';\r\n\r\n    /**\r\n     * @en\r\n     * The animation clip to play.\r\n     * @zh\r\n     * 要播放的动画剪辑。\r\n     */\r\n    @serializable\r\n    public clip: AnimationClip | null = null;\r\n\r\n    public instantiate (root: Node): EmbeddedAnimationClipPlayableState | null {\r\n        const { clip, path } = this;\r\n        if (!clip) {\r\n            return null;\r\n        }\r\n        const clipRoot = root.getChildByPath(path);\r\n        if (!clipRoot) {\r\n            errorID(3938, path, root.getPathInHierarchy(), clip.name);\r\n            return null;\r\n        }\r\n        const state = new AnimationState(clip);\r\n        state.initialize(\r\n            clipRoot,\r\n        );\r\n        return new EmbeddedAnimationClipPlayableState(state);\r\n    }\r\n}\r\n\r\nclass EmbeddedAnimationClipPlayableState extends EmbeddedPlayableState {\r\n    constructor (animationState: AnimationState) {\r\n        super(true);\r\n        this._animationState = animationState;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._animationState.destroy();\r\n    }\r\n\r\n    /**\r\n     * Plays the animation state at specified time.\r\n     */\r\n    public play (): void {\r\n        this._animationState.play();\r\n    }\r\n\r\n    /**\r\n     * Pause the animation state.\r\n     */\r\n    public pause (): void {\r\n        this._animationState.pause();\r\n    }\r\n\r\n    /**\r\n     * Stops the animation state.\r\n     */\r\n    public stop (): void {\r\n        this._animationState.stop();\r\n    }\r\n\r\n    /**\r\n     * Sets the speed of the animation state.\r\n     */\r\n    public setSpeed (speed: number): void {\r\n        this._animationState.speed = speed;\r\n    }\r\n\r\n    public setTime (time: number): void {\r\n        this._animationState.time = time;\r\n    }\r\n\r\n    private _animationState: AnimationState;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable } from 'cc.decorator';\r\nimport type { ParticleSystem } from '../../particle';\r\nimport { warn, js } from '../../core';\r\nimport type { Node } from '../../scene-graph/node';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\nimport { EmbeddedPlayableState, EmbeddedPlayable } from './embedded-player';\r\n\r\n/**\r\n * @en\r\n * The embedded particle system playable. The players play particle system on a embedded player.\r\n * @zh\r\n * 粒子系统子区域播放器。此播放器在子区域上播放粒子系统。\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}EmbeddedParticleSystemPlayable`)\r\nexport class EmbeddedParticleSystemPlayable extends EmbeddedPlayable {\r\n    /**\r\n     * @en\r\n     * Path to the node where particle system inhabits, relative from animation context root.\r\n     * @zh\r\n     * 粒子系统所在的结点路径，相对于动画上下文的根节点。\r\n     */\r\n    @serializable\r\n    public path = '';\r\n\r\n    public instantiate (root: Node): EmbeddedParticleSystemPlayableState | null {\r\n        const node = root.getChildByPath(this.path);\r\n        if (!node) {\r\n            warn(`Hierarchy path ${this.path} does not exists.`);\r\n            return null;\r\n        }\r\n        // TODO: we shouldn't wanna know the name of `ParticleSystem` indeed.\r\n        const ParticleSystemConstructor = js.getClassByName(`cc.ParticleSystem`) as Constructor<ParticleSystem> | undefined;\r\n        if (!ParticleSystemConstructor) {\r\n            warn(`Particle system is required for embedded particle system player.`);\r\n            return null;\r\n        }\r\n        const particleSystem = node.getComponent(ParticleSystemConstructor);\r\n        if (!particleSystem) {\r\n            warn(`${this.path} does not includes a particle system component.`);\r\n            return null;\r\n        }\r\n        return new EmbeddedParticleSystemPlayableState(particleSystem);\r\n    }\r\n}\r\n\r\nclass EmbeddedParticleSystemPlayableState extends EmbeddedPlayableState {\r\n    constructor (particleSystem: ParticleSystem) {\r\n        super(false);\r\n        this._particleSystem = particleSystem;\r\n    }\r\n\r\n    public destroy (): void {\r\n        // DO NOTHING\r\n    }\r\n\r\n    /**\r\n     * Plays the particle system from the beginning no matter current time.\r\n     */\r\n    public play (): void {\r\n        this._particleSystem.play();\r\n    }\r\n\r\n    /**\r\n     * Pause the particle system no matter current time.\r\n     */\r\n    public pause (): void {\r\n        this._particleSystem.stopEmitting();\r\n    }\r\n\r\n    /**\r\n     * Stops the particle system.\r\n     */\r\n    public stop (): void {\r\n        this._particleSystem.stopEmitting();\r\n    }\r\n\r\n    /**\r\n     * Sets the speed of the particle system.\r\n     * @param speed The speed.\r\n     */\r\n    public setSpeed (speed: number): void {\r\n        this._particleSystem.simulationSpeed = speed;\r\n    }\r\n\r\n    private _particleSystem: ParticleSystem;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { _decorator, RealCurve } from '../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM, createEvalSymbol } from '../define';\r\nimport { Channel, RealChannel, RuntimeBinding, Track, TrackEval } from './track';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n/**\r\n * @en\r\n * A real array track animates a real array attribute of target(such as morph weights of mesh renderer).\r\n * Every element in the array is corresponding to a real channel.\r\n * @zh\r\n * 实数数组轨道描述目标上某个实数数组属性（例如网格渲染器的形变权重）的动画。\r\n * 数组中的每个元素都对应一条实数通道。\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}RealArrayTrack`)\r\nexport class RealArrayTrack extends Track {\r\n    /**\r\n     * @en The number of elements in the array which this track produces.\r\n     * If you increased the count, there will be new empty real channels appended.\r\n     * Otherwise if you decreased the count, the last specified number channels would be removed.\r\n     * @zh 此轨道产生的数组元素的数量。\r\n     * 当你增加数量时，会增加新的空实数通道；当你减少数量时，最后几个指定数量的通道会被移除。\r\n     */\r\n    get elementCount (): number {\r\n        return this._channels.length;\r\n    }\r\n\r\n    set elementCount (value) {\r\n        const { _channels: channels } = this;\r\n        const nChannels = channels.length;\r\n        if (value < nChannels) {\r\n            this._channels.splice(value);\r\n        } else if (value > nChannels) {\r\n            this._channels.push(\r\n                ...Array.from({ length: value - nChannels },\r\n                    (): Channel<RealCurve> => new Channel<RealCurve>(new RealCurve())),\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The channels of the track.\r\n     * @zh 返回此轨道的所有通道的数组。\r\n     */\r\n    public channels (): RealChannel[] {\r\n        return this._channels;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public [createEvalSymbol] (): RealArrayTrackEval {\r\n        return new RealArrayTrackEval(this._channels.map(({ curve }): RealCurve => curve));\r\n    }\r\n\r\n    @serializable\r\n    private _channels: RealChannel[] = [];\r\n}\r\n\r\nexport class RealArrayTrackEval implements TrackEval<readonly number[]> {\r\n    constructor (\r\n        private _curves: RealCurve[],\r\n    ) {\r\n        this._result = new Array(_curves.length).fill(0.0);\r\n    }\r\n\r\n    public get requiresDefault (): boolean {\r\n        return false;\r\n    }\r\n\r\n    public evaluate (time: number): number[] {\r\n        const {\r\n            _result: result,\r\n        } = this;\r\n        const nElements = result.length;\r\n        for (let iElement = 0; iElement < nElements; ++iElement) {\r\n            result[iElement] = this._curves[iElement].evaluate(time);\r\n        }\r\n        return this._result;\r\n    }\r\n\r\n    private declare _result: number[];\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, float, serializable } from 'cc.decorator';\r\nimport { builtinResMgr } from '../../asset/asset-manager';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { SpriteFrame } from '../../2d/assets/sprite-frame';\r\nimport { TextureBase } from '../../asset/assets/texture-base';\r\nimport { deviceManager, Type } from '../../gfx';\r\nimport { Pass } from '../../render-scene/core/pass';\r\nimport { getBindingFromHandle, getDefaultFromType, getStringFromType, getTypeFromHandle, MaterialProperty } from '../../render-scene/core/pass-utils';\r\nimport { IValueProxy, IValueProxyFactory } from '../value-proxy';\r\nimport { warn, warnID } from '../../core';\r\n\r\n/**\r\n * @en\r\n * Value proxy factory for setting uniform on material target.\r\n * @zh\r\n * 用于设置材质目标上指定 Uniform 的曲线值代理工厂。\r\n */\r\n@ccclass('cc.animation.UniformProxyFactory')\r\nexport class UniformProxyFactory implements IValueProxyFactory {\r\n    /**\r\n     * @en Pass index.\r\n     * @zh Pass 索引。\r\n     */\r\n    @serializable\r\n    public passIndex = 0;\r\n\r\n    /**\r\n     * @en Uniform name.\r\n     * @zh Uniform 名称。\r\n     */\r\n    @serializable\r\n    public uniformName = '';\r\n\r\n    /**\r\n     * @en\r\n     * Specify the aimed channel of the uniform.\r\n     * Use this when you're aiming at a single channel of the uniform instead of who uniform.\r\n     * For example, only green(1) channel of a color uniform.\r\n     * @zh\r\n     * 指定目标 Uniform 的通道。\r\n     * 当你希望设置 Uniform 单独的通道而非整个 Uniform 时应该当使用此字段。\r\n     * 例如，仅设置颜色 Uniform 的红色通道。\r\n     */\r\n    @float\r\n    public channelIndex: number | undefined = undefined;\r\n\r\n    constructor (uniformName?: string, passIndex?: number) {\r\n        this.passIndex = passIndex || 0;\r\n        this.uniformName = uniformName || '';\r\n    }\r\n\r\n    public forTarget (target: unknown): IValueProxy | undefined {\r\n        if (!(target instanceof Material)) {\r\n            warnID(3940, target as string);\r\n            return undefined;\r\n        }\r\n\r\n        const {\r\n            passIndex,\r\n            uniformName,\r\n            channelIndex,\r\n        } = this;\r\n\r\n        if (passIndex < 0 || passIndex >= target.passes.length) {\r\n            warnID(3941, target.name, passIndex);\r\n            return undefined;\r\n        }\r\n\r\n        const pass = target.passes[passIndex];\r\n        const handle = pass.getHandle(uniformName);\r\n        if (!handle) {\r\n            warnID(3942, target.name, passIndex, uniformName);\r\n            return undefined;\r\n        }\r\n\r\n        const type = getTypeFromHandle(handle);\r\n        if (type < Type.SAMPLER1D) {\r\n            const realHandle = channelIndex === undefined ? handle : pass.getHandle(uniformName, channelIndex, Type.FLOAT);\r\n            if (!realHandle) {\r\n                warnID(3943, target.name, passIndex, uniformName, channelIndex!);\r\n                return undefined;\r\n            }\r\n            if (isUniformArray(pass, uniformName)) {\r\n                return {\r\n                    set: (value: MaterialProperty[]): void => {\r\n                        pass.setUniformArray(realHandle, value);\r\n                    },\r\n                };\r\n            }\r\n            return {\r\n                set: (value: MaterialProperty): void => {\r\n                    pass.setUniform(realHandle, value);\r\n                },\r\n            };\r\n        } else {\r\n            const binding = getBindingFromHandle(handle);\r\n            const prop = pass.properties[uniformName];\r\n            const texName = prop && prop.value ? `${prop.value as string}${getStringFromType(prop.type)}` : getDefaultFromType(prop.type) as string;\r\n            let dftTex = builtinResMgr.get<TextureBase>(texName);\r\n            if (!dftTex) {\r\n                warn(`Illegal texture default value: ${texName}.`);\r\n                dftTex = builtinResMgr.get<TextureBase>('default-texture');\r\n            }\r\n            return {\r\n                set: (value: TextureBase | SpriteFrame): void => {\r\n                    if (!value) { value = dftTex; }\r\n                    const texture = value.getGFXTexture();\r\n                    if (!texture || !texture.width || !texture.height) { return; }\r\n                    pass.bindTexture(binding, texture);\r\n                    if (value instanceof TextureBase) {\r\n                        pass.bindSampler(binding, deviceManager.gfxDevice.getSampler(value.getSamplerInfo()));\r\n                    }\r\n                },\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nfunction isUniformArray (pass: Pass, name: string): boolean {\r\n    for (const block of pass.shaderInfo.blocks) {\r\n        for (const uniform of block.members) {\r\n            if (uniform.name === name) {\r\n                return uniform.count > 1;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable } from 'cc.decorator';\r\nimport { MeshRenderer } from '../../3d/framework/mesh-renderer';\r\nimport { IValueProxyFactory } from '../value-proxy';\r\n\r\n/**\r\n * @en\r\n * Value proxy factory for setting morph weights of specified sub-mesh on model component target.\r\n * @zh\r\n * 用于设置模型组件目标上指定子网格的指定形状的形变权重的曲线值代理工厂。\r\n */\r\n@ccclass('cc.animation.MorphWeightValueProxy')\r\nexport class MorphWeightValueProxy implements IValueProxyFactory {\r\n    /**\r\n      * @en Sub mesh index.\r\n      * @zh 子网格索引。\r\n      */\r\n    @serializable\r\n    public subMeshIndex = 0;\r\n\r\n    /**\r\n      * @en Shape Index.\r\n      * @zh 形状索引。\r\n      */\r\n    @serializable\r\n    public shapeIndex = 0;\r\n\r\n    public forTarget (target: MeshRenderer): { set: (value: number) => void; } {\r\n        return {\r\n            set: (value: number): void => {\r\n                target.setWeight(value, this.subMeshIndex, this.shapeIndex);\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @en\r\n * Value proxy factory for setting morph weights of specified sub-mesh on model component target.\r\n * @zh\r\n * 用于设置模型组件目标上指定子网格形变权重的曲线值代理工厂。\r\n */\r\n@ccclass('cc.animation.MorphWeightsValueProxy')\r\nexport class MorphWeightsValueProxy implements IValueProxyFactory {\r\n    /**\r\n     * @en Sub-mesh index.\r\n     * @zh 子网格索引。\r\n     */\r\n    @serializable\r\n    public subMeshIndex = 0;\r\n\r\n    public forTarget (target: MeshRenderer): { set: (value: number[]) => void; } {\r\n        return {\r\n            set: (value: number[]): void => {\r\n                target.setWeights(value, this.subMeshIndex);\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @en\r\n * Value proxy factory for setting morph weights of each sub-mesh on model component target.\r\n * @zh\r\n * 用于设置模型组件目标上所有子网格形变权重的曲线值代理工厂。\r\n */\r\n@ccclass('cc.animation.MorphWeightsAllValueProxy')\r\nexport class MorphWeightsAllValueProxy implements IValueProxyFactory {\r\n    public forTarget (target: MeshRenderer): { set: (value: number[]) => void; } {\r\n        return {\r\n            set: (value: number[]): void => {\r\n                const nSubMeshes = target.mesh?.struct.primitives.length ?? 0;\r\n                for (let iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {\r\n                    target.setWeights(value, iSubMesh);\r\n                }\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { Quat, Vec3 } from '../../../core';\r\n\r\n/**\r\n * @en\r\n * Represents animation graph variable types.\r\n * @zh\r\n * 表示动画图变量的类型。\r\n */\r\nexport enum VariableType {\r\n    /**\r\n     * @en\r\n     * A floating.\r\n     * @zh\r\n     * 浮点数。\r\n     */\r\n    FLOAT,\r\n\r\n    /**\r\n     * @en\r\n     * A boolean.\r\n     * @zh\r\n     * 布尔值。\r\n     */\r\n    BOOLEAN,\r\n\r\n    /**\r\n     * @en\r\n     * A trigger.\r\n     * @zh\r\n     * 触发器。\r\n     */\r\n    TRIGGER,\r\n\r\n    /**\r\n     * @en\r\n     * An integer.\r\n     * @zh\r\n     * 整数。\r\n     */\r\n    INTEGER,\r\n\r\n    /**\r\n     * @zh\r\n     * 三维向量。\r\n     * @en\r\n     * Vector 3d.\r\n     */\r\n    VEC3_experimental,\r\n\r\n    /**\r\n     * @zh\r\n     * 四元数。\r\n     * @en\r\n     * Quaternion.\r\n     */\r\n    QUAT_experimental,\r\n}\r\n\r\nexport type PrimitiveValue = number | string | boolean;\r\n\r\n/**\r\n * @en\r\n * Represents variable's value.\r\n * @zh\r\n * 表示变量的值。\r\n */\r\nexport type Value = PrimitiveValue | Readonly<Vec3> | Readonly<Quat>;\r\n\r\nexport interface VariableTypeValueTypeMap {\r\n    [VariableType.FLOAT]: number;\r\n    [VariableType.INTEGER]: number;\r\n    [VariableType.BOOLEAN]: boolean;\r\n    [VariableType.TRIGGER]: boolean;\r\n    [VariableType.VEC3_experimental]: Vec3;\r\n    [VariableType.QUAT_experimental]: Quat;\r\n}\r\n\r\nexport const createInstanceTag = Symbol('CreateInstance');\r\n\r\nexport interface BasicVariableDescription<TType> {\r\n    readonly type: TType;\r\n\r\n    value: TType extends keyof VariableTypeValueTypeMap ? VariableTypeValueTypeMap[TType] : never;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    [createInstanceTag](): VarInstanceBase;\r\n}\r\n\r\nexport interface VarRef {\r\n    fn: (this: unknown, value: unknown, ...args: unknown[]) => void;\r\n\r\n    thisArg: unknown;\r\n\r\n    args: unknown[];\r\n}\r\n\r\nexport abstract class VarInstanceBase {\r\n    constructor (public readonly type: VariableType) {\r\n\r\n    }\r\n\r\n    public bind <T, TThis, ExtraArgs extends any[]> (\r\n        fn: (this: TThis, value: T, ...args: ExtraArgs) => void,\r\n        thisArg: TThis,\r\n        ...args: ExtraArgs\r\n    ): Value {\r\n        this._refs.push({\r\n            fn: fn as (this: unknown, value: unknown, ...args: unknown[]) => void,\r\n            thisArg,\r\n            args,\r\n        });\r\n        return this.getValue();\r\n    }\r\n\r\n    get value (): Value {\r\n        return this.getValue();\r\n    }\r\n\r\n    set value (value) {\r\n        this.setValue(value);\r\n        for (const { fn, thisArg, args } of this._refs) {\r\n            fn.call(thisArg, value, ...args);\r\n        }\r\n    }\r\n\r\n    protected abstract getValue(): Value;\r\n\r\n    protected abstract setValue(value: Value): void;\r\n\r\n    private _refs: VarRef[] = [];\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG } from 'internal:constants';\r\nimport { assertIsTrue } from '../../core';\r\n\r\nexport const ownerSymbol = Symbol('[[Owner]]');\r\n\r\nexport interface OwnedBy<T> {\r\n    [ownerSymbol]: T | undefined;\r\n}\r\n\r\nexport function assertsOwnedBy<T> (mastered: OwnedBy<T>, owner: T): void {\r\n    assertIsTrue(mastered[ownerSymbol] === owner);\r\n}\r\n\r\nexport function own<T> (mastered: OwnedBy<T>, owner: T): void {\r\n    if (DEBUG) {\r\n        mastered[ownerSymbol] = owner;\r\n    }\r\n}\r\n\r\nexport function markAsDangling<T> (mastered: OwnedBy<T>): void {\r\n    if (DEBUG) {\r\n        mastered[ownerSymbol] = undefined;\r\n    }\r\n}\r\n","import { assertIsTrue } from '../../../core';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { BasicVariableDescription, createInstanceTag, Value, VariableType, VarInstanceBase } from './basic';\r\n\r\n/**\r\n * @en The reset mode of boolean variables. It indicates when to reset the variable as `false`.\r\n * @zh 布尔类型变量的重置模式，指示在哪些情况下将变量重置为 `false`。\r\n */\r\nexport enum TriggerResetMode {\r\n    /**\r\n     * @en The variable is reset when it's consumed by animation transition.\r\n     * @zh 在该变量被动画过渡消耗后自动重置。\r\n     */\r\n    AFTER_CONSUMED,\r\n\r\n    /**\r\n     * @en The variable is reset in next frame or when it's consumed by animation transition.\r\n     * @zh 下一帧自动重置；在该变量被动画过渡消耗后也会自动重置。\r\n     */\r\n    NEXT_FRAME_OR_AFTER_CONSUMED,\r\n}\r\n\r\nconst TRIGGER_VARIABLE_FLAG_VALUE_START = 0;\r\nconst TRIGGER_VARIABLE_FLAG_VALUE_MASK = 1;\r\nconst TRIGGER_VARIABLE_FLAG_RESET_MODE_START = 1;\r\nconst TRIGGER_VARIABLE_FLAG_RESET_MODE_MASK = 6; // 0b110\r\n\r\n// DO NOT CHANGE TO THIS VALUE. This is related to V3.5 migration.\r\nconst TRIGGER_VARIABLE_DEFAULT_FLAGS = 0;\r\n\r\n// Let's ensure `0`'s meaning: `value: false, resetMode: TriggerSwitchMode: TriggerResetMode.AFTER_CONSUMED`\r\nassertIsTrue((\r\n    (0 << TRIGGER_VARIABLE_FLAG_VALUE_START)\r\n    | (TriggerResetMode.AFTER_CONSUMED << TRIGGER_VARIABLE_FLAG_RESET_MODE_START)\r\n) === TRIGGER_VARIABLE_DEFAULT_FLAGS);\r\n\r\n@ccclass('cc.animation.TriggerVariable')\r\nexport class TriggerVariable implements BasicVariableDescription<VariableType.TRIGGER> {\r\n    get type (): VariableType.TRIGGER {\r\n        return VariableType.TRIGGER as const;\r\n    }\r\n\r\n    get value (): boolean {\r\n        return !!((this._flags & TRIGGER_VARIABLE_FLAG_VALUE_MASK) >> TRIGGER_VARIABLE_FLAG_VALUE_START);\r\n    }\r\n\r\n    set value (value) {\r\n        if (value) {\r\n            this._flags |= (1 << TRIGGER_VARIABLE_FLAG_VALUE_START);\r\n        } else {\r\n            this._flags &= ~(1 << TRIGGER_VARIABLE_FLAG_VALUE_START);\r\n        }\r\n    }\r\n\r\n    get resetMode (): TriggerResetMode {\r\n        return ((this._flags & TRIGGER_VARIABLE_FLAG_RESET_MODE_MASK) >> TRIGGER_VARIABLE_FLAG_RESET_MODE_START);\r\n    }\r\n\r\n    set resetMode (value: TriggerResetMode) {\r\n        // Clear\r\n        this._flags &= ~TRIGGER_VARIABLE_FLAG_RESET_MODE_MASK;\r\n        // Set\r\n        this._flags |= (value << TRIGGER_VARIABLE_FLAG_RESET_MODE_START);\r\n    }\r\n\r\n    public [createInstanceTag] (): VarInstanceTrigger {\r\n        return new VarInstanceTrigger(this.value, this.resetMode);\r\n    }\r\n\r\n    // l -> h\r\n    // value(1 bits) | reset_mode(2 bits)\r\n    @serializable\r\n    private _flags = TRIGGER_VARIABLE_DEFAULT_FLAGS;\r\n}\r\n\r\nexport class VarInstanceTrigger extends VarInstanceBase {\r\n    public readonly resetMode: TriggerResetMode = TriggerResetMode.AFTER_CONSUMED;\r\n\r\n    constructor (value: Value, resetMode: TriggerResetMode) {\r\n        super(VariableType.TRIGGER);\r\n        this.resetMode = resetMode;\r\n        this._value = value;\r\n    }\r\n\r\n    protected getValue (): Value {\r\n        return this._value;\r\n    }\r\n\r\n    protected setValue (value: Value): void {\r\n        this._value = value;\r\n    }\r\n\r\n    private _value: Value;\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { assertIsTrue } from '../../../core';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { BasicVariableDescription, VariableType, createInstanceTag, VarInstanceBase, Value } from './basic';\r\n\r\nexport type PlainVariableType = VariableType.FLOAT | VariableType.INTEGER | VariableType.BOOLEAN;\r\n\r\n@ccclass('cc.animation.PlainVariable')\r\nexport class PlainVariable {\r\n    // TODO: we should not specify type here but due to de-serialization limitation\r\n    // See: https://github.com/cocos-creator/3d-tasks/issues/7909\r\n    @serializable\r\n    private _type: PlainVariableType = VariableType.FLOAT;\r\n\r\n    // Same as `_type`\r\n    @serializable\r\n    private _value: Value = 0.0;\r\n\r\n    constructor (type?: PlainVariableType) {\r\n        if (typeof type === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        this._type = type;\r\n        switch (type) {\r\n        default:\r\n            break;\r\n        case VariableType.FLOAT:\r\n            this._value = 0.0;\r\n            break;\r\n        case VariableType.INTEGER:\r\n            this._value = 0;\r\n            break;\r\n        case VariableType.BOOLEAN:\r\n            this._value = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    get type (): PlainVariableType {\r\n        return this._type;\r\n    }\r\n\r\n    get value (): Value {\r\n        return this._value;\r\n    }\r\n\r\n    set value (value) {\r\n        if (DEBUG) {\r\n            switch (this._type) {\r\n            default:\r\n                break;\r\n            case VariableType.FLOAT:\r\n                assertIsTrue(typeof value === 'number');\r\n                break;\r\n            case VariableType.INTEGER:\r\n                assertIsTrue(Number.isInteger(value));\r\n                break;\r\n            case VariableType.BOOLEAN:\r\n                assertIsTrue(typeof value === 'boolean');\r\n                break;\r\n            }\r\n        }\r\n        this._value = value;\r\n    }\r\n\r\n    public [createInstanceTag] (): VarInstancePrimitive {\r\n        return new VarInstancePrimitive(this._type, this._value);\r\n    }\r\n}\r\n\r\nexport class VarInstancePrimitive extends VarInstanceBase {\r\n    constructor (type: VariableType, value: Value) {\r\n        super(type);\r\n        this._value = value;\r\n    }\r\n\r\n    protected getValue (): Value {\r\n        return this._value;\r\n    }\r\n\r\n    protected setValue (value: Value): void {\r\n        this._value = value;\r\n    }\r\n\r\n    private _value: Value;\r\n}\r\n","import { assertIsTrue, Vec3 } from '../../../core';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { BasicVariableDescription, VariableType, createInstanceTag, VarInstanceBase, Value } from './basic';\r\n\r\n@ccclass('cc.animation.Vec3Variable')\r\nexport class Vec3Variable implements BasicVariableDescription<VariableType.VEC3_experimental> {\r\n    get type (): VariableType.VEC3_experimental {\r\n        return VariableType.VEC3_experimental as const;\r\n    }\r\n\r\n    get value (): Readonly<Vec3> {\r\n        return this._value as Readonly<Vec3>;\r\n    }\r\n\r\n    set value (value) {\r\n        Vec3.copy(this._value, value);\r\n    }\r\n\r\n    public [createInstanceTag] (): VarInstanceVec3 {\r\n        return new VarInstanceVec3(this.value);\r\n    }\r\n\r\n    @serializable\r\n    private _value = new Vec3();\r\n}\r\n\r\nclass VarInstanceVec3 extends VarInstanceBase {\r\n    constructor (value: Readonly<Vec3>) {\r\n        super(VariableType.VEC3_experimental);\r\n        Vec3.copy(this._value, value);\r\n    }\r\n\r\n    protected getValue (): Value {\r\n        return this._value;\r\n    }\r\n\r\n    protected setValue (value: Value): void {\r\n        assertIsTrue(value instanceof Vec3);\r\n        Vec3.copy(this._value, value);\r\n    }\r\n\r\n    private readonly _value = new Vec3();\r\n}\r\n","import { BasicVariableDescription, VariableType, createInstanceTag, VarInstanceBase, Value } from './basic';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { assertIsTrue, Quat } from '../../../core';\r\n\r\n@ccclass('cc.animation.QuatVariable')\r\nexport class QuatVariable implements BasicVariableDescription<VariableType.QUAT_experimental> {\r\n    get type (): VariableType.QUAT_experimental {\r\n        return VariableType.QUAT_experimental as const;\r\n    }\r\n\r\n    get value (): Readonly<Quat> {\r\n        return this._value as Readonly<Quat>;\r\n    }\r\n\r\n    set value (value) {\r\n        Quat.copy(this._value, value);\r\n    }\r\n\r\n    public [createInstanceTag] (): VarInstanceQuat {\r\n        return new VarInstanceQuat(this._value);\r\n    }\r\n\r\n    @serializable\r\n    private _value = new Quat();\r\n}\r\n\r\nclass VarInstanceQuat extends VarInstanceBase {\r\n    constructor (value: Readonly<Quat>) {\r\n        super(VariableType.QUAT_experimental);\r\n        Quat.copy(this._value, value);\r\n    }\r\n\r\n    protected getValue (): Value {\r\n        return this._value;\r\n    }\r\n\r\n    protected setValue (value: Value): void {\r\n        assertIsTrue(value instanceof Quat);\r\n        Quat.copy(this._value, value);\r\n    }\r\n\r\n    private readonly _value = new Quat();\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { VariableType, VariableTypeValueTypeMap, VarInstanceBase } from './basic';\r\nimport { PlainVariable, PlainVariableType } from './primitive-variable';\r\nimport { TriggerVariable } from './trigger-variable';\r\nimport { Vec3Variable } from './vec3-variable';\r\nimport { QuatVariable } from './quat-variable';\r\n\r\nexport type VariableDescription =\r\n    | PlainVariable\r\n    | Vec3Variable\r\n    | QuatVariable\r\n    | TriggerVariable;\r\n\r\nexport type VarInstance = VarInstanceBase;\r\n\r\nexport { VariableType, createInstanceTag } from './basic';\r\nexport type { PrimitiveValue, Value, VariableTypeValueTypeMap } from './basic';\r\n\r\nexport { VarInstanceTrigger, TriggerResetMode } from './trigger-variable';\r\n\r\nexport function createVariable<TVariableType extends VariableType> (\r\n    type: TVariableType,\r\n    initialValue?: VariableTypeValueTypeMap[TVariableType],\r\n): VariableDescription {\r\n    let variable: VariableDescription;\r\n    switch (type) {\r\n    case VariableType.FLOAT:\r\n    case VariableType.INTEGER:\r\n    case VariableType.BOOLEAN:\r\n        variable = new PlainVariable(type as PlainVariableType);\r\n        break;\r\n    case VariableType.TRIGGER:\r\n        variable = new TriggerVariable();\r\n        break;\r\n    case VariableType.VEC3_experimental:\r\n        variable = new Vec3Variable();\r\n        break;\r\n    case VariableType.QUAT_experimental:\r\n        variable = new QuatVariable();\r\n        break;\r\n    default:\r\n        throw new Error(`Unknown variable type ${type}`);\r\n    }\r\n    if (typeof initialValue !== 'undefined') {\r\n        variable.value = initialValue;\r\n    }\r\n    return variable;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport class InvalidTransitionError extends Error {\r\n    constructor (type: 'to-entry' | 'to-any' | 'from-exit') {\r\n        super(`${type} transition is invalid`);\r\n        this.name = 'TransitionRejectError';\r\n    }\r\n}\r\n\r\nexport class VariableNotDefinedError extends Error {\r\n    constructor (name: string) {\r\n        super(`Graph variable ${name} is not defined`);\r\n    }\r\n}\r\n\r\nexport class VariableTypeMismatchedError extends Error {\r\n    constructor (name: string, expected: string, received?: string) {\r\n        super(`Expect graph variable ${name} to have type '${expected}' instead of received '${received ?? typeof received}'`);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EditorExtendableObject, editorExtrasTag } from '../../core/data/editor-extras-tag';\r\n\r\n/**\r\n * Clones the editor extras from an animation-graph-specific object.\r\n * @internal This is a HACKY way.\r\n *\r\n * If the editor extras from an animation-graph-specific object has a method called `clone`,\r\n * that method would be called to perform a clone operation.\r\n * The return value would be used as the clone result.\r\n * The method `clone` has the signature: `(host: EditorExtendableObject) => unknown`.\r\n */\r\nexport function cloneAnimationGraphEditorExtrasFrom (object: EditorExtendableObject): unknown {\r\n    const editorExtras = object[editorExtrasTag];\r\n    if (typeof editorExtras === 'object' && editorExtras) {\r\n        const maybeCloneableEditorExtras = editorExtras as {\r\n            clone?(host: EditorExtendableObject): unknown;\r\n        };\r\n        return maybeCloneableEditorExtras.clone?.(object);\r\n    }\r\n    return undefined;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { OwnedBy, ownerSymbol } from '../ownership';\r\nimport type { Layer, StateMachine, TransitionInternal } from '../animation-graph';\r\nimport { EditorExtendable, js, editorExtrasTag, _decorator } from '../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport { StateMachineComponent } from './state-machine-component';\r\nimport { instantiate } from '../../../serialization/instantiate';\r\nimport { cloneAnimationGraphEditorExtrasFrom } from '../animation-graph-editor-extras-clone-helper';\r\n\r\nexport const outgoingsSymbol = Symbol('[[Outgoing transitions]]');\r\n\r\nexport const incomingsSymbol = Symbol('[[Incoming transitions]]');\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n@ccclass('cc.animation.State')\r\nexport class State extends EditorExtendable implements OwnedBy<Layer | StateMachine> {\r\n    declare [ownerSymbol]: StateMachine | undefined;\r\n\r\n    @serializable\r\n    public name = '';\r\n\r\n    public [outgoingsSymbol]: TransitionInternal[] = [];\r\n\r\n    public [incomingsSymbol]: TransitionInternal[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public copyTo (that: State): void {\r\n        that.name = this.name;\r\n        that[editorExtrasTag] = cloneAnimationGraphEditorExtrasFrom(this);\r\n    }\r\n}\r\n\r\ntype StateMachineComponentConstructor<T extends StateMachineComponent> = Constructor<T>;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}InteractiveState`)\r\nexport class InteractiveState extends State {\r\n    get components (): Iterable<StateMachineComponent> {\r\n        return this._components;\r\n    }\r\n\r\n    public addComponent<T extends StateMachineComponent> (constructor: StateMachineComponentConstructor<T>): T {\r\n        const component = new constructor();\r\n        this._components.push(component);\r\n        return component;\r\n    }\r\n\r\n    public removeComponent (component: StateMachineComponent): void {\r\n        js.array.remove(this._components, component);\r\n    }\r\n\r\n    public instantiateComponents (): StateMachineComponent[] {\r\n        const instantiatedComponents = this._components.map((component): StateMachineComponent => {\r\n            const instantiated = instantiate(component) as unknown as StateMachineComponent;\r\n            return instantiated;\r\n        });\r\n        return instantiatedComponents;\r\n    }\r\n\r\n    public copyTo (that: InteractiveState): void {\r\n        super.copyTo(that);\r\n        that._components = this.instantiateComponents();\r\n    }\r\n\r\n    @serializable\r\n    private _components: StateMachineComponent[] = [];\r\n}\r\n","import { editable } from '../../../core';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { Node } from '../../../scene-graph';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport { invokeComponentMethodsEngagedInAnimationEvent } from '../../event/event-emitter';\r\n\r\n/**\r\n * @zh 描述动画图中的事件绑定。\r\n * @en Describes the event bindings in animation graph.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationGraphEventBinding`)\r\nexport class AnimationGraphEventBinding {\r\n    /**\r\n     * @zh 绑定的方法名。\r\n     * @en The event name bound.\r\n     */\r\n    @editable\r\n    @serializable\r\n    public methodName = '';\r\n\r\n    /**\r\n     * @zh 获取该绑定是否绑定了任何事件。\r\n     * @en Tells if there's any event bound to this binding.\r\n     */\r\n    get isBound (): boolean {\r\n        return !!this.methodName;\r\n    }\r\n\r\n    public emit (origin: Node): void {\r\n        if (!this.methodName) {\r\n            return;\r\n        }\r\n\r\n        invokeComponentMethodsEngagedInAnimationEvent(origin, this.methodName, []);\r\n    }\r\n\r\n    public copyTo (that: AnimationGraphEventBinding): AnimationGraphEventBinding {\r\n        that.methodName = this.methodName;\r\n        return this;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, editable, serializable } from 'cc.decorator';\r\nimport { Motion } from '../motion';\r\nimport { State, InteractiveState } from './state';\r\nimport { AnimationGraphEventBinding } from '../event/event-binding';\r\n\r\n@ccclass('cc.animation.Motion')\r\nexport class MotionState extends InteractiveState {\r\n    @serializable\r\n    public motion: Motion | null = null;\r\n\r\n    @serializable\r\n    public speed = 1.0;\r\n\r\n    /**\r\n     * Should be float.\r\n     */\r\n    @serializable\r\n    public speedMultiplier = '';\r\n\r\n    @serializable\r\n    public speedMultiplierEnabled = false;\r\n\r\n    /**\r\n     * @zh 状态进入事件绑定，此处绑定的事件会在状态机向该状态过渡时触发。\r\n     * @en State entered event binding. The event bound here will be triggered\r\n     * when the state machine starts to transition into this state.\r\n     */\r\n    @serializable\r\n    @editable\r\n    public transitionInEventBinding = new AnimationGraphEventBinding();\r\n\r\n    /**\r\n     * @zh 状态离开事件绑定，此处绑定的事件会在状态机从该状态离开时触发。\r\n     * @en State left event binding. The event bound here will be triggered\r\n     * when the state machine starts to transition out from this state.\r\n     */\r\n    @serializable\r\n    @editable\r\n    public transitionOutEventBinding = new AnimationGraphEventBinding();\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    __callOnAfterDeserializeRecursive (): void {\r\n        this.motion?.__callOnAfterDeserializeRecursive();\r\n    }\r\n\r\n    public copyTo (that: MotionState): MotionState {\r\n        super.copyTo(that);\r\n        that.motion = this.motion?.clone() ?? null;\r\n        that.speed = this.speed;\r\n        that.speedMultiplier = this.speedMultiplier;\r\n        that.speedMultiplierEnabled = this.speedMultiplierEnabled;\r\n        this.transitionInEventBinding.copyTo(that.transitionInEventBinding);\r\n        this.transitionOutEventBinding.copyTo(that.transitionOutEventBinding);\r\n        return this;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport const onAfterDeserializedTag = Symbol('[[OnAfterDeserialized]]');\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { Asset } from '../../asset/assets/asset';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\n\r\n/**\r\n * @zh `AnimationGraph` 和 `AnimationGraphVariant` 的内部共同基类，\r\n * 仅用于特殊目的，不应另作它用，也不应导出为公开接口。\r\n * @en The common base class of `AnimationGraph` and `AnimationGraphVariant`\r\n * which exists for special purpose and should not be used otherwise and should not be exported.\r\n *\r\n * @internal This class serves as the editor switch of\r\n * animation graph asset and animation graph variant asset,\r\n * especially as the `graph` property on animation controller component.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationGraphLike`)\r\nexport abstract class AnimationGraphLike extends Asset { }\r\n","/**\r\n * @zh\r\n * 重命名对象[自身的、可枚举的](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable)指定属性，并且保持原本的属性顺序。\r\n * @en\r\n * Renames an [enumerable own](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable)\r\n * property but also retains the original property order.\r\n *\r\n * @param object @zh 原始对象。 @en The original object.\r\n * @param originalPropertyKey @zh 要重命名的属性的原始键。@en Original key of the property to rename.\r\n * @param newPropertyKey @zh 要重命名的属性的新键。@en New key of the property to rename.\r\n * @returns\r\n * @zh 若重命名成功，返回新的对象；否则返回原始对象。\r\n * @en A new object which is a copy of original object if rename succeed, otherwise the original object.\r\n *\r\n * @description\r\n * @zh\r\n * 若原始键不存在、原始属性不是自身可枚举属性或新键已存在，此函数视重命名为失败，会直接返回原始对象。\r\n * 若可以重命名，则此函数返回原始对象的 **拷贝**。\r\n * 在拷贝时，使用 `[[Set]]` 语义，且仅会拷贝那些自身的、可枚举的属性，因此，本函数更适合用来重命名纯字典对象的属性。\r\n * @en\r\n * If the original key does not exist,\r\n * or the original property is not enumerable own property,\r\n * or the new property has already existed,\r\n * this function treats the renaming as failure and returns the original object directly.\r\n * Otherwise, the rename succeeds, this function returns a **copy** of original object.\r\n * For the copying, `[[Set]]` semantic would be used. Only those enumerable own properties would be copied.\r\n * That's why this function is suggested to used to rename properties of pure dictionary objects.\r\n *\r\n * @example\r\n * @zh\r\n * ```ts\r\n * // 成功重命名，属性顺序保留\r\n * const original = { a: 1, b: 2, c: 3 };\r\n * Object.defineProperty(original, 'x', { value: '', enumerable: false });\r\n * console.log(original); // {a: 1, b: 2, c: 3, x: ''}\r\n *\r\n * const renamed = renameObjectProperty(original, 'b', 'd');\r\n * console.log(original === renamed) // false\r\n * console.log(original); // {a: 1, d: 2, c: 3}\r\n * console.log(Object.entries(renamed)) // [['a', 1], ['d', 2], ['c', 3]]\r\n *\r\n * // 重命名失败：原始键不存在\r\n * console.log(renameObjectProperty(original, 'e', 'f') === original); // true\r\n * // 重命名失败：新键已存在\r\n * console.log(renameObjectProperty(original, 'e', 'a') === original); // true\r\n * // 重命名失败：原始键对应的属性不是自身可枚举的\r\n * console.log(renameObjectProperty(original, 'x', 'x1') === original); // true\r\n * ```\r\n * @en\r\n * ```ts\r\n * // Rename succeed, key order is retained.\r\n * const original = { a: 1, b: 2, c: 3 };\r\n * Object.defineProperty(original, 'x', { value: '', enumerable: false });\r\n * console.log(original); // {a: 1, b: 2, c: 3, x: ''}\r\n *\r\n * const renamed = renameObjectProperty(original, 'b', 'd');\r\n * console.log(original === renamed) // false\r\n * console.log(original); // {a: 1, d: 2, c: 3}\r\n * console.log(Object.entries(renamed)) // [['a', 1], ['d', 2], ['c', 3]]\r\n *\r\n * // Rename failed: the original key does not exist.\r\n * console.log(renameObjectProperty(original, 'e', 'f') === original); // true\r\n * // Rename failed: the new key has already existed.\r\n * console.log(renameObjectProperty(original, 'e', 'a') === original); // true\r\n * // Rename failed: the corresponding original property is not enumerable own property.\r\n * console.log(renameObjectProperty(original, 'x', 'x1') === original); // true\r\n * ```\r\n */\r\nexport function renameObjectProperty<T extends Record<PropertyKey, any>> (\r\n    object: T,\r\n    originalPropertyKey: keyof T,\r\n    newPropertyKey: keyof T,\r\n): T {\r\n    const { propertyIsEnumerable } = Object.prototype;\r\n\r\n    if (!propertyIsEnumerable.call(object, originalPropertyKey)) {\r\n        return object;\r\n    }\r\n\r\n    if (newPropertyKey in object) {\r\n        return object;\r\n    }\r\n\r\n    const result = {} as T;\r\n\r\n    if (typeof originalPropertyKey === 'symbol') {\r\n        (Object.entries(object)).forEach(([k, v]): void => {\r\n            result[k as keyof T] = v;\r\n        });\r\n        Object.getOwnPropertySymbols(object).forEach((k): void => {\r\n            if (!propertyIsEnumerable.call(object, k)) {\r\n                return;\r\n            }\r\n            result[k === originalPropertyKey ? newPropertyKey : k as keyof T] = object[k as keyof T];\r\n        });\r\n    } else {\r\n        Object.entries(object).forEach(([k, v]): void => {\r\n            result[k === originalPropertyKey ? newPropertyKey : k as keyof T] = v;\r\n        });\r\n        Object.getOwnPropertySymbols(object).forEach((k): void => {\r\n            if (!propertyIsEnumerable.call(object, k)) {\r\n                return;\r\n            }\r\n            result[k as keyof T] = object[k as keyof T];\r\n        });\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * @zh\r\n * 创建一个代理对象 `c` 以使得 `o instanceof c`，其中 `o instanceof constructor === true`。\r\n * 这个函数用于防止 `new constructor` 但保持 `instanceof` 的可用性。\r\n * @en\r\n * Creates a proxy object `c` so that `o instanceof c`, where `o instanceof constructor === true`.\r\n * This function is used to prevent from `new constructor` in the same time keep `instanceof` usable.\r\n *\r\n * @param constructor @zh 要代理的构造函数。 @en The constructor to proxy.\r\n *\r\n * @returns @zh 代理对象。 @en The proxy object.\r\n *\r\n * @note\r\n * @zh 如果系统不支持这样的代理，会直接返回 `constructor`。\r\n * @en If such proxy is not available in current system. `constructor` is directly returned.\r\n *\r\n * @example\r\n * @zh\r\n * ```ts\r\n * // 这是你的类，你希望用户不能直接去 `new Foo`，而是只能通过你提供的其它方式创建 `Foo` 的实例。\r\n * // 但同时，你想保证 `Foo` 的实例能使用 `instanceof`。\r\n * class Foo {}\r\n * function createFoo() { return new Foo(); }\r\n *\r\n * /// 你可以这样：\r\n *\r\n * const FooProxy = createInstanceOfProxy(Foo); // 创建 `Foo` 的代理\r\n * export { FooProxy as Foo }; // 并不想给用户造成困扰，所以我们改名后再暴露出去\r\n *\r\n * /// 外部如此使用：\r\n *\r\n * new FooProxy(); // 这句会抛出异常\r\n *                 // 达到了我们的目的：不允许直接 `new Foo`\r\n * console.log(createFoo() instanceof FooProxy); // 输出 \"true\"\r\n *                                               // 达到了我们的目的：可以使用 `instanceof`\r\n * ```\r\n * @en\r\n * ```ts\r\n * // This is your class.\r\n * // You expect users not to `new Foo` directly\r\n * // but instead only create instances of `Foo` in other manners you provided.\r\n * // In the mean time, you expect the `instanceof` to be available on instances of `Foo`.\r\n * class Foo {}\r\n * function createFoo() { return new Foo(); }\r\n *\r\n * /// You can try these:\r\n *\r\n * const FooProxy = createInstanceOfProxy(Foo); // Create a proxy for `Foo`\r\n * export { FooProxy as Foo }; // Don't bother users, so rename then export.\r\n *\r\n * /// Users may use like these:\r\n *\r\n * new FooProxy(); // This will throw\r\n *                 // This is what we want to achieve: `new Foo` is not allowed\r\n * console.log(createFoo() instanceof FooProxy); // Print \"true\"\r\n *                                               // This is what we want to achieve: `instanceof` is available\r\n * ```\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nexport const createInstanceofProxy = ((): CreateInstanceofProxySignature => {\r\n    // Test if we can proxy the instanceof operator by\r\n    // [`Symbol.hasInstance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance).\r\n    //\r\n    // This symbol was introduced in ES2015 and has been supported in most platforms:\r\n    // https://caniuse.com/?search=Symbol.hasInstance\r\n    // To guarantee we won't suffer from platform issue, we do check here.\r\n    let isSymbolHasInstanceAvailable = false;\r\n    try {\r\n        class Array1 { static [Symbol.hasInstance] (instance: unknown): boolean { return Array.isArray(instance); } }\r\n        isSymbolHasInstanceAvailable = ([] instanceof Array1);\r\n    } catch {\r\n        isSymbolHasInstanceAvailable = false;\r\n    }\r\n\r\n    // If `Symbol.hasInstance` is not available, fallback to return the original constructor.\r\n    if (!isSymbolHasInstanceAvailable) {\r\n        return (constructor): any => constructor;\r\n    }\r\n\r\n    // Otherwise, proxy it.\r\n    return (constructor): any => {\r\n        function InstanceOfProxy (): void {\r\n            throw new Error(`This function can not be called as a constructor.`);\r\n        }\r\n\r\n        Object.defineProperty(InstanceOfProxy, Symbol.hasInstance, {\r\n            value (instance: unknown): boolean {\r\n                return instance instanceof constructor;\r\n            },\r\n        });\r\n\r\n        return InstanceOfProxy as unknown as typeof constructor;\r\n    };\r\n})();\r\n\r\n// May be hacky?\r\ntype ExcludeConstructor<T> = T;\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ntype CreateInstanceofProxySignature = <TConstructor extends Function> (constructor: TConstructor) => ExcludeConstructor<TConstructor>;\r\n","import { EditorExtendable } from '../../../../core';\r\nimport { ccclass, serializable } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseGraphNode } from './pose-graph-node';\r\n\r\n/**\r\n * @zh\r\n * 描述姿势图结点上的某项输入的路径。\r\n * @en\r\n * Describes the path to a input of a pose graph node.\r\n *\r\n * @internal Internally, the path is stored as an tuple.\r\n * The first element of tuple is always the input's property key.\r\n * There can be an optional second tuple element,\r\n * which represents the input's property's element, if it's an array property.\r\n */\r\nexport type NodeInputPath = readonly [string] | readonly [string, number];\r\n\r\n/**\r\n * @zh 表示姿势图结点的外壳。\r\n *\r\n * 结点外壳是附着在结点上的、对结点之间的连接（称之为绑定）的描述。\r\n * 外壳由姿势图以及绑定系统操纵，结点对于其外壳是无感知的。\r\n *\r\n * @en Represents the shell of a pose graph node.\r\n *\r\n * The node shell is attached to a node,\r\n * and describes the connections(so called binding) between nodes.\r\n * Shells are manipulated by pose graph and binding system.\r\n * Nodes are imperceptible to their shells.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseGraphNodeShell`)\r\nexport class PoseGraphNodeShell extends EditorExtendable {\r\n    /**\r\n     * @zh\r\n     * 获取此结点上的所有的绑定。\r\n     * @en\r\n     * Gets all bindings on this node.\r\n     * @returns @zh 绑定对象数组。 @en The binding objects array.\r\n     */\r\n    public getBindings (): PoseGraphNodeInputBinding[] {\r\n        return this._bindings;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 添加一项绑定。\r\n     * @en\r\n     * Adds a binding.\r\n     * @param inputPath @zh 要绑定的输入的路径。 @en Path of the input to bind.\r\n     * @param producer @zh 生产方结点。 @en The producer node.\r\n     * @param outputIndex @zh 要绑定的生产方的输出索引。 @en Index of the output to bind.\r\n     * @note\r\n     * @zh 绑定是由三元组输入路径、生产方结点和生产方索引唯一键定的。重复的添加相同绑定没有效果。\r\n     * @en A binding is keyed by the 3-element tuple: input path, producer node and producer output index.\r\n     * Redundantly adding a binding takes no effect.\r\n     */\r\n    public addBinding (inputPath: NodeInputPath, producer: PoseGraphNode, outputIndex: number): void {\r\n        this._emplaceBinding(new PoseGraphNodeInputBinding(\r\n            inputPath,\r\n            producer,\r\n            outputIndex,\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 删除指定输入上的绑定。\r\n     * @en\r\n     * Deletes the binding on specified input.\r\n     * @param inputPath @zh 要解绑的输入的路径。 @en Path of the input to unbind.\r\n     */\r\n    public deleteBinding (inputPath: NodeInputPath): void {\r\n        const index = this._findBindingIndex(inputPath);\r\n        if (index >= 0) {\r\n            this._bindings.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 更新绑定，\r\n     * 对于具有相同属性键的、索引小于（或大于） `firstIndex` 的输入的绑定，\r\n     * 将它们替换为上一个（或下一个）索引上的绑定。\r\n     * @en\r\n     * Update bindings so that\r\n     * for the input bindings having specified property key but having element index less than the specified index,\r\n     * substitute them as previous(or next) index's binding.\r\n     * @param propertyKey @zh 输入的属性键。 @en The input's property key.\r\n     * @param firstIndex @zh 见描述。 @en See description.\r\n     * @param forward @en 替换的方向。`true` 表示向前替换，反之向后。\r\n     *              @en Substitution direction. `true` means substitute in forward, backward otherwise.\r\n     */\r\n    public moveArrayElementBindingForward (propertyKey: string, firstIndex: number, forward: boolean): void {\r\n        // TODO: this method has worse performance!\r\n        const { _bindings: bindings } = this;\r\n\r\n        const oldBindings: PoseGraphNodeInputBinding[] = [];\r\n        for (let iBinding = 0;\r\n            iBinding < bindings.length; // Note: array length may be varied.\r\n            ++iBinding\r\n        ) {\r\n            const binding = bindings[iBinding];\r\n            const [consumerPropertyKey, consumerElementIndex = -1] = binding.inputPath;\r\n            if (consumerPropertyKey === propertyKey && consumerElementIndex >= firstIndex) {\r\n                oldBindings.push(binding);\r\n                bindings.splice(iBinding, 1);\r\n            }\r\n        }\r\n\r\n        for (const oldBinding of oldBindings) {\r\n            const [consumerPropertyKey, consumerElementIndex = -1] = oldBinding.inputPath;\r\n            this.addBinding(\r\n                [consumerPropertyKey, consumerElementIndex + (forward ? -1 : 1)],\r\n                oldBinding.producer,\r\n                oldBinding.outputIndex,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 删除绑定到指定生产方结点的所有绑定。\r\n     * @en\r\n     * Deletes all the bindings bound to specified producer.\r\n     * @param producer @zh 生产方结点。 @en The producer node.\r\n     */\r\n    public deleteBindingTo (producer: PoseGraphNode): void {\r\n        const { _bindings: bindings } = this;\r\n        for (let iBinding = 0;\r\n            iBinding < bindings.length; // Note: array length might vary\r\n            ++iBinding\r\n        ) {\r\n            const binding = bindings[iBinding];\r\n            if (binding.producer === producer) {\r\n                bindings.splice(iBinding, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 查找指定输入上的绑定。\r\n     * @en\r\n     * Finds the binding on specified input.\r\n     * @param inputPath @zh 要查找的输入的路径。 @en Path of the input to find.\r\n     */\r\n    public findBinding (inputPath: NodeInputPath): PoseGraphNodeInputBinding | undefined {\r\n        const bindingIndex = this._findBindingIndex(inputPath);\r\n        return bindingIndex >= 0 ? this._bindings[bindingIndex] : undefined;\r\n    }\r\n\r\n    @serializable\r\n    private _bindings: PoseGraphNodeInputBinding[] = [];\r\n\r\n    private _findBindingIndex (inputPath: NodeInputPath): number {\r\n        return this._bindings.findIndex(\r\n            (searchElement) => isEqualNodeInputPath(searchElement.inputPath, inputPath),\r\n        );\r\n    }\r\n\r\n    private _emplaceBinding (binding: PoseGraphNodeInputBinding): void {\r\n        const index = this._bindings.findIndex(\r\n            (searchElement) => isEqualNodeInputPath(searchElement.inputPath, binding.inputPath),\r\n        );\r\n        if (index >= 0) {\r\n            this._bindings[index] = binding;\r\n        } else {\r\n            this._bindings.push(binding);\r\n        }\r\n    }\r\n}\r\n\r\nfunction isEqualNodeInputPath (lhs: NodeInputPath, rhs: NodeInputPath): boolean {\r\n    const [lhsPropertyKey, lhsElementIndex] = lhs;\r\n    const [rhsPropertyKey, rhsElementIndex] = rhs;\r\n    return lhsPropertyKey === rhsPropertyKey && lhsElementIndex === rhsElementIndex;\r\n}\r\n\r\n/**\r\n * @zh 描述既定结点（作为消费方）和另一结点（作为生产方）之间的绑定信息。\r\n * @en Describes the binding information between a given node(as consumer) and another node(as producer).\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseGraphNodeInputBinding`)\r\nclass PoseGraphNodeInputBinding {\r\n    constructor (\r\n        inputPath: NodeInputPath,\r\n        producer: PoseGraphNode,\r\n        outputIndex?: number,\r\n    ) {\r\n        this._inputPath = inputPath;\r\n        this._producer = producer;\r\n        if (typeof outputIndex !== 'undefined') {\r\n            this._outputIndex = outputIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 消费方结点的输入路径。\r\n     * @en Input path of consumer node.\r\n     */\r\n    get inputPath (): NodeInputPath {\r\n        return this._inputPath;\r\n    }\r\n\r\n    /**\r\n     * @zh 生产方结点。\r\n     * @en The producer node.\r\n     */\r\n    get producer (): PoseGraphNode {\r\n        return this._producer;\r\n    }\r\n\r\n    /**\r\n     * @zh 生产方结点的输出索引。\r\n     * @en The producer node's output index.\r\n     */\r\n    get outputIndex (): number {\r\n        return this._outputIndex;\r\n    }\r\n\r\n    @serializable\r\n    private _inputPath: NodeInputPath;\r\n\r\n    @serializable\r\n    private _producer: PoseGraphNode;\r\n\r\n    @serializable\r\n    private _outputIndex = 0;\r\n}\r\n\r\nexport type { PoseGraphNodeInputBinding };\r\n","export {};\r\n\r\nexport enum PoseGraphType {\r\n    FLOAT,\r\n\r\n    INTEGER,\r\n\r\n    BOOLEAN,\r\n\r\n    VEC3,\r\n\r\n    QUAT,\r\n\r\n    POSE,\r\n}\r\n","import { PoseGraphNode } from './pose-graph-node';\r\n\r\nexport class AddNonFreestandingNodeError extends Error {\r\n    constructor (node: PoseGraphNode) {\r\n        super(`Can not add the specified ${node.toString()} since it has already been added into another graph.`);\r\n    }\r\n}\r\n\r\nexport class OperationOnFreestandingNodeError extends Error {\r\n    constructor (node: PoseGraphNode) {\r\n        super(`Can not perform specified operation on ${node.toString()} since it has not been added in to graph.`);\r\n    }\r\n}\r\n","import { EditorExtendable } from '../../../../core';\r\nimport { EnterNodeInfo } from './authoring/enter-node-info';\r\n\r\n/**\r\n * @zh\r\n * 姿势图中的结点类。\r\n * @en\r\n * Class of node in pose graph.\r\n */\r\nexport class PoseGraphNode extends EditorExtendable {\r\n    /**\r\n     * @internal Temporarily hack for deserialization callback.\r\n     */\r\n    __callOnAfterDeserializeRecursive?(): void;\r\n\r\n    /**\r\n     * @zh\r\n     * 获取该结点的标题。\r\n     * @en\r\n     * Gets title of this node.\r\n     * @returns @zh\r\n     * - 若返回 `string`，则用该字符串作为标题。\r\n     * - 否则，若返回 `undefined`，表示标题未定义。\r\n     * - 否则，返回的是标题的参数化 i18n 表示。\r\n     * @en\r\n     * - If `string` is returned, then use the string as title.\r\n     * - Otherwise, if `undefined` is returned, then the title is not defined.\r\n     * - Otherwise, the returned value is the parametric representation of title.\r\n     */\r\n    public getTitle?(): string | [string, Record<string, string>] | undefined;\r\n\r\n    /**\r\n     * @zh\r\n     * 获取该结点的进入信息。\r\n     * @en\r\n     * Gets enter info of this node.\r\n     */\r\n    public getEnterInfo?(): EnterNodeInfo | undefined;\r\n}\r\n","import type { AnimationGraph } from '../../../animation-graph';\r\nimport { PoseGraphNode } from '../pose-graph-node';\r\n\r\nexport {};\r\n\r\nexport interface PoseGraphCreateNodeContext {\r\n    animationGraph: AnimationGraph;\r\n\r\n    layerIndex: number;\r\n}\r\n\r\nexport interface PoseGraphCreateNodeEntry<TArg> {\r\n    arg: TArg;\r\n\r\n    menu: string;\r\n}\r\n\r\nexport interface PoseGraphCreateNodeFactory<TArg> {\r\n    listEntries(context: PoseGraphCreateNodeContext): Iterable<PoseGraphCreateNodeEntry<TArg>>;\r\n\r\n    create: (arg: TArg) => PoseGraphNode;\r\n}\r\n\r\nexport interface PoseGraphNodeEditorMetadata {\r\n    /**\r\n     * @zh\r\n     * 为 `true` 时表示此类型的结点对象不应该被编辑器创建和编辑。\r\n     * @en\r\n     * If `true`, nodes of this type should not be created and edited by editor.\r\n     */\r\n    hide?: boolean;\r\n\r\n    /**\r\n     * @zh\r\n     * 此类型的结点的分类。\r\n     * @en\r\n     * The category of this type of nodes.\r\n     */\r\n    category?: string;\r\n\r\n    /**\r\n     * @zh\r\n     * 创建此类型结点应使用的选项和方法。\r\n     * @en\r\n     * The options and factory should be taken to create this type of nodes.\r\n     */\r\n    factory?: PoseGraphCreateNodeFactory<unknown>;\r\n\r\n    /**\r\n     * @zh\r\n     * 此类型结点的外观配置。\r\n     * @en\r\n     * The appearance configs of this type of nodes.\r\n     */\r\n    appearance?: PoseGraphNodeAppearanceOptions;\r\n}\r\n\r\n/**\r\n * @zh 描述某类型结点的编辑器外观选项。\r\n * @en Describes the editor appearance of a type of nodes.\r\n */\r\nexport interface PoseGraphNodeAppearanceOptions {\r\n    /**\r\n     * @zh\r\n     * 主题颜色。目前应为以 “#” 开头的十六进制字符串颜色表示，例如 `\"#FF00FF\"`。\r\n     * @en\r\n     * Theme color. Currently should be a color hex string starting with \"#\", for example: `\"#FF00FF\"`.\r\n     */\r\n    themeColor?: `#${string}`;\r\n\r\n    /**\r\n     * @zh\r\n     * 为 `true` 时表示展示该类型结点时尽可能地使用“内联”样式。\r\n     * @en\r\n     * If `true`, indicates editor should show this type of nodes in \"inline\" style if possible.\r\n     */\r\n    inline?: boolean;\r\n}\r\n\r\nconst nodeEditorMetadataMap = new WeakMap<Constructor<PoseGraphNode>, PoseGraphNodeEditorMetadata>();\r\n\r\nexport function getPoseGraphNodeEditorMetadata (\r\n    classConstructor: Constructor<PoseGraphNode>,\r\n): Readonly<PoseGraphNodeEditorMetadata> | undefined {\r\n    return nodeEditorMetadataMap.get(classConstructor);\r\n}\r\n\r\nexport function getOrCreateNodeEditorMetadata (constructor: Constructor<PoseGraphNode>): PoseGraphNodeEditorMetadata {\r\n    const existing = nodeEditorMetadataMap.get(constructor);\r\n    if (existing) {\r\n        return existing;\r\n    } else {\r\n        const metadata: PoseGraphNodeEditorMetadata = {};\r\n        nodeEditorMetadataMap.set(constructor, metadata);\r\n        return metadata;\r\n    }\r\n}\r\n","import { error, js } from '../../../../core';\r\nimport { PoseGraphNode } from '../foundation/pose-graph-node';\r\n\r\nimport {\r\n    PoseGraphCreateNodeFactory,\r\n    PoseGraphNodeEditorMetadata,\r\n    PoseGraphNodeAppearanceOptions,\r\n    getOrCreateNodeEditorMetadata,\r\n} from '../foundation/authoring/node-authoring';\r\n\r\nexport type {\r\n    PoseGraphCreateNodeContext,\r\n    PoseGraphCreateNodeEntry,\r\n    PoseGraphCreateNodeFactory,\r\n    PoseGraphNodeEditorMetadata,\r\n    PoseGraphNodeAppearanceOptions,\r\n} from '../foundation/authoring/node-authoring';\r\n\r\nfunction makeNodeEditorMetadataModifier (edit: (metadata: PoseGraphNodeEditorMetadata) => void): ClassDecorator {\r\n    return (target): void => {\r\n        if (!checkDecoratingClass(target)) {\r\n            return;\r\n        }\r\n        const metadata = getOrCreateNodeEditorMetadata(target);\r\n        edit(metadata);\r\n    };\r\n}\r\n\r\nexport const poseGraphNodeCategory = (category: string): ClassDecorator => makeNodeEditorMetadataModifier((metadata): void => {\r\n    metadata.category = category;\r\n});\r\n\r\nexport const poseGraphCreateNodeFactory = (factory: PoseGraphCreateNodeFactory<any>): ClassDecorator => makeNodeEditorMetadataModifier((metadata): void => {\r\n    metadata.factory = factory;\r\n});\r\n\r\nexport const poseGraphNodeHide = (hide = true): ClassDecorator => makeNodeEditorMetadataModifier((metadata): void => {\r\n    metadata.hide = hide;\r\n});\r\n\r\nexport const poseGraphNodeAppearance = (\r\n    appearance: Readonly<PoseGraphNodeAppearanceOptions>,\r\n): ClassDecorator => makeNodeEditorMetadataModifier((metadata): void => {\r\n    Object.assign(metadata.appearance ??= {}, appearance);\r\n});\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction checkDecoratingClass (fn: Function): fn is Constructor<PoseGraphNode> {\r\n    if (!js.isChildClassOf(fn, PoseGraphNode)) {\r\n        error(`This kind of decorator should only be applied to pose graph node classes.`);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n","import { Quat, Vec3, assertIsTrue, js } from '../../../../../core';\r\nimport { PoseGraphNode } from '../pose-graph-node';\r\nimport { PoseGraphType } from '../type-system';\r\nimport { NodeInputPath } from '../node-shell';\r\nimport { OperationOnFreestandingNodeError } from '../errors';\r\nimport type { PoseGraph } from '../../pose-graph';\r\n\r\nexport type PoseGraphInputKey = NodeInputPath;\r\n\r\nexport interface PropertyNodeInputMetadata {\r\n    displayName?: string;\r\n}\r\n\r\ninterface ArrayPropertySyncGroup {\r\n    members: string[];\r\n}\r\n\r\nexport interface PoseGraphNodeInputMetadata {\r\n    type: PoseGraphType;\r\n\r\n    displayName?: PoseGraphNodeInputDisplayName;\r\n\r\n    deletable?: boolean;\r\n\r\n    insertPoint?: boolean;\r\n}\r\n\r\nexport type PoseGraphNodeInputDisplayName = string | [string, Record<string, string | number>];\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ntype Constructor = Function;\r\n\r\ninterface PropertyNodeInputRecord {\r\n    type: PoseGraphType;\r\n    displayName?: PoseGraphNodeInputMappingOptions['displayName'];\r\n    getArrayElementDisplayName?: PoseGraphNodeInputMappingOptions['getArrayElementDisplayName'];\r\n    arraySyncGroup?: ArrayPropertySyncGroup;\r\n    arraySyncGroupFollower?: boolean;\r\n}\r\n\r\nexport type PoseGraphNodeInputInsertId = string;\r\n\r\n/**\r\n * @zh 描述一个姿势图结点类属性在映射为结点输入时的选项。\r\n * @en Describes the options used\r\n * when a pose node class property is going to be mapped as node input(s).\r\n */\r\nexport interface PoseGraphNodeInputMappingOptions {\r\n    /**\r\n     * @zh 此属性或属性的元素映射的输入类型。\r\n     * 输入的类型必须和属性（的元素）的实际值类型匹配。\r\n     *\r\n     * @en Type of the input(s) that the property associates.\r\n     * The input type should be matched with the actual value type of the property.\r\n     */\r\n    type: PoseGraphType;\r\n\r\n    /**\r\n     * @zh 此属性关联的输入的显示名称。\r\n     * @en Display of the input(s) that the property associates.\r\n     */\r\n    displayName?: PoseGraphNodeInputDisplayName;\r\n\r\n    /**\r\n     * @zh 若有定义，当该属性是数组时，此方法被用来获取数组各个元素所映射的输入的显示名称。\r\n     * @en If specified and if the property is an array,\r\n     * this method will be used to retrieve the display name of input mapped by each element.\r\n     * @param index 数组元素的索引。\r\n     */\r\n    getArrayElementDisplayName?(index: number): PoseGraphNodeInputDisplayName;\r\n\r\n    /**\r\n     * @zh 若有定义，当该属性是数组时，声明该数组属性属于指定的同步组。\r\n     * 同步组中的任何成员在进行输入增加、移除或挪动等操作时，其它成员也将进行该操作。\r\n     *\r\n     * @en If specified and if the property is an array,\r\n     * declares that the array property belongs to specified sync group.\r\n     * When any member of the sync group is performing input add/remove/move etc. operation,\r\n     * the other members will also perform that operation.\r\n     *\r\n     * @example\r\n     * @zh\r\n     * 对于如下结点类来说：\r\n     *\r\n     * ```ts\r\n     * class Blending extends PoseNode {\r\n     *     \\@input({ type: PoseGraphType.POSE, syncGroup: 'blend-item' })\r\n     *     poses: PoseNode[] = [];\r\n     *\r\n     *     \\@input({ type: PoseGraphType.FLOAT, syncGroup: 'blend-item' })\r\n     *     weights: number[] = [];\r\n     * }\r\n     * ```\r\n     *\r\n     * 当 `poses` 插入了一个新的输入后，`weights` 也会被插入一个新输入。\r\n     *\r\n     * @en\r\n     * For the following node class:\r\n     *\r\n     * ```ts\r\n     * class Blending extends PoseNode {\r\n     *     \\@input({ type: PoseGraphType.POSE, syncGroup: 'blend-item' })\r\n     *     poses: PoseNode[] = [];\r\n     *\r\n     *     \\@input({ type: PoseGraphType.FLOAT, syncGroup: 'blend-item' })\r\n     *     weights: number[] = [];\r\n     * }\r\n     * ```\r\n     *\r\n     * If a new input is inserted into `poses`, there will be also a new input inserted into weights.\r\n     */\r\n    arraySyncGroup?: string;\r\n\r\n    /**\r\n     * @zh\r\n     * 若为 `true` 且 `arraySyncGroup` 生效时，\r\n     * 不再允许主动向此数组中添加元素或删除元素，相反，该数组只能被动配合同步组中的其它成员增删改。\r\n     * @en\r\n     * If `true` and if `arraySyncGroup` is taking effect,\r\n     * it's no longer allowed to actively add or remove elements from this array,\r\n     * instead this array can only passively cope with other members in sync group to add, remove or edit.\r\n     */\r\n    arraySyncGroupFollower?: boolean;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nclass PoseGraphNodeInputManager {\r\n    public setPropertyNodeInputRecord (\r\n        constructor: Constructor,\r\n        propertyKey: string,\r\n        options: PoseGraphNodeInputMappingOptions,\r\n    ): void {\r\n        let classInputRecord = this._classInputMap.get(constructor);\r\n        if (!classInputRecord) {\r\n            classInputRecord = {\r\n                properties: {},\r\n            };\r\n            this._classInputMap.set(constructor, classInputRecord);\r\n        }\r\n        const {\r\n            arraySyncGroup,\r\n            ...unchanged\r\n        } = options;\r\n\r\n        const record: PropertyNodeInputRecord = unchanged;\r\n\r\n        const arraySyncGroupName = options.arraySyncGroup;\r\n        if (arraySyncGroupName) {\r\n            if (!classInputRecord.arraySyncGroups) {\r\n                classInputRecord.arraySyncGroups = {};\r\n            }\r\n            const group = classInputRecord.arraySyncGroups[arraySyncGroupName] ??= { members: [] };\r\n            if (!group.members.includes(propertyKey)) {\r\n                group.members.push(propertyKey);\r\n            }\r\n            record.arraySyncGroup = group;\r\n        }\r\n\r\n        classInputRecord.properties[propertyKey] = Object.freeze(record);\r\n    }\r\n\r\n    public getInputKeys (object: PoseGraphNode): readonly PoseGraphInputKey[] {\r\n        const result: PoseGraphInputKey[] = [];\r\n        const getInputKeysRecurse = (constructor: null | Constructor): void => {\r\n            if (!constructor) {\r\n                return;\r\n            }\r\n            getInputKeysRecurse(js.getSuper(constructor));\r\n            const record = this._classInputMap.get(constructor);\r\n            if (!record) {\r\n                return;\r\n            }\r\n            for (const [propertyKey] of Object.entries(record.properties)) {\r\n                // Subclass's input mapping declaration overrides base's.\r\n                if (result.findIndex(([subClassPropertyKey]) => propertyKey === subClassPropertyKey) >= 0) {\r\n                    continue;\r\n                }\r\n                const field = object[propertyKey];\r\n                if (Array.isArray(field)) {\r\n                    for (let iElement = 0; iElement < field.length; ++iElement) {\r\n                        result.push([propertyKey, iElement]);\r\n                    }\r\n                } else {\r\n                    result.push([propertyKey]);\r\n                }\r\n            }\r\n        };\r\n        getInputKeysRecurse(object.constructor);\r\n        return result;\r\n    }\r\n\r\n    public isPoseInput (object: PoseGraphNode, key: PoseGraphInputKey): boolean {\r\n        const [propertyKey] = key;\r\n        const propertyInputRecord = this._getPropertyNodeInputRecord(object.constructor, propertyKey);\r\n        if (!propertyInputRecord) {\r\n            return false;\r\n        }\r\n        return propertyInputRecord.type === PoseGraphType.POSE;\r\n    }\r\n\r\n    public getInputMetadata (object: PoseGraphNode, key: PoseGraphInputKey): Readonly<PoseGraphNodeInputMetadata> | undefined {\r\n        const [propertyKey, elementIndex = -1] = key;\r\n        const propertyInputRecord = this._getPropertyNodeInputRecord(object.constructor, propertyKey);\r\n        if (!propertyInputRecord) {\r\n            return undefined;\r\n        }\r\n        const field = object[propertyKey];\r\n        if (Array.isArray(field)) {\r\n            if (elementIndex < 0 || elementIndex >= field.length) {\r\n                return undefined;\r\n            } else {\r\n                const displayName = propertyInputRecord.getArrayElementDisplayName?.call(object, elementIndex)\r\n                    ?? propertyInputRecord.displayName;\r\n                return {\r\n                    type: propertyInputRecord.type,\r\n                    displayName,\r\n                    deletable: !(propertyInputRecord.arraySyncGroup && propertyInputRecord.arraySyncGroupFollower),\r\n                    insertPoint: true,\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            type: propertyInputRecord.type,\r\n            displayName: propertyInputRecord.displayName,\r\n        };\r\n    }\r\n\r\n    public hasInput (object: PoseGraphNode, key: PoseGraphInputKey): boolean {\r\n        const [propertyKey, elementIndex = -1] = key;\r\n        const record = this._getPropertyNodeInputRecord(object.constructor, propertyKey);\r\n        if (!record) {\r\n            return false;\r\n        }\r\n        const field = object[propertyKey];\r\n        if (Array.isArray(field)) {\r\n            if (elementIndex < 0 || elementIndex >= field.length) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public getInputInsertInfos (object: PoseGraphNode): Readonly<Record<PoseGraphNodeInputInsertId, { displayName: string; }>> {\r\n        const result: Record<PoseGraphNodeInputInsertId, { displayName: string; }> = {};\r\n        for (let constructor = object.constructor; constructor; constructor = js.getSuper(constructor)) {\r\n            const classInputRecord = this._classInputMap.get(constructor);\r\n            if (!classInputRecord) {\r\n                continue;\r\n            }\r\n            for (const propertyKey in classInputRecord.properties) {\r\n                const propertyInputRecord = classInputRecord.properties[propertyKey];\r\n                const property = object[propertyKey];\r\n                if (Array.isArray(property)) {\r\n                    // Array sync group followers are not insert-able.\r\n                    if (propertyInputRecord.arraySyncGroup && propertyInputRecord.arraySyncGroupFollower) {\r\n                        continue;\r\n                    }\r\n                    result[propertyKey] = { displayName: propertyKey };\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public deleteInput (graph: PoseGraph, node: PoseGraphNode, key: PoseGraphInputKey): void {\r\n        const [\r\n            propertyKey,\r\n            elementIndex = -1,\r\n        ] = key;\r\n        const propertyInputRecord = this._getPropertyNodeInputRecord(node.constructor, propertyKey);\r\n        if (!propertyInputRecord) {\r\n            return;\r\n        }\r\n        const property = node[propertyKey];\r\n        if (!Array.isArray(property)) {\r\n            return;\r\n        }\r\n        if (elementIndex < 0 || elementIndex >= property.length) {\r\n            return;\r\n        }\r\n\r\n        // If it's an array record and belongs to a sync group,\r\n        // Perform the deletion on all group members.\r\n        // > Note: currently we can only insert input to array.\r\n        // eslint-disable-next-line no-constant-condition\r\n        if (true) {\r\n            const { arraySyncGroup } = propertyInputRecord;\r\n            if (arraySyncGroup) {\r\n                this._deleteInputInArraySyncGroup(\r\n                    graph,\r\n                    node,\r\n                    arraySyncGroup,\r\n                    property.length,\r\n                    elementIndex,\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        deletePoseGraphNodeArrayElement(graph, node, key);\r\n    }\r\n\r\n    public insertInput (graph: PoseGraph, node: PoseGraphNode, insertId: PoseGraphNodeInputInsertId): void {\r\n        const propertyKey = insertId;\r\n        const propertyInputRecord = this._getPropertyNodeInputRecord(node.constructor, propertyKey);\r\n        if (!propertyInputRecord) {\r\n            return;\r\n        }\r\n        const property = node[propertyKey];\r\n        if (!Array.isArray(property)) {\r\n            return;\r\n        }\r\n\r\n        const hint = property.length; // Always insert from back.\r\n\r\n        // If it's an array record and belongs to a sync group,\r\n        // Perform the insertion on all group members.\r\n        // > Note: currently we can only insert input to array.\r\n        // eslint-disable-next-line no-constant-condition\r\n        if (true) {\r\n            const { arraySyncGroup } = propertyInputRecord;\r\n            if (arraySyncGroup) {\r\n                this._insertInputInArraySyncGroup(\r\n                    graph,\r\n                    node,\r\n                    arraySyncGroup,\r\n                    property.length,\r\n                    hint,\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        insertPoseGraphNodeArrayElement(\r\n            graph,\r\n            node,\r\n            [propertyKey, hint],\r\n            createDefaultInputValueByType(propertyInputRecord.type),\r\n        );\r\n    }\r\n\r\n    private _classInputMap = new WeakMap<Constructor, {\r\n        properties: Record<PropertyKey, PropertyNodeInputRecord>;\r\n        arraySyncGroups?: Record<string, ArrayPropertySyncGroup>;\r\n    }>();\r\n\r\n    private _getPropertyNodeInputRecord (constructor: null | Constructor, propertyKey: string): PropertyNodeInputRecord | undefined {\r\n        if (!constructor) {\r\n            return undefined;\r\n        }\r\n        const classInputRecord = this._classInputMap.get(constructor);\r\n        if (classInputRecord) {\r\n            const record = classInputRecord.properties[propertyKey];\r\n            if (record) {\r\n                return record;\r\n            }\r\n        }\r\n        return this._getPropertyNodeInputRecord(js.getSuper(constructor), propertyKey);\r\n    }\r\n\r\n    private _insertInputInArraySyncGroup (\r\n        graph: PoseGraph,\r\n        node: PoseGraphNode,\r\n        syncGroup: ArrayPropertySyncGroup,\r\n        expectedOriginalSyncLength: number,\r\n        insertHint: number,\r\n    ): void {\r\n        for (let iGroupMember = 0; iGroupMember < syncGroup.members.length; ++iGroupMember) {\r\n            const syncedPropertyKey = syncGroup.members[iGroupMember];\r\n            const syncedPropertyInputRecord = this._getPropertyNodeInputRecord(node.constructor, syncedPropertyKey);\r\n            assertIsTrue(syncedPropertyInputRecord);\r\n            const syncedProperty = node[syncedPropertyKey];\r\n            if (!Array.isArray(syncedProperty) || syncedProperty.length !== expectedOriginalSyncLength) {\r\n                // The property is declared with a \"syncWith\",\r\n                // but the sync target property is not an array or does not have a matched length.\r\n                // To avoid un-expectations, interrupt.\r\n                continue;\r\n            }\r\n            insertPoseGraphNodeArrayElement(\r\n                graph,\r\n                node,\r\n                [syncedPropertyKey, insertHint],\r\n                createDefaultInputValueByType(syncedPropertyInputRecord.type),\r\n            );\r\n        }\r\n    }\r\n\r\n    private _deleteInputInArraySyncGroup (\r\n        graph: PoseGraph,\r\n        node: PoseGraphNode,\r\n        syncGroup: ArrayPropertySyncGroup,\r\n        expectedOriginalSyncLength: number,\r\n        index: number,\r\n    ): void {\r\n        for (let iGroupMember = 0; iGroupMember < syncGroup.members.length; ++iGroupMember) {\r\n            const syncedPropertyKey = syncGroup.members[iGroupMember];\r\n            const syncedPropertyInputRecord = this._getPropertyNodeInputRecord(node.constructor, syncedPropertyKey);\r\n            assertIsTrue(syncedPropertyInputRecord);\r\n            const syncedProperty = node[syncedPropertyKey];\r\n            if (!Array.isArray(syncedProperty) || syncedProperty.length !== expectedOriginalSyncLength) {\r\n                // The property is declared with a \"syncWith\",\r\n                // but the sync target property is not an array or does not have a matched length.\r\n                // To avoid un-expectations, interrupt.\r\n                continue;\r\n            }\r\n            deletePoseGraphNodeArrayElement(graph, node, [syncedPropertyKey, index]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction insertPoseGraphNodeArrayElement (graph: PoseGraph, node: PoseGraphNode, inputKey: PoseGraphInputKey, value: unknown): void {\r\n    const shell = graph.getShell(node);\r\n    if (!shell) {\r\n        throw new OperationOnFreestandingNodeError(node);\r\n    }\r\n\r\n    const [\r\n        propertyKey,\r\n        elementIndex = -1,\r\n    ] = inputKey;\r\n    const property = node[propertyKey];\r\n    if (!Array.isArray(property)) {\r\n        return;\r\n    }\r\n\r\n    // Insert the element itself.\r\n    property.splice(elementIndex, 0, value);\r\n\r\n    // Update bindings for following elements.\r\n    shell.moveArrayElementBindingForward(propertyKey, elementIndex + 1, false);\r\n}\r\n\r\nfunction deletePoseGraphNodeArrayElement (graph: PoseGraph, node: PoseGraphNode, inputKey: PoseGraphInputKey): void {\r\n    const shell = graph.getShell(node);\r\n    if (!shell) {\r\n        throw new OperationOnFreestandingNodeError(node);\r\n    }\r\n\r\n    const [\r\n        propertyKey,\r\n        elementIndex = -1,\r\n    ] = inputKey;\r\n    const property = node[propertyKey];\r\n    if (!Array.isArray(property)) {\r\n        return;\r\n    }\r\n    if (elementIndex < 0 || elementIndex >= property.length) {\r\n        return;\r\n    }\r\n\r\n    // Delete the binding.\r\n    shell.deleteBinding(inputKey);\r\n\r\n    // Delete the element itself.\r\n    property.splice(elementIndex, 1);\r\n\r\n    // Update bindings for following elements.\r\n    shell.moveArrayElementBindingForward(propertyKey, elementIndex + 1, true);\r\n}\r\n\r\nfunction createDefaultInputValueByType (type: PoseGraphType): false | 0 | Vec3 | Quat | null {\r\n    switch (type) {\r\n    default:\r\n        assertIsTrue(false);\r\n        // fallthrough\r\n    case PoseGraphType.FLOAT:\r\n    case PoseGraphType.INTEGER:\r\n        return 0;\r\n    case PoseGraphType.BOOLEAN:\r\n        return false;\r\n    case PoseGraphType.POSE:\r\n        return null;\r\n    case PoseGraphType.VEC3:\r\n        return new Vec3();\r\n    case PoseGraphType.QUAT:\r\n        return new Quat();\r\n    }\r\n}\r\n\r\nexport const globalPoseGraphNodeInputManager = new PoseGraphNodeInputManager();\r\n","import { Vec3 } from '../../core/math/vec3';\r\nimport { Quat } from '../../core/math/quat';\r\nimport { EPSILON, Mat4 } from '../../core';\r\n\r\nconst CACHE_VECTOR_A = new Vec3();\r\nconst CACHE_VECTOR_B = new Vec3();\r\nconst CACHE_QUAT_A = new Quat();\r\nconst CACHE_QUAT_B = new Quat();\r\n\r\n// Can not use `Readonly<Transform>`.\r\n// See: https://github.com/microsoft/TypeScript/issues/50668\r\ntype ReadonlyTransform = Transform;\r\n\r\nexport class Transform {\r\n    public static IDENTITY = Object.freeze(new Transform());\r\n\r\n    public static ZERO = Object.freeze(((): Transform => {\r\n        const transform = new Transform();\r\n        Vec3.copy(transform._position, Vec3.ZERO);\r\n        Quat.set(transform._rotation, 0.0, 0.0, 0.0, 0.0);\r\n        Vec3.copy(transform._scale, Vec3.ZERO);\r\n        return transform;\r\n    })());\r\n\r\n    get position (): Readonly<Vec3> {\r\n        return this._position;\r\n    }\r\n\r\n    set position (value) {\r\n        Vec3.copy(this._position, value);\r\n    }\r\n\r\n    get rotation (): Readonly<Quat> {\r\n        return this._rotation;\r\n    }\r\n\r\n    set rotation (value) {\r\n        Quat.copy(this._rotation, value);\r\n    }\r\n\r\n    get scale (): Readonly<Vec3> {\r\n        return this._scale;\r\n    }\r\n\r\n    set scale (value) {\r\n        Vec3.copy(this._scale, value);\r\n    }\r\n\r\n    public static clone (src: ReadonlyTransform): Transform {\r\n        const transform = new Transform();\r\n        Transform.copy(transform, src);\r\n        return transform;\r\n    }\r\n\r\n    public static setIdentity (out: Transform): Transform {\r\n        Vec3.copy(out._position, Vec3.ZERO);\r\n        Quat.copy(out._rotation, Quat.IDENTITY);\r\n        Vec3.copy(out._scale, Vec3.ONE);\r\n        return out;\r\n    }\r\n\r\n    public static copy (out: Transform, src: ReadonlyTransform): Transform {\r\n        Vec3.copy(out._position, src._position);\r\n        Quat.copy(out._rotation, src._rotation);\r\n        Vec3.copy(out._scale, src._scale);\r\n        return out;\r\n    }\r\n\r\n    public static equals (a: ReadonlyTransform, b: ReadonlyTransform, epsilon?: number): boolean {\r\n        return Vec3.equals(a._position, b._position, epsilon)\r\n            && Quat.equals(a._rotation, b._rotation, epsilon)\r\n            && Vec3.equals(a._scale, b._scale, epsilon);\r\n    }\r\n\r\n    public static strictEquals (a: ReadonlyTransform, b: ReadonlyTransform):boolean {\r\n        return Vec3.strictEquals(a._position, b._position)\r\n            && Quat.strictEquals(a._rotation, b._rotation)\r\n            && Vec3.strictEquals(a._scale, b._scale);\r\n    }\r\n\r\n    public static lerp (out: Transform, from: ReadonlyTransform, to: ReadonlyTransform, t: number): Transform {\r\n        if (t === 0.0) {\r\n            return Transform.copy(out, from);\r\n        }\r\n        if (t === 1.0) {\r\n            return Transform.copy(out, to);\r\n        }\r\n        Vec3.lerp(out._position, from._position, to._position, t);\r\n        Quat.slerp(out._rotation, from._rotation, to._rotation, t);\r\n        Vec3.lerp(out._scale, from._scale, to._scale, t);\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Associate two transforms.\r\n     * The result is as if the `first` transform is applied and then the `second` transform.\r\n     * @param out The result transform.\r\n     * @param first The first transform to apply.\r\n     * @param second The second transform to apply.\r\n     * @returns `out`.\r\n     * @note\r\n     * Much important things to note is that\r\n     * currently the following prerequisites are imposed on scales of both transforms:\r\n     * - The scale should be uniformed, ie. all components should be the same.\r\n     * - Each component of the scale shall be non-negative.\r\n     */\r\n    public static multiply (out: Transform, second: ReadonlyTransform, first: ReadonlyTransform): Transform {\r\n        // May reference to https://zhuanlan.zhihu.com/p/119066087\r\n        // for the reason about restrictions on uniform scales.\r\n\r\n        const cacheRotation = Quat.multiply(CACHE_QUAT_A, second._rotation, first._rotation);\r\n\r\n        const cacheScale = Vec3.multiply(CACHE_VECTOR_A, first._scale, second._scale);\r\n\r\n        // T_p + (R_p * (S_p * T_c))\r\n        const cachePosition = Vec3.multiply(CACHE_VECTOR_B, first._position, second._scale);\r\n        Vec3.transformQuat(cachePosition, cachePosition, second._rotation);\r\n        Vec3.add(cachePosition, cachePosition, second._position);\r\n\r\n        Vec3.copy(out._position, cachePosition);\r\n        Quat.copy(out._rotation, cacheRotation);\r\n        Vec3.copy(out._scale, cacheScale);\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Calculates the relative transitions.\r\n     * The result is as if `first` transform is associated by applying the result first then the `second`.\r\n     * @param out The result transform.\r\n     * @param first See description.\r\n     * @param second See description.\r\n     * @returns `out`.\r\n     * @note\r\n     *\r\n     * Note: if scale of second transform contains 0,\r\n     * the result scale's corresponding component would be error.\r\n     *\r\n     * Same restriction is applied to this method like `Transform.multiply`.\r\n     */\r\n    public static calculateRelative = ((): (out: Transform, first: ReadonlyTransform, second: ReadonlyTransform) => Transform => {\r\n        const cacheInvRotation = new Quat();\r\n        const cacheInvScale = new Vec3();\r\n        return (out: Transform, first: ReadonlyTransform, second: ReadonlyTransform): Transform => {\r\n            const invSecondRotation = Quat.invert(cacheInvRotation, second._rotation);\r\n            const invScale = invScaleOrZero(cacheInvScale, second._scale, EPSILON);\r\n\r\n            // The inverse process of `T_p + (R_p * (S_p * T_c))`\r\n            const cachePosition = Vec3.subtract(CACHE_VECTOR_B, first._position, second._position);\r\n            Vec3.transformQuat(cachePosition, cachePosition, invSecondRotation);\r\n            Vec3.multiply(cachePosition, cachePosition, invScale);\r\n\r\n            Vec3.copy(out._position, cachePosition);\r\n            Quat.multiply(out._rotation, invSecondRotation, first._rotation);\r\n            Vec3.multiply(out._scale, first._scale, invScale);\r\n\r\n            return out;\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * Inverts the transform.\r\n     * @param out Out transform.\r\n     * @param transform Transform to invert.\r\n     */\r\n    public static invert (out: Transform, transform: ReadonlyTransform): Transform {\r\n        const {\r\n            _rotation: invRotation,\r\n            _scale: invScale,\r\n            _position: invPosition,\r\n        } = out;\r\n\r\n        Quat.invert(invRotation, transform._rotation);\r\n        invScaleOrZero(invScale, transform._scale, EPSILON);\r\n\r\n        /**\r\n         * Let $b$ be the inverse of $a$, then for the translation term $T$(Vector), rotation term $Q$(Quaternion), scale term $S$(Vector):\r\n         *\r\n         * ```math\r\n         * \\begin{equation}\r\n         * \\begin{split}\r\n         * T_(a * b) & = T_b + (Q_b \\times (S_b \\times T_a) \\times Q_b^{-1}) = 0 \\\\\r\n         *      T(b) & = -(Q_b \\times S_b \\times T_a \\times Q_b^{-1}) \\\\\r\n         *           & = Q_b \\times (S_b \\times -T_a) \\times Q_b^{-1}\r\n         * \\end{split}\r\n         * \\end{equation}\r\n         * ```\r\n         *\r\n         * Which equals to:\r\n         *   - Translate by $-T_a$\r\n         *   - Then scale by the $S_b$(ie. $S_a^{-1}$)\r\n         *   - Then rotate by $Q_b$(ie. $Q_a^{-1}$)\r\n\r\n         */\r\n        Vec3.negate(invPosition, transform._position);\r\n        Vec3.multiply(invPosition, invPosition, invScale);\r\n        Vec3.transformQuat(invPosition, invPosition, invRotation);\r\n\r\n        return out;\r\n    }\r\n\r\n    public static fromMatrix (out: Transform, matrix: Readonly<Mat4>): Transform {\r\n        Mat4.toSRT(\r\n            matrix,\r\n            out._rotation,\r\n            out._position,\r\n            out._scale,\r\n        );\r\n        return out;\r\n    }\r\n\r\n    public static toMatrix (out: Mat4, transform: ReadonlyTransform): Mat4 {\r\n        return Mat4.fromSRT(\r\n            out,\r\n            transform._rotation,\r\n            transform._position,\r\n            transform._scale,\r\n        );\r\n    }\r\n\r\n    private readonly _position = new Vec3();\r\n\r\n    private readonly _rotation = new Quat();\r\n\r\n    private readonly _scale = Vec3.clone(Vec3.ONE);\r\n}\r\n\r\n/**\r\n * Invert each component of scale if it isn't close to zero, or set it to zero otherwise.\r\n */\r\nfunction invScaleOrZero (out: Vec3, scale: Readonly<Vec3>, epsilon: number): Vec3 {\r\n    const { x, y, z } = scale;\r\n    return Vec3.set(\r\n        out,\r\n        Math.abs(x) <= epsilon ? 0.0 : 1.0 / x,\r\n        Math.abs(y) <= epsilon ? 0.0 : 1.0 / y,\r\n        Math.abs(z) <= epsilon ? 0.0 : 1.0 / z,\r\n    );\r\n}\r\n\r\nexport function __calculateDeltaTransform (out: Transform, target: Readonly<Transform>, base: Readonly<Transform>): Transform {\r\n    Vec3.subtract(out.position, target.position, base.position);\r\n    deltaQuat(out.rotation, base.rotation, target.rotation);\r\n    Vec3.subtract(out.scale, target.scale, base.scale);\r\n    return out;\r\n}\r\n\r\nexport const __applyDeltaTransform = ((): (out: Transform, base: Readonly<Transform>, delta: Readonly<Transform>, alpha: number) => Transform => {\r\n    const cacheQuat = new Quat();\r\n    return (out: Transform, base: Readonly<Transform>, delta: Readonly<Transform>, alpha: number): Transform => {\r\n        Vec3.scaleAndAdd(out.position, base.position, delta.position, alpha);\r\n        const weightedDeltaRotation = Quat.slerp(cacheQuat, Quat.IDENTITY, delta.rotation, alpha);\r\n        Quat.multiply(out.rotation, weightedDeltaRotation, base.rotation);\r\n        Vec3.scaleAndAdd(out.scale, base.scale, delta.scale, alpha);\r\n        return out;\r\n    };\r\n})();\r\n\r\n/**\r\n * Calculates the delta(relative) rotations between two rotations represented by quaternions.\r\n * @param out\r\n * @param from\r\n * @param to\r\n */\r\nconst deltaQuat = ((): (out: Quat, from: Quat, to: Quat) => Quat => {\r\n    const quatMultiInvInverseCache = new Quat();\r\n    return (out: Quat, from: Quat, to: Quat): Quat => {\r\n        const fromInv = Quat.invert(quatMultiInvInverseCache, from);\r\n        return Quat.multiply(out, to, fromInv);\r\n    };\r\n})();\r\n\r\nexport const ZERO_DELTA_TRANSFORM = Object.freeze(((): Transform => {\r\n    const transform = new Transform();\r\n    transform.position = Vec3.ZERO;\r\n    transform.rotation = Quat.IDENTITY;\r\n    transform.scale = Vec3.ZERO;\r\n    return transform;\r\n})());\r\n","import { DEBUG } from 'internal:constants';\r\nimport { lerp } from '../../core';\r\nimport { assertIsTrue } from '../../core/data/utils/asserts';\r\nimport { Transform, __applyDeltaTransform, __calculateDeltaTransform } from './transform';\r\nimport { TransformArray } from './transform-array';\r\n\r\nexport class Pose {\r\n    readonly transforms: TransformArray;\r\n\r\n    readonly auxiliaryCurves: Float64Array;\r\n\r\n    private constructor (transforms: TransformArray, auxiliaryCurves: Float64Array) {\r\n        this.transforms = transforms;\r\n        this.auxiliaryCurves = auxiliaryCurves;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _poseTransformSpace = PoseTransformSpace.LOCAL;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _create (transforms: TransformArray, auxiliaryCurves: Float64Array): Pose {\r\n        return new Pose(transforms, auxiliaryCurves);\r\n    }\r\n}\r\n\r\nexport enum PoseTransformSpace {\r\n    /**\r\n     * Transforms are stored relative to their parent nodes.\r\n     */\r\n    LOCAL,\r\n\r\n    /**\r\n     * Transforms are stored relative to the belonging animation controller's node's space.\r\n     */\r\n    COMPONENT,\r\n}\r\n\r\nexport class TransformFilter {\r\n    constructor (involvedTransforms: readonly number[]) {\r\n        if (DEBUG) {\r\n            assertIsTrue(\r\n                involvedTransforms.every((transformIndex) => transformIndex < (2 ** 16)),\r\n                'The number of transforms exceeds the max allowed(2 ** 16)',\r\n            );\r\n        }\r\n        this._involvedTransforms = new Uint16Array(involvedTransforms);\r\n    }\r\n\r\n    get involvedTransforms (): Readonly<Uint16Array> {\r\n        return this._involvedTransforms as Readonly<Uint16Array>;\r\n    }\r\n\r\n    /**\r\n     * ANOTHER IDEA: if we partition the indices into intervals,\r\n     * can we achieve a better performance when do transform copy?\r\n     *\r\n     * For example: let every two elements of this array represents\r\n     * an involved transform range: first index and end index.\r\n     * For example, [1, 3, 4, 5, 5, 10] denotes the transform indices:\r\n     * - [1, 3)  i.e indices 1, 2\r\n     * - [4, 5)  i.e indices 4\r\n     * - [5, 10) i.e indices 5, 6, 7, 8, 9\r\n     * Its length always be multiple of 2.\r\n     *\r\n     * Obviously, the actual optimization effect is decided by the sparsity of the indices.\r\n     *\r\n     * ```ts\r\n     * // Partition the ordered array in intervals.\r\n     * let nIntervals = 0;\r\n     * const intervals = new Uint32Array(involvedTransforms.length * 2); // Capacity, not size\r\n     * for (let iBegin = 0; iBegin < involvedTransforms.length;) {\r\n     *      const begin = involvedTransforms[iBegin];\r\n     *      let iEnd = iBegin + 1;\r\n     *      let end = begin + 1;\r\n     *      for (; iEnd < involvedTransforms.length; ++iEnd, ++end) {\r\n     *          if (intervals[iEnd] !== (end + 1)) {\r\n     *              break;\r\n     *          }\r\n     *      }\r\n     *      intervals[2 * nIntervals + 0] = begin;\r\n     *      intervals[2 * nIntervals + 1] = end;\r\n     *      ++nIntervals;\r\n     *  }\r\n     *\r\n     * this._involvedTransformIntervals = intervals.slice(0, nIntervals * 2);\r\n     * ```\r\n     */\r\n    private declare _involvedTransforms: Uint16Array;\r\n}\r\n\r\nexport function blendPoseInto (target: Pose, source: Readonly<Pose>, alpha: number, transformFilter: TransformFilter | undefined = undefined): void {\r\n    blendTransformsInto(target.transforms, source.transforms, alpha, transformFilter);\r\n    blendAuxiliaryCurvesInto(target.auxiliaryCurves, source.auxiliaryCurves, alpha);\r\n}\r\n\r\nexport function blendTransformsInto (\r\n    target: TransformArray,\r\n    source: Readonly<TransformArray>,\r\n    alpha: number,\r\n    transformFilter: TransformFilter | undefined = undefined,\r\n): void {\r\n    const nTransforms = target.length;\r\n    assertIsTrue(nTransforms === target.length);\r\n    if (alpha === 0) {\r\n        return;\r\n    } else if (alpha === 1) {\r\n        if (!transformFilter) {\r\n            target.set(source);\r\n        } else {\r\n            copyTransformsWithFilter(target, source, transformFilter);\r\n        }\r\n        return;\r\n    }\r\n    if (!transformFilter) {\r\n        // Fast path.\r\n        for (let iTransform = 0; iTransform < nTransforms; ++iTransform) {\r\n            blendIntoTransformArrayAt(target, source, alpha, iTransform);\r\n        }\r\n    } else {\r\n        // TODO: cannot use for-of statement for Readonly ArrayBuffer on TS 4.2 for OH platform, wait for they upgrade TS version.\r\n        // issue: https://github.com/cocos/cocos-engine/issues/14715\r\n        for (let index = 0; index < transformFilter.involvedTransforms.length; ++index) {\r\n            const involvedTransformIndex = transformFilter.involvedTransforms[index];\r\n            blendIntoTransformArrayAt(target, source, alpha, involvedTransformIndex);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyTransformsWithFilter (target: TransformArray, source: Readonly<TransformArray>, filter: TransformFilter): void {\r\n    const nTransforms = target.length;\r\n    assertIsTrue(nTransforms === target.length);\r\n    // TODO: cannot use for-of statement for Readonly ArrayBuffer on TS 4.2 for OH platform, wait for they upgrade TS version.\r\n    // issue: https://github.com/cocos/cocos-engine/issues/14715\r\n    for (let index = 0; index < filter.involvedTransforms.length; ++index) {\r\n        const involvedTransformIndex = filter.involvedTransforms[index];\r\n        target.copyRange(involvedTransformIndex, source, involvedTransformIndex, 1);\r\n    }\r\n}\r\n\r\ntype BlendIntoTransformArrayAtFunc = (target: TransformArray, source: Readonly<TransformArray>, alpha: number, transformIndex: number) => void;\r\nconst blendIntoTransformArrayAt = ((): BlendIntoTransformArrayAtFunc => {\r\n    const cacheTransformSource = new Transform();\r\n    const cacheTransformTarget = new Transform();\r\n    return (target: TransformArray, source: Readonly<TransformArray>, alpha: number, transformIndex: number): void => {\r\n        const transformTarget = target.getTransform(transformIndex, cacheTransformTarget);\r\n        const transformSource = source.getTransform(transformIndex, cacheTransformSource);\r\n        Transform.lerp(transformTarget, transformTarget, transformSource, alpha);\r\n        target.setTransform(transformIndex, transformTarget);\r\n    };\r\n})();\r\n\r\nexport function blendAuxiliaryCurvesInto (target: Float64Array, source: Readonly<Float64Array>, alpha: number): void {\r\n    const nValues = source.length;\r\n    assertIsTrue(nValues === target.length);\r\n    for (let iValue = 0; iValue < nValues; ++iValue) {\r\n        target[iValue] = lerp(target[iValue], source[iValue], alpha);\r\n    }\r\n}\r\n\r\nexport function calculateDeltaPose (target: Pose, base: Pose): void {\r\n    calculateDeltaTransforms(target.transforms, base.transforms);\r\n    calculateDeltaAuxiliaryCurves(target.auxiliaryCurves, base.auxiliaryCurves);\r\n}\r\n\r\ntype CalculateDeltaTransformArrayAtFunc = (target: TransformArray, base: Readonly<TransformArray>, transformIndex: number) => void;\r\nconst calculateDeltaTransformArrayAt = ((): CalculateDeltaTransformArrayAtFunc => {\r\n    const cacheTransformBase = new Transform();\r\n    const cacheTransformTarget = new Transform();\r\n    return (target: TransformArray, base: Readonly<TransformArray>, transformIndex: number): void => {\r\n        const baseTransform = base.getTransform(transformIndex, cacheTransformBase);\r\n        const targetTransform = target.getTransform(transformIndex, cacheTransformTarget);\r\n        __calculateDeltaTransform(targetTransform, targetTransform, baseTransform);\r\n        target.setTransform(transformIndex, targetTransform);\r\n    };\r\n})();\r\n\r\nexport function calculateDeltaTransforms (target: TransformArray, base: TransformArray): void {\r\n    const nTransforms = target.length;\r\n    assertIsTrue(nTransforms === base.length);\r\n    for (let iTransform = 0; iTransform < nTransforms; ++iTransform) {\r\n        calculateDeltaTransformArrayAt(target, base, iTransform);\r\n    }\r\n}\r\n\r\nexport function calculateDeltaAuxiliaryCurves (target: Float64Array, base: Float64Array): void {\r\n    const nAuxiliaryCurves = target.length;\r\n    assertIsTrue(nAuxiliaryCurves === base.length);\r\n    for (let i = 0; i < target.length; ++i) {\r\n        target[i] -= base[i];\r\n    }\r\n}\r\n\r\nexport function applyDeltaPose (target: Pose, base: Pose, alpha: number, transformFilter: TransformFilter | undefined = undefined): void {\r\n    applyDeltaTransforms(target.transforms, base.transforms, alpha, transformFilter);\r\n    applyDeltaAuxiliaryCurves(target.auxiliaryCurves, base.auxiliaryCurves, alpha);\r\n}\r\n\r\ntype ApplyDeltaTransformArrayAtFunc = (target: TransformArray, delta: Readonly<TransformArray>, alpha: number, transformIndex: number) => void;\r\nconst applyDeltaTransformArrayAt = ((): ApplyDeltaTransformArrayAtFunc => {\r\n    const cacheTransformDelta = new Transform();\r\n    const cacheTransformTarget = new Transform();\r\n    return (target: TransformArray, delta: Readonly<TransformArray>, alpha: number, transformIndex: number): void => {\r\n        const deltaTransform = delta.getTransform(transformIndex, cacheTransformDelta);\r\n        const targetTransform = target.getTransform(transformIndex, cacheTransformTarget);\r\n        __applyDeltaTransform(targetTransform, targetTransform, deltaTransform, alpha);\r\n        target.setTransform(transformIndex, targetTransform);\r\n    };\r\n})();\r\n\r\nexport function applyDeltaTransforms (\r\n    target: TransformArray, delta: TransformArray, alpha: number, transformFilter: TransformFilter | undefined = undefined,\r\n): void {\r\n    const nTransforms = target.length;\r\n    assertIsTrue(nTransforms === delta.length);\r\n    if (!transformFilter) {\r\n        for (let iTransform = 0; iTransform < nTransforms; ++iTransform) {\r\n            applyDeltaTransformArrayAt(target, delta, alpha, iTransform);\r\n        }\r\n    } else {\r\n        // TODO: cannot use for-of statement for Readonly ArrayBuffer on TS 4.2 for OH platform, wait for they upgrade TS version.\r\n        // issue: https://github.com/cocos/cocos-engine/issues/14715\r\n        for (let index = 0; index < transformFilter.involvedTransforms.length; ++index) {\r\n            const transformIndex = transformFilter.involvedTransforms[index];\r\n            applyDeltaTransformArrayAt(target, delta, alpha, transformIndex);\r\n        }\r\n    }\r\n}\r\n\r\nexport function applyDeltaAuxiliaryCurves (target: Float64Array, delta: Float64Array, alpha: number): void {\r\n    const nAuxiliaryCurves = target.length;\r\n    assertIsTrue(nAuxiliaryCurves === delta.length);\r\n    for (let i = 0; i < target.length; ++i) {\r\n        target[i] += delta[i] * alpha;\r\n    }\r\n}\r\n","import { TEST } from 'internal:constants';\r\nimport { assertIsTrue, ccenum } from '../../../core';\r\nimport { ccclass } from '../../../core/data/decorators';\r\nimport { Pose, PoseTransformSpace } from '../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport {\r\n    AnimationGraphBindingContext,\r\n    AnimationGraphEvaluationContext,\r\n    AnimationGraphSettleContext,\r\n    AnimationGraphUpdateContext,\r\n} from '../animation-graph-context';\r\nimport { PoseGraphNode } from './foundation/pose-graph-node';\r\nimport type { PoseNodeDependencyEvaluation } from './instantiation';\r\n\r\nexport enum PoseTransformSpaceRequirement {\r\n    NO,\r\n\r\n    LOCAL,\r\n\r\n    COMPONENT,\r\n}\r\nccenum(PoseTransformSpaceRequirement);\r\n\r\nconst POSE_NODE_EVALUATION_STACK_ORDER_DEBUG_ENABLED = !!TEST;\r\n\r\n/**\r\n * Base class of all pose nodes.\r\n *\r\n * Pose nodes are nodes in pose graph that yields pose objects.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNode`)\r\nexport abstract class PoseNode extends PoseGraphNode {\r\n    /**\r\n     * Starts the bind stage on this pose node.\r\n     *\r\n     * @param context The bind context.\r\n     *\r\n     * @note Subclasses shall implement this method to perform some preparing works\r\n     * and invoke this method on dependant pose nodes.\r\n     */\r\n    public abstract bind(context: AnimationGraphBindingContext): void;\r\n\r\n    /**\r\n     * Starts the settle stage on this pose node.\r\n     *\r\n     * @param context The settle context.\r\n     *\r\n     * @note Subclasses shall implement this method to perform some post-binding works\r\n     * and invoke this method on dependant pose nodes.\r\n     *\r\n     */\r\n    public abstract settle (context: AnimationGraphSettleContext): void;\r\n\r\n    /**\r\n     * Reenter this pose nodes.\r\n     *\r\n     * @note Subclasses shall implement this method to perform some state resetting works.\r\n     * and invoke this method on dependant pose nodes.\r\n     *\r\n     * This method would be fired if other pose nodes that depends on this pose node requests a \"reset\".\r\n     * For example, if this pose node is as a node of a pose state.\r\n     * When this state is activated, this method is invoked.\r\n     */\r\n    public abstract reenter (): void;\r\n\r\n    /**\r\n     * Perform the update stage on this pose node.\r\n     * This method will directly forward to call `this.doUpdate`.\r\n     *\r\n     * @param context The update context.\r\n     *\r\n     * @note Subclasses shall not override this method and should override `doUpdate` instead.\r\n     */\r\n    public update (context: AnimationGraphUpdateContext): void {\r\n        this._dependencyEvaluation?.evaluate();\r\n        this.doUpdate(context);\r\n    }\r\n\r\n    /**\r\n     * Evaluates this pose node.\r\n     * This method will directly forward to call `this.doEvaluate`.\r\n     *\r\n     * @param context The evaluation context.\r\n     *\r\n     * @note Subclasses shall not override this method and should override `doEvaluate` instead.\r\n     */\r\n    public evaluate (context: AnimationGraphEvaluationContext, poseTransformSpaceRequirement: PoseTransformSpaceRequirement): Pose {\r\n        let stackSizeBefore!: number;\r\n        if (POSE_NODE_EVALUATION_STACK_ORDER_DEBUG_ENABLED) {\r\n            stackSizeBefore = context._stackSize_debugging;\r\n        }\r\n\r\n        const pose = this.doEvaluate(context);\r\n\r\n        if (POSE_NODE_EVALUATION_STACK_ORDER_DEBUG_ENABLED) {\r\n            // The stack should certainly increase 1.\r\n            assertIsTrue(context._stackSize_debugging === stackSizeBefore + 1,\r\n                `PoseNode.doEvaluate() should certainly push a pose node onto the stack and return it.`);\r\n            // The returned pose should be the increased pose, that's,\r\n            // can not return a already-popped pose.\r\n            assertIsTrue(context._isStackTopPose_debugging(pose),\r\n                `PoseNode.doEvaluate() should certainly push a pose node onto the stack and return it.`);\r\n        }\r\n\r\n        const currentSpace = pose._poseTransformSpace;\r\n        switch (poseTransformSpaceRequirement) {\r\n        default:\r\n            assertIsTrue(false);\r\n            // fallthrough\r\n        case PoseTransformSpaceRequirement.NO:\r\n            break;\r\n        case PoseTransformSpaceRequirement.LOCAL: {\r\n            if (currentSpace === PoseTransformSpace.COMPONENT) {\r\n                context._poseTransformsSpaceComponentToLocal(pose);\r\n            }\r\n            assertIsTrue(pose._poseTransformSpace === PoseTransformSpace.LOCAL);\r\n            break;\r\n        }\r\n        case PoseTransformSpaceRequirement.COMPONENT: {\r\n            if (currentSpace === PoseTransformSpace.LOCAL) {\r\n                context._poseTransformsSpaceLocalToComponent(pose);\r\n            }\r\n            assertIsTrue(pose._poseTransformSpace === PoseTransformSpace.COMPONENT);\r\n            break;\r\n        }\r\n        }\r\n\r\n        return pose;\r\n    }\r\n\r\n    public static evaluateDefaultPose (context: AnimationGraphEvaluationContext, poseTransformSpaceRequirement: PoseTransformSpaceRequirement): Pose {\r\n        switch (poseTransformSpaceRequirement) {\r\n        default:\r\n            assertIsTrue(false);\r\n            // fallthrough\r\n        case PoseTransformSpaceRequirement.NO:\r\n        case PoseTransformSpaceRequirement.LOCAL:\r\n            return context.pushDefaultedPose();\r\n        case PoseTransformSpaceRequirement.COMPONENT:\r\n            return context.pushDefaultedPoseInComponentSpace();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _setDependencyEvaluation (dependency: PoseNodeDependencyEvaluation): void {\r\n        this._dependencyEvaluation = dependency;\r\n    }\r\n\r\n    /**\r\n     * Implement this method to performs the update stage on this pose node.\r\n     *\r\n     * @param context The update context.\r\n     *\r\n     * @note Subclasses shall implement this method to perform some updating works.\r\n     * and invoke `this.update` on dependant pose nodes.\r\n     */\r\n    protected abstract doUpdate (context: AnimationGraphUpdateContext): void;\r\n\r\n    /**\r\n     * Implement this method to evaluate this pose node.\r\n     *\r\n     * @param context The evaluation context.\r\n     *\r\n     * @returns The result pose.\r\n     */\r\n    protected abstract doEvaluate(context: AnimationGraphEvaluationContext): Pose;\r\n\r\n    /**\r\n     * TODO: some nodes access dependencies in reenter(). See: cocos/cocos-engine#15305\r\n     */\r\n    protected _forceEvaluateEvaluation (): void {\r\n        this._dependencyEvaluation?.evaluate();\r\n    }\r\n\r\n    private _dependencyEvaluation: PoseNodeDependencyEvaluation | undefined = undefined;\r\n}\r\n","import { VarInstance } from '../variable';\r\nimport { PoseGraphNode } from './foundation/pose-graph-node';\r\nimport { PoseGraphType } from './foundation/type-system';\r\n\r\ntype Outputs = unknown[];\r\n\r\n/**\r\n * Base class of all pure value nodes in pose graph.\r\n *\r\n * Pure value nodes are nodes in pose graph that yields non-pose-object value(s).\r\n *\r\n * Sometimes, pure values nodes are also abbreviated as pv nodes.\r\n */\r\nexport abstract class PureValueNode extends PoseGraphNode {\r\n    constructor (outputTypes: readonly PoseGraphType[]) {\r\n        super();\r\n        this._outputTypes = outputTypes;\r\n    }\r\n\r\n    get outputCount (): number {\r\n        return this._outputTypes.length;\r\n    }\r\n\r\n    public getOutputType (outputIndex: number):PoseGraphType {\r\n        return this._outputTypes[outputIndex];\r\n    }\r\n\r\n    public link (context: PureValueNodeLinkContext): void {\r\n    }\r\n\r\n    private _outputTypes: readonly PoseGraphType[] = [];\r\n\r\n    public abstract selfEvaluate(outputs: Outputs): void;\r\n}\r\n\r\nexport abstract class SingleOutputPVNode<TValue = unknown> extends PureValueNode {\r\n    constructor (outputType: PoseGraphType) {\r\n        super([outputType]);\r\n    }\r\n\r\n    public selfEvaluate (outputs: Outputs): void {\r\n        outputs[0] = this.selfEvaluateDefaultOutput();\r\n    }\r\n\r\n    protected abstract selfEvaluateDefaultOutput(): TValue;\r\n}\r\n\r\nexport interface PureValueNodeLinkContext {\r\n    getVar(name: string): VarInstance | undefined;\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-types */\r\n\r\nimport { error, js } from '../../../../core';\r\nimport { PropertyStashInternalFlag } from '../../../../core/data/class-stash';\r\nimport { getOrCreatePropertyStash } from '../../../../core/data/decorators/property';\r\nimport { PoseGraphNodeInputMappingOptions, globalPoseGraphNodeInputManager } from '../foundation/authoring/input-authoring';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\nimport { PoseNode } from '../pose-node';\r\nimport { PureValueNode } from '../pure-value-node';\r\n\r\nexport type { PoseGraphNodeInputMappingOptions };\r\n\r\n/**\r\n * @zh\r\n * 生成一个属性装饰器，将要装饰的属性映射为一或多项姿势图结点输入。\r\n * @en\r\n * Generates a property decorator, which maps the decorating property\r\n * as one or more pose graph node inputs.\r\n *\r\n * @param options @zh 结点输入映射选项。 @en Node input mapping  options.\r\n * @returns @zh 装饰器。 @en The decorator.\r\n *\r\n * @note\r\n *\r\n * @zh 生成的装饰器对要装饰的属性所属的类有要求：\r\n * - 如果结点输入选项中指定了输入类型为姿势，则所属类必须是 `PoseNode` 的子类。\r\n * - 否则，所属类必须是 `PoseNode` 或 `PureValueNode` 的子类。\r\n * 如果所属类不符合要求，此装饰器无效。\r\n *\r\n * 如果要装饰的属性 **不是** 数组属性，则该属性将映射为一项输入；\r\n * 否则，该属性的每个元素都将映射为一项输入。\r\n *\r\n * @en The generated has requirements on the class to which the decorating property belongs:\r\n * - If the node input option specifies that the input type is pose, then the belonging class should be subclass of `PoseNode`.\r\n * - Otherwise, the belonging class should be subclass of either `PoseNode` or `PureValueNode`.\r\n * The decorator takes no effect if the belonging class does not fulfill the requirements.\r\n *\r\n * If the decorating property is **NOT** an array, the property will be mapped as an input.\r\n * Otherwise, each element of the property will be mapped as an input.\r\n */\r\nexport function input (options: PoseGraphNodeInputMappingOptions): PropertyDecorator {\r\n    return (target, propertyKey): void => {\r\n        const targetConstructor = target.constructor;\r\n        if (options.type === PoseGraphType.POSE) {\r\n            if (!js.isChildClassOf(targetConstructor, PoseNode)) {\r\n                error(`@input specifying pose input can be only applied to fields of subclasses of PoseNode.`);\r\n                return;\r\n            }\r\n        }\r\n        if (\r\n            !js.isChildClassOf(targetConstructor, PoseNode)\r\n            && !js.isChildClassOf(targetConstructor, PureValueNode)) {\r\n            error(`@input can be only applied to fields of subclasses of PoseNode or PureValueNode.`);\r\n            return;\r\n        }\r\n        inputUnchecked(options)(target, propertyKey);\r\n    };\r\n}\r\n\r\n/**\r\n * Unchecked version of `@input()`.\r\n * @internal\r\n */\r\nexport function inputUnchecked (options: PoseGraphNodeInputMappingOptions): PropertyDecorator {\r\n    return (target, propertyKey) => {\r\n        if (typeof propertyKey !== 'string') {\r\n            error(`@input can be only applied to string-named fields.`);\r\n            return;\r\n        }\r\n\r\n        const targetConstructor = target.constructor;\r\n        globalPoseGraphNodeInputManager.setPropertyNodeInputRecord(targetConstructor, propertyKey, options);\r\n\r\n        const propertyStash = getOrCreatePropertyStash(target, propertyKey);\r\n        propertyStash.__internalFlags |= (PropertyStashInternalFlag.STANDALONE | PropertyStashInternalFlag.IMPLICIT_VISIBLE);\r\n    };\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport { PoseNode } from './pose-node';\r\nimport { PoseGraphType } from './foundation/type-system';\r\nimport { PoseGraphNode } from './foundation/pose-graph-node';\r\nimport { poseGraphNodeAppearance } from './decorator/node';\r\nimport { inputUnchecked } from './decorator/input';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseGraphOutputNode`)\r\n@poseGraphNodeAppearance({\r\n    themeColor: '#CD3A58',\r\n    inline: true,\r\n})\r\nexport class PoseGraphOutputNode extends PoseGraphNode {\r\n    // Don't use @input since it requires the owner class being subclass of `PoseNode`.\r\n    @serializable\r\n    @inputUnchecked({ type: PoseGraphType.POSE })\r\n    pose: PoseNode | null = null;\r\n}\r\n","import { EditorExtendable, assertIsTrue, error, js, warn } from '../../../core';\r\nimport { ccclass, serializable } from '../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport { PoseGraphNodeShell } from './foundation/node-shell';\r\nimport { PoseGraphNode } from './foundation/pose-graph-node';\r\nimport { AddNonFreestandingNodeError } from './foundation/errors';\r\nimport { PoseGraphOutputNode } from './graph-output-node';\r\n\r\n/**\r\n * @zh\r\n * 姿势图。\r\n * @en\r\n * Pose graph.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseGraph`)\r\nexport class PoseGraph extends EditorExtendable {\r\n    constructor () {\r\n        super();\r\n        this.addNode(this._outputNode);\r\n    }\r\n\r\n    /**\r\n     * @zh 姿势图的输出结点。\r\n     * @en The pose graph's output node.\r\n     */\r\n    public get outputNode (): PoseGraphOutputNode {\r\n        return this._outputNode;\r\n    }\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    public __callOnAfterDeserializeRecursive (): void {\r\n        assertIsTrue(this._nodes.length === this._shells.length);\r\n        for (let iNode = 0; iNode < this._nodes.length; ++iNode) {\r\n            const node = this._nodes[iNode];\r\n            const shell = this._shells[iNode];\r\n            this._shellMap.set(node, shell);\r\n            node.__callOnAfterDeserializeRecursive?.();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 获取所有结点。\r\n     * @en Gets all nodes.\r\n     * @returns @zh 用于遍历所有结点的迭代器。 @en The iterator to iterate all nodes.\r\n     */\r\n    public nodes (): IterableIterator<PoseGraphNode> {\r\n        return this._nodes.values();\r\n    }\r\n\r\n    /**\r\n     * @zh 添加一个结点到图中。\r\n     * @en Adds a node into graph.\r\n     * @param node @zh 要添加的结点。 @en Node to add.\r\n     * @returns `node`\r\n     *\r\n     * @note\r\n     * @zh 注意，要添加的结点必须是“独立”的，也就是说它不能已经在任何图中。否则会抛出异常。\r\n     * @en Note, the node to add should be \"freestanding\",\r\n     * means it should not been already in any graph. Otherwise, an exception would be thrown.\r\n     */\r\n    public addNode<TNode extends PoseGraphNode> (node: TNode): TNode {\r\n        if (this._shellMap.has(node)) {\r\n            throw new AddNonFreestandingNodeError(node);\r\n        }\r\n        const shell = new PoseGraphNodeShell();\r\n        this._shells.push(shell);\r\n        this._nodes.push(node);\r\n        this._shellMap.set(node, shell);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @zh 将指定的结点从图中移除。\r\n     * @en Removes specified node from the graph.\r\n     * @param removal @zh 要移除的结点。 @en The node to remove.\r\n     *\r\n     * @note\r\n     * @zh 如果要移除的结点不在图中或该结点是图的输出结点，则此方法不会生效。\r\n     * @en If the removal node is not within graph or is the output node of graph,\r\n     * this method takes no effect.\r\n     */\r\n    public removeNode (removal: PoseGraphNode): void {\r\n        if (removal === this._outputNode) {\r\n            error(`Can not remove the output node.`);\r\n            return;\r\n        }\r\n\r\n        const nodeIndex = this._nodes.indexOf(removal);\r\n        if (nodeIndex < 0) {\r\n            return;\r\n        }\r\n\r\n        // This should be true.\r\n        assertIsTrue(this._shellMap.has(removal));\r\n\r\n        // Disconnect from others.\r\n        for (const shell of this._shells) {\r\n            shell.deleteBindingTo(removal);\r\n        }\r\n\r\n        // Remove from graph.\r\n        js.array.removeAt(this._shells, nodeIndex);\r\n        js.array.removeAt(this._nodes, nodeIndex);\r\n        this._shellMap.delete(removal);\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 获取指定结点在姿势图中的外壳。\r\n     * @en\r\n     * Gets the specified node's shell in pose graph.\r\n     * @internal\r\n     */\r\n    public getShell (node: PoseGraphNode): PoseGraphNodeShell | undefined {\r\n        return this._shellMap.get(node);\r\n    }\r\n\r\n    @serializable\r\n    private _outputNode = new PoseGraphOutputNode();\r\n\r\n    @serializable\r\n    private _nodes: PoseGraphNode[] = [];\r\n\r\n    @serializable\r\n    private _shells: PoseGraphNodeShell[] = [];\r\n\r\n    @serializable\r\n    private _shellMap = new Map<PoseGraphNode, PoseGraphNodeShell>();\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, editable, serializable } from 'cc.decorator';\r\nimport { DEBUG } from 'internal:constants';\r\nimport { js, clamp, assertIsNonNullable, assertIsTrue, EditorExtendable, shift, Vec3, Quat } from '../../core';\r\nimport type { Condition } from './state-machine/condition';\r\nimport { OwnedBy, assertsOwnedBy, own, markAsDangling, ownerSymbol } from './ownership';\r\nimport { createVariable, VariableDescription, VariableType, VariableTypeValueTypeMap } from './variable';\r\nimport { InvalidTransitionError } from './errors';\r\nimport { MotionState } from './state-machine/motion-state';\r\nimport { State, outgoingsSymbol, incomingsSymbol, InteractiveState } from './state-machine/state';\r\nimport { AnimationMask } from './animation-mask';\r\nimport { onAfterDeserializedTag } from '../../serialization/deserialize-symbols';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\nimport { AnimationGraphLike } from './animation-graph-like';\r\nimport { createInstanceofProxy, renameObjectProperty } from '../../core/utils/internal';\r\nimport { PoseGraph } from './pose-graph/pose-graph';\r\nimport { AnimationGraphEventBinding } from './event/event-binding';\r\nimport { instantiate } from '../../serialization';\r\n\r\nexport { State };\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}Transition`)\r\nclass Transition extends EditorExtendable implements OwnedBy<StateMachine>, Transition {\r\n    declare [ownerSymbol]: StateMachine | undefined;\r\n\r\n    /**\r\n     * The transition source.\r\n     */\r\n    @serializable\r\n    public from: State;\r\n\r\n    /**\r\n     * The transition target.\r\n     */\r\n    @serializable\r\n    public to: State;\r\n\r\n    /**\r\n     * The transition condition.\r\n     */\r\n    @serializable\r\n    public conditions: Condition[] = [];\r\n\r\n    constructor (from: State, to: State, conditions?: Condition[]) {\r\n        super();\r\n        this.from = from;\r\n        this.to = to;\r\n        if (conditions) {\r\n            this.conditions = conditions;\r\n        }\r\n    }\r\n\r\n    public copyTo (that: Transition): void {\r\n        that.conditions = this.conditions.map((condition) => condition.clone());\r\n    }\r\n\r\n    [ownerSymbol]: StateMachine | undefined;\r\n}\r\n\r\ntype TransitionView = Omit<Transition, 'from' | 'to'> & {\r\n    readonly from: Transition['from'];\r\n    readonly to: Transition['to'];\r\n};\r\n\r\nexport type { TransitionView as Transition };\r\n\r\nexport type TransitionInternal = Transition;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}DurationalTransition`)\r\nclass DurationalTransition extends Transition {\r\n    /**\r\n     * @en The start time of (final) destination motion state when this transition starts.\r\n     * Its unit is seconds if `relativeDestinationStart` is `false`,\r\n     * Otherwise, its unit is the duration of destination motion state.\r\n     * @zh 此过渡开始时，（最终）目标动作状态的起始时间。\r\n     * 如果 `relativeDestinationStart`为 `false`，其单位是秒，否则其单位是目标动作状态的周期。\r\n     */\r\n    @serializable\r\n    public destinationStart = 0.0;\r\n\r\n    /**\r\n     * @en Determines the unit of destination start time. See `destinationStart`.\r\n     * @zh 决定了目标起始时间的单位。见 `destinationStart`。\r\n     */\r\n    @serializable\r\n    public relativeDestinationStart = false;\r\n\r\n    /**\r\n     * @zh 过渡开始事件绑定，此处绑定的事件会在过渡开始时触发。\r\n     * @en Transition start event binding. The event bound here will be triggered on the transition starts.\r\n     */\r\n    @serializable\r\n    @editable\r\n    public startEventBinding = new AnimationGraphEventBinding();\r\n\r\n    /**\r\n     * @zh 过渡结束事件绑定，此处绑定的事件会在过渡结束时触发。\r\n     * @en Transition end event binding. The event bound here will be triggered on the transition ends.\r\n     */\r\n    @serializable\r\n    @editable\r\n    public endEventBinding = new AnimationGraphEventBinding();\r\n\r\n    public copyTo (that: DurationalTransition): void {\r\n        super.copyTo(that);\r\n        that.destinationStart = this.destinationStart;\r\n        that.relativeDestinationStart = this.relativeDestinationStart;\r\n        this.startEventBinding.copyTo(that.startEventBinding);\r\n        this.endEventBinding.copyTo(that.endEventBinding);\r\n    }\r\n\r\n    [ownerSymbol]: StateMachine | undefined;\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationTransition`)\r\nclass AnimationTransition extends DurationalTransition {\r\n    /**\r\n     * The transition duration.\r\n     * The unit of the duration is the real duration of transition source\r\n     * if `relativeDuration` is `true` or seconds otherwise.\r\n     */\r\n    @serializable\r\n    public duration = 0.3;\r\n\r\n    /**\r\n     * Determines the unit of transition duration. See `duration`.\r\n     */\r\n    @serializable\r\n    public relativeDuration = false;\r\n\r\n    @serializable\r\n    public exitConditionEnabled = true;\r\n\r\n    get exitCondition (): number {\r\n        return this._exitCondition;\r\n    }\r\n\r\n    set exitCondition (value) {\r\n        assertIsTrue(value >= 0.0);\r\n        this._exitCondition = value;\r\n    }\r\n\r\n    public copyTo (that: AnimationTransition): void {\r\n        super.copyTo(that);\r\n        that.duration = this.duration;\r\n        that.relativeDuration = this.relativeDuration;\r\n        that.exitConditionEnabled = this.exitConditionEnabled;\r\n        that.exitCondition = this.exitCondition;\r\n    }\r\n\r\n    @serializable\r\n    private _exitCondition = 1.0;\r\n}\r\n\r\ntype AnimationTransitionView = Omit<AnimationTransition, 'from' | 'to'> & {\r\n    readonly from: AnimationTransition['from'];\r\n    readonly to: AnimationTransition['to'];\r\n};\r\n\r\nexport type { AnimationTransitionView as AnimationTransition };\r\n\r\nexport function isAnimationTransition (transition: TransitionView): transition is AnimationTransitionView {\r\n    return transition instanceof AnimationTransition;\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}EmptyState`)\r\nexport class EmptyState extends State {\r\n    public declare __brand: 'EmptyState';\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}EmptyStateTransition`)\r\nexport class EmptyStateTransition extends DurationalTransition {\r\n    /**\r\n     * The transition duration, in seconds.\r\n     */\r\n    @serializable\r\n    public duration = 0.3;\r\n\r\n    public copyTo (that: EmptyStateTransition): void {\r\n        super.copyTo(that);\r\n        that.duration = this.duration;\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}ProceduralPoseState`)\r\nclass ProceduralPoseState extends State {\r\n    @serializable\r\n    public graph = new PoseGraph();\r\n\r\n    /**\r\n     * @zh 状态进入事件绑定，此处绑定的事件会在状态机向该状态过渡时触发。\r\n     * @en State entered event binding. The event bound here will be triggered\r\n     * when the state machine starts to transition into this state.\r\n     */\r\n    @serializable\r\n    @editable\r\n    public transitionInEventBinding = new AnimationGraphEventBinding();\r\n\r\n    /**\r\n     * @zh 状态离开事件绑定，此处绑定的事件会在状态机从该状态离开时触发。\r\n     * @en State left event binding. The event bound here will be triggered\r\n     * when the state machine starts to transition out from this state.\r\n     */\r\n    @serializable\r\n    @editable\r\n    public transitionOutEventBinding = new AnimationGraphEventBinding();\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    public __callOnAfterDeserializeRecursive (): void {\r\n        this.graph.__callOnAfterDeserializeRecursive();\r\n    }\r\n\r\n    public copyTo (that: MotionState): ProceduralPoseState {\r\n        super.copyTo(that);\r\n        this.transitionInEventBinding.copyTo(that.transitionInEventBinding);\r\n        this.transitionOutEventBinding.copyTo(that.transitionOutEventBinding);\r\n        return this;\r\n    }\r\n}\r\n\r\ntype ProceduralPoseState_ = ProceduralPoseState;\r\nconst ProceduralPoseState_ = createInstanceofProxy(ProceduralPoseState);\r\nexport {\r\n    ProceduralPoseState_ as ProceduralPoseState,\r\n};\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}ProceduralPoseTransition`)\r\nclass ProceduralPoseTransition extends DurationalTransition {\r\n    /**\r\n     * The transition duration, in seconds.\r\n     */\r\n    @serializable\r\n    public duration = 0.3;\r\n\r\n    public copyTo (that: ProceduralPoseTransition): void {\r\n        super.copyTo(that);\r\n        that.duration = this.duration;\r\n    }\r\n}\r\n\r\ntype ProceduralPoseTransition_ = ProceduralPoseTransition;\r\nconst ProceduralPoseTransition_ = createInstanceofProxy(ProceduralPoseTransition);\r\nexport {\r\n    ProceduralPoseTransition_ as ProceduralPoseTransition,\r\n};\r\n\r\n@ccclass('cc.animation.StateMachine')\r\nexport class StateMachine extends EditorExtendable {\r\n    @serializable\r\n    private _states: State[] = [];\r\n\r\n    @serializable\r\n    private _transitions: Transition[] = [];\r\n\r\n    @serializable\r\n    private _entryState: State;\r\n\r\n    @serializable\r\n    private _exitState: State;\r\n\r\n    @serializable\r\n    private _anyState: State;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _allowEmptyStates = true;\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    public __callOnAfterDeserializeRecursive (): void {\r\n        this[onAfterDeserializedTag]();\r\n        const nStates = this._states.length;\r\n        for (let iState = 0; iState < nStates; ++iState) {\r\n            const state = this._states[iState];\r\n            if (state instanceof SubStateMachine) {\r\n                state.stateMachine.__callOnAfterDeserializeRecursive();\r\n            } else if (state instanceof ProceduralPoseState) {\r\n                state.__callOnAfterDeserializeRecursive();\r\n            } else if (state instanceof MotionState) {\r\n                state.__callOnAfterDeserializeRecursive();\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor (allowEmptyStates?: boolean) {\r\n        super();\r\n        this._allowEmptyStates = allowEmptyStates ?? false;\r\n        this._entryState = this._addState(new State());\r\n        this._entryState.name = 'Entry';\r\n        this._exitState = this._addState(new State());\r\n        this._exitState.name = 'Exit';\r\n        this._anyState = this._addState(new State());\r\n        this._anyState.name = 'Any';\r\n    }\r\n\r\n    public [onAfterDeserializedTag] (): void {\r\n        this._states.forEach((state) => own(state, this));\r\n        this._transitions.forEach((transition) => {\r\n            transition.from[outgoingsSymbol].push(transition);\r\n            transition.to[incomingsSymbol].push(transition);\r\n        });\r\n    }\r\n\r\n    public get allowEmptyStates (): boolean {\r\n        return this._allowEmptyStates;\r\n    }\r\n\r\n    /**\r\n     * The entry state.\r\n     */\r\n    get entryState (): State {\r\n        return this._entryState;\r\n    }\r\n\r\n    /**\r\n     * The exit state.\r\n     */\r\n    get exitState (): State {\r\n        return this._exitState;\r\n    }\r\n\r\n    /**\r\n     * The any state.\r\n     */\r\n    get anyState (): State {\r\n        return this._anyState;\r\n    }\r\n\r\n    /**\r\n     * Gets an iterator to all states within this graph.\r\n     * @returns The iterator.\r\n     */\r\n    public states (): Iterable<State> {\r\n        return this._states;\r\n    }\r\n\r\n    /**\r\n     * Gets an iterator to all transitions within this graph.\r\n     * @returns The iterator.\r\n     */\r\n    public transitions (): Iterable<Transition> {\r\n        return this._transitions;\r\n    }\r\n\r\n    /**\r\n     * Gets the transitions between specified states.\r\n     * @param from Transition source.\r\n     * @param to Transition target.\r\n     * @returns Iterator to the transitions\r\n     */\r\n    public getTransitionsBetween (from: State, to: State): Iterable<Transition> {\r\n        assertsOwnedBy(from, this);\r\n        assertsOwnedBy(to, this);\r\n        return from[outgoingsSymbol].filter((transition) => transition.to === to);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets all transitions outgoing from specified state.\r\n     * @zh\r\n     * 获取从指定状态引出的所有过渡。\r\n     * @param from @en The state. @zh 指定状态。\r\n     * @returns @en Iterable to result transitions, in priority order. @zh 到结果过渡的迭代器，按优先级顺序。\r\n     */\r\n    public getOutgoings (from: State): Iterable<Transition> {\r\n        assertsOwnedBy(from, this);\r\n        return from[outgoingsSymbol];\r\n    }\r\n\r\n    /**\r\n     * Gets all incoming transitions of specified state.\r\n     * @param to The state.\r\n     * @returns Result transitions.\r\n     */\r\n    public getIncomings (to: State): Iterable<Transition> {\r\n        assertsOwnedBy(to, this);\r\n        return to[incomingsSymbol];\r\n    }\r\n\r\n    /**\r\n     * Adds a motion state into this state machine.\r\n     * @returns The newly created motion.\r\n     */\r\n    public addMotion (): MotionState {\r\n        return this._addState(new MotionState());\r\n    }\r\n\r\n    /**\r\n     * Adds a sub state machine into this state machine.\r\n     * @returns The newly created state machine.\r\n     */\r\n    public addSubStateMachine (): SubStateMachine {\r\n        return this._addState(new SubStateMachine(this._allowEmptyStates));\r\n    }\r\n\r\n    /**\r\n     * Adds an empty state into this state machine.\r\n     * @returns The newly created empty state.\r\n     */\r\n    public addEmpty (): EmptyState {\r\n        if (!this._allowEmptyStates) {\r\n            throw new Error(`Empty states are now allowed in this state machine.`);\r\n        }\r\n        return this._addState(new EmptyState());\r\n    }\r\n\r\n    /**\r\n     * @zh 向此状态机中添加一项姿势状态。\r\n     * @en Adds an pose state into this state machine.\r\n     * @returns @zh 新创建的姿势状态。 @en The newly created pose state.\r\n     */\r\n    public addProceduralPoseState (): ProceduralPoseState {\r\n        return this._addState(new ProceduralPoseState());\r\n    }\r\n\r\n    /**\r\n     * Removes specified state from this state machine.\r\n     * @param state The state to remove.\r\n     */\r\n    public remove (state: State): void {\r\n        assertsOwnedBy(state, this);\r\n\r\n        if (state === this.entryState\r\n            || state === this.exitState\r\n            || state === this.anyState) {\r\n            return;\r\n        }\r\n\r\n        this.eraseTransitionsIncludes(state);\r\n        js.array.remove(this._states, state);\r\n\r\n        markAsDangling(state);\r\n    }\r\n\r\n    /**\r\n     * Connect two states.\r\n     * @param from Source state.\r\n     * @param to Target state.\r\n     * @param condition The transition condition.\r\n     */\r\n    public connect (from: MotionState, to: State, conditions?: Condition[]): AnimationTransitionView;\r\n\r\n    /**\r\n     * Connect two states.\r\n     * @param from Source state.\r\n     * @param to Target state.\r\n     * @param condition The transition condition.\r\n     */\r\n    public connect (from: EmptyState, to: State, conditions?: Condition[]): EmptyStateTransition;\r\n\r\n    /**\r\n     * Connect two states.\r\n     * @param from Source state.\r\n     * @param to Target state.\r\n     * @param condition The transition condition.\r\n     */\r\n    public connect (from: ProceduralPoseState, to: State, conditions?: Condition[]): ProceduralPoseTransition;\r\n\r\n    /**\r\n     * Connect two states.\r\n     * @param from Source state.\r\n     * @param to Target state.\r\n     * @param condition The transition condition.\r\n     * @throws `InvalidTransitionError` if:\r\n     * - the target state is entry or any, or\r\n     * - the source state is exit.\r\n     */\r\n    public connect (from: State, to: State, conditions?: Condition[]): TransitionView;\r\n\r\n    public connect (from: State, to: State, conditions?: Condition[]): TransitionView {\r\n        assertsOwnedBy(from, this);\r\n        assertsOwnedBy(to, this);\r\n\r\n        if (to === this.entryState) {\r\n            throw new InvalidTransitionError('to-entry');\r\n        }\r\n        if (to === this.anyState) {\r\n            throw new InvalidTransitionError('to-any');\r\n        }\r\n        if (from === this.exitState) {\r\n            throw new InvalidTransitionError('from-exit');\r\n        }\r\n\r\n        const transition = from instanceof MotionState || from === this._anyState\r\n            ? new AnimationTransition(from, to, conditions)\r\n            : from instanceof EmptyState\r\n                ? new EmptyStateTransition(from, to, conditions)\r\n                : from instanceof ProceduralPoseState\r\n                    ? new ProceduralPoseTransition(from, to, conditions)\r\n                    : new Transition(from, to, conditions);\r\n\r\n        own(transition, this);\r\n        this._transitions.push(transition);\r\n        from[outgoingsSymbol].push(transition);\r\n        to[incomingsSymbol].push(transition);\r\n\r\n        return transition;\r\n    }\r\n\r\n    public disconnect (from: State, to: State): void {\r\n        assertsOwnedBy(from, this);\r\n        assertsOwnedBy(to, this);\r\n\r\n        const oTransitions = from[outgoingsSymbol];\r\n        const iTransitions = to[incomingsSymbol];\r\n        const transitions = this._transitions;\r\n\r\n        const oTransitionsToRemove = oTransitions\r\n            .filter((oTransition) => oTransition.to === to);\r\n        const nOTransitionToRemove = oTransitionsToRemove.length;\r\n        for (let iOTransitionToRemove = 0;\r\n            iOTransitionToRemove < nOTransitionToRemove;\r\n            ++iOTransitionToRemove\r\n        ) {\r\n            const oTransition = oTransitionsToRemove[iOTransitionToRemove];\r\n            js.array.remove(oTransitions, oTransition);\r\n            assertIsTrue(\r\n                js.array.remove(transitions, oTransition),\r\n            );\r\n            assertIsNonNullable(\r\n                js.array.removeIf(iTransitions, (transition) => transition === oTransition),\r\n            );\r\n            markAsDangling(oTransition);\r\n        }\r\n    }\r\n\r\n    public removeTransition (removal: Transition): void {\r\n        assertIsTrue(\r\n            js.array.remove(this._transitions, removal),\r\n        );\r\n        assertIsNonNullable(\r\n            js.array.removeIf(removal.from[outgoingsSymbol], (transition) => transition === removal),\r\n        );\r\n        assertIsNonNullable(\r\n            js.array.removeIf(removal.to[incomingsSymbol], (transition) => transition === removal),\r\n        );\r\n        markAsDangling(removal);\r\n    }\r\n\r\n    public eraseOutgoings (from: State): void {\r\n        assertsOwnedBy(from, this);\r\n\r\n        const oTransitions = from[outgoingsSymbol];\r\n        for (let iOTransition = 0; iOTransition < oTransitions.length; ++iOTransition) {\r\n            const oTransition = oTransitions[iOTransition];\r\n            const to = oTransition.to;\r\n            assertIsTrue(\r\n                js.array.remove(this._transitions, oTransition),\r\n            );\r\n            assertIsNonNullable(\r\n                js.array.removeIf(to[incomingsSymbol], (transition) => transition === oTransition),\r\n            );\r\n            markAsDangling(oTransition);\r\n        }\r\n        oTransitions.length = 0;\r\n    }\r\n\r\n    public eraseIncomings (to: State): void {\r\n        assertsOwnedBy(to, this);\r\n\r\n        const iTransitions = to[incomingsSymbol];\r\n        for (let iITransition = 0; iITransition < iTransitions.length; ++iITransition) {\r\n            const iTransition = iTransitions[iITransition];\r\n            const from = iTransition.from;\r\n            assertIsTrue(\r\n                js.array.remove(this._transitions, iTransition),\r\n            );\r\n            assertIsNonNullable(\r\n                js.array.removeIf(from[outgoingsSymbol], (transition) => transition === iTransition),\r\n            );\r\n            markAsDangling(iTransition);\r\n        }\r\n        iTransitions.length = 0;\r\n    }\r\n\r\n    public eraseTransitionsIncludes (state: State): void {\r\n        this.eraseIncomings(state);\r\n        this.eraseOutgoings(state);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adjusts the priority of a transition.\r\n     *\r\n     * To demonstrate, one can imagine a transition array sorted by their priority.\r\n     * - If `diff` is zero, nothing's gonna happen.\r\n     * - Negative `diff` raises the priority:\r\n     *   `diff` number of transitions originally having higher priority than `adjusting`\r\n     *   will then have lower priority than `adjusting`.\r\n     * - Positive `diff` reduce the priority:\r\n     *   `|diff|` number of transitions originally having lower priority than `adjusting`\r\n     *   will then have higher priority than `adjusting`.\r\n     *\r\n     * If the number of transitions indicated by `diff`\r\n     * is more than the actual one, the actual number would be taken.\r\n     * @zh\r\n     * 调整过渡的优先级。\r\n     *\r\n     * 为了说明，可以想象一个由优先级排序的过渡数组。\r\n     * - 如果 `diff` 是 0，无事发生。\r\n     * - 负的 `diff` 会提升该过渡的优先级：原本优先于 `adjusting` 的 `diff` 条过渡的优先级会设置为低于 `adjusting`。\r\n     * - 正的 `diff` 会降低该过渡的优先级：原本优先级低于 `adjusting` 的 `|diff|` 条过渡会设置为优先于 `adjusting`。\r\n     *\r\n     * 如果 `diff` 指示的过渡数量比实际多，则会使用实际数量。\r\n     *\r\n     * @param adjusting @en The transition to adjust the priority. @zh 需要调整优先级的过渡。\r\n     * @param diff @en Indicates how to adjust the priority. @zh 指示如何调整优先级。\r\n     */\r\n    public adjustTransitionPriority (adjusting: Transition, diff: number): void {\r\n        const { from } = adjusting;\r\n        if (diff === 0) {\r\n            return;\r\n        }\r\n        const outgoings = from[outgoingsSymbol];\r\n        const iAdjusting = outgoings.indexOf(adjusting);\r\n        assertIsTrue(iAdjusting >= 0);\r\n        const iNew = clamp(iAdjusting + diff, 0, outgoings.length - 1);\r\n        { // 1. Adjust the order in entire transition array, which is used for serialization.\r\n            // We're doing a discrete movement: move without bother other outgoings from other motion\r\n            const { _transitions: globalTransitions } = this;\r\n            const adjustingIndexInGlobal = globalTransitions.indexOf(adjusting);\r\n            assertIsTrue(adjustingIndexInGlobal >= 0);\r\n            let lastPlaceholder = adjustingIndexInGlobal;\r\n            if (iNew > iAdjusting) {\r\n                // Shift right\r\n                for (let iOutgoing = iAdjusting + 1; iOutgoing <= iNew; ++iOutgoing) {\r\n                    const outgoing = outgoings[iOutgoing];\r\n                    const indexInGlobal = globalTransitions.indexOf(outgoing);\r\n                    assertIsTrue(indexInGlobal >= 0);\r\n                    globalTransitions[lastPlaceholder] = outgoing;\r\n                    lastPlaceholder = indexInGlobal;\r\n                }\r\n            } else if (iAdjusting > iNew) {\r\n                // Shift left\r\n                for (let iOutgoing = iAdjusting - 1; iOutgoing >= iNew; --iOutgoing) {\r\n                    const outgoing = outgoings[iOutgoing];\r\n                    const indexInGlobal = globalTransitions.indexOf(outgoing);\r\n                    assertIsTrue(indexInGlobal >= 0);\r\n                    globalTransitions[lastPlaceholder] = outgoing;\r\n                    lastPlaceholder = indexInGlobal;\r\n                }\r\n            }\r\n            globalTransitions[lastPlaceholder] = adjusting;\r\n        }\r\n        // eslint-disable-next-line no-lone-blocks\r\n        { // 2. Adjust the order in outgoing array.\r\n            shift(outgoings, iAdjusting, iNew);\r\n        }\r\n    }\r\n\r\n    public copyTo (that: StateMachine): void {\r\n        // Clear that first\r\n        const thatStatesOld = that._states.filter((state) => {\r\n            switch (state) {\r\n            case that._entryState:\r\n            case that._exitState:\r\n            case that._anyState:\r\n                return true;\r\n            default:\r\n                return false;\r\n            }\r\n        });\r\n        for (const thatStateOld of thatStatesOld) {\r\n            that.remove(thatStateOld);\r\n        }\r\n\r\n        const stateMap = new Map<State, State>();\r\n        for (const state of this._states) {\r\n            switch (state) {\r\n            case this._entryState:\r\n                stateMap.set(state, that._entryState);\r\n                break;\r\n            case this._exitState:\r\n                stateMap.set(state, that._exitState);\r\n                break;\r\n            case this._anyState:\r\n                stateMap.set(state, that._anyState);\r\n                break;\r\n            default:\r\n                if (state instanceof MotionState\r\n                    || state instanceof SubStateMachine\r\n                    || state instanceof EmptyState\r\n                    || state instanceof ProceduralPoseState\r\n                ) {\r\n                    if (state instanceof EmptyState && !that._allowEmptyStates) {\r\n                        continue;\r\n                    }\r\n                    const thatState = instantiate(state);\r\n                    that._addState(thatState);\r\n                    stateMap.set(state, thatState);\r\n                } else {\r\n                    assertIsTrue(false);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (const transition of this._transitions) {\r\n            if (!that._allowEmptyStates) {\r\n                if (transition.from instanceof EmptyState || transition.to instanceof EmptyState) {\r\n                    continue;\r\n                }\r\n            }\r\n            const thatFrom = stateMap.get(transition.from);\r\n            const thatTo = stateMap.get(transition.to);\r\n            assertIsTrue(thatFrom && thatTo);\r\n            const thatTransition = that.connect(thatFrom, thatTo) as Transition;\r\n            thatTransition.conditions = transition.conditions.map((condition) => condition.clone());\r\n            if (thatTransition instanceof AnimationTransition) {\r\n                assertIsTrue(transition instanceof AnimationTransition);\r\n                transition.copyTo(thatTransition);\r\n            } else if (thatTransition instanceof EmptyStateTransition) {\r\n                assertIsTrue(transition instanceof EmptyStateTransition);\r\n                transition.copyTo(thatTransition);\r\n            } else if (thatTransition instanceof ProceduralPoseState) {\r\n                assertIsTrue(transition instanceof ProceduralPoseState);\r\n                transition.copyTo(thatTransition);\r\n            } else {\r\n                transition.copyTo(thatTransition);\r\n            }\r\n        }\r\n    }\r\n\r\n    public clone (): StateMachine {\r\n        const that = new StateMachine(this._allowEmptyStates);\r\n        this.copyTo(that);\r\n        return that;\r\n    }\r\n\r\n    private _addState<T extends State> (state: T): T {\r\n        own(state, this);\r\n        this._states.push(state);\r\n        return state;\r\n    }\r\n}\r\n\r\n@ccclass('cc.animation.SubStateMachine')\r\nexport class SubStateMachine extends InteractiveState {\r\n    constructor (allowEmptyStates?: boolean) {\r\n        super();\r\n        this._stateMachine = new StateMachine(allowEmptyStates);\r\n    }\r\n\r\n    get stateMachine (): StateMachine {\r\n        return this._stateMachine;\r\n    }\r\n\r\n    public copyTo (that: SubStateMachine): void {\r\n        super.copyTo(that);\r\n        this._stateMachine.copyTo(that._stateMachine);\r\n    }\r\n\r\n    @serializable\r\n    private _stateMachine: StateMachine;\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseGraphStash`)\r\nclass PoseGraphStash extends EditorExtendable {\r\n    @serializable\r\n    public graph = new PoseGraph();\r\n}\r\n\r\nexport { PoseGraphStash };\r\n\r\n@ccclass('cc.animation.Layer')\r\nexport class Layer implements OwnedBy<AnimationGraph> {\r\n    [ownerSymbol]: AnimationGraph | undefined;\r\n\r\n    @serializable\r\n    private _stateMachine: StateMachine;\r\n\r\n    @serializable\r\n    public name = '';\r\n\r\n    @serializable\r\n    public weight = 1.0;\r\n\r\n    @serializable\r\n    public mask: AnimationMask | null = null;\r\n\r\n    @serializable\r\n    public additive = false;\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    public __callOnAfterDeserializeRecursive (): void {\r\n        this.stateMachine._allowEmptyStates = true;\r\n        this.stateMachine.__callOnAfterDeserializeRecursive();\r\n        for (const stashId in this._stashes) {\r\n            const stash = this._stashes[stashId];\r\n            stash.graph.__callOnAfterDeserializeRecursive();\r\n        }\r\n    }\r\n\r\n    public stashes (): Iterable<Readonly<[string, PoseGraphStash]>> {\r\n        return Object.entries(this._stashes);\r\n    }\r\n\r\n    public getStash (id: string): PoseGraphStash | undefined {\r\n        return this._stashes[id];\r\n    }\r\n\r\n    public addStash (id: string): PoseGraphStash {\r\n        return this._stashes[id] = new PoseGraphStash();\r\n    }\r\n\r\n    public removeStash (id: string): void {\r\n        delete this._stashes[id];\r\n    }\r\n\r\n    public renameStash (id: string, newId: string): void {\r\n        this._stashes = renameObjectProperty(this._stashes, id, newId);\r\n    }\r\n\r\n    /**\r\n     * @marked_as_engine_private\r\n     */\r\n    constructor () {\r\n        this._stateMachine = new StateMachine(true);\r\n    }\r\n\r\n    get stateMachine (): StateMachine {\r\n        return this._stateMachine;\r\n    }\r\n\r\n    @serializable\r\n    private _stashes: Record<string, PoseGraphStash> = {};\r\n}\r\n\r\nexport enum LayerBlending {\r\n    override,\r\n    additive,\r\n}\r\n\r\n/**\r\n * @en\r\n * An opacity type which denotes what the animation graph seems like outside the engine.\r\n * @zh\r\n * 一个非透明的类型，它是动画图在引擎外部的表示。\r\n */\r\nexport interface AnimationGraphRunTime {\r\n    /**\r\n     * @internal\r\n     */\r\n    readonly __brand: 'AnimationGraph';\r\n}\r\n\r\n@ccclass('cc.animation.AnimationGraph')\r\nexport class AnimationGraph extends AnimationGraphLike implements AnimationGraphRunTime {\r\n    public declare readonly __brand: 'AnimationGraph';\r\n\r\n    @serializable\r\n    private _layers: Layer[] = [];\r\n\r\n    @serializable\r\n    private _variables: Record<string, VariableDescription> = {};\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    onLoaded (): void {\r\n        const { _layers: layers } = this;\r\n        const nLayers = layers.length;\r\n        for (let iLayer = 0; iLayer < nLayers; ++iLayer) {\r\n            layers[iLayer].__callOnAfterDeserializeRecursive();\r\n        }\r\n    }\r\n\r\n    get layers (): readonly Layer[] {\r\n        return this._layers;\r\n    }\r\n\r\n    get variables (): Iterable<[string, VariableDescription]> {\r\n        return Object.entries(this._variables);\r\n    }\r\n\r\n    /**\r\n     * Adds a layer.\r\n     * @returns The new layer.\r\n     */\r\n    public addLayer (): Layer {\r\n        const layer = new Layer();\r\n        this._layers.push(layer);\r\n        return layer;\r\n    }\r\n\r\n    /**\r\n     * Removes a layer.\r\n     * @param index Index to the layer to remove.\r\n     */\r\n    public removeLayer (index: number): void {\r\n        js.array.removeAt(this._layers, index);\r\n    }\r\n\r\n    /**\r\n     * Adjusts the layer's order.\r\n     * @param index\r\n     * @param newIndex\r\n     */\r\n    public moveLayer (index: number, newIndex: number): void {\r\n        shift(this._layers, index, newIndex);\r\n    }\r\n\r\n    /**\r\n     * Adds a variable into this graph.\r\n     * @param name The variable's name.\r\n     * @param type The variable's type.\r\n     * @param initialValue Initial value.\r\n     */\r\n    public addVariable<TVariableType extends VariableType> (\r\n        name: string, type: TVariableType, initialValue?: VariableTypeValueTypeMap[TVariableType],\r\n    ): VariableDescription {\r\n        const variable = createVariable(type, initialValue);\r\n        this._variables[name] = variable;\r\n        return variable;\r\n    }\r\n\r\n    public removeVariable (name: string): void {\r\n        delete this._variables[name];\r\n    }\r\n\r\n    public getVariable (name: string): VariableDescription | undefined {\r\n        return this._variables[name];\r\n    }\r\n\r\n    /**\r\n     * @zh 重命名一个变量。注意，所有对该变量的引用都不会修改。\r\n     * 如果变量的原始名称不存在或者新的名称已存在，此方法不会做任何事。\r\n     * 变量在图中的顺序会保持不变。\r\n     * @en Renames an variable. Note, this won't changes any reference to the variable.\r\n     * If the original name of the variable doesn't exists or\r\n     * the new name has already existed, this method won't do anything.\r\n     * The variable's order in the graph is also retained.\r\n     * @param name @zh 要重命名的变量的名字。 @en The name of the variable to be renamed.\r\n     * @param newName @zh 新的名字。 @en New name.\r\n     */\r\n    public renameVariable (name: string, newName: string): void {\r\n        this._variables = renameObjectProperty(this._variables, name, newName);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport const createEval = Symbol('[[createEval]]');\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Node } from '../../../scene-graph';\r\nimport { AnimationMask } from '../animation-mask';\r\nimport { createEval } from '../create-eval';\r\nimport type { BindContext } from '../parametric';\r\nimport type { BlendStateBuffer } from '../../../3d/skeletal-animation/skeletal-animation-blending';\r\nimport type { ClipStatus } from '../state-machine/state-machine-eval';\r\nimport type { ReadonlyClipOverrideMap } from '../clip-overriding';\r\nimport type { RuntimeID } from '../graph-debug';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext } from '../animation-graph-context';\r\nimport { Pose } from '../../core/pose';\r\nimport { EditorExtendable } from '../../../core';\r\nimport { ccclass } from '../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\n\r\nexport interface CreateClipEvalContext {\r\n    node: Node;\r\n\r\n    blendBuffer: BlendStateBuffer;\r\n\r\n    mask?: AnimationMask;\r\n}\r\n\r\nexport interface MotionEval {\r\n    /**\r\n     * The runtime ID. Maybe invalid.\r\n     */\r\n    readonly runtimeId?: RuntimeID;\r\n\r\n    /**\r\n     * The duration of this motion. If it's a clip motion.\r\n     * It should be $duration_{clip} / speed_{clip}$.\r\n     */\r\n    readonly duration: number;\r\n\r\n    getClipStatuses(baseWeight: number): Iterator<ClipStatus>;\r\n\r\n    overrideClips(context: AnimationGraphBindingContext): void;\r\n\r\n    createPort(): MotionPort;\r\n}\r\n\r\n// Note: the ccclass name mismatch\r\n// since we ever made a historical mistaken: take a look at `MotionState`'s class name...\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}MotionBase`)\r\nexport abstract class Motion extends EditorExtendable {\r\n    abstract [createEval] (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n    ): MotionEval | null;\r\n\r\n    abstract clone(): Motion;\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    __callOnAfterDeserializeRecursive (): void {\r\n        // Can be overrode in subclasses.\r\n    }\r\n}\r\n\r\nexport interface MotionPort {\r\n    evaluate(progress: number, context: AnimationGraphEvaluationContext): Pose;\r\n\r\n    reenter(): void;\r\n}\r\n","import { WrapModeMask } from '../core/geometry';\r\nimport { WrapMode, WrappedInfo } from './types';\r\n\r\nexport function wrap (\r\n    elapsedTime: number,\r\n    duration: number,\r\n    wrapMode: WrapMode,\r\n    repeatCount: number,\r\n    negativeSpeed: boolean,\r\n    info: WrappedInfo,\r\n): WrappedInfo {\r\n    if (duration === 0.0) {\r\n        info.time = 0.0;\r\n        info.ratio = 0.0;\r\n        info.direction = 1.0;\r\n        info.stopped = !!Number.isFinite(repeatCount);\r\n        info.iterations = 0.0;\r\n        return info;\r\n    }\r\n\r\n    let stopped = false;\r\n\r\n    let currentIterations = elapsedTime > 0 ? (elapsedTime / duration) : -(elapsedTime / duration);\r\n    if (currentIterations >= repeatCount) {\r\n        currentIterations = repeatCount;\r\n\r\n        stopped = true;\r\n        let tempRatio = repeatCount - (repeatCount | 0);\r\n        if (tempRatio === 0) {\r\n            tempRatio = 1;  // 如果播放过，动画不复位\r\n        }\r\n        elapsedTime = tempRatio * duration * (elapsedTime > 0 ? 1 : -1);\r\n    }\r\n\r\n    if (elapsedTime > duration) {\r\n        const tempTime = elapsedTime % duration;\r\n        elapsedTime = tempTime === 0 ? duration : tempTime;\r\n    } else if (elapsedTime < 0) {\r\n        elapsedTime %= duration;\r\n        if (elapsedTime !== 0) { elapsedTime += duration; }\r\n    }\r\n\r\n    let needReverse = false;\r\n    const shouldWrap = wrapMode & WrapModeMask.ShouldWrap;\r\n    if (shouldWrap) {\r\n        needReverse = isReverseIteration(wrapMode, currentIterations);\r\n    }\r\n\r\n    let direction = needReverse ? -1 : 1;\r\n    if (negativeSpeed) {\r\n        direction *= -1;\r\n    }\r\n\r\n    // calculate wrapped time\r\n    if (shouldWrap && needReverse) {\r\n        elapsedTime = duration - elapsedTime;\r\n    }\r\n\r\n    info.time = elapsedTime;\r\n    info.ratio = info.time / duration;\r\n    info.direction = direction;\r\n    info.stopped = stopped;\r\n    info.iterations = currentIterations;\r\n\r\n    return info;\r\n}\r\n\r\nfunction isReverseIteration (wrapMode: WrapMode, currentIterations: number): boolean {\r\n    let needReverse = false;\r\n    if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {\r\n        const isEnd = currentIterations - (currentIterations | 0) === 0;\r\n        if (isEnd && (currentIterations > 0)) {\r\n            currentIterations -= 1;\r\n        }\r\n        const isOddIteration = currentIterations & 1;\r\n        if (isOddIteration) {\r\n            needReverse = !needReverse;\r\n        }\r\n    }\r\n    if ((wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse) {\r\n        needReverse = !needReverse;\r\n    }\r\n    return needReverse;\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { error, Quat, RealCurve, Vec3, warnID } from '../../core';\r\nimport { assertIsTrue } from '../../core/data/utils/asserts';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { additiveSettingsTag, AnimationClip, exoticAnimationTag } from '../animation-clip';\r\nimport { AuxiliaryCurveEntry } from '../auxiliary-curve-entry';\r\nimport { AuxiliaryCurveHandle, TransformHandle } from '../core/animation-handle';\r\nimport { calculateDeltaPose, Pose } from '../core/pose';\r\nimport { createEvalSymbol } from '../define';\r\nimport { ExoticTrsAGEvaluation } from '../exotic-animation/exotic-animation';\r\nimport { isTrsPropertyName, normalizedFollowTag, RuntimeBinding, Track, TrackBinding, trackBindingTag, TrackEval } from '../tracks/track';\r\nimport { UntypedTrack } from '../tracks/untyped-track';\r\nimport { AnimationGraphEvaluationContext } from './animation-graph-context';\r\n\r\n/**\r\n * This module contains utilities to marry animation clip with animation graph.\r\n *\r\n * A typical workflow is:\r\n *\r\n * At initial, an animation clip is bound to animation graph in `AnimationClipGraphBindingContext`,\r\n * an `AnimationClipAGEvaluation` is created after this phase to track the evaluation.\r\n *\r\n * Then at each frame, `AnimationClipAGEvaluation.evaluate()` is called,\r\n * passed with the current `AnimationClipGraphEvaluationContext`.\r\n * The evaluation context gives the pose that need to be filled,\r\n * then animation clip emplaces sampled animation data into the pose.\r\n */\r\n\r\n/**\r\n * The context in which animation clips can be bound in an animation graph.\r\n */\r\nexport interface AnimationClipGraphBindingContext {\r\n    /**\r\n     * The root node. This should be the animation controller's host node.\r\n     */\r\n    origin: Node;\r\n\r\n    /**\r\n     * Binds a scene node transform into animation graph.\r\n     * @param path Path to the scene node from `origin`.\r\n     * @returns The transform handle if successfully bound, `null` otherwise.\r\n     */\r\n    bindTransform(path: string): TransformHandle | null;\r\n\r\n    /**\r\n     * Binds an auxiliary curve.\r\n     * @param curveName Curve name.\r\n     */\r\n    bindAuxiliaryCurve(curveName: string): AuxiliaryCurveHandle;\r\n}\r\n\r\n/**\r\n * The context in which animation clips can evaluate during animation graph evaluation.\r\n * Currently, the context is just the output pose.\r\n */\r\nexport type AnimationClipGraphEvaluationContext = Pose;\r\n\r\n/**\r\n * A pose binding describes how to get/set part of a bound transform in animation graph.\r\n * The `T` can be `Vec3`, `Quat` for now.\r\n */\r\nexport interface PoseBinding<T> {\r\n    /**\r\n     * Destroys this binding.\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * Sets the part's value.\r\n     * @param value The value.\r\n     * @param pose The pose.\r\n     */\r\n    setValue(value: T, pose: Pose): void;\r\n\r\n    /**\r\n     * Reads the part's value.\r\n     * @param pose The pose.\r\n     */\r\n    getValue(pose: Pose): Readonly<T>;\r\n}\r\n\r\nconst CACHE_VEC3_GET_VALUE = new Vec3();\r\n\r\nconst CACHE_QUAT_GET_VALUE = new Quat();\r\n\r\n/**\r\n * The pose binding base is base class of all pose binding classes.\r\n * It holds a transform handle.\r\n */\r\nclass PoseBindingBase {\r\n    constructor (transformHandle: TransformHandle) {\r\n        this._transformHandle = transformHandle;\r\n    }\r\n\r\n    /**\r\n     * Releases the held transform handle.\r\n     */\r\n    public destroy (): void {\r\n        this._transformHandle.destroy();\r\n    }\r\n\r\n    /**\r\n     * The held transform handle.\r\n     */\r\n    protected declare readonly _transformHandle: TransformHandle;\r\n}\r\n\r\n/**\r\n * The pose position binding describes how to get/set the position of a bound transform in animation graph.\r\n */\r\nclass PosePositionBinding extends PoseBindingBase implements PoseBinding<Vec3> {\r\n    public setValue (value: Vec3, pose: Pose): void {\r\n        pose.transforms.setPosition(this._transformHandle.index, value);\r\n    }\r\n\r\n    public getValue (pose: Pose): Readonly<Vec3> {\r\n        return pose.transforms.getPosition(this._transformHandle.index, CACHE_VEC3_GET_VALUE) as Readonly<Vec3>;\r\n    }\r\n}\r\n\r\n/**\r\n * The pose rotation binding describes how to get/set the rotation(in quaternion) of a bound transform in animation graph.\r\n */\r\nclass PoseRotationBinding extends PoseBindingBase implements PoseBinding<Quat> {\r\n    public setValue (value: Quat, pose: Pose): void {\r\n        pose.transforms.setRotation(this._transformHandle.index, value);\r\n    }\r\n\r\n    public getValue (pose: Pose): Readonly<Quat> {\r\n        return pose.transforms.getRotation(this._transformHandle.index, CACHE_QUAT_GET_VALUE) as Readonly<Quat>;\r\n    }\r\n}\r\n\r\n/**\r\n * The pose euler angles binding describes how to get/set the rotation(in euler angles) of a bound transform in animation graph.\r\n */\r\nclass PoseEulerAnglesBinding extends PoseBindingBase implements PoseBinding<Vec3> {\r\n    public setValue (value: Vec3, pose: Pose): void {\r\n        const quat = Quat.fromEuler(PoseEulerAnglesBinding._EULER_TO_QUAT_CACHE, value.x, value.y, value.z);\r\n        pose.transforms.setRotation(this._transformHandle.index, quat);\r\n    }\r\n\r\n    public getValue (pose: Pose): Readonly<Vec3> {\r\n        const q = pose.transforms.getRotation(this._transformHandle.index, CACHE_QUAT_GET_VALUE) as Readonly<Quat>;\r\n        return Quat.toEuler(CACHE_VEC3_GET_VALUE, q) as Readonly<Vec3>;\r\n    }\r\n\r\n    private static _EULER_TO_QUAT_CACHE = new Quat();\r\n}\r\n\r\n/**\r\n * The pose euler scale binding describes how to get/set the scale of a bound transform in animation graph.\r\n */\r\nclass PoseScaleBinding extends PoseBindingBase implements PoseBinding<Vec3> {\r\n    public setValue (value: Vec3, pose: Pose): void {\r\n        pose.transforms.setScale(this._transformHandle.index, value);\r\n    }\r\n\r\n    public getValue (pose: Pose): Readonly<Vec3> {\r\n        return pose.transforms.getScale(this._transformHandle.index, CACHE_VEC3_GET_VALUE) as Readonly<Vec3>;\r\n    }\r\n}\r\n\r\nclass AuxiliaryCurveBinding implements PoseBinding<number> {\r\n    constructor (private _handle: AuxiliaryCurveHandle) {\r\n\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._handle.destroy();\r\n    }\r\n\r\n    public setValue (value: number, pose: Pose): void {\r\n        pose.auxiliaryCurves[this._handle.index] = value;\r\n    }\r\n\r\n    public getValue (pose: Pose): number {\r\n        return pose.auxiliaryCurves[this._handle.index];\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a corresponding pose binding.\r\n * @param transformHandle Handle to the transform.\r\n * @param propertyKey Indicates the binding type.\r\n * @returns The pose binding.\r\n */\r\n// eslint-disable-next-line consistent-return\r\nfunction bindPoseTransform (\r\n    transformHandle: TransformHandle,\r\n    propertyKey: 'position' | 'rotation' | 'scale' | 'eulerAngles',\r\n): PoseBinding<unknown> {\r\n    switch (propertyKey) {\r\n    case 'position':\r\n        return new PosePositionBinding(transformHandle);\r\n    case 'rotation':\r\n        return new PoseRotationBinding(transformHandle);\r\n    case 'eulerAngles':\r\n        return new PoseEulerAnglesBinding(transformHandle);\r\n    case 'scale':\r\n        return new PoseScaleBinding(transformHandle);\r\n    default:\r\n        assertIsTrue(false);\r\n    }\r\n}\r\n\r\nclass NonTransformPoseBinding implements PoseBinding<any> {\r\n    constructor (\r\n        public readonly binding: RuntimeBinding,\r\n    ) {\r\n\r\n    }\r\n\r\n    destroy (): void {\r\n        // Needs no destroy.\r\n    }\r\n\r\n    setValue (value: any, _pose: Pose): void {\r\n        this.binding.setValue(value);\r\n    }\r\n\r\n    getValue (pose: Pose): any {\r\n        return this.binding.getValue?.() ?? undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Describes the evaluation of a animation clip track in sense of animation graph.\r\n */\r\nclass AGTrackEvaluation<TValue> {\r\n    constructor (binding: PoseBinding<TValue>, trackEvaluation: TrackEval<TValue>) {\r\n        this._binding = binding;\r\n        this._trackSampler = trackEvaluation;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._binding.destroy();\r\n    }\r\n\r\n    public evaluate (time: number, pose: Pose): void {\r\n        const { _trackSampler: trackSampler, _binding: binding  } = this;\r\n        const defaultValue = /* binding.getValue && */trackSampler.requiresDefault\r\n            ? binding.getValue(pose) as TValue extends unknown ? unknown : TValue\r\n            : undefined;\r\n        const value = trackSampler.evaluate(time, defaultValue);\r\n        binding.setValue(value, pose);\r\n    }\r\n\r\n    private _binding: PoseBinding<TValue>;\r\n    private _trackSampler: TrackEval<TValue>;\r\n}\r\n\r\nfunction bindTrackAG (\r\n    animationClip: AnimationClip,\r\n    track: Track,\r\n    bindContext: AnimationClipGraphBindingContext,\r\n): PoseBinding<unknown> | undefined {\r\n    const trackBinding = track[trackBindingTag];\r\n    const trackTarget = createRuntimeBindingAG(trackBinding, bindContext);\r\n    if (DEBUG && !trackTarget) {\r\n        // If we got a null track target here, we should already have warn logged,\r\n        // To elaborate on error details, we warn here as well.\r\n        // Note: if in the future this log appears alone,\r\n        // it must be a BUG which break promise by above statement.\r\n        warnID(\r\n            3937,\r\n            animationClip.name,\r\n            bindContext.origin.name,\r\n        );\r\n    }\r\n    return trackTarget ?? undefined;\r\n}\r\n\r\nfunction createRuntimeBindingAG (\r\n    track: TrackBinding,\r\n    bindContext: AnimationClipGraphBindingContext,\r\n): PoseBinding<unknown> | null | undefined {\r\n    const {\r\n        origin,\r\n    } = bindContext;\r\n    const { path, proxy } = track;\r\n\r\n    const nPaths = path.length;\r\n    const iLastPath = nPaths - 1;\r\n\r\n    if (nPaths !== 0 && (path.isPropertyAt(iLastPath) || path.isElementAt(iLastPath)) && !proxy) {\r\n        const lastPropertyKey = path.isPropertyAt(iLastPath)\r\n            ? path.parsePropertyAt(iLastPath)\r\n            : path.parseElementAt(iLastPath);\r\n        const resultTarget = path[normalizedFollowTag](origin, 0, nPaths - 1);\r\n        if (resultTarget === null) {\r\n            return null;\r\n        }\r\n\r\n        if (resultTarget instanceof Node && isTrsPropertyName(lastPropertyKey)) {\r\n            const transformPath = ((): string | undefined => {\r\n                const segments = [] as string[];\r\n                let node: Node | null = resultTarget;\r\n                for (; node && node !== origin; node = node.parent) {\r\n                    segments.unshift(node.name);\r\n                }\r\n                if (node === origin) {\r\n                    return segments.join('/');\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            })();\r\n            if (typeof transformPath === 'string') {\r\n                const transformHandle = bindContext.bindTransform(transformPath);\r\n                if (!transformHandle) {\r\n                    return undefined;\r\n                }\r\n                return bindPoseTransform(transformHandle, lastPropertyKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    // If this path does not aim a transform target,\r\n    // we create `NonTransformPoseBinding` using default binding.\r\n    {\r\n        const nonTransformBinding = track.createRuntimeBinding(bindContext.origin, undefined, false);\r\n        if (!nonTransformBinding) {\r\n            return null;\r\n        }\r\n\r\n        return new NonTransformPoseBinding(nonTransformBinding);\r\n    }\r\n}\r\n\r\nclass AuxiliaryCurveEvaluation {\r\n    constructor (private _binding: AuxiliaryCurveBinding, private _curve: RealCurve) {\r\n    }\r\n\r\n    /**\r\n     * Evaluates.\r\n     * @param time The time.\r\n     * @param context The evaluation context.\r\n     */\r\n    public evaluate (time: number, context: AnimationClipGraphEvaluationContext): void {\r\n        const {\r\n            _curve: curve,\r\n            _binding: binding,\r\n        } = this;\r\n        const pose = context;\r\n\r\n        const value = curve.evaluate(time);\r\n        binding.setValue(value, pose);\r\n    }\r\n}\r\n\r\n/**\r\n * Describes the evaluation of a animation clip in sense of animation graph.\r\n */\r\nexport interface AnimationClipAGEvaluation {\r\n    /**\r\n     * Destroys all the track evaluations and exotic animation evaluation.\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * Evaluates.\r\n     * @param time The time.\r\n     * @param context The evaluation context.\r\n     */\r\n    evaluate(time: number, context: AnimationGraphEvaluationContext): Pose;\r\n}\r\n\r\nexport function createAnimationAGEvaluation (\r\n    clip: AnimationClip,\r\n    context: AnimationClipGraphBindingContext,\r\n): AnimationClipAGEvaluation {\r\n    if (clip.isAdditive_experimental) {\r\n        return new AnimationClipAGEvaluationAdditive(clip, context);\r\n    } else {\r\n        return new AnimationClipAGEvaluationRegular(clip, context);\r\n    }\r\n}\r\n\r\nclass AnimationClipAGEvaluationRegular implements AnimationClipAGEvaluation {\r\n    constructor (\r\n        clip: AnimationClip,\r\n        context: AnimationClipGraphBindingContext,\r\n    ) {\r\n        clip._trySyncLegacyData();\r\n\r\n        const trackEvaluations: AGTrackEvaluation<unknown>[] = [];\r\n        let exoticAnimationEvaluation: ExoticTrsAGEvaluation | undefined;\r\n        const auxiliaryCurveEvaluations: AuxiliaryCurveEvaluation[] = [];\r\n\r\n        const {\r\n            tracks,\r\n            // NOTE: on OH platform, there is a bug on Destructuring Assignment syntax.\r\n            // [exoticAnimationTag]: exoticAnimation,\r\n        } = clip;\r\n        const exoticAnimation = clip[exoticAnimationTag];\r\n\r\n        for (const track of tracks) {\r\n            if (track instanceof UntypedTrack) {\r\n                // Untyped track is not supported in AG.\r\n                continue;\r\n            }\r\n            if (Array.from(track.channels()).every(({ curve }) => curve.keyFramesCount === 0)) {\r\n                continue;\r\n            }\r\n            const trackRuntimeBinding = bindTrackAG(clip, track, context);\r\n            if (!trackRuntimeBinding) {\r\n                continue;\r\n            }\r\n            const trackSampler = track[createEvalSymbol]();\r\n            const trackEvaluation = new AGTrackEvaluation(trackRuntimeBinding, trackSampler);\r\n            trackEvaluations.push(trackEvaluation);\r\n        }\r\n\r\n        if (exoticAnimation) {\r\n            exoticAnimationEvaluation = exoticAnimation.createEvaluatorForAnimationGraph(context);\r\n        }\r\n\r\n        const auxiliaryCurveNames = clip.getAuxiliaryCurveNames_experimental();\r\n        const nAuxiliaryCurves = auxiliaryCurveNames.length;\r\n        for (let iAuxiliaryCurve = 0; iAuxiliaryCurve < nAuxiliaryCurves; ++iAuxiliaryCurve) {\r\n            const curveName = auxiliaryCurveNames[iAuxiliaryCurve];\r\n            const curve = clip.getAuxiliaryCurve_experimental(curveName);\r\n            const handle = context.bindAuxiliaryCurve(curveName);\r\n            const binding = new AuxiliaryCurveBinding(handle);\r\n            auxiliaryCurveEvaluations.push(new AuxiliaryCurveEvaluation(\r\n                binding,\r\n                curve,\r\n            ));\r\n        }\r\n\r\n        this._trackEvaluations = trackEvaluations;\r\n        this._exoticAnimationEvaluation = exoticAnimationEvaluation;\r\n        this._auxiliaryCurveEvaluations = auxiliaryCurveEvaluations;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._exoticAnimationEvaluation?.destroy();\r\n\r\n        const {\r\n            _trackEvaluations: trackEvaluations,\r\n        } = this;\r\n        const nTrackEvaluations = trackEvaluations.length;\r\n        for (let iNodeEvaluation = 0; iNodeEvaluation < nTrackEvaluations; ++iNodeEvaluation) {\r\n            trackEvaluations[iNodeEvaluation].destroy();\r\n        }\r\n    }\r\n\r\n    public evaluate (time: number, context: AnimationGraphEvaluationContext): Pose {\r\n        const {\r\n            _trackEvaluations: trackEvaluations,\r\n            _exoticAnimationEvaluation: exoticAnimationEvaluation,\r\n            _auxiliaryCurveEvaluations: auxiliaryCurveEvaluations,\r\n        } = this;\r\n\r\n        const pose = context.pushDefaultedPose();\r\n\r\n        const nTrackEvaluations = trackEvaluations.length;\r\n        for (let iNodeEvaluation = 0; iNodeEvaluation < nTrackEvaluations; ++iNodeEvaluation) {\r\n            trackEvaluations[iNodeEvaluation].evaluate(time, pose);\r\n        }\r\n\r\n        if (exoticAnimationEvaluation) {\r\n            exoticAnimationEvaluation.evaluate(time, pose);\r\n        }\r\n\r\n        const nAuxiliaryCurveEvaluations = auxiliaryCurveEvaluations.length;\r\n        for (let iAuxiliaryCurveEvaluation = 0; iAuxiliaryCurveEvaluation < nAuxiliaryCurveEvaluations; ++iAuxiliaryCurveEvaluation) {\r\n            auxiliaryCurveEvaluations[iAuxiliaryCurveEvaluation].evaluate(time, pose);\r\n        }\r\n\r\n        return pose;\r\n    }\r\n\r\n    private _trackEvaluations: AGTrackEvaluation<any>[] = [];\r\n\r\n    private _exoticAnimationEvaluation: ExoticTrsAGEvaluation | undefined;\r\n\r\n    private _auxiliaryCurveEvaluations: AuxiliaryCurveEvaluation[] = [];\r\n}\r\n\r\nclass AnimationClipAGEvaluationAdditive implements AnimationClipAGEvaluation {\r\n    constructor (\r\n        clip: AnimationClip,\r\n        context: AnimationClipGraphBindingContext,\r\n    ) {\r\n        this._clipEval = new AnimationClipAGEvaluationRegular(clip, context);\r\n        const refClip = clip[additiveSettingsTag].refClip;\r\n        if (refClip && refClip !== clip) {\r\n            this._refClipEval = new AnimationClipAGEvaluationRegular(refClip, context);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._clipEval.destroy();\r\n        this._refClipEval?.destroy();\r\n    }\r\n\r\n    /**\r\n     * Evaluates.\r\n     * @param time The time.\r\n     * @param context The evaluation context.\r\n     */\r\n    public evaluate (time: number, context: AnimationGraphEvaluationContext): Pose {\r\n        // Evaluate this clip.\r\n        const pose = this._clipEval.evaluate(time, context);\r\n\r\n        let refPose: Pose;\r\n        if (this._refClipEval) {\r\n            const refClipTime = 0.0; // TODO: ref clip may specify a time?\r\n            refPose = this._refClipEval.evaluate(refClipTime, context);\r\n        } else {\r\n            // If the ref clip is not specified,\r\n            // The effect is as if the ref pose is the 0 time of original clip.\r\n            refPose = this._clipEval.evaluate(0.0, context);\r\n        }\r\n        calculateDeltaPose(pose, refPose);\r\n        context.popPose();\r\n\r\n        return pose;\r\n    }\r\n\r\n    private _clipEval: AnimationClipAGEvaluationRegular;\r\n    private _refClipEval: AnimationClipAGEvaluationRegular | undefined;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { editorExtrasTag, _decorator, EditorExtendable, editable, serializable } from '../../../core';\r\nimport { additiveSettingsTag, AnimationClip } from '../../animation-clip';\r\nimport { cloneAnimationGraphEditorExtrasFrom } from '../animation-graph-editor-extras-clone-helper';\r\nimport { createEval } from '../create-eval';\r\nimport { getMotionRuntimeID, RUNTIME_ID_ENABLED } from '../graph-debug';\r\nimport type { ClipStatus } from '../state-machine/state-machine-eval';\r\nimport type { ReadonlyClipOverrideMap } from '../clip-overriding';\r\nimport { Motion, MotionEval, MotionPort } from './motion';\r\nimport { wrap } from '../../wrap';\r\nimport { Pose } from '../../core/pose';\r\nimport { AnimationGraphEvaluationContext, AnimationGraphBindingContext } from '../animation-graph-context';\r\nimport { WrappedInfo } from '../../types';\r\nimport { WrapModeMask } from '../../../core/geometry';\r\nimport { AnimationClipAGEvaluation, createAnimationAGEvaluation } from '../animation-graph-animation-clip-binding';\r\n\r\nconst { ccclass, type } = _decorator;\r\n\r\n@ccclass('cc.animation.ClipMotion')\r\nexport class ClipMotion extends Motion {\r\n    @type(AnimationClip)\r\n    @editable\r\n    @serializable\r\n    public clip: AnimationClip | null = null;\r\n\r\n    public [createEval] (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n    ): ClipMotionEval | null {\r\n        if (!this.clip) {\r\n            return null;\r\n        }\r\n        const clipMotionEval = new ClipMotionEval(context, this.clip, ignoreEmbeddedPlayers);\r\n        if (RUNTIME_ID_ENABLED) {\r\n            clipMotionEval.runtimeId = getMotionRuntimeID(this);\r\n        }\r\n        return clipMotionEval;\r\n    }\r\n\r\n    public clone (): ClipMotion {\r\n        const that = new ClipMotion();\r\n        that.clip = this.clip;\r\n        that[editorExtrasTag] = cloneAnimationGraphEditorExtrasFrom(this);\r\n        return that;\r\n    }\r\n}\r\n\r\nconst evaluatePortTag = Symbol('EvaluatePort');\r\n\r\nclass ClipMotionEval implements MotionEval {\r\n    /**\r\n     * @internal\r\n     */\r\n    public declare __DEBUG__ID__?: string;\r\n\r\n    public declare runtimeId?: number;\r\n\r\n    constructor (\r\n        context: AnimationGraphBindingContext,\r\n        clip: AnimationClip,\r\n        ignoreEmbeddedPlayers: boolean,\r\n    ) {\r\n        this._originalClip = clip;\r\n        this._ignoreEmbeddedPlayers = ignoreEmbeddedPlayers;\r\n        const overriding = context.clipOverrides?.get(clip) ?? clip;\r\n        this._setClip(overriding, context);\r\n    }\r\n\r\n    get duration (): number {\r\n        return this._duration;\r\n    }\r\n\r\n    public createPort (): MotionPort {\r\n        return new ClipMotionPort(this);\r\n    }\r\n\r\n    public getClipStatuses (baseWeight: number): Iterator<ClipStatus> {\r\n        let got = false;\r\n        return {\r\n            next: (): IteratorResult<ClipStatus, any> => {\r\n                if (got) {\r\n                    return {\r\n                        done: true,\r\n                        value: undefined,\r\n                    };\r\n                } else {\r\n                    got = true;\r\n                    return {\r\n                        done: false,\r\n                        // TODO: `__DEBUG_ID__` does not exist on ClipStatus, please fix it @Leslie Leigh\r\n                        // tracking issue: https://github.com/cocos/cocos-engine/issues/15307\r\n                        value: {\r\n                            __DEBUG_ID__: this.__DEBUG__ID__,\r\n                            clip: this._clip,\r\n                            weight: baseWeight,\r\n                        } as any,\r\n                    };\r\n                }\r\n            },\r\n        };\r\n    }\r\n\r\n    public [evaluatePortTag] (progress: number, context: AnimationGraphEvaluationContext): Pose {\r\n        const {\r\n            _duration: duration,\r\n            _clip: { duration: clipDuration },\r\n            _clipEval: clipEval,\r\n        } = this;\r\n\r\n        const elapsedTime = duration * progress;\r\n\r\n        const { wrapMode } = this._clip;\r\n        const repeatCount = (wrapMode & WrapModeMask.Loop) === WrapModeMask.Loop\r\n            ? Infinity : 1;\r\n        const wrapInfo = wrap(\r\n            elapsedTime,\r\n            duration,\r\n            wrapMode,\r\n            repeatCount,\r\n            false,\r\n            this._wrapInfo,\r\n        );\r\n\r\n        // Transform the motion space time(scaled by clip speed) into clip space time.\r\n        const clipTime = wrapInfo.ratio * clipDuration;\r\n\r\n        const pose = clipEval.evaluate(clipTime, context);\r\n\r\n        // Sample frame events.\r\n        this._frameEventEval?.sample(wrapInfo.ratio, wrapInfo.direction, wrapInfo.iterations);\r\n\r\n        // Evaluate embedded players.\r\n        this._clipEmbeddedPlayerEval?.evaluate(clipTime, Math.trunc(wrapInfo.iterations));\r\n\r\n        return pose;\r\n    }\r\n\r\n    public overrideClips (context: AnimationGraphBindingContext): void {\r\n        const { _originalClip: originalClip } = this;\r\n        const overriding = context.clipOverrides?.get(originalClip);\r\n        if (overriding) {\r\n            this._setClip(overriding, context);\r\n        }\r\n    }\r\n\r\n    public reenter (): void {\r\n        this._frameEventEval?.reset();\r\n    }\r\n\r\n    /**\r\n     * Preserved here for clip overriding.\r\n     */\r\n    private declare _originalClip: AnimationClip;\r\n    /**\r\n     * Actual clip used. Will be equal to `this._originalClip` if not being override.\r\n     */\r\n    private declare _clip: AnimationClip;\r\n    private declare _clipEval: AnimationClipAGEvaluation;\r\n    private _clipEmbeddedPlayerEval: ReturnType<AnimationClip['createEmbeddedPlayerEvaluator']> | null = null;\r\n    private _frameEventEval: ReturnType<AnimationClip['createEventEvaluator']> | null = null;\r\n    private _wrapInfo = new WrappedInfo();\r\n    private _duration = 0.0;\r\n    private _ignoreEmbeddedPlayers: boolean;\r\n\r\n    private _setClip (clip: AnimationClip, context: AnimationGraphBindingContext): void {\r\n        this._clipEval?.destroy();\r\n        this._frameEventEval = null;\r\n        if (this._clipEmbeddedPlayerEval) {\r\n            this._clipEmbeddedPlayerEval.destroy();\r\n            this._clipEmbeddedPlayerEval = null;\r\n        }\r\n\r\n        this._clip = clip;\r\n        this._duration = clip.speed === 0.0\r\n            ? 0.0\r\n            : clip.duration / clip.speed; // TODO, a test for `clip.speed === 0` is required!\r\n        this._clipEval = createAnimationAGEvaluation(clip, context);\r\n        this._frameEventEval = clip.createEventEvaluator(context.origin);\r\n        if (!this._ignoreEmbeddedPlayers && clip.containsAnyEmbeddedPlayer()) {\r\n            this._clipEmbeddedPlayerEval = clip.createEmbeddedPlayerEvaluator(context.origin);\r\n        }\r\n    }\r\n}\r\n\r\nclass ClipMotionPort implements MotionPort {\r\n    constructor (host: ClipMotionEval) {\r\n        this._eval = host;\r\n    }\r\n\r\n    public evaluate (progress: number, context: AnimationGraphEvaluationContext): Pose {\r\n        return this._eval[evaluatePortTag](progress, context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this._eval.reenter();\r\n    }\r\n\r\n    private _eval: ClipMotionEval;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { _decorator, EditorExtendable, editorExtrasTag } from '../../../core';\r\nimport { Motion, MotionEval, MotionPort } from './motion';\r\nimport { createEval } from '../create-eval';\r\nimport { VariableTypeMismatchedError } from '../errors';\r\nimport { ClipStatus } from '../state-machine/state-machine-eval';\r\n\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport { getMotionRuntimeID, RUNTIME_ID_ENABLED } from '../graph-debug';\r\nimport { cloneAnimationGraphEditorExtrasFrom } from '../animation-graph-editor-extras-clone-helper';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext } from '../animation-graph-context';\r\nimport { blendPoseInto, Pose } from '../../core/pose';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationBlendItem`)\r\nexport class AnimationBlendItem {\r\n    @serializable\r\n    public motion: Motion | null = null;\r\n\r\n    public clone (): AnimationBlendItem {\r\n        const that = new AnimationBlendItem();\r\n        this._copyTo(that);\r\n        return that;\r\n    }\r\n\r\n    protected _copyTo (that: AnimationBlendItem): AnimationBlendItem {\r\n        that.motion = this.motion?.clone() ?? null;\r\n        return that;\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationBlend`)\r\nexport abstract class AnimationBlend extends Motion {\r\n    @serializable\r\n    name = '';\r\n\r\n    public copyTo (that: AnimationBlend): void {\r\n        that.name = this.name;\r\n        that[editorExtrasTag] = cloneAnimationGraphEditorExtrasFrom(this);\r\n    }\r\n}\r\n\r\nexport abstract class AnimationBlendEval implements MotionEval {\r\n    public declare runtimeId?: number;\r\n\r\n    private declare _childEvaluators: (MotionEval | null)[];\r\n    private declare _weights: number[];\r\n    private declare _inputs: number[];\r\n\r\n    constructor (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n        base: AnimationBlend,\r\n        children: AnimationBlendItem[],\r\n        inputs: number[],\r\n    ) {\r\n        this._childEvaluators = children.map((child) => child.motion?.[createEval](context, ignoreEmbeddedPlayers) ?? null);\r\n        this._weights = new Array(this._childEvaluators.length).fill(0);\r\n        this._inputs = [...inputs];\r\n        if (RUNTIME_ID_ENABLED) {\r\n            this.runtimeId = getMotionRuntimeID(base);\r\n        }\r\n    }\r\n\r\n    public createPort (): MotionPort {\r\n        return new AnimationBlendPort(\r\n            this,\r\n            this._childEvaluators.map((childEval) => childEval?.createPort() ?? null),\r\n        );\r\n    }\r\n\r\n    get childCount (): number {\r\n        return this._weights.length;\r\n    }\r\n\r\n    public getChildWeight (childIndex: number): number {\r\n        return this._weights[childIndex];\r\n    }\r\n\r\n    public getChildMotionEval (childIndex: number): MotionEval | null {\r\n        return this._childEvaluators[childIndex];\r\n    }\r\n\r\n    get duration (): number {\r\n        let uniformDuration = 0.0;\r\n        for (let iChild = 0; iChild < this._childEvaluators.length; ++iChild) {\r\n            uniformDuration += (this._childEvaluators[iChild]?.duration ?? 0.0) * this._weights[iChild];\r\n        }\r\n        return uniformDuration;\r\n    }\r\n\r\n    public getClipStatuses (baseWeight: number): Iterator<ClipStatus, any, undefined> {\r\n        const { _childEvaluators: children, _weights: weights } = this;\r\n        const nChildren = children.length;\r\n        let iChild = 0;\r\n        let currentChildIterator: Iterator<ClipStatus> | undefined;\r\n        return {\r\n            next (): IteratorResult<ClipStatus, any> {\r\n                // eslint-disable-next-line no-constant-condition\r\n                while (true) {\r\n                    if (currentChildIterator) {\r\n                        const result = currentChildIterator.next();\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    }\r\n                    if (iChild >= nChildren) {\r\n                        return { done: true, value: undefined };\r\n                    } else {\r\n                        const child = children[iChild];\r\n                        currentChildIterator = child?.getClipStatuses(baseWeight * weights[iChild]);\r\n                        ++iChild;\r\n                    }\r\n                }\r\n            },\r\n        };\r\n    }\r\n\r\n    public __evaluatePort (port: AnimationBlendPort, progress: number, context: AnimationGraphEvaluationContext): Pose {\r\n        const nChild = this._childEvaluators.length;\r\n        let sumWeight = 0.0;\r\n        let finalPose: Pose | null = null;\r\n        for (let iChild = 0; iChild < nChild; ++iChild) {\r\n            const childWeight = this._weights[iChild];\r\n            if (!childWeight) {\r\n                continue;\r\n            }\r\n            const childOutput = port.childPorts[iChild]?.evaluate(progress, context);\r\n            if (!childOutput) {\r\n                continue;\r\n            }\r\n            sumWeight += childWeight;\r\n            if (!finalPose) {\r\n                finalPose = childOutput;\r\n            } else {\r\n                if (sumWeight) {\r\n                    const t = childWeight / sumWeight;\r\n                    blendPoseInto(finalPose, childOutput, t);\r\n                }\r\n                context.popPose();\r\n            }\r\n        }\r\n        if (finalPose) {\r\n            return finalPose;\r\n        }\r\n        return context.pushDefaultedPose();\r\n    }\r\n\r\n    public overrideClips (context: AnimationGraphBindingContext): void {\r\n        for (let iChild = 0; iChild < this._childEvaluators.length; ++iChild) {\r\n            this._childEvaluators[iChild]?.overrideClips(context);\r\n        }\r\n    }\r\n\r\n    public setInput (value: number, index: number): void {\r\n        this._inputs[index] = value;\r\n        this.doEval();\r\n    }\r\n\r\n    protected doEval (): void {\r\n        this.eval(this._weights, this._inputs);\r\n    }\r\n\r\n    protected abstract eval (_weights: number[], _inputs: readonly number[]): void;\r\n}\r\n\r\nclass AnimationBlendPort implements MotionPort {\r\n    constructor (host: AnimationBlendEval, childPorts: readonly (MotionPort | null)[]) {\r\n        this._host = host;\r\n        this.childPorts = childPorts;\r\n    }\r\n\r\n    public childPorts: readonly (MotionPort | null)[] = [];\r\n\r\n    public evaluate (progress: number, context: AnimationGraphEvaluationContext): Pose {\r\n        return this._host.__evaluatePort(this, progress, context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        const { childPorts } = this;\r\n        const nChildPorts = childPorts.length;\r\n        for (let iChild = 0; iChild < nChildPorts; ++iChild) {\r\n            childPorts[iChild]?.reenter();\r\n        }\r\n    }\r\n\r\n    private _host: AnimationBlendEval;\r\n}\r\n\r\nexport function validateBlendParam (val: unknown, name: string): asserts val is number {\r\n    if (typeof val !== 'number') {\r\n        // TODO var name?\r\n        throw new VariableTypeMismatchedError(name, 'number');\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { _decorator } from '../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\nimport { AnimationGraphBindingContext } from './animation-graph-context';\r\nimport { VariableNotDefinedError, VariableTypeMismatchedError } from './errors';\r\nimport type { VarInstance } from './graph-eval';\r\nimport { VariableType } from './variable';\r\n\r\nexport { VariableType };\r\n\r\nexport interface Bindable<TValue> {\r\n    value: TValue;\r\n\r\n    variable: string;\r\n\r\n    clone(): Bindable<TValue>;\r\n}\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}BindableNumber`)\r\nexport class BindableNumber implements Bindable<number> {\r\n    @serializable\r\n    public variable = '';\r\n\r\n    @serializable\r\n    public value = 0.0;\r\n\r\n    constructor (value = 0.0) {\r\n        this.value = value;\r\n    }\r\n\r\n    public clone (): Bindable<number> {\r\n        const that = new BindableNumber();\r\n        that.value = this.value;\r\n        that.variable = this.variable;\r\n        return that;\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}BindableBoolean`)\r\nexport class BindableBoolean implements Bindable<boolean> {\r\n    @serializable\r\n    public variable = '';\r\n\r\n    @serializable\r\n    public value = false;\r\n\r\n    constructor (value = false) {\r\n        this.value = value;\r\n    }\r\n\r\n    public clone (): Bindable<boolean> {\r\n        const that = new BindableBoolean();\r\n        that.value = this.value;\r\n        that.variable = this.variable;\r\n        return that;\r\n    }\r\n}\r\n\r\nexport type BindCallback<TValue, TThis, TArgs extends any[]> =\r\n    (this: TThis, value: TValue, ...args: TArgs) => void;\r\n\r\nexport type VariableTypeValidator = () => void;\r\n\r\nexport type BindContext = AnimationGraphBindingContext;\r\n\r\nexport function bindOr<TValue, TThis, TArgs extends any[]> (\r\n    context: BindContext,\r\n    bindable: Bindable<TValue>,\r\n    type: VariableType,\r\n    callback: BindCallback<TValue, TThis, TArgs>,\r\n    thisArg: TThis,\r\n    ...args: TArgs\r\n): TValue {\r\n    const {\r\n        variable,\r\n        value,\r\n    } = bindable;\r\n\r\n    if (!variable) {\r\n        return value;\r\n    }\r\n\r\n    const varInstance = context.getVar(variable);\r\n    if (!validateVariableExistence(varInstance, variable)) {\r\n        return value;\r\n    }\r\n\r\n    if (varInstance.type !== type) {\r\n        throw new VariableTypeMismatchedError(variable, 'number');\r\n    }\r\n\r\n    const initialValue = varInstance.bind(\r\n        callback,\r\n        thisArg,\r\n        ...args,\r\n    );\r\n\r\n    return initialValue as unknown as TValue;\r\n}\r\n\r\nexport function bindNumericOr<TValue, TThis, TArgs extends any[]> (\r\n    context: BindContext,\r\n    bindable: Bindable<TValue>,\r\n    type: VariableType,\r\n    callback: BindCallback<TValue, TThis, TArgs>,\r\n    thisArg: TThis,\r\n    ...args: TArgs\r\n): number | TValue {\r\n    const {\r\n        variable,\r\n        value,\r\n    } = bindable;\r\n\r\n    if (!variable) {\r\n        return value;\r\n    }\r\n\r\n    const varInstance = context.getVar(variable);\r\n    if (!validateVariableExistence(varInstance, variable)) {\r\n        return value;\r\n    }\r\n\r\n    if (type !== VariableType.FLOAT && type !== VariableType.INTEGER) {\r\n        throw new VariableTypeMismatchedError(variable, 'number or integer');\r\n    }\r\n\r\n    const initialValue = varInstance.bind(\r\n        callback,\r\n        thisArg,\r\n        ...args,\r\n    );\r\n\r\n    return initialValue as unknown as number;\r\n}\r\n\r\nexport function validateVariableExistence (varInstance: VarInstance | undefined, name: string): varInstance is VarInstance {\r\n    if (!varInstance) {\r\n        // TODO, warn only?\r\n        throw new VariableNotDefinedError(name);\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function validateVariableType (type: VariableType, expected: VariableType, name: string): void {\r\n    if (type !== expected) {\r\n        throw new VariableTypeMismatchedError(name, 'number');\r\n    }\r\n}\r\n\r\nexport function validateVariableTypeNumeric (type: VariableType, name: string): void {\r\n    if (type !== VariableType.FLOAT && type !== VariableType.INTEGER) {\r\n        throw new VariableTypeMismatchedError(name, 'number or integer');\r\n    }\r\n}\r\n\r\nexport function validateVariableTypeTriggerLike (type: VariableType, name: string): void {\r\n    if (type !== VariableType.TRIGGER) {\r\n        throw new VariableTypeMismatchedError(name, 'trigger');\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport function blend1D (weights: number[], thresholds: readonly number[], value: number): void {\r\n    weights.fill(0.0);\r\n    if (thresholds.length === 0) {\r\n        // Do nothing\r\n    } else if (value <= thresholds[0]) {\r\n        weights[0] = 1;\r\n    } else if (value >= thresholds[thresholds.length - 1]) {\r\n        weights[weights.length - 1] = 1;\r\n    } else {\r\n        let iUpper = 0;\r\n        for (let iThresholds = 1; iThresholds < thresholds.length; ++iThresholds) {\r\n            if (thresholds[iThresholds] > value) {\r\n                iUpper = iThresholds;\r\n                break;\r\n            }\r\n        }\r\n        const lower = thresholds[iUpper - 1];\r\n        const upper = thresholds[iUpper];\r\n        const dVal = upper - lower;\r\n        weights[iUpper - 1] = (upper - value) / dVal;\r\n        weights[iUpper] = (value - lower) / dVal;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { _decorator } from '../../../core';\r\nimport { createEval } from '../create-eval';\r\nimport { BindableNumber, bindOr, VariableType } from '../parametric';\r\nimport { AnimationBlend, AnimationBlendEval, AnimationBlendItem } from './animation-blend';\r\nimport { blend1D } from './blend-1d';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport type { ReadonlyClipOverrideMap } from '../clip-overriding';\r\nimport { AnimationGraphBindingContext } from '../animation-graph-context';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationBlend1DItem`)\r\nclass AnimationBlend1DItem extends AnimationBlendItem {\r\n    @serializable\r\n    public threshold = 0.0;\r\n\r\n    public clone (): AnimationBlend1DItem {\r\n        const that = new AnimationBlend1DItem();\r\n        this._copyTo(that);\r\n        return that;\r\n    }\r\n\r\n    protected _copyTo (that: AnimationBlend1DItem): AnimationBlend1DItem {\r\n        super._copyTo(that);\r\n        that.threshold = this.threshold;\r\n        return that;\r\n    }\r\n}\r\n\r\n@ccclass('cc.animation.AnimationBlend1D')\r\nexport class AnimationBlend1D extends AnimationBlend {\r\n    public static Item = AnimationBlend1DItem;\r\n\r\n    @serializable\r\n    private _items: AnimationBlend1DItem[] = [];\r\n\r\n    @serializable\r\n    public param = new BindableNumber();\r\n\r\n    get items (): Iterable<AnimationBlend1DItem> {\r\n        return this._items;\r\n    }\r\n\r\n    set items (value) {\r\n        this._items = Array.from(value)\r\n            .sort(({ threshold: lhs }, { threshold: rhs }) => lhs - rhs);\r\n    }\r\n\r\n    public clone (): AnimationBlend1D {\r\n        const that = new AnimationBlend1D();\r\n        this.copyTo(that);\r\n        that._items = this._items.map((item) => item.clone());\r\n        that.param = this.param.clone();\r\n        return that;\r\n    }\r\n\r\n    public [createEval] (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n    ): any {\r\n        const evaluation = new AnimationBlend1DEval(\r\n            context,\r\n            ignoreEmbeddedPlayers,\r\n            this,\r\n            this._items,\r\n            this._items.map(({ threshold }) => threshold),\r\n            0.0,\r\n        );\r\n        const initialValue = bindOr(\r\n            context,\r\n            this.param,\r\n            VariableType.FLOAT,\r\n            evaluation.setInput,\r\n            evaluation,\r\n            0,\r\n        );\r\n        evaluation.setInput(initialValue, 0);\r\n        return evaluation;\r\n    }\r\n}\r\n\r\nexport declare namespace AnimationBlend1D {\r\n    export type Item = AnimationBlend1DItem;\r\n}\r\n\r\nclass AnimationBlend1DEval extends AnimationBlendEval {\r\n    private declare _thresholds: readonly number[];\r\n\r\n    constructor (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n        base: AnimationBlend,\r\n        items: AnimationBlendItem[],\r\n        thresholds: readonly number[],\r\n        input: number,\r\n    ) {\r\n        super(context, ignoreEmbeddedPlayers, base, items, [input]);\r\n        this._thresholds = thresholds;\r\n        this.doEval();\r\n    }\r\n\r\n    protected eval (weights: number[], [value]: readonly [number]): void {\r\n        blend1D(weights, this._thresholds, value);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { approx, assertIsTrue, Vec2, Vec3 } from '../../../core';\r\n\r\n/**\r\n * Blends given samples using simple directional algorithm.\r\n * @param weights Result weights of each sample.\r\n * @param samples Every samples' parameter.\r\n * @param input Input parameter.\r\n */\r\nexport const blendSimpleDirectional = ((): (weights: number[], samples: readonly Vec2[], input: Readonly<Vec2>) => void => {\r\n    const CACHE_NORMALIZED_SAMPLE = new Vec2();\r\n\r\n    const CACHE_BARYCENTRIC_SOLUTIONS: EquationResolutions = { wA: 0, wB: 0 };\r\n\r\n    return function blendSimpleDirectional (weights: number[], samples: readonly Vec2[], input: Readonly<Vec2>): void {\r\n        assertIsTrue(weights.length === samples.length);\r\n\r\n        if (samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (samples.length === 1) {\r\n            weights[0] = 1.0;\r\n            return;\r\n        }\r\n\r\n        if (Vec2.strictEquals(input, Vec2.ZERO)) {\r\n            const iCenter = samples.findIndex((sample) => Vec2.strictEquals(sample, Vec2.ZERO));\r\n            if (iCenter >= 0) {\r\n                weights[iCenter] = 1.0;\r\n            } else {\r\n                weights.fill(1.0 / samples.length);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Finds out the sector the input point locates\r\n        let iSectorStart = -1;\r\n        let iSectorEnd = -1;\r\n        let iCenter = -1;\r\n        let lhsCosAngle = Number.NEGATIVE_INFINITY;\r\n        let rhsCosAngle = Number.NEGATIVE_INFINITY;\r\n        const { x: inputX, y: inputY } = input;\r\n        for (let iSample = 0; iSample < samples.length; ++iSample) {\r\n            const sample = samples[iSample];\r\n            if (Vec2.equals(sample, Vec2.ZERO)) {\r\n                iCenter = iSample;\r\n                continue;\r\n            }\r\n\r\n            const sampleNormalized = Vec2.normalize(CACHE_NORMALIZED_SAMPLE, sample);\r\n            const cosAngle = Vec2.dot(sampleNormalized, input);\r\n            const sign = sampleNormalized.x * inputY - sampleNormalized.y * inputX;\r\n            if (sign > 0) {\r\n                if (cosAngle >= rhsCosAngle) {\r\n                    rhsCosAngle = cosAngle;\r\n                    iSectorStart = iSample;\r\n                }\r\n            } else if (cosAngle >= lhsCosAngle) {\r\n                lhsCosAngle = cosAngle;\r\n                iSectorEnd = iSample;\r\n            }\r\n        }\r\n\r\n        let centerWeight = 0.0;\r\n        if (iSectorStart < 0 || iSectorEnd < 0) {\r\n            // Input fall at vertex.\r\n            centerWeight = 1.0;\r\n        } else {\r\n            const { wA, wB } = solveBarycentric(samples[iSectorStart], samples[iSectorEnd], input, CACHE_BARYCENTRIC_SOLUTIONS);\r\n            let w1 = 0.0;\r\n            let w2 = 0.0;\r\n            const sum = wA + wB;\r\n            if (sum > 1) {\r\n                // Input fall at line C-A or C-B but not beyond C\r\n                w1 = wA / sum;\r\n                w2 = wB / sum;\r\n            } else if (sum < 0) {\r\n                // Input fall at line C-A or C-B but beyond A or B\r\n                w1 = 0.0;\r\n                w2 = 0.0;\r\n                centerWeight = 1.0;\r\n            } else {\r\n                // Inside triangle\r\n                w1 = wA;\r\n                w2 = wB;\r\n                centerWeight = 1.0 - sum;\r\n            }\r\n            weights[iSectorStart] = w1;\r\n            weights[iSectorEnd] = w2;\r\n        }\r\n\r\n        // Center influence part\r\n        if (centerWeight > 0.0) {\r\n            if (iCenter >= 0) {\r\n                weights[iCenter] = centerWeight;\r\n            } else {\r\n                const average = centerWeight / weights.length;\r\n                for (let i = 0; i < weights.length; ++i) {\r\n                    weights[i] += average;\r\n                }\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\n/**\r\n * Validates the samples if they satisfied the requirements of simple directional algorithm.\r\n * @param samples Samples to validate.\r\n * @returns Issues the samples containing.\r\n */\r\nexport function validateSimpleDirectionalSamples (samples: ReadonlyArray<Vec2>): SimpleDirectionalSampleIssue[] {\r\n    const nSamples = samples.length;\r\n    const issues: SimpleDirectionalSampleIssue[] = [];\r\n    const sameDirectionValidationFlag = new Array<boolean>(samples.length).fill(false);\r\n    samples.forEach((sample, iSample) => {\r\n        if (sameDirectionValidationFlag[iSample]) {\r\n            return;\r\n        }\r\n        let sameDirectionSamples: number[] | undefined;\r\n        for (let iCheckSample = 0; iCheckSample < nSamples; ++iCheckSample) {\r\n            const checkSample = samples[iCheckSample];\r\n            if (Vec2.equals(sample, checkSample, 1e-5)) {\r\n                (sameDirectionSamples ??= []).push(iCheckSample);\r\n                sameDirectionValidationFlag[iCheckSample] = true;\r\n            }\r\n        }\r\n        if (sameDirectionSamples) {\r\n            sameDirectionSamples.unshift(iSample);\r\n            issues.push(new SimpleDirectionalIssueSameDirection(sameDirectionSamples));\r\n        }\r\n    });\r\n    return issues;\r\n}\r\n\r\nexport type SimpleDirectionalSampleIssue = SimpleDirectionalIssueSameDirection;\r\n\r\n/**\r\n * Simple directional issue representing some samples have same(or very similar) direction.\r\n */\r\nexport class SimpleDirectionalIssueSameDirection {\r\n    public constructor (public samples: readonly number[]) { }\r\n}\r\n\r\n//#region Gradient Band Interpolation\r\n\r\n/**\r\n * In the following, two interpolation methods are implemented based on paper\r\n * [rune_skovbo_johansen_thesis.pdf](https://runevision.com/thesis/rune_skovbo_johansen_thesis.pdf).\r\n *\r\n * - Gradient brand interpolation in Cartesian space.\r\n *\r\n * - Gradient brand interpolation in polar space.\r\n *\r\n *   This is a variety of standard gradient brand interpolation\r\n *   which is suitable for velocity interpolation(the Cartesian one is not **WELL** suited as pointed out by the paper).\r\n *\r\n *   This type of method requires a motion to be placed at origin and\r\n *   the angles between adjacent points to be greater than 180°.\r\n */\r\nconst _DEV_NOTE = false;\r\n\r\n//#endregion\r\n\r\n/**\r\n * Cartesian Gradient Band Interpolation.\r\n * @param weights\r\n * @param thresholds\r\n * @param value\r\n */\r\nexport function sampleFreeformCartesian (weights: number[], thresholds: readonly Vec2[], value: Readonly<Vec2>): void {\r\n    sampleFreeform(weights, thresholds, value, getGradientBandCartesianCoords);\r\n}\r\n\r\nfunction sampleFreeform (weights: number[], samples: readonly Vec2[], value: Readonly<Vec2>, getGradientBandCoords: GetGradientBandCoords): void {\r\n    weights.fill(0.0);\r\n    const pIpInput = new Vec2(0, 0);\r\n    const pIJ = new Vec2(0, 0);\r\n    let sumInfluence = 0.0;\r\n    const nSamples = samples.length;\r\n    for (let iSample = 0; iSample < nSamples; ++iSample) {\r\n        let influence = Number.MAX_VALUE;\r\n        let outsideHull = false;\r\n        for (let jSample = 0; jSample < nSamples; ++jSample) {\r\n            if (iSample === jSample) {\r\n                continue;\r\n            }\r\n            getGradientBandCoords(samples[iSample], samples[jSample], value, pIpInput, pIJ);\r\n            const t = 1 - Vec2.dot(pIpInput, pIJ) / Vec2.lengthSqr(pIJ);\r\n            if (t < 0) {\r\n                outsideHull = true;\r\n                break;\r\n            }\r\n            influence = Math.min(influence, t);\r\n        }\r\n        if (!outsideHull) {\r\n            weights[iSample] = influence;\r\n            sumInfluence += influence;\r\n        }\r\n    }\r\n    if (sumInfluence > 0) {\r\n        weights.forEach((influence, index) => weights[index] = influence / sumInfluence);\r\n    }\r\n}\r\n\r\ninterface EquationResolutions {\r\n    wA: number;\r\n    wB: number;\r\n}\r\n\r\n/**\r\n * Solves the barycentric coordinates of `p` within triangle (0, `a`, `b`).\r\n * @param a Triangle vertex.\r\n * @param b Triangle vertex.\r\n * @param p Input vector.\r\n * @param resolutions The barycentric coordinates of `a` and `b`.\r\n * @returns\r\n */\r\nfunction solveBarycentric (\r\n    a: Readonly<Vec2>,\r\n    b: Readonly<Vec2>,\r\n    p: Readonly<Vec2>,\r\n    resolutions: EquationResolutions,\r\n): EquationResolutions {\r\n    // Let P = p - 0, A = a - 0, B = b - 0,\r\n    // wA = (P x B) / (A x B)\r\n    // wB = (P x A) / (B x A)\r\n    const det = Vec2.cross(a, b);\r\n    if (!det) {\r\n        resolutions.wA = 0.0;\r\n        resolutions.wB = 0.0;\r\n    } else {\r\n        resolutions.wA = Vec2.cross(p, b) / det;\r\n        resolutions.wB = Vec2.cross(p, a) / -det;\r\n    }\r\n    return resolutions;\r\n}\r\n\r\ntype GetGradientBandCoords = (point: Readonly<Vec2>, pI: Readonly<Vec2>, pJ: Readonly<Vec2>, pIpInput: Vec2, pIpJ: Vec2) => void;\r\n\r\nconst getGradientBandCartesianCoords: GetGradientBandCoords = (pI, pJ, input, pIpInput, pIpJ) => {\r\n    Vec2.subtract(pIpInput, input, pI);\r\n    Vec2.subtract(pIpJ, pJ, pI);\r\n};\r\n\r\nconst PRECOMPUTED_VIJ_DATA_STRIDE = 3;\r\n\r\n/**\r\n * The class tracking the polar space gradient band interpolation.\r\n * For code readers, throughout the implementation:\r\n * - Variable names like `V_IJ` denotes a vector pointing from example motion \"I\" to example motion \"J\";\r\n * - Variable names like `V_IX` denotes a vector pointing from example motion \"I\" to new velocity being queried, which is properly named \"X\".\r\n * For detail definitions see section 6.3 in [paper](https://runevision.com/thesis/rune_skovbo_johansen_thesis.pdf) .\r\n */\r\nexport class PolarSpaceGradientBandInterpolator2D {\r\n    private static _CACHE_INPUT_DIRECTION = new Vec2();\r\n\r\n    private static _CACHE_VIJ = new Vec2();\r\n\r\n    private static _CACHE_VIX = new Vec2();\r\n\r\n    private static _ANGLE_MULTIPLIER = 1.0;\r\n\r\n    constructor (examples: readonly Readonly<Vec2>[]) {\r\n        const {\r\n            _ANGLE_MULTIPLIER: angleMultiplier,\r\n        } = PolarSpaceGradientBandInterpolator2D;\r\n\r\n        const nExamples = examples.length;\r\n\r\n        const exampleMagnitudes = this._exampleMagnitudes = new Array<number>(nExamples).fill(0.0);\r\n        const exampleDirections = this._exampleDirections = examples.map((example, iExample) => {\r\n            const direction = Vec2.copy(new Vec2(), example);\r\n            const magnitude = Vec2.len(direction);\r\n            exampleMagnitudes[iExample] = magnitude;\r\n            if (!approx(magnitude, 0.0, 1e-5)) {\r\n                Vec2.multiplyScalar(direction, direction, 1.0 / magnitude);\r\n            }\r\n            return direction;\r\n        });\r\n\r\n        const precomputedVIJs = this._precomputedVIJs = new Float32Array(PRECOMPUTED_VIJ_DATA_STRIDE * nExamples * nExamples);\r\n        for (let iExample = 0; iExample < nExamples; ++iExample) {\r\n            const magnitudeI = exampleMagnitudes[iExample];\r\n            const directionI = exampleDirections[iExample];\r\n            for (let jExample = 0; jExample < nExamples; ++jExample) {\r\n                if (iExample === jExample) {\r\n                    continue;\r\n                }\r\n                const magnitudeJ = exampleMagnitudes[jExample];\r\n                const directionJ = exampleDirections[jExample];\r\n                const averagedMagnitude = (magnitudeI + magnitudeJ) / 2;\r\n                const pOutput = PRECOMPUTED_VIJ_DATA_STRIDE * (nExamples * iExample + jExample);\r\n                precomputedVIJs[pOutput + 0] = (magnitudeJ - magnitudeI) / averagedMagnitude;\r\n                precomputedVIJs[pOutput + 1] = signedAngle(directionI, directionJ) * angleMultiplier;\r\n                precomputedVIJs[pOutput + 2] = averagedMagnitude;\r\n            }\r\n        }\r\n\r\n        this._cacheVIXAngles = new Float32Array(nExamples);\r\n    }\r\n\r\n    public interpolate (weights: number[], input: Readonly<Vec2>): void {\r\n        const {\r\n            _exampleDirections: exampleDirections,\r\n            _exampleMagnitudes: exampleMagnitudes,\r\n            _precomputedVIJs: precomputedVIJs,\r\n            _cacheVIXAngles: cacheVIXAngles,\r\n        } = this;\r\n\r\n        const {\r\n            _CACHE_INPUT_DIRECTION: cacheInputDirection,\r\n            _CACHE_VIJ: cacheVIJ,\r\n            _CACHE_VIX: cacheVIX,\r\n            _ANGLE_MULTIPLIER: angleMultiplier,\r\n        } = PolarSpaceGradientBandInterpolator2D;\r\n\r\n        const nExamples = exampleDirections.length;\r\n        assertIsTrue(weights.length === nExamples);\r\n\r\n        // Specially handle 0/1 sample case, the algorithm is not defined for them.\r\n        if (nExamples === 0) {\r\n            return;\r\n        } else if (nExamples === 1) {\r\n            weights[0] = 1.0;\r\n            return;\r\n        }\r\n\r\n        const vX = input;\r\n        const magnitudeX = Vec2.len(vX);\r\n\r\n        // Calculate $\\angle(v_i, v_x) * \\alpha$ for each example.\r\n        // If either vector is zero, the angle is defined as zero.\r\n        const vIXAngles = cacheVIXAngles;\r\n        if (Vec2.equals(vX, Vec2.ZERO)) {\r\n            for (let iExample = 0; iExample < nExamples; ++iExample) {\r\n                vIXAngles[iExample] = 0.0;\r\n            }\r\n        } else {\r\n            const directionX = Vec2.multiplyScalar(cacheInputDirection, vX, 1.0 / magnitudeX);\r\n            for (let iExample = 0; iExample < nExamples; ++iExample) {\r\n                const directionI = exampleDirections[iExample];\r\n                if (Vec2.equals(directionI, Vec2.ZERO)) {\r\n                    vIXAngles[iExample] = 0.0;\r\n                } else {\r\n                    vIXAngles[iExample] = signedAngle(directionI, directionX) * angleMultiplier;\r\n                }\r\n            }\r\n        }\r\n\r\n        // The polar space gradient band interpolation.\r\n        let totalWeight = 0.0;\r\n        for (let iExample = 0; iExample < nExamples; ++iExample) {\r\n            const magnitudeI = exampleMagnitudes[iExample];\r\n            const directionI = exampleDirections[iExample];\r\n            let minInfluence = Number.POSITIVE_INFINITY; // 1 - Math.abs(vIXAngles[iExample]) / Math.PI;\r\n            for (let jExample = 0; jExample < nExamples; ++jExample) {\r\n                if (iExample === jExample) {\r\n                    continue;\r\n                }\r\n\r\n                const directionJ = exampleDirections[jExample];\r\n\r\n                const precomputedDataIndex = PRECOMPUTED_VIJ_DATA_STRIDE * (nExamples * iExample + jExample);\r\n                const {\r\n                    [precomputedDataIndex + 0]: vIJMag,\r\n                    [precomputedDataIndex + 1]: vIJAnglePrecomputed,\r\n                    [precomputedDataIndex + 2]: averagedMagnitude,\r\n                } = precomputedVIJs;\r\n\r\n                let vIJAngle = vIJAnglePrecomputed;\r\n                let vIXAngle = vIXAngles[iExample];\r\n\r\n                // Handle zero cases:\r\n                // - If $v_i$(or $v_j$) is zero vector,\r\n                //   the angle between v_i_j is defined to be the angle between $v_x$ and $v_j$(or $v_i$).\r\n                // - If $v_x$ is zero vector,\r\n                //   the angle between v_i_x is defined to be the angle between $v_i$ and $v_j$.\r\n                if (Vec2.equals(directionI, Vec2.ZERO)) {\r\n                    vIJAngle = vIXAngles[jExample];\r\n                    // And `vIXAngle` is 0 as computed above.\r\n                } else if (Vec2.equals(directionJ, Vec2.ZERO)) {\r\n                    vIJAngle = vIXAngles[iExample];\r\n                } else if (Vec2.equals(vX, Vec2.ZERO)) {\r\n                    vIXAngle = vIJAngle;\r\n                }\r\n\r\n                const vIJ = Vec2.set(cacheVIJ, vIJMag, vIJAngle);\r\n                const vIX = Vec2.set(\r\n                    cacheVIX,\r\n                    (magnitudeX - magnitudeI) / averagedMagnitude,\r\n                    vIXAngle,\r\n                );\r\n\r\n                // Calculate the influence.\r\n                // Note we can't cache `len(vIJ)` due to above process of `vIJ.y`!\r\n                const influence = 1.0 - Vec2.dot(vIX, vIJ) / Vec2.lengthSqr(vIJ);\r\n                if (influence <= 0) { // The input is outside hull.\r\n                    minInfluence = 0.0;\r\n                    break; // No more iteration.\r\n                }\r\n                minInfluence = Math.min(minInfluence, influence);\r\n            }\r\n            weights[iExample] = minInfluence;\r\n            totalWeight += minInfluence;\r\n        }\r\n\r\n        // Normalize the weights.\r\n        if (totalWeight > 0) {\r\n            for (let iExample = 0; iExample < nExamples; ++iExample) {\r\n                weights[iExample] /= totalWeight;\r\n            }\r\n        } else {\r\n            // This can happen if there no example at origin and the input is origin.\r\n            // Just average weight to all examples.\r\n            const averaged = 1.0 / nExamples;\r\n            for (let iExample = 0; iExample < nExamples; ++iExample) {\r\n                weights[iExample] = averaged;\r\n            }\r\n        }\r\n    }\r\n\r\n    private declare _exampleDirections: Vec2[];\r\n    private declare _exampleMagnitudes: number[];\r\n\r\n    /**\r\n     * n*n Precomputed (\\vec{p_i}{p_j}, (|p_i| + |p_j|) / 2).\r\n     */\r\n    private declare _precomputedVIJs: Float32Array;\r\n\r\n    private declare _cacheVIXAngles: Float32Array;\r\n}\r\n\r\nfunction signedAngle (v1: Readonly<Vec2>, v2: Readonly<Vec2>): number {\r\n    const angle = Vec2.angle(v1, v2);\r\n    const determinate = v1.x * v2.y - v1.y * v2.x;\r\n    return determinate < 0 ? -angle : angle;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec2, _decorator, ccenum, assertIsTrue, editable } from '../../../core';\r\nimport { createEval } from '../create-eval';\r\nimport { AnimationBlend, AnimationBlendEval, AnimationBlendItem } from './animation-blend';\r\nimport { BindableNumber, bindOr, VariableType } from '../parametric';\r\nimport { sampleFreeformCartesian, blendSimpleDirectional, PolarSpaceGradientBandInterpolator2D } from './blend-2d';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport type { ReadonlyClipOverrideMap } from '../clip-overriding';\r\nimport { AnimationGraphBindingContext } from '../animation-graph-context';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\nenum Algorithm {\r\n    SIMPLE_DIRECTIONAL,\r\n    FREEFORM_CARTESIAN,\r\n    FREEFORM_DIRECTIONAL,\r\n}\r\n\r\nccenum(Algorithm);\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationBlend2DItem`)\r\nclass AnimationBlend2DItem extends AnimationBlendItem {\r\n    @serializable\r\n    public threshold = new Vec2();\r\n\r\n    public clone (): AnimationBlend2DItem {\r\n        const that = new AnimationBlend2DItem();\r\n        this._copyTo(that);\r\n        return that;\r\n    }\r\n\r\n    protected _copyTo (that: AnimationBlend2DItem): AnimationBlend2DItem {\r\n        super._copyTo(that);\r\n        Vec2.copy(that.threshold, this.threshold);\r\n        return that;\r\n    }\r\n}\r\n\r\n@ccclass('cc.animation.AnimationBlend2D')\r\nexport class AnimationBlend2D extends AnimationBlend {\r\n    public static Algorithm = Algorithm;\r\n\r\n    public static Item = AnimationBlend2DItem;\r\n\r\n    @editable\r\n    public get algorithm (): Algorithm {\r\n        return this._algorithm;\r\n    }\r\n\r\n    public set algorithm (value) {\r\n        if (value === this._algorithm) {\r\n            return;\r\n        }\r\n        this._algorithm = value;\r\n        this._tryReconstructPolarSpaceInterpolator();\r\n    }\r\n\r\n    @serializable\r\n    private _items: AnimationBlend2DItem[] = [];\r\n\r\n    @serializable\r\n    public paramX = new BindableNumber();\r\n\r\n    @serializable\r\n    public paramY = new BindableNumber();\r\n\r\n    get items (): Iterable<AnimationBlend2DItem> {\r\n        return this._items;\r\n    }\r\n\r\n    set items (items) {\r\n        this._items = Array.from(items);\r\n        this._tryReconstructPolarSpaceInterpolator();\r\n    }\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    __callOnAfterDeserializeRecursive (): void {\r\n        this._tryReconstructPolarSpaceInterpolator();\r\n    }\r\n\r\n    public clone (): AnimationBlend2D {\r\n        const that = new AnimationBlend2D();\r\n        this.copyTo(that);\r\n        that._items = this._items.map((item) => item?.clone() ?? null);\r\n        that.paramX = this.paramX.clone();\r\n        that.paramY = this.paramY.clone();\r\n        that.algorithm = this._algorithm;\r\n        return that;\r\n    }\r\n\r\n    public [createEval] (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n    ): AnimationBlendEval {\r\n        const { algorithm } = this;\r\n        let evaluation: AnimationBlendEval;\r\n        switch (algorithm) {\r\n        case Algorithm.FREEFORM_DIRECTIONAL:\r\n            assertIsTrue(this._polarSpaceGBI, `The polar space interpolator is not setup correctly!`);\r\n            evaluation = new PolarSpaceGradientBandBlend2DEval(\r\n                context,\r\n                ignoreEmbeddedPlayers,\r\n                this,\r\n                this._items,\r\n                this._polarSpaceGBI,\r\n                [0.0, 0.0],\r\n            );\r\n            break;\r\n        default:\r\n            assertIsTrue(false);\r\n            // fallthrough\r\n        case Algorithm.SIMPLE_DIRECTIONAL:\r\n        case Algorithm.FREEFORM_CARTESIAN:\r\n            evaluation =  new AnimationBlend2DEval(\r\n                context,\r\n                ignoreEmbeddedPlayers,\r\n                this,\r\n                this._items,\r\n                this._items.map(({ threshold }) => threshold),\r\n                algorithm,\r\n                [0.0, 0.0],\r\n            );\r\n            break;\r\n        }\r\n\r\n        const initialValueX = bindOr(\r\n            context,\r\n            this.paramX,\r\n            VariableType.FLOAT,\r\n            evaluation.setInput,\r\n            evaluation,\r\n            0,\r\n        );\r\n        const initialValueY = bindOr(\r\n            context,\r\n            this.paramY,\r\n            VariableType.FLOAT,\r\n            evaluation.setInput,\r\n            evaluation,\r\n            1,\r\n        );\r\n        evaluation.setInput(initialValueX, 0);\r\n        evaluation.setInput(initialValueY, 1);\r\n        return evaluation;\r\n    }\r\n\r\n    @serializable\r\n    private _algorithm = Algorithm.SIMPLE_DIRECTIONAL;\r\n\r\n    private _polarSpaceGBI: PolarSpaceGradientBandInterpolator2D | undefined = undefined;\r\n\r\n    private _tryReconstructPolarSpaceInterpolator (): void {\r\n        if (this._algorithm === Algorithm.FREEFORM_DIRECTIONAL) {\r\n            this._polarSpaceGBI = new PolarSpaceGradientBandInterpolator2D(this._items.map((item) => item.threshold));\r\n        } else {\r\n            this._polarSpaceGBI = undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport declare namespace AnimationBlend2D {\r\n    export type Algorithm = typeof Algorithm;\r\n\r\n    export type Item = AnimationBlend2DItem;\r\n}\r\n\r\nclass AnimationBlend2DEval extends AnimationBlendEval {\r\n    private _thresholds: readonly Vec2[];\r\n    private _algorithm: Algorithm.SIMPLE_DIRECTIONAL | Algorithm.FREEFORM_CARTESIAN;\r\n    private _value = new Vec2();\r\n\r\n    constructor (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n        base: AnimationBlend,\r\n        items: AnimationBlendItem[],\r\n        thresholds: readonly Vec2[],\r\n        algorithm: Algorithm.SIMPLE_DIRECTIONAL | Algorithm.FREEFORM_CARTESIAN,\r\n        inputs: [number, number],\r\n    ) {\r\n        super(context, ignoreEmbeddedPlayers, base, items, inputs);\r\n        this._thresholds = thresholds;\r\n        this._algorithm = algorithm;\r\n        this.doEval();\r\n    }\r\n\r\n    protected eval (weights: number[], [x, y]: [number, number]): void {\r\n        Vec2.set(this._value, x, y);\r\n        weights.fill(0);\r\n        switch (this._algorithm) {\r\n        case Algorithm.SIMPLE_DIRECTIONAL:\r\n            blendSimpleDirectional(weights, this._thresholds, this._value);\r\n            break;\r\n        case Algorithm.FREEFORM_CARTESIAN:\r\n            sampleFreeformCartesian(weights, this._thresholds, this._value);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nclass PolarSpaceGradientBandBlend2DEval extends AnimationBlendEval {\r\n    private _interpolator: PolarSpaceGradientBandInterpolator2D;\r\n    private _value = new Vec2();\r\n\r\n    constructor (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n        base: AnimationBlend,\r\n        items: AnimationBlendItem[],\r\n        interpolator: PolarSpaceGradientBandInterpolator2D,\r\n        inputs: [number, number],\r\n    ) {\r\n        super(context, ignoreEmbeddedPlayers, base, items, inputs);\r\n        this._interpolator = interpolator;\r\n        this.doEval();\r\n    }\r\n\r\n    protected eval (weights: number[], [x, y]: [number, number]): void {\r\n        Vec2.set(this._value, x, y);\r\n        weights.fill(0);\r\n        this._interpolator.interpolate(weights, this._value);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { _decorator } from '../../../core';\r\nimport { createEval } from '../create-eval';\r\nimport { AnimationBlend, AnimationBlendEval, AnimationBlendItem } from './animation-blend';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport type { ReadonlyClipOverrideMap } from '../clip-overriding';\r\nimport { BindableNumber, bindOr, VariableType } from '../parametric';\r\nimport { AnimationGraphBindingContext } from '../animation-graph-context';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationBlendDirectItem`)\r\nclass AnimationBlendDirectItem extends AnimationBlendItem {\r\n    @serializable\r\n    public weight = new BindableNumber(0.0);\r\n\r\n    public clone (): AnimationBlendDirectItem {\r\n        const that = new AnimationBlendDirectItem();\r\n        this._copyTo(that);\r\n        return that;\r\n    }\r\n\r\n    protected _copyTo (that: AnimationBlendDirectItem): AnimationBlendDirectItem {\r\n        super._copyTo(that);\r\n        that.weight = this.weight;\r\n        return that;\r\n    }\r\n}\r\n\r\n@ccclass('cc.animation.AnimationBlendDirect')\r\nexport class AnimationBlendDirect extends AnimationBlend {\r\n    public static Item = AnimationBlendDirectItem;\r\n\r\n    @serializable\r\n    private _items: AnimationBlendDirectItem[] = [];\r\n\r\n    get items (): AnimationBlendDirectItem[] {\r\n        return this._items;\r\n    }\r\n\r\n    set items (value) {\r\n        this._items = Array.from(value);\r\n    }\r\n\r\n    public clone (): AnimationBlendDirect {\r\n        const that = new AnimationBlendDirect();\r\n        this.copyTo(that);\r\n        that._items = this._items.map((item) => item?.clone() ?? null);\r\n        return that;\r\n    }\r\n\r\n    public [createEval] (\r\n        context: AnimationGraphBindingContext,\r\n        ignoreEmbeddedPlayers: boolean,\r\n    ): AnimationBlendDirectEval {\r\n        const myEval: AnimationBlendDirectEval = new AnimationBlendDirectEval(\r\n            context,\r\n            ignoreEmbeddedPlayers,\r\n            this,\r\n            this._items,\r\n            new Array<number>(this._items.length).fill(0.0),\r\n        );\r\n        for (let iItem = 0; iItem < this._items.length; ++iItem) {\r\n            const item = this._items[iItem];\r\n            const initialValue = bindOr(\r\n                context,\r\n                item.weight,\r\n                VariableType.FLOAT,\r\n                myEval.setInput,\r\n                myEval,\r\n                iItem,\r\n            );\r\n            myEval.setInput(initialValue, iItem);\r\n        }\r\n        return myEval;\r\n    }\r\n}\r\n\r\nexport declare namespace AnimationBlendDirect {\r\n    export type Item = AnimationBlendDirectItem;\r\n}\r\n\r\nclass AnimationBlendDirectEval extends AnimationBlendEval {\r\n    constructor (...args: ConstructorParameters<typeof AnimationBlendEval>) {\r\n        super(...args);\r\n        this.doEval();\r\n    }\r\n\r\n    protected eval (weights: number[], inputs: readonly number[]): void {\r\n        const nChildren = weights.length;\r\n        for (let iChild = 0; iChild < nChildren; ++iChild) {\r\n            weights[iChild] = inputs[iChild];\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n https://www.cocos.com/\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { VariableType, BindableBoolean, bindOr } from '../../parametric';\r\nimport { _decorator } from '../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { createEval } from '../../create-eval';\r\nimport { Condition, ConditionEval, ConditionBindingContext } from './condition-base';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\nenum UnaryOperator {\r\n    TRUTHY,\r\n    FALSY,\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}UnaryCondition`)\r\nexport class UnaryCondition implements Condition {\r\n    public static readonly Operator = UnaryOperator;\r\n\r\n    @serializable\r\n    public operator: UnaryOperator = UnaryOperator.TRUTHY;\r\n\r\n    @serializable\r\n    public operand = new BindableBoolean();\r\n\r\n    public clone (): UnaryCondition {\r\n        const that = new UnaryCondition();\r\n        that.operator = this.operator;\r\n        that.operand = this.operand.clone();\r\n        return that;\r\n    }\r\n\r\n    public [createEval] (context: ConditionBindingContext): UnaryConditionEval {\r\n        const { operator, operand } = this;\r\n        const evaluation = new UnaryConditionEval(operator, false);\r\n        const value = bindOr(\r\n            context,\r\n            operand,\r\n            VariableType.BOOLEAN,\r\n            evaluation.setOperand,\r\n            evaluation,\r\n        );\r\n        evaluation.reset(value);\r\n        return evaluation;\r\n    }\r\n}\r\n\r\nexport declare namespace UnaryCondition {\r\n    export type Operator = UnaryOperator;\r\n}\r\n\r\nclass UnaryConditionEval implements ConditionEval {\r\n    private declare _operator: UnaryOperator;\r\n    private declare _operand: boolean;\r\n    private declare _result: boolean;\r\n\r\n    constructor (operator: UnaryOperator, operand: boolean) {\r\n        this._operator = operator;\r\n        this._operand = operand;\r\n        this._eval();\r\n    }\r\n\r\n    public reset (value: boolean): void {\r\n        this.setOperand(value);\r\n    }\r\n\r\n    public setOperand (value: boolean): void {\r\n        this._operand = value;\r\n        this._eval();\r\n    }\r\n\r\n    /**\r\n     * Evaluates this condition.\r\n     */\r\n    public eval (): boolean {\r\n        return this._result;\r\n    }\r\n\r\n    private _eval (): void {\r\n        const { _operand: operand } = this;\r\n        switch (this._operator) {\r\n        default:\r\n        case UnaryOperator.TRUTHY:\r\n            this._result = !!operand;\r\n            break;\r\n        case UnaryOperator.FALSY:\r\n            this._result = !operand;\r\n            break;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable, editable, type } from 'cc.decorator';\r\nimport type { Node } from '../../scene-graph/node';\r\nimport { Asset } from '../../asset/assets/asset';\r\nimport { js } from '../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\n\r\ninterface JointMaskInfo {\r\n    readonly path: string;\r\n\r\n    enabled: boolean;\r\n}\r\n\r\n@ccclass('cc.JointMask')\r\nclass JointMask {\r\n    @serializable\r\n    public path = '';\r\n\r\n    @serializable\r\n    public enabled = true;\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationMask`)\r\nexport class AnimationMask extends Asset {\r\n    @serializable\r\n    private _jointMasks: JointMask[] = [];\r\n\r\n    @editable\r\n    @type(JointMask)\r\n    get joints (): Iterable<JointMaskInfo> {\r\n        // TODO: editor currently treats this property as (and expects it to be) an array.\r\n        // If later refactoring is needed, changes should also be made to editor.\r\n\r\n        return this._jointMasks;\r\n    }\r\n\r\n    set joints (value) {\r\n        this.clear();\r\n        for (const joint of value) {\r\n            this.addJoint(joint.path, joint.enabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 添加一个关节遮罩项。\r\n     * 已存在的相同路径的关节遮罩项会被替换为新的。\r\n     * @en Add a joint mask item.\r\n     * Already existing joint mask with same path item will be replaced.\r\n     * @param path @zh 关节的路径。 @en The joint's path.\r\n     * @param enabled @zh 是否启用该关节。 @en Whether to enable the joint.\r\n     */\r\n    public addJoint (path: string, enabled: boolean): void {\r\n        this.removeJoint(path);\r\n        const info = new JointMask();\r\n        info.path = path;\r\n        info.enabled = enabled;\r\n        this._jointMasks.push(info);\r\n    }\r\n\r\n    public removeJoint (removal: string): void {\r\n        js.array.removeIf(this._jointMasks, ({ path }) => path === removal);\r\n    }\r\n\r\n    public clear (): void {\r\n        this._jointMasks.length = 0;\r\n    }\r\n\r\n    public filterDisabledNodes (root: Node): Set<Node> {\r\n        const { _jointMasks: jointMasks } = this;\r\n        const nJointMasks = jointMasks.length;\r\n        const disabledNodes = new Set<Node>();\r\n        for (let iJointMask = 0; iJointMask < nJointMasks; ++iJointMask) {\r\n            const { path, enabled } = jointMasks[iJointMask];\r\n            if (enabled) {\r\n                continue;\r\n            }\r\n            const node = root.getChildByPath(path);\r\n            if (node) {\r\n                disabledNodes.add(node);\r\n            }\r\n        }\r\n        return disabledNodes;\r\n    }\r\n\r\n    public isExcluded (path: string): boolean {\r\n        return !(this._jointMasks.find(({ path: p }) => p === path)?.enabled ?? true);\r\n    }\r\n}\r\n\r\ntype JointMaskInfo_ = JointMaskInfo;\r\n\r\nexport declare namespace AnimationMask {\r\n    export type JointMaskInfo = JointMaskInfo_;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, editable, serializable, type } from 'cc.decorator';\r\nimport { removeIf } from '../../core/utils/array';\r\nimport { AnimationClip } from '../animation-clip';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../define';\r\nimport { AnimationGraph } from './animation-graph';\r\nimport { AnimationGraphLike } from './animation-graph-like';\r\nimport type { ReadonlyClipOverrideMap } from './clip-overriding';\r\n\r\n/**\r\n * @en\r\n * An opacity type which denotes what the animation graph variant seems like outside the engine.\r\n * @zh\r\n * 一个非透明的类型，它是动画图变体在引擎外部的表示。\r\n */\r\nexport interface AnimationGraphVariantRunTime {\r\n    /**\r\n     * @internal\r\n     */\r\n    readonly __brand: 'AnimationGraphVariant';\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}ClipOverrideEntry`)\r\nclass ClipOverrideEntry {\r\n    @serializable\r\n    public original: AnimationClip = null!;\r\n\r\n    @serializable\r\n    public substitution: AnimationClip = null!;\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}AnimationGraphVariant`)\r\nexport class AnimationGraphVariant extends AnimationGraphLike implements AnimationGraphVariantRunTime {\r\n    declare __brand: 'AnimationGraphVariant';\r\n\r\n    @type(AnimationGraph)\r\n    @editable\r\n    get original (): AnimationGraph | null {\r\n        return this._graph;\r\n    }\r\n\r\n    set original (value) {\r\n        this._graph = value;\r\n    }\r\n\r\n    get clipOverrides (): ClipOverrideMap {\r\n        return this._clipOverrides;\r\n    }\r\n\r\n    @serializable\r\n    private _graph: AnimationGraph | null = null;\r\n\r\n    @serializable\r\n    private _clipOverrides: ClipOverrideMap = new ClipOverrideMap();\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}ClipOverrideMap`)\r\nclass ClipOverrideMap implements ReadonlyClipOverrideMap {\r\n    get size (): number {\r\n        return this._entries.length;\r\n    }\r\n\r\n    public [Symbol.iterator] (): IterableIterator<ClipOverrideEntry> {\r\n        return this._entries[Symbol.iterator]();\r\n    }\r\n\r\n    public has (original: AnimationClip): boolean {\r\n        return !!this._entries.find(({ original: o }) => o === original);\r\n    }\r\n\r\n    public get (original: AnimationClip): AnimationClip | undefined {\r\n        const entry = this._entries.find(({ original: o }) => o === original);\r\n        return entry?.substitution;\r\n    }\r\n\r\n    public set (original: AnimationClip, substitution: AnimationClip): void {\r\n        const entry = this._entries.find(({ original: o }) => o === original);\r\n        if (entry) {\r\n            entry.substitution = substitution;\r\n        } else {\r\n            const newEntry = new ClipOverrideEntry();\r\n            newEntry.original = original;\r\n            newEntry.substitution = substitution;\r\n            this._entries.push(newEntry);\r\n        }\r\n    }\r\n\r\n    public delete (original: AnimationClip): void {\r\n        removeIf(this._entries, ({ original: o }) => o === original);\r\n    }\r\n\r\n    public clear (): void {\r\n        this._entries.length = 0;\r\n    }\r\n\r\n    @serializable\r\n    private _entries: ClipOverrideEntry[] = [];\r\n}\r\n","export const POSE_GRAPH_NODE_MENU_PREFIX_POSE = `i18n:ENGINE.animation_graph.pose_graph_node_sub_categories.pose_nodes/`;\r\n\r\nexport const POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND = `${POSE_GRAPH_NODE_MENU_PREFIX_POSE}/`\r\n    + `i18n:ENGINE.animation_graph.pose_graph_node_sub_categories.pose_nodes_blend/`;\r\n","import { EDITOR } from 'internal:constants';\r\nimport { warn } from '../../../../core';\r\nimport { ccclass, editable, serializable } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseGraphCreateNodeFactory, poseGraphCreateNodeFactory, poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport { RuntimeStash } from '../stash/runtime-stash';\r\nimport { PoseNode } from '../pose-node';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext, AnimationGraphSettleContext, AnimationGraphUpdateContext } from '../../animation-graph-context';\r\nimport type { Pose } from '../../../core/pose';\r\nimport type { EnterNodeInfo } from '../foundation/authoring/enter-node-info';\r\n\r\nconst createNodeFactory: PoseGraphCreateNodeFactory<string> = {\r\n    // eslint-disable-next-line arrow-body-style\r\n    listEntries: (context) => {\r\n        // eslint-disable-next-line arrow-body-style\r\n        return [...context.animationGraph.layers[context.layerIndex].stashes()].map(([stashId]) => {\r\n            return {\r\n                arg: stashId,\r\n                menu: stashId,\r\n            };\r\n        });\r\n    },\r\n\r\n    create: (arg) => {\r\n        const node = new PoseNodeUseStashedPose();\r\n        node.stashName = arg;\r\n        return node;\r\n    },\r\n};\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeUseStashedPose`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\n@poseGraphCreateNodeFactory(createNodeFactory)\r\n@poseGraphNodeAppearance({ inline: true })\r\nexport class PoseNodeUseStashedPose extends PoseNode {\r\n    @serializable\r\n    @editable\r\n    public stashName = '';\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        const {\r\n            stashName,\r\n        } = this;\r\n\r\n        // If stashName is empty, silently ignore.\r\n        if (!stashName) {\r\n            return;\r\n        }\r\n\r\n        const runtimeStash = context.stashView.bindStash(stashName);\r\n        this._runtimeStash = runtimeStash;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n    }\r\n\r\n    public reenter (): void {\r\n        this._runtimeStash?.reenter();\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        this._runtimeStash?.requestUpdate(context);\r\n    }\r\n\r\n    protected doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        return this._runtimeStash?.evaluate(context) ?? context.pushDefaultedPose();\r\n    }\r\n\r\n    private _runtimeStash: RuntimeStash | undefined = undefined;\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodeUseStashedPose.prototype.getTitle = function getTitle (this: PoseNodeUseStashedPose):  [string, { stashName: string; }] | undefined {\r\n        if (this.stashName) {\r\n            return [`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodeUseStashedPose.title`, { stashName: this.stashName }];\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    PoseNodeUseStashedPose.prototype.getEnterInfo = function getTitle (this: PoseNodeUseStashedPose): EnterNodeInfo | undefined {\r\n        return {\r\n            type: 'stash',\r\n            stashName: this.stashName,\r\n        };\r\n    };\r\n}\r\n","import { ConditionBindingContext, ConditionEvaluationContext } from '../condition-base';\r\n\r\n/**\r\n * @zh\r\n * 描述过渡条件中，某个绑定提供的值的类型。\r\n * @en\r\n * Describes the type of value providing by a transition condition binding.\r\n */\r\nexport enum TCBindingValueType {\r\n    FLOAT = 0 /* VariableType.FLOAT */,\r\n\r\n    INTEGER = 3 /* VariableType.INTEGER */,\r\n}\r\n\r\ninterface TCBindingValueTypeMap {\r\n    [TCBindingValueType.FLOAT]: number;\r\n    [TCBindingValueType.INTEGER]: number;\r\n}\r\n\r\n/**\r\n * @zh 描述过渡条件中的值绑定，例如，二元条件的左操作数上的绑定。\r\n * 前缀 “TC” 是 “Transition Condition” 的缩写。\r\n *\r\n * @en Describes a value binding in transition condition,\r\n * for example, the binding on binary condition's left hand operand.\r\n * The prefix \"TC\" is abbr of `Transition Condition`.\r\n */\r\nexport abstract class TCBinding<TValueType extends TCBindingValueType> {\r\n    /**\r\n     * @zh\r\n     * 获取绑定的值类型。\r\n     * @en\r\n     * Gets the binding value type.\r\n     */\r\n    public abstract getValueType(): TValueType;\r\n\r\n    public abstract bind(context: ConditionBindingContext): TCBindingEvaluation<TValueType> | undefined;\r\n}\r\n\r\n/**\r\n * @zh 过渡条件中的值绑定的求值。\r\n * @en The evaluation of a float binding in transition condition.\r\n */\r\nexport interface TCBindingEvaluation<TValueType extends TCBindingValueType> {\r\n    evaluate(context: ConditionEvaluationContext): TCBindingValueTypeMap[TValueType];\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { _decorator, assertIsTrue, js } from '../../../../../core';\r\nimport { TCBinding, TCBindingValueType } from './binding';\r\n\r\n/**\r\n * @zh\r\n * 描述某个（过渡条件）绑定类的类型信息。\r\n * @en\r\n * Describes the type info of a (transition condition)binding class.\r\n */\r\nexport interface TCBindingTypeInfo {\r\n    /**\r\n     * @zh\r\n     * 该绑定类型的创建菜单信息。\r\n     * @en\r\n     * The creation menu info of this binding class.\r\n     */\r\n    menu?: string;\r\n\r\n    /**\r\n     * @zh\r\n     * 该绑定类能提供的所有值类型。\r\n     * @en\r\n     * All value types that this binding can provides.\r\n     */\r\n    provisions?: readonly TCBindingValueType[];\r\n\r\n    /**\r\n     * @zh\r\n     * 如果有定义，表示该类型的绑定支持的过渡源状态的类型。\r\n     * @en\r\n     * If defined, represents the type(s) of the transition source state supported by this type of binding.\r\n     */\r\n    transitionSourceFilter?: TCBindingTransitionSourceFilter;\r\n}\r\n\r\nconst tcnBindingTypeInfoMap = new WeakMap<Constructor<TCBinding<number>>, TCBindingTypeInfo>();\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction getOrCreateTCBindingTypeInfo <TFunction extends Function> (target: TFunction): TCBindingTypeInfo {\r\n    assertIsTrue(\r\n        js.isChildClassOf(target, TCBinding),\r\n        `This method can only be applied to subclasses of TCBinding`,\r\n    );\r\n    const constructor = target as unknown as Constructor<TCBinding<number>>;\r\n    let info = tcnBindingTypeInfoMap.get(constructor);\r\n    if (!info) {\r\n        info = {};\r\n        tcnBindingTypeInfoMap.set(constructor, info);\r\n    }\r\n    return info;\r\n}\r\n\r\nexport const provide = (...valueTypes: readonly TCBindingValueType[]): ClassDecorator => (!EDITOR ? (): void => {} : (target): void => {\r\n    const info = getOrCreateTCBindingTypeInfo(target);\r\n    info.provisions = valueTypes.slice();\r\n});\r\n\r\nexport enum TCBindingTransitionSourceFilter {\r\n    /** Motion states. */\r\n    MOTION = 1 << 0,\r\n\r\n    /** Pose states. */\r\n    POSE = 1 << 1,\r\n\r\n    /** Empty states. */\r\n    EMPTY = 1 << 2,\r\n\r\n    /** All states having weight concept. */\r\n    WEIGHTED = MOTION | POSE | EMPTY,\r\n}\r\n\r\nexport const support = (transitionSourceFilter: TCBindingTransitionSourceFilter): ClassDecorator => (!EDITOR ? (): void => {} : (target): void => {\r\n    const info = getOrCreateTCBindingTypeInfo(target);\r\n    info.transitionSourceFilter = transitionSourceFilter;\r\n});\r\n\r\n/**\r\n * @zh 获取指定（过渡条件）绑定类的类型信息。\r\n * @zh Gets the type info of specified (transition condition)binding class.\r\n * @param constructor @zh 该绑定类的构造函数。@en The binding class's constructor.\r\n * @returns @zh 类型信息。@en Type info.\r\n */\r\nexport function getTCBindingTypeInfo (constructor: Constructor<TCBinding<number>>): Readonly<TCBindingTypeInfo> | undefined {\r\n    return tcnBindingTypeInfoMap.get(constructor);\r\n}\r\n","import { ConditionBindingContext } from '../condition-base';\r\nimport { _decorator } from '../../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { TCBinding, TCBindingEvaluation, TCBindingValueType } from './binding';\r\nimport { provide } from './editor';\r\nimport { VarInstance } from '../../../variable';\r\nimport { editorOnly } from '../../../../../core/data/decorators';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n/**\r\n * @zh 一种过渡条件绑定，该绑定用于获取动画图变量的当前值。该类绑定产生的值类型对应于变量的值类型。\r\n *\r\n * @en A kind of transition condition binding,\r\n * which is used to obtain the current value of a animation graph variable.\r\n * This type of binding yields the type corresponding to the variable's type.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}TCVariableBinding`)\r\n@provide(TCBindingValueType.FLOAT, TCBindingValueType.INTEGER)\r\nexport class TCVariableBinding<TValueType extends TCBindingValueType> extends TCBinding<TValueType> {\r\n    @serializable\r\n    @editorOnly\r\n    public type = TCBindingValueType.FLOAT as TValueType;\r\n\r\n    /**\r\n     * @zh\r\n     * 动画图变量的名称。\r\n     * @en\r\n     * The animation graph variable's name.\r\n     */\r\n    @serializable\r\n    public variableName = '';\r\n\r\n    public getValueType (): TValueType {\r\n        return this.type;\r\n    }\r\n\r\n    public bind (context: ConditionBindingContext): TCBindingEvaluation<TValueType> | undefined {\r\n        const varInstance = context.getVar(this.variableName);\r\n        if (!varInstance) {\r\n            return undefined;\r\n        }\r\n        return new TCVariableBindingEvaluation(varInstance);\r\n    }\r\n}\r\n\r\nclass TCVariableBindingEvaluation implements TCBindingEvaluation<TCBindingValueType.FLOAT | TCBindingValueType.INTEGER> {\r\n    constructor (private _varInstance: VarInstance) { }\r\n\r\n    public evaluate (): number {\r\n        return this._varInstance.value as number;\r\n    }\r\n}\r\n","import { _decorator } from '../../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { TCBinding, TCBindingEvaluation, TCBindingValueType } from './binding';\r\nimport { provide } from './editor';\r\nimport { EvaluationTimeAuxiliaryCurveView } from '../../../animation-graph-context';\r\nimport { ConditionBindingContext } from '../condition-base';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n/**\r\n * @zh 一种过渡条件绑定，该绑定用于获取指定辅助曲线的当前值。该类绑定产生浮点值。\r\n *\r\n * @en A kind of transition condition binding,\r\n * which is used to obtain the current value of specified auxiliary curve.\r\n * This type of binding yields float value.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}TCAuxiliaryCurveBinding`)\r\n@provide(TCBindingValueType.FLOAT)\r\nexport class TCAuxiliaryCurveBinding extends TCBinding<TCBindingValueType.FLOAT> {\r\n    /**\r\n     * @zh\r\n     * 辅助曲线的名称。\r\n     * @en\r\n     * The auxiliary curve's name.\r\n     */\r\n    @serializable\r\n    public curveName = '';\r\n\r\n    public getValueType (): TCBindingValueType.FLOAT {\r\n        return TCBindingValueType.FLOAT as const;\r\n    }\r\n\r\n    public bind (context: ConditionBindingContext): TCBindingEvaluation<number> | undefined {\r\n        const view = context.getEvaluationTimeAuxiliaryCurveView();\r\n        return new TCAuxiliaryCurveBindingEvaluation(view, this.curveName);\r\n    }\r\n}\r\n\r\nclass TCAuxiliaryCurveBindingEvaluation implements TCBindingEvaluation<number> {\r\n    constructor (\r\n        private _view: EvaluationTimeAuxiliaryCurveView,\r\n        private _curveName: string,\r\n    ) { }\r\n\r\n    public evaluate (): number {\r\n        return this._view.get(this._curveName);\r\n    }\r\n}\r\n","import { ConditionBindingContext, ConditionEvaluationContext } from '../condition-base';\r\nimport { _decorator } from '../../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { TCBinding, TCBindingEvaluation, TCBindingValueType } from './binding';\r\nimport { provide, support, TCBindingTransitionSourceFilter } from './editor';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n/**\r\n * @zh 一种过渡条件绑定，该绑定用于获取过渡的源头状态当前的权重值。该类绑定产生浮点值。\r\n *\r\n * @en A kind of transition condition binding,\r\n * which is used to obtain the current weight value of transition source state.\r\n * This type of binding yields float value.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}TCStateWeightBinding`)\r\n@provide(TCBindingValueType.FLOAT)\r\n@support(TCBindingTransitionSourceFilter.WEIGHTED)\r\nexport class TCStateWeightBinding extends TCBinding<TCBindingValueType.FLOAT> {\r\n    public getValueType (): TCBindingValueType.FLOAT {\r\n        return TCBindingValueType.FLOAT as const;\r\n    }\r\n\r\n    public bind (_context: ConditionBindingContext): TCBindingEvaluation<number> | undefined {\r\n        return new TCStateWeightBindingEvaluation();\r\n    }\r\n}\r\n\r\nclass TCStateWeightBindingEvaluation implements TCBindingEvaluation<number> {\r\n    public evaluate (context: ConditionEvaluationContext): number {\r\n        return context.sourceStateWeight;\r\n    }\r\n}\r\n","import { ConditionBindingContext, ConditionEvaluationContext } from '../condition-base';\r\nimport { _decorator } from '../../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { TCBinding, TCBindingEvaluation, TCBindingValueType } from './binding';\r\nimport { provide, support, TCBindingTransitionSourceFilter } from './editor';\r\n\r\nconst { ccclass } = _decorator;\r\n\r\n/**\r\n * @zh 一种过渡条件绑定，该绑定用于获取过渡的源头状态所包含的动作已流逝的标准化时间。\r\n * 如果源头中不包含动作，则返回 0。\r\n * 该类绑定产生浮点值。\r\n *\r\n * @en A kind of transition condition binding,\r\n * which is used to obtain the elapsed normalized time of motions within transition source state.\r\n * If there's no motion in source state, 0 is returned.\r\n * This type of binding yields float value.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}TCStateMotionTimeBinding`)\r\n@provide(TCBindingValueType.FLOAT)\r\n@support(TCBindingTransitionSourceFilter.POSE)\r\nexport class TCStateMotionTimeBinding extends TCBinding<TCBindingValueType.FLOAT> {\r\n    public getValueType (): TCBindingValueType.FLOAT {\r\n        return TCBindingValueType.FLOAT as const;\r\n    }\r\n\r\n    public bind (_context: ConditionBindingContext): TCBindingEvaluation<number> | undefined {\r\n        return new TCStateMotionTimeBindingEvaluation();\r\n    }\r\n}\r\n\r\nclass TCStateMotionTimeBindingEvaluation implements TCBindingEvaluation<number> {\r\n    public evaluate (context: ConditionEvaluationContext): number {\r\n        return context.sourceStateMotionTimeNormalized;\r\n    }\r\n}\r\n","import { Condition, ConditionEval, ConditionBindingContext, ConditionEvaluationContext } from './condition-base';\r\nimport { _decorator } from '../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { createEval } from '../../create-eval';\r\nimport { instantiate } from '../../../../serialization';\r\nimport type { TCBinding, TCBindingEvaluation, TCBindingValueType } from './binding/binding';\r\nimport { TCVariableBinding } from './binding/variable-binding';\r\n\r\nimport './binding/runtime';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n/**\r\n * @zh 二元条件操作符。\r\n * @en Operator used in binary condition.\r\n */\r\nenum BinaryOperator {\r\n    EQUAL_TO,\r\n    NOT_EQUAL_TO,\r\n    LESS_THAN,\r\n    LESS_THAN_OR_EQUAL_TO,\r\n    GREATER_THAN,\r\n    GREATER_THAN_OR_EQUAL_TO,\r\n}\r\n\r\ntype LhsBinding = TCBinding<TCBindingValueType.FLOAT | TCBindingValueType.INTEGER>;\r\n\r\ntype lhsBindingEvaluation = TCBindingEvaluation<TCBindingValueType.FLOAT | TCBindingValueType.INTEGER>;\r\n\r\n/**\r\n * @zh 描述一个二元条件，它有两个数值类型的操作数。\r\n * @en Describes a binary condition, there are two operands with numeric type.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}BinaryCondition`)\r\nexport class BinaryCondition implements Condition {\r\n    public static readonly Operator = BinaryOperator;\r\n\r\n    /**\r\n     * @zh\r\n     * 运算符。\r\n     * @en\r\n     * Operator.\r\n     */\r\n    @serializable\r\n    public operator: BinaryOperator = BinaryOperator.EQUAL_TO;\r\n\r\n    /**\r\n     * @zh\r\n     * 左操作数的值。\r\n     * @en\r\n     * Left operand value.\r\n     */\r\n    @serializable\r\n    public lhs = 0.0;\r\n\r\n    /**\r\n     * @zh\r\n     * 左操作数上的绑定。\r\n     * @en\r\n     * Left operand binding.\r\n     */\r\n    @serializable\r\n    public lhsBinding: LhsBinding = new TCVariableBinding<TCBindingValueType.FLOAT | TCBindingValueType.INTEGER>();\r\n\r\n    /**\r\n     * @zh\r\n     * 右操作数的值。\r\n     * @en\r\n     * Right operand value.\r\n     */\r\n    @serializable\r\n    public rhs = 0.0;\r\n\r\n    public clone (): BinaryCondition {\r\n        const that = new BinaryCondition();\r\n        that.operator = this.operator;\r\n        that.lhs = this.lhs;\r\n        that.lhsBinding = instantiate(this.lhsBinding);\r\n        that.rhs = this.rhs;\r\n        return that;\r\n    }\r\n\r\n    public [createEval] (context: ConditionBindingContext): BinaryConditionEval {\r\n        const lhsBindingEvaluation = this.lhsBinding?.bind(context);\r\n\r\n        const binaryConditionEval = new BinaryConditionEval(\r\n            this.operator,\r\n            this.lhs,\r\n            this.rhs,\r\n            lhsBindingEvaluation,\r\n        );\r\n\r\n        return binaryConditionEval;\r\n    }\r\n}\r\n\r\nexport declare namespace BinaryCondition {\r\n    export type Operator = BinaryOperator;\r\n}\r\n\r\nclass BinaryConditionEval implements ConditionEval {\r\n    constructor (\r\n        private _operator: BinaryOperator,\r\n        lhsValue: number,\r\n        rhsValue: number,\r\n        private _lhsBindingEvaluation: lhsBindingEvaluation | undefined,\r\n    ) {\r\n        this._lhsValue = lhsValue;\r\n        this._rhsValue = rhsValue;\r\n    }\r\n\r\n    /**\r\n     * Evaluates this condition.\r\n     */\r\n    public eval (context: ConditionEvaluationContext): boolean {\r\n        const lhsValue = this._lhsBindingEvaluation?.evaluate(context) ?? this._lhsValue;\r\n        const rhsValue = this._rhsValue;\r\n\r\n        switch (this._operator) {\r\n        default:\r\n        case BinaryOperator.EQUAL_TO:\r\n            return lhsValue === rhsValue;\r\n        case BinaryOperator.NOT_EQUAL_TO:\r\n            return lhsValue !== rhsValue;\r\n        case BinaryOperator.LESS_THAN:\r\n            return lhsValue < rhsValue;\r\n        case BinaryOperator.LESS_THAN_OR_EQUAL_TO:\r\n            return lhsValue <= rhsValue;\r\n        case BinaryOperator.GREATER_THAN:\r\n            return lhsValue > rhsValue;\r\n        case BinaryOperator.GREATER_THAN_OR_EQUAL_TO:\r\n            return lhsValue >= rhsValue;\r\n        }\r\n    }\r\n\r\n    private declare _lhsValue: number;\r\n    private declare _rhsValue: number;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n https://www.cocos.com/\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { VariableType, BindableBoolean, bindOr, validateVariableExistence, validateVariableTypeTriggerLike } from '../../parametric';\r\nimport { _decorator } from '../../../../core';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { createEval } from '../../create-eval';\r\nimport { Condition, ConditionEval, ConditionBindingContext } from './condition-base';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}TriggerCondition`)\r\nexport class TriggerCondition implements Condition {\r\n    @serializable\r\n    public trigger = '';\r\n\r\n    public clone (): TriggerCondition {\r\n        const that = new TriggerCondition();\r\n        that.trigger = this.trigger;\r\n        return that;\r\n    }\r\n\r\n    [createEval] (context: ConditionBindingContext): ConditionEval {\r\n        const evaluation = new TriggerConditionEval(false);\r\n        const triggerInstance = context.getVar(this.trigger);\r\n        if (validateVariableExistence(triggerInstance, this.trigger)) {\r\n            validateVariableTypeTriggerLike(triggerInstance.type, this.trigger);\r\n            evaluation.setTrigger(triggerInstance.bind(\r\n                evaluation.setTrigger,\r\n                evaluation,\r\n            ) as boolean);\r\n        }\r\n        return evaluation;\r\n    }\r\n}\r\n\r\nclass TriggerConditionEval implements ConditionEval {\r\n    constructor (triggered: boolean) {\r\n        this._triggered = triggered;\r\n    }\r\n\r\n    public setTrigger (trigger: boolean): void {\r\n        this._triggered = trigger;\r\n    }\r\n\r\n    public eval (): boolean {\r\n        return this._triggered;\r\n    }\r\n\r\n    private _triggered = false;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../define';\r\nimport type { AnimationController, MotionStateStatus } from '../animation-controller';\r\n\r\n/**\r\n * @en State machine component.\r\n * @zh 状态机组件。\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}StateMachineComponent`)\r\nexport class StateMachineComponent {\r\n    /**\r\n     * @en\r\n     * Called when a motion state right after it entered.\r\n     * @zh\r\n     * 在刚刚进入动作状态时调用。\r\n     * @param controller The animation controller it within.\r\n     * @param motionStateStatus The status of the motion.\r\n     */\r\n    public onMotionStateEnter (controller: AnimationController, motionStateStatus: Readonly<MotionStateStatus>): void {\r\n        // Can be overrode\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Called when a motion state is going to be exited.\r\n     * @zh\r\n     * 在即将退出动作状态时调用。\r\n     * @param controller The animation controller it within.\r\n     * @param motionStateStatus The status of the motion.\r\n     */\r\n    public onMotionStateExit (controller: AnimationController, motionStateStatus: Readonly<MotionStateStatus>): void {\r\n        // Can be overrode\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Called when a motion state updated except for the first and last frame.\r\n     * @zh\r\n     * 在动作状态更新时调用，但不会在第一次和最后一次时调用。\r\n     * @param controller The animation controller it within.\r\n     * @param motionStateStatus The status of the motion.\r\n     */\r\n    public onMotionStateUpdate (controller: AnimationController, motionStateStatus: Readonly<MotionStateStatus>): void {\r\n        // Can be overrode\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Called when a state machine right after it entered.\r\n     * @zh\r\n     * 在刚刚进入状态机时调用。\r\n     * @param controller The animation controller it within.\r\n     */\r\n    public onStateMachineEnter (controller: AnimationController): void {\r\n        // Can be overrode\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Called when a state machine is going to be exited.\r\n     * @zh\r\n     * 在即将退出状态机时调用。\r\n     * @param controller The animation controller it within.\r\n     */\r\n    public onStateMachineExit (controller: AnimationController): void {\r\n        // Can be overrode\r\n    }\r\n}\r\n","import { Vec3 } from '../../core/math/vec3';\r\nimport { Quat } from '../../core/math/quat';\r\nimport { Transform } from './transform';\r\n\r\nconst TRANSFORM_STRIDE_IN_FLOATS = 10;\r\n\r\nconst TRANSFORM_STRIDE_IN_BYTES = Float64Array.BYTES_PER_ELEMENT * TRANSFORM_STRIDE_IN_FLOATS;\r\n\r\nconst ROTATION_OFFSET = 3;\r\n\r\nconst SCALE_OFFSET = ROTATION_OFFSET + 4;\r\n\r\nconst vec3FromArray = Vec3.fromArray;\r\nconst vec3ToArray = Vec3.toArray;\r\nconst quatFromArray = Quat.fromArray;\r\nconst quatToArray = Quat.toArray;\r\n\r\n/**\r\n * Array-buffer-based transform array.\r\n */\r\nexport class TransformArray {\r\n    public static get BYTES_PER_ELEMENT (): number {\r\n        return TRANSFORM_STRIDE_IN_BYTES;\r\n    }\r\n\r\n    constructor (length?: number);\r\n\r\n    constructor (buffer: ArrayBuffer, byteOffset?: number, length?: number);\r\n\r\n    constructor (bufferOrLength?: number | ArrayBuffer, byteOffset?: number, length_?: number) {\r\n        if (typeof bufferOrLength === 'undefined') {\r\n            this._data = new Float64Array();\r\n        } else if (typeof bufferOrLength === 'number') {\r\n            this._data = new Float64Array(TRANSFORM_STRIDE_IN_FLOATS * bufferOrLength);\r\n        } else {\r\n            this._data = new Float64Array(\r\n                bufferOrLength,\r\n                byteOffset,\r\n                typeof length_ === 'number' ? TRANSFORM_STRIDE_IN_FLOATS * length_ : undefined,\r\n            );\r\n        }\r\n    }\r\n\r\n    get buffer (): ArrayBufferLike {\r\n        return this._data.buffer;\r\n    }\r\n\r\n    get byteLength (): number {\r\n        return this._data.byteLength;\r\n    }\r\n\r\n    get byteOffset (): number {\r\n        return this._data.byteOffset;\r\n    }\r\n\r\n    get length (): number {\r\n        return this._data.length / TRANSFORM_STRIDE_IN_FLOATS;\r\n    }\r\n\r\n    public getTransform (index: number, out: Transform): Transform {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const {\r\n            position,\r\n            rotation,\r\n            scale,\r\n        } = out;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        vec3FromArray(position, data, baseOffset);\r\n        quatFromArray(rotation, data, baseOffset + ROTATION_OFFSET);\r\n        vec3FromArray(scale, data, baseOffset + SCALE_OFFSET);\r\n        return out;\r\n    }\r\n\r\n    public getPosition (index: number, out: Vec3): Vec3 {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        vec3FromArray(out, data, baseOffset);\r\n        return out;\r\n    }\r\n\r\n    public getRotation (index: number, out: Quat): Quat {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        quatFromArray(out, data, baseOffset + ROTATION_OFFSET);\r\n        return out;\r\n    }\r\n\r\n    public getScale (index: number, out: Vec3): Vec3 {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        vec3FromArray(out, data, baseOffset + SCALE_OFFSET);\r\n        return out;\r\n    }\r\n\r\n    public setTransform (index: number, value: Readonly<Transform>): void {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const {\r\n            position,\r\n            rotation,\r\n            scale,\r\n        } = value;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        vec3ToArray(data, position, baseOffset);\r\n        quatToArray(data, rotation, baseOffset + ROTATION_OFFSET);\r\n        vec3ToArray(data, scale, baseOffset + SCALE_OFFSET);\r\n    }\r\n\r\n    public setPosition (index: number, value: Readonly<Vec3>): void {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        vec3ToArray(data, value, baseOffset);\r\n    }\r\n\r\n    public setRotation (index: number, value: Readonly<Quat>): void {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        quatToArray(data, value, baseOffset + ROTATION_OFFSET);\r\n    }\r\n\r\n    public setScale (index: number, value: Readonly<Vec3>): void {\r\n        const {\r\n            _data: data,\r\n        } = this;\r\n        const baseOffset = TRANSFORM_STRIDE_IN_FLOATS * index;\r\n        vec3ToArray(data, value, baseOffset + SCALE_OFFSET);\r\n    }\r\n\r\n    /**\r\n     * Same algorithm as https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\r\n     * except for the the operating objects are transforms.\r\n     */\r\n    public copyWithin (target: number, start: number, end?: number): void {\r\n        this._data.copyWithin(\r\n            target * TRANSFORM_STRIDE_IN_FLOATS,\r\n            start * TRANSFORM_STRIDE_IN_FLOATS,\r\n            typeof end === 'number' ? end * TRANSFORM_STRIDE_IN_FLOATS : undefined,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Same algorithm as https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill\r\n     * except for the the operating objects are transforms.\r\n     */\r\n    public fill (value: Readonly<Transform>, start?: number, end?: number): void {\r\n        const { length } = this;\r\n        start ??= 0;\r\n        end ??= length;\r\n        if (start >= length) {\r\n            return;\r\n        }\r\n        this.setTransform(start, value);\r\n        for (let i = start + 1; i < end; ++i) {\r\n            this.copyWithin(i, start, start + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Same as `this.fill(Transform.ZERO, start, end)`.\r\n     */\r\n    public fillZero (start?: number, end?: number): void {\r\n        this._data.fill(\r\n            0.0,\r\n            typeof start === 'number' ? start * TRANSFORM_STRIDE_IN_FLOATS : undefined,\r\n            typeof end === 'number' ? end * TRANSFORM_STRIDE_IN_FLOATS : undefined,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Same algorithm as https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\r\n     * except for:\r\n     * - the the operating objects are transforms,\r\n     * - plain array is not allowed.\r\n     */\r\n    public set (transformArray: Readonly<TransformArray>, targetOffset?: number): void {\r\n        this._data.set(\r\n            (transformArray as TransformArray)._data,\r\n            typeof targetOffset === 'number' ? targetOffset * TRANSFORM_STRIDE_IN_FLOATS : undefined,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Same algorithm as https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice\r\n     * except for the the operating objects are transforms.\r\n     */\r\n    public slice (start?: number, end?: number): TransformArray {\r\n        const dataSliced = this._data.slice(\r\n            typeof start === 'number' ? start * TRANSFORM_STRIDE_IN_FLOATS : undefined,\r\n            typeof end === 'number' ? end * TRANSFORM_STRIDE_IN_FLOATS : undefined,\r\n        );\r\n        return new TransformArray(dataSliced.buffer, dataSliced.byteOffset, dataSliced.length / TRANSFORM_STRIDE_IN_FLOATS);\r\n    }\r\n\r\n    /**\r\n     * Copy a span of `source` into `this`.\r\n     * Equivalent to `this.set(source.slice(sourceOffset, sourceOffset + size), targetOffset)`\r\n     * except without perform the slicing.\r\n     * */\r\n    public copyRange (\r\n        targetOffset: number,\r\n        source: Readonly<TransformArray>,\r\n        sourceOffset: number,\r\n        size: number,\r\n    ): void {\r\n        const sizeInFloats = TRANSFORM_STRIDE_IN_FLOATS * size;\r\n\r\n        const targetFloats = this._data;\r\n        const targetStartInFloats = TRANSFORM_STRIDE_IN_FLOATS * targetOffset;\r\n\r\n        const sourceFloats = (source as TransformArray)._data;\r\n        const sourceStartInFloats = TRANSFORM_STRIDE_IN_FLOATS * sourceOffset;\r\n\r\n        for (let i = 0; i < sizeInFloats; ++i) {\r\n            targetFloats[targetStartInFloats + i] = sourceFloats[sourceStartInFloats + i];\r\n        }\r\n    }\r\n\r\n    private _data: Float64Array;\r\n}\r\n","import { DEBUG, TEST } from 'internal:constants';\r\nimport { assertIsTrue, binarySearchEpsilon } from '../../core';\r\n\r\nconst allocatorPageCountTag = Symbol(DEBUG ? '[[The count of pages used by this allocator.]]' : '');\r\n\r\nconst onStackPurgedTag = Symbol(DEBUG ? `[[Notify that theres is no allocator on the stack anymore.]]` : '');\r\n\r\nclass SharedMemoryPage {\r\n    constructor (byteLength: number) {\r\n        this.buffer = new ArrayBuffer(byteLength);\r\n    }\r\n\r\n    public readonly buffer: ArrayBuffer;\r\n\r\n    public useCount = 0;\r\n}\r\n\r\nclass PagedStack {\r\n    constructor (private _manager: SharedStackBasedAllocatorManager, private _pageSize: number) {\r\n    }\r\n\r\n    get pageSize (): number {\r\n        return this._pageSize;\r\n    }\r\n\r\n    get debugLocking (): boolean {\r\n        return this._locking;\r\n    }\r\n\r\n    public get allocatorCount (): number {\r\n        return this._allocatorCount;\r\n    }\r\n\r\n    public debugLock (): void {\r\n        assertIsTrue(!this._locking, `The memory is locking.`);\r\n        this._locking = true;\r\n    }\r\n\r\n    public debugUnlock (): void {\r\n        assertIsTrue(this._locking, `Wrong execution logic: the memory is not locking.`);\r\n        this._locking = false;\r\n    }\r\n\r\n    public getPageMemory (index: number): ArrayBuffer {\r\n        assertIsTrue(index >= 0 && index < this._pages.length, `Page index out of range`);\r\n        return this._pages[index].buffer;\r\n    }\r\n\r\n    public pushPage (allocator: SharedStackBasedAllocator): SharedMemoryPage {\r\n        const oldAllocatorPageCount = allocator[allocatorPageCountTag];\r\n\r\n        assertIsTrue(oldAllocatorPageCount <= this._pages.length);\r\n        if (oldAllocatorPageCount === this._pages.length) {\r\n            this._pushNewPage();\r\n        }\r\n        assertIsTrue(oldAllocatorPageCount < this._pages.length);\r\n\r\n        const page = this._pages[oldAllocatorPageCount];\r\n        ++page.useCount;\r\n        ++allocator[allocatorPageCountTag];\r\n\r\n        return page;\r\n    }\r\n\r\n    public popPage (allocator: SharedStackBasedAllocator): void {\r\n        const allocatorPageCount = allocator[allocatorPageCountTag];\r\n        assertIsTrue(allocatorPageCount > 0);\r\n        const allocatorLastPageIndex = allocatorPageCount - 1;\r\n        const lastPage = this._pages[allocatorLastPageIndex];\r\n        assertIsTrue(lastPage.useCount > 0);\r\n\r\n        --lastPage.useCount;\r\n        --allocator[allocatorPageCountTag];\r\n\r\n        // If the page has no users, remove it.\r\n        if (lastPage.useCount === 0) {\r\n            // \"The page has no users\" also means that it's the last page in our list.\r\n            assertIsTrue(allocatorLastPageIndex === this._pages.length - 1);\r\n            this._pages.pop();\r\n        }\r\n    }\r\n\r\n    public createAllocator (sliceSize: number): SharedStackBasedAllocator {\r\n        const allocator = new SharedStackBasedAllocator(this, sliceSize);\r\n        ++this._allocatorCount;\r\n        return allocator;\r\n    }\r\n\r\n    public destroyAllocator (allocator: SharedStackBasedAllocator): void {\r\n        // Decrease use count of all pages used by the allocator.\r\n        const allocatorPageCount = allocator[allocatorPageCountTag];\r\n        for (let iPage = 0; iPage < allocatorPageCount; ++iPage) {\r\n            const page = this._pages[iPage];\r\n            assertIsTrue(page.useCount > 0);\r\n            --page.useCount;\r\n        }\r\n\r\n        assertIsTrue(this._allocatorCount > 0);\r\n        --this._allocatorCount;\r\n\r\n        // If we no longer have allocator, notify manager for possible further cleanup.\r\n        if (this._allocatorCount === 0) {\r\n            this._manager[onStackPurgedTag](this);\r\n        }\r\n    }\r\n\r\n    private _locking = false;\r\n\r\n    private _pages: SharedMemoryPage[] = [];\r\n    private _allocatorCount = 0;\r\n\r\n    private _pushNewPage (): void {\r\n        const newPage = new SharedMemoryPage(this._pageSize);\r\n        this._pages.push(newPage);\r\n    }\r\n}\r\n\r\nclass SharedMemorySlice {\r\n    constructor (\r\n        public readonly buffer: ArrayBuffer,\r\n        public readonly byteOffset: number,\r\n    ) {\r\n    }\r\n}\r\n\r\n/**\r\n * Dev note:\r\n * - `push()` do create new object(SharedMemorySlice) and do array push-back, no caching.\r\n * - `pop()` do array pop-back.\r\n */\r\nclass SharedStackBasedAllocator {\r\n    [allocatorPageCountTag] = 0;\r\n\r\n    constructor (\r\n        private _resource: PagedStack,\r\n        private _sliceSize: number,\r\n    ) {\r\n        const slicesPerPage = Math.floor(this._resource.pageSize / _sliceSize);\r\n        assertIsTrue(slicesPerPage > 0);\r\n        this._slicesPerPage = slicesPerPage;\r\n    }\r\n\r\n    public get isEmpty (): boolean {\r\n        return this._slices.length === 0;\r\n    }\r\n\r\n    public destroy (): void {\r\n        assertIsTrue(this._slices.length === 0, `Can not destroy the allocator since it's not empty.`);\r\n        assertIsTrue(!this._resource.debugLocking, `Can not destroy the allocator since it's locking.`);\r\n\r\n        this._resource.destroyAllocator(this);\r\n    }\r\n\r\n    public debugLock (): void {\r\n        this._resource.debugLock();\r\n    }\r\n\r\n    public debugUnlock (): void {\r\n        this._resource.debugUnlock();\r\n    }\r\n\r\n    public push (): SharedMemorySlice {\r\n        const {\r\n            _sliceSize: sliceLength,\r\n            _slices: slices,\r\n            _slicesPerPage: slicesPerPage,\r\n        } = this;\r\n\r\n        const desiredSliceIndex = slices.length;\r\n\r\n        let newSliceIndexInPage = 0;\r\n        let newSlicePageIndex = 0;\r\n\r\n        // Specially handle 0 slice length.\r\n        if (sliceLength === 0) {\r\n            // If the slice length is 0, we ensure this allocator has and has only one page.\r\n            // All slices use this page then.\r\n            if (this[allocatorPageCountTag] === 0) {\r\n                this._resource.pushPage(this);\r\n            }\r\n            assertIsTrue(this[allocatorPageCountTag] === 1);\r\n        } else {\r\n            const capacity = slicesPerPage * this[allocatorPageCountTag];\r\n            assertIsTrue(desiredSliceIndex <= capacity);\r\n            if (desiredSliceIndex === capacity) {\r\n                // We need more pages.\r\n                this._resource.pushPage(this);\r\n                assertIsTrue(desiredSliceIndex < slicesPerPage * this[allocatorPageCountTag]);\r\n            }\r\n\r\n            newSliceIndexInPage = desiredSliceIndex % slicesPerPage;\r\n            newSlicePageIndex = (desiredSliceIndex - newSliceIndexInPage) / slicesPerPage;\r\n            assertIsTrue(this[allocatorPageCountTag] * slicesPerPage >= desiredSliceIndex);\r\n        }\r\n\r\n        const pageMemory = this._resource.getPageMemory(newSlicePageIndex);\r\n        const newSlice = new SharedMemorySlice(\r\n            pageMemory,\r\n            sliceLength * newSliceIndexInPage,\r\n        );\r\n        this._slices.push(newSlice);\r\n        return newSlice;\r\n    }\r\n\r\n    public pop (): void {\r\n        const {\r\n            _slices: slices,\r\n            _slicesPerPage: slicesPerPage,\r\n        } = this;\r\n\r\n        const allocatedCount = slices.length;\r\n        assertIsTrue(allocatedCount > 0);\r\n\r\n        const removingSliceIndex = allocatedCount - 1;\r\n        if (this._sliceSize === 0) {\r\n            // If the slice length is 0, we should pop page if we're popping the last slice,\r\n            // it's the only page in this allocator.\r\n            assertIsTrue(this[allocatorPageCountTag] === 1);\r\n            if (removingSliceIndex === 0) {\r\n                this._resource.popPage(this);\r\n            }\r\n        } else {\r\n            const removingSliceIndexInPage = removingSliceIndex % slicesPerPage;\r\n            if (removingSliceIndexInPage === 0) {\r\n                // Now that the last(beginning) slice of last page is pop-ed,\r\n                // we pop the last page.\r\n                this._resource.popPage(this);\r\n            }\r\n        }\r\n\r\n        this._slices.pop();\r\n    }\r\n\r\n    private _slicesPerPage = 0;\r\n\r\n    private _slices: SharedMemorySlice[] = [];\r\n}\r\n\r\nexport class SharedStackBasedAllocatorManager {\r\n    constructor (private _thresholds: number[]) {\r\n        assertIsTrue(_thresholds.every((v, i, arr) => i === 0 || v > arr[i - 1]));\r\n    }\r\n\r\n    public get isEmpty (): boolean {\r\n        return this._stacks.size === 0;\r\n    }\r\n\r\n    public createAllocator (pageSize: number): SharedStackBasedAllocator {\r\n        const allocationPageSize = pageSize;\r\n\r\n        // Select stack page size according to allocation page size and threshold.\r\n        const stackPageSize = this._selectStackPageSize(allocationPageSize);\r\n\r\n        // Get or create stack.\r\n        let stack = this._stacks.get(stackPageSize);\r\n        if (!stack) {\r\n            stack = new PagedStack(this, stackPageSize);\r\n            this._stacks.set(stackPageSize, stack);\r\n        }\r\n\r\n        // Create the allocator.\r\n        return stack.createAllocator(allocationPageSize);\r\n    }\r\n\r\n    public [onStackPurgedTag] (stack: PagedStack): void {\r\n        let stackFound = false;\r\n        for (const [k, v] of this._stacks) {\r\n            if (v === stack) {\r\n                this._stacks.delete(k);\r\n                stackFound = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!stackFound) {\r\n            assertIsTrue(false, `Given allocator is not of mime.`);\r\n        }\r\n    }\r\n\r\n    private _stacks = new Map<number, PagedStack>();\r\n\r\n    private _selectStackPageSize (allocationPageSize: number): number {\r\n        let thresholdIndex = binarySearchEpsilon(this._thresholds, allocationPageSize);\r\n        let stackPageSize = allocationPageSize;\r\n        if (thresholdIndex >= 0) {\r\n            stackPageSize = this._thresholds[thresholdIndex];\r\n        } else {\r\n            thresholdIndex = ~thresholdIndex;\r\n            if (thresholdIndex === this._thresholds.length) {\r\n                // If stack beyonds the max threshold, no shared.\r\n            } else {\r\n                assertIsTrue(thresholdIndex >= 0 && thresholdIndex < this._thresholds.length);\r\n                stackPageSize = this._thresholds[thresholdIndex];\r\n            }\r\n        }\r\n        return stackPageSize;\r\n    }\r\n}\r\n\r\nexport type { SharedStackBasedAllocator };\r\n","import { assertIsTrue } from '../../core/data/utils/asserts';\r\nimport { Pose } from './pose';\r\nimport { TransformArray } from './transform-array';\r\nimport { SharedStackBasedAllocator, SharedStackBasedAllocatorManager } from './shared-stack-based-allocator';\r\n\r\nexport class PoseStackAllocator {\r\n    constructor (transformCount: number, auxiliaryCurveCount: number) {\r\n        this._transformCount = transformCount;\r\n        this._auxiliaryCurveCount = auxiliaryCurveCount;\r\n\r\n        const poseBytes = calculateRequiredBytes(\r\n            transformCount,\r\n            auxiliaryCurveCount,\r\n            1,\r\n        );\r\n\r\n        this._memoryAllocator = globalPosePageMemoryAllocatorManager.createAllocator(poseBytes);\r\n    }\r\n\r\n    public destroy (): void {\r\n        assertIsTrue(this._allocatedCount === 0, `Can not destroy the allocator since it's not empty.`);\r\n\r\n        for (let iPose = 0; iPose < this._poses.length; ++iPose) {\r\n            this._memoryAllocator.pop();\r\n        }\r\n\r\n        this._poses.length = 0;\r\n\r\n        return this._memoryAllocator.destroy();\r\n    }\r\n\r\n    public get allocatedCount (): number {\r\n        return this._allocatedCount;\r\n    }\r\n\r\n    public push (): Pose {\r\n        // Lock the allocator when pushing first pose.\r\n        if (this._allocatedCount === 0) {\r\n            this._memoryAllocator.debugLock();\r\n        }\r\n\r\n        if (this._allocatedCount === this._poses.length) {\r\n            this._allocateNewPose();\r\n            assertIsTrue(this._allocatedCount < this._poses.length);\r\n        }\r\n\r\n        const pose = this._poses[this._allocatedCount];\r\n\r\n        ++this._allocatedCount;\r\n\r\n        return pose;\r\n    }\r\n\r\n    public pop (): void {\r\n        assertIsTrue(this._allocatedCount > 0, `PoseStackAllocator: push/pop does not match.`);\r\n\r\n        --this._allocatedCount;\r\n\r\n        // Unlock the allocator while popping last pose.\r\n        if (this._allocatedCount === 0) {\r\n            this._memoryAllocator.debugUnlock();\r\n        }\r\n\r\n        // Note: we don't actually free the pose -- only destroy() will free the pose.\r\n        // This does not cause big problem since all pose allocators share the same stack memory.\r\n    }\r\n\r\n    get top (): Pose {\r\n        assertIsTrue(this._allocatedCount > 0);\r\n        return this._poses[this._allocatedCount - 1];\r\n    }\r\n\r\n    private _poses: Pose[] = [];\r\n\r\n    private declare readonly _transformCount: number;\r\n\r\n    private declare readonly _auxiliaryCurveCount: number;\r\n\r\n    private _allocatedCount = 0;\r\n\r\n    private _memoryAllocator: SharedStackBasedAllocator;\r\n\r\n    private _allocateNewPose (): void {\r\n        const slice = this._memoryAllocator.push();\r\n        const transformsByteLength = TransformArray.BYTES_PER_ELEMENT * this._transformCount;\r\n        const baseOffset = slice.byteOffset;\r\n        const transforms = new TransformArray(slice.buffer, baseOffset, this._transformCount);\r\n        const auxiliaryCurves = new Float64Array(slice.buffer, baseOffset + transformsByteLength, this._auxiliaryCurveCount);\r\n        const pose = Pose._create(transforms, auxiliaryCurves);\r\n        this._poses.push(pose);\r\n    }\r\n}\r\n\r\nfunction calculateRequiredBytes (\r\n    transformCount: number,\r\n    auxiliaryCurveCount: number,\r\n    capacity: number,\r\n): number {\r\n    return (TransformArray.BYTES_PER_ELEMENT * transformCount\r\n        + Float64Array.BYTES_PER_ELEMENT * auxiliaryCurveCount) * capacity;\r\n}\r\n\r\nconst PAGE_SIZE = calculateRequiredBytes(128, 10, 4);\r\n\r\nconst globalPosePageMemoryAllocatorManager = new SharedStackBasedAllocatorManager([\r\n    PAGE_SIZE,\r\n]);\r\n","import { ccenum } from '../../../../core';\r\n\r\n/**\r\n * @zh\r\n * 表示某些姿势图结点在接受变换输入（包括整个变换或者单独的位置旋转）时，\r\n * 该变换所在的空间。\r\n * @en\r\n * Represents the space of input transforms(including whole transform or individual position or rotation)\r\n * accepted by certain pose graph nodes.\r\n */\r\nexport enum TransformSpace {\r\n    /**\r\n     * @zh 表示该变换是在世界空间中描述的。\r\n     * @en Indicates the transform is described in world space.\r\n     */\r\n    WORLD,\r\n\r\n    /**\r\n     * @zh 表示该变换是在动画图所在组件（即动画控制器组件）的所属结点的本地空间中描述的。\r\n     * @en Indicates the transform is described in local space of the node\r\n     * to which the animation graph's belonging component(ie. the animation controller) is attached.\r\n     */\r\n    COMPONENT,\r\n\r\n    /**\r\n     * @zh 表示该变换是在应用到的目标结点的父结点的本地空间中描述的。\r\n     * @en Indicates the transform is described in local space of the applying node(bone).\r\n     */\r\n    PARENT,\r\n\r\n    /**\r\n     * @zh 表示该变换是在应用到的目标结点的本地空间中描述的。\r\n     * @en Indicates the transform is described in local space of the applying node(bone).\r\n     */\r\n    LOCAL,\r\n}\r\n\r\nccenum(TransformSpace);\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @zh\r\n * 就地重新排列数组中的元素，\r\n * 使所有令谓词 `predicate` 返回 `true`的元素都排在所有令谓词 `predicate` 返回 `false`的元素前面。\r\n * 不会保留元素的相对顺序。\r\n * @en\r\n * Reorders the elements in array **in place** in such a way that\r\n * all elements for which the predicate `predicate` returns `true` precede\r\n * the elements for which predicates `predicate` returns `false`.\r\n * Relative order of the elements is *NOT* preserved.\r\n * @param array @zh 输入数组。 @en The input array.\r\n * @param predicate @zh 谓词，当元素应该被排列在其它元素前面时返回 `true`。\r\n *                  @en The predicate which returns `true` if the element should be ordered before other elements.\r\n * @returns @zh 第一组元素的个数。\r\n *          @en The number of elements in the first group.\r\n * @example\r\n * ```ts\r\n * const array = [7, 1, 2, 4, 3];\r\n * const nFirstGroupElements = partition(array, (v) => v % 2 === 0);\r\n * log(nFirstGroupElements); // 2\r\n * log(array); // [2, 4, 7, 1, 3]\r\n * log(array.slice(0, nFirstGroupElements)); // [2, 4]\r\n * log(array.slice(nFirstGroupElements)); // [7, 1, 3]\r\n * ```\r\n */\r\nexport function partition<T> (array: T[], predicate: (element: T, index: number, array: T[]) => boolean): number {\r\n    const nElements = array.length;\r\n\r\n    // Finds the first element to be placed into second group(predicate to false).\r\n    let iFirstGroup2Element = 0;\r\n    for (; iFirstGroup2Element < nElements; ++iFirstGroup2Element) {\r\n        const element = array[iFirstGroup2Element];\r\n        if (!predicate(element, iFirstGroup2Element, array)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    // If no element should be placed into seconds group. Do nothing.\r\n    if (iFirstGroup2Element === nElements) {\r\n        return nElements;\r\n    }\r\n\r\n    let nGroup1 = iFirstGroup2Element;\r\n    for (let iElement = iFirstGroup2Element + 1; iElement < nElements; ++iElement) {\r\n        const element = array[iElement];\r\n        const isFirstGroupElement = predicate(element, iElement, array);\r\n        if (isFirstGroupElement) {\r\n            // Swap to front.\r\n            const t = element;\r\n            array[iElement] = array[nGroup1];\r\n            array[nGroup1] = t;\r\n            ++nGroup1;\r\n        }\r\n    }\r\n    return nGroup1;\r\n}\r\n","import { TEST } from 'internal:constants';\r\nimport { assertIsTrue } from '../../core/data/utils/asserts';\r\nimport { Pose } from './pose';\r\nimport { TransformArray } from './transform-array';\r\n\r\nconst MAX_POSE_PER_PAGE = 8;\r\n\r\nconst allocationInfoTag = Symbol('PoseHeapAllocator');\r\n\r\ntype PagedPose = Pose & {\r\n    [allocationInfoTag]: AllocationInfo;\r\n};\r\n\r\nfunction isPagedPose (pose: Pose): pose is PagedPose {\r\n    return allocationInfoTag in pose;\r\n}\r\n\r\nconst POSE_ALLOCATOR_DEBUG_FULL = TEST;\r\n\r\nexport class PoseHeapAllocator {\r\n    constructor (transformCount: number, metaValueCount: number) {\r\n        this._transformCount = transformCount;\r\n        this._metaValueCount = metaValueCount;\r\n    }\r\n\r\n    public get allocatedCount (): number {\r\n        return this._allocatedCount;\r\n    }\r\n\r\n    public allocatePose (): Pose {\r\n        ++this._allocatedCount;\r\n        const { _pages: pages } = this;\r\n        const nPages = pages.length;\r\n\r\n        // Debug check our promise on `this._foremostPossibleFreePage`.\r\n        if (POSE_ALLOCATOR_DEBUG_FULL) {\r\n            for (let iPage = 0; iPage < this._foremostPossibleFreePage; ++iPage) {\r\n                const page = pages[iPage];\r\n                assertIsTrue(page.freeCount === 0);\r\n            }\r\n        }\r\n\r\n        for (let iPage = this._foremostPossibleFreePage; iPage < nPages; ++iPage) {\r\n            const page = pages[iPage];\r\n            const pose = page.tryAllocate();\r\n            if (pose) {\r\n                pose[allocationInfoTag].pageIndex = iPage;\r\n                if (page.freeCount === 0) {\r\n                    // Only step one, even the next page is not free.\r\n                    ++this._foremostPossibleFreePage;\r\n                }\r\n                return pose;\r\n            }\r\n        }\r\n\r\n        const pose = this._allocatePoseInNewPage();\r\n        // Update the flag, no matter if its capacity is 1.\r\n        this._foremostPossibleFreePage = pose[allocationInfoTag].pageIndex;\r\n        return pose;\r\n    }\r\n\r\n    public destroyPose (pose: Pose): void {\r\n        assertIsTrue(isPagedPose(pose));\r\n        const { _pages: pages } = this;\r\n        const nPages = pages.length;\r\n        const pageIndex = pose[allocationInfoTag].pageIndex;\r\n        assertIsTrue(pageIndex >= 0 && pageIndex < nPages);\r\n        const page = pages[pageIndex];\r\n        page.deallocate(pose);\r\n        --this._allocatedCount;\r\n\r\n        // If the destruction performed on former page,\r\n        // update the flag so that next allocation find from this.\r\n        if (pageIndex < this._foremostPossibleFreePage) {\r\n            assertIsTrue(page.freeCount > 0);\r\n            this._foremostPossibleFreePage = pageIndex;\r\n        }\r\n    }\r\n\r\n    private _transformCount = 0;\r\n\r\n    private _metaValueCount = 0;\r\n\r\n    private _pages: PosePage[] = [];\r\n\r\n    private _allocatedCount = 0;\r\n\r\n    /**\r\n     * Index of the page that:\r\n     * - All former pages are busy.\r\n     * - This page and the following pages're possible having free location to allocate.\r\n     */\r\n    private _foremostPossibleFreePage = 0;\r\n\r\n    private _allocatePoseInNewPage (): PagedPose {\r\n        const page = new PosePage(this._transformCount, this._metaValueCount, 4);\r\n        const pageIndex = this._pages.length;\r\n        this._pages.push(page);\r\n        const pose = page.tryAllocate();\r\n        assertIsTrue(pose); // Shall not fail\r\n        pose[allocationInfoTag].pageIndex = pageIndex;\r\n        return pose;\r\n    }\r\n}\r\n\r\nclass AllocationInfo {\r\n    get pageIndex (): number {\r\n        return this._id >> POSE_INDEX_BITS;\r\n    }\r\n\r\n    set pageIndex (value) {\r\n        this._id &= POSE_INDEX_MASK;\r\n        this._id |= (value << POSE_INDEX_BITS);\r\n    }\r\n\r\n    get poseIndex (): number {\r\n        return this._id & POSE_INDEX_MASK;\r\n    }\r\n\r\n    set poseIndex (value) {\r\n        this._id &= ~POSE_INDEX_MASK;\r\n        this._id |= value;\r\n    }\r\n\r\n    /**\r\n     * ((page index) << POSE_INDEX_BITS) + (pose index into page)\r\n     */\r\n    private _id = -1;\r\n}\r\n\r\nconst POSE_INDEX_MASK = 0b111;\r\nconst POSE_INDEX_BITS = 3;\r\nassertIsTrue(POSE_INDEX_MASK + 1 >= MAX_POSE_PER_PAGE);\r\n\r\nclass PosePage {\r\n    constructor (private _transformCount: number, private _metaValueCount: number, private _capacity: number) {\r\n        const byteLength = (TransformArray.BYTES_PER_ELEMENT * _transformCount\r\n            + Float64Array.BYTES_PER_ELEMENT * _metaValueCount) * _capacity;\r\n        this._buffer = new ArrayBuffer(byteLength);\r\n        this._poses = new Array(_capacity).fill(null);\r\n        this._freeCount = _capacity;\r\n    }\r\n\r\n    get capacity (): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    get freeCount (): number {\r\n        return this._freeCount;\r\n    }\r\n\r\n    public tryAllocate (): PagedPose | null {\r\n        const { _poses: poses, _idleFlags: idleFlags, _capacity: capacity } = this;\r\n        const idlePoseIndex = findRightmostSetBit(idleFlags);\r\n        if (idlePoseIndex >= capacity) {\r\n            return null;\r\n        }\r\n        assertIsTrue(idlePoseIndex >= 0 && idlePoseIndex < poses.length);\r\n        const pose = poses[idlePoseIndex] ??= this._createPose(idlePoseIndex);\r\n        pose[allocationInfoTag].poseIndex = idlePoseIndex;\r\n        this._idleFlags &= ~(1 << idlePoseIndex);\r\n        assertIsTrue(this._freeCount > 0);\r\n        --this._freeCount;\r\n        return pose;\r\n    }\r\n\r\n    public deallocate (pose: PagedPose): void {\r\n        const { _poses: poses } = this;\r\n        const poseIndex = pose[allocationInfoTag].poseIndex;\r\n        assertIsTrue(poseIndex >= 0 && poseIndex < poses.length);\r\n        assertIsTrue(poses[poseIndex] === pose);\r\n        // Set as idle\r\n        this._idleFlags |= (1 << poseIndex);\r\n        assertIsTrue(this._freeCount < this._capacity);\r\n        ++this._freeCount;\r\n    }\r\n\r\n    private _buffer: ArrayBuffer;\r\n\r\n    private _idleFlags = 0xF;\r\n\r\n    private _poses: (PagedPose | null)[];\r\n\r\n    private _freeCount = 0;\r\n\r\n    private _createPose (index: number): PagedPose {\r\n        const transformsByteLength = TransformArray.BYTES_PER_ELEMENT * this._transformCount;\r\n        const baseOffset = (transformsByteLength\r\n            + Float64Array.BYTES_PER_ELEMENT * this._metaValueCount) * index;\r\n        const transforms = new TransformArray(this._buffer, baseOffset, this._transformCount);\r\n        const metaValues = new Float64Array(this._buffer, baseOffset + transformsByteLength, this._metaValueCount);\r\n        const pose = Pose._create(transforms, metaValues);\r\n        pose[allocationInfoTag] = new AllocationInfo();\r\n        return pose as PagedPose;\r\n    }\r\n}\r\n\r\nfunction findRightmostSetBit (bits: number): number {\r\n    // Math.log(2) === -Infinity\r\n    return bits === 0 ? Infinity : Math.log2(bits & -bits);\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { Node } from '../../scene-graph';\r\nimport { assertIsTrue } from '../../core/data/utils/asserts';\r\nimport { Pose, PoseTransformSpace, TransformFilter } from '../core/pose';\r\nimport { PoseStackAllocator } from '../core/pose-allocator';\r\nimport { TransformArray } from '../core/transform-array';\r\nimport { TransformHandle, AuxiliaryCurveHandle } from '../core/animation-handle';\r\nimport { Transform, ZERO_DELTA_TRANSFORM } from '../core/transform';\r\nimport { VarInstance } from './variable';\r\nimport { AnimationMask } from './animation-mask';\r\nimport { error } from '../../core';\r\nimport { partition } from '../../core/algorithm/partition';\r\nimport { AnimationController } from './animation-controller';\r\nimport { TransformSpace } from './pose-graph/pose-nodes/transform-space';\r\nimport { PoseStashAllocator, RuntimeStashView } from './pose-graph/stash/runtime-stash';\r\nimport { PoseHeapAllocator } from '../core/pose-heap-allocator';\r\nimport { RuntimeMotionSyncManager } from './pose-graph/motion-sync/runtime-motion-sync';\r\nimport { ReadonlyClipOverrideMap } from './clip-overriding';\r\n\r\n/**\r\n * This module contains stuffs related to animation graph's evaluation.\r\n *\r\n * The typical workflow to setup a animation graph evaluation is:\r\n *\r\n * At binding phase:\r\n * - Creates a `PoseLayoutMaintainer`.\r\n * - Creates a `AnimationGraphBindingContext`, which collects animation bindings and report them to the `PoseLayoutMaintainer`.\r\n * - Binding all portion of the animation graph under such a context.\r\n *\r\n * At each evaluation phase:\r\n * - Creates a (or reuse a) `AnimationGraphEvaluationContext`.\r\n * - Do the evaluation, generate a pose.\r\n * - Call `PoseLayoutMaintainer.apply()` to apply the pose into scene graph.\r\n *\r\n * When an override-clip request is fired, the binding phase is performed again.\r\n */\r\n\r\nfunction findBoneByNameRecursively (from: Node, name: string): Node | null {\r\n    if (from.name === name) {\r\n        return from;\r\n    }\r\n    const nChildren = from.children.length;\r\n    for (let iChild = 0; iChild < nChildren; ++iChild) {\r\n        const found = findBoneByNameRecursively(from.children[iChild], name);\r\n        if (found) {\r\n            return found;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport type VarRegistry = Record<string, VarInstance>;\r\n\r\nexport type TriggerResetter = (triggerName: string) => void;\r\n\r\nexport interface EvaluationTimeAuxiliaryCurveView {\r\n    get(curveName: string): number;\r\n}\r\n\r\n/**\r\n * The binding context of an animation graph.\r\n */\r\nexport class AnimationGraphBindingContext {\r\n    constructor (\r\n        origin: Node,\r\n        poseLayoutMaintainer: AnimationGraphPoseLayoutMaintainer,\r\n        varRegistry: VarRegistry,\r\n        private _controller: AnimationController,\r\n    ) {\r\n        this._origin = origin;\r\n        this._layoutMaintainer = poseLayoutMaintainer;\r\n        this._varRegistry = varRegistry;\r\n        this._additiveFlagStack = [false]; // By default, non-additive.\r\n    }\r\n\r\n    /**\r\n     * The origin node.\r\n     *\r\n     * The origin node is the origin from where the animation target start to resolve.\r\n     * It's now definitely the node hosting the running animation controller component.\r\n     */\r\n    get origin (): Node {\r\n        return this._origin;\r\n    }\r\n\r\n    /**\r\n     * The animation controller component currently running the animation graph.\r\n     */\r\n    get controller (): AnimationController {\r\n        return this._controller;\r\n    }\r\n\r\n    /**\r\n     * A free function to reset specified trigger.\r\n     * @internal This function should only be accessed by the builtin state machine.\r\n     */\r\n    get triggerResetter (): TriggerResetter {\r\n        return this._triggerResetter;\r\n    }\r\n\r\n    get clipOverrides (): ReadonlyClipOverrideMap | undefined {\r\n        return this._clipOverrides;\r\n    }\r\n\r\n    /**\r\n     * Returns if current context expects to have an additive pose.\r\n     */\r\n    get additive (): boolean {\r\n        const { _additiveFlagStack: additiveFlagStack } = this;\r\n        return additiveFlagStack[additiveFlagStack.length - 1];\r\n    }\r\n\r\n    public bindTransform (bone: string): TransformHandle | null {\r\n        const boneNode = this._origin.getChildByPath(bone);\r\n        if (!boneNode) {\r\n            return null;\r\n        }\r\n        return this._layoutMaintainer.getOrCreateTransformBinding(boneNode);\r\n    }\r\n\r\n    public bindTransformByName (bone: string): TransformHandle | null {\r\n        const boneNode = findBoneByNameRecursively(this._origin, bone);\r\n        if (!boneNode) {\r\n            return null;\r\n        }\r\n        return this._layoutMaintainer.getOrCreateTransformBinding(boneNode);\r\n    }\r\n\r\n    public getBoneChildren (bone: string): string[] {\r\n        const boneNode = findBoneByNameRecursively(this._origin, bone);\r\n        if (!boneNode) {\r\n            return [];\r\n        }\r\n        return boneNode.children.map((childNode) => childNode.name);\r\n    }\r\n\r\n    public getParentBoneNameByName (bone: string): string | null | undefined {\r\n        const boneNode = findBoneByNameRecursively(this._origin, bone);\r\n        if (!boneNode) {\r\n            return null;\r\n        }\r\n        return boneNode === this._origin ? '' : boneNode.parent?.name;\r\n    }\r\n\r\n    public bindAuxiliaryCurve (name: string): AuxiliaryCurveHandle {\r\n        return this._layoutMaintainer.getOrCreateAuxiliaryCurveBinding(name);\r\n    }\r\n\r\n    public getEvaluationTimeAuxiliaryCurveView (): EvaluationTimeAuxiliaryCurveView {\r\n        return this._layoutMaintainer.auxiliaryCurveRegistry;\r\n    }\r\n\r\n    public getVar (id: string): VarInstance | undefined {\r\n        return this._varRegistry[id];\r\n    }\r\n\r\n    /**\r\n     * Pushes the `additive` flag. A later `_popAdditiveFlag` is required to pop the change.\r\n     * @internal\r\n     */\r\n    public _pushAdditiveFlag (additive: boolean): void {\r\n        this._additiveFlagStack.push(additive);\r\n    }\r\n\r\n    /**\r\n     * Undo last `_pushAdditiveFlag`.\r\n     * @internal\r\n     */\r\n    public _popAdditiveFlag (): void {\r\n        assertIsTrue(this._additiveFlagStack.length > 1);\r\n        this._additiveFlagStack.pop();\r\n    }\r\n\r\n    /** @internal */\r\n    public _integrityCheck (): boolean {\r\n        return this._additiveFlagStack.length === 1;\r\n    }\r\n\r\n    public get stashView (): RuntimeStashView {\r\n        assertIsTrue(this._stashView);\r\n        return this._stashView;\r\n    }\r\n\r\n    public get motionSyncManager (): RuntimeMotionSyncManager {\r\n        assertIsTrue(this._motionSyncManager);\r\n        return this._motionSyncManager;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setLayerWideContextProperties (\r\n        stashView: RuntimeStashView,\r\n        motionSyncManager: RuntimeMotionSyncManager,\r\n    ): void {\r\n        assertIsTrue(!this._isLayerWideContextPropertiesSet);\r\n        this._isLayerWideContextPropertiesSet = true;\r\n        this._stashView = stashView;\r\n        this._motionSyncManager = motionSyncManager;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _unsetLayerWideContextProperties (): void {\r\n        assertIsTrue(this._isLayerWideContextPropertiesSet);\r\n        this._isLayerWideContextPropertiesSet = false;\r\n        this._stashView = undefined;\r\n        this._motionSyncManager = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setClipOverrides (clipOverrides: ReadonlyClipOverrideMap | undefined): void {\r\n        this._clipOverrides = clipOverrides;\r\n    }\r\n\r\n    private _origin: Node;\r\n\r\n    private _layoutMaintainer: AnimationGraphPoseLayoutMaintainer;\r\n\r\n    private _varRegistry: VarRegistry;\r\n\r\n    /** At least has one. */\r\n    private _additiveFlagStack: boolean[] = [];\r\n\r\n    private _triggerResetter: TriggerResetter = (name: string) => this._resetTrigger(name);\r\n\r\n    private _isLayerWideContextPropertiesSet = false;\r\n    private _stashView: RuntimeStashView | undefined;\r\n    private _motionSyncManager: RuntimeMotionSyncManager | undefined;\r\n    private _clipOverrides: ReadonlyClipOverrideMap | undefined = undefined;\r\n\r\n    private _resetTrigger (triggerName: string): void {\r\n        const varInstance = this._varRegistry[triggerName];\r\n        if (!varInstance) {\r\n            return;\r\n        }\r\n        varInstance.value = false;\r\n    }\r\n}\r\n\r\nconst cacheTransform = new Transform();\r\n\r\nexport class AuxiliaryCurveRegistry {\r\n    public names (): IterableIterator<string> {\r\n        return this._namedCurves.keys();\r\n    }\r\n\r\n    public has (name: string): boolean {\r\n        return this._namedCurves.has(name);\r\n    }\r\n\r\n    public get (name: string): number {\r\n        return this._namedCurves.get(name) ?? 0.0;\r\n    }\r\n\r\n    public set (name: string, value: number): void {\r\n        this._namedCurves.set(name, value);\r\n    }\r\n\r\n    private _namedCurves: Map<string, number> = new Map();\r\n}\r\n\r\nexport enum LayoutChangeFlag {\r\n    /**\r\n     * If this flag is set, means the transform count and order has been changed.\r\n     */\r\n    TRANSFORM_COUNT = 1,\r\n\r\n    /**\r\n     * If this flag is set, means the transform count is not change but the order has been changed.\r\n     */\r\n    TRANSFORM_ORDER = 2,\r\n\r\n    /**\r\n     * If this flag is set, means the auxiliary curve count has been changed.\r\n     */\r\n    AUXILIARY_CURVE_COUNT = 4,\r\n}\r\n\r\nconst checkBindStatus = (bindStarted = false): MethodDecorator => (_, _propertyKey, descriptor: TypedPropertyDescriptor<any>): void => {\r\n    if (!DEBUG) {\r\n        return;\r\n    }\r\n\r\n    const vendor = descriptor.value;\r\n    if (vendor) {\r\n        // eslint-disable-next-line func-names\r\n        descriptor.value = function (this: { readonly _bindStarted: boolean }, ...args: unknown[]): any {\r\n            assertIsTrue(\r\n                this._bindStarted === bindStarted,\r\n                bindStarted\r\n                    ? `The operation is invalid since bind has not been started.`\r\n                    : `The operation is invalid since bind has already been started.`,\r\n            );\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n            return vendor.call(this, ...args);\r\n        };\r\n    }\r\n};\r\n\r\nexport class AnimationGraphPoseLayoutMaintainer {\r\n    /**\r\n     * @param origin This node and all nodes under this node can be bound.\r\n     */\r\n    constructor (origin: Node, auxiliaryCurveRegistry: AuxiliaryCurveRegistry) {\r\n        this._origin = origin;\r\n        this._auxiliaryCurveRegistry = auxiliaryCurveRegistry;\r\n    }\r\n\r\n    get transformCount (): number {\r\n        return this._transformRecords.length;\r\n    }\r\n\r\n    get auxiliaryCurveCount (): number {\r\n        return this._auxiliaryCurveRecords.length;\r\n    }\r\n\r\n    get auxiliaryCurveRegistry (): { get(name: string): number; } {\r\n        return this._auxiliaryCurveRegistry;\r\n    }\r\n\r\n    @checkBindStatus(true)\r\n    public getOrCreateTransformBinding (node: Node): TransformHandleInternal | null {\r\n        const {\r\n            _origin: origin,\r\n        } = this;\r\n\r\n        // Ensure the node is origin or under origin.\r\n        let debugIntegrityCheckLengthOfPathToOrigin = 0;\r\n        let isValidNode = false;\r\n        for (let current: Node | null = node; current; current = current.parent) {\r\n            if (current === origin) {\r\n                isValidNode = true;\r\n                break;\r\n            }\r\n            if (DEBUG) {\r\n                ++debugIntegrityCheckLengthOfPathToOrigin;\r\n            }\r\n        }\r\n        if (!isValidNode) {\r\n            return null;\r\n        }\r\n\r\n        // Get or create the handle for the node.\r\n        const handle = this._getOrCreateTransformBinding(node);\r\n\r\n        // Also try to create handles for ancestors if we're not bounding origin.\r\n        // In other words, origin is not bound by default\r\n        // except that you explicitly bind to it.\r\n        if (node !== origin) {\r\n            if (DEBUG) {\r\n                --debugIntegrityCheckLengthOfPathToOrigin;\r\n                assertIsTrue(debugIntegrityCheckLengthOfPathToOrigin >= 0);\r\n            }\r\n\r\n            for (let parent: Node | null = node.parent; parent !== origin; parent = parent.parent) {\r\n                assertIsTrue(parent);\r\n                // But discard the result.\r\n                // eslint-disable-next-line no-void\r\n                void this._getOrCreateTransformBinding(parent);\r\n\r\n                if (DEBUG) {\r\n                    --debugIntegrityCheckLengthOfPathToOrigin;\r\n                    assertIsTrue(debugIntegrityCheckLengthOfPathToOrigin >= 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (DEBUG) {\r\n            assertIsTrue(debugIntegrityCheckLengthOfPathToOrigin === 0);\r\n        }\r\n\r\n        return handle;\r\n    }\r\n\r\n    @checkBindStatus(true)\r\n    private _getOrCreateTransformBinding (node: Node): TransformHandleInternal {\r\n        const { _transformRecords: transformRecords } = this;\r\n\r\n        const transformIndex = transformRecords.findIndex((transformRecord) => transformRecord.node === node);\r\n        if (transformIndex >= 0) {\r\n            const transformRecord = transformRecords[transformIndex];\r\n            ++transformRecord.refCount;\r\n            return transformRecord.handle;\r\n        }\r\n\r\n        // Ensure parent is preceding to children.\r\n        let newNodeIndex = 0;\r\n        for (let parent = node.parent; parent; parent = parent.parent) {\r\n            const parentIndex = transformRecords.findIndex((transformRecord) => transformRecord.node === parent);\r\n            if (parentIndex >= 0) {\r\n                newNodeIndex = parentIndex + 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Update necessary bone handle.\r\n        for (let transformIndex = newNodeIndex; transformIndex < transformRecords.length; ++transformIndex) {\r\n            ++transformRecords[transformIndex].handle.index;\r\n        }\r\n\r\n        // Insert new transform record.\r\n        const transformRecord = new TransformRecord(\r\n            new TransformHandleInternal(this, newNodeIndex),\r\n            node,\r\n        );\r\n        transformRecords.splice(newNodeIndex, 0, transformRecord);\r\n\r\n        return transformRecord.handle;\r\n    }\r\n\r\n    @checkBindStatus(true)\r\n    public getOrCreateAuxiliaryCurveBinding (name: string): AuxiliaryCurveHandleInternal {\r\n        const { _auxiliaryCurveRecords: auxiliaryCurveRecords } = this;\r\n\r\n        const auxiliaryCurveIndex = auxiliaryCurveRecords.findIndex((record) => record.name === name);\r\n        if (auxiliaryCurveIndex >= 0) {\r\n            const auxiliaryCurveRecord = auxiliaryCurveRecords[auxiliaryCurveIndex];\r\n            ++auxiliaryCurveRecord.refCount;\r\n            return auxiliaryCurveRecord.handle;\r\n        } else {\r\n            const newAuxiliaryCurveIndex = auxiliaryCurveRecords.length;\r\n            const auxiliaryCurveRecord = new AuxiliaryCurveRecord(\r\n                new AuxiliaryCurveHandleInternal(this, newAuxiliaryCurveIndex),\r\n                name,\r\n            );\r\n            auxiliaryCurveRecords.push(auxiliaryCurveRecord);\r\n            return auxiliaryCurveRecord.handle;\r\n        }\r\n    }\r\n\r\n    public createEvaluationContext (): AnimationGraphEvaluationContext {\r\n        assertIsTrue(!this._bindStarted);\r\n        return new AnimationGraphEvaluationContext(\r\n            this.transformCount,\r\n            this.auxiliaryCurveCount,\r\n            this._parentTable.slice(),\r\n            this._origin,\r\n        );\r\n    }\r\n\r\n    public resetPoseStashAllocator (allocator: DeferredPoseStashAllocator): void {\r\n        assertIsTrue(!this._bindStarted);\r\n        allocator._reset(this.transformCount, this.auxiliaryCurveCount);\r\n    }\r\n\r\n    public createTransformFilter (mask: Readonly<AnimationMask>): TransformFilter {\r\n        const { _origin: origin } = this;\r\n        const involvedTransformIndices: number[] = [];\r\n        for (const { node, handle } of this._transformRecords) {\r\n            const path = countPath(origin, node);\r\n            if (typeof path === 'undefined') {\r\n                error(`${node.getPathInHierarchy()} is not a child of ${origin.getPathInHierarchy()}`);\r\n                // fallthrough\r\n            } else if (mask.isExcluded(path)) {\r\n                continue;\r\n            }\r\n            involvedTransformIndices.push(handle.index);\r\n        }\r\n        involvedTransformIndices.sort();\r\n        const poseFilter = new TransformFilter(involvedTransformIndices);\r\n        return poseFilter;\r\n\r\n        function countPath (from: Node, to: Node): string | undefined {\r\n            const path: string[] = [];\r\n            for (let node: Node | null = to; node; node = node.parent) {\r\n                if (node === from) {\r\n                    return path.join('/');\r\n                } else {\r\n                    path.unshift(node.name);\r\n                }\r\n            }\r\n            return undefined; // Non-closed.\r\n        }\r\n    }\r\n\r\n    public fetchDefaultTransforms (transforms: TransformArray): void {\r\n        const nTransforms = this._transformRecords.length;\r\n        assertIsTrue(transforms.length === nTransforms);\r\n        for (let iTransform = 0; iTransform < nTransforms; ++iTransform) {\r\n            const { defaultTransform } = this._transformRecords[iTransform];\r\n            transforms.setTransform(iTransform, defaultTransform);\r\n        }\r\n    }\r\n\r\n    public apply (pose: Pose): void {\r\n        const {\r\n            transforms,\r\n            auxiliaryCurves,\r\n        } = pose;\r\n\r\n        const nTransforms = this._transformRecords.length;\r\n        assertIsTrue(transforms.length === nTransforms);\r\n        for (let iTransform = 0; iTransform < nTransforms; ++iTransform) {\r\n            const transform = transforms.getTransform(iTransform, cacheTransform);\r\n            const { node } = this._transformRecords[iTransform];\r\n            node.setRTS(\r\n                transform.rotation,\r\n                transform.position,\r\n                transform.scale,\r\n            );\r\n        }\r\n\r\n        const nAuxiliaryCurves = this._auxiliaryCurveRecords.length;\r\n        for (let iAuxiliaryCurve = 0; iAuxiliaryCurve < nAuxiliaryCurves; ++iAuxiliaryCurve) {\r\n            const { name: curveName } = this._auxiliaryCurveRecords[iAuxiliaryCurve];\r\n            const curveValue = auxiliaryCurves[iAuxiliaryCurve];\r\n            this._auxiliaryCurveRegistry.set(curveName, curveValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    @checkBindStatus(true)\r\n    public _destroyTransformHandle (index: number): void {\r\n        assertIsTrue(index >= 0 && index < this._transformRecords.length, `Invalid transform handle.`);\r\n        const record = this._transformRecords[index];\r\n        assertIsTrue(record.refCount > 0, `Something work wrong: refCount mismatch.`);\r\n        --record.refCount;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    @checkBindStatus(true)\r\n    public _destroyAuxiliaryCurveHandle (index: number): void {\r\n        assertIsTrue(index >= 0 && index < this._auxiliaryCurveRecords.length, `Invalid auxiliary value handle.`);\r\n        const record = this._auxiliaryCurveRecords[index];\r\n        assertIsTrue(record.refCount > 0, `Something work wrong: refCount mismatch.`);\r\n        --record.refCount;\r\n    }\r\n\r\n    @checkBindStatus(false)\r\n    public startBind (): void {\r\n        this._bindStarted = true;\r\n        this._transformCountBeforeBind = this._transformRecords.length;\r\n        this._auxiliaryCurveCountBeforeBind = this._auxiliaryCurveRecords.length;\r\n    }\r\n\r\n    @checkBindStatus(true)\r\n    public endBind (): number {\r\n        const {\r\n            _transformRecords: transformRecords,\r\n            _auxiliaryCurveRecords: auxiliaryCurveRecords,\r\n        } = this;\r\n\r\n        let changeFlags = 0;\r\n\r\n        // Detect changes in transforms.\r\n        trimRecords(transformRecords);\r\n        if (transformRecords.length !== this._transformCountBeforeBind) {\r\n            changeFlags |= LayoutChangeFlag.TRANSFORM_COUNT;\r\n            // If the transform's count is changed, we only sync orders.\r\n            const nRecords = transformRecords.length;\r\n            for (let iRecord = 0; iRecord < nRecords; ++iRecord) {\r\n                const record = transformRecords[iRecord];\r\n                record.order = iRecord;\r\n            }\r\n        } else {\r\n            // Sync order and detect change.\r\n            const nRecords = transformRecords.length;\r\n            let orderChanged = false;\r\n            for (let iRecord = 0; iRecord < nRecords; ++iRecord) {\r\n                const record = transformRecords[iRecord];\r\n                if (record.order !== iRecord) {\r\n                    orderChanged = true;\r\n                    record.order = iRecord;\r\n                }\r\n            }\r\n            if (orderChanged) {\r\n                changeFlags |= LayoutChangeFlag.TRANSFORM_ORDER;\r\n            }\r\n        }\r\n\r\n        // Detect changes in auxiliary values.\r\n        trimRecords(auxiliaryCurveRecords);\r\n        if (auxiliaryCurveRecords.length !== this._auxiliaryCurveCountBeforeBind) {\r\n            changeFlags |= LayoutChangeFlag.AUXILIARY_CURVE_COUNT;\r\n        }\r\n\r\n        // Reconstruct the parent table.\r\n        const { _parentTable: parentTable, _origin: origin } = this;\r\n        parentTable.length = transformRecords.length;\r\n        for (let iTransform = 0; iTransform < transformRecords.length; ++iTransform) {\r\n            const { node } = transformRecords[iTransform];\r\n            if (node === origin) {\r\n                parentTable[iTransform] = -1;\r\n                continue;\r\n            }\r\n            const parent = node.parent;\r\n            if (parent === origin) {\r\n                // If the parent is the origin, the origin can be bound or not.\r\n                const parentIndex = transformRecords.findIndex((record) => record.node === parent);\r\n                parentTable[iTransform] = parentIndex >= 0 ? parentIndex : -1;\r\n            } else {\r\n                // In other case we have the promise: parent of a node should have also been bound.\r\n                const parentIndex = transformRecords.findIndex((record) => record.node === parent);\r\n                assertIsTrue(parentIndex >= 0, `Parent node is not bound!`);\r\n                // This is what we promised and what the evaluation context required.\r\n                assertIsTrue(parentIndex < iTransform);\r\n                parentTable[iTransform] = parentIndex;\r\n            }\r\n        }\r\n\r\n        this._bindStarted = false;\r\n\r\n        // Do some checks in debug mode.\r\n        if (DEBUG) {\r\n            transformRecords.forEach((transformRecord, index, transformRecords) => {\r\n                assertIsTrue(transformRecord.handle.index === index, `Bad transform handle.`);\r\n\r\n                assertIsTrue(transformRecord.order === index, `Bad transform order field.`);\r\n\r\n                // Ensure that transforms are sorted so that parent is in front of child.\r\n                for (let parent = transformRecord.node.parent; parent; parent = parent.parent) {\r\n                    const parentIndex = transformRecords.findIndex((r) => r.node === parent);\r\n                    if (parentIndex >= 0) {\r\n                        assertIsTrue(parentIndex < index, `Bad transform order.`);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._transformCountBeforeBind = -1;\r\n            this._auxiliaryCurveCountBeforeBind = -1;\r\n        }\r\n\r\n        return changeFlags;\r\n    }\r\n\r\n    private _origin: Node;\r\n    private _auxiliaryCurveRegistry: AuxiliaryCurveRegistry;\r\n    private _auxiliaryCurveRecords: AuxiliaryCurveRecord[] = [];\r\n    private _transformRecords: TransformRecord[] = [];\r\n    private _parentTable: number[] = [];\r\n\r\n    private _bindStarted = false;\r\n    private _transformCountBeforeBind = -1;\r\n    private _auxiliaryCurveCountBeforeBind = -1;\r\n}\r\n\r\ninterface AnimationRecord<THandle extends { index: number; }> {\r\n    handle: THandle;\r\n\r\n    refCount: number;\r\n}\r\n\r\nclass TransformRecord implements AnimationRecord<TransformHandleInternal> {\r\n    constructor (handle: TransformHandleInternal, node: Node) {\r\n        this.handle = handle;\r\n        this.node = node;\r\n        const defaultTransform = new Transform();\r\n        defaultTransform.position = node.position;\r\n        defaultTransform.rotation = node.rotation;\r\n        defaultTransform.scale = node.scale;\r\n        this.defaultTransform = defaultTransform;\r\n    }\r\n\r\n    /** The order of the transform. */\r\n    public order = -1;\r\n\r\n    public refCount = 1;\r\n\r\n    public readonly handle: TransformHandleInternal;\r\n\r\n    public readonly node: Node;\r\n\r\n    public readonly defaultTransform: Readonly<Transform>;\r\n}\r\n\r\nclass AuxiliaryCurveRecord implements AnimationRecord<AuxiliaryCurveHandleInternal> {\r\n    constructor (handle: AuxiliaryCurveHandleInternal, name: string) {\r\n        this.handle = handle;\r\n        this.name = name;\r\n    }\r\n\r\n    public refCount = 1;\r\n\r\n    public readonly handle: AuxiliaryCurveHandleInternal;\r\n\r\n    public readonly name: string;\r\n}\r\n\r\nfunction trimRecords<TRecord extends AnimationRecord<any>> (records: TRecord[]): void {\r\n    const nUsedRecords = partition(records, (record) => {\r\n        assertIsTrue(record.refCount >= 0);\r\n        return record.refCount > 0;\r\n    });\r\n    assertIsTrue(nUsedRecords <= records.length);\r\n    if (nUsedRecords === records.length) {\r\n        return;\r\n    }\r\n    // Reassign indices.\r\n    for (let iRecord = 0; iRecord < nUsedRecords; ++iRecord) {\r\n        records[iRecord].handle.index = iRecord;\r\n    }\r\n    // Trim the array.\r\n    if (DEBUG) {\r\n        records.slice(nUsedRecords).forEach((record) => record.refCount = -1);\r\n    }\r\n    records.splice(nUsedRecords, records.length - nUsedRecords);\r\n}\r\n\r\nexport const defaultTransformsTag = Symbol('[[DefaultTransforms]]');\r\n\r\n/**\r\n * The settle context for animation graph building blocks(state machine/pose node/motion...etc).\r\n */\r\nexport class AnimationGraphSettleContext {\r\n    constructor (\r\n        private _layoutMaintainer: AnimationGraphPoseLayoutMaintainer,\r\n    ) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the number of transforms in pose.\r\n     */\r\n    public get transformCount (): number {\r\n        return this._layoutMaintainer.transformCount;\r\n    }\r\n\r\n    /**\r\n     * Creates a transform filter expressing specified animation mask effect.\r\n     * @param mask Animation mask.\r\n     * @returns Result transform filter.\r\n     */\r\n    public createTransformFilter (mask: Readonly<AnimationMask>): TransformFilter {\r\n        return this._layoutMaintainer.createTransformFilter(mask);\r\n    }\r\n}\r\n\r\nconst cacheTransform_spaceConversion = new Transform();\r\nconst cacheParentTransform_spaceConversion = new Transform();\r\n\r\nclass AnimationGraphEvaluationContext {\r\n    constructor (\r\n        transformCount: number,\r\n        metaValueCount: number,\r\n        parentTable: readonly number[],\r\n        componentNode: Node,\r\n    ) {\r\n        if (DEBUG) {\r\n            assertIsTrue(transformCount === parentTable.length);\r\n            // We requires all parents are in front of children in `parentTable`.\r\n            assertIsTrue(parentTable.every((parentIndex, currentIndex) => {\r\n                if (parentIndex < 0) { // Root node\r\n                    return true;\r\n                }\r\n                return parentIndex < currentIndex;\r\n            }));\r\n        }\r\n        this._poseAllocator = new PoseStackAllocator(transformCount, metaValueCount);\r\n        this._parentTable = parentTable;\r\n        this._componentNode = componentNode;\r\n        this[defaultTransformsTag] = new TransformArray(transformCount);\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._poseAllocator.destroy();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public readonly [defaultTransformsTag]: TransformArray;\r\n\r\n    public get allocatedPoseCount (): number {\r\n        return this._poseAllocator.allocatedCount;\r\n    }\r\n\r\n    get parentTable (): readonly number[] {\r\n        return this._parentTable;\r\n    }\r\n\r\n    public pushDefaultedPose (): Pose {\r\n        const pose = this._poseAllocator.push();\r\n        pose.transforms.set(this[defaultTransformsTag]);\r\n        pose._poseTransformSpace = PoseTransformSpace.LOCAL;\r\n        pose.auxiliaryCurves.fill(0.0);\r\n        return pose;\r\n    }\r\n\r\n    public pushDefaultedPoseInComponentSpace (): Pose {\r\n        const pose = this.pushDefaultedPose();\r\n        this._poseTransformsSpaceLocalToComponent(pose);\r\n        return pose;\r\n    }\r\n\r\n    public pushZeroDeltaPose (): Pose {\r\n        const pose = this._poseAllocator.push();\r\n        pose.transforms.fill(ZERO_DELTA_TRANSFORM);\r\n        pose._poseTransformSpace = PoseTransformSpace.LOCAL;\r\n        pose.auxiliaryCurves.fill(0.0);\r\n        return pose;\r\n    }\r\n\r\n    public pushDuplicatedPose (src: Pose): Pose {\r\n        const pose = this._poseAllocator.push();\r\n        pose.transforms.set(src.transforms);\r\n        pose._poseTransformSpace = src._poseTransformSpace;\r\n        pose.auxiliaryCurves.set(src.auxiliaryCurves);\r\n        return pose;\r\n    }\r\n\r\n    public popPose (): void {\r\n        this._poseAllocator.pop();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get _stackSize_debugging (): number {\r\n        return this._poseAllocator.allocatedCount;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _isStackTopPose_debugging (pose: Pose): boolean {\r\n        return pose === this._poseAllocator.top;\r\n    }\r\n\r\n    /** @internal */\r\n    public _poseTransformsSpaceLocalToComponent (pose: Pose): void {\r\n        const { transforms } = pose;\r\n        const { length: nTransforms } = transforms;\r\n        for (let iTransform = 0; iTransform < nTransforms; ++iTransform) {\r\n            const parentTransformIndex = this._parentTable[iTransform];\r\n            if (parentTransformIndex < 0) { // Root node\r\n                continue;\r\n            }\r\n            const transform = transforms.getTransform(iTransform, cacheTransform_spaceConversion);\r\n            const parentTransform = transforms.getTransform(parentTransformIndex, cacheParentTransform_spaceConversion);\r\n            Transform.multiply(transform, parentTransform, transform);\r\n            transforms.setTransform(iTransform, transform);\r\n        }\r\n\r\n        pose._poseTransformSpace = PoseTransformSpace.COMPONENT;\r\n    }\r\n\r\n    /** @internal */\r\n    public _poseTransformsSpaceComponentToLocal (pose: Pose): void {\r\n        const { transforms } = pose;\r\n        const { length: nTransforms } = transforms;\r\n        for (let iTransform = nTransforms - 1; iTransform >= 0; --iTransform) {\r\n            const parentTransformIndex = this._parentTable[iTransform];\r\n            if (parentTransformIndex < 0) { // Root node\r\n                continue;\r\n            }\r\n            const transform = transforms.getTransform(iTransform, cacheTransform_spaceConversion);\r\n            const parentTransform = transforms.getTransform(parentTransformIndex, cacheParentTransform_spaceConversion);\r\n            Transform.calculateRelative(transform, transform, parentTransform);\r\n            transforms.setTransform(iTransform, transform);\r\n        }\r\n\r\n        pose._poseTransformSpace = PoseTransformSpace.LOCAL;\r\n    }\r\n\r\n    public _convertPoseSpaceTransformToTargetSpace (\r\n        transform: Transform,\r\n        outTransformSpace: TransformSpace,\r\n        pose: Pose,\r\n        poseTransformIndex: number,\r\n    ): Transform {\r\n        const poseSpace = pose._poseTransformSpace;\r\n        switch (outTransformSpace) {\r\n        default:\r\n            if (DEBUG) { assertIsTrue(false); }\r\n            break;\r\n        case TransformSpace.WORLD:\r\n            if (poseSpace === PoseTransformSpace.COMPONENT) {\r\n                // Component -> World.\r\n                Transform.multiply(transform, this._getComponentToWorldTransform(), transform);\r\n            } else {\r\n                assertIsTrue(poseSpace === PoseTransformSpace.LOCAL);\r\n                // Local -> World.\r\n                Transform.multiply(\r\n                    transform,\r\n                    this._getLocalToWorldTransform(cacheParentTransform_spaceConversion, pose, poseTransformIndex),\r\n                    transform,\r\n                );\r\n            }\r\n            break;\r\n        case TransformSpace.COMPONENT:\r\n            if (poseSpace === PoseTransformSpace.COMPONENT) {\r\n                // The transform is already in component.\r\n            } else {\r\n                assertIsTrue(poseSpace === PoseTransformSpace.LOCAL);\r\n                // Local -> Component.\r\n                Transform.multiply(\r\n                    transform,\r\n                    this._getLocalToComponentTransform(cacheParentTransform_spaceConversion, pose, poseTransformIndex),\r\n                    transform,\r\n                );\r\n            }\r\n            break;\r\n        case TransformSpace.PARENT: {\r\n            if (poseSpace === PoseTransformSpace.COMPONENT) {\r\n                // Component -> Parent.\r\n                // Parent_Component_Transform * result = Component\r\n                // result = inv(Component_Transform_of_Parent) * component\r\n                const parentTransformIndex = this._parentTable[poseTransformIndex];\r\n                if (parentTransformIndex >= 0) {\r\n                    const parentComponentTransform = pose.transforms.getTransform(parentTransformIndex, cacheParentTransform_spaceConversion);\r\n                    const invParentComponentTransform = Transform.invert(parentComponentTransform, parentComponentTransform);\r\n                    Transform.multiply(transform, invParentComponentTransform, transform);\r\n                }\r\n            } else {\r\n                assertIsTrue(poseSpace === PoseTransformSpace.LOCAL);\r\n                // Local -> Parent.\r\n                // The transform is already under parent.\r\n            }\r\n            break;\r\n        }\r\n        case TransformSpace.LOCAL: { // Local -> *\r\n            // Bone_Local_Transform * result = input\r\n            // result = inv(Bone_Local_Transform) * input\r\n            assertIsTrue(poseSpace === PoseTransformSpace.COMPONENT || poseSpace === PoseTransformSpace.LOCAL);\r\n            const boneTransform = pose.transforms.getTransform(poseTransformIndex, cacheParentTransform_spaceConversion);\r\n            const invBoneTransform = Transform.invert(boneTransform, boneTransform);\r\n            Transform.multiply(transform, invBoneTransform, transform);\r\n            break;\r\n        }\r\n        }\r\n        return transform;\r\n    }\r\n\r\n    public _convertTransformToPoseTransformSpace (\r\n        transform: Transform,\r\n        transformSpace: TransformSpace,\r\n        pose: Pose,\r\n        poseTransformIndex: number,\r\n    ): Transform {\r\n        const poseSpace = pose._poseTransformSpace;\r\n\r\n        switch (transformSpace) {\r\n        default:\r\n            if (DEBUG) { assertIsTrue(false); }\r\n            break;\r\n        case TransformSpace.WORLD:\r\n            if (poseSpace === PoseTransformSpace.COMPONENT) {\r\n                // World -> Component.\r\n                const worldToComponent = Transform.invert(cacheParentTransform_spaceConversion, this._getComponentToWorldTransform());\r\n                Transform.multiply(transform, worldToComponent, transform);\r\n            } else {\r\n                assertIsTrue(poseSpace === PoseTransformSpace.LOCAL);\r\n                // World -> Local.\r\n                const localToWorld = this._getLocalToWorldTransform(cacheParentTransform_spaceConversion, pose, poseTransformIndex);\r\n                const worldToLocal = Transform.invert(localToWorld, localToWorld);\r\n                Transform.multiply(transform, worldToLocal, transform);\r\n            }\r\n            break;\r\n        case TransformSpace.COMPONENT:\r\n            if (poseSpace === PoseTransformSpace.COMPONENT) {\r\n                // Identity.\r\n            } else {\r\n                assertIsTrue(poseSpace === PoseTransformSpace.LOCAL);\r\n                // Component -> Local.\r\n                const localToComponent = this._getLocalToComponentTransform(cacheParentTransform_spaceConversion, pose, poseTransformIndex);\r\n                const componentToLocal = Transform.invert(localToComponent, localToComponent);\r\n                Transform.multiply(transform, componentToLocal, transform);\r\n            }\r\n            break;\r\n        case TransformSpace.PARENT: {\r\n            if (poseSpace === PoseTransformSpace.COMPONENT) {\r\n                // Parent -> Component.\r\n                const parentTransformIndex = this._parentTable[poseTransformIndex];\r\n                if (parentTransformIndex >= 0) {\r\n                    const parentTransform = pose.transforms.getTransform(parentTransformIndex, cacheParentTransform_spaceConversion);\r\n                    Transform.multiply(transform, parentTransform, transform);\r\n                }\r\n            } else {\r\n                // Parent -> Local.\r\n                // The transform is already in local space.\r\n            }\r\n            break;\r\n        }\r\n        case TransformSpace.LOCAL: {\r\n            assertIsTrue(poseSpace === PoseTransformSpace.COMPONENT || poseSpace === PoseTransformSpace.LOCAL);\r\n            // Bone_Local_Transform * result = input\r\n            // result = inv(Bone_Local_Transform) * input\r\n            const currentTransform = pose.transforms.getTransform(poseTransformIndex, cacheParentTransform_spaceConversion);\r\n            Transform.multiply(transform, currentTransform, transform);\r\n            break;\r\n        }\r\n        }\r\n\r\n        return transform;\r\n    }\r\n\r\n    private _poseAllocator: PoseStackAllocator;\r\n\r\n    private _parentTable: readonly number[];\r\n\r\n    private _componentNode: Node;\r\n\r\n    private _cacheComponentToWorldTransform = new Transform();\r\n\r\n    private _getComponentToWorldTransform (): Transform {\r\n        const result = this._cacheComponentToWorldTransform;\r\n        const componentNode = this._componentNode;\r\n        result.position = componentNode.worldPosition;\r\n        result.rotation = componentNode.worldRotation;\r\n        result.scale = componentNode.worldScale;\r\n        return result;\r\n    }\r\n\r\n    private _getLocalToComponentTransform (out: Transform, pose: Pose, transformIndex: number): Transform {\r\n        const { _parentTable: parentTable } = this;\r\n\r\n        Transform.setIdentity(out);\r\n        for (let iTransform = parentTable[transformIndex]; iTransform >= 0; iTransform = parentTable[iTransform]) {\r\n            const localTransform = pose.transforms.getTransform(iTransform, cacheTransform_spaceConversion);\r\n            Transform.multiply(out, localTransform, out);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    private _getLocalToWorldTransform (out: Transform, pose: Pose, transformIndex: number): Transform {\r\n        this._getLocalToComponentTransform(out, pose, transformIndex);\r\n        Transform.multiply(out, this._getComponentToWorldTransform(), out);\r\n        return out;\r\n    }\r\n}\r\n\r\nexport type { AnimationGraphEvaluationContext };\r\n\r\nexport interface PoseLayout {\r\n    transformCount: number;\r\n\r\n    auxiliaryCurveCount: number;\r\n}\r\n\r\nclass TransformHandleInternal implements TransformHandle {\r\n    declare __brand: TransformHandle['__brand'];\r\n\r\n    constructor (host: AnimationGraphPoseLayoutMaintainer, index: number) {\r\n        this._host = host;\r\n        this.index = index;\r\n    }\r\n\r\n    public index = -1;\r\n\r\n    public destroy (): void {\r\n        this._host._destroyTransformHandle(this.index);\r\n    }\r\n\r\n    private _host: AnimationGraphPoseLayoutMaintainer;\r\n}\r\n\r\nclass AuxiliaryCurveHandleInternal implements AuxiliaryCurveHandle {\r\n    constructor (host: AnimationGraphPoseLayoutMaintainer, index: number) {\r\n        this._host = host;\r\n        this.index = index;\r\n    }\r\n\r\n    declare __brand: AuxiliaryCurveHandle['__brand'];\r\n\r\n    public index = -1;\r\n\r\n    public destroy (): void {\r\n        this._host._destroyAuxiliaryCurveHandle(this.index);\r\n    }\r\n\r\n    private _host: AnimationGraphPoseLayoutMaintainer;\r\n}\r\n\r\n/**\r\n * The update context for animation graph building blocks(state machine/pose node/motion...etc).\r\n */\r\nexport interface AnimationGraphUpdateContext {\r\n    /**\r\n     * Delta time to update.\r\n     */\r\n    readonly deltaTime: number;\r\n\r\n    /**\r\n     * Indicative weight of the updating target.\r\n     *\r\n     * The updating target shall not, for example, weight the result pose by this weight.\r\n     */\r\n    readonly indicativeWeight: number;\r\n}\r\n\r\n/**\r\n * Utility class to generate animation graph context.\r\n *\r\n * The result of each method of this class is kept available until next call on any of these methods.\r\n */\r\nexport class AnimationGraphUpdateContextGenerator {\r\n    /**\r\n     * Generates a context which has specified attributes.\r\n     * @param deltaTime The result context's `.deltaTime`.\r\n     * @param indicativeWeight The result context's `.indicativeWeight`.\r\n     * @returns The result context.\r\n     */\r\n    public generate (\r\n        deltaTime: number,\r\n        indicativeWeight: number,\r\n    ): AnimationGraphUpdateContext {\r\n        this._context.deltaTime = deltaTime;\r\n        this._context.indicativeWeight = indicativeWeight;\r\n        return this._context as AnimationGraphUpdateContext;\r\n    }\r\n\r\n    /**\r\n     * Forks specified `base` context so that the result context is same with the base\r\n     * except that the result indicative weight is taken from base and multiplied by `subWeight`.\r\n     * @param base The base context.\r\n     * @param subWeight The sub weight.\r\n     * @returns The result context.\r\n     */\r\n    public forkSubWeight (\r\n        base: AnimationGraphUpdateContext,\r\n        subWeight: number,\r\n    ): void {\r\n        this._context.deltaTime = base.deltaTime;\r\n        this._context.indicativeWeight = base.indicativeWeight * subWeight;\r\n    }\r\n\r\n    private readonly _context: ReusableUpdateContext = {\r\n        deltaTime: 0.0,\r\n        indicativeWeight: 0.0,\r\n    };\r\n}\r\n\r\ninterface ReusableUpdateContext extends AnimationGraphUpdateContext {\r\n    deltaTime: number;\r\n    indicativeWeight: number;\r\n}\r\n\r\nexport class DeferredPoseStashAllocator implements PoseStashAllocator {\r\n    get allocatedPoseCount (): number {\r\n        assertIsTrue(this._allocator);\r\n        return this._allocator.allocatedCount;\r\n    }\r\n\r\n    /** @internal */\r\n    public _reset (transformCount: number, auxiliaryCurveCount: number): void {\r\n        this._allocator = new PoseHeapAllocator(transformCount, auxiliaryCurveCount);\r\n    }\r\n\r\n    public allocatePose (): Pose {\r\n        assertIsTrue(this._allocator);\r\n        const pose = this._allocator.allocatePose();\r\n        return pose;\r\n    }\r\n\r\n    public destroyPose (pose: Pose): void {\r\n        assertIsTrue(this._allocator);\r\n        return this._allocator.destroyPose(pose);\r\n    }\r\n\r\n    private _allocator: PoseHeapAllocator | null = null;\r\n}\r\n","import { ccclass, editable, serializable } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}MotionSyncInfo`)\r\nexport class MotionSyncInfo {\r\n    @editable\r\n    @serializable\r\n    group = '';\r\n}\r\n","import { ClipMotion, AnimationBlend, AnimationBlend1D, AnimationBlend2D } from '../../motion';\r\nimport { Motion } from '../../motion/motion';\r\nimport { EnterNodeInfo } from '../foundation/authoring/enter-node-info';\r\nimport { PoseGraphCreateNodeEntry, PoseGraphCreateNodeFactory } from '../decorator/node';\r\nimport { PoseNode } from '../pose-node';\r\nimport type { PoseGraphNode } from '../foundation/pose-graph-node';\r\n\r\nexport {};\r\n\r\nexport function getEnterInfo (this: { motion: Motion | null }): EnterNodeInfo | undefined {\r\n    if (!this.motion || !(this.motion instanceof AnimationBlend)) {\r\n        return undefined;\r\n    }\r\n    return {\r\n        type: 'animation-blend',\r\n        target: this.motion,\r\n    };\r\n}\r\n\r\ntype CreateNodeArg = {\r\n    type: 'clip-motion';\r\n} | {\r\n    type: 'animation-blend-1d' | 'animation-blend-2d';\r\n};\r\n\r\nexport function makeCreateNodeFactory (\r\n    create_: (motion: Motion | null) => PoseNode,\r\n): PoseGraphCreateNodeFactory<CreateNodeArg> {\r\n    return {\r\n        listEntries: (context): Iterable<PoseGraphCreateNodeEntry<CreateNodeArg>> => [{\r\n            arg: { type: 'clip-motion' },\r\n            menu: 'i18n:ENGINE.animation_graph.pose_graph_node_sub_menus.play_or_sample_clip_motion',\r\n        }, {\r\n            arg: { type: 'animation-blend-1d' },\r\n            menu: 'i18n:ENGINE.animation_graph.pose_graph_node_sub_menus.play_or_sample_animation_blend_1d',\r\n        }, {\r\n            arg: { type: 'animation-blend-2d' },\r\n            menu: 'i18n:ENGINE.animation_graph.pose_graph_node_sub_menus.play_or_sample_animation_blend_2d',\r\n        }],\r\n        create: (arg): PoseGraphNode => {\r\n            let motion: Motion | null = null;\r\n            switch (arg.type) {\r\n            case 'clip-motion': motion = new ClipMotion(); break;\r\n            case 'animation-blend-1d': motion = new AnimationBlend1D(); break;\r\n            case 'animation-blend-2d': motion = new AnimationBlend2D(); break;\r\n            default: break;\r\n            }\r\n            return create_(motion);\r\n        },\r\n    };\r\n}\r\n\r\nexport function getTileBase (titleI18nKey: string, motion: Motion | null): [string, Record<string, string>] | undefined {\r\n    let motionName = '';\r\n    if (motion instanceof ClipMotion) {\r\n        if (!motion.clip) {\r\n            return undefined;\r\n        } else {\r\n            motionName = motion.clip.name;\r\n        }\r\n    } else {\r\n        motionName = 'Unnamed Animation Blend';\r\n    }\r\n    return [titleI18nKey, { motionName }] as [string, Record<string, string>];\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, displayName, editable, serializable, unit } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { ClipMotion } from '../../motion/clip-motion';\r\nimport { createEval } from '../../create-eval';\r\nimport { Motion, MotionEval, MotionPort } from '../../motion/motion';\r\nimport { PoseNode } from '../pose-node';\r\nimport { input } from '../decorator/input';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\nimport { MotionSyncInfo } from '../motion-sync/motion-sync-info';\r\nimport { RuntimeMotionSyncRecord } from '../motion-sync/runtime-motion-sync';\r\nimport { poseGraphCreateNodeFactory, poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport { getEnterInfo, getTileBase, makeCreateNodeFactory } from './play-or-sample-motion-pose-node-shared';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphSettleContext, AnimationGraphUpdateContext,\r\n} from '../../animation-graph-context';\r\nimport { clamp01 } from '../../../../core';\r\nimport type { Pose } from '../../../core/pose';\r\n\r\nconst ZERO_DURATION_THRESHOLD = 1e-5;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodePlayMotion`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\n@poseGraphCreateNodeFactory(makeCreateNodeFactory(\r\n    (motion) => {\r\n        const node = new PoseNodePlayMotion();\r\n        node.motion = motion;\r\n        return node;\r\n    },\r\n))\r\n@poseGraphNodeAppearance({\r\n    themeColor: '#227F9B',\r\n})\r\nexport class PoseNodePlayMotion extends PoseNode {\r\n    @serializable\r\n    @editable\r\n    public motion: Motion | null = new ClipMotion();\r\n\r\n    @serializable\r\n    @editable\r\n    public readonly syncInfo = new MotionSyncInfo();\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    @unit('s')\r\n    public startTime = 0.0;\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    public speedMultiplier = 1.0;\r\n\r\n    /**\r\n     * The weight of this node indicated in last update.\r\n     */\r\n    get lastIndicativeWeight (): number {\r\n        return this._workspace?.lastIndicativeWeight ?? 0.0;\r\n    }\r\n\r\n    /**\r\n     * Normalized time elapsed on specified motion.\r\n     */\r\n    get elapsedMotionTime (): number {\r\n        return this._workspace?.normalizedTime ?? 0.0;\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        const { motion } = this;\r\n        if (!motion) {\r\n            return;\r\n        }\r\n        const motionEval = motion[createEval](context, false);\r\n        if (!motionEval) {\r\n            return;\r\n        }\r\n        this._workspace = new Workspace(motionEval, motionEval.createPort());\r\n        if (this.syncInfo.group) {\r\n            this._runtimeSyncRecord = context.motionSyncManager.register(this.syncInfo);\r\n        }\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        // override\r\n    }\r\n\r\n    public reenter (): void {\r\n        if (this._workspace) {\r\n            const {\r\n                _runtimeSyncRecord: runtimeSyncRecord,\r\n                _workspace: { motionEval: { duration } },\r\n            } = this;\r\n\r\n            // TODO: cocos/cocos-engine#15305\r\n            this._forceEvaluateEvaluation();\r\n\r\n            const startTimeNormalized = duration < ZERO_DURATION_THRESHOLD\r\n                ? 0.0\r\n                : clamp01(this.startTime / duration);\r\n            if (runtimeSyncRecord) {\r\n                runtimeSyncRecord.notifyRenter(startTimeNormalized);\r\n            } else {\r\n                this._workspace.normalizedTime = startTimeNormalized;\r\n            }\r\n            this._workspace.lastIndicativeWeight = 0.0;\r\n        }\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        if (this._workspace) {\r\n            const { deltaTime } = context;\r\n            const { _runtimeSyncRecord: runtimeSyncRecord } = this;\r\n            const duration = this._workspace.motionEval.duration;\r\n            let normalizedDeltaTime = 0.0;\r\n            if (duration > ZERO_DURATION_THRESHOLD) {\r\n                normalizedDeltaTime = (deltaTime * this.speedMultiplier) / duration;\r\n            }\r\n            if (runtimeSyncRecord) {\r\n                runtimeSyncRecord.notifyUpdate(normalizedDeltaTime, context.indicativeWeight);\r\n            } else {\r\n                this._workspace.normalizedTime += normalizedDeltaTime;\r\n            }\r\n            this._workspace.lastIndicativeWeight = context.indicativeWeight;\r\n        }\r\n    }\r\n\r\n    public doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        if (!this._workspace) {\r\n            return context.pushDefaultedPose();\r\n        } else {\r\n            const normalizedTime = this._runtimeSyncRecord\r\n                ? this._runtimeSyncRecord.getSyncedEnterTime()\r\n                : this._workspace.normalizedTime;\r\n            return this._workspace.motionEvalPort.evaluate(normalizedTime, context);\r\n        }\r\n    }\r\n\r\n    private _workspace: Workspace | null = null;\r\n    private _runtimeSyncRecord: RuntimeMotionSyncRecord | undefined = undefined;\r\n}\r\n\r\nclass Workspace {\r\n    constructor (\r\n        public motionEval: MotionEval,\r\n        public motionEvalPort: MotionPort,\r\n    ) {\r\n\r\n    }\r\n\r\n    public normalizedTime = 0.0;\r\n    public lastIndicativeWeight = 0.0;\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodePlayMotion.prototype.getTitle = function getTitle (this: PoseNodePlayMotion): string | [string, Record<string, string>] | undefined {\r\n        return getTileBase(`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodePlayMotion.title`, this.motion);\r\n    };\r\n\r\n    PoseNodePlayMotion.prototype.getEnterInfo = getEnterInfo;\r\n}\r\n","// cSpell:words Evaluatable\r\n\r\nimport { DEBUG } from 'internal:constants';\r\nimport { assertIsTrue, warn } from '../../../core';\r\nimport { instantiate } from '../../../serialization';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from './pose-node';\r\nimport { PoseGraph } from './pose-graph';\r\nimport { PureValueNode, PureValueNodeLinkContext } from './pure-value-node';\r\nimport { NodeInputPath } from './foundation/node-shell';\r\nimport { PoseGraphNode } from './foundation/pose-graph-node';\r\nimport { PoseNodePlayMotion } from './pose-nodes/play-motion';\r\nimport {\r\n    AnimationGraphBindingContext, AnimationGraphSettleContext,\r\n    AnimationGraphUpdateContext, AnimationGraphEvaluationContext,\r\n} from '../animation-graph-context';\r\nimport type { Pose } from '../../core/pose';\r\n\r\ntype EvaluatableNode = PoseNode | PureValueNode;\r\n\r\nfunction isEvaluatableNode (node: PoseGraphNode): node is EvaluatableNode {\r\n    return (node instanceof PoseNode || node instanceof PureValueNode);\r\n}\r\n\r\nclass InstantiatedPoseGraph {\r\n    constructor (\r\n        private _rootPoseNode: PoseNode | undefined,\r\n        private _countingPlayMotionNodes: readonly PoseNodePlayMotion[] | undefined,\r\n    ) {\r\n\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        this._rootPoseNode?.bind(context);\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        this._rootPoseNode?.settle(context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this._rootPoseNode?.reenter();\r\n    }\r\n\r\n    public update (context: AnimationGraphUpdateContext): void {\r\n        this._rootPoseNode?.update(context);\r\n    }\r\n\r\n    public evaluate (context: AnimationGraphEvaluationContext): Pose | null {\r\n        return this._rootPoseNode?.evaluate(context, PoseTransformSpaceRequirement.LOCAL) ?? null;\r\n    }\r\n\r\n    public countMotionTime (): number {\r\n        const { _countingPlayMotionNodes: playMotionNodes } = this;\r\n        if (!playMotionNodes) {\r\n            if (DEBUG) {\r\n                assertIsTrue(\r\n                    false,\r\n                    `Should not call countMotionTime() on this pose graph `\r\n                    + `since \"mayCountMotionTime\" was not passed to instantiatePoseGraph()`,\r\n                );\r\n            }\r\n            return 0.0;\r\n        }\r\n        let maxWeightedTime = 0.0;\r\n        let maxWeight = Number.NEGATIVE_INFINITY;\r\n        for (let iPlayMotionNode = 0; iPlayMotionNode < playMotionNodes.length; ++iPlayMotionNode) {\r\n            const {\r\n                elapsedMotionTime,\r\n                lastIndicativeWeight,\r\n            } = playMotionNodes[iPlayMotionNode];\r\n            if (lastIndicativeWeight > maxWeight) {\r\n                maxWeight = lastIndicativeWeight;\r\n                maxWeightedTime = elapsedMotionTime;\r\n            }\r\n        }\r\n        return maxWeightedTime;\r\n    }\r\n}\r\n\r\nexport type { InstantiatedPoseGraph };\r\n\r\nexport function instantiatePoseGraph (\r\n    graph: PoseGraph,\r\n    linkContext: PureValueNodeLinkContext,\r\n    mayCountMotionTime = false,\r\n): InstantiatedPoseGraph {\r\n    const {\r\n        outputNode,\r\n    } = graph;\r\n\r\n    const outputNodeShell = graph.getShell(outputNode);\r\n    assertIsTrue(outputNodeShell);\r\n    const bindings = outputNodeShell.getBindings();\r\n    // Output node can only has 1 or has no binding.\r\n    assertIsTrue(bindings.length < 2);\r\n    if (bindings.length === 0) {\r\n        return new InstantiatedPoseGraph(\r\n            undefined,\r\n            mayCountMotionTime ? [] : undefined,\r\n        );\r\n    }\r\n    // If the output node has a binding, it must be pose node.\r\n    const binding = bindings[0];\r\n    assertIsTrue(binding.outputIndex === 0);\r\n    assertIsTrue(binding.producer instanceof PoseNode);\r\n\r\n    const instantiationMap = new Map<PoseGraphNode, RuntimeNodeEvaluation>();\r\n    const mainRecord = instantiateNode(\r\n        graph,\r\n        binding.producer,\r\n        instantiationMap,\r\n        linkContext,\r\n    );\r\n    assertIsTrue(mainRecord instanceof PoseNode);\r\n\r\n    return new InstantiatedPoseGraph(\r\n        mainRecord,\r\n        mayCountMotionTime\r\n            ? Array.from(instantiationMap.values()).filter((node): node is PoseNodePlayMotion => node instanceof PoseNodePlayMotion)\r\n            : undefined,\r\n    );\r\n}\r\n\r\nexport interface PoseNodeDependencyEvaluation {\r\n    evaluate(): void;\r\n}\r\n\r\nfunction instantiateNode (\r\n    graph: PoseGraph,\r\n    node: EvaluatableNode,\r\n    instantiationMap: Map<PoseGraphNode, RuntimeNodeEvaluation>,\r\n    linkContext: PureValueNodeLinkContext,\r\n): RuntimeNodeEvaluation {\r\n    const shell = graph.getShell(node);\r\n    assertIsTrue(shell, `Want to instantiate an unbound graph?`);\r\n\r\n    const existing = instantiationMap.get(node);\r\n    if (existing) {\r\n        return existing;\r\n    }\r\n\r\n    const instantiated = instantiate(node);\r\n\r\n    // Invoke serialization callback.\r\n    if ('__callOnAfterDeserializeRecursive' in instantiated) {\r\n        (instantiated as unknown as {\r\n            __callOnAfterDeserializeRecursive(): void;\r\n        }).__callOnAfterDeserializeRecursive();\r\n    }\r\n\r\n    /** Link. */\r\n    if (instantiated instanceof PureValueNode) {\r\n        instantiated.link(linkContext);\r\n    }\r\n\r\n    /** Alias. */\r\n    const consumerNode = instantiated;\r\n\r\n    /**\r\n     * Create the pv-node property binding records.\r\n     */\r\n    const runtimePVNodePropertyBindings: RuntimePVNodePropertyBinding[] = [];\r\n    for (const {\r\n        producer: producerNode,\r\n        outputIndex: producerOutputIndex,\r\n        inputPath: consumerInputPath,\r\n    } of shell.getBindings()) {\r\n        if (!isEvaluatableNode(producerNode)) {\r\n            warn(`There's a input bound to a node with unrecognized type.`);\r\n            continue;\r\n        }\r\n        const producer = instantiateNode(graph, producerNode, instantiationMap, linkContext);\r\n        if (producer instanceof PoseNode) {\r\n            // Rule: pose nodes can only be used to feed pose nodes.\r\n            assertIsTrue(consumerNode instanceof PoseNode);\r\n            // Core code: link pose nodes.\r\n            linkPoseNode(\r\n                consumerNode,\r\n                consumerInputPath,\r\n                producer,\r\n                producerOutputIndex,\r\n            );\r\n        } else {\r\n            const runtimePVNodePropertyBinding = linkPVNode(\r\n                consumerNode,\r\n                consumerInputPath,\r\n                producer,\r\n                producerOutputIndex,\r\n            );\r\n            if (runtimePVNodePropertyBinding) {\r\n                runtimePVNodePropertyBindings.push(runtimePVNodePropertyBinding);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Create the dependency evaluation.\r\n    const dependencyEvaluation = new DependencyEvaluation(runtimePVNodePropertyBindings);\r\n\r\n    // Create the evaluation record.\r\n    let evaluation: PoseNode | RuntimeNodeEvaluation;\r\n    if (consumerNode instanceof PoseNode) {\r\n        // If this is pose node. Injects the dependency.\r\n        consumerNode._setDependencyEvaluation(dependencyEvaluation);\r\n        evaluation = consumerNode;\r\n    } else {\r\n        // Otherwise, create the evaluation record.\r\n        const pureValueNodeEvaluation = new RuntimePVNodeEvaluation(consumerNode, dependencyEvaluation);\r\n        evaluation = pureValueNodeEvaluation;\r\n    }\r\n\r\n    instantiationMap.set(node, evaluation);\r\n    return evaluation;\r\n}\r\n\r\nclass DependencyEvaluation implements PoseNodeDependencyEvaluation {\r\n    constructor (\r\n        bindingEvaluations: readonly RuntimePVNodePropertyBinding[],\r\n    ) {\r\n        this._bindingEvaluations = bindingEvaluations;\r\n    }\r\n\r\n    public evaluate (): void {\r\n        const {\r\n            _bindingEvaluations: bindingEvaluations,\r\n        } = this;\r\n\r\n        for (const binding of bindingEvaluations) {\r\n            binding.evaluate();\r\n        }\r\n    }\r\n\r\n    private _bindingEvaluations: readonly RuntimePVNodePropertyBinding[];\r\n}\r\n\r\nclass RuntimePVNodeEvaluation {\r\n    constructor (\r\n        private _node: PureValueNode,\r\n        private _dependency: DependencyEvaluation,\r\n    ) {\r\n        this._outputs = new Array(_node.outputCount);\r\n    }\r\n\r\n    get node (): PureValueNode {\r\n        return this._node;\r\n    }\r\n\r\n    public get outputCount (): number {\r\n        return this._outputs.length;\r\n    }\r\n\r\n    public getDefaultOutput (): unknown {\r\n        return this.getOutput(0);\r\n    }\r\n\r\n    public getOutput (outputIndex: number): unknown {\r\n        return this._outputs[outputIndex];\r\n    }\r\n\r\n    public evaluate (): void {\r\n        const {\r\n            _node: node,\r\n            _dependency: dependency,\r\n        } = this;\r\n        // Evaluate the dependency.\r\n        dependency.evaluate();\r\n        // Evaluate the node.\r\n        node.selfEvaluate(this._outputs);\r\n    }\r\n\r\n    protected _outputs: unknown[];\r\n}\r\n\r\ntype RuntimeNodeEvaluation = PoseNode | RuntimePVNodeEvaluation;\r\n\r\nfunction linkPoseNode (\r\n    consumerNode: PoseNode,\r\n    consumerInputPath: NodeInputPath,\r\n    producerNode: PoseNode,\r\n    producerOutputIndex: number,\r\n): void {\r\n    const [consumerPropertyKey, consumerElementIndex = -1] = consumerInputPath;\r\n    if (!(consumerPropertyKey in consumerNode)) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node has no property ${consumerPropertyKey}`);\r\n        return;\r\n    }\r\n\r\n    if (producerOutputIndex !== 0) {\r\n        // Rule: pose nodes have and only have one output.\r\n        warn(`Node ${producerNode.toString()} does not have specified output ${producerOutputIndex}.`);\r\n        return;\r\n    }\r\n\r\n    const consumerProperty = consumerNode[consumerPropertyKey];\r\n\r\n    // Plain property binding.\r\n\r\n    if (consumerElementIndex < 0) {\r\n        if (consumerProperty !== null) {\r\n            // Invalid binding.\r\n            warn(`Invalid binding: consumer node's input ${consumerPropertyKey} should be leaved as evaluation before evaluation.`);\r\n            return;\r\n        }\r\n\r\n        consumerNode[consumerPropertyKey] = producerNode;\r\n        return;\r\n    }\r\n\r\n    // The following is dedicated to array element bindings.\r\n\r\n    if (!Array.isArray(consumerProperty)) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node's input ${consumerPropertyKey} should be an array.`);\r\n        return;\r\n    }\r\n\r\n    if (consumerElementIndex >= consumerProperty.length) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node's input ${consumerPropertyKey} `\r\n            + `have length ${consumerProperty.length} but the binding specified ${consumerElementIndex}`);\r\n        return;\r\n    }\r\n    if (consumerProperty[consumerElementIndex] !== null) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node's input ${consumerPropertyKey}[${consumerElementIndex}] should be leaved as null before evaluation`);\r\n        return;\r\n    }\r\n\r\n    consumerProperty[consumerElementIndex] = producerNode;\r\n}\r\n\r\ninterface RuntimePVNodePropertyBinding {\r\n    evaluate(): void;\r\n}\r\n\r\nclass RuntimePVNodePlainPropertyBinding implements RuntimePVNodePropertyBinding {\r\n    constructor (\r\n        private _consumerNode: EvaluatableNode,\r\n        private _consumerPropertyKey: string,\r\n        private _producerRecord: RuntimePVNodeEvaluation,\r\n        private _producerOutputIndex: number,\r\n    ) {\r\n    }\r\n\r\n    public evaluate (): void {\r\n        this._producerRecord.evaluate();\r\n        this._consumerNode[this._consumerPropertyKey] = this._producerRecord.getOutput(this._producerOutputIndex);\r\n    }\r\n}\r\n\r\nclass RuntimePVNodeArrayElementPropertyBinding implements RuntimePVNodePropertyBinding {\r\n    constructor (\r\n        private _consumerNode: EvaluatableNode,\r\n        private _consumerPropertyKey: string,\r\n        private _consumerElementIndex: number,\r\n        private _producerRecord: RuntimePVNodeEvaluation,\r\n        private _producerOutputIndex: number,\r\n    ) {\r\n    }\r\n\r\n    public evaluate (): void {\r\n        this._producerRecord.evaluate();\r\n        this._consumerNode[this._consumerPropertyKey][this._consumerElementIndex] = this._producerRecord.getOutput(this._producerOutputIndex);\r\n    }\r\n}\r\n\r\nfunction linkPVNode (\r\n    consumerNode: EvaluatableNode,\r\n    consumerInputPath: NodeInputPath,\r\n    producerRecord: RuntimePVNodeEvaluation,\r\n    producerOutputIndex: number,\r\n): RuntimePVNodePropertyBinding | undefined {\r\n    const [consumerPropertyKey, consumerElementIndex = -1] = consumerInputPath;\r\n    if (!(consumerPropertyKey in consumerNode)) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node has no property ${consumerPropertyKey}`);\r\n        return undefined;\r\n    }\r\n\r\n    const consumerProperty = consumerNode[consumerPropertyKey];\r\n\r\n    // Plain property binding.\r\n\r\n    if (consumerElementIndex < 0) {\r\n        return new RuntimePVNodePlainPropertyBinding(\r\n            consumerNode,\r\n            consumerPropertyKey,\r\n            producerRecord,\r\n            producerOutputIndex,\r\n        );\r\n    }\r\n\r\n    // The following is dedicated to array element bindings.\r\n\r\n    if (!Array.isArray(consumerProperty)) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node's input ${consumerPropertyKey} should be an array.`);\r\n        return undefined;\r\n    }\r\n\r\n    if (consumerElementIndex >= consumerProperty.length) {\r\n        // Invalid binding.\r\n        warn(`Invalid binding: consumer node's input ${consumerPropertyKey} `\r\n            + `have length ${consumerProperty.length} but the binding specified ${consumerElementIndex}`);\r\n        return undefined;\r\n    }\r\n\r\n    return new RuntimePVNodeArrayElementPropertyBinding(\r\n        consumerNode,\r\n        consumerPropertyKey,\r\n        consumerElementIndex,\r\n        producerRecord,\r\n        producerOutputIndex,\r\n    );\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport {\r\n    StateMachine, State, isAnimationTransition,\r\n    SubStateMachine, EmptyState, EmptyStateTransition,\r\n    ProceduralPoseState, ProceduralPoseTransition,\r\n} from '../animation-graph';\r\nimport { MotionEval, MotionPort } from '../motion';\r\nimport { createEval } from '../create-eval';\r\nimport { BindContext, validateVariableExistence, validateVariableType, VariableType } from '../parametric';\r\nimport { ConditionEval, TriggerCondition } from './condition';\r\nimport { MotionState } from './motion-state';\r\nimport { warnID, assertIsTrue, assertIsNonNullable, Pool, approx, clamp01 } from '../../../core';\r\nimport { AnimationClip } from '../../animation-clip';\r\nimport type { AnimationController } from '../animation-controller';\r\nimport { StateMachineComponent } from './state-machine-component';\r\nimport { InteractiveState } from './state';\r\nimport {\r\n    AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphUpdateContext, AnimationGraphUpdateContextGenerator,\r\n    AnimationGraphSettleContext,\r\n    TriggerResetter,\r\n} from '../animation-graph-context';\r\nimport { blendPoseInto, Pose } from '../../core/pose';\r\nimport { PoseNode } from '../pose-graph/pose-node';\r\nimport { instantiatePoseGraph, InstantiatedPoseGraph } from '../pose-graph/instantiation';\r\nimport { ConditionEvaluationContext } from './condition/condition-base';\r\nimport { ReadonlyClipOverrideMap } from '../clip-overriding';\r\nimport { AnimationGraphEventBinding } from '../event/event-binding';\r\n\r\n/**\r\n * The max transitions can be matched in single frame.\r\n *\r\n * @internal Only exported for test usage.\r\n */\r\nexport const MAX_TRANSITIONS_PER_FRAME = 16;\r\n\r\n/**\r\n * @en\r\n * Runtime status of a transition.\r\n * @zh\r\n * 过渡的运行状态。\r\n */\r\nexport interface TransitionStatus {\r\n    /**\r\n     * @en\r\n     * The duration of the transition.\r\n     * @zh\r\n     * 过渡的周期。\r\n     */\r\n    duration: number;\r\n\r\n    /**\r\n     * @en\r\n     * The progress of the transition.\r\n     * @zh\r\n     * 过渡的进度。\r\n     */\r\n    time: number;\r\n}\r\n\r\n/**\r\n * @en\r\n * Runtime clip status of a motion state.\r\n * @zh\r\n * 动作状态中包含的剪辑的运行状态。\r\n */\r\nexport interface ClipStatus {\r\n    /**\r\n     * @en\r\n     * The clip object.\r\n     * @zh\r\n     * 剪辑对象。\r\n     */\r\n    clip: AnimationClip;\r\n\r\n    /**\r\n     * @en\r\n     * The clip's weight.\r\n     * @zh\r\n     * 剪辑的权重。\r\n     */\r\n    weight: number;\r\n}\r\n\r\n/**\r\n * @en\r\n * Runtime status of a motion state.\r\n * @zh\r\n * 动作状态的运行状态。\r\n */\r\nexport interface MotionStateStatus {\r\n    /**\r\n     * For testing.\r\n     * TODO: remove it.\r\n     * @internal\r\n     */\r\n    __DEBUG_ID__?: string;\r\n\r\n    /**\r\n     * @en\r\n     * The normalized time of the state.\r\n     * It would be the fraction part of `elapsed-time / duration` if elapsed time is non-negative,\r\n     * and would be 1 plus the fraction part of `(elapsed-time / duration)` otherwise.\r\n     * This is **NOT** the clip's progress if the state is not a clip motion or its wrap mode isn't loop.\r\n     * @zh\r\n     * 状态的规范化时间。\r\n     * 如果流逝的时间是非负的，它就是 `流逝时间 / 周期` 的小数部分；否则，它是 `(流逝时间 / 周期)` 的小数部分加 1。\r\n     * 它并不一定代表剪辑的进度，因为该状态可能并不是一个剪辑动作，或者它的循环模式并非循环。\r\n     */\r\n    progress: number;\r\n}\r\n\r\nclass TopLevelStateMachineEvaluation {\r\n    public declare name: string;\r\n\r\n    public passthroughWeight = 1.0;\r\n\r\n    constructor (\r\n        stateMachine: StateMachine,\r\n        name: string,\r\n        context: AnimationGraphBindingContext,\r\n    ) {\r\n        this._additive = context.additive;\r\n        this.name = name;\r\n        this._controller = context.controller;\r\n        const { entry, exit } = this._addStateMachine(\r\n            stateMachine,\r\n            null,\r\n            context,\r\n            name,\r\n        );\r\n        this._topLevelEntry = entry;\r\n        this._topLevelExit = exit;\r\n        this._currentNode = entry;\r\n        entry.increaseActiveReference();\r\n        this._resetTrigger = context.triggerResetter;\r\n    }\r\n\r\n    /**\r\n     * Indicates if this layer's top level graph reached its exit.\r\n     */\r\n    get exited (): boolean {\r\n        return this._currentNode === this._topLevelExit;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        const { _proceduralPoseStates: proceduralPoseStates } = this;\r\n        const nProceduralPoseStates = proceduralPoseStates.length;\r\n        for (let iState = 0; iState < nProceduralPoseStates; ++iState) {\r\n            const state = proceduralPoseStates[iState];\r\n            state.settle(context);\r\n        }\r\n    }\r\n\r\n    public reenter (): void {\r\n        // Known problem: no callbacks are triggered.\r\n\r\n        for (const transition of this._activatedTransitions) {\r\n            transition.destination.decreaseActiveReference();\r\n            this._activatedTransitionPool.free(transition);\r\n        }\r\n        this._activatedTransitions.length = 0;\r\n\r\n        this._topLevelEntry.increaseActiveReference();\r\n        this._currentNode.decreaseActiveReference();\r\n        this._currentNode = this._topLevelEntry;\r\n    }\r\n\r\n    public update (context: AnimationGraphUpdateContext): void {\r\n        assertIsTrue(!this.exited);\r\n\r\n        this._loopMatchTransitions();\r\n        this._resetStateTickFlagsAndWeights();\r\n        this._updateActivatedTransitions(context.deltaTime);\r\n        this._commitStateUpdates(context);\r\n    }\r\n\r\n    public evaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const sampled = this._sample(context);\r\n        if (sampled) {\r\n            return sampled;\r\n        }\r\n        return this._pushNullishPose(context);\r\n    }\r\n\r\n    public getCurrentStateStatus (): Readonly<MotionStateStatus> | null {\r\n        const { _currentNode: currentNode } = this;\r\n        if (currentNode.kind === NodeKind.animation) {\r\n            return currentNode.getStatus();\r\n        } else if (currentNode.kind === NodeKind.procedural) {\r\n            return currentNode.getStatus();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public getCurrentClipStatuses (): Iterable<Readonly<ClipStatus>> {\r\n        const { _currentNode: currentNode } = this;\r\n        if (currentNode.kind === NodeKind.animation) {\r\n            return currentNode.getClipStatuses(currentNode.absoluteWeight);\r\n        } else {\r\n            return emptyClipStatusesIterable;\r\n        }\r\n    }\r\n\r\n    public getCurrentTransition (transitionStatus: TransitionStatus): boolean {\r\n        const { _activatedTransitions: activatedTransitions } = this;\r\n        if (activatedTransitions.length === 0) {\r\n            return false;\r\n        }\r\n        const lastActivatedTransition = activatedTransitions[activatedTransitions.length - 1];\r\n        const baseDurationState = activatedTransitions.length === 1\r\n            ? this._currentNode\r\n            : activatedTransitions[activatedTransitions.length - 2].destination; // Else, the previous transition's destination state.\r\n        const absoluteDuration = lastActivatedTransition.getAbsoluteDuration(baseDurationState);\r\n        transitionStatus.duration = absoluteDuration;\r\n        transitionStatus.time = lastActivatedTransition.normalizedElapsedTime * absoluteDuration;\r\n        return true;\r\n    }\r\n\r\n    public getNextStateStatus (): Readonly<MotionStateStatus> | null {\r\n        const { _activatedTransitions: activatedTransitions } = this;\r\n        if (activatedTransitions.length === 0) {\r\n            return null;\r\n        }\r\n        const lastState = activatedTransitions[activatedTransitions.length - 1].destination;\r\n        switch (lastState.kind) {\r\n        default:\r\n            break;\r\n        case NodeKind.procedural:\r\n            return lastState.getStatus();\r\n        case NodeKind.animation:\r\n            return lastState.getStatus();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getNextClipStatuses (): Iterable<Readonly<ClipStatus>> {\r\n        const { _activatedTransitions: activatedTransitions } = this;\r\n        if (activatedTransitions.length === 0) {\r\n            return emptyClipStatusesIterable;\r\n        }\r\n        const lastActivatedTransition = activatedTransitions[activatedTransitions.length - 1];\r\n        const lastState = lastActivatedTransition.destination;\r\n        switch (lastState.kind) {\r\n        default:\r\n            return emptyClipStatusesIterable;\r\n        case NodeKind.animation:\r\n            return lastState.getClipStatuses(lastActivatedTransition.destination.absoluteWeight) ?? emptyClipStatusesIterable;\r\n        }\r\n    }\r\n\r\n    public overrideClips (context: AnimationGraphBindingContext): void {\r\n        const { _motionStates: motionStates } = this;\r\n        const nMotionStates = motionStates.length;\r\n        for (let iMotionState = 0; iMotionState < nMotionStates; ++iMotionState) {\r\n            const node = motionStates[iMotionState];\r\n            node.overrideClips(context);\r\n        }\r\n    }\r\n\r\n    private declare _controller: AnimationController;\r\n    /**\r\n     * Preserved here for clip overriding.\r\n     */\r\n    private _motionStates: VMSMEval[] = [];\r\n    /**\r\n     * Preserved here for settle stage.\r\n     */\r\n    private readonly _proceduralPoseStates: ProceduralPoseStateEval[] = [];\r\n    private _topLevelEntry: NodeEval;\r\n    private _topLevelExit: NodeEval;\r\n    private _currentNode: NodeEval;\r\n    private _pendingTransitionPath: TransitionEval[] = [];\r\n    private _activatedTransitions: ActivatedTransition[] = [];\r\n    private _activatedTransitionPool = ActivatedTransition.createPool(4);\r\n    private declare _triggerReset: TriggerResetter;\r\n    private _updateContextGenerator = new AnimationGraphUpdateContextGenerator();\r\n    private _conditionEvaluationContext = new ConditionEvaluationContextImpl();\r\n    private _additive = false;\r\n\r\n    private _addStateMachine (\r\n        graph: StateMachine,\r\n        parentStateMachineInfo: StateMachineInfo | null,\r\n        context: AnimationGraphBindingContext,\r\n        __DEBUG_ID__: string,\r\n    ): StateMachineInfo {\r\n        const nodes = Array.from(graph.states());\r\n\r\n        let entryEval: SpecialStateEval | undefined;\r\n        let anyNode: SpecialStateEval | undefined;\r\n        let exitEval: SpecialStateEval | undefined;\r\n\r\n        const nodeEvaluations = nodes.map((node): NodeEval | VMSMEval | null => {\r\n            if (node instanceof MotionState) {\r\n                const motionStateEval = new VMSMEval(node, context);\r\n                this._motionStates.push(motionStateEval);\r\n                return motionStateEval;\r\n            } else if (node === graph.entryState) {\r\n                return entryEval = new SpecialStateEval(node, NodeKind.entry, node.name);\r\n            } else if (node === graph.exitState) {\r\n                return exitEval = new SpecialStateEval(node, NodeKind.exit, node.name);\r\n            } else if (node === graph.anyState) {\r\n                return anyNode = new SpecialStateEval(node, NodeKind.any, node.name);\r\n            } else if (node instanceof EmptyState) {\r\n                return new EmptyStateEval(node);\r\n            } else if (node instanceof ProceduralPoseState) {\r\n                const stateEval = new ProceduralPoseStateEval(node, context);\r\n                this._proceduralPoseStates.push(stateEval);\r\n                return stateEval;\r\n            } else {\r\n                assertIsTrue(node instanceof SubStateMachine);\r\n                return null;\r\n            }\r\n        });\r\n\r\n        assertIsNonNullable(entryEval, 'Entry node is missing');\r\n        assertIsNonNullable(exitEval, 'Exit node is missing');\r\n        assertIsNonNullable(anyNode, 'Any node is missing');\r\n\r\n        const stateMachineInfo: StateMachineInfo = {\r\n            components: null,\r\n            parent: parentStateMachineInfo,\r\n            entry: entryEval,\r\n            exit: exitEval,\r\n            any: anyNode,\r\n        };\r\n\r\n        for (let iNode = 0; iNode < nodes.length; ++iNode) {\r\n            const nodeEval = nodeEvaluations[iNode];\r\n            if (nodeEval) {\r\n                nodeEval.stateMachine = stateMachineInfo;\r\n            }\r\n        }\r\n\r\n        const subStateMachineInfos = nodes.map((node) => {\r\n            if (node instanceof SubStateMachine) {\r\n                const subStateMachineInfo = this._addStateMachine(\r\n                    node.stateMachine,\r\n                    stateMachineInfo,\r\n                    context,\r\n                    `${__DEBUG_ID__}/${node.name}`,\r\n                );\r\n                subStateMachineInfo.components = new InstantiatedComponents(node);\r\n                return subStateMachineInfo;\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n\r\n        if (DEBUG) {\r\n            for (const nodeEval of nodeEvaluations) {\r\n                if (nodeEval) {\r\n                    nodeEval.setPrefix_debug(`${__DEBUG_ID__}/`);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let iNode = 0; iNode < nodes.length; ++iNode) {\r\n            const node = nodes[iNode];\r\n            const outgoingTemplates = graph.getOutgoings(node);\r\n\r\n            let fromNode: NodeEval | VMSMEval;\r\n            if (node instanceof SubStateMachine) {\r\n                const subStateMachineInfo = subStateMachineInfos[iNode];\r\n                assertIsNonNullable(subStateMachineInfo);\r\n                fromNode = subStateMachineInfo.exit;\r\n            } else {\r\n                const nodeEval = nodeEvaluations[iNode];\r\n                assertIsNonNullable(nodeEval);\r\n                fromNode = nodeEval;\r\n            }\r\n\r\n            for (const outgoing of outgoingTemplates) {\r\n                const outgoingNode = outgoing.to;\r\n                const iOutgoingNode = nodes.findIndex((nodeTemplate) => nodeTemplate === outgoing.to);\r\n                if (iOutgoingNode < 0) {\r\n                    assertIsTrue(false, 'Bad animation data');\r\n                }\r\n\r\n                let toNode: NodeEval | VMSMEval;\r\n                if (outgoingNode instanceof SubStateMachine) {\r\n                    const subStateMachineInfo = subStateMachineInfos[iOutgoingNode];\r\n                    assertIsNonNullable(subStateMachineInfo);\r\n                    toNode = subStateMachineInfo.entry;\r\n                } else {\r\n                    const nodeEval = nodeEvaluations[iOutgoingNode];\r\n                    assertIsNonNullable(nodeEval);\r\n                    if (nodeEval instanceof VMSMEval) {\r\n                        toNode = nodeEval.entry;\r\n                    } else {\r\n                        toNode = nodeEval;\r\n                    }\r\n                }\r\n\r\n                const conditions = outgoing.conditions.map((condition) => condition[createEval](context));\r\n\r\n                const transitionEval: TransitionEval = {\r\n                    conditions,\r\n                    to: toNode,\r\n                    triggers: undefined,\r\n                    duration: 0.0,\r\n                    normalizedDuration: false,\r\n                    destinationStart: 0.0,\r\n                    relativeDestinationStart: false,\r\n                    exitCondition: 0.0,\r\n                    exitConditionEnabled: false,\r\n                    activated: false,\r\n                    startEventBinding: undefined,\r\n                    endEventBinding: undefined,\r\n                };\r\n\r\n                if (isAnimationTransition(outgoing)\r\n                    || outgoing instanceof EmptyStateTransition\r\n                    || outgoing instanceof ProceduralPoseTransition\r\n                ) {\r\n                    transitionEval.duration = outgoing.duration;\r\n                    transitionEval.destinationStart = outgoing.destinationStart;\r\n                    transitionEval.relativeDestinationStart = outgoing.relativeDestinationStart;\r\n                    if (outgoing.startEventBinding.isBound) {\r\n                        transitionEval.startEventBinding = outgoing.startEventBinding;\r\n                    }\r\n                    if (outgoing.endEventBinding.isBound) {\r\n                        transitionEval.endEventBinding = outgoing.endEventBinding;\r\n                    }\r\n                    if (isAnimationTransition(outgoing)) {\r\n                        transitionEval.normalizedDuration = outgoing.relativeDuration;\r\n                        transitionEval.exitConditionEnabled = outgoing.exitConditionEnabled;\r\n                        transitionEval.exitCondition = outgoing.exitCondition;\r\n                    }\r\n                }\r\n\r\n                transitionEval.conditions.forEach((conditionEval, iCondition) => {\r\n                    const condition = outgoing.conditions[iCondition];\r\n                    if (condition instanceof TriggerCondition && condition.trigger) {\r\n                        // TODO: validates the existence of trigger?\r\n                        (transitionEval.triggers ??= []).push(condition.trigger);\r\n                    }\r\n                });\r\n\r\n                fromNode.addTransition(transitionEval);\r\n            }\r\n        }\r\n\r\n        return stateMachineInfo;\r\n    }\r\n\r\n    /**\r\n     * Loop match transitions util no match,\r\n     * or util `MAX_TRANSITIONS_PER_FRAME` is reached(in case of circular transition formed or too long transition path).\r\n     */\r\n    private _loopMatchTransitions (): void {\r\n        const {\r\n            _pendingTransitionPath: pendingTransitionPath,\r\n            _activatedTransitions: activatedTransitions,\r\n        } = this;\r\n        assertIsTrue(pendingTransitionPath.length === 0);\r\n\r\n        let matchingSource = activatedTransitions.length === 0\r\n            ? this._currentNode\r\n            : activatedTransitions[activatedTransitions.length - 1].destination;\r\n        for (let iterations = 0;\r\n            /* The terminal condition is handled in loop body */;\r\n            ++iterations\r\n        ) {\r\n            if (iterations >= MAX_TRANSITIONS_PER_FRAME) {\r\n                let prettyPath = '';\r\n                if (DEBUG) {\r\n                    const lastDestination = activatedTransitions[activatedTransitions.length - 1].destination;\r\n                    let loopFormPosition = -1;\r\n                    for (let i = activatedTransitions.length - 2; i >= 0; --i) {\r\n                        if (activatedTransitions[i].destination === lastDestination) {\r\n                            loopFormPosition = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    prettyPath = `${this._currentNode.name} --> ... --> `;\r\n                    const pathToPrint = loopFormPosition < 0\r\n                        ? activatedTransitions.slice(-MAX_TRANSITIONS_PER_FRAME) // We didn't find a loop.\r\n                        : activatedTransitions.slice(loopFormPosition); // Find a loop, print from last loop position.\r\n                    prettyPath += `${pathToPrint.map((t) => t.destination.name).join(' --> ')}`;\r\n                }\r\n                warnID(14000, MAX_TRANSITIONS_PER_FRAME, prettyPath);\r\n                break;\r\n            }\r\n\r\n            const transition = this._matchNextTransition(matchingSource);\r\n            if (!transition) {\r\n                break;\r\n            }\r\n\r\n            const destinationState = transition.to;\r\n            const currentMatchingSource = matchingSource;\r\n            matchingSource = destinationState;\r\n\r\n            if (!isRealState(destinationState)) {\r\n                pendingTransitionPath.push(transition);\r\n                continue;\r\n            }\r\n\r\n            // We found a self transition A->A, the transition is meaningless and not allowed.\r\n            if (destinationState === currentMatchingSource) {\r\n                break;\r\n            }\r\n\r\n            this._activateTransition(pendingTransitionPath, transition);\r\n            pendingTransitionPath.length = 0;\r\n        }\r\n\r\n        pendingTransitionPath.length = 0;\r\n    }\r\n\r\n    private _resetStateTickFlagsAndWeights (): void {\r\n        const {\r\n            _currentNode: currentNode,\r\n            _activatedTransitions: activatedTransitions,\r\n        } = this;\r\n\r\n        currentNode.resetTickFlagsAndWeight();\r\n        for (let iTransition = 0; iTransition < activatedTransitions.length; ++iTransition) {\r\n            const { destination } = activatedTransitions[iTransition];\r\n            destination.resetTickFlagsAndWeight();\r\n        }\r\n    }\r\n\r\n    private _commitStateUpdates (parentContext: AnimationGraphUpdateContext): void {\r\n        const {\r\n            _currentNode: currentNode,\r\n            _activatedTransitions: activatedTransitions,\r\n            _updateContextGenerator: updateContextGenerator,\r\n        } = this;\r\n\r\n        // Update head state.\r\n        this._commitStateUpdate(currentNode, parentContext);\r\n\r\n        // Update states in transitions.\r\n        for (let iTransition = 0; iTransition < activatedTransitions.length; ++iTransition) {\r\n            const transition = activatedTransitions[iTransition];\r\n            const { destination } = transition;\r\n            this._commitStateUpdate(destination, parentContext);\r\n        }\r\n    }\r\n\r\n    private _commitStateUpdate (state: NodeEval, parentContext: AnimationGraphUpdateContext): void {\r\n        const {\r\n            _updateContextGenerator: updateContextGenerator,\r\n        } = this;\r\n        if (state.testTickFlag(StateTickFlag.UPDATED)) { // Don't evaluate a pose more than once.\r\n            return;\r\n        }\r\n        state.setTickFlag(StateTickFlag.UPDATED);\r\n        if (state.kind === NodeKind.animation) {\r\n            state.update(parentContext.deltaTime, this._controller);\r\n        } else if (state.kind === NodeKind.procedural) {\r\n            const updateContext = updateContextGenerator.generate(\r\n                parentContext.deltaTime,\r\n                parentContext.indicativeWeight * state.absoluteWeight,\r\n            );\r\n            state.update(updateContext);\r\n        }\r\n    }\r\n\r\n    private _sample (context: AnimationGraphEvaluationContext): Pose | null {\r\n        const {\r\n            _currentNode: currentNode,\r\n            _activatedTransitions: activatedTransitions,\r\n        } = this;\r\n\r\n        let passthroughWeight = 1.0;\r\n\r\n        // Evaluate head state.\r\n        let finalPose: Pose | null = null;\r\n        let sumActualBlendedWeight = 0.0;\r\n        if (currentNode.kind === NodeKind.animation) {\r\n            finalPose = currentNode.evaluate(context) ?? this._pushNullishPose(context);\r\n        } else if (currentNode.kind === NodeKind.procedural) {\r\n            finalPose = currentNode.evaluate(context) ?? this._pushNullishPose(context);\r\n        } else {\r\n            passthroughWeight -= currentNode.absoluteWeight;\r\n            finalPose = null;\r\n        }\r\n        if (finalPose) {\r\n            sumActualBlendedWeight = currentNode.absoluteWeight;\r\n        }\r\n        currentNode.setTickFlag(StateTickFlag.EVALUATED);\r\n\r\n        for (let iTransition = 0; iTransition < activatedTransitions.length; ++iTransition) {\r\n            const transition = activatedTransitions[iTransition];\r\n            const { destination } = transition;\r\n            if (destination.testTickFlag(StateTickFlag.EVALUATED)) { // Don't evaluate a pose more than once.\r\n                continue;\r\n            }\r\n            destination.setTickFlag(StateTickFlag.EVALUATED);\r\n            const destAbsoluteWeight = destination.absoluteWeight;\r\n            let destPose: Pose | null;\r\n            if (destination.kind === NodeKind.empty) {\r\n                passthroughWeight -= destAbsoluteWeight;\r\n                destPose = null;\r\n            } else {\r\n                destPose = destination.evaluate(context) ?? this._pushNullishPose(context);\r\n            }\r\n            if (!destPose) { // We can't get a pose from transition destination.\r\n                continue;\r\n            }\r\n            if (!finalPose) { // All previous states can't get a pose.\r\n                finalPose = destPose;\r\n            } else {\r\n                sumActualBlendedWeight += destAbsoluteWeight;\r\n                if (sumActualBlendedWeight) {\r\n                    const t = destAbsoluteWeight / sumActualBlendedWeight;\r\n                    blendPoseInto(finalPose, destPose, t);\r\n                    context.popPose();\r\n                } else {\r\n                    finalPose = destPose;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.passthroughWeight = passthroughWeight;\r\n\r\n        return finalPose;\r\n    }\r\n\r\n    private _pushNullishPose (context: AnimationGraphEvaluationContext): Pose {\r\n        return this._additive\r\n            ? context.pushZeroDeltaPose()\r\n            : context.pushDefaultedPose();\r\n    }\r\n\r\n    /**\r\n     * Searches for a transition which should be performed.\r\n     * @param sourceState The transition source state.\r\n     * @returns\r\n     */\r\n    private _matchNextTransition (sourceState: NodeEval): TransitionEval | null {\r\n        const transition = this._matchTransition(\r\n            sourceState,\r\n            sourceState,\r\n        );\r\n        if (transition) {\r\n            return transition;\r\n        }\r\n\r\n        if (sourceState.kind === NodeKind.animation || sourceState.kind === NodeKind.procedural) {\r\n            const transition = this._matchAnyScoped(sourceState);\r\n            if (transition) {\r\n                return transition;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param realNode Is used:\r\n     * - to determinate the starting state machine from where the any states are matched;\r\n     * - so we can solve transitions' relative durations.\r\n     */\r\n    private _matchAnyScoped (realNode: VMSMInternalState | ProceduralPoseStateEval): TransitionEval | null {\r\n        for (let ancestor: StateMachineInfo | null = realNode.stateMachine;\r\n            ancestor !== null;\r\n            ancestor = ancestor.parent) {\r\n            const transition = this._matchTransition(\r\n                ancestor.any,\r\n                realNode,\r\n            );\r\n            if (transition) {\r\n                return transition;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Searches for a transition which should be performed\r\n     * if specified node updates for no more than `deltaTime` and less than `result.requires`.\r\n     * We solve the relative durations of transitions based on duration of `realNode`.\r\n     *\r\n     * @returns The transition matched, or null if there's no matched transition.\r\n     */\r\n    private _matchTransition (node: NodeEval, realNode: NodeEval): TransitionEval | null {\r\n        assertIsTrue(node === realNode || node.kind === NodeKind.any);\r\n\r\n        const { _conditionEvaluationContext: conditionEvaluationContext } = this;\r\n        conditionEvaluationContext.set(realNode);\r\n\r\n        const { outgoingTransitions } = node;\r\n        const nTransitions = outgoingTransitions.length;\r\n        for (let iTransition = 0; iTransition < nTransitions; ++iTransition) {\r\n            const transition = outgoingTransitions[iTransition];\r\n            if (transition.activated) {\r\n                continue;\r\n            }\r\n\r\n            const { conditions } = transition;\r\n            const nConditions = conditions.length;\r\n\r\n            // Handle empty condition case.\r\n            if (nConditions === 0) {\r\n                if (node.kind === NodeKind.entry || node.kind === NodeKind.exit) {\r\n                    // These kinds of transition is definitely chosen.\r\n                    if (DEBUG) {\r\n                        conditionEvaluationContext.unset();\r\n                    }\r\n                    return transition;\r\n                }\r\n                if (!transition.exitConditionEnabled) {\r\n                    // Invalid transition, ignored.\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (realNode.kind === NodeKind.animation && transition.exitConditionEnabled) {\r\n                const exitTime = realNode.duration * transition.exitCondition;\r\n                const currentStateTime = realNode.time;\r\n                if (currentStateTime < exitTime) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let satisfied = true;\r\n            for (let iCondition = 0; iCondition < nConditions; ++iCondition) {\r\n                const condition = conditions[iCondition];\r\n                if (!condition.eval(this._conditionEvaluationContext)) {\r\n                    satisfied = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!satisfied) {\r\n                continue;\r\n            }\r\n\r\n            // Arrive here means all conditions are satisfied,\r\n            // and either the exit condition is disabled or the exit condition is just 0.0.\r\n            if (DEBUG) {\r\n                conditionEvaluationContext.unset();\r\n            }\r\n            return transition;\r\n        }\r\n        if (DEBUG) {\r\n            conditionEvaluationContext.unset();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _activateTransition (\r\n        prefix: readonly TransitionEval[],\r\n        lastTransition: TransitionEval,\r\n    ): void {\r\n        const destinationState = lastTransition.to;\r\n        assertIsTrue(isRealState(destinationState));\r\n\r\n        const activatedTransition = this._activatedTransitionPool.alloc();\r\n        activatedTransition.reset(prefix, lastTransition);\r\n        this._activatedTransitions.push(activatedTransition);\r\n\r\n        // Reset triggers along the path.\r\n        const nTransitions = activatedTransition.path.length;\r\n        for (let iTransition = 0; iTransition < nTransitions; ++iTransition) {\r\n            const transition = activatedTransition.path[iTransition];\r\n            this._resetTriggersOnTransition(transition);\r\n        }\r\n\r\n        // Call enter hooks on detailed transitions.\r\n        for (let iDetailedTransition = 0; iDetailedTransition < activatedTransition.path.length; ++iDetailedTransition) {\r\n            const detailedTransition = activatedTransition.path[iDetailedTransition];\r\n            // We're entering a state machine\r\n            this._callEnterMethods(detailedTransition.to);\r\n        }\r\n\r\n        // Fire transition out event on source real state.\r\n        assertIsTrue(this._activatedTransitions.length > 0);\r\n        const previousState = this._activatedTransitions.length === 1 // this activating transition\r\n            ? this._currentNode\r\n            : this._activatedTransitions[this._activatedTransitions.length - 2].destination;\r\n        if (previousState instanceof EventifiedStateEval) {\r\n            if (previousState.transitionOutEventBinding) {\r\n                this._emit(previousState.transitionOutEventBinding);\r\n            }\r\n        }\r\n\r\n        // Fire start event on the transition.\r\n        if (lastTransition.startEventBinding) {\r\n            this._emit(lastTransition.startEventBinding);\r\n        }\r\n\r\n        // Fire transition in event on destination real target.\r\n        if (destinationState instanceof EventifiedStateEval) {\r\n            if (destinationState.transitionInEventBinding) {\r\n                this._emit(destinationState.transitionInEventBinding);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update transitions, also update states within(includes the case of no transition).\r\n     * @param deltaTime Time piece.\r\n     * @returns\r\n     */\r\n    private _updateActivatedTransitions (deltaTime: number): void {\r\n        const {\r\n            _activatedTransitions: activatedTransitions,\r\n        } = this;\r\n\r\n        let iTransition = activatedTransitions.length - 1;\r\n\r\n        // Asserts: while updating transition sequences,\r\n        // the \"update consume time\" of the last transition, let's say _t_,\r\n        // always not less than those of preceding transitions.\r\n        // The reason is, if it's less than, means the last transition does not consume all the `deltaTime`,\r\n        // which further means the last transition was done and\r\n        // once the last transition was done, all preceding transitions are dropped.\r\n        //\r\n        // All states involved after updating shall also update _t_ times.\r\n\r\n        let remainingWeight = 1.0;\r\n\r\n        let lastTransitionIndex = iTransition;\r\n        for (; iTransition >= 0; --iTransition) {\r\n            const transition = activatedTransitions[iTransition];\r\n            const sourceState = iTransition === 0\r\n                ? this._currentNode\r\n                : activatedTransitions[iTransition - 1].destination;\r\n            transition.update(deltaTime, sourceState);\r\n\r\n            // Once the transition is done, all previous transitions should be dropped\r\n            // and we could break loop directly.\r\n            if (transition.done) {\r\n                this._dropActivatedTransitions(lastTransitionIndex);\r\n                break;\r\n            }\r\n\r\n            // Allocate weight for the destination state.\r\n            const destinationWeight = transition.normalizedElapsedTime * remainingWeight;\r\n            transition.destination.increaseAbsoluteWeight(destinationWeight);\r\n            remainingWeight *= (1.0 - transition.normalizedElapsedTime);\r\n\r\n            lastTransitionIndex = iTransition - 1;\r\n        }\r\n\r\n        // Allocate remain weight to the latest current state.\r\n        this._currentNode.increaseAbsoluteWeight(remainingWeight);\r\n    }\r\n\r\n    /**\r\n     * Drops the transitions from `0` to `lastTransitionIndex` in `this._activatedTransitions`.\r\n     * @note This methods may modifies the length of `this._activatedTransitions`.\r\n     */\r\n    private _dropActivatedTransitions (lastTransitionIndex: number): void {\r\n        const {\r\n            _activatedTransitions: activatedTransition,\r\n            _activatedTransitionPool: activatedTransitionPool,\r\n        } = this;\r\n        assertIsTrue(lastTransitionIndex >= 0 && lastTransitionIndex < activatedTransition.length);\r\n\r\n        const lenSubpath = lastTransitionIndex + 1;\r\n\r\n        const lastTransition = activatedTransition[lastTransitionIndex];\r\n        const newCurrentState = lastTransition.destination;\r\n\r\n        // Call exist hooks, then destroy the transition instance.\r\n        // Call end event binding on last transition.\r\n        {\r\n            assertIsTrue(lastTransition.path.length !== 0);\r\n            const lastRealTransition = lastTransition.path[lastTransition.path.length - 1];\r\n            if (lastRealTransition.endEventBinding) {\r\n                this._emit(lastRealTransition.endEventBinding);\r\n            }\r\n        }\r\n        this._callExitMethods(this._currentNode);\r\n        for (let iTransition = 0; iTransition <= lastTransitionIndex; ++iTransition) {\r\n            const transition = activatedTransition[iTransition];\r\n\r\n            // Except last transition,\r\n            // all transitions' should have their destination state decreasing active reference.\r\n            // The last transition don't need to decrease\r\n            // since it will become current node.\r\n            if (iTransition !== lastTransitionIndex) {\r\n                transition.destination.decreaseActiveReference();\r\n            }\r\n\r\n            // Call exit hooks on detailed transitions.\r\n            // If this is NOT the last transition, all detailed transitions would be exit.\r\n            // Otherwise, the last detailed transition is not included.\r\n            const iLastExitingDetailedTransition = iTransition === lastTransitionIndex\r\n                ? transition.path.length - 1\r\n                : transition.path.length;\r\n            for (let iDetailedTransition = 0; iDetailedTransition < iLastExitingDetailedTransition; ++iDetailedTransition) {\r\n                const detailedTransition = transition.path[iDetailedTransition];\r\n                this._callExitMethods(detailedTransition.to);\r\n            }\r\n\r\n            activatedTransitionPool.free(transition);\r\n        }\r\n\r\n        // Splice the subpath.\r\n        if (lastTransitionIndex === activatedTransition.length - 1) {\r\n            // Optimize for the usual case: there's only one transition.\r\n            activatedTransition.length = 0;\r\n        } else {\r\n            // General case: this should be same with `activatedTransition.splice(firstTransitionIndex, lenSubpath)`.\r\n            for (let iTransition = lastTransitionIndex + 1; iTransition < activatedTransition.length; ++iTransition) {\r\n                activatedTransition[iTransition - lenSubpath] = activatedTransition[iTransition];\r\n            }\r\n            activatedTransition.length -= lenSubpath;\r\n        }\r\n\r\n        // Redefine the very first state.\r\n        this._currentNode.decreaseActiveReference();\r\n        this._currentNode = newCurrentState;\r\n    }\r\n\r\n    private _resetTriggersOnTransition (transition: TransitionEval): void {\r\n        const { triggers } = transition;\r\n        if (triggers) {\r\n            const nTriggers = triggers.length;\r\n            for (let iTrigger = 0; iTrigger < nTriggers; ++iTrigger) {\r\n                const trigger = triggers[iTrigger];\r\n                this._resetTrigger(trigger);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resetTrigger (name: string): void {\r\n        const { _triggerReset: triggerResetFn } = this;\r\n        triggerResetFn(name);\r\n    }\r\n\r\n    private _callEnterMethods (node: NodeEval): void {\r\n        const { _controller: controller } = this;\r\n        switch (node.kind) {\r\n        default:\r\n            break;\r\n        case NodeKind.animation: {\r\n            node.components.callMotionStateEnterMethods(controller, node.getStatus());\r\n            break;\r\n        }\r\n        case NodeKind.entry:\r\n            node.stateMachine.components?.callStateMachineEnterMethods(controller);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private _callExitMethods (node: NodeEval): void {\r\n        const { _controller: controller } = this;\r\n        switch (node.kind) {\r\n        default:\r\n            break;\r\n        case NodeKind.animation: {\r\n            node.components.callMotionStateExitMethods(controller, node.getStatus());\r\n            break;\r\n        }\r\n        case NodeKind.exit:\r\n            node.stateMachine.components?.callStateMachineExitMethods(controller);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private _emit (eventBinding: AnimationGraphEventBinding): void {\r\n        eventBinding.emit(this._controller.node);\r\n    }\r\n}\r\n\r\nexport { TopLevelStateMachineEvaluation };\r\n\r\n/**\r\n * A real state is a state on which the state machine can really reside.\r\n */\r\ntype RealState = VMSMInternalState | ProceduralPoseStateEval | EmptyStateEval;\r\n\r\nfunction isRealState (stateEval: NodeEval): stateEval is RealState  {\r\n    return stateEval.kind === NodeKind.animation\r\n        || stateEval.kind === NodeKind.empty\r\n        || stateEval.kind === NodeKind.procedural;\r\n}\r\n\r\nfunction createStateStatusCache (): MotionStateStatus {\r\n    return {\r\n        progress: 0.0,\r\n    };\r\n}\r\n\r\ntype ReadonlyClipStatus = Readonly<ClipStatus>;\r\nconst emptyClipStatusesIterator: Iterator<ReadonlyClipStatus> = {\r\n    next (..._args: [] | [undefined]): IteratorResult<ReadonlyClipStatus> {\r\n        return {\r\n            done: true,\r\n            value: undefined,\r\n        };\r\n    },\r\n};\r\n\r\nconst emptyClipStatusesIterable: Iterable<ReadonlyClipStatus> = {\r\n    [Symbol.iterator] () {\r\n        return emptyClipStatusesIterator;\r\n    },\r\n};\r\n\r\nenum NodeKind {\r\n    entry, exit, any, animation,\r\n    empty,\r\n    procedural,\r\n}\r\n\r\nexport class StateEval {\r\n    /**\r\n     * @internal\r\n     */\r\n    public declare __DEBUG_ID__?: string;\r\n\r\n    public declare stateMachine: StateMachineInfo;\r\n\r\n    constructor (node: { name: string }) {\r\n        this.name = node.name;\r\n    }\r\n\r\n    public readonly name: string;\r\n\r\n    public outgoingTransitions: TransitionEval[] = [];\r\n\r\n    /**\r\n     * The absolute weight of this state.\r\n     */\r\n    get absoluteWeight (): number {\r\n        return this._absoluteWeight;\r\n    }\r\n\r\n    /**\r\n     * The count which counts how many places referencing this state:\r\n     * - If the state is activated as current state, the count increased.\r\n     * - If the state is activated as a transition destination, the count increased.\r\n     */\r\n    get activeReferenceCount (): number {\r\n        return this._activeReferenceCount;\r\n    }\r\n\r\n    public setPrefix_debug (prefix: string): void {\r\n        this.__DEBUG_ID__ = `${prefix}${this.name}`;\r\n    }\r\n\r\n    public addTransition (transition: TransitionEval): void {\r\n        this.outgoingTransitions.push(transition);\r\n    }\r\n\r\n    /**\r\n     * Increases an active reference.\r\n     */\r\n    public increaseActiveReference (): void {\r\n        if (this._activeReferenceCount === 0) {\r\n            this._absoluteWeight = 0.0;\r\n            this._tickFlags = 0;\r\n        }\r\n        ++this._activeReferenceCount;\r\n    }\r\n\r\n    /**\r\n     * Decrease an active reference.\r\n     */\r\n    public decreaseActiveReference (): void {\r\n        if (DEBUG) {\r\n            this._checkActivated();\r\n        }\r\n        --this._activeReferenceCount;\r\n    }\r\n\r\n    public resetTickFlagsAndWeight (): void {\r\n        this._checkActivated();\r\n        this._absoluteWeight = 0.0;\r\n        this._tickFlags = 0;\r\n    }\r\n\r\n    public increaseAbsoluteWeight (weight: number): void {\r\n        this._absoluteWeight += weight;\r\n    }\r\n\r\n    public testTickFlag (flag: StateTickFlag): boolean {\r\n        if (DEBUG) {\r\n            this._checkActivated();\r\n        }\r\n        return !!(this._tickFlags & flag);\r\n    }\r\n\r\n    public setTickFlag (flag: StateTickFlag): void {\r\n        if (DEBUG) {\r\n            this._checkActivated();\r\n        }\r\n        assertIsTrue(!this.testTickFlag(flag), `Can not set ${StateTickFlag[flag]} since it has been set!`);\r\n        this._tickFlags |= flag;\r\n    }\r\n\r\n    private _activeReferenceCount = 0;\r\n    private _tickFlags = 0;\r\n    private _absoluteWeight = 0.0;\r\n\r\n    private _checkActivated (): void {\r\n        assertIsTrue(this._activeReferenceCount > 0, `The state has not been activated`);\r\n    }\r\n}\r\n\r\nclass EventifiedStateEval extends StateEval {\r\n    constructor (state: MotionState | ProceduralPoseState) {\r\n        super(state);\r\n        if (state.transitionInEventBinding.isBound) {\r\n            this.transitionInEventBinding = state.transitionInEventBinding;\r\n        }\r\n        if (state.transitionOutEventBinding.isBound) {\r\n            this.transitionOutEventBinding = state.transitionOutEventBinding;\r\n        }\r\n    }\r\n\r\n    public transitionInEventBinding: AnimationGraphEventBinding | undefined = undefined;\r\n\r\n    public transitionOutEventBinding: AnimationGraphEventBinding | undefined = undefined;\r\n}\r\n\r\nenum StateTickFlag {\r\n    /**\r\n     * The state has been updated in this tick?\r\n     */\r\n    UPDATED = 1,\r\n\r\n    /**\r\n     * The state has been evaluated in this tick?\r\n     */\r\n    EVALUATED = 2,\r\n}\r\n\r\ntype StateMachineComponentMotionStateCallbackName = keyof Pick<\r\nStateMachineComponent,\r\n'onMotionStateEnter' | 'onMotionStateExit' | 'onMotionStateUpdate'\r\n>;\r\n\r\ntype StateMachineComponentStateMachineCallbackName = keyof Pick<\r\nStateMachineComponent,\r\n'onStateMachineEnter' | 'onStateMachineExit'\r\n>;\r\n\r\nclass InstantiatedComponents {\r\n    constructor (node: InteractiveState) {\r\n        this._components = node.instantiateComponents();\r\n    }\r\n\r\n    public callMotionStateEnterMethods (controller: AnimationController, status: Readonly<MotionStateStatus>): void {\r\n        this._callMotionStateCallbackIfNonDefault('onMotionStateEnter', controller, status);\r\n    }\r\n\r\n    public callMotionStateUpdateMethods (controller: AnimationController, status: Readonly<MotionStateStatus>): void {\r\n        this._callMotionStateCallbackIfNonDefault('onMotionStateUpdate', controller, status);\r\n    }\r\n\r\n    public callMotionStateExitMethods (controller: AnimationController, status: Readonly<MotionStateStatus>): void {\r\n        this._callMotionStateCallbackIfNonDefault('onMotionStateExit', controller, status);\r\n    }\r\n\r\n    public callStateMachineEnterMethods (controller: AnimationController): void {\r\n        this._callStateMachineCallbackIfNonDefault('onStateMachineEnter', controller);\r\n    }\r\n\r\n    public callStateMachineExitMethods (controller: AnimationController): void {\r\n        this._callStateMachineCallbackIfNonDefault('onStateMachineExit', controller);\r\n    }\r\n\r\n    private declare _components: StateMachineComponent[];\r\n\r\n    private _callMotionStateCallbackIfNonDefault<\r\n        TMethodName extends StateMachineComponentMotionStateCallbackName\r\n    > (\r\n        methodName: TMethodName,\r\n        controller: AnimationController,\r\n        status: MotionStateStatus,\r\n    ): void {\r\n        const { _components: components } = this;\r\n        const nComponents = components.length;\r\n        for (let iComponent = 0; iComponent < nComponents; ++iComponent) {\r\n            const component = components[iComponent];\r\n            if (component[methodName] !== StateMachineComponent.prototype[methodName]) {\r\n                component[methodName](controller, status);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _callStateMachineCallbackIfNonDefault<\r\n        TMethodName extends StateMachineComponentStateMachineCallbackName\r\n    > (\r\n        methodName: TMethodName,\r\n        controller: AnimationController,\r\n    ): void {\r\n        const { _components: components } = this;\r\n        const nComponents = components.length;\r\n        for (let iComponent = 0; iComponent < nComponents; ++iComponent) {\r\n            const component = components[iComponent];\r\n            if (component[methodName] !== StateMachineComponent.prototype[methodName]) {\r\n                component[methodName](controller);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface StateMachineInfo {\r\n    parent: StateMachineInfo | null;\r\n    entry: SpecialStateEval;\r\n    exit: SpecialStateEval;\r\n    any: SpecialStateEval;\r\n    components: InstantiatedComponents | null;\r\n}\r\n\r\n/**\r\n * Track the evaluation of a virtual motion state-machine.\r\n */\r\nclass VMSMEval {\r\n    constructor (state: MotionState, context: AnimationGraphBindingContext) {\r\n        const name = state.name;\r\n\r\n        this._baseSpeed = state.speed;\r\n        this._setSpeedMultiplier(1.0);\r\n\r\n        if (state.speedMultiplierEnabled && state.speedMultiplier) {\r\n            const speedMultiplierVarName = state.speedMultiplier;\r\n            const varInstance = context.getVar(speedMultiplierVarName);\r\n            if (validateVariableExistence(varInstance, speedMultiplierVarName)) {\r\n                validateVariableType(varInstance.type, VariableType.FLOAT, speedMultiplierVarName);\r\n                varInstance.bind(this._setSpeedMultiplier, this);\r\n                const initialSpeedMultiplier = varInstance.value as number;\r\n                this._setSpeedMultiplier(initialSpeedMultiplier);\r\n            }\r\n        }\r\n\r\n        const sourceEval = state.motion?.[createEval](context, false) ?? null;\r\n        if (sourceEval) {\r\n            Object.defineProperty(sourceEval, '__DEBUG_ID__', { value: name });\r\n        }\r\n\r\n        this._source = sourceEval;\r\n\r\n        this._publicState = new VMSMInternalState(this, state, sourceEval?.createPort());\r\n        this._privateState = new VMSMInternalState(this, state, sourceEval?.createPort());\r\n\r\n        this.components = new InstantiatedComponents(state);\r\n    }\r\n\r\n    public declare components: InstantiatedComponents;\r\n\r\n    get duration (): number {\r\n        return this._source?.duration ?? 0.0;\r\n    }\r\n\r\n    get speed (): number {\r\n        return this._speed;\r\n    }\r\n\r\n    get entry (): VMSMInternalState {\r\n        return this._publicState;\r\n    }\r\n\r\n    get stateMachine (): StateMachineInfo {\r\n        return this._stateMachine;\r\n    }\r\n\r\n    set stateMachine (value) {\r\n        this._stateMachine = value;\r\n        this._publicState.stateMachine = value;\r\n        this._privateState.stateMachine = value;\r\n    }\r\n\r\n    public setPrefix_debug (prefix: string): void {\r\n        this._publicState.setPrefix_debug(prefix);\r\n        this._privateState.setPrefix_debug(prefix);\r\n    }\r\n\r\n    public addTransition (transition: Readonly<TransitionEval>): void {\r\n        // If the transition is a self transition,\r\n        // copy the transition but modify it so that it point to the private state.\r\n        if (transition.to === this._publicState) {\r\n            this._publicState.addTransition({\r\n                ...transition,\r\n                to: this._privateState,\r\n            });\r\n        } else {\r\n            this._publicState.addTransition(transition);\r\n        }\r\n        this._privateState.addTransition(transition);\r\n    }\r\n\r\n    public getClipStatuses (baseWeight: number): Iterable<Readonly<ClipStatus>> {\r\n        const { _source: source } = this;\r\n        if (!source) {\r\n            return emptyClipStatusesIterable;\r\n        } else {\r\n            return {\r\n                [Symbol.iterator]: (): Iterator<ClipStatus, any, undefined> => source.getClipStatuses(baseWeight),\r\n            };\r\n        }\r\n    }\r\n\r\n    public overrideClips (context: AnimationGraphBindingContext): void {\r\n        this._source?.overrideClips(context);\r\n    }\r\n\r\n    private _source: MotionEval | null = null;\r\n    private _baseSpeed = 1.0;\r\n    private _speed = 1.0;\r\n    private _publicState: VMSMInternalState;\r\n    private _privateState: VMSMInternalState;\r\n    private declare _stateMachine: StateMachineInfo;\r\n    private declare _debugId: string;\r\n\r\n    private _setSpeedMultiplier (value: number): void {\r\n        this._speed = this._baseSpeed * value;\r\n    }\r\n}\r\n\r\nclass VMSMInternalState extends EventifiedStateEval {\r\n    public readonly kind = NodeKind.animation;\r\n\r\n    constructor (\r\n        container: VMSMEval,\r\n        containerState: MotionState,\r\n        port: MotionPort | undefined,\r\n    ) {\r\n        super(containerState);\r\n        this._container = container;\r\n        this._port = port;\r\n    }\r\n\r\n    get duration (): number {\r\n        return this._container.duration;\r\n    }\r\n\r\n    get components (): InstantiatedComponents {\r\n        return this._container.components;\r\n    }\r\n\r\n    get normalizedTime (): number {\r\n        return this._progress;\r\n    }\r\n\r\n    get time (): number {\r\n        return this._progress * this._container.duration;\r\n    }\r\n\r\n    public reenter (initialTimeNormalized: number): void {\r\n        this._progress = initialTimeNormalized;\r\n        this._port?.reenter();\r\n    }\r\n\r\n    public getStatus (): MotionStateStatus {\r\n        const { _statusCache: stateStatus } = this;\r\n        if (DEBUG) {\r\n            stateStatus.__DEBUG_ID__ = this.name;\r\n        }\r\n        stateStatus.progress = normalizeProgress(this._progress);\r\n        return stateStatus;\r\n    }\r\n\r\n    public getClipStatuses (baseWeight: number): Iterable<Readonly<ClipStatus>> {\r\n        return this._container.getClipStatuses(baseWeight);\r\n    }\r\n\r\n    public update (deltaTime: number, controller: AnimationController): void {\r\n        this._progress = calcProgressUpdate(\r\n            this._progress,\r\n            this.duration,\r\n            deltaTime * this._container.speed,\r\n        );\r\n        this._container.components.callMotionStateUpdateMethods(controller, this.getStatus());\r\n    }\r\n\r\n    public evaluate (context: AnimationGraphEvaluationContext): Pose | null {\r\n        return this._port?.evaluate(this._progress, context) ?? null;\r\n    }\r\n\r\n    private _container: VMSMEval;\r\n    private _progress = 0.0;\r\n    private _port: MotionPort | undefined;\r\n    private readonly _statusCache: MotionStateStatus = createStateStatusCache();\r\n}\r\n\r\nfunction calcProgressUpdate (currentProgress: number, duration: number, deltaTime: number): number {\r\n    if (duration === 0.0) {\r\n        // TODO?\r\n        return 0.0;\r\n    }\r\n    const progress = currentProgress + deltaTime / duration;\r\n    return progress;\r\n}\r\n\r\nfunction normalizeProgress (progress: number): number {\r\n    const signedFrac = progress - Math.trunc(progress);\r\n    return signedFrac >= 0.0 ? signedFrac : (1.0 + signedFrac);\r\n}\r\n\r\nexport class SpecialStateEval extends StateEval {\r\n    constructor (node: State, kind: SpecialStateEval['kind'], name: string) {\r\n        super(node);\r\n        this.kind = kind;\r\n    }\r\n\r\n    public readonly kind: NodeKind.entry | NodeKind.exit | NodeKind.any;\r\n}\r\n\r\nexport class EmptyStateEval extends StateEval {\r\n    public readonly kind = NodeKind.empty;\r\n\r\n    constructor (node: State) {\r\n        super(node);\r\n    }\r\n}\r\n\r\nclass ProceduralPoseStateEval extends EventifiedStateEval {\r\n    public readonly kind = NodeKind.procedural;\r\n\r\n    public elapsedTime = 0.0;\r\n\r\n    public readonly statusCache: MotionStateStatus = createStateStatusCache();\r\n\r\n    public constructor (state: ProceduralPoseState, context: AnimationGraphBindingContext) {\r\n        super(state);\r\n        const instantiatedPoseGraph = instantiatePoseGraph(state.graph, context, true);\r\n        instantiatedPoseGraph.bind(context);\r\n        this._instantiatedPoseGraph = instantiatedPoseGraph;\r\n        if (DEBUG) {\r\n            this._statusCache.__DEBUG_ID__ = state.name;\r\n        }\r\n        this._statusCache.progress = 0.0;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        this._instantiatedPoseGraph.settle(context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this._statusCache.progress = 0.0;\r\n        this._instantiatedPoseGraph.reenter();\r\n    }\r\n\r\n    public update (context: AnimationGraphUpdateContext): void {\r\n        this._elapsedTime += context.deltaTime;\r\n        this._instantiatedPoseGraph.update(context);\r\n    }\r\n\r\n    public evaluate (context: AnimationGraphEvaluationContext): Pose | null {\r\n        return this._instantiatedPoseGraph.evaluate(context) ?? null;\r\n    }\r\n\r\n    public getStatus (): MotionStateStatus {\r\n        this._statusCache.progress = normalizeProgress(this._elapsedTime);\r\n        return this._statusCache;\r\n    }\r\n\r\n    public countMotionTime (): number {\r\n        return this._instantiatedPoseGraph.countMotionTime();\r\n    }\r\n\r\n    private _instantiatedPoseGraph: InstantiatedPoseGraph;\r\n\r\n    private readonly _statusCache: MotionStateStatus = createStateStatusCache();\r\n\r\n    private _elapsedTime = 0.0;\r\n}\r\n\r\nexport type NodeEval = VMSMInternalState | SpecialStateEval | EmptyStateEval | ProceduralPoseStateEval;\r\n\r\ninterface TransitionEval {\r\n    to: NodeEval;\r\n    duration: number;\r\n    normalizedDuration: boolean;\r\n    conditions: ConditionEval[];\r\n    exitConditionEnabled: boolean;\r\n    exitCondition: number;\r\n    destinationStart: number;\r\n    relativeDestinationStart: boolean;\r\n    /**\r\n     * Bound triggers, once this transition satisfied. All triggers would be reset.\r\n     */\r\n    triggers: string[] | undefined;\r\n\r\n    /**\r\n     * Whether the transition is activated, if it has already been activated, it can not be activated(matched) again.\r\n     */\r\n    activated: boolean;\r\n\r\n    startEventBinding: AnimationGraphEventBinding | undefined;\r\n    endEventBinding: AnimationGraphEventBinding | undefined;\r\n}\r\n\r\nclass ConditionEvaluationContextImpl implements ConditionEvaluationContext {\r\n    public set (sourceState: NodeEval): void {\r\n        this._sourceState = sourceState;\r\n        if (isRealState(sourceState)) {\r\n            assertIsTrue(sourceState.activeReferenceCount);\r\n            // Cache the weight since it's cheap.\r\n            this.sourceStateWeight = sourceState.absoluteWeight;\r\n        } else {\r\n            this.sourceStateWeight = 0.0;\r\n        }\r\n    }\r\n\r\n    public unset (): void {\r\n        this._sourceState = undefined;\r\n        this.sourceStateWeight = 0.0;\r\n    }\r\n\r\n    public sourceStateWeight = 0.0;\r\n\r\n    public get sourceStateMotionTimeNormalized (): number {\r\n        const { _sourceState: sourceState } = this;\r\n        assertIsTrue(\r\n            sourceState\r\n            && (sourceState.kind === NodeKind.animation || sourceState.kind === NodeKind.procedural)\r\n            && sourceState.activeReferenceCount,\r\n            `State motion time is only defined on activated motion states and procedural pose states.`,\r\n        );\r\n        switch (sourceState.kind) {\r\n        case NodeKind.animation:\r\n            return sourceState.normalizedTime;\r\n        case NodeKind.procedural:\r\n            return sourceState.countMotionTime();\r\n        default:\r\n            return 0.0;\r\n        }\r\n    }\r\n\r\n    private _sourceState: NodeEval | undefined = undefined;\r\n}\r\n\r\n/**\r\n * Describes an activated transition to a **real state**.\r\n */\r\nclass ActivatedTransition {\r\n    /**\r\n     * The normalized time elapsed.\r\n     */\r\n    public normalizedElapsedTime = 0.0;\r\n\r\n    /**\r\n     * The detailed transitions along which the transition is activated.\r\n     * At least has one.\r\n     */\r\n    public path: TransitionEval[] = [];\r\n\r\n    public declare destination: RealState;\r\n\r\n    get done (): boolean {\r\n        return approx(this.normalizedElapsedTime, 1.0, 1e-6);\r\n    }\r\n\r\n    public getAbsoluteDuration (baseDurationState: NodeEval): number {\r\n        return this._getAbsoluteDurationUnscaled(baseDurationState) * this._durationMultiplier;\r\n    }\r\n\r\n    public update (deltaTime: number, fromState: NodeEval): void {\r\n        // If the transitions is not starting with a concrete state.\r\n        // We can directly finish the transition.\r\n        if (!isRealState(fromState)) {\r\n            this.normalizedElapsedTime = 1.0;\r\n            return;\r\n        }\r\n        const transitionDurationAbsolute = this.getAbsoluteDuration(fromState);\r\n        let contrib = 0.0;\r\n        if (transitionDurationAbsolute <= 0.0) {\r\n            contrib = 0.0;\r\n            this.normalizedElapsedTime = 1.0;\r\n        } else {\r\n            const elapsedTransitionTime = this.normalizedElapsedTime * transitionDurationAbsolute;\r\n            const remainTransitionTime = transitionDurationAbsolute - elapsedTransitionTime;\r\n            assertIsTrue(remainTransitionTime >= 0.0);\r\n            contrib = Math.min(remainTransitionTime, deltaTime);\r\n            const newTransitionProgress = clamp01((elapsedTransitionTime + contrib) / transitionDurationAbsolute);\r\n            this.normalizedElapsedTime = newTransitionProgress;\r\n            assertIsTrue(newTransitionProgress >= 0.0 && newTransitionProgress <= 1.0);\r\n        }\r\n    }\r\n\r\n    public static createPool (initialCapacity: number): Pool<ActivatedTransition> {\r\n        const destructor = !DEBUG\r\n            ? undefined\r\n            : (transitionInstance: ActivatedTransition): void => {\r\n                transitionInstance.normalizedElapsedTime = Number.NaN;\r\n            };\r\n\r\n        const pool = new Pool<ActivatedTransition>(\r\n            () => new ActivatedTransition(),\r\n            initialCapacity,\r\n            destructor,\r\n        );\r\n\r\n        return pool;\r\n    }\r\n\r\n    public reset (\r\n        prefix: readonly TransitionEval[],\r\n        lastTransition: TransitionEval,\r\n    ): void {\r\n        const destinationState = lastTransition.to;\r\n        assertIsTrue(isRealState(destinationState));\r\n\r\n        this.normalizedElapsedTime = 0.0;\r\n        this.destination = destinationState;\r\n        this.path = [...prefix, lastTransition];\r\n\r\n        // Increase active reference on the state.\r\n        const previousActiveReferenceCount = destinationState.activeReferenceCount;\r\n        destinationState.increaseActiveReference();\r\n\r\n        // If this is the initial activation, reenter the state.\r\n        if (previousActiveReferenceCount === 0) {\r\n            if (destinationState.kind === NodeKind.animation) {\r\n                const {\r\n                    destinationStart,\r\n                    relativeDestinationStart: isRelativeDestinationStart,\r\n                } = this.path[0];\r\n                const destinationStartRatio = isRelativeDestinationStart\r\n                    ? destinationStart\r\n                    : destinationState.duration === 0\r\n                        ? 0.0\r\n                        : destinationStart / destinationState.duration;\r\n                destinationState.reenter(destinationStartRatio);\r\n            } else if (destinationState.kind === NodeKind.procedural) {\r\n                destinationState.reenter();\r\n            }\r\n        }\r\n\r\n        // More the existing destination weight, less the transition duration.\r\n        assertIsTrue(destinationState.activeReferenceCount > 0);\r\n        this._durationMultiplier = 1.0 - destinationState.absoluteWeight;\r\n    }\r\n\r\n    private _durationMultiplier = 1.0;\r\n\r\n    private _getAbsoluteDurationUnscaled (baseDurationState: NodeEval): number {\r\n        assertIsTrue(this.path.length !== 0);\r\n        const {\r\n            duration,\r\n            normalizedDuration,\r\n        } = this.path[0];\r\n        if (!normalizedDuration) {\r\n            return duration;\r\n        }\r\n        const baseDuration = baseDurationState.kind === NodeKind.animation\r\n            ? baseDurationState.duration\r\n            : 1.0;\r\n        return baseDuration * duration;\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { assertIsTrue } from '../../../../core';\r\nimport { ccclass, serializable } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseNode } from '../pose-node';\r\nimport { Pose } from '../../../core/pose';\r\nimport {\r\n    AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphSettleContext, AnimationGraphUpdateContext,\r\n} from '../../animation-graph-context';\r\nimport { StateMachine } from '../../animation-graph';\r\nimport { TopLevelStateMachineEvaluation } from '../../state-machine/state-machine-eval';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport type { EnterNodeInfo } from '../foundation/authoring/enter-node-info';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeStateMachine`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\n@poseGraphNodeAppearance({\r\n    themeColor: '#CCCCCC',\r\n    inline: true,\r\n})\r\nexport class PoseNodeStateMachine extends PoseNode {\r\n    @serializable\r\n    public name = '';\r\n\r\n    @serializable\r\n    public stateMachine = new StateMachine(false);\r\n\r\n    /**\r\n     * // TODO: HACK\r\n     * @internal\r\n     */\r\n    public __callOnAfterDeserializeRecursive (): void {\r\n        this.stateMachine._allowEmptyStates = false;\r\n        this.stateMachine.__callOnAfterDeserializeRecursive();\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        assertIsTrue(!this._stateMachineEval);\r\n        this._stateMachineEval = new TopLevelStateMachineEvaluation(\r\n            this.stateMachine,\r\n            '',\r\n            context,\r\n        );\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        this._stateMachineEval?.settle(context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this._stateMachineEval?.reenter();\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        const { _stateMachineEval: stateMachineEval } = this;\r\n        assertIsTrue(stateMachineEval);\r\n        stateMachineEval.update(context);\r\n        assertIsTrue(stateMachineEval.passthroughWeight > (1.0 - 1e-5));\r\n    }\r\n\r\n    public doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const { _stateMachineEval: stateMachineEval } = this;\r\n        assertIsTrue(stateMachineEval);\r\n        const stateMachinePose = stateMachineEval.evaluate(context);\r\n        assertIsTrue(stateMachineEval.passthroughWeight > (1.0 - 1e-5));\r\n        return stateMachinePose;\r\n    }\r\n\r\n    private _stateMachineEval: TopLevelStateMachineEvaluation | undefined;\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodeStateMachine.prototype.getTitle = function getTitle (this: PoseNodeStateMachine): string | [string, Record<string, string>] | undefined {\r\n        if (this.name) {\r\n            return this.name;\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    PoseNodeStateMachine.prototype.getEnterInfo = function getEnterInfo (this: PoseNodeStateMachine): EnterNodeInfo | undefined {\r\n        return {\r\n            type: 'state-machine',\r\n            target: this.stateMachine,\r\n        };\r\n    };\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { clamp01 } from '../../../../core';\r\nimport { ccclass, editable, serializable } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { ClipMotion } from '../../motion/clip-motion';\r\nimport { createEval } from '../../create-eval';\r\nimport { Motion, MotionEval, MotionPort } from '../../motion/motion';\r\nimport { PoseNode } from '../pose-node';\r\nimport { Pose } from '../../../core/pose';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext, AnimationGraphSettleContext, AnimationGraphUpdateContext } from '../../animation-graph-context';\r\nimport { input } from '../decorator/input';\r\nimport { poseGraphCreateNodeFactory, poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport { getEnterInfo, getTileBase, makeCreateNodeFactory } from './play-or-sample-motion-pose-node-shared';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeSampleMotion`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\n@poseGraphCreateNodeFactory(makeCreateNodeFactory(\r\n    (motion) => {\r\n        const node = new PoseNodeSampleMotion();\r\n        node.motion = motion;\r\n        return node;\r\n    },\r\n))\r\n@poseGraphNodeAppearance({ themeColor: '#D97721' })\r\nexport class PoseNodeSampleMotion extends PoseNode {\r\n    @serializable\r\n    @editable\r\n    public motion: Motion | null = new ClipMotion();\r\n\r\n    @serializable\r\n    @editable\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    public time = 0.0;\r\n\r\n    @serializable\r\n    @editable\r\n    public useNormalizedTime = false;\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        const { motion } = this;\r\n        if (!motion) {\r\n            return;\r\n        }\r\n        const motionEval = motion[createEval](context, true);\r\n        if (!motionEval) {\r\n            return;\r\n        }\r\n        const workspace = new SampleMotionWorkspace(motionEval, motionEval.createPort());\r\n        this._workspace = workspace;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        // Do nothing.\r\n    }\r\n\r\n    public reenter (): void {\r\n        // Do nothing.\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        // Do nothing.\r\n    }\r\n\r\n    protected doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const { _workspace: workspace } = this;\r\n\r\n        if (!workspace) {\r\n            return context.pushDefaultedPose();\r\n        }\r\n\r\n        const time = this.time;\r\n        const normalizedTime = this.useNormalizedTime\r\n            ? time\r\n            : time / workspace.motionEval.duration;\r\n        return workspace.motionEvalPort.evaluate(clamp01(normalizedTime), context);\r\n    }\r\n\r\n    private _workspace: SampleMotionWorkspace | null = null;\r\n}\r\n\r\nclass SampleMotionWorkspace {\r\n    constructor (\r\n        public motionEval: MotionEval,\r\n        public motionEvalPort: MotionPort,\r\n    ) {\r\n    }\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodeSampleMotion.prototype.getTitle = function getTitle (this: PoseNodeSampleMotion): string | [string, Record<string, string>] | undefined {\r\n        return getTileBase(`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodeSampleMotion.title`, this.motion);\r\n    };\r\n\r\n    PoseNodeSampleMotion.prototype.getEnterInfo = getEnterInfo;\r\n}\r\n","/**\r\n * Tells if the weight is too small so that it can be treated as 0.\r\n * @param weight The weight.\r\n * @returns True if it can be treated as 0.\r\n */\r\nexport function isIgnorableWeight (weight: number): boolean {\r\n    return weight < 1e-5;\r\n}\r\n","import { ccclass, range, serializable } from '../../../../core/data/decorators';\r\nimport { Pose, applyDeltaPose } from '../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND } from './menu-common';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from '../pose-node';\r\nimport { input } from '../decorator/input';\r\nimport {\r\n    AnimationGraphBindingContext, AnimationGraphSettleContext, AnimationGraphUpdateContext, AnimationGraphEvaluationContext,\r\n} from '../../animation-graph-context';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\n\r\n/**\r\n * Add an additional pose onto a base pose.\r\n *\r\n * @note When evaluating addition pose, the context is switched to \"additive\" mode.\r\n */\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeAdditivelyBlend`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND)\r\n@poseGraphNodeAppearance({ themeColor: '#72A869' })\r\nexport class PoseNodeAdditivelyBlend extends PoseNode {\r\n    @serializable\r\n    @input({ type: PoseGraphType.POSE })\r\n    public basePose: PoseNode | null = null;\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.POSE })\r\n    public additivePose: PoseNode | null = null;\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    @range([0.0, 1.0, 0.01])\r\n    public ratio = 1.0;\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        this.basePose?.bind(context);\r\n        context._pushAdditiveFlag(true);\r\n        this.additivePose?.bind(context);\r\n        context._popAdditiveFlag();\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        this.basePose?.settle(context);\r\n        this.additivePose?.settle(context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this.basePose?.reenter();\r\n        this.additivePose?.reenter();\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        this.basePose?.update(context);\r\n        this.additivePose?.update(context);\r\n    }\r\n\r\n    public doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const basePose = this.basePose?.evaluate(context, PoseTransformSpaceRequirement.LOCAL) ?? context.pushDefaultedPose();\r\n        if (!this.additivePose) {\r\n            return basePose;\r\n        }\r\n        const additionalPose = this.additivePose.evaluate(context, PoseTransformSpaceRequirement.LOCAL);\r\n        applyDeltaPose(basePose, additionalPose, this.ratio);\r\n        context.popPose();\r\n        return basePose;\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, range, serializable } from '../../../../core/data/decorators';\r\nimport { blendPoseInto, Pose } from '../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from '../pose-node';\r\nimport { input } from '../decorator/input';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphSettleContext, AnimationGraphUpdateContext, AnimationGraphUpdateContextGenerator,\r\n} from '../../animation-graph-context';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND } from './menu-common';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\nimport { isIgnorableWeight } from '../utils';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeBlendInProportion`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND)\r\n@poseGraphNodeAppearance({ themeColor: '#72A869' })\r\nexport class PoseNodeBlendInProportion extends PoseNode {\r\n    @serializable\r\n    @input({\r\n        type: PoseGraphType.POSE,\r\n        arraySyncGroup: 'blend-item',\r\n    })\r\n    public readonly poses: Array<PoseNode | null> = [];\r\n\r\n    @serializable\r\n    @input({\r\n        type: PoseGraphType.FLOAT,\r\n        arraySyncGroup: 'blend-item',\r\n        arraySyncGroupFollower: true,\r\n    })\r\n    @range([0.0, Number.POSITIVE_INFINITY])\r\n    public readonly proportions: number[] = [];\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        for (const pose of this.poses) {\r\n            pose?.bind(context);\r\n        }\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        for (const pose of this.poses) {\r\n            pose?.settle(context);\r\n        }\r\n    }\r\n\r\n    public reenter (): void {\r\n        for (const pose of this.poses) {\r\n            pose?.reenter();\r\n        }\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        const {\r\n            _updateContextGenerator: updateContextGenerator,\r\n        } = this;\r\n        const nInputPoses = this.poses.length;\r\n        for (let iInputPose = 0; iInputPose < nInputPoses; ++iInputPose) {\r\n            const inputPoseWeight = this.proportions[iInputPose];\r\n            if (isIgnorableWeight(inputPoseWeight)) {\r\n                continue;\r\n            }\r\n            const inputPoseUpdateContext = updateContextGenerator.generate(\r\n                context.deltaTime,\r\n                context.indicativeWeight * inputPoseWeight,\r\n            );\r\n            this.poses[iInputPose]?.update(inputPoseUpdateContext);\r\n        }\r\n    }\r\n\r\n    public doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const nInputPoses = this.poses.length;\r\n        let sumWeight = 0.0;\r\n        let finalPose: Pose | null = null;\r\n        for (let iInputPose = 0; iInputPose < nInputPoses; ++iInputPose) {\r\n            const inputPoseWeight = this.proportions[iInputPose];\r\n            if (isIgnorableWeight(inputPoseWeight)) {\r\n                continue;\r\n            }\r\n            const inputPose = this.poses[iInputPose]?.evaluate(context, PoseTransformSpaceRequirement.LOCAL);\r\n            if (!inputPose) {\r\n                continue;\r\n            }\r\n            sumWeight += inputPoseWeight;\r\n            if (!finalPose) {\r\n                finalPose = inputPose;\r\n            } else {\r\n                if (sumWeight) {\r\n                    const t = inputPoseWeight / sumWeight;\r\n                    blendPoseInto(finalPose, inputPose, t);\r\n                }\r\n                context.popPose();\r\n            }\r\n        }\r\n        if (finalPose) {\r\n            return finalPose;\r\n        }\r\n\r\n        // TODO: cause wired behavior in additive layer.\r\n        return context.pushDefaultedPose();\r\n    }\r\n\r\n    private _updateContextGenerator = new AnimationGraphUpdateContextGenerator();\r\n}\r\n","import { ccclass, editable, range, serializable, type } from '../../../../core/data/decorators';\r\nimport { Pose } from '../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from '../pose-node';\r\nimport { input } from '../decorator/input';\r\nimport { AnimationGraphBindingContext, AnimationGraphSettleContext,\r\n    AnimationGraphUpdateContext, AnimationGraphUpdateContextGenerator, AnimationGraphEvaluationContext,\r\n} from '../../animation-graph-context';\r\nimport { poseGraphNodeHide } from '../decorator/node';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeBlendTwoPoseBase`)\r\n@poseGraphNodeHide(true)\r\nexport abstract class PoseNodeBlendTwoPoseBase extends PoseNode {\r\n    @serializable\r\n    @input({ type: PoseGraphType.POSE })\r\n    pose0: PoseNode | null = null;\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.POSE })\r\n    pose1: PoseNode | null = null;\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    @range([0.0, 1.0, 0.01])\r\n    ratio = 1.0;\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        this.pose0?.bind(context);\r\n        this.pose1?.bind(context);\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        this.pose0?.settle(context);\r\n        this.pose1?.settle(context);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this.pose0?.reenter();\r\n        this.pose1?.reenter();\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        const {\r\n            pose0,\r\n            pose1,\r\n            _updateContextGenerator: updateContextGenerator,\r\n            ratio,\r\n        } = this;\r\n        {\r\n            const updateContext = updateContextGenerator.generate(\r\n                context.deltaTime,\r\n                context.indicativeWeight * (1.0 - ratio),\r\n            );\r\n            pose0?.update(updateContext);\r\n        }\r\n        {\r\n            const updateContext = updateContextGenerator.generate(\r\n                context.deltaTime,\r\n                context.indicativeWeight * (ratio),\r\n            );\r\n            pose1?.update(updateContext);\r\n        }\r\n    }\r\n\r\n    public doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const spaceRequirement = PoseTransformSpaceRequirement.LOCAL;\r\n        if (!this.pose0 || !this.pose1) {\r\n            return PoseNodeBlendTwoPoseBase.evaluateDefaultPose(context, spaceRequirement);\r\n        }\r\n\r\n        const pose0 = this.pose0?.evaluate(context, spaceRequirement)\r\n            ?? PoseNodeBlendTwoPoseBase.evaluateDefaultPose(context, spaceRequirement);\r\n        const pose1 = this.pose1?.evaluate(context, spaceRequirement)\r\n            ?? PoseNodeBlendTwoPoseBase.evaluateDefaultPose(context, spaceRequirement);\r\n\r\n        this.doBlend(pose0, pose1, this.ratio);\r\n        context.popPose();\r\n\r\n        return pose0;\r\n    }\r\n\r\n    protected abstract doBlend(pose0: Pose, pose1: Pose, ratio: number): void;\r\n\r\n    private _updateContextGenerator = new AnimationGraphUpdateContextGenerator();\r\n}\r\n","import { ccclass } from '../../../../core/data/decorators';\r\nimport { blendPoseInto, Pose } from '../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND } from './menu-common';\r\nimport { PoseNodeBlendTwoPoseBase } from './blend-two-pose-base';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeBlendTwoPose`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND)\r\n@poseGraphNodeAppearance({ themeColor: '#72A869' })\r\nexport class PoseNodeBlendTwoPose extends PoseNodeBlendTwoPoseBase {\r\n    protected doBlend (pose0: Pose, pose1: Pose, ratio: number): void {\r\n        return blendPoseInto(pose0, pose1, ratio);\r\n    }\r\n}\r\n","import { ccclass, editable, serializable, type } from '../../../../core/data/decorators';\r\nimport { blendPoseInto, Pose, TransformFilter } from '../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { AnimationGraphSettleContext } from '../../animation-graph-context';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND } from './menu-common';\r\nimport { AnimationMask } from '../../animation-mask';\r\nimport { PoseNodeBlendTwoPoseBase } from './blend-two-pose-base';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeFilteringBlend`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND)\r\n@poseGraphNodeAppearance({ themeColor: '#72A869' })\r\nexport class PoseNodeFilteringBlend extends PoseNodeBlendTwoPoseBase {\r\n    @serializable\r\n    @editable\r\n    @type(AnimationMask)\r\n    mask: AnimationMask | null = null;\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        super.settle(context);\r\n        if (this.mask) {\r\n            const transformFilter = context.createTransformFilter(this.mask);\r\n            this._transformFilter = transformFilter;\r\n        }\r\n    }\r\n\r\n    protected doBlend (pose0: Pose, pose1: Pose, ratio: number): void {\r\n        blendPoseInto(pose0, pose1, ratio, this._transformFilter);\r\n    }\r\n\r\n    private _transformFilter: TransformFilter | undefined = undefined;\r\n}\r\n","import { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from '../menu-common';\r\n\r\nexport const POSE_GRAPH_NODE_MENU_PREFIX_CHOOSE = `${POSE_GRAPH_NODE_MENU_PREFIX_POSE}/`\r\n    + `i18n:ENGINE.animation_graph.pose_graph_node_sub_categories.pose_nodes_choose/`;\r\n","import { ccenum } from '../../../../core';\r\nimport { ccclass, editable, range, serializable, type, visible } from '../../../../core/data/decorators';\r\nimport { AuxiliaryCurveHandle } from '../../../core/animation-handle';\r\nimport { Pose } from '../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { AnimationGraphBindingContext } from '../../animation-graph-context';\r\n\r\nenum IntensityType {\r\n    VALUE,\r\n\r\n    AUXILIARY_CURVE,\r\n}\r\nccenum(IntensityType);\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}IntensitySpecification`)\r\nexport class IntensitySpecification {\r\n    @type(IntensityType)\r\n    @serializable\r\n    @editable\r\n    public type = IntensityType.VALUE;\r\n\r\n    @serializable\r\n    @editable\r\n    @visible(function visible (this: IntensitySpecification): boolean { return this.type === IntensityType.VALUE; })\r\n    @range([0.0, 1.0, 0.01])\r\n    public value = 1.0;\r\n\r\n    @serializable\r\n    @editable\r\n    @visible(function visible (this: IntensitySpecification): boolean { return this.type === IntensityType.AUXILIARY_CURVE; })\r\n    public auxiliaryCurveName = '';\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        if (this.type === IntensityType.AUXILIARY_CURVE && this.auxiliaryCurveName) {\r\n            const handle = context.bindAuxiliaryCurve(this.auxiliaryCurveName);\r\n            this._handle = handle;\r\n        }\r\n    }\r\n\r\n    public evaluate (pose: Readonly<Pose>): number {\r\n        if (this.type === IntensityType.AUXILIARY_CURVE && this._handle) {\r\n            const value = pose.auxiliaryCurves[this._handle.index];\r\n            return value;\r\n        }\r\n        return this.value;\r\n    }\r\n\r\n    private _handle: AuxiliaryCurveHandle | undefined = undefined;\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { ccclass, serializable } from '../../../../../core/data/decorators';\r\nimport { blendPoseInto, Pose } from '../../../../core/pose';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from '../../pose-node';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext, AnimationGraphSettleContext,\r\n    AnimationGraphUpdateContext, AnimationGraphUpdateContextGenerator,\r\n} from '../../../animation-graph-context';\r\nimport { poseGraphNodeHide } from '../../decorator/node';\r\nimport { assertIsTrue, lerp } from '../../../../../core';\r\nimport { isIgnorableWeight } from '../../utils';\r\n\r\nconst ZERO_ALTERING_DURATION_THRESHOLD = 1e-5;\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeChoosePoseBase`)\r\n@poseGraphNodeHide()\r\nexport abstract class PoseNodeChoosePoseBase extends PoseNode {\r\n    constructor (initialChoiceCount = 0) {\r\n        super();\r\n        this._poses.length = initialChoiceCount;\r\n        this._poses.fill(null);\r\n        this._fadeInDurations.length = initialChoiceCount;\r\n        this._fadeInDurations.fill(0.0);\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        for (const pose of this._poses) {\r\n            pose?.bind(context);\r\n        }\r\n        const evaluationRecord = new EvaluationRecord(this._poses.length, this.getChosenIndex());\r\n        this._evaluationRecord = evaluationRecord;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        for (const pose of this._poses) {\r\n            pose?.settle(context);\r\n        }\r\n    }\r\n\r\n    public reenter (): void {\r\n        for (const pose of this._poses) {\r\n            pose?.reenter();\r\n        }\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        const {\r\n            _poses: poses,\r\n            _evaluationRecord: evaluationRecord,\r\n        } = this;\r\n        assertIsTrue(evaluationRecord);\r\n\r\n        // Update the record for weights.\r\n        evaluationRecord.update(\r\n            context.deltaTime,\r\n            this.getChosenIndex(),\r\n            this._fadeInDurations,\r\n        );\r\n\r\n        // Don't have to update if all weights are zero.\r\n        if (evaluationRecord.allWeightsAreZero()) {\r\n            return;\r\n        }\r\n\r\n        const nPoses = poses.length;\r\n        const { items } = evaluationRecord;\r\n        assertIsTrue(items.length === nPoses);\r\n\r\n        // Dispatch update requests to non-zero weighted items.\r\n        for (let iPose = 0; iPose < nPoses; ++iPose) {\r\n            const weight = items[iPose].weight;\r\n            if (isIgnorableWeight(weight)) {\r\n                continue;\r\n            }\r\n            const pose = poses[iPose];\r\n            const itemUpdateContext = this._updateContextGenerator.generate(\r\n                context.deltaTime,\r\n                context.indicativeWeight * weight,\r\n            );\r\n            pose?.update(itemUpdateContext);\r\n        }\r\n    }\r\n\r\n    public doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const {\r\n            _poses: poses,\r\n            _evaluationRecord: evaluationRecord,\r\n        } = this;\r\n        assertIsTrue(evaluationRecord);\r\n        const spaceRequirement = PoseTransformSpaceRequirement.LOCAL;\r\n        const nPoses = poses.length;\r\n        const { items } = evaluationRecord;\r\n        assertIsTrue(items.length === poses.length);\r\n\r\n        let finalPose: Pose | null = null;\r\n        if (!evaluationRecord.allWeightsAreZero()) {\r\n            let sumWeight = 0.0;\r\n            for (let iInputPose = 0; iInputPose < nPoses; ++iInputPose) {\r\n                const inputPoseWeight = evaluationRecord.items[iInputPose].weight;\r\n                if (isIgnorableWeight(inputPoseWeight)) {\r\n                    continue;\r\n                }\r\n                const inputPose = poses[iInputPose]?.evaluate(context, PoseTransformSpaceRequirement.LOCAL);\r\n                if (!inputPose) {\r\n                    continue;\r\n                }\r\n                sumWeight += inputPoseWeight;\r\n                if (!finalPose) {\r\n                    finalPose = inputPose;\r\n                } else {\r\n                    if (sumWeight) {\r\n                        const t = inputPoseWeight / sumWeight;\r\n                        blendPoseInto(finalPose, inputPose, t);\r\n                    }\r\n                    context.popPose();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (finalPose) {\r\n            return finalPose;\r\n        }\r\n\r\n        return PoseNodeChoosePoseBase.evaluateDefaultPose(context, spaceRequirement);\r\n    }\r\n\r\n    @serializable\r\n    protected _poses: (PoseNode | null)[] = [];\r\n\r\n    @serializable\r\n    protected _fadeInDurations: number[] = [];\r\n\r\n    protected getChosenIndex (): number {\r\n        return 0;\r\n    }\r\n\r\n    private _updateContextGenerator = new AnimationGraphUpdateContextGenerator();\r\n\r\n    private _evaluationRecord: EvaluationRecord | undefined = undefined;\r\n}\r\n\r\nclass EvaluationRecord {\r\n    constructor (\r\n        itemCount: number,\r\n        initialChosenIndex: number,\r\n    ) {\r\n        const items =  Array.from({ length: itemCount }, (): ItemEvaluationRecord => new ItemEvaluationRecord());\r\n        if (initialChosenIndex >= 0 && initialChosenIndex < itemCount) {\r\n            items[initialChosenIndex].selfSourceWeight = 1.0;\r\n            items[initialChosenIndex].selfTargetWeight = 1.0;\r\n            items[initialChosenIndex].weight = 1.0;\r\n        }\r\n        this._items = items;\r\n    }\r\n\r\n    get items (): readonly ReadonlyItemEvaluationRecord[] {\r\n        return this._items;\r\n    }\r\n\r\n    public allWeightsAreZero (): boolean {\r\n        return this._chosenPoseIndex < 0;\r\n    }\r\n\r\n    public update (deltaTime: number, newChoseIndex: number, fadeInDurations: readonly number[]): void {\r\n        assertIsTrue(deltaTime >= 0.0);\r\n\r\n        this._checkAlternation(newChoseIndex, fadeInDurations);\r\n\r\n        if (this._chosenPoseIndex < 0) {\r\n            return;\r\n        }\r\n\r\n        const {\r\n            _elapsedTransitionTime: elapsedTransitionTime,\r\n            _blendingDuration: blendingDuration,\r\n            _items: items,\r\n        } = this;\r\n\r\n        // There's no blending task.\r\n        // #no-weights-update-if-done\r\n        if (elapsedTransitionTime >= blendingDuration) {\r\n            return;\r\n        }\r\n\r\n        const nPoses = items.length;\r\n        let sumWeight = 0.0;\r\n        let newUniformTransformRatio = 0.0;\r\n        const remain = blendingDuration - elapsedTransitionTime;\r\n        if (deltaTime > remain) {\r\n            this._elapsedTransitionTime = blendingDuration;\r\n            newUniformTransformRatio = 1.0;\r\n        } else {\r\n            this._elapsedTransitionTime += deltaTime;\r\n            newUniformTransformRatio = this._elapsedTransitionTime / blendingDuration;\r\n        }\r\n        assertIsTrue(newUniformTransformRatio >= 0.0 && newUniformTransformRatio <= 1.0);\r\n        for (let iPose = 0; iPose < nPoses; ++iPose) {\r\n            const item = items[iPose];\r\n            const selfWeight = lerp(item.selfSourceWeight, item.selfTargetWeight, newUniformTransformRatio);\r\n            sumWeight += selfWeight;\r\n            item.weight = selfWeight;\r\n        }\r\n        if (!isIgnorableWeight(sumWeight)) {\r\n            for (let iPose = 0; iPose < nPoses; ++iPose) {\r\n                const item = items[iPose];\r\n                item.weight /= sumWeight;\r\n            }\r\n        } else if (DEBUG) {\r\n            assertIsTrue(items.every((item) => item.weight === 0.0));\r\n        }\r\n    }\r\n\r\n    private _items: ItemEvaluationRecord[];\r\n\r\n    private _chosenPoseIndex = -1;\r\n\r\n    private _elapsedTransitionTime = 0.0;\r\n\r\n    private _blendingDuration = 0.0;\r\n\r\n    private _checkAlternation (newChoseIndex: number, fadeInDurations: readonly number[]): void {\r\n        const {\r\n            _items: items,\r\n            _chosenPoseIndex: oldChoseIndex,\r\n        } = this;\r\n        const nPoses = items.length;\r\n        if (!nPoses) {\r\n            return;\r\n        }\r\n\r\n        // If no alternation happened, do nothing.\r\n        if (newChoseIndex === oldChoseIndex) {\r\n            return;\r\n        }\r\n\r\n        // If the new chose is invalid, do nothing. That means:\r\n        // - if there's a valid chose before, that chose keeps not changed.\r\n        // - otherwise, keep no chose state.\r\n        if (newChoseIndex < 0 || newChoseIndex >= nPoses) {\r\n            return;\r\n        }\r\n\r\n        // Otherwise, plan so that in new chosen pose's fade-in duration:\r\n        // - new chosen pose starts transitioning to weight 1,\r\n        // - other poses start transitioning to weight 0.\r\n\r\n        const newFadeInDuration = Math.max(fadeInDurations[newChoseIndex], 0.0);\r\n        // If the new altering duration is zero, directly fill the weights.\r\n        // We do this since we treat `this._elapsedTransitionTime <= this._blendingDuration` as \"done\",\r\n        // and then weights would not get not further update.\r\n        // See line #no-weights-update-if-done .\r\n        if (newFadeInDuration < ZERO_ALTERING_DURATION_THRESHOLD) {\r\n            for (let iPose = 0; iPose < nPoses; ++iPose) {\r\n                const item = items[iPose];\r\n                if (iPose === newChoseIndex) {\r\n                    item.selfSourceWeight = 1.0;\r\n                    item.selfTargetWeight = 1.0;\r\n                    item.weight = 1.0;\r\n                } else {\r\n                    item.selfSourceWeight = 0.0;\r\n                    item.selfTargetWeight = 0.0;\r\n                    item.weight = 0.0;\r\n                }\r\n            }\r\n        } else {\r\n            const oldUniformTransitionRatio = this._blendingDuration < ZERO_ALTERING_DURATION_THRESHOLD\r\n                ? 1.0\r\n                : this._elapsedTransitionTime / this._blendingDuration;\r\n            for (let iPose = 0; iPose < nPoses; ++iPose) {\r\n                const item = items[iPose];\r\n                // Reset starting weight as current weight.\r\n                // Don't use `item.weight` since it's absolute weight.\r\n                item.selfSourceWeight = lerp(\r\n                    item.selfSourceWeight, item.selfTargetWeight, oldUniformTransitionRatio,\r\n                );\r\n                if (iPose === newChoseIndex) {\r\n                    item.selfTargetWeight = 1.0;\r\n                } else {\r\n                    item.selfTargetWeight = 0.0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._chosenPoseIndex = newChoseIndex;\r\n        this._elapsedTransitionTime = 0.0;\r\n        this._blendingDuration = newFadeInDuration;\r\n    }\r\n}\r\n\r\ninterface ReadonlyItemEvaluationRecord {\r\n    readonly weight: number;\r\n}\r\n\r\nclass ItemEvaluationRecord implements ReadonlyItemEvaluationRecord {\r\n    public selfSourceWeight = 0.0;\r\n\r\n    public selfTargetWeight = 0.0;\r\n\r\n    /** Absolute weight in node. Used by node. */\r\n    public weight = 0.0;\r\n}\r\n","import { ccclass, serializable } from '../../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { input } from '../../decorator/input';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_CHOOSE } from './menu';\r\nimport { PoseNodeChoosePoseBase } from './choose-pose-base';\r\nimport { PoseGraphType } from '../../foundation/type-system';\r\nimport type { PoseNode } from '../../pose-node';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeChoosePoseByBoolean`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_CHOOSE)\r\n@poseGraphNodeAppearance({ themeColor: '#D07979' })\r\nexport class PoseNodeChoosePoseByBoolean extends PoseNodeChoosePoseBase {\r\n    constructor () {\r\n        super(2);\r\n    }\r\n\r\n    @input({ type: PoseGraphType.POSE })\r\n    public get truePose (): PoseNode | null {\r\n        return this._poses[0];\r\n    }\r\n    public set truePose (value) {\r\n        this._poses[0] = value;\r\n    }\r\n\r\n    @input({ type: PoseGraphType.POSE })\r\n    public get falsePose (): PoseNode | null {\r\n        return this._poses[1];\r\n    }\r\n    public set falsePose (value) {\r\n        this._poses[1] = value;\r\n    }\r\n\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    public get trueFadeInDuration (): number {\r\n        return this._fadeInDurations[0];\r\n    }\r\n    public set trueFadeInDuration (value) {\r\n        this._fadeInDurations[0] = value;\r\n    }\r\n\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    public get falseFadeInDuration (): number {\r\n        return this._fadeInDurations[1];\r\n    }\r\n    public set falseFadeInDuration (value) {\r\n        this._fadeInDurations[1] = value;\r\n    }\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.BOOLEAN })\r\n    public choice = true;\r\n\r\n    protected getChosenIndex (): number {\r\n        return this.choice ? 0 : 1;\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, serializable } from '../../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { input } from '../../decorator/input';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_CHOOSE } from './menu';\r\nimport { PoseNodeChoosePoseBase } from './choose-pose-base';\r\nimport { PoseGraphType } from '../../foundation/type-system';\r\nimport type { PoseNode } from '../../pose-node';\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeChoosePoseByIndex`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_CHOOSE)\r\n@poseGraphNodeAppearance({ themeColor: '#D07979' })\r\nexport class PoseNodeChoosePoseByIndex extends PoseNodeChoosePoseBase {\r\n    @input({\r\n        type: PoseGraphType.POSE,\r\n        arraySyncGroup: 'choose-item',\r\n    })\r\n    get poses (): (PoseNode | null)[] {\r\n        return this._poses;\r\n    }\r\n\r\n    set poses (value) {\r\n        this._poses = value;\r\n    }\r\n\r\n    @input({\r\n        type: PoseGraphType.FLOAT,\r\n        arraySyncGroup: 'choose-item',\r\n        arraySyncGroupFollower: true,\r\n    })\r\n    get fadeInDurations (): number[] {\r\n        return this._fadeInDurations;\r\n    }\r\n\r\n    set fadeInDurations (value) {\r\n        this._fadeInDurations = value;\r\n    }\r\n\r\n    @serializable\r\n    @input({ type: PoseGraphType.INTEGER })\r\n    public choice = 0;\r\n\r\n    protected getChosenIndex (): number {\r\n        return this.choice;\r\n    }\r\n}\r\n","import { DEBUG, EDITOR } from 'internal:constants';\r\nimport { ccclass, editable, serializable, type } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from '../pose-node';\r\nimport { input } from '../decorator/input';\r\nimport { poseGraphNodeHide } from '../decorator/node';\r\nimport { Pose, PoseTransformSpace } from '../../../core/pose';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext, AnimationGraphSettleContext, AnimationGraphUpdateContext } from '../../animation-graph-context';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\nimport { assertIsTrue, CachedArray, Pool } from '../../../../core';\r\nimport { Transform } from '../../../core/transform';\r\n\r\nclass TransformModification {\r\n    public transformIndex = -1;\r\n    public transform = new Transform();\r\n}\r\n\r\nexport type { TransformModification };\r\n\r\nclass TransformModificationQueue {\r\n    get length (): number {\r\n        return this._array.length;\r\n    }\r\n\r\n    get array (): TransformModification[] {\r\n        return this._array.array;\r\n    }\r\n\r\n    public push (transformIndex: number, transform: Transform): void {\r\n        if (DEBUG) {\r\n            assertIsTrue(transformIndex > this._debugLastTransformIndex, `Unexpected transform modification order`);\r\n            this._debugLastTransformIndex = transformIndex;\r\n        }\r\n        const mod = this._pool.alloc();\r\n        mod.transformIndex = transformIndex;\r\n        Transform.copy(mod.transform, transform);\r\n        this._array.push(mod);\r\n    }\r\n\r\n    public clear (): void {\r\n        const length = this._array.length;\r\n        for (let iMod = 0; iMod < length; ++iMod) {\r\n            const mod = this._array.get(iMod);\r\n            assertIsTrue(mod);\r\n            this._pool.free(mod);\r\n        }\r\n        this._array.clear();\r\n        if (DEBUG) {\r\n            this._debugLastTransformIndex = -1;\r\n        }\r\n    }\r\n\r\n    private _pool: Pool<TransformModification> = new Pool((): TransformModification => new TransformModification(), 3);\r\n    private _array = new CachedArray<TransformModification>(3);\r\n    private _debugLastTransformIndex = -1;\r\n}\r\n\r\nexport type { TransformModificationQueue };\r\n\r\nclass PoseTransformSpaceFlagTable {\r\n    constructor (nTransforms: number) {\r\n        this._transformFlags = new Array(nTransforms);\r\n    }\r\n\r\n    /**\r\n     * Set all transforms' flags to false.\r\n     */\r\n    public clear (): void {\r\n        this._transformFlags.fill(false);\r\n    }\r\n\r\n    /**\r\n     * Test if the transform's flag is set to true.\r\n     * @param transformIndex Transform index.\r\n     * @returns True if the transform's flag is set to true.\r\n     */\r\n    public test (transformIndex: number): boolean {\r\n        return this._transformFlags[transformIndex];\r\n    }\r\n\r\n    /**\r\n     * Sets the transform's flag to true.\r\n     * @param transformIndex Transform index.\r\n     */\r\n    public set (transformIndex: number): void {\r\n        this._transformFlags[transformIndex] = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the transform's flag to false.\r\n     * @param transformIndex Transform index.\r\n     */\r\n    public unset (transformIndex: number): void {\r\n        this._transformFlags[transformIndex] = false;\r\n    }\r\n\r\n    private _transformFlags: boolean[] = [];\r\n}\r\n\r\nconst cacheTransform_spaceConversion = new Transform();\r\nconst cacheParentTransform_spaceConversion = new Transform();\r\n\r\nfunction applyTransformModificationQueue (\r\n    context: AnimationGraphEvaluationContext,\r\n    pose: Pose,\r\n    queue: TransformModificationQueue,\r\n    spaceFlagTable: PoseTransformSpaceFlagTable,\r\n): void {\r\n    const nMods = queue.length;\r\n    if (nMods === 0) {\r\n        return;\r\n    }\r\n\r\n    if (DEBUG) {\r\n        let debugLastModTransformIndex = -1;\r\n        for (let iMod = 0; iMod < nMods; ++iMod) {\r\n            const { transformIndex } = queue.array[iMod];\r\n            // Ensure the modifications are queued from parent to child.\r\n            assertIsTrue(transformIndex > debugLastModTransformIndex);\r\n            debugLastModTransformIndex = transformIndex;\r\n        }\r\n    }\r\n\r\n    // In case of local space pose, no space conversion needed.\r\n    if (pose._poseTransformSpace === PoseTransformSpace.LOCAL) {\r\n        for (let iMod = 0; iMod < nMods; ++iMod) {\r\n            const { transformIndex, transform } = queue.array[iMod];\r\n            pose.transforms.setTransform(transformIndex, transform);\r\n        }\r\n        return;\r\n    }\r\n\r\n    assertIsTrue(pose._poseTransformSpace === PoseTransformSpace.COMPONENT);\r\n\r\n    // In the following, the flag of a transform is defined as:\r\n    // - False if it's in component space,\r\n    // - True if it's in local space or is component space but need to be converted into local space.\r\n\r\n    // At initial, all transforms are in component space.\r\n    spaceFlagTable.clear();\r\n\r\n    // From parent to child, collect all transforms needs to be converted into local space.\r\n    const firstTransformToConvert = queue.array[0].transformIndex;\r\n    let lastTransformToConvert = firstTransformToConvert;\r\n    for (let iMod = 0; iMod < nMods; ++iMod) {\r\n        const { transformIndex } = queue.array[iMod];\r\n        spaceFlagTable.set(transformIndex); // Set as \"need to be converted\".\r\n        lastTransformToConvert = transformIndex;\r\n    }\r\n    for (let transformIndex = firstTransformToConvert;\r\n        transformIndex < pose.transforms.length;\r\n        ++transformIndex) {\r\n        const parentTransformIndex = context.parentTable[transformIndex];\r\n        if (parentTransformIndex < 0) {\r\n            continue;\r\n        }\r\n        // If parent need be converted, then the child need to be converted to.\r\n        if (spaceFlagTable.test(parentTransformIndex)) {\r\n            spaceFlagTable.set(transformIndex); // Set as \"need to be converted\".\r\n            lastTransformToConvert = transformIndex;\r\n        }\r\n    }\r\n\r\n    // From child to parent, convert transforms in to local space.\r\n    // Now the \"need to be converted\" flags are turned into \"in local space\".\r\n    for (let transformIndex = lastTransformToConvert;\r\n        transformIndex >= firstTransformToConvert;\r\n        --transformIndex) {\r\n        if (spaceFlagTable.test(transformIndex)) {\r\n            const parentTransformIndex = context.parentTable[transformIndex];\r\n            if (parentTransformIndex >= 0) {\r\n                const transform = pose.transforms.getTransform(transformIndex, cacheTransform_spaceConversion);\r\n                const parentTransform = pose.transforms.getTransform(parentTransformIndex, cacheParentTransform_spaceConversion);\r\n                Transform.calculateRelative(transform, transform, parentTransform);\r\n                pose.transforms.setTransform(transformIndex, transform);\r\n            }\r\n        }\r\n    }\r\n\r\n    // From parent to child, apply modifications, these modified transforms are now in component space.\r\n    for (let iMod = 0; iMod < nMods; ++iMod) {\r\n        const { transformIndex, transform } = queue.array[iMod];\r\n        pose.transforms.setTransform(transformIndex, transform);\r\n        spaceFlagTable.unset(transformIndex); // Set as \"in component space\".\r\n    }\r\n\r\n    // Finally, from parent to child, recalculate component space back.\r\n    for (let transformIndex = firstTransformToConvert;\r\n        transformIndex <= lastTransformToConvert;\r\n        ++transformIndex) {\r\n        if (spaceFlagTable.test(transformIndex)) {\r\n            const parentTransformIndex = context.parentTable[transformIndex];\r\n            assertIsTrue(parentTransformIndex >= 0); // These changes should all be children of transforms in modification queue.\r\n            const transform = pose.transforms.getTransform(transformIndex, cacheTransform_spaceConversion);\r\n            const parentTransform = pose.transforms.getTransform(parentTransformIndex, cacheParentTransform_spaceConversion);\r\n            Transform.multiply(transform, parentTransform, transform);\r\n            pose.transforms.setTransform(transformIndex, transform);\r\n        }\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeModifyPoseBase`)\r\n@poseGraphNodeHide()\r\nexport abstract class PoseNodeModifyPoseBase extends PoseNode {\r\n    @serializable\r\n    @input({ type: PoseGraphType.POSE })\r\n    public pose: PoseNode | null = null;\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        this.pose?.settle(context);\r\n        this._spaceFlagTable = new PoseTransformSpaceFlagTable(context.transformCount);\r\n    }\r\n\r\n    public reenter (): void {\r\n        this.pose?.reenter();\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        this.pose?.bind(context);\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        this.pose?.update(context);\r\n    }\r\n\r\n    protected doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const poseTransformSpaceRequirement = this.getPoseTransformSpaceRequirement();\r\n        const inputPose = this.pose?.evaluate(context, poseTransformSpaceRequirement)\r\n            ?? PoseNode.evaluateDefaultPose(context, poseTransformSpaceRequirement);\r\n\r\n        const { _modificationQueue: modificationQueue } = this;\r\n        assertIsTrue(modificationQueue.length === 0);\r\n        this.modifyPose(context, inputPose, modificationQueue);\r\n\r\n        applyTransformModificationQueue(context, inputPose, modificationQueue, this._spaceFlagTable);\r\n        modificationQueue.clear();\r\n\r\n        return inputPose;\r\n    }\r\n\r\n    protected abstract getPoseTransformSpaceRequirement(): PoseTransformSpaceRequirement;\r\n\r\n    protected abstract modifyPose(\r\n        context: AnimationGraphEvaluationContext,\r\n        pose: Pose,\r\n        transformModificationQueue: TransformModificationQueue,\r\n    ): void;\r\n\r\n    private _modificationQueue = new TransformModificationQueue();\r\n    private _spaceFlagTable = new PoseTransformSpaceFlagTable(0);\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, editable, range, serializable, type, visible } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseNode, PoseTransformSpaceRequirement } from '../pose-node';\r\nimport {\r\n    AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n} from '../../animation-graph-context';\r\nimport { input } from '../decorator/input';\r\nimport { approx, assertIsTrue, ccenum, error, Quat, Vec3 } from '../../../../core';\r\nimport { TransformHandle } from '../../../core/animation-handle';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport { IntensitySpecification } from './intensity-specification';\r\nimport { Pose } from '../../../core/pose';\r\nimport { PoseNodeModifyPoseBase, TransformModificationQueue } from './modify-pose-base';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\nimport { TransformSpace } from './transform-space';\r\nimport { Transform } from '../../../core/transform';\r\n\r\nexport enum TransformOperation {\r\n    LEAVE_UNCHANGED,\r\n\r\n    REPLACE,\r\n\r\n    ADD,\r\n}\r\n\r\nccenum(TransformOperation);\r\n\r\nconst APPLY_INTENSITY_EPSILON = 1e-5;\r\n\r\nconst cacheTransform = new Transform();\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeApplyTransform`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\n@poseGraphNodeAppearance({ themeColor: '#72A869' })\r\nexport class PoseNodeApplyTransform extends PoseNodeModifyPoseBase {\r\n    @serializable\r\n    @editable\r\n    public node = '';\r\n\r\n    @serializable\r\n    @editable\r\n    @type(TransformOperation)\r\n    public positionOperation = TransformOperation.LEAVE_UNCHANGED;\r\n\r\n    @serializable\r\n    @editable\r\n    @input({ type: PoseGraphType.VEC3 })\r\n    @visible(function visible (this: PoseNodeApplyTransform) { return this.positionOperation !== TransformOperation.LEAVE_UNCHANGED; })\r\n    public position = new Vec3();\r\n\r\n    @serializable\r\n    @editable\r\n    @type(TransformOperation)\r\n    public rotationOperation = TransformOperation.LEAVE_UNCHANGED;\r\n\r\n    @serializable\r\n    @editable\r\n    @input({ type: PoseGraphType.QUAT })\r\n    @visible(function visible (this: PoseNodeApplyTransform) { return this.rotationOperation !== TransformOperation.LEAVE_UNCHANGED; })\r\n    public rotation = new Quat();\r\n\r\n    @serializable\r\n    @editable\r\n    @range([0.0, 1.0, 0.01])\r\n    public intensity = new IntensitySpecification();\r\n\r\n    @serializable\r\n    @editable\r\n    @type(TransformSpace)\r\n    public transformSpace: TransformSpace = TransformSpace.WORLD;\r\n\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    public get intensityValue (): number {\r\n        return this.intensity.value;\r\n    }\r\n\r\n    public set intensityValue (value) {\r\n        this.intensity.value = value;\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        const {\r\n            node: nodeName,\r\n        } = this;\r\n\r\n        super.bind(context);\r\n\r\n        if (!nodeName) {\r\n            return;\r\n        }\r\n\r\n        const transformHandle = context.bindTransformByName(nodeName);\r\n        if (!transformHandle) {\r\n            error(`Failed to bind transform ${nodeName}`);\r\n            return;\r\n        }\r\n\r\n        this._transformHandle = transformHandle;\r\n\r\n        this.intensity.bind(context);\r\n    }\r\n\r\n    protected getPoseTransformSpaceRequirement (): PoseTransformSpaceRequirement {\r\n        return PoseTransformSpaceRequirement.NO;\r\n    }\r\n\r\n    protected modifyPose (context: AnimationGraphEvaluationContext, inputPose: Pose, modificationQueue: TransformModificationQueue): Pose {\r\n        const {\r\n            _transformHandle: transformHandle,\r\n        } = this;\r\n\r\n        if (!transformHandle) {\r\n            return inputPose;\r\n        }\r\n\r\n        const intensity = this.intensity.evaluate(inputPose);\r\n\r\n        // If intensity is too small. Takes no effect.\r\n        if (intensity < APPLY_INTENSITY_EPSILON) {\r\n            return inputPose;\r\n        }\r\n\r\n        const fullIntensity = approx(intensity, 1.0, APPLY_INTENSITY_EPSILON);\r\n\r\n        const { index: transformIndex } = transformHandle;\r\n\r\n        const nodeTransform = inputPose.transforms.getTransform(transformIndex, cacheTransform);\r\n\r\n        const { rotationOperation } = this;\r\n        if (rotationOperation !== TransformOperation.LEAVE_UNCHANGED) {\r\n            const { rotation, transformSpace: rotationSpace } = this;\r\n            context._convertPoseSpaceTransformToTargetSpace(\r\n                nodeTransform,\r\n                rotationSpace,\r\n                inputPose,\r\n                transformIndex,\r\n            );\r\n            switch (rotationOperation) {\r\n            default:\r\n            case TransformOperation.REPLACE:\r\n                replaceRotation(nodeTransform, rotation, intensity, fullIntensity);\r\n                break;\r\n            case TransformOperation.ADD:\r\n                addRotation(nodeTransform, rotation, intensity, fullIntensity);\r\n                break;\r\n            }\r\n            context._convertTransformToPoseTransformSpace(\r\n                nodeTransform,\r\n                rotationSpace,\r\n                inputPose,\r\n                transformIndex,\r\n            );\r\n        }\r\n\r\n        const { positionOperation } = this;\r\n        if (positionOperation !== TransformOperation.LEAVE_UNCHANGED) {\r\n            const { position, transformSpace: positionSpace } = this;\r\n            context._convertPoseSpaceTransformToTargetSpace(\r\n                nodeTransform,\r\n                positionSpace,\r\n                inputPose,\r\n                transformIndex,\r\n            );\r\n            switch (positionOperation) {\r\n            default:\r\n            case TransformOperation.REPLACE:\r\n                replacePosition(nodeTransform, position, intensity, fullIntensity);\r\n                break;\r\n            case TransformOperation.ADD:\r\n                addPosition(nodeTransform, position, intensity, fullIntensity);\r\n                break;\r\n            }\r\n            context._convertTransformToPoseTransformSpace(\r\n                nodeTransform,\r\n                positionSpace,\r\n                inputPose,\r\n                transformIndex,\r\n            );\r\n        }\r\n\r\n        modificationQueue.push(transformIndex, nodeTransform);\r\n\r\n        return inputPose;\r\n    }\r\n\r\n    private _transformHandle: TransformHandle | null = null;\r\n}\r\n\r\nconst {\r\n    replace: replacePosition,\r\n    add: addPosition,\r\n} = ((): {\r\n    replace: (transform: Transform, value: Readonly<Vec3>, intensity: number, fullIntensity: boolean) => void,\r\n    add: (transform: Transform, value: Readonly<Vec3>, intensity: number, fullIntensity: boolean) => void,\r\n} => {\r\n    const cacheInput = new Vec3();\r\n    const cacheResult = new Vec3();\r\n\r\n    return {\r\n        replace,\r\n        add,\r\n    };\r\n\r\n    function replace (transform: Transform, value: Readonly<Vec3>, intensity: number, fullIntensity: boolean): void {\r\n        if (fullIntensity) {\r\n            transform.position = value;\r\n        } else {\r\n            const inputPosition = Vec3.copy(cacheInput, transform.position);\r\n            Vec3.lerp(inputPosition, inputPosition, value, intensity);\r\n            transform.position = inputPosition;\r\n        }\r\n    }\r\n\r\n    function add (transform: Transform, value: Readonly<Vec3>, intensity: number, fullIntensity: boolean): void {\r\n        const result = cacheResult;\r\n        if (fullIntensity) {\r\n            Vec3.copy(result, value);\r\n        } else {\r\n            Vec3.slerp(result, Vec3.ZERO, value, intensity);\r\n        }\r\n        Vec3.add(result, transform.position, result);\r\n        transform.position = result;\r\n    }\r\n})();\r\n\r\nconst {\r\n    replace: replaceRotation,\r\n    add: addRotation,\r\n} = ((): {\r\n    replace: (transform: Transform, value: Readonly<Quat>, intensity: number, fullIntensity: boolean) => void,\r\n    add: (transform: Transform, value: Readonly<Quat>, intensity: number, fullIntensity: boolean) => void,\r\n} => {\r\n    const cacheInput = new Quat();\r\n    const cacheResult = new Quat();\r\n\r\n    return {\r\n        replace,\r\n        add,\r\n    };\r\n\r\n    function replace (transform: Transform, value: Readonly<Quat>, intensity: number, fullIntensity: boolean): void {\r\n        if (fullIntensity) {\r\n            transform.rotation = value;\r\n        } else {\r\n            const inputRotation = Quat.copy(cacheInput, transform.rotation);\r\n            Quat.slerp(inputRotation, inputRotation, value, intensity);\r\n            transform.rotation = inputRotation;\r\n        }\r\n    }\r\n\r\n    function add (transform: Transform, value: Readonly<Quat>, intensity: number, fullIntensity: boolean): void {\r\n        const inputRotation = Quat.copy(cacheInput, transform.rotation);\r\n        const resultRotation = cacheResult;\r\n        if (fullIntensity) {\r\n            Quat.copy(resultRotation, value);\r\n        } else {\r\n            Quat.slerp(resultRotation, Quat.IDENTITY, value, intensity);\r\n        }\r\n        Quat.multiply(resultRotation, resultRotation, inputRotation);\r\n        transform.rotation = resultRotation;\r\n    }\r\n})();\r\n\r\nif (EDITOR) {\r\n    PoseNodeApplyTransform.prototype.getTitle = function getTitle (this: PoseNodeApplyTransform): string | [string, Record<string, string>] | undefined {\r\n        if (this.node) {\r\n            return [`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodeApplyTransform.title`, { nodeName: this.node }];\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, editable, serializable, type } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { PoseTransformSpaceRequirement } from '../pose-node';\r\nimport { ccenum } from '../../../../core';\r\nimport { TransformHandle } from '../../../core/animation-handle';\r\nimport { poseGraphNodeAppearance, poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport { Pose } from '../../../core/pose';\r\nimport { PoseNodeModifyPoseBase } from './modify-pose-base';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext } from '../../animation-graph-context';\r\nimport { Transform } from '../../../core/transform';\r\n\r\nconst cacheTransform = new Transform();\r\n\r\nexport enum CopySpace {\r\n    /**\r\n     * Transforms are stored relative to their parent nodes.\r\n     */\r\n    LOCAL,\r\n\r\n    /**\r\n     * Transforms are stored relative to the belonging animation controller's node's space.\r\n     */\r\n    COMPONENT,\r\n}\r\nccenum(CopySpace);\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeCopyTransform`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\n@poseGraphNodeAppearance({ themeColor: '#72A869' })\r\nexport class PoseNodeCopyTransform extends PoseNodeModifyPoseBase {\r\n    @serializable\r\n    @editable\r\n    public sourceNodeName = '';\r\n\r\n    @serializable\r\n    @editable\r\n    public targetNodeName = '';\r\n\r\n    @serializable\r\n    @editable\r\n    @type(CopySpace)\r\n    public space: CopySpace = CopySpace.COMPONENT;\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        super.bind(context);\r\n        const sourceTransformHandle = context.bindTransformByName(this.sourceNodeName);\r\n        const targetTransformHandle = context.bindTransformByName(this.targetNodeName);\r\n        if (!sourceTransformHandle || !targetTransformHandle) {\r\n            sourceTransformHandle?.destroy();\r\n            targetTransformHandle?.destroy();\r\n            return;\r\n        }\r\n        this._workspace = new Workspace(\r\n            sourceTransformHandle,\r\n            targetTransformHandle,\r\n        );\r\n    }\r\n\r\n    protected modifyPose (context: AnimationGraphEvaluationContext, inputPose: Pose): void {\r\n        const {\r\n            _workspace: workspace,\r\n        } = this;\r\n        if (!workspace) {\r\n            return;\r\n        }\r\n        const {\r\n            hSource: { index: sourceTransformIndex },\r\n            hTarget: { index: targetTransformIndex },\r\n        } = workspace;\r\n        const transform = inputPose.transforms.getTransform(sourceTransformIndex, cacheTransform);\r\n        inputPose.transforms.setTransform(targetTransformIndex, transform);\r\n    }\r\n\r\n    protected getPoseTransformSpaceRequirement (): PoseTransformSpaceRequirement {\r\n        return this.space === CopySpace.COMPONENT ? PoseTransformSpaceRequirement.COMPONENT : PoseTransformSpaceRequirement.LOCAL;\r\n    }\r\n\r\n    private _workspace: Workspace | undefined = undefined;\r\n}\r\n\r\nclass Workspace {\r\n    constructor (\r\n        public hSource: TransformHandle,\r\n        public hTarget: TransformHandle,\r\n    ) {\r\n    }\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodeCopyTransform.prototype.getTitle = function getTitle (this: PoseNodeCopyTransform): string | [string, Record<string, string>] | undefined {\r\n        if (this.sourceNodeName && this.targetNodeName) {\r\n            return [`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodeCopyTransform.title`, {\r\n                sourceNodeName: this.sourceNodeName,\r\n                targetNodeName: this.targetNodeName,\r\n            }];\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, editable, serializable, type } from '../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { ccenum } from '../../../../core';\r\nimport { AuxiliaryCurveHandle } from '../../../core/animation-handle';\r\nimport { input } from '../decorator/input';\r\nimport { poseGraphNodeCategory } from '../decorator/node';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from './menu-common';\r\nimport { Pose } from '../../../core/pose';\r\nimport { PoseNodeModifyPoseBase } from './modify-pose-base';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext } from '../../animation-graph-context';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\nimport { PoseTransformSpaceRequirement } from '../pose-node';\r\n\r\nenum SetAuxiliaryCurveFlag {\r\n    LEAVE_UNCHANGED,\r\n\r\n    REPLACE,\r\n\r\n    ADD,\r\n}\r\n\r\nccenum(SetAuxiliaryCurveFlag);\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeSetAuxiliaryCurve`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_POSE)\r\nexport class PoseNodeSetAuxiliaryCurve extends PoseNodeModifyPoseBase {\r\n    @serializable\r\n    @editable\r\n    public curveName = '';\r\n\r\n    @serializable\r\n    @editable\r\n    @input({ type: PoseGraphType.FLOAT })\r\n    public curveValue = 0.0;\r\n\r\n    @serializable\r\n    @editable\r\n    @type(SetAuxiliaryCurveFlag)\r\n    public flag = SetAuxiliaryCurveFlag.REPLACE;\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        super.bind(context);\r\n        if (this.curveName) {\r\n            this._handle = context.bindAuxiliaryCurve(this.curveName);\r\n        }\r\n    }\r\n\r\n    protected getPoseTransformSpaceRequirement (): PoseTransformSpaceRequirement {\r\n        return PoseTransformSpaceRequirement.NO;\r\n    }\r\n\r\n    protected modifyPose (context: AnimationGraphEvaluationContext, inputPose: Pose): void {\r\n        const {\r\n            _handle: handle,\r\n        } = this;\r\n        if (!handle) {\r\n            return;\r\n        }\r\n        switch (this.flag) {\r\n        case SetAuxiliaryCurveFlag.REPLACE:\r\n            inputPose.auxiliaryCurves[handle.index] = this.curveValue;\r\n            break;\r\n        case SetAuxiliaryCurveFlag.ADD:\r\n            inputPose.auxiliaryCurves[handle.index] += this.curveValue;\r\n            break;\r\n        case SetAuxiliaryCurveFlag.LEAVE_UNCHANGED:\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    private _handle: AuxiliaryCurveHandle | undefined = undefined;\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodeSetAuxiliaryCurve.prototype.getTitle = function getTitle (this: PoseNodeSetAuxiliaryCurve): string | [string, Record<string, string>] | undefined {\r\n        if (!this.curveName) {\r\n            return undefined;\r\n        }\r\n        return [`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodeSetAuxiliaryCurve.title`, { curveName: this.curveName }];\r\n    };\r\n}\r\n","import { MeshRenderer } from '../../../../../3d';\r\nimport { createMesh } from '../../../../../3d/misc';\r\nimport { Material } from '../../../../../asset/assets';\r\nimport { Color, Vec3 } from '../../../../../core';\r\nimport { legacyCC } from '../../../../../core/global-exports';\r\nimport { PrimitiveMode } from '../../../../../gfx';\r\nimport { Node } from '../../../../../scene-graph';\r\n\r\nexport class TwoBoneIKDebugger {\r\n    constructor () {\r\n        const node = new Node();\r\n        legacyCC.director.getScene().addChild(node);\r\n\r\n        const meshRenderer = node.addComponent(MeshRenderer);\r\n        meshRenderer.material = ((): Material => {\r\n            const material = new Material();\r\n            material.reset({\r\n                effectName: 'builtin-unlit',\r\n                states: {\r\n                    primitive: PrimitiveMode.LINE_LIST,\r\n                },\r\n                defines: {\r\n                    USE_VERTEX_COLOR: true,\r\n                },\r\n            });\r\n            return material;\r\n        })();\r\n\r\n        this._node = node;\r\n        this._meshRenderer = meshRenderer;\r\n    }\r\n\r\n    public draw (a: Readonly<Vec3>, b: Readonly<Vec3>, c: Readonly<Vec3>): void {\r\n        const color1 = Color.RED;\r\n        const color2 = Color.BLUE;\r\n        const positions: number[] = [\r\n            a.x, a.y, a.z,\r\n            b.x, b.y, b.z,\r\n            b.x, b.y, b.z,\r\n            c.x, c.y, c.z,\r\n        ];\r\n        const colors: number[] = [\r\n            color1.x, color1.y, color1.z, color1.w,\r\n            color1.x, color1.y, color1.z, color1.w,\r\n            color2.x, color2.y, color2.z, color2.w,\r\n            color2.x, color2.y, color2.z, color2.w,\r\n        ];\r\n        const mesh = createMesh({\r\n            positions,\r\n            colors,\r\n            primitiveMode: PrimitiveMode.LINE_LIST,\r\n        });\r\n        this._meshRenderer.mesh = mesh;\r\n    }\r\n\r\n    private _node: Node;\r\n    private _meshRenderer: MeshRenderer;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nconst debuggerMap = new WeakMap<object, TwoBoneIKDebugger>();\r\n\r\nexport function debugTwoBoneIKDraw (\r\n    key: unknown,\r\n    a: Readonly<Vec3>, b: Readonly<Vec3>, c: Readonly<Vec3>,\r\n): void {\r\n    if (typeof key !== 'object' || !key) {\r\n        return;\r\n    }\r\n    let ikDebugger = debuggerMap.get(key);\r\n    if (!ikDebugger) {\r\n        ikDebugger = new TwoBoneIKDebugger();\r\n        debuggerMap.set(key, ikDebugger);\r\n    }\r\n    ikDebugger.draw(a, b, c);\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { approx, clamp, Quat, Vec3 } from '../../../../../core';\r\nimport { Transform } from '../../../../core/transform';\r\nimport { debugTwoBoneIKDraw } from './two-bone-ik-debugger';\r\n\r\nconst SANITY_CHECK_ENABLED = DEBUG;\r\n\r\nclass TwoBoneIKPositionSanityChecker {\r\n    public reset (a: Readonly<Vec3>, b: Readonly<Vec3>, c: Readonly<Vec3>): void {\r\n        Vec3.copy(this._a, a);\r\n        this._dAB = Vec3.distance(a, b);\r\n        this._dBC = Vec3.distance(b, c);\r\n    }\r\n\r\n    public check (_a: Readonly<Vec3>, _b: Readonly<Vec3>, _c: Readonly<Vec3>): boolean {\r\n        const CHECK_EPSILON = 1e-3;\r\n        const dAB = Vec3.distance(_a, _b);\r\n        const dBC = Vec3.distance(_b, _c);\r\n        if (!approx(Vec3.distance(_a, this._a), 0.0, CHECK_EPSILON)) {\r\n            // eslint-disable-next-line no-debugger\r\n            debugger;\r\n            return false;\r\n        }\r\n        if (!approx(dAB, this._dAB, CHECK_EPSILON)) {\r\n            // eslint-disable-next-line no-debugger\r\n            debugger;\r\n            return false;\r\n        }\r\n        if (!approx(dBC, this._dBC, CHECK_EPSILON)) {\r\n            // eslint-disable-next-line no-debugger\r\n            debugger;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private _a = new Vec3();\r\n    private declare _dAB: number;\r\n    private declare _dBC: number;\r\n}\r\n\r\n/**\r\n * 解算双骨骼（三关节）的 IK 问题。\r\n * 三关节分别称为根关节、中间关节和末端关节。例如，分别对应于大腿、膝盖和脚关节。\r\n * @param root 根关节转换（世界空间）。\r\n * @param middle 中间关节转换（世界空间）。\r\n * @param end 末端关节转换（世界空间）。\r\n * @param target 末端关节要抵达的目标位置（世界空间）。\r\n * @param hint 中间关节的提示位置（世界空间），用于决定中间关节的朝向。\r\n */\r\nexport const solveTwoBoneIK = ((): (root: Transform, middle: Transform, end: Transform, target: Vec3, middlePositionHint?: Vec3, debugKey?: unknown | undefined) => void => {\r\n    const cacheQuat = new Quat();\r\n    const cacheHint = new Vec3();\r\n    const cacheBSolved = new Vec3();\r\n    const cacheCSolved = new Vec3();\r\n\r\n    const calculateRotationBetweenRays = ((): (out: Quat, sourceOrigin: Readonly<Vec3>, sourceDestination: Readonly<Vec3>, targetOrigin: Readonly<Vec3>, targetDestination: Readonly<Vec3>) => Quat => {\r\n        const cacheVec3_1 = new Vec3();\r\n        const cacheVec3_2 = new Vec3();\r\n        return (\r\n            out: Quat,\r\n            sourceOrigin: Readonly<Vec3>, sourceDestination: Readonly<Vec3>,\r\n            targetOrigin: Readonly<Vec3>, targetDestination: Readonly<Vec3>,\r\n        // eslint-disable-next-line arrow-body-style\r\n        ): Quat => {\r\n            return Quat.rotationTo(\r\n                out,\r\n                Vec3.subtract(cacheVec3_1, sourceDestination, sourceOrigin).normalize(),\r\n                Vec3.subtract(cacheVec3_2, targetDestination, targetOrigin).normalize(),\r\n            );\r\n        };\r\n    })();\r\n\r\n    return (\r\n        root: Transform,\r\n        middle: Transform,\r\n        end: Transform,\r\n        target: Vec3,\r\n        middlePositionHint?: Vec3,\r\n        debugKey?: unknown | undefined,\r\n    ): void => {\r\n        const hint = Vec3.copy(cacheHint, middlePositionHint ?? middle.position);\r\n\r\n        const pA = root.position;\r\n        const pB = middle.position;\r\n        const pC = end.position;\r\n        const qC = end.rotation;\r\n\r\n        if (DEBUG) {\r\n            if (typeof debugKey !== undefined) {\r\n                debugTwoBoneIKDraw(debugKey, pA, pB, pC);\r\n            }\r\n        }\r\n\r\n        const bSolved = cacheBSolved;\r\n        const cSolved = cacheCSolved;\r\n        solveTwoBoneIKPositions(\r\n            pA,\r\n            pB,\r\n            pC,\r\n            target,\r\n            hint,\r\n            bSolved,\r\n            cSolved,\r\n        );\r\n\r\n        const qA = calculateRotationBetweenRays(\r\n            cacheQuat,\r\n            pA, pB,\r\n            pA, bSolved,\r\n        );\r\n        Quat.multiply(qA, qA, root.rotation);\r\n        root.rotation = qA;\r\n\r\n        const qB = calculateRotationBetweenRays(\r\n            cacheQuat,\r\n            pB, pC,\r\n            bSolved, cSolved,\r\n        );\r\n        Quat.multiply(qB, qB, middle.rotation);\r\n        middle.rotation = qB;\r\n        middle.position = bSolved;\r\n\r\n        end.position = cSolved;\r\n    };\r\n})();\r\n\r\nexport const solveTwoBoneIKPositions = ((): (a: Readonly<Vec3>, b: Readonly<Vec3>, c: Readonly<Vec3>, target: Readonly<Vec3>, middleTarget: Readonly<Vec3>, bSolved: Vec3, cSolved: Vec3) => void => {\r\n    const cacheDirAT = new Vec3();\r\n    const cacheDirAB = new Vec3();\r\n    const cacheDirHeightLine = new Vec3();\r\n    const cacheSanityChecker = SANITY_CHECK_ENABLED\r\n        ? new TwoBoneIKPositionSanityChecker()\r\n        : undefined;\r\n\r\n    return (\r\n        a: Readonly<Vec3>,\r\n        b: Readonly<Vec3>,\r\n        c: Readonly<Vec3>,\r\n        target: Readonly<Vec3>,\r\n        middleTarget: Readonly<Vec3>,\r\n        bSolved: Vec3,\r\n        cSolved: Vec3,\r\n    ): void => {\r\n        const sanityCheck = cacheSanityChecker\r\n            ? ((): () => boolean => {\r\n                cacheSanityChecker?.reset(a, b, c);\r\n                return (): boolean => cacheSanityChecker.check(a, bSolved, cSolved);\r\n            })()\r\n            : undefined;\r\n\r\n        const dAB = Vec3.distance(a, b);\r\n        const dBC = Vec3.distance(b, c);\r\n        const dAT = Vec3.distance(a, target);\r\n\r\n        const dirAT = Vec3.subtract(cacheDirAT, target, a);\r\n        dirAT.normalize();\r\n\r\n        const chainLength = dAB + dBC;\r\n        if (dAT >= chainLength) {\r\n            // Target is too far\r\n            Vec3.scaleAndAdd(bSolved, a, dirAT, dAB);\r\n            Vec3.scaleAndAdd(cSolved, a, dirAT, chainLength);\r\n            sanityCheck?.();\r\n            return;\r\n        }\r\n\r\n        // Now we should have a solution with target reached.\r\n        // And then solve the middle joint B as Ḃ.\r\n        Vec3.copy(cSolved, target);\r\n        // Calculate ∠BAC's cosine.\r\n        const cosḂAT = clamp(\r\n            (dAB * dAB + dAT * dAT - dBC * dBC) / (2 * dAB * dAT),\r\n            -1.0,\r\n            1.0,\r\n        );\r\n        // Then use basic trigonometry(instead of rotation) to solve Ḃ.\r\n        // Let D the intersect point of the height line passing Ḃ.\r\n        const dirAB = Vec3.subtract(cacheDirAB, middleTarget, a);\r\n        const dirHeightLine = Vec3.projectOnPlane(cacheDirHeightLine, dirAB, dirAT);\r\n        dirHeightLine.normalize();\r\n        const dAD = dAB * cosḂAT;\r\n        const hSqr = dAB * dAB - dAD * dAD;\r\n        if (hSqr < 0) {\r\n            // TODO: 'Shall handle this case';\r\n            // eslint-disable-next-line no-debugger\r\n            debugger;\r\n        }\r\n        const h = Math.sqrt(hSqr);\r\n        Vec3.scaleAndAdd(bSolved, a, dirAT, dAD);\r\n        Vec3.scaleAndAdd(bSolved, bSolved, dirHeightLine, h);\r\n        sanityCheck?.();\r\n    };\r\n})();\r\n","import { EDITOR } from 'internal:constants';\r\nimport { ccclass, editable, serializable, type, visible } from '../../../../../core/data/decorators';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../../define';\r\nimport { PoseTransformSpaceRequirement } from '../../pose-node';\r\nimport { assertIsTrue, ccenum, Vec3 } from '../../../../../core';\r\nimport { TransformHandle } from '../../../../core/animation-handle';\r\nimport { input } from '../../decorator/input';\r\nimport { poseGraphNodeCategory } from '../../decorator/node';\r\nimport { Pose } from '../../../../core/pose';\r\nimport { PoseNodeModifyPoseBase, TransformModificationQueue } from '../modify-pose-base';\r\nimport { solveTwoBoneIK } from './solve-two-bone-ik';\r\nimport { Transform } from '../../../../core/transform';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext } from '../../../animation-graph-context';\r\nimport { PoseGraphType } from '../../foundation/type-system';\r\nimport { TransformSpace } from '../transform-space';\r\nimport { POSE_GRAPH_NODE_MENU_PREFIX_IK } from './menu';\r\n\r\nconst cacheRootTransform = new Transform();\r\nconst cacheMiddleTransform = new Transform();\r\nconst cacheEndEffectorTransform = new Transform();\r\nconst cacheEndEffectorTargetPosition = new Vec3();\r\nconst cachePoleTargetPosition = new Vec3();\r\nconst cacheTransform_evaluateTarget = new Transform();\r\n\r\nenum TargetSpecificationType {\r\n    /**\r\n     * Targets nothing.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * Targets the specified vector value.\r\n     */\r\n    VALUE,\r\n\r\n    /**\r\n     * Targets the specified bone.\r\n     */\r\n    BONE,\r\n}\r\n\r\nccenum(TargetSpecificationType);\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeTwoBoneIKSolver.TargetSpecification`)\r\nclass TargetSpecification {\r\n    constructor (type?: TargetSpecificationType) {\r\n        if (typeof type !== 'undefined') {\r\n            this.type = type;\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    @editable\r\n    @type(TargetSpecificationType)\r\n    public type = TargetSpecificationType.VALUE;\r\n\r\n    @serializable\r\n    @editable\r\n    @visible(function visible (this: TargetSpecification) { return this.type === TargetSpecificationType.VALUE; })\r\n    public targetPosition = new Vec3();\r\n\r\n    @serializable\r\n    @editable\r\n    @type(TransformSpace)\r\n    @visible(function visible (this: TargetSpecification) { return this.type === TargetSpecificationType.VALUE; })\r\n    public targetPositionSpace = TransformSpace.WORLD;\r\n\r\n    @serializable\r\n    @editable\r\n    @visible(function visible (this: TargetSpecification) { return this.type === TargetSpecificationType.BONE; })\r\n    public targetBone = '';\r\n\r\n    public bind (context: AnimationGraphBindingContext, sourceBoneHandle: TransformHandle): void {\r\n        this._sourceBoneHandle = sourceBoneHandle;\r\n        if (this.type === TargetSpecificationType.BONE && this.targetBone) {\r\n            this._targetBoneHandle = context.bindTransformByName(this.targetBone) ?? undefined;\r\n        }\r\n    }\r\n\r\n    public evaluate (outTargetPosition: Vec3, pose: Pose, context: AnimationGraphEvaluationContext): Vec3 {\r\n        assertIsTrue(this._sourceBoneHandle);\r\n        if (this._targetBoneHandle) {\r\n            pose.transforms.getPosition(this._targetBoneHandle.index, outTargetPosition);\r\n        } else if (this.type === TargetSpecificationType.NONE) {\r\n            pose.transforms.getPosition(this._sourceBoneHandle.index, outTargetPosition);\r\n        } else {\r\n            const targetTransform = Transform.setIdentity(cacheTransform_evaluateTarget);\r\n            targetTransform.position = this.targetPosition;\r\n            context._convertTransformToPoseTransformSpace(\r\n                targetTransform,\r\n                this.targetPositionSpace,\r\n                pose,\r\n                this._sourceBoneHandle.index,\r\n            );\r\n            Vec3.copy(outTargetPosition, targetTransform.position);\r\n        }\r\n        return outTargetPosition;\r\n    }\r\n\r\n    private _sourceBoneHandle: TransformHandle | undefined = undefined;\r\n    private _targetBoneHandle: TransformHandle | undefined = undefined;\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PoseNodeTwoBoneIKSolver`)\r\n@poseGraphNodeCategory(POSE_GRAPH_NODE_MENU_PREFIX_IK)\r\nexport class PoseNodeTwoBoneIKSolver extends PoseNodeModifyPoseBase {\r\n    @serializable\r\n    @editable\r\n    public debug = false;\r\n\r\n    @serializable\r\n    @editable\r\n    public endEffectorBoneName = '';\r\n\r\n    @serializable\r\n    @editable\r\n    public readonly endEffectorTarget = new TargetSpecification(TargetSpecificationType.VALUE);\r\n\r\n    @input({ type: PoseGraphType.VEC3 })\r\n    @visible(function visible (this: PoseNodeTwoBoneIKSolver) { return this.endEffectorTarget.type === TargetSpecificationType.VALUE; })\r\n    get endEffectorTargetPosition (): Vec3 {\r\n        return this.endEffectorTarget.targetPosition;\r\n    }\r\n\r\n    set endEffectorTargetPosition (value) {\r\n        Vec3.copy(this.endEffectorTarget.targetPosition, value);\r\n    }\r\n\r\n    @serializable\r\n    @editable\r\n    public readonly poleTarget = new TargetSpecification(TargetSpecificationType.NONE);\r\n\r\n    @input({ type: PoseGraphType.VEC3 })\r\n    @visible(function visible (this: PoseNodeTwoBoneIKSolver) { return this.poleTarget.type === TargetSpecificationType.VALUE; })\r\n    get poleTargetPosition (): Vec3 {\r\n        return this.poleTarget.targetPosition;\r\n    }\r\n\r\n    set poleTargetPosition (value) {\r\n        Vec3.copy(this.poleTarget.targetPosition, value);\r\n    }\r\n\r\n    public bind (context: AnimationGraphBindingContext): void {\r\n        super.bind(context);\r\n        if (this.endEffectorBoneName) {\r\n            const parentBoneName = context.getParentBoneNameByName(this.endEffectorBoneName);\r\n            const ikRootBoneName = parentBoneName\r\n                ? context.getParentBoneNameByName(parentBoneName)\r\n                : '';\r\n            if (parentBoneName && ikRootBoneName) {\r\n                const hEndEffector = context.bindTransformByName(this.endEffectorBoneName);\r\n                const hMiddle = context.bindTransformByName(parentBoneName);\r\n                const hIKRoot = context.bindTransformByName(ikRootBoneName);\r\n                if (!hEndEffector || !hMiddle || !hIKRoot) {\r\n                    hEndEffector?.destroy();\r\n                    hMiddle?.destroy();\r\n                    hIKRoot?.destroy();\r\n                } else {\r\n                    this.endEffectorTarget.bind(context, hEndEffector);\r\n                    this.poleTarget.bind(context, hMiddle);\r\n                    this._workspace = new Workspace(\r\n                        hEndEffector,\r\n                        hMiddle,\r\n                        hIKRoot,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getPoseTransformSpaceRequirement (): PoseTransformSpaceRequirement {\r\n        return PoseTransformSpaceRequirement.COMPONENT;\r\n    }\r\n\r\n    protected modifyPose (context: AnimationGraphEvaluationContext, inputPose: Pose, modificationQueue: TransformModificationQueue): void {\r\n        const {\r\n            _workspace: workspace,\r\n        } = this;\r\n\r\n        if (!workspace) {\r\n            return;\r\n        }\r\n\r\n        const {\r\n            hRoot: { index: iRootTransform },\r\n            hMiddle: { index: iMiddleTransform },\r\n            hEndEffector: { index: iEndEffectorTransform },\r\n        } = workspace;\r\n\r\n        // Fetch transforms.\r\n        const rootTransform = inputPose.transforms.getTransform(iRootTransform, cacheRootTransform);\r\n        const middleTransform = inputPose.transforms.getTransform(iMiddleTransform, cacheMiddleTransform);\r\n        const endEffectorTransform = inputPose.transforms.getTransform(iEndEffectorTransform, cacheEndEffectorTransform);\r\n\r\n        const endEffectorTargetPosition = this.endEffectorTarget.evaluate(cacheEndEffectorTargetPosition, inputPose, context);\r\n        const poleTargetPosition = this.poleTarget.evaluate(cachePoleTargetPosition, inputPose, context);\r\n\r\n        // Solve.\r\n        solveTwoBoneIK(\r\n            rootTransform,\r\n            middleTransform,\r\n            endEffectorTransform,\r\n            endEffectorTargetPosition,\r\n            poleTargetPosition,\r\n            this.debug ? this : undefined,\r\n        );\r\n\r\n        modificationQueue.push(iRootTransform, rootTransform);\r\n        modificationQueue.push(iMiddleTransform, middleTransform);\r\n        modificationQueue.push(iEndEffectorTransform, endEffectorTransform);\r\n    }\r\n\r\n    private _workspace: Workspace | undefined = undefined;\r\n}\r\n\r\nif (EDITOR) {\r\n    PoseNodeTwoBoneIKSolver.prototype.getTitle = function getTitle (this: PoseNodeTwoBoneIKSolver): string | [string, Record<string, string>] | undefined {\r\n        if (this.endEffectorBoneName) {\r\n            return [`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PoseNodeTwoBoneIKSolver.title`, {\r\n                endEffectorBoneName: this.endEffectorBoneName,\r\n            }];\r\n        }\r\n        return undefined;\r\n    };\r\n}\r\n\r\nclass Workspace {\r\n    constructor (\r\n        public hEndEffector: TransformHandle,\r\n        public hMiddle: TransformHandle,\r\n        public hRoot: TransformHandle,\r\n    ) {\r\n    }\r\n}\r\n","import { POSE_GRAPH_NODE_MENU_PREFIX_POSE } from '../menu-common';\r\n\r\nexport const POSE_GRAPH_NODE_MENU_PREFIX_IK = `${POSE_GRAPH_NODE_MENU_PREFIX_POSE}/`\r\n    + `i18n:ENGINE.animation_graph.pose_graph_node_sub_categories.pose_nodes_ik/`;\r\n","import { DEBUG } from 'internal:constants';\r\nimport { approx, assertIsTrue, error } from '../../../../core';\r\nimport { Pose } from '../../../core/pose';\r\nimport { PoseGraphStash } from '../../animation-graph';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphSettleContext, AnimationGraphUpdateContext, AnimationGraphUpdateContextGenerator,\r\n} from '../../animation-graph-context';\r\nimport { InstantiatedPoseGraph, instantiatePoseGraph } from '../instantiation';\r\n\r\ninterface RuntimeStash {\r\n    reenter(): void;\r\n\r\n    requestUpdate (context: AnimationGraphUpdateContext): void;\r\n\r\n    evaluate (context: AnimationGraphEvaluationContext): Pose | null;\r\n}\r\n\r\n/**\r\n * Traces the state of a stash record. The transition is described as following.\r\n *\r\n  ```mermaid\r\n    stateDiagram-v2\r\n      [*] --> Preparation\r\n\r\n      state Preparation {\r\n        [*] --> Uninitialized\r\n\r\n        Uninitialized --> Unsettled: `set`\r\n\r\n        Unsettled --> Settled: `settle()`\r\n\r\n        Settled --> [*]\r\n      }\r\n\r\n      Preparation --> Up_to_date: `reenter()`\r\n      Up_to_date --> Up_to_date: Repeatedly renter through `reenter()`, no effect\r\n      Outdated --> Up_to_date: `reenter()`\r\n\r\n      Up_to_date --> Ticking: `update()`\r\n      Outdated --> Ticking: `update()`\r\n\r\n      state Ticking {\r\n        [*] --> Update\r\n\r\n        state Update {\r\n            [*] --> Updating\r\n            Updating --> Updating: `update()`, circular dependency formed, no effect\r\n            Updating --> Updated: The `update()` returned\r\n            Updated --> Updated: `update()`, no effect\r\n            Updated --> [*]\r\n        }\r\n\r\n        Update --> Evaluate: `evaluate()`\r\n        state Evaluate {\r\n            [*] --> Evaluating\r\n            Evaluating --> Evaluating: `evaluate()`, circular dependency formed, return the default pose\r\n            Evaluating --> Evaluated: The `evaluate()` returned\r\n            Evaluated --> Evaluated: `evaluate()`, cache is returned\r\n            Evaluated --> [*]\r\n        }\r\n\r\n        Update --> [*]\r\n        Evaluate --> [*]\r\n      }\r\n\r\n      Ticking --> Up_to_date: At the end of tick\r\n      Up_to_date --> Outdated: At the end of tick\r\n  ```\r\n *\r\n * - Stash records are created at the beginning of layer instantiation, before instantiation of any other things.\r\n *   All records' initial states are `UNINITIALIZED`.\r\n *\r\n * - Each stash is fed into the record, cause the record's state transition into `UNSETTLED`.\r\n *   Then the stash's graph starts its bind stage.\r\n *\r\n * - After all things in animation graph completed their bind stage, each stash would be settled.\r\n *   Then the stash was put in `SETTLED` state.\r\n *\r\n * - Next, at least one `reenter` should be called on the stash, to put the stash into `Up-to-date` to participate loop.\r\n *\r\n * - For each animation graph tick:\r\n *\r\n *   - Then, the stash will run into `UPDATING` and then `UPDATED` stage in animation graph update stage.\r\n *     The stash only updates once, if there're multiple update threads, the later update takes no effect.\r\n *     If circular dependency occurred, the update as well takes no effect.\r\n *\r\n *   - Then, the stash will run into `EVALUATING` and then `EVALUATED` stage in animation graph evaluation stage.\r\n *     The stash only evaluates once and the evaluation result is cached,\r\n *     if there're multiple evaluation threads, the evaluation result is duplicated.\r\n *     If circular dependency occurred, the evaluation returns default pose.\r\n *\r\n *   - At the end of tick,\r\n *\r\n *      - If the stash is not updated and is not evaluated in this tick, it will be put back into `Outdated` .\r\n */\r\nenum StashRecordState {\r\n    /**\r\n     * The stash record is created, but there's no stash set.\r\n     * The record shall not be in this state after binding stage.\r\n     */\r\n    UNINITIALIZED,\r\n\r\n    /**\r\n     * The stash has already been set into the stash record,\r\n     * but haven't not been settled.\r\n     */\r\n    UNSETTLED,\r\n\r\n    /**\r\n     * The stash has been settled. A `reenter` is required to activate the stash.\r\n     */\r\n    SETTLED,\r\n\r\n    /**\r\n     * The stash was updated in last frame or has been reentered this frame.\r\n     */\r\n    UP_TO_DATE,\r\n\r\n    /**\r\n     * The stash had not been updated at least one frames at past.\r\n     */\r\n    OUTDATED,\r\n\r\n    /**\r\n     * The stash is being updated.\r\n     */\r\n    UPDATING,\r\n\r\n    /**\r\n     * The stash has been updated and is ready to evaluate, but it has not been evaluated.\r\n     */\r\n    UPDATED,\r\n\r\n    /**\r\n     * The stash is being evaluated.\r\n     */\r\n    EVALUATING,\r\n\r\n    /**\r\n     * The stash has been evaluated once.\r\n     */\r\n    EVALUATED,\r\n}\r\n\r\nclass RuntimeStashRecord implements RuntimeStash {\r\n    public constructor (\r\n        private _allocator: PoseStashAllocator,\r\n    ) {\r\n    }\r\n\r\n    public set (stash: PoseGraphStash, context: AnimationGraphBindingContext): void {\r\n        assertIsTrue(this._state === StashRecordState.UNINITIALIZED, `The stash has already been set.`);\r\n        const instantiatedPoseGraph = instantiatePoseGraph(stash.graph, context);\r\n        instantiatedPoseGraph.bind(context);\r\n        this._instantiatedPoseGraph = instantiatedPoseGraph;\r\n        this._state = StashRecordState.UNSETTLED;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        assertIsTrue(\r\n            this._state === StashRecordState.UNSETTLED // First time settle\r\n            || this._state === StashRecordState.SETTLED, // Resettle\r\n        );\r\n        assertIsTrue(this._instantiatedPoseGraph);\r\n        this._instantiatedPoseGraph.settle(context);\r\n        this._state = StashRecordState.SETTLED;\r\n    }\r\n\r\n    public reset (): void {\r\n        switch (this._state) {\r\n        case StashRecordState.SETTLED: // Happen when the stash was not reentered till now.\r\n        case StashRecordState.OUTDATED:  // Happen when the stash keeps outdated.\r\n            break;\r\n        case StashRecordState.UP_TO_DATE: // Happen when the stash was not updated in this frame.\r\n            this._state = StashRecordState.OUTDATED; // It's then outdated.\r\n            break;\r\n        case StashRecordState.UPDATED:\r\n            // Note: shall this means the stash is updated but not evaluated.\r\n            // fallthrough\r\n        case StashRecordState.EVALUATED:\r\n            if (this._evaluationCache) {\r\n                this._allocator.destroyPose(this._evaluationCache);\r\n                this._evaluationCache = null;\r\n            }\r\n            this._maxRequestedUpdateTime = 0.0;\r\n            this._state = StashRecordState.UP_TO_DATE;\r\n            break;\r\n        case StashRecordState.UNINITIALIZED:\r\n        default:\r\n            assertIsTrue(false, `Unexpected stash state`);\r\n        }\r\n    }\r\n\r\n    public reenter (): void {\r\n        switch (this._state) {\r\n        default:\r\n            assertIsTrue(false as boolean, `Unexpected stash state ${this._state} when reenter().`);\r\n            break;\r\n        case StashRecordState.UP_TO_DATE: // Happen when the state was updated in last frame but received a reenter() request this frame.\r\n        case StashRecordState.UPDATED: // Happen when the state has been update() in this frame at one place but request reenter() at another place.\r\n            break;\r\n        case StashRecordState.SETTLED: // Happen when the state is first reenter().\r\n        case StashRecordState.OUTDATED: { // Happen when the state has been outdated.\r\n            this._state = StashRecordState.UP_TO_DATE;\r\n            assertIsTrue(this._instantiatedPoseGraph);\r\n            this._instantiatedPoseGraph.reenter();\r\n            break;\r\n        }\r\n        }\r\n    }\r\n\r\n    public requestUpdate (context: AnimationGraphUpdateContext): void {\r\n        const { deltaTime } = context;\r\n        assertIsTrue(\r\n            this._state === StashRecordState.OUTDATED\r\n            || this._state === StashRecordState.UP_TO_DATE\r\n            || this._state === StashRecordState.UPDATING\r\n            || this._state === StashRecordState.UPDATED,\r\n        );\r\n        assertIsTrue(this._instantiatedPoseGraph);\r\n\r\n        // We entered a loop, stop.\r\n        if (this._state === StashRecordState.UPDATING) {\r\n            return;\r\n        }\r\n\r\n        // Note: even `deltaTime < this._maxRequestedUpdateTime`(the `diffDeltaTime` becomes 0.0),\r\n        // the `context.directiveAbsoluteWeight` might not be 0.0.\r\n        // We still need to trigger an update since some nodes(such as PlayMotion) needs to accumulate weight.\r\n        const diffDeltaTime = Math.max(0.0, deltaTime - this._maxRequestedUpdateTime);\r\n        // We accepted two same time-length update, don't do redundant updates.\r\n        // After PR #14990, this should always true.\r\n        if (this._state === StashRecordState.UPDATED) {\r\n            if (approx(diffDeltaTime, 0.0, 1e-8)) {\r\n                return;\r\n            } else {\r\n                // eslint-disable-next-line no-lonely-if\r\n                if (DEBUG) {\r\n                    error(`Arrived here indicates a violent of PR #14990. Please report the BUG.`);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this._state = StashRecordState.UPDATING;\r\n        this._maxRequestedUpdateTime = Math.max(deltaTime, this._maxRequestedUpdateTime);\r\n        const updateContext = this._updateContextGenerator.generate(\r\n            diffDeltaTime,\r\n            context.indicativeWeight,\r\n        );\r\n        this._instantiatedPoseGraph.update(updateContext);\r\n        this._state = StashRecordState.UPDATED;\r\n    }\r\n\r\n    public evaluate (context: AnimationGraphEvaluationContext): Pose | null {\r\n        switch (this._state) {\r\n        default:\r\n            assertIsTrue(false as boolean, `Unexpected stash state ${this._state} when evaluate().`);\r\n            break;\r\n        case StashRecordState.EVALUATING: // Circular reference occurred.\r\n            this._state = StashRecordState.EVALUATED;\r\n            break;\r\n        case StashRecordState.EVALUATED: // Already evaluated.\r\n            break;\r\n        case StashRecordState.UPDATED: {\r\n            assertIsTrue(!this._evaluationCache);\r\n            this._state = StashRecordState.EVALUATING;\r\n            const pose = this._instantiatedPoseGraph?.evaluate(context);\r\n            this._state = StashRecordState.EVALUATED;\r\n            if (pose) {\r\n                const heapPose = this._allocator.allocatePose();\r\n                heapPose.transforms.set(pose.transforms);\r\n                heapPose.auxiliaryCurves.set(pose.auxiliaryCurves);\r\n                this._evaluationCache = heapPose;\r\n                context.popPose();\r\n            }\r\n            this._state = StashRecordState.EVALUATED;\r\n            break;\r\n        }\r\n        }\r\n        assertIsTrue(this._state === StashRecordState.EVALUATED);\r\n        assertIsTrue(this._instantiatedPoseGraph);\r\n        return this._evaluationCache\r\n            ? context.pushDuplicatedPose(this._evaluationCache)\r\n            : null;\r\n    }\r\n\r\n    private _state = StashRecordState.UNINITIALIZED;\r\n    private _instantiatedPoseGraph: InstantiatedPoseGraph | undefined = undefined;\r\n    private _maxRequestedUpdateTime = 0.0;\r\n    private _evaluationCache: Pose | null = null;\r\n    private _updateContextGenerator = new AnimationGraphUpdateContextGenerator();\r\n}\r\n\r\ninterface RuntimeStashView {\r\n    bindStash(id: string): RuntimeStash | undefined;\r\n}\r\n\r\nexport interface PoseStashAllocator {\r\n    allocatePose(): Pose;\r\n\r\n    destroyPose(pose: Pose): void;\r\n}\r\n\r\nexport class RuntimeStashManager implements RuntimeStashView {\r\n    constructor (allocator: PoseStashAllocator) {\r\n        this._allocator = allocator;\r\n    }\r\n\r\n    public bindStash (id: string): RuntimeStash {\r\n        return this._stashEvaluations[id] as RuntimeStash;\r\n    }\r\n\r\n    public getStash (id: string): RuntimeStashRecord | undefined {\r\n        return this._stashEvaluations[id];\r\n    }\r\n\r\n    public addStash (id: string): void {\r\n        this._stashEvaluations[id] = new RuntimeStashRecord(this._allocator);\r\n    }\r\n\r\n    public setStash (id: string, stash: PoseGraphStash, context: AnimationGraphBindingContext): void {\r\n        assertIsTrue(id in this._stashEvaluations);\r\n        this._stashEvaluations[id].set(stash, context);\r\n    }\r\n\r\n    public reset (): void {\r\n        for (const stashId in this._stashEvaluations) {\r\n            const record = this._stashEvaluations[stashId];\r\n            record.reset();\r\n        }\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        for (const stashId in this._stashEvaluations) {\r\n            const record = this._stashEvaluations[stashId];\r\n            record.settle(context);\r\n        }\r\n    }\r\n\r\n    private _allocator: PoseStashAllocator;\r\n    private _stashEvaluations: Record<string, RuntimeStashRecord> = {};\r\n}\r\n\r\nexport type { RuntimeStash, RuntimeStashView };\r\n","import { EDITOR } from 'internal:constants';\r\nimport { editable, Quat, serializable, Vec3 } from '../../../../core';\r\nimport { ccclass } from '../../../../core/data/class-decorator';\r\nimport { VariableType, VarInstance } from '../../variable';\r\nimport { CLASS_NAME_PREFIX_ANIM } from '../../../define';\r\nimport { SingleOutputPVNode, PureValueNodeLinkContext } from '../pure-value-node';\r\nimport {\r\n    PoseGraphCreateNodeEntry, PoseGraphCreateNodeFactory, poseGraphCreateNodeFactory, poseGraphNodeAppearance, poseGraphNodeHide,\r\n} from '../decorator/node';\r\nimport { PoseGraphType } from '../foundation/type-system';\r\n\r\ninterface CreateNodeArg {\r\n    name: string;\r\n    type: Exclude<PoseGraphType, PoseGraphType.POSE>;\r\n}\r\n\r\nconst createNodeFactory: PoseGraphCreateNodeFactory<CreateNodeArg> = {\r\n    // eslint-disable-next-line arrow-body-style\r\n    listEntries: (context) => {\r\n        // eslint-disable-next-line arrow-body-style\r\n        const entries: PoseGraphCreateNodeEntry<CreateNodeArg>[] = [];\r\n        for (const [variableName, { type }] of context.animationGraph.variables) {\r\n            if (type === VariableType.TRIGGER) {\r\n                continue;\r\n            }\r\n            let poseGraphType: CreateNodeArg['type'] | undefined;\r\n            switch (type) {\r\n            default:\r\n                break;\r\n            case VariableType.FLOAT:\r\n                poseGraphType = PoseGraphType.FLOAT;\r\n                break;\r\n            case VariableType.INTEGER:\r\n                poseGraphType = PoseGraphType.INTEGER;\r\n                break;\r\n            case VariableType.BOOLEAN:\r\n                poseGraphType = PoseGraphType.BOOLEAN;\r\n                break;\r\n            case VariableType.VEC3_experimental:\r\n                poseGraphType = PoseGraphType.VEC3;\r\n                break;\r\n            case VariableType.QUAT_experimental:\r\n                poseGraphType = PoseGraphType.QUAT;\r\n                break;\r\n            }\r\n            if (typeof poseGraphType === 'undefined') {\r\n                continue;\r\n            }\r\n            entries.push({\r\n                arg: { name: variableName, type: poseGraphType  },\r\n                menu: variableName,\r\n            });\r\n        }\r\n        return entries;\r\n    },\r\n\r\n    create: (arg) => {\r\n        let node: PVNodeGetVariableFloat | PVNodeGetVariableInteger | PVNodeGetVariableBoolean | PVNodeGetVariableVec3 | PVNodeGetVariableQuat;\r\n        switch (arg.type) {\r\n        default:\r\n            throw new Error(`Bad create node arg: ${PoseGraphType[arg.type]}`);\r\n        case PoseGraphType.FLOAT:\r\n            node = new PVNodeGetVariableFloat();\r\n            break;\r\n        case PoseGraphType.INTEGER:\r\n            node = new PVNodeGetVariableInteger();\r\n            break;\r\n        case PoseGraphType.BOOLEAN:\r\n            node = new PVNodeGetVariableBoolean();\r\n            break;\r\n        case PoseGraphType.VEC3:\r\n            node = new PVNodeGetVariableVec3();\r\n            break;\r\n        case PoseGraphType.QUAT:\r\n            node = new PVNodeGetVariableQuat();\r\n            break;\r\n        }\r\n        node.variableName = arg.name;\r\n        return node;\r\n    },\r\n};\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableBase`)\r\n@poseGraphCreateNodeFactory(createNodeFactory)\r\nexport abstract class PVNodeGetVariableBase<T> extends SingleOutputPVNode<T> {\r\n    @editable\r\n    @serializable\r\n    public variableName = '';\r\n\r\n    link (context: PureValueNodeLinkContext): void {\r\n        this._varInstance = context.getVar(this.variableName);\r\n    }\r\n\r\n    protected _varInstance: VarInstance | undefined = undefined;\r\n}\r\n\r\nif (EDITOR) {\r\n    PVNodeGetVariableBase.prototype.getTitle = function getTitle (this: PVNodeGetVariableBase<any>): [string, { variableName: string; }] | undefined {\r\n        if (!this.variableName) {\r\n            return undefined;\r\n        }\r\n        return [`ENGINE.classes.${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableBase.title`, { variableName: this.variableName }];\r\n    };\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableFloat`)\r\n@poseGraphNodeHide()\r\n@poseGraphNodeAppearance({\r\n    inline: true,\r\n    themeColor: '#8471CF',\r\n})\r\nexport class PVNodeGetVariableFloat extends PVNodeGetVariableBase<number> {\r\n    constructor () {\r\n        super(PoseGraphType.FLOAT);\r\n    }\r\n\r\n    public selfEvaluateDefaultOutput (): number {\r\n        return this._varInstance?.value as number; // TODO\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableInteger`)\r\n@poseGraphNodeHide()\r\n@poseGraphNodeAppearance({\r\n    inline: true,\r\n    themeColor: '#2A90DC',\r\n})\r\nexport class PVNodeGetVariableInteger extends PVNodeGetVariableBase<number> {\r\n    constructor () {\r\n        super(PoseGraphType.INTEGER);\r\n    }\r\n\r\n    public selfEvaluateDefaultOutput (): number {\r\n        return this._varInstance?.value as number; // TODO\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableBoolean`)\r\n@poseGraphNodeHide()\r\n@poseGraphNodeAppearance({\r\n    inline: true,\r\n    themeColor: '#D07979',\r\n})\r\nexport class PVNodeGetVariableBoolean extends PVNodeGetVariableBase<boolean> {\r\n    constructor () {\r\n        super(PoseGraphType.BOOLEAN);\r\n    }\r\n\r\n    public selfEvaluateDefaultOutput (): boolean {\r\n        return this._varInstance?.value as boolean; // TODO\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableVec3`)\r\n@poseGraphNodeHide()\r\n@poseGraphNodeAppearance({\r\n    inline: true,\r\n    themeColor: '#D97721',\r\n})\r\nexport class PVNodeGetVariableVec3 extends PVNodeGetVariableBase<Readonly<Vec3>> {\r\n    constructor () {\r\n        super(PoseGraphType.VEC3);\r\n    }\r\n\r\n    public selfEvaluateDefaultOutput (): Readonly<Vec3> {\r\n        return this._varInstance?.value as unknown as Readonly<Vec3>; // TODO\r\n    }\r\n}\r\n\r\n@ccclass(`${CLASS_NAME_PREFIX_ANIM}PVNodeGetVariableQuat`)\r\n@poseGraphNodeHide()\r\n@poseGraphNodeAppearance({\r\n    inline: true,\r\n    themeColor: '#B169C4',\r\n})\r\nexport class PVNodeGetVariableQuat extends PVNodeGetVariableBase<Quat> {\r\n    constructor () {\r\n        super(PoseGraphType.QUAT);\r\n    }\r\n\r\n    public selfEvaluateDefaultOutput (): Readonly<Quat> {\r\n        return this._varInstance?.value as unknown as Quat; // TODO\r\n    }\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { approx, assertIsTrue } from '../../../../core';\r\nimport { MotionSyncInfo } from './motion-sync-info';\r\n\r\nexport class RuntimeMotionSyncManager {\r\n    public register (syncInfo: MotionSyncInfo): RuntimeMotionSyncRecord {\r\n        const {\r\n            group: groupName,\r\n        } = syncInfo;\r\n        let group = this._groups.find((group) => group.name === groupName);\r\n        if (!group) {\r\n            group = new Group(groupName);\r\n            this._groups.push(group);\r\n        }\r\n        return group.addMember();\r\n    }\r\n\r\n    public sync (): void {\r\n        for (const group of this._groups) {\r\n            group.sync();\r\n        }\r\n    }\r\n\r\n    private _groups: Group[] = [];\r\n}\r\n\r\nclass Group {\r\n    constructor (public readonly name: string) {\r\n    }\r\n\r\n    public addMember (): RuntimeMotionSyncRecordImpl {\r\n        const record = new RuntimeMotionSyncRecordImpl();\r\n        this._records.push(record);\r\n        return record;\r\n    }\r\n\r\n    public sync (): void {\r\n        const {\r\n            _records: records,\r\n        } = this;\r\n        const nRecords = records.length;\r\n        assertIsTrue(nRecords > 0);\r\n\r\n        const { _lastLeader: lastLeader } = this;\r\n        this._lastLeader = undefined;\r\n\r\n        // Do nothing if all of records are inactive.\r\n        if (records.every((r) => !r.active)) {\r\n            return;\r\n        }\r\n\r\n        // Sort records so that higher weighted records are in front,\r\n        // inactive records are treated having weight -1.\r\n        records.sort((a, b) => {\r\n            const kA = a.active ? a.weight : -1.0;\r\n            const kB = b.active ? b.weight : -1.0;\r\n            return kB - kA;\r\n        });\r\n\r\n        // Assertion: inactive records are in tail.\r\n        if (DEBUG) {\r\n            const firstInactiveRecord = records.findIndex((r) => !r.active);\r\n            assertIsTrue((firstInactiveRecord < 0 ? [] : records.slice(firstInactiveRecord))\r\n                .every((r) => !r.active));\r\n        }\r\n\r\n        // Here's an optimization:\r\n        // if two or more records have almost same weight. Their order is indeterminate.\r\n        // To avoid this, we prefer the leader during previous sync.\r\n        let leaderIndex = 0;\r\n        const leaderWeight = records[0].weight;\r\n        // If the first record is just the last leader, everyone is happy, nothing to do.\r\n        if (records[leaderIndex] !== lastLeader) {\r\n            for (let iRecord = 0; iRecord < nRecords; ++iRecord) {\r\n                const record = records[iRecord];\r\n                if (!record.active || !approx(record.weight, leaderWeight, 1e-6)) {\r\n                    break;\r\n                }\r\n                if (record === lastLeader) {\r\n                    leaderIndex = iRecord;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Assertion: the first record is active. It becomes the leader.\r\n        assertIsTrue(records[leaderIndex].active);\r\n\r\n        this._lastLeader = records[leaderIndex];\r\n\r\n        // Sync followers to follow the leader.\r\n        const leaderNormalizedTime = records[leaderIndex].normalizedTime;\r\n        for (let iRecord = 0; iRecord < nRecords; ++iRecord) {\r\n            const record = records[iRecord];\r\n            if (!record.active) {\r\n                break;\r\n            }\r\n            record.normalizedTime = leaderNormalizedTime;\r\n            record.reset();\r\n        }\r\n    }\r\n\r\n    private _lastLeader: RuntimeMotionSyncRecordImpl | undefined = undefined;\r\n    private _records: RuntimeMotionSyncRecordImpl[] = [];\r\n}\r\n\r\nclass RuntimeMotionSyncRecordImpl implements RuntimeMotionSyncRecord {\r\n    public notifyRenter (normalizedTime: number): void {\r\n        this.reset();\r\n        this.normalizedTime = normalizedTime;\r\n    }\r\n\r\n    public notifyUpdate (normalizedDeltaTime: number, weight: number): void {\r\n        this.normalizedTime += normalizedDeltaTime;\r\n        // Note: we're allowing update multiple times. The first update becomes \"activate\".\r\n        if (this.active) {\r\n            this.weight += weight;\r\n        } else {\r\n            this.active = true;\r\n            this.weight = weight;\r\n        }\r\n    }\r\n\r\n    public reset (): void {\r\n        this.active = false;\r\n        this.weight = 0.0;\r\n    }\r\n\r\n    public normalizedTime = 0.0;\r\n\r\n    public weight = 0.0;\r\n\r\n    public active = false;\r\n\r\n    public getSyncedEnterTime (): number {\r\n        return this.normalizedTime;\r\n    }\r\n}\r\n\r\nexport interface RuntimeMotionSyncRecord {\r\n    notifyRenter(normalizedTime: number): void;\r\n\r\n    notifyUpdate(deltaTime: number, weight: number): void;\r\n\r\n    getSyncedEnterTime(): number;\r\n}\r\n","import { assertIsTrue } from '../../../core';\r\nimport { applyDeltaPose, blendPoseInto, Pose, TransformFilter } from '../../core/pose';\r\nimport { AnimationGraph, Layer } from '../animation-graph';\r\nimport { AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphSettleContext, AnimationGraphUpdateContext } from '../animation-graph-context';\r\nimport { AnimationMask } from '../animation-mask';\r\nimport { TopLevelStateMachineEvaluation } from '../state-machine/state-machine-eval';\r\nimport { PoseNode } from './pose-node';\r\nimport { RuntimeMotionSyncManager } from './motion-sync/runtime-motion-sync';\r\nimport { PoseStashAllocator, RuntimeStashManager } from './stash/runtime-stash';\r\n\r\nexport class DefaultTopLevelPoseNode extends PoseNode {\r\n    constructor (\r\n        graph: AnimationGraph,\r\n        bindingContext: AnimationGraphBindingContext,\r\n        poseStashAllocator: PoseStashAllocator,\r\n    ) {\r\n        super();\r\n\r\n        const layerEvaluationRecords = graph.layers.map((layer) => {\r\n            const record = new LayerEvaluationRecord(\r\n                layer,\r\n                bindingContext,\r\n                poseStashAllocator,\r\n            );\r\n\r\n            return record;\r\n        });\r\n\r\n        this._layerRecords = layerEvaluationRecords;\r\n    }\r\n\r\n    get layerCount (): number {\r\n        return this._layerRecords.length;\r\n    }\r\n\r\n    public reenter (): void {\r\n        // Default top level pose is meant to be non-reenter-able.\r\n        // Do nothing here.\r\n    }\r\n\r\n    public bind (_context: AnimationGraphBindingContext): void {\r\n        // `LayerEvaluationRecord` should have already been bound.\r\n        // Do nothing here.\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        const { _layerRecords: layerRecords } = this;\r\n        const nLayers = layerRecords.length;\r\n        for (let iLayer = 0; iLayer < nLayers; ++iLayer) {\r\n            layerRecords[iLayer].settle(context);\r\n        }\r\n    }\r\n\r\n    public getLayerWeight (layerIndex: number): number {\r\n        assertIsTrue(layerIndex >= 0 && layerIndex < this._layerRecords.length, `Invalid layer index`);\r\n        return this._layerRecords[layerIndex].weight;\r\n    }\r\n\r\n    public setLayerWeight (layerIndex: number, weight: number): void {\r\n        assertIsTrue(layerIndex >= 0 && layerIndex < this._layerRecords.length, `Invalid layer index`);\r\n        this._layerRecords[layerIndex].weight = weight;\r\n    }\r\n\r\n    public getLayerTopLevelStateMachineEvaluation (layerIndex: number): TopLevelStateMachineEvaluation {\r\n        return this._layerRecords[layerIndex].stateMachineEvaluation;\r\n    }\r\n\r\n    public overrideClips (context: AnimationGraphBindingContext): void {\r\n        const { _layerRecords: layerRecords } = this;\r\n        const nLayers = layerRecords.length;\r\n        for (let iLayer = 0; iLayer < nLayers; ++iLayer) {\r\n            const layerRecord = layerRecords[iLayer];\r\n            context._pushAdditiveFlag(layerRecord.additive);\r\n            layerRecord.stateMachineEvaluation.overrideClips(context);\r\n            context._popAdditiveFlag();\r\n        }\r\n    }\r\n\r\n    protected doUpdate (context: AnimationGraphUpdateContext): void {\r\n        const { _layerRecords: layerRecords } = this;\r\n        const nLayers = layerRecords.length;\r\n        for (let iLayer = 0; iLayer < nLayers; ++iLayer) {\r\n            layerRecords[iLayer].update(context);\r\n        }\r\n    }\r\n\r\n    protected doEvaluate (context: AnimationGraphEvaluationContext): Pose {\r\n        const finalPose = context.pushDefaultedPose();\r\n        const { _layerRecords: layerRecords } = this;\r\n        const nLayers = layerRecords.length;\r\n        for (let iLayer = 0; iLayer < nLayers; ++iLayer) {\r\n            const layer = layerRecords[iLayer];\r\n            const layerPose = layer.stateMachineEvaluation.evaluate(context);\r\n            const layerActualWeight = layer.weight * layer.stateMachineEvaluation.passthroughWeight;\r\n            const { transformFilter } = layer;\r\n            if (layer.additive) {\r\n                applyDeltaPose(finalPose, layerPose, layerActualWeight, transformFilter);\r\n            } else {\r\n                blendPoseInto(finalPose, layerPose, layerActualWeight, transformFilter);\r\n            }\r\n            context.popPose();\r\n\r\n            layer.postEvaluate();\r\n        }\r\n        return finalPose;\r\n    }\r\n\r\n    private _layerRecords: LayerEvaluationRecord[];\r\n}\r\n\r\nclass LayerEvaluationRecord {\r\n    constructor (\r\n        layer: Layer,\r\n        bindingContext: AnimationGraphBindingContext,\r\n        poseStashAllocator: PoseStashAllocator,\r\n    ) {\r\n        const stashManager = new RuntimeStashManager(poseStashAllocator);\r\n        for (const [stashId, _] of layer.stashes()) {\r\n            stashManager.addStash(stashId);\r\n        }\r\n        this._stashManager = stashManager;\r\n\r\n        const motionSyncManager = new RuntimeMotionSyncManager();\r\n        this._motionSyncManager = motionSyncManager;\r\n\r\n        bindingContext._setLayerWideContextProperties(\r\n            stashManager,\r\n            motionSyncManager,\r\n        );\r\n\r\n        for (const [stashId, stash] of layer.stashes()) {\r\n            stashManager.setStash(stashId, stash, bindingContext);\r\n        }\r\n\r\n        this.weight = layer.weight;\r\n        const additive = this.additive = layer.additive;\r\n        this._mask = layer.mask ?? undefined;\r\n        bindingContext._pushAdditiveFlag(additive);\r\n        this._topLevelStateMachineEval = new TopLevelStateMachineEvaluation(\r\n            layer.stateMachine,\r\n            layer.name,\r\n            bindingContext,\r\n        );\r\n        bindingContext._popAdditiveFlag();\r\n\r\n        bindingContext._unsetLayerWideContextProperties();\r\n    }\r\n\r\n    get stateMachineEvaluation (): TopLevelStateMachineEvaluation {\r\n        return this._topLevelStateMachineEval;\r\n    }\r\n\r\n    public settle (context: AnimationGraphSettleContext): void {\r\n        if (this._mask) {\r\n            this.transformFilter = context.createTransformFilter(this._mask);\r\n        }\r\n\r\n        // Settle layer stashes.\r\n        this._stashManager.settle(context);\r\n\r\n        // Settle the top level state machine.\r\n        this._topLevelStateMachineEval.settle(context);\r\n    }\r\n\r\n    public update (context: AnimationGraphUpdateContext): void {\r\n        this.stateMachineEvaluation.update(context);\r\n\r\n        this._motionSyncManager.sync();\r\n    }\r\n\r\n    public postEvaluate (): void {\r\n        // Reset stash resources.\r\n        this._stashManager.reset();\r\n    }\r\n\r\n    public additive = false;\r\n\r\n    public weight = 0.0;\r\n\r\n    private _topLevelStateMachineEval: TopLevelStateMachineEvaluation;\r\n\r\n    private _stashManager: RuntimeStashManager;\r\n\r\n    private _motionSyncManager: RuntimeMotionSyncManager;\r\n\r\n    private _mask: AnimationMask | undefined = undefined;\r\n\r\n    public transformFilter: TransformFilter | undefined = undefined;\r\n}\r\n\r\nexport type { LayerEvaluationRecord };\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG } from 'internal:constants';\r\nimport { AnimationGraph } from './animation-graph';\r\nimport type { Node } from '../../scene-graph/node';\r\nimport { Value, VarInstance, TriggerResetMode, createInstanceTag, VarInstanceTrigger } from './variable';\r\nimport { VariableType } from './parametric';\r\nimport { assertIsTrue } from '../../core';\r\nimport { MAX_ANIMATION_LAYER } from '../../3d/skeletal-animation/limits';\r\nimport type { AnimationController } from './animation-controller';\r\nimport {\r\n    AnimationGraphBindingContext, AnimationGraphEvaluationContext,\r\n    AnimationGraphPoseLayoutMaintainer, defaultTransformsTag, LayoutChangeFlag, AuxiliaryCurveRegistry,\r\n    AnimationGraphUpdateContext, AnimationGraphUpdateContextGenerator,\r\n    AnimationGraphSettleContext,\r\n    DeferredPoseStashAllocator,\r\n} from './animation-graph-context';\r\nimport { PoseTransformSpaceRequirement } from './pose-graph/pose-node';\r\nimport { DefaultTopLevelPoseNode } from './pose-graph/default-top-level-pose-node';\r\nimport {\r\n    ClipStatus,\r\n    MotionStateStatus,\r\n    TransitionStatus,\r\n} from './state-machine/state-machine-eval';\r\nimport { ReadonlyClipOverrideMap } from './clip-overriding';\r\n\r\nexport class AnimationGraphEval {\r\n    private _currentTransitionCache: TransitionStatus = {\r\n        duration: 0.0,\r\n        time: 0.0,\r\n    };\r\n\r\n    constructor (\r\n        graph: AnimationGraph,\r\n        root: Node,\r\n        controller: AnimationController,\r\n        clipOverrides: ReadonlyClipOverrideMap | null,\r\n    ) {\r\n        if (DEBUG) {\r\n            if (graph.layers.length >= MAX_ANIMATION_LAYER) {\r\n                throw new Error(\r\n                    `Max layer count exceeds. `\r\n                    + `Allowed: ${MAX_ANIMATION_LAYER}, actual: ${graph.layers.length}`,\r\n                );\r\n            }\r\n        }\r\n\r\n        for (const [name, variable] of graph.variables) {\r\n            const varInstance = variable[createInstanceTag]();\r\n            this._varInstances[name] = varInstance;\r\n            if (varInstance instanceof VarInstanceTrigger) {\r\n                if (varInstance.resetMode === TriggerResetMode.NEXT_FRAME_OR_AFTER_CONSUMED) {\r\n                    this._hasAutoTrigger = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        const poseLayoutMaintainer = new AnimationGraphPoseLayoutMaintainer(root, this._auxiliaryCurveRegistry);\r\n        this._poseLayoutMaintainer = poseLayoutMaintainer;\r\n\r\n        const bindingContext = new AnimationGraphBindingContext(root, poseLayoutMaintainer, this._varInstances, controller);\r\n        bindingContext._setClipOverrides(clipOverrides ?? undefined);\r\n        this._bindingContext = bindingContext;\r\n\r\n        const settleContext = new AnimationGraphSettleContext(poseLayoutMaintainer);\r\n        this._settleContext = settleContext;\r\n\r\n        poseLayoutMaintainer.startBind();\r\n\r\n        const poseStashAllocator = new DeferredPoseStashAllocator();\r\n        this._poseStashAllocator = poseStashAllocator;\r\n\r\n        this._rootPoseNode = new DefaultTopLevelPoseNode(\r\n            graph,\r\n            bindingContext,\r\n            poseStashAllocator,\r\n        );\r\n\r\n        this._root = root;\r\n        this._initializeContexts();\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._evaluationContext.destroy();\r\n    }\r\n\r\n    public _destroyAfterException_debugging (): void {\r\n        const stackSize = this._evaluationContext._stackSize_debugging;\r\n        if (stackSize !== 0) { // Should only caused by exception.\r\n            for (let i = 0; i < stackSize; ++i) {\r\n                this._evaluationContext.popPose();\r\n            }\r\n        }\r\n\r\n        this._evaluationContext.destroy();\r\n    }\r\n\r\n    public get layerCount (): number {\r\n        return this._rootPoseNode.layerCount;\r\n    }\r\n\r\n    public update (deltaTime: number): void {\r\n        const {\r\n            _evaluationContext: evaluationContext,\r\n            _poseLayoutMaintainer: poseLayoutMaintainer,\r\n            _rootUpdateContextGenerator: rootUpdateContextGenerator,\r\n            _rootPoseNode: rootPoseNode,\r\n        } = this;\r\n\r\n        const updateContext = rootUpdateContextGenerator.generate(\r\n            deltaTime,\r\n            1.0,\r\n        );\r\n\r\n        rootPoseNode.update(updateContext);\r\n\r\n        const finalPose = rootPoseNode.evaluate(evaluationContext, PoseTransformSpaceRequirement.LOCAL);\r\n\r\n        if (this._hasAutoTrigger) {\r\n            const { _varInstances: varInstances } = this;\r\n            for (const varName in varInstances) {\r\n                const varInstance = varInstances[varName];\r\n                if (varInstance instanceof VarInstanceTrigger\r\n                    && varInstance.resetMode === TriggerResetMode.NEXT_FRAME_OR_AFTER_CONSUMED) {\r\n                    varInstance.value = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        poseLayoutMaintainer.apply(finalPose);\r\n        evaluationContext.popPose();\r\n\r\n        if (DEBUG) {\r\n            assertIsTrue(evaluationContext.allocatedPoseCount === 0, `Pose leaked.`);\r\n            assertIsTrue(this._poseStashAllocator.allocatedPoseCount === 0, `Pose leaked.`);\r\n        }\r\n    }\r\n\r\n    public getVariables (): Iterable<Readonly<[string, Readonly<{ type: VariableType }>]>> {\r\n        return Object.entries(this._varInstances);\r\n    }\r\n\r\n    public getCurrentStateStatus (layer: number): Readonly<MotionStateStatus> | null {\r\n        return this._rootPoseNode.getLayerTopLevelStateMachineEvaluation(layer).getCurrentStateStatus();\r\n    }\r\n\r\n    public getCurrentClipStatuses (layer: number): Iterable<Readonly<ClipStatus>> {\r\n        return this._rootPoseNode.getLayerTopLevelStateMachineEvaluation(layer).getCurrentClipStatuses();\r\n    }\r\n\r\n    public getCurrentTransition (layer: number): Readonly<TransitionStatus> | null {\r\n        const {\r\n            _currentTransitionCache: currentTransition,\r\n        } = this;\r\n        const isInTransition = this._rootPoseNode.getLayerTopLevelStateMachineEvaluation(layer).getCurrentTransition(currentTransition);\r\n        return isInTransition ? currentTransition : null;\r\n    }\r\n\r\n    public getNextStateStatus (layer: number): Readonly<MotionStateStatus> | null {\r\n        return this._rootPoseNode.getLayerTopLevelStateMachineEvaluation(layer).getNextStateStatus();\r\n    }\r\n\r\n    public getNextClipStatuses (layer: number): Iterable<Readonly<ClipStatus>> {\r\n        return this._rootPoseNode.getLayerTopLevelStateMachineEvaluation(layer).getNextClipStatuses();\r\n    }\r\n\r\n    public getValue (name: string): Value | undefined {\r\n        const varInstance = this._varInstances[name];\r\n        if (!varInstance) {\r\n            return undefined;\r\n        } else {\r\n            return varInstance.value;\r\n        }\r\n    }\r\n\r\n    public setValue (name: string, value: Value): void {\r\n        const varInstance = this._varInstances[name];\r\n        if (!varInstance) {\r\n            return;\r\n        }\r\n        varInstance.value = value;\r\n    }\r\n\r\n    public getLayerWeight (layerIndex: number): number {\r\n        return this._rootPoseNode.getLayerWeight(layerIndex);\r\n    }\r\n\r\n    public setLayerWeight (layerIndex: number, weight: number): void {\r\n        this._rootPoseNode.setLayerWeight(layerIndex, weight);\r\n    }\r\n\r\n    public overrideClips (overrides: ReadonlyClipOverrideMap): void {\r\n        const {\r\n            _poseLayoutMaintainer: poseLayoutMaintainer,\r\n        } = this;\r\n\r\n        poseLayoutMaintainer.startBind();\r\n\r\n        this._bindingContext._setClipOverrides(overrides);\r\n        this._rootPoseNode.overrideClips(this._bindingContext);\r\n\r\n        this._updateAfterPossiblePoseLayoutChange();\r\n    }\r\n\r\n    public getAuxiliaryCurveValue (curveName: string): number {\r\n        return this._auxiliaryCurveRegistry.get(curveName);\r\n    }\r\n\r\n    private _rootPoseNode: DefaultTopLevelPoseNode;\r\n    private _varInstances: Record<string, VarInstance> = {};\r\n    private _hasAutoTrigger = false;\r\n    private _auxiliaryCurveRegistry = new AuxiliaryCurveRegistry();\r\n    private _poseLayoutMaintainer: AnimationGraphPoseLayoutMaintainer;\r\n    private _bindingContext: AnimationGraphBindingContext;\r\n    private _settleContext: AnimationGraphSettleContext;\r\n    /**\r\n     * Preserved here for clip overriding.\r\n     */\r\n    private declare _root: Node;\r\n    private declare _evaluationContext: AnimationGraphEvaluationContext;\r\n    private declare _poseStashAllocator: DeferredPoseStashAllocator;\r\n    private _rootUpdateContextGenerator = new AnimationGraphUpdateContextGenerator();\r\n\r\n    private _initializeContexts (): void {\r\n        const {\r\n            _poseLayoutMaintainer: poseLayoutMaintainer,\r\n        } = this;\r\n\r\n        // Ignore in initialization.\r\n        // eslint-disable-next-line no-void\r\n        void poseLayoutMaintainer.endBind();\r\n\r\n        this._createOrUpdateTransformFilters();\r\n\r\n        const evaluationContext = poseLayoutMaintainer.createEvaluationContext();\r\n        this._evaluationContext = evaluationContext;\r\n\r\n        // Capture the default transforms.\r\n        poseLayoutMaintainer.fetchDefaultTransforms(evaluationContext[defaultTransformsTag]);\r\n\r\n        poseLayoutMaintainer.resetPoseStashAllocator(this._poseStashAllocator);\r\n    }\r\n\r\n    private _updateAfterPossiblePoseLayoutChange (): void {\r\n        const {\r\n            _poseLayoutMaintainer: poseLayoutMaintainer,\r\n        } = this;\r\n\r\n        const layoutChangeFlags = poseLayoutMaintainer.endBind();\r\n\r\n        // Nothing changed, this should be the commonest case in real world.\r\n        if (layoutChangeFlags === 0) {\r\n            return;\r\n        }\r\n\r\n        // No matter count or order changed, we should update the transform filters.\r\n        if ((layoutChangeFlags & LayoutChangeFlag.TRANSFORM_COUNT)\r\n            || (layoutChangeFlags & LayoutChangeFlag.TRANSFORM_ORDER)) {\r\n            this._createOrUpdateTransformFilters();\r\n        }\r\n\r\n        // Either transform count or auxiliary curve count changed, we should recreate the eval context.\r\n        let evaluationContextRecreated = false;\r\n        if ((layoutChangeFlags & LayoutChangeFlag.TRANSFORM_COUNT)\r\n        || (layoutChangeFlags & LayoutChangeFlag.AUXILIARY_CURVE_COUNT)) {\r\n            const evaluationContext = poseLayoutMaintainer.createEvaluationContext();\r\n            this._evaluationContext.destroy();\r\n            this._evaluationContext = evaluationContext;\r\n            evaluationContextRecreated = true;\r\n            poseLayoutMaintainer.resetPoseStashAllocator(this._poseStashAllocator);\r\n        }\r\n\r\n        // If the eval context was recreated or the layout has changed, we should update the default transforms.\r\n        if (evaluationContextRecreated\r\n            || (layoutChangeFlags & LayoutChangeFlag.TRANSFORM_COUNT)\r\n            || (layoutChangeFlags & LayoutChangeFlag.TRANSFORM_ORDER)) {\r\n            poseLayoutMaintainer.fetchDefaultTransforms(this._evaluationContext[defaultTransformsTag]);\r\n        }\r\n    }\r\n\r\n    private _createOrUpdateTransformFilters (): void {\r\n        this._rootPoseNode.settle(this._settleContext);\r\n    }\r\n}\r\n\r\nexport type { VarInstance } from './variable';\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n\r\nexport const MAX_ANIMATION_LAYER = 32;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG } from 'internal:constants';\r\nimport { Component } from '../../scene-graph/component';\r\nimport { AnimationGraph } from './animation-graph';\r\nimport type { AnimationGraphRunTime } from './animation-graph';\r\nimport { EventTarget, _decorator, assertIsNonNullable, assertIsTrue, warn } from '../../core';\r\nimport { AnimationGraphEval } from './graph-eval';\r\nimport type { MotionStateStatus, TransitionStatus, ClipStatus } from './state-machine/state-machine-eval';\r\nimport { PrimitiveValue, Value, VariableType } from './variable';\r\nimport { AnimationGraphVariant, AnimationGraphVariantRunTime } from './animation-graph-variant';\r\nimport { AnimationGraphLike } from './animation-graph-like';\r\nimport type { ReadonlyClipOverrideMap } from './clip-overriding';\r\n\r\nconst { ccclass, menu, help, type, serializable, editable, formerlySerializedAs } = _decorator;\r\n\r\nexport type {\r\n    MotionStateStatus,\r\n    ClipStatus,\r\n    TransitionStatus,\r\n    ReadonlyClipOverrideMap,\r\n};\r\n\r\n/**\r\n * @en\r\n * The animation controller component applies an animation graph\r\n * to the node which it's attached to.\r\n * When the controller starts, the animation graph is instantiated.\r\n * Then you may set variables or query the running statuses of the animation graph instance.\r\n * @zh\r\n * 将动画图应用到动画控制器组件所挂载的节点上。\r\n * 当动画控制器开始运行时，动画图会被实例化。然后便可以设置动画图实例中的变量或者查询动画图的运行状况。\r\n */\r\n@ccclass('cc.animation.AnimationController')\r\n@menu('Animation/Animation Controller')\r\n@help('i18n:cc.animation.AnimationController')\r\nexport class AnimationController extends Component {\r\n    /**\r\n     * @zh\r\n     * 动画控制器所关联的动画图。\r\n     * @en\r\n     * The animation graph associated with the animation controller.\r\n     */\r\n    @type(AnimationGraphLike)\r\n    @editable\r\n    public get graph (): AnimationGraphRunTime | AnimationGraphVariantRunTime | null {\r\n        return this._graph;\r\n    }\r\n\r\n    public set graph (value) {\r\n        this._graph = value;\r\n    }\r\n\r\n    @serializable\r\n    @formerlySerializedAs('graph')\r\n    private _graph: AnimationGraphRunTime | AnimationGraphVariantRunTime | null = null;\r\n\r\n    private _graphEval: AnimationGraphEval | null = null;\r\n\r\n    /**\r\n     * @zh 获取动画图的层级数量。如果控制器没有指定动画图，则返回 0。\r\n     * @en Gets the count of layers in the animation graph.\r\n     * If no animation graph is specified, 0 is returned.\r\n     */\r\n    public get layerCount (): number {\r\n        return this._graphEval?.layerCount ?? 0;\r\n    }\r\n\r\n    public __preload (): void {\r\n        const { graph } = this;\r\n        if (graph) {\r\n            let originalGraph: AnimationGraph;\r\n            let clipOverrides: ReadonlyClipOverrideMap | null = null;\r\n            if (graph instanceof AnimationGraphVariant) {\r\n                if (!graph.original) {\r\n                    return;\r\n                }\r\n                originalGraph = graph.original;\r\n                clipOverrides = graph.clipOverrides;\r\n            } else {\r\n                assertIsTrue(graph instanceof AnimationGraph);\r\n                originalGraph = graph;\r\n            }\r\n            const graphEval = new AnimationGraphEval(\r\n                originalGraph,\r\n                this.node,\r\n                this,\r\n                clipOverrides,\r\n            );\r\n            this._graphEval = graphEval;\r\n        }\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        this._graphEval?.destroy();\r\n    }\r\n\r\n    public update (deltaTime: number): void {\r\n        this._graphEval?.update(deltaTime);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图中的所有变量。\r\n     * @en Gets all the variables in the animation graph.\r\n     * @returns The iterator to the variables.\r\n     * @example\r\n     * ```ts\r\n     * for (const [name, { type }] of animationController.getVariables()) {\r\n     *   log(`Name: ${name}, Type: ${type}`);\r\n     * }\r\n     * ```\r\n     */\r\n    public getVariables (): Iterable<readonly [string, Readonly<{\r\n        type: VariableType;\r\n    }>]> {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getVariables();\r\n    }\r\n\r\n    /**\r\n     * @zh 设置动画图实例中变量的值。\r\n     * @en Sets the value of the variable in the animation graph instance.\r\n     * @param name @en Variable's name. @zh 变量的名称。\r\n     * @param value @en Variable's value. @zh 变量的值。\r\n     * @example\r\n     * ```ts\r\n     * animationController.setValue('speed', 3.14);\r\n     * animationController.setValue('crouching', true);\r\n     * animationController.setValue('attack', true);\r\n     * ```\r\n     */\r\n    public setValue (name: string, value: PrimitiveValue): void {\r\n        return this.setValue_experimental(name, value);\r\n    }\r\n\r\n    /**\r\n     * @zh 设置动画图实例中变量的值。\r\n     * @en Sets the value of the variable in the animation graph instance.\r\n     * @param name @en Variable's name. @zh 变量的名称。\r\n     * @param value @en Variable's value. @zh 变量的值。\r\n     * @example\r\n     * ```ts\r\n     * animationController.setValue('speed', 3.14);\r\n     * animationController.setValue('crouching', true);\r\n     * animationController.setValue('attack', true);\r\n     * ```\r\n     * @experimental\r\n     */\r\n    public setValue_experimental (name: string, value: Value): void {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        graphEval.setValue(name, value);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中变量的值。\r\n     * @en Gets the value of the variable in the animation graph instance.\r\n     * @param name @en Variable's name. @zh 变量的名称。\r\n     * @returns @en Variable's value. @zh 变量的值。\r\n     */\r\n    public getValue (name: string): PrimitiveValue | undefined {\r\n        const value = this.getValue_experimental(name);\r\n        if (typeof value === 'object') {\r\n            if (DEBUG) {\r\n                warn(`Obtaining variable \"${name}\" is not of primitive type, `\r\n                    + `which is currently supported experimentally and should be explicitly obtained through this.getValue_experimental()`);\r\n            }\r\n            return undefined;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中变量的值。\r\n     * @en Gets the value of the variable in the animation graph instance.\r\n     * @param name @en Variable's name. @zh 变量的名称。\r\n     * @returns @en Variable's value. @zh 变量的值。\r\n     */\r\n    public getValue_experimental (name: string): Value | undefined {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getValue(name);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中当前状态的运行状况。\r\n     * @en Gets the running status of the current state in the animation graph instance.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     * @returns @en The running status of the current state. `null` is returned if current state is not a motion state.\r\n     *          @zh 当前的状态运作状态对象。如果当前的状态不是动作状态，则返回 `null`。\r\n     */\r\n    public getCurrentStateStatus (layer: number): Readonly<MotionStateStatus> | null {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getCurrentStateStatus(layer);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中当前状态上包含的所有动画剪辑的运行状况。\r\n     * @en Gets the running status of all the animation clips added on the current state in the animation graph instance.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     * @returns @en Iterable to the animation clip statuses on current state.\r\n     *              An empty iterable is returned if current state is not a motion state.\r\n     *          @zh 到动画剪辑运作状态的迭代器。若当前状态不是动画状态，则返回一个空的迭代器。\r\n     */\r\n    public getCurrentClipStatuses (layer: number): Iterable<Readonly<ClipStatus>> {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getCurrentClipStatuses(layer);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中当前正在进行的过渡的运行状况。\r\n     * @en Gets the running status of the transition currently in progress in the animation graph instance.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     * @returns @en Current transition status. `null` is returned in case of no transition.\r\n     *          @zh 当前正在进行的过渡，若没有进行任何过渡，则返回 `null`。\r\n     */\r\n    public getCurrentTransition (layer: number): Readonly<TransitionStatus> | null {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getCurrentTransition(layer);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中下一个状态的运行状况。\r\n     * @en Gets the running status of the next state in the animation graph instance.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     * @returns @en The running status of the next state. `null` is returned in case of no transition or if next state is not a motion state.\r\n     *          @zh 下一状态运作状态对象，若未在进行过渡或下一状态不是动画状态，则返回 `null`。\r\n     */\r\n    public getNextStateStatus (layer: number): Readonly<MotionStateStatus> | null {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getNextStateStatus(layer);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取动画图实例中下一个状态上添加的所有动画剪辑的运行状况。\r\n     * @en Gets the running status of all the animation clips added on the next state in the animation graph instance.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     * @returns @en Iterable to the animation clip statuses on next state.\r\n     *              An empty iterable is returned in case of no transition or next state is not a motion state.\r\n     *          @zh 到下一状态上包含的动画剪辑运作状态的迭代器，若未在进行过渡或下一状态不是动画状态，则返回一个空的迭代器。\r\n     */\r\n    public getNextClipStatuses (layer: number): Iterable<Readonly<ClipStatus>> {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getNextClipStatuses(layer);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取层级权重。\r\n     * @en Gets the weight of specified layer.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     */\r\n    public getLayerWeight (layer: number): number {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.getLayerWeight(layer);\r\n    }\r\n\r\n    /**\r\n     * @zh 设置层级权重。\r\n     * @en Sets the weight of specified layer.\r\n     * @param layer @en Index of the layer. @zh 层级索引。\r\n     */\r\n    public setLayerWeight (layer: number, weight: number): void {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        return graphEval.setLayerWeight(layer, weight);\r\n    }\r\n\r\n    /**\r\n     * @zh 覆盖动画图实例中的动画剪辑。\r\n     * 对于每一对源剪辑、目标剪辑，\r\n     * 动画图（实例）中的出现的所有源剪辑都会被替换为目标剪辑，就好像动画图中一开始就使用的是目标剪辑。\r\n     * 不过，动画图当前的运转状态会依然保持不变，例如：\r\n     *\r\n     * - 若动作状态涉及的动画剪辑被替换，动作状态的播放进度百分比依然保持不变。\r\n     *\r\n     * - 若过渡的周期是相对的，即使在某一刻动画过渡的源头被替换，那么过渡的进度百分比也依然保持不变。\r\n     *\r\n     * 不管进行多少次覆盖，源剪辑应该一直指定为原始动画图中的动画剪辑。例如：\r\n     *\r\n     * ```ts\r\n     * // `originalClip` 是原始动画图中的剪辑对象，第一次希望将原剪辑覆盖为 `newClip1`，第二次希望将原剪辑覆盖为 `newClip2`\r\n     * animationController.overrideClips_experimental(new Map([ [originalClip, newClip1] ])); // 第一次覆盖\r\n     * animationController.overrideClips_experimental(new Map([ [newClip1, newClip2] ])); // 错误：第二次覆盖\r\n     * animationController.overrideClips_experimental(new Map([ [originalClip, newClip2] ])); // 正确：第二次覆盖\r\n     * ```\r\n     * @en Overrides the animation clips in animation graph instance.\r\n     * TODO\r\n     * @experimental\r\n     */\r\n    public overrideClips_experimental (overrides: ReadonlyClipOverrideMap): void {\r\n        const { _graphEval: graphEval } = this;\r\n        assertIsNonNullable(graphEval);\r\n        graphEval.overrideClips(overrides);\r\n    }\r\n\r\n    /**\r\n     * @zh 获取指定辅助曲线的当前值。\r\n     * @en Gets the current value of specified auxiliary curve.\r\n     * @param curveName @en Name of the auxiliary curve. @zh 辅助曲线的名字。\r\n     * @returns @zh 指定辅助曲线的当前值，如果指定辅助曲线不存在或动画图为空则返回 0。\r\n     * @en The current value of specified auxiliary curve,\r\n     * or 0 if specified adjoint curve does not exist or if the animation graph is null.\r\n     * @experimental\r\n     */\r\n    public getAuxiliaryCurveValue_experimental (curveName: string): number {\r\n        const { _graphEval: graphEval } = this;\r\n        if (!graphEval) {\r\n            return 0.0;\r\n        }\r\n        return graphEval.getAuxiliaryCurveValue(curveName);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, Quat } from '../../core';\r\nimport { Node } from '../../scene-graph';\r\nimport { RuntimeBinding } from '../../animation/tracks/track';\r\n\r\nexport abstract class BlendStateBuffer<\r\n    TNodeBlendState extends NodeBlendState<PropertyBlendState<Vec3>, PropertyBlendState<Quat>> =\r\n    NodeBlendState<PropertyBlendState<Vec3>, PropertyBlendState<Quat>>\r\n> {\r\n    protected _nodeBlendStates: Map<Node, TNodeBlendState> = new Map();\r\n\r\n    public createWriter<P extends BlendingPropertyName> (\r\n        node: Node,\r\n        property: P,\r\n        host: BlendStateWriterHost,\r\n        constants: boolean,\r\n    ): BlendStateWriter<P> {\r\n        const propertyBlendState = this.ref(node, property);\r\n        return new BlendStateWriterInternal<P>(\r\n            node,\r\n            property,\r\n            propertyBlendState,\r\n            host,\r\n            constants,\r\n        );\r\n    }\r\n\r\n    public destroyWriter<P extends BlendingPropertyName> (writer: BlendStateWriter<P>): void {\r\n        const internal = writer as BlendStateWriterInternal<P>;\r\n        this.deRef(internal.node, internal.property);\r\n    }\r\n\r\n    public ref<P extends BlendingPropertyName> (node: Node, property: P): PropertyBlendStateTypeMap<PropertyBlendState<Vec3>, PropertyBlendState<Quat>>[P]\r\n    {\r\n        let nodeBlendState = this._nodeBlendStates.get(node);\r\n        if (!nodeBlendState) {\r\n            nodeBlendState = this.createNodeBlendState();\r\n            this._nodeBlendStates.set(node, nodeBlendState);\r\n        }\r\n        const propertyBlendState = nodeBlendState.refProperty(node, property);\r\n        return propertyBlendState as PropertyBlendStateTypeMap<PropertyBlendState<Vec3>, PropertyBlendState<Quat>>[P];\r\n    }\r\n\r\n    public deRef (node: Node, property: BlendingPropertyName): void {\r\n        const nodeBlendState = this._nodeBlendStates.get(node);\r\n        if (!nodeBlendState) {\r\n            return;\r\n        }\r\n        nodeBlendState.deRefProperty(property);\r\n        if (nodeBlendState.empty) {\r\n            this._nodeBlendStates.delete(node);\r\n        }\r\n    }\r\n\r\n    public apply (): void {\r\n        this._nodeBlendStates.forEach((nodeBlendState, node): void => {\r\n            nodeBlendState.apply(node);\r\n        });\r\n    }\r\n\r\n    protected abstract createNodeBlendState (): TNodeBlendState;\r\n}\r\n\r\nexport interface BlendStateWriterHost {\r\n    readonly weight: number;\r\n}\r\n\r\nexport type BlendingPropertyName = 'position' | 'scale' | 'rotation' | 'eulerAngles';\r\n\r\ninterface PropertyBlendStateTypeMap<TVec3PropertyBlendState, TQuatPropertyBlendState> {\r\n    'rotation': TQuatPropertyBlendState;\r\n    'position': TVec3PropertyBlendState;\r\n    'scale': TVec3PropertyBlendState;\r\n    'eulerAngles': TVec3PropertyBlendState;\r\n}\r\n\r\nclass BlendStateWriterInternal<P extends BlendingPropertyName> implements RuntimeBinding {\r\n    constructor (\r\n        protected _node: Node,\r\n        protected _property: P,\r\n        protected _propertyBlendState: PropertyBlendStateTypeMap<PropertyBlendState<Vec3>, PropertyBlendState<Quat>>[P],\r\n        protected _host: BlendStateWriterHost,\r\n        protected _constants: boolean,\r\n    ) {\r\n    }\r\n\r\n    get node (): Node {\r\n        return this._node;\r\n    }\r\n\r\n    get property (): P {\r\n        return this._property;\r\n    }\r\n\r\n    public getValue (): Node[P] {\r\n        return this._node[this._property];\r\n    }\r\n\r\n    public setValue (value: PropertyBlendStateTypeMap<PropertyBlendState<Vec3>, PropertyBlendState<Quat>>[P]['result']): void {\r\n        const {\r\n            _propertyBlendState: propertyBlendState,\r\n            _host: host,\r\n        } = this;\r\n        const weight = host.weight;\r\n        // TODO: please fix type here @Leslie Leigh\r\n        // Tracking issue: https://github.com/cocos/cocos-engine/issues/14640\r\n        propertyBlendState.blend(value as Readonly<Vec3> & Readonly<Quat>, weight);\r\n    }\r\n}\r\n\r\nexport type BlendStateWriter<P extends BlendingPropertyName> = Omit<BlendStateWriterInternal<P>, 'node' | 'property'>;\r\n\r\nenum TransformApplyFlag {\r\n    POSITION = 1,\r\n    ROTATION = 2,\r\n    SCALE = 4,\r\n    EULER_ANGLES = 8,\r\n}\r\n\r\nconst TRANSFORM_APPLY_FLAGS_ALL = TransformApplyFlag.POSITION\r\n    | TransformApplyFlag.ROTATION\r\n    | TransformApplyFlag.SCALE\r\n    | TransformApplyFlag.EULER_ANGLES;\r\n\r\ninterface PropertyBlendState<TValue> {\r\n    /**\r\n     * How many writer reference this property.\r\n     */\r\n    refCount: number;\r\n\r\n    readonly result: Readonly<TValue>;\r\n\r\n    blend(value: Readonly<TValue>, weight: number): void;\r\n}\r\n\r\nclass LegacyVec3PropertyBlendState implements PropertyBlendState<Vec3> {\r\n    public refCount = 0;\r\n\r\n    public accumulatedWeight = 0.0;\r\n\r\n    public result = new Vec3();\r\n\r\n    public blend (value: Readonly<Vec3>, weight: number): void {\r\n        this.accumulatedWeight = mixAveragedVec3(\r\n            this.result,\r\n            this.result,\r\n            this.accumulatedWeight,\r\n            value,\r\n            weight,\r\n        );\r\n    }\r\n\r\n    public reset (): void {\r\n        this.accumulatedWeight = 0.0;\r\n        Vec3.zero(this.result);\r\n    }\r\n}\r\n\r\nclass LegacyQuatPropertyBlendState implements PropertyBlendState<Quat> {\r\n    public refCount = 0;\r\n\r\n    public accumulatedWeight = 0.0;\r\n\r\n    public result = new Quat();\r\n\r\n    public blend (value: Readonly<Quat>, weight: number): void {\r\n        this.accumulatedWeight = mixAveragedQuat(\r\n            this.result,\r\n            this.result,\r\n            this.accumulatedWeight,\r\n            value,\r\n            weight,\r\n        );\r\n    }\r\n\r\n    public reset (): void {\r\n        this.accumulatedWeight = 0.0;\r\n        Quat.identity(this.result);\r\n    }\r\n}\r\n\r\nabstract class NodeBlendState<TVec3PropertyBlendState extends PropertyBlendState<Vec3>, TQuatPropertyBlendState extends PropertyBlendState<Quat>> {\r\n    get empty (): boolean {\r\n        const { _properties: properties } = this;\r\n        return !properties.position\r\n            && !properties.rotation\r\n            && !properties.eulerAngles\r\n            && !properties.scale;\r\n    }\r\n\r\n    public refProperty<P extends BlendingPropertyName> (\r\n        node: Node, property: BlendingPropertyName,\r\n    ): NodeBlendState<TVec3PropertyBlendState, TQuatPropertyBlendState>['_properties'][P] {\r\n        const { _properties: properties } = this;\r\n        let propertyBlendState: TVec3PropertyBlendState | TQuatPropertyBlendState;\r\n        switch (property) {\r\n        default:\r\n        case 'position':\r\n        case 'scale':\r\n        case 'eulerAngles':\r\n            propertyBlendState = properties[property] ??= this._createVec3BlendState(node[property]);\r\n            break;\r\n        case 'rotation':\r\n            propertyBlendState = properties[property] ??= this._createQuatBlendState(node.rotation);\r\n            break;\r\n        }\r\n        ++propertyBlendState.refCount;\r\n        return propertyBlendState as PropertyBlendStateTypeMap<TVec3PropertyBlendState, TQuatPropertyBlendState>[P];\r\n    }\r\n\r\n    public deRefProperty (property: BlendingPropertyName): void {\r\n        const { _properties: properties } = this;\r\n\r\n        const propertyBlendState = properties[property];\r\n        if (!propertyBlendState) {\r\n            return;\r\n        }\r\n\r\n        --propertyBlendState.refCount;\r\n        if (propertyBlendState.refCount > 0) {\r\n            return;\r\n        }\r\n\r\n        delete properties[property];\r\n    }\r\n\r\n    public apply (node: Node): void {\r\n        const {\r\n            _transformApplyFlags: transformApplyFlags,\r\n            _properties: { position, scale, rotation, eulerAngles },\r\n        } = this;\r\n\r\n        if (!transformApplyFlags) {\r\n            return;\r\n        }\r\n\r\n        let t: Vec3 | undefined;\r\n        let s: Vec3 | undefined;\r\n        let r: Quat | Vec3 | undefined;\r\n\r\n        if (position && (transformApplyFlags & TransformApplyFlag.POSITION)) {\r\n            t = position.result;\r\n        }\r\n\r\n        if (scale && (transformApplyFlags & TransformApplyFlag.SCALE)) {\r\n            s = scale.result;\r\n        }\r\n\r\n        if (eulerAngles && (transformApplyFlags & TransformApplyFlag.EULER_ANGLES)) {\r\n            r = eulerAngles.result;\r\n        }\r\n\r\n        if (rotation && (transformApplyFlags & TransformApplyFlag.ROTATION)) {\r\n            r = rotation.result;\r\n        }\r\n\r\n        if (r || t || s) {\r\n            node.setRTS(r, t, s);\r\n        }\r\n\r\n        this._transformApplyFlags = 0;\r\n    }\r\n\r\n    protected _transformApplyFlags = 0;\r\n\r\n    protected _properties: {\r\n        position?: TVec3PropertyBlendState;\r\n        rotation?: TQuatPropertyBlendState;\r\n        eulerAngles?: TVec3PropertyBlendState;\r\n        scale?: TVec3PropertyBlendState;\r\n    } = {};\r\n\r\n    protected abstract _createVec3BlendState (currentValue: Readonly<Vec3>): TVec3PropertyBlendState;\r\n\r\n    protected abstract _createQuatBlendState (currentValue: Readonly<Quat>): TQuatPropertyBlendState;\r\n}\r\n\r\nclass LegacyNodeBlendState extends NodeBlendState<LegacyVec3PropertyBlendState, LegacyQuatPropertyBlendState> {\r\n    public apply (node: Node): void {\r\n        const { _properties: { position, scale, rotation, eulerAngles } } = this;\r\n\r\n        if (position && position.accumulatedWeight) {\r\n            this._transformApplyFlags |= TransformApplyFlag.POSITION;\r\n            if (position.accumulatedWeight < 1.0) {\r\n                position.blend(node.position, 1.0 - position.accumulatedWeight);\r\n            }\r\n        }\r\n\r\n        if (scale && scale.accumulatedWeight) {\r\n            this._transformApplyFlags |= TransformApplyFlag.SCALE;\r\n            if (scale.accumulatedWeight < 1.0) {\r\n                scale.blend(node.scale, 1.0 - scale.accumulatedWeight);\r\n            }\r\n        }\r\n\r\n        if (eulerAngles && eulerAngles.accumulatedWeight) {\r\n            this._transformApplyFlags |= TransformApplyFlag.EULER_ANGLES;\r\n            if (eulerAngles.accumulatedWeight < 1.0) {\r\n                eulerAngles.blend(node.eulerAngles, 1.0 - eulerAngles.accumulatedWeight);\r\n            }\r\n        }\r\n\r\n        if (rotation && rotation.accumulatedWeight) {\r\n            this._transformApplyFlags |= TransformApplyFlag.ROTATION;\r\n            if (rotation.accumulatedWeight < 1.0) {\r\n                rotation.blend(node.rotation, 1.0 - rotation.accumulatedWeight);\r\n            }\r\n        }\r\n\r\n        super.apply(node);\r\n\r\n        position?.reset();\r\n        scale?.reset();\r\n        rotation?.reset();\r\n        eulerAngles?.reset();\r\n    }\r\n\r\n    protected _createVec3BlendState (_currentValue: Readonly<Vec3>): LegacyVec3PropertyBlendState {\r\n        return new LegacyVec3PropertyBlendState();\r\n    }\r\n\r\n    protected _createQuatBlendState (_currentValue: Readonly<Quat>): LegacyQuatPropertyBlendState {\r\n        return new LegacyQuatPropertyBlendState();\r\n    }\r\n}\r\n\r\nexport class LegacyBlendStateBuffer extends BlendStateBuffer<LegacyNodeBlendState> {\r\n    protected createNodeBlendState (): LegacyNodeBlendState {\r\n        return new LegacyNodeBlendState();\r\n    }\r\n}\r\n\r\nfunction mixAveragedVec3 (result: Vec3, previous: Readonly<Vec3>, accumulatedWeight: number, input: Readonly<Vec3>, weight: number): number {\r\n    const newSum = accumulatedWeight + weight;\r\n    if (weight === 1.0 && !accumulatedWeight) {\r\n        Vec3.copy(result, input);\r\n    } else if (newSum) {\r\n        const t = weight / newSum;\r\n        Vec3.lerp(result, result, input, t);\r\n    }\r\n    return newSum;\r\n}\r\n\r\nfunction mixAveragedQuat (result: Quat, previous: Readonly<Quat>, accumulatedWeight: number, input: Readonly<Quat>, weight: number): number {\r\n    const newSum = accumulatedWeight + weight;\r\n    if (weight === 1.0 && !accumulatedWeight) {\r\n        Quat.copy(result, input);\r\n    } else if (newSum) {\r\n        const t = weight / newSum;\r\n        Quat.slerp(result, previous, input, t);\r\n    }\r\n    return newSum;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { System, errorID, cclegacy, js, SystemPriority } from '../core';\r\nimport { director, DirectorEvent } from '../game/director';\r\nimport { Node } from '../scene-graph';\r\nimport { LegacyBlendStateBuffer } from '../3d/skeletal-animation/skeletal-animation-blending';\r\nimport { AnimationState } from './animation-state';\r\nimport type { CrossFade } from './cross-fade';\r\nimport { IJointTransform, deleteTransform, getTransform, getWorldMatrix } from './skeletal-animation-utils';\r\nimport { Socket } from '../3d/skeletal-animation/skeletal-animation';\r\n\r\ninterface ISocketData {\r\n    target: Node;\r\n    transform: IJointTransform;\r\n}\r\n\r\n@ccclass\r\nexport class AnimationManager extends System {\r\n    public get blendState (): LegacyBlendStateBuffer {\r\n        return this._blendStateBuffer;\r\n    }\r\n\r\n    public static ID = 'animation';\r\n    private _anims = new js.array.MutableForwardIterator<AnimationState>([]);\r\n    private _crossFades = new js.array.MutableForwardIterator<CrossFade>([]);\r\n    private _delayEvents: {\r\n        fn: (...args: any[]) => void;\r\n        thisArg: any;\r\n        args: any[];\r\n    }[] = [];\r\n    private _blendStateBuffer: LegacyBlendStateBuffer = new LegacyBlendStateBuffer();\r\n    private _sockets: ISocketData[] = [];\r\n\r\n    /**\r\n     * @en Get the array of all the animation state.\r\n     * @zh 获取所有动画状态的数组。\r\n     */\r\n    public get animationStates (): ReadonlyArray<AnimationState> {\r\n        return this._anims.array;\r\n    }\r\n\r\n    public addCrossFade (crossFade: CrossFade): void {\r\n        const index = this._crossFades.array.indexOf(crossFade);\r\n        if (index === -1) {\r\n            this._crossFades.push(crossFade);\r\n        }\r\n    }\r\n\r\n    public removeCrossFade (crossFade: CrossFade): void {\r\n        const index = this._crossFades.array.indexOf(crossFade);\r\n        if (index >= 0) {\r\n            this._crossFades.fastRemoveAt(index);\r\n        } else {\r\n            errorID(3907);\r\n        }\r\n    }\r\n\r\n    public update (dt: number): void {\r\n        const { _delayEvents, _crossFades: crossFadesIter, _sockets } = this;\r\n\r\n        { // Update cross fades\r\n            const crossFades = crossFadesIter.array;\r\n            for (crossFadesIter.i = 0; crossFadesIter.i < crossFades.length; ++crossFadesIter.i) {\r\n                const crossFade = crossFades[crossFadesIter.i];\r\n                crossFade.update(dt);\r\n            }\r\n        }\r\n\r\n        const iterator = this._anims;\r\n        const array = iterator.array;\r\n        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {\r\n            const anim = array[iterator.i];\r\n            if (!anim.isMotionless) {\r\n                anim.update(dt);\r\n            }\r\n        }\r\n        this._blendStateBuffer.apply();\r\n\r\n        const stamp = director.getTotalFrames();\r\n        for (let i = 0, l = _sockets.length; i < l; i++) {\r\n            const { target, transform } = _sockets[i];\r\n            target.matrix = getWorldMatrix(transform, stamp);\r\n        }\r\n\r\n        for (let i = 0, l = _delayEvents.length; i < l; i++) {\r\n            const event = _delayEvents[i];\r\n            event.fn.apply(event.thisArg, event.args);\r\n        }\r\n        _delayEvents.length = 0;\r\n    }\r\n\r\n    public destruct (): void {\r\n\r\n    }\r\n\r\n    public addAnimation (anim: AnimationState): void {\r\n        const index = this._anims.array.indexOf(anim);\r\n        if (index === -1) {\r\n            this._anims.push(anim);\r\n        }\r\n    }\r\n\r\n    public removeAnimation (anim: AnimationState): void {\r\n        const index = this._anims.array.indexOf(anim);\r\n        if (index >= 0) {\r\n            this._anims.fastRemoveAt(index);\r\n        } else {\r\n            errorID(3907);\r\n        }\r\n    }\r\n\r\n    public pushDelayEvent (fn: (...args: any[]) => void, thisArg: any, args: any[]): void {\r\n        this._delayEvents.push({\r\n            fn,\r\n            thisArg,\r\n            args,\r\n        });\r\n    }\r\n\r\n    public addSockets (root: Node, sockets: Socket[]): void {\r\n        for (let i = 0; i < sockets.length; ++i) {\r\n            const socket = sockets[i];\r\n            if (this._sockets.find((s) => s.target === socket.target)) { continue; }\r\n            const targetNode = root.getChildByPath(socket.path);\r\n            const transform = socket.target && targetNode && getTransform(targetNode, root);\r\n            if (transform) {\r\n                this._sockets.push({ target: socket.target!, transform });\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeSockets (root: Node, sockets: Socket[]): void {\r\n        for (let i = 0; i < sockets.length; ++i) {\r\n            const socketToRemove = sockets[i];\r\n            for (let j = 0; j < this._sockets.length; ++j) {\r\n                const socket = this._sockets[j];\r\n                if (socket.target ===  socketToRemove.target) {\r\n                    deleteTransform(socket.transform.node);\r\n                    this._sockets[j] = this._sockets[this._sockets.length - 1];\r\n                    this._sockets.length--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ndirector.on(DirectorEvent.INIT, (): void => {\r\n    const animationManager = new AnimationManager();\r\n    director.registerSystem(AnimationManager.ID, animationManager, SystemPriority.HIGH);\r\n});\r\n\r\ncclegacy.AnimationManager = AnimationManager;\r\n"],"names":["ccclass","CLASS_NAME_PREFIX_ANIM","_dec","_class2","_EditorExtendable","EmbeddedPlayer","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","begin","_initializer","end","_initializer2","reconciledSpeed","_initializer3","playable","_initializer4","_inheritsLoose","EditorExtendable","serializable","_applyDecoratedInitializer","prototype","EmbeddedPlayable","EmbeddedPlayableState","randomAccess","_randomAccess","setTime","_createClass","key","get","_EmbeddedPlayable","EmbeddedAnimationClipPlayable","path","clip","instantiate","root","clipRoot","getChildByPath","errorID","getPathInHierarchy","name","state","AnimationState","initialize","EmbeddedAnimationClipPlayableState","_EmbeddedPlayableStat","animationState","_this2","_animationState","_proto2","destroy","play","pause","stop","setSpeed","speed","time","EmbeddedParticleSystemPlayable","node","warn","ParticleSystemConstructor","js","particleSystem","getComponent","EmbeddedParticleSystemPlayableState","_particleSystem","stopEmitting","simulationSpeed","_decorator","_Track","RealArrayTrack","_channels","_proto","channels","createEvalSymbol","RealArrayTrackEval","map","_ref","curve","set","value","nChannels","splice","_this$_channels","push","from","Channel","RealCurve","Track","_curves","_result","fill","evaluate","result","nElements","iElement","UniformProxyFactory","uniformName","passIndex","_initializerDefineProperty","_descriptor","forTarget","target","Material","channelIndex","passes","warnID","pass","handle","getHandle","getTypeFromHandle","Type","SAMPLER1D","realHandle","undefined","FLOAT","isUniformArray","setUniformArray","setUniform","binding","getBindingFromHandle","prop","properties","texName","getStringFromType","type","getDefaultFromType","dftTex","builtinResMgr","texture","getGFXTexture","width","height","bindTexture","TextureBase","bindSampler","deviceManager","gfxDevice","getSampler","getSamplerInfo","_applyDecoratedDescriptor","float","configurable","enumerable","writable","initializer","_class","_step","_iterator","_createForOfIteratorHelperLoose","shaderInfo","blocks","done","_step2","block","members","_iterator2","uniform","count","VariableType","MorphWeightValueProxy","subMeshIndex","shapeIndex","setWeight","MorphWeightsValueProxy","_dec2","_class5","setWeights","_class4","MorphWeightsAllValueProxy","_dec3","_class7","_target$mesh$struct$p","_target$mesh","nSubMeshes","mesh","struct","primitives","iSubMesh","ownerSymbol","Symbol","assertsOwnedBy","mastered","owner","assertIsTrue","own","markAsDangling","TriggerResetMode","createInstanceTag","VarInstanceBase","_refs","bind","fn","thisArg","getValue","setValue","_step$value2","PlainVariable","_type","_value","INTEGER","BOOLEAN","VarInstancePrimitive","Number","isInteger","_VarInstanceBase","AFTER_CONSUMED","TriggerVariable","_flags","VarInstanceTrigger","resetMode","TRIGGER","Vec3Variable","VarInstanceVec3","VEC3_experimental","Vec3","copy","QuatVariable","VarInstanceQuat","QUAT_experimental","Quat","createVariable","initialValue","variable","Error","InvalidTransitionError","_Error","_wrapNativeSuper","VariableNotDefinedError","_Error2","VariableTypeMismatchedError","_Error3","expected","received","cloneAnimationGraphEditorExtrasFrom","object","editorExtras","editorExtrasTag","maybeCloneableEditorExtras","clone","outgoingsSymbol","incomingsSymbol","State","copyTo","that","InteractiveState","_State","_components","addComponent","constructor","component","removeComponent","instantiateComponents","AnimationGraphEventBinding","methodName","emit","origin","invokeComponentMethodsEngagedInAnimationEvent","MotionState","_InteractiveState","motion","speedMultiplier","speedMultiplierEnabled","transitionInEventBinding","_initializer5","transitionOutEventBinding","_initializer6","__callOnAfterDeserializeRecursive","_this$motion","_this$motion$clone","_this$motion2","onAfterDeserializedTag","AnimationGraphLike","_Asset","Asset","renameObjectProperty","originalPropertyKey","newPropertyKey","propertyIsEnumerable","Object","entries","forEach","k","v","getOwnPropertySymbols","_ref2","createInstanceofProxy","isSymbolHasInstanceAvailable","Array1","hasInstance","instance","isArray","_unused","InstanceOfProxy","defineProperty","PoseGraphNodeShell","_bindings","getBindings","addBinding","inputPath","producer","outputIndex","_emplaceBinding","PoseGraphNodeInputBinding","deleteBinding","index","_findBindingIndex","moveArrayElementBindingForward","propertyKey","firstIndex","forward","bindings","oldBindings","iBinding","consumerPropertyKey","_binding$inputPath2","_binding$inputPath$2","_i","_oldBindings","oldBinding","_oldBinding$inputPath3","_oldBinding$inputPath4","consumerElementIndex","deleteBindingTo","findBinding","bindingIndex","findIndex","searchElement","isEqualNodeInputPath","lhs","rhs","lhsPropertyKey","lhsElementIndex","rhsPropertyKey","rhsElementIndex","PoseGraphType","_inputPath","_producer","_outputIndex","AddNonFreestandingNodeError","toString","OperationOnFreestandingNodeError","PoseGraphNode","nodeEditorMetadataMap","WeakMap","getOrCreateNodeEditorMetadata","existing","metadata","makeNodeEditorMetadataModifier","edit","error","poseGraphNodeCategory","category","poseGraphCreateNodeFactory","factory","poseGraphNodeHide","hide","poseGraphNodeAppearance","appearance","_metadata$appearance","assign","PoseGraphNodeInputManager","_classInputMap","setPropertyNodeInputRecord","options","classInputRecord","arraySyncGroup","unchanged","record","_excluded","arraySyncGroupName","_classInputRecord$arr","_classInputRecord$arr2","arraySyncGroups","group","includes","freeze","getInputKeys","getInputKeysRecurse","_loop","_Object$entries","subClassPropertyKey","field","isPoseInput","propertyInputRecord","_getPropertyNodeInputRecord","POSE","getInputMetadata","_key$","elementIndex","_propertyInputRecord$","_propertyInputRecord$2","displayName","getArrayElementDisplayName","deletable","arraySyncGroupFollower","insertPoint","hasInput","_key$2","getInputInsertInfos","property","deleteInput","graph","_key$3","_deleteInputInArraySyncGroup","deletePoseGraphNodeArrayElement","insertInput","insertId","hint","_insertInputInArraySyncGroup","insertPoseGraphNodeArrayElement","createDefaultInputValueByType","syncGroup","expectedOriginalSyncLength","insertHint","iGroupMember","syncedPropertyKey","syncedPropertyInputRecord","syncedProperty","inputKey","shell","getShell","_inputKey$","_inputKey$2","VEC3","QUAT","globalPoseGraphNodeInputManager","CACHE_VECTOR_A","CACHE_VECTOR_B","CACHE_QUAT_A","transform","cacheInvRotation","cacheInvScale","Transform","_position","_rotation","_scale","ONE","src","setIdentity","out","ZERO","IDENTITY","equals","a","b","epsilon","strictEquals","lerp","to","t","slerp","multiply","second","first","cacheRotation","cacheScale","cachePosition","transformQuat","add","invert","invRotation","invScale","invPosition","invScaleOrZero","EPSILON","negate","fromMatrix","matrix","Mat4","toSRT","toMatrix","fromSRT","scale","x","y","z","Math","abs","__calculateDeltaTransform","base","subtract","position","deltaQuat","rotation","calculateRelative","invSecondRotation","cacheQuat","quatMultiInvInverseCache","PoseTransformSpace","__applyDeltaTransform","delta","alpha","scaleAndAdd","weightedDeltaRotation","fromInv","ZERO_DELTA_TRANSFORM","Pose","transforms","auxiliaryCurves","_poseTransformSpace","LOCAL","_create","TransformFilter","involvedTransforms","every","transformIndex","pow","_involvedTransforms","Uint16Array","blendPoseInto","source","transformFilter","blendTransformsInto","blendAuxiliaryCurvesInto","nTransforms","involvedTransformIndex","blendIntoTransformArrayAt","iTransform","copyTransformsWithFilter","filter","copyRange","cacheTransformSource","cacheTransformTarget","transformTarget","getTransform","transformSource","setTransform","nValues","iValue","calculateDeltaTransformArrayAt","cacheTransformBase","baseTransform","targetTransform","calculateDeltaTransforms","calculateDeltaAuxiliaryCurves","nAuxiliaryCurves","i","applyDeltaPose","applyDeltaTransforms","applyDeltaAuxiliaryCurves","PoseTransformSpaceRequirement","applyDeltaTransformArrayAt","cacheTransformDelta","deltaTransform","ccenum","PoseNode","_PoseGraphNode","_dependencyEvaluation","update","context","_this$_dependencyEval","doUpdate","poseTransformSpaceRequirement","pose","doEvaluate","currentSpace","NO","COMPONENT","_poseTransformsSpaceComponentToLocal","_poseTransformsSpaceLocalToComponent","evaluateDefaultPose","pushDefaultedPose","pushDefaultedPoseInComponentSpace","_setDependencyEvaluation","dependency","_forceEvaluateEvaluation","_this$_dependencyEval2","PureValueNode","outputTypes","_outputTypes","getOutputType","link","SingleOutputPVNode","_PureValueNode","outputType","selfEvaluate","outputs","selfEvaluateDefaultOutput","input","targetConstructor","inputUnchecked","getOrCreatePropertyStash","__internalFlags","PropertyStashInternalFlag","STANDALONE","IMPLICIT_VISIBLE","PoseGraphOutputNode","themeColor","inline","_assertThisInitialized","PoseGraph","_outputNode","_nodes","_shells","_shellMap","addNode","iNode","nodes","values","has","removeNode","removal","nodeIndex","indexOf","Map","Transition","conditions","condition","DurationalTransition","_Transition","destinationStart","relativeDestinationStart","startEventBinding","endEventBinding","_initializer7","AnimationTransition","_class8","_DurationalTransition","_this3","_len2","_key2","duration","_initializer8","relativeDuration","_initializer9","exitConditionEnabled","_initializer10","_exitCondition","_initializer11","exitCondition","isAnimationTransition","transition","LayerBlending","EmptyState","_dec4","_class10","EmptyStateTransition","_dec5","_class12","_DurationalTransition2","_this4","_len3","_key3","_initializer12","_class11","ProceduralPoseState","_dec6","_class15","_State2","_this5","_len4","_key4","_initializer13","_initializer14","_initializer15","_proto5","_class14","ProceduralPoseState_","ProceduralPoseTransition","_dec7","_class18","_DurationalTransition3","_this6","_len5","_key5","_initializer16","_class17","ProceduralPoseTransition_","StateMachine","_dec8","_class21","_EditorExtendable2","_proto7","allowEmptyStates","_this7","_states","_initializer17","_transitions","_initializer18","_entryState","_initializer19","_exitState","_initializer20","_anyState","_initializer21","_allowEmptyStates","_addState","nStates","iState","SubStateMachine","stateMachine","_this8","states","transitions","getTransitionsBetween","getOutgoings","getIncomings","addMotion","addSubStateMachine","addEmpty","addProceduralPoseState","remove","entryState","exitState","anyState","eraseTransitionsIncludes","connect","disconnect","oTransitions","iTransitions","oTransitionsToRemove","oTransition","nOTransitionToRemove","iOTransitionToRemove","assertIsNonNullable","removeTransition","eraseOutgoings","_this9","_loop2","iOTransition","eraseIncomings","_this10","_loop3","iTransition","iITransition","adjustTransitionPriority","adjusting","diff","outgoings","iAdjusting","iNew","clamp","globalTransitions","adjustingIndexInGlobal","lastPlaceholder","iOutgoing","outgoing","indexInGlobal","shift","thatStatesOld","thatStateOld","stateMap","thatState","_step3","_iterator3","thatFrom","thatTo","thatTransition","_class20","_dec9","_class24","_this11","_stateMachine","_initializer22","_class23","PoseGraphStash","_dec10","_class27","_EditorExtendable3","_this12","_len6","_key6","_initializer23","_class26","Layer","_dec11","_class30","_proto9","_initializer24","_initializer25","weight","_initializer26","mask","_initializer27","additive","_initializer28","_stashes","_initializer29","stashId","stashes","getStash","id","addStash","removeStash","renameStash","newId","_class29","AnimationGraph","_dec12","_class33","_AnimationGraphLike","_this13","_layers","_initializer30","_variables","_initializer31","_proto10","onLoaded","layers","nLayers","iLayer","addLayer","layer","removeLayer","moveLayer","newIndex","addVariable","removeVariable","getVariable","renameVariable","newName","_class32","createEval","Motion","wrap","elapsedTime","wrapMode","repeatCount","negativeSpeed","info","ratio","direction","stopped","isFinite","iterations","currentIterations","tempRatio","tempTime","needReverse","shouldWrap","WrapModeMask","ShouldWrap","isReverseIteration","PingPong","Reverse","CACHE_VEC3_GET_VALUE","CACHE_QUAT_GET_VALUE","PoseBindingBase","transformHandle","_transformHandle","PosePositionBinding","_PoseBindingBase","setPosition","getPosition","PoseRotationBinding","_PoseBindingBase2","_proto3","setRotation","getRotation","PoseEulerAnglesBinding","_PoseBindingBase3","_proto4","quat","fromEuler","_EULER_TO_QUAT_CACHE","q","toEuler","PoseScaleBinding","_PoseBindingBase4","setScale","getScale","AuxiliaryCurveBinding","_handle","_proto6","bindPoseTransform","NonTransformPoseBinding","_this$binding$getValu","_this$binding$getValu2","_this$binding","AGTrackEvaluation","trackEvaluation","_binding","_trackSampler","_proto8","trackSampler","defaultValue","requiresDefault","bindTrackAG","animationClip","track","bindContext","trackTarget","createRuntimeBindingAG","trackBindingTag","proxy","nPaths","iLastPath","isPropertyAt","isElementAt","lastPropertyKey","parsePropertyAt","parseElementAt","resultTarget","normalizedFollowTag","Node","isTrsPropertyName","transformPath","segments","parent","unshift","join","bindTransform","nonTransformBinding","createRuntimeBinding","AuxiliaryCurveEvaluation","_curve","createAnimationAGEvaluation","isAdditive_experimental","AnimationClipAGEvaluationAdditive","AnimationClipAGEvaluationRegular","_trackEvaluations","_exoticAnimationEvaluation","_auxiliaryCurveEvaluations","_trySyncLegacyData","exoticAnimationEvaluation","trackEvaluations","auxiliaryCurveEvaluations","tracks","exoticAnimation","exoticAnimationTag","UntypedTrack","keyFramesCount","trackRuntimeBinding","createEvaluatorForAnimationGraph","auxiliaryCurveNames","getAuxiliaryCurveNames_experimental","iAuxiliaryCurve","curveName","getAuxiliaryCurve_experimental","bindAuxiliaryCurve","_this$_exoticAnimatio","nTrackEvaluations","iNodeEvaluation","nAuxiliaryCurveEvaluations","iAuxiliaryCurveEvaluation","_clipEval","_refClipEval","refClip","additiveSettingsTag","_proto11","_this$_refClipEval","popPose","ClipMotion","AnimationClip","_Motion","ignoreEmbeddedPlayers","ClipMotionEval","evaluatePortTag","_context$clipOverride","_context$clipOverride2","_clipEmbeddedPlayerEval","_frameEventEval","_wrapInfo","WrappedInfo","_duration","_ignoreEmbeddedPlayers","_originalClip","overriding","clipOverrides","_setClip","createPort","ClipMotionPort","getClipStatuses","baseWeight","got","next","__DEBUG_ID__","__DEBUG__ID__","_clip","progress","_this$_frameEventEval","_this$_clipEmbeddedPl","clipDuration","clipEval","wrapInfo","Loop","Infinity","clipTime","sample","trunc","overrideClips","_context$clipOverride3","originalClip","reenter","_this$_frameEventEval2","reset","_this$_clipEval","createEventEvaluator","containsAnyEmbeddedPlayer","createEmbeddedPlayerEvaluator","host","_eval","AnimationBlendItem","_copyTo","AnimationBlend","AnimationBlendEval","children","inputs","_childEvaluators","child","_child$motion$createE","_child$motion","_weights","_inputs","AnimationBlendPort","childEval","_childEval$createPort","getChildWeight","childIndex","getChildMotionEval","currentChildIterator","weights","nChildren","iChild","__evaluatePort","port","nChild","sumWeight","finalPose","_port$childPorts$iChi","childWeight","childOutput","childPorts","_this$_childEvaluator","setInput","doEval","eval","uniformDuration","_this$_childEvaluator2","_this$_childEvaluator3","_host","nChildPorts","_childPorts$iChild","BindableNumber","BindableBoolean","bindOr","bindable","callback","varInstance","getVar","validateVariableExistence","validateVariableType","validateVariableTypeTriggerLike","blend1D","thresholds","iUpper","iThresholds","lower","upper","dVal","CACHE_NORMALIZED_SAMPLE","CACHE_BARYCENTRIC_SOLUTIONS","AnimationBlend1DItem","_AnimationBlendItem","threshold","AnimationBlend1D","_class6","_AnimationBlend","_items","param","item","evaluation","AnimationBlend1DEval","sort","_ref3","Item","_AnimationBlendEval","items","_thresholds","_ref4","blendSimpleDirectional","Vec2","wA","wB","samples","iCenter","iSectorStart","iSectorEnd","lhsCosAngle","NEGATIVE_INFINITY","rhsCosAngle","inputX","inputY","iSample","sampleNormalized","normalize","cosAngle","dot","centerWeight","_solveBarycentric2","p","resolutions","det","cross","w1","w2","sum","average","sampleFreeformCartesian","sampleFreeform","getGradientBandCartesianCoords","getGradientBandCoords","pIpInput","pIJ","sumInfluence","nSamples","influence","MAX_VALUE","outsideHull","jSample","lengthSqr","min","pI","pJ","pIpJ","PolarSpaceGradientBandInterpolator2D","examples","angleMultiplier","_ANGLE_MULTIPLIER","nExamples","exampleMagnitudes","_exampleMagnitudes","exampleDirections","_exampleDirections","example","iExample","magnitude","len","approx","multiplyScalar","precomputedVIJs","_precomputedVIJs","Float32Array","magnitudeI","directionI","jExample","magnitudeJ","directionJ","averagedMagnitude","pOutput","signedAngle","_cacheVIXAngles","interpolate","cacheVIXAngles","cacheInputDirection","_CACHE_INPUT_DIRECTION","cacheVIJ","_CACHE_VIJ","cacheVIX","_CACHE_VIX","vX","magnitudeX","vIXAngles","directionX","totalWeight","minInfluence","POSITIVE_INFINITY","precomputedDataIndex","vIJMag","vIJAnglePrecomputed","vIJAngle","vIXAngle","vIJ","vIX","averaged","v1","v2","angle","Algorithm","AnimationBlend2DItem","AnimationBlend2D","paramX","paramY","_algorithm","_polarSpaceGBI","_tryReconstructPolarSpaceInterpolator","_item$clone","algorithm","FREEFORM_DIRECTIONAL","PolarSpaceGradientBandBlend2DEval","SIMPLE_DIRECTIONAL","FREEFORM_CARTESIAN","AnimationBlend2DEval","initialValueX","initialValueY","_AnimationBlendEval2","interpolator","_interpolator","AnimationBlendDirectItem","AnimationBlendDirect","myEval","AnimationBlendDirectEval","iItem","UnaryOperator","JointMask","enabled","AnimationMask","_jointMasks","addJoint","removeJoint","clear","filterDisabledNodes","jointMasks","nJointMasks","disabledNodes","Set","iJointMask","isExcluded","_this$_jointMasks$fin","_this$_jointMasks$fin2","find","joint","getOwnPropertyDescriptor","ClipOverrideEntry","original","substitution","AnimationGraphVariant","_graph","_clipOverrides","ClipOverrideMap","_Symbol$iterator","iterator","_entries","entry","newEntry","removeIf","POSE_GRAPH_NODE_MENU_PREFIX_POSE","POSE_GRAPH_NODE_MENU_PREFIX_POSE_BLEND","createNodeFactory","listEntries","animationGraph","layerIndex","arg","menu","create","PoseNodeUseStashedPose","stashName","_PoseNode","_runtimeStash","runtimeStash","stashView","bindStash","settle","_this$_runtimeStash","_this$_runtimeStash2","requestUpdate","_this$_runtimeStash$e","_this$_runtimeStash3","_class3","UnaryCondition","operator","operand","UnaryConditionEval","setOperand","Operator","TRUTHY","TCBindingValueType","_operator","_operand","FALSY","TCBindingTransitionSourceFilter","TCBinding","provide","valueTypes","TCVariableBinding","_TCBinding","variableName","getValueType","TCVariableBindingEvaluation","editorOnly","_varInstance","TCAuxiliaryCurveBinding","view","getEvaluationTimeAuxiliaryCurveView","TCAuxiliaryCurveBindingEvaluation","_view","_curveName","WEIGHTED","TCStateWeightBinding","TCStateWeightBindingEvaluation","sourceStateWeight","TCStateMotionTimeBinding","TCStateMotionTimeBindingEvaluation","BinaryOperator","sourceStateMotionTimeNormalized","BinaryCondition","lhsBinding","_this$lhsBinding","lhsBindingEvaluation","BinaryConditionEval","EQUAL_TO","lhsValue","rhsValue","_lhsBindingEvaluation","_lhsValue","_rhsValue","_this$_lhsBindingEval","_this$_lhsBindingEval2","NOT_EQUAL_TO","LESS_THAN","LESS_THAN_OR_EQUAL_TO","GREATER_THAN","GREATER_THAN_OR_EQUAL_TO","TriggerCondition","trigger","TriggerConditionEval","triggerInstance","setTrigger","triggered","_triggered","StateMachineComponent","onMotionStateEnter","onMotionStateExit","onMotionStateUpdate","onStateMachineEnter","onStateMachineExit","TRANSFORM_STRIDE_IN_FLOATS","TRANSFORM_STRIDE_IN_BYTES","Float64Array","BYTES_PER_ELEMENT","vec3FromArray","fromArray","vec3ToArray","toArray","quatFromArray","quatToArray","TransformArray","bufferOrLength","byteOffset","length_","_data","data","baseOffset","ROTATION_OFFSET","copyWithin","start","_start","_end","fillZero","transformArray","targetOffset","slice","dataSliced","buffer","sourceOffset","size","sizeInFloats","targetFloats","targetStartInFloats","sourceFloats","sourceStartInFloats","byteLength","allocatorPageCountTag","onStackPurgedTag","SharedMemoryPage","useCount","ArrayBuffer","PagedStack","_manager","_pageSize","_locking","_pages","_allocatorCount","debugLock","debugUnlock","getPageMemory","pushPage","allocator","oldAllocatorPageCount","_pushNewPage","page","popPage","allocatorPageCount","allocatorLastPageIndex","lastPage","pop","createAllocator","sliceSize","SharedStackBasedAllocator","destroyAllocator","iPage","newPage","SharedMemorySlice","_resource","_sliceSize","_slicesPerPage","_slices","slicesPerPage","floor","pageSize","debugLocking","sliceLength","slices","desiredSliceIndex","newSliceIndexInPage","newSlicePageIndex","capacity","pageMemory","newSlice","allocatedCount","removingSliceIndex","SharedStackBasedAllocatorManager","_stacks","arr","allocationPageSize","stackPageSize","_selectStackPageSize","stack","stackFound","thresholdIndex","binarySearchEpsilon","PoseStackAllocator","transformCount","auxiliaryCurveCount","_poses","_allocatedCount","_memoryAllocator","_transformCount","_auxiliaryCurveCount","poseBytes","calculateRequiredBytes","globalPosePageMemoryAllocatorManager","iPose","_allocateNewPose","transformsByteLength","TransformSpace","partition","array","predicate","iFirstGroup2Element","nGroup1","element","allocationInfoTag","isPagedPose","PoseHeapAllocator","metaValueCount","_metaValueCount","_foremostPossibleFreePage","allocatePose","pages","nPages","tryAllocate","pageIndex","freeCount","_allocatePoseInNewPage","destroyPose","deallocate","PosePage","AllocationInfo","_id","POSE_INDEX_BITS","POSE_INDEX_MASK","_capacity","_buffer","_idleFlags","_freeCount","_poses$idlePoseIndex","bits","poses","idleFlags","idlePoseIndex","log2","_createPose","poseIndex","metaValues","findBoneByNameRecursively","found","LayoutChangeFlag","AnimationGraphBindingContext","poseLayoutMaintainer","varRegistry","_controller","_origin","_layoutMaintainer","_varRegistry","_additiveFlagStack","_triggerResetter","_resetTrigger","_isLayerWideContextPropertiesSet","_stashView","_motionSyncManager","bone","boneNode","getOrCreateTransformBinding","bindTransformByName","getBoneChildren","childNode","getParentBoneNameByName","_boneNode$parent","getOrCreateAuxiliaryCurveBinding","auxiliaryCurveRegistry","_pushAdditiveFlag","_popAdditiveFlag","_integrityCheck","_setLayerWideContextProperties","motionSyncManager","_unsetLayerWideContextProperties","_setClipOverrides","triggerName","additiveFlagStack","cacheTransform","AuxiliaryCurveRegistry","_namedCurves","names","keys","_this$_namedCurves$ge","checkBindStatus","bindStarted","_","_propertyKey","descriptor","vendor","_bindStarted","AnimationGraphPoseLayoutMaintainer","_auxiliaryCurveRegistry","_auxiliaryCurveRecords","_transformRecords","_parentTable","_transformCountBeforeBind","_auxiliaryCurveCountBeforeBind","debugIntegrityCheckLengthOfPathToOrigin","isValidNode","current","_getOrCreateTransformBinding","transformRecords","transformRecord","refCount","newNodeIndex","parentIndex","TransformRecord","TransformHandleInternal","auxiliaryCurveRecords","auxiliaryCurveIndex","auxiliaryCurveRecord","newAuxiliaryCurveIndex","AuxiliaryCurveRecord","AuxiliaryCurveHandleInternal","createEvaluationContext","AnimationGraphEvaluationContext","resetPoseStashAllocator","_reset","createTransformFilter","involvedTransformIndices","countPath","fetchDefaultTransforms","defaultTransform","setRTS","curveValue","_destroyTransformHandle","_destroyAuxiliaryCurveHandle","startBind","endBind","changeFlags","trimRecords","TRANSFORM_COUNT","nRecords","iRecord","order","orderChanged","TRANSFORM_ORDER","AUXILIARY_CURVE_COUNT","parentTable","r","_get","records","nUsedRecords","defaultTransformsTag","AnimationGraphSettleContext","cacheTransform_spaceConversion","cacheParentTransform_spaceConversion","componentNode","_poseAllocator","_componentNode","_cacheComponentToWorldTransform","currentIndex","pushZeroDeltaPose","pushDuplicatedPose","_isStackTopPose_debugging","top","parentTransformIndex","parentTransform","_convertPoseSpaceTransformToTargetSpace","outTransformSpace","poseTransformIndex","poseSpace","WORLD","_getComponentToWorldTransform","_getLocalToWorldTransform","_getLocalToComponentTransform","PARENT","parentComponentTransform","invParentComponentTransform","boneTransform","invBoneTransform","_convertTransformToPoseTransformSpace","transformSpace","worldToComponent","localToWorld","worldToLocal","localToComponent","componentToLocal","currentTransform","worldPosition","worldRotation","worldScale","localTransform","AnimationGraphUpdateContextGenerator","_context","deltaTime","indicativeWeight","generate","forkSubWeight","subWeight","DeferredPoseStashAllocator","_allocator","MotionSyncInfo","makeCreateNodeFactory","create_","ZERO_DURATION_THRESHOLD","PoseNodePlayMotion","syncInfo","_descriptor2","_workspace","_runtimeSyncRecord","motionEval","Workspace","register","runtimeSyncRecord","startTimeNormalized","clamp01","startTime","notifyRenter","normalizedTime","lastIndicativeWeight","normalizedDeltaTime","notifyUpdate","getSyncedEnterTime","motionEvalPort","_this$_workspace$last","_this$_workspace","_this$_workspace$norm","_this$_workspace2","isEvaluatableNode","InstantiatedPoseGraph","_rootPoseNode","_countingPlayMotionNodes","_this$_rootPoseNode","_this$_rootPoseNode2","_this$_rootPoseNode3","_this$_rootPoseNode4","_this$_rootPoseNode$e","_this$_rootPoseNode5","countMotionTime","playMotionNodes","maxWeightedTime","maxWeight","iPlayMotionNode","elapsedMotionTime","instantiatePoseGraph","linkContext","mayCountMotionTime","outputNode","outputNodeShell","instantiationMap","mainRecord","instantiateNode","instantiated","consumerNode","runtimePVNodePropertyBindings","producerNode","producerOutputIndex","consumerInputPath","linkPoseNode","runtimePVNodePropertyBinding","linkPVNode","dependencyEvaluation","DependencyEvaluation","RuntimePVNodeEvaluation","bindingEvaluations","_bindingEvaluations","_node","_dependency","_outputs","outputCount","getDefaultOutput","getOutput","_consumerInputPath$","consumerProperty","RuntimePVNodePlainPropertyBinding","_consumerNode","_consumerPropertyKey","_producerRecord","_producerOutputIndex","RuntimePVNodeArrayElementPropertyBinding","_consumerElementIndex","producerRecord","_consumerInputPath$2","TopLevelStateMachineEvaluation","passthroughWeight","_motionStates","_proceduralPoseStates","_topLevelEntry","_topLevelExit","_currentNode","_pendingTransitionPath","_activatedTransitions","_activatedTransitionPool","ActivatedTransition","createPool","_updateContextGenerator","_conditionEvaluationContext","ConditionEvaluationContextImpl","_additive","controller","_this$_addStateMachin","_addStateMachine","exit","increaseActiveReference","triggerResetter","proceduralPoseStates","nProceduralPoseStates","destination","decreaseActiveReference","free","exited","_loopMatchTransitions","_resetStateTickFlagsAndWeights","_updateActivatedTransitions","_commitStateUpdates","_sample","_pushNullishPose","getCurrentStateStatus","currentNode","kind","NodeKind","animation","procedural","getStatus","getCurrentClipStatuses","absoluteWeight","emptyClipStatusesIterable","getCurrentTransition","transitionStatus","activatedTransitions","lastActivatedTransition","baseDurationState","absoluteDuration","getAbsoluteDuration","normalizedElapsedTime","getNextStateStatus","lastState","getNextClipStatuses","_lastState$getClipSta","motionStates","nMotionStates","iMotionState","parentStateMachineInfo","entryEval","anyNode","exitEval","nodeEvaluations","motionStateEval","VMSMEval","SpecialStateEval","any","EmptyStateEval","stateEval","ProceduralPoseStateEval","stateMachineInfo","components","nodeEval","subStateMachineInfos","subStateMachineInfo","InstantiatedComponents","setPrefix_debug","outgoingTemplates","fromNode","toNode","outgoingNode","iOutgoingNode","nodeTemplate","transitionEval","triggers","normalizedDuration","activated","isBound","conditionEval","iCondition","_transitionEval$trigg","addTransition","pendingTransitionPath","matchingSource","prettyPath","lastDestination","loopFormPosition","_matchNextTransition","destinationState","currentMatchingSource","isRealState","_activateTransition","resetTickFlagsAndWeight","parentContext","_commitStateUpdate","updateContextGenerator","testTickFlag","StateTickFlag","UPDATED","setTickFlag","updateContext","_currentNode$evaluate","sumActualBlendedWeight","_currentNode$evaluate2","EVALUATED","_destination$evaluate","destAbsoluteWeight","destPose","empty","sourceState","_matchTransition","_matchAnyScoped","realNode","ancestor","conditionEvaluationContext","outgoingTransitions","nTransitions","nConditions","unset","exitTime","satisfied","prefix","lastTransition","activatedTransition","alloc","_resetTriggersOnTransition","iDetailedTransition","detailedTransition","_callEnterMethods","previousState","EventifiedStateEval","_emit","remainingWeight","lastTransitionIndex","_dropActivatedTransitions","destinationWeight","increaseAbsoluteWeight","activatedTransitionPool","lenSubpath","newCurrentState","lastRealTransition","_callExitMethods","iLastExitingDetailedTransition","nTriggers","iTrigger","triggerResetFn","_triggerReset","_node$stateMachine$co","callMotionStateEnterMethods","callStateMachineEnterMethods","_node$stateMachine$co2","callMotionStateExitMethods","callStateMachineExitMethods","eventBinding","emptyClipStatusesIterator","_emptyClipStatusesIte","StateEval","_activeReferenceCount","_tickFlags","_absoluteWeight","_checkActivated","flag","_StateEval","status","_callMotionStateCallbackIfNonDefault","callMotionStateUpdateMethods","_callStateMachineCallbackIfNonDefault","nComponents","iComponent","_state$motion$createE","_state$motion","_source","_baseSpeed","_speed","_publicState","_privateState","_setSpeedMultiplier","speedMultiplierVarName","initialSpeedMultiplier","sourceEval","VMSMInternalState","_this$_source","_this$_source$duratio","_this$_source2","_EventifiedStateEval","container","containerState","_container","_progress","_port","_statusCache","initialTimeNormalized","_this$_port","stateStatus","normalizeProgress","calcProgressUpdate","_this$_port$evaluate","_this$_port2","currentProgress","signedFrac","_StateEval2","_StateEval3","_EventifiedStateEval2","statusCache","_instantiatedPoseGraph","_elapsedTime","instantiatedPoseGraph","_this$_instantiatedPo","_sourceState","activeReferenceCount","_durationMultiplier","_getAbsoluteDurationUnscaled","fromState","transitionDurationAbsolute","contrib","elapsedTransitionTime","remainTransitionTime","newTransitionProgress","initialCapacity","Pool","transitionInstance","NaN","previousActiveReferenceCount","_this$path$2","destinationStartRatio","_this$path$3","PoseNodeStateMachine","_stateMachineEval","_this$_stateMachineEv","_this$_stateMachineEv2","stateMachineEval","stateMachinePose","PoseNodeSampleMotion","useNormalizedTime","workspace","SampleMotionWorkspace","isIgnorableWeight","PoseNodeAdditivelyBlend","_descriptor3","_this$basePose","_this$additivePose","basePose","additivePose","_this$basePose2","_this$additivePose2","_this$basePose3","_this$additivePose3","_this$basePose4","_this$additivePose4","_this$basePose$evalua","_this$basePose5","PoseNodeBlendInProportion","nInputPoses","iInputPose","_this$poses$iInputPos","inputPoseWeight","proportions","inputPoseUpdateContext","_this$poses$iInputPos2","inputPose","PoseNodeBlendTwoPoseBase","_this$pose","_this$pose2","pose0","pose1","_this$pose3","_this$pose4","_this$pose5","_this$pose6","_this$pose0$evaluate","_this$pose7","_this$pose1$evaluate","_this$pose8","spaceRequirement","doBlend","_PoseNodeBlendTwoPose","PoseNodeBlendTwoPose","PoseNodeFilteringBlend","_transformFilter","IntensityType","POSE_GRAPH_NODE_MENU_PREFIX_CHOOSE","ZERO_ALTERING_DURATION_THRESHOLD","PoseNodeChoosePoseBase","initialChoiceCount","_fadeInDurations","_evaluationRecord","evaluationRecord","EvaluationRecord","getChosenIndex","allWeightsAreZero","nPoses","itemUpdateContext","_poses$iInputPose","itemCount","initialChosenIndex","_chosenPoseIndex","_elapsedTransitionTime","_blendingDuration","ItemEvaluationRecord","selfSourceWeight","selfTargetWeight","newChoseIndex","fadeInDurations","_checkAlternation","blendingDuration","newUniformTransformRatio","selfWeight","oldChoseIndex","newFadeInDuration","max","oldUniformTransitionRatio","_PoseNodeChoosePoseBa","PoseNodeChoosePoseByBoolean","choice","PoseNodeChoosePoseByIndex","IntensitySpecification","auxiliaryCurveName","AUXILIARY_CURVE","VALUE","TransformModification","TransformModificationQueue","_pool","_array","CachedArray","_debugLastTransformIndex","mod","iMod","PoseTransformSpaceFlagTable","_transformFlags","test","applyTransformModificationQueue","queue","spaceFlagTable","nMods","debugLastModTransformIndex","firstTransformToConvert","lastTransformToConvert","_queue$array$_iMod4","_queue$array$_iMod2","PoseNodeModifyPoseBase","TransformOperation","_modificationQueue","_spaceFlagTable","_this$pose$evaluate","getPoseTransformSpaceRequirement","modificationQueue","modifyPose","APPLY_INTENSITY_EPSILON","_PoseNodeModifyPoseBa","PoseNodeApplyTransform","positionOperation","rotationOperation","intensity","nodeName","fullIntensity","nodeTransform","LEAVE_UNCHANGED","rotationSpace","REPLACE","replaceRotation","ADD","addRotation","positionSpace","replacePosition","addPosition","cacheInput","cacheResult","CopySpace","replace","inputPosition","inputRotation","resultRotation","PoseNodeCopyTransform","sourceNodeName","targetNodeName","space","sourceTransformHandle","targetTransformHandle","sourceTransformIndex","hSource","targetTransformIndex","hTarget","SetAuxiliaryCurveFlag","PoseNodeSetAuxiliaryCurve","TwoBoneIKDebugger","_meshRenderer","legacyCC","director","getScene","addChild","material","meshRenderer","MeshRenderer","effectName","primitive","PrimitiveMode","LINE_LIST","defines","USE_VERTEX_COLOR","draw","c","color1","Color","RED","color2","BLUE","positions","colors","w","createMesh","primitiveMode","debuggerMap","debugTwoBoneIKDraw","ikDebugger","cacheDirAT","cacheDirAB","cacheDirHeightLine","cacheSanityChecker","TargetSpecificationType","TwoBoneIKPositionSanityChecker","_a","_dAB","distance","_dBC","check","_b","_c","CHECK_EPSILON","dAB","dBC","solveTwoBoneIK","cacheVec3_1","cacheVec3_2","cacheHint","cacheBSolved","cacheCSolved","calculateRotationBetweenRays","sourceOrigin","sourceDestination","targetOrigin","targetDestination","rotationTo","middle","middlePositionHint","debugKey","pA","pB","pC","bSolved","cSolved","solveTwoBoneIKPositions","qA","qB","middleTarget","sanityCheck","dAT","dirAT","chainLength","cosḂAT","dirAB","dirHeightLine","projectOnPlane","dAD","hSqr","h","sqrt","POSE_GRAPH_NODE_MENU_PREFIX_IK","cacheRootTransform","cacheMiddleTransform","cacheEndEffectorTransform","cacheEndEffectorTargetPosition","cachePoleTargetPosition","cacheTransform_evaluateTarget","TargetSpecification","targetPosition","targetPositionSpace","targetBone","_sourceBoneHandle","_targetBoneHandle","sourceBoneHandle","_context$bindTransfor","BONE","outTargetPosition","NONE","PoseNodeTwoBoneIKSolver","debug","endEffectorBoneName","endEffectorTarget","poleTarget","parentBoneName","ikRootBoneName","hEndEffector","hMiddle","hIKRoot","iRootTransform","hRoot","iMiddleTransform","iEndEffectorTransform","rootTransform","middleTransform","endEffectorTransform","endEffectorTargetPosition","poleTargetPosition","StashRecordState","variables","poseGraphType","PVNodeGetVariableFloat","PVNodeGetVariableInteger","PVNodeGetVariableBoolean","PVNodeGetVariableVec3","PVNodeGetVariableQuat","PVNodeGetVariableBase","_SingleOutputPVNode","_PVNodeGetVariableBas","_this$_varInstance","_PVNodeGetVariableBas2","_this$_varInstance2","_PVNodeGetVariableBas3","_this$_varInstance3","_dec13","_dec14","_PVNodeGetVariableBas4","_this$_varInstance4","_dec15","_dec16","_dec17","_PVNodeGetVariableBas5","_this$_varInstance5","RuntimeMotionSyncManager","_groups","groupName","Group","addMember","sync","_lastLeader","_records","RuntimeMotionSyncRecordImpl","lastLeader","active","kA","firstInactiveRecord","leaderIndex","leaderWeight","leaderNormalizedTime","RuntimeStashRecord","_state","UNINITIALIZED","_maxRequestedUpdateTime","_evaluationCache","stash","UNSETTLED","SETTLED","OUTDATED","UP_TO_DATE","UPDATING","diffDeltaTime","EVALUATING","heapPose","RuntimeStashManager","_stashEvaluations","setStash","DefaultTopLevelPoseNode","bindingContext","poseStashAllocator","_layerRecords","layerEvaluationRecords","LayerEvaluationRecord","layerRecords","getLayerWeight","setLayerWeight","getLayerTopLevelStateMachineEvaluation","stateMachineEvaluation","layerRecord","layerPose","layerActualWeight","postEvaluate","_layer$mask","_topLevelStateMachineEval","_stashManager","_mask","stashManager","_step2$value2","AnimationGraphEval","_currentTransitionCache","_varInstances","_hasAutoTrigger","_poseLayoutMaintainer","_bindingContext","_settleContext","_rootUpdateContextGenerator","NEXT_FRAME_OR_AFTER_CONSUMED","settleContext","_poseStashAllocator","_root","_initializeContexts","_evaluationContext","_destroyAfterException_debugging","stackSize","_stackSize_debugging","evaluationContext","rootUpdateContextGenerator","rootPoseNode","varInstances","varName","allocatedPoseCount","getVariables","currentTransition","overrides","_updateAfterPossiblePoseLayoutChange","getAuxiliaryCurveValue","_createOrUpdateTransformFilters","layoutChangeFlags","evaluationContextRecreated","layerCount","formerlySerializedAs","AnimationController","_Component","_graphEval","__preload","originalGraph","graphEval","onDestroy","_this$_graphEval","_this$_graphEval2","setValue_experimental","getValue_experimental","overrideClips_experimental","getAuxiliaryCurveValue_experimental","_this$_graphEval$laye","_this$_graphEval3","Component","TransformApplyFlag","BlendStateBuffer","_nodeBlendStates","createWriter","constants","propertyBlendState","ref","BlendStateWriterInternal","destroyWriter","writer","internal","deRef","nodeBlendState","createNodeBlendState","refProperty","deRefProperty","_property","_propertyBlendState","_constants","blend","POSITION","ROTATION","SCALE","EULER_ANGLES","LegacyVec3PropertyBlendState","accumulatedWeight","mixAveragedVec3","zero","LegacyQuatPropertyBlendState","mixAveragedQuat","identity","LegacyNodeBlendState","_NodeBlendState","_this$_properties2","_properties","eulerAngles","_transformApplyFlags","_createVec3BlendState","_createQuatBlendState","NodeBlendState","_properties$property","_properties$property2","s","transformApplyFlags","_this$_properties","LegacyBlendStateBuffer","_BlendStateBuffer","previous","newSum","AnimationManager","_System","_anims","_crossFades","_delayEvents","_blendStateBuffer","_sockets","addCrossFade","crossFade","removeCrossFade","fastRemoveAt","dt","crossFadesIter","crossFades","anim","isMotionless","stamp","getTotalFrames","l","getWorldMatrix","event","destruct","addAnimation","removeAnimation","pushDelayEvent","addSockets","sockets","socket","targetNode","removeSockets","socketToRemove","j","deleteTransform","System","ID","on","DirectorEvent","INIT","animationManager","registerSystem","SystemPriority","HIGH","cclegacy"],"mappings":"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"}