{"version":3,"file":"audio.js","sources":["../../../pal/audio/type.ts","../../../pal/audio/operation-queue.ts","../../../pal/audio/web/player-dom.ts","../../../pal/audio/web/player-web.ts","../../../pal/audio/audio-timer.ts","../../../pal/audio/audio-buffer-manager.ts","../../../pal/audio/web/player.ts","../../../cocos/audio/audio-clip.ts","../../../cocos/audio/audio-downloader.ts","../../../cocos/audio/audio-manager.ts","../../../cocos/audio/audio-source.ts","../../../cocos/audio/deprecated.ts","../../../cocos/audio/index.ts"],"sourcesContent":["/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport enum AudioEvent {\r\n    PLAYED = 'play',\r\n    PAUSED = 'pause',\r\n    STOPPED = 'stop',\r\n    SEEKED = 'seeked',\r\n    ENDED = 'ended',\r\n    INTERRUPTION_BEGIN = 'interruptionBegin',\r\n    INTERRUPTION_END = 'interruptionEnd',\r\n    USER_GESTURE = 'on_gesture',  // only web needed\r\n}\r\n\r\nexport enum AudioType {\r\n    DOM_AUDIO,\r\n    WEB_AUDIO,\r\n    MINIGAME_AUDIO,\r\n    NATIVE_AUDIO,\r\n    UNKNOWN_AUDIO,\r\n}\r\n\r\nexport interface AudioLoadOptions {\r\n    audioLoadMode?: AudioType,\r\n}\r\n\r\nexport enum AudioState {\r\n    INIT,\r\n    PLAYING,\r\n    PAUSED,\r\n    STOPPED,\r\n    INTERRUPTED,\r\n}\r\n\r\nexport type AudioBufferView = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;\r\n\r\nexport class AudioPCMDataView {\r\n    private _bufferView: AudioBufferView;\r\n    private _normalizeFactor = 1;\r\n\r\n    constructor (arrayBufferView: AudioBufferView, normalizeFactor: number);\r\n    constructor (arrayBuffer: ArrayBuffer, Ctor: Constructor<AudioBufferView>, normalizeFactor: number);\r\n    constructor (...args: any[]) {\r\n        if (args.length === 2) {\r\n            this._bufferView = args[0] as AudioBufferView;\r\n            this._normalizeFactor = args[1] as number;\r\n        } else {\r\n            const arrayBuffer = args[0] as ArrayBuffer;\r\n            const Ctor = args[1] as Constructor<AudioBufferView>;\r\n            const normalizeFactor = args[2] as number;\r\n            this._bufferView = new Ctor(arrayBuffer);\r\n            this._normalizeFactor = normalizeFactor;\r\n        }\r\n    }\r\n\r\n    get length (): number {\r\n        return this._bufferView.length;\r\n    }\r\n\r\n    public getData (offset: number): number {\r\n        return this._bufferView[offset] * this._normalizeFactor;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EventTarget } from '../../cocos/core';\r\n\r\ntype OperationMethod = (...args: any[]) => Promise<void>;\r\nexport interface OperationInfo {\r\n    op: string;\r\n    id: number;\r\n    func: OperationMethod;\r\n    args: any[],\r\n    invoking: boolean,\r\n}\r\n\r\n/** @mangle */\r\nexport interface OperationQueueable {\r\n    _operationQueue: OperationInfo[];\r\n    _eventTarget: EventTarget;\r\n}\r\n\r\nfunction removeUnneededCalls (instance: OperationQueueable): void {\r\n    const size = instance._operationQueue.length;\r\n    const tmpQueue = instance._operationQueue.slice();\r\n    const reserveOps: OperationInfo[] = [];\r\n    let seekSearched = false;\r\n    for (let i = size - 1; i >= 0; i--) {\r\n        const opInfo = tmpQueue[i];\r\n        if (opInfo.op === 'stop') {\r\n            reserveOps.push(opInfo);\r\n            break;\r\n        } else if (opInfo.op === 'seek') {\r\n            if (!seekSearched) {\r\n                reserveOps.push(opInfo);\r\n                seekSearched = true;\r\n            }\r\n        } else if (seekSearched) {\r\n            reserveOps.push(opInfo);\r\n            break;\r\n        } else if (reserveOps.length === 0) {\r\n            reserveOps.push(opInfo);\r\n        }\r\n    }\r\n    instance._operationQueue = reserveOps.reverse();\r\n}\r\n\r\nlet operationId = 0;\r\nfunction _tryCallingRecursively<T extends OperationQueueable> (target: T, opInfo: OperationInfo): void {\r\n    if (opInfo.invoking) {\r\n        return;\r\n    }\r\n    opInfo.invoking = true;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    opInfo.func.call(target, ...opInfo.args).then(() => {\r\n        opInfo.invoking = false;\r\n        target._operationQueue.shift();\r\n        target._eventTarget.emit(opInfo.id.toString());\r\n        target._eventTarget.off(opInfo.id.toString());    // remove the key from _eventTarget._callbackTable\r\n        removeUnneededCalls(target);\r\n        const nextOpInfo: OperationInfo = target._operationQueue[0];\r\n        if (nextOpInfo) {\r\n            _tryCallingRecursively(target, nextOpInfo);\r\n        }\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    }).catch((e) => {});\r\n}\r\n\r\n/**\r\n * This is a method decorator for media player class such as Audio or Video.\r\n * Most of the operations in media player are asynchronous.\r\n * When all these asynchronous operations are called concurrently, they need to be queued.\r\n *\r\n * Note: the decorated class need to implement the interface `OperationQueueable`\r\n * and the decorated method should be declared as `(...args: any[]): Promise<void>`.\r\n *\r\n * When you apply `enqueueOperation` on a method, remember to provide a pure operation implementation.\r\n * It means that, for example, you can't call stop in the implementation of play operation,\r\n * because that would cause the operation deadlock.\r\n */\r\n// eslint-disable-next-line max-len\r\nexport function enqueueOperation<T extends OperationQueueable> (target: T, propertyKey: string, descriptor: TypedPropertyDescriptor<OperationMethod>): void {\r\n    const originalOperation = descriptor.value!;\r\n    // eslint-disable-next-line func-names\r\n    descriptor.value = function (...args: any[]): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            const id = operationId++;\r\n            const instance = this as OperationQueueable;\r\n            // enqueue operation\r\n            instance._operationQueue.push({\r\n                op: propertyKey,\r\n                id,\r\n                func: originalOperation,\r\n                args,\r\n                invoking: false,\r\n            });\r\n            // call resolve when this operation id is finishied\r\n            instance._eventTarget.once(id.toString(), resolve);\r\n            const opInfo: OperationInfo = instance._operationQueue[0];\r\n            _tryCallingRecursively(instance, opInfo);\r\n        });\r\n    };\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { AudioEvent, AudioState, AudioPCMDataView, AudioType } from '../type';\r\nimport { EventTarget } from '../../../cocos/core/event';\r\nimport { clamp, clamp01 } from '../../../cocos/core';\r\nimport { enqueueOperation, OperationInfo, OperationQueueable } from '../operation-queue';\r\nimport { BrowserType, OS } from '../../system-info/enum-type';\r\nimport { Game, game } from '../../../cocos/game';\r\n\r\nfunction ensurePlaying (domAudio: HTMLAudioElement): Promise<void> {\r\n    return new Promise((resolve) => {\r\n        const promise = domAudio.play();\r\n        if (promise === undefined) {  // Chrome50/Firefox53 below\r\n            return resolve();\r\n        }\r\n        promise.then(resolve).catch((): void => {\r\n            const onGesture = (): void => {\r\n                domAudio.play().then(() => {\r\n                    // HACK NOTE: if the user slide after touch start, the context cannot be resumed correctly.\r\n                    canvas?.removeEventListener('touchend', onGesture, { capture: true });\r\n                    canvas?.removeEventListener('mouseup', onGesture, { capture: true });\r\n                }).catch((e) => {});\r\n                resolve();\r\n            };\r\n            const canvas = document.getElementById('GameCanvas') as HTMLCanvasElement;\r\n            canvas?.addEventListener('touchend', onGesture, { capture: true });\r\n            canvas?.addEventListener('mouseup', onGesture, { capture: true });\r\n        });\r\n        return null;\r\n    });\r\n}\r\n\r\nexport class OneShotAudioDOM {\r\n    private _domAudio: HTMLAudioElement;\r\n    private _onPlayCb?: () => void;\r\n    get onPlay (): (() => void) | undefined {\r\n        return this._onPlayCb;\r\n    }\r\n    set onPlay (cb) {\r\n        this._onPlayCb = cb;\r\n    }\r\n\r\n    private _onEndCb?: () => void;\r\n    get onEnd (): (() => void) | undefined {\r\n        return this._onEndCb;\r\n    }\r\n    set onEnd (cb) {\r\n        if (this._onEndCb) {\r\n            this._domAudio.removeEventListener('ended', this._onEndCb);\r\n        }\r\n        this._onEndCb = cb;\r\n        if (cb) {\r\n            this._domAudio.addEventListener('ended', cb);\r\n        }\r\n    }\r\n\r\n    private constructor (nativeAudio: HTMLAudioElement, volume: number) {\r\n        this._domAudio = nativeAudio;\r\n        nativeAudio.volume =  volume;\r\n    }\r\n    public play (): void {\r\n        ensurePlaying(this._domAudio).then(() => {\r\n            this.onPlay?.();\r\n        }).catch((e) => {});\r\n    }\r\n    public stop (): void {\r\n        this._domAudio.pause();\r\n    }\r\n}\r\n\r\nexport class AudioPlayerDOM implements OperationQueueable {\r\n    private _domAudio: HTMLAudioElement;\r\n    private _state: AudioState = AudioState.INIT;\r\n    private _onEnded: () => void;\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _eventTarget: EventTarget = new EventTarget();\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _operationQueue: OperationInfo[] = [];\r\n\r\n    constructor (nativeAudio: HTMLAudioElement) {\r\n        this._domAudio = nativeAudio;\r\n\r\n        // event\r\n        game.on(Game.EVENT_PAUSE, this._onInterruptedBegin, this);\r\n        game.on(Game.EVENT_RESUME, this._onInterruptedEnd, this);\r\n        this._onEnded = (): void => {\r\n            this.seek(0).catch((e) => {});\r\n            this._state = AudioState.INIT;\r\n            this._eventTarget.emit(AudioEvent.ENDED);\r\n        };\r\n        this._domAudio.addEventListener('ended', this._onEnded);\r\n    }\r\n\r\n    destroy (): void {\r\n        game.off(Game.EVENT_PAUSE, this._onInterruptedBegin, this);\r\n        game.off(Game.EVENT_RESUME, this._onInterruptedEnd, this);\r\n        this._domAudio.removeEventListener('ended', this._onEnded);\r\n        // NOTE: need to release DOM Audio instance\r\n        this._domAudio = null as any;\r\n    }\r\n    static load (url: string): Promise<AudioPlayerDOM> {\r\n        return new Promise((resolve, reject) => {\r\n            AudioPlayerDOM.loadNative(url).then((domAudio) => {\r\n                resolve(new AudioPlayerDOM(domAudio));\r\n            }).catch(reject);\r\n        });\r\n    }\r\n    static loadNative (url: string): Promise<HTMLAudioElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const domAudio = document.createElement('audio');\r\n            let loadedEvent = 'canplaythrough';\r\n            if (systemInfo.os === OS.IOS) {\r\n                // iOS no event that used to parse completed callback\r\n                // this time is not complete, can not play\r\n                loadedEvent = 'loadedmetadata';\r\n            } else if (systemInfo.browserType === BrowserType.FIREFOX) {\r\n                loadedEvent = 'canplay';\r\n            }\r\n\r\n            const timer = setTimeout(() => {\r\n                if (domAudio.readyState === 0) {\r\n                    failure();\r\n                } else {\r\n                    success();\r\n                }\r\n            }, 8000);\r\n            const clearEvent = (): void => {\r\n                clearTimeout(timer);\r\n                domAudio.removeEventListener(loadedEvent, success, false);\r\n                domAudio.removeEventListener('error', failure, false);\r\n            };\r\n            const success = (): void => {\r\n                clearEvent();\r\n                resolve(domAudio);\r\n            };\r\n            const failure = (): void => {\r\n                clearEvent();\r\n                const message = `load audio failure - ${url}`;\r\n                reject(new Error(message));\r\n            };\r\n            domAudio.addEventListener(loadedEvent, success, false);\r\n            domAudio.addEventListener('error', failure, false);\r\n            domAudio.src = url;\r\n        });\r\n    }\r\n    static loadOneShotAudio (url: string, volume: number): Promise<OneShotAudioDOM> {\r\n        return new Promise((resolve, reject) => {\r\n            AudioPlayerDOM.loadNative(url).then((domAudio) => {\r\n                // HACK: AudioPlayer should be a friend class in OneShotAudio\r\n                const oneShotAudio = new (OneShotAudioDOM as any)(domAudio, volume);\r\n                resolve(oneShotAudio);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    private _onInterruptedBegin (): void {\r\n        if (this._state === AudioState.PLAYING) {\r\n            this.pause().then(() => {\r\n                this._state = AudioState.INTERRUPTED;\r\n                this._eventTarget.emit(AudioEvent.INTERRUPTION_BEGIN);\r\n            }).catch((e) => {});\r\n        }\r\n    }\r\n    private _onInterruptedEnd (): void {\r\n        if (this._state === AudioState.INTERRUPTED) {\r\n            this.play().then(() => {\r\n                this._eventTarget.emit(AudioEvent.INTERRUPTION_END);\r\n            }).catch((e) => {});\r\n        }\r\n    }\r\n\r\n    get src (): string {\r\n        return this._domAudio ? this._domAudio.src : '';\r\n    }\r\n    get type (): AudioType {\r\n        return AudioType.DOM_AUDIO;\r\n    }\r\n    get state (): AudioState {\r\n        return this._state;\r\n    }\r\n    get loop (): boolean {\r\n        return this._domAudio.loop;\r\n    }\r\n    set loop (val: boolean) {\r\n        this._domAudio.loop = val;\r\n    }\r\n    get volume (): number {\r\n        return this._domAudio.volume;\r\n    }\r\n    set volume (val: number) {\r\n        val = clamp01(val);\r\n        this._domAudio.volume = val;\r\n    }\r\n    get duration (): number {\r\n        return this._domAudio.duration;\r\n    }\r\n    get currentTime (): number {\r\n        return this._domAudio.currentTime;\r\n    }\r\n\r\n    get sampleRate (): number {\r\n        return 0;\r\n    }\r\n\r\n    public getPCMData (channelIndex: number): AudioPCMDataView | undefined {\r\n        return undefined;\r\n    }\r\n\r\n    @enqueueOperation\r\n    seek (time: number): Promise<void> {\r\n        time = clamp(time, 0, this.duration);\r\n        this._domAudio.currentTime = time;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @enqueueOperation\r\n    play (): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            ensurePlaying(this._domAudio).then(() => {\r\n                this._state = AudioState.PLAYING;\r\n                resolve();\r\n            }).catch((e)  => {});\r\n        });\r\n    }\r\n\r\n    @enqueueOperation\r\n    pause (): Promise<void> {\r\n        this._domAudio.pause();\r\n        this._state = AudioState.PAUSED;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @enqueueOperation\r\n    stop (): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this._domAudio.pause();\r\n            this._domAudio.currentTime = 0;\r\n            this._state = AudioState.STOPPED;\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    onInterruptionBegin (cb: () => void): void { this._eventTarget.on(AudioEvent.INTERRUPTION_BEGIN, cb); }\r\n    offInterruptionBegin (cb?: () => void): void { this._eventTarget.off(AudioEvent.INTERRUPTION_BEGIN, cb); }\r\n    onInterruptionEnd (cb: () => void): void { this._eventTarget.on(AudioEvent.INTERRUPTION_END, cb); }\r\n    offInterruptionEnd (cb?: () => void): void { this._eventTarget.off(AudioEvent.INTERRUPTION_END, cb); }\r\n    onEnded (cb: () => void): void { this._eventTarget.on(AudioEvent.ENDED, cb); }\r\n    offEnded (cb?: () => void): void { this._eventTarget.off(AudioEvent.ENDED, cb); }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { AudioPCMDataView, AudioEvent, AudioState, AudioType } from '../type';\r\nimport { EventTarget } from '../../../cocos/core/event';\r\nimport { clamp01 } from '../../../cocos/core';\r\nimport * as debug from '../../../cocos/core/platform/debug';\r\nimport { enqueueOperation, OperationInfo, OperationQueueable } from '../operation-queue';\r\nimport AudioTimer from '../audio-timer';\r\nimport { audioBufferManager } from '../audio-buffer-manager';\r\nimport { Game, game } from '../../../cocos/game';\r\n\r\n// NOTE: fix CI\r\nconst AudioContextClass = (window.AudioContext || window.webkitAudioContext || window.mozAudioContext);\r\nconst _contextRunningEvent = 'on-context-running';\r\n\r\nexport class AudioContextAgent {\r\n    public static support = !!AudioContextClass;\r\n\r\n    private _eventTarget: EventTarget;\r\n    private _context: AudioContext;\r\n    private _isRunning = false;\r\n    constructor () {\r\n        this._context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();\r\n        this._eventTarget = new EventTarget();\r\n        this._context.onstatechange = (): void => {\r\n            if (this._context.state === 'running') {\r\n                this._isRunning = true;\r\n                this._eventTarget.emit(_contextRunningEvent);\r\n            } else {\r\n                this._isRunning = false;\r\n            }\r\n        };\r\n    }\r\n\r\n    get isRunning (): boolean {\r\n        return this._isRunning;\r\n    }\r\n\r\n    get currentTime (): number {\r\n        return this._context.currentTime;\r\n    }\r\n\r\n    public onceRunning (cb: (...args: any[]) => void, target?: any): void {\r\n        this._eventTarget.once(_contextRunningEvent, cb, target);\r\n    }\r\n\r\n    public offRunning (cb?: (...args: any[]) => void, target?: any): void {\r\n        this._eventTarget.off(_contextRunningEvent, cb, target);\r\n    }\r\n\r\n    public decodeAudioData (audioData: ArrayBuffer): Promise<AudioBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const promise = this._context.decodeAudioData(audioData, (audioBuffer) => {\r\n                resolve(audioBuffer);\r\n            }, (err) => {\r\n                // TODO: need to reject the error.\r\n                // eslint-disable-next-line no-console\r\n                console.error('failed to load Web Audio', err);\r\n            });\r\n            promise?.catch(reject);  // Safari doesn't support the promise based decodeAudioData\r\n        });\r\n    }\r\n\r\n    public runContext (): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            if (this.isRunning) {\r\n                resolve();\r\n                return;\r\n            }\r\n            const context = this._context;\r\n            if (!context.resume) {\r\n                resolve();\r\n                return;\r\n            }\r\n            // only state is suspended can involve resume function\r\n            if (context.state === 'suspended') {\r\n                context.resume().catch((e) => { debug.warn('runContext error', e); });\r\n            } else if (context.state === 'running') {\r\n                resolve();\r\n                return;\r\n            }\r\n            // Force running audio context if state is not 'running', may be 'suspended' or 'interrupted'.\r\n            const canvas = document.getElementById('GameCanvas') as HTMLCanvasElement;\r\n            // HACK NOTE: if the user slide after touch start, the context cannot be resumed correctly.\r\n            const onGesture = (): void => {\r\n                context.resume().then(() => {\r\n                    canvas?.removeEventListener('touchend', onGesture, { capture: true });\r\n                    canvas?.removeEventListener('mouseup', onGesture, { capture: true });\r\n                    resolve();\r\n                }).catch((e) => { debug.warn('onGesture resume error', e); });\r\n            };\r\n            canvas?.addEventListener('touchend', onGesture, { capture: true });\r\n            canvas?.addEventListener('mouseup', onGesture, { capture: true });\r\n        });\r\n    }\r\n\r\n    public createBufferSource (audioBuffer?: AudioBuffer, loop?: boolean): AudioBufferSourceNode {\r\n        const sourceBufferNode = this._context.createBufferSource();\r\n        if (audioBuffer !== undefined) {\r\n            sourceBufferNode.buffer = audioBuffer;\r\n        }\r\n        if (loop !== undefined) {\r\n            sourceBufferNode.loop = loop;\r\n        }\r\n        return sourceBufferNode;\r\n    }\r\n\r\n    public createGain (volume = 1): GainNode {\r\n        const gainNode = this._context.createGain();\r\n        this.setGainValue(gainNode, volume);\r\n        return gainNode;\r\n    }\r\n\r\n    public setGainValue (gain: GainNode, volume: number): void {\r\n        if (gain.gain.setTargetAtTime) {\r\n            try {\r\n                gain.gain.setTargetAtTime(volume, this._context.currentTime, 0);\r\n            } catch (e) {\r\n                // Some unknown browsers may crash if timeConstant is 0\r\n                gain.gain.setTargetAtTime(volume, this._context.currentTime, 0.01);\r\n            }\r\n        } else {\r\n            gain.gain.value = volume;\r\n        }\r\n    }\r\n\r\n    public connectContext (audioNode: GainNode): void {\r\n        if (!this._context) {\r\n            return;\r\n        }\r\n        audioNode.connect(this._context.destination);\r\n    }\r\n}\r\n\r\nlet audioContextAgent: AudioContextAgent | undefined;\r\nif (AudioContextAgent.support) {\r\n    audioContextAgent = new AudioContextAgent();\r\n}\r\n\r\nexport class OneShotAudioWeb {\r\n    private _duration: number;\r\n    private _bufferSourceNode: AudioBufferSourceNode;\r\n    private _onPlayCb?: () => void;\r\n    private _currentTimer = 0;\r\n    private _url: string;\r\n\r\n    get onPlay (): (() => void) | undefined {\r\n        return this._onPlayCb;\r\n    }\r\n    set onPlay (cb) {\r\n        this._onPlayCb = cb;\r\n    }\r\n\r\n    private _onEndCb?: () => void;\r\n    get onEnd (): (() => void) | undefined {\r\n        return this._onEndCb;\r\n    }\r\n    set onEnd (cb) {\r\n        this._onEndCb = cb;\r\n    }\r\n\r\n    private constructor (audioBuffer: AudioBuffer, volume: number, url: string) {\r\n        this._duration = audioBuffer.duration;\r\n        this._url = url;\r\n        this._bufferSourceNode = audioContextAgent!.createBufferSource(audioBuffer, false);\r\n        const gainNode = audioContextAgent!.createGain(volume);\r\n        this._bufferSourceNode.connect(gainNode);\r\n        audioContextAgent!.connectContext(gainNode);\r\n    }\r\n\r\n    public play (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            return;\r\n        }\r\n        this._bufferSourceNode.start();\r\n        // audioContextAgent does exist\r\n        audioContextAgent!.runContext().then(() => {\r\n            this.onPlay?.();\r\n            this._currentTimer = window.setTimeout(() => {\r\n                audioBufferManager.tryReleasingCache(this._url);\r\n                this.onEnd?.();\r\n            }, this._duration * 1000);\r\n        }).catch((e) => { debug.warn('play error', e); });\r\n    }\r\n\r\n    public stop (): void {\r\n        clearTimeout(this._currentTimer);\r\n        audioBufferManager.tryReleasingCache(this._url);\r\n        this._bufferSourceNode.stop();\r\n        this._bufferSourceNode.disconnect();\r\n        this._bufferSourceNode.buffer = null;\r\n    }\r\n}\r\n\r\nexport class AudioPlayerWeb implements OperationQueueable {\r\n    private _src: string;\r\n    private _audioBuffer: AudioBuffer;\r\n    private _sourceNode?: AudioBufferSourceNode;\r\n    private _gainNode: GainNode;\r\n    private _currentTimer = 0;\r\n    private _volume = 1;\r\n    private _loop = false;\r\n    private _state: AudioState = AudioState.INIT;\r\n    private _audioTimer: AudioTimer;\r\n    private _runningCallback?: () => void;\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _eventTarget: EventTarget = new EventTarget();\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _operationQueue: OperationInfo[] = [];\r\n\r\n    constructor (audioBuffer: AudioBuffer, url: string) {\r\n        this._audioBuffer = audioBuffer;\r\n        this._audioTimer = new AudioTimer(audioBuffer);\r\n        this._gainNode = audioContextAgent!.createGain();\r\n        audioContextAgent!.connectContext(this._gainNode);\r\n        this._src = url;\r\n        // event\r\n        game.on(Game.EVENT_PAUSE, this._onInterruptedBegin, this);\r\n        game.on(Game.EVENT_RESUME, this._onInterruptedEnd, this);\r\n    }\r\n    destroy (): void {\r\n        window.clearTimeout(this._currentTimer);\r\n        this._audioTimer.destroy();\r\n        if (this._audioBuffer) {\r\n            // NOTE: need to release AudioBuffer instance\r\n            this._audioBuffer = null as any;\r\n        }\r\n        audioBufferManager.tryReleasingCache(this._src);\r\n        game.off(Game.EVENT_PAUSE, this._onInterruptedBegin, this);\r\n        game.off(Game.EVENT_RESUME, this._onInterruptedEnd, this);\r\n        this.offRunning();\r\n    }\r\n    static load (url: string): Promise<AudioPlayerWeb> {\r\n        return new Promise((resolve, reject) => {\r\n            AudioPlayerWeb.loadNative(url).then((audioBuffer) => {\r\n                resolve(new AudioPlayerWeb(audioBuffer, url));\r\n            }).catch(reject);\r\n        });\r\n    }\r\n    static loadNative (url: string): Promise<AudioBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            const cachedAudioBuffer = audioBufferManager.getCache(url);\r\n            if (cachedAudioBuffer) {\r\n                audioBufferManager.retainCache(url);\r\n                resolve(cachedAudioBuffer);\r\n                return;\r\n            }\r\n            const xhr = new XMLHttpRequest();\r\n            const errInfo = `load audio failed: ${url}, status: `;\r\n            xhr.open('GET', url, true);\r\n            xhr.responseType = 'arraybuffer';\r\n\r\n            xhr.onload = (): void => {\r\n                if (xhr.status === 200 || xhr.status === 0) {\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                    audioContextAgent!.decodeAudioData(xhr.response).then((decodedAudioBuffer) => {\r\n                        audioBufferManager.addCache(url, decodedAudioBuffer);\r\n                        resolve(decodedAudioBuffer);\r\n                    }).catch((e) => { debug.warn('loadNative error', url, e); });\r\n                } else {\r\n                    reject(new Error(`${errInfo}${xhr.status}(no response)`));\r\n                }\r\n            };\r\n            xhr.onerror = (): void => { reject(new Error(`${errInfo}${xhr.status}(error)`)); };\r\n            xhr.ontimeout = (): void => { reject(new Error(`${errInfo}${xhr.status}(time out)`)); };\r\n            xhr.onabort = (): void => { reject(new Error(`${errInfo}${xhr.status}(abort)`)); };\r\n\r\n            xhr.send(null);\r\n        });\r\n    }\r\n    static loadOneShotAudio (url: string, volume: number): Promise<OneShotAudioWeb> {\r\n        return new Promise((resolve, reject) => {\r\n            AudioPlayerWeb.loadNative(url).then((audioBuffer) => {\r\n                // HACK: AudioPlayer should be a friend class in OneShotAudio\r\n                const oneShotAudio = new (OneShotAudioWeb as any)(audioBuffer, volume, url);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                resolve(oneShotAudio);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    get sampleRate (): number {\r\n        return this._audioBuffer.sampleRate;\r\n    }\r\n\r\n    public getPCMData (channelIndex: number): AudioPCMDataView | undefined {\r\n        return new AudioPCMDataView(this._audioBuffer.getChannelData(channelIndex), 1);\r\n    }\r\n\r\n    private _onInterruptedBegin (): void {\r\n        if (this._state === AudioState.PLAYING) {\r\n            this.pause().then(() => {\r\n                this._state = AudioState.INTERRUPTED;\r\n                this._eventTarget.emit(AudioEvent.INTERRUPTION_BEGIN);\r\n            }).catch((e) => { debug.warn('_onInterruptedBegin error', e); });\r\n        }\r\n    }\r\n    private _onInterruptedEnd (): void {\r\n        if (this._state === AudioState.INTERRUPTED) {\r\n            this.play().then(() => {\r\n                this._eventTarget.emit(AudioEvent.INTERRUPTION_END);\r\n            }).catch((e) => { debug.warn('_onInterruptedEnd error', e); });\r\n        }\r\n    }\r\n\r\n    get src (): string {\r\n        return this._src;\r\n    }\r\n    get type (): AudioType {\r\n        return AudioType.WEB_AUDIO;\r\n    }\r\n    get state (): AudioState {\r\n        return this._state;\r\n    }\r\n    get loop (): boolean {\r\n        return this._loop;\r\n    }\r\n    set loop (val: boolean) {\r\n        this._loop = val;\r\n        if (this._sourceNode) {\r\n            this._sourceNode.loop = val;\r\n        }\r\n    }\r\n    get volume (): number {\r\n        return this._volume;\r\n    }\r\n    set volume (val: number) {\r\n        val = clamp01(val);\r\n        this._volume = val;\r\n        audioContextAgent!.setGainValue(this._gainNode, val);\r\n    }\r\n    get duration (): number {\r\n        return this._audioBuffer.duration;\r\n    }\r\n    get currentTime (): number {\r\n        return this._audioTimer.currentTime;\r\n    }\r\n    private offRunning (): void {\r\n        if (this._runningCallback) {\r\n            audioContextAgent!.offRunning(this._runningCallback);\r\n            this._runningCallback = undefined;\r\n        }\r\n    }\r\n\r\n    @enqueueOperation\r\n    seek (time: number): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            this.offRunning();\r\n            this._audioTimer.seek(time);\r\n            if (this._state === AudioState.PLAYING) {\r\n                // one AudioBufferSourceNode can't start twice\r\n                // need to create a new one to start from the offset\r\n                this._doPlay().then(resolve).catch((e) => { debug.warn('seek error', e); });\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    @enqueueOperation\r\n    play (): Promise<void> {\r\n        this.offRunning();\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            return Promise.resolve();\r\n        }\r\n        return this._doPlay();\r\n    }\r\n\r\n    // The decorated play() method can't be call in seek()\r\n    // so we define this method to ensure that the audio seeking works.\r\n    private _doPlay (): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            if (audioContextAgent!.isRunning) {\r\n                this._startSourceNode();\r\n                resolve();\r\n            } else {\r\n                this.offRunning();\r\n                this._runningCallback = (): void => {\r\n                    this._startSourceNode();\r\n                    resolve();\r\n                };\r\n                // Running event may be emit when:\r\n                // - manually resume audio context.\r\n                // - system automatically resume audio context when enter foreground from background.\r\n                audioContextAgent!.onceRunning(this._runningCallback);\r\n                // Ensure resume context.\r\n                audioContextAgent!.runContext().catch((e) => { debug.warn('doPlay error', e); });\r\n            }\r\n        });\r\n    }\r\n\r\n    private _startSourceNode (): void {\r\n        // one AudioBufferSourceNode can't start twice\r\n        this._stopSourceNode();\r\n        this._sourceNode = audioContextAgent!.createBufferSource(this._audioBuffer, this.loop);\r\n        this._sourceNode.connect(this._gainNode);\r\n        this._sourceNode.loop = this._loop;\r\n        this._sourceNode.start(0, this._audioTimer.currentTime);\r\n        this._state = AudioState.PLAYING;\r\n        this._audioTimer.start();\r\n\r\n        /* still not supported by all platforms *\r\n        this._sourceNode.onended = this._onEnded;\r\n        /* doing it manually for now */\r\n        const checkEnded = (): void => {\r\n            if (this.loop) {\r\n                this._currentTimer = window.setTimeout(checkEnded, this._audioBuffer.duration * 1000);\r\n            } else {  // do ended\r\n                this._audioTimer.stop();\r\n                this._eventTarget.emit(AudioEvent.ENDED);\r\n                this._state = AudioState.INIT;\r\n            }\r\n        };\r\n        window.clearTimeout(this._currentTimer);\r\n        this._currentTimer = window.setTimeout(checkEnded, (this._audioBuffer.duration - this._audioTimer.currentTime) * 1000);\r\n    }\r\n\r\n    private _stopSourceNode (): void {\r\n        try {\r\n            if (this._sourceNode) {\r\n                this._sourceNode.stop();\r\n                this._sourceNode.disconnect();\r\n                this._sourceNode.buffer = null;\r\n                this._sourceNode = undefined;\r\n            }\r\n        } catch (e) {\r\n            // sourceNode can't be stopped twice, especially on Safari.\r\n        }\r\n    }\r\n\r\n    @enqueueOperation\r\n    pause (): Promise<void> {\r\n        this.offRunning();\r\n        if (this._state !== AudioState.PLAYING || !this._sourceNode) {\r\n            return Promise.resolve();\r\n        }\r\n        this._audioTimer.pause();\r\n        this._state = AudioState.PAUSED;\r\n        window.clearTimeout(this._currentTimer);\r\n        this._stopSourceNode();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    @enqueueOperation\r\n    stop (): Promise<void> {\r\n        this.offRunning();\r\n        if (!this._sourceNode) {\r\n            this._audioTimer.stop();\r\n            this._state = AudioState.STOPPED;\r\n            return Promise.resolve();\r\n        }\r\n        this._audioTimer.stop();\r\n        this._state = AudioState.STOPPED;\r\n        window.clearTimeout(this._currentTimer);\r\n        this._stopSourceNode();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    onInterruptionBegin (cb: () => void): void { this._eventTarget.on(AudioEvent.INTERRUPTION_BEGIN, cb); }\r\n    offInterruptionBegin (cb?: () => void): void { this._eventTarget.off(AudioEvent.INTERRUPTION_BEGIN, cb); }\r\n    onInterruptionEnd (cb: () => void): void { this._eventTarget.on(AudioEvent.INTERRUPTION_END, cb); }\r\n    offInterruptionEnd (cb?: () => void): void { this._eventTarget.off(AudioEvent.INTERRUPTION_END, cb); }\r\n    onEnded (cb: () => void): void { this._eventTarget.on(AudioEvent.ENDED, cb); }\r\n    offEnded (cb?: () => void): void { this._eventTarget.off(AudioEvent.ENDED, cb); }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { clamp } from '../../cocos/core/math/utils';\r\n\r\n/**\r\n * Tool class to calculate audio current time.\r\n * For some platforms where audio.currentTime doesn't work well or isn't implemented.\r\n */\r\n\r\ninterface IDuration {\r\n    duration: number;\r\n}\r\n\r\nexport default class AudioTimer {\r\n    private _nativeAudio: IDuration;\r\n    private _startTime = 0;\r\n    private _startOffset = 0;\r\n    private _isPaused = true;\r\n\r\n    constructor (nativeAudio: IDuration) {\r\n        this._nativeAudio = nativeAudio;\r\n    }\r\n\r\n    public destroy (): void {\r\n        // NOTE: 'undefined' is not assignable to type 'IDuration'\r\n        this._nativeAudio = undefined as any;\r\n    }\r\n\r\n    get duration (): number {\r\n        return this._nativeAudio.duration;\r\n    }\r\n\r\n    /**\r\n     * Get the current time of audio timer.\r\n     */\r\n    get currentTime (): number {\r\n        if (this._isPaused) {\r\n            return this._startOffset;\r\n        } else {\r\n            return this._calculateCurrentTime();\r\n        }\r\n    }\r\n\r\n    private _now (): number {\r\n        return performance.now() / 1000;\r\n    }\r\n\r\n    private _calculateCurrentTime (): number {\r\n        const timePassed = this._now() - this._startTime;\r\n        const currentTime = this._startOffset + timePassed;\r\n        if (currentTime >= this.duration) {\r\n            // timer loop\r\n            this._startTime = this._now();\r\n            this._startOffset = 0;\r\n        }\r\n        return currentTime % this.duration;\r\n    }\r\n\r\n    /**\r\n     * Start the audio timer.\r\n     * Call this method when audio is played.\r\n     */\r\n    start (): void {\r\n        this._isPaused = false;\r\n        this._startTime = this._now();\r\n    }\r\n\r\n    /**\r\n     * Pause the audio timer.\r\n     * Call this method when audio is paused or interrupted.\r\n     */\r\n    pause (): void {\r\n        if (this._isPaused) {\r\n            return;\r\n        }\r\n        this._isPaused = true;\r\n        this._startOffset = this._calculateCurrentTime();\r\n    }\r\n\r\n    /**\r\n     * Stop the audio timer.\r\n     * Call this method when audio playing ended or audio is stopped.\r\n     */\r\n    stop (): void {\r\n        this._isPaused = true;\r\n        this._startOffset = 0;\r\n    }\r\n\r\n    /**\r\n     * Seek the audio timer.\r\n     * Call this method when audio is seeked.\r\n     */\r\n    seek (time: number): void {\r\n        this._startTime = this._now();\r\n        this._startOffset = clamp(time, 0, this.duration);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { warnID } from '../../cocos/core/platform/debug';\r\n\r\n/** @mangle */\r\ninterface CachedAudioBufferData {\r\n    usedCount: number,\r\n    audioBuffer: AudioBuffer,\r\n}\r\n\r\ninterface AudioBufferDataMap {\r\n    [url: string]: CachedAudioBufferData;\r\n}\r\n\r\n/**\r\n * This is a manager to manage the cache of audio buffer for web audio.\r\n * @mangle\r\n */\r\nclass AudioBufferManager {\r\n    private _audioBufferDataMap: AudioBufferDataMap = {};\r\n\r\n    public addCache (url: string, audioBuffer: AudioBuffer): void {\r\n        const audioBufferData = this._audioBufferDataMap[url];\r\n        if (audioBufferData) {\r\n            warnID(5204, url);\r\n            return;\r\n        }\r\n        this._audioBufferDataMap[url] = {\r\n            usedCount: 1,\r\n            audioBuffer,\r\n        };\r\n    }\r\n\r\n    public retainCache (url: string): void {\r\n        const audioBufferData = this._audioBufferDataMap[url];\r\n        if (!audioBufferData) {\r\n            warnID(5203, url);\r\n            return;\r\n        }\r\n        audioBufferData.usedCount++;\r\n    }\r\n\r\n    public getCache (url: string): AudioBuffer | null | undefined {\r\n        const audioBufferData = this._audioBufferDataMap[url];\r\n        return audioBufferData?.audioBuffer;\r\n    }\r\n\r\n    public tryReleasingCache (url: string): void {\r\n        const audioBufferData = this._audioBufferDataMap[url];\r\n        if (!audioBufferData) {\r\n            warnID(5203, url);\r\n            return;\r\n        }\r\n        if (--audioBufferData.usedCount <= 0) {\r\n            delete this._audioBufferDataMap[url];\r\n        }\r\n    }\r\n}\r\n\r\nexport const audioBufferManager = new AudioBufferManager();\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { warnID } from '../../../cocos/core';\r\nimport { AudioLoadOptions, AudioType, AudioState, AudioPCMDataView } from '../type';\r\nimport { AudioPlayerDOM, OneShotAudioDOM } from './player-dom';\r\nimport { AudioContextAgent, AudioPlayerWeb, OneShotAudioWeb } from './player-web';\r\n\r\ntype AbstractOneShotAudio = OneShotAudioDOM | OneShotAudioWeb;\r\ntype AbstractAudioPlayer = AudioPlayerDOM | AudioPlayerWeb;\r\n\r\nexport class OneShotAudio {\r\n    private _audio:  AbstractOneShotAudio;\r\n    get onPlay (): (() => void) | undefined {\r\n        return this._audio.onPlay;\r\n    }\r\n    set onPlay (v) {\r\n        this._audio.onPlay = v;\r\n    }\r\n\r\n    get onEnd (): (() => void) | undefined {\r\n        return this._audio.onEnd;\r\n    }\r\n    set onEnd (v) {\r\n        this._audio.onEnd = v;\r\n    }\r\n\r\n    private constructor (audio: AbstractOneShotAudio) {\r\n        this._audio = audio;\r\n    }\r\n    public play (): void {\r\n        this._audio.play();\r\n    }\r\n    public stop (): void {\r\n        this._audio.stop();\r\n    }\r\n}\r\n\r\nexport class AudioPlayer {\r\n    private _player: AbstractAudioPlayer;\r\n    constructor (player: AbstractAudioPlayer) {\r\n        this._player = player;\r\n    }\r\n\r\n    static load (url: string, opts?: AudioLoadOptions): Promise<AudioPlayer> {\r\n        return new Promise((resolve, reject) => {\r\n            if (opts?.audioLoadMode === AudioType.DOM_AUDIO || !AudioContextAgent.support) {\r\n                if (!AudioContextAgent.support) { warnID(5201); }\r\n                AudioPlayerDOM.load(url).then((domPlayer) => {\r\n                    resolve(new AudioPlayer(domPlayer));\r\n                }).catch(reject);\r\n            } else {\r\n                AudioPlayerWeb.load(url).then((webPlayer) => {\r\n                    resolve(new AudioPlayer(webPlayer));\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n    destroy (): void {\r\n        this._player.destroy();\r\n    }\r\n    static loadNative (url: string, opts?: AudioLoadOptions): Promise<unknown> {\r\n        if (opts?.audioLoadMode === AudioType.DOM_AUDIO || !AudioContextAgent.support) {\r\n            if (!AudioContextAgent.support) { warnID(5201); }\r\n            return AudioPlayerDOM.loadNative(url);\r\n        }\r\n        return AudioPlayerWeb.loadNative(url);\r\n    }\r\n    static loadOneShotAudio (url: string, volume: number, opts?: AudioLoadOptions): Promise<OneShotAudio> {\r\n        return new Promise((resolve, reject) => {\r\n            if (opts?.audioLoadMode === AudioType.DOM_AUDIO || !AudioContextAgent.support) {\r\n                if (!AudioContextAgent.support) { warnID(5201); }\r\n                AudioPlayerDOM.loadOneShotAudio(url, volume).then((oneShotAudioDOM) => {\r\n                    // HACK: AudioPlayer should be a friend class in OneShotAudio\r\n                    resolve(new (OneShotAudio as any)(oneShotAudioDOM));\r\n                }).catch(reject);\r\n            } else {\r\n                AudioPlayerWeb.loadOneShotAudio(url, volume).then((oneShotAudioWeb) => {\r\n                    // HACK: AudioPlayer should be a friend class in OneShotAudio\r\n                    resolve(new (OneShotAudio as any)(oneShotAudioWeb));\r\n                }).catch(reject);\r\n            }\r\n        });\r\n    }\r\n    static readonly maxAudioChannel = 24;\r\n\r\n    get src (): string { return this._player.src; }\r\n    get type (): AudioType { return this._player.type; }\r\n    get state (): AudioState { return this._player.state; }\r\n    get loop (): boolean { return this._player.loop; }\r\n    set loop (val: boolean) { this._player.loop = val; }\r\n    get volume (): number { return this._player.volume; }\r\n    set volume (val: number) { this._player.volume = val; }\r\n    get duration (): number { return this._player.duration; }\r\n    get currentTime (): number { return this._player.currentTime; }\r\n    get sampleRate (): number { return this._player.sampleRate; }\r\n    getPCMData (channelIndex: number): AudioPCMDataView | undefined { return this._player.getPCMData(channelIndex); }\r\n    seek (time: number): Promise<void> { return this._player.seek(time); }\r\n\r\n    play (): Promise<void> { return this._player.play(); }\r\n    pause (): Promise<void> {  return this._player.pause(); }\r\n    stop (): Promise<void> { return this._player.stop(); }\r\n    onInterruptionBegin (cb: () => void): void { this._player.onInterruptionBegin(cb); }\r\n    offInterruptionBegin (cb?: () => void): void { this._player.offInterruptionBegin(cb); }\r\n    onInterruptionEnd (cb: () => void): void { this._player.onInterruptionEnd(cb); }\r\n    offInterruptionEnd (cb?: () => void): void { this._player.offInterruptionEnd(cb); }\r\n    onEnded (cb: () => void): void { this._player.onEnded(cb); }\r\n    offEnded (cb?: () => void): void { this._player.offEnded(cb); }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable, override } from 'cc.decorator';\r\nimport { AudioPlayer } from 'pal/audio';\r\nimport { Asset } from '../asset/assets/asset';\r\nimport { cclegacy } from '../core';\r\nimport { AudioState, AudioType } from '../../pal/audio/type';\r\n\r\nexport interface AudioMeta {\r\n    player: AudioPlayer | null,\r\n    url: string;\r\n    type: AudioType;\r\n    duration: number;\r\n}\r\n\r\n/**\r\n * @en\r\n * The audio clip asset.\r\n * @zh\r\n * 音频片段资源。\r\n */\r\n@ccclass('cc.AudioClip')\r\nexport class AudioClip extends Asset {\r\n    public static AudioType = AudioType;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public set duration (v: number) {\r\n        this._duration = v;\r\n    }\r\n    @serializable\r\n    protected _duration = 0; // we serialize this because it's unavailable at runtime on some platforms\r\n\r\n    protected _loadMode = AudioType.UNKNOWN_AUDIO;\r\n\r\n    protected _meta: AudioMeta | null = null;\r\n\r\n    private _player: AudioPlayer | null = null;\r\n\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public destroy (): boolean {\r\n        const destroyResult = super.destroy();\r\n        this._player?.destroy();\r\n        this._player = null;\r\n        if (this._meta) {\r\n            this._meta.player = null;\r\n        }\r\n        return destroyResult;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    set _nativeAsset (meta: AudioMeta | null) {\r\n        this._meta = meta;\r\n        if (meta) {\r\n            this._loadMode = meta.type;\r\n            this._player = meta.player;\r\n        } else {\r\n            this._meta = null;\r\n            this._loadMode = AudioType.UNKNOWN_AUDIO;\r\n            this._duration = 0;\r\n        }\r\n    }\r\n    get _nativeAsset (): AudioMeta | null {\r\n        return this._meta;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @override\r\n    get _nativeDep (): {\r\n        uuid: string;\r\n        audioLoadMode: AudioType;\r\n        ext: string;\r\n        __isNative__: boolean;\r\n        } {\r\n        return {\r\n            uuid: this._uuid,\r\n            audioLoadMode: this.loadMode,\r\n            ext: this._native,\r\n            __isNative__: true,\r\n        };\r\n    }\r\n\r\n    get loadMode (): AudioType {\r\n        return this._loadMode;\r\n    }\r\n\r\n    public validate (): boolean {\r\n        return !!this._meta;\r\n    }\r\n\r\n    public getDuration (): number {\r\n        // Dynamicly loaded audioClip._duration is 0\r\n        if (this._duration) {\r\n            return this._duration;\r\n        }\r\n        return this._meta ? this._meta.duration : 0;\r\n    }\r\n\r\n    // #region deprecated method\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.state instead.\r\n     */\r\n    public get state (): AudioState {\r\n        return this._player ? this._player.state : AudioState.INIT;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.getCurrentTime() instead.\r\n     */\r\n    public getCurrentTime (): number {\r\n        return this._player ? this._player.currentTime : 0;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.getVolume() instead.\r\n     */\r\n    public getVolume (): number {\r\n        return this._player ? this._player.volume : 0;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.getLoop() instead.\r\n     */\r\n    public getLoop (): boolean {\r\n        return this._player ? this._player.loop : false;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.setCurrentTime() instead.\r\n     */\r\n    public setCurrentTime (time: number): void {\r\n        this._player?.seek(time).catch((e) => {});\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.setVolume() instead.\r\n     */\r\n    public setVolume (volume: number): void {\r\n        if (this._player) {\r\n            this._player.volume = volume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.setLoop() instead.\r\n     */\r\n    public setLoop (loop: boolean): void {\r\n        if (this._player) {\r\n            this._player.loop = loop;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.play() instead.\r\n     */\r\n    public play (): void {\r\n        this._player?.play().catch((e) => {});\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.pause() instead.\r\n     */\r\n    public pause (): void {\r\n        this._player?.pause().catch((e) => {});\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.stop() instead.\r\n     */\r\n    public stop (): void {\r\n        this._player?.stop().catch((e) => {});\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.1.0, please use AudioSource.prototype.playOneShot() instead.\r\n     */\r\n    public playOneShot (volume = 1): void {\r\n        if (this._nativeAsset) {\r\n            AudioPlayer.loadOneShotAudio(this._nativeAsset.url, volume).then((oneShotAudio) => {\r\n                oneShotAudio.play();\r\n            }).catch((e) => {});\r\n        }\r\n    }\r\n    // #endregion deprecated method\r\n}\r\n\r\ncclegacy.AudioClip = AudioClip;\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { AudioPlayer } from 'pal/audio';\r\nimport { AudioClip, AudioMeta } from './audio-clip';\r\nimport downloader from '../asset/asset-manager/downloader';\r\nimport factory from '../asset/asset-manager/factory';\r\n\r\nexport function loadAudioPlayer (url: string, options: Record<string, any>, onComplete: ((err: Error | null, data?: any | null) => void)): void {\r\n    AudioPlayer.load(url, {\r\n        audioLoadMode: options.audioLoadMode,\r\n    }).then((player) => {\r\n        const audioMeta: AudioMeta = {\r\n            player,\r\n            url,\r\n            duration: player.duration,\r\n            type: player.type,\r\n        };\r\n        onComplete(null, audioMeta);\r\n    }).catch((err) => {\r\n        onComplete(err);\r\n    });\r\n}\r\n\r\nfunction createAudioClip (id: string,\r\n    data: AudioMeta,\r\n    options: Record<string, any>,\r\n    onComplete: ((err: Error | null, data?: AudioClip | null) => void)): void {\r\n    const out = new AudioClip();\r\n    out._nativeUrl = id;\r\n    out._nativeAsset = data;\r\n    out.duration = data.duration;\r\n    onComplete(null, out);\r\n}\r\n\r\ndownloader.register({\r\n    '.mp3': loadAudioPlayer,\r\n    '.ogg': loadAudioPlayer,\r\n    '.wav': loadAudioPlayer,\r\n    '.m4a': loadAudioPlayer,\r\n});\r\n\r\nfactory.register({\r\n    // Audio\r\n    '.mp3': createAudioClip,\r\n    '.ogg': createAudioClip,\r\n    '.wav': createAudioClip,\r\n    '.m4a': createAudioClip,\r\n});\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { AudioPlayer, OneShotAudio } from 'pal/audio';\r\nimport { js } from '../core';\r\n\r\ntype ManagedAudio = AudioPlayer | OneShotAudio;\r\n\r\n/** @mangle */\r\ninterface AudioInfo<T> {\r\n    audio: T;\r\n    playTime: number;\r\n}\r\n\r\n/** @mangle */\r\nexport class AudioManager {\r\n    private _oneShotAudioInfoList: AudioInfo<OneShotAudio>[] = [];\r\n    private _audioPlayerInfoList: AudioInfo<AudioPlayer>[] = [];\r\n\r\n    constructor () {}\r\n\r\n    private _findIndex (audioInfoList: AudioInfo<ManagedAudio>[], audio: ManagedAudio): number {\r\n        return audioInfoList.findIndex((item) => item.audio === audio);\r\n    }\r\n\r\n    private _tryAddPlaying (audioInfoList: AudioInfo<ManagedAudio>[], audio: ManagedAudio): boolean {\r\n        const idx = this._findIndex(audioInfoList, audio);\r\n        if (idx > -1) {\r\n            // update play time\r\n            audioInfoList[idx].playTime = performance.now();\r\n            return false;\r\n        }\r\n\r\n        const audioInfo: AudioInfo<ManagedAudio> = {\r\n            audio,\r\n            playTime: performance.now(),\r\n        };\r\n\r\n        audioInfoList.push(audioInfo);\r\n        return true;\r\n    }\r\n    public addPlaying (audio: ManagedAudio): void {\r\n        if (audio instanceof AudioPlayer) {\r\n            this._tryAddPlaying(this._audioPlayerInfoList, audio);\r\n        } else {\r\n            this._tryAddPlaying(this._oneShotAudioInfoList, audio);\r\n        }\r\n    }\r\n\r\n    private _tryRemovePlaying (audioInfoList: AudioInfo<ManagedAudio>[], audio: ManagedAudio): boolean {\r\n        const idx = this._findIndex(audioInfoList, audio);\r\n        if (idx === -1) {\r\n            return false;\r\n        }\r\n        js.array.fastRemoveAt(audioInfoList, idx);\r\n        return true;\r\n    }\r\n    public removePlaying (audio: ManagedAudio): void {\r\n        if (audio instanceof AudioPlayer) {\r\n            this._tryRemovePlaying(this._audioPlayerInfoList, audio);\r\n        } else {\r\n            this._tryRemovePlaying(this._oneShotAudioInfoList, audio);\r\n        }\r\n    }\r\n\r\n    public discardOnePlayingIfNeeded (): void {\r\n        if (this._audioPlayerInfoList.length + this._oneShotAudioInfoList.length < AudioPlayer.maxAudioChannel) {\r\n            return;\r\n        }\r\n\r\n        // TODO: support discard policy for audio source\r\n        let audioInfoToDiscard: AudioInfo<ManagedAudio> | undefined;\r\n        if (this._oneShotAudioInfoList.length > 0) {\r\n            this._oneShotAudioInfoList.forEach((audioInfo) => {\r\n                if (!audioInfoToDiscard || audioInfo.playTime < audioInfoToDiscard.playTime) {\r\n                    audioInfoToDiscard = audioInfo;\r\n                }\r\n            });\r\n        } else {\r\n            this._audioPlayerInfoList.forEach((audioInfo) => {\r\n                if (!audioInfoToDiscard || audioInfo.playTime < audioInfoToDiscard.playTime) {\r\n                    audioInfoToDiscard = audioInfo;\r\n                }\r\n            });\r\n        }\r\n        if (audioInfoToDiscard) {\r\n            audioInfoToDiscard.audio.stop();\r\n            this.removePlaying(audioInfoToDiscard.audio);\r\n        }\r\n    }\r\n\r\n    public pause (): void {\r\n        this._oneShotAudioInfoList.forEach((info): void => {\r\n            info.audio.stop();\r\n        });\r\n        this._audioPlayerInfoList.forEach((info): void => {\r\n            info.audio.pause().catch((e): void => {});\r\n        });\r\n    }\r\n\r\n    public resume (): void {\r\n        // onShotAudio can not be resumed\r\n        this._audioPlayerInfoList.forEach((info): void => {\r\n            info.audio.play().catch((e): void => {});\r\n        });\r\n    }\r\n}\r\n\r\nexport const audioManager = new AudioManager();\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { AudioPlayer, OneShotAudio } from 'pal/audio';\r\nimport { ccclass, help, menu, tooltip, type, range, serializable } from 'cc.decorator';\r\nimport { AudioPCMDataView, AudioState } from '../../pal/audio/type';\r\nimport { Component } from '../scene-graph/component';\r\nimport { clamp, warn } from '../core';\r\nimport { AudioClip } from './audio-clip';\r\nimport { audioManager } from './audio-manager';\r\nimport { Node } from '../scene-graph';\r\n\r\nconst _LOADED_EVENT = 'audiosource-loaded';\r\n\r\nenum AudioSourceEventType {\r\n    STARTED = 'started',\r\n    ENDED = 'ended',\r\n}\r\n\r\nenum AudioOperationType {\r\n     PLAY = 'play',\r\n     STOP = 'stop',\r\n     PAUSE = 'pause',\r\n     SEEK = 'seek'\r\n}\r\n\r\ninterface AudioOperationInfo {\r\n    op: AudioOperationType;\r\n    params: any[] | null;\r\n}\r\n\r\n/**\r\n * @en\r\n * A representation of a single audio source, <br>\r\n * contains basic functionalities like play, pause and stop.\r\n * @zh\r\n * 音频组件，代表单个音源，提供播放、暂停、停止等基本功能。\r\n */\r\n@ccclass('cc.AudioSource')\r\n@help('i18n:cc.AudioSource')\r\n@menu('Audio/AudioSource')\r\nexport class AudioSource extends Component {\r\n    static get maxAudioChannel (): number {\r\n        return AudioPlayer.maxAudioChannel;\r\n    }\r\n    public static AudioState = AudioState;\r\n\r\n    public static EventType = AudioSourceEventType;\r\n\r\n    @type(AudioClip)\r\n    protected _clip: AudioClip | null = null;\r\n    protected _player: AudioPlayer | null = null;\r\n    private _hasRegisterListener: boolean = false;\r\n\r\n    @serializable\r\n    protected _loop = false;\r\n    @serializable\r\n    protected _playOnAwake = true;\r\n    @serializable\r\n    protected _volume = 1;\r\n\r\n    private _cachedCurrentTime = -1;\r\n\r\n    // An operation queue to store the operations before loading the AudioPlayer.\r\n    private _operationsBeforeLoading: AudioOperationInfo[] = [];\r\n    private _isLoaded = false;\r\n\r\n    private _lastSetClip: AudioClip | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    private _resetPlayer (): void {\r\n        if (this._player) {\r\n            audioManager.removePlaying(this._player);\r\n            this._unregisterListener();\r\n            this._player.destroy();\r\n            this._player = null;\r\n        }\r\n    }\r\n    /**\r\n     * @en\r\n     * The default AudioClip to be played for this audio source.\r\n     * @zh\r\n     * 设定要播放的音频。\r\n     */\r\n    @type(AudioClip)\r\n    @tooltip('i18n:audio.clip')\r\n    set clip (val) {\r\n        if (val === this._clip) {\r\n            return;\r\n        }\r\n        this._clip = val;\r\n        this._syncPlayer();\r\n    }\r\n    get clip (): AudioClip | null {\r\n        return this._clip;\r\n    }\r\n    private _syncPlayer (): void {\r\n        const clip = this._clip;\r\n        if (this._lastSetClip === clip) {\r\n            return;\r\n        }\r\n        if (!clip) {\r\n            this._lastSetClip = null;\r\n            this._resetPlayer();\r\n            return;\r\n        }\r\n        if (!clip._nativeAsset) {\r\n            // eslint-disable-next-line no-console\r\n            console.error('Invalid audio clip');\r\n            return;\r\n        }\r\n        // The state of _isloaded cannot be modified if clip is the wrong argument.\r\n        // Because load is an asynchronous function, if it is called multiple times with the same arguments.\r\n        // It may cause an illegal state change\r\n        this._isLoaded = false;\r\n        this._lastSetClip = clip;\r\n        this._operationsBeforeLoading.length = 0;\r\n        AudioPlayer.load(clip._nativeAsset.url, {\r\n            audioLoadMode: clip.loadMode,\r\n        }).then((player) => {\r\n            if (this._lastSetClip !== clip) {\r\n                // In case the developers set AudioSource.clip concurrently,\r\n                // we should choose the last one player of AudioClip set to AudioSource.clip\r\n                // instead of the last loaded one.\r\n                player.destroy();\r\n                return;\r\n            }\r\n            this._isLoaded = true;\r\n            // clear old player\r\n            this._resetPlayer();\r\n            this._player = player;\r\n            this._syncStates();\r\n            this.node?.emit(_LOADED_EVENT);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }).catch((e) => {});\r\n    }\r\n\r\n    private _registerListener (): void {\r\n        if (!this._hasRegisterListener && this._player) {\r\n            const player = this._player;\r\n            player.onEnded(() => {\r\n                audioManager.removePlaying(player);\r\n                this.node?.emit(AudioSourceEventType.ENDED, this);\r\n            });\r\n            player.onInterruptionBegin(() => {\r\n                audioManager.removePlaying(player);\r\n            });\r\n            player.onInterruptionEnd(() => {\r\n                if (this._player === player) {\r\n                    audioManager.addPlaying(player);\r\n                }\r\n            });\r\n            this._hasRegisterListener = true;\r\n        }\r\n    }\r\n\r\n    private _unregisterListener (): void {\r\n        if (this._player && this._hasRegisterListener) {\r\n            this._player.offEnded();\r\n            this._player.offInterruptionBegin();\r\n            this._player.offInterruptionEnd();\r\n            this._hasRegisterListener = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Is looping enabled for this audio source?\r\n     * @zh\r\n     * 是否循环播放音频？\r\n     */\r\n    @tooltip('i18n:audio.loop')\r\n    set loop (val) {\r\n        this._loop = val;\r\n        if (this._player) {\r\n            this._player.loop = val;\r\n        }\r\n    }\r\n    get loop (): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Is the autoplay enabled? <br>\r\n     * Note that for most platform autoplay will only start <br>\r\n     * after a user gesture is received, according to the latest autoplay policy: <br>\r\n     * https://www.chromium.org/audio-video/autoplay\r\n     * @zh\r\n     * 是否启用自动播放。 <br>\r\n     * 请注意，根据最新的自动播放策略，现在对大多数平台，自动播放只会在第一次收到用户输入后生效。 <br>\r\n     * 参考：https://www.chromium.org/audio-video/autoplay\r\n     */\r\n    @tooltip('i18n:audio.playOnAwake')\r\n    set playOnAwake (val) {\r\n        this._playOnAwake = val;\r\n    }\r\n    get playOnAwake (): boolean {\r\n        return this._playOnAwake;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The volume of this audio source (0.0 to 1.0).<br>\r\n     * Note: Volume control may be ineffective on some platforms.\r\n     * @zh\r\n     * 音频的音量（大小范围为 0.0 到 1.0）。<br>\r\n     * 请注意，在某些平台上，音量控制可能不起效。<br>\r\n     */\r\n    @range([0.0, 1.0])\r\n    @tooltip('i18n:audio.volume')\r\n    set volume (val) {\r\n        if (Number.isNaN(val)) { warn('illegal audio volume!'); return; }\r\n        val = clamp(val, 0, 1);\r\n        if (this._player) {\r\n            this._player.volume = val;\r\n            this._volume = this._player.volume;\r\n        } else {\r\n            this._volume = val;\r\n        }\r\n    }\r\n    get volume (): number {\r\n        return this._volume;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        this._syncPlayer();\r\n    }\r\n\r\n    public onEnable (): void {\r\n        // audio source component may be played before\r\n        if (this._playOnAwake && !this.playing) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    public onDisable (): void {\r\n        const rootNode = this._getRootNode();\r\n        if (rootNode?._persistNode) {\r\n            return;\r\n        }\r\n        this.pause();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        this.stop();\r\n        this.clip = null;// It will trigger _syncPlayer then call resetPlayer\r\n    }\r\n    /**\r\n     * @en\r\n     * Get PCM data from specified channel.\r\n     * Currently it is only available in Native platform and Web Audio (including Web and ByteDance platforms).\r\n     *\r\n     * @zh\r\n     * 通过指定的通道获取音频的 PCM data。\r\n     * 目前仅在原生平台和 Web Audio（包括 Web 和 字节平台）中可用。\r\n     *\r\n     * @param channelIndex The channel index. 0 is left channel, 1 is right channel.\r\n     * @returns A Promise to get the PCM data after audio is loaded.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * audioSource.getPCMData(0).then(dataView => {\r\n     *   if (!dataView)  return;\r\n     *   for (let i = 0; i < dataView.length; ++i) {\r\n     *     console.log('data: ' + dataView.getData(i));\r\n     *   }\r\n     * });\r\n     * ```\r\n     */\r\n    public getPCMData (channelIndex: number): Promise<AudioPCMDataView | undefined> {\r\n        return new Promise((resolve) => {\r\n            if (channelIndex !== 0 && channelIndex !== 1) {\r\n                warn('Only support channel index 0 or 1 to get buffer');\r\n                resolve(undefined);\r\n                return;\r\n            }\r\n            if (this._player) {\r\n                resolve(this._player.getPCMData(channelIndex));\r\n            } else {\r\n                this.node?.once(_LOADED_EVENT, () => {\r\n                    resolve(this._player?.getPCMData(channelIndex));\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the sample rate of audio.\r\n     * Currently it is only available in Native platform and Web Audio (including Web and ByteDance platforms).\r\n     *\r\n     * @zh\r\n     * 获取音频的采样率。\r\n     * 目前仅在原生平台和 Web Audio（包括 Web 和 字节平台）中可用。\r\n     *\r\n     * @returns A Promise to get the sample rate after audio is loaded.\r\n     */\r\n    public getSampleRate (): Promise<number> {\r\n        return new Promise((resolve) => {\r\n            if (this._player) {\r\n                resolve(this._player.sampleRate);\r\n            } else {\r\n                this.node?.once(_LOADED_EVENT, () => {\r\n                    resolve(this._player!.sampleRate);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getRootNode (): Node | null | undefined {\r\n        let currentNode = this.node as Node | undefined | null;\r\n        let currentGrandparentNode = currentNode?.parent?.parent;\r\n        while (currentGrandparentNode) {\r\n            currentNode = currentNode?.parent;\r\n            currentGrandparentNode = currentNode?.parent?.parent;\r\n        }\r\n        return currentNode;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Play the clip.<br>\r\n     * Restart if already playing.<br>\r\n     * Resume if paused.\r\n     *\r\n     * NOTE: On Web platforms, the Auto Play Policy bans auto playing audios at the first time, because the user gesture is required.\r\n     * there are 2 ways to play audios at the first time:\r\n     * - play audios in the callback of TOUCH_END or MOUSE_UP event\r\n     * - play audios straightly, the engine will auto play audios at the next user gesture.\r\n     *\r\n     * @zh\r\n     * 开始播放。<br>\r\n     * 如果音频处于正在播放状态，将会重新开始播放音频。<br>\r\n     * 如果音频处于暂停状态，则会继续播放音频。\r\n     *\r\n     * 注意:在 Web 平台，Auto Play Policy 禁止首次自动播放音频，因为需要发生用户交互之后才能播放音频。\r\n     * 有两种方式实现音频首次自动播放：\r\n     * - 在 TOUCH_END 或者 MOUSE_UP 的事件回调里播放音频。\r\n     * - 直接播放音频，引擎会在下一次发生用户交互时自动播放。\r\n     */\r\n    public play (): void {\r\n        if (!this._isLoaded && this.clip) {\r\n            this._operationsBeforeLoading.push({ op: AudioOperationType.PLAY, params: null });\r\n            return;\r\n        }\r\n        this._registerListener();\r\n        audioManager.discardOnePlayingIfNeeded();\r\n        // Replay if the audio is playing\r\n        if (this.state === AudioState.PLAYING) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this._player?.stop().catch((e) => {});\r\n        }\r\n        const player = this._player;\r\n        if (player) {\r\n            player.play().then(() => {\r\n                this.node?.emit(AudioSourceEventType.STARTED, this);\r\n            }).catch((e) => {\r\n                audioManager.removePlaying(player);\r\n            });\r\n            audioManager.addPlaying(player);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Pause the clip.\r\n     * @zh\r\n     * 暂停播放。\r\n     */\r\n    public pause (): void {\r\n        if (!this._isLoaded && this.clip) {\r\n            this._operationsBeforeLoading.push({ op: AudioOperationType.PAUSE, params: null });\r\n            return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this._player?.pause().catch((e) => {});\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Stop the clip.\r\n     * @zh\r\n     * 停止播放。\r\n     */\r\n    public stop (): void {\r\n        if (!this._isLoaded && this.clip) {\r\n            this._operationsBeforeLoading.push({ op: AudioOperationType.STOP, params: null });\r\n            return;\r\n        }\r\n        if (this._player) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this._player.stop().catch((e) => {});\r\n            audioManager.removePlaying(this._player);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Plays an AudioClip, and scales volume by volumeScale. The result volume is `audioSource.volume * volumeScale`. <br>\r\n     * @zh\r\n     * 以指定音量倍数播放一个音频一次。最终播放的音量为 `audioSource.volume * volumeScale`。 <br>\r\n     * @param clip The audio clip to be played.\r\n     * @param volumeScale volume scaling factor wrt. current value.\r\n     */\r\n    public playOneShot (clip: AudioClip, volumeScale = 1): void {\r\n        if (!clip._nativeAsset) {\r\n            // eslint-disable-next-line no-console\r\n            console.error('Invalid audio clip');\r\n            return;\r\n        }\r\n        let player: OneShotAudio;\r\n        AudioPlayer.loadOneShotAudio(clip._nativeAsset.url, this._volume * volumeScale, {\r\n            audioLoadMode: clip.loadMode,\r\n        }).then((oneShotAudio) => {\r\n            player = oneShotAudio;\r\n            audioManager.discardOnePlayingIfNeeded();\r\n            oneShotAudio.onEnd = (): void => {\r\n                audioManager.removePlaying(oneShotAudio);\r\n            };\r\n            oneShotAudio.play();\r\n            audioManager.addPlaying(oneShotAudio);\r\n        }).catch((e): void => {\r\n            if (player) {\r\n                audioManager.removePlaying(player);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _syncStates (): void {\r\n        if (this._player) {\r\n            this._player.loop = this._loop;\r\n            this._player.volume = this._volume;\r\n            this._operationsBeforeLoading.forEach((opInfo): void => {\r\n                if (opInfo.op === AudioOperationType.SEEK) {\r\n                    this._cachedCurrentTime = (opInfo.params && opInfo.params[0]) as number;\r\n                    if (this._player) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this._player.seek(this._cachedCurrentTime).catch((e): void => {});\r\n                    }\r\n                } else {\r\n                    this[opInfo.op]?.();\r\n                }\r\n            });\r\n            this._operationsBeforeLoading.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Set current playback time, in seconds.\r\n     * @zh\r\n     * 以秒为单位设置当前播放时间。\r\n     * @param num playback time to jump to.\r\n     */\r\n    set currentTime (num: number) {\r\n        if (Number.isNaN(num)) { warn('illegal audio time!'); return; }\r\n        num = clamp(num, 0, this.duration);\r\n        if (!this._isLoaded && this.clip) {\r\n            this._operationsBeforeLoading.push({ op: AudioOperationType.SEEK, params: [num] });\r\n            return;\r\n        }\r\n        this._cachedCurrentTime = num;\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this._player?.seek(this._cachedCurrentTime).catch((e): void => {});\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the current playback time, in seconds.\r\n     * @zh\r\n     * 以秒为单位获取当前播放时间。\r\n     */\r\n    get currentTime (): number {\r\n        return this._player ? this._player.currentTime : (this._cachedCurrentTime < 0 ? 0 : this._cachedCurrentTime);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the audio duration, in seconds.\r\n     * @zh\r\n     * 获取以秒为单位的音频总时长。\r\n     */\r\n    get duration (): number {\r\n        return this._clip?.getDuration() ?? (this._player ? this._player.duration : 0);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get current audio state.\r\n     * @zh\r\n     * 获取当前音频状态。\r\n     */\r\n    get state (): AudioState {\r\n        return this._player ? this._player.state : AudioState.INIT;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Is the audio currently playing?\r\n     * @zh\r\n     * 当前音频是否正在播放？\r\n     */\r\n    get playing (): boolean {\r\n        return this.state === AudioSource.AudioState.PLAYING;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { AudioSource } from './audio-source';\r\nimport { replaceProperty, markAsWarning } from '../core';\r\nimport { AudioClip } from './audio-clip';\r\n\r\n// remove AudioClip static property\r\nreplaceProperty(AudioClip, 'AudioClip', [\r\n    {\r\n        name: 'PlayingState',\r\n        newName: 'AudioState',\r\n        target: AudioSource,\r\n        targetName: 'AudioSource',\r\n    },\r\n]);\r\n\r\n// deprecate AudioClip property\r\nmarkAsWarning(AudioClip.prototype, 'AudioClip.prototype',\r\n    [\r\n        'state',\r\n        'play',\r\n        'pause',\r\n        'stop',\r\n        'playOneShot',\r\n        'setCurrentTime',\r\n        'setVolume',\r\n        'setLoop',\r\n        'getCurrentTime',\r\n        'getVolume',\r\n        'getLoop',\r\n    ].map((item) => ({\r\n        name: item,\r\n        suggest: `please use AudioSource.prototype.${item} instead`,\r\n    })));\r\n","/*\r\nCopyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\nhttps://www.cocos.com/\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport './audio-downloader';\r\n\r\nimport { AudioSource } from './audio-source';\r\nimport { cclegacy, js } from '../core';\r\nimport './deprecated';\r\n\r\nexport { AudioClip } from './audio-clip';\r\n\r\nexport { AudioSource };\r\nexport { AudioPCMDataView } from '../../pal/audio/type';\r\n\r\nexport { AudioSource as AudioSourceComponent };\r\ncclegacy.AudioSourceComponent = AudioSource;\r\njs.setClassAlias(AudioSource, 'cc.AudioSourceComponent');\r\n"],"names":["AudioEvent","AudioType","AudioState","AudioPCMDataView","this","_bufferView","_normalizeFactor","_len","arguments","length","args","Array","_key","arrayBuffer","Ctor","normalizeFactor","prototype","getData","offset","_createClass","key","get","removeUnneededCalls","instance","size","_operationQueue","tmpQueue","slice","reserveOps","seekSearched","i","opInfo","op","push","reverse","operationId","_tryCallingRecursively","target","_opInfo$func","invoking","func","call","then","shift","_eventTarget","emit","id","toString","off","nextOpInfo","enqueueOperation","propertyKey","descriptor","originalOperation","value","_this","Promise","resolve","once","ensurePlaying","domAudio","promise","play","undefined","onGesture","canvas","removeEventListener","capture","document","getElementById","addEventListener","audioContextAgent","OneShotAudioDOM","nativeAudio","volume","_domAudio","_onPlayCb","_onEndCb","_proto","onPlay","stop","pause","set","cb","AudioPlayerDOM","_class2","_this2","_state","INIT","_onEnded","EventTarget","game","on","Game","EVENT_PAUSE","_onInterruptedBegin","EVENT_RESUME","_onInterruptedEnd","seek","ENDED","_proto2","destroy","load","url","reject","loadNative","createElement","loadedEvent","systemInfo","os","OS","IOS","browserType","BrowserType","FIREFOX","timer","setTimeout","readyState","failure","success","clearEvent","clearTimeout","Error","src","loadOneShotAudio","oneShotAudio","_this3","PLAYING","INTERRUPTED","INTERRUPTION_BEGIN","_this4","INTERRUPTION_END","getPCMData","time","clamp","duration","currentTime","_this5","PAUSED","_this6","STOPPED","onInterruptionBegin","offInterruptionBegin","onInterruptionEnd","offInterruptionEnd","onEnded","offEnded","DOM_AUDIO","loop","val","clamp01","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor","AudioTimer","_nativeAudio","_startTime","_startOffset","_isPaused","_now","performance","now","_calculateCurrentTime","timePassed","start","audioBufferManager","AudioBufferManager","_audioBufferDataMap","addCache","audioBuffer","warnID","usedCount","retainCache","audioBufferData","getCache","tryReleasingCache","AudioContextClass","window","AudioContext","webkitAudioContext","mozAudioContext","_contextRunningEvent","AudioContextAgent","_context","_isRunning","onstatechange","state","onceRunning","offRunning","decodeAudioData","audioData","err","console","error","runContext","isRunning","context","resume","e","debug","createBufferSource","sourceBufferNode","buffer","createGain","gainNode","setGainValue","gain","setTargetAtTime","connectContext","audioNode","connect","destination","support","OneShotAudioWeb","_duration","_bufferSourceNode","_currentTimer","_url","onEnd","disconnect","AudioPlayerWeb","_class3","_src","_audioBuffer","_sourceNode","_gainNode","_volume","_loop","_audioTimer","_runningCallback","_proto3","cachedAudioBuffer","xhr","XMLHttpRequest","errInfo","open","responseType","onload","status","response","decodedAudioBuffer","onerror","ontimeout","onabort","send","channelIndex","getChannelData","_this7","_doPlay","_this8","_startSourceNode","_this9","_stopSourceNode","checkEnded","sampleRate","WEB_AUDIO","OneShotAudio","audio","_audio","v","AudioPlayer","player","_player","opts","audioLoadMode","webPlayer","domPlayer","oneShotAudioWeb","oneShotAudioDOM","type","maxAudioChannel","AudioClip","ccclass","_dec","_Asset","name","_initializer","_loadMode","UNKNOWN_AUDIO","_meta","_inheritsLoose","_this$_player","destroyResult","validate","getDuration","getCurrentTime","getVolume","getLoop","setCurrentTime","_this$_player2","setVolume","setLoop","_this$_player3","_this$_player4","_this$_player5","playOneShot","_nativeAsset","meta","uuid","_uuid","loadMode","ext","_native","__isNative__","Asset","serializable","override","_class","loadAudioPlayer","options","onComplete","audioMeta","createAudioClip","data","out","_nativeUrl","cclegacy","downloader","register","factory","AudioSourceEventType","AudioOperationType","audioManager","AudioManager","_oneShotAudioInfoList","_audioPlayerInfoList","_findIndex","audioInfoList","findIndex","item","_tryAddPlaying","idx","playTime","audioInfo","addPlaying","_tryRemovePlaying","js","removePlaying","discardOnePlayingIfNeeded","audioInfoToDiscard","forEach","info","_LOADED_EVENT","AudioSource","_dec2","_dec3","_Component","_clip","_hasRegisterListener","_initializer2","_playOnAwake","_initializer3","_initializer4","_cachedCurrentTime","_operationsBeforeLoading","_isLoaded","_lastSetClip","_resetPlayer","_unregisterListener","_syncPlayer","clip","_this2$node","_syncStates","node","_registerListener","_this3$node","onLoad","onEnable","playing","onDisable","rootNode","_getRootNode","_persistNode","onDestroy","warn","_this4$node","_this4$_player","getSampleRate","_this5$node","_currentNode","_currentNode$parent","currentNode","currentGrandparentNode","parent","_currentNode2","_currentNode3","_currentNode3$parent","_this6$node","STARTED","PLAY","params","PAUSE","STOP","volumeScale","_this7$opInfo$op","SEEK","Number","isNaN","num","_this$_clip$getDurati","_this$_clip","Component","EventType","_applyDecoratedInitializer","exports","AudioSourceComponent","replaceProperty","newName","targetName","markAsWarning","map","suggest"],"mappings":"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"}