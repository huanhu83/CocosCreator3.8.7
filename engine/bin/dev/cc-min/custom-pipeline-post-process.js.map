{"version":3,"file":"custom-pipeline-post-process.js","sources":["../../../cocos/rendering/post-process/utils/pass-context.ts","../../../cocos/rendering/post-process/passes/base-pass.ts","../../../cocos/rendering/post-process/passes/forward-final-pass.ts","../../../cocos/rendering/post-process/passes/forward-pass.ts","../../../cocos/rendering/post-process/components/post-process-setting.ts","../../../cocos/rendering/post-process/components/taa.ts","../../../cocos/rendering/post-process/components/taa-mask.ts","../../../cocos/rendering/post-process/passes/setting-pass.ts","../../../cocos/rendering/post-process/passes/taa-pass.ts","../../../cocos/rendering/post-process/components/fsr.ts","../../../cocos/rendering/post-process/passes/fsr-pass.ts","../../../cocos/rendering/post-process/components/blit-screen.ts","../../../cocos/rendering/post-process/passes/blit-screen-pass.ts","../../../cocos/rendering/post-process/passes/shadow-pass.ts","../../../cocos/rendering/post-process/components/color-grading.ts","../../../cocos/rendering/post-process/components/bloom.ts","../../../cocos/rendering/post-process/components/hbao.ts","../../../cocos/rendering/post-process/components/dof.ts","../../../cocos/rendering/post-process/passes/hbao-pass.ts","../../../cocos/rendering/post-process/passes/color-grading-pass.ts","../../../cocos/rendering/post-process/passes/bloom-pass.ts","../../../cocos/rendering/post-process/components/fxaa.ts","../../../cocos/rendering/post-process/passes/fxaa-pass.ts","../../../cocos/rendering/post-process/passes/float-output-process-pass.ts","../../../cocos/rendering/post-process/passes/forward-transparency-pass.ts","../../../cocos/rendering/post-process/passes/forward-transparency-simple-pass.ts","../../../cocos/rendering/post-process/passes/skin-pass.ts","../../../cocos/rendering/post-process/passes/post-final-pass.ts","../../../cocos/rendering/post-process/passes/dof-pass.ts","../../../cocos/rendering/post-process/post-process-builder.ts","../../../cocos/rendering/post-process/index.ts"],"sourcesContent":["import { EDITOR } from 'internal:constants';\r\n\r\nimport { LightInfo, QueueHint, ResourceResidency, SceneFlags } from '../../custom/types';\r\nimport { ClearFlagBit, Color, Format, LoadOp, Rect, StoreOp, Viewport } from '../../../gfx';\r\nimport { Pipeline, RenderPassBuilder, RenderQueueBuilder } from '../../custom/pipeline';\r\nimport { Camera, SkyBoxFlagValue } from '../../../render-scene/scene';\r\nimport { Material } from '../../../asset/assets';\r\nimport { PostProcess } from '../components';\r\nimport { getRenderArea } from '../../custom/define';\r\nimport { Vec4, geometry } from '../../../core';\r\n\r\nconst sphere = geometry.Sphere.create(0, 0, 0, 1);\r\nconst boundingBox = new geometry.AABB();\r\nconst rangedDirLightBoundingBox = new geometry.AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\r\nexport class PassContext {\r\n    clearFlag: ClearFlagBit = ClearFlagBit.COLOR;\r\n    clearColor = new Color();\r\n    clearDepthColor = new Color();\r\n    ppl: Pipeline| undefined;\r\n    camera: Camera| undefined;\r\n    material: Material| undefined;\r\n    pass: RenderPassBuilder| undefined;\r\n    rasterWidth = 0;\r\n    rasterHeight = 0;\r\n    layoutName = '';\r\n\r\n    shadingScale = 1;\r\n    viewport = new Rect();\r\n    passViewport = new Rect();\r\n\r\n    passPathName = '';\r\n    passVersion = 0;\r\n\r\n    isFinalCamera = false;\r\n    isFinalPass = false;\r\n\r\n    depthSlotName = '';\r\n\r\n    shadowPass: any = undefined;\r\n    forwardPass: any = undefined;\r\n    postProcess: PostProcess | undefined;\r\n\r\n    maxSpotLights = 0xFFFFFFFF;\r\n    maxSphereLights = 0xFFFFFFFF;\r\n    maxPointLights = 0xFFFFFFFF;\r\n    maxRangedDirLights = 0xFFFFFFFF;\r\n\r\n    setClearFlag (clearFlag: ClearFlagBit): PassContext {\r\n        this.clearFlag = clearFlag;\r\n        return this;\r\n    }\r\n\r\n    setClearColor (x: number, y: number, z: number, w: number): PassContext {\r\n        Vec4.set(this.clearColor, x, y, z, w);\r\n        return this;\r\n    }\r\n\r\n    setClearDepthColor (x: number, y: number, z: number, w: number): PassContext {\r\n        Vec4.set(this.clearDepthColor, x, y, z, w);\r\n        return this;\r\n    }\r\n\r\n    version (): PassContext {\r\n        if (!EDITOR) {\r\n            this.passPathName += `_${this.pass!.name}_${this.layoutName}`;\r\n            this.pass!.setVersion(this.passPathName, this.passVersion);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearBlack (): void {\r\n        this.clearFlag = ClearFlagBit.COLOR;\r\n        Vec4.set(passContext.clearColor, 0, 0, 0, 1);\r\n    }\r\n\r\n    addRenderPass (layoutName: string, passName: string): PassContext {\r\n        const passViewport = this.passViewport;\r\n\r\n        const pass = this.ppl!.addRenderPass(passViewport.width, passViewport.height, layoutName);\r\n        pass.name = passName;\r\n        this.pass = pass;\r\n        this.layoutName = layoutName;\r\n\r\n        this.rasterWidth = passViewport.width;\r\n        this.rasterHeight = passViewport.height;\r\n\r\n        pass.setViewport(new Viewport(passViewport.x, passViewport.y, passViewport.width, passViewport.height));\r\n\r\n        return this;\r\n    }\r\n\r\n    addSceneLights (queue: RenderQueueBuilder, camera: Camera, flags: SceneFlags = SceneFlags.BLEND): void {\r\n        if (this.maxPointLights === 0\r\n            && this.maxSphereLights === 0\r\n            && this.maxSpotLights === 0\r\n            && this.maxRangedDirLights === 0) {\r\n            return;\r\n        }\r\n        const scene = camera.scene!;\r\n        const spotLights = scene.spotLights;\r\n        const sphereLights = scene.sphereLights;\r\n        const pointLights = scene.pointLights;\r\n        const rangedDirLights = scene.rangedDirLights;\r\n\r\n        const numSpotLights = Math.min(spotLights.length, this.maxSpotLights);\r\n        const numSphereLights = Math.min(sphereLights.length, this.maxSphereLights);\r\n        const numPointLights = Math.min(pointLights.length, this.maxPointLights);\r\n        const numRangedDirLights = Math.min(rangedDirLights.length, this.maxRangedDirLights);\r\n\r\n        for (let i = 0; i < numSpotLights; i++) {\r\n            const light = spotLights[i];\r\n            if (light.baked) {\r\n                continue;\r\n            }\r\n            geometry.Sphere.set(sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (geometry.intersect.sphereFrustum(sphere, camera.frustum)) {\r\n                queue.addSceneOfCamera(camera, new LightInfo(light), flags);\r\n            }\r\n        }\r\n        // sphere lights\r\n        for (let i = 0; i < numSphereLights; i++) {\r\n            const light = sphereLights[i];\r\n            if (light.baked) {\r\n                continue;\r\n            }\r\n            geometry.Sphere.set(sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (geometry.intersect.sphereFrustum(sphere, camera.frustum)) {\r\n                queue.addSceneOfCamera(camera, new LightInfo(light), flags);\r\n            }\r\n        }\r\n        // point lights\r\n        for (let i = 0; i < numPointLights; i++) {\r\n            const light = pointLights[i];\r\n            if (light.baked) {\r\n                continue;\r\n            }\r\n            geometry.Sphere.set(sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (geometry.intersect.sphereFrustum(sphere, camera.frustum)) {\r\n                queue.addSceneOfCamera(camera, new LightInfo(light), flags);\r\n            }\r\n        }\r\n        // ranged dir lights\r\n        for (let i = 0; i < numRangedDirLights; i++) {\r\n            const light = rangedDirLights[i];\r\n            geometry.AABB.transform(boundingBox, rangedDirLightBoundingBox, light.node!.getWorldMatrix());\r\n            if (geometry.intersect.aabbFrustum(boundingBox, camera.frustum)) {\r\n                queue.addSceneOfCamera(camera, new LightInfo(light), flags);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateViewPort (): void {\r\n        const camera = this.camera;\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        let shadingScale = 1;\r\n        if (this.postProcess && (!EDITOR || this.postProcess.enableShadingScaleInEditor)) {\r\n            shadingScale *= this.postProcess.shadingScale;\r\n        }\r\n        this.shadingScale = shadingScale;\r\n\r\n        const area = getRenderArea(camera, camera.window.width * shadingScale, camera.window.height * shadingScale, null, 0, this.viewport);\r\n        area.width = Math.floor(area.width);\r\n        area.height = Math.floor(area.height);\r\n    }\r\n    updatePassViewPort (shadingScale = 1, offsetScale = 0): PassContext {\r\n        this.passViewport.width = this.viewport.width * shadingScale;\r\n        this.passViewport.height = this.viewport.height * shadingScale;\r\n\r\n        this.passViewport.x = this.viewport.x * offsetScale;\r\n        this.passViewport.y = this.viewport.y * offsetScale;\r\n        return this;\r\n    }\r\n\r\n    // setViewport (x: number, y: number, w: number, h: number) {\r\n    //     this.pass!.setViewport(new Viewport(x, y, w, h));\r\n    //     return this;\r\n    // }\r\n\r\n    addRasterView (name: string, format: Format, offscreen = true, residency: ResourceResidency = ResourceResidency.MANAGED): PassContext {\r\n        const ppl = this.ppl;\r\n        const camera = this.camera;\r\n        const pass = this.pass;\r\n        if (!ppl || !camera || !pass) {\r\n            return this;\r\n        }\r\n\r\n        if (!ppl.containsResource(name)) {\r\n            if (format === Format.DEPTH_STENCIL) {\r\n                ppl.addDepthStencil(name, format, this.rasterWidth, this.rasterHeight, ResourceResidency.MANAGED);\r\n            } else if (offscreen) {\r\n                ppl.addRenderTarget(name, format, this.rasterWidth, this.rasterHeight, residency || ResourceResidency.MANAGED);\r\n            } else {\r\n                ppl.addRenderWindow(name, format, this.rasterWidth, this.rasterHeight, camera.window);\r\n            }\r\n        }\r\n\r\n        if (format !== Format.DEPTH_STENCIL) {\r\n            if (!offscreen) {\r\n                ppl.updateRenderWindow(name, camera.window);\r\n            } else {\r\n                ppl.updateRenderTarget(name, this.rasterWidth, this.rasterHeight);\r\n            }\r\n        } else {\r\n            ppl.updateDepthStencil(name, this.rasterWidth, this.rasterHeight);\r\n        }\r\n\r\n        // let view: RasterView;\r\n        if (format === Format.DEPTH_STENCIL) {\r\n            const clearFlag = this.clearFlag & ClearFlagBit.DEPTH_STENCIL;\r\n            let loadOp = LoadOp.CLEAR;\r\n            if (clearFlag === ClearFlagBit.NONE) {\r\n                loadOp = LoadOp.LOAD;\r\n            }\r\n\r\n            pass.addDepthStencil(name, loadOp, StoreOp.STORE, this.clearDepthColor.x, this.clearDepthColor.y, clearFlag);\r\n        } else {\r\n            const clearColor = new Color();\r\n            clearColor.copy(this.clearColor);\r\n\r\n            const clearFlag = this.clearFlag & ClearFlagBit.COLOR;\r\n            let loadOp = LoadOp.CLEAR;\r\n            if (clearFlag === ClearFlagBit.NONE && !(this.clearFlag & SkyBoxFlagValue.VALUE)) {\r\n                loadOp = LoadOp.LOAD;\r\n            } else if (this.clearFlag & SkyBoxFlagValue.VALUE) {\r\n                clearColor.set(0, 0, 0, 1);\r\n            }\r\n            pass.addRenderTarget(name, loadOp, StoreOp.STORE, clearColor);\r\n        }\r\n        return this;\r\n    }\r\n    setPassInput (inputName: string, shaderName: string): PassContext {\r\n        if (this.ppl!.containsResource(inputName)) {\r\n            this.pass!.addTexture(inputName, shaderName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    blitScreen (passIdx = 0): PassContext {\r\n        this.pass!.addQueue(QueueHint.RENDER_TRANSPARENT).addCameraQuad(\r\n            this.camera!,\r\nthis.material!,\r\npassIdx,\r\nSceneFlags.NONE,\r\n        );\r\n        return this;\r\n    }\r\n}\r\n\r\nexport const passContext = new PassContext();\r\n","import { EDITOR } from 'internal:constants';\r\n\r\nimport { Material } from '../../../asset/assets';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { BasicPipeline, Pipeline, PipelineRuntime } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { Address, Filter, Format, Sampler, SamplerInfo } from '../../../gfx';\r\nimport { supportsRGBA16HalfFloatTexture } from '../../define';\r\nimport { cclegacy, macro } from '../../../core';\r\n\r\nlet _BasePassID = 0;\r\nlet _pointSampler: Sampler| null = null;\r\nconst _samplerPointInfo = new SamplerInfo(\r\n    Filter.POINT,\r\n    Filter.POINT,\r\n    Filter.NONE,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n\r\nexport function getRTFormatBeforeToneMapping (ppl: BasicPipeline): Format {\r\n    const useFloatOutput = ppl.getMacroBool('CC_USE_FLOAT_OUTPUT');\r\n    return ppl.pipelineSceneData.isHDR && useFloatOutput && supportsRGBA16HalfFloatTexture(ppl.device) ? Format.RGBA16F : Format.RGBA8;\r\n}\r\nexport function forceEnableFloatOutput (ppl: PipelineRuntime): boolean {\r\n    let enabled = ppl.getMacroBool('CC_USE_FLOAT_OUTPUT');\r\n    if (ppl.pipelineSceneData.isHDR && !enabled) {\r\n        const supportFloatOutput = supportsRGBA16HalfFloatTexture(ppl.device);\r\n        ppl.setMacroBool('CC_USE_FLOAT_OUTPUT', supportFloatOutput);\r\n        macro.ENABLE_FLOAT_OUTPUT = supportFloatOutput;\r\n        enabled = supportFloatOutput;\r\n    }\r\n\r\n    return enabled;\r\n}\r\n\r\nexport function disablePostProcessForDebugView (): boolean {\r\n    const debugView = cclegacy.director.root.debugView;\r\n    return debugView.singleMode as number > 0;\r\n}\r\n\r\nexport function getShadowMapSampler (): Sampler | undefined {\r\n    if (!_pointSampler) {\r\n        const director = cclegacy.director;\r\n        const pipeline = director.root.pipeline;\r\n        const device = pipeline.device;\r\n        _pointSampler = device.getSampler(_samplerPointInfo);\r\n    }\r\n    return _pointSampler || undefined;\r\n}\r\n\r\nexport abstract class BasePass {\r\n    abstract name: string;\r\n    effectName = 'pipeline/post-process/blit-screen';\r\n\r\n    _id = 0;\r\n    constructor () {\r\n        this._id = _BasePassID++;\r\n    }\r\n\r\n    context = passContext;\r\n    getCameraUniqueID = getCameraUniqueID;\r\n\r\n    // private _materialMap: Map<Camera, Material> = new Map()\r\n\r\n    _material: Material | undefined;\r\n    get material (): Material {\r\n        const effectReloaded = false;\r\n        // if (EDITOR && this._material) {\r\n        //     const effect = builtinResMgr.get(this.effectName);\r\n        //     effectReloaded = effect && this._material.effectAsset !== effect;\r\n        // }\r\n\r\n        if (!this._material || effectReloaded) {\r\n            const mat = new Material();\r\n            mat._uuid = `${this.name}-${this.effectName}-material`;\r\n            mat.initialize({ effectName: this.effectName });\r\n            this._material = mat;\r\n        }\r\n\r\n        let material: Material | undefined;\r\n        // if (EDITOR) {\r\n        //     if (passUtils.camera) {\r\n        //         material = this._materialMap.get(passUtils.camera);\r\n        //         if (!material || material.parent !== this._material) {\r\n        //             material = new MaterialInstance({\r\n        //                 parent: this._material,\r\n        //             });\r\n        //             this._materialMap.set(passUtils.camera, material);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        return material || this._material;\r\n    }\r\n\r\n    enable = true;\r\n    outputNames: string[] = [];\r\n\r\n    lastPass: BasePass | undefined;\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        const name = this.outputNames[index] + this.name;\r\n        return `${name}_${this._id}_${getCameraUniqueID(camera)}`;\r\n    }\r\n\r\n    enableInAllEditorCamera = false;\r\n    checkEnable (camera: Camera): boolean {\r\n        return this.enable;\r\n    }\r\n\r\n    onGlobalPipelineStateChanged?(): void;\r\n\r\n    renderProfiler (camera): void {\r\n        if (passContext.isFinalCamera && !EDITOR) {\r\n            passContext.pass!.showStatistics = true;\r\n        }\r\n    }\r\n\r\n    abstract render (camera: Camera, ppl: Pipeline): any;\r\n}\r\n","import { Vec4 } from '../../../core';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera, SkyBoxFlagValue } from '../../../render-scene/scene';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass } from './base-pass';\r\n\r\nexport class ForwardFinalPass extends BasePass {\r\n    name = 'ForwardFinalPass';\r\n    outputNames = ['ForwardFinalColor'];\r\n\r\n    enableInAllEditorCamera = true;\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        if (!this.lastPass) {\r\n            return;\r\n        }\r\n\r\n        passContext.clearFlag = camera.clearFlag & ClearFlagBit.COLOR  | (camera.clearFlag & SkyBoxFlagValue.VALUE);\r\n        Vec4.set(passContext.clearColor, camera.clearColor.x, camera.clearColor.y, camera.clearColor.z, camera.clearColor.w);\r\n\r\n        passContext.material = this.material;\r\n\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        const input0 = this.lastPass.slotName(camera, 0);\r\n        const slot0 = this.slotName(camera, 0);\r\n\r\n        const isOffScreen = false;//director.root!.mainWindow !== camera.window;\r\n\r\n        const fb = camera.window.framebuffer;\r\n        const ct = fb && fb.colorTextures[0];\r\n        const format = ct ? ct.format : Format.RGBA8;\r\n\r\n        const shadingScale = passContext.shadingScale;\r\n        passContext\r\n            .updatePassViewPort(1 / shadingScale, 1 / shadingScale)\r\n            .addRenderPass('post-process', `${this.name}${cameraID}`)\r\n            .setPassInput(input0, 'inputTexture')\r\n            .addRasterView(slot0, format, isOffScreen)\r\n            .blitScreen(0);\r\n\r\n        this.renderProfiler(camera);\r\n    }\r\n}\r\n","import { Vec4 } from '../../../core';\r\n\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera, ShadowType, SkyBoxFlagValue } from '../../../render-scene/scene';\r\nimport { LightInfo, QueueHint, SceneFlags } from '../../custom/types';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass, getRTFormatBeforeToneMapping, getShadowMapSampler } from './base-pass';\r\nimport { ShadowPass } from './shadow-pass';\r\n\r\nexport class ForwardPass extends BasePass {\r\n    name = 'ForwardPass';\r\n    outputNames = ['ForwardColor', 'ForwardDS'];\r\n\r\n    enableInAllEditorCamera = true;\r\n    depthBufferShadingScale = 1;\r\n\r\n    calcDepthSlot (camera: Camera): void {\r\n        const depthSlotName = !!passContext.depthSlotName;\r\n        let canUsePrevDepth = !(camera.clearFlag & ClearFlagBit.DEPTH_STENCIL);\r\n        canUsePrevDepth = canUsePrevDepth && passContext.shadingScale === this.depthBufferShadingScale;\r\n        if (canUsePrevDepth) {\r\n            if (!depthSlotName) passContext.depthSlotName = super.slotName(camera, 1);\r\n            return;\r\n        }\r\n        this.depthBufferShadingScale = passContext.shadingScale;\r\n\r\n        passContext.depthSlotName = super.slotName(camera, 1);\r\n    }\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        if (index === 1) {\r\n            return passContext.depthSlotName;\r\n        }\r\n\r\n        return super.slotName(camera, index);\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        passContext.clearFlag = ClearFlagBit.COLOR | (camera.clearFlag & ClearFlagBit.DEPTH_STENCIL) | (camera.clearFlag & SkyBoxFlagValue.VALUE);\r\n        Vec4.set(passContext.clearColor, 0, 0, 0, 0);\r\n        Vec4.set(passContext.clearDepthColor, camera.clearDepth, camera.clearStencil, 0, 0);\r\n\r\n        this.calcDepthSlot(camera);\r\n\r\n        const slot0 = this.slotName(camera, 0);\r\n        const slot1 = this.slotName(camera, 1);\r\n\r\n        const cameraID = getCameraUniqueID(camera);\r\n        const isOffScreen = true;\r\n        passContext\r\n            .updatePassViewPort()\r\n            .addRenderPass('default', `${this.name}_${cameraID}`)\r\n            .addRasterView(slot0, getRTFormatBeforeToneMapping(ppl), isOffScreen)\r\n            .addRasterView(slot1, Format.DEPTH_STENCIL, isOffScreen)\r\n            .version();\r\n\r\n        const pass = passContext.pass!;\r\n        const shadowPass = passContext.shadowPass as ShadowPass;\r\n        if (shadowPass) {\r\n            for (const dirShadowName of shadowPass.mainLightShadows) {\r\n                if (ppl.containsResource(dirShadowName)) {\r\n                    pass.addTexture(dirShadowName, 'cc_shadowMap', getShadowMapSampler());\r\n                }\r\n            }\r\n            for (const spotShadowName of shadowPass.spotLightShadows) {\r\n                if (ppl.containsResource(spotShadowName)) {\r\n                    pass.addTexture(spotShadowName, 'cc_spotShadowMap', getShadowMapSampler());\r\n                }\r\n            }\r\n        }\r\n        const forwardQueue = pass.addQueue(QueueHint.RENDER_OPAQUE);\r\n        forwardQueue.addSceneOfCamera(\r\n            camera,\r\n            new LightInfo(),\r\n            SceneFlags.OPAQUE_OBJECT | SceneFlags.CUTOUT_OBJECT\r\n             | SceneFlags.GEOMETRY,\r\n        );\r\n        const forwardAddQueue = pass.addQueue(QueueHint.RENDER_TRANSPARENT, 'forward-add');\r\n        passContext.addSceneLights(forwardAddQueue, camera);\r\n        const shadowInfo = ppl.pipelineSceneData.shadows;\r\n        if (camera.scene?.mainLight && shadowInfo.enabled && shadowInfo.type === ShadowType.Planar) {\r\n            pass.addQueue(QueueHint.RENDER_TRANSPARENT, 'planar-shadow')\r\n                .addSceneOfCamera(\r\n                    camera,\r\n                    new LightInfo(camera.scene?.mainLight),\r\n                    SceneFlags.TRANSPARENT_OBJECT | SceneFlags.SHADOW_CASTER\r\n                    | SceneFlags.GEOMETRY,\r\n                );\r\n        }\r\n        passContext.forwardPass = this;\r\n    }\r\n}\r\n","import { ccclass, executeInEditMode, requireComponent } from '../../../core/data/decorators';\r\nimport { Component } from '../../../scene-graph';\r\nimport { PostProcess } from './post-process';\r\n\r\n@ccclass('cc.PostProcessSetting')\r\n@requireComponent(PostProcess)\r\n@executeInEditMode\r\nexport class PostProcessSetting extends Component {\r\n    onEnable (): void {\r\n        const pp = this.getComponent(PostProcess);\r\n        pp?.addSetting(this);\r\n    }\r\n    onDisable (): void {\r\n        const pp = this.getComponent(PostProcess);\r\n        pp?.removeSetting(this);\r\n    }\r\n}\r\n","import { property, serializable } from '../../../core/data/class-decorator';\r\nimport { ccclass, disallowMultiple, executeInEditMode, help, menu, range, slide, tooltip } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.TAA')\r\n@help('cc.TAA')\r\n@menu('PostProcess/TAA')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class TAA extends PostProcessSetting {\r\n    @serializable\r\n    protected _sampleScale = 1;\r\n\r\n    @tooltip('i18n:taa.sampleScale')\r\n    @slide\r\n    @range([0.01, 5, 0.01])\r\n    @property\r\n    get sampleScale (): number {\r\n        return this._sampleScale;\r\n    }\r\n    set sampleScale (v: number) {\r\n        this._sampleScale = v;\r\n    }\r\n\r\n    @serializable\r\n    protected _feedback = 0.95;\r\n    @tooltip('i18n:taa.feedback')\r\n    @slide\r\n    @range([0.0, 1, 0.01])\r\n    @property\r\n    get feedback (): number {\r\n        return this._feedback;\r\n    }\r\n    set feedback (v: number) {\r\n        this._feedback = v;\r\n    }\r\n}\r\n","import { RenderTexture } from '../../../asset/assets';\r\nimport { warn } from '../../../core';\r\nimport { property } from '../../../core/data/class-decorator';\r\nimport { ccclass, menu } from '../../../core/data/decorators';\r\nimport { game } from '../../../game';\r\nimport { Camera } from '../../../misc';\r\nimport { Component } from '../../../scene-graph';\r\n\r\n@ccclass('TAAMask')\r\n@menu('PostProcess/TAAMask')\r\nexport class TAAMask extends Component {\r\n    @property(Camera)\r\n    maskCamera: Camera | undefined;\r\n\r\n    _mask: RenderTexture | undefined;\r\n\r\n    get mask (): RenderTexture | undefined {\r\n        if (!this.maskCamera || !this.maskCamera.enabledInHierarchy) {\r\n            return undefined;\r\n        }\r\n        if (!this.enabledInHierarchy) {\r\n            return undefined;\r\n        }\r\n\r\n        return this._mask;\r\n    }\r\n\r\n    start (): void {\r\n        if (!this.maskCamera) {\r\n            warn('Can not find a Camera for TAAMask');\r\n            return;\r\n        }\r\n\r\n        const tex = new RenderTexture();\r\n        tex.reset({\r\n            width: game.canvas!.width,\r\n            height: game.canvas!.height,\r\n        });\r\n\r\n        this._mask = tex;\r\n        this.maskCamera.targetTexture = tex;\r\n    }\r\n}\r\n","import { Camera } from '../../../render-scene/scene';\r\nimport { PostProcessSetting } from '../components/post-process-setting';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass } from './base-pass';\r\n\r\nexport function getSetting<T extends PostProcessSetting> (settingClass: new () => T): T {\r\n    const cls: typeof PostProcessSetting = settingClass as any;\r\n    const setting = passContext.postProcess && passContext.postProcess.getSetting(cls) as T;\r\n    return setting!;\r\n}\r\n\r\nexport abstract class SettingPass extends BasePass {\r\n    getSetting = getSetting;\r\n    get setting (): PostProcessSetting { return this.getSetting(PostProcessSetting); }\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        const enable = super.checkEnable(camera);\r\n        const setting = this.setting;\r\n        return enable && !!setting && setting.enabledInHierarchy;\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { Mat4, Vec2, Vec4 } from '../../../core';\r\nimport { game } from '../../../game';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera, CameraUsage } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { ResourceResidency } from '../../custom/types';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { TAA } from '../components/taa';\r\nimport { TAAMask } from '../components/taa-mask';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { disablePostProcessForDebugView } from './base-pass';\r\nimport { getSetting, SettingPass } from './setting-pass';\r\nimport { builtinResMgr } from '../../../asset/asset-manager';\r\nimport { Material, RenderTexture, Texture2D } from '../../../asset/assets';\r\nimport { MaterialInstance } from '../../../render-scene';\r\n\r\nconst tempVec4 = new Vec4();\r\n\r\nconst halton8 = [\r\n    new Vec2(0.5, 1.0 / 3),\r\n    new Vec2(0.25, 2.0 / 3),\r\n    new Vec2(0.75, 1.0 / 9),\r\n    new Vec2(0.125, 4.0 / 9),\r\n    new Vec2(0.625, 7.0 / 9),\r\n    new Vec2(0.375, 2.0 / 9),\r\n    new Vec2(0.875, 5.0 / 9),\r\n    new Vec2(0.0625, 8.0 / 9),\r\n];\r\nhalton8.forEach((v) => {\r\n    v.x -= 0.5;\r\n    v.y -= 0.5;\r\n});\r\n\r\nconst SampleOffsets = {\r\n    // 2xMSAA\r\n    // Pattern docs: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476218(v=vs.85).aspx\r\n    //   N.\r\n    //   .S\r\n    x2: [\r\n        new Vec2(-4.0 / 16.0, -4.0 / 16.0),\r\n        new Vec2(4.0 / 16.0, 4.0 / 16.0),\r\n    ],\r\n\r\n    // 3xMSAA\r\n    //   A..\r\n    //   ..B\r\n    //   .C.\r\n    // Rolling circle pattern (A,B,C).\r\n    x3: [\r\n        new Vec2(-2.0 / 3.0, -2.0 / 3.0),\r\n        new Vec2(2 / 3, 0 / 3),\r\n        new Vec2(0 / 3, 2 / 3),\r\n    ],\r\n\r\n    // 4xMSAA\r\n    // Pattern docs: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476218(v=vs.85).aspx\r\n    //   .N..\r\n    //   ...E\r\n    //   W...\r\n    //   ..S.\r\n    // Rolling circle pattern (N,E,S,W).\r\n    x4: [\r\n        new Vec2(-2 / 16, -6 / 16),\r\n        new Vec2(6 / 16, -2 / 16),\r\n        new Vec2(2 / 16, 6 / 16),\r\n        new Vec2(-6 / 16, 2 / 16),\r\n    ],\r\n\r\n    x5: [\r\n        // Compressed 4 sample pattern on same vertical and horizontal line (less temporal flicker).\r\n        // Compressed 1/2 works better than correct 2/3 (reduced temporal flicker).\r\n        //   . N .\r\n        //   W . E\r\n        //   . S .\r\n        // Rolling circle pattern (N,E,S,W).\r\n        new Vec2(0, -1 / 2),\r\n        new Vec2(1 / 2, 0),\r\n        new Vec2(0, 1 / 2),\r\n        new Vec2(-1 / 2, 0),\r\n    ],\r\n\r\n    halton8,\r\n};\r\n\r\nexport class TAAPass extends SettingPass {\r\n    get setting (): TAA { return getSetting(TAA); }\r\n\r\n    name = 'TAAPass';\r\n    effectName = 'pipeline/post-process/taa';\r\n    outputNames = ['TAA_First', 'TAA_Second'];\r\n\r\n    prevMatViewProj = new Mat4();\r\n    taaTextureIndex = -2;\r\n    samples = SampleOffsets.halton8;\r\n    sampleIndex = -1;\r\n    sampleOffset = new Vec2();\r\n\r\n    forceRender = true;\r\n    dirty = false;\r\n\r\n    taaMaskMaterial: Material | undefined;\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        let enable = super.checkEnable(camera);\r\n        if (EDITOR && camera.cameraUsage === CameraUsage.PREVIEW) {\r\n            enable = false;\r\n        }\r\n        if (disablePostProcessForDebugView()) {\r\n            enable = false;\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        if (!this.checkEnable(camera)) {\r\n            return this.lastPass!.slotName(camera, index);\r\n        }\r\n\r\n        if (this.taaTextureIndex < 0) {\r\n            return super.slotName(camera, 0);\r\n        }\r\n\r\n        return super.slotName(camera, (this.taaTextureIndex + 1) % 2);\r\n    }\r\n\r\n    applyCameraJitter (camera: Camera): void {\r\n        (camera as any)._isProjDirty = true;\r\n        camera.update(true);\r\n\r\n        camera.matProj.m12 += this.sampleOffset.x;\r\n        camera.matProj.m13 += this.sampleOffset.y;\r\n\r\n        Mat4.invert(camera.matProjInv, camera.matProj);\r\n        Mat4.multiply(camera.matViewProj, camera.matProj, camera.matView);\r\n        Mat4.invert(camera.matViewProjInv, camera.matViewProj);\r\n        camera.frustum.update(camera.matViewProj, camera.matViewProjInv);\r\n    }\r\n\r\n    updateSample (): void {\r\n        if (this.dirty || this.forceRender) {\r\n            this.sampleIndex++;\r\n            this.taaTextureIndex++;\r\n            this.dirty = false;\r\n        }\r\n\r\n        let offset = this.samples[this.sampleIndex % this.samples.length];\r\n        if (this.sampleIndex === -1) {\r\n            offset = Vec2.ZERO;\r\n        }\r\n\r\n        const setting = this.setting;\r\n\r\n        this.sampleOffset.x = offset.x * setting.sampleScale / game.canvas!.width;\r\n        this.sampleOffset.y = offset.y * setting.sampleScale / game.canvas!.height;\r\n    }\r\n\r\n    firstRender = true;\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        passContext.clearFlag = ClearFlagBit.COLOR;\r\n        Vec4.set(passContext.clearColor, 0, 0, 0, 1);\r\n\r\n        const firstRender = this.firstRender;\r\n        if (firstRender) {\r\n            this.prevMatViewProj.set(camera.matViewProj);\r\n            this.firstRender = false;\r\n        }\r\n\r\n        const setting = this.setting;\r\n\r\n        passContext.updatePassViewPort();\r\n        const width = passContext.passViewport.width;\r\n        const height = passContext.passViewport.height;\r\n\r\n        let material: Material = this.material;\r\n        const taaMask = camera.node.getComponent(TAAMask);\r\n        let maskTex: Texture2D | RenderTexture | undefined;\r\n        if (taaMask! && taaMask.enabledInHierarchy) {\r\n            maskTex = taaMask.mask;\r\n        }\r\n        if (maskTex) {\r\n            if (!this.taaMaskMaterial) {\r\n                const mi = new MaterialInstance({\r\n                    parent: material,\r\n                });\r\n                mi.recompileShaders({\r\n                    USE_TAA_MASK: !EDITOR,\r\n                });\r\n                this.taaMaskMaterial = mi;\r\n            }\r\n            material = this.taaMaskMaterial;\r\n            material.setProperty('motionMaskTex', maskTex);\r\n        } else {\r\n            const black = builtinResMgr.get('black-texture');\r\n            maskTex = black as Texture2D;\r\n            material.setProperty('motionMaskTex', maskTex);\r\n        }\r\n\r\n        material.setProperty('taaParams1', tempVec4.set(this.sampleOffset.x, this.sampleOffset.y, setting.feedback, 0));\r\n        material.setProperty('taaTextureSize', tempVec4.set(1 / width, 1 / height, 1 / width, 1 / height));\r\n        material.setProperty('taaPrevViewProj', this.prevMatViewProj);\r\n        this.prevMatViewProj.set(camera.matViewProj);\r\n\r\n        passContext.material = material;\r\n\r\n        // input output\r\n        const input0 = this.lastPass!.slotName(camera, 0);\r\n        let historyTexture = super.slotName(camera, this.taaTextureIndex % 2);\r\n\r\n        if (firstRender) {\r\n            historyTexture = input0;\r\n        }\r\n\r\n        const slot0 = this.slotName(camera, 0);\r\n        const depthTex = passContext.depthSlotName;\r\n\r\n        const layoutName = `DeferredTAA${this.taaTextureIndex < 0 ? -1 : (this.taaTextureIndex % 2)}`;\r\n        passContext\r\n            .addRenderPass(layoutName, `CameraTAAPass${cameraID}`)\r\n            .setPassInput(input0, 'inputTexture')\r\n            .setPassInput(depthTex, 'depthTex')\r\n            .setPassInput(historyTexture, 'taaPrevTexture')\r\n            .addRasterView(slot0, Format.RGBA16F, true, ResourceResidency.PERSISTENT)\r\n            .blitScreen(0)\r\n            .version();\r\n    }\r\n}\r\n","import { CCFloat } from '../../../core';\r\nimport { type } from '../../../core/data/class-decorator';\r\nimport { ccclass, disallowMultiple, executeInEditMode, help, menu, range, serializable, slide, tooltip } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.FSR')\r\n@help('cc.FSR')\r\n@menu('PostProcess/FSR')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class FSR extends PostProcessSetting {\r\n    @serializable\r\n    protected _sharpness = 0.8;\r\n\r\n    @tooltip('i18n:fsr.sharpness')\r\n    @slide\r\n    @range([0.0, 1, 0.01])\r\n    @type(CCFloat)\r\n    get sharpness (): number {\r\n        return this._sharpness;\r\n    }\r\n    set sharpness (v: number) {\r\n        this._sharpness = v;\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { clamp, Vec4 } from '../../../core';\r\nimport { Format } from '../../../gfx';\r\nimport { Camera, CameraUsage } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { FSR } from '../components/fsr';\r\nimport { getSetting, SettingPass } from './setting-pass';\r\n\r\nconst tempVec4 = new Vec4();\r\n\r\nexport class FSRPass extends SettingPass {\r\n    get setting (): FSR { return getSetting(FSR); }\r\n\r\n    name = 'FSRPass';\r\n    effectName = 'pipeline/post-process/fsr';\r\n    outputNames = ['FSRColor'];\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        let enable = super.checkEnable(camera);\r\n        if (EDITOR && camera.cameraUsage === CameraUsage.PREVIEW) {\r\n            enable = false;\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        passContext.material = this.material;\r\n        passContext.clearBlack();\r\n\r\n        passContext.updatePassViewPort(1 / passContext.shadingScale, 0);\r\n\r\n        const inputWidth = Math.floor(passContext.passViewport.width * passContext.shadingScale);\r\n        const inputHeight = Math.floor(passContext.passViewport.height * passContext.shadingScale);\r\n        const outWidth = Math.floor(passContext.passViewport.width);\r\n        const outHeight = Math.floor(passContext.passViewport.height);\r\n\r\n        const setting = this.setting;\r\n        this.material.setProperty('fsrParams', tempVec4.set(clamp(1.0 - setting.sharpness, 0.02, 0.98), 0, 0, 0));\r\n        this.material.setProperty('texSize', tempVec4.set(inputWidth, inputHeight, outWidth, outHeight));\r\n\r\n        const input0 = this.lastPass!.slotName(camera, 0);\r\n        const easu = `FSR_EASU${cameraID}`;\r\n        passContext\r\n            .addRenderPass('post-process', `CameraFSR_EASU_Pass${cameraID}`)\r\n            .setPassInput(input0, 'outputResultMap')\r\n            .addRasterView(easu, Format.RGBA8)\r\n            .blitScreen(0)\r\n            .version();\r\n\r\n        const slot0 = this.slotName(camera, 0);\r\n        passContext\r\n            .addRenderPass('post-process', `CameraFSR_RCAS_Pass${cameraID}`)\r\n            .setPassInput(easu, 'outputResultMap')\r\n            .addRasterView(slot0, Format.RGBA8)\r\n            .blitScreen(1)\r\n            .version();\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\nimport { Material } from '../../../asset/assets';\r\nimport { property, serializable } from '../../../core/data/class-decorator';\r\nimport { ccclass, disallowMultiple, executeInEditMode, help, menu } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.BlitScreenMaterial')\r\nclass BlitScreenMaterial {\r\n    @property(Material)\r\n    @serializable\r\n    protected _material: Material | undefined;\r\n\r\n    @property(Material)\r\n    get material (): Material | undefined {\r\n        return this._material;\r\n    }\r\n    set material (v) {\r\n        this._material = v;\r\n    }\r\n\r\n    @property({\r\n        serializable: true\r\n    })\r\n    enable = true;\r\n}\r\n\r\n@ccclass('cc.BlitScreen')\r\n@help('cc.BlitScreen')\r\n@menu('PostProcess/BlitScreen')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class BlitScreen extends PostProcessSetting {\r\n    @property(Material)\r\n    @serializable\r\n    protected _activeMaterials: Material[] = [];\r\n    @property({ type: Material, visible: false })\r\n    get activeMaterials (): Material[] {\r\n        return this._activeMaterials;\r\n    }\r\n    set activeMaterials (v) {\r\n        this._activeMaterials = v;\r\n        for (let i = 0; i < this._materials.length; i++) {\r\n            for (let j = 0; j < v.length; j++) {\r\n                if (this._materials[i] && v[j]) {\r\n                    if (this._materials[i].material?.uuid === v[j].uuid) {\r\n                        this._materials[i].material = v[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @property(BlitScreenMaterial)\r\n    @serializable\r\n    protected _materials: BlitScreenMaterial[] = [];\r\n\r\n    @property(BlitScreenMaterial)\r\n    get materials (): BlitScreenMaterial[] {\r\n        return this._materials;\r\n    }\r\n    set materials (v) {\r\n        this._materials = v;\r\n        if (EDITOR) {\r\n            setTimeout(() => {\r\n                globalThis.cce.Engine.repaintInEditMode();\r\n            }, 50);\r\n        }\r\n        this.updateActiveMaterials();\r\n    }\r\n\r\n    updateActiveMaterials (): void {\r\n        const materials = this._materials;\r\n        this._activeMaterials.length = 0;\r\n        for (let i = 0; i < materials.length; i++) {\r\n            const m = materials[i];\r\n            if (m.enable && m.material) {\r\n                this._activeMaterials.push(m.material);\r\n            }\r\n        }\r\n    }\r\n\r\n    onLoad (): void {\r\n        this.updateActiveMaterials();\r\n    }\r\n}\r\n","import { Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { getSetting, SettingPass } from './setting-pass';\r\n\r\nimport { BlitScreen } from '../components/blit-screen';\r\n\r\nconst outputNames = ['BlitScreenColor0', 'BlitScreenColor1'];\r\n\r\nexport class BlitScreenPass extends SettingPass {\r\n    get setting (): BlitScreen { return getSetting(BlitScreen); }\r\n\r\n    name = 'BlitScreenPass';\r\n    effectName = 'pipeline/post-process/blit-screen';\r\n\r\n    outputName = outputNames[0];\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        return this.outputName;\r\n    }\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        const enable = super.checkEnable(camera);\r\n        const setting = this.setting;\r\n        return enable && (setting.activeMaterials.length > 0);\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        passContext.clearBlack();\r\n\r\n        let input0 = this.lastPass!.slotName(camera, 0);\r\n\r\n        let slotIdx = 0;\r\n        const materials = this.setting.activeMaterials;\r\n        for (let i = 0; i < materials.length; i++) {\r\n            const material = materials[i];\r\n            passContext.material = material;\r\n\r\n            const slotName = `${outputNames[slotIdx]}${cameraID}`;\r\n            slotIdx = (++slotIdx) % 2;\r\n\r\n            passContext\r\n                .updatePassViewPort()\r\n                .addRenderPass('post-process', `${this.name}${cameraID}${slotIdx}`)\r\n                .setPassInput(input0, 'inputTexture')\r\n                .addRasterView(slotName, Format.RGBA8)\r\n                .blitScreen(0)\r\n                .version();\r\n\r\n            input0 = slotName;\r\n        }\r\n\r\n        this.outputName = input0;\r\n    }\r\n}\r\n","import { Camera } from '../../../render-scene/scene';\r\nimport { buildShadowPasses, getCameraUniqueID } from '../../custom/define';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass } from './base-pass';\r\n\r\nexport class ShadowPass extends BasePass {\r\n    name = 'ShadowPass';\r\n\r\n    mainLightShadows: string[] = [];\r\n    spotLightShadows: string[] = [];\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        passContext.shadowPass = this;\r\n\r\n        const cameraID = getCameraUniqueID(camera);\r\n        const cameraName = `Camera${cameraID}`;\r\n        const shadowInfo = buildShadowPasses(cameraName, camera, ppl);\r\n\r\n        this.mainLightShadows = shadowInfo.mainLightShadowNames;\r\n        this.spotLightShadows = shadowInfo.spotLightShadowNames;\r\n    }\r\n}\r\n","import { Texture2D } from '../../../asset/assets';\r\nimport { CCFloat } from '../../../core';\r\nimport { property } from '../../../core/data/class-decorator';\r\nimport { ccclass, disallowMultiple, executeInEditMode, help, menu, range, serializable, slide, tooltip, type } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.ColorGrading')\r\n@help('cc.ColorGrading')\r\n@menu('PostProcess/ColorGrading')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class ColorGrading extends PostProcessSetting {\r\n    @serializable\r\n    protected _contribute = 0.0;\r\n    @serializable\r\n    protected _colorGradingMap: Texture2D | null = null;\r\n\r\n    @tooltip('i18n:color_grading.contribute')\r\n    @slide\r\n    @range([0, 1, 0.01])\r\n    @type(CCFloat)\r\n    set contribute (value: number) {\r\n        this._contribute = value;\r\n    }\r\n    get contribute (): number {\r\n        return this._contribute;\r\n    }\r\n\r\n    @tooltip('i18n:color_grading.originalMap')\r\n    @type(Texture2D)\r\n    set colorGradingMap (val: Texture2D) {\r\n        this._colorGradingMap = val;\r\n    }\r\n    get colorGradingMap (): Texture2D {\r\n        return this._colorGradingMap!;\r\n    }\r\n}\r\n","import { cclegacy } from '../../../core';\r\nimport { ccclass, disallowMultiple, executeInEditMode, help, menu, range, rangeMin,\r\n    serializable, slide, tooltip, type, visible } from '../../../core/data/decorators';\r\nimport { CCBoolean, CCFloat, CCInteger } from '../../../core/data/utils/attribute';\r\nimport { Root } from '../../../root';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.Bloom')\r\n@help('cc.Bloom')\r\n@menu('PostProcess/Bloom')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class Bloom extends PostProcessSetting {\r\n    @serializable\r\n    protected _enableAlphaMask = false;\r\n    @serializable\r\n    protected _useHdrIlluminance: boolean = false;\r\n    @serializable\r\n    protected _threshold = 0.8;\r\n    @serializable\r\n    protected _iterations = 3;\r\n    @serializable\r\n    protected _intensity = 2.3;\r\n\r\n    @tooltip('i18n:bloom.enableAlphaMask')\r\n    @type(CCBoolean)\r\n    set enableAlphaMask (value: boolean) {\r\n        this._enableAlphaMask = value;\r\n    }\r\n    get enableAlphaMask (): boolean {\r\n        return this._enableAlphaMask;\r\n    }\r\n\r\n    @tooltip('i18n:bloom.useHdrIlluminance')\r\n    @visible(() => (cclegacy.director.root as Root).pipeline.getMacroBool('CC_USE_FLOAT_OUTPUT'))\r\n    @type(CCBoolean)\r\n    set useHdrIlluminance (value: boolean) {\r\n        this._useHdrIlluminance = value;\r\n    }\r\n    get useHdrIlluminance (): boolean {\r\n        return this._useHdrIlluminance;\r\n    }\r\n\r\n    @tooltip('i18n:bloom.threshold')\r\n    @rangeMin(0)\r\n    @type(CCFloat)\r\n    set threshold (value: number) {\r\n        this._threshold = value;\r\n    }\r\n    get threshold (): number {\r\n        return this._threshold;\r\n    }\r\n\r\n    @tooltip('i18n:bloom.iterations')\r\n    @slide\r\n    @range([1, 6, 1])\r\n    @type(CCInteger)\r\n    set iterations (value: number) {\r\n        this._iterations = value;\r\n    }\r\n    get iterations (): number {\r\n        return this._iterations;\r\n    }\r\n\r\n    @tooltip('i18n:bloom.intensity')\r\n    @rangeMin(0)\r\n    @type(CCFloat)\r\n    set intensity (value: number) {\r\n        this._intensity = value;\r\n    }\r\n    get intensity (): number {\r\n        return this._intensity;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CCBoolean, CCFloat, CCInteger } from '../../../core';\r\nimport { ccclass, disallowMultiple, editable, executeInEditMode, help, menu, range,\r\n    serializable, slide, tooltip, type, visible } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.HBAO')\r\n@help('cc.HBAO')\r\n@menu('PostProcess/HBAO')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class HBAO extends PostProcessSetting {\r\n    @serializable\r\n    protected _radiusScale = 1.0;\r\n    @serializable\r\n    protected _angleBiasDegree = 10.0;\r\n    @serializable\r\n    protected _blurSharpness = 3;\r\n    @serializable\r\n    protected _aoSaturation = 1.0;\r\n    @serializable\r\n    protected _needBlur = true;\r\n\r\n    @slide\r\n    @tooltip('i18n:hbao.radiusScale')\r\n    @range([0, 10, 0.01])\r\n    @type(CCFloat)\r\n    @editable\r\n    set radiusScale (value: number) {\r\n        this._radiusScale = value;\r\n    }\r\n    get radiusScale (): number {\r\n        return this._radiusScale;\r\n    }\r\n\r\n    @visible(false)\r\n    @slide\r\n    @tooltip('i18n:hbao.angleBiasDegree')\r\n    @range([0, 100, 0.1])\r\n    @type(CCFloat)\r\n    @editable\r\n    set angleBiasDegree (value: number) {\r\n        this._angleBiasDegree = value;\r\n    }\r\n    get angleBiasDegree (): number {\r\n        return this._angleBiasDegree;\r\n    }\r\n\r\n    @visible(false)\r\n    @slide\r\n    @tooltip('i18n:hbao.blurSharpness')\r\n    @range([0, 10, 1])\r\n    @type(CCInteger)\r\n    @editable\r\n    set blurSharpness (value: number) {\r\n        this._blurSharpness = value;\r\n    }\r\n    get blurSharpness (): number {\r\n        return this._blurSharpness;\r\n    }\r\n\r\n    @slide\r\n    @tooltip('i18n:hbao.aoSaturation')\r\n    @range([0, 10, 0.01])\r\n    @type(CCFloat)\r\n    @editable\r\n    set aoSaturation (value: number) {\r\n        this._aoSaturation = value;\r\n    }\r\n    get aoSaturation (): number {\r\n        return this._aoSaturation;\r\n    }\r\n\r\n    @tooltip('i18n:hbao.needBlur')\r\n    @type(CCBoolean)\r\n    @editable\r\n    set needBlur (value: boolean) {\r\n        this._needBlur = value;\r\n    }\r\n    get needBlur (): boolean {\r\n        return this._needBlur;\r\n    }\r\n}\r\n","import { ccclass, disallowMultiple, executeInEditMode, help, menu, range, rangeMin, serializable, slide, tooltip, type } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\nimport { CCFloat } from '../../../core';\r\n\r\n@ccclass('cc.DOF')\r\n@help('cc.DOF')\r\n@menu('PostProcess/DOF')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class DOF extends PostProcessSetting {\r\n    @serializable\r\n    protected _focusDistance = 0.0;\r\n    @serializable\r\n    protected _focusRange = 0.0;\r\n    @serializable\r\n    protected _bokehRadius = 1.0;\r\n\r\n    @rangeMin(0)\r\n    @type(CCFloat)\r\n    set focusDistance (value: number) {\r\n        this._focusDistance = value;\r\n    }\r\n    get focusDistance (): number {\r\n        return this._focusDistance;\r\n    }\r\n\r\n    @rangeMin(0)\r\n    @type(CCFloat)\r\n    set focusRange (value: number) {\r\n        this._focusRange = value;\r\n    }\r\n    get focusRange (): number {\r\n        return this._focusRange;\r\n    }\r\n\r\n    @slide\r\n    @range([1, 10, 0.01])\r\n    @rangeMin(1.0)\r\n    @type(CCFloat)\r\n    set bokehRadius (value: number) {\r\n        this._bokehRadius = value;\r\n    }\r\n    get bokehRadius (): number {\r\n        return this._bokehRadius;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR } from 'internal:constants';\r\nimport { cclegacy, toRadian, Vec2, Vec4, Vec3, v3 } from '../../../core';\r\nimport { Camera, CameraUsage } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { getSetting, SettingPass } from './setting-pass';\r\nimport { HBAO } from '../components';\r\nimport { Texture2D } from '../../../asset/assets/texture-2d';\r\nimport { ImageAsset } from '../../../asset/assets/image-asset';\r\nimport { DebugViewCompositeType, DebugViewSingleType } from '../../debug-view';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Scene } from '../../../scene-graph/scene';\r\nimport { TextureFilter, PixelFormat, WrapMode } from '../../../asset/assets/asset-enum';\r\n\r\nconst vec2 = new Vec2();\r\n\r\nclass HBAOParams {\r\n    declare randomTexture: Texture2D;\r\n\r\n    get uvDepthToEyePosParams (): Vec4 {\r\n        return this._uvDepthToEyePosParams;\r\n    }\r\n\r\n    get radiusParam (): Vec4 {\r\n        return this._radiusParam;\r\n    }\r\n\r\n    get miscParam (): Vec4 {\r\n        return this._miscParam;\r\n    }\r\n\r\n    get blurParam (): Vec4 {\r\n        return this._blurParam;\r\n    }\r\n\r\n    set depthTexFullResolution (val: Vec2) {\r\n        this._depthTexFullResolution.set(val);\r\n    }\r\n\r\n    set depthTexResolution (val: Vec2) {\r\n        this._depthTexResolution.set(val);\r\n    }\r\n\r\n    set sceneScale (val: number) {\r\n        this._sceneScale = val;\r\n    }\r\n\r\n    set cameraFov (val: number) {\r\n        this._cameraFov = val;\r\n    }\r\n\r\n    set radiusScale (val: number) {\r\n        this._radiusScale = val;\r\n    }\r\n\r\n    set angleBiasDegree (val: number) {\r\n        this._angleBiasDegree = val;\r\n    }\r\n\r\n    set aoStrength (val: number) {\r\n        this._aoStrength = val;\r\n    }\r\n\r\n    set blurSharpness (val: number) {\r\n        this._blurSharpness = val;\r\n    }\r\n\r\n    set aoSaturation (val: number) {\r\n        this._aoSaturation = val;\r\n    }\r\n\r\n    private _uvDepthToEyePosParams = new Vec4();\r\n    private _radiusParam = new Vec4();\r\n    private _miscParam = new Vec4();\r\n    private _blurParam = new Vec4();\r\n\r\n    private _depthTexFullResolution = new Vec2(1024);\r\n    private _depthTexResolution = new Vec2(1024);\r\n    private _sceneScale = 1.0;\r\n    private _cameraFov = toRadian(45.0);\r\n    private _radiusScale = 1.0;\r\n    private _angleBiasDegree = 10.0;\r\n    private _aoStrength = 1.0;\r\n    private _blurSharpness = 8;\r\n    private _aoSaturation = 1.0;\r\n\r\n    private _randomDirAndJitter: number[] = [\r\n        238, 91, 87, 255, 251, 44, 119, 255, 247, 64, 250, 255, 232, 5, 225, 255,\r\n        253, 177, 140, 255, 250, 51, 84, 255, 243, 76, 97, 255, 252, 36, 232, 255,\r\n        235, 100, 24, 255, 252, 36, 158, 255, 254, 20, 142, 255, 245, 135, 124, 255,\r\n        251, 43, 121, 255, 253, 31, 145, 255, 235, 98, 160, 255, 240, 146, 198, 255,\r\n    ];\r\n    private _init (): void {\r\n        const width = 4;\r\n        const height = 4;\r\n        const pixelFormat = PixelFormat.RGBA8888;\r\n        const arrayBuffer = new Uint8Array(width * height * 4);\r\n        for (let i = 0; i < this._randomDirAndJitter.length; i++) {\r\n            arrayBuffer[i] = this._randomDirAndJitter[i];\r\n        }\r\n        const image = new ImageAsset({\r\n            width,\r\n            height,\r\n            _data: arrayBuffer,\r\n            _compressed: false,\r\n            format: pixelFormat,\r\n        });\r\n        this.randomTexture = new Texture2D();\r\n        this.randomTexture.setFilters(TextureFilter.NEAREST, TextureFilter.NEAREST);\r\n        this.randomTexture.setMipFilter(TextureFilter.NONE);\r\n        this.randomTexture.setWrapMode(WrapMode.REPEAT, WrapMode.REPEAT, WrapMode.REPEAT);\r\n        this.randomTexture.image = image;\r\n    }\r\n\r\n    public update (): void {\r\n        // should be same value as shader\r\n        const HALF_KERNEL_RADIUS = 4;\r\n        const INV_LN2 = 1.44269504;\r\n        const SQRT_LN2 = 0.8325546;\r\n\r\n        const gR = this._radiusScale * this._sceneScale;\r\n        const gR2 = gR * gR;\r\n        const gNegInvR2 = -1.0 / gR2;\r\n        const gMaxRadiusPixels = 0.1 * Math.min(this._depthTexFullResolution.x, this._depthTexFullResolution.y);\r\n        this._radiusParam.set(gR, gR2, gNegInvR2, gMaxRadiusPixels);\r\n\r\n        const vec2 = new Vec2(this._depthTexResolution.y / this._depthTexResolution.x, 1.0);\r\n        const gFocalLen = new Vec2(vec2.x / Math.tan(this._cameraFov * 0.5), vec2.y / Math.tan(this._cameraFov * 0.5));\r\n        const gTanAngleBias = Math.tan(toRadian(this._angleBiasDegree));\r\n        const gStrength = this._aoStrength;\r\n        this._miscParam.set(gFocalLen.x, gFocalLen.y, gTanAngleBias, gStrength);\r\n\r\n        const gUVToViewA = new Vec2(2.0 / gFocalLen.x, -2.0 / gFocalLen.y);\r\n        const gUVToViewB = new Vec2(-1.0 / gFocalLen.x, 1.0 / gFocalLen.y);\r\n        this._uvDepthToEyePosParams.set(gUVToViewA.x, gUVToViewA.y, gUVToViewB.x, gUVToViewB.y);\r\n\r\n        const BlurSigma = (HALF_KERNEL_RADIUS + 1.0) * 0.5;\r\n        const gBlurFallOff = INV_LN2 / (2.0 * BlurSigma * BlurSigma);\r\n        const gBlurDepthThreshold = 2.0 * SQRT_LN2 * (this._sceneScale / this._blurSharpness);\r\n        this._blurParam.set(gBlurFallOff, gBlurDepthThreshold, this._blurSharpness / 8.0, this._aoSaturation);\r\n    }\r\n\r\n    constructor () {\r\n        this._init();\r\n        this.update();\r\n    }\r\n}\r\n\r\nexport class HBAOPass extends SettingPass {\r\n    private HBAO_PASS_INDEX = 0;\r\n    private HBAO_BLUR_X_PASS_INDEX = 1;\r\n    private HBAO_BLUR_Y_PASS_INDEX = 2;\r\n    private HBAO_COMBINED_PASS_INDEX = 3;\r\n    private _hbaoParams: HBAOParams | null = null;\r\n    private _initialize = false;\r\n    private averageObjectSize = new Map<Scene, number>();\r\n\r\n    get setting (): HBAO { return getSetting(HBAO); }\r\n\r\n    name = 'HBAOPass';\r\n    effectName = 'pipeline/post-process/hbao';\r\n    outputNames = ['hbaoRTName', 'hbaoBluredRTName'];\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        let enable = super.checkEnable(camera);\r\n        if (EDITOR && camera.cameraUsage === CameraUsage.PREVIEW) {\r\n            enable = false;\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    onGlobalPipelineStateChanged (): void {\r\n        passContext.material = this.material;\r\n        const passes = passContext.material.passes;\r\n        for (let i = 0; i < passes.length; i++) {\r\n            const pass = passes[i];\r\n            pass.beginChangeStatesSilently();\r\n            pass.tryCompile(); // force update shaders\r\n            pass.endChangeStatesSilently();\r\n        }\r\n    }\r\n\r\n    public getSceneScale (camera: Camera): number {\r\n        let sceneScale = camera.nearClip;\r\n        if (!this.averageObjectSize.has(camera.node.scene)) {\r\n            this._calculateObjectSize(camera.node.scene, camera.visibility);\r\n        }\r\n        if (this.averageObjectSize.has(camera.node.scene)) {\r\n            const objectSize = this.averageObjectSize.get(camera.node.scene)!;\r\n            // simple conversion\r\n            sceneScale = objectSize * 0.1;\r\n        }\r\n        return sceneScale;\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        passContext.updatePassViewPort();\r\n        const width = passContext.passViewport.width;\r\n        const height = passContext.passViewport.height;\r\n        if (!this._hbaoParams) {\r\n            this._hbaoParams = new HBAOParams();\r\n        }\r\n\r\n        const setting = this.setting;\r\n        if (!this._initialize) {\r\n            passContext.material = this.material;\r\n            this.material.setProperty('RandomTex', this._hbaoParams.randomTexture, 0);\r\n        }\r\n\r\n        // params\r\n        const aoStrength = 1.0;\r\n        // todo: nearest object distance from camera\r\n        const sceneScale = this.getSceneScale(camera);\r\n        // todo: Half Res Depth Tex\r\n        this._hbaoParams.depthTexFullResolution = vec2.set(width, height);\r\n        this._hbaoParams.depthTexResolution = vec2.set(width, height);\r\n        this._hbaoParams.sceneScale = sceneScale;\r\n        this._hbaoParams.cameraFov = camera.fov;\r\n        this._hbaoParams.radiusScale = setting.radiusScale;\r\n        this._hbaoParams.angleBiasDegree = setting.angleBiasDegree;\r\n        this._hbaoParams.aoStrength = aoStrength;\r\n        this._hbaoParams.blurSharpness = setting.blurSharpness;\r\n        this._hbaoParams.aoSaturation = setting.aoSaturation;\r\n        this._hbaoParams.update();\r\n\r\n        // debug view\r\n        const director = cclegacy.director;\r\n        const root = director.root;\r\n        if (root.debugView) {\r\n            if (root.debugView.isEnabled()\r\n                && (root.debugView.singleMode !== DebugViewSingleType.NONE && root.debugView.singleMode !== DebugViewSingleType.AO\r\n                || !root.debugView.isCompositeModeEnabled(DebugViewCompositeType.AO))) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const inputRT = this.lastPass!.slotName(camera, 0);\r\n        const inputDS = this.lastPass!.slotName(camera, 1);\r\n        const hbaoInfo = this._renderHBAOPass(camera, inputDS);\r\n        let hbaoCombinedInputRTName = hbaoInfo.rtName;\r\n        if (this.setting.needBlur) {\r\n            const haboBlurInfoX =  this._renderHBAOBlurPass(camera, hbaoInfo.rtName, inputDS, false);\r\n            const haboBlurInfoY = this._renderHBAOBlurPass(camera, haboBlurInfoX.rtName, inputDS, true);\r\n            hbaoCombinedInputRTName = haboBlurInfoY.rtName;\r\n        }\r\n        this._renderHBAOCombinedPass(camera, hbaoCombinedInputRTName, inputRT);\r\n    }\r\n\r\n    private _renderHBAOPass (camera: Camera, inputDS: string): { rtName: string; dsName: string; } {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        const passIdx = this.HBAO_PASS_INDEX;\r\n        this.material.setProperty('uvDepthToEyePosParams',  this._hbaoParams!.uvDepthToEyePosParams, passIdx);\r\n        this.material.setProperty('radiusParam', this._hbaoParams!.radiusParam, passIdx);\r\n        this.material.setProperty('miscParam', this._hbaoParams!.miscParam, passIdx);\r\n        this.material.setProperty(\r\n            'randomTexSize',\r\n            new Vec4(\r\n                this._hbaoParams!.randomTexture.width,\r\n                this._hbaoParams!.randomTexture.height,\r\n                1.0 / this._hbaoParams!.randomTexture.width,\r\n                1.0 / this._hbaoParams!.randomTexture.height,\r\n            ),\r\n            passIdx,\r\n        );\r\n        this.material.setProperty('blurParam', this._hbaoParams!.blurParam, passIdx);\r\n\r\n        passContext.clearBlack();\r\n\r\n        const outputRT = super.slotName(camera, 0);\r\n        const layoutName = 'hbao-pass';\r\n        const passName = `CameraHBAOPass${cameraID}`;\r\n        passContext.addRenderPass(layoutName, passName)\r\n            .setPassInput(inputDS, 'DepthTex')\r\n            .addRasterView(outputRT, Format.RGBA8)\r\n            .blitScreen(passIdx)\r\n            .version();\r\n\r\n        return { rtName: outputRT, dsName: inputDS };\r\n    }\r\n\r\n    private _renderHBAOBlurPass (camera: Camera, inputRT: string, inputDS: string, isYPass: boolean): { rtName: string; dsName: string; } {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        passContext.clearBlack();\r\n\r\n        const passIdx = isYPass ? this.HBAO_BLUR_Y_PASS_INDEX : this.HBAO_BLUR_X_PASS_INDEX;\r\n        passContext.material = this.material;\r\n        this.material.setProperty('uvDepthToEyePosParams',  this._hbaoParams!.uvDepthToEyePosParams, passIdx);\r\n        this.material.setProperty('radiusParam', this._hbaoParams!.radiusParam, passIdx);\r\n        this.material.setProperty('miscParam', this._hbaoParams!.miscParam, passIdx);\r\n        this.material.setProperty(\r\n            'randomTexSize',\r\n            new Vec4(\r\n                this._hbaoParams!.randomTexture.width,\r\n                this._hbaoParams!.randomTexture.height,\r\n                1.0 / this._hbaoParams!.randomTexture.width,\r\n                1.0 / this._hbaoParams!.randomTexture.height,\r\n            ),\r\n            passIdx,\r\n        );\r\n        this.material.setProperty('blurParam', this._hbaoParams!.blurParam, passIdx);\r\n\r\n        let outputRT = super.slotName(camera, 1);\r\n        let layoutName = 'blurx-pass';\r\n        let passName = `CameraHBAOBluredXPass${cameraID}`;\r\n        if (isYPass) {\r\n            outputRT = super.slotName(camera, 0);\r\n            layoutName = 'blury-pass';\r\n            passName = `CameraHBAOBluredYPass${cameraID}`;\r\n        }\r\n        passContext.addRenderPass(layoutName, passName)\r\n            .setPassInput(inputRT, 'AOTexNearest')\r\n            .setPassInput(inputDS, 'DepthTex')\r\n            .addRasterView(outputRT, Format.RGBA8)\r\n            .blitScreen(passIdx)\r\n            .version();\r\n\r\n        return { rtName: outputRT, dsName: inputDS };\r\n    }\r\n\r\n    private _renderHBAOCombinedPass (camera: Camera, inputRT: string, outputRT: string): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        const passIdx = this.HBAO_COMBINED_PASS_INDEX;\r\n        passContext.material = this.material;\r\n        this.material.setProperty('uvDepthToEyePosParams',  this._hbaoParams!.uvDepthToEyePosParams, passIdx);\r\n        this.material.setProperty('radiusParam', this._hbaoParams!.radiusParam, passIdx);\r\n        this.material.setProperty('miscParam', this._hbaoParams!.miscParam, passIdx);\r\n        this.material.setProperty(\r\n            'randomTexSize',\r\n            new Vec4(\r\n                this._hbaoParams!.randomTexture.width,\r\n                this._hbaoParams!.randomTexture.height,\r\n                1.0 / this._hbaoParams!.randomTexture.width,\r\n                1.0 / this._hbaoParams!.randomTexture.height,\r\n            ),\r\n            passIdx,\r\n        );\r\n        this.material.setProperty('blurParam', this._hbaoParams!.blurParam, passIdx);\r\n\r\n        passContext.clearFlag = ClearFlagBit.NONE;\r\n\r\n        const layoutName = 'combine-pass';\r\n        const passName = `CameraHBAOCombinedPass${cameraID}`;\r\n        passContext.addRenderPass(layoutName, passName)\r\n            .setPassInput(inputRT, 'AOTexNearest')\r\n            .addRasterView(outputRT, Format.RGBA8)\r\n            .blitScreen(passIdx)\r\n            .version();\r\n    }\r\n\r\n    private _calculateObjectSize (scene: Scene, visibility: number): void {\r\n        if (!scene || !scene.renderScene) {\r\n            return;\r\n        }\r\n        const sumSize = new Vec3(0);\r\n        let modelCount = 0;\r\n        const models = scene.renderScene.models;\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (!model.node || !model.worldBounds) continue;\r\n            if (model.node.layer & visibility) {\r\n                sumSize.add(model.worldBounds.halfExtents);\r\n                modelCount++;\r\n            }\r\n        }\r\n        if (modelCount > 0) {\r\n            sumSize.divide(v3(modelCount));\r\n            const scale = Math.min(sumSize.x, sumSize.y, sumSize.z);\r\n            this.averageObjectSize.set(scene, scale);\r\n        }\r\n    }\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        return this.lastPass!.slotName(camera, index);\r\n    }\r\n}\r\n","import { Vec2, Vec4 } from '../../../core';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { getSetting, SettingPass } from './setting-pass';\r\nimport { ColorGrading } from '../components';\r\nimport { disablePostProcessForDebugView } from './base-pass';\r\n\r\nexport class ColorGradingPass extends SettingPass {\r\n    get setting (): ColorGrading { return getSetting(ColorGrading); }\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        let enable = super.checkEnable(camera);\r\n        if (disablePostProcessForDebugView()) {\r\n            enable = false;\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    name = 'ColorGradingPass';\r\n    effectName = 'pipeline/post-process/color-grading';\r\n    outputNames = ['ColorGrading'];\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        passContext.clearFlag = ClearFlagBit.COLOR;\r\n        Vec4.set(passContext.clearColor, 0, 0, 0, 1);\r\n\r\n        passContext.material = this.material;\r\n\r\n        const setting = this.setting;\r\n        this.material.setProperty('colorGradingMap', setting.colorGradingMap);\r\n        this.material.setProperty('contribute', setting.contribute);\r\n        const textureSize = setting.colorGradingMap ? new Vec2(setting.colorGradingMap.width, setting.colorGradingMap.height) : new Vec2(1.0, 1.0);\r\n        this.material.setProperty('lutTextureSize', textureSize);\r\n\r\n        const input = this.lastPass!.slotName(camera, 0);\r\n        const slot = this.slotName(camera, 0);\r\n        const isSquareMap = setting.colorGradingMap && setting.colorGradingMap.width === setting.colorGradingMap.height;\r\n        const passName = isSquareMap ? 'color-grading-8x8' : 'color-grading-nx1';\r\n        const passIndx = isSquareMap ? 1 : 0;\r\n        passContext\r\n            .updatePassViewPort()\r\n            .addRenderPass(passName, `color-grading${cameraID}`)\r\n            .setPassInput(input, 'sceneColorMap')\r\n            .addRasterView(slot, Format.RGBA8)\r\n            .blitScreen(passIndx)\r\n            .version();\r\n    }\r\n}\r\n","import { Vec4 } from '../../../core';\r\nimport { Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { getSetting, SettingPass } from './setting-pass';\r\nimport { Bloom } from '../components';\r\nimport { disablePostProcessForDebugView } from './base-pass';\r\n\r\nconst MAX_BLOOM_FILTER_PASS_NUM = 6;\r\nconst BLOOM_DOWNSAMPLEPASS_INDEX = 1;\r\nconst BLOOM_UPSAMPLEPASS_INDEX = BLOOM_DOWNSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM;\r\nconst BLOOM_COMBINEPASS_INDEX = BLOOM_UPSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM;\r\nexport class BloomPass extends SettingPass {\r\n    get setting (): Bloom { return getSetting(Bloom); }\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        let enable = super.checkEnable(camera);\r\n        if (disablePostProcessForDebugView()) {\r\n            enable = false;\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    name = 'BloomPass';\r\n    effectName = 'pipeline/post-process/bloom';\r\n    outputNames = ['BloomColor'];\r\n    private _hdrInputName: string = '';\r\n\r\n    set hdrInputName (name: string) {\r\n        this._hdrInputName = name;\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n        const cameraName = `Camera${cameraID}`;\r\n\r\n        const passViewport = passContext.passViewport;\r\n\r\n        passContext.clearBlack();\r\n\r\n        passContext.material = this.material;\r\n\r\n        const setting = this.setting;\r\n\r\n        const input = this.lastPass!.slotName(camera, 0);\r\n        const output = `BLOOM_PREFILTER_COLOR${cameraID}`;\r\n        // prefilter pass\r\n        let shadingScale = 1 / 2;\r\n        const enableAlphaMask = setting.enableAlphaMask as unknown as number;\r\n        const useHDRIntensity = setting.useHdrIlluminance as unknown as number;\r\n        passContext.material.setProperty('texSize', new Vec4(useHDRIntensity, 0, setting.threshold, enableAlphaMask), 0);\r\n        passContext\r\n            .updatePassViewPort(shadingScale)\r\n            .addRenderPass('bloom-prefilter', `bloom-prefilter${cameraID}`)\r\n            .setPassInput(input, 'outputResultMap')\r\n            .setPassInput(this._hdrInputName, 'hdrInputMap')\r\n            .addRasterView(output, Format.RGBA8)\r\n            .blitScreen(0)\r\n            .version();\r\n\r\n        // down sampler pass\r\n        for (let i = 0; i < setting.iterations; ++i) {\r\n            const texSize = new Vec4(passViewport.width, passViewport.height, 0, 0);\r\n            const bloomPassDownSampleRTName = `dsBloomPassDownSampleColor${cameraName}${i}`;\r\n            const downSamplerInput = i === 0 ? output : `dsBloomPassDownSampleColor${cameraName}${i - 1}`;\r\n            passContext.material.setProperty('texSize', texSize, BLOOM_DOWNSAMPLEPASS_INDEX + i);\r\n            shadingScale /= 2;\r\n            passContext\r\n                .updatePassViewPort(shadingScale)\r\n                .addRenderPass(`bloom-upsample${i}`, `bloom-upsample${i}${cameraID}`)\r\n                .setPassInput(downSamplerInput, 'bloomTexture')\r\n                .addRasterView(bloomPassDownSampleRTName, Format.RGBA8)\r\n                .blitScreen(BLOOM_DOWNSAMPLEPASS_INDEX + i)\r\n                .version();\r\n        }\r\n\r\n        // up sampler pass\r\n        for (let i = 0; i < setting.iterations; ++i) {\r\n            const texSize = new Vec4(passViewport.width, passViewport.height, 0, 0);\r\n            const bloomPassUpSampleRTName = `dsBloomPassUpSampleColor${cameraName}${setting.iterations - 1 - i}`;\r\n            const upSamplerInput = i === 0 ? `dsBloomPassDownSampleColor${cameraName}${setting.iterations - 1}`\r\n                : `dsBloomPassUpSampleColor${cameraName}${setting.iterations - i}`;\r\n            passContext.material.setProperty('texSize', texSize, BLOOM_UPSAMPLEPASS_INDEX + i);\r\n            shadingScale *= 2;\r\n            passContext\r\n                .updatePassViewPort(shadingScale)\r\n                .addRenderPass(`bloom-downsample${i}`, `bloom-downsample${i}${cameraID}`)\r\n                .setPassInput(upSamplerInput, 'bloomTexture')\r\n                .addRasterView(bloomPassUpSampleRTName, Format.RGBA8)\r\n                .blitScreen(BLOOM_UPSAMPLEPASS_INDEX + i)\r\n                .version();\r\n        }\r\n\r\n        // combine Pass\r\n        passContext.material.setProperty('texSize', new Vec4(0, 0, 0, setting.intensity), BLOOM_COMBINEPASS_INDEX);\r\n        passContext\r\n            .updatePassViewPort()\r\n            .addRenderPass(`bloom-combine`, `bloom-combine${cameraID}`)\r\n            .setPassInput(input, 'outputResultMap')\r\n            .setPassInput(`dsBloomPassUpSampleColor${cameraName}${0}`, 'bloomTexture')\r\n            .addRasterView(this.slotName(camera, 0), Format.RGBA8)\r\n            .blitScreen(BLOOM_COMBINEPASS_INDEX)\r\n            .version();\r\n    }\r\n}\r\n","import { ccclass, disallowMultiple, executeInEditMode, help, menu } from '../../../core/data/decorators';\r\nimport { PostProcessSetting } from './post-process-setting';\r\n\r\n@ccclass('cc.FXAA')\r\n@help('cc.FXAA')\r\n@menu('PostProcess/FXAA')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class FXAA extends PostProcessSetting {\r\n}\r\n","import { Vec4 } from '../../../core';\r\nimport { Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { getSetting, SettingPass } from './setting-pass';\r\nimport { FXAA } from '../components/fxaa';\r\n\r\nexport class FxaaPass extends SettingPass {\r\n    get setting (): FXAA { return getSetting(FXAA); }\r\n\r\n    name = 'FxaaPass';\r\n    effectName = 'pipeline/post-process/fxaa-hq';\r\n    outputNames = ['FxaaColor'];\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n        passContext.clearBlack();\r\n        passContext.material = this.material;\r\n\r\n        const setting = this.setting;\r\n\r\n        const input = this.lastPass!.slotName(camera, 0);\r\n        const output = this.slotName(camera);\r\n\r\n        passContext.updatePassViewPort();\r\n        const width = passContext.passViewport.width;\r\n        const height = passContext.passViewport.height;\r\n\r\n        passContext.material.setProperty('texSize', new Vec4(width, height, 1.0 / width, 1.0 / height), 0);\r\n\r\n        passContext.addRenderPass('fxaa', `fxaa${cameraID}`)\r\n            .setPassInput(input, 'sceneColorMap')\r\n            .addRasterView(output, Format.RGBA8)\r\n            .blitScreen(0)\r\n            .version();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec4, cclegacy } from '../../../core';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera, FOG_TYPE_NONE } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { SettingPass } from './setting-pass';\r\nimport { Root } from '../../../root';\r\n\r\nexport class FloatOutputProcessPass extends SettingPass {\r\n    name = 'FloatOutputProcessPass';\r\n    effectName = 'pipeline/float-output-process';\r\n    outputNames = ['FloatOutputProcess'];\r\n\r\n    hdrInputName: string = '';\r\n\r\n    enableInAllEditorCamera = true;\r\n    enable = true;\r\n    checkEnable (camera: Camera): boolean {\r\n        const ppl = (cclegacy.director.root as Root).pipeline;\r\n        return ppl.getMacroBool('CC_USE_FLOAT_OUTPUT');\r\n    }\r\n    getHDRInputName (): string { return this.hdrInputName; }\r\n\r\n    onGlobalPipelineStateChanged (): void {\r\n        passContext.material = this.material;\r\n        const passes = passContext.material.passes;\r\n        for (let i = 0; i < passes.length; i++) {\r\n            const pass = passes[i];\r\n            pass.beginChangeStatesSilently();\r\n            pass.tryCompile(); // force update shaders\r\n            pass.endChangeStatesSilently();\r\n        }\r\n    }\r\n    needDepthInput (ppl: Pipeline): boolean {\r\n        return ppl.pipelineSceneData.fog.type !== FOG_TYPE_NONE;\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n        passContext.material = this.material;\r\n\r\n        let copyDS = '';\r\n        let passIndx = 0;\r\n        const inputDS = passContext.depthSlotName;\r\n        if (this.needDepthInput(ppl)) {\r\n            copyDS = 'floatOutputProcessCopyDS';\r\n            // ==== Copy input DS ===\r\n            const copyInputDSPassLayoutName = 'copy-pass';\r\n            const copyInputDSPass = `floatOutputProcessCopyDS-pass${cameraID}`;\r\n            passContext.updatePassViewPort()\r\n                .addRenderPass(copyInputDSPassLayoutName, copyInputDSPass)\r\n                .setClearFlag(ClearFlagBit.COLOR)\r\n                .setClearColor(1.0, 0, 0, 0)\r\n                .setPassInput(inputDS, 'depthRaw')\r\n                .addRasterView(copyDS, Format.RGBA8)\r\n                .blitScreen(passIndx)\r\n                .version();\r\n        }\r\n\r\n        passIndx = 1;\r\n        this.hdrInputName = this.lastPass!.slotName(camera, 0);\r\n        const output = this.slotName(camera, 0);\r\n        const layoutName = 'tone-mapping';\r\n        const passName = `tone-mapping${cameraID}`;\r\n        passContext.clearFlag = ClearFlagBit.COLOR;\r\n        Vec4.set(passContext.clearColor, camera.clearColor.x, camera.clearColor.y, camera.clearColor.z, camera.clearColor.w);\r\n        passContext.updatePassViewPort()\r\n            .addRenderPass(layoutName, passName)\r\n            .setPassInput(this.hdrInputName, 'u_texSampler')\r\n            .setPassInput(copyDS, 'DepthTex')\r\n            .addRasterView(output, Format.RGBA8)\r\n            .blitScreen(passIndx)\r\n            .version();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { LightInfo, QueueHint, SceneFlags } from '../../custom/types';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass, getRTFormatBeforeToneMapping, getShadowMapSampler } from './base-pass';\r\nimport { ShadowPass } from './shadow-pass';\r\n\r\nexport class ForwardTransparencyPass extends BasePass {\r\n    name = 'ForwardTransparencyPass';\r\n\r\n    enableInAllEditorCamera = true;\r\n    depthBufferShadingScale = 1;\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        return this.lastPass!.slotName(camera, index);\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        passContext.clearFlag = ClearFlagBit.NONE;\r\n\r\n        const output = this.lastPass!.slotName(camera, 0);\r\n        const outputDS = passContext.depthSlotName;\r\n\r\n        const cameraID = getCameraUniqueID(camera);\r\n        const isOffScreen = true;\r\n        passContext\r\n            .updatePassViewPort()\r\n            .addRenderPass('default', `${this.name}_${cameraID}`)\r\n            .addRasterView(output, getRTFormatBeforeToneMapping(ppl), isOffScreen)\r\n            .addRasterView(outputDS, Format.DEPTH_STENCIL, isOffScreen)\r\n            .version();\r\n\r\n        const pass = passContext.pass!;\r\n        const shadowPass = passContext.shadowPass as ShadowPass;\r\n        if (shadowPass) {\r\n            for (const dirShadowName of shadowPass.mainLightShadows) {\r\n                if (ppl.containsResource(dirShadowName)) {\r\n                    pass.addTexture(dirShadowName, 'cc_shadowMap', getShadowMapSampler());\r\n                }\r\n            }\r\n            for (const spotShadowName of shadowPass.spotLightShadows) {\r\n                if (ppl.containsResource(spotShadowName)) {\r\n                    pass.addTexture(spotShadowName, 'cc_spotShadowMap', getShadowMapSampler());\r\n                }\r\n            }\r\n        }\r\n\r\n        pass.addQueue(QueueHint.RENDER_TRANSPARENT)\r\n            .addSceneOfCamera(\r\n                camera,\r\n                new LightInfo(),\r\n                SceneFlags.UI | SceneFlags.TRANSPARENT_OBJECT | SceneFlags.GEOMETRY,\r\n            );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { LightInfo, QueueHint, SceneFlags } from '../../custom/types';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass } from './base-pass';\r\nimport { ForwardPass } from './forward-pass';\r\n\r\nexport class ForwardTransparencySimplePass extends BasePass {\r\n    name = 'ForwardTransparencySimplePass';\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        return (passContext.forwardPass as ForwardPass)!.slotName(camera, index);\r\n    }\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const pass = passContext.pass!;\r\n        pass.addQueue(QueueHint.RENDER_TRANSPARENT)\r\n            .addSceneOfCamera(\r\n                camera,\r\n                new LightInfo(),\r\n                SceneFlags.UI | SceneFlags.TRANSPARENT_OBJECT | SceneFlags.GEOMETRY,\r\n            );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec4, Vec3, cclegacy, warnID } from '../../../core';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { LightInfo, QueueHint, SceneFlags } from '../../custom/types';\r\nimport { BasicPipeline, PipelineRuntime } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { ShadowPass } from './shadow-pass';\r\nimport { Root } from '../../../root';\r\n\r\nimport { SettingPass } from './setting-pass';\r\nimport { forceEnableFloatOutput, getRTFormatBeforeToneMapping, getShadowMapSampler } from './base-pass';\r\n\r\nexport const COPY_INPUT_DS_PASS_INDEX = 0;\r\nexport const SSSS_BLUR_X_PASS_INDEX = 1;\r\nexport const SSSS_BLUR_Y_PASS_INDEX = 2;\r\n\r\nfunction hasSkinObject (ppl: PipelineRuntime): boolean {\r\n    const sceneData = ppl.pipelineSceneData;\r\n    return sceneData.skin.enabled && sceneData.skinMaterialModel !== null;\r\n}\r\n\r\nconst _varianceArray: number[] = [0.0484, 0.187, 0.567, 1.99, 7.41];\r\nconst _strengthParameterArray: number[] = [0.100, 0.118, 0.113, 0.358, 0.078];\r\nconst _vec3Temp: Vec3 = new Vec3();\r\nconst _vec3Temp2: Vec3 = new Vec3();\r\nconst _vec4Temp: Vec4 = new Vec4();\r\nconst _vec4Temp2: Vec4 = new Vec4();\r\n\r\nexport const EXPONENT = 2.0;\r\nexport const I_SAMPLES_COUNT = 25;\r\n\r\nexport class SSSSBlurData {\r\n    get ssssStrength (): Vec3 {\r\n        return this._v3SSSSStrength;\r\n    }\r\n    set ssssStrength (val: Vec3) {\r\n        this._v3SSSSStrength = val;\r\n        this._updateSampleCount();\r\n    }\r\n\r\n    get ssssFallOff (): Vec3 {\r\n        return this._v3SSSSFallOff;\r\n    }\r\n    set ssssFallOff (val: Vec3) {\r\n        this._v3SSSSFallOff = val;\r\n        this._updateSampleCount();\r\n    }\r\n\r\n    get kernel (): Vec4[] {\r\n        return this._kernel;\r\n    }\r\n\r\n    private _v3SSSSStrength = new Vec3(0.48, 0.41, 0.28);\r\n    private _v3SSSSFallOff = new Vec3(1.0, 0.37, 0.3);\r\n    private _kernel: Vec4[] = [];\r\n\r\n    /**\r\n     * We use a falloff to modulate the shape of the profile. Big falloffs\r\n     * spreads the shape making it wider, while small falloffs make it\r\n     * narrower.\r\n     */\r\n    private _gaussian (out: Vec3, variance: number, r: number): void {\r\n        const xx = r / (0.001 + this._v3SSSSFallOff.x);\r\n        out.x = Math.exp((-(xx * xx)) / (2.0 * variance)) / (2.0 * 3.14 * variance);\r\n        const yy = r / (0.001 + this._v3SSSSFallOff.y);\r\n        out.y = Math.exp((-(yy * yy)) / (2.0 * variance)) / (2.0 * 3.14 * variance);\r\n        const zz = r / (0.001 + this._v3SSSSFallOff.z);\r\n        out.z = Math.exp((-(zz * zz)) / (2.0 * variance)) / (2.0 * 3.14 * variance);\r\n    }\r\n\r\n    /**\r\n     * We used the red channel of the original skin profile defined in\r\n     * [d'Eon07] for all three channels. We noticed it can be used for green\r\n     * and blue channels (scaled using the falloff parameter) without\r\n     * introducing noticeable differences and allowing for total control over\r\n     * the profile. For example, it allows to create blue SSS gradients, which\r\n     * could be useful in case of rendering blue creatures.\r\n     */\r\n    private _profile (out: Vec3, val: number): void {\r\n        for (let i = 0; i < 5; i++) {\r\n            this._gaussian(_vec3Temp2, _varianceArray[i], val);\r\n            _vec3Temp2.multiplyScalar(_strengthParameterArray[i]);\r\n            out.add(_vec3Temp2);\r\n        }\r\n    }\r\n\r\n    private _updateSampleCount (): void {\r\n        const strength = this._v3SSSSStrength;\r\n        const nSamples = I_SAMPLES_COUNT;\r\n        const range = nSamples > 20 ? 3.0 : 2.0;\r\n\r\n        // Calculate the offsets:\r\n        const step = 2.0 * range / (nSamples - 1);\r\n        for (let i = 0; i < nSamples; i++) {\r\n            const o = -range + i * step;\r\n            const sign = o < 0.0 ? -1.0 : 1.0;\r\n            // eslint-disable-next-line no-restricted-properties\r\n            this._kernel[i].w = range * sign * Math.abs(o ** EXPONENT) / range ** EXPONENT;\r\n        }\r\n\r\n        // Calculate the weights:\r\n        for (let i = 0; i < nSamples; i++) {\r\n            const w0 = i > 0 ? Math.abs(this._kernel[i].w - this._kernel[i - 1].w) : 0.0;\r\n            const w1 = i < nSamples - 1 ? Math.abs(this._kernel[i].w - this._kernel[i + 1].w) : 0.0;\r\n            const area = (w0 + w1) / 2.0;\r\n            _vec3Temp.set(0);\r\n            this._profile(_vec3Temp, this._kernel[i].w);\r\n            _vec3Temp.multiplyScalar(area);\r\n            this._kernel[i].x = _vec3Temp.x;\r\n            this._kernel[i].y = _vec3Temp.y;\r\n            this._kernel[i].z = _vec3Temp.z;\r\n        }\r\n\r\n        // We want the offset 0.0 to come first:\r\n        const remainder = nSamples % 2;\r\n        _vec4Temp.set(this._kernel[(nSamples - remainder) / 2]);\r\n        for (let i = (nSamples - remainder) / 2; i > 0; i--) {\r\n            _vec4Temp2.set(this._kernel[i - 1]);\r\n            this._kernel[i].set(_vec4Temp2);\r\n        }\r\n        this._kernel[0].set(_vec4Temp);\r\n\r\n        // Calculate the sum of the weights, we will need to normalize them below:\r\n        _vec3Temp.set(0.0);\r\n        for (let i = 0; i < nSamples; i++) {\r\n            _vec3Temp.add3f(this._kernel[i].x, this._kernel[i].y, this._kernel[i].z);\r\n        }\r\n        // Normalize the weights:\r\n        for (let i = 0; i < nSamples; i++) {\r\n            this._kernel[i].x /= _vec3Temp.x;\r\n            this._kernel[i].y /= _vec3Temp.y;\r\n            this._kernel[i].z /= _vec3Temp.z;\r\n        }\r\n\r\n        // Tweak them using the desired strength. The first one is:\r\n        // lerp(1.0, kernel[0].rgb, strength)\r\n        this._kernel[0].x = (1.0 - strength.x) * 1.0 + strength.x * this._kernel[0].x;\r\n        this._kernel[0].y = (1.0 - strength.y) * 1.0 + strength.y * this._kernel[0].y;\r\n        this._kernel[0].z = (1.0 - strength.z) * 1.0 + strength.z * this._kernel[0].z;\r\n\r\n        // The others:\r\n        // lerp(0.0, kernel[0].rgb, strength)\r\n        for (let i = 1; i < nSamples; i++) {\r\n            this._kernel[i].x *= strength.x;\r\n            this._kernel[i].y *= strength.y;\r\n            this._kernel[i].z *= strength.z;\r\n        }\r\n    }\r\n\r\n    private _init (): void {\r\n        for (let i = 0; i < I_SAMPLES_COUNT; i++) {\r\n            this._kernel[i] = new Vec4();\r\n        }\r\n        this._updateSampleCount();\r\n    }\r\n\r\n    constructor () {\r\n        this._init();\r\n    }\r\n}\r\n\r\nexport class SkinPass extends SettingPass {\r\n    name = 'SkinPass';\r\n    effectName = 'pipeline/ssss-blur';\r\n    outputNames = ['SSSSBlur', 'SSSSBlurDS'];\r\n    ssssBlurData = new SSSSBlurData();\r\n\r\n    private _activate = false;\r\n\r\n    enableInAllEditorCamera = true;\r\n    checkEnable (camera: Camera): boolean {\r\n        const ppl = (cclegacy.director.root as Root).pipeline;\r\n        let enable = hasSkinObject(ppl);\r\n        if (enable) {\r\n            if (!this._activate) {\r\n                if (!ppl.getMacroBool('CC_USE_FLOAT_OUTPUT')) {\r\n                    warnID(16303);\r\n                }\r\n                if (!ppl.pipelineSceneData.standardSkinModel) {\r\n                    warnID(16304);\r\n                }\r\n                this._activate = true;\r\n            }\r\n            enable = forceEnableFloatOutput(ppl);\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    public render (camera: Camera, ppl: BasicPipeline): void {\r\n        passContext.material = this.material;\r\n\r\n        const inputRT = this.lastPass?.slotName(camera, 0);\r\n        const inputDS = passContext.depthSlotName;\r\n        this._buildSSSSBlurPass(camera, ppl, inputRT!, inputDS);\r\n        this._buildSpecularPass(camera, ppl, inputRT!, inputDS);\r\n    }\r\n\r\n    private _buildSSSSBlurPass (\r\n        camera: Camera,\r\n        ppl: BasicPipeline,\r\n        inputRT: string,\r\n        inputDS: string,\r\n    ): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n        const pipelineSceneData = ppl.pipelineSceneData;\r\n\r\n        let halfExtents = new Vec3(0.2, 0.2, 0.2);\r\n        const standardSkinModel = pipelineSceneData.standardSkinModel;\r\n        const skinMaterialModel = pipelineSceneData.skinMaterialModel;\r\n        if (standardSkinModel && standardSkinModel.worldBounds) {\r\n            halfExtents = standardSkinModel.worldBounds.halfExtents;\r\n        } else if (skinMaterialModel && skinMaterialModel.worldBounds) {\r\n            halfExtents = skinMaterialModel.worldBounds.halfExtents;\r\n        }\r\n        const boundingBox = Math.min(halfExtents.x, halfExtents.y, halfExtents.z) * 2.0;\r\n\r\n        const skin = pipelineSceneData.skin;\r\n\r\n        const ssssBlurRTName = super.slotName(camera, 0);\r\n        const ssssBlurDSName = super.slotName(camera, 1);\r\n\r\n        // ==== Copy input DS ===\r\n        const copyInputDSPassLayoutName = 'copy-pass';\r\n        const copyInputDSPass = `copyDS-pass${cameraID}`;\r\n        let passIdx = COPY_INPUT_DS_PASS_INDEX;\r\n        passContext.updatePassViewPort()\r\n            .addRenderPass(copyInputDSPassLayoutName, copyInputDSPass)\r\n            .setClearFlag(ClearFlagBit.COLOR)\r\n            .setClearColor(1.0, 0, 0, 0)\r\n            .setPassInput(inputDS, 'depthRaw')\r\n            .addRasterView(ssssBlurDSName, Format.RGBA8)\r\n            .blitScreen(passIdx)\r\n            .version();\r\n\r\n        // ==== SSSS Blur X Pass ===\r\n        passIdx = SSSS_BLUR_X_PASS_INDEX;\r\n        const ssssblurXPassLayoutName = 'ssss-blurX';\r\n        const ssssblurXPassPassName = `ssss-blurX${cameraID}`;\r\n        this.material.setProperty('blurInfo', new Vec4(\r\n            camera.fov,\r\n            skin.blurRadius,\r\n            boundingBox,\r\n            skin.sssIntensity,\r\n        ), passIdx);\r\n        this.material.setProperty('kernel',  this.ssssBlurData.kernel, passIdx);\r\n        passContext.updatePassViewPort()\r\n            .addRenderPass(ssssblurXPassLayoutName, ssssblurXPassPassName)\r\n            .setPassInput(inputRT, 'colorTex')\r\n            .setPassInput(ssssBlurDSName, 'depthTex')\r\n            .setClearFlag(ClearFlagBit.COLOR)\r\n            .setClearColor(0, 0, 0, 1)\r\n            .addRasterView(ssssBlurRTName, getRTFormatBeforeToneMapping(ppl))\r\n            .blitScreen(passIdx)\r\n            .version();\r\n\r\n        // === SSSS Blur Y Pass ===\r\n        passIdx = SSSS_BLUR_Y_PASS_INDEX;\r\n        const ssssblurYPassLayoutName = 'ssss-blurY';\r\n        const ssssblurYPassPassName = `ssss-blurY${cameraID}`;\r\n        this.material.setProperty('blurInfo', new Vec4(\r\n            camera.fov,\r\n            skin.blurRadius,\r\n            boundingBox,\r\n            skin.sssIntensity,\r\n        ), passIdx);\r\n        this.material.setProperty('kernel',  this.ssssBlurData.kernel, passIdx);\r\n        passContext.updatePassViewPort()\r\n            .addRenderPass(ssssblurYPassLayoutName, ssssblurYPassPassName)\r\n            .setPassInput(ssssBlurRTName, 'colorTex')\r\n            .setPassInput(ssssBlurDSName, 'depthTex')\r\n            .setClearFlag(ClearFlagBit.NONE)\r\n            .setClearColor(0, 0, 0, 1)\r\n            .addRasterView(inputRT, getRTFormatBeforeToneMapping(ppl))\r\n            .blitScreen(passIdx)\r\n            .version();\r\n    }\r\n\r\n    private _buildSpecularPass (\r\n        camera: Camera,\r\n        ppl: BasicPipeline,\r\n        inputRT: string,\r\n        inputDS: string,\r\n    ): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n        const layoutName = 'specular-pass';\r\n        const passName = `specular-pass${cameraID}`;\r\n        passContext.updatePassViewPort()\r\n            .addRenderPass(layoutName, passName)\r\n            .setClearFlag(ClearFlagBit.NONE)\r\n            .setClearColor(0, 0, 0, 1)\r\n            .addRasterView(inputRT, getRTFormatBeforeToneMapping(ppl), true)\r\n            .setClearFlag(ClearFlagBit.NONE)\r\n            .setClearDepthColor(camera.clearDepth, camera.clearStencil, 0, 1)\r\n            .addRasterView(inputDS, Format.DEPTH_STENCIL, true)\r\n            .version();\r\n\r\n        const pass = passContext.pass!;\r\n        const shadowPass = passContext.shadowPass as ShadowPass;\r\n        if (shadowPass) {\r\n            for (const dirShadowName of shadowPass.mainLightShadows) {\r\n                if (ppl.containsResource(dirShadowName)) {\r\n                    pass.addTexture(dirShadowName, 'cc_shadowMap', getShadowMapSampler());\r\n                }\r\n            }\r\n            for (const spotShadowName of shadowPass.spotLightShadows) {\r\n                if (ppl.containsResource(spotShadowName)) {\r\n                    pass.addTexture(spotShadowName, 'cc_spotShadowMap', getShadowMapSampler());\r\n                }\r\n            }\r\n        }\r\n\r\n        pass.addQueue(QueueHint.RENDER_OPAQUE, 'default')\r\n            .addSceneOfCamera(\r\n                camera,\r\n                new LightInfo(),\r\n                SceneFlags.TRANSPARENT_OBJECT\r\n            | SceneFlags.CUTOUT_OBJECT,\r\n            );\r\n        pass.addQueue(QueueHint.RENDER_TRANSPARENT, 'forward-add')\r\n            .addSceneOfCamera(\r\n                camera,\r\n                new LightInfo(),\r\n                SceneFlags.TRANSPARENT_OBJECT\r\n            | SceneFlags.CUTOUT_OBJECT,\r\n            );\r\n    }\r\n\r\n    slotName (camera: Camera, index = 0): string {\r\n        return this.lastPass!.slotName(camera, index);\r\n    }\r\n}\r\n","import { Vec4 } from '../../../core';\r\nimport { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { passContext } from '../utils/pass-context';\r\nimport { BasePass } from './base-pass';\r\n\r\nexport class PostFinalPass extends BasePass {\r\n    name = 'PostFinalPass';\r\n    outputNames = ['PostFinalColor'];\r\n    effectName = 'pipeline/post-process/post-final';\r\n\r\n    enableInAllEditorCamera = true;\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        if (!this.lastPass) {\r\n            return;\r\n        }\r\n\r\n        passContext.clearFlag = camera.clearFlag & ClearFlagBit.COLOR;\r\n        Vec4.set(passContext.clearColor, camera.clearColor.x, camera.clearColor.y, camera.clearColor.z, camera.clearColor.w);\r\n\r\n        passContext.material = this.material;\r\n\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        const input0 = this.lastPass.slotName(camera, 0);\r\n        const slot0 = this.slotName(camera, 0);\r\n\r\n        const isOffScreen = false;//director.root!.mainWindow !== camera.window;\r\n\r\n        const fb = camera.window.framebuffer;\r\n        const ct = fb && fb.colorTextures[0];\r\n        const format = ct ? ct.format : Format.RGBA8;\r\n\r\n        const shadingScale = passContext.shadingScale;\r\n        passContext\r\n            .updatePassViewPort(1 / shadingScale, 1 / shadingScale)\r\n            .addRenderPass('post-final', `${this.name}${cameraID}`)\r\n            .setPassInput(input0, 'inputTexture')\r\n            .addRasterView(slot0, format, isOffScreen)\r\n            .blitScreen(0);\r\n\r\n        this.renderProfiler(camera);\r\n    }\r\n}\r\n","import { ClearFlagBit, Format } from '../../../gfx';\r\nimport { Camera } from '../../../render-scene/scene';\r\nimport { Pipeline } from '../../custom/pipeline';\r\nimport { getCameraUniqueID } from '../../custom/define';\r\nimport { passContext } from '../utils/pass-context';\r\n\r\nimport { getSetting, SettingPass } from './setting-pass';\r\nimport { disablePostProcessForDebugView } from './base-pass';\r\nimport { Vec4 } from '../../../core';\r\nimport { DOF } from '../components/dof';\r\n\r\nexport class DofPass extends SettingPass {\r\n    get setting (): DOF { return getSetting(DOF); }\r\n\r\n    checkEnable (camera: Camera): boolean {\r\n        let enable = super.checkEnable(camera);\r\n        if (disablePostProcessForDebugView()) {\r\n            enable = false;\r\n        }\r\n        return enable;\r\n    }\r\n\r\n    name = 'DOFPass';\r\n    effectName = 'pipeline/post-process/dof';\r\n    outputNames = ['DOFColor'];\r\n\r\n    public render (camera: Camera, ppl: Pipeline): void {\r\n        const cameraID = getCameraUniqueID(camera);\r\n\r\n        passContext.clearFlag = ClearFlagBit.COLOR;\r\n        Vec4.set(passContext.clearColor, 0, 0, 0, 1);\r\n\r\n        const passViewport = passContext.passViewport;\r\n\r\n        passContext.material = this.material;\r\n\r\n        const setting = this.setting;\r\n\r\n        const width = passViewport.width;\r\n        const height = passViewport.height;\r\n\r\n        const cocParams = new Vec4(setting.focusDistance, setting.focusRange, setting.bokehRadius, 0.0);\r\n        const mainTexTexelSize = new Vec4(1.0 / width, 1.0 / height, width, height);\r\n\r\n        this.material.setProperty('cocParams', cocParams);\r\n        this.material.setProperty('mainTexTexelSize', mainTexTexelSize);\r\n\r\n        const slot = this.slotName(camera, 0);\r\n        const colorTex = this.lastPass!.slotName(camera, 0);\r\n        const depthTex = this.lastPass!.slotName(camera, 1);\r\n\r\n        // compute CoC\r\n        const outputCOC = `DOF_CIRCLE_OF_CONFUSION${cameraID}`;\r\n        passContext\r\n            .updatePassViewPort()\r\n            .addRenderPass('dof-coc', `dof-coc${cameraID}`)\r\n            .setPassInput(depthTex, 'DepthTex')\r\n            .addRasterView(outputCOC, Format.RGBA8)\r\n            .blitScreen(0)\r\n            .version();\r\n\r\n        // downscale\r\n        const outputPrefilter = `DOF_PREFILTER${cameraID}`;\r\n        passContext\r\n            .updatePassViewPort(0.5)\r\n            .addRenderPass('dof-prefilter', `dof-prefilter${cameraID}`)\r\n            .setPassInput(colorTex, 'colorTex')\r\n            .setPassInput(outputCOC, 'cocTex')\r\n            .addRasterView(outputPrefilter, Format.RGBA8)\r\n            .blitScreen(1)\r\n            .version();\r\n\r\n        // bokeh blur\r\n        const outputBokeh = `DOF_BOKEH${cameraID}`;\r\n        passContext\r\n            .updatePassViewPort(0.5)\r\n            .addRenderPass('dof-bokeh', `dof-bokeh${cameraID}`)\r\n            .setPassInput(outputPrefilter, 'prefilterTex')\r\n            .addRasterView(outputBokeh, Format.RGBA8)\r\n            .blitScreen(2)\r\n            .version();\r\n\r\n        //filtering\r\n        const outputFilter = `DOF_FILTER${cameraID}`;\r\n        passContext\r\n            .updatePassViewPort(0.5)\r\n            .addRenderPass('dof-filter', `dof-filter${cameraID}`)\r\n            .setPassInput(outputBokeh, 'bokehTex')\r\n            .addRasterView(outputFilter, Format.RGBA8)\r\n            .blitScreen(3)\r\n            .version();\r\n\r\n        //combine\r\n        passContext\r\n            .updatePassViewPort()\r\n            .addRenderPass('dof-combine', `dof-combine${cameraID}`)\r\n            .setPassInput(outputFilter, 'filterTex')\r\n            .setPassInput(outputCOC, 'cocTex')\r\n            .setPassInput(colorTex, 'colorTex')\r\n            .addRasterView(slot, Format.RGBA8)\r\n            .blitScreen(4)\r\n            .version();\r\n    }\r\n}\r\n","import { EDITOR } from 'internal:constants';\r\n\r\nimport { Camera, CameraProjection, CameraUsage } from '../../render-scene/scene';\r\nimport { PipelineBuilder, Pipeline } from '../custom/pipeline';\r\n\r\nimport { passContext } from './utils/pass-context';\r\nimport { ForwardFinalPass } from './passes/forward-final-pass';\r\nimport { getCameraUniqueID } from '../custom/define';\r\n\r\nimport { BasePass } from './passes/base-pass';\r\nimport { ForwardPass } from './passes/forward-pass';\r\nimport { TAAPass } from './passes/taa-pass';\r\nimport { FSRPass } from './passes/fsr-pass';\r\nimport { BlitScreenPass } from './passes/blit-screen-pass';\r\n\r\nimport { ShadowPass } from './passes/shadow-pass';\r\nimport { HBAOPass } from './passes/hbao-pass';\r\nimport { PostProcess } from './components/post-process';\r\nimport { director } from '../../game';\r\n\r\nimport { Camera as CameraComponent } from '../../misc';\r\nimport { BloomPass, ColorGradingPass, DofPass, FloatOutputProcessPass, ForwardTransparencyPass,\r\n    ForwardTransparencySimplePass, FxaaPass, PostFinalPass, SkinPass } from './passes';\r\nimport { PipelineEventType } from '../pipeline-event';\r\n\r\nexport class PostProcessBuilder implements PipelineBuilder  {\r\n    pipelines: Map<string, BasePass[]> = new Map();\r\n    constructor () {\r\n        this.init();\r\n    }\r\n\r\n    onGlobalPipelineStateChanged (): void {\r\n        const passes = this.pipelines.get('forward');\r\n        if (passes !== undefined) {\r\n            for (let i = 0; i < passes.length; i++) {\r\n                const pass = passes[i];\r\n                if (typeof pass.onGlobalPipelineStateChanged === 'function') {\r\n                    pass.onGlobalPipelineStateChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    init (): void {\r\n        const forward = new ForwardPass();\r\n        const forwardFinal = new ForwardFinalPass();\r\n        const shadowPass = new ShadowPass();\r\n\r\n        // default pipeline\r\n        this.addPass(shadowPass, 'default');\r\n\r\n        this.addPass(forward, 'default');\r\n        this.addPass(new ForwardTransparencySimplePass(), 'default');\r\n        this.addPass(forwardFinal, 'default');\r\n\r\n        // rendering dependent data generation\r\n        this.addPass(shadowPass);\r\n\r\n        // opaque objects forward lighting\r\n        this.addPass(forward);\r\n        this.addPass(new SkinPass());\r\n\r\n        // depth-based shading\r\n        this.addPass(new HBAOPass());\r\n\r\n        // float output related deferred processing: hdr + fog\r\n        this.addPass(new FloatOutputProcessPass());\r\n\r\n        // transparency should after hdr and depth-based shading\r\n        // temporary ignore CC_USE_FLOAT_OUTPUT\r\n        this.addPass(new ForwardTransparencyPass());\r\n\r\n        // user post-processing\r\n        this.addPass(new DofPass());\r\n        this.addPass(new TAAPass());\r\n        this.addPass(new FxaaPass());\r\n        this.addPass(new ColorGradingPass());\r\n        this.addPass(new BlitScreenPass());\r\n        this.addPass(new BloomPass());\r\n\r\n        // final output\r\n        this.addPass(new FSRPass()); // fsr should be final\r\n        this.addPass(new PostFinalPass());\r\n    }\r\n\r\n    getPass (passClass: typeof BasePass, pipelineName = 'forward'): BasePass | undefined {\r\n        const pp = this.pipelines.get(pipelineName);\r\n        return pp && pp.find((p): boolean => p instanceof passClass);\r\n    }\r\n    addPass (pass: BasePass, pipelineName = 'forward'): void {\r\n        let pp = this.pipelines.get(pipelineName);\r\n        if (!pp) {\r\n            pp = [];\r\n            this.pipelines.set(pipelineName, pp);\r\n        }\r\n\r\n        const oldIdx = pp.findIndex((p): boolean => p.name === pass.name);\r\n        if (oldIdx !== -1) {\r\n            pp.splice(oldIdx, 1);\r\n        }\r\n        pp.push(pass);\r\n    }\r\n    insertPass (pass: BasePass, passClass: typeof BasePass, pipelineName = 'forward'): void {\r\n        const pp = this.pipelines.get(pipelineName);\r\n        if (pp) {\r\n            const oldIdx = pp.findIndex((p): boolean => p.name === pass.name);\r\n            if (oldIdx !== -1) {\r\n                pp.splice(oldIdx, 1);\r\n            }\r\n\r\n            const idx = pp.findIndex((p): boolean => p instanceof passClass);\r\n            if (idx !== -1) {\r\n                pp.splice(idx + 1, 0, pass);\r\n            }\r\n        }\r\n    }\r\n\r\n    private initEditor (): void {\r\n        director.root!.cameraList.forEach((cam): void => {\r\n            if (cam.name === 'Editor Camera') {\r\n                cam.usePostProcess = cam.projectionType === CameraProjection.PERSPECTIVE;\r\n            }\r\n        });\r\n    }\r\n    private applyPreviewCamera (camera: Camera): void {\r\n        if (!camera.node.parent) return;\r\n        const camComp = camera.node.parent.getComponent(CameraComponent);\r\n        const oriCamera = camComp && camComp.camera;\r\n        if (oriCamera) {\r\n            camera.postProcess = oriCamera.postProcess;\r\n            camera.usePostProcess = oriCamera.usePostProcess;\r\n        }\r\n    }\r\n\r\n    private resortEditorCameras (cameras: Camera[]): Camera[] {\r\n        const newCameras: Camera[] = [];\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const c = cameras[i];\r\n            if (c.name === 'Editor Camera'\r\n            || c.name === 'Editor UIGizmoCamera'\r\n            || c.name === 'Scene Gizmo Camera') {\r\n                newCameras.push(c);\r\n            }\r\n        }\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const c = cameras[i];\r\n            if (newCameras.indexOf(c) === -1) {\r\n                newCameras.push(c);\r\n            }\r\n        }\r\n        return newCameras;\r\n    }\r\n\r\n    setup (cameras: Camera[], ppl: Pipeline): void {\r\n        if (EDITOR) {\r\n            this.initEditor();\r\n            cameras = this.resortEditorCameras(cameras);\r\n        }\r\n\r\n        passContext.ppl = ppl;\r\n        passContext.shadowPass = undefined;\r\n        passContext.forwardPass = undefined;\r\n        passContext.depthSlotName = '';\r\n        passContext.isFinalCamera = false;\r\n        passContext.isFinalPass = false;\r\n\r\n        let globalPP: PostProcess | undefined;\r\n        for (let i = 0; i < PostProcess.all.length; i++) {\r\n            const pp = PostProcess.all[i];\r\n            if (pp.global) {\r\n                globalPP = pp;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const camera = cameras[i];\r\n            if (!camera.scene) {\r\n                continue;\r\n            }\r\n            ppl.update(camera);\r\n            if (i === (cameras.length - 1)) {\r\n                passContext.isFinalCamera = true;\r\n            }\r\n\r\n            if (EDITOR && camera.cameraUsage === CameraUsage.PREVIEW) {\r\n                this.applyPreviewCamera(camera);\r\n            }\r\n\r\n            ppl.addBuiltinReflectionProbePass(camera);\r\n\r\n            passContext.postProcess = camera.postProcess || globalPP;\r\n\r\n            director.root!.pipelineEvent.emit(PipelineEventType.RENDER_CAMERA_BEGIN, camera);\r\n\r\n            this.renderCamera(camera, ppl);\r\n        }\r\n    }\r\n\r\n    getCameraPipelineName (camera: Camera): string {\r\n        let pipelineName = camera.pipeline;\r\n        if (!pipelineName && camera.usePostProcess) {\r\n            pipelineName = 'forward';\r\n        } else {\r\n            pipelineName = 'default';\r\n        }\r\n        return pipelineName;\r\n    }\r\n\r\n    getCameraPasses (camera: Camera): BasePass[] {\r\n        const pipelineName = this.getCameraPipelineName(camera);\r\n        return this.pipelines.get(pipelineName) || [];\r\n    }\r\n\r\n    renderCamera (camera: Camera, ppl: Pipeline): void {\r\n        passContext.passPathName = `${getCameraUniqueID(camera)}`;\r\n        passContext.camera = camera;\r\n        passContext.updateViewPort();\r\n\r\n        const passes = this.getCameraPasses(camera);\r\n\r\n        const taaPass = passes.find((p): boolean => p instanceof TAAPass) as TAAPass;\r\n        if (taaPass && taaPass.checkEnable(camera)) {\r\n            taaPass.applyCameraJitter(camera);\r\n            taaPass.updateSample();\r\n        }\r\n\r\n        const floatOutputPass = passes.find((p): boolean => p instanceof FloatOutputProcessPass) as FloatOutputProcessPass;\r\n\r\n        let lastPass: BasePass | undefined;\r\n        for (let i = 0; i < passes.length; i++) {\r\n            const pass = passes[i];\r\n            if (!pass.checkEnable(camera)) {\r\n                continue;\r\n            }\r\n\r\n            if (i === (passes.length - 1)) {\r\n                passContext.isFinalPass = true;\r\n            }\r\n\r\n            if (pass.name === 'BloomPass') {\r\n                // for override post-process builder\r\n                (pass as BloomPass).hdrInputName = (floatOutputPass === undefined || floatOutputPass === null)\r\n                    ? '' :  floatOutputPass.getHDRInputName();\r\n            }\r\n\r\n            pass.lastPass = lastPass;\r\n            pass.render(camera, ppl);\r\n\r\n            lastPass = pass;\r\n        }\r\n    }\r\n}\r\n","import { setCustomPipeline } from '../custom';\r\nimport { PostProcessBuilder } from './post-process-builder';\r\nimport './utils/pass-context';\r\n\r\nexport * from './components';\r\nexport * from './passes';\r\nexport * from './post-process-builder';\r\n\r\nsetCustomPipeline('Forward', new PostProcessBuilder());\r\nsetCustomPipeline('Custom', new PostProcessBuilder());\r\n"],"names":["sphere","geometry","create","boundingBox","rangedDirLightBoundingBox","passContext","PassContext","this","clearFlag","ClearFlagBit","COLOR","clearColor","Color","clearDepthColor","ppl","camera","material","pass","rasterWidth","rasterHeight","layoutName","shadingScale","viewport","Rect","passViewport","passPathName","passVersion","isFinalCamera","isFinalPass","depthSlotName","shadowPass","undefined","forwardPass","postProcess","maxSpotLights","maxSphereLights","maxPointLights","maxRangedDirLights","_proto","prototype","setClearFlag","setClearColor","x","y","z","w","Vec4","set","setClearDepthColor","version","name","setVersion","clearBlack","addRenderPass","passName","width","height","setViewport","Viewport","addSceneLights","queue","flags","SceneFlags","BLEND","scene","spotLights","sphereLights","pointLights","rangedDirLights","numSpotLights","Math","min","length","numSphereLights","numPointLights","numRangedDirLights","i","light","baked","position","range","sphereFrustum","frustum","addSceneOfCamera","LightInfo","transform","node","getWorldMatrix","aabbFrustum","updateViewPort","EDITOR","area","getRenderArea","window","floor","updatePassViewPort","offsetScale","addRasterView","format","offscreen","residency","ResourceResidency","MANAGED","containsResource","Format","DEPTH_STENCIL","addDepthStencil","addRenderTarget","addRenderWindow","updateRenderTarget","updateRenderWindow","updateDepthStencil","loadOp","LoadOp","CLEAR","NONE","LOAD","StoreOp","STORE","copy","SkyBoxFlagValue","VALUE","setPassInput","inputName","shaderName","addTexture","blitScreen","passIdx","addQueue","QueueHint","RENDER_TRANSPARENT","addCameraQuad","_BasePassID","_pointSampler","_samplerPointInfo","SamplerInfo","Filter","POINT","Address","CLAMP","getRTFormatBeforeToneMapping","useFloatOutput","getMacroBool","pipelineSceneData","isHDR","supportsRGBA16HalfFloatTexture","device","RGBA16F","RGBA8","forceEnableFloatOutput","enabled","supportFloatOutput","setMacroBool","macro","ENABLE_FLOAT_OUTPUT","disablePostProcessForDebugView","cclegacy","director","root","debugView","singleMode","getShadowMapSampler","pipeline","getSampler","BasePass","effectName","_id","context","getCameraUniqueID","_material","enable","outputNames","lastPass","enableInAllEditorCamera","slotName","index","checkEnable","renderProfiler","showStatistics","_createClass","key","get","mat","Material","_uuid","initialize","ForwardFinalPass","_BasePass","_this","_len","arguments","args","Array","_key","call","apply","concat","_inheritsLoose","render","cameraID","input0","slot0","fb","framebuffer","ct","colorTextures","ForwardPass","depthBufferShadingScale","calcDepthSlot","canUsePrevDepth","_camera$scene","clearDepth","clearStencil","slot1","isOffScreen","_step","mainLightShadows","_iterator","done","dirShadowName","value","_step2","spotLightShadows","_iterator2","spotShadowName","RENDER_OPAQUE","OPAQUE_OBJECT","CUTOUT_OBJECT","GEOMETRY","forwardAddQueue","_camera$scene2","shadowInfo","shadows","mainLight","type","ShadowType","Planar","TRANSPARENT_OBJECT","SHADOW_CASTER","PostProcessSetting","ccclass","_dec","_class","requireComponent","PostProcess","_dec2","_Component","onEnable","pp","getComponent","addSetting","onDisable","removeSetting","Component","TAA","disallowMultiple","_class2","_PostProcessSetting","_sampleScale","_initializer","_feedback","_initializer2","v","serializable","property","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor","TAAMask","Camera","maskCamera","_mask","start","tex","RenderTexture","reset","game","canvas","targetTexture","warn","enabledInHierarchy","_applyDecoratedInitializer","getSetting","settingClass","cls","SettingPass","setting","tempVec4","halton8","Vec2","forEach","SampleOffsets","x2","x3","x4","x5","TAAPass","_SettingPass","prevMatViewProj","Mat4","taaTextureIndex","samples","sampleIndex","sampleOffset","forceRender","dirty","taaMaskMaterial","firstRender","applyCameraJitter","_isProjDirty","update","matProj","m12","m13","invert","matProjInv","multiply","matViewProj","matView","matViewProjInv","updateSample","offset","ZERO","sampleScale","maskTex","taaMask","mask","mi","MaterialInstance","parent","recompileShaders","USE_TAA_MASK","setProperty","builtinResMgr","feedback","historyTexture","depthTex","PERSISTENT","FSR","CCFloat","_sharpness","FSRPass","inputWidth","inputHeight","outWidth","outHeight","clamp","sharpness","easu","BlitScreenMaterial","_dec4","_dec3","BlitScreen","_dec5","_dec7","visible","_dec8","_class4","_class5","_activeMaterials","_initializer3","_materials","_initializer4","updateActiveMaterials","materials","m","push","onLoad","j","_this$_materials$i$ma","uuid","_dec9","BlitScreenPass","outputName","activeMaterials","slotIdx","ShadowPass","buildShadowPasses","mainLightShadowNames","spotLightShadowNames","ColorGrading","Texture2D","_contribute","_colorGradingMap","val","Bloom","CCBoolean","CCInteger","_dec6","_enableAlphaMask","_useHdrIlluminance","_threshold","_iterations","_intensity","_initializer5","HBAO","_radiusScale","_angleBiasDegree","_blurSharpness","_aoSaturation","_needBlur","DOF","_focusDistance","_focusRange","_bokehRadius","vec2","HBAOParams","_uvDepthToEyePosParams","_radiusParam","_miscParam","_blurParam","_depthTexFullResolution","_depthTexResolution","_sceneScale","_cameraFov","toRadian","_aoStrength","_randomDirAndJitter","_init","pixelFormat","PixelFormat","RGBA8888","arrayBuffer","Uint8Array","image","ImageAsset","_data","_compressed","randomTexture","setFilters","TextureFilter","NEAREST","setMipFilter","setWrapMode","WrapMode","REPEAT","gR","gR2","gNegInvR2","gMaxRadiusPixels","gFocalLen","tan","gTanAngleBias","gStrength","gUVToViewA","gUVToViewB","gBlurDepthThreshold","INV_LN2","HBAOPass","HBAO_PASS_INDEX","HBAO_BLUR_X_PASS_INDEX","HBAO_BLUR_Y_PASS_INDEX","HBAO_COMBINED_PASS_INDEX","_hbaoParams","_initialize","averageObjectSize","Map","_proto2","onGlobalPipelineStateChanged","passes","beginChangeStatesSilently","tryCompile","endChangeStatesSilently","getSceneScale","sceneScale","nearClip","has","_calculateObjectSize","visibility","depthTexFullResolution","depthTexResolution","cameraFov","fov","radiusScale","angleBiasDegree","aoStrength","blurSharpness","aoSaturation","isEnabled","DebugViewSingleType","AO","isCompositeModeEnabled","DebugViewCompositeType","inputRT","inputDS","hbaoInfo","_renderHBAOPass","hbaoCombinedInputRTName","rtName","needBlur","haboBlurInfoX","_renderHBAOBlurPass","_renderHBAOCombinedPass","uvDepthToEyePosParams","radiusParam","miscParam","blurParam","outputRT","dsName","isYPass","renderScene","sumSize","Vec3","modelCount","models","model","worldBounds","layer","add","halfExtents","divide","v3","scale","ColorGradingPass","colorGradingMap","contribute","textureSize","input","slot","isSquareMap","passIndx","BloomPass","_hdrInputName","cameraName","output","enableAlphaMask","useHDRIntensity","useHdrIlluminance","threshold","iterations","texSize","bloomPassDownSampleRTName","downSamplerInput","bloomPassUpSampleRTName","upSamplerInput","BLOOM_DOWNSAMPLEPASS_INDEX","intensity","BLOOM_UPSAMPLEPASS_INDEX","FXAA","FxaaPass","FloatOutputProcessPass","hdrInputName","getHDRInputName","needDepthInput","fog","FOG_TYPE_NONE","copyDS","copyInputDSPass","ForwardTransparencyPass","outputDS","UI","ForwardTransparencySimplePass","hasSkinObject","sceneData","skin","skinMaterialModel","_varianceArray","_strengthParameterArray","_vec3Temp","_vec3Temp2","_vec4Temp","_vec4Temp2","SSSSBlurData","_v3SSSSStrength","_v3SSSSFallOff","_kernel","_gaussian","out","variance","r","xx","exp","yy","zz","_profile","multiplyScalar","_updateSampleCount","strength","o","sign","abs","pow","nSamples","add3f","SkinPass","ssssBlurData","_activate","warnID","standardSkinModel","_this$lastPass","_buildSSSSBlurPass","_buildSpecularPass","ssssBlurRTName","ssssBlurDSName","ssssblurXPassPassName","blurRadius","sssIntensity","kernel","ssssblurYPassPassName","PostFinalPass","DofPass","cocParams","focusDistance","focusRange","bokehRadius","mainTexTexelSize","colorTex","outputCOC","outputPrefilter","outputBokeh","outputFilter","PostProcessBuilder","pipelines","init","forward","forwardFinal","addPass","getPass","passClass","pipelineName","find","p","oldIdx","findIndex","splice","insertPass","idx","initEditor","cameraList","cam","usePostProcess","projectionType","CameraProjection","PERSPECTIVE","applyPreviewCamera","camComp","CameraComponent","oriCamera","resortEditorCameras","cameras","newCameras","c","indexOf","setup","globalPP","all","global","addBuiltinReflectionProbePass","pipelineEvent","emit","PipelineEventType","RENDER_CAMERA_BEGIN","renderCamera","getCameraPipelineName","getCameraPasses","taaPass","floatOutputPass","setCustomPipeline"],"mappings":"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"}