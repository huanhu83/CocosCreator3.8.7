{"version":3,"file":"debug-view-zRQBd5E1.js","sources":["../../../cocos/render-scene/scene/camera.ts","../../../cocos/3d/misc/buffer.ts","../../../cocos/asset/assets/render-texture.ts","../../../cocos/render-scene/scene/reflection-probe.ts","../../../cocos/render-scene/scene/light.ts","../../../cocos/render-scene/scene/octree.ts","../../../cocos/render-scene/scene/skin.ts","../../../cocos/asset/assets/deprecation.ts","../../../cocos/asset/assets/rendering-sub-mesh.ts","../../../cocos/asset/assets/scene-asset.ts","../../../cocos/rendering/shadow/csm-layers.ts","../../../cocos/rendering/pipeline-event.ts","../../../cocos/rendering/pipeline-scene-data.ts","../../../cocos/rendering/debug-view.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { EDITOR, USE_XR } from 'internal:constants';\r\nimport { SurfaceTransform, ClearFlagBit, Device, Color, ClearFlags } from '../../gfx';\r\nimport { lerp, Mat4, Rect, toRadian, Vec3, IVec4Like, preTransforms, warnID, geometry, cclegacy, Vec4, rect, mat4, v3 } from '../../core';\r\nimport { CAMERA_DEFAULT_MASK } from '../../rendering/define';\r\nimport { Node } from '../../scene-graph';\r\nimport { RenderScene } from '../core/render-scene';\r\nimport { RenderWindow } from '../core/render-window';\r\nimport { GeometryRenderer } from '../../rendering/geometry-renderer';\r\nimport { PostProcess } from '../../rendering/post-process/components/post-process';\r\nimport type { Frustum } from '../../core/geometry';\r\nimport type { Root } from '../../root';\r\n\r\n/**\r\n * @en The enumeration type for the fixed axis of the camera.\r\n * The field of view along the corresponding axis would be fixed regardless of screen aspect changes.\r\n * @zh 相机视角的锁定轴向枚举，在对应轴上不会跟随屏幕长宽比例变化。\r\n */\r\nexport enum CameraFOVAxis {\r\n    /**\r\n     * @en Vertically fixed camera\r\n     * @zh 在垂直轴向上锁定的相机\r\n     */\r\n    VERTICAL,\r\n    /**\r\n     * @en Horizontally fixed camera\r\n     * @zh 在水平轴向上锁定的相机\r\n     */\r\n    HORIZONTAL,\r\n}\r\n\r\n/**\r\n * @en The projection type enumeration of the camera.\r\n * @zh 相机的投影类型枚举。\r\n */\r\nexport enum CameraProjection {\r\n    /**\r\n     * @en Orthogonal projection type\r\n     * @zh 正交投影类型\r\n     */\r\n    ORTHO,\r\n    /**\r\n     * @en Perspective projection type\r\n     * @zh 透视投影类型\r\n     */\r\n    PERSPECTIVE,\r\n}\r\n\r\n/**\r\n * @en The aperture enumeration of the camera, represent in f-number.\r\n * The smaller the value is, the bigger the aperture is, and more light it can capture, but less depth it supports.\r\n * @zh 相机的快门枚举，使用 f 值来表示。f 值越小，光圈就越大，进光量也越大，景深越浅。\r\n */\r\nexport enum CameraAperture {\r\n    /**\r\n     * f/1.8\r\n     */\r\n    F1_8,\r\n    /**\r\n     * f/2.0\r\n     */\r\n    F2_0,\r\n    /**\r\n     * f/2.2\r\n     */\r\n    F2_2,\r\n    /**\r\n     * f/2.5\r\n     */\r\n    F2_5,\r\n    /**\r\n     * f/2.8\r\n     */\r\n    F2_8,\r\n    /**\r\n     * f/3.2\r\n     */\r\n    F3_2,\r\n    /**\r\n     * f/3.5\r\n     */\r\n    F3_5,\r\n    /**\r\n     * f/4.0\r\n     */\r\n    F4_0,\r\n    /**\r\n     * f/4.5\r\n     */\r\n    F4_5,\r\n    /**\r\n     * f/5.0\r\n     */\r\n    F5_0,\r\n    /**\r\n     * f/5.6\r\n     */\r\n    F5_6,\r\n    /**\r\n     * f/6.3\r\n     */\r\n    F6_3,\r\n    /**\r\n     * f/7.1\r\n     */\r\n    F7_1,\r\n    /**\r\n     * f/8\r\n     */\r\n    F8_0,\r\n    /**\r\n     * f/9\r\n     */\r\n    F9_0,\r\n    /**\r\n     * f/10\r\n     */\r\n    F10_0,\r\n    /**\r\n     * f/11\r\n     */\r\n    F11_0,\r\n    /**\r\n     * f/13\r\n     */\r\n    F13_0,\r\n    /**\r\n     * f/14\r\n     */\r\n    F14_0,\r\n    /**\r\n     * f/16\r\n     */\r\n    F16_0,\r\n    /**\r\n     * f/18\r\n     */\r\n    F18_0,\r\n    /**\r\n     * f/20\r\n     */\r\n    F20_0,\r\n    /**\r\n     * f/22\r\n     */\r\n    F22_0,\r\n}\r\n\r\n/**\r\n * @en The ISO enumeration of the camera, lower ISO means the camera is less sensitive to light.\r\n * @zh 相机感光度枚举，越低的 ISO 数值表示相机对光更加不敏感。\r\n */\r\nexport enum CameraISO {\r\n    ISO100,\r\n    ISO200,\r\n    ISO400,\r\n    ISO800,\r\n}\r\n\r\n/**\r\n * @en Camera shutter enumeration, the value represents the speed of the shutter.\r\n * @zh 相机快门枚举，枚举值表示快门速度。\r\n */\r\nexport enum CameraShutter {\r\n    /**\r\n     * 1 second\r\n     */\r\n    D1,\r\n    /**\r\n     * 1/2 second\r\n     */\r\n    D2,\r\n    /**\r\n     * 1/4 second\r\n     */\r\n    D4,\r\n    /**\r\n     * 1/8 second\r\n     */\r\n    D8,\r\n    /**\r\n     * 1/15 second\r\n     */\r\n    D15,\r\n    /**\r\n     * 1/30 second\r\n     */\r\n    D30,\r\n    /**\r\n     * 1/60 second\r\n     */\r\n    D60,\r\n    /**\r\n     * 1/125 second\r\n     */\r\n    D125,\r\n    /**\r\n     * 1/250 second\r\n     */\r\n    D250,\r\n    /**\r\n     * 1/500 second\r\n     */\r\n    D500,\r\n    /**\r\n     * 1/1000 second\r\n     */\r\n    D1000,\r\n    /**\r\n     * 1/2000 second\r\n     */\r\n    D2000,\r\n    /**\r\n     * 1/4000 second\r\n     */\r\n    D4000,\r\n}\r\n\r\n/**\r\n * @en The type of the camera, mainly for marking different camera usage in XR, it determines the camera's viewport and parameters.\r\n * @zh 相机类型，主要服务于标记 XR 中的不同相机用途，影响渲染的视口和对应的参数。\r\n */\r\nexport enum CameraType {\r\n    /**\r\n     * @en Default camera type\r\n     * @zh 默认相机类型\r\n     */\r\n    DEFAULT = -1,\r\n    /**\r\n     * @en If a camera is set to be left eye, it will be used to render the left eye screen,\r\n     * otherwise, the left eye screen will be rendered using adjusted parameters based on XR main camera.\r\n     * @zh 如果设置了左眼相机，则在绘制左眼屏幕时使用，否则，就根据 XR 主相机的参数来计算左眼参数。\r\n     */\r\n    LEFT_EYE = 0,\r\n    /**\r\n     * @en If a camera is set to be right eye, it will be used to render the right eye screen,\r\n     * otherwise, the right eye screen will be rendered using adjusted parameters based on XR main camera.\r\n     * @zh 如果设置了右眼相机，则在绘制右眼屏幕时使用，否则，就根据 XR 主相机的参数来计算左眼参数。\r\n     */\r\n    RIGHT_EYE = 1,\r\n    /**\r\n     * @en The main camera, it could be used to calculate the parameters for both left eye and the right eye cameras.\r\n     * It could be converted from the default 3d camera.\r\n     * @zh XR 主相机，可以通过默认相机转换，也可以手动创建新的 XR 相机，可以计算出左右两个相机的相对参数。\r\n     */\r\n    MAIN = 2,\r\n}\r\n\r\n/**\r\n * @en The spatial tracking signal type used by the camera in XR.\r\n * @zh 相机使用的 XR 空间定位追踪信号类型。\r\n */\r\nexport enum TrackingType {\r\n    /**\r\n     * @en Camera without signal tracking in XR device.\r\n     * @zh 无追踪相机，不对 XR 设备的信号进行追踪。\r\n     */\r\n    NO_TRACKING = 0,\r\n    /**\r\n     * @en Camera tracking position and rotation signals from XR device.\r\n     * @zh 相机追踪 XR 设备移动位置和旋转角度信号。\r\n     */\r\n    POSITION_AND_ROTATION = 1,\r\n    /**\r\n     * @en Camera only tracking position signals from XR device.\r\n     * @zh 相机只追踪 XR 设备位置信号。\r\n     */\r\n    POSITION = 2,\r\n    /**\r\n     * @en Camera only tracking rotation signals from XR device.\r\n     * @zh 相机只追踪 XR 设备旋转角度信号。\r\n     */\r\n    ROTATION = 3,\r\n}\r\n\r\n/**\r\n * @en The usage of the camera, it's an engine internal marker enumeration.\r\n * @zh 相机的用途枚举，这是引擎内部使用的标记枚举。\r\n */\r\nexport enum CameraUsage {\r\n    /**\r\n     * @en Camera used in editor\r\n     * @zh 编辑器下使用的相机\r\n     */\r\n    EDITOR,\r\n    /**\r\n     * @en Camera used in editor's game view.\r\n     * @zh 编辑器 GameView 视图下使用的相机。\r\n     */\r\n    GAME_VIEW,\r\n    /**\r\n     * @en Camera used in editor's scene view.\r\n     * @zh 编辑器场景编辑器视图下使用的相机。\r\n     */\r\n    SCENE_VIEW,\r\n    /**\r\n     * @en Camera used in editor's camera preview window.\r\n     * @zh 编辑器预览小窗视图下使用的相机。\r\n     */\r\n    PREVIEW,\r\n    /**\r\n     * @en Camera used in game, normally user created cameras are all GAME type.\r\n     * @zh 游戏视图下使用的相机，一般情况下用户创建的相机都是 GAME 类型。\r\n     */\r\n    GAME = 100,\r\n}\r\n\r\nconst FSTOPS: number[] = [1.8, 2.0, 2.2, 2.5, 2.8, 3.2, 3.5, 4.0, 4.5, 5.0, 5.6, 6.3, 7.1, 8.0, 9.0, 10.0, 11.0, 13.0, 14.0, 16.0, 18.0, 20.0, 22.0];\r\nconst SHUTTERS: number[] = [1.0, 1.0 / 2.0, 1.0 / 4.0, 1.0 / 8.0, 1.0 / 15.0, 1.0 / 30.0, 1.0 / 60.0, 1.0 / 125.0,\r\n    1.0 / 250.0, 1.0 / 500.0, 1.0 / 1000.0, 1.0 / 2000.0, 1.0 / 4000.0];\r\nconst ISOS: number[] = [100.0, 200.0, 400.0, 800.0];\r\n\r\n/**\r\n * @en The camera creation information struct\r\n * @zh 用来创建相机的结构体\r\n */\r\nexport interface ICameraInfo {\r\n    /**\r\n     * @en The name of the camera.\r\n     * @zh 相机命名。\r\n     */\r\n    name: string;\r\n    /**\r\n     * @en The node which the camera is attached to.\r\n     * @zh 相机挂载的节点。\r\n     */\r\n    node: Node;\r\n    /**\r\n     * @en The projection type of the camera.\r\n     * @zh 相机的投影类型。\r\n     */\r\n    projection: CameraProjection;\r\n    /**\r\n     * @en The id of the target display, if absent, it will be rendered on the default one.\r\n     * @zh 相机的目标屏幕，如果缺省，将会使用默认屏幕。\r\n     */\r\n    targetDisplay?: number;\r\n    /**\r\n     * @en The target render window of the camera, is absent, the camera won't be rendered.\r\n     * @zh 相机的目标渲染窗口，如果缺省，该相机不会执行渲染流程。\r\n     */\r\n    window?: RenderWindow | null;\r\n    /**\r\n     * @en Render priority of the camera. Cameras with higher depth are rendered after cameras with lower depth.\r\n     * @zh 相机的渲染优先级，值越小越优先渲染。\r\n     */\r\n    priority: number;\r\n    /**\r\n     * @internal\r\n     */\r\n    pipeline?: string;\r\n    /**\r\n     * @en The type of the camera, mainly for marking different camera usage in XR, it determines the camera's viewport and parameters.\r\n     * @zh 相机类型，主要服务于标记 XR 中的不同相机用途，影响渲染的视口和对应的参数。\r\n     */\r\n    cameraType?: CameraType;\r\n    /**\r\n     * @en The spatial tracking signal type used by the camera in XR.\r\n     * @zh 相机使用的 XR 空间定位追踪信号类型。\r\n     */\r\n    trackingType?: TrackingType;\r\n    /**\r\n     * @internal\r\n     */\r\n    usage?: CameraUsage;\r\n}\r\n\r\nconst v_a = v3();\r\nconst v_b = v3();\r\nconst _tempMat1 = mat4();\r\n\r\nexport enum SkyBoxFlagValue {\r\n    VALUE = ClearFlagBit.STENCIL << 1,\r\n}\r\n\r\nexport const SKYBOX_FLAG = SkyBoxFlagValue.VALUE;\r\n\r\nconst correctionMatrices: Mat4[] = [];\r\n\r\nlet _cameraCount = 0;\r\n\r\n/**\r\n * @en The render camera representation in the render scene, it's managed by [[Camera]]\r\n * @zh 渲染场景中的相机对象，由项目层的 [[Camera]] 管理。\r\n */\r\nexport class Camera {\r\n    /**\r\n     * @en This exposure value corresponding to default standard camera exposure parameters.\r\n     * @zh 默认相机的曝光值。\r\n     */\r\n    public static get standardExposureValue (): number {\r\n        return 1.0 / 38400.0;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance unit scale used by area lights.\r\n     * @zh 默认局部光源使用的亮度单位缩放。\r\n     */\r\n    public static get standardLightMeterScale (): number {\r\n        return 10000.0;\r\n    }\r\n\r\n    /**\r\n     * @en The name of the camera\r\n     * @zh 相机的名称\r\n     */\r\n    get name (): string | null {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * @en The render scene to which the camera is attached\r\n     * @zh 相机所挂载的场景\r\n     */\r\n    get scene (): RenderScene | null {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @en The node of the camera which determines its transform in world space.\r\n     * @zh 相机绑定的节点，决定了它在世界空间的变换矩阵\r\n     */\r\n    set node (val: Node) {\r\n        this._node = val;\r\n    }\r\n    get node (): Node {\r\n        return this._node!;\r\n    }\r\n\r\n    /**\r\n     * @en The unique ID of system window which the camera will render to.\r\n     * @zh 相机关联的渲染窗口ID\r\n     */\r\n    get systemWindowId (): number {\r\n        return this._windowId;\r\n    }\r\n\r\n    /**\r\n     * @en The render window of the camera\r\n     * @zh 相机关联的渲染窗口\r\n     */\r\n    set window (val) {\r\n        this._window = val;\r\n    }\r\n    get window (): RenderWindow {\r\n        return this._window!;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the camera is enabled, a disabled camera won't be processed in the render pipeline.\r\n     * @zh 相机是否启用，未启用的相机不会被渲染\r\n     */\r\n    set enabled (val) {\r\n        this._enabled = val;\r\n    }\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * @en Visibility mask of the camera, declaring a set of node layers that will be visible to this camera.\r\n     * @zh 相机的可见性掩码，声明在当前相机中可见的节点层级集合。\r\n     */\r\n    set visibility (vis: number) {\r\n        this._visibility = vis;\r\n    }\r\n    get visibility (): number {\r\n        return this._visibility;\r\n    }\r\n\r\n    /**\r\n     * @en Render priority of the camera. Cameras with higher depth are rendered after cameras with lower depth.\r\n     * @zh 相机的渲染优先级，值越小越优先渲染。\r\n     */\r\n    get priority (): number {\r\n        return this._priority;\r\n    }\r\n\r\n    set priority (val: number) {\r\n        this._priority = val;\r\n    }\r\n\r\n    /**\r\n     * @en The width of the camera's view size\r\n     * @zh 相机的视图宽度\r\n     */\r\n    get width (): number {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * @en The height of the camera's view size\r\n     * @zh 相机的视图高度\r\n     */\r\n    get height (): number {\r\n        return this._height;\r\n    }\r\n\r\n    /**\r\n     * @en The world position of the camera\r\n     * @zh 相机的世界坐标\r\n     */\r\n    set position (val) {\r\n        this._position = val;\r\n    }\r\n    get position (): Vec3 {\r\n        return this._position;\r\n    }\r\n\r\n    /**\r\n     * @en The forward vector of the camera's look direction\r\n     * @zh 指向相机观察方向的向量\r\n     */\r\n    set forward (val) {\r\n        this._forward = val;\r\n    }\r\n    get forward (): Vec3 {\r\n        return this._forward;\r\n    }\r\n\r\n    /**\r\n     * @en Camera aperture, controls the exposure parameter.\r\n     * @zh 相机光圈，影响相机的曝光参数。\r\n     */\r\n    set aperture (val: CameraAperture) {\r\n        this._aperture = val;\r\n        this._apertureValue = FSTOPS[this._aperture];\r\n        this.updateExposure();\r\n    }\r\n    get aperture (): CameraAperture {\r\n        return this._aperture;\r\n    }\r\n\r\n    /**\r\n     * @en Camera aperture value.\r\n     * @zh 相机光圈值。\r\n     */\r\n    get apertureValue (): number {\r\n        return this._apertureValue;\r\n    }\r\n\r\n    /**\r\n     * @en Camera shutter, controls the exposure parameter.\r\n     * @zh 相机快门，影响相机的曝光参数。\r\n     */\r\n    set shutter (val: CameraShutter) {\r\n        this._shutter = val;\r\n        this._shutterValue = SHUTTERS[this._shutter];\r\n        this.updateExposure();\r\n    }\r\n    get shutter (): CameraShutter {\r\n        return this._shutter;\r\n    }\r\n\r\n    /**\r\n     * @en Camera shutter value.\r\n     * @zh 相机快门值。\r\n     */\r\n    get shutterValue (): number {\r\n        return this._shutterValue;\r\n    }\r\n\r\n    /**\r\n     * @en Camera ISO, controls the exposure parameter.\r\n     * @zh 相机感光度，影响相机的曝光参数。\r\n     */\r\n    set iso (val: CameraISO) {\r\n        this._iso = val;\r\n        this._isoValue = ISOS[this._iso];\r\n        this.updateExposure();\r\n    }\r\n    get iso (): CameraISO {\r\n        return this._iso;\r\n    }\r\n\r\n    /**\r\n     * @en Camera ISO value.\r\n     * @zh 相机感光度值。\r\n     */\r\n    get isoValue (): number {\r\n        return this._isoValue;\r\n    }\r\n\r\n    /**\r\n     * @en The calculated exposure of the camera\r\n     * @zh 相机的曝光参数\r\n     */\r\n    get exposure (): number {\r\n        return this._exposure;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing flags of the camera, specifies which part of the framebuffer will be actually cleared every frame.\r\n     * @zh 相机的缓冲清除标志位，指定帧缓冲的哪部分要每帧清除。\r\n     */\r\n    get clearFlag (): ClearFlags {\r\n        return this._clearFlag;\r\n    }\r\n    set clearFlag (flag: ClearFlags) {\r\n        this._clearFlag = flag;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing color of the camera.\r\n     * @zh 相机的颜色缓冲默认值。\r\n     */\r\n    set clearColor (val) {\r\n        this._clearColor.x = val.x;\r\n        this._clearColor.y = val.y;\r\n        this._clearColor.z = val.z;\r\n        this._clearColor.w = val.w;\r\n    }\r\n    get clearColor (): IVec4Like {\r\n        return this._clearColor as IVec4Like;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing depth of the camera.\r\n     * @zh 相机的深度缓冲默认值。\r\n     */\r\n    get clearDepth (): number {\r\n        return this._clearDepth;\r\n    }\r\n    set clearDepth (depth: number) {\r\n        this._clearDepth = depth;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing stencil of the camera.\r\n     * @zh 相机的模板缓冲默认值。\r\n     */\r\n    get clearStencil (): number {\r\n        return this._clearStencil;\r\n    }\r\n    set clearStencil (stencil: number) {\r\n        this._clearStencil = stencil;\r\n    }\r\n\r\n    /**\r\n     * @en The projection type of the camera.\r\n     * @zh 相机的投影类型。\r\n     */\r\n    set projectionType (val) {\r\n        this._proj = val;\r\n        this._isProjDirty = true;\r\n    }\r\n    get projectionType (): CameraProjection {\r\n        return this._proj;\r\n    }\r\n\r\n    /**\r\n     * @en The aspect ratio of the camera\r\n     * @zh 相机视图的长宽比\r\n     */\r\n    get aspect (): number {\r\n        return this._aspect;\r\n    }\r\n\r\n    /**\r\n     * @en The viewport height of the orthogonal type camera.\r\n     * @zh 正交相机的视角高度。\r\n     */\r\n    set orthoHeight (val) {\r\n        this._orthoHeight = val;\r\n        this._isProjDirty = true;\r\n    }\r\n    get orthoHeight (): number {\r\n        return this._orthoHeight;\r\n    }\r\n\r\n    /**\r\n     * @en The axis on which the FOV would be fixed regardless of screen aspect changes.\r\n     * @zh 指定视角的固定轴向，在此轴上不会跟随屏幕长宽比例变化。\r\n     */\r\n    set fovAxis (axis) {\r\n        this._fovAxis = axis;\r\n        this._isProjDirty = true;\r\n    }\r\n    get fovAxis (): CameraFOVAxis {\r\n        return this._fovAxis;\r\n    }\r\n\r\n    /**\r\n     * @en Field of view of the camera.\r\n     * @zh 相机的视角大小。\r\n     */\r\n    set fov (fov) {\r\n        this._fov = fov;\r\n        this._isProjDirty = true;\r\n    }\r\n    get fov (): number {\r\n        return this._fov;\r\n    }\r\n\r\n    /**\r\n     * @en Near clipping distance of the camera, should be as large as possible within acceptable range.\r\n     * @zh 相机的近裁剪距离，应在可接受范围内尽量取最大。\r\n     */\r\n    set nearClip (nearClip) {\r\n        this._nearClip = nearClip;\r\n        this._isProjDirty = true;\r\n    }\r\n    get nearClip (): number {\r\n        return this._nearClip;\r\n    }\r\n\r\n    /**\r\n     * @en Far clipping distance of the camera, should be as small as possible within acceptable range.\r\n     * @zh 相机的远裁剪距离，应在可接受范围内尽量取最小。\r\n     */\r\n    set farClip (farClip) {\r\n        this._farClip = farClip;\r\n        this._isProjDirty = true;\r\n    }\r\n    get farClip (): number {\r\n        return this._farClip;\r\n    }\r\n\r\n    /**\r\n     * @en The viewport rect of the camera, pre-rotated (i.e. always in identity/portrait mode) if possible.\r\n     * @zh 相机的视口矩形，如果设备允许的话，这个视口会永远保持竖屏状态，由渲染流程保障旋转的正确。\r\n     */\r\n    get viewport (): Rect {\r\n        return this._viewport;\r\n    }\r\n    set viewport (val) {\r\n        warnID(8302);\r\n        this.setViewportInOrientedSpace(val);\r\n    }\r\n\r\n    /**\r\n     * @en The view frustum of the camera\r\n     * @zh 相机的视锥体\r\n     */\r\n    set frustum (val) {\r\n        this._frustum = val;\r\n    }\r\n    get frustum (): Frustum {\r\n        return this._frustum;\r\n    }\r\n\r\n    /**\r\n     * @en The view matrix of the camera\r\n     * @zh 相机的视图矩阵\r\n     */\r\n    get matView (): Mat4 {\r\n        return this._matView;\r\n    }\r\n\r\n    /**\r\n     * @en The projection matrix of the camera\r\n     * @zh 相机的投影矩阵\r\n     */\r\n    get matProj (): Mat4 {\r\n        return this._matProj;\r\n    }\r\n\r\n    /**\r\n     * @en The inverse of the projection matrix of the camera\r\n     * @zh 相机的逆投影矩阵\r\n     */\r\n    get matProjInv (): Mat4 {\r\n        return this._matProjInv;\r\n    }\r\n\r\n    /**\r\n     * @en The view projection matrix of the camera\r\n     * @zh 相机的视图投影矩阵\r\n     */\r\n    get matViewProj (): Mat4 {\r\n        return this._matViewProj;\r\n    }\r\n\r\n    /**\r\n     * @en The inverse of the view projection matrix of the camera\r\n     * @zh 相机的逆视图投影矩阵\r\n     */\r\n    get matViewProjInv (): Mat4 {\r\n        return this._matViewProjInv;\r\n    }\r\n\r\n    /** @engineInternal */\r\n    get cameraId (): number {\r\n        return this._cameraId;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the camera is fixed size or matching the window size.\r\n     * @zh 相机是固定尺寸还是跟随屏幕尺寸\r\n     */\r\n    public isWindowSize = true;\r\n\r\n    /**\r\n     * @en Scale of the internal buffer size,\r\n     * set to 1 to keep the same with the canvas size.\r\n     * @zh 相机内部缓冲尺寸的缩放值, 1 为与 canvas 尺寸相同。\r\n     */\r\n    public screenScale: number = 1;\r\n\r\n    public postProcess: PostProcess | null = null;\r\n    public usePostProcess = false;\r\n    public pipeline = '';\r\n    public pipelineSettings: object | null = null;\r\n\r\n    private declare _device: Device;\r\n    private _scene: RenderScene | null = null;\r\n    private _node: Node | null = null;\r\n    private _name: string | null = null;\r\n    private _enabled = false;\r\n    private _proj: CameraProjection = -1 as CameraProjection;\r\n    private _aspect: number = 1;\r\n    private _orthoHeight = 10.0;\r\n    private _fovAxis = CameraFOVAxis.VERTICAL;\r\n    private _fov: number = toRadian(45);\r\n    private _nearClip = 1.0;\r\n    private _farClip = 1000.0;\r\n    private _clearColor = new Color(0.2, 0.2, 0.2, 1);\r\n    private _viewport: Rect = rect(0, 0, 1, 1);\r\n    private _orientedViewport: Rect = rect(0, 0, 1, 1);\r\n    private _curTransform = SurfaceTransform.IDENTITY;\r\n    private _isProjDirty = true;\r\n    private _matView: Mat4 = mat4();\r\n    private _matProj: Mat4 = mat4();\r\n    private _matProjInv: Mat4 = mat4();\r\n    private _matViewProj: Mat4 = mat4();\r\n    private _matViewProjInv: Mat4 = mat4();\r\n    private _frustum: geometry.Frustum = new geometry.Frustum();\r\n    private _forward: Vec3 = v3();\r\n    private _position: Vec3 = v3();\r\n    private _priority = 0;\r\n    private _aperture: CameraAperture = CameraAperture.F16_0;\r\n    private declare _apertureValue: number;\r\n    private _shutter: CameraShutter = CameraShutter.D125;\r\n    private _shutterValue = 0.0;\r\n    private _iso: CameraISO = CameraISO.ISO100;\r\n    private _isoValue = 0.0;\r\n    private _window: RenderWindow | null = null;\r\n    private _width = 1;\r\n    private _height = 1;\r\n    private _clearFlag = ClearFlagBit.NONE;\r\n    private _clearDepth = 1.0;\r\n    private _visibility = CAMERA_DEFAULT_MASK;\r\n    private _exposure = 0;\r\n    private _clearStencil = 0;\r\n    private _geometryRenderer: GeometryRenderer | null = null;\r\n    private _windowId = 0;\r\n    private _cameraType: CameraType = CameraType.DEFAULT;\r\n    private _trackingType: TrackingType = TrackingType.NO_TRACKING;\r\n    private _usage: CameraUsage = CameraUsage.GAME;\r\n    private _cameraId = _cameraCount++;\r\n\r\n    constructor (device: Device) {\r\n        this._device = device;\r\n        this._apertureValue = FSTOPS[this._aperture];\r\n        this._shutterValue = SHUTTERS[this._shutter];\r\n        this._isoValue = ISOS[this._iso];\r\n\r\n        this._frustum.accurate = true;\r\n\r\n        if (!correctionMatrices.length) {\r\n            const ySign = device.capabilities.clipSpaceSignY;\r\n            correctionMatrices[SurfaceTransform.IDENTITY] = new Mat4(1, 0, 0, 0, 0, ySign);\r\n            correctionMatrices[SurfaceTransform.ROTATE_90] = new Mat4(0, 1, 0, 0, -ySign, 0);\r\n            correctionMatrices[SurfaceTransform.ROTATE_180] = new Mat4(-1, 0, 0, 0, 0, -ySign);\r\n            correctionMatrices[SurfaceTransform.ROTATE_270] = new Mat4(0, -1, 0, 0, ySign, 0);\r\n        }\r\n    }\r\n\r\n    private _updateAspect (oriented = true): void {\r\n        this._aspect = (this.window.width * this._viewport.width) / (this.window.height * this._viewport.height);\r\n        // window size/viewport is pre-rotated, but aspect should be oriented to acquire the correct projection\r\n        if (oriented) {\r\n            const swapchain = this.window.swapchain;\r\n            const orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;\r\n            if (orientation % 2) this._aspect = 1 / this._aspect;\r\n        }\r\n        this._isProjDirty = true;\r\n    }\r\n\r\n    /**\r\n     * @en Initialize the camera, normally you shouldn't invoke this function, it's managed automatically.\r\n     * @zh 初始化相机，开发者通常不应该使用这个方法，初始化流程是自动管理的。\r\n     */\r\n    public initialize (info: ICameraInfo): void {\r\n        if (info.usage !== undefined) {\r\n            this._usage = info.usage;\r\n        } else {\r\n            this.setDefaultUsage();\r\n        }\r\n        if (info.trackingType !== undefined) {\r\n            this._trackingType = info.trackingType;\r\n        }\r\n        if (info.cameraType !== undefined) {\r\n            this._cameraType = info.cameraType;\r\n        }\r\n        this.node = info.node;\r\n        this._width = 1;\r\n        this._height = 1;\r\n        this.clearFlag = ClearFlagBit.NONE;\r\n        this.clearDepth = 1.0;\r\n        this.visibility = CAMERA_DEFAULT_MASK;\r\n        this._name = info.name;\r\n        this._proj = info.projection;\r\n        this._priority = info.priority || 0;\r\n        this._aspect = this.screenScale = 1;\r\n        this.updateExposure();\r\n        this.changeTargetWindow(info.window);\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the camera, you shouldn't invoke this function, it's managed by the render scene.\r\n     * @zh 销毁相机，开发者不应该使用这个方法，销毁流程是由 RenderScene 管理的。\r\n     */\r\n    public destroy (): void {\r\n        this._node = null;\r\n        this.detachFromScene();\r\n        if (this._window) {\r\n            this._window.detachCamera(this);\r\n            this.window = null!;\r\n        }\r\n        this._name = null;\r\n        this._geometryRenderer?.destroy();\r\n    }\r\n\r\n    /**\r\n     * @en Attach the camera to the given render scene so that it will be rendered in it.\r\n     * @zh 将相机添加到相关的渲染场景中，以便可以被渲染器渲染。\r\n     * @param scene @en The render scene @zh 渲染场景\r\n     */\r\n    public attachToScene (scene: RenderScene): void {\r\n        this._enabled = true;\r\n        this._scene = scene;\r\n    }\r\n\r\n    /**\r\n     * @en Detach the camera from previously attached render scene. It will no longer be rendered.\r\n     * @zh 将相机从之前设置的渲染场景移除，之后将不会再被渲染。\r\n     */\r\n    public detachFromScene (): void {\r\n        this._enabled = false;\r\n        this._scene = null;\r\n    }\r\n\r\n    /**\r\n     * @en Resize the view size of the camera.\r\n     * @zh 重置相机视图尺寸\r\n     * @param width The width of the view size\r\n     * @param height The height of the view size\r\n     */\r\n    public resize (width: number, height: number): void {\r\n        if (!this._window) return;\r\n\r\n        this._width = width;\r\n        this._height = height;\r\n        this._aspect = (width * this._viewport.width) / (height * this._viewport.height);\r\n        this._isProjDirty = true;\r\n    }\r\n\r\n    /**\r\n     * @en Set a fixed size for the camera view.\r\n     * @zh 设置固定相机视图尺寸\r\n     * @param width The width of the view size\r\n     * @param height The height of the view size\r\n     */\r\n    public setFixedSize (width: number, height: number): void {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._updateAspect();\r\n        this.isWindowSize = false;\r\n    }\r\n\r\n    /**\r\n     * Editor specific gizmo camera logic\r\n     * @internal\r\n     */\r\n    public syncCameraEditor (camera: Camera): void {\r\n        if (EDITOR) {\r\n            this.position = camera.position;\r\n            this.forward = camera.forward;\r\n            this._matView = camera.matView;\r\n            this._matProj = camera.matProj;\r\n            this._matProjInv = camera.matProjInv;\r\n            this._matViewProj = camera.matViewProj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the camera's builtin matrixes\r\n     * @zh 更新相机的视图、投影等矩阵\r\n     * @param forceUpdate If force update, then dirty flag will be ignored\r\n     */\r\n    public update (forceUpdate = false): void { // for lazy eval situations like the in-editor preview\r\n        if (!this._node) return;\r\n\r\n        let viewProjDirty = false;\r\n        const xr = globalThis.__globalXR;\r\n        if (USE_XR) {\r\n            if (xr && xr.isWebXR && xr.webXRWindowMap && xr.updateViewport) {\r\n                const x = xr.webXRMatProjs ? 1 / xr.webXRMatProjs.length : 1;\r\n                const wndXREye = xr.webXRWindowMap.get(this._window);\r\n                this.setViewportInOrientedSpace(new Rect(x * wndXREye, 0, x, 1));\r\n            }\r\n        }\r\n\r\n        const forward = this._forward;\r\n        const matView = this._matView;\r\n        const matProj = this._matProj;\r\n        // view matrix\r\n        if (this._node.hasChangedFlags || forceUpdate) {\r\n            Mat4.invert(matView, this._node.worldMatrix);\r\n            forward.x = -matView.m02;\r\n            forward.y = -matView.m06;\r\n            forward.z = -matView.m10;\r\n            // Remove scale\r\n            Mat4.multiply(matView, new Mat4().scale(this._node.worldScale), matView);\r\n            this._node.getWorldPosition(this._position);\r\n            viewProjDirty = true;\r\n        }\r\n\r\n        // projection matrix\r\n        const swapchain = this.window?.swapchain;\r\n        const orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;\r\n        if (this._isProjDirty || this._curTransform !== orientation) {\r\n            this._curTransform = orientation;\r\n            const projectionSignY = this._device.capabilities.clipSpaceSignY;\r\n            // Only for rendertexture processing\r\n            if (this._proj === CameraProjection.PERSPECTIVE) {\r\n                if (USE_XR && xr && xr.isWebXR && xr.webXRWindowMap && xr.webXRMatProjs) {\r\n                    const wndXREye = xr.webXRWindowMap.get(this._window);\r\n                    matProj.set(xr.webXRMatProjs[wndXREye] as Mat4);\r\n                } else {\r\n                    Mat4.perspective(\r\n                        matProj,\r\n                        this._fov,\r\n                        this._aspect,\r\n                        this._nearClip,\r\n                        this._farClip,\r\n                        this._fovAxis === CameraFOVAxis.VERTICAL,\r\n                        this._device.capabilities.clipSpaceMinZ,\r\n                        projectionSignY,\r\n                        orientation,\r\n                    );\r\n                }\r\n            } else {\r\n                const x = this._orthoHeight * this._aspect;\r\n                const y = this._orthoHeight;\r\n                Mat4.ortho(\r\n                    matProj,\r\n                    -x,\r\n                    x,\r\n                    -y,\r\n                    y,\r\n                    this._nearClip,\r\n                    this._farClip,\r\n                    this._device.capabilities.clipSpaceMinZ,\r\n                    projectionSignY,\r\n                    orientation,\r\n                );\r\n            }\r\n            Mat4.invert(this._matProjInv, matProj);\r\n            viewProjDirty = true;\r\n            this._isProjDirty = false;\r\n        }\r\n\r\n        // view-projection\r\n        if (viewProjDirty) {\r\n            Mat4.multiply(this._matViewProj, matProj, matView);\r\n            Mat4.invert(this._matViewProjInv, this._matViewProj);\r\n            this._frustum.update(this._matViewProj, this._matViewProjInv);\r\n        }\r\n    }\r\n\r\n    get surfaceTransform (): SurfaceTransform {\r\n        return this._curTransform;\r\n    }\r\n\r\n    /**\r\n     * @en Set the viewport in oriented space (equal to the actual screen rotation)\r\n     * @zh 在目标朝向空间（实际屏幕朝向）内设置相机视口\r\n     */\r\n    public setViewportInOrientedSpace (val: Rect): void {\r\n        const { x, width, height } = val;\r\n        const y = this._device.capabilities.screenSpaceSignY < 0 ? 1 - val.y - height : val.y;\r\n\r\n        const swapchain = this.window?.swapchain;\r\n        const orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;\r\n\r\n        switch (orientation) {\r\n        case SurfaceTransform.ROTATE_90:\r\n            this._viewport.x = 1 - y - height;\r\n            this._viewport.y = x;\r\n            this._viewport.width = height;\r\n            this._viewport.height = width;\r\n            break;\r\n        case SurfaceTransform.ROTATE_180:\r\n            this._viewport.x = 1 - x - width;\r\n            this._viewport.y = 1 - y - height;\r\n            this._viewport.width = width;\r\n            this._viewport.height = height;\r\n            break;\r\n        case SurfaceTransform.ROTATE_270:\r\n            this._viewport.x = y;\r\n            this._viewport.y = 1 - x - width;\r\n            this._viewport.width = height;\r\n            this._viewport.height = width;\r\n            break;\r\n        case SurfaceTransform.IDENTITY:\r\n            this._viewport.x = x;\r\n            this._viewport.y = y;\r\n            this._viewport.width = width;\r\n            this._viewport.height = height;\r\n            break;\r\n        default:\r\n        }\r\n\r\n        this._orientedViewport.x = x;\r\n        this._orientedViewport.y = y;\r\n        this._orientedViewport.width = width;\r\n        this._orientedViewport.height = height;\r\n\r\n        this.resize(this.width, this.height);\r\n    }\r\n\r\n    /**\r\n     * @en create geometry renderer for this camera\r\n     * @zh 创建这个摄像机的几何体渲染器\r\n     */\r\n    public initGeometryRenderer (): void {\r\n        if (!this._geometryRenderer) {\r\n            const GeometryRenderer = cclegacy.internal.GeometryRenderer;\r\n            this._geometryRenderer = GeometryRenderer ? new GeometryRenderer() : null;\r\n            this._geometryRenderer?.activate(this._device);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en get geometry renderer of this camera\r\n     * @zh 获取这个摄像机的几何体渲染器\r\n     * @returns @en return the geometry renderer @zh 返回几何体渲染器\r\n     */\r\n    get geometryRenderer (): GeometryRenderer  | null {\r\n        return this._geometryRenderer;\r\n    }\r\n\r\n    get cameraType (): CameraType {\r\n        return this._cameraType;\r\n    }\r\n\r\n    set cameraType (type: CameraType) {\r\n        this._cameraType = type;\r\n    }\r\n\r\n    get trackingType (): TrackingType {\r\n        return this._trackingType;\r\n    }\r\n\r\n    set trackingType (type: TrackingType) {\r\n        this._trackingType = type;\r\n    }\r\n\r\n    get cameraUsage (): CameraUsage {\r\n        return this._usage;\r\n    }\r\n\r\n    set cameraUsage (usage: CameraUsage) {\r\n        this._usage = usage;\r\n    }\r\n\r\n    /**\r\n     * @en Change the target render window to another one\r\n     * @zh 修改相机的目标渲染窗口\r\n     * @param window The target render window, could be null\r\n     */\r\n    public changeTargetWindow (window: RenderWindow | null = null): void {\r\n        if (this._window) {\r\n            this._window.detachCamera(this);\r\n        }\r\n        const win = window || (cclegacy.director.root as Root).mainWindow;\r\n        if (win) {\r\n            win.attachCamera(this);\r\n            this.window = win;\r\n\r\n            // window size is pre-rotated\r\n            const swapchain = win.swapchain;\r\n            const orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;\r\n            if (orientation % 2) this.resize(win.height, win.width);\r\n            else this.resize(win.width, win.height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Detach camera from the render window\r\n     * @zh 将 camera 从渲染窗口移除\r\n     */\r\n    public detachCamera (): void {\r\n        if (this._window) {\r\n            this._window.detachCamera(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Transform a screen position (in oriented space) to a world space ray\r\n     * @zh 将一个屏幕空间（在实际朝向下）点转换到世界空间的射线\r\n     * @param out the resulting ray\r\n     * @param x the screen x of the position\r\n     * @param y the screen y of the position\r\n     * @returns the resulting ray\r\n     */\r\n    public screenPointToRay (out: geometry.Ray, x: number, y: number): geometry.Ray {\r\n        if (!this._node) return null!;\r\n\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const cx = this._orientedViewport.x * width;\r\n        const cy = this._orientedViewport.y * height;\r\n        const cw = this._orientedViewport.width * width;\r\n        const ch = this._orientedViewport.height * height;\r\n        const isProj = this._proj === CameraProjection.PERSPECTIVE;\r\n        const ySign = this._device.capabilities.clipSpaceSignY;\r\n        const preTransform = preTransforms[this._curTransform];\r\n\r\n        Vec3.set(v_a, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, isProj ? 1 : -1);\r\n\r\n        const { x: ox, y: oy } = v_a;\r\n        v_a.x = ox * preTransform[0] + oy * preTransform[2] * ySign;\r\n        v_a.y = ox * preTransform[1] + oy * preTransform[3] * ySign;\r\n\r\n        Vec3.transformMat4(isProj ? v_a : out.o, v_a, this._matViewProjInv);\r\n\r\n        if (isProj) {\r\n            // camera origin\r\n            this._node.getWorldPosition(v_b);\r\n            geometry.Ray.fromPoints(out, v_b, v_a);\r\n        } else {\r\n            Vec3.transformQuat(out.d, Vec3.FORWARD, this._node.worldRotation);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en Transform a screen position (in oriented space) to world space\r\n     * @zh 将一个屏幕空间（在实际朝向下）位置转换到世界空间\r\n     * @param out the resulting vector\r\n     * @param screenPos the screen position to be transformed\r\n     * @returns the resulting vector\r\n     */\r\n    public screenToWorld (out: Vec3, screenPos: Vec3): Vec3 {\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const cx = this._orientedViewport.x * width;\r\n        const cy = this._orientedViewport.y * height;\r\n        const cw = this._orientedViewport.width * width;\r\n        const ch = this._orientedViewport.height * height;\r\n        const ySign = this._device.capabilities.clipSpaceSignY;\r\n        const preTransform = preTransforms[this._curTransform];\r\n\r\n        if (this._proj === CameraProjection.PERSPECTIVE) {\r\n            // calculate screen pos in far clip plane\r\n            Vec3.set(\r\n                out,\r\n                (screenPos.x - cx) / cw * 2 - 1,\r\n                (screenPos.y - cy) / ch * 2 - 1,\r\n                1.0,\r\n            );\r\n\r\n            // transform to world\r\n            const { x, y } = out;\r\n            out.x = x * preTransform[0] + y * preTransform[2] * ySign;\r\n            out.y = x * preTransform[1] + y * preTransform[3] * ySign;\r\n            Vec3.transformMat4(out, out, this._matViewProjInv);\r\n\r\n            // lerp to depth z\r\n            if (this._node) { this._node.getWorldPosition(v_a); }\r\n\r\n            Vec3.lerp(out, v_a, out, lerp(this._nearClip / this._farClip, 1, screenPos.z));\r\n        } else {\r\n            Vec3.set(\r\n                out,\r\n                (screenPos.x - cx) / cw * 2 - 1,\r\n                (screenPos.y - cy) / ch * 2 - 1,\r\n                screenPos.z * 2 - 1,\r\n            );\r\n\r\n            // transform to world\r\n            const { x, y } = out;\r\n            out.x = x * preTransform[0] + y * preTransform[2] * ySign;\r\n            out.y = x * preTransform[1] + y * preTransform[3] * ySign;\r\n            Vec3.transformMat4(out, out, this._matViewProjInv);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en Transform a world space position to screen space rendered by the camera\r\n     * @zh 将一个世界空间位置转换到相机渲染后的屏幕空间\r\n     * @param out the resulting vector\r\n     * @param worldPos the world position to be transformed\r\n     * @returns the resulting vector\r\n     */\r\n    public worldToScreen (out: Vec3, worldPos: Vec3 | Readonly<Vec3>): Vec3 {\r\n        const ySign = this._device.capabilities.clipSpaceSignY;\r\n        const preTransform = preTransforms[this._curTransform];\r\n\r\n        Vec3.transformMat4(out, worldPos, this._matViewProj);\r\n\r\n        const { x, y } = out;\r\n        out.x = x * preTransform[0] + y * preTransform[2] * ySign;\r\n        out.y = x * preTransform[1] + y * preTransform[3] * ySign;\r\n\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const cx = this._orientedViewport.x * width;\r\n        const cy = this._orientedViewport.y * height;\r\n        const cw = this._orientedViewport.width * width;\r\n        const ch = this._orientedViewport.height * height;\r\n\r\n        out.x = cx + (out.x + 1) * 0.5 * cw;\r\n        out.y = cy + (out.y + 1) * 0.5 * ch;\r\n        out.z = out.z * 0.5 + 0.5;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en Transform a world space matrix to screen space rendered by the camera\r\n     * @zh 将一个世界空间矩阵转换到相机渲染后的屏幕空间\r\n     * @param out the resulting matrix\r\n     * @param worldMatrix the world space matrix to be transformed\r\n     * @param width framebuffer width\r\n     * @param height framebuffer height\r\n     * @returns the resulting matrix\r\n     */\r\n    public worldMatrixToScreen (out: Mat4, worldMatrix: Mat4, width: number, height: number): Mat4 {\r\n        Mat4.multiply(out, this._matViewProj, worldMatrix);\r\n        Mat4.multiply(out, correctionMatrices[this._curTransform], out);\r\n\r\n        const halfWidth = width / 2;\r\n        const halfHeight = height / 2;\r\n        Mat4.identity(_tempMat1);\r\n        Mat4.transform(_tempMat1, _tempMat1, Vec3.set(v_a, halfWidth, halfHeight, 0));\r\n        Mat4.scale(_tempMat1, _tempMat1, Vec3.set(v_a, halfWidth, halfHeight, 1));\r\n\r\n        Mat4.multiply(out, _tempMat1, out);\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en Calculate and set oblique view frustum projection matrix.\r\n     * @zh 计算并设置斜视锥体投影矩阵\r\n     * @param clipPlane clip plane in camera space\r\n     */\r\n    public calculateObliqueMat (viewSpacePlane: Vec4): void {\r\n        const clipFar = new Vec4(Math.sign(viewSpacePlane.x), Math.sign(viewSpacePlane.y), 1.0, 1.0);\r\n        const viewFar = clipFar.transformMat4(this._matProjInv);\r\n\r\n        const m4 = new Vec4(this._matProj.m03, this._matProj.m07, this._matProj.m11, this._matProj.m15);\r\n        const scale = 2.0 / Vec4.dot(viewSpacePlane, viewFar);\r\n        const newViewSpaceNearPlane = viewSpacePlane.multiplyScalar(scale);\r\n\r\n        const m3 = newViewSpaceNearPlane.subtract(m4);\r\n\r\n        this._matProj.m02 = m3.x;\r\n        this._matProj.m06 = m3.y;\r\n        this._matProj.m10 = m3.z;\r\n        this._matProj.m14 = m3.w;\r\n    }\r\n\r\n    public getClipSpaceMinz (): number {\r\n        return this._device.capabilities.clipSpaceMinZ;\r\n    }\r\n\r\n    /**\r\n     * @en Set exposure with actual value.\r\n     * @zh 设置相机的曝光值\r\n     * @param ev100\r\n     */\r\n    protected setExposure (ev100): void {\r\n        this._exposure = 0.833333 / (2.0 ** ev100);\r\n    }\r\n\r\n    private updateExposure (): void {\r\n        const ev100 = Math.log2((this._apertureValue * this._apertureValue) / this._shutterValue * 100.0 / this._isoValue);\r\n        this.setExposure(ev100);\r\n    }\r\n\r\n    private setDefaultUsage (): void {\r\n        if (EDITOR) {\r\n            if (cclegacy.GAME_VIEW) {\r\n                this._usage = CameraUsage.GAME_VIEW;\r\n            } else {\r\n                this._usage = CameraUsage.EDITOR;\r\n            }\r\n        } else {\r\n            this._usage = CameraUsage.GAME;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Format, FormatInfos, FormatType, FormatInfo } from '../../gfx';\r\nimport { sys } from '../../core';\r\n\r\nconst _typeMap: Record<string, string> = {\r\n    [FormatType.UNORM]: 'Uint',\r\n    [FormatType.SNORM]: 'Int',\r\n    [FormatType.UINT]: 'Uint',\r\n    [FormatType.INT]: 'Int',\r\n    [FormatType.UFLOAT]: 'Float',\r\n    [FormatType.FLOAT]: 'Float',\r\n    default: 'Uint',\r\n};\r\nfunction _getDataViewType (info: FormatInfo): string {\r\n    const type = _typeMap[info.type] || _typeMap.default;\r\n    const bytes = info.size / info.count * 8;\r\n    return `${type}${bytes}`;\r\n}\r\n\r\n// default params bahaves just like on an plain, compact Float32Array\r\nexport function writeBuffer (target: DataView, data: number[], format: Format = Format.R32F, offset = 0, stride = 0): void {\r\n    const info = FormatInfos[format];\r\n    if (!stride) { stride = info.size; }\r\n    const writer = `set${_getDataViewType(info)}`;\r\n    const componentBytesLength = info.size / info.count;\r\n    const nSeg = Math.floor(data.length / info.count);\r\n    const isLittleEndian = sys.isLittleEndian;\r\n\r\n    for (let iSeg = 0; iSeg < nSeg; ++iSeg) {\r\n        const x = offset + stride * iSeg;\r\n        for (let iComponent = 0; iComponent < info.count; ++iComponent) {\r\n            const y = x + componentBytesLength * iComponent;\r\n            target[writer](y, data[info.count * iSeg + iComponent], isLittleEndian);\r\n        }\r\n    }\r\n}\r\nexport function readBuffer (\r\n    target: DataView,\r\n    format: Format = Format.R32F,\r\n    offset = 0,\r\n    length: number = target.byteLength - offset,\r\n    stride = 0,\r\n    out: number[] = [],\r\n): number[] {\r\n    const info = FormatInfos[format];\r\n    if (!stride) { stride = info.size; }\r\n    const reader = `get${_getDataViewType(info)}`;\r\n    const componentBytesLength = info.size / info.count;\r\n    const nSeg = Math.floor(length / stride);\r\n    const isLittleEndian = sys.isLittleEndian;\r\n\r\n    for (let iSeg = 0; iSeg < nSeg; ++iSeg) {\r\n        const x = offset + stride * iSeg;\r\n        for (let iComponent = 0; iComponent < info.count; ++iComponent) {\r\n            const y = x + componentBytesLength * iComponent;\r\n            out[info.count * iSeg + iComponent] = target[reader](y, isLittleEndian);\r\n        }\r\n    }\r\n    return out;\r\n}\r\nexport function mapBuffer (\r\n    target: DataView,\r\n    callback: (cur: number, idx: number, view: DataView) => number,\r\n    format: Format = Format.R32F,\r\n    offset = 0,\r\n    length: number = target.byteLength - offset,\r\n    stride = 0,\r\n    out?: DataView,\r\n): DataView {\r\n    if (!out) { out = new DataView(target.buffer.slice(target.byteOffset, target.byteOffset + target.byteLength)); }\r\n    const info = FormatInfos[format];\r\n    if (!stride) { stride = info.size; }\r\n    const writer = `set${_getDataViewType(info)}`;\r\n    const reader = `get${_getDataViewType(info)}`;\r\n    const componentBytesLength = info.size / info.count;\r\n    const nSeg = Math.floor(length / stride);\r\n    const isLittleEndian = sys.isLittleEndian;\r\n\r\n    for (let iSeg = 0; iSeg < nSeg; ++iSeg) {\r\n        const x = offset + stride * iSeg;\r\n        for (let iComponent = 0; iComponent < info.count; ++iComponent) {\r\n            const y = x + componentBytesLength * iComponent;\r\n            const cur = target[reader](y, isLittleEndian);\r\n            // iComponent is usually more useful than y\r\n            out[writer](y, callback(cur, iComponent, target), isLittleEndian);\r\n        }\r\n    }\r\n    return out;\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { EDITOR, TEST } from 'internal:constants';\r\nimport { clamp, cclegacy, errorID } from '../../core';\r\nimport { Texture, ColorAttachment, DepthStencilAttachment, GeneralBarrierInfo, AccessFlagBit, RenderPassInfo, Format, deviceManager,\r\n    BufferTextureCopy, TextureFlags, TextureFlagBit } from '../../gfx';\r\nimport { RenderWindow, IRenderWindowInfo } from '../../render-scene/core/render-window';\r\nimport { Root } from '../../root';\r\nimport { TextureBase } from './texture-base';\r\n\r\nexport interface IRenderTextureCreateInfo {\r\n    name?: string;\r\n    width: number;\r\n    height: number;\r\n    passInfo?: RenderPassInfo;\r\n    externalResLow?: number; // for vulkan vkImage/opengl es texture created from external\r\n    externalResHigh?: number; // for vulkan vkImage created from external\r\n    externalFlag?: TextureFlags; // external texture type normal or oes\r\n}\r\n\r\nconst _colorAttachment = new ColorAttachment();\r\n_colorAttachment.format = Format.RGBA8;\r\nconst _depthStencilAttachment = new DepthStencilAttachment();\r\n_depthStencilAttachment.format = Format.DEPTH_STENCIL;\r\nconst passInfo = new RenderPassInfo([_colorAttachment], _depthStencilAttachment);\r\n\r\nconst _windowInfo: IRenderWindowInfo = {\r\n    width: 1,\r\n    height: 1,\r\n    renderPassInfo: passInfo,\r\n};\r\n\r\n/**\r\n * @en Render texture is a render target for [[Camera]] or [[Canvas]] component,\r\n * the render pipeline will use its `RenderWindow` as the target of the rendering process.\r\n * @zh 渲染贴图是 [[Camera]] 或 [[Canvas]] 组件的渲染目标对象，渲染管线会使用它的 `RenderWindow` 作为渲染的目标窗口。\r\n */\r\n@ccclass('cc.RenderTexture')\r\nexport class RenderTexture extends TextureBase {\r\n    private _window: RenderWindow | null = null;\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * @en The render window for the render pipeline, it's created internally and cannot be modified.\r\n     * @zh 渲染管线所使用的渲染窗口，内部逻辑创建，无法被修改。\r\n     */\r\n    get window (): RenderWindow | null {\r\n        return this._window;\r\n    }\r\n\r\n    /**\r\n     * @en Initialize the render texture. Using IRenderTextureCreateInfo.\r\n     * @zh 初始化渲染贴图。设置渲染贴图的名称、尺寸、渲染通道信息。\r\n     * @param info @en The create info of render texture. @zh 渲染贴图的创建信息。\r\n     */\r\n    public initialize (info: IRenderTextureCreateInfo): void {\r\n        this._name = info.name || '';\r\n        this._width = info.width;\r\n        this._height = info.height;\r\n        this._initWindow(info);\r\n    }\r\n\r\n    /**\r\n     * @en Reset the render texture. User may change the name, size or render pass info of the render texture.\r\n     * @zh 重新初始化渲染贴图。用户可以更改渲染贴图的名称、尺寸、渲染通道信息。\r\n     * @param info @en The create info of render texture. @zh 渲染贴图的创建信息。\r\n     */\r\n    public reset (info: IRenderTextureCreateInfo): void { // to be consistent with other assets\r\n        this.initialize(info);\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the render texture.\r\n     * @zh 销毁渲染贴图。\r\n     */\r\n    public destroy (): boolean {\r\n        if (this._window) {\r\n            const root = cclegacy.director.root as Root;\r\n            root?.destroyWindow(this._window);\r\n            this._window = null;\r\n        }\r\n\r\n        return super.destroy();\r\n    }\r\n\r\n    /**\r\n     * @en Resize the render texture.\r\n     * @zh 修改渲染贴图的尺寸。\r\n     * @param width @en The pixel width to resize to, the range is from 1 to 2048. @zh 需要调整到的像素宽度，范围为 1-2048。\r\n     * @param height @en The pixel height to resize to, the range is from 1 to 2048. @zh 需要调整到的像素高度，范围为 1-2048。\r\n     */\r\n    public resize (width: number, height: number): void {\r\n        this._width = Math.floor(clamp(width, 1, 2048));\r\n        this._height = Math.floor(clamp(height, 1, 2048));\r\n        if (this._window) {\r\n            this._window.resize(this._width, this._height);\r\n        }\r\n        this.emit('resize', this._window);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _serialize (ctxForExporting: any): any {\r\n        if (EDITOR || TEST) {\r\n            return { base: super._serialize(ctxForExporting), w: this._width, h: this._height, n: this._name };\r\n        }\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _deserialize (serializedData: any, handle: any): void {\r\n        const data = serializedData;\r\n        this._width = data.w;\r\n        this._height = data.h;\r\n        this._name = data.n;\r\n        super._deserialize(data.base, handle);\r\n    }\r\n\r\n    // To be compatible with material property interface\r\n    /**\r\n     * @en Gets the related [[gfx.Texture]] resource, it's also the color attachment for the render window.\r\n     * @zh 获取渲染贴图的 GFX 资源，同时也是渲染窗口所指向的颜色缓冲贴图资源。\r\n     * @return @en The low level gfx texture. @zh 底层的 gfx 贴图。\r\n     */\r\n    public getGFXTexture (): Texture | null {\r\n        return this._window && this._window.framebuffer.colorTextures[0];\r\n    }\r\n\r\n    /**\r\n     * @en Callback function after render texture is loaded in [[AssetManager]]. Initialize the render texture.\r\n     * @zh 通过 [[AssetManager]] 加载完成时的回调，初始化渲染贴图。\r\n     */\r\n    public onLoaded (): void {\r\n        this._initWindow();\r\n    }\r\n\r\n    /**\r\n     * @en Implementation of the render texture initialization.\r\n     * @zh 初始化渲染贴图的具体实现。\r\n     * @param info @en The create info of render texture. @zh 渲染贴图的创建信息。\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    protected _initWindow (info?: IRenderTextureCreateInfo): void {\r\n        const root = cclegacy.director.root as Root;\r\n\r\n        _windowInfo.title = this._name;\r\n        _windowInfo.width = this._width;\r\n        _windowInfo.height = this._height;\r\n        _windowInfo.renderPassInfo = info && info.passInfo ? info.passInfo : passInfo;\r\n        _windowInfo.externalResLow = info && info.externalResLow ? info.externalResLow : 0;\r\n        _windowInfo.externalResHigh = info && info.externalResHigh ? info.externalResHigh : 0;\r\n        _windowInfo.externalFlag = info && info.externalFlag ? info.externalFlag : TextureFlagBit.NONE;\r\n        _windowInfo.renderPassInfo.colorAttachments.forEach((colorAttachment) => {\r\n            colorAttachment.format = root.device.swapchainFormat;\r\n        });\r\n\r\n        _colorAttachment.barrier = deviceManager.gfxDevice.getGeneralBarrier(new GeneralBarrierInfo(\r\n            AccessFlagBit.FRAGMENT_SHADER_READ_TEXTURE,\r\n            AccessFlagBit.FRAGMENT_SHADER_READ_TEXTURE,\r\n        ));\r\n\r\n        if (this._window) {\r\n            this._window.destroy();\r\n            this._window.initialize(deviceManager.gfxDevice, _windowInfo);\r\n        } else {\r\n            this._window = root.createWindow(_windowInfo);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Initialize the render texture with uuid. The default size is 1x1.\r\n     * @zh 初始化渲染贴图。使用 uuid 进行初始化，贴图的尺寸为 1x1。\r\n     * @param uuid @en asset uuid. @zh 资源 uuid。\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public initDefault (uuid?: string): void {\r\n        super.initDefault(uuid);\r\n        this._width = this._height = 1;\r\n        this._initWindow();\r\n    }\r\n\r\n    /**\r\n     * @en Validate the correctness of the render texture.\r\n     * @zh 验证渲染贴图的正确性。\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public validate (): boolean {\r\n        return this.width >= 1 && this.width <= 2048 && this.height >= 1 && this.height <= 2048;\r\n    }\r\n\r\n    /**\r\n     * @en Read pixel buffer from render texture. @zh 从 render texture 读取像素数据。\r\n     * @param x @en The location on x axis. @zh 起始位置X轴坐标。\r\n     * @param y @en The location on y axis. @zh 起始位置Y轴坐标。\r\n     * @param width @en The pixel width. @zh 像素宽度。\r\n     * @param height @en The pixel height. @zh 像素高度。\r\n     * @param buffer @en The buffer to hold pixel data. @zh 像素缓存。\r\n     */\r\n    public readPixels (x?: number, y?: number, width?: number, height?: number, buffer?: Uint8Array): Uint8Array | null {\r\n        x = x || 0;\r\n        y = y || 0;\r\n        width = width || this.width;\r\n        height = height || this.height;\r\n        const gfxTexture = this.getGFXTexture();\r\n        if (!gfxTexture) {\r\n            errorID(7606);\r\n            return null;\r\n        }\r\n        const needSize = 4 * width * height;\r\n        if (buffer === undefined) {\r\n            buffer = new Uint8Array(needSize);\r\n        } else if (buffer.length < needSize) {\r\n            errorID(7607, needSize);\r\n            return null;\r\n        }\r\n\r\n        const gfxDevice = this._getGFXDevice();\r\n\r\n        const bufferViews: ArrayBufferView[] = [];\r\n        const regions: BufferTextureCopy[] = [];\r\n\r\n        const region0 = new BufferTextureCopy();\r\n        region0.texOffset.x = x;\r\n        region0.texOffset.y = y;\r\n        region0.texExtent.width = width;\r\n        region0.texExtent.height = height;\r\n        regions.push(region0);\r\n\r\n        bufferViews.push(buffer);\r\n        gfxDevice?.copyTextureToBuffers(gfxTexture, bufferViews, regions);\r\n        return buffer;\r\n    }\r\n}\r\n\r\ncclegacy.RenderTexture = RenderTexture;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { EDITOR } from 'internal:constants';\r\nimport { Camera, CameraAperture, CameraFOVAxis, CameraISO, CameraProjection, CameraShutter, CameraType, SkyBoxFlagValue, TrackingType } from './camera';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { Color, Quat, Rect, toRadian, Vec2, Vec3, geometry, cclegacy, Vec4, Size, v3, quat } from '../../core';\r\nimport { CAMERA_DEFAULT_MASK } from '../../rendering/define';\r\nimport { ClearFlagBit, Framebuffer } from '../../gfx';\r\nimport { TextureCube } from '../../asset/assets/texture-cube';\r\nimport { RenderTexture } from '../../asset/assets/render-texture';\r\n\r\nexport enum ProbeClearFlag {\r\n    SKYBOX = SkyBoxFlagValue.VALUE | ClearFlagBit.DEPTH_STENCIL,\r\n    SOLID_COLOR = ClearFlagBit.ALL,\r\n}\r\n\r\nexport enum ProbeType {\r\n    CUBE = 0,\r\n    PLANAR = 1,\r\n}\r\n// right left up down front back\r\nconst cameraDir: Vec3[] = [\r\n    v3(0, -90, 0),\r\n    v3(0, 90, 0),\r\n\r\n    v3(90, 0, 0),\r\n    v3(-90, 0, 0),\r\n\r\n    v3(0, 0, 0),\r\n    v3(0, 180, 0),\r\n];\r\n\r\nconst tempVec3 = v3();\r\n\r\nexport class ReflectionProbe {\r\n    public bakedCubeTextures: RenderTexture[] = [];\r\n\r\n    public realtimePlanarTexture: RenderTexture | null = null;\r\n\r\n    protected _resolution = 256;\r\n    protected _clearFlag: number = ProbeClearFlag.SKYBOX;\r\n    protected _backgroundColor = new Color(0, 0, 0, 255);\r\n    protected _visibility = CAMERA_DEFAULT_MASK;\r\n    protected _probeType = ProbeType.CUBE;\r\n    protected _cubemap: TextureCube | null = null;\r\n    protected readonly _size = v3(1, 1, 1);\r\n\r\n    /**\r\n     * @en Render cubemap's camera\r\n     * @zh 渲染cubemap的相机\r\n     */\r\n    private _camera: Camera | null = null;\r\n\r\n    /**\r\n     * @en Unique id of probe.\r\n     * @zh probe的唯一id\r\n     */\r\n    private _probeId = 0;\r\n\r\n    private _needRefresh = false;\r\n\r\n    private _needRender = false;\r\n\r\n    private _node: Node | null = null;\r\n\r\n    private _cameraNode: Node | null = null;\r\n\r\n    /**\r\n     * @en The AABB bounding box and probe only render the objects inside the bounding box.\r\n     * @zh AABB包围盒，probe只渲染包围盒内的物体\r\n     */\r\n    private _boundingBox: geometry.AABB | null = null;\r\n\r\n    /**\r\n     * @en The position of the camera in world space.\r\n     * @zh 世界空间相机的位置\r\n     */\r\n    private _cameraWorldPos = v3();\r\n\r\n    /**\r\n     * @en The rotation of the camera in world space.\r\n     * @zh 世界空间相机的旋转\r\n     */\r\n    private _cameraWorldRotation = quat();\r\n\r\n    /**\r\n     * @en The forward direction vertor of the camera in world space.\r\n     * @zh 世界空间相机朝前的方向向量\r\n     */\r\n    private _forward = v3();\r\n    /**\r\n     * @en The up direction vertor of the camera in world space.\r\n     * @zh 世界空间相机朝上的方向向量\r\n     */\r\n    private _up = v3();\r\n\r\n    /**\r\n     * @en Reflection probe cube pattern preview sphere\r\n     * @zh 反射探针cube模式的预览小球\r\n     */\r\n    protected _previewSphere: Node | null = null;\r\n\r\n    protected _previewPlane: Node | null = null;\r\n\r\n    /**\r\n     * @en Set probe type,cube or planar.\r\n     * @zh 设置探针类型，cube或者planar\r\n     */\r\n    set probeType (value: ProbeType) {\r\n        this._probeType = value;\r\n    }\r\n    get probeType (): ProbeType {\r\n        return this._probeType;\r\n    }\r\n\r\n    get resolution (): number {\r\n        return this._resolution;\r\n    }\r\n\r\n    /**\r\n     * @en set render texture size\r\n     * @zh 设置渲染纹理大小\r\n     */\r\n    set resolution (value: number) {\r\n        if (value !== this._resolution) {\r\n            this.bakedCubeTextures.forEach((rt, idx): void => {\r\n                rt.resize(value, value);\r\n            });\r\n        }\r\n        this._resolution = value;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing flags of the camera, specifies which part of the framebuffer will be actually cleared every frame.\r\n     * @zh 相机的缓冲清除标志位，指定帧缓冲的哪部分要每帧清除。\r\n     */\r\n    set clearFlag (value: number) {\r\n        this._clearFlag = value;\r\n        this.camera.clearFlag = this._clearFlag;\r\n    }\r\n    get clearFlag (): number {\r\n        return this._clearFlag;\r\n    }\r\n\r\n    /**\r\n     * @en Clearing color of the camera.\r\n     * @zh 相机的颜色缓冲默认值。\r\n     */\r\n    set backgroundColor (val: Color) {\r\n        this._backgroundColor = val;\r\n        this.camera.clearColor = this._backgroundColor;\r\n    }\r\n    get backgroundColor (): Color {\r\n        return this._backgroundColor;\r\n    }\r\n    /**\r\n     * @en Visibility mask, declaring a set of node layers that will be visible to this camera.\r\n     * @zh 可见性掩码，声明在当前相机中可见的节点层级集合。\r\n     */\r\n    get visibility (): number {\r\n        return this._visibility;\r\n    }\r\n    set visibility (val) {\r\n        this._visibility = val;\r\n        this._camera!.visibility = this._visibility;\r\n    }\r\n\r\n    /**\r\n     * @en Gets or sets the size of the box, in local space.\r\n     * @zh 获取或设置盒的大小。\r\n     */\r\n    set size (value) {\r\n        this._size.set(value);\r\n\r\n        this.node.getWorldPosition(tempVec3);\r\n        geometry.AABB.set(this._boundingBox!, tempVec3.x, tempVec3.y, tempVec3.z, value.x, value.y, value.z);\r\n    }\r\n    get size (): Vec3 {\r\n        return this._size;\r\n    }\r\n\r\n    set cubemap (val: TextureCube | null) {\r\n        this._cubemap = val;\r\n    }\r\n\r\n    get cubemap (): TextureCube | null {\r\n        return this._cubemap!;\r\n    }\r\n\r\n    /**\r\n     * @en The node of the probe.\r\n     * @zh probe绑定的节点\r\n     */\r\n    get node (): Node {\r\n        return this._node!;\r\n    }\r\n\r\n    get camera (): Camera {\r\n        return this._camera!;\r\n    }\r\n\r\n    /**\r\n     * @en Refresh the objects that use this probe.\r\n     * @zh 刷新使用该probe的物体\r\n     */\r\n    set needRefresh (value: boolean) {\r\n        this._needRefresh = value;\r\n    }\r\n\r\n    get needRefresh (): boolean {\r\n        return this._needRefresh;\r\n    }\r\n\r\n    set needRender (value: boolean) {\r\n        this._needRender = value;\r\n    }\r\n    get needRender (): boolean {\r\n        return this._needRender;\r\n    }\r\n\r\n    get boundingBox (): geometry.AABB | null {\r\n        return this._boundingBox;\r\n    }\r\n\r\n    set cameraNode (node: Node) {\r\n        this._cameraNode = node;\r\n    }\r\n    get cameraNode (): Node {\r\n        return this._cameraNode!;\r\n    }\r\n\r\n    /**\r\n     * @en Reflection probe cube mode preview sphere\r\n     * @zh 反射探针cube模式的预览小球\r\n     * @engineInternal\r\n     */\r\n    set previewSphere (val: Node | null) {\r\n        this._previewSphere = val;\r\n    }\r\n\r\n    get previewSphere (): Node | null {\r\n        return this._previewSphere!;\r\n    }\r\n\r\n    /**\r\n     * @en Reflection probe planar mode preview plane\r\n     * @zh 反射探针Planar模式的预览平面\r\n     */\r\n    set previewPlane (val: Node) {\r\n        this._previewPlane = val;\r\n    }\r\n\r\n    get previewPlane (): Node {\r\n        return this._previewPlane!;\r\n    }\r\n\r\n    constructor (id: number) {\r\n        this._probeId = id;\r\n    }\r\n\r\n    public initialize (node: Node, cameraNode: Node): void {\r\n        this._node = node;\r\n        this._cameraNode = cameraNode;\r\n        this.node.getWorldPosition(tempVec3);\r\n        const size = this._size;\r\n        this._boundingBox = geometry.AABB.create(tempVec3.x, tempVec3.y, tempVec3.z, size.x, size.y, size.z);\r\n        this._createCamera(cameraNode);\r\n    }\r\n\r\n    public initBakedTextures (): void {\r\n        if (this.bakedCubeTextures.length === 0) {\r\n            for (let i = 0; i < 6; i++) {\r\n                const renderTexture = this._createTargetTexture(this._resolution, this._resolution);\r\n                this.bakedCubeTextures.push(renderTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public captureCubemap (): void {\r\n        this.initBakedTextures();\r\n        this._resetCameraParams();\r\n        this._needRender = true;\r\n    }\r\n\r\n    /**\r\n     * @en Render real-time planar reflection textures\r\n     * @zh 渲染实时平面反射贴图\r\n     * @param sourceCamera render planar reflection for this camera\r\n     */\r\n    public renderPlanarReflection (sourceCamera: Camera): void {\r\n        if (!sourceCamera) return;\r\n        if (!this.realtimePlanarTexture) {\r\n            const canvasSize = cclegacy.view.getDesignResolutionSize() as Size;\r\n            this.realtimePlanarTexture = this._createTargetTexture(canvasSize.width, canvasSize.height);\r\n            cclegacy.internal.reflectionProbeManager.updatePlanarMap(this, this.realtimePlanarTexture.getGFXTexture());\r\n        }\r\n        this._syncCameraParams(sourceCamera);\r\n        this._transformReflectionCamera(sourceCamera);\r\n        this._needRender = true;\r\n    }\r\n\r\n    public switchProbeType (type: ProbeType, sourceCamera: Camera | null): void {\r\n        if (type === ProbeType.CUBE) {\r\n            this._needRender = false;\r\n        } else if (sourceCamera !== null) {\r\n            this.renderPlanarReflection(sourceCamera);\r\n        }\r\n    }\r\n\r\n    public getProbeId (): number {\r\n        return this._probeId;\r\n    }\r\n\r\n    public updateProbeId (id): void {\r\n        this._probeId = id;\r\n    }\r\n\r\n    public renderArea (): Vec2 {\r\n        if (this._probeType === ProbeType.PLANAR) {\r\n            return new Vec2(this.realtimePlanarTexture!.width, this.realtimePlanarTexture!.height);\r\n        } else {\r\n            return new Vec2(this.resolution, this.resolution);\r\n        }\r\n    }\r\n\r\n    public isFinishedRendering (): boolean {\r\n        return true;\r\n    }\r\n\r\n    public validate (): boolean {\r\n        return this.cubemap !== null;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._camera) {\r\n            this._camera.destroy();\r\n            this._camera = null;\r\n        }\r\n        for (let i = 0; i < this.bakedCubeTextures.length; i++) {\r\n            this.bakedCubeTextures[i].destroy();\r\n        }\r\n        this.bakedCubeTextures = [];\r\n\r\n        if (this.realtimePlanarTexture) {\r\n            this.realtimePlanarTexture.destroy();\r\n            this.realtimePlanarTexture = null;\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public enable (): void {\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public disable (): void {\r\n    }\r\n\r\n    public updateCameraDir (faceIdx: number): void {\r\n        this.cameraNode.setRotationFromEuler(cameraDir[faceIdx]);\r\n        this.camera.update(true);\r\n    }\r\n\r\n    public updateBoundingBox (): void {\r\n        if (this.node) {\r\n            this.node.getWorldPosition(tempVec3);\r\n            const size = this._size;\r\n            geometry.AABB.set(this._boundingBox!, tempVec3.x, tempVec3.y, tempVec3.z, size.x, size.y, size.z);\r\n        }\r\n    }\r\n\r\n    public hasFrameBuffer (framebuffer: Framebuffer): boolean {\r\n        if (this.probeType === ProbeType.PLANAR) {\r\n            if (!this.realtimePlanarTexture) return false;\r\n            if (this.realtimePlanarTexture.window?.framebuffer === framebuffer) {\r\n                return true;\r\n            }\r\n        } else {\r\n            if (this.bakedCubeTextures.length === 0) return false;\r\n            for (let i = 0; i < this.bakedCubeTextures.length; i++) {\r\n                const rt = this.bakedCubeTextures[i];\r\n                if (rt.window?.framebuffer === framebuffer) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public isRGBE (): boolean  {\r\n        //todo: realtime do not use rgbe\r\n        return true;\r\n    }\r\n\r\n    private _syncCameraParams (camera: Camera): void {\r\n        this.camera.projectionType = camera.projectionType;\r\n        this.camera.orthoHeight = camera.orthoHeight;\r\n        this.camera.nearClip = camera.nearClip;\r\n        this.camera.farClip = camera.farClip;\r\n        this.camera.fov = camera.fov;\r\n        this.camera.clearFlag = camera.clearFlag;\r\n        this.camera.clearColor = camera.clearColor;\r\n        this.camera.priority = camera.priority - 1;\r\n        this.camera.resize(camera.width, camera.height);\r\n    }\r\n\r\n    private _createCamera (cameraNode: Node): Camera | null {\r\n        const root = cclegacy.director.root;\r\n        if (!this._camera) {\r\n            this._camera = root.createCamera();\r\n            if (!this._camera) return null;\r\n            this._camera.initialize({\r\n                name: cameraNode.name,\r\n                node: cameraNode,\r\n                projection: CameraProjection.PERSPECTIVE,\r\n                window: EDITOR ? root && root.mainWindow : root && root.tempWindow,\r\n                priority: 0,\r\n                cameraType: CameraType.DEFAULT,\r\n                trackingType: TrackingType.NO_TRACKING,\r\n            });\r\n        }\r\n        this._camera.setViewportInOrientedSpace(new Rect(0, 0, 1, 1));\r\n        this._camera.fovAxis = CameraFOVAxis.VERTICAL;\r\n        this._camera.fov = toRadian(90);\r\n        this._camera.orthoHeight = 10;\r\n        this._camera.nearClip = 1;\r\n        this._camera.farClip = 1000;\r\n        this._camera.clearColor = this._backgroundColor;\r\n        this._camera.clearDepth = 1.0;\r\n        this._camera.clearStencil = 0.0;\r\n        this._camera.clearFlag = this._clearFlag;\r\n        this._camera.visibility = this._visibility;\r\n        this._camera.aperture = CameraAperture.F16_0;\r\n        this._camera.shutter = CameraShutter.D125;\r\n        this._camera.iso = CameraISO.ISO100;\r\n        return this._camera;\r\n    }\r\n\r\n    private _resetCameraParams (): void {\r\n        this.camera.projectionType = CameraProjection.PERSPECTIVE;\r\n        this.camera.orthoHeight = 10;\r\n        this.camera.nearClip = 1;\r\n        this.camera.farClip = 1000;\r\n        this.camera.fov = toRadian(90);\r\n        this.camera.priority = 0;\r\n        this.camera.resize(this.resolution, this.resolution);\r\n\r\n        this.camera.visibility = this._visibility;\r\n        this.camera.clearFlag = this._clearFlag;\r\n        this.camera.clearColor = this._backgroundColor;\r\n\r\n        this.cameraNode.worldPosition = this.node.worldPosition;\r\n        this.cameraNode.worldRotation = this.node.worldRotation;\r\n        this.camera.update(true);\r\n    }\r\n\r\n    private _createTargetTexture (width: number, height: number): RenderTexture {\r\n        const rt = new RenderTexture();\r\n        rt.reset({ width, height });\r\n        return rt;\r\n    }\r\n\r\n    private _transformReflectionCamera (sourceCamera: Camera): void {\r\n        const offset = Vec3.dot(this.node.worldPosition, this.node.up);\r\n        this._reflect(this._cameraWorldPos, sourceCamera.node.worldPosition, this.node.up, offset);\r\n        this.cameraNode.worldPosition = this._cameraWorldPos;\r\n\r\n        Vec3.transformQuat(this._forward, Vec3.FORWARD, sourceCamera.node.worldRotation);\r\n        this._reflect(this._forward, this._forward, this.node.up, 0);\r\n        this._forward.normalize();\r\n        this._forward.negative();\r\n\r\n        Vec3.transformQuat(this._up, Vec3.UP, sourceCamera.node.worldRotation);\r\n        this._reflect(this._up, this._up, this.node.up, 0);\r\n        this._up.normalize();\r\n\r\n        Quat.fromViewUp(this._cameraWorldRotation, this._forward, this._up);\r\n\r\n        this.cameraNode.worldRotation = this._cameraWorldRotation;\r\n\r\n        this.camera.update(true);\r\n\r\n        // Transform the plane from world space to reflection camera space use the inverse transpose matrix\r\n        const viewSpaceProbe = new Vec4(this.node.up.x, this.node.up.y, this.node.up.z, -Vec3.dot(this.node.up, this.node.worldPosition));\r\n        viewSpaceProbe.transformMat4(this.camera.matView.clone().invert().transpose());\r\n        this.camera.calculateObliqueMat(viewSpaceProbe);\r\n    }\r\n\r\n    private _reflect (out: Vec3, point: Vec3, normal: Vec3, offset: number): Vec3 {\r\n        const n = Vec3.clone(normal);\r\n        n.normalize();\r\n        const dist = Vec3.dot(n, point) - offset;\r\n        n.multiplyScalar(2.0 * dist);\r\n        Vec3.subtract(out, point, n);\r\n        return out;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { v3, Vec3 } from '../../core';\r\nimport { TransformBit } from '../../scene-graph/node-enum';\r\nimport { RenderScene } from '../core/render-scene';\r\nimport { Node } from '../../scene-graph';\r\nimport { CAMERA_DEFAULT_MASK } from '../../rendering/define';\r\n\r\n// Color temperature (in Kelvin) to RGB\r\nexport function ColorTemperatureToRGB (rgb: Vec3, kelvin: number): void {\r\n    if (kelvin < 1000.0) {\r\n        kelvin = 1000.0;\r\n    } else if (kelvin > 15000.0) {\r\n        kelvin = 15000.0;\r\n    }\r\n\r\n    // Approximate Planckian locus in CIE 1960 UCS\r\n    const kSqr = kelvin * kelvin;\r\n    const u = (0.860117757 + 1.54118254e-4 * kelvin + 1.28641212e-7 * kSqr) / (1.0 + 8.42420235e-4 * kelvin + 7.08145163e-7 * kSqr);\r\n    const v = (0.317398726 + 4.22806245e-5 * kelvin + 4.20481691e-8 * kSqr) / (1.0 - 2.89741816e-5 * kelvin + 1.61456053e-7 * kSqr);\r\n\r\n    const d = (2.0 * u - 8.0 * v + 4.0);\r\n    const x = (3.0 * u) / d;\r\n    const y = (2.0 * v) / d;\r\n    const z = (1.0 - x) - y;\r\n\r\n    const X = (1.0 / y) * x;\r\n    const Z = (1.0 / y) * z;\r\n\r\n    // XYZ to RGB with BT.709 primaries\r\n    rgb.x =  3.2404542 * X + -1.5371385 + -0.4985314 * Z;\r\n    rgb.y = -0.9692660 * X +  1.8760108 +  0.0415560 * Z;\r\n    rgb.z =  0.0556434 * X + -0.2040259 +  1.0572252 * Z;\r\n}\r\n\r\n/**\r\n * @en The light type enumeration.\r\n * @zh 光源类型枚举。\r\n */\r\nexport enum LightType {\r\n    DIRECTIONAL,\r\n    SPHERE,\r\n    SPOT,\r\n    POINT,\r\n    RANGED_DIRECTIONAL,\r\n    UNKNOWN,\r\n}\r\n\r\nexport const nt2lm = (size: number): number => 4 * Math.PI * Math.PI * size * size;\r\n\r\n/**\r\n * @en The abstract light class of the render scene\r\n * @zh 渲染场景中的光源基类\r\n */\r\nexport class Light {\r\n    /**\r\n     * @en Whether it's a baked light source, baked light will be ignored in real time lighting pass\r\n     * @zh 是否是烘焙光源，烘焙光源会在实时光照计算中被忽略\r\n     */\r\n    get baked (): boolean {\r\n        return this._baked;\r\n    }\r\n\r\n    set baked (val) {\r\n        this._baked = val;\r\n    }\r\n\r\n    /**\r\n     * @en The color of the light\r\n     * @zh 光源的颜色\r\n     */\r\n    set color (color: Vec3) {\r\n        this._color.set(color);\r\n        if (this._useColorTemperature) { Vec3.multiply(this._finalColor, this._color, this._colorTempRGB); }\r\n    }\r\n\r\n    get color (): Vec3 {\r\n        return this._color;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to use color temperature\r\n     * @zh 是否使用光源的色温\r\n     */\r\n    set useColorTemperature (enable: boolean) {\r\n        this._useColorTemperature = enable;\r\n        if (enable) { Vec3.multiply(this._finalColor, this._color, this._colorTempRGB); }\r\n    }\r\n\r\n    get useColorTemperature (): boolean {\r\n        return this._useColorTemperature;\r\n    }\r\n\r\n    /**\r\n     * @en The color temperature of the light\r\n     * @zh 光源的色温\r\n     */\r\n    set colorTemperature (val: number) {\r\n        this._colorTemp = val;\r\n        ColorTemperatureToRGB(this._colorTempRGB, this._colorTemp);\r\n        if (this._useColorTemperature) { Vec3.multiply(this._finalColor, this._color, this._colorTempRGB); }\r\n    }\r\n\r\n    get colorTemperature (): number {\r\n        return this._colorTemp;\r\n    }\r\n\r\n    /**\r\n     * @en The float RGB value of the color temperature, each channel is from 0 to 1\r\n     * @zh 色温的浮点数颜色值，每个通道都是从 0 到 1\r\n     */\r\n    get colorTemperatureRGB (): Vec3 {\r\n        return this._colorTempRGB;\r\n    }\r\n\r\n    get finalColor (): Readonly<Vec3> {\r\n        return this._finalColor;\r\n    }\r\n\r\n    /**\r\n     * @en Visibility mask of the light, declaring a set of node layers that will be visible to this light.\r\n     * @zh 光照的可见性掩码，声明在当前光照中可见的节点层级集合。\r\n     * @engineInternal\r\n     */\r\n    set visibility (vis: number) {\r\n        this._visibility = vis;\r\n    }\r\n    get visibility (): number {\r\n        return this._visibility;\r\n    }\r\n\r\n    set node (n) {\r\n        this._node = n;\r\n        if (this._node) {\r\n            this._node.hasChangedFlags |= TransformBit.ROTATION;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The node which owns the light source\r\n     * @zh 光源归属的节点\r\n     */\r\n    get node (): Node | null {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * @en The type of the light source, e.g. directional light, spot light, etc\r\n     * @zh 光源的类型，比如方向光、聚光灯等\r\n     */\r\n    get type (): LightType {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * @en The name of the light source\r\n     * @zh 光源的名字\r\n     */\r\n    get name (): string | null {\r\n        return this._name;\r\n    }\r\n\r\n    set name (n) {\r\n        this._name = n;\r\n    }\r\n\r\n    /**\r\n     * @en The render scene which owns the current light\r\n     * @zh 光源所属的渲染场景\r\n     */\r\n    get scene (): RenderScene | null {\r\n        return this._scene;\r\n    }\r\n\r\n    protected _baked = false;\r\n\r\n    protected _color: Vec3 = v3(1, 1, 1);\r\n\r\n    protected _colorTemp = 6550.0;\r\n\r\n    protected _colorTempRGB: Vec3 = v3(1, 1, 1);\r\n\r\n    private _finalColor: Vec3 = v3(1, 1, 1);\r\n\r\n    protected _scene: RenderScene | null = null;\r\n\r\n    protected _node: Node | null = null;\r\n\r\n    protected _name: string | null = null;\r\n\r\n    protected _useColorTemperature = false;\r\n\r\n    protected _type: LightType = LightType.UNKNOWN;\r\n\r\n    protected _visibility = CAMERA_DEFAULT_MASK;\r\n\r\n    public initialize (): void {\r\n        this.color = v3(1, 1, 1);\r\n        this.colorTemperature = 6550.0;\r\n    }\r\n\r\n    /**\r\n     * @en Attach the light to a render scene\r\n     * @zh 将光源挂载到渲染场景上\r\n     * @param scene @en The render scene @zh 渲染场景\r\n     */\r\n    public attachToScene (scene: RenderScene): void {\r\n        this._scene = scene;\r\n    }\r\n\r\n    /**\r\n     * @en Detach the light from the render scene\r\n     * @zh 将光源从渲染场景上移除\r\n     */\r\n    public detachFromScene (): void {\r\n        this._scene = null;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._name = null;\r\n        this._node = null;\r\n    }\r\n\r\n    public update (): void {}\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3 } from '../../core';\r\nimport { OctreeInfo } from '../../scene-graph/scene-globals';\r\n\r\n/**\r\n * @en The octree culling configuration of the render scene\r\n * @zh 渲染场景的八叉树剔除配置\r\n */\r\nexport class Octree {\r\n    /**\r\n     * @en Whether octree culling is enabled in the render scene\r\n     * @zh 是否开启八叉树加速剔除\r\n     */\r\n    set enabled (val: boolean) {\r\n        this._enabled = val;\r\n    }\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * @en Minimum position of the scene's bounding box\r\n     * @zh 场景包围盒最小值\r\n     */\r\n    get minPos (): Vec3 {\r\n        return this._minPos;\r\n    }\r\n    set minPos (val: Vec3) {\r\n        this._minPos = val;\r\n    }\r\n\r\n    /**\r\n     * @en Maximum position of the scene's bounding box\r\n     * @zh 场景包围盒最大值\r\n     */\r\n    get maxPos (): Vec3 {\r\n        return this._maxPos;\r\n    }\r\n    set maxPos (val: Vec3) {\r\n        this._maxPos = val;\r\n    }\r\n\r\n    /**\r\n     * @en The depth of the octree\r\n     * @zh 八叉树深度\r\n     */\r\n    get depth (): number {\r\n        return this._depth;\r\n    }\r\n\r\n    set depth (val: number) {\r\n        this._depth = val;\r\n    }\r\n\r\n    protected _enabled = false;\r\n    protected _minPos = new Vec3(0, 0, 0);\r\n    protected _maxPos = new Vec3(0, 0, 0);\r\n    protected _depth = 0;\r\n\r\n    public initialize (octreeInfo: OctreeInfo): void {\r\n        this._enabled = octreeInfo.enabled;\r\n        this._minPos = octreeInfo.minPos;\r\n        this._maxPos = octreeInfo.maxPos;\r\n        this._depth = octreeInfo.depth;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { SkinInfo } from '../../scene-graph';\r\n\r\n/**\r\n * @en Global skin in the render scene.\r\n * The initial data is setup in [[SceneGlobals.skip]].\r\n * @zh 渲染场景中的全局皮肤后处理设置。\r\n * 初始值是由 [[SceneGlobals.skin]] 设置的。\r\n */\r\nexport class Skin {\r\n    /**\r\n     * @en Enable skip.\r\n     * @zh 是否开启皮肤后效。\r\n     */\r\n    set enabled (val: boolean) {\r\n        this._enabled = val;\r\n    }\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * @en Getter/Setter sampler width.\r\n     * @zh 设置或者获取采样宽度。\r\n     */\r\n    set blurRadius (val: number) {\r\n        this._blurRadius = val;\r\n    }\r\n    get blurRadius (): number {\r\n        return this._blurRadius;\r\n    }\r\n\r\n    /**\r\n     * @en Getter/Setter depth unit scale.\r\n     * @zh 设置或者获取深度单位比例。\r\n     */\r\n    set sssIntensity (val: number) {\r\n        this._sssIntensity = val;\r\n    }\r\n    get sssIntensity (): number {\r\n        return this._sssIntensity;\r\n    }\r\n\r\n    protected _enabled = true;\r\n    protected _blurRadius = 0.01;\r\n    protected _sssIntensity = 3.0;\r\n\r\n    public initialize (skinInfo: SkinInfo): void {\r\n        this._enabled = skinInfo.enabled;\r\n        this._blurRadius = skinInfo.blurRadius;\r\n        this._sssIntensity = skinInfo.sssIntensity;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { removeProperty, replaceProperty } from '../../core';\r\nimport { TextureBase } from './texture-base';\r\nimport { RenderTexture } from './render-texture';\r\nimport type { RenderWindow } from '../../render-scene/core/render-window';\r\n\r\nremoveProperty(TextureBase.prototype, 'TextureBase.prototype', [\r\n    {\r\n        name: 'hasPremultipliedAlpha',\r\n    },\r\n    {\r\n        name: 'setPremultiplyAlpha',\r\n    },\r\n    {\r\n        name: 'setFlipY',\r\n    },\r\n]);\r\n\r\nreplaceProperty(RenderTexture.prototype, 'RenderTexture.prototype', [\r\n    {\r\n        name: 'getGFXWindow',\r\n        customFunction (this: RenderTexture): RenderWindow | null {\r\n            return this.window;\r\n        },\r\n    },\r\n]);\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { mapBuffer } from '../../3d/misc/buffer';\r\nimport {\r\n    Attribute, Device, InputAssemblerInfo, Buffer, BufferInfo, AttributeName, BufferUsageBit,\r\n    Format, FormatInfos, MemoryUsageBit, PrimitiveMode, DrawInfo,\r\n} from '../../gfx';\r\nimport { Vec3, approx, cclegacy, floatToHalf, halfToFloat, pseudoRandomRange } from '../../core';\r\nimport { Mesh } from '../../3d/assets/mesh';\r\nimport { Root } from '../../root';\r\n\r\n/**\r\n * @en Array views for index buffer\r\n * @zh 允许存储索引的数组视图。\r\n */\r\nexport type IBArray = Uint8Array | Uint16Array | Uint32Array;\r\n\r\n/**\r\n * @en The interface of geometric information.\r\n * @zh 几何信息。\r\n */\r\nexport interface IGeometricInfo {\r\n    /**\r\n     * @en Vertex positions.\r\n     * @zh 顶点位置。\r\n     */\r\n    positions: Float32Array;\r\n\r\n    /**\r\n     * @en Indices data.\r\n     * @zh 索引数据。\r\n     */\r\n    indices?: IBArray;\r\n\r\n    /**\r\n     * @en Whether the geometry is treated as double sided.\r\n     * @zh 是否将图元按双面对待。\r\n     */\r\n    doubleSided?: boolean;\r\n\r\n    /**\r\n     * @en The bounding box.\r\n     * @zh 此几何体的轴对齐包围盒。\r\n     */\r\n    boundingBox: { max: Vec3 | Readonly<Vec3>; min: Vec3 | Readonly<Vec3> };\r\n}\r\n\r\n/**\r\n * @en Flat vertex buffer.\r\n * @zh 扁平化顶点缓冲区。\r\n */\r\nexport interface IFlatBuffer {\r\n    stride: number;\r\n    count: number;\r\n    buffer: Uint8Array;\r\n}\r\n\r\nconst EMPTY_GEOMETRIC_INFO: IGeometricInfo = {\r\n    positions: new Float32Array(),\r\n    indices: new Uint8Array(),\r\n    boundingBox: { min: Vec3.ZERO, max: Vec3.ZERO },\r\n};\r\n\r\n/**\r\n * @en Sub mesh for rendering which contains all geometry data, it can be used to create [[gfx.InputAssembler]].\r\n * @zh 包含所有顶点数据的渲染子网格，可以用来创建 [[gfx.InputAssembler]]。\r\n */\r\nexport class RenderingSubMesh {\r\n    /**\r\n     * @en\r\n     * mesh object where this sub mesh locates.\r\n     * @zh\r\n     * 子网格所处的网格模型对象。\r\n     */\r\n    public mesh?: Mesh;\r\n\r\n    /**\r\n     * @en\r\n     * sub mesh's index in mesh.\r\n     * @zh\r\n     * 子网格在网格模型中的索引。\r\n     */\r\n    public subMeshIdx?: number;\r\n\r\n    private _flatBuffers: IFlatBuffer[] = [];\r\n\r\n    private _jointMappedBuffers?: Buffer[];\r\n\r\n    private _jointMappedBufferIndices?: number[];\r\n\r\n    private _vertexIdChannel?: { stream: number; index: number };\r\n\r\n    private _geometricInfo?: IGeometricInfo;\r\n\r\n    private _vertexBuffers: Buffer[];\r\n\r\n    private declare _attributes: Attribute[];\r\n\r\n    private declare _indexBuffer: Buffer | null;\r\n\r\n    private declare _indirectBuffer: Buffer | null;\r\n\r\n    private declare _primitiveMode: PrimitiveMode;\r\n\r\n    private declare _iaInfo: InputAssemblerInfo;\r\n\r\n    private declare _isOwnerOfIndexBuffer: boolean;\r\n\r\n    private _drawInfo?: DrawInfo | null = null;\r\n\r\n    /**\r\n     * @en\r\n     * sub mesh's constructor.\r\n     * @zh\r\n     * 子网格构造函数。\r\n     * @param vertexBuffers @en vertex buffers. @zh 顶点缓冲区数组。\r\n     * @param attributes @en vertex attributes. @zh 顶点属性数组。\r\n     * @param primitiveMode @en primitive mode. @zh 图元类型。\r\n     * @param indexBuffer @en index buffer. @zh 索引缓冲区。\r\n     * @param indirectBuffer @en indirect buffer. @zh 间接缓冲区。\r\n     */\r\n    constructor (\r\n        vertexBuffers: Buffer[],\r\n        attributes: Attribute[],\r\n        primitiveMode: PrimitiveMode,\r\n        indexBuffer: Buffer | null = null,\r\n        indirectBuffer: Buffer | null = null,\r\n        isOwnerOfIndexBuffer = true,\r\n    ) {\r\n        this._attributes = attributes;\r\n        this._vertexBuffers = vertexBuffers;\r\n        this._indexBuffer = indexBuffer;\r\n        this._indirectBuffer = indirectBuffer;\r\n        this._primitiveMode = primitiveMode;\r\n        this._iaInfo = new InputAssemblerInfo(attributes, vertexBuffers, indexBuffer, indirectBuffer);\r\n        this._isOwnerOfIndexBuffer = isOwnerOfIndexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en All vertex attributes used by the sub mesh.\r\n     * @zh 所有顶点属性。\r\n     */\r\n    get attributes (): Attribute[] { return this._attributes; }\r\n\r\n    /**\r\n     * @en All vertex buffers used by the sub mesh.\r\n     * @zh 使用的所有顶点缓冲区。\r\n     */\r\n    get vertexBuffers (): Buffer[] { return this._vertexBuffers; }\r\n\r\n    /**\r\n     * @en Index buffer used by the sub mesh.\r\n     * @zh 使用的索引缓冲区，若未使用则无需指定。\r\n     */\r\n    get indexBuffer (): Buffer | null { return this._indexBuffer; }\r\n\r\n    /**\r\n     * @en Indirect buffer used by the sub mesh.\r\n     * @zh 间接绘制缓冲区。\r\n     */\r\n    get indirectBuffer (): Buffer | null { return this._indirectBuffer; }\r\n\r\n    /**\r\n     * @en Primitive mode used by the sub mesh.\r\n     * @zh 图元类型。\r\n     */\r\n    get primitiveMode (): PrimitiveMode { return this._primitiveMode; }\r\n\r\n    /**\r\n     * @en The geometric info of the sub mesh, used for raycast.\r\n     * @zh （用于射线检测的）几何信息。\r\n     */\r\n    get geometricInfo (): IGeometricInfo {\r\n        if (this._geometricInfo) {\r\n            return this._geometricInfo;\r\n        }\r\n        if (this.mesh === undefined) {\r\n            return EMPTY_GEOMETRIC_INFO;\r\n        }\r\n        if (this.subMeshIdx === undefined) {\r\n            return EMPTY_GEOMETRIC_INFO;\r\n        }\r\n        const { mesh } = this; const index = this.subMeshIdx;\r\n        const pAttri = this.attributes.find((element) => element.name === (AttributeName.ATTR_POSITION as string));\r\n\r\n        if (!pAttri) {\r\n            return EMPTY_GEOMETRIC_INFO;\r\n        }\r\n\r\n        let positions: Float32Array | undefined;\r\n        switch (pAttri.format) {\r\n        case Format.RG32F:\r\n        case Format.RGB32F:\r\n        {\r\n            positions = mesh.readAttribute(index, AttributeName.ATTR_POSITION) as unknown as Float32Array;\r\n            if (!positions) {\r\n                return EMPTY_GEOMETRIC_INFO;\r\n            }\r\n            break;\r\n        }\r\n        case Format.RGBA32F:\r\n        {\r\n            const data = mesh.readAttribute(index, AttributeName.ATTR_POSITION) as unknown as Float32Array;\r\n            if (!data) {\r\n                return EMPTY_GEOMETRIC_INFO;\r\n            }\r\n            const count = data.length / 4;\r\n            positions = new Float32Array(count * 3);\r\n            for (let i = 0; i < count; ++i) {\r\n                const dstPtr = i * 3;\r\n                const srcPtr = i * 4;\r\n                positions[dstPtr] = data[srcPtr];\r\n                positions[dstPtr + 1] = data[srcPtr + 1];\r\n                positions[dstPtr + 2] = data[srcPtr + 2];\r\n            }\r\n            break;\r\n        }\r\n        case Format.RG16F:\r\n        case Format.RGB16F:\r\n        {\r\n            const data =  mesh.readAttribute(index, AttributeName.ATTR_POSITION) as unknown as Uint16Array;\r\n            if (!data) {\r\n                return EMPTY_GEOMETRIC_INFO;\r\n            }\r\n            positions = new Float32Array(data.length);\r\n            for (let i = 0; i < data.length; ++i) {\r\n                positions[i] = halfToFloat(data[i]);\r\n            }\r\n            break;\r\n        }\r\n        case Format.RGBA16F:\r\n        {\r\n            const data =  mesh.readAttribute(index, AttributeName.ATTR_POSITION) as unknown as Uint16Array;\r\n            if (!data) {\r\n                return EMPTY_GEOMETRIC_INFO;\r\n            }\r\n            const count = data.length / 4;\r\n            positions = new Float32Array(count * 3);\r\n            for (let i = 0; i < count; ++i) {\r\n                const dstPtr = i * 3;\r\n                const srcPtr = i * 4;\r\n                positions[dstPtr] = halfToFloat(data[srcPtr]);\r\n                positions[dstPtr + 1] = halfToFloat(data[srcPtr + 1]);\r\n                positions[dstPtr + 2] = halfToFloat(data[srcPtr + 2]);\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            return EMPTY_GEOMETRIC_INFO;\r\n        }\r\n\r\n        const indices = mesh.readIndices(index) || undefined;\r\n        const max = new Vec3();\r\n        const min = new Vec3();\r\n\r\n        const conut = FormatInfos[pAttri.format].count;\r\n        if (conut === 2) {\r\n            max.set(positions[0], positions[1], 0);\r\n            min.set(positions[0], positions[1], 0);\r\n        } else {\r\n            max.set(positions[0], positions[1], positions[2]);\r\n            min.set(positions[0], positions[1], positions[2]);\r\n        }\r\n        for (let i = 0; i < positions.length; i += conut) {\r\n            if (conut === 2) {\r\n                max.x = positions[i] > max.x ? positions[i] : max.x;\r\n                max.y = positions[i + 1] > max.y ? positions[i + 1] : max.y;\r\n                min.x = positions[i] < min.x ? positions[i] : min.x;\r\n                min.y = positions[i + 1] < min.y ? positions[i + 1] : min.y;\r\n            } else {\r\n                max.x = positions[i] > max.x ? positions[i] : max.x;\r\n                max.y = positions[i + 1] > max.y ? positions[i + 1] : max.y;\r\n                max.z = positions[i + 2] > max.z ? positions[i + 2] : max.z;\r\n                min.x = positions[i] < min.x ? positions[i] : min.x;\r\n                min.y = positions[i + 1] < min.y ? positions[i + 1] : min.y;\r\n                min.z = positions[i + 2] < min.z ? positions[i + 2] : min.z;\r\n            }\r\n        }\r\n        this._geometricInfo = { positions, indices, boundingBox: { max, min } };\r\n        return this._geometricInfo;\r\n    }\r\n\r\n    /**\r\n     * @en Invalidate the geometric info of the sub mesh after geometry changed.\r\n     * @zh 网格更新后，设置（用于射线检测的）几何信息为无效，需要重新计算。\r\n     */\r\n    public invalidateGeometricInfo (): void { this._geometricInfo = undefined; }\r\n\r\n    /**\r\n     * @en the draw range.\r\n     * @zh 渲染范围。\r\n     */\r\n    set drawInfo (info: DrawInfo | null | undefined) {\r\n        this._drawInfo = info;\r\n    }\r\n\r\n    get drawInfo (): DrawInfo | null | undefined {\r\n        return this._drawInfo;\r\n    }\r\n\r\n    /**\r\n     * @en Flatted vertex buffers.\r\n     * @zh 扁平化的顶点缓冲区。\r\n     */\r\n    get flatBuffers (): IFlatBuffer[] { return this._flatBuffers; }\r\n\r\n    /**\r\n     * @en generate flatted vertex buffers.\r\n     * @zh 生成扁平化的顶点缓冲区。\r\n     */\r\n    public genFlatBuffers (): void {\r\n        if (this._flatBuffers.length || !this.mesh || this.subMeshIdx === undefined) { return; }\r\n\r\n        const { mesh } = this;\r\n        let idxCount = 0;\r\n        const prim = mesh.struct.primitives[this.subMeshIdx];\r\n        if (prim.indexView) { idxCount = prim.indexView.count; }\r\n        for (let i = 0; i < prim.vertexBundelIndices.length; i++) {\r\n            const bundleIdx = prim.vertexBundelIndices[i];\r\n            const vertexBundle = mesh.struct.vertexBundles[bundleIdx];\r\n            const vbCount = prim.indexView ? prim.indexView.count : vertexBundle.view.count;\r\n            const vbStride = vertexBundle.view.stride;\r\n            const vbSize = vbStride * vbCount;\r\n            const view = new Uint8Array(mesh.data.buffer, vertexBundle.view.offset, vertexBundle.view.length);\r\n            const sharedView = new Uint8Array(prim.indexView ? vbSize : vertexBundle.view.length);\r\n\r\n            if (!prim.indexView) {\r\n                sharedView.set(mesh.data.subarray(vertexBundle.view.offset, vertexBundle.view.offset + vertexBundle.view.length));\r\n                this._flatBuffers.push({ stride: vbStride, count: vbCount, buffer: sharedView });\r\n                continue;\r\n            }\r\n\r\n            const ibView = mesh.readIndices(this.subMeshIdx)!;\r\n            // transform to flat buffer\r\n            for (let n = 0; n < idxCount; ++n) {\r\n                const idx = ibView[n];\r\n                const offset = n * vbStride;\r\n                const srcOffset = idx * vbStride;\r\n                for (let m = 0; m < vbStride; ++m) {\r\n                    sharedView[offset + m] = view[srcOffset + m];\r\n                }\r\n            }\r\n            this._flatBuffers.push({ stride: vbStride, count: vbCount, buffer: sharedView });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The vertex buffer for joint after mapping.\r\n     * @zh 骨骼索引按映射表处理后的顶点缓冲。\r\n     */\r\n    get jointMappedBuffers (): Buffer[] {\r\n        if (this._jointMappedBuffers) { return this._jointMappedBuffers; }\r\n        const buffers: Buffer[] = this._jointMappedBuffers = [];\r\n        const indices: number[] = this._jointMappedBufferIndices = [];\r\n        if (!this.mesh || this.subMeshIdx === undefined) { return this._jointMappedBuffers = this.vertexBuffers; }\r\n        const { struct } = this.mesh;\r\n        const prim = struct.primitives[this.subMeshIdx];\r\n        if (!struct.jointMaps || prim.jointMapIndex === undefined || !struct.jointMaps[prim.jointMapIndex]) {\r\n            return this._jointMappedBuffers = this.vertexBuffers;\r\n        }\r\n        let jointFormat: Format;\r\n        let jointOffset: number;\r\n        const { device } = cclegacy.director.root as Root;\r\n        for (let i = 0; i < prim.vertexBundelIndices.length; i++) {\r\n            const bundle = struct.vertexBundles[prim.vertexBundelIndices[i]];\r\n            jointOffset = 0;\r\n            jointFormat = Format.UNKNOWN;\r\n            for (let j = 0; j < bundle.attributes.length; j++) {\r\n                const attr = bundle.attributes[j];\r\n                if (attr.name === (AttributeName.ATTR_JOINTS as string)) {\r\n                    jointFormat = attr.format;\r\n                    break;\r\n                }\r\n                jointOffset += FormatInfos[attr.format].size;\r\n            }\r\n            if (jointFormat) {\r\n                const data = new Uint8Array(this.mesh.data.buffer, bundle.view.offset, bundle.view.length);\r\n                const dataView = new DataView(data.slice().buffer);\r\n                const idxMap = struct.jointMaps[prim.jointMapIndex];\r\n                mapBuffer(\r\n                    dataView,\r\n                    (cur): number => idxMap.indexOf(cur),\r\n                    jointFormat,\r\n                    jointOffset,\r\n                    bundle.view.length,\r\n                    bundle.view.stride,\r\n                    dataView,\r\n                );\r\n                const buffer = device.createBuffer(new BufferInfo(\r\n                    BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n                    MemoryUsageBit.DEVICE,\r\n                    bundle.view.length,\r\n                    bundle.view.stride,\r\n                ));\r\n                buffer.update(dataView.buffer); buffers.push(buffer); indices.push(i);\r\n            } else {\r\n                buffers.push(this.vertexBuffers[prim.vertexBundelIndices[i]]);\r\n            }\r\n        }\r\n        if (this._vertexIdChannel) {\r\n            buffers.push(this._allocVertexIdBuffer(device));\r\n        }\r\n        return buffers;\r\n    }\r\n\r\n    /**\r\n     * @en The input assembler info.\r\n     * @zh 输入汇集器信息。\r\n     */\r\n    get iaInfo (): InputAssemblerInfo { return this._iaInfo; }\r\n\r\n    /**\r\n     * @en Destroys sub mesh.\r\n     * @zh 销毁子网格。\r\n     */\r\n    public destroy (): void {\r\n        for (let i = 0; i < this.vertexBuffers.length; i++) {\r\n            this.vertexBuffers[i].destroy();\r\n        }\r\n        this.vertexBuffers.length = 0;\r\n        if (this._indexBuffer) {\r\n            if (this._isOwnerOfIndexBuffer) {\r\n                this._indexBuffer.destroy();\r\n            }\r\n            this._indexBuffer = null;\r\n        }\r\n        if (this._jointMappedBuffers && this._jointMappedBufferIndices) {\r\n            for (let i = 0; i < this._jointMappedBufferIndices.length; i++) {\r\n                this._jointMappedBuffers[this._jointMappedBufferIndices[i]].destroy();\r\n            }\r\n            this._jointMappedBuffers = undefined;\r\n            this._jointMappedBufferIndices = undefined;\r\n        }\r\n        if (this._indirectBuffer) {\r\n            this._indirectBuffer.destroy();\r\n            this._indirectBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Adds a vertex attribute input called 'a_vertexId' into this sub-mesh.\r\n     * This is useful if you want to simulate `gl_VertexId` in WebGL context prior to 2.0.\r\n     * Once you call this function, the vertex attribute is permanently added.\r\n     * Subsequent calls to this function take no effect.\r\n     * @zh 添加一个 'a_vertexId' 顶点属性， 用于在 WebGL 2.0 之前的平台模拟 `gl_VertexId`，\r\n     * 一旦你调用此函数， 顶点属性永久被添加， 后续调用无效果。\r\n     * @param device @en Device used to create related rendering resources @zh 用于创建相关渲染资源的设备对象\r\n     */\r\n    public enableVertexIdChannel (device: Device): void {\r\n        if (this._vertexIdChannel) {\r\n            return;\r\n        }\r\n\r\n        const streamIndex = this.vertexBuffers.length;\r\n        const attributeIndex = this.attributes.length;\r\n\r\n        const vertexIdBuffer = this._allocVertexIdBuffer(device);\r\n        this._vertexBuffers.push(vertexIdBuffer);\r\n        this._attributes.push(new Attribute('a_vertexId', Format.R32F, false, streamIndex));\r\n\r\n        this._iaInfo.attributes = this._attributes;\r\n        this._iaInfo.vertexBuffers = this._vertexBuffers;\r\n\r\n        this._vertexIdChannel = {\r\n            stream: streamIndex,\r\n            index: attributeIndex,\r\n        };\r\n    }\r\n\r\n    private _allocVertexIdBuffer (device: Device): Buffer {\r\n        const vertexCount = (this.vertexBuffers.length === 0 || this.vertexBuffers[0].stride === 0)\r\n            ? 0\r\n            // TODO: This depends on how stride of a vertex buffer is defined; Consider padding problem.\r\n            : this.vertexBuffers[0].size / this.vertexBuffers[0].stride;\r\n        const vertexIds = new Float32Array(vertexCount);\r\n        for (let iVertex = 0; iVertex < vertexCount; ++iVertex) {\r\n            // `+0.5` because on some platforms, the \"fetched integer\" may have small error.\r\n            // For example `26` may yield `25.99999`, which is convert to `25` instead of `26` using `int()`.\r\n            vertexIds[iVertex] = iVertex + 0.5;\r\n        }\r\n\r\n        const vertexIdBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            vertexIds.byteLength,\r\n            vertexIds.BYTES_PER_ELEMENT,\r\n        ));\r\n        vertexIdBuffer.update(vertexIds);\r\n\r\n        return vertexIdBuffer;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, editable, serializable } from 'cc.decorator';\r\nimport { Scene } from '../../scene-graph/scene';\r\nimport { Asset } from './asset';\r\nimport { cclegacy } from '../../core';\r\n\r\n/**\r\n * @en Class for scene loading.\r\n * @zh 场景资源类。\r\n *\r\n */\r\n@ccclass('cc.SceneAsset')\r\nexport class SceneAsset extends Asset {\r\n    /**\r\n     * @en The scene node\r\n     * @zh 场景节点。\r\n     */\r\n    @editable\r\n    @serializable\r\n    public scene: Scene | null = null;\r\n\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public initDefault (uuid?: string): void {\r\n        super.initDefault(uuid);\r\n        this.scene = new Scene('New Scene');\r\n    }\r\n\r\n    public validate (): boolean {\r\n        return !!this.scene;\r\n    }\r\n}\r\n\r\ncclegacy.SceneAsset = SceneAsset;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n https://www.cocos.com/\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Shadows, CSMLevel, CSMOptimizationMode } from '../../render-scene/scene/shadows';\r\nimport { DirectionalLight } from '../../render-scene/scene/directional-light';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport { Mat4, Vec3, Vec2, Vec4 } from '../../core/math';\r\nimport { Frustum, AABB } from '../../core/geometry';\r\nimport { IRenderObject } from '../define';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { CachedArray } from '../../core/memop/cached-array';\r\nimport { cclegacy } from '../../core';\r\nimport type { Director } from '../../game/director';\r\n\r\nconst _mat4Trans = new Mat4();\r\nconst _matShadowTrans = new Mat4();\r\nconst _matShadowView = new Mat4();\r\nconst _matShadowProj = new Mat4();\r\nconst _matShadowViewProj = new Mat4();\r\nconst _matShadowViewProjArbitaryPos = new Mat4();\r\nconst _matShadowViewProjArbitaryPosInv = new Mat4();\r\n\r\nconst _focus = new Vec3(0, 0, 0);\r\nconst _projPos = new Vec3();\r\nconst _texelSize = new Vec2();\r\nconst _projSnap = new Vec3();\r\nconst _snap = new Vec3();\r\nconst _maxVec3 = new Vec3(10000000, 10000000, 10000000);\r\nconst _minVec3 = new Vec3(-10000000, -10000000, -10000000);\r\nconst _shadowPos = new Vec3();\r\nlet _maxLayerPosz = 0.0;\r\nlet _maxLayerFarPlane = 0.0;\r\n\r\nexport class ShadowLayerVolume {\r\n    protected _shadowObjects: IRenderObject[] = [];\r\n\r\n    protected _shadowCameraFar = 0;\r\n    // Level is a vector, Indicates the location.range: [0 ~ 3]\r\n    protected declare _level: number;\r\n\r\n    protected _matShadowView: Mat4 = new Mat4();\r\n    protected _matShadowProj: Mat4 = new Mat4();\r\n    protected _matShadowViewProj: Mat4 = new Mat4();\r\n\r\n    protected _validFrustum: Frustum = new Frustum();\r\n\r\n    // geometry renderer value\r\n    protected _splitFrustum: Frustum = new Frustum();\r\n    protected _lightViewFrustum: Frustum = new Frustum();\r\n    protected _castLightViewBoundingBox: AABB = new AABB();\r\n\r\n    constructor (level: number) {\r\n        this._level = level;\r\n        this._validFrustum.accurate = true;\r\n        this._splitFrustum.accurate = true;\r\n        this._lightViewFrustum.accurate = true;\r\n    }\r\n\r\n    get level (): number { return this._level; }\r\n\r\n    get shadowObjects (): IRenderObject[] {\r\n        return this._shadowObjects;\r\n    }\r\n\r\n    get shadowCameraFar (): number {\r\n        return this._shadowCameraFar;\r\n    }\r\n    set shadowCameraFar (val) {\r\n        this._shadowCameraFar = val;\r\n    }\r\n\r\n    get matShadowView (): Mat4 {\r\n        return this._matShadowView;\r\n    }\r\n    set matShadowView (val) {\r\n        this._matShadowView = val;\r\n    }\r\n\r\n    get matShadowProj (): Mat4 {\r\n        return this._matShadowProj;\r\n    }\r\n    set matShadowProj (val) {\r\n        this._matShadowProj = val;\r\n    }\r\n\r\n    get matShadowViewProj (): Mat4 {\r\n        return this._matShadowViewProj;\r\n    }\r\n    set matShadowViewProj (val) {\r\n        this._matShadowViewProj = val;\r\n    }\r\n\r\n    get validFrustum (): Readonly<Frustum> {\r\n        return this._validFrustum;\r\n    }\r\n\r\n    get splitFrustum (): Readonly<Frustum> {\r\n        return this._splitFrustum;\r\n    }\r\n\r\n    get lightViewFrustum (): Readonly<Frustum> {\r\n        return this._lightViewFrustum;\r\n    }\r\n\r\n    get castLightViewBoundingBox (): Readonly<AABB> {\r\n        return this._castLightViewBoundingBox;\r\n    }\r\n\r\n    public copyToValidFrustum (validFrustum: Readonly<Frustum>): void {\r\n        Frustum.copy(this._validFrustum, validFrustum);\r\n    }\r\n\r\n    public calculateValidFrustumOrtho (width: number, height: number, near: number, far: number, transform: Mat4): void {\r\n        Frustum.createOrtho(this._validFrustum, width, height, near,  far, transform);\r\n    }\r\n\r\n    public calculateSplitFrustum (camera: Camera, m: Mat4, start: number, end: number): void {\r\n        this._splitFrustum.split(start, end, camera.aspect, camera.fov, m);\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._shadowObjects.length = 0;\r\n    }\r\n\r\n    public createMatrix (dirLight: DirectionalLight, shadowMapWidth: number, onlyForCulling: boolean): void {\r\n        const device = cclegacy.director.root.device;\r\n        const invisibleOcclusionRange = dirLight.shadowInvisibleOcclusionRange;\r\n        Frustum.copy(this._lightViewFrustum, this._splitFrustum);\r\n\r\n        // view matrix with range back\r\n        Mat4.fromRT(_matShadowTrans, dirLight.node!.rotation, _focus);\r\n        Mat4.invert(_matShadowView, _matShadowTrans);\r\n        const shadowViewArbitaryPos = _matShadowView.clone();\r\n        this._lightViewFrustum.transform(_matShadowView);\r\n\r\n        // bounding box in light space\r\n        AABB.fromPoints(this._castLightViewBoundingBox, _maxVec3, _minVec3);\r\n        this._castLightViewBoundingBox.mergeFrustum(this._lightViewFrustum);\r\n        let orthoSizeWidth;\r\n        let orthoSizeHeight;\r\n        if (dirLight.csmOptimizationMode === CSMOptimizationMode.DisableRotationFix) {\r\n            orthoSizeWidth = this._castLightViewBoundingBox.halfExtents.x * 2.0;\r\n            orthoSizeHeight = this._castLightViewBoundingBox.halfExtents.y * 2.0;\r\n        } else {\r\n            orthoSizeWidth = orthoSizeHeight = Vec3.distance(this._lightViewFrustum.vertices[0], this._lightViewFrustum.vertices[6]);\r\n        }\r\n\r\n        const csmLevel = cclegacy.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;\r\n        if (csmLevel > 1 && dirLight.csmOptimizationMode\r\n            === CSMOptimizationMode.RemoveDuplicates) {\r\n            if (this._level >= csmLevel - 1) {\r\n                _maxLayerFarPlane = this._castLightViewBoundingBox.halfExtents.z;\r\n                _maxLayerPosz = this._castLightViewBoundingBox.center.z;\r\n            } else {\r\n                const alignFarPlaneDist = Math.abs(this._castLightViewBoundingBox.center.z - _maxLayerPosz) + _maxLayerFarPlane;\r\n                this._castLightViewBoundingBox.halfExtents.z = Math.max(this._castLightViewBoundingBox.center.z, alignFarPlaneDist);\r\n            }\r\n        }\r\n\r\n        const r = this._castLightViewBoundingBox.halfExtents.z;\r\n        this._shadowCameraFar = r * 2 + invisibleOcclusionRange;\r\n        const center = this._castLightViewBoundingBox.center;\r\n        _shadowPos.set(center.x, center.y, center.z + r + invisibleOcclusionRange);\r\n        Vec3.transformMat4(_shadowPos, _shadowPos, _matShadowTrans);\r\n\r\n        Mat4.fromRT(_matShadowTrans, dirLight.node!.rotation, _shadowPos);\r\n        Mat4.invert(_matShadowView, _matShadowTrans);\r\n\r\n        if (!onlyForCulling) {\r\n            // snap to whole texels\r\n            const halfOrthoSizeWidth = orthoSizeWidth * 0.5;\r\n            const halfOrthoSizeHeight = orthoSizeHeight * 0.5;\r\n            Mat4.ortho(\r\n                _matShadowProj,\r\n                -halfOrthoSizeWidth,\r\n                halfOrthoSizeWidth,\r\n                -halfOrthoSizeHeight,\r\n                halfOrthoSizeHeight,\r\n                0.1,\r\n                this._shadowCameraFar,\r\n                device.capabilities.clipSpaceMinZ,\r\n                device.capabilities.clipSpaceSignY,\r\n            );\r\n\r\n            Mat4.multiply(_matShadowViewProjArbitaryPos, _matShadowProj, shadowViewArbitaryPos);\r\n            Vec3.transformMat4(_projPos, _shadowPos, _matShadowViewProjArbitaryPos);\r\n            const invActualSize = 2.0 / shadowMapWidth;\r\n            _texelSize.set(invActualSize, invActualSize);\r\n            const modX = _projPos.x % _texelSize.x;\r\n            const modY = _projPos.y % _texelSize.y;\r\n            _projSnap.set(_projPos.x - modX, _projPos.y - modY, _projPos.z);\r\n            Mat4.invert(_matShadowViewProjArbitaryPosInv, _matShadowViewProjArbitaryPos);\r\n            Vec3.transformMat4(_snap, _projSnap, _matShadowViewProjArbitaryPosInv);\r\n\r\n            Mat4.fromRT(_matShadowTrans, dirLight.node!.rotation, _snap);\r\n            Mat4.invert(_matShadowView, _matShadowTrans);\r\n\r\n            // fill data\r\n            Mat4.multiply(_matShadowViewProj, _matShadowProj, _matShadowView);\r\n            Mat4.copy(this._matShadowView, _matShadowView);\r\n            Mat4.copy(this._matShadowProj, _matShadowProj);\r\n            Mat4.copy(this._matShadowViewProj, _matShadowViewProj);\r\n        }\r\n\r\n        Frustum.createOrtho(\r\n            this._validFrustum,\r\n            orthoSizeWidth,\r\n            orthoSizeHeight,\r\n            0.1,\r\n            this._shadowCameraFar,\r\n            _matShadowTrans,\r\n        );\r\n    }\r\n}\r\nexport class CSMShadowLayer extends ShadowLayerVolume {\r\n    protected _splitCameraNear = 0;\r\n    protected _splitCameraFar = 0;\r\n\r\n    protected _csmAtlas: Vec4 = new Vec4();\r\n\r\n    constructor (level: number) {\r\n        super(level);\r\n        this._calculateAtlas(level);\r\n    }\r\n\r\n    get splitCameraNear (): number {\r\n        return this._splitCameraNear;\r\n    }\r\n    set splitCameraNear (val) {\r\n        this._splitCameraNear = val;\r\n    }\r\n\r\n    get splitCameraFar (): number {\r\n        return this._splitCameraFar;\r\n    }\r\n    set splitCameraFar (val) {\r\n        this._splitCameraFar = val;\r\n    }\r\n\r\n    get csmAtlas (): Vec4 {\r\n        return this._csmAtlas;\r\n    }\r\n    set csmAtlas (val) {\r\n        this._csmAtlas = val;\r\n    }\r\n\r\n    public destroy (): void {\r\n        super.destroy();\r\n    }\r\n\r\n    private _calculateAtlas (level: number): void {\r\n        const clipSpaceSignY =  cclegacy.director.root.device.capabilities.clipSpaceSignY;\r\n        const x = level % 2 - 0.5;\r\n        const y = (0.5 - Math.floor(level / 2)) * clipSpaceSignY;\r\n        this._csmAtlas.set(0.5, 0.5, x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * @en Shadow CSM layer manager\r\n * @zh CSM阴影图层管理\r\n */\r\nexport class CSMLayers {\r\n    protected _castShadowObjects: IRenderObject[] = [];\r\n    protected _layerObjects = new CachedArray<IRenderObject>(64);\r\n\r\n    protected _layers: CSMShadowLayer[] = [];\r\n    // LevelCount is a scalar, Indicates the number.\r\n    protected _levelCount = 0;\r\n    // The ShadowTransformInfo object for 'fixed area shadow' || 'maximum clipping info' || 'CSM layers = 1'.\r\n    protected _specialLayer: ShadowLayerVolume = new ShadowLayerVolume(1);\r\n    protected _shadowDistance = 0;\r\n\r\n    get castShadowObjects (): IRenderObject[] {\r\n        return this._castShadowObjects;\r\n    }\r\n\r\n    get layerObjects (): CachedArray<IRenderObject> {\r\n        return this._layerObjects;\r\n    }\r\n\r\n    get layers (): CSMShadowLayer[] {\r\n        return this._layers;\r\n    }\r\n\r\n    get specialLayer (): ShadowLayerVolume {\r\n        return this._specialLayer;\r\n    }\r\n\r\n    public constructor () {\r\n        for (let i = 0; i < CSMLevel.LEVEL_4; i++) {\r\n            this._layers[i] = new CSMShadowLayer(i);\r\n        }\r\n    }\r\n\r\n    public update (sceneData: PipelineSceneData, camera: Camera): void {\r\n        const scene = camera.scene!;\r\n        const dirLight = scene.mainLight;\r\n        if (dirLight === null) { return; }\r\n\r\n        const shadowInfo = sceneData.shadows;\r\n        const levelCount = cclegacy.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;\r\n        const shadowDistance = dirLight.shadowDistance;\r\n\r\n        if (!shadowInfo.enabled || !dirLight.shadowEnabled) { return; }\r\n\r\n        if (dirLight.shadowFixedArea) {\r\n            this._updateFixedArea(dirLight);\r\n        } else {\r\n            if (dirLight.csmNeedUpdate || this._levelCount !== levelCount\r\n                || this._shadowDistance !== shadowDistance) {\r\n                this._splitFrustumLevels(dirLight);\r\n                this._levelCount = levelCount;\r\n                this._shadowDistance = shadowDistance;\r\n            }\r\n\r\n            this._calculateCSM(camera, dirLight, shadowInfo);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._castShadowObjects.length = 0;\r\n        for (let i = 0; i < this._layers.length; i++) {\r\n            this._layers[i].destroy();\r\n        }\r\n        this._layers.length = 0;\r\n    }\r\n\r\n    private _updateFixedArea (dirLight: DirectionalLight): void {\r\n        const device = (cclegacy.director as Director).root!.device;\r\n        const x = dirLight.shadowOrthoSize;\r\n        const y = dirLight.shadowOrthoSize;\r\n        const near = dirLight.shadowNear;\r\n        const far = dirLight.shadowFar;\r\n        Mat4.fromRT(_matShadowTrans, dirLight.node!.worldRotation, dirLight.node!.worldPosition);\r\n        Mat4.invert(_matShadowView, _matShadowTrans);\r\n        Mat4.ortho(\r\n            _matShadowProj,\r\n            -x,\r\n            x,\r\n            -y,\r\n            y,\r\n            near,\r\n            far,\r\n            device.capabilities.clipSpaceMinZ,\r\n            device.capabilities.clipSpaceSignY,\r\n        );\r\n        Mat4.multiply(_matShadowViewProj, _matShadowProj, _matShadowView);\r\n        this._specialLayer.matShadowView = _matShadowView;\r\n        this._specialLayer.matShadowProj = _matShadowProj;\r\n        this._specialLayer.matShadowViewProj = _matShadowViewProj;\r\n\r\n        this._specialLayer.calculateValidFrustumOrtho(x * 2.0, y * 2.0, near,  far, _matShadowTrans);\r\n    }\r\n\r\n    private _splitFrustumLevels (dirLight: DirectionalLight): void {\r\n        const nd = 0.1;\r\n        const fd = dirLight.shadowDistance;\r\n        const ratio = fd / nd;\r\n        const level = cclegacy.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;\r\n        const lambda = dirLight.csmLayerLambda;\r\n        this._layers[0].splitCameraNear = nd;\r\n        for (let i = 1; i < level; i++) {\r\n            // i ÷ numbers of level\r\n            const si = i / level;\r\n            // eslint-disable-next-line no-restricted-properties\r\n            const preNear = lambda * (nd * ratio ** si) + (1 - lambda) * (nd + (fd - nd) * si);\r\n            // Slightly increase the overlap to avoid fracture\r\n            const nextFar = preNear * 1.005;\r\n            this._layers[i].splitCameraNear = preNear;\r\n            this._layers[i - 1].splitCameraFar = nextFar;\r\n        }\r\n        // numbers of level - 1\r\n        this._layers[level - 1].splitCameraFar = fd;\r\n\r\n        dirLight.csmNeedUpdate = false;\r\n    }\r\n\r\n    private _calculateCSM (camera: Camera, dirLight: DirectionalLight, shadowInfo: Shadows): void {\r\n        const level = cclegacy.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;\r\n        const shadowMapWidth = level > 1 ? shadowInfo.size.x * 0.5 : shadowInfo.size.x;\r\n\r\n        if (shadowMapWidth < 0.0) { return; }\r\n\r\n        this._getCameraWorldMatrix(_mat4Trans, camera);\r\n        for (let i = level - 1; i >= 0; i--) {\r\n            const csmLayer = this._layers[i];\r\n            const near = csmLayer.splitCameraNear;\r\n            const far = csmLayer.splitCameraFar;\r\n            csmLayer.calculateSplitFrustum(camera, _mat4Trans, near, far);\r\n            csmLayer.createMatrix(dirLight, shadowMapWidth, false);\r\n        }\r\n\r\n        if (level === CSMLevel.LEVEL_1) {\r\n            this._specialLayer.shadowCameraFar = this._layers[0].shadowCameraFar;\r\n            Mat4.copy(this._specialLayer.matShadowView, this._layers[0].matShadowView);\r\n            Mat4.copy(this._specialLayer.matShadowProj, this._layers[0].matShadowProj);\r\n            Mat4.copy(this._specialLayer.matShadowViewProj, this._layers[0].matShadowViewProj);\r\n            this._specialLayer.copyToValidFrustum(this._layers[0].validFrustum);\r\n        } else {\r\n            this._specialLayer.calculateSplitFrustum(camera, _mat4Trans, 0.1, dirLight.shadowDistance);\r\n            this._specialLayer.createMatrix(dirLight, shadowMapWidth, true);\r\n        }\r\n    }\r\n\r\n    private _getCameraWorldMatrix (out: Mat4, camera: Camera): void {\r\n        if (!camera.node) { return; }\r\n\r\n        const cameraNode = camera.node;\r\n        const position = cameraNode.worldPosition;\r\n        const rotation = cameraNode.worldRotation;\r\n\r\n        Mat4.fromRT(out, rotation, position);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EventTarget } from '../core';\r\n\r\nexport enum PipelineEventType {\r\n    /**\r\n     * @en\r\n     * The event type for render frame begin event\r\n     *\r\n     * @zh\r\n     * 帧渲染开始事件。\r\n     */\r\n    RENDER_FRAME_BEGIN = 'render-frame-begin',\r\n\r\n    /**\r\n      * @en\r\n      * The event type for render frame end event\r\n      *\r\n      * @zh\r\n      * 帧渲染结束事件。\r\n      */\r\n    RENDER_FRAME_END = 'render-frame-end',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for render camera begin event\r\n     *\r\n     * @zh\r\n     * 相机渲染开始事件。\r\n     */\r\n    RENDER_CAMERA_BEGIN = 'render-camera-begin',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for render camera end event\r\n     *\r\n     * @zh\r\n     * 相机渲染结束事件。\r\n     */\r\n    RENDER_CAMERA_END = 'render-camera-end',\r\n\r\n    /**\r\n      * @en\r\n      * FBO attachment texture zoom event\r\n      *\r\n      * @zh\r\n      * FBO附件纹理缩放事件。\r\n      */\r\n    ATTACHMENT_SCALE_CAHNGED = 'attachment-scale-changed'\r\n}\r\n\r\nexport type PipelineEventCallback = (...args: any[]) => void;\r\nexport class PipelineEventProcessor extends EventTarget implements IPipelineEvent {\r\n    public eventTargetOn = super.on;\r\n    public eventTargetOnce = super.once;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public on<TFunction extends PipelineEventCallback> (\r\n        type: PipelineEventType,\r\n        callback: TFunction,\r\n        target?: any,\r\n        once?: boolean,\r\n    ): typeof callback {\r\n        return this.eventTargetOn(type, callback, target, once);\r\n    }\r\n\r\n    public once<TFunction extends PipelineEventCallback> (\r\n        type: PipelineEventType,\r\n        callback: TFunction,\r\n        target?: any,\r\n    ): typeof callback {\r\n        return this.eventTargetOnce(type, callback, target);\r\n    }\r\n}\r\nexport interface IPipelineEvent {\r\n    on (type: PipelineEventType, callback: PipelineEventCallback, target?: any, once?: boolean): typeof callback;\r\n    once (type: PipelineEventType, callback: PipelineEventCallback, target?: any): typeof callback;\r\n    off (type: PipelineEventType, callback?: PipelineEventCallback, target?: any): void;\r\n    emit (type: PipelineEventType, arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): void;\r\n    targetOff (typeOrTarget: any): void;\r\n    removeAll (typeOrTarget: any): void;\r\n    hasEventListener (type: PipelineEventType, callback?: PipelineEventCallback, target?: any): boolean;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n https://www.cocos.com/\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Fog } from '../render-scene/scene/fog';\r\nimport { Ambient } from '../render-scene/scene/ambient';\r\nimport { Skybox } from '../render-scene/scene/skybox';\r\nimport { Shadows } from '../render-scene/scene/shadows';\r\nimport { Octree } from '../render-scene/scene/octree';\r\nimport { IRenderObject } from './define';\r\nimport { Device, Framebuffer, InputAssembler, InputAssemblerInfo, Buffer, BufferInfo,\r\n    BufferUsageBit, MemoryUsageBit, Attribute, Format, Shader } from '../gfx';\r\nimport { Light } from '../render-scene/scene/light';\r\nimport { Material } from '../asset/assets';\r\nimport { Pass } from '../render-scene/core/pass';\r\nimport { CSMLayers } from './shadow/csm-layers';\r\nimport { cclegacy } from '../core/global-exports';\r\nimport { Skin } from '../render-scene/scene/skin';\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { PostSettings } from '../render-scene/scene/post-settings';\r\nimport type { MeshRenderer } from '../3d/framework/mesh-renderer';\r\nimport type { LightProbes } from '../gi/light-probe';\r\nimport type { Director } from '../game/director';\r\n\r\nconst GEOMETRY_RENDERER_TECHNIQUE_COUNT = 6;\r\n\r\nexport class PipelineSceneData {\r\n    /**\r\n      * @en Is open HDR.\r\n      * @zh 是否开启 HDR。\r\n      * @readonly\r\n      */\r\n    public get isHDR (): boolean {\r\n        return this._isHDR;\r\n    }\r\n\r\n    public set isHDR (val: boolean) {\r\n        this._isHDR = val;\r\n    }\r\n    public get shadingScale (): number {\r\n        return this._shadingScale;\r\n    }\r\n\r\n    public set shadingScale (val: number) {\r\n        this._shadingScale = val;\r\n    }\r\n\r\n    public get csmSupported (): boolean {\r\n        return this._csmSupported;\r\n    }\r\n    public set csmSupported (val: boolean) {\r\n        this._csmSupported = val;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @en Get the Separable-SSS skin standard model.\r\n     * @zh 获取全局的4s标准模型\r\n     * @returns The model id\r\n     */\r\n    get standardSkinModel (): Model | null { return this._standardSkinModel; }\r\n    set standardSkinModel (val: Model | null) {\r\n        this._standardSkinModel = val;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @en Set the Separable-SSS skin standard model component.\r\n     * @zh 设置一个全局的4s标准模型组件\r\n     * @returns The model id\r\n     */\r\n    get standardSkinMeshRenderer (): MeshRenderer | null { return this._standardSkinMeshRenderer; }\r\n    set standardSkinMeshRenderer (val: MeshRenderer | null) {\r\n        if (this._standardSkinMeshRenderer && this._standardSkinMeshRenderer !== val) {\r\n            this._standardSkinMeshRenderer.clearGlobalStandardSkinObjectFlag();\r\n        }\r\n\r\n        this._standardSkinMeshRenderer = val;\r\n        this.standardSkinModel = val ? val.model : null;\r\n    }\r\n\r\n    get skinMaterialModel (): Model {\r\n        return this._skinMaterialModel!;\r\n    }\r\n    set skinMaterialModel (val: Model) {\r\n        this._skinMaterialModel = val;\r\n    }\r\n\r\n    public fog: Fog = new Fog();\r\n    public ambient: Ambient = new Ambient();\r\n    public skybox: Skybox = new Skybox();\r\n    public shadows: Shadows = new Shadows();\r\n    public csmLayers: CSMLayers = new CSMLayers();\r\n    public octree: Octree = new Octree();\r\n    public skin: Skin = new Skin();\r\n    public postSettings: PostSettings = new PostSettings();\r\n    public lightProbes: LightProbes = cclegacy.internal.LightProbes ? new cclegacy.internal.LightProbes() : null;\r\n\r\n    /**\r\n      * @en The list for valid punctual Lights, only available after the scene culling of the current frame.\r\n      * @zh 场景中精确的有效光源，仅在当前帧的场景剔除完成后有效。\r\n      */\r\n    public validPunctualLights: Light[] = [];\r\n\r\n    /**\r\n      * @en The list for render objects, only available after the scene culling of the current frame.\r\n      * @zh 渲染对象数组，仅在当前帧的场景剔除完成后有效。\r\n      */\r\n    public renderObjects: IRenderObject[] = [];\r\n    public shadowFrameBufferMap: Map<Light, Framebuffer> = new Map();\r\n    protected declare _device: Device;\r\n    protected _geometryRendererMaterials: Material[] = [];\r\n    protected _geometryRendererPasses: Pass[] = [];\r\n    protected _geometryRendererShaders: Shader[] = [];\r\n    protected _occlusionQueryVertexBuffer: Buffer | null = null;\r\n    protected _occlusionQueryIndicesBuffer: Buffer | null = null;\r\n    protected _occlusionQueryInputAssembler: InputAssembler | null = null;\r\n    protected _occlusionQueryMaterial: Material | null = null;\r\n    protected _occlusionQueryShader: Shader | null = null;\r\n    protected _isHDR = true;\r\n    protected _shadingScale = 1.0;\r\n    protected _csmSupported = true;\r\n    private _standardSkinMeshRenderer: MeshRenderer | null = null;\r\n    private _standardSkinModel: Model | null = null;\r\n    private _skinMaterialModel: Model | null = null;\r\n\r\n    constructor () {\r\n        this._shadingScale = 1.0;\r\n    }\r\n\r\n    public activate (device: Device): boolean {\r\n        this._device = device;\r\n\r\n        this.initGeometryRendererMaterials();\r\n        this.initOcclusionQuery();\r\n\r\n        return true;\r\n    }\r\n\r\n    public initGeometryRendererMaterials (): void {\r\n        let offset = 0;\r\n        const geometryRendererMaterials = this._geometryRendererMaterials;\r\n        for (let tech = 0; tech < GEOMETRY_RENDERER_TECHNIQUE_COUNT; tech++) {\r\n            geometryRendererMaterials[tech] = new Material();\r\n            geometryRendererMaterials[tech]._uuid = `geometry-renderer-material-${tech}`;\r\n            geometryRendererMaterials[tech].initialize({ effectName: 'internal/builtin-geometry-renderer', technique: tech });\r\n\r\n            const passes = geometryRendererMaterials[tech].passes;\r\n            for (let pass = 0; pass < passes.length; ++pass) {\r\n                this._geometryRendererPasses[offset] = passes[pass];\r\n                this._geometryRendererShaders[offset] = passes[pass].getShaderVariant()!;\r\n                offset++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get geometryRendererPasses (): Pass[] {\r\n        return this._geometryRendererPasses;\r\n    }\r\n\r\n    public get geometryRendererShaders (): Shader[] {\r\n        return this._geometryRendererShaders;\r\n    }\r\n\r\n    public initOcclusionQuery (): void {\r\n        if (!this._occlusionQueryInputAssembler) {\r\n            this._occlusionQueryInputAssembler = this._createOcclusionQueryIA();\r\n        }\r\n\r\n        if (!this._occlusionQueryMaterial) {\r\n            const mat = new Material();\r\n            mat._uuid = 'default-occlusion-query-material';\r\n            mat.initialize({ effectName: 'internal/builtin-occlusion-query' });\r\n            this._occlusionQueryMaterial = mat;\r\n            if (mat.passes.length > 0) {\r\n                this._occlusionQueryShader = mat.passes[0].getShaderVariant();\r\n            }\r\n        }\r\n    }\r\n\r\n    public getOcclusionQueryPass (): Pass | null {\r\n        if (this._occlusionQueryMaterial && this._occlusionQueryMaterial.passes.length > 0) {\r\n            return this._occlusionQueryMaterial.passes[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public updatePipelineSceneData (): void {\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.shadows.destroy();\r\n        this.csmLayers.destroy();\r\n        this.validPunctualLights.length = 0;\r\n        this._occlusionQueryInputAssembler?.destroy();\r\n        this._occlusionQueryInputAssembler = null;\r\n        this._occlusionQueryVertexBuffer?.destroy();\r\n        this._occlusionQueryVertexBuffer = null;\r\n        this._occlusionQueryIndicesBuffer?.destroy();\r\n        this._occlusionQueryIndicesBuffer = null;\r\n        this._standardSkinMeshRenderer = null;\r\n        this._standardSkinModel = null;\r\n        this._skinMaterialModel = null;\r\n    }\r\n\r\n    private _createOcclusionQueryIA (): InputAssembler {\r\n        // create vertex buffer\r\n        const device = this._device;\r\n        const vertices = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1]);\r\n        const vbStride = Float32Array.BYTES_PER_ELEMENT * 3;\r\n        const vbSize = vbStride * 8;\r\n        this._occlusionQueryVertexBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            vbSize,\r\n            vbStride,\r\n        ));\r\n        this._occlusionQueryVertexBuffer.update(vertices);\r\n\r\n        // create index buffer\r\n        const indices = new Uint16Array([0, 2, 1, 1, 2, 3, 4, 5, 6, 5, 7, 6, 1, 3, 7, 1, 7, 5, 0, 4, 6, 0, 6, 2, 0, 1, 5, 0, 5, 4, 2, 6, 7, 2, 7, 3]);\r\n        const ibStride = Uint16Array.BYTES_PER_ELEMENT;\r\n        const ibSize = ibStride * 36;\r\n        this._occlusionQueryIndicesBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            ibSize,\r\n            ibStride,\r\n        ));\r\n        this._occlusionQueryIndicesBuffer.update(indices);\r\n\r\n        const attributes: Attribute[] = [\r\n            new Attribute('a_position', Format.RGB32F),\r\n        ];\r\n\r\n        // create cube input assembler\r\n        const info = new InputAssemblerInfo(attributes, [this._occlusionQueryVertexBuffer], this._occlusionQueryIndicesBuffer);\r\n        const inputAssembler = device.createInputAssembler(info);\r\n\r\n        return inputAssembler;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { cclegacy } from '../core';\r\nimport { Root } from '../root';\r\n\r\nconst enum RenderingDebugViewType {\r\n    NONE,\r\n    SINGLE,\r\n    COMPOSITE_AND_MISC,\r\n}\r\n\r\n/**\r\n * @zh\r\n * 渲染单项调试模式\r\n * @en\r\n * Rendering single debug mode\r\n * @readonly\r\n */\r\nexport const enum DebugViewSingleType {\r\n    NONE,\r\n    VERTEX_COLOR,\r\n    VERTEX_NORMAL,\r\n    VERTEX_TANGENT,\r\n    WORLD_POS,\r\n    VERTEX_MIRROR,\r\n    FACE_SIDE,\r\n    UV0,\r\n    UV1,\r\n    UV_LIGHTMAP,\r\n    PROJ_DEPTH,\r\n    LINEAR_DEPTH,\r\n\r\n    FRAGMENT_NORMAL,\r\n    FRAGMENT_TANGENT,\r\n    FRAGMENT_BINORMAL,\r\n    BASE_COLOR,\r\n    DIFFUSE_COLOR,\r\n    SPECULAR_COLOR,\r\n    TRANSPARENCY,\r\n    METALLIC,\r\n    ROUGHNESS,\r\n    SPECULAR_INTENSITY,\r\n    IOR,\r\n\r\n    DIRECT_DIFFUSE,\r\n    DIRECT_SPECULAR,\r\n    DIRECT_ALL,\r\n    ENV_DIFFUSE,\r\n    ENV_SPECULAR,\r\n    ENV_ALL,\r\n    EMISSIVE,\r\n    LIGHT_MAP,\r\n    SHADOW,\r\n    AO,\r\n\r\n    FRESNEL,\r\n    DIRECT_TRANSMIT_DIFFUSE,\r\n    DIRECT_TRANSMIT_SPECULAR,\r\n    ENV_TRANSMIT_DIFFUSE,\r\n    ENV_TRANSMIT_SPECULAR,\r\n    TRANSMIT_ALL,\r\n    DIRECT_TRT,\r\n    ENV_TRT,\r\n    TRT_ALL,\r\n\r\n    FOG,\r\n}\r\n\r\n/**\r\n * @zh\r\n * 渲染组合调试模式\r\n * @en\r\n * Rendering composite debug mode\r\n * @readonly\r\n */\r\nexport const enum DebugViewCompositeType {\r\n    DIRECT_DIFFUSE = 0,\r\n    DIRECT_SPECULAR,\r\n    ENV_DIFFUSE,\r\n    ENV_SPECULAR,\r\n    EMISSIVE,\r\n    LIGHT_MAP,\r\n    SHADOW,\r\n    AO,\r\n\r\n    NORMAL_MAP,\r\n    FOG,\r\n\r\n    TONE_MAPPING,\r\n    GAMMA_CORRECTION,\r\n\r\n    FRESNEL,\r\n    TRANSMIT_DIFFUSE,\r\n    TRANSMIT_SPECULAR,\r\n    TRT,\r\n    TT,\r\n\r\n    MAX_BIT_COUNT\r\n}\r\n\r\n/**\r\n * @en Rendering debug view control class\r\n * @zh 渲染调试控制类\r\n */\r\nexport class DebugView {\r\n    /**\r\n     * @en Toggle rendering single debug mode.\r\n     * @zh 设置渲染单项调试模式。\r\n     */\r\n    public get singleMode (): DebugViewSingleType {\r\n        return this._singleMode;\r\n    }\r\n    public set singleMode (val: DebugViewSingleType) {\r\n        this._singleMode = val;\r\n        this._updatePipeline();\r\n    }\r\n\r\n    /**\r\n     * @en Toggle normal / pure lighting mode.\r\n     * @zh 切换正常光照和仅光照模式。\r\n     */\r\n    public get lightingWithAlbedo (): boolean {\r\n        return this._lightingWithAlbedo;\r\n    }\r\n    public set lightingWithAlbedo (val: boolean) {\r\n        this._lightingWithAlbedo = val;\r\n        this._updatePipeline();\r\n    }\r\n\r\n    /**\r\n     * @en Toggle CSM layer coloration mode.\r\n     * @zh 切换级联阴影染色调试模式。\r\n     */\r\n    public get csmLayerColoration (): boolean {\r\n        return this._csmLayerColoration;\r\n    }\r\n    public set csmLayerColoration (val: boolean) {\r\n        this._csmLayerColoration = val;\r\n        this._updatePipeline();\r\n    }\r\n\r\n    get debugViewType (): RenderingDebugViewType {\r\n        return this._getType();\r\n    }\r\n\r\n    protected _singleMode = DebugViewSingleType.NONE;\r\n    protected _compositeModeValue = 0;\r\n    protected _lightingWithAlbedo = true;\r\n    protected _csmLayerColoration = false;\r\n\r\n    constructor () {\r\n        this._activate();\r\n    }\r\n\r\n    /**\r\n     * @en Whether enabled with specified rendering composite debug mode.\r\n     * @zh 获取指定的渲染组合调试模式是否开启。\r\n     * @param Specified composite type.\r\n     */\r\n    public isCompositeModeEnabled (val: number): boolean {\r\n        const mode = this._compositeModeValue & (1 << val);\r\n        return mode !== 0;\r\n    }\r\n    /**\r\n     * @en Toggle specified rendering composite debug mode.\r\n     * @zh 开关指定的渲染组合调试模式。\r\n     * @param Specified composite type, enable or disable.\r\n     */\r\n    public enableCompositeMode (val: DebugViewCompositeType, enable: boolean): void {\r\n        this._enableCompositeMode(val, enable);\r\n        this._updatePipeline();\r\n    }\r\n\r\n    /**\r\n     * @en Toggle all rendering composite debug mode.\r\n     * @zh 开关所有的渲染组合调试模式。\r\n     */\r\n    public enableAllCompositeMode (enable: boolean): void {\r\n        this._enableAllCompositeMode(enable);\r\n        this._updatePipeline();\r\n    }\r\n\r\n    /**\r\n     * @en Get rendering debug view on / off state.\r\n     * @zh 查询当前是否开启了渲染调试模式。\r\n     */\r\n    public isEnabled (): boolean {\r\n        return this._getType() !== RenderingDebugViewType.NONE;\r\n    }\r\n\r\n    /**\r\n     * @en Disable all debug view modes, reset to standard rendering mode.\r\n     * @zh 关闭所有的渲染调试模式，恢复到正常渲染。\r\n     */\r\n    public reset (): void {\r\n        this._activate();\r\n        this._updatePipeline();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _activate (): void {\r\n        this._singleMode = DebugViewSingleType.NONE;\r\n        this._enableAllCompositeMode(true);\r\n        this._lightingWithAlbedo = true;\r\n        this._csmLayerColoration = false;\r\n    }\r\n\r\n    protected _updatePipeline (): void {\r\n        const root = cclegacy.director.root as Root;\r\n        const pipeline = root.pipeline;\r\n\r\n        const useDebugView = this._getType();\r\n\r\n        if (pipeline.macros.CC_USE_DEBUG_VIEW !== useDebugView) {\r\n            pipeline.macros.CC_USE_DEBUG_VIEW = useDebugView;\r\n            root.onGlobalPipelineStateChanged();\r\n        }\r\n    }\r\n\r\n    private _enableCompositeMode (val: DebugViewCompositeType, enable: boolean): void {\r\n        if (enable) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            this._compositeModeValue |= (1 << val);\r\n        } else {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            this._compositeModeValue &= (~(1 << val));\r\n        }\r\n    }\r\n\r\n    private _enableAllCompositeMode (enable: boolean): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n        for (let i = 0; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {\r\n            if (enable) {\r\n                this._compositeModeValue |= (1 << i);\r\n            } else {\r\n                this._compositeModeValue &= (~(1 << i));\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getType (): RenderingDebugViewType {\r\n        if (this._singleMode !== DebugViewSingleType.NONE) {\r\n            return RenderingDebugViewType.SINGLE;\r\n        } else if (this._lightingWithAlbedo !== true || this._csmLayerColoration !== false) {\r\n            return RenderingDebugViewType.COMPOSITE_AND_MISC;\r\n        } else {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison\r\n            for (let i = 0; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {\r\n                if (!this.isCompositeModeEnabled(i)) {\r\n                    return RenderingDebugViewType.COMPOSITE_AND_MISC;\r\n                }\r\n            }\r\n        }\r\n        return RenderingDebugViewType.NONE;\r\n    }\r\n}\r\n"],"names":["CameraFOVAxis","CameraProjection","CameraAperture","CameraISO","CameraShutter","CameraType","TrackingType","CameraUsage","target","format","offset","length","stride","out","Format","R32F","byteLength","info","FormatInfos","size","reader","_getDataViewType","componentBytesLength","count","nSeg","Math","floor","isLittleEndian","sys","iSeg","x","iComponent","y","data","writer","exports","SkyBoxFlagValue","FSTOPS","SHUTTERS","ISOS","v_a","v3","v_b","_tempMat1","mat4","ClearFlagBit","STENCIL","VALUE","SKYBOX_FLAG","correctionMatrices","_cameraCount","_colorAttachment","Camera","device","this","isWindowSize","screenScale","postProcess","usePostProcess","pipeline","pipelineSettings","_scene","_node","_name","_enabled","_proj","_aspect","_orthoHeight","_fovAxis","VERTICAL","_fov","toRadian","_nearClip","_farClip","_clearColor","Color","_viewport","rect","_orientedViewport","_curTransform","SurfaceTransform","IDENTITY","_isProjDirty","_matView","_matProj","_matProjInv","_matViewProj","_matViewProjInv","_frustum","geometry","_forward","_position","_priority","_aperture","F16_0","_shutter","D125","_shutterValue","_iso","ISO100","_isoValue","_window","_width","_height","_clearFlag","NONE","_clearDepth","_visibility","CAMERA_DEFAULT_MASK","_exposure","_clearStencil","_geometryRenderer","_windowId","_cameraType","DEFAULT","_trackingType","NO_TRACKING","_usage","GAME","_cameraId","_device","_apertureValue","accurate","ySign","capabilities","clipSpaceSignY","Mat4","ROTATE_90","ROTATE_180","ROTATE_270","_proto","prototype","_updateAspect","oriented","window","width","height","swapchain","surfaceTransform","initialize","undefined","usage","setDefaultUsage","trackingType","cameraType","node","clearFlag","clearDepth","visibility","name","projection","priority","updateExposure","changeTargetWindow","destroy","_this$_geometryRender","detachFromScene","detachCamera","attachToScene","scene","resize","setFixedSize","syncCameraEditor","update","forceUpdate","_this$window","viewProjDirty","xr","globalThis","__globalXR","isWebXR","webXRWindowMap","updateViewport","webXRMatProjs","wndXREye","get","setViewportInOrientedSpace","Rect","forward","matView","matProj","hasChangedFlags","invert","worldMatrix","m02","m06","z","m10","multiply","scale","worldScale","getWorldPosition","orientation","projectionSignY","PERSPECTIVE","set","perspective","clipSpaceMinZ","ortho","val","_this$window2","screenSpaceSignY","initGeometryRenderer","_this$_geometryRender2","GeometryRenderer","cclegacy","internal","activate","win","director","root","mainWindow","attachCamera","screenPointToRay","cx","cy","cw","ch","isProj","preTransform","preTransforms","Vec3","ox","oy","transformMat4","o","fromPoints","transformQuat","d","FORWARD","worldRotation","screenToWorld","screenPos","lerp","worldToScreen","worldPos","worldMatrixToScreen","halfWidth","halfHeight","identity","transform","calculateObliqueMat","viewSpacePlane","viewFar","Vec4","sign","m4","m03","m07","m11","m15","dot","m3","multiplyScalar","subtract","m14","w","getClipSpaceMinz","setExposure","ev100","log2","_createClass","key","vis","flag","depth","stencil","axis","fov","nearClip","farClip","warnID","type","ColorAttachment","RGBA8","_depthStencilAttachment","DepthStencilAttachment","DEPTH_STENCIL","ProbeClearFlag","ProbeType","passInfo","RenderPassInfo","_windowInfo","renderPassInfo","RenderTexture","ccclass","_dec","_class","_TextureBase","_this","call","_inheritsLoose","_initWindow","reset","destroyWindow","clamp","emit","_serialize","_deserialize","serializedData","handle","h","n","base","getGFXTexture","framebuffer","colorTextures","onLoaded","title","externalResLow","externalResHigh","externalFlag","TextureFlagBit","colorAttachments","forEach","colorAttachment","swapchainFormat","barrier","deviceManager","gfxDevice","getGeneralBarrier","GeneralBarrierInfo","AccessFlagBit","FRAGMENT_SHADER_READ_TEXTURE","createWindow","initDefault","uuid","validate","readPixels","buffer","gfxTexture","errorID","needSize","Uint8Array","_getGFXDevice","bufferViews","regions","region0","BufferTextureCopy","texOffset","texExtent","push","copyTextureToBuffers","TextureBase","ALL","LightType","cameraDir","tempVec3","Octree","ReflectionProbe","id","bakedCubeTextures","realtimePlanarTexture","_resolution","SKYBOX","_backgroundColor","_probeType","CUBE","_cubemap","_size","_camera","_probeId","_needRefresh","_needRender","_cameraNode","_boundingBox","_cameraWorldPos","_cameraWorldRotation","quat","_up","_previewSphere","_previewPlane","cameraNode","create","_createCamera","initBakedTextures","i","renderTexture","_createTargetTexture","captureCubemap","_resetCameraParams","renderPlanarReflection","sourceCamera","canvasSize","view","getDesignResolutionSize","reflectionProbeManager","updatePlanarMap","_syncCameraParams","_transformReflectionCamera","switchProbeType","getProbeId","updateProbeId","renderArea","PLANAR","Vec2","resolution","isFinishedRendering","cubemap","enable","disable","updateCameraDir","faceIdx","setRotationFromEuler","camera","updateBoundingBox","hasFrameBuffer","probeType","_this$realtimePlanarT","_rt$window","isRGBE","projectionType","orthoHeight","clearColor","createCamera","tempWindow","fovAxis","clearStencil","aperture","shutter","iso","worldPosition","rt","up","_reflect","normalize","negative","UP","Quat","fromViewUp","viewSpaceProbe","clone","transpose","point","normal","dist","value","_minPos","_maxPos","_depth","octreeInfo","enabled","minPos","maxPos","Skin","_blurRadius","_sssIntensity","skinInfo","blurRadius","sssIntensity","ColorTemperatureToRGB","rgb","kelvin","kSqr","u","v","X","Z","PI","Light","_baked","_color","_colorTemp","_colorTempRGB","_finalColor","_useColorTemperature","_type","UNKNOWN","color","colorTemperature","TransformBit","ROTATION","removeProperty","replaceProperty","customFunction","_typeMap","FormatType","UNORM","_typeMap2","SNORM","UINT","INT","UFLOAT","FLOAT","mapBuffer","callback","DataView","slice","byteOffset","cur","EMPTY_GEOMETRIC_INFO","positions","Float32Array","indices","boundingBox","min","ZERO","max","SceneAsset","vertexBuffers","attributes","primitiveMode","indexBuffer","indirectBuffer","isOwnerOfIndexBuffer","mesh","subMeshIdx","_flatBuffers","_jointMappedBuffers","_jointMappedBufferIndices","_vertexIdChannel","_geometricInfo","_vertexBuffers","_drawInfo","_attributes","_indexBuffer","_indirectBuffer","_primitiveMode","_iaInfo","InputAssemblerInfo","_isOwnerOfIndexBuffer","RenderingSubMesh","invalidateGeometricInfo","genFlatBuffers","idxCount","prim","struct","primitives","indexView","vertexBundelIndices","bundleIdx","vertexBundle","vertexBundles","vbCount","vbStride","vbSize","sharedView","ibView","readIndices","srcOffset","m","subarray","enableVertexIdChannel","streamIndex","attributeIndex","vertexIdBuffer","_allocVertexIdBuffer","Attribute","stream","index","vertexCount","vertexIds","iVertex","createBuffer","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","DEVICE","BYTES_PER_ELEMENT","pAttri","find","element","AttributeName","ATTR_POSITION","RG32F","RGB32F","readAttribute","RGBA32F","dstPtr","srcPtr","RG16F","RGB16F","halfToFloat","RGBA16F","conut","buffers","jointFormat","jointOffset","jointMaps","jointMapIndex","_loop","bundle","j","attr","ATTR_JOINTS","dataView","idxMap","indexOf","_class2","_Asset","_initializer","Scene","Asset","serializable","PipelineEventType","_mat4Trans","_matShadowTrans","_matShadowView","_matShadowProj","_matShadowViewProj","_matShadowViewProjArbitaryPos","_matShadowViewProjArbitaryPosInv","_focus","_projPos","_texelSize","_projSnap","_snap","_maxVec3","_minVec3","_shadowPos","_maxLayerPosz","_maxLayerFarPlane","ShadowLayerVolume","level","_shadowObjects","_shadowCameraFar","_validFrustum","Frustum","_splitFrustum","_lightViewFrustum","_castLightViewBoundingBox","AABB","_level","copyToValidFrustum","validFrustum","copy","calculateValidFrustumOrtho","near","far","createOrtho","calculateSplitFrustum","start","end","split","aspect","createMatrix","dirLight","shadowMapWidth","onlyForCulling","invisibleOcclusionRange","shadowInvisibleOcclusionRange","fromRT","rotation","orthoSizeWidth","orthoSizeHeight","shadowViewArbitaryPos","mergeFrustum","csmOptimizationMode","CSMOptimizationMode","DisableRotationFix","halfExtents","distance","vertices","csmLevel","pipelineSceneData","csmSupported","RemoveDuplicates","center","alignFarPlaneDist","abs","r","halfOrthoSizeWidth","halfOrthoSizeHeight","invActualSize","modX","modY","CSMShadowLayer","_ShadowLayerVolume","_splitCameraNear","_splitCameraFar","_csmAtlas","_calculateAtlas","_proto2","CSMLayers","_castShadowObjects","_layerObjects","CachedArray","_layers","_levelCount","_specialLayer","_shadowDistance","CSMLevel","LEVEL_4","_proto3","sceneData","mainLight","shadowInfo","shadows","levelCount","shadowDistance","shadowEnabled","shadowFixedArea","_updateFixedArea","csmNeedUpdate","_splitFrustumLevels","_calculateCSM","shadowOrthoSize","shadowNear","shadowFar","matShadowView","matShadowProj","matShadowViewProj","nd","fd","ratio","lambda","csmLayerLambda","splitCameraNear","si","preNear","nextFar","splitCameraFar","_getCameraWorldMatrix","csmLayer","LEVEL_1","shadowCameraFar","position","PipelineSceneData","fog","Fog","ambient","Ambient","skybox","Skybox","Shadows","csmLayers","octree","skin","postSettings","PostSettings","lightProbes","LightProbes","validPunctualLights","renderObjects","shadowFrameBufferMap","Map","_geometryRendererMaterials","_geometryRendererPasses","_geometryRendererShaders","_occlusionQueryVertexBuffer","_occlusionQueryIndicesBuffer","_occlusionQueryInputAssembler","_occlusionQueryMaterial","_occlusionQueryShader","_isHDR","_shadingScale","_csmSupported","_standardSkinMeshRenderer","_standardSkinModel","_skinMaterialModel","initGeometryRendererMaterials","initOcclusionQuery","geometryRendererMaterials","tech","Material","_uuid","effectName","technique","passes","pass","getShaderVariant","_createOcclusionQueryIA","mat","getOcclusionQueryPass","updatePipelineSceneData","_this$_occlusionQuery","_this$_occlusionQuery2","_this$_occlusionQuery3","Uint16Array","ibStride","ibSize","INDEX","createInputAssembler","clearGlobalStandardSkinObjectFlag","standardSkinModel","model","_EventTarget","PipelineEventProcessor","eventTargetOn","on","eventTargetOnce","once","EventTarget","DebugViewSingleType","VERTEX_COLOR","VERTEX_NORMAL","VERTEX_TANGENT","WORLD_POS","VERTEX_MIRROR","FACE_SIDE","UV0","UV1","UV_LIGHTMAP","PROJ_DEPTH","LINEAR_DEPTH","FRAGMENT_NORMAL","FRAGMENT_TANGENT","FRAGMENT_BINORMAL","BASE_COLOR","DIFFUSE_COLOR","SPECULAR_COLOR","TRANSPARENCY","METALLIC","ROUGHNESS","SPECULAR_INTENSITY","IOR","DIRECT_DIFFUSE","DIRECT_SPECULAR","DIRECT_ALL","ENV_DIFFUSE","ENV_SPECULAR","ENV_ALL","EMISSIVE","LIGHT_MAP","SHADOW","AO","FRESNEL","DIRECT_TRANSMIT_DIFFUSE","DIRECT_TRANSMIT_SPECULAR","ENV_TRANSMIT_DIFFUSE","ENV_TRANSMIT_SPECULAR","TRANSMIT_ALL","DIRECT_TRT","ENV_TRT","TRT_ALL","FOG","DebugViewCompositeType","NORMAL_MAP","TONE_MAPPING","GAMMA_CORRECTION","TRANSMIT_DIFFUSE","TRANSMIT_SPECULAR","TRT","TT","MAX_BIT_COUNT","DebugView","_singleMode","_compositeModeValue","_lightingWithAlbedo","_csmLayerColoration","_activate","isCompositeModeEnabled","enableCompositeMode","_enableCompositeMode","_updatePipeline","enableAllCompositeMode","_enableAllCompositeMode","isEnabled","_getType","useDebugView","macros","CC_USE_DEBUG_VIEW","onGlobalPipelineStateChanged"],"mappings":"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"}