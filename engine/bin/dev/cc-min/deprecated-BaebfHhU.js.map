{"version":3,"file":"deprecated-BaebfHhU.js","sources":["../../../cocos/render-scene/scene/submodel.ts","../../../cocos/3d/reflection-probe/reflection-probe-enum.ts","../../../cocos/render-scene/scene/model.ts","../../../cocos/render-scene/scene/directional-light.ts","../../../cocos/render-scene/scene/spot-light.ts","../../../cocos/render-scene/scene/sphere-light.ts","../../../cocos/render-scene/scene/ranged-directional-light.ts","../../../cocos/render-scene/scene/point-light.ts","../../../cocos/render-scene/core/render-scene.ts","../../../cocos/render-scene/scene/lod-group.ts","../../../cocos/render-scene/core/render-window.ts","../../../cocos/asset/asset-manager/deprecated.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { RenderingSubMesh } from '../../asset/assets/rendering-sub-mesh';\r\nimport { RenderPriority,\r\n    INST_MAT_WORLD, INST_SH,\r\n    UBOSHEnum } from '../../rendering/define';\r\nimport { BatchingSchemes, IMacroPatch, Pass } from '../core/pass';\r\nimport { DescriptorSet, DescriptorSetInfo, Device, InputAssembler, Texture,\r\n    Sampler, Shader, deviceManager,\r\n    Attribute, Feature, FormatInfos, getTypedArrayConstructor } from '../../gfx';\r\nimport { errorID, Mat4, cclegacy } from '../../core';\r\nimport { Root } from '../../root';\r\n\r\nconst _dsInfo = new DescriptorSetInfo(null!);\r\nconst MAX_PASS_COUNT = 8;\r\n\r\nexport interface IInstancedAttributeBlock {\r\n    buffer: Uint8Array;\r\n    views: TypedArray[];\r\n    attributes: Attribute[];\r\n}\r\n\r\n/**\r\n * @en A sub part of the model, it describes how to render a specific sub mesh.\r\n * It contains geometry information in [[RenderingSubMesh]] and all sort of rendering configuration like shaders, macro patches, passes etc.\r\n * @zh 组成模型对象的子模型，它用来描述如何渲染模型的一个子网格。\r\n * 它包含 [[RenderingSubMesh]] 代表的几何网格信息和所有渲染需要的数据，比如着色器程序，着色器宏定义，渲染 pass，等。\r\n */\r\nexport class SubModel {\r\n    protected _device: Device | null = null;\r\n    protected _passes: Pass[] | null = null;\r\n    protected _shaders: Shader[] | null = null;\r\n    protected _subMesh: RenderingSubMesh | null = null;\r\n    protected _patches: IMacroPatch[] | null = null;\r\n    protected _priority: RenderPriority = RenderPriority.DEFAULT;\r\n    protected _inputAssembler: InputAssembler | null = null;\r\n    protected _descriptorSet: DescriptorSet | null = null;\r\n    protected _worldBoundDescriptorSet: DescriptorSet | null = null;\r\n    protected _instancedAttributeBlock: IInstancedAttributeBlock = { buffer: null!, views: [], attributes: [] };\r\n    protected _instancedWorldMatrixIndex = -1;\r\n    protected _instancedSHIndex = -1;\r\n    protected _useReflectionProbeType = 0;\r\n\r\n    constructor () {}\r\n\r\n    /**\r\n     * @en\r\n     * sub model's passes\r\n     * @zh\r\n     * 子模型的 passes\r\n     * @param passes @en The passes @zh 设置的 passes\r\n     */\r\n    /**\r\n     * @en Render passes for the sub-model\r\n     * @zh 子模型的渲染 pass\r\n     */\r\n    set passes (passes) {\r\n        const passLengh = passes.length;\r\n        if (passLengh > MAX_PASS_COUNT) {\r\n            errorID(12004, MAX_PASS_COUNT);\r\n            return;\r\n        }\r\n        this._passes = passes;\r\n        this._flushPassInfo();\r\n\r\n        // DS layout might change too\r\n        if (this._descriptorSet) {\r\n            this._descriptorSet.destroy();\r\n            _dsInfo.layout = passes[0].localSetLayout;\r\n            this._descriptorSet = this._device!.createDescriptorSet(_dsInfo);\r\n        }\r\n    }\r\n\r\n    get passes (): Pass[] {\r\n        return this._passes!;\r\n    }\r\n\r\n    /**\r\n     * @en Shaders for the sub-model, each shader corresponds to one of the [[passes]]\r\n     * @zh 子模型的着色器程序列表，每个着色器程序对应其中一个渲染 [[passes]]\r\n     */\r\n    get shaders (): Shader[] {\r\n        return this._shaders!;\r\n    }\r\n\r\n    /**\r\n     * @en The rendering sub mesh for the sub-model, each sub-model can only have one sub mesh.\r\n     * @zh 用于渲染的子网格对象，每个子模型只能包含一个子网格。\r\n     */\r\n    set subMesh (subMesh) {\r\n        this._inputAssembler!.destroy();\r\n        this._inputAssembler = this._device!.createInputAssembler(subMesh.iaInfo);\r\n        this._subMesh = subMesh;\r\n    }\r\n\r\n    get subMesh (): RenderingSubMesh {\r\n        return this._subMesh!;\r\n    }\r\n\r\n    /**\r\n     * @en The rendering priority of the sub-model\r\n     * @zh 子模型的渲染优先级\r\n     */\r\n    set priority (val) {\r\n        this._priority = val;\r\n    }\r\n\r\n    get priority (): RenderPriority {\r\n        return this._priority;\r\n    }\r\n\r\n    /**\r\n     * @en The low level input assembler which contains geometry data\r\n     * @zh 底层渲染用的输入汇集器，包含几何信息\r\n     */\r\n    get inputAssembler (): InputAssembler {\r\n        return this._inputAssembler!;\r\n    }\r\n\r\n    /**\r\n     * @en The descriptor set used for sub-model rendering\r\n     * @zh 底层渲染子模型用的描述符集组\r\n     */\r\n    get descriptorSet (): DescriptorSet {\r\n        return this._descriptorSet!;\r\n    }\r\n\r\n    /**\r\n     * @en The descriptor set for world bound\r\n     * @zh 用于存储世界包围盒的描述符集组\r\n     */\r\n    get worldBoundDescriptorSet (): DescriptorSet | null {\r\n        return this._worldBoundDescriptorSet;\r\n    }\r\n\r\n    /**\r\n     * @en The macro patches for the shaders\r\n     * @zh 着色器程序所用的宏定义组合\r\n     */\r\n    get patches (): Readonly<IMacroPatch[] | null> {\r\n        return this._patches;\r\n    }\r\n\r\n    /**\r\n     * @en The instance attribute block, access by sub model\r\n     * @zh 硬件实例化属性，通过子模型访问\r\n     */\r\n    get instancedAttributeBlock (): IInstancedAttributeBlock {\r\n        return this._instancedAttributeBlock;\r\n    }\r\n\r\n    /**\r\n     * @en Get or set instance matrix id, access by sub model\r\n     * @zh 获取或者设置硬件实例化中的矩阵索引，通过子模型访问\r\n     */\r\n    set instancedWorldMatrixIndex (val: number) {\r\n        this._instancedWorldMatrixIndex = val;\r\n    }\r\n    get instancedWorldMatrixIndex (): number {\r\n        return this._instancedWorldMatrixIndex;\r\n    }\r\n\r\n    /**\r\n     * @en Get or set instance SH id, access by sub model\r\n     * @zh 获取或者设置硬件实例化中的球谐索引，通过子模型访问\r\n     */\r\n    set instancedSHIndex (val: number) {\r\n        this._instancedSHIndex = val;\r\n    }\r\n    get instancedSHIndex (): number {\r\n        return this._instancedSHIndex;\r\n    }\r\n\r\n    /**\r\n     * @en Gets or sets the type of reflection probe, Used to process instance\r\n     * @zh 获取或设置使用反射探针的类型，用于处理instance\r\n     */\r\n    set useReflectionProbeType (val) {\r\n        this._useReflectionProbeType = val;\r\n    }\r\n    get useReflectionProbeType (): number {\r\n        return this._useReflectionProbeType;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * init sub model\r\n     * @zh\r\n     * 子模型初始化\r\n     * @param subMesh @en The sub mesh @zh 子网格资源\r\n     * @param passes @en The passes @zh 渲染的 passes\r\n     * @param patches @en The shader's macro @zh 着色器的宏定义\r\n     */\r\n    public initialize (subMesh: RenderingSubMesh, passes: Pass[], patches: IMacroPatch[] | null = null): void {\r\n        const root = cclegacy.director.root as Root;\r\n        this._device = deviceManager.gfxDevice;\r\n        _dsInfo.layout = passes[0].localSetLayout;\r\n\r\n        this._inputAssembler = this._device.createInputAssembler(subMesh.iaInfo);\r\n        this._descriptorSet = this._device.createDescriptorSet(_dsInfo);\r\n\r\n        const pipeline = (cclegacy.director.root as Root).pipeline;\r\n        const occlusionPass = pipeline.pipelineSceneData.getOcclusionQueryPass();\r\n        if (occlusionPass) {\r\n            const occlusionDSInfo = new DescriptorSetInfo(null!);\r\n            occlusionDSInfo.layout = occlusionPass.localSetLayout;\r\n            this._worldBoundDescriptorSet = this._device.createDescriptorSet(occlusionDSInfo);\r\n        }\r\n\r\n        this._subMesh = subMesh;\r\n        this._patches = patches ? patches.sort() : null;\r\n        this._passes = passes;\r\n\r\n        this._flushPassInfo();\r\n\r\n        this.priority = RenderPriority.DEFAULT;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * destroy sub model\r\n     * @zh\r\n     * 销毁子模型\r\n     */\r\n    public destroy (): void {\r\n        this._descriptorSet!.destroy();\r\n        this._descriptorSet = null;\r\n\r\n        this._inputAssembler!.destroy();\r\n        this._inputAssembler = null;\r\n\r\n        if (this._worldBoundDescriptorSet) {\r\n            this._worldBoundDescriptorSet.destroy();\r\n        }\r\n        this._worldBoundDescriptorSet = null;\r\n\r\n        this.priority = RenderPriority.DEFAULT;\r\n\r\n        this._patches = null;\r\n        this._subMesh = null;\r\n\r\n        this._passes = null;\r\n        this._shaders = null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * update sub model\r\n     * @zh\r\n     * 更新子模型\r\n     */\r\n    public update (): void {\r\n        for (let i = 0; i < this._passes!.length; ++i) {\r\n            const pass = this._passes![i];\r\n            pass.update();\r\n        }\r\n        this._descriptorSet!.update();\r\n        if (this._worldBoundDescriptorSet) this._worldBoundDescriptorSet.update();\r\n    }\r\n\r\n    private _updatePasses (): void {\r\n        const passes = this._passes;\r\n        if (!passes) { return; }\r\n\r\n        passes.forEach((pass) => {\r\n            pass.beginChangeStatesSilently();\r\n            pass.tryCompile(); // force update shaders\r\n            pass.endChangeStatesSilently();\r\n        });\r\n\r\n        this._flushPassInfo();\r\n    }\r\n\r\n    /**\r\n     * @en Pipeline changed callback\r\n     * @zh 管线更新回调\r\n     */\r\n    public onPipelineStateChanged (): void {\r\n        this._updatePasses();\r\n    }\r\n\r\n    /**\r\n     * @en Shader macro changed callback\r\n     * @zh Shader 宏更新回调\r\n     */\r\n    public onMacroPatchesStateChanged (patches: IMacroPatch[] | null): void {\r\n        if (!patches && !this._patches) {\r\n            return;\r\n        } else if (patches) {\r\n            patches = patches.sort();\r\n            // Sorting on shorter patches outperforms hashing, with negative optimization on longer global patches.\r\n            if (this._patches && patches.length === this._patches.length) {\r\n                const patchesStateUnchanged = JSON.stringify(patches) === JSON.stringify(this._patches);\r\n                if (patchesStateUnchanged) return;\r\n            }\r\n        }\r\n        this._patches = patches;\r\n\r\n        this._updatePasses();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * geometry changed callback\r\n     * @zh\r\n     * 几何数据改变后的回调\r\n     */\r\n    public onGeometryChanged (): void {\r\n        if (!this._subMesh) {\r\n            return;\r\n        }\r\n\r\n        // update draw info\r\n        const drawInfo = this._subMesh.drawInfo;\r\n\r\n        // to invoke getter/setter function for wasm object\r\n        if (this._inputAssembler && drawInfo) {\r\n            const dirtyDrawInfo = this._inputAssembler.drawInfo;\r\n            Object.keys(drawInfo).forEach((key): void => {\r\n                dirtyDrawInfo[key] = drawInfo[key];\r\n            });\r\n            this._inputAssembler.drawInfo = dirtyDrawInfo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * get instanced attribute index\r\n     * @zh\r\n     * 获取硬件实例化相关索引\r\n     */\r\n    /**\r\n     * @internal\r\n     */\r\n    public getInstancedAttributeIndex (name: string): number {\r\n        const { attributes } = this.instancedAttributeBlock;\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            if (attributes[i].name === name) { return i; }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * update instancing related data, invoked by model\r\n     * @zh\r\n     * 更新硬件实例化相关数据，一般由model调用\r\n     */\r\n    /**\r\n     * @internal\r\n     */\r\n    public updateInstancedWorldMatrix (mat: Mat4, idx: number): void {\r\n        const attrs = this.instancedAttributeBlock.views;\r\n        const v1 = attrs[idx];\r\n        const v2 = attrs[idx + 1];\r\n        const v3 = attrs[idx + 2];\r\n        v1[0] = mat.m00; v1[1] = mat.m01; v1[2] = mat.m02; v1[3] = mat.m12;\r\n        v2[0] = mat.m04; v2[1] = mat.m05; v2[2] = mat.m06; v2[3] = mat.m13;\r\n        v3[0] = mat.m08; v3[1] = mat.m09; v3[2] = mat.m10; v3[3] = mat.m14;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * update instancing SH data, invoked by model\r\n     * @zh\r\n     * 更新硬件实例化球谐数据，一般由model调用\r\n     */\r\n    /**\r\n     * @internal\r\n     */\r\n    public updateInstancedSH (data: Float32Array, idx: number): void {\r\n        const attrs = this.instancedAttributeBlock.views;\r\n        const count = (UBOSHEnum.SH_QUADRATIC_R_OFFSET - UBOSHEnum.SH_LINEAR_CONST_R_OFFSET) / 4;\r\n        let offset = 0;\r\n\r\n        for (let i = idx; i < idx + count; i++) {\r\n            for (let k = 0; k < 4; k++) {\r\n                attrs[i][k] = data[offset++];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * update instancing related data, invoked by model\r\n     * @zh\r\n     * 更新硬件实例化相关数据，一般由model调用\r\n     */\r\n    /**\r\n     * @internal\r\n     */\r\n    public UpdateInstancedAttributes (attributes: Attribute[]): void {\r\n        // initialize subModelWorldMatrixIndex\r\n        this.instancedWorldMatrixIndex = -1;\r\n        this.instancedSHIndex = -1;\r\n\r\n        const pass = this.passes[0];\r\n        if (!pass.device.hasFeature(Feature.INSTANCED_ARRAYS)) { return; }\r\n        // free old data\r\n\r\n        let size = 0;\r\n        for (let j = 0; j < attributes.length; j++) {\r\n            const attribute = attributes[j];\r\n            if (!attribute.isInstanced) { continue; }\r\n            size += FormatInfos[attribute.format].size;\r\n        }\r\n\r\n        const attrs = this.instancedAttributeBlock;\r\n        attrs.buffer = new Uint8Array(size);\r\n        attrs.views.length = attrs.attributes.length = 0;\r\n        let offset = 0;\r\n        for (let j = 0; j < attributes.length; j++) {\r\n            const attribute = attributes[j];\r\n            if (!attribute.isInstanced) { continue; }\r\n            const attr = new Attribute();\r\n            attr.format = attribute.format;\r\n            attr.name = attribute.name;\r\n            attr.isNormalized = attribute.isNormalized;\r\n            attr.location = attribute.location;\r\n            attrs.attributes.push(attr);\r\n\r\n            const info = FormatInfos[attribute.format];\r\n\r\n            const typeViewArray = new (getTypedArrayConstructor(info))(attrs.buffer.buffer, offset, info.count);\r\n            attrs.views.push(typeViewArray);\r\n            offset += info.size;\r\n        }\r\n        if (pass.batchingScheme === BatchingSchemes.INSTANCING) { pass.getInstancedBuffer().destroy(); } // instancing IA changed\r\n        this.instancedWorldMatrixIndex = this.getInstancedAttributeIndex(INST_MAT_WORLD);\r\n        this.instancedSHIndex = this.getInstancedAttributeIndex(INST_SH);\r\n    }\r\n\r\n    protected _flushPassInfo (): void {\r\n        const passes = this._passes;\r\n        if (!passes) { return; }\r\n        if (!this._shaders) { this._shaders = []; }\r\n\r\n        this._shaders.length = passes.length;\r\n        for (let i = 0, len = passes.length; i < len; i++) {\r\n            this._shaders[i] = passes[i].getShaderVariant(this.patches)!;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @en Use Reflection probe\r\n * @zh 使用反射探针。\r\n */\r\nexport enum ReflectionProbeType {\r\n    /**\r\n     * @en Use the default skybox.\r\n     * @zh 使用默认天空盒。\r\n     */\r\n    NONE = 0,\r\n    /**\r\n     * @en Cubemap generate by probe.\r\n     * @zh Probe烘焙的cubemap。\r\n     */\r\n    BAKED_CUBEMAP = 1,\r\n    /**\r\n     * @en Realtime planar reflection.\r\n     * @zh 实时平面反射。\r\n     */\r\n    PLANAR_REFLECTION = 2,\r\n    /**\r\n     * @en Mixing between reflection probe.\r\n     * @zh 反射探针之间进行混合。\r\n     */\r\n    BLEND_PROBES = 3,\r\n    /**\r\n     * @en Mixing between reflection probe and skybox.\r\n     * @zh 反射探针之间混合或反射探针和天空盒之间混合。\r\n     */\r\n    BLEND_PROBES_AND_SKYBOX = 4,\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.\r\nimport { EDITOR } from 'internal:constants';\r\nimport { builtinResMgr } from '../../asset/asset-manager/builtin-res-mgr';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { RenderingSubMesh } from '../../asset/assets/rendering-sub-mesh';\r\nimport { Node } from '../../scene-graph';\r\nimport { Layers } from '../../scene-graph/layers';\r\nimport { RenderScene } from '../core/render-scene';\r\nimport { Texture2D } from '../../asset/assets/texture-2d';\r\nimport { SubModel } from './submodel';\r\nimport { IMacroPatch } from '../core/pass';\r\nimport { Mat4, Vec3, Vec4, geometry, cclegacy, EPSILON, v3, v4 } from '../../core';\r\nimport { Attribute, DescriptorSet, Device, Buffer, BufferInfo,\r\n    BufferUsageBit, MemoryUsageBit, Filter, Address, SamplerInfo, deviceManager, Texture } from '../../gfx';\r\nimport {\r\n    UBOLocal,\r\n    UBOLocalEnum, UBOSH, UBOSHEnum, UBOWorldBound, UNIFORM_LIGHTMAP_TEXTURE_BINDING, UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING,\r\n    UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING,\r\n    UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING,\r\n    ENABLE_PROBE_BLEND,\r\n} from '../../rendering/define';\r\nimport { Root } from '../../root';\r\nimport { TextureCube } from '../../asset/assets';\r\nimport { ShadowType } from './shadows';\r\nimport { ProbeType, ReflectionProbe } from './reflection-probe';\r\nimport { ReflectionProbeType } from '../../3d/reflection-probe/reflection-probe-enum';\r\nimport type { SH } from '../../gi/light-probe/sh';\r\nimport type { PipelineSceneData } from '../../rendering';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\n\r\nconst m4_1 = new Mat4();\r\n\r\nconst shadowMapPatches: IMacroPatch[] = [\r\n    { name: 'CC_RECEIVE_SHADOW', value: true },\r\n];\r\n\r\nconst staticLightMapPatches: IMacroPatch[] = [\r\n    { name: 'CC_USE_LIGHTMAP', value: 1 },\r\n];\r\n\r\nconst stationaryLightMapPatches: IMacroPatch[] = [\r\n    { name: 'CC_USE_LIGHTMAP', value: 2 },\r\n];\r\n\r\nconst highpLightMapPatches: IMacroPatch[] = [\r\n    { name: 'CC_LIGHT_MAP_VERSION', value: 2 },\r\n];\r\n\r\nconst lightProbePatches: IMacroPatch[] = [\r\n    { name: 'CC_USE_LIGHT_PROBE', value: true },\r\n];\r\nconst CC_USE_REFLECTION_PROBE = 'CC_USE_REFLECTION_PROBE';\r\nconst CC_DISABLE_DIRECTIONAL_LIGHT = 'CC_DISABLE_DIRECTIONAL_LIGHT';\r\nexport enum ModelType {\r\n    DEFAULT,\r\n    SKINNING,\r\n    BAKED_SKINNING,\r\n    BATCH_2D,\r\n    PARTICLE_BATCH,\r\n    LINE,\r\n}\r\n\r\nconst lightmapSamplerHash = new SamplerInfo(\r\n    Filter.LINEAR,\r\n    Filter.LINEAR,\r\n    Filter.NONE,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n\r\nconst lightmapSamplerWithMipHash = new SamplerInfo(\r\n    Filter.LINEAR,\r\n    Filter.LINEAR,\r\n    Filter.LINEAR,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n\r\n/**\r\n * @en A representation of a model instance\r\n * The base model class, which is the core component of [[MeshRenderer]],\r\n * adds its own Model to the rendered scene for rendering submissions when [[MeshRenderer]] is enabled.\r\n * This type of object represents a rendering instance in a scene, and it can contain multiple sub models,\r\n * each of which corresponds to a material. These sub models share the same location and form a complete object.\r\n * Each sub model references a sub mesh resource, which provides vertex and index buffers for rendering.\r\n * @zh 代表一个模型实例\r\n * 基础模型类，它是 [[MeshRenderer]] 的核心组成部分，在 [[MeshRenderer]] 启用时会将自己的 Model 添加到渲染场景中用于提交渲染。\r\n * 此类型对象代表一个场景中的渲染实例，它可以包含多个子模型，每个子模型对应一个材质。这些子模型共享同样的位置，组成一个完整的物体。\r\n * 每个子模型引用一个子网格资源，后者提供渲染所用的顶点与索引缓冲。\r\n */\r\nexport class Model {\r\n    /**\r\n     * @en Sub models of the current model\r\n     * @zh 获取所有子模型\r\n     */\r\n    get subModels (): SubModel[] {\r\n        return this._subModels;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the model is initialized\r\n     * @zh 是否初始化\r\n     */\r\n    get inited (): boolean {\r\n        return this._inited;\r\n    }\r\n\r\n    /**\r\n     * @en The axis-aligned bounding box of the model in the world space\r\n     * @zh 获取世界空间包围盒\r\n     */\r\n    get worldBounds (): geometry.AABB | null {\r\n        return this._worldBounds;\r\n    }\r\n\r\n    /**\r\n     * @en The axis-aligned bounding box of the model in the model space\r\n     * @zh 获取模型空间包围盒\r\n     */\r\n    get modelBounds (): geometry.AABB | null {\r\n        return this._modelBounds;\r\n    }\r\n\r\n    /**\r\n     * @en The ubo buffer of the model\r\n     * @zh 获取模型的 ubo 缓冲\r\n     */\r\n    get localBuffer (): Buffer | null {\r\n        return this._localBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en The SH ubo buffer of the model\r\n     * @zh 获取模型的球谐 ubo 缓冲\r\n     */\r\n    get localSHBuffer (): Buffer | null {\r\n        return this._localSHBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en The world bound ubo buffer\r\n     * @zh 获取世界包围盒 ubo 缓冲\r\n     */\r\n    get worldBoundBuffer (): Buffer | null {\r\n        return this._worldBoundBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en The time stamp of last update\r\n     * @zh 获取上次更新时间戳\r\n     */\r\n    get updateStamp (): number {\r\n        return this._updateStamp;\r\n    }\r\n\r\n    /**\r\n     * @en Use LightProbe or not\r\n     * @zh 光照探针开关\r\n     */\r\n    get useLightProbe (): boolean {\r\n        return this._useLightProbe;\r\n    }\r\n\r\n    set useLightProbe (val) {\r\n        this._useLightProbe = val;\r\n        this.onMacroPatchesStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en located tetrahedron index\r\n     * @zh 模型所处的四面体索引\r\n     */\r\n    get tetrahedronIndex (): number {\r\n        return this._tetrahedronIndex;\r\n    }\r\n\r\n    set tetrahedronIndex (index: number) {\r\n        this._tetrahedronIndex = index;\r\n    }\r\n\r\n    /**\r\n     * @en Model level shadow bias\r\n     * @zh 阴影偏移值\r\n     */\r\n    get shadowBias (): number {\r\n        return this._shadowBias;\r\n    }\r\n\r\n    set shadowBias (val) {\r\n        this._shadowBias = val;\r\n    }\r\n\r\n    /**\r\n     * @en Model level shadow normal bias\r\n     * @zh 阴影法线偏移值\r\n     */\r\n    get shadowNormalBias (): number {\r\n        return this._shadowNormalBias;\r\n    }\r\n\r\n    set shadowNormalBias (val) {\r\n        this._shadowNormalBias = val;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the model should receive shadow\r\n     * @zh 是否接收阴影\r\n     */\r\n    get receiveShadow (): boolean {\r\n        return this._receiveShadow;\r\n    }\r\n\r\n    set receiveShadow (val) {\r\n        this._receiveShadow = val;\r\n        this.onMacroPatchesStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en Whether the model should cast shadow\r\n     * @zh 是否投射阴影\r\n     */\r\n    get castShadow (): boolean {\r\n        return this._castShadow;\r\n    }\r\n\r\n    set castShadow (val) {\r\n        this._castShadow = val;\r\n    }\r\n\r\n    /**\r\n     * @en Gets or sets receive direction Light.\r\n     * @zh 获取或者设置接收平行光光照。\r\n     */\r\n    get receiveDirLight (): boolean {\r\n        return this._receiveDirLight;\r\n    }\r\n    set receiveDirLight (val) {\r\n        this._receiveDirLight = val;\r\n        this.onMacroPatchesStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en The node to which the model belongs\r\n     * @zh 模型所在的节点\r\n     */\r\n    get node (): Node {\r\n        return this._node;\r\n    }\r\n\r\n    set node (n: Node) {\r\n        this._node = n;\r\n    }\r\n\r\n    /**\r\n     * @en Model's transform\r\n     * @zh 模型的变换\r\n     */\r\n    get transform (): Node {\r\n        return this._transform;\r\n    }\r\n\r\n    set transform (n: Node) {\r\n        this._transform = n;\r\n    }\r\n\r\n    /**\r\n     * @en Model's visibility tag\r\n     * Model's visibility flags, it's different from [[Node.layer]],\r\n     * but it will also be compared with [[Camera.visibility]] during culling process.\r\n     * @zh 模型的可见性标志\r\n     * 模型的可见性标志与 [[Node.layer]] 不同，它会在剔除阶段与 [[Camera.visibility]] 进行比较\r\n     */\r\n    get visFlags (): number {\r\n        return this._visFlags;\r\n    }\r\n\r\n    set visFlags (val: number) {\r\n        this._visFlags = val;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the model is enabled in the render scene so that it will be rendered\r\n     * @zh 模型是否在渲染场景中启用并被渲染\r\n     */\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    set enabled (val: boolean) {\r\n        this._enabled = val;\r\n    }\r\n\r\n    /**\r\n     * @en Rendering priority in the transparent queue of model.\r\n     * @zh Model 在透明队列中的渲染排序优先级\r\n     */\r\n    get priority (): number {\r\n        return this._priority;\r\n    }\r\n\r\n    set priority (val: number) {\r\n        this._priority = val;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the model can be render by the reflection probe\r\n     * @zh 模型是否能被反射探针渲染\r\n     */\r\n    get bakeToReflectionProbe (): boolean {\r\n        return this._bakeToReflectionProbe;\r\n    }\r\n\r\n    set bakeToReflectionProbe (val) {\r\n        this._bakeToReflectionProbe = val;\r\n    }\r\n\r\n    /**\r\n     * @en Reflection probe type\r\n     * @zh 反射探针类型。\r\n     */\r\n    get reflectionProbeType (): ReflectionProbeType {\r\n        return this._reflectionProbeType;\r\n    }\r\n\r\n    set reflectionProbeType (val) {\r\n        this._reflectionProbeType = val;\r\n        const subModels = this._subModels;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            subModels[i].useReflectionProbeType = val;\r\n        }\r\n        this.onMacroPatchesStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en sets or gets reflection probe id\r\n     * @zh 设置或获取反射探针id。\r\n     */\r\n    get reflectionProbeId (): number {\r\n        return this._reflectionProbeId;\r\n    }\r\n\r\n    set reflectionProbeId (val) {\r\n        this._reflectionProbeId = val;\r\n    }\r\n\r\n    /**\r\n     * @en Sets or gets the reflection probe id for blend.\r\n     * @zh 设置或获取用于混合的反射探针id。\r\n     */\r\n    get reflectionProbeBlendId (): number {\r\n        return this._reflectionProbeBlendId;\r\n    }\r\n\r\n    set reflectionProbeBlendId (val) {\r\n        this._reflectionProbeBlendId = val;\r\n    }\r\n\r\n    /**\r\n     * @en Sets or gets the reflection probe blend weight.\r\n     * @zh 设置或获取反射探针混合权重。\r\n     */\r\n    get reflectionProbeBlendWeight (): number {\r\n        return this._reflectionProbeBlendWeight;\r\n    }\r\n\r\n    set reflectionProbeBlendWeight (val) {\r\n        this._reflectionProbeBlendWeight = val;\r\n    }\r\n\r\n    /**\r\n     * @en The type of the model\r\n     * @zh 模型类型\r\n     */\r\n    public type = ModelType.DEFAULT;\r\n\r\n    /**\r\n     * @en The render scene to which the model belongs\r\n     * @zh 模型所在的场景\r\n     */\r\n    public scene: RenderScene | null = null;\r\n\r\n    /**\r\n     * @en Whether dynamic batching is enabled for model\r\n     * @zh 是否动态合批\r\n     */\r\n    public isDynamicBatching = false;\r\n\r\n    /**\r\n     * @en The world axis-aligned bounding box\r\n     * @zh 世界空间包围盒\r\n     */\r\n    protected _worldBounds: geometry.AABB | null = null;\r\n\r\n    /**\r\n     * @en The model axis-aligned bounding box\r\n     * @zh 模型空间包围盒\r\n     */\r\n    protected _modelBounds: geometry.AABB | null = null;\r\n\r\n    /**\r\n     * @en Sub models\r\n     * @zh 子模型\r\n     */\r\n    protected _subModels: SubModel[] = [];\r\n\r\n    /**\r\n     * @en The node to which the model belongs\r\n     * @zh 模型所在的节点\r\n     */\r\n    protected _node: Node = null!;\r\n\r\n    /**\r\n     * @en Model's transform\r\n     * @zh 子模型的变换\r\n     */\r\n    protected _transform: Node = null!;\r\n\r\n    /**\r\n     * @en Current gfx device\r\n     * @zh 当前 GFX 设备\r\n     */\r\n    protected declare _device: Device;\r\n\r\n    /**\r\n     * @en Whether the model is initialized\r\n     * @zh 是否初始化过\r\n     */\r\n    protected _inited = false;\r\n\r\n    /**\r\n     * @en Descriptor set count\r\n     * @zh 描述符集合个数\r\n     */\r\n    protected _descriptorSetCount = 1;\r\n\r\n    /**\r\n     * @en Time stamp for last update\r\n     * @zh 更新时间戳\r\n     */\r\n    protected _updateStamp = -1;\r\n\r\n    /**\r\n     * @en Local ubo data dirty flag\r\n     * @zh 本地 ubo 数据是否修改过\r\n     */\r\n    protected _localDataUpdated = true;\r\n\r\n    /**\r\n     * @en Local ubo data\r\n     * @zh 本地 ubo 数据\r\n     */\r\n    protected _localData = new Float32Array(UBOLocalEnum.COUNT);\r\n\r\n    /**\r\n     * @en Local ubo buffer\r\n     * @zh 本地 ubo 缓冲\r\n     */\r\n    protected _localBuffer: Buffer | null = null;\r\n\r\n    /**\r\n     * @en Local SH ubo data\r\n     * @zh 本地球谐 ubo 数据\r\n     */\r\n    protected _localSHData: Float32Array | null = null;\r\n\r\n    /**\r\n     * @en Local SH ubo buffer\r\n     * @zh 本地球谐 ubo 缓冲\r\n     */\r\n    protected _localSHBuffer: Buffer | null = null;\r\n\r\n    private _lightmap: Texture2D | null = null;\r\n    private _lightmapUVParam: Vec4 = v4();\r\n\r\n    /**\r\n     * @en located tetrahedron index\r\n     * @zh 所处的四面体索引\r\n     */\r\n    private _tetrahedronIndex = -1;\r\n    private _lastWorldBoundCenter = v3(Infinity, Infinity, Infinity);\r\n    private _useLightProbe = false;\r\n\r\n    /**\r\n     * @en World AABB buffer\r\n     * @zh 世界空间包围盒缓冲\r\n     */\r\n    protected _worldBoundBuffer: Buffer | null = null;\r\n\r\n    /**\r\n     * @en Whether the model should receive shadow\r\n     * @zh 是否接收阴影\r\n     */\r\n    protected _receiveShadow = false;\r\n\r\n    /**\r\n     * @en Whether the model should cast shadow\r\n     * @zh 是否投射阴影\r\n     */\r\n    protected _castShadow = false;\r\n\r\n    /**\r\n     * @en Is received direction Light.\r\n     * @zh 是否接收平行光光照。\r\n     */\r\n    protected _receiveDirLight = true;\r\n\r\n    /**\r\n     * @en Shadow bias\r\n     * @zh 阴影偏移\r\n     */\r\n    protected _shadowBias = 0;\r\n\r\n    /**\r\n     * @en Shadow normal bias\r\n     * @zh 阴影法线偏移\r\n     */\r\n    protected _shadowNormalBias = 0;\r\n\r\n    /**\r\n     * @en Reflect probe Id\r\n     * @zh 使用第几个反射探针\r\n     */\r\n    protected _reflectionProbeId = -1;\r\n\r\n    /**\r\n     * @en Use which probe to blend\r\n     * @zh 使用第几个反射探针进行混合\r\n     */\r\n    protected _reflectionProbeBlendId = -1;\r\n\r\n    /**\r\n     * @en Reflection probe blend weight\r\n     * @zh 反射探针混合权重\r\n     */\r\n    protected _reflectionProbeBlendWeight = 0;\r\n\r\n    /**\r\n     * @en Whether the model is enabled in the render scene so that it will be rendered\r\n     * @zh 模型是否在渲染场景中启用并被渲染\r\n     */\r\n    protected _enabled = true;\r\n\r\n    /**\r\n     * @en The visibility flags\r\n     * @zh 可见性标志位\r\n     */\r\n    protected _visFlags = Layers.Enum.NONE;\r\n\r\n    protected _priority = 0;\r\n\r\n    /**\r\n     * @en Whether the model can be render by the reflection probe\r\n     * @zh 模型是否能被反射探针渲染\r\n     */\r\n    protected _bakeToReflectionProbe = true;\r\n\r\n    /**\r\n     * @en Reflection probe type.\r\n     * @zh 反射探针类型。\r\n     */\r\n    protected _reflectionProbeType = ReflectionProbeType.NONE;\r\n\r\n    /**\r\n     * @internal\r\n     * @en native object\r\n     * @zh 原生对象\r\n     */\r\n\r\n    /**\r\n     * @internal\r\n     * @en return native object\r\n     * @zh 返回原生对象\r\n     */\r\n    /**\r\n     * @en Constructor to create an empty model\r\n     * @zh 创建一个空模型\r\n     */\r\n    constructor () {\r\n        this._device = deviceManager.gfxDevice;\r\n    }\r\n\r\n    /**\r\n     * @en Initialize the model\r\n     * @zh 初始化模型\r\n     */\r\n    public initialize (): void {\r\n        if (this._inited) {\r\n            return;\r\n        }\r\n        this._receiveShadow = true;\r\n        this.castShadow = false;\r\n        this.enabled = true;\r\n        this.visFlags = Layers.Enum.NONE;\r\n        this._inited = true;\r\n        this._bakeToReflectionProbe = true;\r\n        this._reflectionProbeType = ReflectionProbeType.NONE;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the model\r\n     * @zh 销毁模型\r\n     */\r\n    public destroy (): void {\r\n        const subModels = this._subModels;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            this._subModels[i].destroy();\r\n        }\r\n        if (this._localBuffer) {\r\n            this._localBuffer.destroy();\r\n            this._localBuffer = null;\r\n        }\r\n        if (this._localSHBuffer) {\r\n            this._localSHBuffer.destroy();\r\n            this._localSHBuffer = null;\r\n        }\r\n        if (this._worldBoundBuffer) {\r\n            this._worldBoundBuffer.destroy();\r\n            this._worldBoundBuffer = null;\r\n        }\r\n        this._worldBounds = null;\r\n        this._modelBounds = null;\r\n        this._subModels.length = 0;\r\n        this._inited = false;\r\n        this._localDataUpdated = true;\r\n        this._transform = null!;\r\n        this._node = null!;\r\n        this.isDynamicBatching = false;\r\n    }\r\n\r\n    /**\r\n     * @en Attach the model to a [[renderer.RenderScene]]\r\n     * @zh 添加模型到渲染场景 [[renderer.RenderScene]] 中\r\n     * @param scene destination scene\r\n     */\r\n    public attachToScene (scene: RenderScene): void {\r\n        this.scene = scene;\r\n        this._localDataUpdated = true;\r\n    }\r\n\r\n    /**\r\n     * @en Detach the model from its render scene\r\n     * @zh 移除场景中的模型\r\n     */\r\n    public detachFromScene (): void {\r\n        this.scene = null;\r\n    }\r\n\r\n    /**\r\n     * @en Update the model's transform\r\n     * @zh 更新模型的变换\r\n     * @param stamp time stamp\r\n     */\r\n    public updateTransform (stamp: number): void {\r\n        const node = this.transform;\r\n        if (node.hasChangedFlags || node.isTransformDirty()) {\r\n            node.updateWorldTransform();\r\n            this._localDataUpdated = true;\r\n            const worldBounds = this._worldBounds;\r\n            if (this._modelBounds && worldBounds) {\r\n                this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the model's world AABB\r\n     * @zh 更新模型的世界空间包围盒\r\n     */\r\n    public updateWorldBound (): void {\r\n        const node = this.transform;\r\n        if (node !== null) {\r\n            node.updateWorldTransform();\r\n            this._localDataUpdated = true;\r\n            const worldBounds = this._worldBounds;\r\n            if (this._modelBounds && worldBounds) {\r\n                this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the model's ubo\r\n     * @zh 更新模型的 ubo\r\n     * @param stamp time stamp\r\n     */\r\n    public updateUBOs (stamp: number): void {\r\n        const subModels = this._subModels;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            subModels[i].update();\r\n        }\r\n        this._updateStamp = stamp;\r\n\r\n        this.updateSHUBOs();\r\n        const shadows = this.node.scene.globals.shadows;\r\n        const forceUpdateUBO = shadows.enabled && shadows.type === ShadowType.Planar;\r\n\r\n        if (!this._localDataUpdated) { return; }\r\n        this._localDataUpdated = false;\r\n\r\n        const worldMatrix = this.transform._mat;\r\n        let hasNonInstancingPass = false;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            const subModel = subModels[i];\r\n            const idx = subModel.instancedWorldMatrixIndex;\r\n            if (idx >= 0) {\r\n                subModel.updateInstancedWorldMatrix(worldMatrix, idx);\r\n            } else {\r\n                hasNonInstancingPass = true;\r\n            }\r\n        }\r\n        if ((hasNonInstancingPass || forceUpdateUBO) && this._localBuffer) {\r\n            Mat4.toArray(this._localData, worldMatrix, UBOLocalEnum.MAT_WORLD_OFFSET);\r\n\r\n            Mat4.invert(m4_1, worldMatrix);\r\n            Mat4.transpose(m4_1, m4_1);\r\n\r\n            Mat4.toArray(this._localData, m4_1, UBOLocalEnum.MAT_WORLD_IT_OFFSET);\r\n            this._localBuffer.update(this._localData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     * @en Invalidate local data\r\n     * @zh 使本地数据失效\r\n     */\r\n    public invalidateLocalData (): void {\r\n        this._localDataUpdated = true;\r\n    }\r\n\r\n    public showTetrahedron (): boolean {\r\n        return this.isLightProbeAvailable();\r\n    }\r\n\r\n    private isLightProbeAvailable (): boolean {\r\n        if (!this._useLightProbe) {\r\n            return false;\r\n        }\r\n\r\n        const lightProbes = getPipelineSceneData().lightProbes;\r\n        if (!lightProbes || lightProbes.empty()) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._worldBounds) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private updateSHBuffer (): void {\r\n        if (!this._localSHData) {\r\n            return;\r\n        }\r\n\r\n        const subModels = this._subModels;\r\n        let hasNonInstancingPass = false;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            const subModel = subModels[i];\r\n            const idx = subModel.instancedSHIndex;\r\n            if (idx >= 0) {\r\n                subModel.updateInstancedSH(this._localSHData, idx);\r\n            } else {\r\n                hasNonInstancingPass = true;\r\n            }\r\n        }\r\n\r\n        if (hasNonInstancingPass && this._localSHBuffer) {\r\n            this._localSHBuffer.update(this._localSHData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clear the model's SH ubo\r\n     * @zh 清除模型的球谐 ubo\r\n     */\r\n    public clearSHUBOs (): void {\r\n        if (!this._localSHData) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < UBOSHEnum.COUNT; i++) {\r\n            this._localSHData[i] = 0.0;\r\n        }\r\n\r\n        this.updateSHBuffer();\r\n    }\r\n\r\n    /**\r\n     * @en Update the model's SH ubo\r\n     * @zh 更新模型的球谐 ubo\r\n     */\r\n    public updateSHUBOs (): void {\r\n        if (!this.isLightProbeAvailable()) {\r\n            return;\r\n        }\r\n\r\n        const center = this._worldBounds!.center;\r\n        if (!EDITOR && center.equals(this._lastWorldBoundCenter, EPSILON)) {\r\n            return;\r\n        }\r\n\r\n        const coefficients: Vec3[] = [];\r\n        const weights = new Vec4();\r\n        const lightProbes = (cclegacy.director.root.pipeline.pipelineSceneData as PipelineSceneData).lightProbes;\r\n\r\n        this._lastWorldBoundCenter.set(center);\r\n        this._tetrahedronIndex = lightProbes.data!.getInterpolationWeights(center, this._tetrahedronIndex, weights);\r\n        const result = lightProbes.data!.getInterpolationSHCoefficients(this._tetrahedronIndex, weights, coefficients);\r\n        if (!result) {\r\n            return;\r\n        }\r\n\r\n        if (!this._localSHData) {\r\n            return;\r\n        }\r\n\r\n        const SHCls: typeof SH = cclegacy.internal.SH;\r\n        SHCls.reduceRinging(coefficients, lightProbes.reduceRinging);\r\n        SHCls.updateUBOData(this._localSHData, UBOSHEnum.SH_LINEAR_CONST_R_OFFSET, coefficients);\r\n        this.updateSHBuffer();\r\n    }\r\n\r\n    /**\r\n     * @en Create the model's AABB\r\n     * @zh 创建模型的包围盒\r\n     * @param minPos min position of the AABB\r\n     * @param maxPos max position of the AABB\r\n     */\r\n    public createBoundingShape (minPos?: Vec3, maxPos?: Vec3): void {\r\n        if (!minPos || !maxPos) { return; }\r\n        if (!this._modelBounds) { this._modelBounds = geometry.AABB.create(); }\r\n        if (!this._worldBounds) { this._worldBounds = geometry.AABB.create(); }\r\n        geometry.AABB.fromPoints(this._modelBounds, minPos, maxPos);\r\n        this._worldBounds.copy(this._modelBounds);\r\n    }\r\n\r\n    private _createSubModel (): SubModel {\r\n        return new SubModel();\r\n    }\r\n\r\n    /**\r\n     * @en Initialize a sub model with the sub mesh data and the material.\r\n     * @zh 用子网格数据和材质初始化一个子模型。\r\n     * @param idx sub model's index\r\n     * @param subMeshData sub mesh\r\n     * @param mat sub material\r\n     */\r\n    public initSubModel (idx: number, subMeshData: RenderingSubMesh, mat: Material): void {\r\n        this.initialize();\r\n\r\n        if (this._subModels[idx] == null) {\r\n            this._subModels[idx] = this._createSubModel();\r\n        } else {\r\n            this._subModels[idx].destroy();\r\n        }\r\n        this._subModels[idx].initialize(subMeshData, mat.passes, this.getMacroPatches(idx));\r\n\r\n        this._updateAttributesAndBinding(idx);\r\n    }\r\n\r\n    /**\r\n     * @en Set material for a given sub model\r\n     * @zh 为指定的子模型设置材质\r\n     * @param idx sub model's index\r\n     * @param subMesh sub mesh\r\n     */\r\n    public setSubModelMesh (idx: number, subMesh: RenderingSubMesh): void {\r\n        if (!this._subModels[idx]) { return; }\r\n        this._subModels[idx].subMesh = subMesh;\r\n    }\r\n\r\n    /**\r\n     * @en Set a sub material\r\n     * @zh 设置一个子材质\r\n     * @param idx sub model's index\r\n     * @param mat sub material\r\n     */\r\n    public setSubModelMaterial (idx: number, mat: Material): void {\r\n        if (!this._subModels[idx]) { return; }\r\n        this._subModels[idx].passes = mat.passes;\r\n        this._updateAttributesAndBinding(idx);\r\n    }\r\n\r\n    /**\r\n     * @en Pipeline changed callback\r\n     * @zh 管线更新回调\r\n     */\r\n    public onGlobalPipelineStateChanged (): void {\r\n        const subModels = this._subModels;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            subModels[i].onPipelineStateChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Shader macro changed callback\r\n     * @zh Shader 宏更新回调\r\n     */\r\n    public onMacroPatchesStateChanged (): void {\r\n        const subModels = this._subModels;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            subModels[i].onMacroPatchesStateChanged(this.getMacroPatches(i));\r\n        }\r\n    }\r\n\r\n    public onGeometryChanged (): void {\r\n        const subModels = this._subModels;\r\n        for (let i = 0; i < subModels.length; i++) {\r\n            subModels[i].onGeometryChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * If the model has lighting map\r\n     * initialize lighting map info before model initializing\r\n     * because the lighting map will influence the shader\r\n     */\r\n    public initLightingmap (texture: Texture2D | null, uvParam: Vec4): void {\r\n        this._lightmap = texture;\r\n        this._lightmapUVParam = uvParam;\r\n    }\r\n\r\n    /**\r\n     * @en Update the light map info\r\n     * @zh 更新光照贴图信息\r\n     * @param texture light map\r\n     * @param uvParam uv coordinate\r\n     */\r\n    public updateLightingmap (texture: Texture2D | null, uvParam: Vec4): void {\r\n        Vec4.toArray(this._localData, uvParam, UBOLocalEnum.LIGHTINGMAP_UVPARAM);\r\n        this._localDataUpdated = true;\r\n        this._lightmap = texture;\r\n        this._lightmapUVParam = uvParam;\r\n\r\n        this.onMacroPatchesStateChanged();\r\n\r\n        if (!texture) {\r\n            texture = builtinResMgr.get<Texture2D>('empty-texture');\r\n        }\r\n\r\n        const gfxTexture = texture.getGFXTexture();\r\n        if (gfxTexture) {\r\n            const sampler = this._device.getSampler(texture.mipmaps.length > 1 ? lightmapSamplerWithMipHash : lightmapSamplerHash);\r\n            const subModels = this._subModels;\r\n            for (let i = 0; i < subModels.length; i++) {\r\n                const { descriptorSet } = subModels[i];\r\n                descriptorSet.bindTexture(UNIFORM_LIGHTMAP_TEXTURE_BINDING, gfxTexture);\r\n                descriptorSet.bindSampler(UNIFORM_LIGHTMAP_TEXTURE_BINDING, sampler);\r\n                descriptorSet.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the cube map of the reflection probe\r\n     * @zh 更新反射探针的立方体贴图\r\n     * @param texture probe cubemap\r\n     */\r\n    public updateReflectionProbeCubemap (texture: TextureCube | null): void {\r\n        this._localDataUpdated = true;\r\n        this.onMacroPatchesStateChanged();\r\n\r\n        if (!texture) {\r\n            texture = builtinResMgr.get<TextureCube>('default-cube-texture');\r\n        }\r\n\r\n        const gfxTexture = texture.getGFXTexture();\r\n        if (gfxTexture) {\r\n            const reflectionSampler = this._device.getSampler(texture.getSamplerInfo());\r\n            const subModels = this._subModels;\r\n            for (let i = 0; i < subModels.length; i++) {\r\n                const { descriptorSet } = subModels[i];\r\n                if (descriptorSet) {\r\n                    descriptorSet.bindSampler(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, reflectionSampler);\r\n                    descriptorSet.bindTexture(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, gfxTexture);\r\n                    descriptorSet.update();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the cube map of the reflection probe for blend\r\n     * @zh 更新用于blend的反射探针立方体贴图\r\n     * @param texture probe cubemap\r\n     */\r\n    public updateReflectionProbeBlendCubemap (texture: TextureCube | null): void {\r\n        if (!ENABLE_PROBE_BLEND) { // Disable probe blend for WebGPU\r\n            return;\r\n        }\r\n        this._localDataUpdated = true;\r\n        this.onMacroPatchesStateChanged();\r\n\r\n        if (!texture) {\r\n            texture = builtinResMgr.get<TextureCube>('default-cube-texture');\r\n        }\r\n\r\n        const gfxTexture = texture.getGFXTexture();\r\n        if (gfxTexture) {\r\n            const reflectionSampler = this._device.getSampler(texture.getSamplerInfo());\r\n            const subModels = this._subModels;\r\n            for (let i = 0; i < subModels.length; i++) {\r\n                const { descriptorSet } = subModels[i];\r\n                if (descriptorSet) {\r\n                    descriptorSet.bindSampler(UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING, reflectionSampler);\r\n                    descriptorSet.bindTexture(UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING, gfxTexture);\r\n                    descriptorSet.update();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the planar relflection map of the reflection probe\r\n     * @zh 更新反射探针的平面反射贴图\r\n     * @param texture planar relflection map\r\n     */\r\n    public updateReflectionProbePlanarMap (texture: Texture | null): void {\r\n        this._localDataUpdated = true;\r\n        this.onMacroPatchesStateChanged();\r\n\r\n        const sampler = this._device.getSampler(new SamplerInfo(\r\n            Filter.LINEAR,\r\n            Filter.LINEAR,\r\n            Filter.NONE,\r\n            Address.CLAMP,\r\n            Address.CLAMP,\r\n            Address.CLAMP,\r\n        ));\r\n        if (!texture) {\r\n            texture = builtinResMgr.get<Texture2D>('empty-texture').getGFXTexture()!;\r\n        }\r\n        if (texture) {\r\n            const subModels = this._subModels;\r\n            for (let i = 0; i < subModels.length; i++) {\r\n                const { descriptorSet } = subModels[i];\r\n                if (descriptorSet) {\r\n                    descriptorSet.bindTexture(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, texture);\r\n                    descriptorSet.bindSampler(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, sampler);\r\n                    descriptorSet.update();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the data map of the reflection probe\r\n     * @zh 更新反射探针的数据贴图\r\n     * @param texture data map\r\n     */\r\n    public updateReflectionProbeDataMap (texture: Texture2D | null): void {\r\n        this._localDataUpdated = true;\r\n        this.onMacroPatchesStateChanged();\r\n\r\n        if (!texture) {\r\n            texture = builtinResMgr.get<Texture2D>('empty-texture');\r\n        }\r\n        const gfxTexture = texture.getGFXTexture();\r\n        if (gfxTexture) {\r\n            const subModels = this._subModels;\r\n            for (let i = 0; i < subModels.length; i++) {\r\n                const { descriptorSet } = subModels[i];\r\n                if (descriptorSet) {\r\n                    descriptorSet.bindTexture(UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING, gfxTexture);\r\n                    descriptorSet.bindSampler(UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING, texture.getGFXSampler());\r\n                    descriptorSet.update();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update the shadow bias\r\n     * @zh 更新阴影偏移\r\n     */\r\n    public updateLocalShadowBias (): void {\r\n        const sv = this._localData;\r\n        sv[UBOLocalEnum.LOCAL_SHADOW_BIAS + 0] = this._shadowBias;\r\n        sv[UBOLocalEnum.LOCAL_SHADOW_BIAS + 1] = this._shadowNormalBias;\r\n        this._localDataUpdated = true;\r\n    }\r\n\r\n    /**\r\n     * @en Update the id of reflection probe\r\n     * @zh 更新物体使用哪个反射探针\r\n     */\r\n    public updateReflectionProbeId  (): void {\r\n        const sv = this._localData;\r\n        sv[UBOLocalEnum.LOCAL_SHADOW_BIAS + 2] = this._reflectionProbeId;\r\n        sv[UBOLocalEnum.LOCAL_SHADOW_BIAS + 3] = this._reflectionProbeBlendId;\r\n        let probe: ReflectionProbe | null = null;\r\n        let blendProbe: ReflectionProbe | null = null;\r\n        if (cclegacy.internal.reflectionProbeManager) {\r\n            probe = cclegacy.internal.reflectionProbeManager.getProbeById(this._reflectionProbeId);\r\n            blendProbe = cclegacy.internal.reflectionProbeManager.getProbeById(this._reflectionProbeBlendId);\r\n        }\r\n        if (probe) {\r\n            if (probe.probeType === ProbeType.PLANAR) {\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1] = probe.node.up.x;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1 + 1] = probe.node.up.y;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1 + 2] = probe.node.up.z;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1 + 3] = 1.0;\r\n\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2] = 1.0;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2 + 1] = 0.0;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2 + 2] = 0.0;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2 + 3] = 1.0;\r\n            } else {\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1] = probe.node.worldPosition.x;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1 + 1] = probe.node.worldPosition.y;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1 + 2] = probe.node.worldPosition.z;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA1 + 3] = 0.0;\r\n\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2] = probe.size.x;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2 + 1] = probe.size.y;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2 + 2] = probe.size.z;\r\n                const mipAndUseRGBE = probe.isRGBE() ? 1000 : 0;\r\n                sv[UBOLocalEnum.REFLECTION_PROBE_DATA2 + 3] = probe.cubemap ? probe.cubemap.mipmapLevel + mipAndUseRGBE : 1.0 + mipAndUseRGBE;\r\n            }\r\n            // eslint-disable-next-line max-len\r\n            if (this._reflectionProbeType === ReflectionProbeType.BLEND_PROBES\r\n                || this._reflectionProbeType === ReflectionProbeType.BLEND_PROBES_AND_SKYBOX) {\r\n                if (blendProbe) {\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA1] = blendProbe.node.worldPosition.x;\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA1 + 1] = blendProbe.node.worldPosition.y;\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA1 + 2] = blendProbe.node.worldPosition.z;\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA1 + 3] = this.reflectionProbeBlendWeight;\r\n\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA2] = blendProbe.size.x;\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA2 + 1] = blendProbe.size.y;\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA2 + 2] = blendProbe.size.z;\r\n                    const mipAndUseRGBE = blendProbe.isRGBE() ? 1000 : 0;\r\n                    // eslint-disable-next-line max-len\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA2 + 3] = blendProbe.cubemap ? blendProbe.cubemap.mipmapLevel + mipAndUseRGBE : 1.0 + mipAndUseRGBE;\r\n                } else if (this._reflectionProbeType === ReflectionProbeType.BLEND_PROBES_AND_SKYBOX) {\r\n                    //blend with skybox\r\n                    sv[UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA1 + 3] = this.reflectionProbeBlendWeight;\r\n                }\r\n            }\r\n        }\r\n        this._localDataUpdated = true;\r\n    }\r\n\r\n    /**\r\n     * @en Return shader's macro patches\r\n     * @zh 获取 shader 宏\r\n     * @param subModelIndex sub model's index\r\n     */\r\n    public getMacroPatches (subModelIndex: number): IMacroPatch[] | null {\r\n        let patches = this.receiveShadow ? shadowMapPatches : null;\r\n        if (this._lightmap != null && this.node && this.node.scene) {\r\n            const sceneGlobals = this.node.scene.globals;\r\n            if (!sceneGlobals.disableLightmap) {\r\n                const mainLightIsStationary = sceneGlobals.bakedWithStationaryMainLight;\r\n                const lightmapPathes = mainLightIsStationary ? stationaryLightMapPatches : staticLightMapPatches;\r\n\r\n                patches = patches ? patches.concat(lightmapPathes) : lightmapPathes;\r\n                // use highp lightmap\r\n                if (sceneGlobals.bakedWithHighpLightmap) {\r\n                    patches = patches.concat(highpLightMapPatches);\r\n                }\r\n            }\r\n        }\r\n        if (this._useLightProbe) {\r\n            patches = patches ? patches.concat(lightProbePatches) : lightProbePatches;\r\n        }\r\n        const reflectionProbePatches: IMacroPatch[] = [\r\n            { name: CC_USE_REFLECTION_PROBE, value: this._reflectionProbeType },\r\n        ];\r\n        patches = patches ? patches.concat(reflectionProbePatches) : reflectionProbePatches;\r\n        const receiveDirLightPatches: IMacroPatch[] = [\r\n            { name: CC_DISABLE_DIRECTIONAL_LIGHT, value: !this._receiveDirLight },\r\n        ];\r\n        patches = patches ? patches.concat(receiveDirLightPatches) : receiveDirLightPatches;\r\n\r\n        return patches;\r\n    }\r\n\r\n    protected _updateAttributesAndBinding (subModelIndex: number): void {\r\n        const subModel = this._subModels[subModelIndex];\r\n        if (!subModel) { return; }\r\n\r\n        this._initLocalDescriptors(subModelIndex);\r\n        this._updateLocalDescriptors(subModelIndex, subModel.descriptorSet);\r\n\r\n        this._initLocalSHDescriptors(subModelIndex);\r\n        this._updateLocalSHDescriptors(subModelIndex, subModel.descriptorSet);\r\n\r\n        this._initWorldBoundDescriptors(subModelIndex);\r\n\r\n        if (subModel.worldBoundDescriptorSet) {\r\n            this._updateWorldBoundDescriptors(subModelIndex, subModel.worldBoundDescriptorSet);\r\n        }\r\n\r\n        const attributes: Attribute[] = [];\r\n        const attributeSet = new Set<string>();\r\n        subModel.passes.forEach((pass) => {\r\n            const shader = pass.getShaderVariant(subModel.patches)!;\r\n            shader.attributes.forEach((attr) => {\r\n                if (!attributeSet.has(attr.name)) {\r\n                    attributes.push(attr);\r\n                    attributeSet.add(attr.name);\r\n                }\r\n            });\r\n        });\r\n        this._updateInstancedAttributes(attributes, subModel);\r\n    }\r\n\r\n    // sub-classes can override the following functions if needed\r\n\r\n    // for now no subModel level instancing attributes\r\n    protected _updateInstancedAttributes (attributes: Attribute[], subModel: SubModel): void {\r\n        subModel.UpdateInstancedAttributes(attributes);\r\n        this._localDataUpdated = true;\r\n    }\r\n\r\n    protected _initLocalDescriptors (subModelIndex: number): void {\r\n        if (!this._localBuffer) {\r\n            this._localBuffer = this._device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.DEVICE,\r\n                UBOLocalEnum.SIZE,\r\n                UBOLocalEnum.SIZE,\r\n            ));\r\n        }\r\n    }\r\n\r\n    protected _initLocalSHDescriptors (subModelIndex: number): void {\r\n        if (!EDITOR && !this._useLightProbe) {\r\n            return;\r\n        }\r\n\r\n        if (!this._localSHData) {\r\n            this._localSHData = new Float32Array(UBOSHEnum.COUNT);\r\n        }\r\n\r\n        if (!this._localSHBuffer) {\r\n            this._localSHBuffer = this._device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.DEVICE,\r\n                UBOSHEnum.SIZE,\r\n                UBOSHEnum.SIZE,\r\n            ));\r\n        }\r\n    }\r\n\r\n    protected _initWorldBoundDescriptors (subModelIndex: number): void {\r\n        if (!this._worldBoundBuffer) {\r\n            this._worldBoundBuffer = this._device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.DEVICE,\r\n                UBOWorldBound.SIZE,\r\n                UBOWorldBound.SIZE,\r\n            ));\r\n        }\r\n    }\r\n\r\n    protected _updateLocalDescriptors (subModelIndex: number, descriptorSet: DescriptorSet): void {\r\n        if (this._localBuffer) descriptorSet.bindBuffer(UBOLocalEnum.BINDING, this._localBuffer);\r\n    }\r\n\r\n    protected _updateLocalSHDescriptors (subModelIndex: number, descriptorSet: DescriptorSet): void {\r\n        if (this._localSHBuffer) descriptorSet.bindBuffer(UBOSHEnum.BINDING, this._localSHBuffer);\r\n    }\r\n\r\n    protected _updateWorldBoundDescriptors (subModelIndex: number, descriptorSet: DescriptorSet): void {\r\n        if (this._worldBoundBuffer) descriptorSet.bindBuffer(UBOWorldBound.BINDING, this._worldBoundBuffer);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, cclegacy } from '../../core';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\nimport { Ambient } from './ambient';\r\nimport { Light, LightType } from './light';\r\nimport { CSMLevel, CSMOptimizationMode, PCFType, Shadows } from './shadows';\r\n\r\nconst _forward = new Vec3(0, 0, -1);\r\nconst _v3 = new Vec3();\r\n\r\n/**\r\n * @en The directional light representation in the render scene, it acts as the main light source in a scene.\r\n * As main light, only one directional light can be created in a scene, it can generate realtime shadows with configuration.\r\n * @zh 渲染场景中的方向光抽象，这是场景中的主光源。作为主光源，每个场景只能有一个方向光，它也包含阴影配置，用来生成实时阴影。\r\n */\r\nexport class DirectionalLight extends Light {\r\n    protected _dir: Vec3 = new Vec3(1.0, -1.0, -1.0);\r\n    protected _illuminanceHDR: number = Ambient.SUN_ILLUM;\r\n    protected _illuminanceLDR = 1.0;\r\n\r\n    // Public properties of shadow\r\n    protected _shadowEnabled = false;\r\n\r\n    // Shadow map properties\r\n    protected _shadowPcf = PCFType.HARD;\r\n    protected _shadowBias = 0.00001;\r\n    protected _shadowNormalBias = 0.0;\r\n    protected _shadowSaturation = 1.0;\r\n    protected _shadowDistance = 50;\r\n    protected _shadowInvisibleOcclusionRange = 200;\r\n    protected _csmLevel = CSMLevel.LEVEL_4;\r\n    protected _csmNeedUpdate = false;\r\n    protected _csmLayerLambda = 0.75;\r\n    protected _csmOptimizationMode = CSMOptimizationMode.DisableRotationFix;\r\n    protected _csmLayersTransition = false;\r\n    protected _csmTransitionRange = 0.05;\r\n\r\n    // fixed area properties\r\n    protected _shadowFixedArea = false;\r\n    protected _shadowNear = 0.1;\r\n    protected _shadowFar = 10.0;\r\n    protected _shadowOrthoSize = 5;\r\n\r\n    /**\r\n     * @en The direction vector of the light\r\n     * @zh 光源的方向\r\n     */\r\n    set direction (dir: Vec3) {\r\n        Vec3.normalize(this._dir, dir);\r\n    }\r\n\r\n    get direction (): Vec3 {\r\n        return this._dir;\r\n    }\r\n\r\n    /**\r\n     * @en The illuminance of the light in Lux(lx)\r\n     * @zh 光源的辐照度，单位是 Lux(lx)\r\n     */\r\n    get illuminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._illuminanceHDR;\r\n        } else {\r\n            return this._illuminanceLDR;\r\n        }\r\n    }\r\n    set illuminance (value: number) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this.illuminanceHDR = value;\r\n        } else {\r\n            this.illuminanceLDR = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The illuminance of the light in HDR mode\r\n     * @zh HDR 模式下光源的辐照度\r\n     */\r\n    get illuminanceHDR (): number {\r\n        return this._illuminanceHDR;\r\n    }\r\n    set illuminanceHDR (value: number) {\r\n        this._illuminanceHDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The illuminance of the light in LDR mode\r\n     * @zh LDR 模式下光源的辐照度\r\n     */\r\n    get illuminanceLDR (): number {\r\n        return this._illuminanceLDR;\r\n    }\r\n    set illuminanceLDR (value: number) {\r\n        this._illuminanceLDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en Whether activate shadow\r\n     * @zh 是否启用阴影？\r\n     */\r\n    get shadowEnabled (): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    set shadowEnabled (val) {\r\n        this._shadowEnabled = val;\r\n        this.activate();\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow pcf.\r\n     * @zh 获取或者设置阴影pcf等级。\r\n     */\r\n    get shadowPcf (): number {\r\n        return this._shadowPcf;\r\n    }\r\n    set shadowPcf (val) {\r\n        this._shadowPcf = val;\r\n        this.activate();\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow map sampler offset\r\n     * @zh 获取或者设置阴影纹理偏移值\r\n     */\r\n    get shadowBias (): number {\r\n        return this._shadowBias;\r\n    }\r\n    set shadowBias (val) {\r\n        this._shadowBias = val;\r\n    }\r\n\r\n    /**\r\n     * @en get or set normal bias.\r\n     * @zh 设置或者获取法线偏移。\r\n     */\r\n    get shadowNormalBias (): number {\r\n        return this._shadowNormalBias;\r\n    }\r\n    set shadowNormalBias (val: number) {\r\n        this._shadowNormalBias = val;\r\n    }\r\n\r\n    /**\r\n     * @en Shadow color saturation\r\n     * @zh 阴影颜色饱和度\r\n     */\r\n    get shadowSaturation (): number {\r\n        return this._shadowSaturation;\r\n    }\r\n    set shadowSaturation (val: number) {\r\n        this._shadowSaturation = val;\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow camera far\r\n     * @zh 获取或者设置潜在阴影产生的范围\r\n     */\r\n    get shadowDistance (): number {\r\n        return this._shadowDistance;\r\n    }\r\n    set shadowDistance (val) {\r\n        this._shadowDistance = Math.min(val, Shadows.MAX_FAR);\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow camera far\r\n     * @zh 获取或者设置潜在阴影产生的范围\r\n     */\r\n    get shadowInvisibleOcclusionRange (): number {\r\n        return this._shadowInvisibleOcclusionRange;\r\n    }\r\n    set shadowInvisibleOcclusionRange (val) {\r\n        this._shadowInvisibleOcclusionRange = Math.min(val, Shadows.MAX_FAR);\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow CSM level\r\n     * @zh 获取或者设置级联阴影层数\r\n     */\r\n    get csmLevel (): number {\r\n        return this._csmLevel;\r\n    }\r\n    set csmLevel (val) {\r\n        this._csmLevel = val;\r\n        this.activate();\r\n    }\r\n\r\n    /**\r\n     * @en is CSM need update\r\n     * @zh 获取或者设置级联阴影是否需要更新\r\n     */\r\n    get csmNeedUpdate (): boolean {\r\n        return this._csmNeedUpdate;\r\n    }\r\n    set csmNeedUpdate (val) {\r\n        this._csmNeedUpdate = val;\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow CSM level ratio\r\n     * @zh 获取或者设置级联阴影层数系数\r\n     */\r\n    get csmLayerLambda (): number {\r\n        return this._csmLayerLambda;\r\n    }\r\n    set csmLayerLambda (val) {\r\n        this._csmLayerLambda = val;\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow CSM performance optimization mode\r\n     * @zh 获取或者设置级联阴影性能优化模式\r\n     */\r\n    get csmOptimizationMode (): number {\r\n        return this._csmOptimizationMode;\r\n    }\r\n    set csmOptimizationMode (val) {\r\n        this._csmOptimizationMode = val;\r\n    }\r\n\r\n    /**\r\n     * @en get or set fixed area shadow\r\n     * @zh 是否是固定区域阴影\r\n     */\r\n    get shadowFixedArea (): boolean {\r\n        return this._shadowFixedArea;\r\n    }\r\n    set shadowFixedArea (val) {\r\n        this._shadowFixedArea = val;\r\n        this.activate();\r\n    }\r\n\r\n    /**\r\n     * @en The near clip plane of the shadow camera\r\n     * @zh 获取或者设置阴影相机近裁剪面\r\n     */\r\n    get shadowNear (): number {\r\n        return this._shadowNear;\r\n    }\r\n    set shadowNear (val) {\r\n        this._shadowNear = val;\r\n    }\r\n\r\n    /**\r\n     * @en The far clip plane of the shadow camera\r\n     * @zh 获取或者设置阴影相机远裁剪面\r\n     */\r\n    get shadowFar (): number {\r\n        return this._shadowFar;\r\n    }\r\n    set shadowFar (val) {\r\n        this._shadowFar = Math.min(val, Shadows.MAX_FAR);\r\n    }\r\n\r\n    /**\r\n     * @en get or set shadow camera orthoSize\r\n     * @zh 获取或者设置阴影相机正交大小\r\n     */\r\n    get shadowOrthoSize (): number {\r\n        return this._shadowOrthoSize;\r\n    }\r\n    set shadowOrthoSize (val) {\r\n        this._shadowOrthoSize = val;\r\n    }\r\n\r\n    /**\r\n     * @en Enabled csm layers transition\r\n     * @zh 是否启用级联阴影层级过渡？\r\n     */\r\n    get csmLayersTransition (): boolean {\r\n        return this._csmLayersTransition;\r\n    }\r\n    set csmLayersTransition (val) {\r\n        this._csmLayersTransition = val;\r\n        this.activate();\r\n    }\r\n\r\n    /**\r\n     * @en get or set csm layers transition range\r\n     * @zh 获取或者设置级联阴影层级过渡范围？\r\n     */\r\n    get csmTransitionRange (): number {\r\n        return this._csmTransitionRange;\r\n    }\r\n    set csmTransitionRange (val) {\r\n        this._csmTransitionRange = val;\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._type = LightType.DIRECTIONAL;\r\n    }\r\n\r\n    public initialize (): void {\r\n        super.initialize();\r\n\r\n        this.illuminance = Ambient.SUN_ILLUM;\r\n        this.direction = new Vec3(1.0, -1.0, -1.0);\r\n    }\r\n\r\n    /**\r\n     * @en Update the direction\r\n     * @zh 更新方向\r\n     */\r\n    public update (): void {\r\n        if (this._node && this._node.hasChangedFlags) {\r\n            this.direction = Vec3.transformQuat(_v3, _forward, this._node.worldRotation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public activate (): void {\r\n        const root = cclegacy.director.root;\r\n        const pipeline = root.pipeline;\r\n        if (this._shadowEnabled) {\r\n            if (this._shadowFixedArea || !pipeline.pipelineSceneData.csmSupported) {\r\n                pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 1;\r\n            } else if (this.csmLevel > 1 && pipeline.pipelineSceneData.csmSupported) {\r\n                pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 2;\r\n                pipeline.macros.CC_CASCADED_LAYERS_TRANSITION = this._csmLayersTransition;\r\n            } else {\r\n                pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 1;\r\n            }\r\n            pipeline.macros.CC_DIR_SHADOW_PCF_TYPE = this._shadowPcf;\r\n        } else {\r\n            pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 0;\r\n        }\r\n        root.onGlobalPipelineStateChanged();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4, Quat, Vec3, geometry, cclegacy } from '../../core';\r\nimport type { Frustum } from '../../core/geometry';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\nimport { Light, LightType, nt2lm } from './light';\r\nimport { PCFType } from './shadows';\r\n\r\nconst _forward = new Vec3(0, 0, -1);\r\nconst _qt = new Quat();\r\nconst _matView = new Mat4();\r\nconst _matProj = new Mat4();\r\nconst _matViewProj = new Mat4();\r\nconst _matViewProjInv = new Mat4();\r\n\r\n/**\r\n * @en The spot light representation in the render scene, it will light up a cone area in the direction of the light, it supports shadow generation.\r\n * @zh 渲染场景中的聚光灯抽象，可以照亮光源方向上的一个锥形区域，支持生成阴影。\r\n */\r\nexport class SpotLight extends Light {\r\n    protected _dir: Vec3 = new Vec3(1.0, -1.0, -1.0);\r\n\r\n    protected _range = 5.0;\r\n\r\n    protected _spotAngle: number = Math.cos(Math.PI / 6);\r\n\r\n    protected _angleAttenuationStrength = 0;\r\n\r\n    protected _pos: Vec3 = new Vec3();\r\n\r\n    protected _aabb: geometry.AABB = geometry.AABB.create();\r\n\r\n    protected _frustum: geometry.Frustum = geometry.Frustum.create();\r\n\r\n    /**\r\n     * @en User-specified full-angle radians.\r\n     * @zh 用户指定的全角弧度。\r\n     */\r\n    protected _angle = 0;\r\n\r\n    protected _needUpdate = false;\r\n\r\n    protected _size = 0.15;\r\n\r\n    protected _luminanceHDR = 0;\r\n\r\n    protected _luminanceLDR = 0;\r\n\r\n    // Shadow map properties\r\n    protected _shadowEnabled = false;\r\n    protected _shadowPcf = PCFType.HARD;\r\n    protected _shadowBias = 0.00001;\r\n    protected _shadowNormalBias = 0.0;\r\n\r\n    /**\r\n     * @en The world position of the light source\r\n     * @zh 光源的世界坐标\r\n     */\r\n    get position (): Vec3 {\r\n        return this._pos;\r\n    }\r\n\r\n    /**\r\n     * @en The size of the spot light source\r\n     * @zh 聚光灯的光源尺寸\r\n     */\r\n    set size (size: number) {\r\n        this._size = size;\r\n    }\r\n\r\n    get size (): number {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * @en The lighting range of the spot light\r\n     * @zh 聚光灯的光照范围\r\n     */\r\n    set range (range: number) {\r\n        this._range = range;\r\n\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    get range (): number {\r\n        return this._range;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source\r\n     * @zh 光源的亮度\r\n     */\r\n    get luminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR;\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminance (value: number) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this.luminanceHDR = value;\r\n        } else {\r\n            this.luminanceLDR = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source in HDR mode\r\n     * @zh HDR 模式下光源的亮度\r\n     */\r\n    get luminanceHDR (): number {\r\n        return this._luminanceHDR;\r\n    }\r\n    set luminanceHDR (value: number) {\r\n        this._luminanceHDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source in LDR mode\r\n     * @zh LDR 模式下光源的亮度\r\n     */\r\n    get luminanceLDR (): number {\r\n        return this._luminanceLDR;\r\n    }\r\n    set luminanceLDR (value: number) {\r\n        this._luminanceLDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The direction of the spot light\r\n     * @zh 聚光灯的照明方向\r\n     */\r\n    get direction (): Vec3 {\r\n        return this._dir;\r\n    }\r\n\r\n    /**\r\n     * @en The setter will take the value as the cone angle,\r\n     * but the getter will give you the cosine value of the half cone angle: `cos(angle / 2)`.\r\n     * As the in-consistence is not acceptable for a property, please do not use it.\r\n     * @zh 赋值时这个属性会把输入值当做聚光灯光照区域的锥角，但是获取时返回的是 cos(angle / 2)。\r\n     * 由于这种不一致性，请不要使用这个属性。\r\n     * @internal\r\n     */\r\n    get spotAngle (): number {\r\n        return this._spotAngle;\r\n    }\r\n    set spotAngle (val: number) {\r\n        this._angle = val;\r\n        this._spotAngle = Math.cos(val * 0.5);\r\n\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en The angle attenuation strength of the spot light.\r\n     * The larger the value, the softer the edge, and the smaller the value, the harder the edge.\r\n     * @zh 聚光灯角度衰减强度。值越大，边缘越柔和，值越小，边缘越硬。\r\n     */\r\n    get angleAttenuationStrength (): number {\r\n        return this._angleAttenuationStrength;\r\n    }\r\n    set angleAttenuationStrength (val: number) {\r\n        this._angleAttenuationStrength = val;\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en The cone angle of the lighting area\r\n     * @zh 聚光灯锥角\r\n     */\r\n    get angle (): number {\r\n        return this._angle;\r\n    }\r\n\r\n    get aabb (): geometry.AABB {\r\n        return this._aabb;\r\n    }\r\n\r\n    /**\r\n     * @en The frustum of the lighting area\r\n     * @zh 受光源影响范围的截椎体\r\n     */\r\n    get frustum (): Frustum {\r\n        return this._frustum;\r\n    }\r\n\r\n    /**\r\n     * @en Whether shadow casting is enabled\r\n     * @zh 是否启用阴影？\r\n     */\r\n    get shadowEnabled (): boolean {\r\n        return this._shadowEnabled;\r\n    }\r\n    set shadowEnabled (val) {\r\n        this._shadowEnabled = val;\r\n    }\r\n\r\n    /**\r\n     * @en The pcf level of the shadow generation.\r\n     * @zh 获取或者设置阴影 pcf 等级。\r\n     */\r\n    get shadowPcf (): number {\r\n        return this._shadowPcf;\r\n    }\r\n    set shadowPcf (val) {\r\n        this._shadowPcf = val;\r\n    }\r\n\r\n    /**\r\n     * @en The depth offset of shadow to avoid moire pattern artifacts\r\n     * @zh 阴影的深度偏移, 可以减弱跨像素导致的条纹状失真\r\n     */\r\n    get shadowBias (): number {\r\n        return this._shadowBias;\r\n    }\r\n    set shadowBias (val) {\r\n        this._shadowBias = val;\r\n    }\r\n\r\n    /**\r\n      * @en The normal bias of the shadow map.\r\n      * @zh 设置或者获取法线偏移。\r\n      */\r\n    get shadowNormalBias (): number {\r\n        return this._shadowNormalBias;\r\n    }\r\n    set shadowNormalBias (val: number) {\r\n        this._shadowNormalBias = val;\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._type = LightType.SPOT;\r\n    }\r\n\r\n    public initialize (): void {\r\n        super.initialize();\r\n\r\n        const size = 0.15;\r\n        this.size = size;\r\n        this.luminanceHDR = 1700 / nt2lm(size);\r\n        this.luminanceLDR = 1.0;\r\n        this.range = Math.cos(Math.PI / 6);\r\n        this._dir.set(new Vec3(1.0, -1.0, -1.0));\r\n    }\r\n\r\n    public update (): void {\r\n        if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {\r\n            this._node.getWorldPosition(this._pos);\r\n            Vec3.transformQuat(this._dir, _forward, this._node.getWorldRotation(_qt));\r\n            Vec3.normalize(this._dir, this._dir);\r\n\r\n            geometry.AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, this._range, this._range, this._range);\r\n\r\n            // view matrix\r\n            this._node.getWorldRT(_matView);\r\n            Mat4.invert(_matView, _matView);\r\n\r\n            Mat4.perspective(_matProj, this._angle, 1.0, 0.001, this._range);\r\n\r\n            // view-projection\r\n            Mat4.multiply(_matViewProj, _matProj, _matView);\r\n            // Mat4.invert(_matViewProjInv, _matViewProj);\r\n\r\n            this._frustum.update(_matViewProj, _matViewProjInv);\r\n\r\n            this._needUpdate = false;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, cclegacy, geometry } from '../../core';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\nimport { Light, LightType, nt2lm } from './light';\r\n\r\n/**\r\n * @en The sphere light representation in the render scene, it will light up a spherical area in the scene.\r\n * It doesn't support shadow generation currently.\r\n * @zh 渲染场景中的球面光抽象，可以照亮场景中的一个球形区域，目前还不支持生成阴影。\r\n */\r\nexport class SphereLight extends Light {\r\n    /**\r\n     * @en The world position of the light source\r\n     * @zh 光源中心点的世界坐标\r\n     */\r\n    get position (): Vec3 {\r\n        return this._pos;\r\n    }\r\n\r\n    /**\r\n     * @en The size of the light source\r\n     * @zh 球面光源的尺寸\r\n     */\r\n    set size (size: number) {\r\n        this._size = size;\r\n    }\r\n\r\n    get size (): number {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * @en The lighting range of the light source\r\n     * @zh 球面光源的光照范围\r\n     */\r\n    set range (range: number) {\r\n        this._range = range;\r\n\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    get range (): number {\r\n        return this._range;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source\r\n     * @zh 光源的亮度\r\n     */\r\n    get luminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR;\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminance (value: number) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this.luminanceHDR = value;\r\n        } else {\r\n            this.luminanceLDR = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source in HDR mode\r\n     * @zh HDR 模式下光源的亮度\r\n     */\r\n    get luminanceHDR (): number {\r\n        return this._luminanceHDR;\r\n    }\r\n    set luminanceHDR (value: number) {\r\n        this._luminanceHDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source in LDR mode\r\n     * @zh LDR 模式下光源的亮度\r\n     */\r\n    set luminanceLDR (value: number) {\r\n        this._luminanceLDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The AABB bounding box of the lighting area\r\n     * @zh 受光源影响范围的 AABB 包围盒\r\n     */\r\n    get aabb (): geometry.AABB {\r\n        return this._aabb;\r\n    }\r\n\r\n    protected _needUpdate = false;\r\n    protected _size = 0.15;\r\n    protected _range = 1.0;\r\n    protected _luminanceHDR = 0;\r\n    protected _luminanceLDR = 0;\r\n    protected _pos: Vec3 = new Vec3();\r\n    protected _aabb: geometry.AABB = geometry.AABB.create();\r\n\r\n    constructor () {\r\n        super();\r\n        this._type = LightType.SPHERE;\r\n    }\r\n\r\n    public initialize (): void {\r\n        super.initialize();\r\n\r\n        const size = 0.15;\r\n        this.size = size;\r\n        this.range = 1.0;\r\n        this.luminanceHDR = 1700 / nt2lm(size);\r\n        this.luminanceLDR = 1.0;\r\n    }\r\n\r\n    /**\r\n     * @en Update the lighting area\r\n     * @zh 更新光源影响范围\r\n     */\r\n    public update (): void {\r\n        if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {\r\n            this._node.getWorldPosition(this._pos);\r\n            const range = this._range;\r\n            geometry.AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, range, range, range);\r\n            this._needUpdate = false;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n https://www.cocos.com/\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated engine source code (the \"Software\"), a limited,\r\n worldwide, royalty-free, non-assignable, revocable and non-exclusive license\r\n to use Cocos Creator solely to develop games on your target platforms. You shall\r\n not use Cocos Creator software for developing other software or tools that's\r\n used for developing games. You are not granted to publish, distribute,\r\n sublicense, and/or sell copies of Cocos Creator.\r\n The software or tools in this License Agreement are licensed, not sold.\r\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\r\n\r\nimport { cclegacy } from '../../core';\r\nimport { Vec3 } from '../../core/math/vec3';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\nimport { Ambient } from './ambient';\r\nimport { Light, LightType } from './light';\r\n\r\nconst _forward = new Vec3(0, 0, -1);\r\n\r\n/**\r\n * @en Render the abstraction of light in the scene, which is a ranged directional light source in the scene. Non main light source,\r\n * each scene is allowed to have multiple ranged directional light sources without shadows.\r\n * @zh 渲染场景中的光的抽象，这是场景中的范围平行光光源。非主光源，每个场景允许有多个范围平行光光源，不包含阴影。\r\n */\r\nexport class RangedDirectionalLight extends Light {\r\n    private _dir: Vec3 = new Vec3(0, 0, -1);\r\n    private _pos: Vec3 = new Vec3(0, 0, 0);\r\n    private _scale: Vec3 = new Vec3(1, 1, 1);\r\n    private _right: Vec3 = new Vec3(1, 0, 0);\r\n    private _illuminanceHDR: number = Ambient.SUN_ILLUM;\r\n    private _illuminanceLDR = 1.0;\r\n\r\n    /**\r\n     * @en The direction vector of the light\r\n     * @zh 光源的方向\r\n     */\r\n    get direction (): Readonly<Vec3> {\r\n        return this._dir;\r\n    }\r\n\r\n    /**\r\n     * @en The right vector of the light\r\n     * @zh 光源的右方向\r\n     */\r\n    get right (): Readonly<Vec3> {\r\n        return this._right;\r\n    }\r\n\r\n    /**\r\n     * @en The world position of the light source\r\n     * @zh 光源的世界坐标\r\n     */\r\n    get position (): Readonly<Vec3> {\r\n        return this._pos;\r\n    }\r\n\r\n    /**\r\n     * @en The world scale of the light source\r\n     * @zh 光源的世界缩放\r\n     */\r\n    get scale (): Readonly<Vec3> {\r\n        return this._scale;\r\n    }\r\n\r\n    /**\r\n     * @en The illuminance of the light in Lux(lx)\r\n     * @zh 光源的辐照度，单位是 Lux(lx)\r\n     */\r\n    get illuminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._illuminanceHDR;\r\n        } else {\r\n            return this._illuminanceLDR;\r\n        }\r\n    }\r\n    set illuminance (value: number) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this.illuminanceHDR = value;\r\n        } else {\r\n            this.illuminanceLDR = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The illuminance of the light in HDR mode\r\n     * @zh HDR 模式下光源的辐照度\r\n     */\r\n    get illuminanceHDR (): number {\r\n        return this._illuminanceHDR;\r\n    }\r\n    set illuminanceHDR (value: number) {\r\n        this._illuminanceHDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The illuminance of the light in LDR mode\r\n     * @zh LDR 模式下光源的辐照度\r\n     */\r\n    get illuminanceLDR (): number {\r\n        return this._illuminanceLDR;\r\n    }\r\n    set illuminanceLDR (value: number) {\r\n        this._illuminanceLDR = value;\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._type = LightType.RANGED_DIRECTIONAL;\r\n    }\r\n\r\n    public initialize (): void {\r\n        super.initialize();\r\n\r\n        this.illuminance = Ambient.SUN_ILLUM;\r\n    }\r\n\r\n    /**\r\n     * @en Update\r\n     * @zh 更新\r\n     */\r\n    public update (): void {\r\n        if (this._node && this._node.hasChangedFlags) {\r\n            this._node.getWorldPosition(this._pos);\r\n            this._node.getWorldScale(this._scale);\r\n            Vec3.transformQuat(this._dir, _forward, this._node.worldRotation);\r\n            Vec3.transformQuat(this._right, Vec3.RIGHT, this._node.worldRotation);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { cclegacy, geometry, v3, Vec3 } from '../../core';\r\nimport { AABB } from '../../core/geometry';\r\nimport { getPipelineSceneData } from '../../rendering/pipeline-scene-data-utils';\r\nimport { Light, LightType, nt2lm } from './light';\r\n\r\n/**\r\n * @en The point light representation in the render scene, it will light up a spherical area in the scene.\r\n * It doesn't support shadow generation currently.\r\n * @zh 渲染场景中的点光抽象，可以照亮场景中的一个球形区域，目前还不支持生成阴影。\r\n */\r\nexport class PointLight extends Light {\r\n    /**\r\n     * @en The world position of the light source.\r\n     * @zh 光源中心点的世界坐标。\r\n     */\r\n    get position (): Readonly<Vec3> {\r\n        return this._pos;\r\n    }\r\n\r\n    /**\r\n     * @en The lighting range of the light source.\r\n     * @zh 点光源的光照范围。\r\n     */\r\n    set range (range: number) {\r\n        this._range = range;\r\n\r\n        this._needUpdate = true;\r\n    }\r\n\r\n    get range (): number {\r\n        return this._range;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source.\r\n     * @zh 光源的亮度。\r\n     */\r\n    get luminance (): number {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            return this._luminanceHDR;\r\n        } else {\r\n            return this._luminanceLDR;\r\n        }\r\n    }\r\n    set luminance (value: number) {\r\n        const isHDR = getPipelineSceneData().isHDR;\r\n        if (isHDR) {\r\n            this.luminanceHDR = value;\r\n        } else {\r\n            this.luminanceLDR = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source in HDR mode.\r\n     * @zh HDR 模式下光源的亮度。\r\n     */\r\n    get luminanceHDR (): number {\r\n        return this._luminanceHDR;\r\n    }\r\n    set luminanceHDR (value: number) {\r\n        this._luminanceHDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The luminance of the light source in LDR mode.\r\n     * @zh LDR 模式下光源的亮度。\r\n     */\r\n    set luminanceLDR (value: number) {\r\n        this._luminanceLDR = value;\r\n    }\r\n\r\n    /**\r\n     * @en The AABB bounding box of the lighting area.\r\n     * @zh 受光源影响范围的 AABB 包围盒。\r\n     */\r\n    get aabb (): geometry.AABB {\r\n        return this._aabb;\r\n    }\r\n\r\n    private _needUpdate = false;\r\n    private _range = 1.0;\r\n    private _luminanceHDR = 0;\r\n    private _luminanceLDR = 0;\r\n    private _pos: Vec3 = v3();\r\n    private _aabb: AABB = AABB.create();\r\n\r\n    constructor () {\r\n        super();\r\n        this._type = LightType.POINT;\r\n    }\r\n\r\n    public initialize (): void {\r\n        super.initialize();\r\n\r\n        this.range = 1.0;\r\n        this.luminanceHDR = 1700 / nt2lm(1.0);\r\n        this.luminanceLDR = 1.0;\r\n    }\r\n\r\n    /**\r\n     * @en Update the lighting area.\r\n     * @zh 更新光源影响范围。\r\n     */\r\n    public update (): void {\r\n        if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {\r\n            this._node.getWorldPosition(this._pos);\r\n            const range = this._range;\r\n            AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, range, range, range);\r\n            this._needUpdate = false;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { Root } from '../../root';\r\nimport { Node } from '../../scene-graph';\r\nimport { Camera } from '../scene/camera';\r\nimport { DirectionalLight } from '../scene/directional-light';\r\nimport { Model } from '../scene/model';\r\nimport { SphereLight } from '../scene/sphere-light';\r\nimport { SpotLight } from '../scene/spot-light';\r\nimport { PointLight } from '../scene/point-light';\r\nimport { RangedDirectionalLight } from '../scene/ranged-directional-light';\r\nimport { TransformBit } from '../../scene-graph/node-enum';\r\nimport { DrawBatch2D } from '../../2d/renderer/draw-batch';\r\nimport { LODGroup } from '../scene/lod-group';\r\n\r\nexport interface IRenderSceneInfo {\r\n    name: string;\r\n}\r\n\r\nexport interface ISceneNodeInfo {\r\n    name: string;\r\n    isStatic?: boolean;\r\n    // parent: Node;\r\n}\r\n\r\n/**\r\n * @en The result of one raycast operation\r\n * @zh 一次射线检测的结果\r\n */\r\nexport interface IRaycastResult {\r\n    node: Node;\r\n    distance: number;\r\n}\r\n\r\n/**\r\n * @en The render scene which is created by the [[Root]] and provides all basic render scene elements for the render process.\r\n * It manages:\r\n * 1. [[Camera]]s\r\n * 2. [[Light]]s\r\n * 3. Renderable objects: [[renderer.Model]]s and `DrawBatchs`\r\n * @zh 渲染场景，由 [[Root]] 创建，并提供用于渲染流程的所有场景基础元素。它管理：\r\n * 1. [[Camera]]s：相机\r\n * 2. [[Light]]s：光源\r\n * 3. 渲染元素：[[renderer.Model]]s 和 `DrawBatchs`\r\n */\r\nexport class RenderScene {\r\n    /**\r\n     * @en The root manager of the renderer.\r\n     * @zh 基础渲染管理器。\r\n     */\r\n    get root (): Root {\r\n        return this._root;\r\n    }\r\n\r\n    /**\r\n     * @en The name of the render scene.\r\n     * @zh 渲染场景的名称。\r\n     */\r\n    get name (): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * @en All cameras of the render scene.\r\n     * @zh 渲染场景管理的所有相机。\r\n     */\r\n    get cameras (): Camera[] {\r\n        return this._cameras;\r\n    }\r\n\r\n    /**\r\n     * @en The main directional light source of the render scene.\r\n     * @zh 渲染场景管理的主方向光源。\r\n     */\r\n    get mainLight (): DirectionalLight | null {\r\n        return this._mainLight;\r\n    }\r\n\r\n    /**\r\n     * @en All sphere light sources of the render scene.\r\n     * @zh 渲染场景管理的所有球面光源。\r\n     */\r\n    get sphereLights (): Readonly<SphereLight[]> {\r\n        return this._sphereLights;\r\n    }\r\n\r\n    /**\r\n     * @en All spot light sources of the render scene.\r\n     * @zh 渲染场景管理的所有聚光灯光源。\r\n     */\r\n    get spotLights (): Readonly<SpotLight[]> {\r\n        return this._spotLights;\r\n    }\r\n\r\n    /**\r\n     * @en All point light sources of the render scene.\r\n     * @zh 渲染场景管理的所有点光源。\r\n     */\r\n    get pointLights (): Readonly<PointLight[]> {\r\n        return this._pointLights;\r\n    }\r\n\r\n    /**\r\n     * @en All ranged directional light sources of the render scene.\r\n     * @zh 渲染场景管理的所有范围平行光光源。\r\n     */\r\n    get rangedDirLights (): Readonly<RangedDirectionalLight[]> {\r\n        return this._rangedDirLights;\r\n    }\r\n\r\n    /**\r\n     * @en All active models of the render scene.\r\n     * @zh 渲染场景管理的所有模型。\r\n     */\r\n    get models (): Model[] {\r\n        return this._models;\r\n    }\r\n\r\n    /**\r\n     * @en All active 2d draw batches of the render scene.\r\n     * @zh 渲染场景管理的所有 2D 渲染批次对象。\r\n     */\r\n    get batches (): DrawBatch2D[] {\r\n        return this._batches;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @en All LOD groups of the render scene.\r\n     * @zh 渲染场景管理的所有 LOD 组。\r\n     */\r\n    get lodGroups (): readonly LODGroup[] { return this._lodGroups; }\r\n\r\n    private declare _root: Root;\r\n    private _name = '';\r\n    private _cameras: Camera[] = [];\r\n    private _models: Model[] = [];\r\n    private _lodGroups: LODGroup[] = []; // LOD Group gathered\r\n    private _batches: DrawBatch2D[] = [];\r\n    private _directionalLights: DirectionalLight[] = [];\r\n    private _sphereLights: SphereLight[] = [];\r\n    private _spotLights: SpotLight[] = [];\r\n    private _pointLights: PointLight[] = [];\r\n    private _rangedDirLights: RangedDirectionalLight[] = [];\r\n    private _mainLight: DirectionalLight | null = null;\r\n    private _modelId = 0;\r\n    private _lodStateCache: LodStateCache = null!;\r\n\r\n    /**\r\n     * Register the creation function of the render scene to root.\r\n     * @internal\r\n     */\r\n    public static registerCreateFunc (root: Root): void {\r\n        root._createSceneFun = (_root: Root): RenderScene => new RenderScene(_root);\r\n    }\r\n\r\n    constructor (root: Root) {\r\n        this._root = root;\r\n    }\r\n\r\n    /**\r\n     * @en Initialize the render scene\r\n     * @zh 初始化渲染场景\r\n     * @returns Successful\r\n     */\r\n    public initialize (info: IRenderSceneInfo): boolean {\r\n        this._name = info.name;\r\n        this._lodStateCache = new LodStateCache(this);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en The update process of the render scene, it updates all rendering related data for the lights and the models.\r\n     * @zh 渲染场景的更新流程，会更新所有光源和模型的渲染相关数据。\r\n     * @param stamp The update time stamp\r\n     * @returns void\r\n     */\r\n    public update (stamp: number): void {\r\n        const mainLight = this._mainLight;\r\n        if (mainLight) {\r\n            mainLight.update();\r\n        }\r\n\r\n        const sphereLights = this._sphereLights;\r\n        for (let i = 0; i < sphereLights.length; i++) {\r\n            const light = sphereLights[i];\r\n            light.update();\r\n        }\r\n\r\n        const spotLights = this._spotLights;\r\n        for (let i = 0; i < spotLights.length; i++) {\r\n            const light = spotLights[i];\r\n            light.update();\r\n        }\r\n\r\n        const pointLights = this._pointLights;\r\n        for (let i = 0; i < pointLights.length; i++) {\r\n            const light = pointLights[i];\r\n            light.update();\r\n        }\r\n\r\n        const rangedDirLights = this._rangedDirLights;\r\n        for (let i = 0; i < rangedDirLights.length; i++) {\r\n            const light = rangedDirLights[i];\r\n            light.update();\r\n        }\r\n\r\n        const models = this._models;\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n\r\n            if (model.enabled) {\r\n                model.updateTransform(stamp);\r\n                model.updateUBOs(stamp);\r\n            }\r\n        }\r\n        this._lodStateCache.updateLodState();\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the render scene, dangerous, please do not invoke manually.\r\n     * @zh 销毁渲染场景，请不要手动销毁，会造成未知行为。\r\n     */\r\n    public destroy (): void {\r\n        this.removeCameras();\r\n        this.removeSphereLights();\r\n        this.removeSpotLights();\r\n        this.removeRangedDirLights();\r\n        this.removeModels();\r\n        this.removeLODGroups();\r\n        this._lodStateCache.clearCache();\r\n    }\r\n\r\n    public isCulledByLod (camera: Camera, model: Model): boolean {\r\n        return this._lodStateCache.isLodModelCulled(camera, model);\r\n    }\r\n\r\n    /**\r\n     * @en Attach a camera to the render scene\r\n     * @zh 向渲染场景挂载一个相机\r\n     */\r\n    public addCamera (cam: Camera): void {\r\n        cam.attachToScene(this);\r\n        this._cameras.push(cam);\r\n        this._lodStateCache.addCamera(cam);\r\n    }\r\n\r\n    /**\r\n     * @en Detach a camera to the render scene\r\n     * @zh 从渲染场景移除一个相机\r\n     */\r\n    public removeCamera (camera: Camera): void {\r\n        for (let i = 0; i < this._cameras.length; ++i) {\r\n            if (this._cameras[i] === camera) {\r\n                this._cameras.splice(i, 1);\r\n                camera.detachFromScene();\r\n                this._lodStateCache.removeCamera(camera);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Detach all cameras to the render scene\r\n     * @zh 从渲染场景移除所有相机\r\n     */\r\n    public removeCameras (): void {\r\n        this._cameras.forEach((camera) => {\r\n            camera.detachFromScene();\r\n            this._lodStateCache.removeCamera(camera);\r\n        });\r\n        this._cameras.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the main light source for the render scene\r\n     * @zh 给渲染场景设置主光源\r\n     * @param dl The main directional light source\r\n     */\r\n    public setMainLight (dl: DirectionalLight | null): void {\r\n        this._mainLight = dl;\r\n        if (this._mainLight) this._mainLight.activate();\r\n    }\r\n\r\n    /**\r\n     * @en Remove the main light source from the render scene\r\n     * @zh 从渲染场景移除主光源\r\n     * @param dl The main directional light source, if it's not the actual main light, nothing happens.\r\n     */\r\n    public unsetMainLight (dl: DirectionalLight): void {\r\n        if (this._mainLight === dl) {\r\n            const dlList = this._directionalLights;\r\n            if (dlList.length) {\r\n                this.setMainLight(dlList[dlList.length - 1]);\r\n                if (this._mainLight.node) { // trigger update\r\n                    this._mainLight.node.hasChangedFlags |= TransformBit.ROTATION;\r\n                }\r\n                return;\r\n            }\r\n            this.setMainLight(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a directional light source, only one directional light is active and act as the main light source.\r\n     * @zh 增加一个方向光源，场景中只会有一个方向光是起效的，并且会作为主光源。\r\n     * @param dl The directional light.\r\n     */\r\n    public addDirectionalLight (dl: DirectionalLight): void {\r\n        dl.attachToScene(this);\r\n        this._directionalLights.push(dl);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a directional light source.\r\n     * @zh 删除一个方向光源。\r\n     * @param dl The directional light.\r\n     */\r\n    public removeDirectionalLight (dl: DirectionalLight): void {\r\n        for (let i = 0; i < this._directionalLights.length; ++i) {\r\n            if (this._directionalLights[i] === dl) {\r\n                dl.detachFromScene();\r\n                this._directionalLights.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a sphere light source.\r\n     * @zh 增加一个球面光源。\r\n     * @param pl The sphere light.\r\n     */\r\n    public addSphereLight (pl: SphereLight): void {\r\n        pl.attachToScene(this);\r\n        this._sphereLights.push(pl);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a sphere light source.\r\n     * @zh 删除一个球面光源。\r\n     * @param pl The sphere light.\r\n     */\r\n    public removeSphereLight (pl: SphereLight): void {\r\n        for (let i = 0; i < this._sphereLights.length; ++i) {\r\n            if (this._sphereLights[i] === pl) {\r\n                pl.detachFromScene();\r\n                this._sphereLights.splice(i, 1);\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Add a spot light source.\r\n     * @zh 增加一个聚光灯光源。\r\n     * @param sl The spot light.\r\n     */\r\n    public addSpotLight (sl: SpotLight): void {\r\n        sl.attachToScene(this);\r\n        this._spotLights.push(sl);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a spot light source.\r\n     * @zh 删除一个聚光灯光源。\r\n     * @param sl The spot light.\r\n     */\r\n    public removeSpotLight (sl: SpotLight): void {\r\n        for (let i = 0; i < this._spotLights.length; ++i) {\r\n            if (this._spotLights[i] === sl) {\r\n                sl.detachFromScene();\r\n                this._spotLights.splice(i, 1);\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove all sphere light sources.\r\n     * @zh 删除所有球面光源。\r\n     */\r\n    public removeSphereLights (): void {\r\n        for (let i = 0; i < this._sphereLights.length; ++i) {\r\n            this._sphereLights[i].detachFromScene();\r\n        }\r\n        this._sphereLights.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Remove all spot light sources.\r\n     * @zh 删除所有聚光灯光源。\r\n     */\r\n    public removeSpotLights (): void {\r\n        for (let i = 0; i < this._spotLights.length; ++i) {\r\n            this._spotLights[i].detachFromScene();\r\n        }\r\n        this._spotLights.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Add a point light source.\r\n     * @zh 增加一个点光源。\r\n     * @param pl @en The point light. @zh 点光源。\r\n     */\r\n    public addPointLight (pl: PointLight): void {\r\n        pl.attachToScene(this);\r\n        this._pointLights.push(pl);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a sphere light source.\r\n     * @zh 删除一个点光源。\r\n     * @param pl @en The point light. @zh 点光源。\r\n     */\r\n    public removePointLight (pl: PointLight): void {\r\n        for (let i = 0; i < this._pointLights.length; ++i) {\r\n            if (this._pointLights[i] === pl) {\r\n                pl.detachFromScene();\r\n                this._pointLights.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove all point light sources.\r\n     * @zh 删除所有点光源。\r\n     */\r\n    public removePointLights (): void {\r\n        for (let i = 0; i < this._pointLights.length; ++i) {\r\n            this._pointLights[i].detachFromScene();\r\n        }\r\n        this._pointLights.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Add a ranged directional light source.\r\n     * @zh 增加一个范围平行光源。\r\n     * @param l @en The ranged directional light. @zh 范围平行光。\r\n     */\r\n    public addRangedDirLight (l: RangedDirectionalLight): void {\r\n        l.attachToScene(this);\r\n        this._rangedDirLights.push(l);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a ranged directional light source.\r\n     * @zh 删除一个范围平行光源。\r\n     * @param l @en The ranged directional light. @zh 范围平行光。\r\n     */\r\n    public removeRangedDirLight (l: RangedDirectionalLight): void {\r\n        for (let i = 0; i < this._rangedDirLights.length; ++i) {\r\n            if (this._rangedDirLights[i] === l) {\r\n                l.detachFromScene();\r\n                this._rangedDirLights.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove all ranged directional light sources.\r\n     * @zh 删除所有范围平行光源。\r\n     */\r\n    public removeRangedDirLights (): void {\r\n        for (let i = 0; i < this._rangedDirLights.length; ++i) {\r\n            this._rangedDirLights[i].detachFromScene();\r\n        }\r\n        this._rangedDirLights.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Add a model, all models attached to the render scene will be submitted for rendering.\r\n     * @zh 增加一个模型，渲染场景上挂载的所有模型都会被提交渲染。\r\n     * @param m The model.\r\n     */\r\n    public addModel (m: Model): void {\r\n        m.attachToScene(this);\r\n        this._models.push(m);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a model, model removed will no longer be submitted for rendering.\r\n     * @zh 删除一个模型，移除的模型将不再被提交渲染。\r\n     * @param m The model.\r\n     */\r\n    public removeModel (model: Model): void {\r\n        for (let i = 0; i < this._models.length; ++i) {\r\n            if (this._models[i] === model) {\r\n                this._lodStateCache.removeModel(model);\r\n                model.detachFromScene();\r\n                this._models.splice(i, 1);\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove all models.\r\n     * @zh 删除所有模型。\r\n     */\r\n    public removeModels (): void {\r\n        this._models.forEach((m) => {\r\n            this._lodStateCache.removeModel(m);\r\n            m.detachFromScene();\r\n            m.destroy();\r\n        });\r\n        this._models.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Add a draw batch of 2d objects, all draw batches attached to the render scene will be submitted for rendering.\r\n     * @zh 增加一个 2D 渲染批次，渲染场景上挂载的所有 2D 渲染批次都会被提交渲染。\r\n     * @param batch The draw batch.\r\n     * @internal\r\n     * @deprecated since v3.6.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public addBatch (batch: DrawBatch2D): void {\r\n        this._batches.push(batch);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a draw batch of 2d objects, draw batch removed will no longer be submitted for rendering.\r\n     * @zh 删除一个 2D 渲染批次，移除的 2D 渲染批次将不再被提交渲染。\r\n     * @param batch The draw batch.\r\n     * @internal\r\n     * @deprecated since v3.6.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public removeBatch (batch: DrawBatch2D): void {\r\n        for (let i = 0; i < this._batches.length; ++i) {\r\n            if (this._batches[i] === batch) {\r\n                this._batches.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove all 2d draw batches.\r\n     * @zh 删除所有 2D 渲染批次。\r\n     * @internal\r\n     * @deprecated since v3.6.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public removeBatches (): void {\r\n        this._batches.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @en Add a LOD group， all LOD groups attached to the render scene will be submitted for rendering.\r\n     * @zh 增加一个LOD 组，渲染场景上挂载的所有LOD 组都会被提交渲染。\r\n     * @param lodGroup the LOD group\r\n     */\r\n    addLODGroup (lodGroup: LODGroup): void {\r\n        this._lodGroups.push(lodGroup);\r\n        lodGroup.attachToScene(this);\r\n        this._lodStateCache.addLodGroup(lodGroup);\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     * @en Remove a LOD group, the LOD group removed will no longer be submitted for rendering.\r\n     * @zh 删除一个LOD 组，移除的LOD 组将不再被提交渲染。\r\n     * @param lodGroup the LOD group\r\n     */\r\n    removeLODGroup (lodGroup: LODGroup): void {\r\n        const index = this._lodGroups.indexOf(lodGroup);\r\n        if (index >= 0) {\r\n            this._lodGroups.splice(index, 1);\r\n            lodGroup.detachFromScene();\r\n            this._lodStateCache.removeLodGroup(lodGroup);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     * @en Remove all LOD groups.\r\n     * @zh 删除所有LOD 组。\r\n     */\r\n    removeLODGroups (): void {\r\n        this._lodGroups.forEach((group) => {\r\n            this._lodStateCache.removeLodGroup(group);\r\n        });\r\n        this._lodGroups.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Notify all models that the global pipeline state have been updated so that they can update their render data and states.\r\n     * @zh 通知所有模型全局管线状态已更新，需要更新自身状态。\r\n     */\r\n    public onGlobalPipelineStateChanged (): void {\r\n        this._models.forEach((m) => {\r\n            m.onGlobalPipelineStateChanged();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Generate a new model id.\r\n     * @zh 生成一个新的模型 ID\r\n     * @returns The model id\r\n     */\r\n    public generateModelId (): number {\r\n        return this._modelId++;\r\n    }\r\n}\r\n\r\nclass LODInfo {\r\n    /**\r\n     * @zh 当前使用哪一级的 LOD, -1 表示没有层级被使用\r\n     * @en Which level of LOD is currently in use, -1 means no levels are used\r\n     */\r\n    usedLevel = -1;\r\n    lastUsedLevel = -1;\r\n    transformDirty = true;\r\n}\r\n\r\n/**\r\n * @zh 管理LODGroup的使用状态，包含使用层级及其上的model可见相机列表；便于判断当前model是否被LODGroup裁剪\r\n * @en Manage the usage status of LODGroup, including the usage level and the list of visible cameras on its models;\r\n * easy to determine whether the current mod is cropped by LODGroup。\r\n */\r\nclass LodStateCache {\r\n    constructor (scene: RenderScene) {\r\n        this._renderScene = scene;\r\n    }\r\n\r\n    addCamera (camera: Camera): void {\r\n        const lodGroups = this._renderScene.lodGroups;\r\n        for (let i = 0; i < lodGroups.length; i++) {\r\n            const lodGroup = lodGroups[i];\r\n            const layer = lodGroup.node.layer;\r\n            if ((camera.visibility & layer) === layer) {\r\n                if (!this._lodStateInCamera.has(camera)) {\r\n                    this._lodStateInCamera.set(camera, new Map<LODGroup, LODInfo>());\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeCamera (camera: Camera): void {\r\n        if (this._lodStateInCamera.has(camera)) {\r\n            this._lodStateInCamera.delete(camera);\r\n        }\r\n    }\r\n\r\n    addLodGroup (lodGroup: LODGroup): void {\r\n        this._newAddedLodGroupVec.push(lodGroup);\r\n\r\n        const cameras = this._renderScene.cameras;\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const camera = cameras[i];\r\n            if (this._lodStateInCamera.has(camera)) {\r\n                continue;\r\n            }\r\n            const layer = lodGroup.node.layer;\r\n            if ((camera.visibility & layer) === layer) {\r\n                this._lodStateInCamera.set(camera, new Map<LODGroup, LODInfo>());\r\n            }\r\n        }\r\n    }\r\n\r\n    removeLodGroup (lodGroup: LODGroup): void {\r\n        for (let index = 0; index < lodGroup.lodCount; index++) {\r\n            const lod = lodGroup.lodDataArray[index];\r\n            lod.models.forEach((model): void => {\r\n                this._modelsInLODGroup.delete(model);\r\n            });\r\n        }\r\n        for (const visibleCamera of this._lodStateInCamera) {\r\n            visibleCamera[1].delete(lodGroup);\r\n        }\r\n        this._levelModels.delete(lodGroup);\r\n    }\r\n\r\n    removeModel (model: Model): void {\r\n        if (this._modelsInLODGroup.has(model)) {\r\n            this._modelsInLODGroup.delete(model);\r\n        }\r\n    }\r\n\r\n    // Update list of visible cameras on _modelsInLODGroup and update lod usage level under specified camera.\r\n    updateLodState (): void {\r\n        // insert vecAddedLodGroup's model into modelsByAnyLODGroup\r\n        this._newAddedLodGroupVec.forEach((addedLodGroup): void => {\r\n            let levelModels = this._levelModels.get(addedLodGroup);\r\n            if (!levelModels) {\r\n                levelModels = new Map<number, Array<Model>>();\r\n                this._levelModels.set(addedLodGroup, levelModels);\r\n            }\r\n            for (let i = 0; i < addedLodGroup.lodCount; i++) {\r\n                let lodModels = levelModels.get(i);\r\n                if (!lodModels) {\r\n                    lodModels = [] as Model[];\r\n                }\r\n                const models = addedLodGroup.lodDataArray[i].models;\r\n                for (let j = 0; j < models.length; j++) {\r\n                    const model = models[j];\r\n                    let modelInfo = this._modelsInLODGroup.get(model);\r\n                    if (!modelInfo) {\r\n                        modelInfo = new Map<Camera, boolean>();\r\n                    }\r\n                    this._modelsInLODGroup.set(model, modelInfo);\r\n                    lodModels.push(model);\r\n                }\r\n                levelModels.set(i, lodModels);\r\n            }\r\n        });\r\n        this._newAddedLodGroupVec.length = 0;\r\n\r\n        // update current visible lod index & model's visible cameras list\r\n        const lodGroups = this._renderScene.lodGroups;\r\n        for (let i = 0; i < lodGroups.length; i++) {\r\n            const lodGroup = lodGroups[i];\r\n            if (lodGroup.enabled) {\r\n                const lodLevels = lodGroup.getLockedLODLevels();\r\n                const count = lodLevels.length;\r\n                // count > 0, indicating that the user force to use certain layers of\r\n                // lod\r\n                if (count > 0) {\r\n                    // Update the dirty flag to make it easier to update the visible\r\n                    // index of lod after lifting the forced use of lod.\r\n                    if (lodGroup.node.hasChangedFlags > 0) {\r\n                        for (const visibleCamera of this._lodStateInCamera) {\r\n                            let lodInfo = visibleCamera[1].get(lodGroup);\r\n                            if (!lodInfo) {\r\n                                lodInfo = new LODInfo();\r\n                                visibleCamera[1].set(lodGroup, lodInfo);\r\n                            }\r\n                            lodInfo.transformDirty = true;\r\n                        }\r\n                    }\r\n                    // Update the visible camera list of all models on lodGroup when the\r\n                    // visible level changes.\r\n                    if (lodGroup.isLockLevelChanged()) {\r\n                        lodGroup.resetLockChangeFlag();\r\n\r\n                        const lodModels = this._levelModels.get(lodGroup);\r\n                        if (lodModels) {\r\n                            lodModels.forEach((vecArray, index): void => {\r\n                                vecArray.forEach((model): void => {\r\n                                    const modelInfo = this._modelsInLODGroup.get(model);\r\n                                    if (modelInfo) {\r\n                                        modelInfo.clear();\r\n                                    }\r\n                                });\r\n                            });\r\n\r\n                            lodLevels.forEach((visibleIndex) => {\r\n                                const vecModels = lodModels.get(visibleIndex);\r\n                                if (vecModels) {\r\n                                    vecModels.forEach((model): void => {\r\n                                        const modelInfo = this._modelsInLODGroup.get(model);\r\n                                        if (modelInfo && model.node && model.node.active) {\r\n                                            for (const visibleCamera of this._lodStateInCamera) {\r\n                                                modelInfo.set(visibleCamera[0], true);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                // Normal Process, no LOD is forced.\r\n                let hasUpdated = false;\r\n                for (const visibleCamera of this._lodStateInCamera) {\r\n                    let lodInfo = visibleCamera[1].get(lodGroup);\r\n                    if (!lodInfo) {\r\n                        lodInfo = new LODInfo();\r\n                        visibleCamera[1].set(lodGroup, lodInfo);\r\n                    }\r\n                    const cameraChangeFlags = visibleCamera[0].node.hasChangedFlags;\r\n                    const lodChangeFlags = lodGroup.node.hasChangedFlags;\r\n                    // Changes in the camera matrix or changes in the matrix of the node\r\n                    // where lodGroup is located or the transformDirty marker is true,\r\n                    // etc. All need to recalculate the visible level of LOD.\r\n                    if (cameraChangeFlags > 0 || lodChangeFlags > 0 || lodInfo.transformDirty) {\r\n                        if (lodInfo.transformDirty) {\r\n                            lodInfo.transformDirty = false;\r\n                        }\r\n                        const index = lodGroup.getVisibleLODLevel(visibleCamera[0]);\r\n                        if (index !== lodInfo.usedLevel) {\r\n                            lodInfo.lastUsedLevel = lodInfo.usedLevel;\r\n                            lodInfo.usedLevel = index;\r\n                            hasUpdated = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const lodModels = this._levelModels.get(lodGroup);\r\n                if (!lodModels) {\r\n                    continue;\r\n                }\r\n\r\n                // The LOD of the last frame is forced to be used, the list of visible\r\n                // cameras of modelInfo needs to be updated.\r\n                if (lodGroup.isLockLevelChanged()) {\r\n                    lodGroup.resetLockChangeFlag();\r\n\r\n                    lodModels.forEach((vecArray, index): void => {\r\n                        vecArray.forEach((model): void => {\r\n                            const modelInfo = this._modelsInLODGroup.get(model);\r\n                            if (modelInfo) {\r\n                                modelInfo.clear();\r\n                            }\r\n                        });\r\n                    });\r\n                    hasUpdated = true;\r\n                } else if (hasUpdated) {\r\n                    this._lodStateInCamera.forEach((lodState, camera): void => {\r\n                        const lodInfo = lodState.get(lodGroup);\r\n                        if (lodInfo && lodInfo.usedLevel !== lodInfo.lastUsedLevel) {\r\n                            const vecModels = lodModels.get(lodInfo.lastUsedLevel);\r\n                            if (vecModels) {\r\n                                vecModels.forEach((model): void => {\r\n                                    const modelInfo = this._modelsInLODGroup.get(model);\r\n                                    if (modelInfo) {\r\n                                        modelInfo.clear();\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (hasUpdated) {\r\n                    this._lodStateInCamera.forEach((lodState, camera): void => {\r\n                        const lodInfo = lodState.get(lodGroup);\r\n                        if (lodInfo) {\r\n                            const usedLevel = lodInfo.usedLevel;\r\n                            const vecModels = lodModels.get(usedLevel);\r\n                            if (vecModels) {\r\n                                vecModels.forEach((model): void => {\r\n                                    const modelInfo = this._modelsInLODGroup.get(model);\r\n                                    if (modelInfo && model.node && model.node.active) {\r\n                                        modelInfo.set(camera, true);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isLodModelCulled (camera: Camera, model: Model): boolean {\r\n        const modelInfo = this._modelsInLODGroup.get(model);\r\n        if (!modelInfo) {\r\n            return false;\r\n        }\r\n\r\n        return !modelInfo.has(camera);\r\n    }\r\n\r\n    clearCache (): void {\r\n        this._levelModels.clear();\r\n        this._modelsInLODGroup.clear();\r\n        this._lodStateInCamera.clear();\r\n        this._newAddedLodGroupVec.length = 0;\r\n    }\r\n\r\n    private isLodGroupVisibleByCamera (lodGroup: LODGroup, camera: Camera): boolean {\r\n        const layer = lodGroup.node.layer;\r\n        return (camera.visibility & layer) === layer;\r\n    }\r\n\r\n    private _renderScene: RenderScene = null!;\r\n\r\n    /**\r\n     * @zh LOD使用的model集合以及每个model当前能被看到的相机列表；包含每个LODGroup的每一级LOD\r\n     * @en The set of models used by the LOD and the list of cameras that each models can currently be seen,\r\n     *  contains each level of LOD for each LODGroup.\r\n     */\r\n    private _modelsInLODGroup: Map<Model, Map<Camera, boolean>> = new Map<Model, Map<Camera, boolean>>();\r\n\r\n    /**\r\n      * @zh 指定相机下，LODGroup使用哪一级的LOD\r\n      * @en Specify which level of LOD is used by the LODGroup under the camera.\r\n      */\r\n    private _lodStateInCamera: Map<Camera, Map<LODGroup, LODInfo>> = new Map<Camera, Map<LODGroup, LODInfo>>();\r\n\r\n    /**\r\n      * @zh 上一帧添加的lodgroup\r\n      * @en The lodgroup added in the previous frame.\r\n      */\r\n    private _newAddedLodGroupVec: Array<LODGroup> = [];\r\n\r\n    private _levelModels: Map<LODGroup, Map<number, Array<Model>>> = new Map<LODGroup, Map<number, Array<Model>>>();\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { Model } from './model';\r\nimport { Vec3, assertIsTrue, v3 } from '../../core';\r\nimport { RenderScene } from '..';\r\nimport { Device, deviceManager } from '../../gfx';\r\nimport { Node } from '../../scene-graph';\r\nimport { Camera, CameraProjection } from './camera';\r\n\r\n/**\r\n * @engineInternal\r\n * @mangle\r\n */\r\nexport class LODData {\r\n    // Range in [0, 1].\r\n    screenUsagePercentage = 1.0;\r\n\r\n    private _models: Model[] = [];\r\n\r\n    get models (): readonly Model[] {\r\n        return this._models;\r\n    }\r\n\r\n    public addModel (model: Model): void {\r\n        this._models.splice(0, 0, model);\r\n    }\r\n\r\n    public eraseModel (model: Model): void {\r\n        const removeIndex = this._models.indexOf(model);\r\n        if (removeIndex >= 0) {\r\n            this._models.splice(removeIndex, 1);\r\n        }\r\n    }\r\n\r\n    public clearModels (): void {\r\n        this._models.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @engineInternal\r\n * @mangle\r\n */\r\nexport class LODGroup {\r\n    public scene?: RenderScene;\r\n\r\n    public node: Node = null!;\r\n\r\n    protected declare _device: Device;\r\n\r\n    public enabled = true;\r\n\r\n    private _localBoundaryCenter: Vec3 = v3(0, 0, 0);\r\n\r\n    /**\r\n     * @en Object Size in local space, may be auto-calculated value from object bounding box or value from user input.\r\n    */\r\n    protected _objectSize = 1;\r\n\r\n    /**\r\n     *@en The array of LODs\r\n     */\r\n    protected _lodDataArray: LODData[] = [];\r\n\r\n    /**\r\n     * For editor only, users maybe operate several LOD's object\r\n     */\r\n    protected _lockedLODLevelVec: number[] = [];\r\n\r\n    private _isLockLevelChanged = false;\r\n\r\n    constructor () {\r\n        this._device = deviceManager.gfxDevice;\r\n    }\r\n\r\n    set localBoundaryCenter (val: Readonly<Vec3>) {  this._localBoundaryCenter.set(val); }\r\n\r\n    get localBoundaryCenter (): Readonly<Vec3> { return this._localBoundaryCenter.clone(); }\r\n\r\n    get lodCount (): number { return this._lodDataArray.length; }\r\n\r\n    set objectSize (val: number) {\r\n        this._objectSize = val;\r\n    }\r\n\r\n    get objectSize (): number { return this._objectSize; }\r\n\r\n    get lodDataArray (): readonly LODData[] { return this._lodDataArray; }\r\n    attachToScene (scene: RenderScene): void {\r\n        this.scene = scene;\r\n    }\r\n\r\n    detachFromScene (): void {\r\n        this.scene = null!;\r\n    }\r\n\r\n    lockLODLevels (lockLev: number[]): void {\r\n        if (lockLev.length !== this._lockedLODLevelVec.length) {\r\n            this._isLockLevelChanged = true;\r\n        } else {\r\n            const size = lockLev.length;\r\n            let index = 0;\r\n            for (; index < size; index++) {\r\n                if (lockLev[index] !== this._lockedLODLevelVec[index]) {\r\n                    this._isLockLevelChanged = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this._lockedLODLevelVec = lockLev.slice();\r\n    }\r\n\r\n    isLockLevelChanged (): boolean {\r\n        return this._isLockLevelChanged;\r\n    }\r\n\r\n    resetLockChangeFlag (): void {\r\n        this._isLockLevelChanged = false;\r\n    }\r\n\r\n    getLockedLODLevels (): readonly number[] {\r\n        return this._lockedLODLevelVec;\r\n    }\r\n\r\n    clearLODs (): void {\r\n        this._lodDataArray.length = 0;\r\n    }\r\n\r\n    insertLOD (index: number, lod: LODData): void {\r\n        this._lodDataArray.splice(index, 0, lod);\r\n    }\r\n\r\n    updateLOD (index: number, lod: LODData): void {\r\n        this._lodDataArray[index] = lod;\r\n    }\r\n\r\n    eraseLOD (index: number): void {\r\n        this._lodDataArray.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param camera current perspective camera\r\n     * @returns visible LOD index in lodGroup\r\n     */\r\n    getVisibleLODLevel (camera: Camera): number {\r\n        const screenUsagePercentage = this.getScreenUsagePercentage(camera);\r\n\r\n        let lodIndex = -1;\r\n        for (let i = 0; i < this.lodCount; ++i) {\r\n            const lod = this.lodDataArray[i];\r\n            if (screenUsagePercentage >= lod.screenUsagePercentage) {\r\n                lodIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        return lodIndex;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param camera current perspective camera\r\n     * @returns height of current lod group relative to camera position in screen space, aka. relativeHeight\r\n     */\r\n    getScreenUsagePercentage (camera: Camera): number {\r\n        if (!this.node) return 0;\r\n\r\n        let distance: number | undefined;\r\n        if (camera.projectionType === CameraProjection.PERSPECTIVE) {\r\n            distance =  Vec3.len(this.localBoundaryCenter.transformMat4(this.node.worldMatrix).subtract(camera.node.worldPosition));\r\n        }\r\n\r\n        return this.distanceToScreenUsagePercentage(camera, distance, this.getWorldSpaceSize());\r\n    }\r\n\r\n    private distanceToScreenUsagePercentage (camera: Camera, distance: number | undefined, size: number): number {\r\n        if (camera.projectionType === CameraProjection.PERSPECTIVE) {\r\n            assertIsTrue(typeof distance === 'number', 'distance must be present for perspective projection');\r\n            return (size * camera.matProj.m05) / (distance * 2.0); // note: matProj.m11 is 1 / tan(fov / 2.0)\r\n        } else {\r\n            return size * camera.matProj.m05 * 0.5;\r\n        }\r\n    }\r\n\r\n    private getWorldSpaceSize (): number {\r\n        const scale = this.node.scale;\r\n        const maxScale = Math.max(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));\r\n        return maxScale * this.objectSize;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { screenAdapter } from 'pal/screen-adapter';\r\nimport { Orientation } from '../../../pal/screen-adapter/enum-type';\r\nimport {\r\n    TextureType, TextureUsageBit, Format, RenderPass, Texture, Framebuffer,\r\n    RenderPassInfo, Device, TextureInfo, FramebufferInfo, Swapchain, SurfaceTransform, TextureFlagBit, TextureFlags,\r\n} from '../../gfx';\r\nimport { Root } from '../../root';\r\nimport { Camera } from '../scene';\r\n\r\nexport interface IRenderWindowInfo {\r\n    title?: string;\r\n    width: number;\r\n    height: number;\r\n    renderPassInfo: RenderPassInfo;\r\n    swapchain?: Swapchain;\r\n    externalResLow?: number; // for vulkan vkImage/opengl es texture created from external\r\n    externalResHigh?: number; // for vulkan vkImage created from external\r\n    externalFlag?: TextureFlags; // external texture type normal or oes\r\n}\r\n\r\nconst orientationMap: Record<Orientation, SurfaceTransform> = {\r\n    [Orientation.PORTRAIT]: SurfaceTransform.IDENTITY,\r\n    [Orientation.LANDSCAPE_RIGHT]: SurfaceTransform.ROTATE_90,\r\n    [Orientation.PORTRAIT_UPSIDE_DOWN]: SurfaceTransform.ROTATE_180,\r\n    [Orientation.LANDSCAPE_LEFT]: SurfaceTransform.ROTATE_270,\r\n};\r\n\r\n// _windowCount is used to generate the render window Id.\r\n// It is monotonic increasing and unique.\r\nlet _windowCount = 0;\r\n\r\n/**\r\n * @en The render window represents the render target, it could be an off screen frame buffer or the on screen buffer.\r\n * @zh 渲染窗口代表了一个渲染目标，可以是离屏的帧缓冲，也可以是屏幕缓冲\r\n */\r\nexport class RenderWindow {\r\n    /**\r\n     * @en Get window width. Pre-rotated (i.e. rotationally invariant, always in identity/portrait mode) if possible.\r\n     * If you want to get oriented size instead, you should use [[renderer.scene.Camera.width]] which corresponds to the current screen rotation.\r\n     * @zh 获取窗口宽度。如果支持交换链预变换，返回值将始终处于单位旋转（竖屏）坐标系下。如果需要获取旋转后的尺寸，请使用 [[renderer.scene.Camera.width]]。\r\n     */\r\n    get width (): number {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * @en Get window height. Pre-rotated (i.e. rotationally invariant, always in identity/portrait mode) if possible.\r\n     * If you want to get oriented size instead, you should use [[renderer.scene.Camera.width]] which corresponds to the current screen rotation.\r\n     * @zh 获取窗口高度。如果支持交换链预变换，返回值将始终处于单位旋转（竖屏）坐标系下。如果需要获取旋转后的尺寸，请使用 [[renderer.scene.Camera.height]]。\r\n     */\r\n    get height (): number {\r\n        return this._height;\r\n    }\r\n\r\n    /**\r\n     * @en Get the swapchain for this window, if there is one\r\n     * @zh 如果存在的话，获取此窗口的交换链\r\n     */\r\n    get swapchain (): Swapchain {\r\n        return this._swapchain;\r\n    }\r\n\r\n    /**\r\n     * @en Get window frame buffer.\r\n     * @zh 帧缓冲对象。\r\n     */\r\n    get framebuffer (): Framebuffer {\r\n        return this._framebuffer!;\r\n    }\r\n\r\n    get cameras (): Camera[] {\r\n        return this._cameras;\r\n    }\r\n\r\n    /**\r\n     * @en Get render window Id.\r\n     * Render windowd Id is used to identify the render window in the render pipeline.\r\n     * @zh 获得渲染窗口Id。渲染窗口Id用于在渲染管线中标识渲染窗口。\r\n     */\r\n    get renderWindowId (): number {\r\n        return this._renderWindowId;\r\n    }\r\n\r\n    /**\r\n     * @en Get the name of the color attachment.\r\n     * The name is used to identify the color attachment in the render pipeline.\r\n     * @zh 获取颜色附件的名称。用于自定义渲染管线中的资源注册。\r\n     */\r\n    get colorName (): string {\r\n        return this._colorName;\r\n    }\r\n\r\n    /**\r\n     * @en Get the name of the depth stencil attachment.\r\n     * The name is used to identify the depth stencil attachment in the render pipeline.\r\n     * @zh 获取深度模板附件的名称。用于自定义渲染管线中的资源注册。\r\n     */\r\n    get depthStencilName (): string {\r\n        return this._depthStencilName;\r\n    }\r\n\r\n    /**\r\n     * @en The render pipeline should handle the resize event properly\r\n     * @zh 渲染管线应该正确处理窗口大小变化事件\r\n     */\r\n    isRenderWindowResized (): boolean {\r\n        return this._isResized;\r\n    }\r\n\r\n    /**\r\n     * @en The render pipeline should set this value to false after handling the resize event\r\n     * @zh 渲染管线应该在处理完窗口大小变化事件后将此值设置为 false\r\n     */\r\n    setRenderWindowResizeHandled (): void {\r\n        this._isResized = false;\r\n    }\r\n\r\n    protected _title = '';\r\n    protected _width = 1;\r\n    protected _height = 1;\r\n    protected _swapchain: Swapchain = null!;\r\n    protected _renderPass: RenderPass | null = null;\r\n    protected _colorTextures: Texture[] = [];\r\n    protected _depthStencilTexture: Texture | null = null;\r\n    protected _cameras: Camera[] = [];\r\n    protected _hasOnScreenAttachments = false;\r\n    protected _hasOffScreenAttachments = false;\r\n    protected _framebuffer: Framebuffer | null = null;\r\n    protected _device: Device | null = null;\r\n    // _renderWindowId is used to identify the render window in the render pipeline\r\n    protected _renderWindowId = _windowCount++;\r\n    // _isResized is used to indicate whether the render window is resized\r\n    protected _isResized = true;\r\n    // _colorName is used to identify the color attachment in the render pipeline\r\n    protected _colorName = `Color${this._renderWindowId}`;\r\n    // _depthStencilName is used to identify the depth stencil attachment in the render pipeline\r\n    protected _depthStencilName = `DepthStencil${this._renderWindowId}`;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    public static registerCreateFunc (root: Root): void {\r\n        root._createWindowFun = (_root: Root): RenderWindow => new RenderWindow(_root);\r\n    }\r\n\r\n    private constructor (root: Root) {}\r\n\r\n    public initialize (device: Device, info: IRenderWindowInfo): boolean {\r\n        if (info.title !== undefined) {\r\n            this._title = info.title;\r\n        }\r\n\r\n        if (info.swapchain !== undefined) {\r\n            this._swapchain = info.swapchain;\r\n        }\r\n\r\n        this._width = info.width;\r\n        this._height = info.height;\r\n        this._device = device;\r\n        this._renderPass = device.createRenderPass(info.renderPassInfo);\r\n\r\n        if (info.swapchain) {\r\n            this._swapchain = info.swapchain;\r\n            this._colorTextures.push(info.swapchain.colorTexture);\r\n            this._depthStencilTexture = info.swapchain.depthStencilTexture;\r\n        } else {\r\n            for (let i = 0; i < info.renderPassInfo.colorAttachments.length; i++) {\r\n                const textureInfo = new TextureInfo(\r\n                    TextureType.TEX2D,\r\n                    TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_SRC,\r\n                    info.renderPassInfo.colorAttachments[i].format,\r\n                    this._width,\r\n                    this._height,\r\n                );\r\n\r\n                if (info.externalFlag && (info.externalFlag & TextureFlagBit.EXTERNAL_NORMAL || info.externalFlag & TextureFlagBit.EXTERNAL_OES)) {\r\n                    textureInfo.flags |= info.externalFlag;\r\n                    textureInfo.externalRes = info.externalResLow ? info.externalResLow : 0;\r\n                }\r\n                this._colorTextures.push(device.createTexture(textureInfo));\r\n            }\r\n            if (info.renderPassInfo.depthStencilAttachment && info.renderPassInfo.depthStencilAttachment.format !== Format.UNKNOWN) {\r\n                this._depthStencilTexture = device.createTexture(new TextureInfo(\r\n                    TextureType.TEX2D,\r\n                    TextureUsageBit.DEPTH_STENCIL_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n                    info.renderPassInfo.depthStencilAttachment.format,\r\n                    this._width,\r\n                    this._height,\r\n                ));\r\n                this._hasOffScreenAttachments = true;\r\n            }\r\n        }\r\n        this._framebuffer = device.createFramebuffer(new FramebufferInfo(\r\n            this._renderPass,\r\n            this._colorTextures,\r\n            this._depthStencilTexture,\r\n        ));\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.clearCameras();\r\n\r\n        if (this._framebuffer) {\r\n            this._framebuffer.destroy();\r\n            this._framebuffer = null;\r\n        }\r\n\r\n        if (this._depthStencilTexture) {\r\n            this._depthStencilTexture.destroy();\r\n            this._depthStencilTexture = null;\r\n        }\r\n\r\n        for (let i = 0; i < this._colorTextures.length; i++) {\r\n            const colorTexture = this._colorTextures[i];\r\n            if (colorTexture) {\r\n                colorTexture.destroy();\r\n            }\r\n        }\r\n        this._colorTextures.length = 0;\r\n        this._device = null;\r\n    }\r\n\r\n    /**\r\n     * @en Resize window.\r\n     * @zh 重置窗口大小。\r\n     * @param width The new width.\r\n     * @param height The new height.\r\n     */\r\n    public resize (width: number, height: number): void {\r\n        if (this._swapchain) {\r\n            this._swapchain.resize(width, height, orientationMap[screenAdapter.orientation]);\r\n            this._width = this._swapchain.width;\r\n            this._height = this._swapchain.height;\r\n        } else {\r\n            for (let i = 0; i < this._colorTextures.length; i++) {\r\n                this._colorTextures[i].resize(width, height);\r\n            }\r\n            if (this._depthStencilTexture) {\r\n                this._depthStencilTexture.resize(width, height);\r\n            }\r\n            this._width = width;\r\n            this._height = height;\r\n        }\r\n\r\n        if (this.framebuffer) {\r\n            this.framebuffer.destroy();\r\n            this._framebuffer = this._device!.createFramebuffer(new FramebufferInfo(\r\n                this._renderPass!,\r\n                this._colorTextures,\r\n                this._depthStencilTexture,\r\n            ));\r\n        }\r\n\r\n        this._cameras.forEach((camera) => {\r\n            camera.resize(width, height);\r\n        });\r\n\r\n        // This resize should only be handled by the render pipeline\r\n        this._isResized = true;\r\n    }\r\n\r\n    /**\r\n     * @en Extract all render cameras attached to the render window to the output cameras list\r\n     * @zh 将所有挂载到当前渲染窗口的摄像机存储到输出列表参数中\r\n     * @param cameras @en The output cameras list, should be empty before invoke this function\r\n     *                @zh 输出相机列表参数，传入时应该为空\r\n     */\r\n    public extractRenderCameras (cameras: Camera[]): void {\r\n        for (let j = 0; j < this._cameras.length; j++) {\r\n            const camera = this._cameras[j];\r\n            if (camera.enabled) {\r\n                camera.update();\r\n                cameras.push(camera);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Attach a new camera to the render window\r\n     * @zh 添加渲染相机\r\n     * @param camera @en The camera to attach @zh 要挂载的相机\r\n     */\r\n    public attachCamera (camera: Camera): void {\r\n        for (let i = 0; i < this._cameras.length; i++) {\r\n            if (this._cameras[i] === camera) {\r\n                return;\r\n            }\r\n        }\r\n        this._cameras.push(camera);\r\n        this.sortCameras();\r\n\r\n        // This resize should only be handled by the render pipeline\r\n        // If the camera is attached to the render window,\r\n        // resize handler should be called to update render window resouces\r\n        this._isResized = true;\r\n    }\r\n\r\n    /**\r\n     * @en Detach a camera from the render window\r\n     * @zh 移除场景中的渲染相机\r\n     * @param camera @en The camera to detach @zh 要移除的相机\r\n     */\r\n    public detachCamera (camera: Camera): void {\r\n        for (let i = 0; i < this._cameras.length; ++i) {\r\n            if (this._cameras[i] === camera) {\r\n                this._cameras.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clear all attached cameras\r\n     * @zh 清空全部渲染相机\r\n     */\r\n    public clearCameras (): void {\r\n        this._cameras.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Sort all attached cameras with priority\r\n     * @zh 按照优先级对所有挂载的相机排序\r\n     */\r\n    public sortCameras (): void {\r\n        this._cameras.sort((a: Camera, b: Camera): number => a.priority - b.priority);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD } from 'internal:constants';\r\nimport { Asset } from '../assets/asset';\r\nimport { getError, macro, path, removeProperty, replaceProperty, cclegacy } from '../../core';\r\nimport Cache from './cache';\r\nimport assetManager, { AssetManager } from './asset-manager';\r\nimport { resources } from './bundle';\r\nimport dependUtil from './depend-util';\r\nimport downloader, { Downloader } from './downloader';\r\nimport { getUuidFromURL, transform } from './helper';\r\nimport parser, { Parser } from './parser';\r\nimport { releaseManager } from './release-manager';\r\nimport { assets, BuiltinBundleName, bundles } from './shared';\r\nimport { parseLoadResArgs, setDefaultProgressCallback } from './utilities';\r\nimport factory from './factory';\r\nimport RequestItem from './request-item';\r\n\r\nconst ImageFmts = ['.png', '.jpg', '.bmp', '.jpeg', '.gif', '.ico', '.tiff', '.webp', '.image', '.pvr', '.pkm', '.astc'];\r\nconst AudioFmts = ['.mp3', '.ogg', '.wav', '.m4a'];\r\n\r\nfunction GetTrue (): boolean { return true; }\r\n\r\nconst md5Pipe = {\r\n    transformURL (url: string): string {\r\n        const uuid = getUuidFromURL(url);\r\n        if (!uuid) { return url; }\r\n        const bundle = bundles.find((b): boolean => !!b.getAssetInfo(uuid));\r\n        if (!bundle) { return url; }\r\n        let hashValue = '';\r\n        const info = bundle.getAssetInfo(uuid);\r\n        if (url.startsWith(bundle.base + bundle.config.nativeBase)) {\r\n            hashValue = info!.nativeVer || '';\r\n        } else {\r\n            hashValue = info!.ver || '';\r\n        }\r\n        if (!hashValue || url.indexOf(hashValue) !== -1) { return url; }\r\n        let hashPatchInFolder = false;\r\n        if (path.extname(url) === '.ttf') {\r\n            hashPatchInFolder = true;\r\n        }\r\n        if (hashPatchInFolder) {\r\n            const dirname = path.dirname(url);\r\n            const basename = path.basename(url);\r\n            url = `${dirname}.${hashValue}/${basename}`;\r\n        } else {\r\n            url = url.replace(/.*[/\\\\][0-9a-fA-F]{2}[/\\\\]([0-9a-fA-F-@]{8,})/, (match, uuid): string => `${match}.${hashValue}`);\r\n        }\r\n\r\n        return url;\r\n    },\r\n};\r\n\r\ntype LoadProgressCallback = (completedCount: number, totalCount: number, item: any) => void;\r\ntype LoadCompleteCallback<T> = (error: Error | null, asset: T) => void;\r\ntype LoadDirCompleteCallback<T> = (error: Error | null, asset: T[], urls: string[]) => void;\r\n\r\n/**\r\n * @en Loader for resource loading process. The engine automatically initialize its singleton object [[loader]].\r\n * @zh 资源加载管理器，引擎会自动创建一个单例对象 [[loader]]。\r\n *\r\n * @class loader\r\n * @static\r\n * @deprecated since v3.0 loader is deprecated, please backup your project and upgrade to assetManager\r\n */\r\nexport class CCLoader {\r\n    /**\r\n     * @en The default progression callback during the loading process,\r\n     * if no progression callback is passed to [[load]] function, then this default callback will be used.\r\n     * @zh Loader 默认的进度回调函数，如果在调用 [[load]] 函数时没有指定进度回调函数的话，会调用默认进度回调函数。\r\n     *\r\n     * @deprecated since v3.0, loader.onProgress is deprecated, please transfer onProgress to API as a parameter\r\n     */\r\n    public set onProgress (val: ((finished: number, total: number, item: RequestItem) => void)) {\r\n        setDefaultProgressCallback(val);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _autoReleaseSetting: Record<string, boolean> = Object.create(null);\r\n    private _parseLoadResArgs = parseLoadResArgs;\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public get _cache (): Record<string, Asset> {\r\n        if (assets instanceof Cache) {\r\n            return assets.map!;\r\n        } else {\r\n            const map = {};\r\n            assets.forEach((val, key): void => {\r\n                map[key] = val;\r\n            });\r\n            return map;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Load resources with a progression callback and a complete callback.<br>\r\n     *\r\n     * @zh\r\n     * 使用进度回调和完整回调加载资源。<br>\r\n     *\r\n     * @example\r\n     * ```TypeScript\r\n     * loader.load('a.png', function (err, tex) {\r\n     *     log('Result should be a texture: ' + (tex instanceof Texture2D));\r\n     * });\r\n     *\r\n     * loader.load('http://example.com/a.png', function (err, tex) {\r\n     *     log('Should load a texture from external url: ' + (tex instanceof Texture2D));\r\n     * });\r\n     *\r\n     * loader.load({url: 'http://example.com/getImageREST?file=a.png', type: 'png'}, function (err, tex) {\r\n     *     log('Should load a texture from RESTful API by specify the type: ' + (tex instanceof Texture2D));\r\n     * });\r\n     * ```\r\n     *\r\n     * @param res - Url list in an array\r\n     * @param progressCallback - Callback invoked when progression change\r\n     * @param {Number} progressCallback.completedCount - The number of the items that are already completed\r\n     * @param {Number} progressCallback.totalCount - The total number of the items\r\n     * @param {Object} progressCallback.item - The latest item which flow out the pipeline\r\n     * @param completeCallback - Callback invoked when all resources loaded\r\n     * @deprecated since v3.0, loader.load is deprecated, please use assetManager.loadRemote instead\r\n     */\r\n    public load (res: string|string[]|Record<string, any>, progressCallback?: ((...args) => void)|null, completeCallback?: ((...args) => void)|null): void {\r\n        if (completeCallback === undefined) {\r\n            if (progressCallback !== undefined) {\r\n                completeCallback = progressCallback;\r\n                progressCallback = null;\r\n            }\r\n        }\r\n        const requests = Array.isArray(res) ? res : [res];\r\n        for (let i = 0; i < requests.length; i++) {\r\n            const item = requests[i];\r\n            if (typeof item === 'string') {\r\n                requests[i] = { url: item, __isNative__: true };\r\n            } else {\r\n                if (item.type) {\r\n                    item.ext = `.${item.type}`;\r\n                    item.type = undefined;\r\n                }\r\n\r\n                if (item.url) {\r\n                    item.__isNative__ = true;\r\n                }\r\n            }\r\n        }\r\n        const images: any[] = [];\r\n        const audios: any[] = [];\r\n        assetManager.loadAny(requests, null, (finish, total, item): void => {\r\n            if (item.content) {\r\n                if (ImageFmts.includes(item.ext)) {\r\n                    images.push(item.content);\r\n                } else if (AudioFmts.includes(item.ext)) {\r\n                    audios.push(item.content);\r\n                }\r\n            }\r\n            if (progressCallback) { progressCallback(finish, total, item); }\r\n        }, (err, native): void => {\r\n            let out: any = null;\r\n            if (!err) {\r\n                native = Array.isArray(native) ? native : [native];\r\n                for (let i = 0; i < native.length; i++) {\r\n                    const item = native[i];\r\n                    if (!(item instanceof Asset)) {\r\n                        let asset = item;\r\n                        const url = (requests[i] as Record<string, any>).url;\r\n                        if (images.includes(asset)) {\r\n                            factory.create(url, item, '.png', {}, (err, image): void => {\r\n                                asset = native[i] = image;\r\n                            });\r\n                        } else if (audios.includes(asset)) {\r\n                            factory.create(url, item, '.mp3', {}, (err, audio): void => {\r\n                                asset = native[i] = audio;\r\n                            });\r\n                        }\r\n                        assets.add(url, asset);\r\n                    }\r\n                }\r\n                if (native.length > 1) {\r\n                    const map = Object.create(null);\r\n                    native.forEach((asset): void => {\r\n                        map[asset._uuid] = asset;\r\n                    });\r\n                    out = { isCompleted: GetTrue, _map: map };\r\n                } else {\r\n                    out = native[0];\r\n                }\r\n            }\r\n            if (completeCallback) { completeCallback(err, out); }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Gets a new XMLHttpRequest instance.\r\n     * @zh 获取一个新的 XMLHttpRequest 的实例。\r\n     *\r\n     * @deprecated since v3.0 loader.getXMLHttpRequest is deprecated, please use XMLHttpRequest directly\r\n     */\r\n    public getXMLHttpRequest (): XMLHttpRequest {\r\n        return new XMLHttpRequest();\r\n    }\r\n\r\n    /**\r\n     * @en Returns an item in pipeline.\r\n     * @zh 根据 id 获取一个 item\r\n     * @param id The id of the item\r\n     *\r\n     * @return {Object}\r\n     * @deprecated since v3.0 loader.getItem is deprecated, please use assetManager.assets.get instead\r\n     */\r\n    public getItem (id): { content: Asset | null | undefined; } | null {\r\n        return assetManager.assets.has(id) ? { content: assetManager.assets.get(id) } : null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Load assets from the \"resources\" folder inside the \"assets\" folder of your project.<br>\r\n     * <br>\r\n     * Note: All asset URLs in Creator use forward slashes, URLs using backslashes will not work.\r\n     * @zh\r\n     * 从项目的 “assets” 文件夹下的 “resources” 文件夹中加载资源<br>\r\n     * <br>\r\n     * 注意：Creator 中的所有资源 URL 都使用正斜杠，使用反斜杠的 URL 将不起作用。\r\n     *\r\n     * @deprecated since v3.0 loader.loadRes is deprecated, please use resources.load  instead\r\n     * @param url - Url of the target resource.\r\n     *                       The url is relative to the \"resources\" folder, extensions must be omitted.\r\n     * @param type - Only asset of type will be loaded if this argument is supplied.\r\n     * @param progressCallback - Callback invoked when progression change.\r\n     * @param {Number} progressCallback.completedCount - The number of the items that are already completed.\r\n     * @param {Number} progressCallback.totalCount - The total number of the items.\r\n     * @param {Object} progressCallback.item - The latest item which flow out the pipeline.\r\n     * @param completeCallback - Callback invoked when the resource loaded.\r\n     * @param {Error} completeCallback.error - The error info or null if loaded successfully.\r\n     * @param {Object} completeCallback.resource - The loaded resource if it can be found otherwise returns null.\r\n     * @example\r\n     * ```typescript\r\n     * // load the prefab (project/assets/resources/misc/character/cocos) from resources folder\r\n     * loader.loadRes('misc/character/cocos', function (err, prefab) {\r\n     *     if (err) {\r\n     *         error(err.message || err);\r\n     *         return;\r\n     *     }\r\n     *     log('Result should be a prefab: ' + (prefab instanceof Prefab));\r\n     * });\r\n     *\r\n     * // load the sprite frame of (project/assets/resources/imgs/cocos.png) from resources folder\r\n     * loader.loadRes('imgs/cocos', SpriteFrame, function (err, spriteFrame) {\r\n     *     if (err) {\r\n     *         error(err.message || err);\r\n     *         return;\r\n     *     }\r\n     *     log('Result should be a sprite frame: ' + (spriteFrame instanceof SpriteFrame));\r\n     * });\r\n     *\r\n     */\r\n    public loadRes<T extends Asset> (\r\n        url: string,\r\n        type: Constructor<T>,\r\n        progressCallback: LoadProgressCallback,\r\n        completeCallback: LoadCompleteCallback<T>,\r\n    ): any;\r\n    public loadRes<T extends Asset> (\r\n        url: string,\r\n        type: Constructor<T>,\r\n        completeCallback: LoadCompleteCallback<T>,\r\n    ): any;\r\n    public loadRes<T extends Asset> (\r\n        url: string,\r\n        progressCallback: LoadProgressCallback,\r\n        completeCallback: LoadCompleteCallback<T>,\r\n    ): any;\r\n    public loadRes<T extends Asset> (\r\n        url: string,\r\n        completeCallback: LoadCompleteCallback<T>,\r\n    ): any;\r\n    public loadRes<T extends Asset> (\r\n        url: string,\r\n        type?: Constructor<T> | LoadCompleteCallback<T> | LoadProgressCallback,\r\n        progressCallback?: LoadProgressCallback | LoadCompleteCallback<T>,\r\n        completeCallback?: LoadCompleteCallback<T>,\r\n    ): any {\r\n        const { type: _type, onProgress, onComplete } = this._parseLoadResArgs(\r\ntype as any,\r\n            progressCallback as LoadProgressCallback,\r\n            completeCallback as LoadCompleteCallback<T>,\r\n        );\r\n        const extname = path.extname(url);\r\n        if (extname && !resources.getInfoWithPath(url, _type)) {\r\n            // strip extname\r\n            url = url.slice(0, -extname.length);\r\n        }\r\n        resources.load(url, _type as Constructor<T>, onProgress, onComplete);\r\n    }\r\n\r\n    /**\r\n     * @en This method is like [[loadRes]] except that it accepts array of url.\r\n     * @zh 此方法除了接受 URL 数组参数外，与 [[loadRes]] 方法相同。\r\n     *\r\n     * @deprecated since v3.0 loader.loadResArray is deprecated, please use resources.load instead\r\n     * @param urls - Array of URLs of the target resource.\r\n     *                          The url is relative to the \"resources\" folder, extensions must be omitted.\r\n     * @param type - Only asset of type will be loaded if this argument is supplied.\r\n     * @param progressCallback - Callback invoked when progression change.\r\n     * @param {Number} progressCallback.completedCount - The number of the items that are already completed.\r\n     * @param {Number} progressCallback.totalCount - The total number of the items.\r\n     * @param {Object} progressCallback.item - The latest item which flow out the pipeline.\r\n     * @param completeCallback - A callback which is called when all assets have been loaded, or an error occurs.\r\n     * @param {Error} completeCallback.error - If one of the asset failed, the complete callback is immediately called\r\n     *                                         with the error. If all assets are loaded successfully, error will be null.\r\n     * @param {Asset[]|Array} completeCallback.assets - An array of all loaded assets.\r\n     *                                                     If nothing to load, assets will be an empty array.\r\n     * @example\r\n     * ```typescript\r\n     * // load the SpriteFrames from resources folder\r\n     * let spriteFrames;\r\n     * let urls = ['misc/characters/character_01', 'misc/weapons/weapons_01'];\r\n     * loader.loadResArray(urls, SpriteFrame, function (err, assets) {\r\n     *     if (err) {\r\n     *         error(err);\r\n     *         return;\r\n     *     }\r\n     *     spriteFrames = assets;\r\n     *     // ...\r\n     * });\r\n     * ```\r\n     */\r\n    public loadResArray<T extends Asset> (\r\n        urls: string[],\r\n        type?: Constructor<T>,\r\n        progressCallback?: LoadProgressCallback,\r\n        completeCallback?: LoadCompleteCallback<T[]>,\r\n    ): void {\r\n        const { type: _type, onProgress, onComplete } = this._parseLoadResArgs<LoadCompleteCallback<Asset[]>>(\r\ntype as any,\r\n            progressCallback as LoadProgressCallback,\r\n            completeCallback as LoadCompleteCallback<Asset[]>,\r\n        );\r\n        urls.forEach((url, i): void => {\r\n            const extname = path.extname(url);\r\n            if (extname && !resources.getInfoWithPath(url, _type)) {\r\n                // strip extname\r\n                urls[i] = url.slice(0, -extname.length);\r\n            }\r\n        });\r\n        resources.load(urls, _type, onProgress, onComplete);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Load all assets in a folder inside the \"assets/resources\" folder of your project.<br>\r\n     * <br>\r\n     * Note: All asset URLs in Creator use forward slashes, URLs using backslashes will not work.\r\n     * @zh\r\n     * 将所有资产加载到项目 “assets / resources” 文件夹中\r\n     * <br>\r\n     * 注意：Creator 中的所有资源 URL 都使用正斜杠，使用反斜杠的 URL 将不起作用。\r\n     *\r\n     * @deprecated since v3.0 loader.loadResDir is deprecated, please use resources.loadDir instead\r\n     * @param url - Url of the target folder.\r\n     *                       The url is relative to the \"resources\" folder, extensions must be omitted.\r\n     * @param type - Only asset of type will be loaded if this argument is supplied.\r\n     * @param progressCallback - Callback invoked when progression change.\r\n     * @param {Number} progressCallback.completedCount - The number of the items that are already completed.\r\n     * @param {Number} progressCallback.totalCount - The total number of the items.\r\n     * @param {Object} progressCallback.item - The latest item which flow out the pipeline.\r\n     * @param completeCallback - A callback which is called when all assets have been loaded, or an error occurs.\r\n     * @param {Error} completeCallback.error - If one of the asset failed, the complete callback is immediately called\r\n     *                                         with the error. If all assets are loaded successfully, error will be null.\r\n     * @param {Asset[]} completeCallback.assets - An array of all loaded assets.\r\n     *                                             If nothing to load, assets will be an empty array.\r\n     * @param {String[]} completeCallback.urls - An array that lists all the URLs of loaded assets.\r\n     * ```typescript\r\n     * // load the texture (resources/imgs/cocos.png) and the corresponding sprite frame\r\n     * loader.loadResDir('imgs/cocos', function (err, assets) {\r\n     *     if (err) {\r\n     *         error(err);\r\n     *         return;\r\n     *     }\r\n     *     let texture = assets[0];\r\n     *     let spriteFrame = assets[1];\r\n     * });\r\n     *\r\n     * // load all textures in \"resources/imgs/\"\r\n     * loader.loadResDir('imgs', Texture2D, function (err, textures) {\r\n     *     let texture1 = textures[0];\r\n     *     let texture2 = textures[1];\r\n     * });\r\n     *\r\n     * // load all JSONs in \"resources/data/\"\r\n     * loader.loadResDir('data', function (err, objects, urls) {\r\n     *     let data = objects[0];\r\n     *     let url = urls[0];\r\n     * });\r\n     * ```\r\n     */\r\n    public loadResDir<T extends Asset> (\r\n        url: string,\r\n        type: Constructor<T>,\r\n        progressCallback: LoadProgressCallback,\r\n        completeCallback: LoadDirCompleteCallback<T>,\r\n    ): any;\r\n    public loadResDir<T extends Asset> (\r\n        url: string,\r\n        type: Constructor<T>,\r\n        completeCallback: LoadDirCompleteCallback<T>,\r\n    ): any;\r\n    public loadResDir<T extends Asset> (\r\n        url: string,\r\n        progressCallback: LoadProgressCallback,\r\n        completeCallback: LoadDirCompleteCallback<T>,\r\n    ): any;\r\n    public loadResDir<T extends Asset> (\r\n        url: string,\r\n        completeCallback: LoadDirCompleteCallback<T>,\r\n    ): any;\r\n    public loadResDir<T extends Asset> (\r\n        url: string,\r\n        type?: Constructor<T> | LoadProgressCallback | LoadDirCompleteCallback<T>,\r\n        progressCallback?: LoadProgressCallback | LoadDirCompleteCallback<T>,\r\n        completeCallback?: LoadDirCompleteCallback<T>,\r\n    ): any {\r\n        const { type: _type, onProgress, onComplete } = this._parseLoadResArgs<LoadDirCompleteCallback<Asset>>(\r\ntype as any,\r\n            progressCallback as LoadProgressCallback,\r\n            completeCallback as LoadDirCompleteCallback<Asset>,\r\n        );\r\n        resources.loadDir(url, _type, onProgress, (err, out): void => {\r\n            let urls: string[] = [];\r\n            if (!err) {\r\n                const infos = resources.getDirWithPath(url, _type);\r\n                urls = infos.map((info): string => info.path);\r\n            }\r\n            if (onComplete) { onComplete(err, out, urls); }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get resource data by id. <br>\r\n     * When you load resources with [[load]] or [[loadRes]],\r\n     * the url will be the unique identity of the resource.\r\n     * After loaded, you can acquire them by passing the url to this API.\r\n     * @zh\r\n     * 根据 ID 获取资源数据。<br>\r\n     * 当使用 [[load]] 或 [[loadRes]] 来加载资源时，<br>\r\n     * URL 将是资源的唯一标识。<br>\r\n     * 在完成加载之后，你可以通过将 URL 传递给此 API 来获取它们。\r\n     *\r\n     * @param url\r\n     * @param type - Only asset of type will be returned if this argument is supplied.\r\n     * @deprecated since v3.0 loader.getRes is deprecated, please use resources.get instead\r\n     */\r\n    public getRes<T extends Asset> (url: string, type?: Constructor<T>): T | null {\r\n        return assets.has(url) ? assets.get(url) as T : resources.get<T>(url, type);\r\n    }\r\n\r\n    /**\r\n     * @en Get total resources count in loader.\r\n     * @zh 获取加载的总资源数量\r\n     * @deprecated since v3.0 loader.getResCount is deprecated, please use assetManager.assets.count instead\r\n     */\r\n    public getResCount (): number {\r\n        return assets.count;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get all resource dependencies of the requested asset in an array, including itself.<br>\r\n     * The owner parameter accept the following types: 1. The asset itself; 2. The resource url; 3. The asset's uuid.<br>\r\n     * The returned array stores the dependencies with their uuids, after retrieve dependencies,<br>\r\n     * you can release them, access dependent assets by passing the uuid to [[getRes]], or other stuffs you want.<br>\r\n     * For release all dependencies of an asset, please refer to [[release]]\r\n     * Here is some examples:\r\n     * @zh\r\n     * 获取一个指定资源的所有依赖资源，包含它自身，并保存在数组中返回。<br>\r\n     * owner 参数接收以下几种类型：1. 资源 asset 对象；2. 资源目录下的 url；3. 资源的 uuid。<br>\r\n     * 返回的数组将仅保存依赖资源的 uuid，获取这些 uuid 后，你可以从 loader 释放这些资源；通过 [[getRes]] 获取某个资源或者进行其他你需要的操作。<br>\r\n     * 想要释放一个资源及其依赖资源，可以参考 [[release]]。<br>\r\n     * 下面是一些示例代码：\r\n     * @example\r\n     * ```typescript\r\n     * // Release all dependencies of a loaded prefab\r\n     * let deps = loader.getDependsRecursively(prefab);\r\n     * loader.release(deps);\r\n     * // Retrieve all dependent textures\r\n     * let deps = loader.getDependsRecursively('prefabs/sample');\r\n     * let textures = [];\r\n     * for (let i = 0; i < deps.length; ++i) {\r\n     *     let item = loader.getRes(deps[i]);\r\n     *     if (item instanceof Texture2D) {\r\n     *         textures.push(item);\r\n     *     }\r\n     * }\r\n     * ```\r\n     *\r\n     * @deprecated since v3.0 loader.getDependsRecursively is deprecated, please use use assetManager.dependUtil.getDepsRecursively instead\r\n     * @param owner - The owner asset or the resource url or the asset's uuid\r\n     * @returns the dependencies list\r\n     */\r\n    public getDependsRecursively (owner: Asset|string): string[] {\r\n        if (!owner) { return []; }\r\n        const uuid = typeof owner === 'string' ? owner : owner._uuid;\r\n        return dependUtil.getDepsRecursively(uuid).concat([uuid]);\r\n    }\r\n\r\n    /**\r\n     * @en The md5 pipe in loader's pipeline, it could be absent if the project isn't build with md5 option.<br>\r\n     * It's used to modify the url to the real downloadable url with md5 suffix.\r\n     * @zh loader 中的 md5 加载管道，如果项目没有使用 md5 构建，则此项可能不存在。<br>\r\n     * 用于修改带有 md5 后缀的真实可下载的 URL 。\r\n     *\r\n     * @deprecated since v3.0 loader.md5Pipe is deprecated, assetLoader and md5Pipe were merged into assetManager.transformPipeline\r\n     */\r\n    public get md5Pipe (): {\r\n        transformURL(url: string): string;\r\n        } {\r\n        return md5Pipe;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The downloader in loader's pipeline, it's by default the second pipe.<br>\r\n     * It's used to download files with several handlers: pure text, image, script, audio, font, uuid.<br>\r\n     * You can add your own download function with addDownloadHandlers\r\n     * @zh\r\n     * loader 中的资源下载程序，默认情况下是第二个加载的。<br>\r\n     * 它用于下载带有多个处理程序的文件：纯文本，图像，脚本，音频，字体，uuid。<br>\r\n     * 您可以使用 addDownloadHandlers 来添加自己的下载函数\r\n     *\r\n     * @deprecated since v3.0 loader.downloader is deprecated, please use assetManager.downloader instead\r\n     */\r\n    get downloader (): Downloader {\r\n        return downloader;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The loader in loader's pipeline, it's by default the third pipe.<br>\r\n     * It's used to parse downloaded content with several handlers: JSON, image, plist, fnt, uuid.<br>\r\n     * You can add your own download function with addLoadHandlers\r\n     * @zh\r\n     * loader 中的资源下载程序，默认情况下是第三个加载的。<br>\r\n     * 它用于解析下载的内容及多个处理程序的文件：纯文本，图像，脚本，音频，字体，uuid。<br>\r\n     * 您可以使用 addLoadHandlers 来添加自己的下载函数\r\n     *\r\n     * @deprecated since v3.0 loader.loader is deprecated, please use assetManager.parser instead\r\n     */\r\n    get loader (): Parser {\r\n        return assetManager.parser;\r\n    }\r\n\r\n    /**\r\n     * @en Add custom supported types handler or modify existing type handler for download process.\r\n     * @zh 为下载程序添加自定义支持的类型处理程序或修改现有的类型处理程序。\r\n     * @example\r\n     * ```typescript\r\n     *  loader.addDownloadHandlers({\r\n     *      // This will match all url with `.scene` extension or all url with `scene` type\r\n     *      'scene' : function (url, callback) {}\r\n     *  });\r\n     * ```\r\n     * @param extMap Handlers for corresponding type in a map\r\n     * @deprecated since v3.0 loader.addDownloadHandlers is deprecated, please use assetManager.downloader.register instead\r\n     */\r\n    public addDownloadHandlers (extMap: Record<string, (item: { url: string }, cb: ((err: Error | null, data?: any | null) => void)) => void>): void {\r\n        const handler = Object.create(null);\r\n        for (const type in extMap) {\r\n            const func = extMap[type];\r\n            handler[`.${type}`] = (url, options, onComplete): void => {\r\n                func({ url }, onComplete);\r\n            };\r\n        }\r\n        downloader.register(handler);\r\n    }\r\n\r\n    /**\r\n     * @en Add custom supported types handler or modify existing type handler for load process.\r\n     * @zh 为加载程序添加自定义支持的类型处理程序或修改现有的类型处理程序。\r\n     * @example\r\n     * ```typescript\r\n     *  loader.addLoadHandlers({\r\n     *      // This will match all url with `.scene` extension or all url with `scene` type\r\n     *      'scene' : function (url, callback) {}\r\n     *  });\r\n     * ```\r\n     * @param extMap Handlers for corresponding type in a map\r\n     * @deprecated since v3.0 loader.addLoadHandlers is deprecated, please use assetManager.parser.register instead\r\n     */\r\n    public addLoadHandlers (extMap: Record<string, (config: { content: any }, cb: ((err: Error | null, data?: any | null) => void)) => void>): void {\r\n        const handler = Object.create(null);\r\n        for (const type in extMap) {\r\n            const func = extMap[type];\r\n            handler[`.${type}`] = (file, options, onComplete): void => {\r\n                func({ content: file }, onComplete);\r\n            };\r\n        }\r\n        parser.register(handler);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Release the content of an asset or an array of assets by uuid.<br>\r\n     * This method will not only remove the cache of the asset in loader, but also clean up its content.<br>\r\n     * For example, if you release a texture, the texture asset and its gl texture data will be freed up.<br>\r\n     * In complex project, you can use this function with [[getDependsRecursively]] to free up memory in critical circumstances.<br>\r\n     * Notice, this method may cause the texture to be unusable, if there are still other nodes use the same texture, they may turn to black\r\n     * and report gl errors.<br>\r\n     * @zh\r\n     * 通过 id（通常是资源 url）来释放一个资源或者一个资源数组。<br>\r\n     * 这个方法不仅会从 loader 中删除资源的缓存引用，还会清理它的资源内容。<br>\r\n     * 比如说，当你释放一个 texture 资源，这个 texture 和它的 gl 贴图数据都会被释放。<br>\r\n     * 在复杂项目中，我们建议你结合 [[getDependsRecursively]] 来使用，便于在设备内存告急的情况下更快地释放不再需要的资源的内存。<br>\r\n     * 注意，这个函数可能会导致资源贴图或资源所依赖的贴图不可用，如果场景中存在节点仍然依赖同样的贴图，它们可能会变黑并报 GL 错误。<br>\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // Release a texture which is no longer need\r\n     * loader.release(texture);\r\n     * // Release all dependencies of a loaded prefab\r\n     * let deps = loader.getDependsRecursively('prefabs/sample');\r\n     * loader.release(deps);\r\n     * // If there is no instance of this prefab in the scene, the prefab and its dependencies like textures, sprite frames, etc, will be freed up.\r\n     * // If you have some other nodes share a texture in this prefab, you can skip it in two ways:\r\n     * // 1. Forbid auto release a texture before release\r\n     * loader.setAutoRelease(texture2d, false);\r\n     * // 2. Remove it from the dependencies array\r\n     * let deps = loader.getDependsRecursively('prefabs/sample');\r\n     * let index = deps.indexOf(texture2d._uuid);\r\n     * if (index !== -1)\r\n     *     deps.splice(index, 1);\r\n     * loader.release(deps);\r\n     * ```\r\n     * @param asset Asset or assets to be released\r\n     * @deprecated since v3.0 loader.release is deprecated, please use assetManager.releaseAsset instead\r\n     */\r\n    public release (asset: Asset|string|Array<Asset|string>): void {\r\n        if (Array.isArray(asset)) {\r\n            for (let i = 0; i < asset.length; i++) {\r\n                let key = asset[i];\r\n                if (typeof key === 'string') { key = assets.get(key) as Asset; }\r\n                assetManager.releaseAsset(key);\r\n            }\r\n        } else if (asset) {\r\n            if (typeof asset === 'string') { asset = assets.get(asset) as Asset; }\r\n            assetManager.releaseAsset(asset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Release the asset by its object. Refer to [[release]] for detailed informations.\r\n     * @zh 通过资源对象自身来释放资源。详细信息请参考 [[release]]\r\n     * @param asset The asset to be released\r\n     *\r\n     * @deprecated since v3.0 loader.releaseAsset is deprecated, please use assetManager.releaseAsset instead\r\n     */\r\n    public releaseAsset (asset: Asset): void {\r\n        assetManager.releaseAsset(asset);\r\n    }\r\n\r\n    /**\r\n     * @en Release the asset loaded by [[loadRes]]. Refer to [[release]] for detailed informations.\r\n     * @zh 释放通过 [[loadRes]] 加载的资源。详细信息请参考 [[release]]\r\n     * @param res The asset url, it should be related path without extension to the `resources` folder.\r\n     * @param type If type is provided, the asset for correspond type will be returned\r\n     *\r\n     * @deprecated since v3.0 loader.releaseRes is deprecated, please use assetManager.releaseRes instead\r\n     */\r\n    public releaseRes (res: string, type?: Constructor<Asset>): void {\r\n        resources.release(res, type);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @en Resource all assets. Refer to [[release]] for detailed informations.\r\n     * @zh 释放所有资源。详细信息请参考 [[release]]\r\n     *\r\n     * @deprecated since v3.0 loader.releaseAll is deprecated, please use assetManager.releaseAll instead\r\n     */\r\n    public releaseAll (): void {\r\n        assetManager.releaseAll();\r\n        assets.clear();\r\n    }\r\n\r\n    /**\r\n     * @en Removes an completed item in pipeline.\r\n     * It will only remove the cache in the pipeline or loader, its dependencies won't be released.\r\n     * loader provided another method to completely cleanup the resource and its dependencies,\r\n     * please refer to [[release]]\r\n     * @zh 移除指定的已完成 item。\r\n     * 这将仅仅从 pipeline 或者 loader 中删除其缓存，并不会释放它所依赖的资源。\r\n     * loader 中提供了另一种删除资源及其依赖的清理方法，请参考 [[release]]\r\n     * @param id The id of the item\r\n     * @return succeed or not\r\n     *\r\n     * @deprecated since 3.0, loader.removeItem is deprecated, please use assetManager.assets.remove instead\r\n     */\r\n    public removeItem (id): boolean {\r\n        return !!assets.remove(id);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Indicates whether to release the asset when loading a new scene.<br>\r\n     * By default, when loading a new scene, all assets in the previous scene will be released or preserved<br>\r\n     * according to whether the previous scene checked the \"Auto Release Assets\" option.<br>\r\n     * On the other hand, assets dynamically loaded by using `loader.loadRes` or `loader.loadResDir`<br>\r\n     * will not be affected by that option, remain not released by default.<br>\r\n     * Use this API to change the default behavior on a single asset, to force preserve or release specified asset when scene switching.<br>\r\n     * <br>\r\n     * See: [[setAutoReleaseRecursively]], [[isAutoRelease]]\r\n     * @zh\r\n     * 设置当场景切换时是否自动释放资源。<br>\r\n     * 默认情况下，当加载新场景时，旧场景的资源根据旧场景是否勾选“Auto Release Assets”，将会被释放或者保留。<br>\r\n     * 而使用 `loader.loadRes` 或 `loader.loadResDir` 动态加载的资源，则不受场景设置的影响，默认不自动释放。<br>\r\n     * 使用这个 API 可以在单个资源上改变这个默认行为，强制在切换场景时保留或者释放指定资源。<br>\r\n     * <br>\r\n     * 参考：[[setAutoReleaseRecursively]]，[[isAutoRelease]]\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // auto release the texture event if \"Auto Release Assets\" disabled in current scene\r\n     * loader.setAutoRelease(texture2d, true);\r\n     * // don't release the texture even if \"Auto Release Assets\" enabled in current scene\r\n     * loader.setAutoRelease(texture2d, false);\r\n     * // first parameter can be url\r\n     * loader.setAutoRelease(audioUrl, false);\r\n     * ```\r\n     * @param asset - The asset or its url or its uuid\r\n     * @param autoRelease - Whether to release automatically during scene switch\r\n     *\r\n     * @deprecated since v3.0 loader.setAutoRelease is deprecated, if you want to prevent some asset from auto releasing, please use Asset.addRef instead\r\n     */\r\n    public setAutoRelease (asset: Asset|string, autoRelease: boolean): void {\r\n        if (typeof asset === 'object') { asset = asset._uuid; }\r\n        this._autoReleaseSetting[asset] = !!autoRelease;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Indicates whether to release the asset and its referenced other assets when loading a new scene.<br>\r\n     * By default, when loading a new scene, all assets in the previous scene will be released or preserved<br>\r\n     * according to whether the previous scene checked the \"Auto Release Assets\" option.<br>\r\n     * On the other hand, assets dynamically loaded by using `loader.loadRes` or `loader.loadResDir`<br>\r\n     * will not be affected by that option, remain not released by default.<br>\r\n     * Use this API to change the default behavior on the specified asset and its recursively referenced assets,\r\n     * to force preserve or release specified asset when scene switching.<br>\r\n     * <br>\r\n     * See: [[setAutoRelease]], [[isAutoRelease]]\r\n     * @zh\r\n     * 设置当场景切换时是否自动释放资源及资源引用的其它资源。<br>\r\n     * 默认情况下，当加载新场景时，旧场景的资源根据旧场景是否勾选“Auto Release Assets”，将会被释放或者保留。<br>\r\n     * 而使用 `loader.loadRes` 或 `loader.loadResDir` 动态加载的资源，则不受场景设置的影响，默认不自动释放。<br>\r\n     * 使用这个 API 可以在指定资源及资源递归引用到的所有资源上改变这个默认行为，强制在切换场景时保留或者释放指定资源。<br>\r\n     * <br>\r\n     * 参考：[[setAutoRelease]]，[[isAutoRelease]]\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * // auto release the SpriteFrame and its Texture event if \"Auto Release Assets\" disabled in current scene\r\n     * loader.setAutoReleaseRecursively(spriteFrame, true);\r\n     * // don't release the SpriteFrame and its Texture even if \"Auto Release Assets\" enabled in current scene\r\n     * loader.setAutoReleaseRecursively(spriteFrame, false);\r\n     * // don't release the Prefab and all the referenced assets\r\n     * loader.setAutoReleaseRecursively(prefab, false);\r\n     * ```\r\n     * @param asset - The asset or its url or its uuid\r\n     * @param autoRelease - Whether to release automatically during scene switch\r\n     * @deprecated loader.setAutoReleaseRecursively is deprecated, if you want to prevent some asset from auto releasing, please use Asset.addRef instead\r\n     */\r\n    public setAutoReleaseRecursively (asset: Asset|string, autoRelease: boolean): void {\r\n        if (typeof asset === 'object') { asset = asset._uuid; }\r\n        autoRelease = !!autoRelease;\r\n        this._autoReleaseSetting[asset] = autoRelease;\r\n        const depends = dependUtil.getDepsRecursively(asset);\r\n        for (let i = 0; i < depends.length; i++) {\r\n            this._autoReleaseSetting[depends[i]] = autoRelease;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Returns whether the asset is configured as auto released, despite how \"Auto Release Assets\" property is set on scene asset.<br>\r\n     * <br>\r\n     * See: [[setAutoRelease]], [[setAutoReleaseRecursively]]\r\n     * @zh 返回指定的资源是否有被设置为自动释放，不论场景的“Auto Release Assets”如何设置。<br>\r\n     * <br>\r\n     * 参考：[[setAutoRelease]]，[[setAutoReleaseRecursively]]\r\n     *\r\n     * @method isAutoRelease\r\n     * @param {Asset|String} asset - asset object or the raw asset's url\r\n     * @returns {Boolean}\r\n     * @deprecated loader.isAutoRelease is deprecated\r\n     */\r\n    public isAutoRelease (asset: Asset|string): boolean {\r\n        if (typeof asset === 'object') { asset = asset._uuid; }\r\n        return !!this._autoReleaseSetting[asset];\r\n    }\r\n}\r\n\r\n/**\r\n * @deprecated since 3.0, loader is deprecated, please use assetManager instead\r\n */\r\nexport const loader = new CCLoader();\r\n\r\n/**\r\n * @en\r\n * Used to load/unload resources in the project\r\n * @zh\r\n * 管理项目中加载/卸载资源的资源库。\r\n *\r\n * @deprecated since v3.0 AssetLibrary is deprecated, please backup your project and upgrade to assetManager\r\n */\r\nexport const AssetLibrary = {\r\n\r\n    /**\r\n     * @en\r\n     * init the asset library\r\n     * @zh\r\n     * 初始化 AssetLibrary。\r\n     * @method init\r\n     * @param {Object} options\r\n     * @param {String} options.libraryPath - 能接收的任意类型的路径，通常在编辑器里使用绝对的，在网页里使用相对的。\r\n     * @param {Object} options.mountPaths - mount point of actual urls for raw assets (only used in editor)\r\n     * @param {Object} [options.rawAssets] - uuid to raw asset's urls (only used in runtime)\r\n     * @param {String} [options.rawAssetsBase] - base of raw asset's urls (only used in runtime)\r\n     * @param {String} [options.packedAssets] - packed assets (only used in runtime)\r\n     * @deprecated AssetLibrary.init is deprecated, please use assetManager.init instead\r\n     */\r\n    init (options: Record<string, any>): void {\r\n        options.importBase = options.libraryPath;\r\n        options.nativeBase = BUILD ? options.rawAssetsBase : options.libraryPath;\r\n        assetManager.init(options);\r\n        if (options.rawAssets) {\r\n            resources.init({\r\n                base: '',\r\n                deps: [],\r\n                scenes: {},\r\n                redirect: [],\r\n                debug: true,\r\n                packs: {},\r\n                types: [],\r\n                versions: { import: [], native: [] },\r\n                name: BuiltinBundleName.RESOURCES,\r\n                importBase: options.importBase,\r\n                nativeBase: options.nativeBase,\r\n                paths: options.rawAssets.assets,\r\n                uuids: Object.keys(options.rawAssets.assets),\r\n                extensionMap: {},\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @zh\r\n     * 加载资源。\r\n     * @param {String} uuid\r\n     * @param {loadCallback} callback - @en Callback function to be executed after loading asset. @zh 加载完成后执行的回调函数。\r\n     * @param {Object} options\r\n     * @param {Boolean} options.readMainCache - 默认为true。如果为false，则资源及其所有依赖资源将重新加载并从库中创建新实例。\r\n     * @param {Boolean} options.writeMainCache - 默认为true。如果为true，则结果将缓存到 AssetLibrary，并且必须由用户手动卸载。\r\n     * @param {Asset} options.existingAsset - 加载现有资源，此参数仅在编辑器中可用。\r\n     * @deprecated since v3.0 AssetLibrary.loadAsset is deprecated, please use assetManager.loadAny instead\r\n     */\r\n    loadAsset (uuid: string, callback: ((err: Error | null, data?: any | null) => void), options?): void {\r\n        assetManager.loadAny(uuid, callback);\r\n    },\r\n};\r\n\r\n/**\r\n *\r\n * @class url\r\n * @static\r\n *\r\n * @deprecated since v3.0 url is deprecated\r\n */\r\nexport const url = {};\r\n\r\nreplaceProperty(url, 'url', [\r\n    {\r\n        name: 'normalize',\r\n        target: assetManager.utils,\r\n        targetName: 'assetManager.utils',\r\n        newName: 'normalize',\r\n    },\r\n    {\r\n        name: 'raw',\r\n        targetName: 'Asset.prototype',\r\n        newName: 'nativeUrl',\r\n        customFunction: (url: string): string => {\r\n            if (url.startsWith('resources/')) {\r\n                return transform({\r\n                    path: path.changeExtname(url.substring(10)),\r\n                    bundle: BuiltinBundleName.RESOURCES,\r\n                    __isNative__: true,\r\n                    ext: path.extname(url),\r\n                }) as string;\r\n            }\r\n            return '';\r\n        },\r\n    },\r\n]);\r\n\r\nremoveProperty(AssetLibrary, 'AssetLibrary', [\r\n    {\r\n        name: 'getLibUrlNoExt',\r\n        suggest: 'AssetLibrary.getLibUrlNoExt was removed, if you want to transform url, please use assetManager.utils.getUrlWithUuid instead',\r\n    },\r\n    {\r\n        name: 'queryAssetInfo',\r\n        suggest: 'AssetLibrary.queryAssetInfo was removed',\r\n    },\r\n]);\r\n\r\nremoveProperty(loader, 'loader', [\r\n    {\r\n        name: 'releaseResDir',\r\n        suggest: 'loader.releaseResDir was removed, please use assetManager.releaseAsset instead',\r\n    },\r\n    {\r\n        name: 'flowInDeps',\r\n        suggest: 'loader.flowInDeps was removed',\r\n    },\r\n    {\r\n        name: 'assetLoader',\r\n        suggest: 'loader.assetLoader was removed, assetLoader and md5Pipe were merged into assetManager.transformPipeline',\r\n    },\r\n]);\r\n\r\nreplaceProperty(cclegacy, 'cc', [\r\n    {\r\n        name: 'loader',\r\n        newName: 'assetManager',\r\n        logTimes: 1,\r\n        customGetter: (): CCLoader => loader,\r\n    }, {\r\n        name: 'AssetLibrary',\r\n        newName: 'assetManager',\r\n        logTimes: 1,\r\n        customGetter: (): typeof AssetLibrary => AssetLibrary,\r\n    }, {\r\n        name: 'Pipeline',\r\n        target: AssetManager,\r\n        targetName: 'AssetManager',\r\n        newName: 'Pipeline',\r\n        logTimes: 1,\r\n    }, {\r\n        name: 'url',\r\n        targetName: 'assetManager',\r\n        newName: 'utils',\r\n        logTimes: 1,\r\n        customGetter: (): Record<string, any> => url,\r\n    },\r\n]);\r\n\r\nremoveProperty(cclegacy, 'cc', [{\r\n    name: 'LoadingItems',\r\n    suggest: getError(1400, 'LoadingItems', 'AssetManager.Task'),\r\n}]);\r\n\r\nreplaceProperty(macro, 'macro', [\r\n    {\r\n        name: 'DOWNLOAD_MAX_CONCURRENT',\r\n        target: downloader,\r\n        targetName: 'assetManager.downloader',\r\n        newName: 'maxConcurrency',\r\n    },\r\n]);\r\n\r\nconst _autoRelease = releaseManager._autoRelease;\r\nreleaseManager._autoRelease = function (oldScene, newScene, persistNodes): void {\r\n    _autoRelease.call(releaseManager, oldScene, newScene, persistNodes);\r\n    const releaseSettings = loader._autoReleaseSetting;\r\n    const keys = Object.keys(releaseSettings);\r\n    for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        if (releaseSettings[key] === true) {\r\n            const asset = assets.get(key);\r\n            if (asset) { releaseManager.tryRelease(asset); }\r\n        }\r\n    }\r\n};\r\n"],"names":["ReflectionProbeType","_dsInfo","DescriptorSetInfo","SubModel","this","_device","_passes","_shaders","_subMesh","_patches","_priority","RenderPriority","DEFAULT","_inputAssembler","_descriptorSet","_worldBoundDescriptorSet","_instancedAttributeBlock","buffer","views","attributes","_instancedWorldMatrixIndex","_instancedSHIndex","_useReflectionProbeType","_proto","prototype","initialize","subMesh","passes","patches","cclegacy","director","root","deviceManager","gfxDevice","layout","localSetLayout","createInputAssembler","iaInfo","createDescriptorSet","occlusionPass","pipeline","pipelineSceneData","getOcclusionQueryPass","occlusionDSInfo","sort","_flushPassInfo","priority","destroy","update","i","length","_updatePasses","forEach","pass","beginChangeStatesSilently","tryCompile","endChangeStatesSilently","onPipelineStateChanged","onMacroPatchesStateChanged","JSON","stringify","onGeometryChanged","drawInfo","dirtyDrawInfo","Object","keys","key","getInstancedAttributeIndex","name","instancedAttributeBlock","updateInstancedWorldMatrix","mat","idx","attrs","v1","v2","v3","m00","m01","m02","m12","m04","m05","m06","m13","m08","m09","m10","m14","updateInstancedSH","data","count","UBOSHEnum","SH_QUADRATIC_R_OFFSET","SH_LINEAR_CONST_R_OFFSET","offset","k","UpdateInstancedAttributes","instancedWorldMatrixIndex","instancedSHIndex","device","hasFeature","Feature","INSTANCED_ARRAYS","size","j","attribute","isInstanced","FormatInfos","format","Uint8Array","attr","Attribute","isNormalized","location","push","info","typeViewArray","getTypedArrayConstructor","batchingScheme","BatchingSchemes","INSTANCING","getInstancedBuffer","INST_MAT_WORLD","INST_SH","len","getShaderVariant","_createClass","get","set","errorID","val","exports","ModelType","m4_1","Mat4","shadowMapPatches","value","staticLightMapPatches","stationaryLightMapPatches","highpLightMapPatches","lightProbePatches","lightmapSamplerHash","SamplerInfo","Filter","LINEAR","NONE","Address","CLAMP","lightmapSamplerWithMipHash","_forward","Model","type","scene","isDynamicBatching","_worldBounds","_modelBounds","_subModels","_node","_transform","_inited","_descriptorSetCount","_updateStamp","_localDataUpdated","_localData","Float32Array","UBOLocalEnum","COUNT","_localBuffer","_localSHData","_localSHBuffer","_lightmap","_lightmapUVParam","v4","_tetrahedronIndex","_lastWorldBoundCenter","Infinity","_useLightProbe","_worldBoundBuffer","_receiveShadow","_castShadow","_receiveDirLight","_shadowBias","_shadowNormalBias","_reflectionProbeId","_reflectionProbeBlendId","_reflectionProbeBlendWeight","_enabled","_visFlags","Layers","Enum","_bakeToReflectionProbe","_reflectionProbeType","castShadow","enabled","visFlags","subModels","attachToScene","detachFromScene","updateTransform","node","transform","hasChangedFlags","isTransformDirty","updateWorldTransform","worldBounds","_mat","_pos","_rot","_scale","updateWorldBound","updateUBOs","stamp","updateSHUBOs","shadows","globals","forceUpdateUBO","ShadowType","Planar","worldMatrix","hasNonInstancingPass","subModel","toArray","MAT_WORLD_OFFSET","invert","transpose","MAT_WORLD_IT_OFFSET","invalidateLocalData","showTetrahedron","isLightProbeAvailable","lightProbes","getPipelineSceneData","empty","updateSHBuffer","clearSHUBOs","center","equals","EPSILON","coefficients","weights","Vec4","getInterpolationWeights","getInterpolationSHCoefficients","SHCls","internal","SH","reduceRinging","updateUBOData","createBoundingShape","minPos","maxPos","geometry","create","fromPoints","copy","_createSubModel","initSubModel","subMeshData","getMacroPatches","_updateAttributesAndBinding","setSubModelMesh","setSubModelMaterial","onGlobalPipelineStateChanged","initLightingmap","texture","uvParam","updateLightingmap","LIGHTINGMAP_UVPARAM","builtinResMgr","gfxTexture","getGFXTexture","sampler","getSampler","mipmaps","descriptorSet","bindTexture","UNIFORM_LIGHTMAP_TEXTURE_BINDING","bindSampler","updateReflectionProbeCubemap","reflectionSampler","getSamplerInfo","UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING","updateReflectionProbeBlendCubemap","updateReflectionProbePlanarMap","UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING","updateReflectionProbeDataMap","UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING","getGFXSampler","updateLocalShadowBias","sv","LOCAL_SHADOW_BIAS","updateReflectionProbeId","probe","blendProbe","reflectionProbeManager","getProbeById","probeType","ProbeType","PLANAR","REFLECTION_PROBE_DATA1","up","x","y","z","REFLECTION_PROBE_DATA2","worldPosition","mipAndUseRGBE","isRGBE","cubemap","mipmapLevel","BLEND_PROBES","BLEND_PROBES_AND_SKYBOX","REFLECTION_PROBE_BLEND_DATA1","reflectionProbeBlendWeight","REFLECTION_PROBE_BLEND_DATA2","receiveShadow","sceneGlobals","disableLightmap","lightmapPathes","bakedWithStationaryMainLight","concat","bakedWithHighpLightmap","reflectionProbePatches","receiveDirLightPatches","subModelIndex","_initLocalDescriptors","_updateLocalDescriptors","_initLocalSHDescriptors","_updateLocalSHDescriptors","_initWorldBoundDescriptors","worldBoundDescriptorSet","_updateWorldBoundDescriptors","attributeSet","Set","has","add","_updateInstancedAttributes","createBuffer","BufferInfo","BufferUsageBit","UNIFORM","TRANSFER_DST","MemoryUsageBit","DEVICE","SIZE","UBOWorldBound","bindBuffer","BINDING","index","n","useReflectionProbeType","Vec3","_v3","_Light","DirectionalLight","_this","call","_dir","_illuminanceHDR","Ambient","SUN_ILLUM","_illuminanceLDR","_shadowEnabled","_shadowPcf","PCFType","HARD","_shadowSaturation","_shadowDistance","_shadowInvisibleOcclusionRange","_csmLevel","CSMLevel","LEVEL_4","_csmNeedUpdate","_csmLayerLambda","_csmOptimizationMode","CSMOptimizationMode","DisableRotationFix","_csmLayersTransition","_csmTransitionRange","_shadowFixedArea","_shadowNear","_shadowFar","_shadowOrthoSize","_type","LightType","DIRECTIONAL","_inheritsLoose","illuminance","direction","transformQuat","worldRotation","activate","csmSupported","macros","CC_DIR_LIGHT_SHADOW_TYPE","csmLevel","CC_CASCADED_LAYERS_TRANSITION","CC_DIR_SHADOW_PCF_TYPE","dir","normalize","isHDR","illuminanceHDR","illuminanceLDR","Math","min","Shadows","MAX_FAR","Light","SphereLight","_needUpdate","_size","_range","_luminanceHDR","_luminanceLDR","_aabb","SPHERE","range","luminanceHDR","nt2lm","luminanceLDR","getWorldPosition","_qt","Quat","_matView","_matProj","_matViewProj","_matViewProjInv","SpotLight","_spotAngle","cos","PI","_angleAttenuationStrength","_frustum","_angle","SPOT","getWorldRotation","getWorldRT","perspective","multiply","PointLight","AABB","POINT","LODInfo","RangedDirectionalLight","_right","RANGED_DIRECTIONAL","getWorldScale","RIGHT","LODData","screenUsagePercentage","_models","addModel","model","splice","eraseModel","removeIndex","indexOf","clearModels","LODGroup","_localBoundaryCenter","_objectSize","_lodDataArray","_lockedLODLevelVec","_isLockLevelChanged","_proto2","lockLODLevels","lockLev","slice","isLockLevelChanged","resetLockChangeFlag","getLockedLODLevels","clearLODs","insertLOD","lod","updateLOD","eraseLOD","getVisibleLODLevel","camera","getScreenUsagePercentage","lodIndex","lodCount","lodDataArray","projectionType","CameraProjection","PERSPECTIVE","distance","localBoundaryCenter","transformMat4","subtract","distanceToScreenUsagePercentage","getWorldSpaceSize","assertIsTrue","matProj","scale","max","abs","objectSize","clone","RenderScene","_name","_cameras","_lodGroups","_batches","_directionalLights","_sphereLights","_spotLights","_pointLights","_rangedDirLights","_mainLight","_modelId","_lodStateCache","_root","registerCreateFunc","_createSceneFun","LodStateCache","mainLight","sphereLights","spotLights","pointLights","rangedDirLights","models","updateLodState","removeCameras","removeSphereLights","removeSpotLights","removeRangedDirLights","removeModels","removeLODGroups","clearCache","isCulledByLod","isLodModelCulled","addCamera","cam","removeCamera","setMainLight","dl","unsetMainLight","dlList","TransformBit","ROTATION","addDirectionalLight","removeDirectionalLight","addSphereLight","pl","removeSphereLight","addSpotLight","sl","removeSpotLight","addPointLight","removePointLight","removePointLights","addRangedDirLight","l","removeRangedDirLight","m","removeModel","_this2","addBatch","batch","removeBatch","removeBatches","addLODGroup","lodGroup","addLodGroup","removeLODGroup","removeLodGroup","_this3","group","generateModelId","usedLevel","lastUsedLevel","transformDirty","_renderScene","_modelsInLODGroup","Map","_lodStateInCamera","_newAddedLodGroupVec","_levelModels","lodGroups","layer","visibility","cameras","_this4","_step","_iterator","_createForOfIteratorHelperLoose","done","_this5","addedLodGroup","levelModels","lodModels","modelInfo","_loop","lodLevels","_step2","_iterator2","visibleCamera","lodInfo","vecArray","clear","visibleIndex","vecModels","active","_step3","_iterator3","_step4","hasUpdated","_iterator4","cameraChangeFlags","lodChangeFlags","lodState","isLodGroupVisibleByCamera","orientationMap","_orientationMap","Orientation","PORTRAIT","SurfaceTransform","IDENTITY","LANDSCAPE_RIGHT","ROTATE_90","PORTRAIT_UPSIDE_DOWN","ROTATE_180","LANDSCAPE_LEFT","ROTATE_270","_windowCount","ImageFmts","RenderWindow","_title","_width","_height","_swapchain","_renderPass","_colorTextures","_depthStencilTexture","_hasOnScreenAttachments","_hasOffScreenAttachments","_framebuffer","_renderWindowId","_isResized","_colorName","_depthStencilName","isRenderWindowResized","setRenderWindowResizeHandled","_createWindowFun","undefined","title","swapchain","width","height","createRenderPass","renderPassInfo","colorTexture","depthStencilTexture","colorAttachments","textureInfo","TextureInfo","TextureType","TEX2D","TextureUsageBit","COLOR_ATTACHMENT","SAMPLED","TRANSFER_SRC","externalFlag","TextureFlagBit","EXTERNAL_NORMAL","EXTERNAL_OES","flags","externalRes","externalResLow","createTexture","depthStencilAttachment","Format","UNKNOWN","DEPTH_STENCIL_ATTACHMENT","createFramebuffer","FramebufferInfo","clearCameras","resize","screenAdapter","orientation","framebuffer","extractRenderCameras","attachCamera","sortCameras","detachCamera","a","b","AudioFmts","GetTrue","md5Pipe","transformURL","url","uuid","getUuidFromURL","bundle","bundles","find","getAssetInfo","hashValue","startsWith","base","config","nativeBase","nativeVer","ver","hashPatchInFolder","path","dirname","basename","replace","match","CCLoader","_autoReleaseSetting","_parseLoadResArgs","parseLoadResArgs","load","res","progressCallback","completeCallback","requests","Array","isArray","item","__isNative__","ext","images","audios","assetManager","loadAny","finish","total","content","includes","err","native","out","_i","Asset","asset","factory","image","audio","assets","_i2","map","_uuid","isCompleted","_map","getXMLHttpRequest","XMLHttpRequest","getItem","id","loadRes","_this$_parseLoadResAr","onProgress","onComplete","extname","resources","getInfoWithPath","loadResArray","urls","_this$_parseLoadResAr2","loadResDir","_this$_parseLoadResAr3","loadDir","getDirWithPath","getRes","getResCount","getDependsRecursively","owner","dependUtil","getDepsRecursively","addDownloadHandlers","extMap","handler","_loop2","func","options","downloader","register","addLoadHandlers","_loop3","file","parser","release","releaseAsset","releaseRes","releaseAll","removeItem","remove","setAutoRelease","autoRelease","setAutoReleaseRecursively","depends","isAutoRelease","setDefaultProgressCallback","Cache","loader","AssetLibrary","init","importBase","libraryPath","rawAssetsBase","rawAssets","deps","scenes","redirect","debug","packs","types","versions","import","BuiltinBundleName","RESOURCES","paths","uuids","extensionMap","loadAsset","callback","replaceProperty","target","utils","targetName","newName","customFunction","substring","removeProperty","suggest","logTimes","customGetter","AssetManager","getError","macro","_autoRelease","releaseManager","oldScene","newScene","persistNodes","releaseSettings","tryRelease"],"mappings":"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"}