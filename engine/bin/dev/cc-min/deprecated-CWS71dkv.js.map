{"version":3,"file":"deprecated-CWS71dkv.js","sources":["../../../cocos/animation/transform-utils.ts","../../../cocos/animation/internal-symbols.ts","../../../cocos/3d/skeletal-animation/skeletal-animation-data-hub.ts","../../../cocos/3d/misc/joint-texture-sampler-info.ts","../../../cocos/3d/skeletal-animation/skeletal-animation-utils.ts","../../../cocos/animation/skeletal-animation-utils.ts","../../../cocos/3d/models/skinning-model.ts","../../../cocos/3d/models/baked-skinning-model.ts","../../../cocos/3d/skinned-mesh-renderer/skinned-mesh-renderer.ts","../../../cocos/3d/skinned-mesh-renderer/skinned-mesh-batch-renderer.ts","../../../cocos/3d/skinned-mesh-renderer/deprecated.ts"],"sourcesContent":["/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4 } from '../core';\r\nimport { Node } from '../scene-graph';\r\n\r\nconst m4_1 = new Mat4();\r\n\r\n/**\r\n * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport function getPathFromRoot (target: Node | null, root: Node): string {\r\n    let node: Node | null = target;\r\n    let path = '';\r\n    while (node !== null && node !== root) {\r\n        path = `${node.name}/${path}`;\r\n        node = node.parent;\r\n    }\r\n    return path.slice(0, -1);\r\n}\r\n\r\n/**\r\n * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport function getWorldTransformUntilRoot (target: Node, root: Node, outMatrix: Mat4): Mat4 {\r\n    Mat4.identity(outMatrix);\r\n    while (target !== root) {\r\n        Mat4.fromRTS(m4_1, target.rotation, target.position, target.scale);\r\n        Mat4.multiply(outMatrix, m4_1, outMatrix);\r\n        target = target.parent!;\r\n    }\r\n    return outMatrix;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport const BAKE_SKELETON_CURVE_SYMBOL = Symbol('BakeNodeCurves');\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DataPoolManager } from './data-pool-manager';\r\nimport type { AnimationClip } from '../../animation/animation-clip';\r\nimport { cclegacy } from '../../core';\r\nimport { BAKE_SKELETON_CURVE_SYMBOL } from '../../animation/internal-symbols';\r\n\r\ntype BakeData = ReturnType<AnimationClip[typeof BAKE_SKELETON_CURVE_SYMBOL]>;\r\n\r\n/**\r\n * @en\r\n * The data conversion tool for skeleton animation\r\n * @zh\r\n * 骨骼动画数据转换中心。\r\n * @internal\r\n */\r\nexport class SkelAnimDataHub {\r\n    public static getOrExtract (clip: AnimationClip): BakeData {\r\n        let data = SkelAnimDataHub.pool.get(clip);\r\n        if (!data || data.samples !== clip.sample) {\r\n            // release outdated render data\r\n            if (data) { (cclegacy.director.root.dataPoolManager as DataPoolManager).releaseAnimationClip(clip); }\r\n            const frames = Math.ceil(clip.sample * clip.duration) + 1;\r\n            const step = clip.sample;\r\n            data = clip[BAKE_SKELETON_CURVE_SYMBOL](0, step, frames);\r\n            SkelAnimDataHub.pool.set(clip, data);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static destroy (clip: AnimationClip): void {\r\n        SkelAnimDataHub.pool.delete(clip);\r\n    }\r\n\r\n    private static pool = new Map<AnimationClip, BakeData>();\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Address, Filter, SamplerInfo } from '../../gfx';\r\n\r\nexport const jointTextureSamplerInfo = new SamplerInfo(\r\n    Filter.POINT,\r\n    Filter.POINT,\r\n    Filter.NONE,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR, JSB } from 'internal:constants';\r\nimport type { AnimationClip } from '../../animation/animation-clip';\r\nimport { SkelAnimDataHub } from './skeletal-animation-data-hub';\r\nimport { getWorldTransformUntilRoot } from '../../animation/transform-utils';\r\nimport { Mesh } from '../assets/mesh';\r\nimport { Skeleton } from '../assets/skeleton';\r\nimport { geometry, Mat4, Quat, Vec3 } from '../../core';\r\nimport { BufferUsageBit, Format, FormatInfos,\r\n    MemoryUsageBit, Device, Buffer, BufferInfo, FormatFeatureBit } from '../../gfx';\r\nimport { UBOSkinningAnimation } from '../../rendering/define';\r\nimport { Node } from '../../scene-graph';\r\nimport { ITextureBufferHandle, TextureBufferPool } from '../../render-scene/core/texture-buffer-pool';\r\nimport { jointTextureSamplerInfo } from '../misc/joint-texture-sampler-info';\r\n\r\n// change here and cc-skinning.chunk to use other skinning algorithms\r\nexport const uploadJointData = uploadJointDataLBS;\r\nexport const MINIMUM_JOINT_TEXTURE_SIZE = EDITOR ? 2040 : 480; // have to be multiples of 12\r\n\r\nexport function selectJointsMediumFormat (device: Device): Format {\r\n    if (device.getFormatFeatures(Format.RGBA32F) & FormatFeatureBit.SAMPLED_TEXTURE) {\r\n        return Format.RGBA32F;\r\n    }\r\n    return Format.RGBA8;\r\n}\r\n\r\n// Linear Blending Skinning\r\nfunction uploadJointDataLBS (out: Float32Array, base: number, mat: Readonly<Mat4>, firstBone: boolean): void {\r\n    out[base + 0] = mat.m00;\r\n    out[base + 1] = mat.m01;\r\n    out[base + 2] = mat.m02;\r\n    out[base + 3] = mat.m12;\r\n    out[base + 4] = mat.m04;\r\n    out[base + 5] = mat.m05;\r\n    out[base + 6] = mat.m06;\r\n    out[base + 7] = mat.m13;\r\n    out[base + 8] = mat.m08;\r\n    out[base + 9] = mat.m09;\r\n    out[base + 10] = mat.m10;\r\n    out[base + 11] = mat.m14;\r\n}\r\n\r\nconst dq_0 = new Quat();\r\nconst dq_1 = new Quat();\r\nconst v3_1 = new Vec3();\r\nconst qt_1 = new Quat();\r\nconst v3_2 = new Vec3();\r\n\r\n// Dual Quaternion Skinning\r\nfunction uploadJointDataDQS (out: Float32Array, base: number, mat: Mat4, firstBone: boolean): void {\r\n    Mat4.toSRT(mat, qt_1, v3_1, v3_2);\r\n    // sign consistency\r\n    if (firstBone) { Quat.copy(dq_0, qt_1); } else if (Quat.dot(dq_0, qt_1) < 0) { Quat.multiplyScalar(qt_1, qt_1, -1); }\r\n    // conversion\r\n    Quat.set(dq_1, v3_1.x, v3_1.y, v3_1.z, 0);\r\n    Quat.multiplyScalar(dq_1, Quat.multiply(dq_1, dq_1, qt_1), 0.5);\r\n    // upload\r\n    out[base + 0] = qt_1.x;\r\n    out[base + 1] = qt_1.y;\r\n    out[base + 2] = qt_1.z;\r\n    out[base + 3] = qt_1.w;\r\n    out[base + 4] = dq_1.x;\r\n    out[base + 5] = dq_1.y;\r\n    out[base + 6] = dq_1.z;\r\n    out[base + 7] = dq_1.w;\r\n    out[base + 8] = v3_2.x;\r\n    out[base + 9] = v3_2.y;\r\n    out[base + 10] = v3_2.z;\r\n}\r\n\r\nfunction roundUpTextureSize (targetLength: number, formatSize: number): number {\r\n    const formatScale = 4 / Math.sqrt(formatSize);\r\n    return Math.ceil(Math.max(MINIMUM_JOINT_TEXTURE_SIZE * formatScale, targetLength) / 12) * 12;\r\n}\r\n\r\nexport { jointTextureSamplerInfo };\r\n\r\ninterface IInternalJointAnimInfo {\r\n    downstream?: Mat4; // downstream default pose, if present\r\n    curveData?: Mat4[]; // the nearest animation curve, if present\r\n    bindposeIdx: number; // index of the actual bindpose to use\r\n    bindposeCorrection?: Mat4; // correction factor from the original bindpose\r\n}\r\n\r\nexport interface IJointTextureHandle {\r\n    pixelOffset: number;\r\n    refCount: number;\r\n    clipHash: number;\r\n    skeletonHash: number;\r\n    readyToBeDeleted: boolean;\r\n    handle: ITextureBufferHandle;\r\n    bounds: Map<number, geometry.AABB[]>;\r\n    animInfos?: IInternalJointAnimInfo[];\r\n}\r\n\r\nconst v3_3 = new Vec3();\r\nconst v3_4 = new Vec3();\r\nconst v3_min = new Vec3();\r\nconst v3_max = new Vec3();\r\nconst m4_1 = new Mat4();\r\nconst m4_2 = new Mat4();\r\nconst ab_1 = new geometry.AABB();\r\n\r\nexport interface IChunkContent {\r\n    skeleton: number;\r\n    clips: number[];\r\n}\r\nexport interface ICustomJointTextureLayout {\r\n    textureLength: number;\r\n    contents: IChunkContent[];\r\n}\r\n\r\n// Have to use some big number to replace the actual 'Infinity'.\r\n// For (Infinity - Infinity) evaluates to NaN\r\nconst Inf = Number.MAX_SAFE_INTEGER;\r\n\r\n/**\r\n * The pool for joint textures.\r\n * @internal\r\n */\r\nexport class JointTexturePool {\r\n    private _device: Device;\r\n\r\n    private _pool: TextureBufferPool;\r\n\r\n    private _textureBuffers = new Map<number, IJointTextureHandle>(); // per skeleton per clip\r\n\r\n    private _formatSize: number;\r\n\r\n    private _pixelsPerJoint: number;\r\n\r\n    private _customPool: TextureBufferPool;\r\n\r\n    private _chunkIdxMap = new Map<number, number>(); // hash -> chunkIdx\r\n\r\n    get pixelsPerJoint (): number {\r\n        return this._pixelsPerJoint;\r\n    }\r\n\r\n    constructor (device: Device) {\r\n        this._device = device;\r\n        const format = selectJointsMediumFormat(this._device);\r\n        this._formatSize = FormatInfos[format].size;\r\n        this._pixelsPerJoint = 48 / this._formatSize;\r\n        this._pool = new TextureBufferPool(device);\r\n        this._pool.initialize({ format, roundUpFn: roundUpTextureSize });\r\n        this._customPool = new TextureBufferPool(device);\r\n        this._customPool.initialize({ format, roundUpFn: roundUpTextureSize });\r\n    }\r\n\r\n    public clear (): void {\r\n        this._pool.destroy();\r\n        this._textureBuffers.clear();\r\n    }\r\n\r\n    public registerCustomTextureLayouts (layouts: ICustomJointTextureLayout[]): void {\r\n        for (let i = 0; i < layouts.length; i++) {\r\n            const layout = layouts[i];\r\n            let textureLength = layout.textureLength;\r\n            if (!(this._device.getFormatFeatures(Format.RGBA32F) & FormatFeatureBit.SAMPLED_TEXTURE)) {\r\n                textureLength *= 2; // RGBA8 format textures need 4 times the memory.\r\n            }\r\n            const chunkIdx = this._customPool.createChunk(textureLength);\r\n            for (let j = 0; j < layout.contents.length; j++) {\r\n                const content = layout.contents[j];\r\n                const { skeleton } = content;\r\n                this._chunkIdxMap.set(skeleton, chunkIdx); // include default pose too\r\n                for (let k = 0; k < content.clips.length; k++) {\r\n                    const clip = content.clips[k];\r\n                    this._chunkIdxMap.set(skeleton ^ clip, chunkIdx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get joint texture for the default pose.\r\n     * @zh\r\n     * 获取默认姿势的骨骼贴图。\r\n     */\r\n    public getDefaultPoseTexture (skeleton: Skeleton, mesh: Mesh, skinningRoot: Node): IJointTextureHandle | null {\r\n        const hash = skeleton.hash ^ 0; // may not equal to skeleton.hash\r\n        let texture: IJointTextureHandle | null = this._textureBuffers.get(hash) || null;\r\n        if (texture && texture.bounds.has(mesh.hash)) { texture.refCount++; return texture; }\r\n        const { joints, bindposes } = skeleton;\r\n        let textureBuffer: Float32Array = null!; let buildTexture = false;\r\n        const jointCount = joints.length;\r\n        if (!texture) {\r\n            const bufSize = jointCount * 12;\r\n            const customChunkIdx = this._chunkIdxMap.get(hash);\r\n            const handle = customChunkIdx !== undefined\r\n                ? this._customPool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT, customChunkIdx)\r\n                : this._pool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT);\r\n            if (!handle) { return texture; }\r\n            texture = {\r\n                pixelOffset: handle.start / this._formatSize,\r\n                refCount: 1,\r\n                bounds: new Map(),\r\n                skeletonHash: skeleton.hash,\r\n                clipHash: 0,\r\n                readyToBeDeleted: false,\r\n                handle,\r\n            };\r\n            textureBuffer = new Float32Array(bufSize); buildTexture = true;\r\n        } else { texture.refCount++; }\r\n        Vec3.set(v3_min,  Inf,  Inf,  Inf);\r\n        Vec3.set(v3_max, -Inf, -Inf, -Inf);\r\n        const boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);\r\n        for (let j = 0, offset = 0; j < jointCount; j++, offset += 12) {\r\n            const node = skinningRoot.getChildByPath(joints[j]);\r\n            const mat = node ? getWorldTransformUntilRoot(node, skinningRoot, m4_1) : skeleton.inverseBindposes[j];\r\n            const bound = boneSpaceBounds[j];\r\n            if (bound) {\r\n                geometry.AABB.transform(ab_1, bound, mat);\r\n                ab_1.getBoundary(v3_3, v3_4);\r\n                Vec3.min(v3_min, v3_min, v3_3);\r\n                Vec3.max(v3_max, v3_max, v3_4);\r\n            }\r\n            if (buildTexture) {\r\n                if (node) { Mat4.multiply(mat, mat, bindposes[j]); }\r\n                uploadJointData(textureBuffer, offset, node ? mat : Mat4.IDENTITY, j === 0);\r\n            }\r\n        }\r\n        const bounds = [new geometry.AABB()]; texture.bounds.set(mesh.hash, bounds);\r\n        geometry.AABB.fromPoints(bounds[0], v3_min, v3_max);\r\n        if (buildTexture) {\r\n            this._pool.update(texture.handle, textureBuffer.buffer);\r\n            this._textureBuffers.set(hash, texture);\r\n        }\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get joint texture for the specified animation clip.\r\n     * @zh\r\n     * 获取指定动画片段的骨骼贴图。\r\n     */\r\n    public getSequencePoseTexture (skeleton: Skeleton, clip: AnimationClip, mesh: Mesh, skinningRoot: Node): IJointTextureHandle | null {\r\n        const hash = skeleton.hash ^ clip.hash;\r\n        let texture: IJointTextureHandle | null = this._textureBuffers.get(hash) || null;\r\n        if (texture && texture.bounds.has(mesh.hash)) { texture.refCount++; return texture; }\r\n        const { joints, bindposes } = skeleton;\r\n        const clipData = SkelAnimDataHub.getOrExtract(clip);\r\n        const { frames } = clipData;\r\n        let textureBuffer: Float32Array = null!; let buildTexture = false;\r\n        const jointCount = joints.length;\r\n        if (!texture) {\r\n            const bufSize = jointCount * 12 * frames;\r\n            const customChunkIdx = this._chunkIdxMap.get(hash);\r\n            const handle = customChunkIdx !== undefined\r\n                ? this._customPool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT, customChunkIdx)\r\n                : this._pool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT);\r\n            if (!handle) { return null; }\r\n            const animInfos = this._createAnimInfos(skeleton, clip, skinningRoot);\r\n            texture = {\r\n                pixelOffset: handle.start / this._formatSize,\r\n                refCount: 1,\r\n                bounds: new Map(),\r\n                skeletonHash: skeleton.hash,\r\n                clipHash: clip.hash,\r\n                readyToBeDeleted: false,\r\n                handle,\r\n                animInfos,\r\n            };\r\n            textureBuffer = new Float32Array(bufSize); buildTexture = true;\r\n        } else { texture.refCount++; }\r\n        const boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);\r\n        const bounds: geometry.AABB[] = []; texture.bounds.set(mesh.hash, bounds);\r\n        for (let f = 0; f < frames; f++) {\r\n            bounds.push(new geometry.AABB(Inf, Inf, Inf, -Inf, -Inf, -Inf));\r\n        }\r\n        for (let f = 0, offset = 0; f < frames; f++) {\r\n            const bound = bounds[f];\r\n            for (let j = 0; j < jointCount; j++, offset += 12) {\r\n                const {\r\n                    curveData, downstream, bindposeIdx, bindposeCorrection,\r\n                } = texture.animInfos![j];\r\n                let mat: Mat4; let transformValid = true;\r\n                if (curveData && downstream) { // curve & static two-way combination\r\n                    mat = Mat4.multiply(m4_1, curveData[f], downstream);\r\n                } else if (curveData) { // there is a curve directly controlling the joint\r\n                    mat = curveData[f];\r\n                } else if (downstream) { // fallback to default pose if no animation curve can be found upstream\r\n                    mat = downstream;\r\n                } else { // bottom line: render the original mesh as-is\r\n                    mat = skeleton.inverseBindposes[bindposeIdx];\r\n                    transformValid = false;\r\n                }\r\n                const boneSpaceBound = boneSpaceBounds[j];\r\n                if (boneSpaceBound) {\r\n                    const transform = bindposeCorrection ? Mat4.multiply(m4_2, mat, bindposeCorrection) : mat;\r\n                    geometry.AABB.transform(ab_1, boneSpaceBound, transform);\r\n                    ab_1.getBoundary(v3_3, v3_4);\r\n                    Vec3.min(bound.center, bound.center, v3_3);\r\n                    Vec3.max(bound.halfExtents, bound.halfExtents, v3_4);\r\n                }\r\n                if (buildTexture) {\r\n                    if (transformValid) { Mat4.multiply(m4_1, mat, bindposes[bindposeIdx]); }\r\n                    uploadJointData(textureBuffer, offset, transformValid ? m4_1 : Mat4.IDENTITY, j === 0);\r\n                }\r\n            }\r\n            geometry.AABB.fromPoints(bound, bound.center, bound.halfExtents);\r\n        }\r\n        if (buildTexture) {\r\n            this._pool.update(texture.handle, textureBuffer.buffer);\r\n            this._textureBuffers.set(hash, texture);\r\n        }\r\n        return texture;\r\n    }\r\n\r\n    public releaseHandle (handle: IJointTextureHandle): void {\r\n        if (handle.refCount > 0) { handle.refCount--; }\r\n        if (!handle.refCount && handle.readyToBeDeleted) {\r\n            const hash = handle.skeletonHash ^ handle.clipHash;\r\n            const customChunkIdx = this._chunkIdxMap.get(hash);\r\n            (customChunkIdx !== undefined ? this._customPool : this._pool).free(handle.handle);\r\n            if (this._textureBuffers.get(hash) === handle) {\r\n                this._textureBuffers.delete(hash);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseSkeleton (skeleton: Skeleton): void {\r\n        const it = this._textureBuffers.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            const handle = res.value;\r\n            if (handle.skeletonHash === skeleton.hash) {\r\n                handle.readyToBeDeleted = true;\r\n                if (handle.refCount) {\r\n                    // delete handle record immediately so new allocations with the same asset could work\r\n                    this._textureBuffers.delete(handle.skeletonHash ^ handle.clipHash);\r\n                } else {\r\n                    this.releaseHandle(handle);\r\n                }\r\n            }\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    public releaseAnimationClip (clip: AnimationClip): void {\r\n        const it = this._textureBuffers.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            const handle = res.value;\r\n            if (handle.clipHash === clip.hash) {\r\n                handle.readyToBeDeleted = true;\r\n                if (handle.refCount) {\r\n                    // delete handle record immediately so new allocations with the same asset could work\r\n                    this._textureBuffers.delete(handle.skeletonHash ^ handle.clipHash);\r\n                } else {\r\n                    this.releaseHandle(handle);\r\n                }\r\n            }\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    private _createAnimInfos (skeleton: Skeleton, clip: AnimationClip, skinningRoot: Node): IInternalJointAnimInfo[] {\r\n        const animInfos: IInternalJointAnimInfo[] = [];\r\n        const { joints, bindposes } = skeleton;\r\n        const jointCount = joints.length;\r\n        const clipData = SkelAnimDataHub.getOrExtract(clip);\r\n        for (let j = 0; j < jointCount; j++) {\r\n            let animPath = joints[j];\r\n            let source = clipData.joints[animPath];\r\n            let animNode = skinningRoot.getChildByPath(animPath);\r\n            let downstream: Mat4 | undefined;\r\n            let correctionPath: string | undefined;\r\n            while (!source) {\r\n                const idx = animPath.lastIndexOf('/');\r\n                animPath = animPath.substring(0, idx);\r\n                source = clipData.joints[animPath];\r\n                if (animNode) {\r\n                    if (!downstream) { downstream = new Mat4(); }\r\n                    Mat4.fromRTS(m4_1, animNode.rotation, animNode.position, animNode.scale);\r\n                    Mat4.multiply(downstream, m4_1, downstream);\r\n                    animNode = animNode.parent;\r\n                } else { // record the nearest curve path if no downstream pose is present\r\n                    correctionPath = animPath;\r\n                }\r\n                if (idx < 0) { break; }\r\n            }\r\n            // the default behavior, just use the bindpose for current joint directly\r\n            let bindposeIdx = j;\r\n            let bindposeCorrection: Mat4 | undefined;\r\n            /**\r\n             * It is regularly observed that developers may choose to delete the whole\r\n             * skeleton node tree for skinning models that only use baked animations\r\n             * as an effective optimization strategy (substantial improvements on both\r\n             * package size and runtime efficiency).\r\n             *\r\n             * This becomes troublesome in some cases during baking though, e.g. when a\r\n             * skeleton joint node is not directly controlled by any animation curve,\r\n             * but its parent nodes are. Due to lack of proper downstream default pose,\r\n             * the joint transform can not be calculated accurately.\r\n             *\r\n             * We address this issue by employing some pragmatic approximation.\r\n             * Specifically, by multiplying the bindpose of the joint corresponding to\r\n             * the nearest curve, instead of the actual target joint. This effectively\r\n             * merges the skinning influence of the 'incomplete' joint into its nearest\r\n             * parent with accurate transform data.\r\n             * It gives more visually-plausible results compared to the naive approach\r\n             * for most cases we've covered.\r\n             */\r\n            if (correctionPath !== undefined && source) {\r\n                // just use the previous joint if the exact path is not found\r\n                bindposeIdx = j - 1;\r\n                for (let t = 0; t < jointCount; t++) {\r\n                    if (joints[t] === correctionPath) {\r\n                        bindposeIdx = t;\r\n                        bindposeCorrection = new Mat4();\r\n                        Mat4.multiply(bindposeCorrection, bindposes[t], skeleton.inverseBindposes[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            animInfos.push({\r\n                curveData: source && source.transforms, downstream, bindposeIdx, bindposeCorrection,\r\n            });\r\n        }\r\n        return animInfos;\r\n    }\r\n}\r\n\r\nexport interface IAnimInfo {\r\n    buffer: Buffer;\r\n    data: Float32Array;\r\n    dirty: boolean;\r\n    dirtyForJSB: Uint8Array;\r\n    currentClip: AnimationClip | null;\r\n}\r\n\r\nexport class JointAnimationInfo {\r\n    private _pool = new Map<string, IAnimInfo>(); // per node\r\n\r\n    private _device: Device;\r\n\r\n    constructor (device: Device) {\r\n        this._device = device;\r\n    }\r\n\r\n    public getData (nodeID = '-1'): IAnimInfo {\r\n        const res = this._pool.get(nodeID);\r\n        if (res) { return res; }\r\n        const buffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            UBOSkinningAnimation.SIZE,\r\n            UBOSkinningAnimation.SIZE,\r\n        ));\r\n        const data = new Float32Array([0, 0, 0, 0]);\r\n        buffer.update(data);\r\n        const info = { buffer, data, dirty: false, dirtyForJSB: new Uint8Array([0]), currentClip: null };\r\n\r\n        this._pool.set(nodeID, info);\r\n        return info;\r\n    }\r\n\r\n    public destroy (nodeID: string): void {\r\n        const info = this._pool.get(nodeID);\r\n        if (!info) { return; }\r\n        info.buffer.destroy();\r\n        this._pool.delete(nodeID);\r\n    }\r\n\r\n    public switchClip (info: IAnimInfo, clip: AnimationClip | null): IAnimInfo {\r\n        info.currentClip = clip;\r\n        info.data[0] = 0; // reset default frame 0\r\n        info.buffer.update(info.data);\r\n        info.dirty = false;\r\n        if (JSB) {\r\n            info.dirtyForJSB[0] = 0;\r\n        }\r\n        return info;\r\n    }\r\n\r\n    public clear (): void {\r\n        for (const info of this._pool.values()) {\r\n            info.buffer.destroy();\r\n        }\r\n        this._pool.clear();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4 } from '../core';\r\nimport { Node } from '../scene-graph/node';\r\n\r\nconst stack: IJointTransform[] = [];\r\nconst pool: Map<string, IJointTransform> = new Map();\r\n\r\nexport interface IJointTransform {\r\n    node: Node;\r\n    local: Mat4;\r\n    world: Mat4;\r\n    stamp: number;\r\n    parent: IJointTransform | null;\r\n}\r\n\r\nexport function getWorldMatrix (transform: IJointTransform | null, stamp: number): Readonly<Mat4> {\r\n    let i = 0;\r\n    let res = Mat4.IDENTITY;\r\n    while (transform) {\r\n        if (transform.stamp === stamp || transform.stamp + 1 === stamp && !transform.node.hasChangedFlags) {\r\n            res = transform.world;\r\n            transform.stamp = stamp;\r\n            break;\r\n        }\r\n        transform.stamp = stamp;\r\n        stack[i++] = transform;\r\n        transform = transform.parent;\r\n    }\r\n    while (i > 0) {\r\n        transform = stack[--i];\r\n        stack[i] = null!;\r\n        const node = transform.node;\r\n        Mat4.fromRTS(transform.local, node.rotation, node.position, node.scale);\r\n        res = Mat4.multiply(transform.world, res, transform.local);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function getTransform (node: Node, root: Node): IJointTransform | null {\r\n    let joint: IJointTransform | null = null;\r\n    let i = 0;\r\n    while (node !== root) {\r\n        const id = node.uuid;\r\n        if (pool.has(id)) {\r\n            joint = pool.get(id)!;\r\n            break;\r\n        } else { // TODO: object reuse\r\n            joint = { node, local: new Mat4(), world: new Mat4(), stamp: -1, parent: null };\r\n            pool.set(id, joint);\r\n        }\r\n        stack[i++] = joint;\r\n        node = node.parent!;\r\n        joint = null;\r\n    }\r\n    let child: IJointTransform;\r\n    while (i > 0) {\r\n        child = stack[--i];\r\n        stack[i] = null!;\r\n        child.parent = joint;\r\n        joint = child;\r\n    }\r\n    return joint;\r\n}\r\n\r\nexport function deleteTransform (node: Node): void {\r\n    let transform = pool.get(node.uuid) || null;\r\n    while (transform) {\r\n        pool.delete(transform.node.uuid);\r\n        transform = transform.parent;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Material } from '../../asset/assets/material';\r\nimport { RenderingSubMesh } from '../../asset/assets/rendering-sub-mesh';\r\nimport { Mesh } from '../assets/mesh';\r\nimport { Skeleton } from '../assets/skeleton';\r\nimport { geometry, Mat4, Vec3, warnID } from '../../core';\r\nimport { BufferUsageBit, MemoryUsageBit, DescriptorSet, Buffer, BufferInfo, Attribute, FormatFeatureBit, Format } from '../../gfx';\r\nimport { UBOSkinning, UNIFORM_REALTIME_JOINT_TEXTURE_BINDING } from '../../rendering/define';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { ModelType } from '../../render-scene/scene/model';\r\nimport { uploadJointData } from '../skeletal-animation/skeletal-animation-utils';\r\nimport { MorphModel } from './morph-model';\r\nimport { deleteTransform, getTransform, getWorldMatrix, IJointTransform } from '../../animation/skeletal-animation-utils';\r\nimport { IMacroPatch, BatchingSchemes, Pass } from '../../render-scene';\r\nimport { director } from '../../game';\r\nimport { TextureFilter, PixelFormat, WrapMode } from '../../asset/assets/asset-enum';\r\nimport { Texture2D, ImageAsset } from '../../asset/assets';\r\nimport { SubModel } from '../../render-scene/scene';\r\n\r\nconst uniformPatches: IMacroPatch[] = [\r\n    { name: 'CC_USE_SKINNING', value: true },\r\n    { name: 'CC_USE_REAL_TIME_JOINT_TEXTURE', value: false },\r\n];\r\nconst texturePatches: IMacroPatch[] = [\r\n    { name: 'CC_USE_SKINNING', value: true },\r\n    { name: 'CC_USE_REAL_TIME_JOINT_TEXTURE', value: true },\r\n];\r\n\r\nfunction getRelevantBuffers (outIndices: number[], outBuffers: number[], jointMaps: number[][], targetJoint: number): void {\r\n    for (let i = 0; i < jointMaps.length; i++) {\r\n        const idxMap = jointMaps[i];\r\n        let index = -1;\r\n        for (let j = 0; j < idxMap.length; j++) {\r\n            if (idxMap[j] === targetJoint) { index = j; break; }\r\n        }\r\n        if (index >= 0) {\r\n            outBuffers.push(i);\r\n            outIndices.push(index);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IJointInfo {\r\n    bound: geometry.AABB;\r\n    target: Node;\r\n    bindpose: Mat4;\r\n    transform: IJointTransform;\r\n    buffers: number[];\r\n    indices: number[];\r\n}\r\n\r\nconst v3_min = new Vec3();\r\nconst v3_max = new Vec3();\r\nconst v3_1 = new Vec3();\r\nconst v3_2 = new Vec3();\r\nconst m4_1 = new Mat4();\r\nconst ab_1 = new geometry.AABB();\r\n\r\nclass RealTimeJointTexture {\r\n    public static readonly WIDTH = 256;\r\n    public static readonly HEIGHT = 3;\r\n    public _format = PixelFormat.RGBA32F; // default use float texture\r\n    public _textures: Texture2D[] = [];\r\n    public _buffers: Float32Array[] = [];\r\n}\r\n\r\n/**\r\n * @en\r\n * The skinning model that is using real-time pose calculation.\r\n * @zh\r\n * 实时计算动画的蒙皮模型。\r\n */\r\nexport class SkinningModel extends MorphModel {\r\n    private _buffers: Buffer[] = [];\r\n    private _dataArray: Float32Array[] = [];\r\n    private _joints: IJointInfo[] = [];\r\n    private _bufferIndices: number[] | null = null;\r\n    private _realTimeJointTexture = new RealTimeJointTexture();\r\n    private _realTimeTextureMode = false;\r\n    constructor () {\r\n        super();\r\n        this.type = ModelType.SKINNING;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.bindSkeleton();\r\n        if (this._buffers.length) {\r\n            for (let i = 0; i < this._buffers.length; i++) {\r\n                this._buffers[i].destroy();\r\n            }\r\n            this._buffers.length = 0;\r\n        }\r\n        this._dataArray.length = 0;\r\n        this._realTimeJointTexture._textures.forEach((tex) => {\r\n            tex.destroy();\r\n        });\r\n        this._realTimeJointTexture._textures.length = 0;\r\n        this._realTimeJointTexture._buffers.length = 0;\r\n        super.destroy();\r\n    }\r\n\r\n    /**\r\n     * @en Abstract function for [[BakedSkinningModel]], empty implementation.\r\n     * @zh 由 [[BakedSkinningModel]] 继承的空函数。\r\n     */\r\n    public uploadAnimation (): void {}\r\n\r\n    /**\r\n     * @en Bind the skeleton with its skinning root node and the mesh data.\r\n     * @zh 在模型中绑定一个骨骼，需要提供骨骼的蒙皮根节点和蒙皮网格数据。\r\n     * @param skeleton @en The skeleton to be bound @zh 要绑定的骨骼\r\n     * @param skinningRoot @en The skinning root of the skeleton @zh 骨骼的蒙皮根节点\r\n     * @param mesh @en The mesh @zh 蒙皮网格\r\n     * @returns void\r\n     */\r\n    public bindSkeleton (skeleton: Skeleton | null = null, skinningRoot: Node | null = null, mesh: Mesh | null = null): void {\r\n        for (let i = 0; i < this._joints.length; i++) {\r\n            deleteTransform(this._joints[i].target);\r\n        }\r\n        this._bufferIndices = null; this._joints.length = 0;\r\n        if (!skeleton || !skinningRoot || !mesh) { return; }\r\n        this._realTimeTextureMode = false;\r\n        if (UBOSkinning.JOINT_UNIFORM_CAPACITY < skeleton.joints.length) { this._realTimeTextureMode = true; }\r\n        this.transform = skinningRoot;\r\n        const boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);\r\n        const jointMaps = mesh.struct.jointMaps;\r\n        this._ensureEnoughBuffers(jointMaps && jointMaps.length || 1);\r\n        this._bufferIndices = mesh.jointBufferIndices;\r\n        this._initRealTimeJointTexture();\r\n        for (let index = 0; index < skeleton.joints.length; index++) {\r\n            const bound = boneSpaceBounds[index];\r\n            const target = skinningRoot.getChildByPath(skeleton.joints[index]);\r\n            if (!bound || !target) { continue; }\r\n            const transform = getTransform(target, skinningRoot)!;\r\n            const bindpose = skeleton.bindposes[index];\r\n            const indices: number[] = [];\r\n            const buffers: number[] = [];\r\n            if (!jointMaps) { indices.push(index); buffers.push(0); } else { getRelevantBuffers(indices, buffers, jointMaps, index); }\r\n            this._joints.push({ indices, buffers, bound, target, bindpose, transform });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update world transform and bounding boxes for the model\r\n     * @zh 更新模型的世界矩阵和包围盒\r\n     * @param stamp @en The update time stamp @zh 更新的时间戳\r\n     */\r\n    public updateTransform (stamp: number): void {\r\n        const root = this.transform;\r\n        if (root.hasChangedFlags || root.isTransformDirty()) {\r\n            root.updateWorldTransform();\r\n            this._localDataUpdated = true;\r\n        }\r\n        // update bounds\r\n        Vec3.set(v3_min,  Infinity,  Infinity,  Infinity);\r\n        Vec3.set(v3_max, -Infinity, -Infinity, -Infinity);\r\n        for (let i = 0; i < this._joints.length; i++) {\r\n            const { bound, transform } = this._joints[i];\r\n            const worldMatrix = getWorldMatrix(transform, stamp);\r\n            geometry.AABB.transform(ab_1, bound, worldMatrix);\r\n            ab_1.getBoundary(v3_1, v3_2);\r\n            Vec3.min(v3_min, v3_min, v3_1);\r\n            Vec3.max(v3_max, v3_max, v3_2);\r\n        }\r\n\r\n        const worldBounds = this._worldBounds;\r\n        if (this._modelBounds && worldBounds) {\r\n            geometry.AABB.fromPoints(this._modelBounds, v3_min, v3_max);\r\n            this._modelBounds.transform(root._mat, root._pos, root._rot, root._scale, this._worldBounds!);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update uniform buffer objects for rendering.\r\n     * @zh 更新用于渲染的 UBO\r\n     * @param stamp @en The update time stamp @zh 更新的时间戳\r\n     * @returns @en successful or not @zh 更新是否成功\r\n     */\r\n    public updateUBOs (stamp: number): boolean {\r\n        super.updateUBOs(stamp);\r\n        for (let i = 0; i < this._joints.length; i++) {\r\n            const { indices, buffers, transform, bindpose } = this._joints[i];\r\n            Mat4.multiply(m4_1, transform.world, bindpose);\r\n            for (let b = 0; b < buffers.length; b++) {\r\n                uploadJointData(this._dataArray[buffers[b]], indices[b] * 12, m4_1, i === 0);\r\n            }\r\n        }\r\n        if (this._realTimeTextureMode) {\r\n            this._updateRealTimeJointTextureBuffer();\r\n        } else {\r\n            for (let b = 0; b < this._buffers.length; b++) {\r\n                this._buffers[b].update(this._dataArray[b]);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Initialize sub model with the sub mesh data and the material\r\n     * @zh 用子网格数据和材质初始化一个子模型\r\n     * @param idx @en The index of the sub model to be initialized @zh 需要初始化的子模型序号\r\n     * @param subMeshData @en The sub mesh data @zh 子网格数据\r\n     * @param mat @en The material @zh 子模型材质\r\n     */\r\n    public initSubModel (idx: number, subMeshData: RenderingSubMesh, mat: Material): void {\r\n        const original = subMeshData.vertexBuffers;\r\n        const iaInfo = subMeshData.iaInfo;\r\n        iaInfo.vertexBuffers = subMeshData.jointMappedBuffers;\r\n        super.initSubModel(idx, subMeshData, mat);\r\n        iaInfo.vertexBuffers = original;\r\n    }\r\n\r\n    // override\r\n    public getMacroPatches (subModelIndex: number): IMacroPatch[] | null {\r\n        const superMacroPatches = super.getMacroPatches(subModelIndex);\r\n        let myPatches = uniformPatches;\r\n        if (this._realTimeTextureMode) {\r\n            myPatches = texturePatches;\r\n        }\r\n        if (superMacroPatches) {\r\n            return myPatches.concat(superMacroPatches);\r\n        }\r\n        return myPatches;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _updateLocalDescriptors (submodelIdx: number, descriptorSet: DescriptorSet): void {\r\n        super._updateLocalDescriptors(submodelIdx, descriptorSet);\r\n        const idx = this._bufferIndices![submodelIdx];\r\n        if (this._realTimeTextureMode) {\r\n            this._bindRealTimeJointTexture(idx, descriptorSet);\r\n        } else {\r\n            const buffer = this._buffers[idx];\r\n            if (buffer) { descriptorSet.bindBuffer(UBOSkinning.BINDING, buffer); }\r\n        }\r\n    }\r\n\r\n    protected _updateInstancedAttributes (attributes: Attribute[], subModel: SubModel): void {\r\n        const pass = subModel.passes[0];\r\n        if (pass.batchingScheme !== BatchingSchemes.NONE) {\r\n            // TODO(holycanvas): #9203 better to print the complete path instead of only the current node\r\n            warnID(3936, this.node.getPathInHierarchy());\r\n        }\r\n        super._updateInstancedAttributes(attributes, subModel);\r\n    }\r\n\r\n    private _ensureEnoughBuffers (count: number): void {\r\n        if (this._buffers.length) {\r\n            for (let i = 0; i < this._buffers.length; i++) {\r\n                this._buffers[i].destroy();\r\n            }\r\n            this._buffers.length = 0;\r\n        }\r\n\r\n        if (this._dataArray.length) this._dataArray.length = 0;\r\n\r\n        if (!this._realTimeTextureMode) {\r\n            for (let i = 0; i < count; i++) {\r\n                this._buffers[i] = this._device.createBuffer(new BufferInfo(\r\n                    BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                    MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n                    UBOSkinning.SIZE,\r\n                    UBOSkinning.SIZE,\r\n                ));\r\n                const maxJoints = UBOSkinning.JOINT_UNIFORM_CAPACITY;\r\n                this._dataArray[i] = new Float32Array(12 * maxJoints);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < count; i++) {\r\n                const maxJoints = RealTimeJointTexture.WIDTH;\r\n                this._dataArray[i] = new Float32Array(12 * maxJoints);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _initRealTimeJointTexture (): void {\r\n        if (this._realTimeJointTexture._textures.length) {\r\n            this._realTimeJointTexture._textures.forEach((tex) => {\r\n                tex.destroy();\r\n            });\r\n            this._realTimeJointTexture._textures.length = 0;\r\n        }\r\n        this._realTimeJointTexture._buffers.length = 0;\r\n        if (!this._realTimeTextureMode) return;\r\n\r\n        const gfxDevice = director.root!.device;\r\n        let width = RealTimeJointTexture.WIDTH;\r\n        const height = RealTimeJointTexture.HEIGHT;\r\n        const hasFeatureFloatTexture = gfxDevice.getFormatFeatures(Format.RGBA32F) & FormatFeatureBit.SAMPLED_TEXTURE;\r\n        if (hasFeatureFloatTexture === 0) {\r\n            this._realTimeJointTexture._format = PixelFormat.RGBA8888;\r\n            width = 4 * RealTimeJointTexture.WIDTH;\r\n        }\r\n\r\n        const textures = this._realTimeJointTexture._textures;\r\n        const buffers = this._realTimeJointTexture._buffers;\r\n        const pixelFormat = this._realTimeJointTexture._format;\r\n        for (let i = 0; i < this._dataArray.length; i++) {\r\n            buffers[i] = new Float32Array(4 * RealTimeJointTexture.HEIGHT * RealTimeJointTexture.WIDTH);\r\n            const arrayBuffer = buffers[i];\r\n            const updateView =  pixelFormat === PixelFormat.RGBA32F ? arrayBuffer : new Uint8Array(arrayBuffer.buffer);\r\n            const image = new ImageAsset({\r\n                width,\r\n                height,\r\n                _data: updateView,\r\n                _compressed: false,\r\n                format: pixelFormat,\r\n            });\r\n            const texture = new Texture2D();\r\n            texture.setFilters(TextureFilter.NEAREST, TextureFilter.NEAREST);\r\n            texture.setMipFilter(TextureFilter.NONE);\r\n            texture.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);\r\n            texture.image = image;\r\n            textures[i] = texture;\r\n        }\r\n    }\r\n\r\n    private _bindRealTimeJointTexture (idx: number, descriptorSet: DescriptorSet): void {\r\n        if (!this._realTimeTextureMode) return;\r\n        const jointTexture = this._realTimeJointTexture._textures[idx];\r\n        if (jointTexture) {\r\n            const gfxTexture = jointTexture.getGFXTexture();\r\n            const sampler = jointTexture.getGFXSampler();\r\n            descriptorSet.bindTexture(UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, gfxTexture!);\r\n            descriptorSet.bindSampler(UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, sampler);\r\n        }\r\n    }\r\n\r\n    private _updateRealTimeJointTextureBuffer (): void {\r\n        if (!this._realTimeTextureMode) return;\r\n        const textures = this._realTimeJointTexture._textures;\r\n        const buffers = this._realTimeJointTexture._buffers;\r\n        for (let idx = 0; idx < textures.length; idx++) {\r\n            const arrayBuffer = buffers[idx];\r\n            const src = this._dataArray[idx];\r\n            const count = src.length / 12; // mat3x4\r\n            let idxSrc = 0;\r\n            let idxDst = 0;\r\n            for (let i = 0; i < count; i++) {\r\n                idxDst = 4 * i;\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                idxDst = 4 * (i + RealTimeJointTexture.WIDTH);\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                idxDst = 4 * (i + 2 * RealTimeJointTexture.WIDTH);\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n                arrayBuffer[idxDst++] = src[idxSrc++];\r\n            }\r\n            const pixelFormat = this._realTimeJointTexture._format;\r\n            const updateView = pixelFormat === PixelFormat.RGBA32F ? arrayBuffer : new Uint8Array(arrayBuffer.buffer);\r\n            textures[idx].uploadData(updateView);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport type { AnimationClip } from '../../animation/animation-clip';\r\nimport { Mesh } from '../assets/mesh';\r\nimport { Skeleton } from '../assets/skeleton';\r\nimport { geometry, cclegacy } from '../../core';\r\nimport { BufferUsageBit, MemoryUsageBit, Attribute, DescriptorSet, Buffer, BufferInfo } from '../../gfx';\r\nimport { INST_JOINT_ANIM_INFO, UBOSkinningAnimation, UBOSkinningTexture, UNIFORM_JOINT_TEXTURE_BINDING } from '../../rendering/define';\r\nimport { Node } from '../../scene-graph';\r\nimport { IMacroPatch, Pass } from '../../render-scene/core/pass';\r\nimport type { DataPoolManager } from '../skeletal-animation/data-pool-manager';\r\nimport { ModelType } from '../../render-scene/scene/model';\r\nimport { IAnimInfo, IJointTextureHandle } from '../skeletal-animation/skeletal-animation-utils';\r\nimport { MorphModel } from './morph-model';\r\nimport { jointTextureSamplerInfo } from '../misc/joint-texture-sampler-info';\r\nimport { SubModel } from '../../render-scene/scene';\r\n\r\ninterface IJointsInfo {\r\n    buffer: Buffer | null;\r\n    jointTextureInfo: Float32Array;\r\n    texture: IJointTextureHandle | null;\r\n    animInfo: IAnimInfo;\r\n    boundsInfo: geometry.AABB[] | null;\r\n}\r\n\r\nconst myPatches = [\r\n    { name: 'CC_USE_SKINNING', value: true },\r\n    { name: 'CC_USE_BAKED_ANIMATION', value: true },\r\n];\r\n\r\n/**\r\n * @en\r\n * The skinning model that is using GPU baked animation.\r\n * @zh\r\n * GPU 预烘焙动画的蒙皮模型。\r\n */\r\nexport class BakedSkinningModel extends MorphModel {\r\n    /**\r\n     * @en The animation clip that have been uploaded\r\n     * @zh 已被上传的动画片段\r\n     */\r\n    public uploadedAnim: AnimationClip | null | undefined = undefined; // uninitialized\r\n\r\n    private _jointsMedium: IJointsInfo;\r\n\r\n    private _skeleton: Skeleton | null = null;\r\n    private _mesh: Mesh | null = null;\r\n    private _dataPoolManager: DataPoolManager;\r\n    private _instAnimInfoIdx = -1;\r\n\r\n    constructor () {\r\n        super();\r\n        this.type = ModelType.BAKED_SKINNING;\r\n        this._dataPoolManager = cclegacy.director.root.dataPoolManager;\r\n        const jointTextureInfo = new Float32Array(4);\r\n        const animInfo = this._dataPoolManager.jointAnimationInfo.getData();\r\n        this._jointsMedium = { buffer: null, jointTextureInfo, animInfo, texture: null, boundsInfo: null };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.uploadedAnim = undefined; // uninitialized\r\n        this._jointsMedium.boundsInfo = null;\r\n        if (this._jointsMedium.buffer) {\r\n            this._jointsMedium.buffer.destroy();\r\n            this._jointsMedium.buffer = null;\r\n        }\r\n        this._applyJointTexture();\r\n        super.destroy();\r\n    }\r\n\r\n    // Override\r\n    public bindSkeleton (skeleton: Skeleton | null = null, skinningRoot: Node | null = null, mesh: Mesh | null = null): void {\r\n        this._skeleton = skeleton;\r\n        this._mesh = mesh;\r\n        if (!skeleton || !skinningRoot || !mesh) { return; }\r\n        this.transform = skinningRoot;\r\n        const resMgr = this._dataPoolManager;\r\n        this._jointsMedium.animInfo = resMgr.jointAnimationInfo.getData(skinningRoot.uuid);\r\n        if (!this._jointsMedium.buffer) {\r\n            this._jointsMedium.buffer = this._device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.DEVICE,\r\n                UBOSkinningTexture.SIZE,\r\n                UBOSkinningTexture.SIZE,\r\n            ));\r\n        }\r\n    }\r\n\r\n    // Override\r\n    public updateTransform (stamp: number): void {\r\n        super.updateTransform(stamp);\r\n\r\n        if (!this.uploadedAnim) { return; }\r\n        const { animInfo, boundsInfo } = this._jointsMedium;\r\n        const skelBound = boundsInfo![animInfo.data[0]];\r\n        const worldBounds = this._worldBounds;\r\n        if (worldBounds && skelBound) {\r\n            const node = this.transform;\r\n            skelBound.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);\r\n        }\r\n    }\r\n\r\n    // Override, update fid buffer only when visible\r\n    public updateUBOs (stamp: number): boolean {\r\n        super.updateUBOs(stamp);\r\n\r\n        const info = this._jointsMedium.animInfo;\r\n\r\n        let hasNonInstancingPass = false;\r\n        const idx = this._instAnimInfoIdx;\r\n        for (let i = 0; i < this._subModels.length; i++) {\r\n            const subModel = this._subModels[i];\r\n            if (idx >= 0) {\r\n                const view = subModel.instancedAttributeBlock.views[idx];\r\n                view[0] = info.data[0];\r\n            } else {\r\n                hasNonInstancingPass = true;\r\n            }\r\n        }\r\n        if (hasNonInstancingPass && info.dirty) {\r\n            info.buffer.update(info.data);\r\n            info.dirty = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Override\r\n    public getMacroPatches (subModelIndex: number): IMacroPatch[] | null {\r\n        const patches = super.getMacroPatches(subModelIndex);\r\n        return patches ? patches.concat(myPatches) : myPatches;\r\n    }\r\n\r\n    /**\r\n     * @en Pre-simulate and store the frames data of the given animation clip to a joint texture and upload it to GPU.\r\n     * Normally, it's automatically managed by [[SkeletalAnimationState]].\r\n     * But user can also use Joint Texture Layout Settings in the editor to manually organize the joint textures.\r\n     * @zh 预计算并存储一个指定动画片段的完整帧数据到一张骨骼贴图上，并将其上传到 GPU。\r\n     * 一般情况下 [[SkeletalAnimationState]] 会自动管理所有骨骼贴图，但用户也可以使用编辑器的骨骼贴图布局设置面板来手动管理所有骨骼贴图。\r\n     * @param anim @en The animation clip to be uploaded to the joint texture. @zh 需要上传到骨骼贴图上的动画片段。\r\n     * @returns void\r\n     */\r\n    public uploadAnimation (anim: AnimationClip | null): void {\r\n        if (!this._skeleton || !this._mesh || this.uploadedAnim === anim) { return; }\r\n        this.uploadedAnim = anim;\r\n        const resMgr = this._dataPoolManager;\r\n        let texture: IJointTextureHandle | null = null;\r\n        if (anim) {\r\n            texture = resMgr.jointTexturePool.getSequencePoseTexture(this._skeleton, anim, this._mesh, this.transform);\r\n            this._jointsMedium.boundsInfo = texture && texture.bounds.get(this._mesh.hash)!;\r\n            this._modelBounds = null; // don't calc bounds again in Model\r\n        } else {\r\n            texture = resMgr.jointTexturePool.getDefaultPoseTexture(this._skeleton, this._mesh, this.transform);\r\n            this._jointsMedium.boundsInfo = null;\r\n            this._modelBounds = texture && texture.bounds.get(this._mesh.hash)![0];\r\n        }\r\n        this._applyJointTexture(texture);\r\n    }\r\n\r\n    protected _applyJointTexture (texture: IJointTextureHandle | null = null): void {\r\n        const oldTex = this._jointsMedium.texture;\r\n        if (oldTex && oldTex !== texture) { this._dataPoolManager.jointTexturePool.releaseHandle(oldTex); }\r\n        this._jointsMedium.texture = texture;\r\n        if (!texture) { return; }\r\n        const { buffer, jointTextureInfo } = this._jointsMedium;\r\n        jointTextureInfo[0] = texture.handle.texture.width;\r\n        jointTextureInfo[1] = this._skeleton!.joints.length;\r\n        jointTextureInfo[2] = texture.pixelOffset + 0.1; // guard against floor() underflow\r\n        jointTextureInfo[3] = 1 / jointTextureInfo[0];\r\n        this.updateInstancedJointTextureInfo();\r\n        if (buffer) { buffer.update(jointTextureInfo); }\r\n        const tex = texture.handle.texture;\r\n\r\n        for (let i = 0; i < this._subModels.length; ++i) {\r\n            const descriptorSet = this._subModels[i].descriptorSet;\r\n            descriptorSet.bindTexture(UNIFORM_JOINT_TEXTURE_BINDING, tex);\r\n        }\r\n    }\r\n\r\n    protected _updateLocalDescriptors (submodelIdx: number, descriptorSet: DescriptorSet): void {\r\n        super._updateLocalDescriptors(submodelIdx, descriptorSet);\r\n        const { buffer, texture, animInfo } = this._jointsMedium;\r\n        descriptorSet.bindBuffer(UBOSkinningTexture.BINDING, buffer!);\r\n        descriptorSet.bindBuffer(UBOSkinningAnimation.BINDING, animInfo.buffer);\r\n        if (texture) {\r\n            const sampler = this._device.getSampler(jointTextureSamplerInfo);\r\n            descriptorSet.bindTexture(UNIFORM_JOINT_TEXTURE_BINDING, texture.handle.texture);\r\n            descriptorSet.bindSampler(UNIFORM_JOINT_TEXTURE_BINDING, sampler);\r\n        }\r\n    }\r\n\r\n    protected _updateInstancedAttributes (attributes: Attribute[], subModel: SubModel): void {\r\n        super._updateInstancedAttributes(attributes, subModel);\r\n        this._instAnimInfoIdx = subModel.getInstancedAttributeIndex(INST_JOINT_ANIM_INFO);\r\n        this.updateInstancedJointTextureInfo();\r\n    }\r\n\r\n    private updateInstancedJointTextureInfo (): void {\r\n        const { jointTextureInfo, animInfo } = this._jointsMedium;\r\n        const idx = this._instAnimInfoIdx;\r\n        for (let i = 0; i < this._subModels.length; i++) {\r\n            const subModel = this._subModels[i];\r\n            const views = subModel.instancedAttributeBlock.views;\r\n            if (idx >= 0 && views.length > 0) { // update instancing data too\r\n                const view = views[idx];\r\n                view[0] = animInfo.data[0];\r\n                view[1] = jointTextureInfo[1];\r\n                view[2] = jointTextureInfo[2];\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass, executeInEditMode, executionOrder, help, menu, type,\r\n} from 'cc.decorator';\r\nimport type { AnimationClip } from '../../animation/animation-clip';\r\nimport { Material } from '../../asset/assets';\r\nimport { Skeleton } from '../assets/skeleton';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { MeshRenderer } from '../framework/mesh-renderer';\r\nimport type { SkeletalAnimation } from '../skeletal-animation';\r\nimport { cclegacy, assertIsTrue } from '../../core';\r\nimport { SkinningModel } from '../models/skinning-model';\r\nimport { BakedSkinningModel } from '../models/baked-skinning-model';\r\nimport type { Root } from '../../root';\r\n\r\n/**\r\n * @en The skinned mesh renderer component.\r\n * @zh 蒙皮网格渲染器组件。\r\n */\r\n@ccclass('cc.SkinnedMeshRenderer')\r\n@help('i18n:cc.SkinnedMeshRenderer')\r\n@executionOrder(100)\r\n@executeInEditMode\r\n@menu('Mesh/SkinnedMeshRenderer')\r\nexport class SkinnedMeshRenderer extends MeshRenderer {\r\n    @type(Skeleton)\r\n    protected _skeleton: Skeleton | null = null;\r\n\r\n    @type(Node)\r\n    protected _skinningRoot: Node | null = null;\r\n\r\n    protected _clip: AnimationClip | null = null;\r\n\r\n    /**\r\n     * @en The skeleton asset.\r\n     * @zh 骨骼资源。\r\n     */\r\n    @type(Skeleton)\r\n    get skeleton (): Skeleton | null {\r\n        return this._skeleton;\r\n    }\r\n\r\n    set skeleton (val) {\r\n        if (val === this._skeleton) { return; }\r\n        this._skeleton = val;\r\n        this._update();\r\n    }\r\n\r\n    /**\r\n     * @en The skinning root. (The node where the controlling Animation is located)\r\n     * @zh 骨骼根节点的引用，对应控制此模型的动画组件所在节点。\r\n     */\r\n    @type(Node)\r\n    get skinningRoot (): Node | null {\r\n        return this._skinningRoot;\r\n    }\r\n\r\n    set skinningRoot (value) {\r\n        if (value === this._skinningRoot) { return; }\r\n        this._skinningRoot = value;\r\n        this._tryBindAnimation();\r\n        this._update();\r\n    }\r\n\r\n    get model (): SkinningModel | BakedSkinningModel | null {\r\n        return this._model as SkinningModel | BakedSkinningModel | null;\r\n    }\r\n\r\n    /**\r\n     * Set associated animation.\r\n     * @internal This method only friends to skeletal animation component.\r\n     */\r\n    public associatedAnimation: SkeletalAnimation | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n        this._modelType = BakedSkinningModel;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        super.onLoad();\r\n        this._tryBindAnimation();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        if (this.associatedAnimation) {\r\n            this.associatedAnimation.notifySkinnedMeshRemoved(this);\r\n            assertIsTrue(this.associatedAnimation === null);\r\n        }\r\n\r\n        super.onDestroy();\r\n    }\r\n\r\n    public uploadAnimation (clip: AnimationClip | null): void {\r\n        this._clip = clip;\r\n        if (this.model && this.model.uploadAnimation) {\r\n            this.model.uploadAnimation(clip);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set if bake mode should be used.\r\n     * @internal This method only friends to skeletal animation component.\r\n     */\r\n    public setUseBakedAnimation (val = true, force = false): void {\r\n        const modelType = val ? BakedSkinningModel : SkinningModel;\r\n        if (!force && this._modelType === modelType) { return; }\r\n        this._modelType = modelType;\r\n        if (this._model) {\r\n            (cclegacy.director.root as Root).destroyModel(this._model);\r\n            this._model = null;\r\n            this._models.length = 0;\r\n            this._updateModels();\r\n            this._updateCastShadow();\r\n            this._updateReceiveShadow();\r\n            this._updateUseLightProbe();\r\n            if (this.enabledInHierarchy) {\r\n                this._attachToScene();\r\n            }\r\n        }\r\n    }\r\n\r\n    public setSharedMaterial (material: Material | null, index: number): void {\r\n        super.setSharedMaterial(material, index);\r\n        if (this._modelType === SkinningModel) {\r\n            this.getMaterialInstance(index);\r\n        }\r\n    }\r\n\r\n    protected _updateModelParams (): void {\r\n        this._update(); // should bind skeleton before super create pso\r\n        super._updateModelParams();\r\n    }\r\n\r\n    private _tryBindAnimation (): void {\r\n        const { _skinningRoot: skinningRoot } = this;\r\n        if (!skinningRoot) {\r\n            return;\r\n        }\r\n\r\n        let skinningRootIsParent = false;\r\n        for (let current: Node | null = this.node; current; current = current.parent) {\r\n            if (current === skinningRoot) {\r\n                skinningRootIsParent = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!skinningRootIsParent) {\r\n            return;\r\n        }\r\n\r\n        const animation = skinningRoot.getComponent('cc.SkeletalAnimation') as SkeletalAnimation;\r\n        if (animation && animation.enabledInHierarchy) {\r\n            animation.notifySkinnedMeshAdded(this);\r\n        } else {\r\n            this.setUseBakedAnimation(false);\r\n        }\r\n    }\r\n\r\n    private _update (): void {\r\n        if (this.model) {\r\n            this.model.bindSkeleton(this._skeleton, this._skinningRoot, this._mesh);\r\n            if (this.model.uploadAnimation) { this.model.uploadAnimation(this._clip); }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR } from 'internal:constants';\r\nimport {\r\n    ccclass, help, executeInEditMode, executionOrder, menu, tooltip, type, visible, override, serializable, editable,\r\n} from 'cc.decorator';\r\nimport { getWorldTransformUntilRoot } from '../../animation/transform-utils';\r\nimport { TextureFilter, PixelFormat } from '../../asset/assets/asset-enum';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { Mesh } from '../assets/mesh';\r\nimport { Skeleton } from '../assets/skeleton';\r\nimport { Texture2D } from '../../asset/assets/texture-2d';\r\nimport { CCString, Mat4, Vec2, Vec3, cclegacy, warn } from '../../core';\r\nimport { AttributeName, FormatInfos, Format, Type, Attribute, BufferTextureCopy } from '../../gfx';\r\nimport { mapBuffer, readBuffer, writeBuffer } from '../misc/buffer';\r\nimport { SkinnedMeshRenderer } from './skinned-mesh-renderer';\r\n\r\nconst repeat = (n: number): number => n - Math.floor(n);\r\nconst batch_id: Attribute = new Attribute(AttributeName.ATTR_BATCH_ID, Format.R32F);\r\nconst batch_uv: Attribute = new Attribute(AttributeName.ATTR_BATCH_UV, Format.RG32F);\r\nconst batch_extras_size = FormatInfos[batch_id.format].size + FormatInfos[batch_uv.format].size;\r\n\r\n@ccclass('cc.SkinnedMeshUnit')\r\nexport class SkinnedMeshUnit {\r\n    /**\r\n     * @en Skinned mesh of this unit.\r\n     * @zh 子蒙皮模型的网格模型。\r\n     */\r\n    @type(Mesh)\r\n    public mesh: Mesh | null = null;\r\n\r\n    /**\r\n     * @en Skeleton of this unit.\r\n     * @zh 子蒙皮模型的骨骼。\r\n     */\r\n    @type(Skeleton)\r\n    public skeleton: Skeleton | null = null;\r\n\r\n    /**\r\n     * @en Skinning material of this unit.\r\n     * @zh 子蒙皮模型使用的材质。\r\n     */\r\n    @type(Material)\r\n    public material: Material | null = null;\r\n\r\n    /**\r\n     * @en Local transform matrix\r\n     * @zh 本地变换矩阵\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _localTransform = new Mat4();\r\n\r\n    @serializable\r\n    private _offset = new Vec2(0, 0);\r\n\r\n    @serializable\r\n    private _size = new Vec2(1, 1);\r\n\r\n    /**\r\n     * @en UV offset on texture atlas.\r\n     * @zh 在图集中的 uv 坐标偏移。\r\n     */\r\n    @editable\r\n    set offset (offset) {\r\n        Vec2.copy(this._offset, offset);\r\n    }\r\n\r\n    get offset (): Vec2 {\r\n        return this._offset;\r\n    }\r\n\r\n    /**\r\n     * @en UV extent on texture atlas.\r\n     * @zh 在图集中占的 UV 尺寸。\r\n     */\r\n    @editable\r\n    set size (size) {\r\n        Vec2.copy(this._size, size);\r\n    }\r\n\r\n    get size (): Vec2 {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * @en Convenient setter, copying all necessary information from target [[SkinnedMeshRenderer]] component.\r\n     * @zh 复制目标 [[SkinnedMeshRenderer]] 的所有属性到本单元，方便快速配置。\r\n     */\r\n    @type(SkinnedMeshRenderer)\r\n    set copyFrom (comp: SkinnedMeshRenderer | null) {\r\n        if (!comp) { return; }\r\n        this.mesh = comp.mesh;\r\n        this.skeleton = comp.skeleton;\r\n        this.material = comp.getSharedMaterial(0);\r\n        if (comp.skinningRoot) { getWorldTransformUntilRoot(comp.node, comp.skinningRoot, this._localTransform); }\r\n    }\r\n\r\n    get copyFrom (): SkinnedMeshRenderer | null {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst m4_local = new Mat4();\r\nconst m4_1 = new Mat4();\r\nconst v3_1 = new Vec3();\r\n\r\n/**\r\n * @en The skinned mesh batch renderer component, batches multiple skeleton-sharing [[SkinnedMeshRenderer]].\r\n * @zh 蒙皮模型合批组件，用于合并绘制共享同一骨骼资源的所有蒙皮网格。\r\n */\r\n@ccclass('cc.SkinnedMeshBatchRenderer')\r\n@help('i18n:cc.SkinnedMeshBatchRenderer')\r\n@executionOrder(100)\r\n@executeInEditMode\r\n@menu('Mesh/SkinnedMeshBatchRenderer')\r\nexport class SkinnedMeshBatchRenderer extends SkinnedMeshRenderer {\r\n    /**\r\n     * @en Size of the generated texture atlas.\r\n     * @zh 合图生成的最终图集的边长。\r\n     */\r\n    @serializable\r\n    @tooltip('i18n:batched_skinning_model.atlas_size')\r\n    public atlasSize = 1024;\r\n\r\n    /**\r\n     * @en\r\n     * Texture properties that will be actually using the generated atlas.<br>\r\n     * The first unit's texture will be used if not specified.\r\n     * @zh\r\n     * 材质中真正参与合图的贴图属性，不参与的属性统一使用第一个 unit 的贴图。\r\n     */\r\n    @type([CCString])\r\n    @serializable\r\n    @tooltip('i18n:batched_skinning_model.batchable_texture_names')\r\n    public batchableTextureNames: string[] = [];\r\n\r\n    /**\r\n     * @en Source skinning model components, containing all the data to be batched.\r\n     * @zh 合批前的子蒙皮模型数组，最主要的数据来源。\r\n     */\r\n    @type([SkinnedMeshUnit])\r\n    @serializable\r\n    @tooltip('i18n:batched_skinning_model.units')\r\n    public units: SkinnedMeshUnit[] = [];\r\n\r\n    private _textures: Record<string, Texture2D> = {};\r\n\r\n    private _batchMaterial: Material | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    @override\r\n    @visible(false)\r\n    get mesh (): Mesh | null {\r\n        return super.mesh;\r\n    }\r\n\r\n    set mesh (val) {\r\n        super.mesh = val;\r\n    }\r\n\r\n    @override\r\n    @visible(false)\r\n    get skeleton (): Skeleton | null {\r\n        return super.skeleton;\r\n    }\r\n\r\n    set skeleton (val) {\r\n        super.skeleton = val;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        super.onLoad();\r\n        this.cook();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        for (const tex in this._textures) {\r\n            this._textures[tex].destroy();\r\n        }\r\n        this._textures = {};\r\n        if (this._mesh) {\r\n            this._mesh.destroy();\r\n            this._mesh = null;\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _onMaterialModified (idx: number, material: Material | null): void {\r\n        this.cookMaterials();\r\n        super._onMaterialModified(idx, this.getMaterialInstance(idx));\r\n    }\r\n\r\n    public cook (): void {\r\n        this.cookMaterials();\r\n        this.cookSkeletons();\r\n        this.cookMeshes();\r\n    }\r\n\r\n    public cookMaterials (): void {\r\n        if (!this._batchMaterial) {\r\n            this._batchMaterial = this.getSharedMaterial(0);\r\n        }\r\n        const mat = this.getMaterialInstance(0);\r\n        if (!mat || !this._batchMaterial || !this._batchMaterial.effectAsset) {\r\n            warn('incomplete batch material!'); return;\r\n        }\r\n        mat.copy(this._batchMaterial); this.resizeAtlases();\r\n        const tech = mat.effectAsset!.techniques[mat.technique];\r\n        for (let i = 0; i < tech.passes.length; i++) {\r\n            const pass = tech.passes[i];\r\n            if (!pass.properties) { continue; }\r\n            for (const prop in pass.properties) {\r\n                if (pass.properties[prop].type >= (Type.SAMPLER1D as number)) { // samplers\r\n                    let tex: Texture2D | null = null;\r\n                    if (this.batchableTextureNames.find((n) => n === prop)) {\r\n                        tex = this._textures[prop];\r\n                        if (!tex) { tex = this.createTexture(prop); }\r\n                        this.cookTextures(tex, prop, i);\r\n                    } else {\r\n                        this.units.some((u) => tex = u.material && u.material.getProperty(prop, i) as Texture2D | null);\r\n                    }\r\n                    if (tex) { mat.setProperty(prop, tex, i); }\r\n                } else { // vectors\r\n                    const value: any[] = [];\r\n                    for (let u = 0; u < this.units.length; u++) {\r\n                        const unit = this.units[u];\r\n                        if (!unit.material) { continue; }\r\n                        value.push(unit.material.getProperty(prop.slice(0, -3), i));\r\n                    }\r\n                    mat.setProperty(prop, value, i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public cookSkeletons (): void {\r\n        if (!this._skinningRoot) { warn('no skinning root specified!'); return; }\r\n        // merge joints accordingly\r\n        const joints: string[] = [];\r\n        const bindposes: Mat4[] = [];\r\n        for (let u = 0; u < this.units.length; u++) {\r\n            const unit = this.units[u];\r\n            if (!unit || !unit.skeleton) { continue; }\r\n            const partial = unit.skeleton;\r\n            Mat4.invert(m4_local, unit._localTransform);\r\n            for (let i = 0; i < partial.joints.length; i++) {\r\n                const path = partial.joints[i];\r\n                const idx = joints.findIndex((p) => p === path);\r\n                if (idx >= 0) {\r\n                    if (EDITOR) { // consistency check\r\n                        Mat4.multiply(m4_1, partial.bindposes[i], m4_local);\r\n                        if (!m4_1.equals(bindposes[idx])) {\r\n                            warn(`${this.node.name}: Inconsistent bindpose at ${joints[idx]} in unit ${u}, artifacts may present`);\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n                joints.push(path);\r\n                // cancel out local transform\r\n                bindposes.push(Mat4.multiply(new Mat4(), partial.bindposes[i] || Mat4.IDENTITY, m4_local));\r\n            }\r\n        }\r\n        // sort the array to be more cache-friendly\r\n        const idxMap = Array.from(Array(joints.length).keys()).sort((a, b) => {\r\n            if (joints[a] > joints[b]) { return 1; }\r\n            if (joints[a] < joints[b]) { return -1; }\r\n            return 0;\r\n        });\r\n        const skeleton = new Skeleton();\r\n        skeleton.joints = joints.map((_, idx, arr) => arr[idxMap[idx]]);\r\n        skeleton.bindposes = bindposes.map((_, idx, arr) => arr[idxMap[idx]]);\r\n        // apply\r\n        if (this._skeleton) { this._skeleton.destroy(); }\r\n        this.skeleton = skeleton;\r\n    }\r\n\r\n    public cookMeshes (): void {\r\n        let isValid = false;\r\n        for (let u = 0; u < this.units.length; u++) {\r\n            const unit = this.units[u];\r\n            if (unit.mesh) {\r\n                isValid = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!isValid || !this._skinningRoot) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh) {\r\n            this._mesh.destroyRenderingMesh();\r\n        } else {\r\n            this._mesh = new Mesh();\r\n        }\r\n\r\n        let posOffset = 0;\r\n        let posFormat = Format.UNKNOWN;\r\n        let normalOffset = 0;\r\n        let normalFormat = Format.UNKNOWN;\r\n        let tangentOffset = 0;\r\n        let tangentFormat = Format.UNKNOWN;\r\n        let uvOffset = 0;\r\n        let uvFormat = Format.UNKNOWN;\r\n        let jointOffset = 0;\r\n        let jointFormat = Format.UNKNOWN;\r\n\r\n        // prepare joint index map\r\n        const jointIndexMap: number[][] = new Array(this.units.length);\r\n        const unitLen = this.units.length;\r\n        for (let i = 0; i < unitLen; i++) {\r\n            const unit = this.units[i];\r\n            if (!unit || !unit.skeleton) { continue; }\r\n            jointIndexMap[i] = unit.skeleton.joints.map((j) => this._skeleton!.joints.findIndex((ref) => j === ref));\r\n        }\r\n\r\n        for (let i = 0; i < unitLen; i++) {\r\n            const unit = this.units[i];\r\n            if (!unit || !unit.mesh || !unit.mesh.data) { continue; }\r\n            const newMesh = this._createUnitMesh(i, unit.mesh);\r\n            const dataView = new DataView(newMesh.data.buffer);\r\n\r\n            Mat4.invert(m4_local, unit._localTransform);\r\n            Mat4.transpose(m4_local, m4_local);\r\n\r\n            const { offset } = unit;\r\n            const { size } = unit;\r\n            for (let b = 0; b < newMesh.struct.vertexBundles.length; b++) {\r\n                const bundle = newMesh.struct.vertexBundles[b];\r\n                // apply local transform to mesh\r\n                posOffset = bundle.view.offset;\r\n                posFormat = Format.UNKNOWN;\r\n                for (let a = 0; a < bundle.attributes.length; a++) {\r\n                    const attr = bundle.attributes[a];\r\n                    if (attr.name === AttributeName.ATTR_POSITION as string) {\r\n                        posFormat = attr.format;\r\n                        break;\r\n                    }\r\n                    posOffset += FormatInfos[attr.format].size;\r\n                }\r\n                if (posFormat) {\r\n                    const pos = readBuffer(dataView, posFormat, posOffset, bundle.view.length, bundle.view.stride);\r\n                    for (let j = 0; j < pos.length; j += 3) {\r\n                        Vec3.fromArray(v3_1, pos, j);\r\n                        Vec3.transformMat4(v3_1, v3_1, unit._localTransform);\r\n                        Vec3.toArray(pos, v3_1, j);\r\n                    }\r\n                    writeBuffer(dataView, pos, posFormat, posOffset, bundle.view.stride);\r\n                }\r\n                normalOffset = bundle.view.offset;\r\n                normalFormat = Format.UNKNOWN;\r\n                for (let a = 0; a < bundle.attributes.length; a++) {\r\n                    const attr = bundle.attributes[a];\r\n                    if (attr.name === AttributeName.ATTR_NORMAL as string) {\r\n                        normalFormat = attr.format;\r\n                        break;\r\n                    }\r\n                    normalOffset += FormatInfos[attr.format].size;\r\n                }\r\n                if (normalFormat) {\r\n                    const normal = readBuffer(dataView, normalFormat, normalOffset, bundle.view.length, bundle.view.stride);\r\n                    for (let j = 0; j < normal.length; j += 3) {\r\n                        Vec3.fromArray(v3_1, normal, j);\r\n                        Vec3.transformMat4Normal(v3_1, v3_1, m4_local);\r\n                        Vec3.toArray(normal, v3_1, j);\r\n                    }\r\n                    writeBuffer(dataView, normal, normalFormat, normalOffset, bundle.view.stride);\r\n                }\r\n                tangentOffset = bundle.view.offset;\r\n                tangentFormat = Format.UNKNOWN;\r\n                for (let a = 0; a < bundle.attributes.length; a++) {\r\n                    const attr = bundle.attributes[a];\r\n                    if (attr.name === (AttributeName.ATTR_TANGENT) as string) {\r\n                        tangentFormat = attr.format;\r\n                        break;\r\n                    }\r\n                    tangentOffset += FormatInfos[attr.format].size;\r\n                }\r\n                if (tangentFormat) {\r\n                    const tangent = readBuffer(dataView, tangentFormat, tangentOffset, bundle.view.length, bundle.view.stride);\r\n                    for (let j = 0; j < tangent.length; j += 3) {\r\n                        Vec3.fromArray(v3_1, tangent, j);\r\n                        Vec3.transformMat4Normal(v3_1, v3_1, m4_local);\r\n                        Vec3.toArray(tangent, v3_1, j);\r\n                    }\r\n                    writeBuffer(dataView, tangent, tangentFormat, tangentOffset, bundle.view.stride);\r\n                }\r\n                // merge UV\r\n                uvOffset = bundle.view.offset;\r\n                uvFormat = Format.UNKNOWN;\r\n                for (let a = 0; a < bundle.attributes.length; a++) {\r\n                    const attr = bundle.attributes[a];\r\n                    if (attr.name === AttributeName.ATTR_BATCH_UV as string) {\r\n                        uvFormat = attr.format;\r\n                        break;\r\n                    }\r\n                    uvOffset += FormatInfos[attr.format].size;\r\n                }\r\n                if (uvFormat) {\r\n                    mapBuffer(dataView, (cur, idx) => {\r\n                        cur = repeat(cur); // warp to [0, 1] first\r\n                        const comp = idx === 0 ? 'x' : 'y';\r\n                        return cur * size[comp] + offset[comp];\r\n                    }, uvFormat, uvOffset, bundle.view.length, bundle.view.stride, dataView);\r\n                }\r\n                // merge joint indices\r\n                const idxMap = jointIndexMap[i];\r\n                if (!idxMap) { continue; }\r\n                jointOffset = bundle.view.offset;\r\n                jointFormat = Format.UNKNOWN;\r\n                for (let a = 0; a < bundle.attributes.length; a++) {\r\n                    const attr = bundle.attributes[a];\r\n                    if (attr.name === AttributeName.ATTR_JOINTS as string) {\r\n                        jointFormat = attr.format;\r\n                        break;\r\n                    }\r\n                    jointOffset += FormatInfos[attr.format].size;\r\n                }\r\n                if (jointFormat) {\r\n                    mapBuffer(dataView, (cur) => idxMap[cur], jointFormat, jointOffset, bundle.view.length, bundle.view.stride, dataView);\r\n                }\r\n            }\r\n            this._mesh.merge(newMesh);\r\n        }\r\n\r\n        this._onMeshChanged(this._mesh);\r\n        this._updateModels();\r\n    }\r\n\r\n    protected cookTextures (target: Texture2D, prop: string, passIdx: number): void {\r\n        const texImages: TexImageSource[] = [];\r\n        const texImageRegions: BufferTextureCopy[] = [];\r\n        const texBuffers: ArrayBufferView[] = [];\r\n        const texBufferRegions: BufferTextureCopy[] = [];\r\n        for (let u = 0; u < this.units.length; u++) {\r\n            const unit = this.units[u];\r\n            if (!unit.material) { continue; }\r\n            const partial = unit.material.getProperty(prop, passIdx) as Texture2D | null;\r\n            if (partial && partial.image && partial.image.data) {\r\n                const region = new BufferTextureCopy();\r\n                region.texOffset.x = unit.offset.x * this.atlasSize;\r\n                region.texOffset.y = unit.offset.y * this.atlasSize;\r\n                region.texExtent.width = unit.size.x * this.atlasSize;\r\n                region.texExtent.height = unit.size.y * this.atlasSize;\r\n                const { data } = partial.image;\r\n                if (!ArrayBuffer.isView(data)) {\r\n                    texImages.push(data);\r\n                    texImageRegions.push(region);\r\n                } else {\r\n                    texBuffers.push(data);\r\n                    texBufferRegions.push(region);\r\n                }\r\n            }\r\n        }\r\n        const gfxTex = target.getGFXTexture()!;\r\n        const { device } = cclegacy.director.root!;\r\n        if (texBuffers.length > 0) { device.copyBuffersToTexture(texBuffers, gfxTex, texBufferRegions); }\r\n        if (texImages.length > 0) { device.copyTexImagesToTexture(texImages, gfxTex, texImageRegions); }\r\n    }\r\n\r\n    protected createTexture (prop: string): Texture2D {\r\n        const tex = new Texture2D();\r\n        tex.setFilters(TextureFilter.LINEAR, TextureFilter.LINEAR);\r\n        tex.setMipFilter(TextureFilter.NEAREST);\r\n        tex.reset({\r\n            width: this.atlasSize,\r\n            height: this.atlasSize,\r\n            format: PixelFormat.RGBA8888,\r\n        });\r\n        this._textures[prop] = tex;\r\n        return tex;\r\n    }\r\n\r\n    protected resizeAtlases (): void {\r\n        for (const prop in this._textures) {\r\n            const tex = this._textures[prop];\r\n            tex.reset({\r\n                width: this.atlasSize,\r\n                height: this.atlasSize,\r\n                format: PixelFormat.RGBA8888,\r\n            });\r\n        }\r\n    }\r\n\r\n    private _createUnitMesh (unitIdx: number, mesh: Mesh): Mesh {\r\n        // add batch ID to this temp mesh\r\n        // first, update bookkeeping\r\n        const newMeshStruct: Mesh.IStruct = JSON.parse(JSON.stringify(mesh.struct));\r\n        const modifiedBundles: Record<number, [Format, number]> = {};\r\n        for (let p = 0; p < mesh.struct.primitives.length; p++) {\r\n            const primitive = mesh.struct.primitives[p];\r\n            let uvOffset = 0;\r\n            let uvFormat = Format.UNKNOWN;\r\n            let bundleIdx = 0;\r\n            for (; bundleIdx < primitive.vertexBundelIndices.length; bundleIdx++) {\r\n                const bundle = mesh.struct.vertexBundles[primitive.vertexBundelIndices[bundleIdx]];\r\n                uvOffset = bundle.view.offset;\r\n                uvFormat = Format.UNKNOWN;\r\n                for (let a = 0; a < bundle.attributes.length; a++) {\r\n                    const attr = bundle.attributes[a];\r\n                    if (attr.name === AttributeName.ATTR_TEX_COORD as string) {\r\n                        uvFormat = attr.format;\r\n                        break;\r\n                    }\r\n                    uvOffset += FormatInfos[attr.format].size;\r\n                }\r\n                if (uvFormat) { break; }\r\n            }\r\n            if (modifiedBundles[bundleIdx] !== undefined) { continue; }\r\n            modifiedBundles[bundleIdx] = [uvFormat, uvOffset];\r\n            const newBundle = newMeshStruct.vertexBundles[bundleIdx]; // put the new UVs in the same bundle with original UVs\r\n            newBundle.attributes.push(batch_id);\r\n            newBundle.attributes.push(batch_uv);\r\n            newBundle.view.offset = 0;\r\n            newBundle.view.length += newBundle.view.count * batch_extras_size;\r\n            newBundle.view.stride += batch_extras_size;\r\n        }\r\n        let totalLength = 0;\r\n        for (let b = 0; b < newMeshStruct.vertexBundles.length; b++) {\r\n            totalLength += newMeshStruct.vertexBundles[b].view.length;\r\n        }\r\n        for (let p = 0; p < newMeshStruct.primitives.length; p++) {\r\n            const pm = newMeshStruct.primitives[p];\r\n            if (pm.indexView) {\r\n                pm.indexView.offset = totalLength;\r\n                totalLength += pm.indexView.length;\r\n            }\r\n        }\r\n        // now, we ride!\r\n        const newMeshData = new Uint8Array(totalLength);\r\n        const oldMeshData = mesh.data;\r\n        const newDataView = new DataView(newMeshData.buffer);\r\n        const oldDataView = new DataView(oldMeshData.buffer);\r\n        const { isLittleEndian } = cclegacy.sys;\r\n        for (const b in modifiedBundles) {\r\n            const newBundle = newMeshStruct.vertexBundles[b];\r\n            const oldBundle = mesh.struct.vertexBundles[b];\r\n            const [uvFormat, uvOffset] = modifiedBundles[b];\r\n            const uvs = readBuffer(oldDataView, uvFormat, uvOffset, oldBundle.view.length, oldBundle.view.stride);\r\n            const oldView = oldBundle.view;\r\n            const newView = newBundle.view;\r\n            const oldStride = oldView.stride;\r\n            const newStride = newView.stride;\r\n            let oldOffset = oldView.offset;\r\n            let newOffset = newView.offset;\r\n            for (let j = 0; j < newView.count; j++) {\r\n                const srcVertex = oldMeshData.subarray(oldOffset, oldOffset + oldStride);\r\n                newMeshData.set(srcVertex, newOffset);\r\n                // insert batch ID\r\n                newDataView.setFloat32(newOffset + oldStride, unitIdx);\r\n                // insert batch UV\r\n                newDataView.setFloat32(newOffset + oldStride + 4, uvs[j * 2], isLittleEndian as boolean);\r\n                newDataView.setFloat32(newOffset + oldStride + 8, uvs[j * 2 + 1], isLittleEndian as boolean);\r\n                newOffset += newStride;\r\n                oldOffset += oldStride;\r\n            }\r\n        }\r\n        for (let k = 0; k < newMeshStruct.primitives.length; k++) {\r\n            const oldPrimitive = mesh.struct.primitives[k];\r\n            const newPrimitive = newMeshStruct.primitives[k];\r\n            if (oldPrimitive.indexView && newPrimitive.indexView) {\r\n                const oldStride = oldPrimitive.indexView.stride;\r\n                const newStride = newPrimitive.indexView.stride;\r\n                let oldOffset = oldPrimitive.indexView.offset;\r\n                let newOffset = newPrimitive.indexView.offset;\r\n                for (let j = 0; j < newPrimitive.indexView.count; j++) {\r\n                    const srcIndices = oldMeshData.subarray(oldOffset, oldOffset + oldStride);\r\n                    newMeshData.set(srcIndices, newOffset);\r\n                    newOffset += newStride;\r\n                    oldOffset += oldStride;\r\n                }\r\n            }\r\n        }\r\n        const newMesh = new Mesh();\r\n        newMesh.reset({\r\n            struct: newMeshStruct,\r\n            data: newMeshData,\r\n        });\r\n        return newMesh;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { SkinnedMeshRenderer } from './skinned-mesh-renderer';\r\nimport { SkinnedMeshBatchRenderer, SkinnedMeshUnit } from './skinned-mesh-batch-renderer';\r\nimport { js, cclegacy } from '../../core';\r\n/**\r\n * Alias of [[SkinnedMeshRenderer]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { SkinnedMeshRenderer as SkinningModelComponent };\r\ncclegacy.SkinningModelComponent = SkinnedMeshRenderer;\r\njs.setClassAlias(SkinnedMeshRenderer, 'cc.SkinningModelComponent');\r\n/**\r\n * Alias of [[SkinnedMeshUnit]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { SkinnedMeshUnit as SkinningModelUnit };\r\ncclegacy.SkinningModelUnit = SkinnedMeshUnit;\r\njs.setClassAlias(SkinnedMeshUnit, 'cc.SkinningModelUnit');\r\n/**\r\n * Alias of [[SkinnedMeshBatchRenderer]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { SkinnedMeshBatchRenderer as BatchedSkinningModelComponent };\r\ncclegacy.BatchedSkinningModelComponent = SkinnedMeshBatchRenderer;\r\njs.setClassAlias(SkinnedMeshBatchRenderer, 'cc.BatchedSkinningModelComponent');\r\n"],"names":["target","root","node","path","name","parent","slice","BAKE_SKELETON_CURVE_SYMBOL","exports","Symbol","SkelAnimDataHub","getOrExtract","clip","data","pool","get","samples","sample","cclegacy","director","dataPoolManager","releaseAnimationClip","frames","Math","ceil","duration","step","set","destroy","Map","m4_1","Mat4","getWorldTransformUntilRoot","outMatrix","identity","fromRTS","rotation","position","scale","multiply","jointTextureSamplerInfo","SamplerInfo","Filter","POINT","NONE","Address","CLAMP","uploadJointData","out","base","mat","m00","m01","m02","m12","m04","m05","m06","m13","m08","m09","m10","m14","selectJointsMediumFormat","device","getFormatFeatures","Format","RGBA32F","FormatFeatureBit","SAMPLED_TEXTURE","RGBA8","roundUpTextureSize","targetLength","formatSize","formatScale","sqrt","max","Quat","Vec3","v3_3","v3_4","v3_min","v3_max","m4_2","ab_1","geometry","Inf","Number","MAX_SAFE_INTEGER","stack","JointTexturePool","this","_device","_pool","_textureBuffers","_formatSize","_pixelsPerJoint","_customPool","_chunkIdxMap","format","FormatInfos","size","TextureBufferPool","initialize","roundUpFn","_proto","prototype","clear","registerCustomTextureLayouts","layouts","i","length","layout","textureLength","chunkIdx","createChunk","j","contents","content","skeleton","k","clips","getDefaultPoseTexture","mesh","skinningRoot","hash","texture","bounds","has","refCount","joints","bindposes","textureBuffer","buildTexture","jointCount","bufSize","customChunkIdx","handle","undefined","alloc","Float32Array","BYTES_PER_ELEMENT","pixelOffset","start","skeletonHash","clipHash","readyToBeDeleted","boneSpaceBounds","getBoneSpaceBounds","offset","getChildByPath","inverseBindposes","bound","transform","getBoundary","min","IDENTITY","fromPoints","update","buffer","getSequencePoseTexture","animInfos","_createAnimInfos","f","push","_j2","curveData","downstream","bindposeIdx","bindposeCorrection","transformValid","boneSpaceBound","center","halfExtents","releaseHandle","free","releaseSkeleton","it","values","res","next","done","value","clipData","animPath","source","animNode","correctionPath","idx","lastIndexOf","substring","t","transforms","_createClass","key","JointAnimationInfo","_proto2","getData","nodeID","createBuffer","BufferInfo","BufferUsageBit","UNIFORM","TRANSFER_DST","MemoryUsageBit","HOST","DEVICE","UBOSkinningAnimation","SIZE","info","dirty","dirtyForJSB","Uint8Array","currentClip","switchClip","_step","_iterator","_createForOfIteratorHelperLoose","getWorldMatrix","stamp","hasChangedFlags","world","local","getTransform","child","joint","id","uuid","deleteTransform","uniformPatches","texturePatches","getRelevantBuffers","outIndices","outBuffers","jointMaps","targetJoint","idxMap","index","v3_1","v3_2","RealTimeJointTexture","_format","PixelFormat","_textures","_buffers","WIDTH","HEIGHT","SkinningModel","_MorphModel","_this","call","_dataArray","_joints","_bufferIndices","_realTimeJointTexture","_realTimeTextureMode","type","ModelType","SKINNING","_inheritsLoose","bindSkeleton","forEach","tex","uploadAnimation","UBOSkinning","JOINT_UNIFORM_CAPACITY","struct","_ensureEnoughBuffers","jointBufferIndices","_initRealTimeJointTexture","bindpose","indices","buffers","updateTransform","isTransformDirty","updateWorldTransform","_localDataUpdated","Infinity","_this$_joints$i2","worldMatrix","worldBounds","_worldBounds","_modelBounds","_mat","_pos","_rot","_scale","updateUBOs","_this$_joints$i4","b","_updateRealTimeJointTextureBuffer","initSubModel","subMeshData","original","vertexBuffers","iaInfo","jointMappedBuffers","getMacroPatches","subModelIndex","superMacroPatches","myPatches","concat","_updateLocalDescriptors","submodelIdx","descriptorSet","_bindRealTimeJointTexture","bindBuffer","BINDING","_updateInstancedAttributes","attributes","subModel","passes","batchingScheme","BatchingSchemes","warnID","getPathInHierarchy","count","maxJoints","gfxDevice","width","height","RGBA8888","textures","pixelFormat","arrayBuffer","updateView","image","ImageAsset","_data","_compressed","Texture2D","setFilters","TextureFilter","NEAREST","setMipFilter","setWrapMode","WrapMode","CLAMP_TO_EDGE","jointTexture","gfxTexture","getGFXTexture","sampler","getGFXSampler","bindTexture","UNIFORM_REALTIME_JOINT_TEXTURE_BINDING","bindSampler","src","idxSrc","idxDst","uploadData","MorphModel","BakedSkinningModel","uploadedAnim","_jointsMedium","_skeleton","_mesh","_dataPoolManager","_instAnimInfoIdx","BAKED_SKINNING","jointTextureInfo","animInfo","jointAnimationInfo","boundsInfo","_applyJointTexture","resMgr","UBOSkinningTexture","_this$_jointsMedium","skelBound","hasNonInstancingPass","_subModels","instancedAttributeBlock","views","patches","anim","jointTexturePool","oldTex","_this$_jointsMedium2","updateInstancedJointTextureInfo","UNIFORM_JOINT_TEXTURE_BINDING","_this$_jointsMedium3","getSampler","getInstancedAttributeIndex","INST_JOINT_ANIM_INFO","_this$_jointsMedium4","view","SkinnedMeshRenderer","_dec","ccclass","executionOrder","_dec3","Skeleton","_dec4","Node","_dec6","_class","_dec2","_class2","_MeshRenderer","_initializer","_skinningRoot","_initializer2","_clip","associatedAnimation","_modelType","onLoad","_tryBindAnimation","onDestroy","notifySkinnedMeshRemoved","assertIsTrue","model","setUseBakedAnimation","val","force","modelType","_model","destroyModel","_models","_updateModels","_updateCastShadow","_updateReceiveShadow","_updateUseLightProbe","enabledInHierarchy","_attachToScene","setSharedMaterial","material","getMaterialInstance","_updateModelParams","_update","skinningRootIsParent","current","animation","getComponent","notifySkinnedMeshAdded","MeshRenderer","_applyDecoratedInitializer","_applyDecoratedDescriptor","_dec5","Object","getOwnPropertyDescriptor","batch_id","Attribute","AttributeName","ATTR_BATCH_ID","R32F","batch_uv","ATTR_BATCH_UV","RG32F","batch_extras_size","SkinnedMeshUnit","Mesh","Material","_initializer3","_localTransform","_initializer4","_offset","_initializer5","_size","_initializer6","Vec2","copy","comp","getSharedMaterial","serializable","m4_local","SkinnedMeshBatchRenderer","_dec8","CCString","_dec9","_class4","_dec7","_class5","_SkinnedMeshRenderer","atlasSize","_initializer7","batchableTextureNames","_initializer8","units","_initializer9","_batchMaterial","cook","_onMaterialModified","cookMaterials","cookSkeletons","cookMeshes","_this2","effectAsset","resizeAtlases","tech","techniques","technique","_loop","pass","properties","_loop2","prop","Type","SAMPLER1D","find","n","createTexture","cookTextures","some","u","getProperty","setProperty","unit","warn","partial","invert","_loop3","findIndex","p","Array","from","keys","sort","a","map","_","arr","_this4","isValid","destroyRenderingMesh","posOffset","posFormat","UNKNOWN","normalOffset","normalFormat","tangentOffset","tangentFormat","uvOffset","uvFormat","jointOffset","jointFormat","jointIndexMap","unitLen","ref","_loop4","newMesh","_createUnitMesh","dataView","DataView","transpose","_loop5","bundle","vertexBundles","attr","ATTR_POSITION","pos","readBuffer","stride","fromArray","transformMat4","toArray","writeBuffer","ATTR_NORMAL","normal","transformMat4Normal","ATTR_TANGENT","tangent","mapBuffer","cur","floor","ATTR_JOINTS","merge","_onMeshChanged","passIdx","texImages","texImageRegions","texBuffers","texBufferRegions","region","BufferTextureCopy","texOffset","x","y","texExtent","ArrayBuffer","isView","gfxTex","copyBuffersToTexture","copyTexImagesToTexture","LINEAR","reset","unitIdx","newMeshStruct","JSON","parse","stringify","modifiedBundles","primitives","primitive","bundleIdx","vertexBundelIndices","ATTR_TEX_COORD","newBundle","totalLength","pm","indexView","newMeshData","oldMeshData","newDataView","oldDataView","isLittleEndian","sys","oldBundle","_modifiedBundles$_b2","uvs","oldView","newView","oldStride","newStride","oldOffset","newOffset","srcVertex","subarray","setFloat32","oldPrimitive","newPrimitive","srcIndices","override","SkinningModelComponent","js","SkinningModelUnit","BatchedSkinningModelComponent"],"mappings":"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"}