{"version":3,"file":"director-D6Xf3-Ej.js","sources":["../../../cocos/xr/xr-enums.ts","../../../cocos/root.ts","../../../cocos/2d/framework/ui-renderer-manager.ts","../../../cocos/game/director.ts"],"sourcesContent":["/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @en XR Eye Enum.\r\n * @zh XR视窗枚举。\r\n */\r\nexport enum XREye {\r\n    /**\r\n     * @en None.\r\n     * @zh 无。\r\n     */\r\n    NONE = -1,\r\n    /**\r\n     * @en Left eye.\r\n     * @zh 左眼。\r\n     */\r\n    LEFT = 0,\r\n    /**\r\n     * @en Right eye.\r\n     * @zh 右眼。\r\n     */\r\n    RIGHT = 1\r\n}\r\n\r\n/**\r\n * @en XR Config Key Enum.\r\n * @zh XR配置键值枚举。\r\n */\r\nexport enum XRConfigKey {\r\n    /**\r\n     * @en Session running.\r\n     * @zh 会话运行中。\r\n     */\r\n    SESSION_RUNNING = 2,\r\n    /**\r\n     * @en View count.\r\n     * @zh 视窗数量。\r\n     */\r\n    VIEW_COUNT = 6,\r\n    /**\r\n     * @en Swapchain width.\r\n     * @zh 交换链宽度。\r\n     */\r\n    SWAPCHAIN_WIDTH = 7,\r\n    /**\r\n     * @en Swapchain height.\r\n     * @zh 交换链高度。\r\n     */\r\n    SWAPCHAIN_HEIGHT = 8,\r\n    /**\r\n     * @en Device IPD.\r\n     * @zh 设备瞳距。\r\n     */\r\n    DEVICE_IPD = 37,\r\n    /**\r\n     * @en Split AR Glasses.\r\n     * @zh 分体式AR眼镜。\r\n     */\r\n    SPLIT_AR_GLASSES = 42\r\n}\r\n\r\n/**\r\n * @en XR Pose Type Enum.\r\n * @zh XR姿态类型枚举。\r\n */\r\nexport enum XRPoseType {\r\n    /**\r\n     * @en The pose for left eye.\r\n     * @zh 左眼姿态。\r\n     */\r\n    VIEW_LEFT = 0,\r\n    /**\r\n     * @en The pose for left controller.\r\n     * @zh 左手柄姿态。\r\n     */\r\n    HAND_LEFT = 1,\r\n    /**\r\n     * @en The pose for left controller's aim.\r\n     * @zh 左手柄瞄准方向姿态。\r\n     */\r\n    AIM_LEFT = 2,\r\n    /**\r\n     * @en The pose for right eye.\r\n     * @zh 右眼姿态。\r\n     */\r\n    VIEW_RIGHT = 3,\r\n    /**\r\n     * @en The pose for right controller.\r\n     * @zh 右手柄姿态。\r\n     */\r\n    HAND_RIGHT = 4,\r\n    /**\r\n     * @en The pose for right controller's aim.\r\n     * @zh 右手柄瞄准方向姿态。\r\n     */\r\n    AIM_RIGHT = 5,\r\n    /**\r\n     * @en The pose for head.\r\n     * @zh 头部姿态。\r\n     */\r\n    HEAD_MIDDLE = 6,\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { USE_XR } from 'internal:constants';\r\nimport { Pool, cclegacy, warnID, settings, macro, log, errorID, SettingsCategory } from './core';\r\nimport { DebugView } from './rendering/debug-view';\r\nimport { Camera, CameraType, Light, Model, TrackingType } from './render-scene/scene';\r\nimport type { DataPoolManager } from './3d/skeletal-animation/data-pool-manager';\r\nimport { LightType } from './render-scene/scene/light';\r\nimport { IRenderSceneInfo, RenderScene } from './render-scene/core/render-scene';\r\nimport { DirectionalLight } from './render-scene/scene/directional-light';\r\nimport { SphereLight } from './render-scene/scene/sphere-light';\r\nimport { SpotLight } from './render-scene/scene/spot-light';\r\nimport { PointLight } from './render-scene/scene/point-light';\r\nimport { RangedDirectionalLight } from './render-scene/scene/ranged-directional-light';\r\nimport { RenderWindow, IRenderWindowInfo } from './render-scene/core/render-window';\r\nimport { ColorAttachment, DepthStencilAttachment, RenderPassInfo, StoreOp, Device, Swapchain, deviceManager, LegacyRenderMode } from './gfx';\r\nimport { BasicPipeline, PipelineRuntime } from './rendering/custom/pipeline';\r\nimport { Batcher2D } from './2d/renderer/batcher-2d';\r\nimport { IPipelineEvent, PipelineEventProcessor } from './rendering/pipeline-event';\r\nimport { localDescriptorSetLayout_ResizeMaxJoints, UBOCameraEnum, UBOGlobalEnum, UBOLocalEnum, UBOShadowEnum, UBOWorldBound } from './rendering/define';\r\nimport { XREye, XRPoseType } from './xr/xr-enums';\r\nimport { ICustomJointTextureLayout } from './3d/skeletal-animation/skeletal-animation-utils';\r\nimport { getPipelineSceneData } from './rendering/pipeline-scene-data-utils';\r\n\r\n/**\r\n * @en Initialization information for the Root\r\n * @zh Root 初始化描述信息\r\n */\r\nexport interface IRootInfo {\r\n    enableHDR?: boolean;\r\n}\r\n\r\n/**\r\n * @en Creation information for the Root\r\n * @zh 场景创建描述信息\r\n */\r\nexport interface ISceneInfo {\r\n    name: string;\r\n}\r\n\r\n/**\r\n * @en The root manager of the renderer which manages all device resources and the render pipeline.\r\n * @zh 基础渲染器管理类，管理所有设备相关的资源创建以及渲染管线。\r\n */\r\nexport class Root {\r\n    /**\r\n     * @en The GFX device\r\n     * @zh GFX 设备\r\n     */\r\n    public get device (): Device {\r\n        return this._device;\r\n    }\r\n\r\n    /**\r\n     * @en The main window\r\n     * @zh 主窗口\r\n     */\r\n    public get mainWindow (): RenderWindow | null {\r\n        return this._mainWindow;\r\n    }\r\n\r\n    /**\r\n     * @en The current active window\r\n     * @zh 当前激活的窗口\r\n     */\r\n    public set curWindow (window: RenderWindow | null) {\r\n        this._curWindow = window;\r\n    }\r\n\r\n    public get curWindow (): RenderWindow | null {\r\n        return this._curWindow;\r\n    }\r\n\r\n    /**\r\n     * @e The temporary window for data transmission\r\n     * @zh 临时窗口（用于数据传输）\r\n     * @internal\r\n     */\r\n    public set tempWindow (window: RenderWindow | null) {\r\n        this._tempWindow = window;\r\n    }\r\n\r\n    public get tempWindow (): RenderWindow | null {\r\n        return this._tempWindow;\r\n    }\r\n\r\n    /**\r\n     * @en The windows list\r\n     * @zh 窗口列表\r\n     */\r\n    public get windows (): RenderWindow[] {\r\n        return this._windows;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 启用自定义渲染管线\r\n     */\r\n    public get usesCustomPipeline (): boolean {\r\n        return this._usesCustomPipeline;\r\n    }\r\n\r\n    /**\r\n     * @en The render pipeline\r\n     * @zh 渲染管线\r\n     */\r\n    public get pipeline (): PipelineRuntime {\r\n        return this._pipeline!;\r\n    }\r\n\r\n    /**\r\n     * @en The custom render pipeline\r\n     * @zh 自定义渲染管线\r\n     */\r\n    public get customPipeline (): BasicPipeline {\r\n        return this._customPipeline!;\r\n    }\r\n\r\n    /**\r\n     * @en The pipeline events\r\n     * @zh 渲染管线事件\r\n     */\r\n    public get pipelineEvent (): IPipelineEvent {\r\n        return this._pipelineEvent!;\r\n    }\r\n\r\n    /**\r\n     * @en The draw batch manager for 2D UI, for engine internal usage, user do not need to use this.\r\n     * @zh 2D UI 渲染合批管理器，引擎内部使用，用户无需使用此接口\r\n     */\r\n    public get batcher2D (): Batcher2D {\r\n        return this._batcher as Batcher2D;\r\n    }\r\n\r\n    /**\r\n     * @en Render scenes list\r\n     * @zh 渲染场景列表\r\n     */\r\n    public get scenes (): RenderScene[] {\r\n        return this._scenes;\r\n    }\r\n\r\n    /**\r\n     * @en The debug view manager for rendering\r\n     * @zh 渲染调试管理器\r\n     */\r\n    public get debugView (): DebugView {\r\n        return this._debugView;\r\n    }\r\n\r\n    /**\r\n     * @en The time cumulated in seconds since the game began running.\r\n     * @zh 累计时间（秒）。\r\n     */\r\n    public get cumulativeTime (): number {\r\n        return this._cumulativeTime;\r\n    }\r\n\r\n    /**\r\n     * @en The current frame time in seconds.\r\n     * @zh 帧时间（秒）。\r\n     */\r\n    public get frameTime (): number {\r\n        return this._frameTime;\r\n    }\r\n\r\n    /**\r\n     * @en The frame count during the last second\r\n     * @zh 一秒内的累计帧数\r\n     */\r\n    public get frameCount (): number {\r\n        return this._frameCount;\r\n    }\r\n\r\n    /**\r\n     * @en The recent frame rate for the last second\r\n     * @zh 当前每秒帧率\r\n     */\r\n    public get fps (): number {\r\n        return this._fps;\r\n    }\r\n\r\n    /**\r\n     * @en The wanted frame rate set by user\r\n     * @zh 每秒设定帧率\r\n     */\r\n    public set fixedFPS (fps: number) {\r\n        if (fps > 0) {\r\n            this._fixedFPS = fps;\r\n        }\r\n    }\r\n\r\n    public get fixedFPS (): number {\r\n        return this._fixedFPS;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public get dataPoolManager (): DataPoolManager {\r\n        return this._dataPoolMgr;\r\n    }\r\n\r\n    /**\r\n     * @en Whether the built-in deferred pipeline is used.\r\n     * @zh 是否启用内置延迟渲染管线\r\n     */\r\n    public get useDeferredPipeline (): boolean {\r\n        return this._useDeferredPipeline;\r\n    }\r\n\r\n    public get cameraList (): Camera[] {\r\n        return this._cameraList;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _createSceneFun: (root: Root) => RenderScene = null!;\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _createWindowFun: (root: Root) => RenderWindow = null!;\r\n\r\n    private declare _device: Device;\r\n    private _windows: RenderWindow[] = [];\r\n    private _mainWindow: RenderWindow | null = null;\r\n    private _curWindow: RenderWindow | null = null;\r\n    private _tempWindow: RenderWindow | null = null;\r\n    private _usesCustomPipeline = true;\r\n    private _pipeline: PipelineRuntime | null = null;\r\n    private _pipelineEvent: IPipelineEvent | null = new PipelineEventProcessor();\r\n    private _classicPipeline: (PipelineRuntime & IPipelineEvent) | null = null;\r\n    private _customPipeline: BasicPipeline | null = null;\r\n    private _batcher: Batcher2D | null = null;\r\n    private declare _dataPoolMgr: DataPoolManager;\r\n    private _scenes: RenderScene[] = [];\r\n    private _modelPools = new Map<Constructor<Model>, Pool<Model>>();\r\n    private _cameraPool: Pool<Camera> | null = null;\r\n    private _lightPools = new Map<Constructor<Light>, Pool<Light>>();\r\n    private _debugView = new DebugView();\r\n    private _fpsTime = 0;\r\n    private _frameCount = 0;\r\n    private _fps = 0;\r\n    private _fixedFPS = 0;\r\n    private _useDeferredPipeline = false;\r\n    private _cumulativeTime = 0;\r\n    private _frameTime = 0;\r\n    private declare _naitveObj: any;\r\n    private _cameraList: Camera[] = [];\r\n\r\n    /**\r\n     * @en The constructor of the root, user shouldn't create the root instance, it's managed by the [[Director]].\r\n     * @zh 构造函数，用户不应该自己创建任何 Root 对象，它是由 [[Director]] 管理的。\r\n     * @param device GFX device\r\n     */\r\n    constructor (device: Device) {\r\n        this._device = device;\r\n        this._dataPoolMgr = cclegacy.internal.DataPoolManager && new cclegacy.internal.DataPoolManager(device) as DataPoolManager;\r\n\r\n        RenderScene.registerCreateFunc(this);\r\n        RenderWindow.registerCreateFunc(this);\r\n\r\n        this._cameraPool = new Pool((): Camera => new Camera(this._device), 4, (cam): void => cam.destroy());\r\n    }\r\n\r\n    /**\r\n     * @en The initialization function, user shouldn't initialize the root, it's managed by the [[Director]].\r\n     * @zh 初始化函数，用户不应该自己初始化 Root，它是由 [[Director]] 管理的。\r\n     * @param info Root initialization information\r\n     */\r\n    public initialize (info: IRootInfo): void {\r\n        const swapchain: Swapchain = deviceManager.swapchain;\r\n        const colorAttachment = new ColorAttachment();\r\n        colorAttachment.format = swapchain.colorTexture.format;\r\n        const depthStencilAttachment = new DepthStencilAttachment();\r\n        depthStencilAttachment.format = swapchain.depthStencilTexture.format;\r\n        depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;\r\n        depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;\r\n        const renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);\r\n\r\n        this._mainWindow = this.createWindow({\r\n            title: 'rootMainWindow',\r\n            width: swapchain.width,\r\n            height: swapchain.height,\r\n            renderPassInfo,\r\n            swapchain,\r\n        });\r\n        this._curWindow = this._mainWindow;\r\n        const customJointTextureLayouts = settings.querySettings(\r\n            SettingsCategory.ANIMATION,\r\n            'customJointTextureLayouts',\r\n        ) as ICustomJointTextureLayout[] || [];\r\n        this._dataPoolMgr?.jointTexturePool.registerCustomTextureLayouts(customJointTextureLayouts);\r\n        this._resizeMaxJointForDS();\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the root, user shouldn't invoke this function, it will cause undefined behavior.\r\n     * @zh 销毁 Root，用户不应该调用此方法，会造成未知行为。\r\n     */\r\n    public destroy (): void {\r\n        this.destroyScenes();\r\n\r\n        if (this._pipeline) {\r\n            this._pipeline.destroy();\r\n            this._pipeline = null;\r\n            this._pipelineEvent = null;\r\n        }\r\n\r\n        if (this._batcher) {\r\n            this._batcher.destroy();\r\n            this._batcher = null;\r\n        }\r\n\r\n        this._curWindow = null;\r\n        this._mainWindow = null;\r\n        this.dataPoolManager.clear();\r\n\r\n        if (cclegacy.rendering) {\r\n            cclegacy.rendering.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Resize the on-screen render windows.\r\n     * @zh 重置在屏窗口的大小。\r\n     * @param width The new width of the window.\r\n     * @param height The new height of the window.\r\n     * @param windowId The system window ID, optional for now.\r\n     */\r\n    public resize (width: number, height: number, windowId?: number): void {\r\n        this._windows.forEach((window) => {\r\n            if (window.swapchain) {\r\n                window.resize(width, height);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Setup the render pipeline\r\n     * @zh 设置渲染管线\r\n     * @param rppl The render pipeline\r\n     * @returns The setup is successful or not\r\n     */\r\n    public setRenderPipeline (useCustomPipeline?: boolean): boolean {\r\n        const { internal, director, rendering, legacy_rendering } = cclegacy;\r\n        if (rendering === undefined && legacy_rendering === undefined) {\r\n            errorID(1223);\r\n            return false;\r\n        }\r\n        //-----------------------------------------------\r\n        // prepare classic pipeline\r\n        //-----------------------------------------------\r\n        let isCreateDefaultPipeline = false;\r\n        if (useCustomPipeline) {\r\n            this._customPipeline = rendering.createCustomPipeline();\r\n            isCreateDefaultPipeline = true;\r\n            this._pipeline = this._customPipeline!;\r\n            // Use default _pipelineEvent\r\n            log(`Using custom pipeline: ${macro.CUSTOM_PIPELINE_NAME}`);\r\n        } else {\r\n            const rppl: (PipelineRuntime & IPipelineEvent) = legacy_rendering.createDefaultPipeline();\r\n            isCreateDefaultPipeline = true;\r\n            log(`Using legacy pipeline`);\r\n\r\n            this._classicPipeline = rppl!;\r\n            this._pipeline = this._classicPipeline;\r\n            this._pipelineEvent = this._classicPipeline; // Use forward pipeline's pipeline event\r\n            this._usesCustomPipeline = false;\r\n        }\r\n\r\n        const renderMode = settings.querySettings(SettingsCategory.RENDERING, 'renderMode');\r\n        if (renderMode !== LegacyRenderMode.HEADLESS || this._classicPipeline) {\r\n            if (!this._pipeline.activate(this._mainWindow!.swapchain)) {\r\n                if (isCreateDefaultPipeline) {\r\n                    this._pipeline.destroy();\r\n                }\r\n                this._classicPipeline = null;\r\n                this._customPipeline = null;\r\n                this._pipeline = null;\r\n                this._pipelineEvent = null;\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //-----------------------------------------------\r\n        // pipeline initialization completed\r\n        //-----------------------------------------------\r\n        const scene = director.getScene();\r\n        if (scene) {\r\n            scene.globals.activate();\r\n        }\r\n\r\n        this.onGlobalPipelineStateChanged();\r\n        if (!this._batcher && internal.Batcher2D) {\r\n            this._batcher = new internal.Batcher2D(this);\r\n            if (!this._batcher!.initialize()) {\r\n                this.destroy();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Notify the pipeline and all scenes that the global pipeline state have been updated so that they can update their render data and states.\r\n     * @zh 通知渲染管线和所有场景全局管线状态已更新，需要更新自身状态。\r\n     */\r\n    public onGlobalPipelineStateChanged (): void {\r\n        for (let i = 0; i < this._scenes.length; i++) {\r\n            this._scenes[i].onGlobalPipelineStateChanged();\r\n        }\r\n\r\n        if (getPipelineSceneData().skybox.enabled) {\r\n            getPipelineSceneData().skybox.model!.onGlobalPipelineStateChanged();\r\n        }\r\n\r\n        this._pipeline!.onGlobalPipelineStateChanged();\r\n    }\r\n\r\n    /**\r\n     * @en Active the render window as the [[curWindow]]\r\n     * @zh 激活指定窗口为当前窗口 [[curWindow]]\r\n     * @param window The render window to be activated\r\n     */\r\n    public activeWindow (window: RenderWindow): void {\r\n        this._curWindow = window;\r\n    }\r\n\r\n    /**\r\n     * @en Reset the time cumulated\r\n     * @zh 重置累计时间\r\n     */\r\n    public resetCumulativeTime (): void {\r\n        this._cumulativeTime = 0;\r\n    }\r\n\r\n    /**\r\n     * @en The entry function of the render process for every frame.\r\n     * @zh 用于每帧执行渲染流程的入口函数\r\n     * @param deltaTime @en The delta time since last update. @zh 距离上一帧间隔时间\r\n     */\r\n    public frameMove (deltaTime: number): void {\r\n        this._frameTime = deltaTime;\r\n\r\n        ++this._frameCount;\r\n        this._cumulativeTime += deltaTime;\r\n        this._fpsTime += deltaTime;\r\n        if (this._fpsTime > 1.0) {\r\n            this._fps = this._frameCount;\r\n            this._frameCount = 0;\r\n            this._fpsTime = 0.0;\r\n        }\r\n\r\n        if (USE_XR && globalThis.__globalXR?.isWebXR) {\r\n            this._doWebXRFrameMove();\r\n        } else {\r\n            this._frameMoveBegin();\r\n            this._frameMoveProcess();\r\n            this._frameMoveEnd();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Create a render window\r\n     * @zh 创建一个新的窗口\r\n     * @param info @en The window creation information @zh 窗口描述信息\r\n     */\r\n    public createWindow (info: IRenderWindowInfo): RenderWindow | null {\r\n        const window = this._createWindowFun(this);\r\n        window.initialize(this.device, info);\r\n        this._windows.push(window);\r\n        return window;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy a render window\r\n     * @zh 销毁指定的窗口\r\n     * @param window The render window to be destroyed\r\n     */\r\n    public destroyWindow (window: RenderWindow): void {\r\n        for (let i = 0; i < this._windows.length; ++i) {\r\n            if (this._windows[i] === window) {\r\n                window.destroy();\r\n                this._windows.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy all render windows\r\n     * @zh 销毁全部窗口\r\n     */\r\n    public destroyWindows (): void {\r\n        this._windows.forEach((window) => {\r\n            window.destroy();\r\n        });\r\n        this._windows.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Create a render scene\r\n     * @zh 创建渲染场景\r\n     * @param info @en The creation information for render scene @zh 渲染场景描述信息\r\n     */\r\n    public createScene (info: IRenderSceneInfo): RenderScene {\r\n        const scene: RenderScene = this._createSceneFun(this);\r\n        scene.initialize(info);\r\n        this._scenes.push(scene);\r\n        return scene;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the given render scene\r\n     * @zh 销毁指定的渲染场景\r\n     * @param scene @en The render scene to be destroyed. @zh 要销毁的渲染场景\r\n     */\r\n    public destroyScene (scene: RenderScene): void {\r\n        for (let i = 0; i < this._scenes.length; ++i) {\r\n            if (this._scenes[i] === scene) {\r\n                scene.destroy();\r\n                this._scenes.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy all render scenes.\r\n     * @zh 销毁全部场景。\r\n     */\r\n    public destroyScenes (): void {\r\n        this._scenes.forEach((scene) => {\r\n            scene.destroy();\r\n        });\r\n        this._scenes.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Create a model\r\n     * @zh 创建模型\r\n     * @param ModelCtor @en The class of the model @zh 模型的类\r\n     * @returns The model created\r\n     */\r\n    public createModel<T extends Model> (ModelCtor: typeof Model): T {\r\n        let p = this._modelPools.get(ModelCtor);\r\n        if (!p) {\r\n            this._modelPools.set(ModelCtor, new Pool((): Model => new ModelCtor(), 10, (obj): void => obj.destroy()));\r\n            p = this._modelPools.get(ModelCtor)!;\r\n        }\r\n        const model = p.alloc() as T;\r\n        model.initialize();\r\n        return model;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the given model\r\n     * @zh 销毁指定的模型\r\n     * @param m @en The model to be destroyed @zh 要销毁的模型\r\n     */\r\n    public destroyModel (m: Model): void {\r\n        const p = this._modelPools.get(m.constructor as Constructor<Model>);\r\n        if (p) {\r\n            p.free(m);\r\n            if (m.scene) {\r\n                m.scene.removeModel(m);\r\n            }\r\n        } else {\r\n            warnID(1300, m.constructor.name);\r\n        }\r\n        m.destroy();\r\n    }\r\n\r\n    /**\r\n     * @en Create a camera\r\n     * @zh 创建一个相机\r\n     * @returns The camera created.\r\n     */\r\n    public createCamera (): Camera {\r\n        return this._cameraPool!.alloc();\r\n    }\r\n\r\n    /**\r\n     * @en Create a light source\r\n     * @zh 创建光源\r\n     * @param LightCtor @en The class of the light @zh 光源的类\r\n     * @returns The light created\r\n     */\r\n    public createLight<T extends Light> (LightCtor: new () => T): T {\r\n        let l = this._lightPools.get(LightCtor);\r\n        if (!l) {\r\n            this._lightPools.set(LightCtor, new Pool<Light>((): T => new LightCtor(), 4, (obj): void => obj.destroy()));\r\n            l = this._lightPools.get(LightCtor)!;\r\n        }\r\n        const light = l.alloc() as T;\r\n        light.initialize();\r\n        return light;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy the given light\r\n     * @zh 销毁指定的光源\r\n     * @param l @en The light to be destroyed @zh 要销毁的光源\r\n     */\r\n    public destroyLight (l: Light): void {\r\n        if (l.scene) {\r\n            switch (l.type) {\r\n            case LightType.DIRECTIONAL:\r\n                l.scene.removeDirectionalLight(l as DirectionalLight);\r\n                break;\r\n            case LightType.SPHERE:\r\n                l.scene.removeSphereLight(l as SphereLight);\r\n                break;\r\n            case LightType.SPOT:\r\n                l.scene.removeSpotLight(l as SpotLight);\r\n                break;\r\n            case LightType.POINT:\r\n                l.scene.removePointLight(l as PointLight);\r\n                break;\r\n            case LightType.RANGED_DIRECTIONAL:\r\n                l.scene.removeRangedDirLight(l as RangedDirectionalLight);\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n        }\r\n        l.destroy();\r\n    }\r\n\r\n    /**\r\n     * @en recycle the given light to light object pool\r\n     * @zh 回收指定的光源到对象池\r\n     * @param l @en The light to be recycled @zh 要回收的光源\r\n     */\r\n    public recycleLight (l: Light): void {\r\n        const p = this._lightPools.get(l.constructor as Constructor<Light>);\r\n        if (p) {\r\n            p.free(l);\r\n            if (l.scene) {\r\n                switch (l.type) {\r\n                case LightType.DIRECTIONAL:\r\n                    l.scene.removeDirectionalLight(l as DirectionalLight);\r\n                    break;\r\n                case LightType.SPHERE:\r\n                    l.scene.removeSphereLight(l as SphereLight);\r\n                    break;\r\n                case LightType.SPOT:\r\n                    l.scene.removeSpotLight(l as SpotLight);\r\n                    break;\r\n                case LightType.POINT:\r\n                    l.scene.removePointLight(l as PointLight);\r\n                    break;\r\n                case LightType.RANGED_DIRECTIONAL:\r\n                    l.scene.removeRangedDirLight(l as RangedDirectionalLight);\r\n                    break;\r\n                default:\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _doWebXRFrameMove (): void {\r\n        if (!USE_XR) return;\r\n        const xr = globalThis.__globalXR;\r\n        if (!xr) {\r\n            return;\r\n        }\r\n\r\n        const windows = this._windows;\r\n        const cameraList = this._cameraList;\r\n        const viewCount = xr.webXRMatProjs ? xr.webXRMatProjs.length : 1;\r\n        if (!xr.webXRWindowMap) {\r\n            xr.webXRWindowMap = new Map<RenderWindow, number>();\r\n        }\r\n\r\n        let allCameras: Camera[] = [];\r\n        const webxrHmdPoseInfos = xr.webxrHmdPoseInfos;\r\n        for (let xrEye: XREye = 0; xrEye < viewCount; xrEye++) {\r\n            for (const window of windows) {\r\n                allCameras = allCameras.concat(window.cameras);\r\n                if (window.swapchain) {\r\n                    xr.webXRWindowMap.set(window, xrEye);\r\n                }\r\n            }\r\n\r\n            if (webxrHmdPoseInfos) {\r\n                let cameraPosition: number[] = [0, 0, 0];\r\n                for (let i = 0; i < webxrHmdPoseInfos.length; i++) {\r\n                    const info = webxrHmdPoseInfos[i];\r\n                    if ((info.code === XRPoseType.VIEW_LEFT && xrEye === XREye.LEFT)\r\n                        || (info.code === XRPoseType.VIEW_RIGHT && xrEye === XREye.RIGHT)) {\r\n                        cameraPosition[0] = info.position.x;\r\n                        cameraPosition[1] = info.position.y;\r\n                        cameraPosition[2] = info.position.z;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                allCameras.forEach((cam) => {\r\n                    if (cam.trackingType !== TrackingType.NO_TRACKING && cam.node) {\r\n                        const isTrackingRotation = cam.trackingType === TrackingType.ROTATION;\r\n                        if (isTrackingRotation) {\r\n                            cameraPosition = [0, 0, 0];\r\n                        }\r\n                        cam.node.setPosition(cameraPosition[0], cameraPosition[1], cameraPosition[2]);\r\n                    }\r\n                });\r\n            }\r\n            allCameras.length = 0;\r\n\r\n            this._frameMoveBegin();\r\n\r\n            this._frameMoveProcess();\r\n\r\n            for (let i = cameraList.length - 1; i >= 0; i--) {\r\n                const camera = cameraList[i];\r\n                const isMismatchedCam = (xrEye === XREye.LEFT && camera.cameraType === CameraType.RIGHT_EYE)\r\n                    || (xrEye === XREye.RIGHT && camera.cameraType === CameraType.LEFT_EYE);\r\n                if (isMismatchedCam) {\r\n                    // currently is left eye loop, so right camera do not need active\r\n                    cameraList.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            this._frameMoveEnd();\r\n        }\r\n    }\r\n\r\n    private _frameMoveBegin (): void {\r\n        for (let i = 0; i < this._scenes.length; ++i) {\r\n            this._scenes[i].removeBatches();\r\n        }\r\n\r\n        this._cameraList.length = 0;\r\n    }\r\n\r\n    private _frameMoveProcess (): void {\r\n        const { director } = cclegacy;\r\n        const windows = this._windows;\r\n        const cameraList = this._cameraList;\r\n\r\n        for (let i = 0; i < windows.length; i++) {\r\n            const window = windows[i];\r\n            window.extractRenderCameras(cameraList);\r\n        }\r\n\r\n        if (this._pipeline && cameraList.length > 0) {\r\n            this._device.acquire([deviceManager.swapchain]);\r\n            const scenes = this._scenes;\r\n            const stamp = director.getTotalFrames() as number;\r\n\r\n            if (this._batcher) {\r\n                this._batcher.update();\r\n                this._batcher.uploadBuffers();\r\n            }\r\n\r\n            for (let i = 0; i < scenes.length; i++) {\r\n                scenes[i].update(stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _frameMoveEnd (): void {\r\n        const { director, Director } = cclegacy;\r\n        const cameraList = this._cameraList;\r\n        if (this._pipeline && cameraList.length > 0) {\r\n            director.emit(Director.EVENT_BEFORE_COMMIT);\r\n            cameraList.sort((a: Camera, b: Camera): number => a.priority - b.priority);\r\n\r\n            for (let i = 0; i < cameraList.length; ++i) {\r\n                cameraList[i].geometryRenderer?.update();\r\n            }\r\n            director.emit(Director.EVENT_BEFORE_RENDER);\r\n            this._pipeline.render(cameraList);\r\n            director.emit(Director.EVENT_AFTER_RENDER);\r\n            this._device.present();\r\n        }\r\n\r\n        if (this._batcher) this._batcher.reset();\r\n    }\r\n\r\n    private _resizeMaxJointForDS (): void {\r\n        // TODO: usedUBOVectorCount should be estimated more carefully, the UBOs used could vary in different scenes.\r\n        const usedUBOVectorCount = Math.max((UBOGlobalEnum.COUNT + UBOCameraEnum.COUNT + UBOShadowEnum.COUNT + UBOLocalEnum.COUNT + UBOWorldBound.COUNT) / 4, 100);\r\n        let maxJoints = Math.floor((deviceManager.gfxDevice.capabilities.maxVertexUniformVectors - usedUBOVectorCount) / 3);\r\n        maxJoints = maxJoints < 256 ? maxJoints : 256;\r\n        localDescriptorSetLayout_ResizeMaxJoints(maxJoints);\r\n    }\r\n}\r\n\r\ncclegacy.Root = Root;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG } from 'internal:constants';\r\nimport { assert, js } from '../../core';\r\nimport { UIMeshRenderer } from '../components';\r\nimport { UIRenderer } from './ui-renderer';\r\n\r\n/** @mangle */\r\nexport class UIRendererManager {\r\n    private _allRenderers: (UIRenderer | UIMeshRenderer)[] = [];\r\n    private _dirtyRenderers: (UIRenderer | UIMeshRenderer)[] = [];\r\n    private _dirtyVersion = 0;\r\n    public addRenderer (uiRenderer: UIRenderer | UIMeshRenderer): void {\r\n        if (uiRenderer._internalId === -1) {\r\n            uiRenderer._internalId = this._allRenderers.length;\r\n            this._allRenderers.push(uiRenderer);\r\n        }\r\n    }\r\n\r\n    public removeRenderer (uiRenderer: UIRenderer | UIMeshRenderer): void {\r\n        if (uiRenderer._internalId !== -1) {\r\n            if (DEBUG) {\r\n                assert(this._allRenderers[uiRenderer._internalId] === uiRenderer);\r\n            }\r\n            const id = uiRenderer._internalId;\r\n            this._allRenderers[this._allRenderers.length - 1]._internalId = id;\r\n            js.array.fastRemoveAt(this._allRenderers, id);\r\n            uiRenderer._internalId = -1;\r\n            if (uiRenderer._dirtyVersion === this._dirtyVersion) {\r\n                js.array.fastRemove(this._dirtyRenderers, uiRenderer);\r\n                uiRenderer._dirtyVersion = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    public markDirtyRenderer (uiRenderer: UIRenderer | UIMeshRenderer): void {\r\n        if (uiRenderer._dirtyVersion !== this._dirtyVersion && uiRenderer._internalId !== -1) {\r\n            this._dirtyRenderers.push(uiRenderer);\r\n            uiRenderer._dirtyVersion = this._dirtyVersion;\r\n        }\r\n    }\r\n\r\n    public updateAllDirtyRenderers (): void {\r\n        const dirtyRenderers = this._dirtyRenderers;\r\n        for (let i = 0; i < this._dirtyRenderers.length; i++) {\r\n            if (DEBUG) {\r\n                assert(dirtyRenderers[i]._internalId !== -1);\r\n            }\r\n            dirtyRenderers[i].updateRenderer();\r\n        }\r\n        this._dirtyRenderers.length = 0;\r\n        this._dirtyVersion++;\r\n    }\r\n}\r\n\r\nexport const uiRendererManager = new UIRendererManager();\r\n","/*\r\n Copyright (c) 2008-2010 Ricardo Quesada\r\n Copyright (c) 2011-2012 cocos2d-x.org\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* spell-checker:words COORD, Quesada, INITED, Renerer */\r\n\r\nimport { DEBUG, EDITOR, BUILD, TEST, EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { SceneAsset } from '../asset/assets/scene-asset';\r\nimport { System, EventTarget, Scheduler, js, errorID, error, assertID, warnID, macro, CCObject, CCObjectFlags, cclegacy, isValid } from '../core';\r\nimport { input } from '../input';\r\nimport { Root } from '../root';\r\nimport { Node, NodeEventType, Scene } from '../scene-graph';\r\nimport { ComponentScheduler } from '../scene-graph/component-scheduler';\r\nimport NodeActivator from '../scene-graph/node-activator';\r\nimport { scalableContainerManager } from '../core/memop/scalable-container';\r\nimport { uiRendererManager } from '../2d/framework/ui-renderer-manager';\r\nimport { assetManager } from '../asset/asset-manager';\r\nimport { deviceManager } from '../gfx';\r\nimport { releaseManager } from '../asset/asset-manager/release-manager';\r\nimport type { Game } from './game';\r\n\r\n// ----------------------------------------------------------------------------------------------------------------------\r\n\r\nexport enum DirectorEvent {\r\n    /**\r\n     * @en The event which will be triggered when the singleton of Director initialized.\r\n     * @zh Director 单例初始化时触发的事件\r\n     * @event INIT\r\n     */\r\n    INIT = 'director_init',\r\n\r\n    /**\r\n     * @en The event which will be triggered when the singleton of Director reset.\r\n     * @zh Director 单例重置时触发的事件\r\n     * @event RESET\r\n     */\r\n    RESET = 'director_reset',\r\n\r\n    /**\r\n     * @en The event which will be triggered before loading a new scene.\r\n     * @zh 加载新场景之前所触发的事件。\r\n     * @event BEFORE_SCENE_LOADING\r\n     */\r\n    BEFORE_SCENE_LOADING = 'director_before_scene_loading',\r\n\r\n    /**\r\n     * @en The event which will be triggered before launching a new scene.\r\n     * @zh 运行新场景之前所触发的事件。\r\n     * @event BEFORE_SCENE_LAUNCH\r\n     */\r\n    BEFORE_SCENE_LAUNCH = 'director_before_scene_launch',\r\n\r\n    /**\r\n     * @en The event which will be triggered after launching a new scene.\r\n     * @zh 运行新场景之后所触发的事件。\r\n     * @event AFTER_SCENE_LAUNCH\r\n     */\r\n    AFTER_SCENE_LAUNCH = 'director_after_scene_launch',\r\n\r\n    /**\r\n     * @en The event which will be triggered at the beginning of every frame.\r\n     * @zh 每个帧的开始时所触发的事件。\r\n     * @event BEFORE_UPDATE\r\n     */\r\n    BEFORE_UPDATE = 'director_before_update',\r\n\r\n    /**\r\n     * @en The event which will be triggered after engine and components update logic.\r\n     * @zh 将在引擎和组件 “update” 逻辑之后所触发的事件。\r\n     * @event AFTER_UPDATE\r\n     */\r\n    AFTER_UPDATE = 'director_after_update',\r\n\r\n    /**\r\n     * @en The event which will be triggered before the rendering process.\r\n     * @zh 渲染过程之前所触发的事件。\r\n     * @event BEFORE_DRAW\r\n     */\r\n    BEFORE_DRAW = 'director_before_draw',\r\n\r\n    /**\r\n     * @en The event which will be triggered after the rendering process.\r\n     * @zh 渲染过程之后所触发的事件。\r\n     * @event AFTER_DRAW\r\n     */\r\n    AFTER_DRAW = 'director_after_draw',\r\n\r\n    /**\r\n     * @en The event which will be triggered before the pipeline render commit.\r\n     * @zh 当前渲染帧提交前所触发的事件。\r\n     * @event BEFORE_COMMIT\r\n     */\r\n    BEFORE_COMMIT = 'director_before_commit',\r\n\r\n    /**\r\n     * @en The event which will be triggered before the render pipeline processes the render scene.\r\n     * @zh 当前帧将渲染场景提交到渲染管线之前所触发的事件。\r\n     * @event BEFORE_RENDER\r\n     */\r\n    BEFORE_RENDER = 'director_before_render',\r\n\r\n    /**\r\n     * @en The event which will be triggered after the render pipeline finishes the rendering process on CPU.\r\n     * @zh 当前帧渲染管线渲染流程完成后所触发的事件。\r\n     * @event AFTER_RENDER\r\n     */\r\n    AFTER_RENDER = 'director_after_render',\r\n\r\n    /**\r\n     * @en The event which will be triggered before the physics process.<br/>\r\n     * @zh 物理过程之前所触发的事件。\r\n     * @event BEFORE_PHYSICS\r\n     */\r\n    BEFORE_PHYSICS = 'director_before_physics',\r\n\r\n    /**\r\n     * @en The event which will be triggered after the physics process.<br/>\r\n     * @zh 物理过程之后所触发的事件。\r\n     * @event AFTER_PHYSICS\r\n     */\r\n    AFTER_PHYSICS = 'director_after_physics',\r\n\r\n    /**\r\n     * @en The event which will be triggered at the frame begin.<br/>\r\n     * @zh 一帧开始时所触发的事件。\r\n     * @event BEGIN_FRAME\r\n     */\r\n    BEGIN_FRAME = 'director_begin_frame',\r\n\r\n    /**\r\n     * @en The event which will be triggered at the frame end.<br/>\r\n     * @zh 一帧结束之后所触发的事件。\r\n     * @event END_FRAME\r\n     */\r\n    END_FRAME = 'director_end_frame',\r\n}\r\n\r\n/**\r\n * @en\r\n * ATTENTION: USE `director` INSTEAD OF `Director`.\r\n * `director` is a singleton object which manage your game's logic flow.\r\n * Since the `director` is a singleton, you don't need to call any constructor or create functions,\r\n * the standard way to use it is by calling:\r\n * `director.methodName();`\r\n * It creates and handle the main Window and manages how and when to execute the Scenes.\r\n *\r\n * @zh\r\n * 注意：用 `director` 代替 `Director`。\r\n * `director` 一个管理你的游戏的逻辑流程的单例对象。\r\n * 由于 `director` 是一个单例，你不需要调用任何构造函数或创建函数，\r\n * 使用它的标准方法是通过调用：\r\n * `director.methodName();`\r\n * 它创建和处理主窗口并且管理什么时候执行场景。\r\n */\r\nexport class Director extends EventTarget {\r\n    /**\r\n     * @en The event which will be triggered when the singleton of Director initialized.\r\n     * @zh Director 单例初始化时触发的事件\r\n     * @event Director.EVENT_INIT\r\n     */\r\n    public static readonly EVENT_INIT = DirectorEvent.INIT;\r\n\r\n    /**\r\n     * @en The event which will be triggered when the singleton of Director reset.\r\n     * @zh Director 单例重置时触发的事件\r\n     * @event Director.EVENT_RESET\r\n     */\r\n    public static readonly EVENT_RESET = DirectorEvent.RESET;\r\n\r\n    /**\r\n     * @en The event which will be triggered before loading a new scene.\r\n     * @zh 加载新场景之前所触发的事件。\r\n     * @event Director.EVENT_BEFORE_SCENE_LOADING\r\n     */\r\n    public static readonly EVENT_BEFORE_SCENE_LOADING = DirectorEvent.BEFORE_SCENE_LOADING;\r\n\r\n    /**\r\n     * @en The event which will be triggered before launching a new scene.\r\n     * @zh 运行新场景之前所触发的事件。\r\n     * @event Director.EVENT_BEFORE_SCENE_LAUNCH\r\n     */\r\n    public static readonly EVENT_BEFORE_SCENE_LAUNCH = DirectorEvent.BEFORE_SCENE_LAUNCH;\r\n\r\n    /**\r\n     * @en The event which will be triggered after launching a new scene.\r\n     * @zh 运行新场景之后所触发的事件。\r\n     * @event Director.EVENT_AFTER_SCENE_LAUNCH\r\n     */\r\n    public static readonly EVENT_AFTER_SCENE_LAUNCH = DirectorEvent.AFTER_SCENE_LAUNCH;\r\n\r\n    /**\r\n     * @en The event which will be triggered at the beginning of every frame.\r\n     * @zh 每个帧的开始时所触发的事件。\r\n     * @event Director.EVENT_BEFORE_UPDATE\r\n     */\r\n    public static readonly EVENT_BEFORE_UPDATE = DirectorEvent.BEFORE_UPDATE;\r\n\r\n    /**\r\n     * @en The event which will be triggered after engine and components update logic.\r\n     * @zh 将在引擎和组件 “update” 逻辑之后所触发的事件。\r\n     * @event Director.EVENT_AFTER_UPDATE\r\n     */\r\n    public static readonly EVENT_AFTER_UPDATE = DirectorEvent.AFTER_UPDATE;\r\n\r\n    /**\r\n     * @en The event which will be triggered before the rendering process.\r\n     * @zh 渲染过程之前所触发的事件。\r\n     * @event Director.EVENT_BEFORE_DRAW\r\n     */\r\n    public static readonly EVENT_BEFORE_DRAW = DirectorEvent.BEFORE_DRAW;\r\n\r\n    /**\r\n     * @en The event which will be triggered after the rendering process.\r\n     * @zh 渲染过程之后所触发的事件。\r\n     * @event Director.EVENT_AFTER_DRAW\r\n     */\r\n    public static readonly EVENT_AFTER_DRAW = DirectorEvent.AFTER_DRAW;\r\n\r\n    /**\r\n     * @en The event which will be triggered before the pipeline render commit.\r\n     * @zh 当前渲染帧提交前所触发的事件。\r\n     * @event Director.EVENT_BEFORE_COMMIT\r\n     */\r\n    public static readonly EVENT_BEFORE_COMMIT = DirectorEvent.BEFORE_COMMIT;\r\n\r\n    /**\r\n     * @en The event which will be triggered before the render pipeline processes the render scene.\r\n     * @zh 当前帧将渲染场景提交到渲染管线之前所触发的事件。\r\n     * @event Director.EVENT_BEFORE_RENDER\r\n     */\r\n    public static readonly EVENT_BEFORE_RENDER = DirectorEvent.BEFORE_RENDER;\r\n\r\n    /**\r\n     * @en The event which will be triggered after the render pipeline finishes the rendering process on CPU.\r\n     * @zh 当前帧渲染管线渲染流程完成后所触发的事件。\r\n     * @event Director.EVENT_AFTER_RENDER\r\n     */\r\n    public static readonly EVENT_AFTER_RENDER = DirectorEvent.AFTER_RENDER;\r\n\r\n    /**\r\n     * @en The event which will be triggered before the physics process.<br/>\r\n     * @zh 物理过程之前所触发的事件。\r\n     * @event Director.EVENT_BEFORE_PHYSICS\r\n     */\r\n    public static readonly EVENT_BEFORE_PHYSICS = DirectorEvent.BEFORE_PHYSICS;\r\n\r\n    /**\r\n     * @en The event which will be triggered after the physics process.<br/>\r\n     * @zh 物理过程之后所触发的事件。\r\n     * @event Director.EVENT_AFTER_PHYSICS\r\n     */\r\n    public static readonly EVENT_AFTER_PHYSICS = DirectorEvent.AFTER_PHYSICS;\r\n\r\n    /**\r\n     * @en The event which will be triggered at the frame begin.<br/>\r\n     * @zh 一帧开始时所触发的事件。\r\n     * @event Director.EVENT_BEGIN_FRAME\r\n     */\r\n    public static readonly EVENT_BEGIN_FRAME = DirectorEvent.BEGIN_FRAME;\r\n\r\n    /**\r\n     * @en The event which will be triggered at the frame end.<br/>\r\n     * @zh 一帧结束之后所触发的事件。\r\n     * @event Director.EVENT_END_FRAME\r\n     */\r\n    public static readonly EVENT_END_FRAME = DirectorEvent.END_FRAME;\r\n\r\n    public static instance: Director;\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _compScheduler: ComponentScheduler = new ComponentScheduler(); // Scheduler for life-cycle methods in component\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _nodeActivator: NodeActivator = new NodeActivator();\r\n    private _invalid: boolean = false;\r\n    private _paused: boolean = false;\r\n    private _root: Root | null = null;\r\n    private _loadingScene: string = '';\r\n    private _scene: Scene | null = null;\r\n    private _totalFrames: number = 0; // FPS\r\n    private _scheduler: Scheduler = new Scheduler(); // Scheduler for user registration update\r\n    private _systems: System[] = [];\r\n    private _persistRootNodes: Record<string, Node> = {};\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @en End the life of director in the next frame\r\n     * @zh 执行完当前帧后停止 director 的执行\r\n     */\r\n    public end (): void {\r\n        this.once(DirectorEvent.END_FRAME, (): void => {\r\n            this.purgeDirector();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Pause the director's ticker, only involve the game logic execution.<br>\r\n     * It won't pause the rendering process nor the event manager.<br>\r\n     * If you want to pause the entire game including rendering, audio and event,<br>\r\n     * please use `game.pause`.\r\n     * @zh 暂停正在运行的场景，该暂停只会停止游戏逻辑执行，但是不会停止渲染和 UI 响应。<br>\r\n     * 如果想要更彻底得暂停游戏，包含渲染，音频和事件，请使用 `game.pause` 。\r\n     */\r\n    public pause (): void {\r\n        this._paused = true;\r\n    }\r\n\r\n    /**\r\n     * @en Purge the `director` itself, including unschedule all schedule,<br>\r\n     * remove all event listeners, clean up and exit the running scene, stops all animations, clear cached data.\r\n     * @zh 清除 `director` 本身，包括停止所有的计时器，<br>\r\n     * 移除所有的事件监听器，清理并退出当前运行的场景，停止所有动画，清理缓存数据。\r\n     */\r\n    public purgeDirector (): void {\r\n        // cleanup scheduler\r\n        this._scheduler.unscheduleAll();\r\n        this._compScheduler.unscheduleAll();\r\n\r\n        this._nodeActivator.reset();\r\n\r\n        if (!EDITOR) {\r\n            if (isValid(this._scene)) {\r\n                this._scene!.destroy();\r\n            }\r\n            this._scene = null;\r\n        }\r\n\r\n        this.stopAnimation();\r\n\r\n        // Clear all caches\r\n        assetManager.releaseAll();\r\n    }\r\n\r\n    /**\r\n     * @en Reset the director, can be used to restart the director after purge\r\n     * @zh 重置此 Director，可用于在清除后重启 Director。\r\n     */\r\n    public reset (): void {\r\n        this.purgeDirector();\r\n\r\n        for (const id in this._persistRootNodes) {\r\n            this.removePersistRootNode(this._persistRootNodes[id]);\r\n        }\r\n\r\n        // Clear scene\r\n        const scene = this.getScene();\r\n        if (scene) {\r\n            scene.destroy();\r\n        }\r\n\r\n        this.emit(DirectorEvent.RESET);\r\n\r\n        this.startAnimation();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Run a scene. Replaces the running scene with a new one or enter the first scene.<br>\r\n     * The new scene will be launched immediately.\r\n     * @zh 运行指定场景。将正在运行的场景替换为（或重入为）新场景。新场景将立即启动。\r\n     * @param scene - The need run scene.\r\n     * @param onBeforeLoadScene - The function invoked at the scene before loading.\r\n     * @param onLaunched - The function invoked at the scene after launch.\r\n     */\r\n    public runSceneImmediate (\r\n        scene: Scene | SceneAsset,\r\n        onBeforeLoadScene?: Director.OnBeforeLoadScene,\r\n        onLaunched?: Director.OnSceneLaunched,\r\n    ): void {\r\n        if (scene instanceof SceneAsset) scene = scene.scene!;\r\n        assertID(scene instanceof Scene, 1216);\r\n\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.time('InitScene');\r\n        }\r\n        scene._load();  // ensure scene initialized\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.timeEnd('InitScene');\r\n        }\r\n        // Re-attach or replace persist nodes\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.time('AttachPersist');\r\n        }\r\n        const persistNodeList = Object.keys(this._persistRootNodes).map((x): Node => this._persistRootNodes[x]);\r\n        for (let i = 0; i < persistNodeList.length; i++) {\r\n            const node = persistNodeList[i];\r\n            node.emit(NodeEventType.SCENE_CHANGED_FOR_PERSISTS, scene.renderScene);\r\n            const existNode = scene.uuid === node._originalSceneId && scene.getChildByUuid(node.uuid);\r\n            if (existNode) {\r\n                // scene also contains the persist node, select the old one\r\n                const index = existNode.siblingIndex;\r\n                // restore to the old saving flag\r\n                node.hideFlags &= ~CCObjectFlags.DontSave;\r\n                node.hideFlags |= CCObjectFlags.DontSave & existNode.hideFlags;\r\n                existNode._destroyImmediate();\r\n                scene.insertChild(node, index);\r\n            } else {\r\n                node.hideFlags |= CCObjectFlags.DontSave;\r\n                node.parent = scene;\r\n            }\r\n        }\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.timeEnd('AttachPersist');\r\n        }\r\n        const oldScene = this._scene;\r\n\r\n        // unload scene\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.time('Destroy');\r\n        }\r\n        if (isValid(oldScene)) {\r\n            oldScene!.destroy();\r\n        }\r\n        if (!EDITOR) {\r\n            // auto release assets\r\n            if (BUILD && DEBUG) {\r\n                // eslint-disable-next-line no-console\r\n                console.time('AutoRelease');\r\n            }\r\n            releaseManager._autoRelease(oldScene!, scene, this._persistRootNodes);\r\n            if (BUILD && DEBUG) {\r\n                // eslint-disable-next-line no-console\r\n                console.timeEnd('AutoRelease');\r\n            }\r\n        }\r\n\r\n        this._scene = null;\r\n\r\n        // purge destroyed nodes belongs to old scene\r\n        CCObject._deferredDestroy();\r\n        // eslint-disable-next-line no-console\r\n        if (BUILD && DEBUG) { console.timeEnd('Destroy'); }\r\n\r\n        if (onBeforeLoadScene) {\r\n            onBeforeLoadScene();\r\n        }\r\n        this.emit(DirectorEvent.BEFORE_SCENE_LAUNCH, scene);\r\n\r\n        // Run an Entity Scene\r\n        this._scene = scene;\r\n\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.time('Activate');\r\n        }\r\n        scene._activate();\r\n        if (BUILD && DEBUG) {\r\n            // eslint-disable-next-line no-console\r\n            console.timeEnd('Activate');\r\n        }\r\n        // start scene\r\n        if (this._root) {\r\n            this._root.resetCumulativeTime();\r\n        }\r\n        this.startAnimation();\r\n        if (onLaunched) {\r\n            onLaunched(null, scene);\r\n        }\r\n        this.emit(DirectorEvent.AFTER_SCENE_LAUNCH, scene);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Run a scene. Replaces the running scene with a new one or enter the first scene.<br>\r\n     * The new scene will be launched at the end of the current frame.<br>\r\n     * @zh 运行指定场景。\r\n     * @param scene - The need run scene.\r\n     * @param onBeforeLoadScene - The function invoked at the scene before loading.\r\n     * @param onLaunched - The function invoked at the scene after launch.\r\n     * @private\r\n     */\r\n    public runScene (scene: Scene | SceneAsset, onBeforeLoadScene?: Director.OnBeforeLoadScene, onLaunched?: Director.OnSceneLaunched): void {\r\n        if (scene instanceof SceneAsset) scene = scene.scene!;\r\n        assertID(Boolean(scene), 1205);\r\n        assertID(scene instanceof Scene, 1216);\r\n\r\n        // Delay run / replace scene to the end of the frame\r\n        this.once(DirectorEvent.END_FRAME, (): void => {\r\n            this.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en Loads the scene by its name.\r\n     * @zh 通过场景名称进行加载场景。\r\n     *\r\n     * @param sceneName - The name of the scene to load.\r\n     * @param onLaunched - callback, will be called after scene launched.\r\n     * @return if error, return false\r\n     */\r\n    public loadScene (sceneName: string, onLaunched?: Director.OnSceneLaunched, onUnloaded?: Director.OnUnload): boolean {\r\n        if (this._loadingScene) {\r\n            warnID(1208, sceneName, this._loadingScene);\r\n            return false;\r\n        }\r\n        const bundle = assetManager.bundles.find((bundle): boolean => !!bundle.getSceneInfo(sceneName));\r\n        if (bundle) {\r\n            this.emit(DirectorEvent.BEFORE_SCENE_LOADING, sceneName);\r\n            this._loadingScene = sceneName;\r\n            // eslint-disable-next-line no-console\r\n            console.time(`LoadScene ${sceneName}`);\r\n            bundle.loadScene(sceneName, (err, scene): void => {\r\n                // eslint-disable-next-line no-console\r\n                console.timeEnd(`LoadScene ${sceneName}`);\r\n                this._loadingScene = '';\r\n                if (err) {\r\n                    error(err);\r\n                    if (onLaunched) {\r\n                        onLaunched(err);\r\n                    }\r\n                } else {\r\n                    this.runSceneImmediate(scene, onUnloaded, onLaunched);\r\n                }\r\n            });\r\n            return true;\r\n        } else {\r\n            errorID(1209, sceneName);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Pre-loads the scene asset to reduces loading time. You can call this method at any time you want.<br>\r\n     * After calling this method, you still need to launch the scene by `director.loadScene`.<br>\r\n     * It will be totally fine to call `director.loadScene` at any time even if the preloading is not<br>\r\n     * yet finished, the scene will be launched after loaded automatically.\r\n     * @zh 预加载场景资源，你可以在任何时候调用这个方法。\r\n     * 调用完后，你仍然需要通过 `director.loadScene` 来启动场景，因为这个方法不会执行场景加载操作。<br>\r\n     * 就算预加载还没完成，你也可以直接调用 `director.loadScene`，加载完成后场景就会启动。\r\n     * @param sceneName @en The name of the scene to load @zh 场景名称。\r\n     * @param onLoaded @en Callback to execute once the scene is loaded @zh 加载回调。\r\n     */\r\n    public preloadScene (sceneName: string, onLoaded?: Director.OnSceneLoaded): void;\r\n\r\n    /**\r\n     * @en\r\n     * Pre-loads the scene to reduces loading time. You can call this method at any time you want.<br>\r\n     * After calling this method, you still need to launch the scene by `director.loadScene`.<br>\r\n     * It will be totally fine to call `director.loadScene` at any time even if the preloading is not<br>\r\n     * yet finished, the scene will be launched after loaded automatically.\r\n     * @zh 预加载场景，你可以在任何时候调用这个方法。\r\n     * 调用完后，你仍然需要通过 `director.loadScene` 来启动场景，因为这个方法不会执行场景加载操作。<br>\r\n     * 就算预加载还没完成，你也可以直接调用 `director.loadScene`，加载完成后场景就会启动。\r\n     * @param sceneName @en The name of scene to load @zh 场景名称。\r\n     * @param onProgress @en Callback to execute when the load progression change.  @zh 加载进度回调。\r\n     * @param onLoaded @en Callback to execute once the scene is loaded @zh 加载回调。\r\n     */\r\n    public preloadScene (sceneName: string, onProgress: Director.OnLoadSceneProgress, onLoaded: Director.OnSceneLoaded): void;\r\n\r\n    public preloadScene (\r\n        sceneName: string,\r\n        onProgress?: Director.OnLoadSceneProgress | Director.OnSceneLoaded,\r\n        onLoaded?: Director.OnSceneLoaded,\r\n    ): void {\r\n        const bundle = assetManager.bundles.find((bundle): boolean => !!bundle.getSceneInfo(sceneName));\r\n        if (bundle) {\r\n            // NOTE: the similar function signatures but defined as deferent function types.\r\n            bundle.preloadScene(\r\n                sceneName,\r\n                null,\r\n                onProgress as (finished: number, total: number, item: any) => void,\r\n                onLoaded as ((err?: Error | null) => void) | null,\r\n            );\r\n        } else {\r\n            const err = `Can not preload the scene \"${sceneName}\" because it is not in the build settings.`;\r\n            if (onLoaded) {\r\n                onLoaded(new Error(err));\r\n            }\r\n            error(`preloadScene: ${err}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Resume game logic execution after pause, if the current scene is not paused, nothing will happen.\r\n     * @zh 恢复暂停场景的游戏逻辑，如果当前场景没有暂停将没任何事情发生。\r\n     */\r\n    public resume (): void {\r\n        this._paused = false;\r\n    }\r\n\r\n    get root (): Root | null {\r\n        return this._root;\r\n    }\r\n\r\n    /**\r\n     * @en Returns current logic Scene.\r\n     * @zh 获取当前逻辑场景。\r\n     * @example\r\n     * ```\r\n     * import { director } from 'cc';\r\n     * // This will help you to get the Canvas node in scene\r\n     * director.getScene().getChildByName('Canvas');\r\n     * ```\r\n     */\r\n    public getScene (): Scene | null {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @en Returns the delta time since last frame.\r\n     * @zh 获取上一帧的增量时间。\r\n     * @deprecated since v3.3.0, please use game.deltaTime instead\r\n     */\r\n    public getDeltaTime (): number {\r\n        return cclegacy.game.deltaTime as number;\r\n    }\r\n\r\n    /**\r\n     * @en Returns the total passed time since game start, unit: ms\r\n     * @zh 获取从游戏开始到现在总共经过的时间，单位为 ms\r\n     * @deprecated since v3.3.0, please use game.totalTime instead\r\n     */\r\n    public getTotalTime (): number {\r\n        return cclegacy.game.totalTime as number;\r\n    }\r\n\r\n    /**\r\n     * @en Returns the current time.\r\n     * @zh 获取当前帧的时间。\r\n     * @deprecated since v3.3.0, please use game.frameStartTime instead\r\n     */\r\n    public getCurrentTime (): number {\r\n        return cclegacy.game.frameStartTime as number;\r\n    }\r\n\r\n    /**\r\n     * @en Returns how many frames were called since the director started.\r\n     * @zh 获取 director 启动以来游戏运行的总帧数。\r\n     */\r\n    public getTotalFrames (): number {\r\n        return this._totalFrames;\r\n    }\r\n\r\n    /**\r\n     * @en Returns whether or not the Director is paused.\r\n     * @zh 是否处于暂停状态。\r\n     */\r\n    public isPaused (): boolean {\r\n        return this._paused;\r\n    }\r\n\r\n    /**\r\n     * @en Returns the scheduler associated with this director.\r\n     * @zh 获取和 director 相关联的调度器。\r\n     */\r\n    public getScheduler (): Scheduler {\r\n        return this._scheduler;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the scheduler associated with this director.\r\n     * @zh 设置和 director 相关联的调度器。\r\n     */\r\n    public setScheduler (scheduler: Scheduler): void {\r\n        if (this._scheduler !== scheduler) {\r\n            this.unregisterSystem(this._scheduler);\r\n            this._scheduler = scheduler;\r\n            this.registerSystem(Scheduler.ID, scheduler, 200);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Register a system.\r\n     * @zh 注册一个系统。\r\n     */\r\n    public registerSystem (name: string, sys: System, priority: number): void {\r\n        sys.id = name;\r\n        sys.priority = priority;\r\n        this._systems.push(sys);\r\n        this._systems.sort(System.sortByPriority);\r\n    }\r\n\r\n    public unregisterSystem (sys: System): void {\r\n        js.array.fastRemove(this._systems, sys);\r\n        this._systems.sort(System.sortByPriority);\r\n    }\r\n\r\n    /**\r\n     * @en get a system.\r\n     * @zh 获取一个 system。\r\n     */\r\n    public getSystem (name: string): System | undefined {\r\n        return this._systems.find((sys): boolean => sys.id === name);\r\n    }\r\n\r\n    /**\r\n     * @en Returns the `AnimationManager` associated with this director. Please use getSystem(AnimationManager.ID)\r\n     * @zh 获取和 director 相关联的 `AnimationManager`（动画管理器）。请使用 getSystem(AnimationManager.ID) 来替代\r\n     * @deprecated since 3.0.0\r\n     */\r\n    public getAnimationManager (): any {\r\n        return this.getSystem(cclegacy.AnimationManager.ID as string);\r\n    }\r\n\r\n    // Loop management\r\n    /**\r\n     * @en Starts the director\r\n     * @zh 开始执行游戏逻辑\r\n     */\r\n    public startAnimation (): void {\r\n        this._invalid = false;\r\n    }\r\n\r\n    /**\r\n     * @en Stops the director\r\n     * @zh 停止执行游戏逻辑，每帧渲染会继续执行\r\n     */\r\n    public stopAnimation (): void {\r\n        this._invalid = true;\r\n    }\r\n\r\n    /**\r\n     * @en Run main loop of director\r\n     * @zh 运行主循环\r\n     * @deprecated Since v3.6, please use [tick] instead\r\n     */\r\n    public mainLoop (now: number): void {\r\n        let dt: number;\r\n        if (EDITOR_NOT_IN_PREVIEW || TEST) {\r\n            dt = now;\r\n        } else {\r\n            dt = (cclegacy.game as Game)._calculateDT(false);\r\n        }\r\n        this.tick(dt);\r\n    }\r\n\r\n    /**\r\n     * @en Run main loop of director\r\n     * @zh 运行主循环\r\n     * @param dt Delta time in seconds\r\n     */\r\n    public tick (dt: number): void {\r\n        if (!this._invalid) {\r\n            this.emit(DirectorEvent.BEGIN_FRAME);\r\n            if (!EDITOR_NOT_IN_PREVIEW) {\r\n                input._frameDispatchEvents();\r\n            }\r\n\r\n            // Update\r\n            if (!this._paused) {\r\n                this.emit(DirectorEvent.BEFORE_UPDATE);\r\n                // Call start for new added components\r\n                this._compScheduler.startPhase();\r\n                // Update for components\r\n                this._compScheduler.updatePhase(dt);\r\n                // Update systems\r\n                for (let i = 0; i < this._systems.length; ++i) {\r\n                    this._systems[i].update(dt);\r\n                }\r\n                // Late update for components\r\n                this._compScheduler.lateUpdatePhase(dt);\r\n                // User can use this event to do things after update\r\n                this.emit(DirectorEvent.AFTER_UPDATE);\r\n                // Destroy entities that have been removed recently\r\n                CCObject._deferredDestroy();\r\n\r\n                // Post update systems\r\n                for (let i = 0; i < this._systems.length; ++i) {\r\n                    this._systems[i].postUpdate(dt);\r\n                }\r\n            }\r\n\r\n            this.emit(DirectorEvent.BEFORE_DRAW);\r\n            uiRendererManager.updateAllDirtyRenderers();\r\n            this._root!.frameMove(dt);\r\n            this.emit(DirectorEvent.AFTER_DRAW);\r\n\r\n            Node.resetHasChangedFlags();\r\n            Node.clearNodeArray();\r\n            scalableContainerManager.update(dt);\r\n            this.emit(DirectorEvent.END_FRAME);\r\n            this._totalFrames++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @en Build custom render pipeline\r\n     * @zh 构建自定义渲染管线\r\n     */\r\n    public buildRenderPipeline (): void {\r\n        if (!this._root) {\r\n            return;\r\n        }\r\n        // Here we should build the render pipeline.\r\n        const ppl = this._root.customPipeline;\r\n        const cameras = this._root.cameraList;\r\n\r\n        ppl.beginSetup();\r\n        const builder = cclegacy.rendering.getCustomPipeline(macro.CUSTOM_PIPELINE_NAME);\r\n        cclegacy.rendering.dispatchResizeEvents(cameras, builder, ppl);\r\n        builder.setup(cameras, ppl);\r\n        ppl.endSetup();\r\n    }\r\n\r\n    private setupRenderPipelineBuilder (): void {\r\n        // Custom pipeline will only be used, when\r\n        // 1. CUSTOM_PIPELINE_NAME is not empty\r\n        //    (in CocosCreator/Project/Project Settings/Engine Manager/Macro Configuration/CUSTOM_PIPELINE_NAME)\r\n        // 2. cclegacy.rendering is available\r\n        // 3. The root node is created and uses custom pipeline\r\n        if (macro.CUSTOM_PIPELINE_NAME !== '' && cclegacy.rendering && this._root && this._root.usesCustomPipeline) {\r\n            this.on(\r\n                DirectorEvent.BEFORE_SCENE_LAUNCH,\r\n                cclegacy.rendering.forceResizeAllWindows,\r\n                cclegacy.rendering,\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public init (): void {\r\n        this._totalFrames = 0;\r\n        this._paused = false;\r\n        // Scheduler\r\n        // TODO: have a solid organization of priority and expose to user\r\n        this.registerSystem(Scheduler.ID, this._scheduler, 200);\r\n        this._root = new Root(deviceManager.gfxDevice);\r\n        const rootInfo = {};\r\n        this._root.initialize(rootInfo);\r\n\r\n        this.setupRenderPipelineBuilder();\r\n\r\n        for (let i = 0; i < this._systems.length; i++) {\r\n            this._systems[i].init();\r\n        }\r\n\r\n        this.emit(DirectorEvent.INIT);\r\n    }\r\n\r\n    //  @ Persist root node section\r\n    /**\r\n     * @en\r\n     * Add a persistent root node to the game, the persistent node won't be destroyed during scene transition.<br>\r\n     * The target node must be placed in the root level of hierarchy, otherwise this API won't have any effect.\r\n     * @zh\r\n     * 声明常驻根节点，该节点不会在场景切换中被销毁。<br>\r\n     * 目标节点必须位于为层级的根节点，否则无效。\r\n     * @param node - The node to be made persistent\r\n     */\r\n    public addPersistRootNode (node: Node): void {\r\n        if (!Node.isNode(node) || !node.uuid) {\r\n            warnID(3800);\r\n            return;\r\n        }\r\n        const id = node.uuid;\r\n        if (!this._persistRootNodes[id]) {\r\n            const scene = this._scene as any;\r\n            if (isValid(scene)) {\r\n                if (!node.parent) {\r\n                    node.parent = scene;\r\n                    node._originalSceneId = scene.uuid;\r\n                } else if (!(node.parent instanceof Scene)) {\r\n                    warnID(3801);\r\n                    return;\r\n                } else if (node.parent !== scene) {\r\n                    warnID(3802);\r\n                    return;\r\n                } else {\r\n                    node._originalSceneId = scene.uuid;\r\n                }\r\n            }\r\n            this._persistRootNodes[id] = node;\r\n            node._persistNode = true;\r\n            releaseManager._addPersistNodeRef(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove a persistent root node.\r\n     * @zh 取消常驻根节点。\r\n     * @param node - The node to be removed from persistent node list\r\n     */\r\n    public removePersistRootNode (node: Node): void {\r\n        const id = node.uuid || '';\r\n        if (node === this._persistRootNodes[id]) {\r\n            delete this._persistRootNodes[id];\r\n            node._persistNode = false;\r\n            node._originalSceneId = '';\r\n            releaseManager._removePersistNodeRef(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Check whether the node is a persistent root node.\r\n     * @zh 检查节点是否是常驻根节点。\r\n     * @param node - The node to be checked\r\n     */\r\n    public isPersistRootNode (node: Node): boolean {\r\n        return !!node._persistNode;\r\n    }\r\n}\r\n\r\nexport declare namespace Director {\r\n    export type OnBeforeLoadScene = () => void;\r\n\r\n    export type OnUnload = () => void;\r\n\r\n    export type OnSceneLoaded = (error: null | Error, sceneAsset?: SceneAsset) => void;\r\n\r\n    export type OnSceneLaunched = (error: null | Error, scene?: Scene) => void;\r\n\r\n    /**\r\n     * @param completedCount - The number of the items that are already completed.\r\n     * @param totalCount - The total number of the items.\r\n     * @param item - The latest item which flow out the pipeline.\r\n     */\r\n    export type OnLoadSceneProgress = (completedCount: number, totalCount: number, item: any) => void;\r\n}\r\n\r\ncclegacy.Director = Director;\r\ncclegacy.DirectorEvent = DirectorEvent;\r\n\r\n/**\r\n * @en Director of the game, used to control game update loop and scene management\r\n * @zh 游戏的导演，用于控制游戏更新循环与场景管理。\r\n */\r\nexport const director: Director = Director.instance = cclegacy.director = new Director();\r\n"],"names":["XREye","XRConfigKey","XRPoseType","exports","Root","device","_this","this","_createSceneFun","_createWindowFun","_windows","_mainWindow","_curWindow","_tempWindow","_usesCustomPipeline","_pipeline","_pipelineEvent","PipelineEventProcessor","_classicPipeline","_customPipeline","_batcher","_scenes","_modelPools","Map","_cameraPool","_lightPools","_debugView","DebugView","_fpsTime","_frameCount","_fps","_fixedFPS","_useDeferredPipeline","_cumulativeTime","_frameTime","_cameraList","_device","_dataPoolMgr","cclegacy","internal","DataPoolManager","RenderScene","registerCreateFunc","RenderWindow","Pool","Camera","cam","destroy","_proto","prototype","initialize","_this$_dataPoolMgr","swapchain","deviceManager","colorAttachment","ColorAttachment","format","colorTexture","depthStencilAttachment","DepthStencilAttachment","depthStencilTexture","depthStoreOp","StoreOp","DISCARD","stencilStoreOp","renderPassInfo","RenderPassInfo","createWindow","title","width","height","customJointTextureLayouts","settings","querySettings","SettingsCategory","ANIMATION","jointTexturePool","registerCustomTextureLayouts","_resizeMaxJointForDS","destroyScenes","dataPoolManager","clear","rendering","resize","forEach","window","setRenderPipeline","useCustomPipeline","director","legacy_rendering","undefined","errorID","isCreateDefaultPipeline","createCustomPipeline","log","macro","CUSTOM_PIPELINE_NAME","rppl","createDefaultPipeline","RENDERING","LegacyRenderMode","HEADLESS","activate","scene","getScene","globals","onGlobalPipelineStateChanged","Batcher2D","i","length","getPipelineSceneData","skybox","enabled","model","activeWindow","resetCumulativeTime","frameMove","deltaTime","_globalThis$__globalX","globalThis","__globalXR","isWebXR","_doWebXRFrameMove","_frameMoveBegin","_frameMoveProcess","_frameMoveEnd","info","push","destroyWindow","splice","destroyWindows","createScene","destroyScene","createModel","ModelCtor","p","get","set","obj","alloc","destroyModel","m","constructor","free","removeModel","warnID","name","createCamera","createLight","LightCtor","l","light","destroyLight","type","LightType","DIRECTIONAL","removeDirectionalLight","SPHERE","removeSphereLight","SPOT","removeSpotLight","POINT","removePointLight","RANGED_DIRECTIONAL","removeRangedDirLight","recycleLight","_this2","xr","windows","cameraList","viewCount","webXRMatProjs","webXRWindowMap","allCameras","webxrHmdPoseInfos","_loop","_step","_iterator","_createForOfIteratorHelperLoose","done","value","concat","cameras","xrEye","cameraPosition","code","VIEW_LEFT","LEFT","VIEW_RIGHT","RIGHT","position","x","y","z","trackingType","TrackingType","NO_TRACKING","node","ROTATION","setPosition","camera","cameraType","CameraType","RIGHT_EYE","LEFT_EYE","removeBatches","extractRenderCameras","acquire","scenes","stamp","getTotalFrames","update","uploadBuffers","Director","emit","EVENT_BEFORE_COMMIT","sort","a","b","priority","_cameraList$i$geometr","geometryRenderer","EVENT_BEFORE_RENDER","render","EVENT_AFTER_RENDER","present","reset","usedUBOVectorCount","Math","max","UBOGlobalEnum","COUNT","UBOCameraEnum","UBOShadowEnum","UBOLocalEnum","UBOWorldBound","maxJoints","floor","gfxDevice","capabilities","maxVertexUniformVectors","localDescriptorSetLayout_ResizeMaxJoints","_createClass","key","fps","DirectorEvent","UIRendererManager","_allRenderers","_dirtyRenderers","_dirtyVersion","addRenderer","uiRenderer","_internalId","removeRenderer","assert","id","js","markDirtyRenderer","updateAllDirtyRenderers","dirtyRenderers","updateRenderer","uiRendererManager","_EventTarget","call","_compScheduler","ComponentScheduler","_nodeActivator","NodeActivator","_invalid","_paused","_root","_loadingScene","_scene","_totalFrames","_scheduler","Scheduler","_systems","_persistRootNodes","_inheritsLoose","end","once","END_FRAME","purgeDirector","pause","unscheduleAll","isValid","stopAnimation","assetManager","releaseAll","removePersistRootNode","RESET","startAnimation","runSceneImmediate","onBeforeLoadScene","onLaunched","_this3","SceneAsset","assertID","Scene","console","time","_load","timeEnd","persistNodeList","Object","keys","map","NodeEventType","SCENE_CHANGED_FOR_PERSISTS","renderScene","existNode","uuid","_originalSceneId","getChildByUuid","index","siblingIndex","hideFlags","CCObjectFlags","DontSave","_destroyImmediate","insertChild","parent","oldScene","releaseManager","_autoRelease","CCObject","_deferredDestroy","BEFORE_SCENE_LAUNCH","_activate","AFTER_SCENE_LAUNCH","runScene","_this4","Boolean","loadScene","sceneName","onUnloaded","_this5","bundle","bundles","find","getSceneInfo","BEFORE_SCENE_LOADING","err","error","preloadScene","onProgress","onLoaded","Error","resume","getDeltaTime","game","getTotalTime","totalTime","getCurrentTime","frameStartTime","isPaused","getScheduler","setScheduler","scheduler","unregisterSystem","registerSystem","ID","sys","System","sortByPriority","getSystem","getAnimationManager","AnimationManager","mainLoop","dt","_calculateDT","tick","BEGIN_FRAME","input","_frameDispatchEvents","BEFORE_UPDATE","startPhase","updatePhase","lateUpdatePhase","AFTER_UPDATE","postUpdate","BEFORE_DRAW","AFTER_DRAW","Node","resetHasChangedFlags","clearNodeArray","scalableContainerManager","buildRenderPipeline","ppl","customPipeline","beginSetup","builder","getCustomPipeline","dispatchResizeEvents","setup","endSetup","setupRenderPipelineBuilder","usesCustomPipeline","on","forceResizeAllWindows","init","INIT","addPersistRootNode","isNode","_persistNode","_addPersistNodeRef","_removePersistNodeRef","isPersistRootNode","EventTarget","EVENT_INIT","EVENT_RESET","EVENT_BEFORE_SCENE_LOADING","EVENT_BEFORE_SCENE_LAUNCH","EVENT_AFTER_SCENE_LAUNCH","EVENT_BEFORE_UPDATE","EVENT_AFTER_UPDATE","EVENT_BEFORE_DRAW","EVENT_AFTER_DRAW","BEFORE_COMMIT","BEFORE_RENDER","AFTER_RENDER","EVENT_BEFORE_PHYSICS","BEFORE_PHYSICS","EVENT_AFTER_PHYSICS","AFTER_PHYSICS","EVENT_BEGIN_FRAME","EVENT_END_FRAME","instance"],"mappings":"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"}