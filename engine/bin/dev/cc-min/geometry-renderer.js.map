{"version":3,"file":"geometry-renderer.js","sources":["../../../cocos/rendering/geometry-renderer.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Color, Mat4, Vec3, Vec4, geometry, warnID, toRadian, cclegacy } from '../core';\r\nimport { SetIndex } from './define';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { Attribute, AttributeName, Buffer, BufferInfo, BufferUsageBit,\r\n    CommandBuffer, Device, DrawInfo, Format, InputAssembler,\r\n    InputAssemblerInfo, MemoryUsageBit, RenderPass } from '../gfx';\r\n\r\nimport { PipelineSceneData } from './pipeline-scene-data';\r\n\r\nconst _min = new Vec3();\r\nconst _max = new Vec3();\r\nconst _v0 = new Vec3();\r\nconst _v1 = new Vec3();\r\nconst _v2 = new Vec3();\r\nconst _v3 = new Vec3();\r\nconst _v4 = new Vec3();\r\nconst _v5 = new Vec3();\r\nconst _v6 = new Vec3();\r\nconst _v7 = new Vec3();\r\n\r\n/**\r\n * GEOMETRY_DEPTH_TYPE_COUNT:\r\n * [0]: no depthTest\r\n * [1]: depthTest\r\n */\r\nconst GEOMETRY_DEPTH_TYPE_COUNT       = 2;\r\nconst GEOMETRY_NO_DEPTH_TEST_PASS_NUM = 1;\r\nconst GEOMETRY_DEPTH_TEST_PASS_NUM    = 2;\r\nconst GEOMETRY_VERTICES_PER_LINE      = 2;\r\nconst GEOMETRY_VERTICES_PER_TRIANGLE  = 3;\r\nconst GEOMETRY_MAX_LINES              = 30000;\r\nconst GEOMETRY_MAX_DASHED_LINES       = 10000;\r\nconst GEOMETRY_MAX_TRIANGLES          = 10000;\r\n\r\nenum GeometryType {\r\n    LINE = 0,\r\n    DASHED_LINE = 1,\r\n    TRIANGLE = 2\r\n}\r\n\r\nclass GeometryVertexBuffer {\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _maxVertices = 0;\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _vertexCount = 0;\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _stride = 0;\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _vertices!: Float32Array;\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _buffer!: Buffer;\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _inputAssembler!: InputAssembler;\r\n\r\n    public init (device: Device, maxVertices: number, stride: number, attributes: Attribute[]): void {\r\n        this._maxVertices = maxVertices;\r\n        this._vertexCount = 0;\r\n        this._stride = stride;\r\n        this._vertices = new Float32Array(maxVertices * stride / Float32Array.BYTES_PER_ELEMENT);\r\n        this._buffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            maxVertices * stride,\r\n            stride,\r\n        ));\r\n        this._inputAssembler = device.createInputAssembler(new InputAssemblerInfo(attributes, [this._buffer], null));\r\n    }\r\n\r\n    public getCount (): number { return Math.min(this._vertexCount, this._maxVertices); }\r\n    public empty (): boolean { return this._vertexCount === 0; }\r\n    public reset (): void { this._vertexCount = 0; }\r\n\r\n    public update (): void {\r\n        if (!this.empty()) {\r\n            const count = this.getCount();\r\n            const size = count * this._stride;\r\n            this._buffer.update(this._vertices, size);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._inputAssembler) {\r\n            this._inputAssembler.destroy();\r\n        }\r\n\r\n        if (this._buffer) {\r\n            this._buffer.destroy();\r\n        }\r\n    }\r\n}\r\n\r\nclass GeometryVertexBuffers {\r\n    public lines: GeometryVertexBuffer[] = [];\r\n    public dashedLines: GeometryVertexBuffer[] = [];\r\n    public triangles: GeometryVertexBuffer[] = [];\r\n\r\n    constructor () {\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            this.lines[i] = new GeometryVertexBuffer();\r\n            this.dashedLines[i] = new GeometryVertexBuffer();\r\n            this.triangles[i] = new GeometryVertexBuffer();\r\n        }\r\n    }\r\n}\r\n\r\nexport interface IGeometryInfo {\r\n    maxLines: number;\r\n    maxDashedLines: number;\r\n    maxTriangles: number;\r\n}\r\n\r\nexport class GeometryRenderer {\r\n    private _device: Device | null = null;\r\n    private _buffers: GeometryVertexBuffers;\r\n\r\n    public constructor () {\r\n        this._buffers = new GeometryVertexBuffers();\r\n    }\r\n\r\n    public activate (device: Device, info?: IGeometryInfo): void {\r\n        this._device = device;\r\n\r\n        const posColorAttributes: Attribute[] = [\r\n            new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F),\r\n            new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F),\r\n        ];\r\n\r\n        const posNormColorAttributes: Attribute[] = [\r\n            new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F),\r\n            new Attribute(AttributeName.ATTR_NORMAL, Format.RGBA32F),\r\n            new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F),\r\n        ];\r\n\r\n        const maxLines = info ? info.maxLines : GEOMETRY_MAX_LINES;\r\n        const maxDashedLines = info ? info.maxDashedLines : GEOMETRY_MAX_DASHED_LINES;\r\n        const maxTriangles = info ? info.maxTriangles : GEOMETRY_MAX_TRIANGLES;\r\n        const lineStride = Float32Array.BYTES_PER_ELEMENT * (Vec3.length + Color.length);\r\n        const triangleStride = Float32Array.BYTES_PER_ELEMENT * (Vec3.length + Vec4.length + Color.length);\r\n\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            this._buffers.lines[i].init(this._device, maxLines * GEOMETRY_VERTICES_PER_LINE, lineStride, posColorAttributes);\r\n            this._buffers.dashedLines[i].init(this._device, maxDashedLines * GEOMETRY_VERTICES_PER_LINE, lineStride, posColorAttributes);\r\n            this._buffers.triangles[i].init(this._device, maxTriangles * GEOMETRY_VERTICES_PER_TRIANGLE, triangleStride, posNormColorAttributes);\r\n        }\r\n    }\r\n\r\n    public render (renderPass: RenderPass, cmdBuff: CommandBuffer, sceneData: PipelineSceneData): void {\r\n        const passes = sceneData.geometryRendererPasses;\r\n        const shaders = sceneData.geometryRendererShaders;\r\n\r\n        let offset = 0;\r\n        const passCount: number[] = [GEOMETRY_NO_DEPTH_TEST_PASS_NUM, GEOMETRY_DEPTH_TEST_PASS_NUM];\r\n\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            const lines = this._buffers.lines[i];\r\n            if (!lines.empty()) {\r\n                const drawInfo = new DrawInfo();\r\n                drawInfo.vertexCount = lines.getCount();\r\n\r\n                for (let p = 0; p < passCount[i]; p++) {\r\n                    const pass   = passes[offset + p];\r\n                    const shader = shaders[offset + p];\r\n                    const pso    = PipelineStateManager.getOrCreatePipelineState(this._device!, pass, shader, renderPass, lines._inputAssembler);\r\n                    cmdBuff.bindPipelineState(pso);\r\n                    cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n                    cmdBuff.bindInputAssembler(lines._inputAssembler);\r\n                    cmdBuff.draw(drawInfo);\r\n                }\r\n            }\r\n\r\n            offset += passCount[i];\r\n        }\r\n\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            const dashedLines = this._buffers.dashedLines[i];\r\n            if (!dashedLines.empty()) {\r\n                const drawInfo = new DrawInfo();\r\n                drawInfo.vertexCount = dashedLines.getCount();\r\n\r\n                for (let p = 0; p < passCount[i]; p++) {\r\n                    const pass   = passes[offset + p];\r\n                    const shader = shaders[offset + p];\r\n                    const pso = PipelineStateManager.getOrCreatePipelineState(this._device!, pass, shader, renderPass, dashedLines._inputAssembler);\r\n                    cmdBuff.bindPipelineState(pso);\r\n                    cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n                    cmdBuff.bindInputAssembler(dashedLines._inputAssembler);\r\n                    cmdBuff.draw(drawInfo);\r\n                }\r\n            }\r\n\r\n            offset += passCount[i];\r\n        }\r\n\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            const triangles = this._buffers.triangles[i];\r\n            if (!triangles.empty()) {\r\n                const drawInfo = new DrawInfo();\r\n                drawInfo.vertexCount = triangles.getCount();\r\n\r\n                for (let p = 0; p < passCount[i]; p++) {\r\n                    const pass   = passes[offset + p];\r\n                    const shader = shaders[offset + p];\r\n                    const pso    = PipelineStateManager.getOrCreatePipelineState(this._device!, pass, shader, renderPass, triangles._inputAssembler);\r\n                    cmdBuff.bindPipelineState(pso);\r\n                    cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n                    cmdBuff.bindInputAssembler(triangles._inputAssembler);\r\n                    cmdBuff.draw(drawInfo);\r\n                }\r\n            }\r\n\r\n            offset += passCount[i];\r\n        }\r\n\r\n        // reset all geometry data for next frame\r\n        this.reset();\r\n    }\r\n\r\n    public destroy (): void {\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            this._buffers.lines[i].destroy();\r\n            this._buffers.dashedLines[i].destroy();\r\n            this._buffers.triangles[i].destroy();\r\n        }\r\n    }\r\n\r\n    public empty (): boolean {\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            if (!this._buffers.lines[i].empty()\r\n                || !this._buffers.dashedLines[i].empty()\r\n                || !this._buffers.triangles[i].empty()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public update (): void {\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            this._buffers.lines[i].update();\r\n            this._buffers.dashedLines[i].update();\r\n            this._buffers.triangles[i].update();\r\n        }\r\n    }\r\n\r\n    public reset (): void {\r\n        for (let i = 0; i < GEOMETRY_DEPTH_TYPE_COUNT; i++) {\r\n            this._buffers.lines[i].reset();\r\n            this._buffers.dashedLines[i].reset();\r\n            this._buffers.triangles[i].reset();\r\n        }\r\n    }\r\n\r\n    public addDashedLine (v0: Vec3, v1: Vec3, color: Color, depthTest = true): void {\r\n        const dashedLines = this._buffers.dashedLines[depthTest ? 1 : 0];\r\n        if (dashedLines._vertexCount + GEOMETRY_VERTICES_PER_LINE > dashedLines._maxVertices) {\r\n            warnID(12008);\r\n            return;\r\n        }\r\n\r\n        // add v0 vertex\r\n        let offset = dashedLines._vertexCount * (Vec3.length + Color.length);\r\n        Vec3.toArray(dashedLines._vertices, v0, offset);\r\n        offset += Vec3.length;\r\n        Color.toArray(dashedLines._vertices, color, offset);\r\n        offset += Color.length;\r\n\r\n        // add v1 vertex\r\n        Vec3.toArray(dashedLines._vertices, v1, offset);\r\n        offset += Vec3.length;\r\n        Color.toArray(dashedLines._vertices, color, offset);\r\n\r\n        dashedLines._vertexCount += GEOMETRY_VERTICES_PER_LINE;\r\n    }\r\n\r\n    public addLine (v0: Vec3, v1: Vec3, color: Color, depthTest = true): void {\r\n        const lines = this._buffers.lines[depthTest ? 1 : 0];\r\n        if (lines._vertexCount + GEOMETRY_VERTICES_PER_LINE > lines._maxVertices) {\r\n            warnID(12008);\r\n            return;\r\n        }\r\n\r\n        // add v0 vertex\r\n        let offset = lines._vertexCount * (Vec3.length + Color.length);\r\n        Vec3.toArray(lines._vertices, v0, offset);\r\n        offset += Vec3.length;\r\n        Color.toArray(lines._vertices, color, offset);\r\n        offset += Color.length;\r\n\r\n        // add v1 vertex\r\n        Vec3.toArray(lines._vertices, v1, offset);\r\n        offset += Vec3.length;\r\n        Color.toArray(lines._vertices, color, offset);\r\n\r\n        lines._vertexCount += GEOMETRY_VERTICES_PER_LINE;\r\n    }\r\n\r\n    public addTriangle (v0: Vec3, v1: Vec3, v2: Vec3, color: Color, wireframe = true, depthTest = true, unlit = false): void {\r\n        if (wireframe) {\r\n            this.addLine(v0, v1, color, depthTest);\r\n            this.addLine(v1, v2, color, depthTest);\r\n            this.addLine(v2, v0, color, depthTest);\r\n            return;\r\n        }\r\n\r\n        const triangles = this._buffers.triangles[depthTest ? 1 : 0];\r\n        if (triangles._vertexCount + GEOMETRY_VERTICES_PER_TRIANGLE > triangles._maxVertices) {\r\n            warnID(12009);\r\n            return;\r\n        }\r\n\r\n        const normal = new Vec4(Vec4.ZERO);\r\n        if (!unlit) {\r\n            const dist1 = new Vec3(v1.x - v0.x, v1.y - v0.y, v1.z - v0.z);\r\n            const dist2 = new Vec3(v2.x - v0.x, v2.y - v0.y, v2.z - v0.z);\r\n            const norm = new Vec3();\r\n            Vec3.normalize(norm, Vec3.cross(norm, dist1, dist2));\r\n            normal.set(norm.x, norm.y, norm.z, 1.0);\r\n        }\r\n\r\n        // add v0 vertex\r\n        let offset = triangles._vertexCount * (Vec3.length + Vec4.length + Color.length);\r\n        Vec3.toArray(triangles._vertices, v0, offset);\r\n        offset += Vec3.length;\r\n        Vec4.toArray(triangles._vertices, normal, offset);\r\n        offset += Vec4.length;\r\n        Color.toArray(triangles._vertices, color, offset);\r\n        offset += Color.length;\r\n\r\n        // add v1 vertex\r\n        Vec3.toArray(triangles._vertices, v1, offset);\r\n        offset += Vec3.length;\r\n        Vec4.toArray(triangles._vertices, normal, offset);\r\n        offset += Vec4.length;\r\n        Color.toArray(triangles._vertices, color, offset);\r\n        offset += Color.length;\r\n\r\n        // add v2 vertex\r\n        Vec3.toArray(triangles._vertices, v2, offset);\r\n        offset += Vec3.length;\r\n        Vec4.toArray(triangles._vertices, normal, offset);\r\n        offset += Vec4.length;\r\n        Color.toArray(triangles._vertices, color, offset);\r\n\r\n        triangles._vertexCount += GEOMETRY_VERTICES_PER_TRIANGLE;\r\n    }\r\n\r\n    public addQuad (v0: Vec3, v1: Vec3, v2: Vec3, v3: Vec3, color: Color, wireframe = true, depthTest = true, unlit = false): void {\r\n        /**\r\n         *  3---2\r\n         *  |   |\r\n         *  0---1\r\n         */\r\n\r\n        if (wireframe) {\r\n            this.addLine(v0, v1, color, depthTest);\r\n            this.addLine(v1, v2, color, depthTest);\r\n            this.addLine(v2, v3, color, depthTest);\r\n            this.addLine(v3, v0, color, depthTest);\r\n        } else {\r\n            this.addTriangle(v0, v1, v2, color, wireframe, depthTest, unlit);\r\n            this.addTriangle(v0, v2, v3, color, wireframe, depthTest, unlit);\r\n        }\r\n    }\r\n\r\n    public addBoundingBox (\r\n        aabb: geometry.AABB,\r\n        color: Color,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Mat4 = new Mat4(),\r\n    ): void {\r\n        /**\r\n         *     2---3\r\n         *    /   /\r\n         *   6---7\r\n         *     0---1\r\n         *    /   /\r\n         *   4---5\r\n         *\r\n         */\r\n\r\n        _min.set(aabb.center.x - aabb.halfExtents.x, aabb.center.y - aabb.halfExtents.y, aabb.center.z - aabb.halfExtents.z);\r\n        _max.set(aabb.center.x + aabb.halfExtents.x, aabb.center.y + aabb.halfExtents.y, aabb.center.z + aabb.halfExtents.z);\r\n\r\n        _v0.set(_min.x, _min.y, _min.z);\r\n        _v1.set(_max.x, _min.y, _min.z);\r\n        _v2.set(_min.x, _max.y, _min.z);\r\n        _v3.set(_max.x, _max.y, _min.z);\r\n        _v4.set(_min.x, _min.y, _max.z);\r\n        _v5.set(_max.x, _min.y, _max.z);\r\n        _v6.set(_min.x, _max.y, _max.z);\r\n        _v7.set(_max.x, _max.y, _max.z);\r\n\r\n        if (useTransform) {\r\n            Vec3.transformMat4(_v0, _v0, transform);\r\n            Vec3.transformMat4(_v1, _v1, transform);\r\n            Vec3.transformMat4(_v2, _v2, transform);\r\n            Vec3.transformMat4(_v3, _v3, transform);\r\n            Vec3.transformMat4(_v4, _v4, transform);\r\n            Vec3.transformMat4(_v5, _v5, transform);\r\n            Vec3.transformMat4(_v6, _v6, transform);\r\n            Vec3.transformMat4(_v7, _v7, transform);\r\n        }\r\n\r\n        if (wireframe) {\r\n            this.addLine(_v6, _v7, color, depthTest);\r\n            this.addLine(_v7, _v3, color, depthTest);\r\n            this.addLine(_v3, _v2, color, depthTest);\r\n            this.addLine(_v2, _v6, color, depthTest);\r\n\r\n            this.addLine(_v4, _v5, color, depthTest);\r\n            this.addLine(_v5, _v1, color, depthTest);\r\n            this.addLine(_v1, _v0, color, depthTest);\r\n            this.addLine(_v0, _v4, color, depthTest);\r\n\r\n            this.addLine(_v6, _v4, color, depthTest);\r\n            this.addLine(_v7, _v5, color, depthTest);\r\n            this.addLine(_v3, _v1, color, depthTest);\r\n            this.addLine(_v2, _v0, color, depthTest);\r\n        } else {\r\n            this.addQuad(_v4, _v5, _v7, _v6, color, wireframe, depthTest, unlit);\r\n            this.addQuad(_v5, _v1, _v3, _v7, color, wireframe, depthTest, unlit);\r\n            this.addQuad(_v1, _v0, _v2, _v3, color, wireframe, depthTest, unlit);\r\n            this.addQuad(_v0, _v4, _v6, _v2, color, wireframe, depthTest, unlit);\r\n            this.addQuad(_v6, _v7, _v3, _v2, color, wireframe, depthTest, unlit);\r\n            this.addQuad(_v0, _v1, _v5, _v4, color, wireframe, depthTest, unlit);\r\n        }\r\n    }\r\n\r\n    public addCross (position: Vec3, size: number, color: Color, depthTest = true): void {\r\n        const halfSize = size * 0.5;\r\n\r\n        const v0 = new Vec3(position.x - halfSize, position.y, position.z);\r\n        const v1 = new Vec3(position.x + halfSize, position.y, position.z);\r\n        this.addLine(v0, v1, color, depthTest);\r\n\r\n        v0.set(position.x, position.y - halfSize, position.z);\r\n        v1.set(position.x, position.y + halfSize, position.z);\r\n        this.addLine(v0, v1, color, depthTest);\r\n\r\n        v0.set(position.x, position.y, position.z - halfSize);\r\n        v1.set(position.x, position.y, position.z + halfSize);\r\n        this.addLine(v0, v1, color, depthTest);\r\n    }\r\n\r\n    public addFrustum (frustum: geometry.Frustum, color: Color, depthTest = true): void {\r\n        const vertices = frustum.vertices;\r\n\r\n        this.addLine(vertices[0], vertices[1], color, depthTest);\r\n        this.addLine(vertices[1], vertices[2], color, depthTest);\r\n        this.addLine(vertices[2], vertices[3], color, depthTest);\r\n        this.addLine(vertices[3], vertices[0], color, depthTest);\r\n\r\n        this.addLine(vertices[4], vertices[5], color, depthTest);\r\n        this.addLine(vertices[5], vertices[6], color, depthTest);\r\n        this.addLine(vertices[6], vertices[7], color, depthTest);\r\n        this.addLine(vertices[7], vertices[4], color, depthTest);\r\n\r\n        this.addLine(vertices[0], vertices[4], color, depthTest);\r\n        this.addLine(vertices[1], vertices[5], color, depthTest);\r\n        this.addLine(vertices[2], vertices[6], color, depthTest);\r\n        this.addLine(vertices[3], vertices[7], color, depthTest);\r\n    }\r\n\r\n    public addCapsule (\r\n        center: Vec3,\r\n        radius: number,\r\n        height: number,\r\n        color: Color,\r\n        segmentsU = 32,\r\n        hemiSegmentsV = 8,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaPhi   = Math.PI * 2.0 / segmentsU;\r\n        const deltaTheta = Math.PI / 2.0 / hemiSegmentsV;\r\n        const bottomCenter = new Vec3(center.x, center.y - height / 2.0, center.z);\r\n        const topCenter = new Vec3(center.x, center.y + height / 2.0, center.z);\r\n\r\n        const bottomPoints: Vec3[][] = [];\r\n        const topPoints: Vec3[][] = [];\r\n\r\n        for (let i = 0; i < hemiSegmentsV + 1; i++) {\r\n            const bottomList: Vec3[] = [];\r\n            const topList: Vec3[] = [];\r\n\r\n            const theta    = i * deltaTheta;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n\r\n            for (let j = 0; j < segmentsU + 1; j++) {\r\n                const phi    = j * deltaPhi;\r\n                const sinPhi = Math.sin(phi);\r\n                const cosPhi = Math.cos(phi);\r\n                const  p = new Vec3(radius * sinTheta * cosPhi, radius * cosTheta, radius * sinTheta * sinPhi);\r\n\r\n                const p0 = new Vec3(bottomCenter.x + p.x, bottomCenter.y - p.y, bottomCenter.z + p.z);\r\n                const p1 = new Vec3(topCenter.x + p.x, topCenter.y + p.y, topCenter.z + p.z);\r\n                bottomList.push(p0);\r\n                topList.push(p1);\r\n            }\r\n\r\n            bottomPoints.push(bottomList);\r\n            topPoints.push(topList);\r\n        }\r\n\r\n        if (useTransform) {\r\n            for (let i = 0; i < hemiSegmentsV + 1; i++) {\r\n                for (let j = 0; j < segmentsU + 1; j++) {\r\n                    Vec3.transformMat4(bottomPoints[i][j], bottomPoints[i][j], transform);\r\n                    Vec3.transformMat4(topPoints[i][j], topPoints[i][j], transform);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < hemiSegmentsV; i++) {\r\n            for (let j = 0; j < segmentsU; j++) {\r\n                this.addTriangle(bottomPoints[i + 1][j], bottomPoints[i][j + 1], bottomPoints[i][j], color, wireframe, depthTest, unlit);\r\n                this.addTriangle(bottomPoints[i + 1][j], bottomPoints[i + 1][j + 1], bottomPoints[i][j + 1], color, wireframe, depthTest, unlit);\r\n\r\n                this.addTriangle(topPoints[i][j], topPoints[i + 1][j + 1], topPoints[i + 1][j], color, wireframe, depthTest, unlit);\r\n                this.addTriangle(topPoints[i][j], topPoints[i][j + 1], topPoints[i + 1][j + 1], color, wireframe, depthTest, unlit);\r\n            }\r\n        }\r\n\r\n        const bottomCircle = bottomPoints[hemiSegmentsV];\r\n        const topCircle    = topPoints[hemiSegmentsV];\r\n        for (let j = 0; j < segmentsU; j++) {\r\n            this.addTriangle(topCircle[j], bottomCircle[j + 1], bottomCircle[j], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(topCircle[j], topCircle[j + 1], bottomCircle[j + 1], color, wireframe, depthTest, unlit);\r\n        }\r\n    }\r\n\r\n    public addCylinder (\r\n        center: Vec3,\r\n        radius: number,\r\n        height: number,\r\n        color: Color,\r\n        segments = 32,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaPhi = Math.PI * 2.0 / segments;\r\n        const bottomCenter = new Vec3(center.x, center.y - height / 2.0, center.z);\r\n        const topCenter = new Vec3(center.x, center.y + height / 2.0, center.z);\r\n        const bottomPoints: Vec3[] = [];\r\n        const topPoints: Vec3[] = [];\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const phi = i * deltaPhi;\r\n            const p = new Vec3(radius * Math.cos(phi), 0.0, radius * Math.sin(phi));\r\n            const p0 = new Vec3(p.x + bottomCenter.x, p.y + bottomCenter.y, p.z + bottomCenter.z);\r\n            const p1 = new Vec3(p.x + topCenter.x, p.y + topCenter.y, p.z + topCenter.z);\r\n            bottomPoints.push(p0);\r\n            topPoints.push(p1);\r\n        }\r\n\r\n        if (useTransform) {\r\n            Vec3.transformMat4(bottomCenter, bottomCenter, transform);\r\n            Vec3.transformMat4(topCenter, topCenter, transform);\r\n\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                Vec3.transformMat4(bottomPoints[i], bottomPoints[i], transform);\r\n                Vec3.transformMat4(topPoints[i], topPoints[i], transform);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addTriangle(topCenter, topPoints[i + 1], topPoints[i], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(bottomCenter, bottomPoints[i], bottomPoints[i + 1], color, wireframe, depthTest, unlit);\r\n\r\n            this.addTriangle(topPoints[i], bottomPoints[i + 1], bottomPoints[i], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(topPoints[i], topPoints[i + 1], bottomPoints[i + 1], color, wireframe, depthTest, unlit);\r\n        }\r\n    }\r\n\r\n    public addCone (\r\n        center: Vec3,\r\n        radius: number,\r\n        height: number,\r\n        color: Color,\r\n        segments = 32,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaPhi = Math.PI * 2.0 / segments;\r\n        const bottomCenter = new Vec3(center.x, center.y - height / 2.0, center.z);\r\n        const topCenter = new Vec3(center.x, center.y + height / 2.0, center.z);\r\n        const bottomPoints: Vec3[] = [];\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const point = new Vec3(radius * Math.cos(i * deltaPhi), 0.0, radius * Math.sin(i * deltaPhi));\r\n            const p0 = new Vec3(point.x + bottomCenter.x, point.y + bottomCenter.y, point.z + bottomCenter.z);\r\n            bottomPoints.push(p0);\r\n        }\r\n\r\n        if (useTransform) {\r\n            Vec3.transformMat4(bottomCenter, bottomCenter, transform);\r\n            Vec3.transformMat4(topCenter, topCenter, transform);\r\n\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                Vec3.transformMat4(bottomPoints[i], bottomPoints[i], transform);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addTriangle(topCenter, bottomPoints[i + 1], bottomPoints[i], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(bottomCenter, bottomPoints[i], bottomPoints[i + 1], color, wireframe, depthTest, unlit);\r\n        }\r\n    }\r\n\r\n    public addCircle (center: Vec3, radius: number, color: Color, segments = 32, depthTest = true, useTransform = false, transform: Readonly<Mat4> = Mat4.IDENTITY): void {\r\n        const deltaPhi = Math.PI * 2.0 / segments;\r\n        const points: Vec3[] = [];\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const point = new Vec3(radius * Math.cos(i * deltaPhi), 0.0, radius * Math.sin(i * deltaPhi));\r\n            const p0 = new Vec3(point.x + center.x, point.y + center.y, point.z + center.z);\r\n            points.push(p0);\r\n        }\r\n\r\n        if (useTransform) {\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                Vec3.transformMat4(points[i], points[i], transform);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addLine(points[i], points[i + 1], color, depthTest);\r\n        }\r\n    }\r\n\r\n    public addArc (\r\n        center: Vec3,\r\n        radius: number,\r\n        color: Color,\r\n        startAngle: number,\r\n        endAngle: number,\r\n        segments = 32,\r\n        depthTest = true,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const startRadian = toRadian(startAngle);\r\n        const endRadian = toRadian(endAngle);\r\n        const deltaPhi = (endRadian - startRadian) / segments;\r\n        const points: Vec3[] = [];\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const point = new Vec3(radius * Math.cos(i * deltaPhi + startRadian), 0.0, radius * Math.sin(i * deltaPhi + startRadian));\r\n            const p0 = new Vec3(point.x + center.x, point.y + center.y, point.z + center.z);\r\n            points.push(p0);\r\n        }\r\n\r\n        if (useTransform) {\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                Vec3.transformMat4(points[i], points[i], transform);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addLine(points[i], points[i + 1], color, depthTest);\r\n        }\r\n    }\r\n\r\n    public addPolygon (\r\n        center: Vec3,\r\n        radius: number,\r\n        color: Color,\r\n        segments = 6,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        if (wireframe) {\r\n            this.addCircle(center, radius, color, segments, depthTest, useTransform, transform);\r\n        } else {\r\n            this.addDisc(center, radius, color, segments, wireframe, depthTest, unlit, useTransform, transform);\r\n        }\r\n    }\r\n\r\n    public addDisc (\r\n        center: Vec3,\r\n        radius: number,\r\n        color: Color,\r\n        segments = 32,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaPhi = Math.PI * 2.0 / segments;\r\n        const points: Vec3[] = [];\r\n        const newCenter = new Vec3(center);\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const point = new Vec3(radius * Math.cos(i * deltaPhi), 0.0, radius * Math.sin(i * deltaPhi));\r\n            const p0 = new Vec3(point.x + newCenter.x, point.y + newCenter.y, point.z + newCenter.z);\r\n            points.push(p0);\r\n        }\r\n\r\n        if (useTransform) {\r\n            Vec3.transformMat4(newCenter, newCenter, transform);\r\n\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                Vec3.transformMat4(points[i], points[i], transform);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addTriangle(newCenter, points[i], points[i + 1], color, wireframe, depthTest, unlit);\r\n        }\r\n\r\n        // two sides\r\n        if (!wireframe) {\r\n            for (let i = 0; i < segments; i++) {\r\n                this.addTriangle(newCenter, points[i + 1], points[i], color, wireframe, depthTest, unlit);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addSector (\r\n        center: Vec3,\r\n        radius: number,\r\n        color: Color,\r\n        startAngle: number,\r\n        endAngle: number,\r\n        segments = 32,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const startRadian = toRadian(startAngle);\r\n        const endRadian   = toRadian(endAngle);\r\n        const deltaPhi    = (endRadian - startRadian) / segments;\r\n        const points: Vec3[] = [];\r\n        const newCenter = new Vec3(center);\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const point = new Vec3(radius * Math.cos(i * deltaPhi), 0.0, radius * Math.sin(i * deltaPhi));\r\n            const p0 = new Vec3(point.x + newCenter.x, point.y + newCenter.y, point.z + newCenter.z);\r\n            points.push(p0);\r\n        }\r\n\r\n        if (useTransform) {\r\n            Vec3.transformMat4(newCenter, newCenter, transform);\r\n\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                Vec3.transformMat4(points[i], points[i], transform);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addTriangle(newCenter, points[i], points[i + 1], color, wireframe, depthTest, unlit);\r\n        }\r\n\r\n        // two sides\r\n        if (!wireframe) {\r\n            for (let i = 0; i < segments; i++) {\r\n                this.addTriangle(newCenter, points[i + 1], points[i], color, wireframe, depthTest, unlit);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addSphere (\r\n        center: Vec3,\r\n        radius: number,\r\n        color: Color,\r\n        segmentsU = 32,\r\n        segmentsV = 16,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaPhi   = Math.PI * 2.0 / segmentsU;\r\n        const deltaTheta = Math.PI / segmentsV;\r\n        const points: Vec3[][] = [];\r\n\r\n        for (let i = 0; i < segmentsV + 1; i++) {\r\n            const list: Vec3[] = [];\r\n\r\n            const theta    = i * deltaTheta;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta);\r\n\r\n            for (let j = 0; j < segmentsU + 1; j++) {\r\n                const phi    = j * deltaPhi;\r\n                const sinPhi = Math.sin(phi);\r\n                const cosPhi = Math.cos(phi);\r\n                const p = new Vec3(radius * sinTheta * cosPhi, radius * cosTheta, radius * sinTheta * sinPhi);\r\n                const p0 = new Vec3(center.x + p.x, center.y + p.y, center.z + p.z);\r\n\r\n                list.push(p0);\r\n            }\r\n\r\n            points.push(list);\r\n        }\r\n\r\n        if (useTransform) {\r\n            for (let i = 0; i < segmentsV + 1; i++) {\r\n                for (let j = 0; j < segmentsU + 1; j++) {\r\n                    Vec3.transformMat4(points[i][j], points[i][j], transform);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segmentsV; i++) {\r\n            for (let j = 0; j < segmentsU; j++) {\r\n                this.addTriangle(points[i][j], points[i + 1][j + 1], points[i + 1][j], color, wireframe, depthTest, unlit);\r\n                this.addTriangle(points[i][j], points[i][j + 1], points[i + 1][j + 1], color, wireframe, depthTest, unlit);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addTorus (\r\n        center: Vec3,\r\n        bigRadius: number,\r\n        radius: number,\r\n        color: Color,\r\n        segmentsU = 32,\r\n        segmentsV = 16,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaPhi   = Math.PI * 2.0 / segmentsU;\r\n        const deltaTheta = Math.PI * 2.0 / segmentsV;\r\n        const points: Vec3[][] = [];\r\n\r\n        for (let i = 0; i < segmentsU + 1; i++) {\r\n            const list: Vec3[] = [];\r\n            const phi    = i * deltaPhi;\r\n            const sinPhi = Math.sin(phi);\r\n            const cosPhi = Math.cos(phi);\r\n\r\n            for (let j = 0; j < segmentsV + 1; j++) {\r\n                const theta    = j * deltaTheta;\r\n                const sinTheta = Math.sin(theta);\r\n                const cosTheta = Math.cos(theta);\r\n                const p = new Vec3((bigRadius + radius * cosTheta) * cosPhi, radius * sinTheta, (bigRadius + radius * cosTheta) * sinPhi);\r\n                const p0 = new Vec3(center.x + p.x, center.y + p.y, center.z + p.z);\r\n\r\n                list.push(p0);\r\n            }\r\n\r\n            points.push(list);\r\n        }\r\n\r\n        if (useTransform) {\r\n            for (let i = 0; i < segmentsU + 1; i++) {\r\n                for (let j = 0; j < segmentsV + 1; j++) {\r\n                    Vec3.transformMat4(points[i][j], points[i][j], transform);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < segmentsU; i++) {\r\n            for (let j = 0; j < segmentsV; j++) {\r\n                this.addTriangle(points[i][j + 1], points[i + 1][j], points[i][j], color, wireframe, depthTest, unlit);\r\n                this.addTriangle(points[i][j + 1], points[i + 1][j + 1], points[i + 1][j], color, wireframe, depthTest, unlit);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addOctahedron (\r\n        center: Vec3,\r\n        radius: number,\r\n        color: Color,\r\n        wireframe = true,\r\n        depthTest = true,\r\n        unlit = false,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const points: Vec3[] = [];\r\n\r\n        points.push(new Vec3(radius + center.x, center.y, center.z));\r\n        points.push(new Vec3(center.x, center.y, center.z - radius));\r\n        points.push(new Vec3(-radius + center.x, center.y, center.z));\r\n        points.push(new Vec3(center.x, center.y, center.z + radius));\r\n        points.push(new Vec3(center.x, center.y + radius, center.z));\r\n        points.push(new Vec3(center.x, center.y - radius, center.z));\r\n\r\n        if (useTransform) {\r\n            for (let i = 0; i < points.length; i++) {\r\n                Vec3.transformMat4(points[i], points[i], transform);\r\n            }\r\n        }\r\n\r\n        if (wireframe) {\r\n            this.addLine(points[0], points[1], color, depthTest);\r\n            this.addLine(points[1], points[2], color, depthTest);\r\n            this.addLine(points[2], points[3], color, depthTest);\r\n            this.addLine(points[3], points[0], color, depthTest);\r\n\r\n            this.addLine(points[0], points[4], color, depthTest);\r\n            this.addLine(points[1], points[4], color, depthTest);\r\n            this.addLine(points[2], points[4], color, depthTest);\r\n            this.addLine(points[3], points[4], color, depthTest);\r\n\r\n            this.addLine(points[0], points[5], color, depthTest);\r\n            this.addLine(points[1], points[5], color, depthTest);\r\n            this.addLine(points[2], points[5], color, depthTest);\r\n            this.addLine(points[3], points[5], color, depthTest);\r\n        } else {\r\n            this.addTriangle(points[0], points[1], points[4], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[1], points[2], points[4], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[2], points[3], points[4], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[3], points[0], points[4], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[0], points[3], points[5], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[3], points[2], points[5], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[2], points[1], points[5], color, wireframe, depthTest, unlit);\r\n            this.addTriangle(points[1], points[0], points[5], color, wireframe, depthTest, unlit);\r\n        }\r\n    }\r\n\r\n    public addBezier (\r\n        v0: Vec3,\r\n        v1: Vec3,\r\n        v2: Vec3,\r\n        v3: Vec3,\r\n        color: Color,\r\n        segments = 32,\r\n        depthTest = true,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        const deltaT = 1.0 / segments;\r\n        const points: Vec3[] = [];\r\n\r\n        const newV0 = new Vec3(v0);\r\n        const newV1 = new Vec3(v1);\r\n        const newV2 = new Vec3(v2);\r\n        const newV3 = new Vec3(v3);\r\n\r\n        if (useTransform) {\r\n            Vec3.transformMat4(newV0, newV0, transform);\r\n            Vec3.transformMat4(newV1, newV1, transform);\r\n            Vec3.transformMat4(newV2, newV2, transform);\r\n            Vec3.transformMat4(newV3, newV3, transform);\r\n        }\r\n\r\n        for (let i = 0; i < segments + 1; i++) {\r\n            const t = i * deltaT;\r\n            const a = (1.0 - t) * (1.0 - t) * (1.0 - t);\r\n            const b = 3.0 * t * (1.0 - t) * (1.0 - t);\r\n            const c = 3.0 * t * t * (1.0 - t);\r\n            const d = t * t * t;\r\n            const p0 = new Vec3(\r\n                a * newV0.x + b * newV1.x + c * newV2.x + d * newV3.x,\r\n                a * newV0.y + b * newV1.y + c * newV2.y + d * newV3.y,\r\n                a * newV0.z + b * newV1.z + c * newV2.z + d * newV3.z,\r\n            );\r\n\r\n            points.push(p0);\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addLine(points[i], points[i + 1], color, depthTest);\r\n        }\r\n    }\r\n\r\n    public addSpline (spline: geometry.Spline, color: Color, index = 0xffffffff, knotSize = 0.5, segments = 32, depthTest = true, useTransform = false, transform: Readonly<Mat4> = Mat4.IDENTITY): void {\r\n        const numPoints = segments + 1;\r\n        const points = spline.getPoints(numPoints, index);\r\n\r\n        if (useTransform) {\r\n            points.forEach((v: Vec3) => {\r\n                v.transformMat4(transform);\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < segments; i++) {\r\n            this.addLine(points[i], points[i + 1], color, depthTest);\r\n        }\r\n\r\n        if (knotSize > 0.0 && index === 0xffffffff) {\r\n            const crossColor = new Color(255 - color.r, 255 - color.g, 255 - color.b, color.a);\r\n            const numKnots = spline.getKnotCount();\r\n            const knots = spline.knots;\r\n\r\n            for (let i = 0; i < numKnots; i++) {\r\n                let knot = knots[i];\r\n                if (useTransform) {\r\n                    knot = knot.clone().transformMat4(transform);\r\n                }\r\n                this.addCross(knot, knotSize, crossColor, depthTest);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addMesh (center: Vec3, vertices: Array<Vec3>, color: Color, depthTest = true, useTransform = false, transform: Readonly<Mat4> = Mat4.IDENTITY): void {\r\n        for (let i = 0; i < vertices.length; i += 3) {\r\n            const v0 = new Vec3(center.x + vertices[i].x, center.y + vertices[i].y, center.z + vertices[i].z);\r\n            const v1 = new Vec3(center.x + vertices[i + 1].x, center.y + vertices[i + 1].y, center.z + vertices[i + 1].z);\r\n            const v2 = new Vec3(center.x + vertices[i + 2].x, center.y + vertices[i + 2].y, center.z + vertices[i + 2].z);\r\n\r\n            if (useTransform) {\r\n                Vec3.transformMat4(v0, v0, transform);\r\n                Vec3.transformMat4(v1, v1, transform);\r\n                Vec3.transformMat4(v2, v2, transform);\r\n            }\r\n\r\n            this.addLine(v0, v1, color, depthTest);\r\n            this.addLine(v1, v2, color, depthTest);\r\n            this.addLine(v2, v0, color, depthTest);\r\n        }\r\n    }\r\n\r\n    public addIndexedMesh (\r\n        center: Vec3,\r\n        vertices: Array<Vec3>,\r\n        indices: Array<number>,\r\n        color: Color,\r\n        depthTest = true,\r\n        useTransform = false,\r\n        transform: Readonly<Mat4> = Mat4.IDENTITY,\r\n    ): void {\r\n        for (let i = 0; i < indices.length; i += 3) {\r\n            const v0 = new Vec3(center.x + vertices[indices[i]].x, center.y + vertices[indices[i]].y, center.z + vertices[indices[i]].z);\r\n            const v1 = new Vec3(center.x + vertices[indices[i + 1]].x, center.y + vertices[indices[i + 1]].y, center.z + vertices[indices[i + 1]].z);\r\n            const v2 = new Vec3(center.x + vertices[indices[i + 2]].x, center.y + vertices[indices[i + 2]].y, center.z + vertices[indices[i + 2]].z);\r\n\r\n            if (useTransform) {\r\n                Vec3.transformMat4(v0, v0, transform);\r\n                Vec3.transformMat4(v1, v1, transform);\r\n                Vec3.transformMat4(v2, v2, transform);\r\n            }\r\n\r\n            this.addLine(v0, v1, color, depthTest);\r\n            this.addLine(v1, v2, color, depthTest);\r\n            this.addLine(v2, v0, color, depthTest);\r\n        }\r\n    }\r\n}\r\n\r\ncclegacy.internal.GeometryRenderer = GeometryRenderer;\r\n"],"names":["GeometryType","_min","Vec3","_max","_v0","_v1","_v2","_v3","_v4","_v5","_v6","_v7","GeometryVertexBuffer","this","_maxVertices","_vertexCount","_stride","_vertices","_buffer","_inputAssembler","_proto","prototype","init","device","maxVertices","stride","attributes","Float32Array","BYTES_PER_ELEMENT","createBuffer","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","DEVICE","createInputAssembler","InputAssemblerInfo","getCount","Math","min","empty","reset","update","size","destroy","GeometryVertexBuffers","lines","dashedLines","triangles","i","GeometryRenderer","_device","_buffers","_proto2","activate","info","posColorAttributes","Attribute","AttributeName","ATTR_POSITION","Format","RGB32F","ATTR_COLOR","RGBA32F","posNormColorAttributes","ATTR_NORMAL","maxLines","maxDashedLines","maxTriangles","lineStride","length","Color","triangleStride","Vec4","render","renderPass","cmdBuff","sceneData","passes","geometryRendererPasses","shaders","geometryRendererShaders","offset","passCount","drawInfo","DrawInfo","vertexCount","p","pass","shader","pso","PipelineStateManager","getOrCreatePipelineState","bindPipelineState","bindDescriptorSet","SetIndex","MATERIAL","descriptorSet","bindInputAssembler","draw","addDashedLine","v0","v1","color","depthTest","warnID","toArray","addLine","addTriangle","v2","wireframe","unlit","normal","ZERO","dist1","x","y","z","dist2","norm","normalize","cross","set","addQuad","v3","addBoundingBox","aabb","useTransform","transform","Mat4","center","halfExtents","transformMat4","addCross","position","halfSize","addFrustum","frustum","vertices","addCapsule","radius","height","segmentsU","hemiSegmentsV","IDENTITY","deltaPhi","PI","deltaTheta","bottomCenter","topCenter","bottomPoints","topPoints","bottomList","topList","theta","sinTheta","sin","cosTheta","cos","j","phi","sinPhi","cosPhi","p0","p1","push","bottomCircle","topCircle","addCylinder","segments","addCone","point","addCircle","points","addArc","startAngle","endAngle","startRadian","toRadian","addPolygon","addDisc","newCenter","addSector","addSphere","segmentsV","list","addTorus","bigRadius","addOctahedron","addBezier","deltaT","newV0","newV1","newV2","newV3","t","a","b","c","d","addSpline","spline","index","knotSize","numPoints","getPoints","forEach","v","crossColor","r","g","numKnots","getKnotCount","knots","knot","clone","addMesh","addIndexedMesh","indices","cclegacy","internal"],"mappings":"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"}