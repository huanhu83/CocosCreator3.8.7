{"version":3,"file":"gfx-webgl.js","sources":["../../../cocos/gfx/webgl/webgl-descriptor-set.ts","../../../cocos/gfx/webgl/webgl-define.ts","../../../cocos/gfx/webgl/webgl-commands.ts","../../../cocos/gfx/webgl/webgl-gpu-objects.ts","../../../cocos/gfx/webgl/webgl-buffer.ts","../../../cocos/gfx/webgl/webgl-command-buffer.ts","../../../cocos/gfx/webgl/webgl-framebuffer.ts","../../../cocos/gfx/webgl/webgl-input-assembler.ts","../../../cocos/gfx/webgl/webgl-descriptor-set-layout.ts","../../../cocos/gfx/webgl/webgl-pipeline-layout.ts","../../../cocos/gfx/webgl/webgl-pipeline-state.ts","../../../cocos/gfx/webgl/webgl-primary-command-buffer.ts","../../../cocos/gfx/webgl/webgl-queue.ts","../../../cocos/gfx/webgl/webgl-render-pass.ts","../../../cocos/gfx/webgl/states/webgl-sampler.ts","../../../cocos/gfx/webgl/webgl-shader.ts","../../../cocos/gfx/webgl/webgl-state-cache.ts","../../../cocos/gfx/webgl/webgl-texture.ts","../../../cocos/gfx/webgl/webgl-swapchain.ts","../../../cocos/gfx/webgl/webgl-device.ts","../../../exports/gfx-webgl.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { WebGLBuffer } from './webgl-buffer';\r\nimport { IWebGLGPUDescriptorSet, IWebGLGPUDescriptor } from './webgl-gpu-objects';\r\nimport { WebGLSampler } from './states/webgl-sampler';\r\nimport { WebGLTexture } from './webgl-texture';\r\nimport { WebGLDescriptorSetLayout } from './webgl-descriptor-set-layout';\r\nimport { DescriptorSetInfo, DESCRIPTOR_SAMPLER_TYPE, DESCRIPTOR_BUFFER_TYPE } from '../base/define';\r\n\r\n/** @mangle */\r\nexport class WebGLDescriptorSet extends DescriptorSet {\r\n    get gpuDescriptorSet (): IWebGLGPUDescriptorSet {\r\n        return this._gpuDescriptorSet as IWebGLGPUDescriptorSet;\r\n    }\r\n\r\n    private _gpuDescriptorSet: IWebGLGPUDescriptorSet | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<DescriptorSetInfo>): void {\r\n        this._layout = info.layout;\r\n        const { bindings, descriptorIndices, descriptorCount } = (info.layout as WebGLDescriptorSetLayout).gpuDescriptorSetLayout;\r\n\r\n        this._buffers = Array(descriptorCount).fill(null);\r\n        this._textures = Array(descriptorCount).fill(null);\r\n        this._samplers = Array(descriptorCount).fill(null);\r\n\r\n        const gpuDescriptors: IWebGLGPUDescriptor[] = [];\r\n        this._gpuDescriptorSet = { gpuDescriptors, descriptorIndices };\r\n\r\n        for (let i = 0; i < bindings.length; ++i) {\r\n            const binding = bindings[i];\r\n            for (let j = 0; j < binding.count; j++) {\r\n                const gpuDescriptor: IWebGLGPUDescriptor = {\r\n                    type: binding.descriptorType,\r\n                    gpuBuffer: null,\r\n                    gpuTexture: null,\r\n                    gpuSampler: null,\r\n                };\r\n                gpuDescriptors.push(gpuDescriptor);\r\n            }\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._layout = null;\r\n        this._gpuDescriptorSet = null;\r\n    }\r\n\r\n    public update (): void {\r\n        if (this._isDirty && this._gpuDescriptorSet) {\r\n            const descriptors = this._gpuDescriptorSet.gpuDescriptors;\r\n            for (let i = 0; i < descriptors.length; ++i) {\r\n                if (descriptors[i].type & DESCRIPTOR_BUFFER_TYPE) {\r\n                    const buffer = this._buffers[i] as WebGLBuffer | null;\r\n                    if (buffer) {\r\n                        descriptors[i].gpuBuffer = buffer.gpuBuffer || buffer.gpuBufferView;\r\n                    }\r\n                } else if (descriptors[i].type & DESCRIPTOR_SAMPLER_TYPE) {\r\n                    if (this._textures[i]) {\r\n                        descriptors[i].gpuTexture = (this._textures[i] as WebGLTexture).gpuTexture;\r\n                    }\r\n                    if (this._samplers[i]) {\r\n                        descriptors[i].gpuSampler = (this._samplers[i] as WebGLSampler).gpuSampler;\r\n                    }\r\n                }\r\n            }\r\n            this._isDirty = false;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { WebGLDevice } from './webgl-device';\r\n\r\n// Extensions\r\nexport enum WebGLEXT {\r\n    RGBA16F_EXT = 0x881A,\r\n    RGB16F_EXT = 0x881B,\r\n    RGBA32F_EXT = 0x8814,\r\n    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211,\r\n    UNSIGNED_NORMALIZED_EXT = 0x8C17,\r\n    UNSIGNED_INT_24_8_WEBGL = 0x84FA,\r\n    HALF_FLOAT_OES = 0x8D61,\r\n\r\n    SRGB_EXT = 0x8C40,\r\n    SRGB_ALPHA_EXT = 0x8C42,\r\n    SRGB8_ALPHA8_EXT = 0x8C43,\r\n\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\r\n\r\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,\r\n\r\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\r\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\r\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\r\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\r\n\r\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\r\n\r\n    COMPRESSED_R11_EAC = 0x9270,\r\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\r\n    COMPRESSED_RG11_EAC = 0x9272,\r\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\r\n    COMPRESSED_RGB8_ETC2 = 0x9274,\r\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\r\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\r\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\r\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\r\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\r\n\r\n    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,\r\n    COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,\r\n    COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,\r\n    COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,\r\n    COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,\r\n    COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,\r\n    COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,\r\n    COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,\r\n    COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,\r\n    COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,\r\n    COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,\r\n    COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,\r\n    COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,\r\n    COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,\r\n\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLExtensions {\r\n    EXT_texture_filter_anisotropic: EXT_texture_filter_anisotropic | null;\r\n    EXT_blend_minmax: EXT_blend_minmax | null;\r\n    EXT_frag_depth: EXT_frag_depth | null;\r\n    EXT_shader_texture_lod: EXT_shader_texture_lod | null;\r\n    EXT_sRGB: EXT_sRGB | null;\r\n    OES_vertex_array_object: OES_vertex_array_object | null;\r\n    EXT_color_buffer_half_float: EXT_color_buffer_half_float | null;\r\n    WEBGL_multi_draw: WEBGL_multi_draw | null;\r\n    WEBGL_color_buffer_float: WEBGL_color_buffer_float | null;\r\n    WEBGL_compressed_texture_etc1: WEBGL_compressed_texture_etc1 | null;\r\n    WEBGL_compressed_texture_etc: WEBGL_compressed_texture_etc | null;\r\n    WEBGL_compressed_texture_pvrtc: WEBGL_compressed_texture_pvrtc | null;\r\n    WEBGL_compressed_texture_astc: WEBGL_compressed_texture_astc | null;\r\n    WEBGL_compressed_texture_s3tc: WEBGL_compressed_texture_s3tc | null;\r\n    WEBGL_compressed_texture_s3tc_srgb: WEBGL_compressed_texture_s3tc_srgb | null;\r\n    WEBGL_debug_shaders: WEBGL_debug_shaders | null;\r\n    WEBGL_draw_buffers: WEBGL_draw_buffers | null;\r\n    WEBGL_lose_context: WEBGL_lose_context | null;\r\n    WEBGL_depth_texture: WEBGL_depth_texture | null;\r\n    WEBGL_debug_renderer_info: WEBGL_debug_renderer_info | null;\r\n    OES_texture_half_float: OES_texture_half_float | null;\r\n    OES_texture_half_float_linear: OES_texture_half_float_linear | null;\r\n    OES_texture_float: OES_texture_float | null;\r\n    OES_texture_float_linear: OES_texture_float_linear | null;\r\n    OES_standard_derivatives: OES_standard_derivatives | null;\r\n    OES_element_index_uint: OES_element_index_uint | null;\r\n    ANGLE_instanced_arrays: ANGLE_instanced_arrays | null;\r\n    destroyShadersImmediately: boolean;\r\n    noCompressedTexSubImage2D: boolean;\r\n    isLocationActive: (glLoc: unknown) => glLoc is WebGLUniformLocation;\r\n    useVAO: boolean;\r\n}\r\n\r\n// put the global instance here so that we won't have circular dependencies\r\nexport class WebGLDeviceManager {\r\n    static get instance (): WebGLDevice {\r\n        return WebGLDeviceManager._instance!;\r\n    }\r\n    static setInstance (instance: WebGLDevice): void {\r\n        WebGLDeviceManager._instance = instance;\r\n    }\r\n    private static _instance: WebGLDevice | null = null;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BYTEDANCE } from 'internal:constants';\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { WebGLEXT } from './webgl-define';\r\nimport { WebGLDevice } from './webgl-device';\r\nimport {\r\n    IWebGLGPUInputAssembler, IWebGLGPUUniform, IWebGLAttrib, IWebGLGPUDescriptorSet, IWebGLGPUBuffer, IWebGLGPUFramebuffer, IWebGLGPUInput,\r\n    IWebGLGPUPipelineState, IWebGLGPUShader, IWebGLGPUTexture, IWebGLGPUUniformBlock, IWebGLGPUUniformSamplerTexture, IWebGLGPURenderPass,\r\n} from './webgl-gpu-objects';\r\nimport {\r\n    BufferUsageBit, ColorMask, CullMode, Format, BufferTextureCopy, Color, Rect,\r\n    FormatInfos, FormatSize, LoadOp, MemoryUsageBit, ShaderStageFlagBit, UniformSamplerTexture,\r\n    TextureFlagBit, TextureType, Type, FormatInfo, DynamicStateFlagBit, BufferSource, DrawInfo,\r\n    IndirectBuffer, DynamicStates, Extent, getTypedArrayConstructor, formatAlignment, Offset, alignTo,\r\n    TextureBlit, Filter,\r\n} from '../base/define';\r\n\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { assertID, debugID, error, errorID } from '../../core/platform/debug';\r\nimport { cclegacy } from '../../core/global-exports';\r\nimport { OS } from '../../../pal/system-info/enum-type';\r\n\r\nconst max = Math.max;\r\nconst min = Math.min;\r\n\r\nexport function GFXFormatToWebGLType (format: Format, gl: WebGLRenderingContext): GLenum {\r\n    switch (format) {\r\n    case Format.R8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.R8SN: return WebGLConstants.BYTE;\r\n    case Format.R8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.R8I: return WebGLConstants.BYTE;\r\n    case Format.R16F: return WebGLEXT.HALF_FLOAT_OES;\r\n    case Format.R16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.R16I: return WebGLConstants.SHORT;\r\n    case Format.R32F: return WebGLConstants.FLOAT;\r\n    case Format.R32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.R32I: return WebGLConstants.INT;\r\n\r\n    case Format.RG8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RG8SN: return WebGLConstants.BYTE;\r\n    case Format.RG8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RG8I: return WebGLConstants.BYTE;\r\n    case Format.RG16F: return WebGLEXT.HALF_FLOAT_OES;\r\n    case Format.RG16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.RG16I: return WebGLConstants.SHORT;\r\n    case Format.RG32F: return WebGLConstants.FLOAT;\r\n    case Format.RG32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RG32I: return WebGLConstants.INT;\r\n\r\n    case Format.RGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.SRGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGB8SN: return WebGLConstants.BYTE;\r\n    case Format.RGB8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGB8I: return WebGLConstants.BYTE;\r\n    case Format.RGB16F: return WebGLEXT.HALF_FLOAT_OES;\r\n    case Format.RGB16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.RGB16I: return WebGLConstants.SHORT;\r\n    case Format.RGB32F: return WebGLConstants.FLOAT;\r\n    case Format.RGB32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RGB32I: return WebGLConstants.INT;\r\n\r\n    case Format.BGRA8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGBA8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.SRGB8_A8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGBA8SN: return WebGLConstants.BYTE;\r\n    case Format.RGBA8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGBA8I: return WebGLConstants.BYTE;\r\n    case Format.RGBA16F: return WebGLEXT.HALF_FLOAT_OES;\r\n    case Format.RGBA16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.RGBA16I: return WebGLConstants.SHORT;\r\n    case Format.RGBA32F: return WebGLConstants.FLOAT;\r\n    case Format.RGBA32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RGBA32I: return WebGLConstants.INT;\r\n\r\n    case Format.R5G6B5: return WebGLConstants.UNSIGNED_SHORT_5_6_5;\r\n    case Format.R11G11B10F: return WebGLConstants.FLOAT;\r\n    case Format.RGB5A1: return WebGLConstants.UNSIGNED_SHORT_5_5_5_1;\r\n    case Format.RGBA4: return WebGLConstants.UNSIGNED_SHORT_4_4_4_4;\r\n    case Format.RGB10A2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGB10A2UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RGB9E5: return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    case Format.DEPTH: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.DEPTH_STENCIL: return WebGLEXT.UNSIGNED_INT_24_8_WEBGL;\r\n\r\n    case Format.BC1: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC1_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC2_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC3: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC3_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC4: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC4_SNORM: return WebGLConstants.BYTE;\r\n    case Format.BC5: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC5_SNORM: return WebGLConstants.BYTE;\r\n    case Format.BC6H_SF16: return WebGLConstants.FLOAT;\r\n    case Format.BC6H_UF16: return WebGLConstants.FLOAT;\r\n    case Format.BC7: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC7_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    case Format.ETC_RGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_RGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_SRGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_RGB8_A1: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_SRGB8_A1: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.EAC_R11: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.EAC_R11SN: return WebGLConstants.BYTE;\r\n    case Format.EAC_RG11: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.EAC_RG11SN: return WebGLConstants.BYTE;\r\n\r\n    case Format.PVRTC_RGB2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC_RGBA2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC_RGB4: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC_RGBA4: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC2_2BPP: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC2_4BPP: return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    case Format.ASTC_RGBA_4X4:\r\n    case Format.ASTC_RGBA_5X4:\r\n    case Format.ASTC_RGBA_5X5:\r\n    case Format.ASTC_RGBA_6X5:\r\n    case Format.ASTC_RGBA_6X6:\r\n    case Format.ASTC_RGBA_8X5:\r\n    case Format.ASTC_RGBA_8X6:\r\n    case Format.ASTC_RGBA_8X8:\r\n    case Format.ASTC_RGBA_10X5:\r\n    case Format.ASTC_RGBA_10X6:\r\n    case Format.ASTC_RGBA_10X8:\r\n    case Format.ASTC_RGBA_10X10:\r\n    case Format.ASTC_RGBA_12X10:\r\n    case Format.ASTC_RGBA_12X12:\r\n    case Format.ASTC_SRGBA_4X4:\r\n    case Format.ASTC_SRGBA_5X4:\r\n    case Format.ASTC_SRGBA_5X5:\r\n    case Format.ASTC_SRGBA_6X5:\r\n    case Format.ASTC_SRGBA_6X6:\r\n    case Format.ASTC_SRGBA_8X5:\r\n    case Format.ASTC_SRGBA_8X6:\r\n    case Format.ASTC_SRGBA_8X8:\r\n    case Format.ASTC_SRGBA_10X5:\r\n    case Format.ASTC_SRGBA_10X6:\r\n    case Format.ASTC_SRGBA_10X8:\r\n    case Format.ASTC_SRGBA_10X10:\r\n    case Format.ASTC_SRGBA_12X10:\r\n    case Format.ASTC_SRGBA_12X12:\r\n        return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    default: {\r\n        return WebGLConstants.UNSIGNED_BYTE;\r\n    }\r\n    }\r\n}\r\n\r\nexport function GFXFormatToWebGLInternalFormat (format: Format, gl: WebGLRenderingContext): GLenum {\r\n    switch (format) {\r\n    case Format.R5G6B5: return WebGLConstants.RGB565;\r\n    case Format.RGB5A1: return WebGLConstants.RGB5_A1;\r\n    case Format.RGBA4: return WebGLConstants.RGBA4;\r\n    case Format.RGBA16F: return WebGLEXT.RGBA16F_EXT;\r\n    case Format.RGBA32F: return WebGLEXT.RGBA32F_EXT;\r\n    case Format.SRGB8_A8: return WebGLEXT.SRGB8_ALPHA8_EXT;\r\n    case Format.DEPTH: return WebGLConstants.DEPTH_COMPONENT16;\r\n    case Format.DEPTH_STENCIL: return WebGLConstants.DEPTH_STENCIL;\r\n\r\n    default: {\r\n        errorID(16309);\r\n        return WebGLConstants.RGBA;\r\n    }\r\n    }\r\n}\r\n\r\nexport function GFXFormatToWebGLFormat (format: Format, gl: WebGLRenderingContext): GLenum {\r\n    switch (format) {\r\n    case Format.A8: return WebGLConstants.ALPHA;\r\n    case Format.L8: return WebGLConstants.LUMINANCE;\r\n    case Format.LA8: return WebGLConstants.LUMINANCE_ALPHA;\r\n    case Format.RGB8: return WebGLConstants.RGB;\r\n    case Format.RGB16F: return WebGLConstants.RGB;\r\n    case Format.RGB32F: return WebGLConstants.RGB;\r\n    case Format.BGRA8: return WebGLConstants.RGBA;\r\n    case Format.RGBA8: return WebGLConstants.RGBA;\r\n    case Format.SRGB8_A8: return WebGLConstants.RGBA;\r\n    case Format.RGBA16F: return WebGLConstants.RGBA;\r\n    case Format.RGBA32F: return WebGLConstants.RGBA;\r\n    case Format.R5G6B5: return WebGLConstants.RGB;\r\n    case Format.RGB5A1: return WebGLConstants.RGBA;\r\n    case Format.RGBA4: return WebGLConstants.RGBA;\r\n    case Format.DEPTH: return WebGLConstants.DEPTH_COMPONENT;\r\n    case Format.DEPTH_STENCIL: return WebGLConstants.DEPTH_STENCIL;\r\n\r\n    case Format.BC1: return WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n    case Format.BC1_ALPHA: return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n    case Format.BC1_SRGB: return WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;\r\n    case Format.BC1_SRGB_ALPHA: return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\r\n    case Format.BC2: return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n    case Format.BC2_SRGB: return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\r\n    case Format.BC3: return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n    case Format.BC3_SRGB: return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\r\n\r\n    case Format.ETC_RGB8: return WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;\r\n    case Format.ETC2_RGB8: return WebGLEXT.COMPRESSED_RGB8_ETC2;\r\n    case Format.ETC2_SRGB8: return WebGLEXT.COMPRESSED_SRGB8_ETC2;\r\n    case Format.ETC2_RGB8_A1: return WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n    case Format.ETC2_SRGB8_A1: return WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n    case Format.ETC2_RGBA8: return WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;\r\n    case Format.ETC2_SRGB8_A8: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;\r\n    case Format.EAC_R11: return WebGLEXT.COMPRESSED_R11_EAC;\r\n    case Format.EAC_R11SN: return WebGLEXT.COMPRESSED_SIGNED_R11_EAC;\r\n    case Format.EAC_RG11: return WebGLEXT.COMPRESSED_RG11_EAC;\r\n    case Format.EAC_RG11SN: return WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;\r\n\r\n    case Format.PVRTC_RGB2: return WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n    case Format.PVRTC_RGBA2: return WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n    case Format.PVRTC_RGB4: return WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n    case Format.PVRTC_RGBA4: return WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\r\n    case Format.ASTC_RGBA_4X4: return WebGLEXT.COMPRESSED_RGBA_ASTC_4x4_KHR;\r\n    case Format.ASTC_RGBA_5X4: return WebGLEXT.COMPRESSED_RGBA_ASTC_5x4_KHR;\r\n    case Format.ASTC_RGBA_5X5: return WebGLEXT.COMPRESSED_RGBA_ASTC_5x5_KHR;\r\n    case Format.ASTC_RGBA_6X5: return WebGLEXT.COMPRESSED_RGBA_ASTC_6x5_KHR;\r\n    case Format.ASTC_RGBA_6X6: return WebGLEXT.COMPRESSED_RGBA_ASTC_6x6_KHR;\r\n    case Format.ASTC_RGBA_8X5: return WebGLEXT.COMPRESSED_RGBA_ASTC_8x5_KHR;\r\n    case Format.ASTC_RGBA_8X6: return WebGLEXT.COMPRESSED_RGBA_ASTC_8x6_KHR;\r\n    case Format.ASTC_RGBA_8X8: return WebGLEXT.COMPRESSED_RGBA_ASTC_8x8_KHR;\r\n    case Format.ASTC_RGBA_10X5: return WebGLEXT.COMPRESSED_RGBA_ASTC_10x5_KHR;\r\n    case Format.ASTC_RGBA_10X6: return WebGLEXT.COMPRESSED_RGBA_ASTC_10x6_KHR;\r\n    case Format.ASTC_RGBA_10X8: return WebGLEXT.COMPRESSED_RGBA_ASTC_10x8_KHR;\r\n    case Format.ASTC_RGBA_10X10: return WebGLEXT.COMPRESSED_RGBA_ASTC_10x10_KHR;\r\n    case Format.ASTC_RGBA_12X10: return WebGLEXT.COMPRESSED_RGBA_ASTC_12x10_KHR;\r\n    case Format.ASTC_RGBA_12X12: return WebGLEXT.COMPRESSED_RGBA_ASTC_12x12_KHR;\r\n\r\n    case Format.ASTC_SRGBA_4X4: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;\r\n    case Format.ASTC_SRGBA_5X4: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;\r\n    case Format.ASTC_SRGBA_5X5: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;\r\n    case Format.ASTC_SRGBA_6X5: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;\r\n    case Format.ASTC_SRGBA_6X6: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;\r\n    case Format.ASTC_SRGBA_8X5: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;\r\n    case Format.ASTC_SRGBA_8X6: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;\r\n    case Format.ASTC_SRGBA_8X8: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;\r\n    case Format.ASTC_SRGBA_10X5: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;\r\n    case Format.ASTC_SRGBA_10X6: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;\r\n    case Format.ASTC_SRGBA_10X8: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;\r\n    case Format.ASTC_SRGBA_10X10: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;\r\n    case Format.ASTC_SRGBA_12X10: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;\r\n    case Format.ASTC_SRGBA_12X12: return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;\r\n\r\n    default: {\r\n        errorID(16310);\r\n        return WebGLConstants.RGBA;\r\n    }\r\n    }\r\n}\r\n\r\nfunction GFXTypeToWebGLType (type: Type, gl: WebGLRenderingContext): GLenum {\r\n    switch (type) {\r\n    case Type.BOOL: return WebGLConstants.BOOL;\r\n    case Type.BOOL2: return WebGLConstants.BOOL_VEC2;\r\n    case Type.BOOL3: return WebGLConstants.BOOL_VEC3;\r\n    case Type.BOOL4: return WebGLConstants.BOOL_VEC4;\r\n    case Type.INT: return WebGLConstants.INT;\r\n    case Type.INT2: return WebGLConstants.INT_VEC2;\r\n    case Type.INT3: return WebGLConstants.INT_VEC3;\r\n    case Type.INT4: return WebGLConstants.INT_VEC4;\r\n    case Type.UINT: return WebGLConstants.UNSIGNED_INT;\r\n    case Type.FLOAT: return WebGLConstants.FLOAT;\r\n    case Type.FLOAT2: return WebGLConstants.FLOAT_VEC2;\r\n    case Type.FLOAT3: return WebGLConstants.FLOAT_VEC3;\r\n    case Type.FLOAT4: return WebGLConstants.FLOAT_VEC4;\r\n    case Type.MAT2: return WebGLConstants.FLOAT_MAT2;\r\n    case Type.MAT3: return WebGLConstants.FLOAT_MAT3;\r\n    case Type.MAT4: return WebGLConstants.FLOAT_MAT4;\r\n    case Type.SAMPLER2D: return WebGLConstants.SAMPLER_2D;\r\n    case Type.SAMPLER_CUBE: return WebGLConstants.SAMPLER_CUBE;\r\n    default: {\r\n        errorID(16311);\r\n        return Type.UNKNOWN;\r\n    }\r\n    }\r\n}\r\n\r\nfunction GFXTypeToTypedArrayCtor (type: Type): Int32ArrayConstructor | Float32ArrayConstructor {\r\n    switch (type) {\r\n    case Type.BOOL:\r\n    case Type.BOOL2:\r\n    case Type.BOOL3:\r\n    case Type.BOOL4:\r\n    case Type.INT:\r\n    case Type.INT2:\r\n    case Type.INT3:\r\n    case Type.INT4:\r\n    case Type.UINT:\r\n        return Int32Array;\r\n    case Type.FLOAT:\r\n    case Type.FLOAT2:\r\n    case Type.FLOAT3:\r\n    case Type.FLOAT4:\r\n    case Type.MAT2:\r\n    case Type.MAT3:\r\n    case Type.MAT4:\r\n        return Float32Array;\r\n    default: {\r\n        errorID(16312);\r\n        return Float32Array;\r\n    }\r\n    }\r\n}\r\n\r\nfunction WebGLTypeToGFXType (glType: GLenum, gl: WebGLRenderingContext): Type {\r\n    switch (glType) {\r\n    case WebGLConstants.BOOL: return Type.BOOL;\r\n    case WebGLConstants.BOOL_VEC2: return Type.BOOL2;\r\n    case WebGLConstants.BOOL_VEC3: return Type.BOOL3;\r\n    case WebGLConstants.BOOL_VEC4: return Type.BOOL4;\r\n    case WebGLConstants.INT: return Type.INT;\r\n    case WebGLConstants.INT_VEC2: return Type.INT2;\r\n    case WebGLConstants.INT_VEC3: return Type.INT3;\r\n    case WebGLConstants.INT_VEC4: return Type.INT4;\r\n    case WebGLConstants.UNSIGNED_INT: return Type.UINT;\r\n    case WebGLConstants.FLOAT: return Type.FLOAT;\r\n    case WebGLConstants.FLOAT_VEC2: return Type.FLOAT2;\r\n    case WebGLConstants.FLOAT_VEC3: return Type.FLOAT3;\r\n    case WebGLConstants.FLOAT_VEC4: return Type.FLOAT4;\r\n    case WebGLConstants.FLOAT_MAT2: return Type.MAT2;\r\n    case WebGLConstants.FLOAT_MAT3: return Type.MAT3;\r\n    case WebGLConstants.FLOAT_MAT4: return Type.MAT4;\r\n    case WebGLConstants.SAMPLER_2D: return Type.SAMPLER2D;\r\n    case WebGLConstants.SAMPLER_CUBE: return Type.SAMPLER_CUBE;\r\n    default: {\r\n        errorID(16313);\r\n        return Type.UNKNOWN;\r\n    }\r\n    }\r\n}\r\n\r\nfunction WebGLGetTypeSize (glType: GLenum, gl: WebGLRenderingContext): number {\r\n    switch (glType) {\r\n    case WebGLConstants.BOOL: return 4;\r\n    case WebGLConstants.BOOL_VEC2: return 8;\r\n    case WebGLConstants.BOOL_VEC3: return 12;\r\n    case WebGLConstants.BOOL_VEC4: return 16;\r\n    case WebGLConstants.INT: return 4;\r\n    case WebGLConstants.INT_VEC2: return 8;\r\n    case WebGLConstants.INT_VEC3: return 12;\r\n    case WebGLConstants.INT_VEC4: return 16;\r\n    case WebGLConstants.UNSIGNED_INT: return 4;\r\n    case WebGLConstants.FLOAT: return 4;\r\n    case WebGLConstants.FLOAT_VEC2: return 8;\r\n    case WebGLConstants.FLOAT_VEC3: return 12;\r\n    case WebGLConstants.FLOAT_VEC4: return 16;\r\n    case WebGLConstants.FLOAT_MAT2: return 16;\r\n    case WebGLConstants.FLOAT_MAT3: return 36;\r\n    case WebGLConstants.FLOAT_MAT4: return 64;\r\n    case WebGLConstants.SAMPLER_2D: return 4;\r\n    case WebGLConstants.SAMPLER_CUBE: return 4;\r\n    default: {\r\n        errorID(16314);\r\n        return 0;\r\n    }\r\n    }\r\n}\r\n\r\nfunction WebGLGetComponentCount (glType: GLenum, gl: WebGLRenderingContext): number {\r\n    switch (glType) {\r\n    case WebGLConstants.FLOAT_MAT2: return 2;\r\n    case WebGLConstants.FLOAT_MAT3: return 3;\r\n    case WebGLConstants.FLOAT_MAT4: return 4;\r\n    default: {\r\n        return 1;\r\n    }\r\n    }\r\n}\r\n\r\nconst WebGLCmpFuncs: GLenum[] = [\r\n    WebGLConstants.NEVER,\r\n    WebGLConstants.LESS,\r\n    WebGLConstants.EQUAL,\r\n    WebGLConstants.LEQUAL,\r\n    WebGLConstants.GREATER,\r\n    WebGLConstants.NOTEQUAL,\r\n    WebGLConstants.GEQUAL,\r\n    WebGLConstants.ALWAYS,\r\n];\r\n\r\nconst WebGLStencilOps: GLenum[] = [\r\n    0x0000, // WebGLRenderingContext.ZERO,\r\n    0x1E00, // WebGLRenderingContext.KEEP,\r\n    0x1E01, // WebGLRenderingContext.REPLACE,\r\n    0x1E02, // WebGLRenderingContext.INCR,\r\n    0x1E03, // WebGLRenderingContext.DECR,\r\n    0x150A, // WebGLRenderingContext.INVERT,\r\n    0x8507, // WebGLRenderingContext.INCR_WRAP,\r\n    0x8508, // WebGLRenderingContext.DECR_WRAP,\r\n];\r\n\r\nconst WebGLBlendOps: GLenum[] = [\r\n    0x8006, // WebGLRenderingContext.FUNC_ADD,\r\n    0x800A, // WebGLRenderingContext.FUNC_SUBTRACT,\r\n    0x800B, // WebGLRenderingContext.FUNC_REVERSE_SUBTRACT,\r\n    0x8007, // WebGLRenderingContext.MIN,\r\n    0x8008, // WebGLRenderingContext.MAX,\r\n];\r\n\r\nconst WebGLBlendFactors: GLenum[] = [\r\n    0x0000, // WebGLRenderingContext.ZERO,\r\n    0x0001, // WebGLRenderingContext.ONE,\r\n    0x0302, // WebGLRenderingContext.SRC_ALPHA,\r\n    0x0304, // WebGLRenderingContext.DST_ALPHA,\r\n    0x0303, // WebGLRenderingContext.ONE_MINUS_SRC_ALPHA,\r\n    0x0305, // WebGLRenderingContext.ONE_MINUS_DST_ALPHA,\r\n    0x0300, // WebGLRenderingContext.SRC_COLOR,\r\n    0x0306, // WebGLRenderingContext.DST_COLOR,\r\n    0x0301, // WebGLRenderingContext.ONE_MINUS_SRC_COLOR,\r\n    0x0307, // WebGLRenderingContext.ONE_MINUS_DST_COLOR,\r\n    0x0308, // WebGLRenderingContext.SRC_ALPHA_SATURATE,\r\n    0x8001, // WebGLRenderingContext.CONSTANT_COLOR,\r\n    0x8002, // WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR,\r\n    0x8003, // WebGLRenderingContext.CONSTANT_ALPHA,\r\n    0x8004, // WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA,\r\n];\r\n\r\nexport function WebGLCmdFuncCreateBuffer (device: WebGLDevice, gpuBuffer: IWebGLGPUBuffer): void {\r\n    const { gl, stateCache } = device;\r\n    const glUsage: GLenum = gpuBuffer.memUsage & MemoryUsageBit.HOST ? WebGLConstants.DYNAMIC_DRAW : WebGLConstants.STATIC_DRAW;\r\n\r\n    if (gpuBuffer.usage & BufferUsageBit.VERTEX) {\r\n        gpuBuffer.glTarget = WebGLConstants.ARRAY_BUFFER;\r\n        const glBuffer = gl.createBuffer();\r\n        if (glBuffer) {\r\n            gpuBuffer.glBuffer = glBuffer;\r\n            if (gpuBuffer.size > 0) {\r\n                if (device.extensions.useVAO) {\r\n                    if (stateCache.glVAO) {\r\n                        device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                        stateCache.glVAO = null;\r\n                    }\r\n                }\r\n                gfxStateCache.gpuInputAssembler = null;\r\n\r\n                if (stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                    stateCache.glArrayBuffer = gpuBuffer.glBuffer;\r\n                }\r\n\r\n                gl.bufferData(WebGLConstants.ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n                stateCache.glArrayBuffer = null;\r\n            }\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {\r\n        gpuBuffer.glTarget = WebGLConstants.ELEMENT_ARRAY_BUFFER;\r\n        const glBuffer = gl.createBuffer();\r\n\r\n        if (glBuffer) {\r\n            gpuBuffer.glBuffer = glBuffer;\r\n            if (gpuBuffer.size > 0) {\r\n                if (device.extensions.useVAO) {\r\n                    if (stateCache.glVAO) {\r\n                        device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                        stateCache.glVAO = null;\r\n                    }\r\n                }\r\n                gfxStateCache.gpuInputAssembler = null;\r\n\r\n                if (stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                    stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;\r\n                }\r\n\r\n                gl.bufferData(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n                stateCache.glElementArrayBuffer = null;\r\n            }\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n\r\n        if (gpuBuffer.buffer) {\r\n            gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else {\r\n        errorID(16315);\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncDestroyBuffer (device: WebGLDevice, gpuBuffer: IWebGLGPUBuffer): void {\r\n    const { gl } = device;\r\n    const cache = device.stateCache;\r\n\r\n    if (gpuBuffer.glBuffer) {\r\n        // Firefox 75+ implicitly unbind whatever buffer there was on the slot sometimes\r\n        // can be reproduced in the static batching scene at https://github.com/cocos-creator/test-cases-3d\r\n        switch (gpuBuffer.glTarget) {\r\n        case WebGLConstants.ARRAY_BUFFER:\r\n            if (device.extensions.useVAO) {\r\n                if (cache.glVAO) {\r\n                    device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                    cache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n            cache.glArrayBuffer = null;\r\n            break;\r\n        case WebGLConstants.ELEMENT_ARRAY_BUFFER:\r\n            if (device.extensions.useVAO) {\r\n                if (cache.glVAO) {\r\n                    device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                    cache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n            cache.glElementArrayBuffer = null;\r\n            break;\r\n        default:\r\n        }\r\n\r\n        gl.deleteBuffer(gpuBuffer.glBuffer);\r\n        gpuBuffer.glBuffer = null;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncResizeBuffer (device: WebGLDevice, gpuBuffer: IWebGLGPUBuffer): void {\r\n    const { gl, stateCache } = device;\r\n    const glUsage: GLenum = gpuBuffer.memUsage & MemoryUsageBit.HOST ? WebGLConstants.DYNAMIC_DRAW : WebGLConstants.STATIC_DRAW;\r\n\r\n    if (gpuBuffer.usage & BufferUsageBit.VERTEX) {\r\n        if (device.extensions.useVAO) {\r\n            if (stateCache.glVAO) {\r\n                device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                stateCache.glVAO = null;\r\n            }\r\n        }\r\n        gfxStateCache.gpuInputAssembler = null;\r\n\r\n        if (stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {\r\n            gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n        }\r\n\r\n        if (gpuBuffer.buffer) {\r\n            gl.bufferData(WebGLConstants.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);\r\n        } else {\r\n            gl.bufferData(WebGLConstants.ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n        }\r\n        gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n        stateCache.glArrayBuffer = null;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {\r\n        if (device.extensions.useVAO) {\r\n            if (stateCache.glVAO) {\r\n                device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                stateCache.glVAO = null;\r\n            }\r\n        }\r\n        gfxStateCache.gpuInputAssembler = null;\r\n\r\n        if (stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n            gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n        }\r\n\r\n        if (gpuBuffer.buffer) {\r\n            gl.bufferData(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);\r\n        } else {\r\n            gl.bufferData(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n        }\r\n        gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n        stateCache.glElementArrayBuffer = null;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {\r\n        if (gpuBuffer.buffer) {\r\n            gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);\r\n        }\r\n    } else if ((gpuBuffer.usage & BufferUsageBit.INDIRECT)\r\n            || (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST)\r\n            || (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC)) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else {\r\n        errorID(16315);\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncUpdateBuffer (\r\n    device: WebGLDevice,\r\n    gpuBuffer: IWebGLGPUBuffer,\r\n    buffer: Readonly<BufferSource>,\r\n    offset: number,\r\n    size: number,\r\n): void {\r\n    if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {\r\n        if (ArrayBuffer.isView(buffer)) {\r\n            gpuBuffer.vf32!.set(buffer as Float32Array, offset / Float32Array.BYTES_PER_ELEMENT);\r\n        } else {\r\n            gpuBuffer.vf32!.set(new Float32Array(buffer as ArrayBuffer), offset / Float32Array.BYTES_PER_ELEMENT);\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {\r\n        gpuBuffer.indirects.clearDraws();\r\n        const drawInfos = (buffer as IndirectBuffer).drawInfos;\r\n        for (let i = 0; i < drawInfos.length; ++i) {\r\n            gpuBuffer.indirects.setDrawInfo(offset + i, drawInfos[i]);\r\n        }\r\n    } else {\r\n        const buff = buffer as ArrayBuffer;\r\n        const { gl, stateCache } = device;\r\n\r\n        switch (gpuBuffer.glTarget) {\r\n        case WebGLConstants.ARRAY_BUFFER: {\r\n            if (device.extensions.useVAO) {\r\n                if (stateCache.glVAO) {\r\n                    device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                    stateCache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            if (stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                stateCache.glArrayBuffer = gpuBuffer.glBuffer;\r\n            }\r\n            break;\r\n        }\r\n        case WebGLConstants.ELEMENT_ARRAY_BUFFER: {\r\n            if (device.extensions.useVAO) {\r\n                if (stateCache.glVAO) {\r\n                    device.extensions.OES_vertex_array_object!.bindVertexArrayOES(null);\r\n                    stateCache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            if (stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;\r\n            }\r\n            break;\r\n        }\r\n        default: {\r\n            errorID(16316);\r\n            return;\r\n        }\r\n        }\r\n\r\n        if (systemInfo.os === OS.IOS  && (gpuBuffer.memUsage & MemoryUsageBit.HOST) && offset === 0 && size === buff.byteLength) {\r\n            // Fix performance issue on iOS.\r\n            // TODO(zhouzhenglong): glBufferSubData is faster than glBufferData in most cases.\r\n            // We should use multiple buffers to avoid stall (cpu write conflicts with gpu read).\r\n            // Before that, we will use glBufferData instead of glBufferSubData.\r\n            gl.bufferData(gpuBuffer.glTarget, buff, gl.DYNAMIC_DRAW);\r\n        } else if (size === buff.byteLength) {\r\n            gl.bufferSubData(gpuBuffer.glTarget, offset, buff);\r\n        } else {\r\n            gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));\r\n        }\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncCreateTexture (device: WebGLDevice, gpuTexture: IWebGLGPUTexture): void {\r\n    const { gl, stateCache } = device;\r\n\r\n    gpuTexture.glFormat = gpuTexture.glInternalFmt = GFXFormatToWebGLFormat(gpuTexture.format, gl);\r\n    gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);\r\n\r\n    let w = gpuTexture.width;\r\n    let h = gpuTexture.height;\r\n\r\n    switch (gpuTexture.type) {\r\n    case TextureType.TEX2D: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > device.capabilities.maxTextureSize) {\r\n            errorID(9100, maxSize, device.capabilities.maxTextureSize);\r\n        }\r\n        // TODO: The system bug in the TikTok mini-game; once they fix it, a rollback will be necessary.\r\n        if (!device.textureExclusive[gpuTexture.format]\r\n            && ((!device.extensions.WEBGL_depth_texture || BYTEDANCE) && FormatInfos[gpuTexture.format].hasDepth)) {\r\n            gpuTexture.glInternalFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);\r\n            gpuTexture.glRenderbuffer = gl.createRenderbuffer();\r\n            if (gpuTexture.size > 0) {\r\n                if (stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {\r\n                    gl.bindRenderbuffer(WebGLConstants.RENDERBUFFER, gpuTexture.glRenderbuffer);\r\n                    stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;\r\n                }\r\n                gl.renderbufferStorage(WebGLConstants.RENDERBUFFER, gpuTexture.glInternalFmt, w, h);\r\n            }\r\n        } else {\r\n            gpuTexture.glTexture = gl.createTexture();\r\n            if (gpuTexture.size > 0) {\r\n                const glTexUnit = stateCache.glTexUnits[stateCache.texUnit];\r\n\r\n                if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                    gl.bindTexture(WebGLConstants.TEXTURE_2D, gpuTexture.glTexture);\r\n                    glTexUnit.glTexture = gpuTexture.glTexture;\r\n                }\r\n\r\n                if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                    for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                        const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                        const view: Uint8Array = new Uint8Array(imgSize);\r\n                        gl.compressedTexImage2D(WebGLConstants.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                        w = max(1, w >> 1);\r\n                        h = max(1, h >> 1);\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                        gl.texImage2D(WebGLConstants.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);\r\n                        w = max(1, w >> 1);\r\n                        h = max(1, h >> 1);\r\n                    }\r\n                }\r\n\r\n                if (gpuTexture.isPowerOf2) {\r\n                    gpuTexture.glWrapS = WebGLConstants.REPEAT;\r\n                    gpuTexture.glWrapT = WebGLConstants.REPEAT;\r\n                } else {\r\n                    gpuTexture.glWrapS = WebGLConstants.CLAMP_TO_EDGE;\r\n                    gpuTexture.glWrapT = WebGLConstants.CLAMP_TO_EDGE;\r\n                }\r\n                gpuTexture.glMinFilter = WebGLConstants.LINEAR;\r\n                gpuTexture.glMagFilter = WebGLConstants.LINEAR;\r\n\r\n                gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_WRAP_S, gpuTexture.glWrapS);\r\n                gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_WRAP_T, gpuTexture.glWrapT);\r\n                gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);\r\n                gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);\r\n            }\r\n        }\r\n\r\n        break;\r\n    }\r\n    case TextureType.CUBE: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_CUBE_MAP;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > device.capabilities.maxCubeMapTextureSize) {\r\n            errorID(9100, maxSize, device.capabilities.maxTextureSize);\r\n        }\r\n\r\n        gpuTexture.glTexture = gl.createTexture();\r\n        if (gpuTexture.size > 0) {\r\n            const glTexUnit = stateCache.glTexUnits[stateCache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_CUBE_MAP, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let f = 0; f < 6; ++f) {\r\n                    w = gpuTexture.width;\r\n                    h = gpuTexture.height;\r\n                    for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                        const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                        const view: Uint8Array = new Uint8Array(imgSize);\r\n                        gl.compressedTexImage2D(WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                        w = max(1, w >> 1);\r\n                        h = max(1, h >> 1);\r\n                    }\r\n                }\r\n            } else {\r\n                for (let f = 0; f < 6; ++f) {\r\n                    w = gpuTexture.width;\r\n                    h = gpuTexture.height;\r\n                    for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                        gl.texImage2D(\r\n                            WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                            i,\r\n                            gpuTexture.glInternalFmt,\r\n                            w,\r\n                            h,\r\n                            0,\r\n                            gpuTexture.glFormat,\r\n                            gpuTexture.glType,\r\n                            null,\r\n                        );\r\n                        w = max(1, w >> 1);\r\n                        h = max(1, h >> 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (gpuTexture.isPowerOf2) {\r\n                gpuTexture.glWrapS = WebGLConstants.REPEAT;\r\n                gpuTexture.glWrapT = WebGLConstants.REPEAT;\r\n            } else {\r\n                gpuTexture.glWrapS = WebGLConstants.CLAMP_TO_EDGE;\r\n                gpuTexture.glWrapT = WebGLConstants.CLAMP_TO_EDGE;\r\n            }\r\n            gpuTexture.glMinFilter = WebGLConstants.LINEAR;\r\n            gpuTexture.glMagFilter = WebGLConstants.LINEAR;\r\n\r\n            gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_WRAP_S, gpuTexture.glWrapS);\r\n            gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_WRAP_T, gpuTexture.glWrapT);\r\n            gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);\r\n            gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);\r\n        }\r\n\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16317);\r\n        gpuTexture.type = TextureType.TEX2D;\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n    }\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncDestroyTexture (device: WebGLDevice, gpuTexture: IWebGLGPUTexture): void {\r\n    const { gl, stateCache } = device;\r\n    if (gpuTexture.glTexture) {\r\n        const glTexUnits = stateCache.glTexUnits;\r\n        let texUnit = stateCache.texUnit;\r\n        gl.deleteTexture(gpuTexture.glTexture);\r\n        for (let i = 0; i < glTexUnits.length; i++) {\r\n            if (glTexUnits[i].glTexture === gpuTexture.glTexture) {\r\n                gl.activeTexture(WebGLConstants.TEXTURE0 + i);\r\n                texUnit = i;\r\n                gl.bindTexture(gpuTexture.glTarget, null);\r\n                glTexUnits[i].glTexture = null;\r\n            }\r\n        }\r\n        stateCache.texUnit = texUnit;\r\n        gpuTexture.glTexture = null;\r\n    }\r\n\r\n    if (gpuTexture.glRenderbuffer) {\r\n        const glRenderbuffer = stateCache.glRenderbuffer;\r\n        gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);\r\n        if (glRenderbuffer === gpuTexture.glRenderbuffer) {\r\n            gl.bindRenderbuffer(WebGLConstants.RENDERBUFFER, null);\r\n            stateCache.glRenderbuffer = null;\r\n        }\r\n        gpuTexture.glRenderbuffer = null;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncResizeTexture (device: WebGLDevice, gpuTexture: IWebGLGPUTexture): void {\r\n    if (!gpuTexture.size) return;\r\n\r\n    const { gl, stateCache } = device;\r\n\r\n    let w = gpuTexture.width;\r\n    let h = gpuTexture.height;\r\n\r\n    switch (gpuTexture.type) {\r\n    case TextureType.TEX2D: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > device.capabilities.maxTextureSize) {\r\n            errorID(9100, maxSize, device.capabilities.maxTextureSize);\r\n        }\r\n\r\n        if (gpuTexture.glRenderbuffer) {\r\n            if (stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {\r\n                gl.bindRenderbuffer(WebGLConstants.RENDERBUFFER, gpuTexture.glRenderbuffer);\r\n                stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;\r\n            }\r\n            gl.renderbufferStorage(WebGLConstants.RENDERBUFFER, gpuTexture.glInternalFmt, w, h);\r\n        } else if (gpuTexture.glTexture) {\r\n            const glTexUnit = stateCache.glTexUnits[stateCache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_2D, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage2D(WebGLConstants.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    gl.texImage2D(WebGLConstants.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.CUBE: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_CUBE_MAP;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > device.capabilities.maxCubeMapTextureSize) {\r\n            errorID(9100, maxSize, device.capabilities.maxTextureSize);\r\n        }\r\n\r\n        const glTexUnit = stateCache.glTexUnits[stateCache.texUnit];\r\n\r\n        if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n            gl.bindTexture(WebGLConstants.TEXTURE_CUBE_MAP, gpuTexture.glTexture);\r\n            glTexUnit.glTexture = gpuTexture.glTexture;\r\n        }\r\n\r\n        if (FormatInfos[gpuTexture.format].isCompressed) {\r\n            for (let f = 0; f < 6; ++f) {\r\n                w = gpuTexture.width;\r\n                h = gpuTexture.height;\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage2D(WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            }\r\n        } else {\r\n            for (let f = 0; f < 6; ++f) {\r\n                w = gpuTexture.width;\r\n                h = gpuTexture.height;\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    gl.texImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        i,\r\n                        gpuTexture.glInternalFmt,\r\n                        w,\r\n                        h,\r\n                        0,\r\n                        gpuTexture.glFormat,\r\n                        gpuTexture.glType,\r\n                        null,\r\n                    );\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16317);\r\n        gpuTexture.type = TextureType.TEX2D;\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n    }\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncCreateFramebuffer (device: WebGLDevice, gpuFramebuffer: IWebGLGPUFramebuffer): void {\r\n    for (let i = 0; i < gpuFramebuffer.gpuColorTextures.length; ++i) {\r\n        const tex = gpuFramebuffer.gpuColorTextures[i];\r\n        if (tex.isSwapchainTexture) {\r\n            gpuFramebuffer.isOffscreen = false;\r\n            return;\r\n        }\r\n    }\r\n\r\n    const { gl, stateCache } = device;\r\n    const attachments: GLenum[] = [];\r\n\r\n    const glFramebuffer = gl.createFramebuffer();\r\n    if (glFramebuffer) {\r\n        gpuFramebuffer.glFramebuffer = glFramebuffer;\r\n\r\n        if (stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);\r\n        }\r\n\r\n        for (let i = 0; i < gpuFramebuffer.gpuColorTextures.length; ++i) {\r\n            const gpuTexture = gpuFramebuffer.gpuColorTextures[i];\r\n            if (gpuTexture) {\r\n                if (gpuTexture.glTexture) {\r\n                    gl.framebufferTexture2D(\r\n                        WebGLConstants.FRAMEBUFFER,\r\n                        WebGLConstants.COLOR_ATTACHMENT0 + i,\r\n                        gpuTexture.glTarget,\r\n                        gpuTexture.glTexture,\r\n                        0,\r\n                    ); // level must be 0\r\n                } else {\r\n                    gl.framebufferRenderbuffer(\r\n                        WebGLConstants.FRAMEBUFFER,\r\n                        WebGLConstants.COLOR_ATTACHMENT0 + i,\r\n                        WebGLConstants.RENDERBUFFER,\r\n                        gpuTexture.glRenderbuffer,\r\n                    );\r\n                }\r\n\r\n                attachments.push(WebGLConstants.COLOR_ATTACHMENT0 + i);\r\n                gpuFramebuffer.width = min(gpuFramebuffer.width, gpuTexture.width);\r\n                gpuFramebuffer.height = min(gpuFramebuffer.height, gpuTexture.height);\r\n            }\r\n        }\r\n\r\n        const dst = gpuFramebuffer.gpuDepthStencilTexture;\r\n        if (dst) {\r\n            const glAttachment = FormatInfos[dst.format].hasStencil ? WebGLConstants.DEPTH_STENCIL_ATTACHMENT : WebGLConstants.DEPTH_ATTACHMENT;\r\n            if (dst.glTexture) {\r\n                gl.framebufferTexture2D(\r\n                    WebGLConstants.FRAMEBUFFER,\r\n                    glAttachment,\r\n                    dst.glTarget,\r\n                    dst.glTexture,\r\n                    0,\r\n                ); // level must be 0\r\n            } else {\r\n                gl.framebufferRenderbuffer(\r\n                    WebGLConstants.FRAMEBUFFER,\r\n                    glAttachment,\r\n                    WebGLConstants.RENDERBUFFER,\r\n                    dst.glRenderbuffer,\r\n                );\r\n            }\r\n            gpuFramebuffer.width = min(gpuFramebuffer.width, dst.width);\r\n            gpuFramebuffer.height = min(gpuFramebuffer.height, dst.height);\r\n        }\r\n\r\n        if (device.extensions.WEBGL_draw_buffers) {\r\n            device.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(attachments);\r\n        }\r\n\r\n        const status = gl.checkFramebufferStatus(WebGLConstants.FRAMEBUFFER);\r\n        if (status !== WebGLConstants.FRAMEBUFFER_COMPLETE) {\r\n            switch (status) {\r\n            case WebGLConstants.FRAMEBUFFER_INCOMPLETE_ATTACHMENT: {\r\n                errorID(16318);\r\n                break;\r\n            }\r\n            case WebGLConstants.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: {\r\n                errorID(16319);\r\n                break;\r\n            }\r\n            case WebGLConstants.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: {\r\n                errorID(16320);\r\n                break;\r\n            }\r\n            case WebGLConstants.FRAMEBUFFER_UNSUPPORTED: {\r\n                errorID(16321);\r\n                break;\r\n            }\r\n            default:\r\n            }\r\n        }\r\n\r\n        if (stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, stateCache.glFramebuffer);\r\n        }\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncDestroyFramebuffer (device: WebGLDevice, gpuFramebuffer: IWebGLGPUFramebuffer): void {\r\n    const { gl, stateCache } = device;\r\n    if (gpuFramebuffer.glFramebuffer) {\r\n        gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);\r\n        if (stateCache.glFramebuffer === gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, null);\r\n            stateCache.glFramebuffer = null;\r\n        }\r\n        gpuFramebuffer.glFramebuffer = null;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncCreateShader (device: WebGLDevice, gpuShader: IWebGLGPUShader): void {\r\n    const { gl, stateCache } = device;\r\n\r\n    for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n        const gpuStage = gpuShader.gpuStages[k];\r\n\r\n        let glShaderType: GLenum = 0;\r\n        let shaderTypeStr = '';\r\n        let lineNumber = 1;\r\n\r\n        switch (gpuStage.type) {\r\n        case ShaderStageFlagBit.VERTEX: {\r\n            shaderTypeStr = 'VertexShader';\r\n            glShaderType = WebGLConstants.VERTEX_SHADER;\r\n            break;\r\n        }\r\n        case ShaderStageFlagBit.FRAGMENT: {\r\n            shaderTypeStr = 'FragmentShader';\r\n            glShaderType = WebGLConstants.FRAGMENT_SHADER;\r\n            break;\r\n        }\r\n        default: {\r\n            errorID(16322);\r\n            return;\r\n        }\r\n        }\r\n\r\n        const glShader = gl.createShader(glShaderType);\r\n        if (glShader) {\r\n            gpuStage.glShader = glShader;\r\n            gl.shaderSource(gpuStage.glShader, gpuStage.source);\r\n            gl.compileShader(gpuStage.glShader);\r\n\r\n            if (!gl.getShaderParameter(gpuStage.glShader, WebGLConstants.COMPILE_STATUS)) {\r\n                errorID(16323, shaderTypeStr, gpuShader.name);\r\n                errorID(16324, gpuStage.source.replace(/^|\\n/g, (): string => `\\n${lineNumber++} `));\r\n                error(gl.getShaderInfoLog(gpuStage.glShader));\r\n\r\n                for (let l = 0; l < gpuShader.gpuStages.length; l++) {\r\n                    const stage = gpuShader.gpuStages[k];\r\n                    if (stage.glShader) {\r\n                        gl.deleteShader(stage.glShader);\r\n                        stage.glShader = null;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    const glProgram = gl.createProgram();\r\n    if (!glProgram) {\r\n        return;\r\n    }\r\n\r\n    gpuShader.glProgram = glProgram;\r\n\r\n    // link program\r\n    for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n        const gpuStage = gpuShader.gpuStages[k];\r\n        gl.attachShader(gpuShader.glProgram, gpuStage.glShader!);\r\n    }\r\n\r\n    gl.linkProgram(gpuShader.glProgram);\r\n\r\n    // detach & delete immediately\r\n    if (device.extensions.destroyShadersImmediately) {\r\n        for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n            const gpuStage = gpuShader.gpuStages[k];\r\n            if (gpuStage.glShader) {\r\n                gl.detachShader(gpuShader.glProgram, gpuStage.glShader);\r\n                gl.deleteShader(gpuStage.glShader);\r\n                gpuStage.glShader = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (gl.getProgramParameter(gpuShader.glProgram, WebGLConstants.LINK_STATUS)) {\r\n        debugID(16325, gpuShader.name);\r\n    } else {\r\n        errorID(16326, gpuShader.name);\r\n        error(gl.getProgramInfoLog(gpuShader.glProgram));\r\n        return;\r\n    }\r\n\r\n    // parse inputs\r\n    const activeAttribCount: number = gl.getProgramParameter(gpuShader.glProgram, WebGLConstants.ACTIVE_ATTRIBUTES);\r\n    gpuShader.glInputs = new Array<IWebGLGPUInput>(activeAttribCount);\r\n\r\n    for (let i = 0; i < activeAttribCount; ++i) {\r\n        const attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);\r\n        if (attribInfo) {\r\n            const { type: attribType, name: attribName, size: attribSize } = attribInfo;\r\n            let varName: string;\r\n            const nameOffset = attribName.indexOf('[');\r\n            if (nameOffset !== -1) {\r\n                varName = attribName.substring(0, nameOffset);\r\n            } else {\r\n                varName = attribName;\r\n            }\r\n\r\n            const glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);\r\n            const gfxType = WebGLTypeToGFXType(attribType, gl);\r\n            const stride = WebGLGetTypeSize(attribType, gl);\r\n\r\n            gpuShader.glInputs[i] = {\r\n                binding: glLoc,\r\n                name: varName,\r\n                type: gfxType,\r\n                stride,\r\n                count: attribSize,\r\n                size: stride * attribSize,\r\n\r\n                glType: attribType,\r\n                glLoc,\r\n            };\r\n        }\r\n    }\r\n\r\n    // create uniform blocks\r\n    if (gpuShader.blocks.length > 0) {\r\n        gpuShader.glBlocks = new Array<IWebGLGPUUniformBlock>(gpuShader.blocks.length);\r\n        for (let i = 0; i < gpuShader.blocks.length; ++i) {\r\n            const block = gpuShader.blocks[i];\r\n\r\n            const glBlock: IWebGLGPUUniformBlock = {\r\n                set: block.set,\r\n                binding: block.binding,\r\n                name: block.name,\r\n                size: 0,\r\n                glUniforms: new Array<IWebGLGPUUniform>(block.members.length),\r\n                glActiveUniforms: [],\r\n            };\r\n\r\n            gpuShader.glBlocks[i] = glBlock;\r\n\r\n            for (let u = 0; u < block.members.length; ++u) {\r\n                const uniform = block.members[u];\r\n                const glType = GFXTypeToWebGLType(uniform.type, gl);\r\n                const stride = WebGLGetTypeSize(glType, gl);\r\n                const size = stride * uniform.count;\r\n\r\n                glBlock.glUniforms[u] = {\r\n                    binding: -1,\r\n                    name: uniform.name,\r\n                    type: uniform.type,\r\n                    stride,\r\n                    count: uniform.count,\r\n                    size,\r\n                    offset: 0,\r\n\r\n                    glType,\r\n                    glLoc: null!,\r\n                    array: null!,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // WebGL doesn't support Framebuffer Fetch\r\n    for (let i = 0; i < gpuShader.subpassInputs.length; ++i) {\r\n        const subpassInput = gpuShader.subpassInputs[i];\r\n        gpuShader.samplerTextures.push(\r\n            new UniformSamplerTexture(subpassInput.set, subpassInput.binding, subpassInput.name, Type.SAMPLER2D, subpassInput.count),\r\n        );\r\n    }\r\n\r\n    // create uniform sampler textures\r\n    if (gpuShader.samplerTextures.length > 0) {\r\n        gpuShader.glSamplerTextures = new Array<IWebGLGPUUniformSamplerTexture>(gpuShader.samplerTextures.length);\r\n\r\n        for (let i = 0; i < gpuShader.samplerTextures.length; ++i) {\r\n            const sampler = gpuShader.samplerTextures[i];\r\n            gpuShader.glSamplerTextures[i] = {\r\n                set: sampler.set,\r\n                binding: sampler.binding,\r\n                name: sampler.name,\r\n                type: sampler.type,\r\n                count: sampler.count,\r\n                units: [],\r\n                glUnits: null!,\r\n                glType: GFXTypeToWebGLType(sampler.type, gl),\r\n                glLoc: null!,\r\n            };\r\n        }\r\n    }\r\n\r\n    // parse uniforms\r\n    const activeUniformCount = gl.getProgramParameter(gpuShader.glProgram, WebGLConstants.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < activeUniformCount; ++i) {\r\n        const uniformInfo = gl.getActiveUniform(gpuShader.glProgram, i);\r\n        if (uniformInfo) {\r\n            const isSampler = (uniformInfo.type === WebGLConstants.SAMPLER_2D)\r\n                || (uniformInfo.type === WebGLConstants.SAMPLER_CUBE);\r\n\r\n            if (!isSampler) {\r\n                const glLoc = gl.getUniformLocation(gpuShader.glProgram, uniformInfo.name);\r\n                if (device.extensions.isLocationActive(glLoc)) {\r\n                    let varName: string;\r\n                    const nameOffset = uniformInfo.name.indexOf('[');\r\n                    if (nameOffset !== -1) {\r\n                        varName = uniformInfo.name.substring(0, nameOffset);\r\n                    } else {\r\n                        varName = uniformInfo.name;\r\n                    }\r\n\r\n                    // build uniform block mapping\r\n                    for (let j = 0; j < gpuShader.glBlocks.length; j++) {\r\n                        const glBlock = gpuShader.glBlocks[j];\r\n\r\n                        for (let k = 0; k < glBlock.glUniforms.length; k++) {\r\n                            const glUniform = glBlock.glUniforms[k];\r\n                            if (glUniform.name === varName) {\r\n                                glUniform.glLoc = glLoc;\r\n                                glUniform.count = uniformInfo.size;\r\n                                glUniform.size = glUniform.stride * glUniform.count;\r\n                                glUniform.array = new (GFXTypeToTypedArrayCtor(glUniform.type))(glUniform.size / 4);\r\n\r\n                                glBlock.glActiveUniforms.push(glUniform);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // calculate offset & size\r\n    // WARNING: we can't handle inactive uniform arrays with wrong input sizes\r\n    // and there is no way to detect that for now\r\n    for (let j = 0; j < gpuShader.glBlocks.length; j++) {\r\n        const glBlock = gpuShader.glBlocks[j];\r\n        for (let k = 0; k < glBlock.glUniforms.length; k++) {\r\n            const glUniform = glBlock.glUniforms[k];\r\n            glUniform.offset = glBlock.size / 4;\r\n            glBlock.size += glUniform.size;\r\n        }\r\n    }\r\n\r\n    // texture unit index mapping optimization\r\n    const glActiveSamplers: IWebGLGPUUniformSamplerTexture[] = [];\r\n    const glActiveSamplerLocations: WebGLUniformLocation[] = [];\r\n    const { bindingMappings, capabilities } = device;\r\n    const { texUnitCacheMap } = device.stateCache;\r\n    const { maxTextureUnits } = capabilities;\r\n\r\n    if (!(cclegacy.rendering && cclegacy.rendering.enableEffectImport)) {\r\n        let flexibleSetBaseOffset = 0;\r\n        for (let i = 0; i < gpuShader.blocks.length; ++i) {\r\n            if (gpuShader.blocks[i].set === bindingMappings.flexibleSet) {\r\n                flexibleSetBaseOffset++;\r\n            }\r\n        }\r\n\r\n        let arrayOffset = 0;\r\n        for (let i = 0; i < gpuShader.samplerTextures.length; ++i) {\r\n            const sampler = gpuShader.samplerTextures[i];\r\n            const glLoc = gl.getUniformLocation(gpuShader.glProgram, sampler.name);\r\n            if (device.extensions.isLocationActive(glLoc)) {\r\n                glActiveSamplers.push(gpuShader.glSamplerTextures[i]);\r\n                glActiveSamplerLocations.push(glLoc);\r\n            }\r\n            if (texUnitCacheMap[sampler.name] === undefined) {\r\n                let binding = sampler.binding + bindingMappings.samplerTextureOffsets[sampler.set] + arrayOffset;\r\n                if (sampler.set === bindingMappings.flexibleSet) { binding -= flexibleSetBaseOffset; }\r\n                texUnitCacheMap[sampler.name] = binding % maxTextureUnits;\r\n                arrayOffset += sampler.count - 1;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < gpuShader.samplerTextures.length; ++i) {\r\n            const sampler = gpuShader.samplerTextures[i];\r\n            const glLoc = gl.getUniformLocation(gpuShader.glProgram, sampler.name);\r\n            if (device.extensions.isLocationActive(glLoc)) {\r\n                glActiveSamplers.push(gpuShader.glSamplerTextures[i]);\r\n                glActiveSamplerLocations.push(glLoc);\r\n            }\r\n            if (texUnitCacheMap[sampler.name] === undefined) {\r\n                texUnitCacheMap[sampler.name] = sampler.flattened % maxTextureUnits;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (glActiveSamplers.length) {\r\n        const usedTexUnits: boolean[] = [];\r\n        // try to reuse existing mappings first\r\n        for (let i = 0; i < glActiveSamplers.length; ++i) {\r\n            const glSampler = glActiveSamplers[i];\r\n\r\n            let cachedUnit = texUnitCacheMap[glSampler.name];\r\n            if (cachedUnit !== undefined) {\r\n                glSampler.glLoc = glActiveSamplerLocations[i];\r\n                for (let t = 0; t < glSampler.count; ++t) {\r\n                    while (usedTexUnits[cachedUnit]) {\r\n                        cachedUnit = (cachedUnit + 1) % maxTextureUnits;\r\n                    }\r\n                    glSampler.units.push(cachedUnit);\r\n                    usedTexUnits[cachedUnit] = true;\r\n                }\r\n            }\r\n        }\r\n        // fill in the rest sequencially\r\n        let unitIdx = 0;\r\n        for (let i = 0; i < glActiveSamplers.length; ++i) {\r\n            const glSampler = glActiveSamplers[i];\r\n\r\n            if (!device.extensions.isLocationActive(glSampler.glLoc)) {\r\n                glSampler.glLoc = glActiveSamplerLocations[i];\r\n                for (let t = 0; t < glSampler.count; ++t) {\r\n                    while (usedTexUnits[unitIdx]) {\r\n                        unitIdx = (unitIdx + 1) % maxTextureUnits;\r\n                    }\r\n                    if (texUnitCacheMap[glSampler.name] === undefined) {\r\n                        texUnitCacheMap[glSampler.name] = unitIdx;\r\n                    }\r\n                    glSampler.units.push(unitIdx);\r\n                    usedTexUnits[unitIdx] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (stateCache.glProgram !== gpuShader.glProgram) {\r\n            gl.useProgram(gpuShader.glProgram);\r\n        }\r\n\r\n        for (let i = 0; i < glActiveSamplers.length; i++) {\r\n            const glSampler = glActiveSamplers[i];\r\n            glSampler.glUnits = new Int32Array(glSampler.units);\r\n            gl.uniform1iv(glSampler.glLoc, glSampler.glUnits);\r\n        }\r\n\r\n        if (stateCache.glProgram !== gpuShader.glProgram) {\r\n            gl.useProgram(stateCache.glProgram);\r\n        }\r\n    }\r\n\r\n    // strip out the inactive ones\r\n    for (let i = 0; i < gpuShader.glBlocks.length;) {\r\n        if (gpuShader.glBlocks[i].glActiveUniforms.length) {\r\n            i++;\r\n        } else {\r\n            gpuShader.glBlocks[i] = gpuShader.glBlocks[gpuShader.glBlocks.length - 1];\r\n            gpuShader.glBlocks.length--;\r\n        }\r\n    }\r\n\r\n    gpuShader.glSamplerTextures = glActiveSamplers;\r\n}\r\n\r\nexport function WebGLCmdFuncDestroyShader (device: WebGLDevice, gpuShader: IWebGLGPUShader): void {\r\n    if (gpuShader.glProgram) {\r\n        const { gl, stateCache } = device;\r\n        if (!device.extensions.destroyShadersImmediately) {\r\n            for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n                const gpuStage = gpuShader.gpuStages[k];\r\n                if (gpuStage.glShader) {\r\n                    gl.detachShader(gpuShader.glProgram, gpuStage.glShader);\r\n                    gl.deleteShader(gpuStage.glShader);\r\n                    gpuStage.glShader = null;\r\n                }\r\n            }\r\n        }\r\n        gl.deleteProgram(gpuShader.glProgram);\r\n        if (stateCache.glProgram === gpuShader.glProgram) {\r\n            gl.useProgram(null);\r\n            stateCache.glProgram = null;\r\n        }\r\n        gpuShader.glProgram = null;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncCreateInputAssember (device: WebGLDevice, gpuInputAssembler: IWebGLGPUInputAssembler): void {\r\n    const { gl } = device;\r\n\r\n    gpuInputAssembler.glAttribs = new Array<IWebGLAttrib>(gpuInputAssembler.attributes.length);\r\n\r\n    const offsets = [0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    for (let i = 0; i < gpuInputAssembler.attributes.length; ++i) {\r\n        const attrib = gpuInputAssembler.attributes[i];\r\n        const { format: attribFormat, isNormalized: attribIsNormalized, isInstanced: attribIsInstanced } = attrib;\r\n\r\n        const stream = attrib.stream !== undefined ? attrib.stream : 0;\r\n\r\n        const gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];\r\n\r\n        const glType = GFXFormatToWebGLType(attribFormat, gl);\r\n        const { size } = FormatInfos[attribFormat];\r\n\r\n        gpuInputAssembler.glAttribs[i] = {\r\n            name: attrib.name,\r\n            glBuffer: gpuBuffer.glBuffer,\r\n            glType,\r\n            size,\r\n            count: FormatInfos[attribFormat].count,\r\n            stride: gpuBuffer.stride,\r\n            componentCount: WebGLGetComponentCount(glType, gl),\r\n            isNormalized: (attribIsNormalized !== undefined ? attribIsNormalized : false),\r\n            isInstanced: (attribIsInstanced !== undefined ? attribIsInstanced : false),\r\n            offset: offsets[stream],\r\n        };\r\n\r\n        offsets[stream] += size;\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncDestroyInputAssembler (device: WebGLDevice, gpuInputAssembler: IWebGLGPUInputAssembler): void {\r\n    const { stateCache } = device;\r\n    const it = gpuInputAssembler.glVAOs.values();\r\n    let res = it.next();\r\n    const OES_vertex_array_object = device.extensions.OES_vertex_array_object!;\r\n    let glVAO = stateCache.glVAO;\r\n    while (!res.done) {\r\n        OES_vertex_array_object.deleteVertexArrayOES(res.value);\r\n        if (glVAO === res.value) {\r\n            OES_vertex_array_object.bindVertexArrayOES(null);\r\n            glVAO = null;\r\n        }\r\n        res = it.next();\r\n    }\r\n    stateCache.glVAO = glVAO;\r\n    gpuInputAssembler.glVAOs.clear();\r\n}\r\n\r\ninterface IWebGLStateCache {\r\n    gpuPipelineState: IWebGLGPUPipelineState | null;\r\n    gpuInputAssembler: IWebGLGPUInputAssembler | null;\r\n    glPrimitive: number;\r\n}\r\nconst gfxStateCache: IWebGLStateCache = {\r\n    gpuPipelineState: null,\r\n    gpuInputAssembler: null,\r\n    glPrimitive: 0,\r\n};\r\n\r\nconst realRenderArea = new Rect();\r\nexport function WebGLCmdFuncBeginRenderPass (\r\n    device: WebGLDevice,\r\n    gpuRenderPass: IWebGLGPURenderPass | null,\r\n    gpuFramebuffer: IWebGLGPUFramebuffer | null,\r\n    renderArea: Readonly<Rect>,\r\n    clearColors: Readonly<Color[]>,\r\n    clearDepth: number,\r\n    clearStencil: number,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.stateCache;\r\n    let clears: GLbitfield = 0;\r\n\r\n    if (gpuFramebuffer) {\r\n        const lodLevel = gpuFramebuffer.lodLevel;\r\n        realRenderArea.x = renderArea.x << lodLevel;\r\n        realRenderArea.y = renderArea.y << lodLevel;\r\n        realRenderArea.width = renderArea.width << lodLevel;\r\n        realRenderArea.height = renderArea.height << lodLevel;\r\n    }\r\n\r\n    if (gpuFramebuffer && gpuRenderPass) {\r\n        const curGPUFrameBuffer = gpuFramebuffer.glFramebuffer;\r\n        const { x: realRenderAreaX, y: realRenderAreaY, width: realRenderAreaWidth, height: realRenderAreaHeight } = realRenderArea;\r\n        if (cache.glFramebuffer !== curGPUFrameBuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, curGPUFrameBuffer);\r\n            cache.glFramebuffer = curGPUFrameBuffer;\r\n        }\r\n\r\n        const cacheViewport = cache.viewport;\r\n        if (cacheViewport.left !== realRenderAreaX\r\n            || cacheViewport.top !== realRenderAreaY\r\n            || cacheViewport.width !== realRenderAreaWidth\r\n            || cacheViewport.height !== realRenderAreaHeight) {\r\n            gl.viewport(realRenderAreaX, realRenderAreaY, realRenderAreaWidth, realRenderAreaHeight);\r\n\r\n            cacheViewport.left = realRenderAreaX;\r\n            cacheViewport.top = realRenderAreaY;\r\n            cacheViewport.width = realRenderAreaWidth;\r\n            cacheViewport.height = realRenderAreaHeight;\r\n        }\r\n\r\n        const cacheScissorRect = cache.scissorRect;\r\n        if (cacheScissorRect.x !== realRenderAreaX\r\n            || cacheScissorRect.y !== realRenderAreaY\r\n            || cacheScissorRect.width !== realRenderAreaWidth\r\n            || cacheScissorRect.height !== realRenderAreaHeight) {\r\n            gl.scissor(realRenderAreaX, realRenderAreaY, realRenderAreaWidth, realRenderAreaHeight);\r\n\r\n            cacheScissorRect.x = realRenderAreaX;\r\n            cacheScissorRect.y = realRenderAreaY;\r\n            cacheScissorRect.width = realRenderAreaWidth;\r\n            cacheScissorRect.height = realRenderAreaHeight;\r\n        }\r\n\r\n        // const invalidateAttachments: GLenum[] = [];\r\n        let clearCount = clearColors.length;\r\n\r\n        if (!device.extensions.WEBGL_draw_buffers) {\r\n            clearCount = 1;\r\n        }\r\n\r\n        const cacheDSS = cache.dss;\r\n\r\n        for (let j = 0; j < clearCount; ++j) {\r\n            const colorAttachment = gpuRenderPass.colorAttachments[j];\r\n\r\n            if (colorAttachment.format !== Format.UNKNOWN) {\r\n                switch (colorAttachment.loadOp) {\r\n                case LoadOp.LOAD: break; // GL default behavior\r\n                case LoadOp.CLEAR: {\r\n                    if (cache.bs.targets[0].blendColorMask !== ColorMask.ALL) {\r\n                        gl.colorMask(true, true, true, true);\r\n                    }\r\n\r\n                    const clearColor = clearColors[0];\r\n                    gl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);\r\n                    clears |= WebGLConstants.COLOR_BUFFER_BIT;\r\n                    break;\r\n                }\r\n                case LoadOp.DISCARD: {\r\n                    // invalidate the framebuffer\r\n                    // invalidateAttachments.push(WebGLConstants.COLOR_ATTACHMENT0 + j);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n            }\r\n        } // if (curGPURenderPass)\r\n\r\n        if (gpuRenderPass.depthStencilAttachment) {\r\n            if (gpuRenderPass.depthStencilAttachment.format !== Format.UNKNOWN) {\r\n                switch (gpuRenderPass.depthStencilAttachment.depthLoadOp) {\r\n                case LoadOp.LOAD: break; // GL default behavior\r\n                case LoadOp.CLEAR: {\r\n                    if (!cacheDSS.depthWrite) {\r\n                        gl.depthMask(true);\r\n                    }\r\n\r\n                    gl.clearDepth(clearDepth);\r\n\r\n                    clears |= WebGLConstants.DEPTH_BUFFER_BIT;\r\n                    break;\r\n                }\r\n                case LoadOp.DISCARD: {\r\n                    // invalidate the framebuffer\r\n                    // invalidateAttachments.push(WebGLConstants.DEPTH_ATTACHMENT);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n\r\n                if (FormatInfos[gpuRenderPass.depthStencilAttachment.format].hasStencil) {\r\n                    switch (gpuRenderPass.depthStencilAttachment.stencilLoadOp) {\r\n                    case LoadOp.LOAD: break; // GL default behavior\r\n                    case LoadOp.CLEAR: {\r\n                        if (!cacheDSS.stencilWriteMaskFront) {\r\n                            gl.stencilMaskSeparate(WebGLConstants.FRONT, 0xffff);\r\n                        }\r\n\r\n                        if (!cacheDSS.stencilWriteMaskBack) {\r\n                            gl.stencilMaskSeparate(WebGLConstants.BACK, 0xffff);\r\n                        }\r\n\r\n                        gl.clearStencil(clearStencil);\r\n                        clears |= WebGLConstants.STENCIL_BUFFER_BIT;\r\n                        break;\r\n                    }\r\n                    case LoadOp.DISCARD: {\r\n                        // invalidate the framebuffer\r\n                        // invalidateAttachments.push(WebGLConstants.STENCIL_ATTACHMENT);\r\n                        break;\r\n                    }\r\n                    default:\r\n                    }\r\n                }\r\n            }\r\n        } // if (gpuRenderPass.depthStencilAttachment)\r\n\r\n        /*\r\n        if (invalidateAttachments.length) {\r\n            gl.invalidateFramebuffer(WebGLConstants.FRAMEBUFFER, invalidateAttachments);\r\n        }\r\n        */\r\n\r\n        if (clears) {\r\n            gl.clear(clears);\r\n        }\r\n\r\n        // restore states\r\n        if (clears & WebGLConstants.COLOR_BUFFER_BIT) {\r\n            const colorMask = cache.bs.targets[0].blendColorMask;\r\n            if (colorMask !== ColorMask.ALL) {\r\n                const r = (colorMask & ColorMask.R) !== ColorMask.NONE;\r\n                const g = (colorMask & ColorMask.G) !== ColorMask.NONE;\r\n                const b = (colorMask & ColorMask.B) !== ColorMask.NONE;\r\n                const a = (colorMask & ColorMask.A) !== ColorMask.NONE;\r\n                gl.colorMask(r, g, b, a);\r\n            }\r\n        }\r\n\r\n        if ((clears & WebGLConstants.DEPTH_BUFFER_BIT)\r\n            && !cacheDSS.depthWrite) {\r\n            gl.depthMask(false);\r\n        }\r\n\r\n        if (clears & WebGLConstants.STENCIL_BUFFER_BIT) {\r\n            if (!cacheDSS.stencilWriteMaskFront) {\r\n                gl.stencilMaskSeparate(WebGLConstants.FRONT, 0);\r\n            }\r\n\r\n            if (!cacheDSS.stencilWriteMaskBack) {\r\n                gl.stencilMaskSeparate(WebGLConstants.BACK, 0);\r\n            }\r\n        }\r\n    } // if (gpuFramebuffer)\r\n}\r\n\r\nexport function WebGLCmdFuncBindStates (\r\n    device: WebGLDevice,\r\n    gpuPipelineState: IWebGLGPUPipelineState | null,\r\n    gpuInputAssembler: IWebGLGPUInputAssembler | null,\r\n    gpuDescriptorSets: Readonly<IWebGLGPUDescriptorSet[]>,\r\n    dynamicOffsets: Readonly<number[]>,\r\n    dynamicStates: Readonly<DynamicStates>,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.stateCache;\r\n    const cacheDSS = cache.dss;\r\n    const cacheBS = cache.bs;\r\n    const gpuShader = gpuPipelineState && gpuPipelineState.gpuShader;\r\n\r\n    let isShaderChanged = false;\r\n    let glWrapS: number;\r\n    let glWrapT: number;\r\n    let glMinFilter: number;\r\n\r\n    // bind pipeline\r\n    if (gpuPipelineState && gfxStateCache.gpuPipelineState !== gpuPipelineState) {\r\n        gfxStateCache.gpuPipelineState = gpuPipelineState;\r\n        gfxStateCache.glPrimitive = gpuPipelineState.glPrimitive;\r\n\r\n        if (gpuPipelineState.gpuShader) {\r\n            const { glProgram } = gpuPipelineState.gpuShader;\r\n            if (cache.glProgram !== glProgram) {\r\n                gl.useProgram(glProgram);\r\n                cache.glProgram = glProgram;\r\n                isShaderChanged = true;\r\n            }\r\n        }\r\n\r\n        // rasterizer state\r\n        const { rs } = gpuPipelineState;\r\n        const cacheRS = cache.rs;\r\n        if (rs) {\r\n            if (cacheRS.cullMode !== rs.cullMode) {\r\n                switch (rs.cullMode) {\r\n                case CullMode.NONE: {\r\n                    gl.disable(WebGLConstants.CULL_FACE);\r\n                    break;\r\n                }\r\n                case CullMode.FRONT: {\r\n                    gl.enable(WebGLConstants.CULL_FACE);\r\n                    gl.cullFace(WebGLConstants.FRONT);\r\n                    break;\r\n                }\r\n                case CullMode.BACK: {\r\n                    gl.enable(WebGLConstants.CULL_FACE);\r\n                    gl.cullFace(WebGLConstants.BACK);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n\r\n                cacheRS.cullMode = rs.cullMode;\r\n            }\r\n\r\n            const isFrontFaceCCW = rs.isFrontFaceCCW;\r\n            if (cacheRS.isFrontFaceCCW !== isFrontFaceCCW) {\r\n                gl.frontFace(isFrontFaceCCW ? WebGLConstants.CCW : WebGLConstants.CW);\r\n                cacheRS.isFrontFaceCCW = isFrontFaceCCW;\r\n            }\r\n\r\n            if ((cacheRS.depthBias !== rs.depthBias)\r\n                || (cacheRS.depthBiasSlop !== rs.depthBiasSlop)) {\r\n                gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);\r\n                cacheRS.depthBias = rs.depthBias;\r\n                cacheRS.depthBiasSlop = rs.depthBiasSlop;\r\n            }\r\n\r\n            if (cacheRS.lineWidth !== rs.lineWidth) {\r\n                gl.lineWidth(rs.lineWidth);\r\n                cacheRS.lineWidth = rs.lineWidth;\r\n            }\r\n        } // rasterizater state\r\n\r\n        // depth-stencil state\r\n        const { dss } = gpuPipelineState;\r\n\r\n        if (dss) {\r\n            if (cacheDSS.depthTest !== dss.depthTest) {\r\n                if (dss.depthTest) {\r\n                    gl.enable(WebGLConstants.DEPTH_TEST);\r\n                } else {\r\n                    gl.disable(WebGLConstants.DEPTH_TEST);\r\n                }\r\n                cacheDSS.depthTest = dss.depthTest;\r\n            }\r\n\r\n            if (cacheDSS.depthWrite !== dss.depthWrite) {\r\n                gl.depthMask(dss.depthWrite);\r\n                cacheDSS.depthWrite = dss.depthWrite;\r\n            }\r\n\r\n            if (cacheDSS.depthFunc !== dss.depthFunc) {\r\n                gl.depthFunc(WebGLCmpFuncs[dss.depthFunc]);\r\n                cacheDSS.depthFunc = dss.depthFunc;\r\n            }\r\n\r\n            // front\r\n            if ((cacheDSS.stencilTestFront !== dss.stencilTestFront)\r\n                || (cacheDSS.stencilTestBack !== dss.stencilTestBack)) {\r\n                if (dss.stencilTestFront || dss.stencilTestBack) {\r\n                    gl.enable(WebGLConstants.STENCIL_TEST);\r\n                } else {\r\n                    gl.disable(WebGLConstants.STENCIL_TEST);\r\n                }\r\n                cacheDSS.stencilTestFront = dss.stencilTestFront;\r\n                cacheDSS.stencilTestBack = dss.stencilTestBack;\r\n            }\r\n\r\n            if ((cacheDSS.stencilFuncFront !== dss.stencilFuncFront)\r\n                || (cacheDSS.stencilRefFront !== dss.stencilRefFront)\r\n                || (cacheDSS.stencilReadMaskFront !== dss.stencilReadMaskFront)) {\r\n                gl.stencilFuncSeparate(\r\n                    WebGLConstants.FRONT,\r\n                    WebGLCmpFuncs[dss.stencilFuncFront],\r\n                    dss.stencilRefFront,\r\n                    dss.stencilReadMaskFront,\r\n                );\r\n\r\n                cacheDSS.stencilFuncFront = dss.stencilFuncFront;\r\n                cacheDSS.stencilRefFront = dss.stencilRefFront;\r\n                cacheDSS.stencilReadMaskFront = dss.stencilReadMaskFront;\r\n            }\r\n\r\n            if ((cacheDSS.stencilFailOpFront !== dss.stencilFailOpFront)\r\n                || (cacheDSS.stencilZFailOpFront !== dss.stencilZFailOpFront)\r\n                || (cacheDSS.stencilPassOpFront !== dss.stencilPassOpFront)) {\r\n                gl.stencilOpSeparate(\r\n                    WebGLConstants.FRONT,\r\n                    WebGLStencilOps[dss.stencilFailOpFront],\r\n                    WebGLStencilOps[dss.stencilZFailOpFront],\r\n                    WebGLStencilOps[dss.stencilPassOpFront],\r\n                );\r\n\r\n                cacheDSS.stencilFailOpFront = dss.stencilFailOpFront;\r\n                cacheDSS.stencilZFailOpFront = dss.stencilZFailOpFront;\r\n                cacheDSS.stencilPassOpFront = dss.stencilPassOpFront;\r\n            }\r\n\r\n            if (cacheDSS.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {\r\n                gl.stencilMaskSeparate(WebGLConstants.FRONT, dss.stencilWriteMaskFront);\r\n                cacheDSS.stencilWriteMaskFront = dss.stencilWriteMaskFront;\r\n            }\r\n\r\n            // back\r\n            if ((cacheDSS.stencilFuncBack !== dss.stencilFuncBack)\r\n                || (cacheDSS.stencilRefBack !== dss.stencilRefBack)\r\n                || (cacheDSS.stencilReadMaskBack !== dss.stencilReadMaskBack)) {\r\n                gl.stencilFuncSeparate(\r\n                    WebGLConstants.BACK,\r\n                    WebGLCmpFuncs[dss.stencilFuncBack],\r\n                    dss.stencilRefBack,\r\n                    dss.stencilReadMaskBack,\r\n                );\r\n\r\n                cacheDSS.stencilFuncBack = dss.stencilFuncBack;\r\n                cacheDSS.stencilRefBack = dss.stencilRefBack;\r\n                cacheDSS.stencilReadMaskBack = dss.stencilReadMaskBack;\r\n            }\r\n\r\n            if ((cacheDSS.stencilFailOpBack !== dss.stencilFailOpBack)\r\n                || (cacheDSS.stencilZFailOpBack !== dss.stencilZFailOpBack)\r\n                || (cacheDSS.stencilPassOpBack !== dss.stencilPassOpBack)) {\r\n                gl.stencilOpSeparate(\r\n                    WebGLConstants.BACK,\r\n                    WebGLStencilOps[dss.stencilFailOpBack],\r\n                    WebGLStencilOps[dss.stencilZFailOpBack],\r\n                    WebGLStencilOps[dss.stencilPassOpBack],\r\n                );\r\n\r\n                cacheDSS.stencilFailOpBack = dss.stencilFailOpBack;\r\n                cacheDSS.stencilZFailOpBack = dss.stencilZFailOpBack;\r\n                cacheDSS.stencilPassOpBack = dss.stencilPassOpBack;\r\n            }\r\n\r\n            if (cacheDSS.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {\r\n                gl.stencilMaskSeparate(WebGLConstants.BACK, dss.stencilWriteMaskBack);\r\n                cacheDSS.stencilWriteMaskBack = dss.stencilWriteMaskBack;\r\n            }\r\n        } // depth-stencil state\r\n\r\n        // blend state\r\n        const { bs } = gpuPipelineState;\r\n\r\n        if (bs) {\r\n            if (cacheBS.isA2C !== bs.isA2C) {\r\n                if (bs.isA2C) {\r\n                    gl.enable(WebGLConstants.SAMPLE_ALPHA_TO_COVERAGE);\r\n                } else {\r\n                    gl.disable(WebGLConstants.SAMPLE_ALPHA_TO_COVERAGE);\r\n                }\r\n                cacheBS.isA2C = bs.isA2C;\r\n            }\r\n\r\n            if ((cacheBS.blendColor.x !== bs.blendColor.x)\r\n                || (cacheBS.blendColor.y !== bs.blendColor.y)\r\n                || (cacheBS.blendColor.z !== bs.blendColor.z)\r\n                || (cacheBS.blendColor.w !== bs.blendColor.w)) {\r\n                gl.blendColor(bs.blendColor.x, bs.blendColor.y, bs.blendColor.z, bs.blendColor.w);\r\n\r\n                cacheBS.blendColor.x = bs.blendColor.x;\r\n                cacheBS.blendColor.y = bs.blendColor.y;\r\n                cacheBS.blendColor.z = bs.blendColor.z;\r\n                cacheBS.blendColor.w = bs.blendColor.w;\r\n            }\r\n\r\n            const target0 = bs.targets[0];\r\n            const target0Cache = cacheBS.targets[0];\r\n\r\n            if (target0Cache.blend !== target0.blend) {\r\n                if (target0.blend) {\r\n                    gl.enable(WebGLConstants.BLEND);\r\n                } else {\r\n                    gl.disable(WebGLConstants.BLEND);\r\n                }\r\n                target0Cache.blend = target0.blend;\r\n            }\r\n\r\n            if ((target0Cache.blendEq !== target0.blendEq)\r\n                || (target0Cache.blendAlphaEq !== target0.blendAlphaEq)) {\r\n                gl.blendEquationSeparate(WebGLBlendOps[target0.blendEq], WebGLBlendOps[target0.blendAlphaEq]);\r\n                target0Cache.blendEq = target0.blendEq;\r\n                target0Cache.blendAlphaEq = target0.blendAlphaEq;\r\n            }\r\n\r\n            if ((target0Cache.blendSrc !== target0.blendSrc)\r\n                || (target0Cache.blendDst !== target0.blendDst)\r\n                || (target0Cache.blendSrcAlpha !== target0.blendSrcAlpha)\r\n                || (target0Cache.blendDstAlpha !== target0.blendDstAlpha)) {\r\n                gl.blendFuncSeparate(\r\n                    WebGLBlendFactors[target0.blendSrc],\r\n                    WebGLBlendFactors[target0.blendDst],\r\n                    WebGLBlendFactors[target0.blendSrcAlpha],\r\n                    WebGLBlendFactors[target0.blendDstAlpha],\r\n                );\r\n\r\n                target0Cache.blendSrc = target0.blendSrc;\r\n                target0Cache.blendDst = target0.blendDst;\r\n                target0Cache.blendSrcAlpha = target0.blendSrcAlpha;\r\n                target0Cache.blendDstAlpha = target0.blendDstAlpha;\r\n            }\r\n\r\n            if (target0Cache.blendColorMask !== target0.blendColorMask) {\r\n                gl.colorMask(\r\n                    (target0.blendColorMask & ColorMask.R) !== ColorMask.NONE,\r\n                    (target0.blendColorMask & ColorMask.G) !== ColorMask.NONE,\r\n                    (target0.blendColorMask & ColorMask.B) !== ColorMask.NONE,\r\n                    (target0.blendColorMask & ColorMask.A) !== ColorMask.NONE,\r\n                );\r\n\r\n                target0Cache.blendColorMask = target0.blendColorMask;\r\n            }\r\n        } // blend state\r\n    } // bind pipeline\r\n\r\n    // bind descriptor sets\r\n    if (gpuPipelineState && gpuPipelineState.gpuPipelineLayout && gpuShader) {\r\n        const blockLen = gpuShader.glBlocks.length;\r\n        const { dynamicOffsetIndices } = gpuPipelineState.gpuPipelineLayout;\r\n\r\n        for (let j = 0; j < blockLen; j++) {\r\n            const glBlock = gpuShader.glBlocks[j];\r\n            const gpuDescriptorSet = gpuDescriptorSets[glBlock.set];\r\n            const descriptorIdx = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glBlock.binding];\r\n            const gpuDescriptor = descriptorIdx >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIdx];\r\n            let vf32: Float32Array | null = null; let offset = 0;\r\n\r\n            if (gpuDescriptor && gpuDescriptor.gpuBuffer) {\r\n                const { gpuBuffer } = gpuDescriptor;\r\n                const dynamicOffsetIndexSet = dynamicOffsetIndices[glBlock.set];\r\n                const dynamicOffsetIndex = dynamicOffsetIndexSet && dynamicOffsetIndexSet[glBlock.binding];\r\n                if (dynamicOffsetIndex >= 0) { offset = dynamicOffsets[dynamicOffsetIndex]; }\r\n\r\n                if ('vf32' in gpuBuffer) {\r\n                    vf32 = gpuBuffer.vf32;\r\n                } else {\r\n                    offset += gpuBuffer.offset;\r\n                    vf32 = gpuBuffer.gpuBuffer.vf32;\r\n                }\r\n                offset >>= 2;\r\n            }\r\n\r\n            if (!vf32) {\r\n                // error(`Buffer binding '${glBlock.name}' at set ${glBlock.set} binding ${glBlock.binding} is not bounded`);\r\n                continue;\r\n            }\r\n\r\n            const uniformLen = glBlock.glActiveUniforms.length;\r\n            for (let l = 0; l < uniformLen; l++) {\r\n                const glUniform = glBlock.glActiveUniforms[l];\r\n                switch (glUniform.glType) {\r\n                case WebGLConstants.BOOL:\r\n                case WebGLConstants.INT: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform1iv(glUniform.glLoc, glUniform.array as Int32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.BOOL_VEC2:\r\n                case WebGLConstants.INT_VEC2: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform2iv(glUniform.glLoc, glUniform.array as Int32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.BOOL_VEC3:\r\n                case WebGLConstants.INT_VEC3: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform3iv(glUniform.glLoc, glUniform.array as Int32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.BOOL_VEC4:\r\n                case WebGLConstants.INT_VEC4: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform4iv(glUniform.glLoc, glUniform.array as Int32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform1fv(glUniform.glLoc, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT_VEC2: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform2fv(glUniform.glLoc, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT_VEC3: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform3fv(glUniform.glLoc, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT_VEC4: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniform4fv(glUniform.glLoc, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT_MAT2: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniformMatrix2fv(glUniform.glLoc, false, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT_MAT3: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniformMatrix3fv(glUniform.glLoc, false, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case WebGLConstants.FLOAT_MAT4: {\r\n                    for (let u = 0; u < glUniform.array.length; ++u) {\r\n                        const idx = glUniform.offset + offset + u;\r\n                        if (vf32[idx] !== glUniform.array[u]) {\r\n                            for (let n = u, m = idx; n < glUniform.array.length; ++n, ++m) {\r\n                                glUniform.array[n] = vf32[m];\r\n                            }\r\n                            gl.uniformMatrix4fv(glUniform.glLoc, false, glUniform.array as Float32Array);\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n            }\r\n            continue;\r\n        }\r\n\r\n        const samplerLen = gpuShader.glSamplerTextures.length;\r\n        for (let i = 0; i < samplerLen; i++) {\r\n            const glSampler = gpuShader.glSamplerTextures[i];\r\n            const gpuDescriptorSet = gpuDescriptorSets[glSampler.set];\r\n            let descriptorIndex = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glSampler.binding];\r\n            let gpuDescriptor = descriptorIndex >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIndex];\r\n\r\n            const texUnitLen = glSampler.units.length;\r\n            for (let l = 0; l < texUnitLen; l++) {\r\n                const texUnit = glSampler.units[l];\r\n\r\n                if (!gpuDescriptor || !gpuDescriptor.gpuSampler) {\r\n                    // error(`Sampler binding '${glSampler.name}' at set ${glSampler.set} binding ${glSampler.binding} index ${l} is not bounded`);\r\n                    continue;\r\n                }\r\n\r\n                if (gpuDescriptor.gpuTexture && gpuDescriptor.gpuTexture.size > 0) {\r\n                    const { gpuTexture } = gpuDescriptor;\r\n                    const glTexUnit = cache.glTexUnits[texUnit];\r\n\r\n                    if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                        if (cache.texUnit !== texUnit) {\r\n                            gl.activeTexture(WebGLConstants.TEXTURE0 + texUnit);\r\n                            cache.texUnit = texUnit;\r\n                        }\r\n                        if (gpuTexture.glTexture) {\r\n                            gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);\r\n                        } else {\r\n                            gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);\r\n                        }\r\n                        glTexUnit.glTexture = gpuTexture.glTexture;\r\n                    }\r\n\r\n                    const { gpuSampler } = gpuDescriptor;\r\n                    if (gpuTexture.isPowerOf2) {\r\n                        glWrapS = gpuSampler.glWrapS;\r\n                        glWrapT = gpuSampler.glWrapT;\r\n                    } else {\r\n                        glWrapS = WebGLConstants.CLAMP_TO_EDGE;\r\n                        glWrapT = WebGLConstants.CLAMP_TO_EDGE;\r\n                    }\r\n\r\n                    if (gpuTexture.isPowerOf2) {\r\n                        if (gpuTexture.mipLevel <= 1\r\n                            && (gpuSampler.glMinFilter === WebGLConstants.LINEAR_MIPMAP_NEAREST\r\n                            || gpuSampler.glMinFilter === WebGLConstants.LINEAR_MIPMAP_LINEAR)) {\r\n                            glMinFilter = WebGLConstants.LINEAR;\r\n                        } else {\r\n                            glMinFilter = gpuSampler.glMinFilter;\r\n                        }\r\n                    } else if (gpuSampler.glMinFilter === WebGLConstants.LINEAR\r\n                            || gpuSampler.glMinFilter === WebGLConstants.LINEAR_MIPMAP_NEAREST\r\n                            || gpuSampler.glMinFilter === WebGLConstants.LINEAR_MIPMAP_LINEAR) {\r\n                        glMinFilter = WebGLConstants.LINEAR;\r\n                    } else {\r\n                        glMinFilter = WebGLConstants.NEAREST;\r\n                    }\r\n\r\n                    if (gpuTexture.glWrapS !== glWrapS) {\r\n                        if (cache.texUnit !== texUnit) {\r\n                            gl.activeTexture(WebGLConstants.TEXTURE0 + texUnit);\r\n                            cache.texUnit = texUnit;\r\n                        }\r\n                        gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_WRAP_S, glWrapS);\r\n                        gpuTexture.glWrapS = glWrapS;\r\n                    }\r\n\r\n                    if (gpuTexture.glWrapT !== glWrapT) {\r\n                        if (cache.texUnit !== texUnit) {\r\n                            gl.activeTexture(WebGLConstants.TEXTURE0 + texUnit);\r\n                            cache.texUnit = texUnit;\r\n                        }\r\n                        gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_WRAP_T, glWrapT);\r\n                        gpuTexture.glWrapT = glWrapT;\r\n                    }\r\n\r\n                    if (gpuTexture.glMinFilter !== glMinFilter) {\r\n                        if (cache.texUnit !== texUnit) {\r\n                            gl.activeTexture(WebGLConstants.TEXTURE0 + texUnit);\r\n                            cache.texUnit = texUnit;\r\n                        }\r\n                        gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_MIN_FILTER, glMinFilter);\r\n                        gpuTexture.glMinFilter = glMinFilter;\r\n                    }\r\n\r\n                    if (gpuTexture.glMagFilter !== gpuSampler.glMagFilter) {\r\n                        if (cache.texUnit !== texUnit) {\r\n                            gl.activeTexture(WebGLConstants.TEXTURE0 + texUnit);\r\n                            cache.texUnit = texUnit;\r\n                        }\r\n                        gl.texParameteri(gpuTexture.glTarget, WebGLConstants.TEXTURE_MAG_FILTER, gpuSampler.glMagFilter);\r\n                        gpuTexture.glMagFilter = gpuSampler.glMagFilter;\r\n                    }\r\n                }\r\n\r\n                gpuDescriptor = gpuDescriptorSet.gpuDescriptors[++descriptorIndex];\r\n            }\r\n        }\r\n    } // bind descriptor sets\r\n\r\n    // bind vertex/index buffer\r\n    if (gpuInputAssembler && gpuShader\r\n        && (isShaderChanged || gfxStateCache.gpuInputAssembler !== gpuInputAssembler)) {\r\n        gfxStateCache.gpuInputAssembler = gpuInputAssembler;\r\n        const ia = device.extensions.ANGLE_instanced_arrays;\r\n\r\n        if (device.extensions.useVAO) {\r\n            const vao = device.extensions.OES_vertex_array_object!;\r\n\r\n            // check vao\r\n            let glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram!);\r\n            if (!glVAO) {\r\n                glVAO = vao.createVertexArrayOES()!;\r\n                gpuInputAssembler.glVAOs.set(gpuShader.glProgram!, glVAO);\r\n\r\n                vao.bindVertexArrayOES(glVAO);\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n                cache.glArrayBuffer = null;\r\n                cache.glElementArrayBuffer = null;\r\n\r\n                let glAttrib: IWebGLAttrib | null;\r\n                const inputLen = gpuShader.glInputs.length;\r\n                for (let j = 0; j < inputLen; j++) {\r\n                    const glInput = gpuShader.glInputs[j];\r\n                    glAttrib = null;\r\n\r\n                    const attribLen = gpuInputAssembler.glAttribs.length;\r\n                    for (let k = 0; k < attribLen; k++) {\r\n                        const attrib = gpuInputAssembler.glAttribs[k];\r\n                        if (attrib.name === glInput.name) {\r\n                            glAttrib = attrib;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (glAttrib) {\r\n                        if (cache.glArrayBuffer !== glAttrib.glBuffer) {\r\n                            gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, glAttrib.glBuffer);\r\n                            cache.glArrayBuffer = glAttrib.glBuffer;\r\n                        }\r\n\r\n                        for (let c = 0; c < glAttrib.componentCount; ++c) {\r\n                            const glLoc = glInput.glLoc + c;\r\n                            const attribOffset = glAttrib.offset + glAttrib.size * c;\r\n\r\n                            gl.enableVertexAttribArray(glLoc);\r\n                            cache.glCurrentAttribLocs[glLoc] = true;\r\n\r\n                            gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);\r\n                            if (ia) { ia.vertexAttribDivisorANGLE(glLoc, glAttrib.isInstanced ? 1 : 0); }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const gpuBuffer = gpuInputAssembler.gpuIndexBuffer;\r\n                if (gpuBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                }\r\n\r\n                vao.bindVertexArrayOES(null);\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n                cache.glArrayBuffer = null;\r\n                cache.glElementArrayBuffer = null;\r\n            }\r\n\r\n            if (cache.glVAO !== glVAO) {\r\n                vao.bindVertexArrayOES(glVAO);\r\n                cache.glVAO = glVAO;\r\n            }\r\n        } else {\r\n            for (let a = 0; a < device.capabilities.maxVertexAttributes; ++a) {\r\n                cache.glCurrentAttribLocs[a] = false;\r\n            }\r\n\r\n            const inputLen = gpuShader.glInputs.length;\r\n            for (let j = 0; j < inputLen; j++) {\r\n                const glInput = gpuShader.glInputs[j];\r\n                let glAttrib: IWebGLAttrib | null = null;\r\n\r\n                const attribLen = gpuInputAssembler.glAttribs.length;\r\n                for (let k = 0; k < attribLen; k++) {\r\n                    const attrib = gpuInputAssembler.glAttribs[k];\r\n                    if (attrib.name === glInput.name) {\r\n                        glAttrib = attrib;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (glAttrib) {\r\n                    if (cache.glArrayBuffer !== glAttrib.glBuffer) {\r\n                        gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, glAttrib.glBuffer);\r\n                        cache.glArrayBuffer = glAttrib.glBuffer;\r\n                    }\r\n\r\n                    for (let c = 0; c < glAttrib.componentCount; ++c) {\r\n                        const glLoc = glInput.glLoc + c;\r\n                        const attribOffset = glAttrib.offset + glAttrib.size * c;\r\n\r\n                        if (!cache.glEnabledAttribLocs[glLoc] && glLoc >= 0) {\r\n                            gl.enableVertexAttribArray(glLoc);\r\n                            cache.glEnabledAttribLocs[glLoc] = true;\r\n                        }\r\n                        cache.glCurrentAttribLocs[glLoc] = true;\r\n\r\n                        gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);\r\n                        if (ia) { ia.vertexAttribDivisorANGLE(glLoc, glAttrib.isInstanced ? 1 : 0); }\r\n                    }\r\n                }\r\n            } // for\r\n\r\n            const gpuBuffer = gpuInputAssembler.gpuIndexBuffer;\r\n            if (gpuBuffer) {\r\n                if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                    cache.glElementArrayBuffer = gpuBuffer.glBuffer;\r\n                }\r\n            }\r\n\r\n            for (let a = 0; a < device.capabilities.maxVertexAttributes; ++a) {\r\n                if (cache.glEnabledAttribLocs[a] !== cache.glCurrentAttribLocs[a]) {\r\n                    gl.disableVertexAttribArray(a);\r\n                    cache.glEnabledAttribLocs[a] = false;\r\n                }\r\n            }\r\n        }\r\n    } // bind vertex/index buffer\r\n\r\n    // update dynamic states\r\n    if (gpuPipelineState && gpuPipelineState.dynamicStates.length) {\r\n        const dsLen = gpuPipelineState.dynamicStates.length;\r\n        for (let j = 0; j < dsLen; j++) {\r\n            const dynamicState = gpuPipelineState.dynamicStates[j];\r\n            switch (dynamicState) {\r\n            case DynamicStateFlagBit.LINE_WIDTH: {\r\n                if (cache.rs.lineWidth !== dynamicStates.lineWidth) {\r\n                    gl.lineWidth(dynamicStates.lineWidth);\r\n                    cache.rs.lineWidth = dynamicStates.lineWidth;\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.DEPTH_BIAS: {\r\n                if (cache.rs.depthBias !== dynamicStates.depthBiasConstant\r\n                    || cache.rs.depthBiasSlop !== dynamicStates.depthBiasSlope) {\r\n                    gl.polygonOffset(dynamicStates.depthBiasConstant, dynamicStates.depthBiasSlope);\r\n                    cache.rs.depthBias = dynamicStates.depthBiasConstant;\r\n                    cache.rs.depthBiasSlop = dynamicStates.depthBiasSlope;\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.BLEND_CONSTANTS: {\r\n                const blendConstant = dynamicStates.blendConstant;\r\n                if ((cacheBS.blendColor.x !== blendConstant.x)\r\n                    || (cacheBS.blendColor.y !== blendConstant.y)\r\n                    || (cacheBS.blendColor.z !== blendConstant.z)\r\n                    || (cacheBS.blendColor.w !== blendConstant.w)) {\r\n                    gl.blendColor(blendConstant.x, blendConstant.y, blendConstant.z, blendConstant.w);\r\n                    cacheBS.blendColor.copy(blendConstant);\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.STENCIL_WRITE_MASK: {\r\n                const front = dynamicStates.stencilStatesFront;\r\n                const back = dynamicStates.stencilStatesBack;\r\n                if (cacheDSS.stencilWriteMaskFront !== front.writeMask) {\r\n                    gl.stencilMaskSeparate(WebGLConstants.FRONT, front.writeMask);\r\n                    cacheDSS.stencilWriteMaskFront = front.writeMask;\r\n                }\r\n                if (cacheDSS.stencilWriteMaskBack !== back.writeMask) {\r\n                    gl.stencilMaskSeparate(WebGLConstants.BACK, back.writeMask);\r\n                    cacheDSS.stencilWriteMaskBack = back.writeMask;\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.STENCIL_COMPARE_MASK: {\r\n                const front = dynamicStates.stencilStatesFront;\r\n                const back = dynamicStates.stencilStatesBack;\r\n                if (cacheDSS.stencilRefFront !== front.reference\r\n                    || cacheDSS.stencilReadMaskFront !== front.compareMask) {\r\n                    gl.stencilFuncSeparate(WebGLConstants.FRONT, WebGLCmpFuncs[cacheDSS.stencilFuncFront], front.reference, front.compareMask);\r\n                    cacheDSS.stencilRefFront = front.reference;\r\n                    cacheDSS.stencilReadMaskFront = front.compareMask;\r\n                }\r\n                if (cacheDSS.stencilRefBack !== back.reference\r\n                    || cacheDSS.stencilReadMaskBack !== back.compareMask) {\r\n                    gl.stencilFuncSeparate(WebGLConstants.BACK, WebGLCmpFuncs[cacheDSS.stencilFuncBack], back.reference, back.compareMask);\r\n                    cacheDSS.stencilRefBack = back.reference;\r\n                    cacheDSS.stencilReadMaskBack = back.compareMask;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n            } // switch\r\n        } // for\r\n    } // update dynamic states\r\n}\r\n\r\nexport function WebGLCmdFuncDraw (device: WebGLDevice, drawInfo: Readonly<DrawInfo>): void {\r\n    const { gl } = device;\r\n    const { ANGLE_instanced_arrays: ia, WEBGL_multi_draw: md } = device.extensions;\r\n    const { gpuInputAssembler, glPrimitive } = gfxStateCache;\r\n\r\n    if (gpuInputAssembler) {\r\n        const indexBuffer = gpuInputAssembler.gpuIndexBuffer;\r\n        if (gpuInputAssembler.gpuIndirectBuffer) {\r\n            const indirects = gpuInputAssembler.gpuIndirectBuffer.indirects;\r\n            if (indirects.drawByIndex) {\r\n                for (let j = 0; j < indirects.drawCount; j++) {\r\n                    indirects.byteOffsets[j] = indirects.offsets[j] * indexBuffer!.stride;\r\n                }\r\n                if (md) {\r\n                    if (indirects.instancedDraw) {\r\n                        md.multiDrawElementsInstancedWEBGL(\r\n                            glPrimitive,\r\n                            indirects.counts,\r\n                            0,\r\n                            gpuInputAssembler.glIndexType,\r\n                            indirects.byteOffsets,\r\n                            0,\r\n                            indirects.instances,\r\n                            0,\r\n                            indirects.drawCount,\r\n                        );\r\n                    } else {\r\n                        md.multiDrawElementsWEBGL(\r\n                            glPrimitive,\r\n                            indirects.counts,\r\n                            0,\r\n                            gpuInputAssembler.glIndexType,\r\n                            indirects.byteOffsets,\r\n                            0,\r\n                            indirects.drawCount,\r\n                        );\r\n                    }\r\n                } else {\r\n                    for (let j = 0; j < indirects.drawCount; j++) {\r\n                        if (indirects.instances[j] && ia) {\r\n                            ia.drawElementsInstancedANGLE(\r\n                                glPrimitive,\r\n                                indirects.counts[j],\r\n                                gpuInputAssembler.glIndexType,\r\n                                indirects.byteOffsets[j],\r\n                                indirects.instances[j],\r\n                            );\r\n                        } else {\r\n                            gl.drawElements(glPrimitive, indirects.counts[j], gpuInputAssembler.glIndexType, indirects.byteOffsets[j]);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (md) {\r\n                if (indirects.instancedDraw) {\r\n                    md.multiDrawArraysInstancedWEBGL(\r\n                        glPrimitive,\r\n                        indirects.offsets,\r\n                        0,\r\n                        indirects.counts,\r\n                        0,\r\n                        indirects.instances,\r\n                        0,\r\n                        indirects.drawCount,\r\n                    );\r\n                } else {\r\n                    md.multiDrawArraysWEBGL(\r\n                        glPrimitive,\r\n                        indirects.offsets,\r\n                        0,\r\n                        indirects.counts,\r\n                        0,\r\n                        indirects.drawCount,\r\n                    );\r\n                }\r\n            } else {\r\n                for (let j = 0; j < indirects.drawCount; j++) {\r\n                    if (indirects.instances[j] && ia) {\r\n                        ia.drawArraysInstancedANGLE(glPrimitive, indirects.offsets[j], indirects.counts[j], indirects.instances[j]);\r\n                    } else {\r\n                        gl.drawArrays(glPrimitive, indirects.offsets[j], indirects.counts[j]);\r\n                    }\r\n                }\r\n            }\r\n        } else if (drawInfo.instanceCount && ia) {\r\n            if (indexBuffer) {\r\n                if (drawInfo.indexCount > 0) {\r\n                    const offset = drawInfo.firstIndex * indexBuffer.stride;\r\n                    ia.drawElementsInstancedANGLE(\r\n                        glPrimitive,\r\n                        drawInfo.indexCount,\r\n                        gpuInputAssembler.glIndexType,\r\n                        offset,\r\n                        drawInfo.instanceCount,\r\n                    );\r\n                }\r\n            } else if (drawInfo.vertexCount > 0) {\r\n                ia.drawArraysInstancedANGLE(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);\r\n            }\r\n        } else if (indexBuffer) {\r\n            if (drawInfo.indexCount > 0) {\r\n                const offset = drawInfo.firstIndex * indexBuffer.stride;\r\n                gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, offset);\r\n            }\r\n        } else if (drawInfo.vertexCount > 0) {\r\n            gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);\r\n        }\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncCopyTexImagesToTexture (\r\n    device: WebGLDevice,\r\n    texImages: Readonly<TexImageSource[]>,\r\n    gpuTexture: IWebGLGPUTexture,\r\n    regions: Readonly<BufferTextureCopy[]>,\r\n): void {\r\n    const { gl, stateCache } = device;\r\n    const glTexUnit = stateCache.glTexUnits[stateCache.texUnit];\r\n    if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n        gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);\r\n        glTexUnit.glTexture = gpuTexture.glTexture;\r\n    }\r\n\r\n    let n = 0;\r\n    let f = 0;\r\n\r\n    switch (gpuTexture.glTarget) {\r\n    case WebGLConstants.TEXTURE_2D: {\r\n        for (let i = 0; i < regions.length; i++) {\r\n            const region = regions[i];\r\n            // console.debug('Copying image to texture 2D: ' + region.texExtent.width + ' x ' + region.texExtent.height);\r\n            gl.texSubImage2D(\r\n                WebGLConstants.TEXTURE_2D,\r\n                region.texSubres.mipLevel,\r\n                region.texOffset.x,\r\n                region.texOffset.y,\r\n                gpuTexture.glFormat,\r\n                gpuTexture.glType,\r\n                texImages[n++],\r\n            );\r\n        }\r\n        break;\r\n    }\r\n    case WebGLConstants.TEXTURE_CUBE_MAP: {\r\n        for (let i = 0; i < regions.length; i++) {\r\n            const region = regions[i];\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexSubres = region.texSubres;\r\n            // console.debug('Copying image to texture cube: ' + region.texExtent.width + ' x ' + region.texExtent.height);\r\n            const fcount = regionTexSubres.baseArrayLayer + regionTexSubres.layerCount;\r\n            for (f = regionTexSubres.baseArrayLayer; f < fcount; ++f) {\r\n                gl.texSubImage2D(\r\n                    WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                    regionTexSubres.mipLevel,\r\n                    regionTexOffset.x,\r\n                    regionTexOffset.y,\r\n                    gpuTexture.glFormat,\r\n                    gpuTexture.glType,\r\n                    texImages[n++],\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16327);\r\n    }\r\n    }\r\n\r\n    if ((gpuTexture.flags & TextureFlagBit.GEN_MIPMAP)\r\n        && gpuTexture.isPowerOf2) {\r\n        gl.generateMipmap(gpuTexture.glTarget);\r\n    }\r\n}\r\n\r\nlet stagingBuffer = new Uint8Array(1);\r\nfunction pixelBufferPick (\r\n    buffer: ArrayBufferView,\r\n    format: Format,\r\n    offset: number,\r\n    stride: Extent,\r\n    extent: Extent,\r\n): ArrayBufferView {\r\n    const blockHeight = formatAlignment(format).height;\r\n\r\n    const bufferSize = FormatSize(format, extent.width, extent.height, extent.depth);\r\n    const rowStride = FormatSize(format, stride.width, 1, 1);\r\n    const sliceStride = FormatSize(format, stride.width, stride.height, 1);\r\n    const chunkSize = FormatSize(format, extent.width, 1, 1);\r\n\r\n    const ArrayBufferCtor: TypedArrayConstructor = getTypedArrayConstructor(FormatInfos[format]);\r\n\r\n    if (stagingBuffer.byteLength < bufferSize) {\r\n        stagingBuffer = new Uint8Array(bufferSize);\r\n    }\r\n\r\n    let destOffset = 0;\r\n    let bufferOffset = offset;\r\n\r\n    for (let i = 0; i < extent.depth; i++) {\r\n        bufferOffset = offset + sliceStride * i;\r\n        for (let j = 0; j < extent.height; j += blockHeight) {\r\n            stagingBuffer.subarray(destOffset, destOffset + chunkSize).set(\r\n                new Uint8Array(buffer.buffer, buffer.byteOffset + bufferOffset, chunkSize),\r\n            );\r\n            destOffset += chunkSize;\r\n            bufferOffset += rowStride;\r\n        }\r\n    }\r\n    const length = bufferSize / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n    assertID(Number.isInteger(length), 9101);\r\n    return new ArrayBufferCtor(stagingBuffer.buffer, 0, length);\r\n}\r\n\r\nexport function WebGLCmdFuncCopyBuffersToTexture (\r\n    device: WebGLDevice,\r\n    buffers: Readonly<ArrayBufferView[]>,\r\n    gpuTexture: IWebGLGPUTexture,\r\n    regions: Readonly<BufferTextureCopy[]>,\r\n): void {\r\n    const { gl, stateCache } = device;\r\n    const glTexUnit = stateCache.glTexUnits[stateCache.texUnit];\r\n    if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n        gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);\r\n        glTexUnit.glTexture = gpuTexture.glTexture;\r\n    }\r\n\r\n    let n = 0;\r\n    let f = 0;\r\n    const fmtInfo: FormatInfo = FormatInfos[gpuTexture.format];\r\n    const ArrayBufferCtor: TypedArrayConstructor = getTypedArrayConstructor(fmtInfo);\r\n    const { isCompressed } = fmtInfo;\r\n\r\n    const blockSize = formatAlignment(gpuTexture.format);\r\n\r\n    const extent: Extent = new Extent();\r\n    const offset: Offset = new Offset();\r\n    const stride: Extent = new Extent();\r\n\r\n    switch (gpuTexture.glTarget) {\r\n    case WebGLConstants.TEXTURE_2D: {\r\n        for (let i = 0; i < regions.length; i++) {\r\n            const region = regions[i];\r\n            const mipLevel = region.texSubres.mipLevel;\r\n\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexExtent = region.texExtent;\r\n            const regionTexExtentWidth = regionTexExtent.width;\r\n            const regionTexExtentHeight = regionTexExtent.height;\r\n            const blockSizeWidth = blockSize.width;\r\n            const blockSizeHeight = blockSize.height;\r\n            const regionBuffStride = region.buffStride;\r\n\r\n            offset.x =  regionTexOffset.x === 0 ? 0 : alignTo(regionTexOffset.x, blockSizeWidth);\r\n            offset.y =  regionTexOffset.y === 0 ? 0 : alignTo(regionTexOffset.y, blockSizeHeight);\r\n            extent.width = regionTexExtentWidth < blockSizeWidth ? regionTexExtentWidth : alignTo(regionTexExtentWidth, blockSizeWidth);\r\n            extent.height = regionTexExtentHeight < blockSizeHeight ? regionTexExtentWidth\r\n                : alignTo(regionTexExtentHeight, blockSizeHeight);\r\n            stride.width = regionBuffStride > 0 ?  regionBuffStride : extent.width;\r\n            stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;\r\n\r\n            const destWidth  = (regionTexExtentWidth + offset.x === (gpuTexture.width >> mipLevel)) ? regionTexExtentWidth : extent.width;\r\n            const destHeight = (regionTexExtentHeight + offset.y === (gpuTexture.height >> mipLevel)) ? regionTexExtentHeight : extent.height;\r\n\r\n            let pixels: ArrayBufferView;\r\n            const buffer = buffers[n++];\r\n            if (stride.width === extent.width && stride.height === extent.height) {\r\n                const length = FormatSize(gpuTexture.format, destWidth, destHeight, 1) / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n                assertID(Number.isInteger(length), 9101);\r\n                pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset, length);\r\n            } else {\r\n                pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);\r\n            }\r\n\r\n            if (!isCompressed) {\r\n                gl.texSubImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    mipLevel,\r\n                    offset.x,\r\n                    offset.y,\r\n                    destWidth,\r\n                    destHeight,\r\n                    gpuTexture.glFormat,\r\n                    gpuTexture.glType,\r\n                    pixels,\r\n                );\r\n            } else if (gpuTexture.glInternalFmt !== (WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL as number) && !device.extensions.noCompressedTexSubImage2D) {\r\n                gl.compressedTexSubImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    mipLevel,\r\n                    offset.x,\r\n                    offset.y,\r\n                    destWidth,\r\n                    destHeight,\r\n                    gpuTexture.glFormat,\r\n                    pixels,\r\n                );\r\n            } else { // WEBGL_compressed_texture_etc1\r\n                gl.compressedTexImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    mipLevel,\r\n                    gpuTexture.glInternalFmt,\r\n                    destWidth,\r\n                    destHeight,\r\n                    0,\r\n                    pixels,\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case WebGLConstants.TEXTURE_CUBE_MAP: {\r\n        for (let i = 0; i < regions.length; i++) {\r\n            const region = regions[i];\r\n            const mipLevel = region.texSubres.mipLevel;\r\n\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexExtent = region.texExtent;\r\n            const regionTexSubres = region.texSubres;\r\n            const regionTexExtentWidth = regionTexExtent.width;\r\n            const regionTexExtentHeight = regionTexExtent.height;\r\n            const blockSizeWidth = blockSize.width;\r\n            const blockSizeHeight = blockSize.height;\r\n\r\n            offset.x =  regionTexOffset.x === 0 ? 0 : alignTo(regionTexOffset.x, blockSizeWidth);\r\n            offset.y =  regionTexOffset.y === 0 ? 0 : alignTo(regionTexOffset.y, blockSizeHeight);\r\n            extent.width = regionTexExtentWidth < blockSizeWidth ? regionTexExtentWidth : alignTo(regionTexExtentWidth, blockSizeWidth);\r\n            extent.height = regionTexExtentHeight < blockSizeHeight ? regionTexExtentWidth\r\n                : alignTo(regionTexExtentHeight, blockSizeHeight);\r\n            stride.width = region.buffStride > 0 ?  region.buffStride : extent.width;\r\n            stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;\r\n\r\n            const destWidth  = (regionTexExtentWidth + offset.x === (gpuTexture.width >> mipLevel)) ? regionTexExtentWidth : extent.width;\r\n            const destHeight = (regionTexExtentHeight + offset.y === (gpuTexture.height >> mipLevel)) ? regionTexExtentHeight : extent.height;\r\n\r\n            const fcount = regionTexSubres.baseArrayLayer + regionTexSubres.layerCount;\r\n            for (f = regionTexSubres.baseArrayLayer; f < fcount; ++f) {\r\n                let pixels: ArrayBufferView;\r\n                const buffer = buffers[n++];\r\n                if (stride.width === extent.width && stride.height === extent.height) {\r\n                    const length = FormatSize(gpuTexture.format, destWidth, destHeight, 1) / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n                    assertID(Number.isInteger(length), 9101);\r\n                    pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset, length);\r\n                } else {\r\n                    pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);\r\n                }\r\n\r\n                if (!isCompressed) {\r\n                    gl.texSubImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        mipLevel,\r\n                        offset.x,\r\n                        offset.y,\r\n                        destWidth,\r\n                        destHeight,\r\n                        gpuTexture.glFormat,\r\n                        gpuTexture.glType,\r\n                        pixels,\r\n                    );\r\n                } else if (gpuTexture.glInternalFmt !== (WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL as number)\r\n                    && !device.extensions.noCompressedTexSubImage2D) {\r\n                    gl.compressedTexSubImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        mipLevel,\r\n                        offset.x,\r\n                        offset.y,\r\n                        destWidth,\r\n                        destHeight,\r\n                        gpuTexture.glFormat,\r\n                        pixels,\r\n                    );\r\n                } else { // WEBGL_compressed_texture_etc1\r\n                    gl.compressedTexImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        mipLevel,\r\n                        gpuTexture.glInternalFmt,\r\n                        destWidth,\r\n                        destHeight,\r\n                        0,\r\n                        pixels,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16327);\r\n    }\r\n    }\r\n\r\n    if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {\r\n        gl.generateMipmap(gpuTexture.glTarget);\r\n    }\r\n}\r\n\r\nexport function WebGLCmdFuncCopyTextureToBuffers (\r\n    device: WebGLDevice,\r\n    gpuTexture: IWebGLGPUTexture,\r\n    buffers: Readonly<ArrayBufferView[]>,\r\n    regions: Readonly<BufferTextureCopy[]>,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.stateCache;\r\n\r\n    const framebuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, framebuffer);\r\n    let x = 0;\r\n    let y = 0;\r\n    let w = 1;\r\n    let h = 1;\r\n\r\n    switch (gpuTexture.glTarget) {\r\n    case WebGLConstants.TEXTURE_2D: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            gl.framebufferTexture2D(\r\n                WebGLConstants.FRAMEBUFFER,\r\n                WebGLConstants.COLOR_ATTACHMENT0,\r\n                gpuTexture.glTarget,\r\n                gpuTexture.glTexture,\r\n                region.texSubres.mipLevel,\r\n            );\r\n            x = region.texOffset.x;\r\n            y = region.texOffset.y;\r\n            w = region.texExtent.width;\r\n            h = region.texExtent.height;\r\n            gl.readPixels(x, y, w, h, gpuTexture.glFormat, gpuTexture.glType, buffers[k]);\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16399);\r\n    }\r\n    }\r\n    gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, null);\r\n    cache.glFramebuffer = null;\r\n    gl.deleteFramebuffer(framebuffer);\r\n}\r\n\r\nexport function WebGLCmdFuncBlitTexture (\r\n    device: WebGLDevice,\r\n    srcTexture: Readonly<IWebGLGPUTexture>,\r\n    dstTexture: IWebGLGPUTexture,\r\n    regions: Readonly<TextureBlit []>,\r\n    filter: Filter,\r\n): void {\r\n    // logic different from native, because framebuffer map is not implemented in webgl\r\n    device.blitManager.draw(srcTexture, dstTexture, regions as TextureBlit[], filter);\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    DescriptorType, BufferUsage, Format, MemoryUsage, SampleCount, DynamicStateFlagBit,\r\n    ShaderStageFlagBit, TextureFlags, TextureType, TextureUsage, Type,\r\n    Attribute, ColorAttachment, DepthStencilAttachment,\r\n    UniformBlock, UniformSamplerTexture, DescriptorSetLayoutBinding,\r\n    DrawInfo, UniformInputAttachment, Uniform, BufferUsageBit, MemoryUsageBit,\r\n    TextureBlit, Filter, FormatInfos,\r\n} from '../base/define';\r\nimport { BlendState, DepthStencilState, RasterizerState } from '../base/pipeline-state';\r\nimport { WebGLCmdFuncBindStates, WebGLCmdFuncCreateBuffer, WebGLCmdFuncCreateInputAssember,\r\n    WebGLCmdFuncCreateShader, WebGLCmdFuncDestroyBuffer, WebGLCmdFuncDestroyInputAssembler,\r\n    WebGLCmdFuncDestroyShader, WebGLCmdFuncDraw, WebGLCmdFuncUpdateBuffer,\r\n} from './webgl-commands';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { nextPow2 } from '../../core/math/bits';\r\n\r\nfunction createInt32Array (capacity: number): Int32Array {\r\n    return new Int32Array(capacity);\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGLIndirectDrawInfos {\r\n    public declare counts: Int32Array;\r\n    public declare offsets: Int32Array;\r\n    public declare instances: Int32Array;\r\n    public drawCount = 0;\r\n    public drawByIndex = false;\r\n    public instancedDraw = false;\r\n\r\n    // staging buffer\r\n    public declare byteOffsets: Int32Array;\r\n\r\n    private _capacity = 4;\r\n\r\n    constructor () {\r\n        this.counts = createInt32Array(this._capacity);\r\n        this.offsets = createInt32Array(this._capacity);\r\n        this.instances  = createInt32Array(this._capacity);\r\n        this.byteOffsets = createInt32Array(this._capacity);\r\n    }\r\n\r\n    public clearDraws (): void {\r\n        this.drawCount = 0;\r\n        this.drawByIndex = false;\r\n        this.instancedDraw = false;\r\n    }\r\n\r\n    public setDrawInfo (idx: number, info: Readonly<DrawInfo>): void {\r\n        this._ensureCapacity(idx);\r\n        this.drawByIndex = info.indexCount > 0;\r\n        this.instancedDraw = !!info.instanceCount;\r\n        this.drawCount = Math.max(idx + 1, this.drawCount);\r\n\r\n        if (this.drawByIndex) {\r\n            this.counts[idx] = info.indexCount;\r\n            this.offsets[idx] = info.firstIndex;\r\n        } else {\r\n            this.counts[idx] = info.vertexCount;\r\n            this.offsets[idx] = info.firstVertex;\r\n        }\r\n        this.instances[idx] = Math.max(1, info.instanceCount);\r\n    }\r\n\r\n    private _ensureCapacity (target: number): void {\r\n        if (this._capacity > target) return;\r\n        this._capacity = nextPow2(target);\r\n\r\n        const counts = createInt32Array(this._capacity);\r\n        const offsets = createInt32Array(this._capacity);\r\n        const instances = createInt32Array(this._capacity);\r\n        this.byteOffsets = createInt32Array(this._capacity);\r\n\r\n        counts.set(this.counts);\r\n        offsets.set(this.offsets);\r\n        instances.set(this.instances);\r\n\r\n        this.counts = counts;\r\n        this.offsets = offsets;\r\n        this.instances = instances;\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUUniformInfo {\r\n    name: string;\r\n    type: Type;\r\n    count: number;\r\n    offset: number;\r\n    view: Float32Array | Int32Array;\r\n    isDirty: boolean;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLBindingMapping {\r\n    blockOffsets: number[];\r\n    samplerTextureOffsets: number[];\r\n    flexibleSet: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUBufferView {\r\n    gpuBuffer: IWebGLGPUBuffer;\r\n    offset: number;\r\n    range: number;\r\n}\r\n\r\nexport interface IWebGLGPUBuffer {\r\n    /** @mangle */\r\n    usage: BufferUsage;\r\n    /** @mangle */\r\n    memUsage: MemoryUsage;\r\n    /** @mangle */\r\n    size: number;\r\n    /** @mangle */\r\n    stride: number;\r\n\r\n    /** @mangle */\r\n    glTarget: GLenum;\r\n    /** @mangle */\r\n    glBuffer: WebGLBuffer | null;\r\n\r\n    /** @mangle */\r\n    buffer: ArrayBufferView | null;\r\n    // Should not mangle vf32 since there is a `if ('vf32' in gpuBuffer)` code in webgl-commands.ts\r\n    vf32: Float32Array | null;\r\n    /** @mangle */\r\n    indirects: WebGLIndirectDrawInfos;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUTexture {\r\n    type: TextureType;\r\n    format: Format;\r\n    usage: TextureUsage;\r\n    width: number;\r\n    height: number;\r\n    depth: number;\r\n    size: number;\r\n    arrayLayer: number;\r\n    mipLevel: number;\r\n    samples: SampleCount;\r\n    flags: TextureFlags;\r\n    isPowerOf2: boolean;\r\n\r\n    glTarget: GLenum;\r\n    glInternalFmt: GLenum;\r\n    glFormat: GLenum;\r\n    glType: GLenum;\r\n    glUsage: GLenum;\r\n    glTexture: WebGLTexture | null;\r\n    glRenderbuffer: WebGLRenderbuffer | null;\r\n    glWrapS: GLenum;\r\n    glWrapT: GLenum;\r\n    glMinFilter: GLenum;\r\n    glMagFilter: GLenum;\r\n    isSwapchainTexture: boolean;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPURenderPass {\r\n    colorAttachments: ColorAttachment[];\r\n    depthStencilAttachment: DepthStencilAttachment | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUFramebuffer {\r\n    gpuRenderPass: IWebGLGPURenderPass;\r\n    gpuColorTextures: IWebGLGPUTexture[];\r\n    gpuDepthStencilTexture: IWebGLGPUTexture | null;\r\n    glFramebuffer: WebGLFramebuffer | null;\r\n    isOffscreen: boolean;\r\n    width: number;\r\n    height: number;\r\n    lodLevel: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUSampler {\r\n    glMinFilter: GLenum;\r\n    glMagFilter: GLenum;\r\n    glWrapS: GLenum;\r\n    glWrapT: GLenum;\r\n    glWrapR: GLenum;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUInput {\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    stride: number;\r\n    count: number;\r\n    size: number;\r\n\r\n    glType: GLenum;\r\n    glLoc: GLint;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUUniform {\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    stride: number;\r\n    count: number;\r\n    size: number;\r\n    offset: number;\r\n\r\n    glType: GLenum;\r\n    glLoc: WebGLUniformLocation;\r\n    array: Int32Array | Float32Array;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUUniformBlock {\r\n    set: number;\r\n    binding: number;\r\n    name: string;\r\n    size: number;\r\n    glUniforms: IWebGLGPUUniform[];\r\n    glActiveUniforms: IWebGLGPUUniform[];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUUniformSamplerTexture {\r\n    set: number;\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    count: number;\r\n    units: number[];\r\n    glUnits: Int32Array;\r\n\r\n    glType: GLenum;\r\n    glLoc: WebGLUniformLocation;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUShaderStage {\r\n    type: ShaderStageFlagBit;\r\n    source: string;\r\n    glShader: WebGLShader | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUShader {\r\n    name: string;\r\n    blocks: UniformBlock[];\r\n    samplerTextures: UniformSamplerTexture[];\r\n    subpassInputs: UniformInputAttachment[];\r\n\r\n    gpuStages: IWebGLGPUShaderStage[];\r\n    glProgram: WebGLProgram | null;\r\n    glInputs: IWebGLGPUInput[];\r\n    glUniforms: IWebGLGPUUniform[];\r\n    glBlocks: IWebGLGPUUniformBlock[];\r\n    glSamplerTextures: IWebGLGPUUniformSamplerTexture[];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUDescriptorSetLayout {\r\n    bindings: DescriptorSetLayoutBinding[];\r\n    dynamicBindings: number[];\r\n    descriptorIndices: number[];\r\n    descriptorCount: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUPipelineLayout {\r\n    gpuSetLayouts: IWebGLGPUDescriptorSetLayout[];\r\n    dynamicOffsetCount: number;\r\n    dynamicOffsetOffsets: number[];\r\n    dynamicOffsetIndices: number[][];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUPipelineState {\r\n    glPrimitive: GLenum;\r\n    gpuShader: IWebGLGPUShader | null;\r\n    gpuPipelineLayout: IWebGLGPUPipelineLayout | null;\r\n    rs: RasterizerState;\r\n    dss: DepthStencilState;\r\n    bs: BlendState;\r\n    dynamicStates: DynamicStateFlagBit[];\r\n    gpuRenderPass: IWebGLGPURenderPass | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUDescriptor {\r\n    type: DescriptorType;\r\n    gpuBuffer: IWebGLGPUBuffer | IWebGLGPUBufferView | null;\r\n    gpuTexture: IWebGLGPUTexture | null;\r\n    gpuSampler: IWebGLGPUSampler | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUDescriptorSet {\r\n    gpuDescriptors: IWebGLGPUDescriptor[];\r\n    descriptorIndices: number[];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLAttrib {\r\n    name: string;\r\n    glBuffer: WebGLBuffer | null;\r\n    glType: GLenum;\r\n    size: number;\r\n    count: number;\r\n    stride: number;\r\n    componentCount: number;\r\n    isNormalized: boolean;\r\n    isInstanced: boolean;\r\n    offset: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGLGPUInputAssembler {\r\n    attributes: Attribute[];\r\n    gpuVertexBuffers: IWebGLGPUBuffer[];\r\n    gpuIndexBuffer: IWebGLGPUBuffer | null;\r\n    gpuIndirectBuffer: IWebGLGPUBuffer | null;\r\n\r\n    glAttribs: IWebGLAttrib[];\r\n    glIndexType: GLenum;\r\n    glVAOs: Map<WebGLProgram, WebGLVertexArrayObjectOES>;\r\n}\r\n\r\n/** @mangle */\r\nexport class IWebGLBlitManager {\r\n    private _gpuShader: IWebGLGPUShader | null = null;\r\n    private _gpuDescriptorSetLayout: IWebGLGPUDescriptorSetLayout | null = null;\r\n    private _gpuPipelineLayout: IWebGLGPUPipelineLayout | null = null;\r\n    private _gpuPipelineState: IWebGLGPUPipelineState | null = null;\r\n\r\n    private _gpuVertexBuffer: IWebGLGPUBuffer | null = null;\r\n    private _gpuInputAssembler: IWebGLGPUInputAssembler | null = null;\r\n    private _gpuPointSampler: IWebGLGPUSampler | null = null;\r\n    private _gpuLinearSampler: IWebGLGPUSampler | null = null;\r\n    private _gpuDescriptorSet: IWebGLGPUDescriptorSet | null = null;\r\n    private _gpuUniformBuffer: IWebGLGPUBuffer | null = null;\r\n    private _drawInfo: DrawInfo | null = null;\r\n    private _glFramebuffer: WebGLFramebuffer | null = null;\r\n\r\n    private _uniformBuffer: Float32Array | null = null;\r\n\r\n    constructor () {\r\n        const device = WebGLDeviceManager.instance;\r\n        const samplerOffset = device.bindingMappingInfo.maxBlockCounts[0];\r\n\r\n        this._gpuShader = {\r\n            name: 'Blit Pass',\r\n            blocks: [\r\n                new UniformBlock(\r\n                    0,\r\n                    0,\r\n                    `BlitParams`,\r\n                    [\r\n                        new Uniform(`tilingOffsetSrc`, Type.FLOAT4, 1),\r\n                        new Uniform(`tilingOffsetDst`, Type.FLOAT4, 1),\r\n                    ],\r\n                    1,\r\n                ),\r\n            ],\r\n            samplerTextures: [new UniformSamplerTexture(0, samplerOffset, 'textureSrc', Type.SAMPLER2D, 1)],\r\n            subpassInputs: [],\r\n            gpuStages: [\r\n                {\r\n                    type: ShaderStageFlagBit.VERTEX,\r\n                    source: `\r\nprecision mediump float;\r\nattribute vec2 a_position;\r\nattribute vec2 a_texCoord;\r\nuniform vec4 tilingOffsetSrc;\r\nuniform vec4 tilingOffsetDst;\r\nvarying vec2 v_texCoord;\r\nvoid main() {\r\n    v_texCoord = a_texCoord * tilingOffsetSrc.xy + tilingOffsetSrc.zw;\r\n    gl_Position = vec4((a_position + 1.0) * tilingOffsetDst.xy - 1.0 + tilingOffsetDst.zw * 2.0, 0, 1);\r\n}`,\r\n                    glShader: null },\r\n                {\r\n                    type: ShaderStageFlagBit.FRAGMENT,\r\n                    source: `\r\nprecision mediump float;\r\nuniform sampler2D textureSrc;\r\nvarying vec2 v_texCoord;\r\nvoid main() {\r\n    gl_FragColor = texture2D(textureSrc, v_texCoord);\r\n}`,\r\n                    glShader: null },\r\n\r\n            ],\r\n            glProgram: null,\r\n            glInputs: [],\r\n            glUniforms: [],\r\n            glBlocks: [],\r\n            glSamplerTextures: [],\r\n        };\r\n        WebGLCmdFuncCreateShader(WebGLDeviceManager.instance, this._gpuShader);\r\n\r\n        this._gpuDescriptorSetLayout = {\r\n            bindings: [\r\n                new DescriptorSetLayoutBinding(0, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX),\r\n                new DescriptorSetLayoutBinding(samplerOffset, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT),\r\n            ],\r\n            dynamicBindings: [],\r\n            descriptorIndices: [],\r\n            descriptorCount: samplerOffset + 1,\r\n        };\r\n        for (let i = 0; i < samplerOffset; i++) {\r\n            this._gpuDescriptorSetLayout.descriptorIndices[i] = 0;\r\n        }\r\n        this._gpuDescriptorSetLayout.descriptorIndices.push(1);\r\n\r\n        this._gpuPipelineLayout = {\r\n            gpuSetLayouts: [this._gpuDescriptorSetLayout],\r\n            dynamicOffsetCount: 0,\r\n            dynamicOffsetOffsets: [0],\r\n            dynamicOffsetIndices: [[]],\r\n        };\r\n\r\n        this._gpuPipelineState = {\r\n            glPrimitive: WebGLConstants.TRIANGLE_STRIP,\r\n            gpuShader: this._gpuShader,\r\n            gpuPipelineLayout: this._gpuPipelineLayout,\r\n            rs: null!,\r\n            dss: new DepthStencilState(false, false),\r\n            bs: null!,\r\n            dynamicStates: [],\r\n            gpuRenderPass: null,\r\n        };\r\n\r\n        this._gpuVertexBuffer = {\r\n            usage: BufferUsageBit.VERTEX,\r\n            memUsage: MemoryUsageBit.DEVICE,\r\n            size: 16 * Float32Array.BYTES_PER_ELEMENT,\r\n            stride: 4 * Float32Array.BYTES_PER_ELEMENT,\r\n            buffer: null,\r\n            vf32: null,\r\n            indirects: new WebGLIndirectDrawInfos(),\r\n            glTarget: 0,\r\n            glBuffer: null,\r\n        };\r\n        WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuVertexBuffer);\r\n        WebGLDeviceManager.instance.memoryStatus.bufferSize += this._gpuVertexBuffer.size;\r\n        const data  = new Float32Array(\r\n            [-1.0, -1.0, 0.0, 0.0,\r\n                1.0, -1.0, 1.0, 0.0,\r\n                -1.0, 1.0, 0.0, 1.0,\r\n                1.0, 1.0, 1.0, 1.0],\r\n        );\r\n        WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, this._gpuVertexBuffer, data, 0, data.length);\r\n\r\n        this._gpuInputAssembler = {\r\n            attributes: [new Attribute(`a_position`, Format.RG32F), new Attribute(`a_texCoord`, Format.RG32F)],\r\n            gpuVertexBuffers: [this._gpuVertexBuffer],\r\n            gpuIndexBuffer: null,\r\n            gpuIndirectBuffer: null,\r\n\r\n            glAttribs: [],\r\n            glIndexType: 0,\r\n            glVAOs: new Map<WebGLProgram, WebGLVertexArrayObject>(),\r\n        };\r\n        WebGLCmdFuncCreateInputAssember(WebGLDeviceManager.instance, this._gpuInputAssembler);\r\n\r\n        this._gpuPointSampler = {\r\n            glMinFilter: 0x2600, // WebGLRenderingContext.NEAREST\r\n            glMagFilter: 0x2600, // WebGLRenderingContext.NEAREST\r\n            glWrapS: 0x2901, // WebGLRenderingContext.REPEAT,\r\n            glWrapT: 0x2901, // WebGLRenderingContext.REPEAT,\r\n            glWrapR: 0x2901, // WebGLRenderingContext.REPEAT,\r\n        };\r\n\r\n        this._gpuLinearSampler = {\r\n            glMinFilter: 0x2601, // WebGLRenderingContext.LINEAR;\r\n            glMagFilter: 0x2601, // WebGLRenderingContext.LINEAR;\r\n            glWrapS: 0x2901, // WebGLRenderingContext.REPEAT,\r\n            glWrapT: 0x2901, // WebGLRenderingContext.REPEAT,\r\n            glWrapR: 0x2901, // WebGLRenderingContext.REPEAT,\r\n        };\r\n\r\n        this._uniformBuffer = new Float32Array(8);\r\n        this._gpuUniformBuffer = {\r\n            usage: BufferUsageBit.UNIFORM,\r\n            memUsage: MemoryUsageBit.DEVICE,\r\n            size: 8 * Float32Array.BYTES_PER_ELEMENT,\r\n            stride: 8 * Float32Array.BYTES_PER_ELEMENT,\r\n            buffer: this._uniformBuffer,\r\n            vf32: null,\r\n            indirects: new WebGLIndirectDrawInfos(),\r\n            glTarget: 0,\r\n            glBuffer: null,\r\n        };\r\n        WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuUniformBuffer);\r\n        WebGLDeviceManager.instance.memoryStatus.bufferSize += this._gpuUniformBuffer.size;\r\n\r\n        this._gpuDescriptorSet = {\r\n            gpuDescriptors: [\r\n                { type: DescriptorType.UNIFORM_BUFFER, gpuBuffer: this._gpuUniformBuffer, gpuTexture: null, gpuSampler: null },\r\n                { type: DescriptorType.SAMPLER_TEXTURE, gpuBuffer: null, gpuTexture: null, gpuSampler: null }],\r\n            descriptorIndices: this._gpuDescriptorSetLayout.descriptorIndices,\r\n        };\r\n\r\n        this._drawInfo = new DrawInfo(4, 0, 0, 0, 0, 0, 0);\r\n        this._glFramebuffer = WebGLDeviceManager.instance.gl.createFramebuffer();\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._glFramebuffer) {\r\n            WebGLDeviceManager.instance.gl.deleteFramebuffer(this._glFramebuffer);\r\n            this._glFramebuffer = null;\r\n        }\r\n        if (this._gpuVertexBuffer) {\r\n            WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._gpuVertexBuffer.size;\r\n            WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuVertexBuffer);\r\n        }\r\n        if (this._gpuUniformBuffer) {\r\n            WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._gpuUniformBuffer.size;\r\n            WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuUniformBuffer);\r\n        }\r\n        if (this._gpuShader) {\r\n            WebGLCmdFuncDestroyShader(WebGLDeviceManager.instance, this._gpuShader);\r\n        }\r\n        if (this._gpuInputAssembler) {\r\n            WebGLCmdFuncDestroyInputAssembler(WebGLDeviceManager.instance, this._gpuInputAssembler);\r\n        }\r\n    }\r\n\r\n    public draw (gpuTextureSrc: IWebGLGPUTexture, gpuTextureDst: IWebGLGPUTexture, regions: TextureBlit[], filter: Filter): void {\r\n        const device = WebGLDeviceManager.instance;\r\n        const { gl } = device;\r\n        const stateCache = device.stateCache;\r\n        const origFramebuffer = stateCache.glFramebuffer;\r\n\r\n        gl.viewport(0, 0, gpuTextureDst.width, gpuTextureDst.height);\r\n        gl.scissor(0, 0, gpuTextureDst.width, gpuTextureDst.height);\r\n\r\n        if (!this._uniformBuffer || !this._gpuUniformBuffer || !this._gpuPipelineState\r\n            || !this._gpuInputAssembler || !this._gpuDescriptorSet || !this._drawInfo) {\r\n            return;\r\n        }\r\n\r\n        const descriptor = this._gpuDescriptorSet.gpuDescriptors[1];\r\n        descriptor.gpuTexture = gpuTextureSrc;\r\n        descriptor.gpuSampler = filter === Filter.POINT ? this._gpuPointSampler : this._gpuLinearSampler;\r\n\r\n        const formatInfo = FormatInfos[gpuTextureDst.format];\r\n        let attachment: number = WebGLConstants.COLOR_ATTACHMENT0;\r\n        if (formatInfo.hasStencil) {\r\n            attachment = WebGLConstants.DEPTH_STENCIL_ATTACHMENT;\r\n        } else if (formatInfo.hasDepth) {\r\n            attachment = WebGLConstants.DEPTH_ATTACHMENT;\r\n        }\r\n\r\n        const regionIndices = regions.map((_, i): number => i);\r\n        regionIndices.sort((a, b): number => regions[a].srcSubres.mipLevel - regions[b].srcSubres.mipLevel);\r\n\r\n        if (stateCache.glFramebuffer !== this._glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, this._glFramebuffer);\r\n            stateCache.glFramebuffer = this._glFramebuffer;\r\n        }\r\n\r\n        let mipLevel = regions[0].dstSubres.mipLevel;\r\n        if (gpuTextureDst.glTexture) {\r\n            gl.framebufferTexture2D(WebGLConstants.FRAMEBUFFER, attachment, gpuTextureDst.glTarget, gpuTextureDst.glTexture, mipLevel);\r\n        } else {\r\n            gl.framebufferRenderbuffer(WebGLConstants.FRAMEBUFFER, attachment, WebGLConstants.RENDERBUFFER, gpuTextureDst.glRenderbuffer);\r\n        }\r\n\r\n        for (let i = 0; i < regionIndices.length; ++i) {\r\n            const region = regions[regionIndices[i]];\r\n\r\n            if (gpuTextureSrc.glTexture && mipLevel !== region.srcSubres.mipLevel) {\r\n                mipLevel = region.srcSubres.mipLevel;\r\n                gl.framebufferTexture2D(WebGLConstants.FRAMEBUFFER, attachment, gpuTextureDst.glTarget, gpuTextureDst.glTexture, mipLevel);\r\n            }\r\n\r\n            const srcWidth = gpuTextureSrc.width;\r\n            const srcHeight = gpuTextureSrc.height;\r\n            const dstWidth = gpuTextureDst.width;\r\n            const dstHeight = gpuTextureDst.height;\r\n\r\n            this._uniformBuffer[0] = region.srcExtent.width / srcWidth;\r\n            this._uniformBuffer[1] = region.srcExtent.height / srcHeight;\r\n            this._uniformBuffer[2] = region.srcOffset.x / srcWidth;\r\n            this._uniformBuffer[3] = region.srcOffset.y / srcHeight;\r\n            this._uniformBuffer[4] = region.dstExtent.width / dstWidth;\r\n            this._uniformBuffer[5] = region.dstExtent.height / dstHeight;\r\n            this._uniformBuffer[6] = region.dstOffset.x / dstWidth;\r\n            this._uniformBuffer[7] = region.dstOffset.y / dstHeight;\r\n\r\n            WebGLCmdFuncUpdateBuffer(\r\n                device,\r\n                this._gpuUniformBuffer,\r\n                this._uniformBuffer,\r\n                0,\r\n                this._uniformBuffer.length * Float32Array.BYTES_PER_ELEMENT,\r\n            );\r\n            WebGLCmdFuncBindStates(device, this._gpuPipelineState, this._gpuInputAssembler, [this._gpuDescriptorSet], [], null!);\r\n            WebGLCmdFuncDraw(device, this._drawInfo);\r\n        }\r\n\r\n        // restore fbo\r\n        if (stateCache.glFramebuffer !== origFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, origFramebuffer);\r\n            stateCache.glFramebuffer = origFramebuffer;\r\n        }\r\n        // restore viewport\r\n        const origViewport = stateCache.viewport;\r\n        gl.viewport(origViewport.left, origViewport.top, origViewport.width, origViewport.height);\r\n        // restore scissor\r\n        const origScissor = stateCache.scissorRect;\r\n        gl.scissor(origScissor.x, origScissor.y, origScissor.width, origScissor.height);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BufferSource, BufferInfo, BufferViewInfo, BufferUsageBit } from '../base/define';\r\nimport { Buffer } from '../base/buffer';\r\n\r\nimport {\r\n    WebGLCmdFuncCreateBuffer,\r\n    WebGLCmdFuncDestroyBuffer,\r\n    WebGLCmdFuncResizeBuffer,\r\n    WebGLCmdFuncUpdateBuffer,\r\n} from './webgl-commands';\r\nimport { IWebGLGPUBuffer, IWebGLGPUBufferView, WebGLIndirectDrawInfos } from './webgl-gpu-objects';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { warnID } from '../../core/platform/debug';\r\n\r\n/** @mangle */\r\nexport class WebGLBuffer extends Buffer {\r\n    get gpuBuffer (): IWebGLGPUBuffer {\r\n        return  this._gpuBuffer!;\r\n    }\r\n\r\n    get gpuBufferView (): IWebGLGPUBufferView {\r\n        return  this._gpuBufferView!;\r\n    }\r\n\r\n    private _gpuBuffer: IWebGLGPUBuffer | null = null;\r\n    private _gpuBufferView: IWebGLGPUBufferView | null = null;\r\n    private _uniformBuffer: Uint8Array | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<BufferInfo> | Readonly<BufferViewInfo>): void {\r\n        if ('buffer' in info) { // buffer view\r\n            this._isBufferView = true;\r\n\r\n            const buffer = info.buffer as WebGLBuffer;\r\n\r\n            this._usage = buffer.usage;\r\n            this._memUsage = buffer.memUsage;\r\n            this._size = this._stride = info.range;\r\n            this._count = 1;\r\n            this._flags = buffer.flags;\r\n\r\n            this._gpuBufferView = {\r\n                gpuBuffer: buffer.gpuBuffer,\r\n                offset: info.offset,\r\n                range: info.range,\r\n            };\r\n        } else { // native buffer\r\n            this._usage = info.usage;\r\n            this._memUsage = info.memUsage;\r\n            this._size = info.size;\r\n            this._stride = Math.max(info.stride || this._size, 1);\r\n            this._count = this._size / this._stride;\r\n            this._flags = info.flags;\r\n\r\n            if ((this._usage & BufferUsageBit.UNIFORM) && this._size > 0) {\r\n                this._uniformBuffer = new Uint8Array(this._size);\r\n            }\r\n\r\n            this._gpuBuffer = {\r\n                usage: this._usage,\r\n                memUsage: this._memUsage,\r\n                size: this._size,\r\n                stride: this._stride,\r\n                buffer: null,\r\n                vf32: null,\r\n                indirects: new WebGLIndirectDrawInfos(),\r\n                glTarget: 0,\r\n                glBuffer: null,\r\n            };\r\n\r\n            if (this._usage & BufferUsageBit.UNIFORM) {\r\n                this._gpuBuffer.buffer = this._uniformBuffer;\r\n            }\r\n\r\n            WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuBuffer);\r\n\r\n            WebGLDeviceManager.instance.memoryStatus.bufferSize += this._size;\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuBuffer) {\r\n            WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuBuffer);\r\n            WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._size;\r\n            this._gpuBuffer = null;\r\n        }\r\n\r\n        if (this._gpuBufferView) {\r\n            this._gpuBufferView = null;\r\n        }\r\n    }\r\n\r\n    public resize (size: number): void {\r\n        if (this._isBufferView) {\r\n            warnID(16379);\r\n            return;\r\n        }\r\n\r\n        const oldSize = this._size;\r\n        if (oldSize === size) { return; }\r\n\r\n        this._size = size;\r\n        this._count = this._size / this._stride;\r\n\r\n        if (this._uniformBuffer) {\r\n            this._uniformBuffer = new Uint8Array(size);\r\n        }\r\n\r\n        if (this._gpuBuffer) {\r\n            if (this._uniformBuffer) {\r\n                this._gpuBuffer.buffer = this._uniformBuffer;\r\n            }\r\n\r\n            this._gpuBuffer.size = size;\r\n            if (size > 0) {\r\n                WebGLCmdFuncResizeBuffer(WebGLDeviceManager.instance, this._gpuBuffer);\r\n                WebGLDeviceManager.instance.memoryStatus.bufferSize -= oldSize;\r\n                WebGLDeviceManager.instance.memoryStatus.bufferSize += size;\r\n            }\r\n        }\r\n    }\r\n\r\n    public update (buffer: Readonly<BufferSource>, size?: number): void {\r\n        if (this._isBufferView) {\r\n            warnID(16380);\r\n            return;\r\n        }\r\n\r\n        let buffSize: number;\r\n        if (size !== undefined) {\r\n            buffSize = size;\r\n        } else if (this._usage & BufferUsageBit.INDIRECT) {\r\n            buffSize = 0;\r\n        } else {\r\n            buffSize = (buffer as ArrayBuffer).byteLength;\r\n        }\r\n\r\n        WebGLCmdFuncUpdateBuffer(\r\n            WebGLDeviceManager.instance,\r\n            this._gpuBuffer!,\r\n            buffer as BufferSource,\r\n            0,\r\n            buffSize,\r\n        );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { PipelineState } from '../base/pipeline-state';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGLDescriptorSet } from './webgl-descriptor-set';\r\nimport { IWebGLGPUInputAssembler, IWebGLGPUDescriptorSet, IWebGLGPUPipelineState } from './webgl-gpu-objects';\r\nimport { WebGLInputAssembler } from './webgl-input-assembler';\r\nimport { WebGLPipelineState } from './webgl-pipeline-state';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { StencilFace, BufferSource,\r\n    CommandBufferInfo, BufferTextureCopy, Color, Rect, Viewport, DrawInfo, DynamicStates, TextureBlit, Filter } from '../base/define';\r\nimport { GeneralBarrier } from '../base/states/general-barrier';\r\nimport { TextureBarrier } from '../base/states/texture-barrier';\r\nimport { BufferBarrier } from '../base/states/buffer-barrier';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { errorID } from '../../core/platform/debug';\r\n\r\n/** @mangle */\r\nexport class WebGLCommandBuffer extends CommandBuffer {\r\n    protected _isInRenderPass = false;\r\n    protected _curGPUPipelineState: IWebGLGPUPipelineState | null = null;\r\n    protected _curGPUInputAssembler: IWebGLGPUInputAssembler | null = null;\r\n    protected _curGPUDescriptorSets: IWebGLGPUDescriptorSet[] = [];\r\n    protected _curDynamicOffsets: number[] = Array(8).fill(0);\r\n    protected _curDynamicStates: DynamicStates = new DynamicStates();\r\n    protected _isStateInvalied = false;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public override initialize (info: Readonly<CommandBufferInfo>): void {\r\n        this._type = info.type;\r\n        this._queue = info.queue;\r\n\r\n        const setCount = WebGLDeviceManager.instance.bindingMappings.blockOffsets.length;\r\n        for (let i = 0; i < setCount; i++) {\r\n            this._curGPUDescriptorSets.push(null!);\r\n        }\r\n    }\r\n\r\n    public override destroy (): void {\r\n    }\r\n\r\n    public override begin (renderPass?: RenderPass, subpass?: number, frameBuffer?: Framebuffer): void {\r\n        this._curGPUPipelineState = null;\r\n        this._curGPUInputAssembler = null;\r\n        this._curGPUDescriptorSets.length = 0;\r\n        this._numDrawCalls = 0;\r\n        this._numInstances = 0;\r\n        this._numTris = 0;\r\n    }\r\n\r\n    public override end (): void {\r\n        if (this._isStateInvalied) {\r\n            this.bindStates();\r\n        }\r\n\r\n        this._isInRenderPass = false;\r\n    }\r\n\r\n    public override beginRenderPass (\r\n        renderPass: RenderPass,\r\n        framebuffer: Framebuffer,\r\n        renderArea: Readonly<Rect>,\r\n        clearColors: Readonly<Color[]>,\r\n        clearDepth: number,\r\n        clearStencil: number,\r\n    ): void {\r\n        errorID(16401);\r\n        this._isInRenderPass = true;\r\n    }\r\n\r\n    public override endRenderPass (): void {\r\n        this._isInRenderPass = false;\r\n    }\r\n\r\n    public override bindPipelineState (pipelineState: PipelineState): void {\r\n        const gpuPipelineState = (pipelineState as WebGLPipelineState).gpuPipelineState;\r\n        if (gpuPipelineState !== this._curGPUPipelineState) {\r\n            this._curGPUPipelineState = gpuPipelineState;\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override bindDescriptorSet (set: number, descriptorSet: DescriptorSet, dynamicOffsets?: Readonly<number[]>): void {\r\n        const gpuDescriptorSet = (descriptorSet as WebGLDescriptorSet).gpuDescriptorSet;\r\n        if (gpuDescriptorSet !== this._curGPUDescriptorSets[set]) {\r\n            this._curGPUDescriptorSets[set] = gpuDescriptorSet;\r\n            this._isStateInvalied = true;\r\n        }\r\n        if (dynamicOffsets) {\r\n            const gpuPipelineLayout = this._curGPUPipelineState?.gpuPipelineLayout;\r\n            if (gpuPipelineLayout) {\r\n                const offsets = this._curDynamicOffsets;\r\n                const idx = gpuPipelineLayout.dynamicOffsetOffsets[set];\r\n                for (let i = 0; i < dynamicOffsets.length; i++) offsets[idx + i] = dynamicOffsets[i];\r\n                this._isStateInvalied = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public override bindInputAssembler (inputAssembler: InputAssembler): void {\r\n        const gpuInputAssembler = (inputAssembler as WebGLInputAssembler).getGpuInputAssembler();\r\n        this._curGPUInputAssembler = gpuInputAssembler;\r\n        this._isStateInvalied = true;\r\n    }\r\n\r\n    public override setViewport (viewport: Readonly<Viewport>): void {\r\n        const cache = this._curDynamicStates.viewport;\r\n        if (cache.left !== viewport.left\r\n            || cache.top !== viewport.top\r\n            || cache.width !== viewport.width\r\n            || cache.height !== viewport.height\r\n            || cache.minDepth !== viewport.minDepth\r\n            || cache.maxDepth !== viewport.maxDepth) {\r\n            cache.left = viewport.left;\r\n            cache.top = viewport.top;\r\n            cache.width = viewport.width;\r\n            cache.height = viewport.height;\r\n            cache.minDepth = viewport.minDepth;\r\n            cache.maxDepth = viewport.maxDepth;\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override setScissor (scissor: Readonly<Rect>): void {\r\n        const cache = this._curDynamicStates.scissor;\r\n        if (cache.x !== scissor.x\r\n            || cache.y !== scissor.y\r\n            || cache.width !== scissor.width\r\n            || cache.height !== scissor.height) {\r\n            cache.x = scissor.x;\r\n            cache.y = scissor.y;\r\n            cache.width = scissor.width;\r\n            cache.height = scissor.height;\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override setLineWidth (lineWidth: number): void {\r\n        if (this._curDynamicStates.lineWidth !== lineWidth) {\r\n            this._curDynamicStates.lineWidth = lineWidth;\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override setDepthBias (depthBiasConstantFactor: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void {\r\n        const cache = this._curDynamicStates;\r\n        if (cache.depthBiasConstant !== depthBiasConstantFactor\r\n            || cache.depthBiasClamp !== depthBiasClamp\r\n            || cache.depthBiasSlope !== depthBiasSlopeFactor) {\r\n            cache.depthBiasConstant = depthBiasConstantFactor;\r\n            cache.depthBiasClamp = depthBiasClamp;\r\n            cache.depthBiasSlope = depthBiasSlopeFactor;\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override setBlendConstants (blendConstants: Readonly<Color>): void {\r\n        const cache = this._curDynamicStates.blendConstant;\r\n        if (cache.x !== blendConstants.x\r\n            || cache.y !== blendConstants.y\r\n            || cache.z !== blendConstants.z\r\n            || cache.w !== blendConstants.w) {\r\n            cache.copy(blendConstants);\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override setDepthBound (minDepthBounds: number, maxDepthBounds: number): void {\r\n        const cache = this._curDynamicStates;\r\n        if (cache.depthMinBounds !== minDepthBounds\r\n            || cache.depthMaxBounds !== maxDepthBounds) {\r\n            cache.depthMinBounds = minDepthBounds;\r\n            cache.depthMaxBounds = maxDepthBounds;\r\n            this._isStateInvalied = true;\r\n        }\r\n    }\r\n\r\n    public override setStencilWriteMask (face: StencilFace, writeMask: number): void {\r\n        const front = this._curDynamicStates.stencilStatesFront;\r\n        const back = this._curDynamicStates.stencilStatesBack;\r\n        if (face & StencilFace.FRONT) {\r\n            if (front.writeMask !== writeMask) {\r\n                front.writeMask = writeMask;\r\n                this._isStateInvalied = true;\r\n            }\r\n        }\r\n        if (face & StencilFace.BACK) {\r\n            if (back.writeMask !== writeMask) {\r\n                back.writeMask = writeMask;\r\n                this._isStateInvalied = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public override setStencilCompareMask (face: StencilFace, reference: number, compareMask: number): void {\r\n        const front = this._curDynamicStates.stencilStatesFront;\r\n        const back = this._curDynamicStates.stencilStatesBack;\r\n        if (face & StencilFace.FRONT) {\r\n            if (front.compareMask !== compareMask\r\n                || front.reference !== reference) {\r\n                front.reference = reference;\r\n                front.compareMask = compareMask;\r\n                this._isStateInvalied = true;\r\n            }\r\n        }\r\n        if (face & StencilFace.BACK) {\r\n            if (back.compareMask !== compareMask\r\n                || back.reference !== reference) {\r\n                back.reference = reference;\r\n                back.compareMask = compareMask;\r\n                this._isStateInvalied = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public override draw (infoOrAssembler: Readonly<DrawInfo> | Readonly<InputAssembler>): void {\r\n        errorID(16328);\r\n    }\r\n\r\n    public override updateBuffer (buffer: Buffer, data: Readonly<BufferSource>, size?: number): void {\r\n        errorID(16329);\r\n    }\r\n\r\n    public override copyBuffersToTexture (buffers: Readonly<ArrayBufferView[]>, texture: Texture, regions: Readonly<BufferTextureCopy[]>): void {\r\n        errorID(16330);\r\n    }\r\n\r\n    public override execute (cmdBuffs: Readonly<CommandBuffer[]>, count: number): void {\r\n        errorID(16402);\r\n    }\r\n\r\n    public override pipelineBarrier (\r\n        GeneralBarrier: Readonly<GeneralBarrier>,\r\n        bufferBarriers?: Readonly<BufferBarrier[]>,\r\n        buffers?: Readonly<Buffer[]>,\r\n        textureBarriers?: Readonly<TextureBarrier[]>,\r\n        textures?: Readonly<Texture[]>,\r\n    ): void {\r\n\r\n    }\r\n\r\n    protected bindStates (): void {\r\n        errorID(16401);\r\n    }\r\n\r\n    public override blitTexture (srcTexture: Readonly<Texture>, dstTexture: Texture, regions: Readonly<TextureBlit []>, filter: Filter): void {\r\n        errorID(16401);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { FramebufferInfo } from '../base/define';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { WebGLCmdFuncCreateFramebuffer, WebGLCmdFuncDestroyFramebuffer } from './webgl-commands';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { IWebGLGPUFramebuffer, IWebGLGPUTexture } from './webgl-gpu-objects';\r\nimport { WebGLRenderPass } from './webgl-render-pass';\r\n\r\nimport { WebGLTexture as CCWebGLTexture } from './webgl-texture';\r\n\r\n/** @mangle */\r\nexport class WebGLFramebuffer extends Framebuffer {\r\n    getGpuFramebuffer (): IWebGLGPUFramebuffer {\r\n        return  this._gpuFramebuffer!;\r\n    }\r\n\r\n    private _gpuFramebuffer: IWebGLGPUFramebuffer | null = null;\r\n    private _gpuColorTextures: (WebGLTexture | null)[] = [];\r\n    private _gpuDepthStencilTexture: WebGLTexture | null | undefined;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get needRebuild (): boolean {\r\n        const gpuFramebuffer = this._gpuFramebuffer;\r\n        if (gpuFramebuffer) {\r\n            for (let i = 0; i < gpuFramebuffer.gpuColorTextures.length; i++) {\r\n                if (gpuFramebuffer.gpuColorTextures[i].glTexture !== this._gpuColorTextures[i]) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (gpuFramebuffer.gpuDepthStencilTexture?.glTexture !== this._gpuDepthStencilTexture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override initialize (info: Readonly<FramebufferInfo>): void {\r\n        this._renderPass = info.renderPass;\r\n        this._colorTextures = info.colorTextures || [];\r\n        const depthStencilTexture: CCWebGLTexture = this._depthStencilTexture = info.depthStencilTexture  as CCWebGLTexture || null;\r\n\r\n        let lodLevel = 0;\r\n\r\n        const gpuColorTextures: IWebGLGPUTexture[] = [];\r\n        for (let i = 0; i < info.colorTextures.length; ++i) {\r\n            const colorTexture = info.colorTextures[i] as CCWebGLTexture;\r\n            if (colorTexture) {\r\n                gpuColorTextures.push(colorTexture.gpuTexture);\r\n                lodLevel = colorTexture.lodLevel;\r\n            }\r\n        }\r\n\r\n        let gpuDepthStencilTexture: IWebGLGPUTexture | null = null;\r\n        if (depthStencilTexture) {\r\n            gpuDepthStencilTexture = depthStencilTexture.gpuTexture;\r\n            lodLevel = depthStencilTexture.lodLevel;\r\n        }\r\n\r\n        let width = Number.MAX_SAFE_INTEGER;\r\n        let height = Number.MAX_SAFE_INTEGER;\r\n        this._gpuFramebuffer = {\r\n            gpuRenderPass: (info.renderPass as WebGLRenderPass).gpuRenderPass,\r\n            gpuColorTextures,\r\n            gpuDepthStencilTexture,\r\n            glFramebuffer: null,\r\n            isOffscreen: true,\r\n            get width (): number {\r\n                if (this.gpuColorTextures.length > 0) {\r\n                    return this.gpuColorTextures[0].width;\r\n                } else if (this.gpuDepthStencilTexture) {\r\n                    return this.gpuDepthStencilTexture.width;\r\n                }\r\n                return width;\r\n            },\r\n            set width (val) {\r\n                width = val;\r\n            },\r\n            get height (): number {\r\n                if (this.gpuColorTextures.length > 0) {\r\n                    return this.gpuColorTextures[0].height;\r\n                } else if (this.gpuDepthStencilTexture) {\r\n                    return this.gpuDepthStencilTexture.height;\r\n                }\r\n                return height;\r\n            },\r\n            set height (val) {\r\n                height = val;\r\n            },\r\n            lodLevel,\r\n        };\r\n\r\n        WebGLCmdFuncCreateFramebuffer(WebGLDeviceManager.instance, this._gpuFramebuffer);\r\n        this._gpuFramebuffer.gpuColorTextures.forEach((tex) => this._gpuColorTextures.push(tex.glTexture));\r\n        this._gpuDepthStencilTexture = this._gpuFramebuffer.gpuDepthStencilTexture?.glTexture;\r\n        this._width = this._gpuFramebuffer.width;\r\n        this._height = this._gpuFramebuffer.height;\r\n    }\r\n\r\n    public override destroy (): void {\r\n        if (this._gpuFramebuffer) {\r\n            WebGLCmdFuncDestroyFramebuffer(WebGLDeviceManager.instance, this._gpuFramebuffer);\r\n            this._gpuFramebuffer = null;\r\n            this._gpuColorTextures.length = 0;\r\n            this._gpuDepthStencilTexture = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { errorID } from '../../core/platform/debug';\r\nimport { InputAssemblerInfo } from '../base/define';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { WebGLBuffer } from './webgl-buffer';\r\nimport { WebGLCmdFuncCreateInputAssember, WebGLCmdFuncDestroyInputAssembler } from './webgl-commands';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { IWebGLGPUInputAssembler, IWebGLGPUBuffer } from './webgl-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGLInputAssembler extends InputAssembler {\r\n    getGpuInputAssembler (): IWebGLGPUInputAssembler {\r\n        return  this._gpuInputAssembler!;\r\n    }\r\n\r\n    private _gpuInputAssembler: IWebGLGPUInputAssembler | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public override initialize (info: Readonly<InputAssemblerInfo>): void {\r\n        if (info.vertexBuffers.length === 0) {\r\n            errorID(16331);\r\n            return;\r\n        }\r\n\r\n        this._attributes = info.attributes;\r\n        this._attributesHash = this.computeAttributesHash();\r\n        this._vertexBuffers = info.vertexBuffers;\r\n\r\n        if (info.indexBuffer) {\r\n            this._indexBuffer = info.indexBuffer;\r\n            this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;\r\n            this._drawInfo.firstIndex = 0;\r\n        } else {\r\n            const vertBuff = this._vertexBuffers[0];\r\n            this._drawInfo.vertexCount = vertBuff.size / vertBuff.stride;\r\n            this._drawInfo.firstVertex = 0;\r\n            this._drawInfo.vertexOffset = 0;\r\n        }\r\n        this._drawInfo.instanceCount = 0;\r\n        this._drawInfo.firstInstance = 0;\r\n\r\n        this._indirectBuffer = info.indirectBuffer || null;\r\n\r\n        const gpuVertexBuffers: IWebGLGPUBuffer[] = new Array<IWebGLGPUBuffer>(info.vertexBuffers.length);\r\n        for (let i = 0; i < info.vertexBuffers.length; ++i) {\r\n            const vb = info.vertexBuffers[i] as WebGLBuffer;\r\n            if (vb.gpuBuffer) {\r\n                gpuVertexBuffers[i] = vb.gpuBuffer;\r\n            }\r\n        }\r\n\r\n        let gpuIndexBuffer: IWebGLGPUBuffer | null = null;\r\n        let glIndexType = 0;\r\n        if (info.indexBuffer) {\r\n            gpuIndexBuffer = (info.indexBuffer as WebGLBuffer).gpuBuffer;\r\n            if (gpuIndexBuffer) {\r\n                switch (gpuIndexBuffer.stride) {\r\n                case 1: glIndexType = 0x1401; break; // WebGLRenderingContext.UNSIGNED_BYTE\r\n                case 2: glIndexType = 0x1403; break; // WebGLRenderingContext.UNSIGNED_SHORT\r\n                case 4: glIndexType = 0x1405; break; // WebGLRenderingContext.UNSIGNED_INT\r\n                default: {\r\n                    errorID(16332);\r\n                }\r\n                }\r\n            }\r\n        }\r\n\r\n        let gpuIndirectBuffer: IWebGLGPUBuffer | null = null;\r\n        if (info.indirectBuffer) {\r\n            gpuIndirectBuffer = (info.indirectBuffer as WebGLBuffer).gpuBuffer;\r\n        }\r\n\r\n        this._gpuInputAssembler = {\r\n            attributes: info.attributes,\r\n            gpuVertexBuffers,\r\n            gpuIndexBuffer,\r\n            gpuIndirectBuffer,\r\n\r\n            glAttribs: [],\r\n            glIndexType,\r\n            glVAOs: new Map<WebGLProgram, WebGLVertexArrayObjectOES>(),\r\n        };\r\n\r\n        WebGLCmdFuncCreateInputAssember(WebGLDeviceManager.instance, this._gpuInputAssembler);\r\n    }\r\n\r\n    public override destroy (): void {\r\n        const device = WebGLDeviceManager.instance;\r\n        if (this._gpuInputAssembler && device.extensions.useVAO) {\r\n            WebGLCmdFuncDestroyInputAssembler(device, this._gpuInputAssembler);\r\n        }\r\n        this._gpuInputAssembler = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSetLayoutInfo, DESCRIPTOR_DYNAMIC_TYPE } from '../base/define';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { IWebGLGPUDescriptorSetLayout } from './webgl-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGLDescriptorSetLayout extends DescriptorSetLayout {\r\n    get gpuDescriptorSetLayout (): IWebGLGPUDescriptorSetLayout { return this._gpuDescriptorSetLayout!; }\r\n\r\n    private _gpuDescriptorSetLayout: IWebGLGPUDescriptorSetLayout | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<DescriptorSetLayoutInfo>): void {\r\n        Array.prototype.push.apply(this._bindings, info.bindings);\r\n\r\n        let descriptorCount = 0; let maxBinding = -1;\r\n        const flattenedIndices: number[] = [];\r\n        for (let i = 0; i < this._bindings.length; i++) {\r\n            const binding = this._bindings[i];\r\n            flattenedIndices.push(descriptorCount);\r\n            descriptorCount += binding.count;\r\n            if (binding.binding > maxBinding) maxBinding = binding.binding;\r\n        }\r\n\r\n        this._bindingIndices = Array(maxBinding + 1).fill(-1);\r\n        const descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);\r\n        for (let i = 0; i < this._bindings.length; i++) {\r\n            const binding = this._bindings[i];\r\n            this._bindingIndices[binding.binding] = i;\r\n            descriptorIndices[binding.binding] = flattenedIndices[i];\r\n        }\r\n\r\n        const dynamicBindings: number[] = [];\r\n        for (let i = 0; i < this._bindings.length; i++) {\r\n            const binding = this._bindings[i];\r\n            if (binding.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {\r\n                for (let j = 0; j < binding.count; j++) {\r\n                    dynamicBindings.push(binding.binding);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._gpuDescriptorSetLayout = {\r\n            bindings: this._bindings,\r\n            dynamicBindings,\r\n            descriptorIndices,\r\n            descriptorCount,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._bindings.length = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PipelineLayout } from '../base/pipeline-layout';\r\nimport { IWebGLGPUPipelineLayout, IWebGLGPUDescriptorSetLayout } from './webgl-gpu-objects';\r\nimport { WebGLDescriptorSetLayout } from './webgl-descriptor-set-layout';\r\nimport { PipelineLayoutInfo } from '../base/define';\r\n\r\n/** @mangle */\r\nexport class WebGLPipelineLayout extends PipelineLayout {\r\n    get gpuPipelineLayout (): IWebGLGPUPipelineLayout { return this._gpuPipelineLayout!; }\r\n\r\n    private _gpuPipelineLayout: IWebGLGPUPipelineLayout | null = null;\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<PipelineLayoutInfo>): void {\r\n        Array.prototype.push.apply(this._setLayouts, info.setLayouts);\r\n\r\n        const dynamicOffsetIndices: number[][] = [];\r\n\r\n        const gpuSetLayouts: IWebGLGPUDescriptorSetLayout[] = [];\r\n        let dynamicOffsetCount = 0;\r\n        const dynamicOffsetOffsets: number[] = [];\r\n        for (let i = 0; i < this._setLayouts.length; i++) {\r\n            const setLayout = this._setLayouts[i] as WebGLDescriptorSetLayout;\r\n            const dynamicBindings = setLayout.gpuDescriptorSetLayout.dynamicBindings;\r\n            const indices = Array<number>(setLayout.bindingIndices.length).fill(-1);\r\n            for (let j = 0; j < dynamicBindings.length; j++) {\r\n                const binding = dynamicBindings[j];\r\n                if (indices[binding] < 0) indices[binding] = dynamicOffsetCount + j;\r\n            }\r\n\r\n            gpuSetLayouts.push(setLayout.gpuDescriptorSetLayout);\r\n            dynamicOffsetIndices.push(indices);\r\n            dynamicOffsetOffsets.push(dynamicOffsetCount);\r\n            dynamicOffsetCount += dynamicBindings.length;\r\n        }\r\n\r\n        this._gpuPipelineLayout = {\r\n            gpuSetLayouts,\r\n            dynamicOffsetIndices,\r\n            dynamicOffsetCount,\r\n            dynamicOffsetOffsets,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._setLayouts.length = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PipelineState, PipelineStateInfo } from '../base/pipeline-state';\r\nimport { IWebGLGPUPipelineState } from './webgl-gpu-objects';\r\nimport { WebGLRenderPass } from './webgl-render-pass';\r\nimport { WebGLShader } from './webgl-shader';\r\nimport { DynamicStateFlagBit } from '../base/define';\r\nimport { WebGLPipelineLayout } from './webgl-pipeline-layout';\r\n\r\nconst WebGLPrimitives: GLenum[] = [\r\n    0x0000, // WebGLRenderingContext.POINTS,\r\n    0x0001, // WebGLRenderingContext.LINES,\r\n    0x0003, // WebGLRenderingContext.LINE_STRIP,\r\n    0x0002, // WebGLRenderingContext.LINE_LOOP,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n    0x0004, // WebGLRenderingContext.TRIANGLES,\r\n    0x0005, // WebGLRenderingContext.TRIANGLE_STRIP,\r\n    0x0006, // WebGLRenderingContext.TRIANGLE_FAN,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n    0x0000, // WebGLRenderingContext.NONE,\r\n];\r\n\r\n/** @mangle */\r\nexport class WebGLPipelineState extends PipelineState {\r\n    get gpuPipelineState (): IWebGLGPUPipelineState {\r\n        return  this._gpuPipelineState!;\r\n    }\r\n\r\n    private _gpuPipelineState: IWebGLGPUPipelineState | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<PipelineStateInfo>): void {\r\n        this._primitive = info.primitive;\r\n        this._shader = info.shader;\r\n        this._pipelineLayout = info.pipelineLayout;\r\n        const bs = this._bs;\r\n        if (info.blendState) {\r\n            const bsInfo = info.blendState;\r\n            const { targets } = bsInfo;\r\n            if (targets) {\r\n                targets.forEach((t, i): void => {\r\n                    bs.setTarget(i, t);\r\n                });\r\n            }\r\n\r\n            if (bsInfo.isA2C !== undefined) { bs.isA2C = bsInfo.isA2C; }\r\n            if (bsInfo.isIndepend !== undefined) { bs.isIndepend = bsInfo.isIndepend; }\r\n            if (bsInfo.blendColor !== undefined) { bs.blendColor = bsInfo.blendColor; }\r\n        }\r\n        Object.assign(this._rs, info.rasterizerState);\r\n        Object.assign(this._dss, info.depthStencilState);\r\n        this._is = info.inputState;\r\n        this._renderPass = info.renderPass;\r\n        this._dynamicStates = info.dynamicStates;\r\n\r\n        const dynamicStates: DynamicStateFlagBit[] = [];\r\n        for (let i = 0; i < 31; i++) {\r\n            if (this._dynamicStates & (1 << i)) {\r\n                dynamicStates.push(1 << i);\r\n            }\r\n        }\r\n\r\n        this._gpuPipelineState = {\r\n            glPrimitive: WebGLPrimitives[info.primitive],\r\n            gpuShader: (info.shader as WebGLShader).gpuShader,\r\n            gpuPipelineLayout: (info.pipelineLayout as WebGLPipelineLayout).gpuPipelineLayout,\r\n            rs: info.rasterizerState,\r\n            dss: info.depthStencilState,\r\n            bs: info.blendState,\r\n            gpuRenderPass: (info.renderPass as WebGLRenderPass).gpuRenderPass,\r\n            dynamicStates,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._gpuPipelineState = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { BufferSource, DrawInfo, BufferTextureCopy, Color, Rect, BufferUsageBit, Viewport, TextureBlit, Filter } from '../base/define';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGLBuffer } from './webgl-buffer';\r\nimport { WebGLCommandBuffer } from './webgl-command-buffer';\r\nimport {\r\n    WebGLCmdFuncBeginRenderPass, WebGLCmdFuncBindStates, WebGLCmdFuncBlitTexture, WebGLCmdFuncCopyBuffersToTexture,\r\n    WebGLCmdFuncDraw, WebGLCmdFuncUpdateBuffer } from './webgl-commands';\r\nimport { WebGLFramebuffer } from './webgl-framebuffer';\r\nimport { WebGLTexture } from './webgl-texture';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { WebGLRenderPass } from './webgl-render-pass';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { error, errorID } from '../../core/platform/debug';\r\nimport { WebGLConstants } from '../gl-constants';\r\n\r\n/** @mangle */\r\nexport class WebGLPrimaryCommandBuffer extends WebGLCommandBuffer {\r\n    public override beginRenderPass (\r\n        renderPass: RenderPass,\r\n        framebuffer: Framebuffer,\r\n        renderArea: Readonly<Rect>,\r\n        clearColors: Readonly<Color[]>,\r\n        clearDepth: number,\r\n        clearStencil: number,\r\n    ): void {\r\n        WebGLCmdFuncBeginRenderPass(\r\n            WebGLDeviceManager.instance,\r\n            (renderPass as WebGLRenderPass).gpuRenderPass,\r\n            (framebuffer as WebGLFramebuffer).getGpuFramebuffer(),\r\n            renderArea,\r\n            clearColors,\r\n            clearDepth,\r\n            clearStencil,\r\n        );\r\n        this._isInRenderPass = true;\r\n    }\r\n\r\n    public override draw (infoOrAssembler: DrawInfo | InputAssembler): void {\r\n        if (this._isInRenderPass) {\r\n            if (this._isStateInvalied) {\r\n                this.bindStates();\r\n            }\r\n\r\n            const info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;\r\n\r\n            WebGLCmdFuncDraw(WebGLDeviceManager.instance, info);\r\n\r\n            ++this._numDrawCalls;\r\n            this._numInstances += info.instanceCount;\r\n            const indexCount = info.indexCount || info.vertexCount;\r\n            if (this._curGPUPipelineState) {\r\n                const glPrimitive = this._curGPUPipelineState.glPrimitive;\r\n                switch (glPrimitive) {\r\n                case WebGLConstants.TRIANGLES: {\r\n                    this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);\r\n                    break;\r\n                }\r\n                case WebGLConstants.TRIANGLE_STRIP:\r\n                case WebGLConstants.TRIANGLE_FAN: {\r\n                    this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n            }\r\n        } else {\r\n            errorID(16328);\r\n        }\r\n    }\r\n\r\n    public override setViewport (viewport: Readonly<Viewport>): void {\r\n        const { stateCache: cache, gl } = WebGLDeviceManager.instance;\r\n\r\n        if (cache.viewport.left !== viewport.left\r\n            || cache.viewport.top !== viewport.top\r\n            || cache.viewport.width !== viewport.width\r\n            || cache.viewport.height !== viewport.height) {\r\n            gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);\r\n\r\n            cache.viewport.left = viewport.left;\r\n            cache.viewport.top = viewport.top;\r\n            cache.viewport.width = viewport.width;\r\n            cache.viewport.height = viewport.height;\r\n        }\r\n    }\r\n\r\n    public override setScissor (scissor: Readonly<Rect>): void {\r\n        const { stateCache: cache, gl } = WebGLDeviceManager.instance;\r\n\r\n        if (cache.scissorRect.x !== scissor.x\r\n            || cache.scissorRect.y !== scissor.y\r\n            || cache.scissorRect.width !== scissor.width\r\n            || cache.scissorRect.height !== scissor.height) {\r\n            gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);\r\n\r\n            cache.scissorRect.x = scissor.x;\r\n            cache.scissorRect.y = scissor.y;\r\n            cache.scissorRect.width = scissor.width;\r\n            cache.scissorRect.height = scissor.height;\r\n        }\r\n    }\r\n\r\n    public override updateBuffer (buffer: Buffer, data: Readonly<BufferSource>, size?: number): void {\r\n        if (!this._isInRenderPass) {\r\n            const gpuBuffer = (buffer as WebGLBuffer).gpuBuffer;\r\n            if (gpuBuffer) {\r\n                let buffSize: number;\r\n                if (size !== undefined) {\r\n                    buffSize = size;\r\n                } else if (buffer.usage & BufferUsageBit.INDIRECT) {\r\n                    buffSize = 0;\r\n                } else {\r\n                    buffSize = (data as ArrayBuffer).byteLength;\r\n                }\r\n\r\n                WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, gpuBuffer, data as ArrayBuffer, 0, buffSize);\r\n            }\r\n        } else {\r\n            errorID(16329);\r\n        }\r\n    }\r\n\r\n    public override copyBuffersToTexture (buffers: Readonly<ArrayBufferView[]>, texture: Texture, regions: Readonly<BufferTextureCopy[]>): void {\r\n        if (!this._isInRenderPass) {\r\n            const gpuTexture = (texture as WebGLTexture).gpuTexture;\r\n            if (gpuTexture) {\r\n                WebGLCmdFuncCopyBuffersToTexture(WebGLDeviceManager.instance, buffers, gpuTexture, regions);\r\n            }\r\n        } else {\r\n            errorID(16330);\r\n        }\r\n    }\r\n\r\n    public override execute (cmdBuffs: Readonly<CommandBuffer[]>, count: number): void {\r\n        errorID(16402);\r\n    }\r\n\r\n    protected override bindStates (): void {\r\n        WebGLCmdFuncBindStates(\r\n            WebGLDeviceManager.instance,\r\n            this._curGPUPipelineState,\r\n            this._curGPUInputAssembler,\r\n            this._curGPUDescriptorSets,\r\n            this._curDynamicOffsets,\r\n            this._curDynamicStates,\r\n        );\r\n        this._isStateInvalied = false;\r\n    }\r\n\r\n    public override blitTexture (srcTexture: Readonly<Texture>, dstTexture: Texture, regions: Readonly<TextureBlit []>, filter: Filter): void {\r\n        const gpuTextureSrc = (srcTexture as WebGLTexture).gpuTexture;\r\n        const gpuTextureDst = (dstTexture as WebGLTexture).gpuTexture;\r\n        WebGLCmdFuncBlitTexture(WebGLDeviceManager.instance, gpuTextureSrc, gpuTextureDst, regions, filter);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { QueueInfo } from '../base/define';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Queue } from '../base/queue';\r\n\r\n/** @mangle */\r\nexport class WebGLQueue extends Queue {\r\n    public numDrawCalls = 0;\r\n    public numInstances = 0;\r\n    public numTris = 0;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<QueueInfo>): void {\r\n        this._type = info.type;\r\n    }\r\n\r\n    public destroy (): void {\r\n    }\r\n\r\n    public submit (cmdBuffs: Readonly<CommandBuffer[]>): void {\r\n        const len = cmdBuffs.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const cmdBuff = cmdBuffs[i];\r\n            // WebGLCmdFuncExecuteCmds( this._device as WebGLDevice, (cmdBuff as WebGLCommandBuffer).cmdPackage); // opted out\r\n            this.numDrawCalls += cmdBuff.numDrawCalls;\r\n            this.numInstances += cmdBuff.numInstances;\r\n            this.numTris += cmdBuff.numTris;\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        this.numDrawCalls = 0;\r\n        this.numInstances = 0;\r\n        this.numTris = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { RenderPassInfo } from '../base/define';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { IWebGLGPURenderPass } from './webgl-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGLRenderPass extends RenderPass {\r\n    public get gpuRenderPass (): IWebGLGPURenderPass {\r\n        return  this._gpuRenderPass!;\r\n    }\r\n\r\n    private _gpuRenderPass: IWebGLGPURenderPass | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<RenderPassInfo>): void {\r\n        this._colorInfos = info.colorAttachments;\r\n        this._depthStencilInfo = info.depthStencilAttachment;\r\n        this._subpasses = info.subpasses;\r\n\r\n        this._gpuRenderPass = {\r\n            colorAttachments: this._colorInfos,\r\n            depthStencilAttachment: this._depthStencilInfo,\r\n        };\r\n\r\n        this._hash = this.computeHash();\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._gpuRenderPass = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Filter, SamplerInfo } from '../../base/define';\r\nimport { Sampler } from '../../base/states/sampler';\r\nimport { WebGLConstants } from '../../gl-constants';\r\nimport { IWebGLGPUSampler } from '../webgl-gpu-objects';\r\n\r\nconst WebGLWraps: GLenum[] = [\r\n    0x2901, // WebGLRenderingContext.REPEAT,\r\n    0x8370, // WebGLRenderingContext.MIRRORED_REPEAT,\r\n    0x812F, // WebGLRenderingContext.CLAMP_TO_EDGE,\r\n    0x812F, // WebGLRenderingContext.CLAMP_TO_EDGE,\r\n];\r\n\r\n/** @mangle */\r\nexport class WebGLSampler extends Sampler {\r\n    public get gpuSampler (): IWebGLGPUSampler {\r\n        return  this._gpuSampler!;\r\n    }\r\n\r\n    private _gpuSampler: IWebGLGPUSampler | null = null;\r\n\r\n    constructor (info: Readonly<SamplerInfo>, hash: number) {\r\n        super(info, hash);\r\n\r\n        let glMinFilter = 0;\r\n        let glMagFilter = 0;\r\n\r\n        const minFilter = this._info.minFilter;\r\n        const magFilter = this._info.magFilter;\r\n        const mipFilter = this._info.mipFilter;\r\n\r\n        if (minFilter === Filter.LINEAR || minFilter === Filter.ANISOTROPIC) {\r\n            if (mipFilter === Filter.LINEAR || mipFilter === Filter.ANISOTROPIC) {\r\n                glMinFilter = WebGLConstants.LINEAR_MIPMAP_LINEAR;\r\n            } else if (mipFilter === Filter.POINT) {\r\n                glMinFilter = WebGLConstants.LINEAR_MIPMAP_NEAREST;\r\n            } else {\r\n                glMinFilter = WebGLConstants.LINEAR;\r\n            }\r\n        } else if (mipFilter === Filter.LINEAR || mipFilter === Filter.ANISOTROPIC) {\r\n            glMinFilter = WebGLConstants.NEAREST_MIPMAP_LINEAR;\r\n        } else if (mipFilter === Filter.POINT) {\r\n            glMinFilter = WebGLConstants.NEAREST_MIPMAP_NEAREST;\r\n        } else {\r\n            glMinFilter = WebGLConstants.NEAREST;\r\n        }\r\n\r\n        if (magFilter === Filter.LINEAR || magFilter === Filter.ANISOTROPIC) {\r\n            glMagFilter = WebGLConstants.LINEAR;\r\n        } else {\r\n            glMagFilter = WebGLConstants.NEAREST;\r\n        }\r\n\r\n        const glWrapS = WebGLWraps[this._info.addressU];\r\n        const glWrapT = WebGLWraps[this._info.addressV];\r\n        const glWrapR = WebGLWraps[this._info.addressW];\r\n\r\n        this._gpuSampler = {\r\n            glMinFilter,\r\n            glMagFilter,\r\n            glWrapS,\r\n            glWrapT,\r\n            glWrapR,\r\n        };\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ShaderInfo } from '../base/define';\r\nimport { Shader } from '../base/shader';\r\nimport { WebGLCmdFuncCreateShader, WebGLCmdFuncDestroyShader } from './webgl-commands';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { IWebGLGPUShader, IWebGLGPUShaderStage } from './webgl-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGLShader extends Shader {\r\n    get gpuShader (): IWebGLGPUShader {\r\n        if (this._gpuShader!.glProgram === null) {\r\n            WebGLCmdFuncCreateShader(WebGLDeviceManager.instance, this._gpuShader!);\r\n        }\r\n        return this._gpuShader!;\r\n    }\r\n\r\n    private _gpuShader: IWebGLGPUShader | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<ShaderInfo>): void {\r\n        this._name = info.name;\r\n        this._stages = info.stages;\r\n        this._attributes = info.attributes;\r\n        this._blocks = info.blocks;\r\n        this._samplers = info.samplers;\r\n\r\n        this._gpuShader = {\r\n            name: info.name,\r\n            blocks: info.blocks.slice(),\r\n            samplerTextures: info.samplerTextures.slice(),\r\n            subpassInputs: info.subpassInputs.slice(),\r\n\r\n            gpuStages: new Array<IWebGLGPUShaderStage>(info.stages.length),\r\n            glProgram: null,\r\n            glInputs: [],\r\n            glUniforms: [],\r\n            glBlocks: [],\r\n            glSamplerTextures: [],\r\n        };\r\n\r\n        for (let i = 0; i < info.stages.length; ++i) {\r\n            const stage = info.stages[i];\r\n            this._gpuShader.gpuStages[i] = {\r\n                type: stage.stage,\r\n                source: stage.source,\r\n                glShader: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuShader) {\r\n            WebGLCmdFuncDestroyShader(WebGLDeviceManager.instance, this._gpuShader);\r\n            this._gpuShader = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Rect, Viewport } from '../base/define';\r\nimport { BlendState, DepthStencilState, RasterizerState } from '../base/pipeline-state';\r\n\r\n/** @mangle */\r\nexport interface IWebGLTexUnit {\r\n    glTexture: WebGLTexture | null;\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGLStateCache {\r\n    public glArrayBuffer: WebGLBuffer | null = null;\r\n    public glElementArrayBuffer: WebGLBuffer | null = null;\r\n    public glVAO: WebGLVertexArrayObjectOES | null = null;\r\n    public texUnit = 0;\r\n    public glTexUnits: IWebGLTexUnit[] = [];\r\n    public glRenderbuffer: WebGLRenderbuffer | null = null;\r\n    public glFramebuffer: WebGLFramebuffer | null = null;\r\n    public viewport = new Viewport();\r\n    public scissorRect = new Rect(0, 0, 0, 0);\r\n    public rs = new RasterizerState();\r\n    public dss = new DepthStencilState();\r\n    public bs = new BlendState();\r\n    public glProgram: WebGLProgram | null = null;\r\n    public glEnabledAttribLocs: boolean[] = [];\r\n    public glCurrentAttribLocs: boolean[] = [];\r\n    public texUnitCacheMap: Record<string, number> = {};\r\n\r\n    initialize (texUnit: number, vertexAttributes: number): void {\r\n        for (let i = 0; i < texUnit; ++i) {\r\n            const glTexUnit: IWebGLTexUnit = { glTexture: null };\r\n            this.glTexUnits.push(glTexUnit);\r\n        }\r\n\r\n        this.glEnabledAttribLocs.length = vertexAttributes;\r\n        this.glEnabledAttribLocs.fill(false);\r\n\r\n        this.glCurrentAttribLocs.length = vertexAttributes;\r\n        this.glCurrentAttribLocs.fill(false);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { FormatSurfaceSize, TextureInfo, TextureViewInfo, IsPowerOf2, ISwapchainTextureInfo, TextureUsageBit, FormatInfos } from '../base/define';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGLCmdFuncCreateTexture, WebGLCmdFuncDestroyTexture, WebGLCmdFuncResizeTexture } from './webgl-commands';\r\nimport { WebGLDeviceManager } from './webgl-define';\r\nimport { IWebGLGPUTexture } from './webgl-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGLTexture extends Texture {\r\n    get gpuTexture (): IWebGLGPUTexture {\r\n        return this._gpuTexture!;\r\n    }\r\n\r\n    get lodLevel (): number {\r\n        return this._lodLevel;\r\n    }\r\n\r\n    private _gpuTexture: IWebGLGPUTexture | null = null;\r\n    private _lodLevel = 0;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<TextureInfo> | Readonly<TextureViewInfo>, isSwapchainTexture?: boolean): void {\r\n        const self = this;\r\n        const { instance } = WebGLDeviceManager;\r\n        let texInfo = info as Readonly<TextureInfo>;\r\n        const viewInfo = info as Readonly<TextureViewInfo>;\r\n\r\n        if ('texture' in info) {\r\n            texInfo = viewInfo.texture.info;\r\n            self._isTextureView = true;\r\n        }\r\n        const thisTextureInfo = self._info;\r\n        thisTextureInfo.copy(texInfo);\r\n\r\n        const thisViewInfo = self._viewInfo;\r\n\r\n        self._isPowerOf2 = IsPowerOf2(thisTextureInfo.width) && IsPowerOf2(thisTextureInfo.height);\r\n        self._size = FormatSurfaceSize(\r\n            thisTextureInfo.format,\r\n            self.width,\r\n            self.height,\r\n            self.depth,\r\n            thisTextureInfo.levelCount,\r\n        ) * thisTextureInfo.layerCount;\r\n\r\n        if (!self._isTextureView) {\r\n            self._gpuTexture = {\r\n                type: texInfo.type,\r\n                format: texInfo.format,\r\n                usage: texInfo.usage,\r\n                width: texInfo.width,\r\n                height: texInfo.height,\r\n                depth: texInfo.depth,\r\n                size: self._size,\r\n                arrayLayer: texInfo.layerCount,\r\n                mipLevel: texInfo.levelCount,\r\n                samples: texInfo.samples,\r\n                flags: texInfo.flags,\r\n                isPowerOf2: self._isPowerOf2,\r\n\r\n                glTarget: 0,\r\n                glInternalFmt: 0,\r\n                glFormat: 0,\r\n                glType: 0,\r\n                glUsage: 0,\r\n                glTexture: null,\r\n                glRenderbuffer: null,\r\n                glWrapS: 0,\r\n                glWrapT: 0,\r\n                glMinFilter: 0,\r\n                glMagFilter: 0,\r\n\r\n                isSwapchainTexture: isSwapchainTexture || false,\r\n            };\r\n\r\n            if (!self._gpuTexture.isSwapchainTexture) {\r\n                WebGLCmdFuncCreateTexture(instance, self._gpuTexture);\r\n                instance.memoryStatus.textureSize += self._size;\r\n            }\r\n\r\n            thisViewInfo.texture = self;\r\n            thisViewInfo.type = info.type;\r\n            thisViewInfo.format = info.format;\r\n            thisViewInfo.baseLevel = 0;\r\n            thisViewInfo.levelCount = info.levelCount;\r\n            thisViewInfo.baseLayer = 0;\r\n            thisViewInfo.layerCount = info.layerCount;\r\n        } else {\r\n            thisViewInfo.copy(viewInfo);\r\n            self._lodLevel = viewInfo.baseLevel;\r\n            self._gpuTexture = (viewInfo.texture as WebGLTexture)._gpuTexture;\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        const self = this;\r\n        const { instance } = WebGLDeviceManager;\r\n        if (!self._isTextureView && self._gpuTexture) {\r\n            WebGLCmdFuncDestroyTexture(instance, self._gpuTexture);\r\n            instance.memoryStatus.textureSize -= self._size;\r\n            self._gpuTexture = null;\r\n        }\r\n    }\r\n\r\n    public getTextureHandle (): number {\r\n        const gpuTexture = this._gpuTexture;\r\n        if (!gpuTexture) {\r\n            return 0;\r\n        }\r\n\r\n        if (gpuTexture.glTexture) {\r\n            return gpuTexture.glTexture as number;\r\n        } else if (gpuTexture.glRenderbuffer) {\r\n            return gpuTexture.glRenderbuffer as number;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public resize (width: number, height: number): void {\r\n        const self = this;\r\n        const { instance } = WebGLDeviceManager;\r\n        const thisTextureInfo = self._info;\r\n        if (thisTextureInfo.width === width && thisTextureInfo.height === height) {\r\n            return;\r\n        }\r\n\r\n        if (thisTextureInfo.levelCount === WebGLTexture.getLevelCount(thisTextureInfo.width, thisTextureInfo.height)) {\r\n            thisTextureInfo.levelCount = WebGLTexture.getLevelCount(width, height);\r\n        } else if (thisTextureInfo.levelCount > 1) {\r\n            thisTextureInfo.levelCount = Math.min(thisTextureInfo.levelCount, WebGLTexture.getLevelCount(width, height));\r\n        }\r\n\r\n        const oldSize = self._size;\r\n        thisTextureInfo.width = width;\r\n        thisTextureInfo.height = height;\r\n\r\n        self._size = FormatSurfaceSize(\r\n            thisTextureInfo.format,\r\n            self.width,\r\n            self.height,\r\n            self.depth,\r\n            thisTextureInfo.levelCount,\r\n        ) * thisTextureInfo.layerCount;\r\n\r\n        const thisGpuTexture = self._gpuTexture;\r\n        if (!self._isTextureView && thisGpuTexture) {\r\n            thisGpuTexture.width = width;\r\n            thisGpuTexture.height = height;\r\n            thisGpuTexture.size = self._size;\r\n            if (!thisGpuTexture.isSwapchainTexture) {\r\n                WebGLCmdFuncResizeTexture(instance, thisGpuTexture);\r\n                instance.memoryStatus.textureSize -= oldSize;\r\n                instance.memoryStatus.textureSize += self._size;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ======================= Swapchain Specific ======================= //\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public initAsSwapchainTexture (info: Readonly<ISwapchainTextureInfo>): void {\r\n        const texInfo = new TextureInfo();\r\n        texInfo.format = info.format;\r\n        texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;\r\n        texInfo.width = info.width;\r\n        texInfo.height = info.height;\r\n        this.initialize(texInfo, true);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ALIPAY, RUNTIME_BASED, BYTEDANCE, WECHAT, HUAWEI, EDITOR, TAOBAO, TAOBAO_MINIGAME, WECHAT_MINI_PROGRAM } from 'internal:constants';\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { WebGLStateCache } from './webgl-state-cache';\r\nimport { WebGLTexture } from './webgl-texture';\r\nimport { Format, TextureInfo, TextureFlagBit, TextureType, TextureUsageBit,\r\n    BufferTextureCopy, SwapchainInfo, SurfaceTransform } from '../base/define';\r\nimport { Swapchain } from '../base/swapchain';\r\nimport { IWebGLExtensions, WebGLDeviceManager } from './webgl-define';\r\nimport { BrowserType, OS } from '../../../pal/system-info/enum-type';\r\nimport { IWebGLBlitManager } from './webgl-gpu-objects';\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { macro } from '../../core/platform/macro';\r\nimport { debug, warn, warnID } from '../../core/platform/debug';\r\n\r\nconst eventWebGLContextLost = 'webglcontextlost';\r\n\r\nfunction initStates (gl: WebGLRenderingContext): void {\r\n    gl.activeTexture(WebGLConstants.TEXTURE0);\r\n    gl.pixelStorei(WebGLConstants.PACK_ALIGNMENT, 1);\r\n    gl.pixelStorei(WebGLConstants.UNPACK_ALIGNMENT, 1);\r\n    gl.pixelStorei(WebGLConstants.UNPACK_FLIP_Y_WEBGL, false);\r\n\r\n    gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, null);\r\n\r\n    // rasterizer state\r\n    gl.enable(WebGLConstants.SCISSOR_TEST);\r\n    gl.enable(WebGLConstants.CULL_FACE);\r\n    gl.cullFace(WebGLConstants.BACK);\r\n    gl.frontFace(WebGLConstants.CCW);\r\n    gl.disable(WebGLConstants.POLYGON_OFFSET_FILL);\r\n    gl.polygonOffset(0.0, 0.0);\r\n\r\n    // depth stencil state\r\n    gl.enable(WebGLConstants.DEPTH_TEST);\r\n    gl.depthMask(true);\r\n    gl.depthFunc(WebGLConstants.LESS);\r\n    gl.depthRange(0.0, 1.0);\r\n\r\n    gl.stencilFuncSeparate(WebGLConstants.FRONT, WebGLConstants.ALWAYS, 1, 0xffff);\r\n    gl.stencilOpSeparate(WebGLConstants.FRONT, WebGLConstants.KEEP, WebGLConstants.KEEP, WebGLConstants.KEEP);\r\n    gl.stencilMaskSeparate(WebGLConstants.FRONT, 0xffff);\r\n    gl.stencilFuncSeparate(WebGLConstants.BACK, WebGLConstants.ALWAYS, 1, 0xffff);\r\n    gl.stencilOpSeparate(WebGLConstants.BACK, WebGLConstants.KEEP, WebGLConstants.KEEP, WebGLConstants.KEEP);\r\n    gl.stencilMaskSeparate(WebGLConstants.BACK, 0xffff);\r\n\r\n    gl.disable(WebGLConstants.STENCIL_TEST);\r\n\r\n    // blend state\r\n    gl.disable(WebGLConstants.SAMPLE_ALPHA_TO_COVERAGE);\r\n    gl.disable(WebGLConstants.BLEND);\r\n    gl.blendEquationSeparate(WebGLConstants.FUNC_ADD, WebGLConstants.FUNC_ADD);\r\n    gl.blendFuncSeparate(WebGLConstants.ONE, WebGLConstants.ZERO, WebGLConstants.ONE, WebGLConstants.ZERO);\r\n    gl.colorMask(true, true, true, true);\r\n    gl.blendColor(0.0, 0.0, 0.0, 0.0);\r\n}\r\n\r\nfunction getExtension (gl: WebGLRenderingContext, ext: string): any {\r\n    const prefixes = ['', 'WEBKIT_', 'MOZ_'];\r\n    for (let i = 0; i < prefixes.length; ++i) {\r\n        const _ext = gl.getExtension(prefixes[i] + ext);\r\n        if (_ext) {\r\n            return _ext;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getExtensions (gl: WebGLRenderingContext): IWebGLExtensions {\r\n    const res: IWebGLExtensions = {\r\n        EXT_texture_filter_anisotropic: getExtension(gl, 'EXT_texture_filter_anisotropic'),\r\n        EXT_blend_minmax: getExtension(gl, 'EXT_blend_minmax'),\r\n        EXT_frag_depth: getExtension(gl, 'EXT_frag_depth'),\r\n        EXT_shader_texture_lod: getExtension(gl, 'EXT_shader_texture_lod'),\r\n        EXT_sRGB: getExtension(gl, 'EXT_sRGB'),\r\n        OES_vertex_array_object: getExtension(gl, 'OES_vertex_array_object'),\r\n        EXT_color_buffer_half_float: getExtension(gl, 'EXT_color_buffer_half_float'),\r\n        WEBGL_color_buffer_float: getExtension(gl, 'WEBGL_color_buffer_float'),\r\n        WEBGL_compressed_texture_etc1: getExtension(gl, 'WEBGL_compressed_texture_etc1'),\r\n        WEBGL_compressed_texture_etc: getExtension(gl, 'WEBGL_compressed_texture_etc'),\r\n        WEBGL_compressed_texture_pvrtc: getExtension(gl, 'WEBGL_compressed_texture_pvrtc'),\r\n        WEBGL_compressed_texture_s3tc: getExtension(gl, 'WEBGL_compressed_texture_s3tc'),\r\n        WEBGL_compressed_texture_s3tc_srgb: getExtension(gl, 'WEBGL_compressed_texture_s3tc_srgb'),\r\n        WEBGL_debug_shaders: getExtension(gl, 'WEBGL_debug_shaders'),\r\n        WEBGL_draw_buffers: getExtension(gl, 'WEBGL_draw_buffers'),\r\n        WEBGL_lose_context: getExtension(gl, 'WEBGL_lose_context'),\r\n        WEBGL_depth_texture: getExtension(gl, 'WEBGL_depth_texture'),\r\n        OES_texture_half_float: getExtension(gl, 'OES_texture_half_float'),\r\n        OES_texture_half_float_linear: getExtension(gl, 'OES_texture_half_float_linear'),\r\n        OES_texture_float: getExtension(gl, 'OES_texture_float'),\r\n        OES_texture_float_linear: getExtension(gl, 'OES_texture_float_linear'),\r\n        OES_standard_derivatives: getExtension(gl, 'OES_standard_derivatives'),\r\n        OES_element_index_uint: getExtension(gl, 'OES_element_index_uint'),\r\n        ANGLE_instanced_arrays: getExtension(gl, 'ANGLE_instanced_arrays'),\r\n        WEBGL_debug_renderer_info: getExtension(gl, 'WEBGL_debug_renderer_info'),\r\n        WEBGL_multi_draw: null,\r\n        WEBGL_compressed_texture_astc: null,\r\n        destroyShadersImmediately: true,\r\n        noCompressedTexSubImage2D: false,\r\n        isLocationActive: (glLoc: unknown): glLoc is WebGLUniformLocation => !!glLoc,\r\n        useVAO: false,\r\n    };\r\n\r\n    // platform-specific extension hacks\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n        // iOS 14 browsers crash on getExtension('WEBGL_compressed_texture_astc')\r\n        if (systemInfo.os !== OS.IOS || systemInfo.osMainVersion !== 14 || !systemInfo.isBrowser) {\r\n            res.WEBGL_compressed_texture_astc = getExtension(gl, 'WEBGL_compressed_texture_astc');\r\n        }\r\n\r\n        // Mobile implementation seems to have performance issues\r\n        if (systemInfo.os !== OS.ANDROID && systemInfo.os !== OS.IOS) {\r\n            res.WEBGL_multi_draw = getExtension(gl, 'WEBGL_multi_draw');\r\n        }\r\n\r\n        // UC browser instancing implementation doesn't work\r\n        if (systemInfo.browserType === BrowserType.UC) {\r\n            res.ANGLE_instanced_arrays = null;\r\n        }\r\n\r\n        // bytedance ios depth texture implementation doesn't work\r\n        if (BYTEDANCE && systemInfo.os === OS.IOS) {\r\n            res.WEBGL_depth_texture = null;\r\n        }\r\n\r\n        if (RUNTIME_BASED) {\r\n            // VAO implementations doesn't work well on some runtime platforms\r\n            if (HUAWEI) {\r\n                res.OES_vertex_array_object = null;\r\n            }\r\n        }\r\n\r\n        // some earlier version of iOS and android wechat implement gl.detachShader incorrectly\r\n        if ((systemInfo.os === OS.IOS && systemInfo.osMainVersion <= 10)\r\n            || ((WECHAT || WECHAT_MINI_PROGRAM) && systemInfo.os === OS.ANDROID)) {\r\n            res.destroyShadersImmediately = false;\r\n        }\r\n\r\n        // getUniformLocation has always been problematic because the\r\n        // paradigm differs from GLES, and many platforms get it wrong [eyerolling]\r\n        if (WECHAT || WECHAT_MINI_PROGRAM) {\r\n            // wEcHaT just returns { id: -1 } for inactive names\r\n            res.isLocationActive = (glLoc: unknown): glLoc is WebGLUniformLocation => !!glLoc && (glLoc as { id: number }).id !== -1;\r\n        }\r\n        if (ALIPAY) {\r\n            // aLiPaY just returns the location number directly on actual devices, and WebGLUniformLocation objects in simulators\r\n            res.isLocationActive = (glLoc: unknown): glLoc is WebGLUniformLocation => !!glLoc && glLoc !== -1 || glLoc === 0;\r\n        }\r\n\r\n        // compressedTexSubImage2D too\r\n        if (WECHAT || WECHAT_MINI_PROGRAM) {\r\n            res.noCompressedTexSubImage2D = true;\r\n        }\r\n\r\n        // HACK: on Taobao Android, some devices can't query texture float extension correctly, especially Huawei devices\r\n        // the query interface returns null.\r\n        if ((TAOBAO || TAOBAO_MINIGAME) && systemInfo.os === OS.ANDROID) {\r\n            res.OES_texture_half_float = { HALF_FLOAT_OES: 36193 };\r\n            res.OES_texture_half_float_linear = {};\r\n            res.OES_texture_float = {};\r\n            res.OES_texture_float_linear = {};\r\n        }\r\n    }\r\n\r\n    if (res.OES_vertex_array_object) {\r\n        res.useVAO = true;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport function getContext (canvas: HTMLCanvasElement): WebGLRenderingContext | null {\r\n    let context: WebGLRenderingContext | null = null;\r\n    try {\r\n        const webGLCtxAttribs: WebGLContextAttributes = {\r\n            alpha: macro.ENABLE_TRANSPARENT_CANVAS,\r\n            antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,\r\n            depth: true,\r\n            stencil: true,\r\n            premultipliedAlpha: false,\r\n            preserveDrawingBuffer: false,\r\n            powerPreference: 'default',\r\n            failIfMajorPerformanceCaveat: false,\r\n        };\r\n\r\n        context = canvas.getContext('webgl', webGLCtxAttribs);\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGLSwapchain extends Swapchain {\r\n    get extensions (): IWebGLExtensions {\r\n        return this._extensions as IWebGLExtensions;\r\n    }\r\n\r\n    get blitManager (): IWebGLBlitManager {\r\n        return this._blitManager!;\r\n    }\r\n\r\n    public stateCache: WebGLStateCache = new WebGLStateCache();\r\n    public nullTex2D: WebGLTexture = null!;\r\n    public nullTexCube: WebGLTexture = null!;\r\n\r\n    private _canvas: HTMLCanvasElement | null = null;\r\n    private _webGLContextLostHandler: ((event: Event) => void) | null = null;\r\n    private _extensions: IWebGLExtensions | null = null;\r\n    private _blitManager: IWebGLBlitManager | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<SwapchainInfo>): void {\r\n        const self = this;\r\n        self._canvas = info.windowHandle;\r\n\r\n        self._webGLContextLostHandler = self._onWebGLContextLost.bind(self);\r\n        self._canvas.addEventListener(eventWebGLContextLost, self._webGLContextLostHandler);\r\n\r\n        const { instance } = WebGLDeviceManager;\r\n        const { gl, capabilities } = instance;\r\n\r\n        self.stateCache.initialize(capabilities.maxTextureUnits, capabilities.maxVertexAttributes);\r\n\r\n        self._extensions = getExtensions(gl);\r\n\r\n        // init states\r\n        initStates(gl);\r\n\r\n        const colorFmt = Format.RGBA8;\r\n        let depthStencilFmt = Format.DEPTH_STENCIL;\r\n\r\n        let depthBits = gl.getParameter(WebGLConstants.DEPTH_BITS);\r\n        const stencilBits = gl.getParameter(WebGLConstants.STENCIL_BITS);\r\n\r\n        if (ALIPAY) {\r\n            depthBits = 24;\r\n        }\r\n\r\n        if (depthBits && stencilBits) depthStencilFmt = Format.DEPTH_STENCIL;\r\n        else if (depthBits) depthStencilFmt = Format.DEPTH;\r\n\r\n        self._colorTexture = new WebGLTexture();\r\n        self._colorTexture.initAsSwapchainTexture({\r\n            swapchain: self,\r\n            format: colorFmt,\r\n            width: info.width,\r\n            height: info.height,\r\n        });\r\n\r\n        self._depthStencilTexture = new WebGLTexture();\r\n        self._depthStencilTexture.initAsSwapchainTexture({\r\n            swapchain: self,\r\n            format: depthStencilFmt,\r\n            width: info.width,\r\n            height: info.height,\r\n        });\r\n\r\n        // create default null texture\r\n        self.nullTex2D = instance.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.SAMPLED,\r\n            Format.RGBA8,\r\n            2,\r\n            2,\r\n            TextureFlagBit.GEN_MIPMAP,\r\n        )) as WebGLTexture;\r\n\r\n        self.nullTexCube = instance.createTexture(new TextureInfo(\r\n            TextureType.CUBE,\r\n            TextureUsageBit.SAMPLED,\r\n            Format.RGBA8,\r\n            2,\r\n            2,\r\n            TextureFlagBit.GEN_MIPMAP,\r\n            6,\r\n        )) as WebGLTexture;\r\n\r\n        const nullTexRegion = new BufferTextureCopy();\r\n        nullTexRegion.texExtent.width = 2;\r\n        nullTexRegion.texExtent.height = 2;\r\n\r\n        const nullTexBuff = new Uint8Array(self.nullTex2D.size);\r\n        nullTexBuff.fill(0);\r\n        instance.copyBuffersToTexture([nullTexBuff], self.nullTex2D, [nullTexRegion]);\r\n\r\n        nullTexRegion.texSubres.layerCount = 6;\r\n        instance.copyBuffersToTexture(\r\n            [nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff],\r\n            self.nullTexCube,\r\n            [nullTexRegion],\r\n        );\r\n        self._blitManager = new IWebGLBlitManager();\r\n    }\r\n\r\n    public destroy (): void {\r\n        const self = this;\r\n        if (self._canvas && self._webGLContextLostHandler) {\r\n            self._canvas.removeEventListener(eventWebGLContextLost, self._webGLContextLostHandler);\r\n            self._webGLContextLostHandler = null;\r\n        }\r\n\r\n        if (self.nullTex2D) {\r\n            self.nullTex2D.destroy();\r\n            self.nullTex2D = null!;\r\n        }\r\n\r\n        if (self.nullTexCube) {\r\n            self.nullTexCube.destroy();\r\n            self.nullTexCube = null!;\r\n        }\r\n\r\n        if (self._blitManager) {\r\n            self._blitManager.destroy();\r\n            self._blitManager = null!;\r\n        }\r\n\r\n        self._extensions = null;\r\n        self._canvas = null;\r\n    }\r\n\r\n    public resize (width: number, height: number, surfaceTransform: SurfaceTransform): void {\r\n        const self = this;\r\n        if (self._colorTexture.width !== width || self._colorTexture.height !== height) {\r\n            debug(`Resizing swapchain: ${width}x${height}`);\r\n            self._canvas!.width = width;\r\n            self._canvas!.height = height;\r\n            self._colorTexture.resize(width, height);\r\n            self._depthStencilTexture.resize(width, height);\r\n        }\r\n    }\r\n\r\n    private _onWebGLContextLost (event: Event): void {\r\n        warnID(11000);\r\n        warn(event);\r\n        // 2020.9.3: `preventDefault` is not available on some platforms\r\n        // event.preventDefault();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { PipelineLayout } from '../base/pipeline-layout';\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Device } from '../base/device';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { PipelineState, PipelineStateInfo } from '../base/pipeline-state';\r\nimport { Queue } from '../base/queue';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { Sampler } from '../base/states/sampler';\r\nimport { Shader } from '../base/shader';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGLDescriptorSet } from './webgl-descriptor-set';\r\nimport { WebGLBuffer } from './webgl-buffer';\r\nimport { WebGLCommandBuffer } from './webgl-command-buffer';\r\nimport { WebGLFramebuffer } from './webgl-framebuffer';\r\nimport { WebGLInputAssembler } from './webgl-input-assembler';\r\nimport { WebGLDescriptorSetLayout } from './webgl-descriptor-set-layout';\r\nimport { WebGLPipelineLayout } from './webgl-pipeline-layout';\r\nimport { WebGLPipelineState } from './webgl-pipeline-state';\r\nimport { WebGLPrimaryCommandBuffer } from './webgl-primary-command-buffer';\r\nimport { WebGLQueue } from './webgl-queue';\r\nimport { WebGLRenderPass } from './webgl-render-pass';\r\nimport { WebGLSampler } from './states/webgl-sampler';\r\nimport { WebGLShader } from './webgl-shader';\r\nimport { getContext, getExtensions, WebGLSwapchain } from './webgl-swapchain';\r\nimport { WebGLTexture } from './webgl-texture';\r\nimport {\r\n    CommandBufferType, ShaderInfo,\r\n    QueueInfo, CommandBufferInfo, DescriptorSetInfo, DescriptorSetLayoutInfo, FramebufferInfo, InputAssemblerInfo, PipelineLayoutInfo,\r\n    RenderPassInfo, SamplerInfo, TextureInfo, TextureViewInfo, BufferInfo, BufferViewInfo, DeviceInfo, TextureBarrierInfo, GeneralBarrierInfo,\r\n    BufferBarrierInfo, QueueType, API, Feature, BufferTextureCopy, SwapchainInfo, FormatFeature, FormatFeatureBit, Format,\r\n} from '../base/define';\r\nimport { WebGLCmdFuncCopyBuffersToTexture, WebGLCmdFuncCopyTextureToBuffers, WebGLCmdFuncCopyTexImagesToTexture } from './webgl-commands';\r\nimport { GeneralBarrier } from '../base/states/general-barrier';\r\nimport { TextureBarrier } from '../base/states/texture-barrier';\r\nimport { BufferBarrier } from '../base/states/buffer-barrier';\r\nimport { Swapchain } from '../base/swapchain';\r\nimport { IWebGLExtensions, WebGLDeviceManager } from './webgl-define';\r\nimport { IWebGLBindingMapping, IWebGLBlitManager } from './webgl-gpu-objects';\r\nimport type { WebGLStateCache } from './webgl-state-cache';\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { debug, errorID } from '../../core/platform/debug';\r\n\r\nfunction setFormatFeature (formatFeatures: FormatFeature[], indexArray: Format[], feature: FormatFeature): void {\r\n    for (let i = 0; i < indexArray.length; ++i) {\r\n        formatFeatures[indexArray[i]] = feature;\r\n    }\r\n}\r\n\r\nfunction setFormatFeatureBitwiseOr (formatFeatures: FormatFeature[], indexArray: Format[], feature: FormatFeature): void {\r\n    for (let i = 0; i < indexArray.length; ++i) {\r\n        formatFeatures[indexArray[i]] |= feature;\r\n    }\r\n}\r\n\r\nfunction setTextureExclusive (textureExclusive: boolean[], indexArray: Format[], isExclusive: boolean): void {\r\n    for (let i = 0; i < indexArray.length; ++i) {\r\n        textureExclusive[indexArray[i]] = isExclusive;\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGLDevice extends Device {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get gl (): WebGLRenderingContext {\r\n        return this._context!;\r\n    }\r\n\r\n    get extensions (): IWebGLExtensions {\r\n        return this._swapchain!.extensions;\r\n    }\r\n\r\n    get stateCache (): WebGLStateCache {\r\n        return this._swapchain!.stateCache;\r\n    }\r\n\r\n    get nullTex2D (): WebGLTexture {\r\n        return this._swapchain!.nullTex2D;\r\n    }\r\n\r\n    get nullTexCube (): WebGLTexture {\r\n        return this._swapchain!.nullTexCube;\r\n    }\r\n\r\n    get textureExclusive (): boolean[] {\r\n        return this._textureExclusive;\r\n    }\r\n\r\n    get bindingMappings (): IWebGLBindingMapping {\r\n        return this._bindingMappings!;\r\n    }\r\n\r\n    get blitManager (): IWebGLBlitManager {\r\n        return this._swapchain!.blitManager;\r\n    }\r\n\r\n    private _swapchain: WebGLSwapchain | null = null;\r\n    private _context: WebGLRenderingContext | null = null;\r\n    private _bindingMappings: IWebGLBindingMapping | null = null;\r\n\r\n    protected _textureExclusive = new Array<boolean>(Format.COUNT);\r\n\r\n    public initialize (info: Readonly<DeviceInfo>): boolean {\r\n        WebGLDeviceManager.setInstance(this);\r\n        this._gfxAPI = API.WEBGL;\r\n\r\n        const mapping = this._bindingMappingInfo = info.bindingMappingInfo;\r\n        const blockOffsets: number[] = [];\r\n        const samplerTextureOffsets: number[] = [];\r\n        const firstSet = mapping.setIndices[0];\r\n        blockOffsets[firstSet] = 0;\r\n        samplerTextureOffsets[firstSet] = 0;\r\n        for (let i = 1; i < mapping.setIndices.length; ++i) {\r\n            const curSet = mapping.setIndices[i];\r\n            const prevSet = mapping.setIndices[i - 1];\r\n            // accumulate the per set offset according to the specified capacity\r\n            blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];\r\n            samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];\r\n        }\r\n        for (let i = 0; i < mapping.setIndices.length; ++i) {\r\n            const curSet = mapping.setIndices[i];\r\n            // textures always come after UBOs\r\n            samplerTextureOffsets[curSet] -= mapping.maxBlockCounts[curSet];\r\n        }\r\n        this._bindingMappings = {\r\n            blockOffsets,\r\n            samplerTextureOffsets,\r\n            flexibleSet: mapping.setIndices[mapping.setIndices.length - 1],\r\n        };\r\n\r\n        const gl = this._context = getContext(Device.canvas);\r\n\r\n        if (!gl) {\r\n            errorID(16333);\r\n            return false;\r\n        }\r\n\r\n        // create queue\r\n        this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));\r\n        this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));\r\n\r\n        const glGetParameter = gl.getParameter.bind(gl);\r\n\r\n        const caps = this._caps;\r\n        caps.maxVertexAttributes = glGetParameter(WebGLConstants.MAX_VERTEX_ATTRIBS);\r\n        caps.maxVertexUniformVectors = glGetParameter(WebGLConstants.MAX_VERTEX_UNIFORM_VECTORS);\r\n        caps.maxFragmentUniformVectors = glGetParameter(WebGLConstants.MAX_FRAGMENT_UNIFORM_VECTORS);\r\n        caps.maxTextureUnits = glGetParameter(WebGLConstants.MAX_TEXTURE_IMAGE_UNITS);\r\n        caps.maxVertexTextureUnits = glGetParameter(WebGLConstants.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\r\n        caps.maxTextureSize = glGetParameter(WebGLConstants.MAX_TEXTURE_SIZE);\r\n        caps.maxCubeMapTextureSize = glGetParameter(WebGLConstants.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n        caps.maxArrayTextureLayers = 0;\r\n        caps.max3DTextureSize = 0;\r\n        // WebGL doesn't support UBOs at all, so here we return\r\n        // the guaranteed minimum number of available bindings in WebGL2\r\n        caps.maxUniformBufferBindings = 16;\r\n\r\n        const extensions = gl.getSupportedExtensions();\r\n        let extStr = '';\r\n        if (extensions) {\r\n            extensions.forEach((ext) => {\r\n                extStr += `${ext} `;\r\n            });\r\n        }\r\n\r\n        const exts = getExtensions(gl);\r\n\r\n        if (exts.WEBGL_debug_renderer_info) {\r\n            this._renderer = glGetParameter(exts.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);\r\n            this._vendor = glGetParameter(exts.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);\r\n        } else {\r\n            this._renderer = glGetParameter(WebGLConstants.RENDERER);\r\n            this._vendor = glGetParameter(WebGLConstants.VENDOR);\r\n        }\r\n\r\n        const version: string = glGetParameter(WebGLConstants.VERSION);\r\n        const features = this._features;\r\n        features.fill(false);\r\n\r\n        this.initFormatFeatures(exts);\r\n\r\n        if (exts.EXT_blend_minmax) {\r\n            features[Feature.BLEND_MINMAX] = true;\r\n        }\r\n\r\n        if (exts.OES_element_index_uint) {\r\n            features[Feature.ELEMENT_INDEX_UINT] = true;\r\n        }\r\n\r\n        if (exts.ANGLE_instanced_arrays) {\r\n            features[Feature.INSTANCED_ARRAYS] = true;\r\n        }\r\n\r\n        if (exts.WEBGL_draw_buffers) {\r\n            features[Feature.MULTIPLE_RENDER_TARGETS] = true;\r\n        }\r\n\r\n        let compressedFormat = '';\r\n\r\n        if (this.getFormatFeatures(Format.ETC_RGB8)) {\r\n            compressedFormat += 'etc1 ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.ETC2_RGB8)) {\r\n            compressedFormat += 'etc2 ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.BC1)) {\r\n            compressedFormat += 'dxt ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.PVRTC_RGB2)) {\r\n            compressedFormat += 'pvrtc ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {\r\n            compressedFormat += 'astc ';\r\n        }\r\n\r\n        debug('WebGL device initialized.');\r\n        debug(`RENDERER: ${this._renderer}`);\r\n        debug(`VENDOR: ${this._vendor}`);\r\n        debug(`VERSION: ${version}`);\r\n        debug(`COMPRESSED_FORMAT: ${compressedFormat}`);\r\n        debug(`EXTENSIONS: ${extStr}`);\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._queue) {\r\n            this._queue.destroy();\r\n            this._queue = null;\r\n        }\r\n\r\n        if (this._cmdBuff) {\r\n            this._cmdBuff.destroy();\r\n            this._cmdBuff = null;\r\n        }\r\n\r\n        this._swapchain = null;\r\n    }\r\n\r\n    public flushCommands (cmdBuffs: CommandBuffer[]): void {\r\n        // noop\r\n    }\r\n\r\n    public acquire (swapchains: Swapchain[]): void {\r\n        // noop\r\n    }\r\n\r\n    public present (): void {\r\n        const queue = (this._queue as WebGLQueue);\r\n        this._numDrawCalls = queue.numDrawCalls;\r\n        this._numInstances = queue.numInstances;\r\n        this._numTris = queue.numTris;\r\n        queue.clear();\r\n    }\r\n\r\n    protected initFormatFeatures (exts: IWebGLExtensions): void {\r\n        const formatFeatures = this._formatFeatures;\r\n        formatFeatures.fill(FormatFeatureBit.NONE);\r\n\r\n        const textureExclusive = this._textureExclusive;\r\n        textureExclusive.fill(true);\r\n\r\n        const tempFeature: FormatFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.RGB8,\r\n            Format.R5G6B5,\r\n            Format.RGBA8,\r\n            Format.RGBA4,\r\n            Format.RGB5A1,\r\n        ], tempFeature);\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.DEPTH,\r\n            Format.DEPTH_STENCIL,\r\n        ], FormatFeatureBit.RENDER_TARGET);\r\n\r\n        setTextureExclusive(textureExclusive, [\r\n            Format.R5G6B5,\r\n            Format.RGBA4,\r\n            Format.RGB5A1,\r\n            Format.DEPTH,\r\n            Format.DEPTH_STENCIL,\r\n        ], false);\r\n\r\n        setFormatFeatureBitwiseOr(formatFeatures, [\r\n            Format.R8I,\r\n            Format.RG8I,\r\n            Format.RGB8I,\r\n            Format.RGBA8I,\r\n\r\n            Format.R8UI,\r\n            Format.RG8UI,\r\n            Format.RGB8UI,\r\n            Format.RGBA8UI,\r\n\r\n            Format.R8I,\r\n            Format.RG8I,\r\n            Format.RGB8I,\r\n            Format.RGBA8I,\r\n\r\n            Format.R8UI,\r\n            Format.RG8UI,\r\n            Format.RGB8UI,\r\n            Format.RGBA8UI,\r\n\r\n            Format.R32F,\r\n            Format.RG32F,\r\n            Format.RGB32F,\r\n            Format.RGBA32F,\r\n        ], FormatFeatureBit.VERTEX_ATTRIBUTE);\r\n\r\n        if (exts.EXT_sRGB) {\r\n            formatFeatures[Format.SRGB8] = tempFeature;\r\n            formatFeatures[Format.SRGB8_A8] = tempFeature;\r\n\r\n            textureExclusive[Format.SRGB8_A8] = false;\r\n        }\r\n\r\n        if (exts.WEBGL_depth_texture) {\r\n            formatFeatures[Format.DEPTH] |= tempFeature;\r\n            formatFeatures[Format.DEPTH_STENCIL] |= tempFeature;\r\n        }\r\n\r\n        if (exts.WEBGL_color_buffer_float) {\r\n            formatFeatures[Format.RGB32F] |= FormatFeatureBit.RENDER_TARGET;\r\n            formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET;\r\n            textureExclusive[Format.RGB32F] = false;\r\n            textureExclusive[Format.RGBA32F] = false;\r\n        }\r\n\r\n        if (exts.EXT_color_buffer_half_float) {\r\n            formatFeatures[Format.RGB16F] |= FormatFeatureBit.RENDER_TARGET;\r\n            formatFeatures[Format.RGBA16F] |= FormatFeatureBit.RENDER_TARGET;\r\n            textureExclusive[Format.RGB16F] = false;\r\n            textureExclusive[Format.RGBA16F] = false;\r\n        }\r\n\r\n        if (exts.OES_texture_float) {\r\n            formatFeatures[Format.RGB32F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;\r\n            formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;\r\n        }\r\n\r\n        if (exts.OES_texture_half_float) {\r\n            formatFeatures[Format.RGB16F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;\r\n            formatFeatures[Format.RGBA16F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;\r\n        }\r\n\r\n        if (exts.OES_texture_float_linear) {\r\n            formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n        }\r\n\r\n        if (exts.OES_texture_half_float_linear) {\r\n            formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n        }\r\n\r\n        const compressedFeature: FormatFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        if (exts.WEBGL_compressed_texture_etc1) {\r\n            formatFeatures[Format.ETC_RGB8] = compressedFeature;\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_etc) {\r\n            setFormatFeature(formatFeatures, [\r\n                Format.ETC2_RGB8,\r\n                Format.ETC2_RGBA8,\r\n                Format.ETC2_SRGB8,\r\n                Format.ETC2_SRGB8_A8,\r\n                Format.ETC2_RGB8_A1,\r\n                Format.ETC2_SRGB8_A1,\r\n            ], compressedFeature);\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_s3tc) {\r\n            setFormatFeature(formatFeatures, [\r\n                Format.BC1,\r\n                Format.BC1_ALPHA,\r\n                Format.BC1_SRGB,\r\n                Format.BC1_SRGB_ALPHA,\r\n                Format.BC2,\r\n                Format.BC2_SRGB,\r\n                Format.BC3,\r\n                Format.BC3_SRGB,\r\n            ], compressedFeature);\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_pvrtc) {\r\n            setFormatFeatureBitwiseOr(formatFeatures, [\r\n                Format.PVRTC_RGB2,\r\n                Format.PVRTC_RGBA2,\r\n                Format.PVRTC_RGB4,\r\n                Format.PVRTC_RGBA4,\r\n            ], compressedFeature);\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_astc) {\r\n            setFormatFeatureBitwiseOr(formatFeatures, [\r\n                Format.ASTC_RGBA_4X4,\r\n                Format.ASTC_RGBA_5X4,\r\n                Format.ASTC_RGBA_5X5,\r\n                Format.ASTC_RGBA_6X5,\r\n                Format.ASTC_RGBA_6X6,\r\n                Format.ASTC_RGBA_8X5,\r\n                Format.ASTC_RGBA_8X6,\r\n                Format.ASTC_RGBA_8X8,\r\n                Format.ASTC_RGBA_10X5,\r\n                Format.ASTC_RGBA_10X6,\r\n                Format.ASTC_RGBA_10X8,\r\n                Format.ASTC_RGBA_10X10,\r\n                Format.ASTC_RGBA_12X10,\r\n                Format.ASTC_RGBA_12X12,\r\n\r\n                Format.ASTC_SRGBA_4X4,\r\n                Format.ASTC_SRGBA_5X4,\r\n                Format.ASTC_SRGBA_5X5,\r\n                Format.ASTC_SRGBA_6X5,\r\n                Format.ASTC_SRGBA_6X6,\r\n                Format.ASTC_SRGBA_8X5,\r\n                Format.ASTC_SRGBA_8X6,\r\n                Format.ASTC_SRGBA_8X8,\r\n                Format.ASTC_SRGBA_10X5,\r\n                Format.ASTC_SRGBA_10X6,\r\n                Format.ASTC_SRGBA_10X8,\r\n                Format.ASTC_SRGBA_10X10,\r\n                Format.ASTC_SRGBA_12X10,\r\n                Format.ASTC_SRGBA_12X12,\r\n            ], compressedFeature);\r\n        }\r\n    }\r\n\r\n    public createCommandBuffer (info: Readonly<CommandBufferInfo>): CommandBuffer {\r\n        // const Ctor = WebGLCommandBuffer; // opt to instant invocation\r\n        const Ctor = info.type === CommandBufferType.PRIMARY ? WebGLPrimaryCommandBuffer : WebGLCommandBuffer;\r\n        const cmdBuff = new Ctor();\r\n        cmdBuff.initialize(info);\r\n        return cmdBuff;\r\n    }\r\n\r\n    public createSwapchain (info: Readonly<SwapchainInfo>): Swapchain {\r\n        const swapchain = new WebGLSwapchain();\r\n        this._swapchain = swapchain;\r\n        swapchain.initialize(info);\r\n        return swapchain;\r\n    }\r\n\r\n    public createBuffer (info: Readonly<BufferInfo> | Readonly<BufferViewInfo>): Buffer {\r\n        const buffer = new WebGLBuffer();\r\n        buffer.initialize(info);\r\n        return buffer;\r\n    }\r\n\r\n    public createTexture (info: Readonly<TextureInfo> | Readonly<TextureViewInfo>): Texture {\r\n        const texture = new WebGLTexture();\r\n        texture.initialize(info);\r\n        return texture;\r\n    }\r\n\r\n    public createDescriptorSet (info: Readonly<DescriptorSetInfo>): DescriptorSet {\r\n        const descriptorSet = new WebGLDescriptorSet();\r\n        descriptorSet.initialize(info);\r\n        return descriptorSet;\r\n    }\r\n\r\n    public createShader (info: Readonly<ShaderInfo>): Shader {\r\n        const shader = new WebGLShader();\r\n        shader.initialize(info);\r\n        return shader;\r\n    }\r\n\r\n    public createInputAssembler (info: Readonly<InputAssemblerInfo>): InputAssembler {\r\n        const inputAssembler = new WebGLInputAssembler();\r\n        inputAssembler.initialize(info);\r\n        return inputAssembler;\r\n    }\r\n\r\n    public createRenderPass (info: Readonly<RenderPassInfo>): RenderPass {\r\n        const renderPass = new WebGLRenderPass();\r\n        renderPass.initialize(info);\r\n        return renderPass;\r\n    }\r\n\r\n    public createFramebuffer (info: Readonly<FramebufferInfo>): Framebuffer {\r\n        const framebuffer = new WebGLFramebuffer();\r\n        framebuffer.initialize(info);\r\n        return framebuffer;\r\n    }\r\n\r\n    public createDescriptorSetLayout (info: Readonly<DescriptorSetLayoutInfo>): DescriptorSetLayout {\r\n        const descriptorSetLayout = new WebGLDescriptorSetLayout();\r\n        descriptorSetLayout.initialize(info);\r\n        return descriptorSetLayout;\r\n    }\r\n\r\n    public createPipelineLayout (info: Readonly<PipelineLayoutInfo>): PipelineLayout {\r\n        const pipelineLayout = new WebGLPipelineLayout();\r\n        pipelineLayout.initialize(info);\r\n        return pipelineLayout;\r\n    }\r\n\r\n    public createPipelineState (info: Readonly<PipelineStateInfo>): PipelineState {\r\n        const pipelineState = new WebGLPipelineState();\r\n        pipelineState.initialize(info);\r\n        return pipelineState;\r\n    }\r\n\r\n    public createQueue (info: Readonly<QueueInfo>): Queue {\r\n        const queue = new WebGLQueue();\r\n        queue.initialize(info);\r\n        return queue;\r\n    }\r\n\r\n    public getSampler (info: Readonly<SamplerInfo>): Sampler {\r\n        const hash = Sampler.computeHash(info);\r\n        if (!this._samplers.has(hash)) {\r\n            this._samplers.set(hash, new WebGLSampler(info, hash));\r\n        }\r\n        return this._samplers.get(hash)!;\r\n    }\r\n\r\n    public getSwapchains (): Readonly<Swapchain[]> {\r\n        return [this._swapchain as Swapchain];\r\n    }\r\n\r\n    public getGeneralBarrier (info: Readonly<GeneralBarrierInfo>): GeneralBarrier {\r\n        const hash = GeneralBarrier.computeHash(info);\r\n        if (!this._generalBarrierss.has(hash)) {\r\n            this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));\r\n        }\r\n        return this._generalBarrierss.get(hash)!;\r\n    }\r\n\r\n    public getTextureBarrier (info: Readonly<TextureBarrierInfo>): TextureBarrier {\r\n        const hash = TextureBarrier.computeHash(info);\r\n        if (!this._textureBarriers.has(hash)) {\r\n            this._textureBarriers.set(hash, new TextureBarrier(info, hash));\r\n        }\r\n        return this._textureBarriers.get(hash)!;\r\n    }\r\n\r\n    public getBufferBarrier (info: Readonly<BufferBarrierInfo>): BufferBarrier {\r\n        const hash = BufferBarrier.computeHash(info);\r\n        if (!this._bufferBarriers.has(hash)) {\r\n            this._bufferBarriers.set(hash, new BufferBarrier(info, hash));\r\n        }\r\n        return this._bufferBarriers.get(hash)!;\r\n    }\r\n\r\n    public copyBuffersToTexture (buffers: Readonly<ArrayBufferView[]>, texture: Texture, regions: Readonly<BufferTextureCopy[]>): void {\r\n        WebGLCmdFuncCopyBuffersToTexture(\r\n            this,\r\n            buffers as ArrayBufferView[],\r\n            (texture as WebGLTexture).gpuTexture,\r\n            regions,\r\n        );\r\n    }\r\n\r\n    public copyTextureToBuffers (texture: Readonly<Texture>, buffers: ArrayBufferView[], regions: Readonly<BufferTextureCopy[]>): void {\r\n        WebGLCmdFuncCopyTextureToBuffers(\r\n            this,\r\n            (texture as WebGLTexture).gpuTexture,\r\n            buffers,\r\n            regions,\r\n        );\r\n    }\r\n\r\n    public copyTexImagesToTexture (\r\n        texImages: Readonly<TexImageSource[]>,\r\n        texture: Texture,\r\n        regions: Readonly<BufferTextureCopy[]>,\r\n    ): void {\r\n        WebGLCmdFuncCopyTexImagesToTexture(\r\n            this,\r\n            texImages,\r\n            (texture as WebGLTexture).gpuTexture,\r\n            regions,\r\n        );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated engine source code (the \"Software\"), a limited,\r\n worldwide, royalty-free, non-assignable, revocable and non-exclusive license\r\n to use Cocos Creator solely to develop games on your target platforms. You shall\r\n not use Cocos Creator software for developing other software or tools that's\r\n used for developing games. You are not granted to publish, distribute,\r\n sublicense, and/or sell copies of Cocos Creator.\r\n\r\n The software or tools in this License Agreement are licensed, not sold.\r\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\r\n\r\nimport { WebGLDevice } from '../cocos/gfx/webgl/webgl-device';\r\nimport { legacyCC } from '../cocos/core/global-exports';\r\n\r\nexport { WebGLDevice };\r\nlegacyCC.WebGLDevice = WebGLDevice;\r\n"],"names":["WebGLEXT","WebGLDescriptorSet","_DescriptorSet","_this","call","this","_gpuDescriptorSet","_inheritsLoose","_proto","prototype","initialize","info","_layout","layout","_gpuDescriptorSetLayo","gpuDescriptorSetLayout","bindings","descriptorIndices","descriptorCount","_buffers","Array","fill","_textures","_samplers","gpuDescriptors","i","length","binding","j","count","gpuDescriptor","type","descriptorType","gpuBuffer","gpuTexture","gpuSampler","push","destroy","update","_isDirty","descriptors","DESCRIPTOR_BUFFER_TYPE","buffer","gpuBufferView","DESCRIPTOR_SAMPLER_TYPE","_createClass","key","get","DescriptorSet","WebGLDeviceManager","setInstance","instance","_instance","max","Math","min","GFXFormatToWebGLType","format","Format","R8","WebGLConstants","UNSIGNED_BYTE","R8SN","BYTE","R8UI","R8I","R16F","HALF_FLOAT_OES","R16UI","UNSIGNED_SHORT","R16I","SHORT","R32F","FLOAT","R32UI","UNSIGNED_INT","R32I","INT","RG8","RG8SN","RG8UI","RG8I","RG16F","RG16UI","RG16I","RG32F","RG32UI","RG32I","RGB8","SRGB8","RGB8SN","RGB8UI","RGB8I","RGB16F","RGB16UI","RGB16I","RGB32F","RGB32UI","RGB32I","BGRA8","RGBA8","SRGB8_A8","RGBA8SN","RGBA8UI","RGBA8I","RGBA16F","RGBA16UI","RGBA16I","RGBA32F","RGBA32UI","RGBA32I","R5G6B5","UNSIGNED_SHORT_5_6_5","R11G11B10F","RGB5A1","UNSIGNED_SHORT_5_5_5_1","RGBA4","UNSIGNED_SHORT_4_4_4_4","RGB10A2","RGB10A2UI","RGB9E5","DEPTH","DEPTH_STENCIL","UNSIGNED_INT_24_8_WEBGL","BC1","BC1_SRGB","BC2","BC2_SRGB","BC3","BC3_SRGB","BC4","BC4_SNORM","BC5","BC5_SNORM","BC6H_SF16","BC6H_UF16","BC7","BC7_SRGB","ETC_RGB8","ETC2_RGB8","ETC2_SRGB8","ETC2_RGB8_A1","ETC2_SRGB8_A1","EAC_R11","EAC_R11SN","EAC_RG11","EAC_RG11SN","PVRTC_RGB2","PVRTC_RGBA2","PVRTC_RGB4","PVRTC_RGBA4","PVRTC2_2BPP","PVRTC2_4BPP","ASTC_RGBA_4X4","ASTC_RGBA_5X4","ASTC_RGBA_5X5","ASTC_RGBA_6X5","ASTC_RGBA_6X6","ASTC_RGBA_8X5","ASTC_RGBA_8X6","ASTC_RGBA_8X8","ASTC_RGBA_10X5","ASTC_RGBA_10X6","ASTC_RGBA_10X8","ASTC_RGBA_10X10","ASTC_RGBA_12X10","ASTC_RGBA_12X12","ASTC_SRGBA_4X4","ASTC_SRGBA_5X4","ASTC_SRGBA_5X5","ASTC_SRGBA_6X5","ASTC_SRGBA_6X6","ASTC_SRGBA_8X5","ASTC_SRGBA_8X6","ASTC_SRGBA_8X8","ASTC_SRGBA_10X5","ASTC_SRGBA_10X6","ASTC_SRGBA_10X8","ASTC_SRGBA_10X10","ASTC_SRGBA_12X10","ASTC_SRGBA_12X12","GFXFormatToWebGLInternalFormat","RGB565","RGB5_A1","RGBA16F_EXT","RGBA32F_EXT","SRGB8_ALPHA8_EXT","DEPTH_COMPONENT16","errorID","RGBA","GFXFormatToWebGLFormat","A8","ALPHA","L8","LUMINANCE","LA8","LUMINANCE_ALPHA","RGB","DEPTH_COMPONENT","COMPRESSED_RGB_S3TC_DXT1_EXT","BC1_ALPHA","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_SRGB_S3TC_DXT1_EXT","BC1_SRGB_ALPHA","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA8","COMPRESSED_RGBA8_ETC2_EAC","ETC2_SRGB8_A8","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","GFXTypeToWebGLType","Type","BOOL","BOOL2","BOOL_VEC2","BOOL3","BOOL_VEC3","BOOL4","BOOL_VEC4","INT2","INT_VEC2","INT3","INT_VEC3","INT4","INT_VEC4","UINT","FLOAT2","FLOAT_VEC2","FLOAT3","FLOAT_VEC3","FLOAT4","FLOAT_VEC4","MAT2","FLOAT_MAT2","MAT3","FLOAT_MAT3","MAT4","FLOAT_MAT4","SAMPLER2D","SAMPLER_2D","SAMPLER_CUBE","UNKNOWN","GFXTypeToTypedArrayCtor","Int32Array","Float32Array","WebGLTypeToGFXType","glType","WebGLGetTypeSize","WebGLGetComponentCount","WebGLCmpFuncs","NEVER","LESS","EQUAL","LEQUAL","GREATER","NOTEQUAL","GEQUAL","ALWAYS","WebGLStencilOps","WebGLBlendOps","WebGLBlendFactors","WebGLCmdFuncCreateBuffer","device","gl","stateCache","glUsage","memUsage","MemoryUsageBit","HOST","DYNAMIC_DRAW","STATIC_DRAW","usage","BufferUsageBit","VERTEX","glTarget","ARRAY_BUFFER","glBuffer","createBuffer","size","extensions","useVAO","glVAO","OES_vertex_array_object","bindVertexArrayOES","gfxStateCache","gpuInputAssembler","glArrayBuffer","bindBuffer","bufferData","INDEX","ELEMENT_ARRAY_BUFFER","glElementArrayBuffer","UNIFORM","NONE","vf32","INDIRECT","TRANSFER_DST","TRANSFER_SRC","WebGLCmdFuncDestroyBuffer","cache","deleteBuffer","WebGLCmdFuncUpdateBuffer","offset","ArrayBuffer","isView","set","BYTES_PER_ELEMENT","indirects","clearDraws","drawInfos","setDrawInfo","buff","systemInfo","os","OS","IOS","byteLength","bufferSubData","slice","WebGLCmdFuncCreateTexture","glFormat","glInternalFmt","w","width","h","height","TextureType","TEX2D","TEXTURE_2D","maxSize","capabilities","maxTextureSize","textureExclusive","WEBGL_depth_texture","BYTEDANCE","FormatInfos","hasDepth","glTexture","createTexture","glTexUnit","glTexUnits","texUnit","bindTexture","isCompressed","mipLevel","imgSize","FormatSize","view","Uint8Array","compressedTexImage2D","texImage2D","isPowerOf2","glWrapS","REPEAT","glWrapT","CLAMP_TO_EDGE","glMinFilter","LINEAR","glMagFilter","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","glRenderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","CUBE","TEXTURE_CUBE_MAP","maxCubeMapTextureSize","f","TEXTURE_CUBE_MAP_POSITIVE_X","WebGLCmdFuncDestroyTexture","deleteTexture","activeTexture","TEXTURE0","deleteRenderbuffer","WebGLCmdFuncResizeTexture","WebGLCmdFuncCreateFramebuffer","gpuFramebuffer","gpuColorTextures","isSwapchainTexture","isOffscreen","attachments","glFramebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","dst","gpuDepthStencilTexture","glAttachment","hasStencil","DEPTH_STENCIL_ATTACHMENT","DEPTH_ATTACHMENT","WEBGL_draw_buffers","drawBuffersWEBGL","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","WebGLCmdFuncCreateShader","gpuShader","_ret","_loop","gpuStage","gpuStages","k","glShaderType","shaderTypeStr","lineNumber","ShaderStageFlagBit","VERTEX_SHADER","FRAGMENT","FRAGMENT_SHADER","v","glShader","createShader","shaderSource","source","compileShader","getShaderParameter","COMPILE_STATUS","name","replace","error","getShaderInfoLog","l","stage","deleteShader","glProgram","createProgram","attachShader","linkProgram","destroyShadersImmediately","detachShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","debugID","activeAttribCount","ACTIVE_ATTRIBUTES","glInputs","attribInfo","getActiveAttrib","varName","attribType","attribName","attribSize","nameOffset","indexOf","substring","glLoc","getAttribLocation","gfxType","stride","blocks","glBlocks","block","glBlock","glUniforms","members","glActiveUniforms","u","uniform","array","subpassInputs","subpassInput","samplerTextures","UniformSamplerTexture","glSamplerTextures","sampler","units","glUnits","activeUniformCount","ACTIVE_UNIFORMS","uniformInfo","getActiveUniform","getUniformLocation","isLocationActive","glUniform","glActiveSamplers","glActiveSamplerLocations","bindingMappings","texUnitCacheMap","maxTextureUnits","cclegacy","rendering","enableEffectImport","undefined","flattened","flexibleSetBaseOffset","flexibleSet","arrayOffset","samplerTextureOffsets","usedTexUnits","glSampler","cachedUnit","t","unitIdx","useProgram","uniform1iv","WebGLCmdFuncDestroyShader","deleteProgram","WebGLCmdFuncCreateInputAssember","glAttribs","attributes","offsets","attrib","attribFormat","attribIsNormalized","isNormalized","attribIsInstanced","isInstanced","stream","gpuVertexBuffers","componentCount","WebGLCmdFuncDestroyInputAssembler","it","glVAOs","values","res","next","done","deleteVertexArrayOES","value","clear","gpuPipelineState","glPrimitive","realRenderArea","Rect","WebGLCmdFuncBeginRenderPass","gpuRenderPass","renderArea","clearColors","clearDepth","clearStencil","clears","lodLevel","x","y","curGPUFrameBuffer","realRenderAreaX","realRenderAreaY","realRenderAreaWidth","realRenderAreaHeight","cacheViewport","viewport","left","top","cacheScissorRect","scissorRect","scissor","clearCount","cacheDSS","dss","colorAttachment","colorAttachments","loadOp","LoadOp","LOAD","CLEAR","bs","targets","blendColorMask","ColorMask","ALL","colorMask","clearColor","z","COLOR_BUFFER_BIT","DISCARD","depthStencilAttachment","depthLoadOp","depthWrite","depthMask","DEPTH_BUFFER_BIT","stencilLoadOp","stencilWriteMaskFront","stencilMaskSeparate","FRONT","stencilWriteMaskBack","BACK","STENCIL_BUFFER_BIT","r","R","g","G","b","B","a","A","WebGLCmdFuncBindStates","gpuDescriptorSets","dynamicOffsets","dynamicStates","cacheBS","isShaderChanged","rs","cacheRS","cullMode","CullMode","disable","CULL_FACE","enable","cullFace","isFrontFaceCCW","frontFace","CCW","CW","depthBias","depthBiasSlop","polygonOffset","lineWidth","depthTest","DEPTH_TEST","depthFunc","stencilTestFront","stencilTestBack","STENCIL_TEST","stencilFuncFront","stencilRefFront","stencilReadMaskFront","stencilFuncSeparate","stencilFailOpFront","stencilZFailOpFront","stencilPassOpFront","stencilOpSeparate","stencilFuncBack","stencilRefBack","stencilReadMaskBack","stencilFailOpBack","stencilZFailOpBack","stencilPassOpBack","isA2C","SAMPLE_ALPHA_TO_COVERAGE","blendColor","target0","target0Cache","blend","BLEND","blendEq","blendAlphaEq","blendEquationSeparate","blendSrc","blendDst","blendSrcAlpha","blendDstAlpha","blendFuncSeparate","gpuPipelineLayout","blockLen","dynamicOffsetIndices","gpuDescriptorSet","descriptorIdx","dynamicOffsetIndexSet","dynamicOffsetIndex","uniformLen","idx","n","m","uniform2iv","uniform3iv","uniform4iv","uniform1fv","uniform2fv","uniform3fv","uniform4fv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","samplerLen","descriptorIndex","texUnitLen","nullTex2D","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","NEAREST","ia","ANGLE_instanced_arrays","vao","glAttrib","createVertexArrayOES","inputLen","glInput","attribLen","c","attribOffset","enableVertexAttribArray","glCurrentAttribLocs","vertexAttribPointer","vertexAttribDivisorANGLE","gpuIndexBuffer","maxVertexAttributes","glEnabledAttribLocs","disableVertexAttribArray","dsLen","DynamicStateFlagBit","LINE_WIDTH","DEPTH_BIAS","depthBiasConstant","depthBiasSlope","BLEND_CONSTANTS","blendConstant","copy","STENCIL_WRITE_MASK","front","stencilStatesFront","back","stencilStatesBack","writeMask","STENCIL_COMPARE_MASK","reference","compareMask","WebGLCmdFuncDraw","drawInfo","md","WEBGL_multi_draw","indexBuffer","gpuIndirectBuffer","drawByIndex","drawCount","byteOffsets","instancedDraw","multiDrawElementsInstancedWEBGL","counts","glIndexType","instances","multiDrawElementsWEBGL","drawElementsInstancedANGLE","drawElements","multiDrawArraysInstancedWEBGL","multiDrawArraysWEBGL","drawArraysInstancedANGLE","drawArrays","instanceCount","indexCount","firstIndex","vertexCount","firstVertex","WebGLCmdFuncCopyTexImagesToTexture","texImages","regions","region","texSubImage2D","texSubres","texOffset","regionTexOffset","regionTexSubres","fcount","baseArrayLayer","layerCount","flags","TextureFlagBit","GEN_MIPMAP","generateMipmap","stagingBuffer","pixelBufferPick","extent","blockHeight","formatAlignment","bufferSize","depth","rowStride","sliceStride","chunkSize","ArrayBufferCtor","getTypedArrayConstructor","destOffset","bufferOffset","subarray","byteOffset","assertID","Number","isInteger","WebGLCmdFuncCopyBuffersToTexture","buffers","fmtInfo","blockSize","Extent","Offset","regionTexExtent","texExtent","regionTexExtentWidth","regionTexExtentHeight","blockSizeWidth","blockSizeHeight","regionBuffStride","buffStride","alignTo","buffTexHeight","destWidth","destHeight","pixels","buffOffset","noCompressedTexSubImage2D","compressedTexSubImage2D","WebGLCmdFuncCopyTextureToBuffers","framebuffer","readPixels","deleteFramebuffer","WebGLCmdFuncBlitTexture","srcTexture","dstTexture","filter","blitManager","draw","createInt32Array","capacity","WebGLIndirectDrawInfos","_capacity","_ensureCapacity","target","nextPow2","IWebGLBlitManager","_gpuShader","_gpuDescriptorSetLayout","_gpuPipelineLayout","_gpuPipelineState","_gpuVertexBuffer","_gpuInputAssembler","_gpuPointSampler","_gpuLinearSampler","_gpuUniformBuffer","_drawInfo","_glFramebuffer","_uniformBuffer","samplerOffset","bindingMappingInfo","maxBlockCounts","UniformBlock","Uniform","DescriptorSetLayoutBinding","DescriptorType","UNIFORM_BUFFER","SAMPLER_TEXTURE","dynamicBindings","gpuSetLayouts","dynamicOffsetCount","dynamicOffsetOffsets","TRIANGLE_STRIP","DepthStencilState","DEVICE","memoryStatus","data","Attribute","Map","glWrapR","DrawInfo","_proto2","gpuTextureSrc","gpuTextureDst","origFramebuffer","descriptor","Filter","POINT","formatInfo","attachment","regionIndices","map","_","sort","srcSubres","dstSubres","srcWidth","srcHeight","dstWidth","dstHeight","srcExtent","srcOffset","dstExtent","dstOffset","origViewport","origScissor","WebGLBuffer","_Buffer","_gpuBuffer","_gpuBufferView","_isBufferView","_usage","_memUsage","_size","_stride","range","_count","_flags","resize","warnID","oldSize","buffSize","Buffer","WebGLCommandBuffer","_CommandBuffer","_isInRenderPass","_curGPUPipelineState","_curGPUInputAssembler","_curGPUDescriptorSets","_curDynamicOffsets","_curDynamicStates","DynamicStates","_isStateInvalied","_type","_queue","queue","setCount","blockOffsets","begin","_numDrawCalls","_numInstances","_numTris","end","bindStates","beginRenderPass","endRenderPass","bindPipelineState","pipelineState","bindDescriptorSet","descriptorSet","_this$_curGPUPipeline","bindInputAssembler","inputAssembler","getGpuInputAssembler","setViewport","minDepth","maxDepth","setScissor","setLineWidth","setDepthBias","depthBiasConstantFactor","depthBiasClamp","depthBiasSlopeFactor","setBlendConstants","blendConstants","setDepthBound","minDepthBounds","maxDepthBounds","depthMinBounds","depthMaxBounds","setStencilWriteMask","face","StencilFace","setStencilCompareMask","updateBuffer","copyBuffersToTexture","execute","pipelineBarrier","blitTexture","CommandBuffer","WebGLFramebuffer","_Framebuffer","_gpuFramebuffer","_gpuColorTextures","_gpuDepthStencilTexture","getGpuFramebuffer","_this$_gpuFramebuffer","_this2","_renderPass","renderPass","_colorTextures","colorTextures","depthStencilTexture","_depthStencilTexture","colorTexture","MAX_SAFE_INTEGER","val","forEach","tex","_width","_height","_gpuFramebuffer$gpuDe","Framebuffer","WebGLInputAssembler","_InputAssembler","vertexBuffers","_attributes","_attributesHash","computeAttributesHash","_vertexBuffers","_indexBuffer","vertBuff","vertexOffset","firstInstance","_indirectBuffer","indirectBuffer","vb","InputAssembler","WebGLDescriptorSetLayout","_DescriptorSetLayout","apply","_bindings","maxBinding","flattenedIndices","_bindingIndices","_descriptorIndices","DESCRIPTOR_DYNAMIC_TYPE","DescriptorSetLayout","WebGLPipelineLayout","_PipelineLayout","_setLayouts","setLayouts","setLayout","indices","bindingIndices","PipelineLayout","WebGLPrimitives","WebGLPipelineState","_PipelineState","_primitive","primitive","_shader","shader","_pipelineLayout","pipelineLayout","_bs","blendState","bsInfo","setTarget","isIndepend","Object","assign","_rs","rasterizerState","_dss","depthStencilState","_is","inputState","_dynamicStates","PipelineState","WebGLPrimaryCommandBuffer","_WebGLCommandBuffer","arguments","infoOrAssembler","TRIANGLES","TRIANGLE_FAN","texture","WebGLQueue","_Queue","numDrawCalls","numInstances","numTris","submit","cmdBuffs","len","cmdBuff","Queue","WebGLRenderPass","_RenderPass","_gpuRenderPass","_colorInfos","_depthStencilInfo","_subpasses","subpasses","_hash","computeHash","RenderPass","WebGLWraps","WebGLSampler","_Sampler","hash","_gpuSampler","minFilter","_info","magFilter","mipFilter","ANISOTROPIC","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","addressU","addressV","addressW","Sampler","WebGLShader","_Shader","_name","_stages","stages","_blocks","samplers","Shader","WebGLStateCache","Viewport","RasterizerState","BlendState","vertexAttributes","WebGLTexture","_Texture","_gpuTexture","_lodLevel","self","texInfo","viewInfo","_isTextureView","thisTextureInfo","thisViewInfo","_viewInfo","_isPowerOf2","IsPowerOf2","FormatSurfaceSize","levelCount","baseLevel","arrayLayer","samples","textureSize","baseLayer","getTextureHandle","getLevelCount","thisGpuTexture","initAsSwapchainTexture","TextureInfo","TextureUsageBit","COLOR_ATTACHMENT","Texture","eventWebGLContextLost","initStates","pixelStorei","PACK_ALIGNMENT","UNPACK_ALIGNMENT","UNPACK_FLIP_Y_WEBGL","SCISSOR_TEST","POLYGON_OFFSET_FILL","depthRange","KEEP","FUNC_ADD","ONE","ZERO","getExtension","ext","prefixes","_ext","getExtensions","EXT_texture_filter_anisotropic","EXT_blend_minmax","EXT_frag_depth","EXT_shader_texture_lod","EXT_sRGB","EXT_color_buffer_half_float","WEBGL_color_buffer_float","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_shaders","WEBGL_lose_context","OES_texture_half_float","OES_texture_half_float_linear","OES_texture_float","OES_texture_float_linear","OES_standard_derivatives","OES_element_index_uint","WEBGL_debug_renderer_info","WEBGL_compressed_texture_astc","osMainVersion","isBrowser","ANDROID","browserType","BrowserType","UC","getContext","canvas","context","webGLCtxAttribs","alpha","macro","ENABLE_TRANSPARENT_CANVAS","antialias","EDITOR","ENABLE_WEBGL_ANTIALIAS","stencil","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","err","WebGLSwapchain","_Swapchain","nullTexCube","_canvas","_webGLContextLostHandler","_extensions","_blitManager","windowHandle","_onWebGLContextLost","bind","addEventListener","colorFmt","depthStencilFmt","depthBits","getParameter","DEPTH_BITS","stencilBits","STENCIL_BITS","_colorTexture","swapchain","SAMPLED","nullTexRegion","BufferTextureCopy","nullTexBuff","removeEventListener","debug","event","warn","Swapchain","setFormatFeature","formatFeatures","indexArray","feature","setFormatFeatureBitwiseOr","setTextureExclusive","isExclusive","WebGLDevice","exports","_Device","_swapchain","_context","_bindingMappings","_textureExclusive","COUNT","_gfxAPI","API","WEBGL","mapping","_bindingMappingInfo","firstSet","setIndices","curSet","prevSet","maxSamplerTextureCounts","Device","createQueue","QueueInfo","QueueType","GRAPHICS","_cmdBuff","createCommandBuffer","CommandBufferInfo","glGetParameter","caps","_caps","MAX_VERTEX_ATTRIBS","maxVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","maxFragmentUniformVectors","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextureUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxArrayTextureLayers","max3DTextureSize","maxUniformBufferBindings","getSupportedExtensions","extStr","exts","_renderer","UNMASKED_RENDERER_WEBGL","_vendor","UNMASKED_VENDOR_WEBGL","RENDERER","VENDOR","version","VERSION","features","_features","initFormatFeatures","Feature","BLEND_MINMAX","ELEMENT_INDEX_UINT","INSTANCED_ARRAYS","MULTIPLE_RENDER_TARGETS","compressedFormat","getFormatFeatures","flushCommands","acquire","present","_formatFeatures","FormatFeatureBit","tempFeature","RENDER_TARGET","SAMPLED_TEXTURE","LINEAR_FILTER","VERTEX_ATTRIBUTE","compressedFeature","CommandBufferType","PRIMARY","createSwapchain","createDescriptorSet","createInputAssembler","createRenderPass","createDescriptorSetLayout","descriptorSetLayout","createPipelineLayout","createPipelineState","getSampler","has","getSwapchains","getGeneralBarrier","GeneralBarrier","_generalBarrierss","getTextureBarrier","TextureBarrier","_textureBarriers","getBufferBarrier","BufferBarrier","_bufferBarriers","copyTextureToBuffers","copyTexImagesToTexture","legacyCC"],"mappings":"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"}