{"version":3,"file":"gfx-webgl2.js","sources":["../../../cocos/gfx/webgl2/webgl2-descriptor-set.ts","../../../cocos/gfx/webgl2/webgl2-define.ts","../../../cocos/gfx/webgl2/webgl2-commands.ts","../../../cocos/gfx/webgl2/webgl2-gpu-objects.ts","../../../cocos/gfx/webgl2/webgl2-buffer.ts","../../../cocos/gfx/webgl2/webgl2-command-buffer.ts","../../../cocos/gfx/webgl2/webgl2-framebuffer.ts","../../../cocos/gfx/webgl2/webgl2-input-assembler.ts","../../../cocos/gfx/webgl2/webgl2-descriptor-set-layout.ts","../../../cocos/gfx/webgl2/webgl2-pipeline-layout.ts","../../../cocos/gfx/webgl2/webgl2-pipeline-state.ts","../../../cocos/gfx/webgl2/webgl2-primary-command-buffer.ts","../../../cocos/gfx/webgl2/webgl2-queue.ts","../../../cocos/gfx/webgl2/webgl2-render-pass.ts","../../../cocos/gfx/webgl2/states/webgl2-sampler.ts","../../../cocos/gfx/webgl2/webgl2-shader.ts","../../../cocos/gfx/webgl2/webgl2-state-cache.ts","../../../cocos/gfx/webgl2/webgl2-texture.ts","../../../cocos/gfx/webgl2/webgl2-swapchain.ts","../../../cocos/gfx/webgl2/webgl2-device.ts","../../../exports/gfx-webgl2.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { WebGL2Buffer } from './webgl2-buffer';\r\nimport { IWebGL2GPUDescriptorSet, IWebGL2GPUDescriptor } from './webgl2-gpu-objects';\r\nimport { WebGL2Sampler } from './states/webgl2-sampler';\r\nimport { WebGL2Texture } from './webgl2-texture';\r\nimport { WebGL2DescriptorSetLayout } from './webgl2-descriptor-set-layout';\r\nimport { DescriptorSetInfo, DESCRIPTOR_BUFFER_TYPE, DESCRIPTOR_SAMPLER_TYPE } from '../base/define';\r\n\r\n/** @mangle */\r\nexport class WebGL2DescriptorSet extends DescriptorSet {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get gpuDescriptorSet (): IWebGL2GPUDescriptorSet {\r\n        return this._gpuDescriptorSet as IWebGL2GPUDescriptorSet;\r\n    }\r\n\r\n    private _gpuDescriptorSet: IWebGL2GPUDescriptorSet | null = null;\r\n\r\n    public initialize (info: Readonly<DescriptorSetInfo>): void {\r\n        this._layout = info.layout;\r\n        const { bindings, descriptorIndices, descriptorCount } = (info.layout as WebGL2DescriptorSetLayout).getGpuDescriptorSetLayout();\r\n\r\n        this._buffers = Array(descriptorCount).fill(null);\r\n        this._textures = Array(descriptorCount).fill(null);\r\n        this._samplers = Array(descriptorCount).fill(null);\r\n\r\n        const gpuDescriptors: IWebGL2GPUDescriptor[] = [];\r\n        this._gpuDescriptorSet = { gpuDescriptors, descriptorIndices };\r\n\r\n        for (let i = 0; i < bindings.length; ++i) {\r\n            const binding = bindings[i];\r\n            for (let j = 0; j < binding.count; j++) {\r\n                const gpuDescriptor: IWebGL2GPUDescriptor = {\r\n                    type: binding.descriptorType,\r\n                    gpuBuffer: null,\r\n                    gpuTextureView: null,\r\n                    gpuSampler: null,\r\n                };\r\n                gpuDescriptors.push(gpuDescriptor);\r\n            }\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._layout = null;\r\n        this._gpuDescriptorSet = null;\r\n    }\r\n\r\n    public update (): void {\r\n        if (this._isDirty && this._gpuDescriptorSet) {\r\n            const descriptors = this._gpuDescriptorSet.gpuDescriptors;\r\n            for (let i = 0; i < descriptors.length; ++i) {\r\n                if (descriptors[i].type & DESCRIPTOR_BUFFER_TYPE) {\r\n                    if (this._buffers[i]) {\r\n                        descriptors[i].gpuBuffer = (this._buffers[i] as WebGL2Buffer).getGpuBuffer();\r\n                    }\r\n                } else if (descriptors[i].type & DESCRIPTOR_SAMPLER_TYPE) {\r\n                    if (this._textures[i]) {\r\n                        descriptors[i].gpuTextureView = (this._textures[i] as WebGL2Texture).gpuTextureView;\r\n                    }\r\n                    if (this._samplers[i]) {\r\n                        descriptors[i].gpuSampler = (this._samplers[i] as WebGL2Sampler).gpuSampler;\r\n                    }\r\n                }\r\n            }\r\n            this._isDirty = false;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { WebGL2Device } from './webgl2-device';\r\n\r\n// Extensions\r\nexport enum WebGL2EXT {\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\r\n\r\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F,\r\n\r\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\r\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\r\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\r\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\r\n\r\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\r\n\r\n    COMPRESSED_R11_EAC = 0x9270,\r\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\r\n    COMPRESSED_RG11_EAC = 0x9272,\r\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\r\n    COMPRESSED_RGB8_ETC2 = 0x9274,\r\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\r\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\r\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\r\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\r\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\r\n\r\n    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,\r\n    COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1,\r\n    COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2,\r\n    COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3,\r\n    COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4,\r\n    COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5,\r\n    COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6,\r\n    COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7,\r\n    COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8,\r\n    COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9,\r\n    COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA,\r\n    COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB,\r\n    COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC,\r\n    COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD,\r\n\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD,\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2Extensions {\r\n    EXT_texture_filter_anisotropic: EXT_texture_filter_anisotropic | null;\r\n    EXT_color_buffer_half_float: EXT_color_buffer_half_float | null;\r\n    EXT_color_buffer_float: EXT_color_buffer_float | null;\r\n    WEBGL_multi_draw: WEBGL_multi_draw | null;\r\n    WEBGL_compressed_texture_etc1: WEBGL_compressed_texture_etc1 | null;\r\n    WEBGL_compressed_texture_etc: WEBGL_compressed_texture_etc | null;\r\n    WEBGL_compressed_texture_pvrtc: WEBGL_compressed_texture_pvrtc | null;\r\n    WEBGL_compressed_texture_astc: WEBGL_compressed_texture_astc | null;\r\n    WEBGL_compressed_texture_s3tc: WEBGL_compressed_texture_s3tc | null;\r\n    WEBGL_compressed_texture_s3tc_srgb: WEBGL_compressed_texture_s3tc_srgb | null;\r\n    WEBGL_debug_shaders: WEBGL_debug_shaders | null;\r\n    WEBGL_lose_context: WEBGL_lose_context | null;\r\n    WEBGL_debug_renderer_info: WEBGL_debug_renderer_info | null;\r\n    OES_texture_half_float_linear: OES_texture_half_float_linear | null;\r\n    OES_texture_float_linear: OES_texture_float_linear | null;\r\n    useVAO: boolean;\r\n}\r\n\r\n// put the global instance here so that we won't have circular dependencies\r\nexport class WebGL2DeviceManager {\r\n    static get instance (): WebGL2Device {\r\n        return WebGL2DeviceManager._instance!;\r\n    }\r\n    static setInstance (instance: WebGL2Device): void {\r\n        WebGL2DeviceManager._instance = instance;\r\n    }\r\n    private static _instance: WebGL2Device | null = null;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { systemInfo } from 'pal/system-info';\r\nimport {\r\n    BufferUsageBit, ColorMask, CullMode, DynamicStateFlagBit, Filter, Format, TextureType, Type, FormatInfo,\r\n    FormatInfos, FormatSize, LoadOp, MemoryUsageBit, SampleCount, ShaderStageFlagBit, TextureFlagBit,\r\n    Color, Rect, BufferTextureCopy, BufferSource, DrawInfo, IndirectBuffer, UniformBlock, DynamicStates,\r\n    UniformSamplerTexture, alignTo, Extent, formatAlignment, getTypedArrayConstructor, Offset, TextureBlit,\r\n} from '../base/define';\r\nimport { WebGL2EXT } from './webgl2-define';\r\nimport { WebGL2Device } from './webgl2-device';\r\nimport {\r\n    IWebGL2GPUInputAssembler,\r\n    IWebGL2Attrib,\r\n    IWebGL2GPUDescriptorSet,\r\n    IWebGL2GPUBuffer,\r\n    IWebGL2GPUFramebuffer,\r\n    IWebGL2GPUInput,\r\n    IWebGL2GPUPipelineState,\r\n    IWebGL2GPUSampler,\r\n    IWebGL2GPUShader,\r\n    IWebGL2GPUTexture,\r\n    IWebGL2GPUUniformBlock,\r\n    IWebGL2GPUUniformSamplerTexture,\r\n    IWebGL2GPURenderPass,\r\n} from './webgl2-gpu-objects';\r\nimport { error, errorID, assertID, debugID } from '../../core/platform/debug';\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { cclegacy } from '../../core/global-exports';\r\nimport { OS } from '../../../pal/system-info/enum-type';\r\n\r\nconst WebGLWraps: GLenum[] = [\r\n    WebGLConstants.REPEAT,\r\n    WebGLConstants.MIRRORED_REPEAT,\r\n    WebGLConstants.CLAMP_TO_EDGE,\r\n    WebGLConstants.CLAMP_TO_EDGE,\r\n];\r\n\r\nconst _f32v4 = new Float32Array(4);\r\nconst max = Math.max;\r\nconst min = Math.min;\r\n\r\nfunction CmpF32NotEuqal (a: number, b: number): boolean {\r\n    const c = a - b;\r\n    return (c > 0.000001 || c < -0.000001);\r\n}\r\n\r\nexport function GFXFormatToWebGLType (format: Format, gl: WebGL2RenderingContext): GLenum {\r\n    switch (format) {\r\n    case Format.R8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.R8SN: return WebGLConstants.BYTE;\r\n    case Format.R8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.R8I: return WebGLConstants.BYTE;\r\n    case Format.R16F: return WebGLConstants.HALF_FLOAT;\r\n    case Format.R16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.R16I: return WebGLConstants.SHORT;\r\n    case Format.R32F: return WebGLConstants.FLOAT;\r\n    case Format.R32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.R32I: return WebGLConstants.INT;\r\n\r\n    case Format.RG8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RG8SN: return WebGLConstants.BYTE;\r\n    case Format.RG8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RG8I: return WebGLConstants.BYTE;\r\n    case Format.RG16F: return WebGLConstants.HALF_FLOAT;\r\n    case Format.RG16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.RG16I: return WebGLConstants.SHORT;\r\n    case Format.RG32F: return WebGLConstants.FLOAT;\r\n    case Format.RG32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RG32I: return WebGLConstants.INT;\r\n\r\n    case Format.RGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.SRGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGB8SN: return WebGLConstants.BYTE;\r\n    case Format.RGB8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGB8I: return WebGLConstants.BYTE;\r\n    case Format.RGB16F: return WebGLConstants.HALF_FLOAT;\r\n    case Format.RGB16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.RGB16I: return WebGLConstants.SHORT;\r\n    case Format.RGB32F: return WebGLConstants.FLOAT;\r\n    case Format.RGB32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RGB32I: return WebGLConstants.INT;\r\n\r\n    case Format.BGRA8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGBA8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.SRGB8_A8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGBA8SN: return WebGLConstants.BYTE;\r\n    case Format.RGBA8UI: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.RGBA8I: return WebGLConstants.BYTE;\r\n    case Format.RGBA16F: return WebGLConstants.HALF_FLOAT;\r\n    case Format.RGBA16UI: return WebGLConstants.UNSIGNED_SHORT;\r\n    case Format.RGBA16I: return WebGLConstants.SHORT;\r\n    case Format.RGBA32F: return WebGLConstants.FLOAT;\r\n    case Format.RGBA32UI: return WebGLConstants.UNSIGNED_INT;\r\n    case Format.RGBA32I: return WebGLConstants.INT;\r\n\r\n    case Format.R5G6B5: return WebGLConstants.UNSIGNED_SHORT_5_6_5;\r\n    case Format.R11G11B10F: return WebGLConstants.UNSIGNED_INT_10F_11F_11F_REV;\r\n    case Format.RGB5A1: return WebGLConstants.UNSIGNED_SHORT_5_5_5_1;\r\n    case Format.RGBA4: return WebGLConstants.UNSIGNED_SHORT_4_4_4_4;\r\n    case Format.RGB10A2: return WebGLConstants.UNSIGNED_INT_2_10_10_10_REV;\r\n    case Format.RGB10A2UI: return WebGLConstants.UNSIGNED_INT_2_10_10_10_REV;\r\n    case Format.RGB9E5: return WebGLConstants.FLOAT;\r\n\r\n    case Format.DEPTH: return WebGLConstants.FLOAT;\r\n    case Format.DEPTH_STENCIL: return WebGLConstants.UNSIGNED_INT_24_8;\r\n\r\n    case Format.BC1: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC1_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC2_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC3: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC3_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC4: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC4_SNORM: return WebGLConstants.BYTE;\r\n    case Format.BC5: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC5_SNORM: return WebGLConstants.BYTE;\r\n    case Format.BC6H_SF16: return WebGLConstants.FLOAT;\r\n    case Format.BC6H_UF16: return WebGLConstants.FLOAT;\r\n    case Format.BC7: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.BC7_SRGB: return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    case Format.ETC_RGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_RGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_SRGB8: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_RGB8_A1: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.ETC2_SRGB8_A1: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.EAC_R11: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.EAC_R11SN: return WebGLConstants.BYTE;\r\n    case Format.EAC_RG11: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.EAC_RG11SN: return WebGLConstants.BYTE;\r\n\r\n    case Format.PVRTC_RGB2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC_RGBA2: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC_RGB4: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC_RGBA4: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC2_2BPP: return WebGLConstants.UNSIGNED_BYTE;\r\n    case Format.PVRTC2_4BPP: return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    case Format.ASTC_RGBA_4X4:\r\n    case Format.ASTC_RGBA_5X4:\r\n    case Format.ASTC_RGBA_5X5:\r\n    case Format.ASTC_RGBA_6X5:\r\n    case Format.ASTC_RGBA_6X6:\r\n    case Format.ASTC_RGBA_8X5:\r\n    case Format.ASTC_RGBA_8X6:\r\n    case Format.ASTC_RGBA_8X8:\r\n    case Format.ASTC_RGBA_10X5:\r\n    case Format.ASTC_RGBA_10X6:\r\n    case Format.ASTC_RGBA_10X8:\r\n    case Format.ASTC_RGBA_10X10:\r\n    case Format.ASTC_RGBA_12X10:\r\n    case Format.ASTC_RGBA_12X12:\r\n    case Format.ASTC_SRGBA_4X4:\r\n    case Format.ASTC_SRGBA_5X4:\r\n    case Format.ASTC_SRGBA_5X5:\r\n    case Format.ASTC_SRGBA_6X5:\r\n    case Format.ASTC_SRGBA_6X6:\r\n    case Format.ASTC_SRGBA_8X5:\r\n    case Format.ASTC_SRGBA_8X6:\r\n    case Format.ASTC_SRGBA_8X8:\r\n    case Format.ASTC_SRGBA_10X5:\r\n    case Format.ASTC_SRGBA_10X6:\r\n    case Format.ASTC_SRGBA_10X8:\r\n    case Format.ASTC_SRGBA_10X10:\r\n    case Format.ASTC_SRGBA_12X10:\r\n    case Format.ASTC_SRGBA_12X12:\r\n        return WebGLConstants.UNSIGNED_BYTE;\r\n\r\n    default: {\r\n        return WebGLConstants.UNSIGNED_BYTE;\r\n    }\r\n    }\r\n}\r\n\r\nexport function GFXFormatToWebGLInternalFormat (format: Format, gl: WebGL2RenderingContext): GLenum {\r\n    switch (format) {\r\n    case Format.A8: return WebGLConstants.ALPHA;\r\n    case Format.L8: return WebGLConstants.LUMINANCE;\r\n    case Format.LA8: return WebGLConstants.LUMINANCE_ALPHA;\r\n    case Format.R8: return WebGLConstants.R8;\r\n    case Format.R8SN: return WebGLConstants.R8_SNORM;\r\n    case Format.R8UI: return WebGLConstants.R8UI;\r\n    case Format.R8I: return WebGLConstants.R8I;\r\n    case Format.RG8: return WebGLConstants.RG8;\r\n    case Format.RG8SN: return WebGLConstants.RG8_SNORM;\r\n    case Format.RG8UI: return WebGLConstants.RG8UI;\r\n    case Format.RG8I: return WebGLConstants.RG8I;\r\n    case Format.RGB8: return WebGLConstants.RGB8;\r\n    case Format.RGB8SN: return WebGLConstants.RGB8_SNORM;\r\n    case Format.RGB8UI: return WebGLConstants.RGB8UI;\r\n    case Format.RGB8I: return WebGLConstants.RGB8I;\r\n    case Format.BGRA8: return WebGLConstants.RGBA8;\r\n    case Format.RGBA8: return WebGLConstants.RGBA8;\r\n    case Format.RGBA8SN: return WebGLConstants.RGBA8_SNORM;\r\n    case Format.RGBA8UI: return WebGLConstants.RGBA8UI;\r\n    case Format.RGBA8I: return WebGLConstants.RGBA8I;\r\n    case Format.R16I: return WebGLConstants.R16I;\r\n    case Format.R16UI: return WebGLConstants.R16UI;\r\n    case Format.R16F: return WebGLConstants.R16F;\r\n    case Format.RG16I: return WebGLConstants.RG16I;\r\n    case Format.RG16UI: return WebGLConstants.RG16UI;\r\n    case Format.RG16F: return WebGLConstants.RG16F;\r\n    case Format.RGB16I: return WebGLConstants.RGB16I;\r\n    case Format.RGB16UI: return WebGLConstants.RGB16UI;\r\n    case Format.RGB16F: return WebGLConstants.RGB16F;\r\n    case Format.RGBA16I: return WebGLConstants.RGBA16I;\r\n    case Format.RGBA16UI: return WebGLConstants.RGBA16UI;\r\n    case Format.RGBA16F: return WebGLConstants.RGBA16F;\r\n    case Format.R32I: return WebGLConstants.R32I;\r\n    case Format.R32UI: return WebGLConstants.R32UI;\r\n    case Format.R32F: return WebGLConstants.R32F;\r\n    case Format.RG32I: return WebGLConstants.RG32I;\r\n    case Format.RG32UI: return WebGLConstants.RG32UI;\r\n    case Format.RG32F: return WebGLConstants.RG32F;\r\n    case Format.RGB32I: return WebGLConstants.RGB32I;\r\n    case Format.RGB32UI: return WebGLConstants.RGB32UI;\r\n    case Format.RGB32F: return WebGLConstants.RGB32F;\r\n    case Format.RGBA32I: return WebGLConstants.RGBA32I;\r\n    case Format.RGBA32UI: return WebGLConstants.RGBA32UI;\r\n    case Format.RGBA32F: return WebGLConstants.RGBA32F;\r\n    case Format.R5G6B5: return WebGLConstants.RGB565;\r\n    case Format.RGB5A1: return WebGLConstants.RGB5_A1;\r\n    case Format.RGBA4: return WebGLConstants.RGBA4;\r\n    case Format.SRGB8: return WebGLConstants.SRGB8;\r\n    case Format.SRGB8_A8: return WebGLConstants.SRGB8_ALPHA8;\r\n    case Format.RGB10A2: return WebGLConstants.RGB10_A2;\r\n    case Format.RGB10A2UI: return WebGLConstants.RGB10_A2UI;\r\n    case Format.R11G11B10F: return WebGLConstants.R11F_G11F_B10F;\r\n    case Format.DEPTH: return WebGLConstants.DEPTH_COMPONENT32F;\r\n    case Format.DEPTH_STENCIL: return WebGLConstants.DEPTH24_STENCIL8;\r\n\r\n    case Format.BC1: return WebGL2EXT.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n    case Format.BC1_ALPHA: return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n    case Format.BC1_SRGB: return WebGL2EXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;\r\n    case Format.BC1_SRGB_ALPHA: return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\r\n    case Format.BC2: return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n    case Format.BC2_SRGB: return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\r\n    case Format.BC3: return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n    case Format.BC3_SRGB: return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\r\n\r\n    case Format.ETC_RGB8: return WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL;\r\n    case Format.ETC2_RGB8: return WebGL2EXT.COMPRESSED_RGB8_ETC2;\r\n    case Format.ETC2_SRGB8: return WebGL2EXT.COMPRESSED_SRGB8_ETC2;\r\n    case Format.ETC2_RGB8_A1: return WebGL2EXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n    case Format.ETC2_SRGB8_A1: return WebGL2EXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n    case Format.ETC2_RGBA8: return WebGL2EXT.COMPRESSED_RGBA8_ETC2_EAC;\r\n    case Format.ETC2_SRGB8_A8: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;\r\n    case Format.EAC_R11: return WebGL2EXT.COMPRESSED_R11_EAC;\r\n    case Format.EAC_R11SN: return WebGL2EXT.COMPRESSED_SIGNED_R11_EAC;\r\n    case Format.EAC_RG11: return WebGL2EXT.COMPRESSED_RG11_EAC;\r\n    case Format.EAC_RG11SN: return WebGL2EXT.COMPRESSED_SIGNED_RG11_EAC;\r\n\r\n    case Format.PVRTC_RGB2: return WebGL2EXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n    case Format.PVRTC_RGBA2: return WebGL2EXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n    case Format.PVRTC_RGB4: return WebGL2EXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n    case Format.PVRTC_RGBA4: return WebGL2EXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\r\n    case Format.ASTC_RGBA_4X4: return WebGL2EXT.COMPRESSED_RGBA_ASTC_4x4_KHR;\r\n    case Format.ASTC_RGBA_5X4: return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x4_KHR;\r\n    case Format.ASTC_RGBA_5X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x5_KHR;\r\n    case Format.ASTC_RGBA_6X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x5_KHR;\r\n    case Format.ASTC_RGBA_6X6: return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x6_KHR;\r\n    case Format.ASTC_RGBA_8X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x5_KHR;\r\n    case Format.ASTC_RGBA_8X6: return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x6_KHR;\r\n    case Format.ASTC_RGBA_8X8: return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x8_KHR;\r\n    case Format.ASTC_RGBA_10X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x5_KHR;\r\n    case Format.ASTC_RGBA_10X6: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x6_KHR;\r\n    case Format.ASTC_RGBA_10X8: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x8_KHR;\r\n    case Format.ASTC_RGBA_10X10: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x10_KHR;\r\n    case Format.ASTC_RGBA_12X10: return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x10_KHR;\r\n    case Format.ASTC_RGBA_12X12: return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x12_KHR;\r\n\r\n    case Format.ASTC_SRGBA_4X4: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;\r\n    case Format.ASTC_SRGBA_5X4: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;\r\n    case Format.ASTC_SRGBA_5X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;\r\n    case Format.ASTC_SRGBA_6X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;\r\n    case Format.ASTC_SRGBA_6X6: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;\r\n    case Format.ASTC_SRGBA_8X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;\r\n    case Format.ASTC_SRGBA_8X6: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;\r\n    case Format.ASTC_SRGBA_8X8: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;\r\n    case Format.ASTC_SRGBA_10X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;\r\n    case Format.ASTC_SRGBA_10X6: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;\r\n    case Format.ASTC_SRGBA_10X8: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;\r\n    case Format.ASTC_SRGBA_10X10: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;\r\n    case Format.ASTC_SRGBA_12X10: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;\r\n    case Format.ASTC_SRGBA_12X12: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;\r\n\r\n    default: {\r\n        errorID(16309);\r\n        return WebGLConstants.RGBA;\r\n    }\r\n    }\r\n}\r\n\r\nexport function GFXFormatToWebGLFormat (format: Format, gl: WebGL2RenderingContext): GLenum {\r\n    switch (format) {\r\n    case Format.A8: return WebGLConstants.ALPHA;\r\n    case Format.L8: return WebGLConstants.LUMINANCE;\r\n    case Format.LA8: return WebGLConstants.LUMINANCE_ALPHA;\r\n    case Format.R8:\r\n    case Format.R8SN: return WebGLConstants.RED;\r\n    case Format.R8UI:\r\n    case Format.R8I: return WebGLConstants.RED;\r\n    case Format.RG8:\r\n    case Format.RG8SN:\r\n    case Format.RG8UI:\r\n    case Format.RG8I: return WebGLConstants.RG;\r\n    case Format.RGB8:\r\n    case Format.RGB8SN:\r\n    case Format.RGB8UI:\r\n    case Format.RGB8I: return WebGLConstants.RGB;\r\n    case Format.BGRA8:\r\n    case Format.RGBA8:\r\n    case Format.RGBA8SN:\r\n    case Format.RGBA8UI:\r\n    case Format.RGBA8I: return WebGLConstants.RGBA;\r\n    case Format.R16UI:\r\n    case Format.R16I:\r\n    case Format.R16F: return WebGLConstants.RED;\r\n    case Format.RG16UI:\r\n    case Format.RG16I:\r\n    case Format.RG16F: return WebGLConstants.RG;\r\n    case Format.RGB16UI:\r\n    case Format.RGB16I:\r\n    case Format.RGB16F: return WebGLConstants.RGB;\r\n    case Format.RGBA16UI:\r\n    case Format.RGBA16I:\r\n    case Format.RGBA16F: return WebGLConstants.RGBA;\r\n    case Format.R32UI:\r\n    case Format.R32I:\r\n    case Format.R32F: return WebGLConstants.RED;\r\n    case Format.RG32UI:\r\n    case Format.RG32I:\r\n    case Format.RG32F: return WebGLConstants.RG;\r\n    case Format.RGB32UI:\r\n    case Format.RGB32I:\r\n    case Format.RGB32F: return WebGLConstants.RGB;\r\n    case Format.RGBA32UI:\r\n    case Format.RGBA32I:\r\n    case Format.RGBA32F: return WebGLConstants.RGBA;\r\n    case Format.RGB10A2: return WebGLConstants.RGBA;\r\n    case Format.R11G11B10F: return WebGLConstants.RGB;\r\n    case Format.R5G6B5: return WebGLConstants.RGB;\r\n    case Format.RGB5A1: return WebGLConstants.RGBA;\r\n    case Format.RGBA4: return WebGLConstants.RGBA;\r\n    case Format.SRGB8: return WebGLConstants.RGB;\r\n    case Format.SRGB8_A8: return WebGLConstants.RGBA;\r\n    case Format.DEPTH: return WebGLConstants.DEPTH_COMPONENT;\r\n    case Format.DEPTH_STENCIL: return WebGLConstants.DEPTH_STENCIL;\r\n\r\n    case Format.BC1: return WebGL2EXT.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n    case Format.BC1_ALPHA: return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n    case Format.BC1_SRGB: return WebGL2EXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;\r\n    case Format.BC1_SRGB_ALPHA: return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\r\n    case Format.BC2: return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n    case Format.BC2_SRGB: return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\r\n    case Format.BC3: return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n    case Format.BC3_SRGB: return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\r\n\r\n    case Format.ETC_RGB8: return WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL;\r\n    case Format.ETC2_RGB8: return WebGL2EXT.COMPRESSED_RGB8_ETC2;\r\n    case Format.ETC2_SRGB8: return WebGL2EXT.COMPRESSED_SRGB8_ETC2;\r\n    case Format.ETC2_RGB8_A1: return WebGL2EXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n    case Format.ETC2_SRGB8_A1: return WebGL2EXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;\r\n    case Format.ETC2_RGBA8: return WebGL2EXT.COMPRESSED_RGBA8_ETC2_EAC;\r\n    case Format.ETC2_SRGB8_A8: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;\r\n    case Format.EAC_R11: return WebGL2EXT.COMPRESSED_R11_EAC;\r\n    case Format.EAC_R11SN: return WebGL2EXT.COMPRESSED_SIGNED_R11_EAC;\r\n    case Format.EAC_RG11: return WebGL2EXT.COMPRESSED_RG11_EAC;\r\n    case Format.EAC_RG11SN: return WebGL2EXT.COMPRESSED_SIGNED_RG11_EAC;\r\n\r\n    case Format.PVRTC_RGB2: return WebGL2EXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n    case Format.PVRTC_RGBA2: return WebGL2EXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n    case Format.PVRTC_RGB4: return WebGL2EXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n    case Format.PVRTC_RGBA4: return WebGL2EXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\r\n    case Format.ASTC_RGBA_4X4: return WebGL2EXT.COMPRESSED_RGBA_ASTC_4x4_KHR;\r\n    case Format.ASTC_RGBA_5X4: return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x4_KHR;\r\n    case Format.ASTC_RGBA_5X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x5_KHR;\r\n    case Format.ASTC_RGBA_6X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x5_KHR;\r\n    case Format.ASTC_RGBA_6X6: return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x6_KHR;\r\n    case Format.ASTC_RGBA_8X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x5_KHR;\r\n    case Format.ASTC_RGBA_8X6: return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x6_KHR;\r\n    case Format.ASTC_RGBA_8X8: return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x8_KHR;\r\n    case Format.ASTC_RGBA_10X5: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x5_KHR;\r\n    case Format.ASTC_RGBA_10X6: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x6_KHR;\r\n    case Format.ASTC_RGBA_10X8: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x8_KHR;\r\n    case Format.ASTC_RGBA_10X10: return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x10_KHR;\r\n    case Format.ASTC_RGBA_12X10: return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x10_KHR;\r\n    case Format.ASTC_RGBA_12X12: return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x12_KHR;\r\n\r\n    case Format.ASTC_SRGBA_4X4: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;\r\n    case Format.ASTC_SRGBA_5X4: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;\r\n    case Format.ASTC_SRGBA_5X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;\r\n    case Format.ASTC_SRGBA_6X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;\r\n    case Format.ASTC_SRGBA_6X6: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;\r\n    case Format.ASTC_SRGBA_8X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;\r\n    case Format.ASTC_SRGBA_8X6: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;\r\n    case Format.ASTC_SRGBA_8X8: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;\r\n    case Format.ASTC_SRGBA_10X5: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;\r\n    case Format.ASTC_SRGBA_10X6: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;\r\n    case Format.ASTC_SRGBA_10X8: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;\r\n    case Format.ASTC_SRGBA_10X10: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;\r\n    case Format.ASTC_SRGBA_12X10: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;\r\n    case Format.ASTC_SRGBA_12X12: return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;\r\n\r\n    default: {\r\n        errorID(16310);\r\n        return WebGLConstants.RGBA;\r\n    }\r\n    }\r\n}\r\n\r\nfunction GFXTypeToWebGLType (type: Type, gl: WebGL2RenderingContext): GLenum {\r\n    switch (type) {\r\n    case Type.BOOL: return WebGLConstants.BOOL;\r\n    case Type.BOOL2: return WebGLConstants.BOOL_VEC2;\r\n    case Type.BOOL3: return WebGLConstants.BOOL_VEC3;\r\n    case Type.BOOL4: return WebGLConstants.BOOL_VEC4;\r\n    case Type.INT: return WebGLConstants.INT;\r\n    case Type.INT2: return WebGLConstants.INT_VEC2;\r\n    case Type.INT3: return WebGLConstants.INT_VEC3;\r\n    case Type.INT4: return WebGLConstants.INT_VEC4;\r\n    case Type.UINT: return WebGLConstants.UNSIGNED_INT;\r\n    case Type.FLOAT: return WebGLConstants.FLOAT;\r\n    case Type.FLOAT2: return WebGLConstants.FLOAT_VEC2;\r\n    case Type.FLOAT3: return WebGLConstants.FLOAT_VEC3;\r\n    case Type.FLOAT4: return WebGLConstants.FLOAT_VEC4;\r\n    case Type.MAT2: return WebGLConstants.FLOAT_MAT2;\r\n    case Type.MAT2X3: return WebGLConstants.FLOAT_MAT2x3;\r\n    case Type.MAT2X4: return WebGLConstants.FLOAT_MAT2x4;\r\n    case Type.MAT3X2: return WebGLConstants.FLOAT_MAT3x2;\r\n    case Type.MAT3: return WebGLConstants.FLOAT_MAT3;\r\n    case Type.MAT3X4: return WebGLConstants.FLOAT_MAT3x4;\r\n    case Type.MAT4X2: return WebGLConstants.FLOAT_MAT4x2;\r\n    case Type.MAT4X3: return WebGLConstants.FLOAT_MAT4x3;\r\n    case Type.MAT4: return WebGLConstants.FLOAT_MAT4;\r\n    case Type.SAMPLER2D: return WebGLConstants.SAMPLER_2D;\r\n    case Type.SAMPLER2D_ARRAY: return WebGLConstants.SAMPLER_2D_ARRAY;\r\n    case Type.SAMPLER3D: return WebGLConstants.SAMPLER_3D;\r\n    case Type.SAMPLER_CUBE: return WebGLConstants.SAMPLER_CUBE;\r\n    default: {\r\n        errorID(16311);\r\n        return Type.UNKNOWN;\r\n    }\r\n    }\r\n}\r\n\r\nfunction WebGLTypeToGFXType (glType: GLenum, gl: WebGL2RenderingContext): Type {\r\n    switch (glType) {\r\n    case WebGLConstants.BOOL: return Type.BOOL;\r\n    case WebGLConstants.BOOL_VEC2: return Type.BOOL2;\r\n    case WebGLConstants.BOOL_VEC3: return Type.BOOL3;\r\n    case WebGLConstants.BOOL_VEC4: return Type.BOOL4;\r\n    case WebGLConstants.INT: return Type.INT;\r\n    case WebGLConstants.INT_VEC2: return Type.INT2;\r\n    case WebGLConstants.INT_VEC3: return Type.INT3;\r\n    case WebGLConstants.INT_VEC4: return Type.INT4;\r\n    case WebGLConstants.UNSIGNED_INT: return Type.UINT;\r\n    case WebGLConstants.UNSIGNED_INT_VEC2: return Type.UINT2;\r\n    case WebGLConstants.UNSIGNED_INT_VEC3: return Type.UINT3;\r\n    case WebGLConstants.UNSIGNED_INT_VEC4: return Type.UINT4;\r\n    case WebGLConstants.FLOAT: return Type.FLOAT;\r\n    case WebGLConstants.FLOAT_VEC2: return Type.FLOAT2;\r\n    case WebGLConstants.FLOAT_VEC3: return Type.FLOAT3;\r\n    case WebGLConstants.FLOAT_VEC4: return Type.FLOAT4;\r\n    case WebGLConstants.FLOAT_MAT2: return Type.MAT2;\r\n    case WebGLConstants.FLOAT_MAT2x3: return Type.MAT2X3;\r\n    case WebGLConstants.FLOAT_MAT2x4: return Type.MAT2X4;\r\n    case WebGLConstants.FLOAT_MAT3x2: return Type.MAT3X2;\r\n    case WebGLConstants.FLOAT_MAT3: return Type.MAT3;\r\n    case WebGLConstants.FLOAT_MAT3x4: return Type.MAT3X4;\r\n    case WebGLConstants.FLOAT_MAT4x2: return Type.MAT4X2;\r\n    case WebGLConstants.FLOAT_MAT4x3: return Type.MAT4X3;\r\n    case WebGLConstants.FLOAT_MAT4: return Type.MAT4;\r\n    case WebGLConstants.SAMPLER_2D: return Type.SAMPLER2D;\r\n    case WebGLConstants.SAMPLER_2D_ARRAY: return Type.SAMPLER2D_ARRAY;\r\n    case WebGLConstants.SAMPLER_3D: return Type.SAMPLER3D;\r\n    case WebGLConstants.SAMPLER_CUBE: return Type.SAMPLER_CUBE;\r\n    default: {\r\n        errorID(16313);\r\n        return Type.UNKNOWN;\r\n    }\r\n    }\r\n}\r\n\r\nfunction WebGLGetTypeSize (glType: GLenum, gl: WebGL2RenderingContext): number {\r\n    switch (glType) {\r\n    case WebGLConstants.BOOL: return 4;\r\n    case WebGLConstants.BOOL_VEC2: return 8;\r\n    case WebGLConstants.BOOL_VEC3: return 12;\r\n    case WebGLConstants.BOOL_VEC4: return 16;\r\n    case WebGLConstants.INT: return 4;\r\n    case WebGLConstants.INT_VEC2: return 8;\r\n    case WebGLConstants.INT_VEC3: return 12;\r\n    case WebGLConstants.INT_VEC4: return 16;\r\n    case WebGLConstants.UNSIGNED_INT: return 4;\r\n    case WebGLConstants.UNSIGNED_INT_VEC2: return 8;\r\n    case WebGLConstants.UNSIGNED_INT_VEC3: return 12;\r\n    case WebGLConstants.UNSIGNED_INT_VEC4: return 16;\r\n    case WebGLConstants.FLOAT: return 4;\r\n    case WebGLConstants.FLOAT_VEC2: return 8;\r\n    case WebGLConstants.FLOAT_VEC3: return 12;\r\n    case WebGLConstants.FLOAT_VEC4: return 16;\r\n    case WebGLConstants.FLOAT_MAT2: return 16;\r\n    case WebGLConstants.FLOAT_MAT2x3: return 24;\r\n    case WebGLConstants.FLOAT_MAT2x4: return 32;\r\n    case WebGLConstants.FLOAT_MAT3x2: return 24;\r\n    case WebGLConstants.FLOAT_MAT3: return 36;\r\n    case WebGLConstants.FLOAT_MAT3x4: return 48;\r\n    case WebGLConstants.FLOAT_MAT4x2: return 32;\r\n    case WebGLConstants.FLOAT_MAT4x3: return 48;\r\n    case WebGLConstants.FLOAT_MAT4: return 64;\r\n    case WebGLConstants.SAMPLER_2D: return 4;\r\n    case WebGLConstants.SAMPLER_2D_ARRAY: return 4;\r\n    case WebGLConstants.SAMPLER_2D_ARRAY_SHADOW: return 4;\r\n    case WebGLConstants.SAMPLER_3D: return 4;\r\n    case WebGLConstants.SAMPLER_CUBE: return 4;\r\n    case WebGLConstants.INT_SAMPLER_2D: return 4;\r\n    case WebGLConstants.INT_SAMPLER_2D_ARRAY: return 4;\r\n    case WebGLConstants.INT_SAMPLER_3D: return 4;\r\n    case WebGLConstants.INT_SAMPLER_CUBE: return 4;\r\n    case WebGLConstants.UNSIGNED_INT_SAMPLER_2D: return 4;\r\n    case WebGLConstants.UNSIGNED_INT_SAMPLER_2D_ARRAY: return 4;\r\n    case WebGLConstants.UNSIGNED_INT_SAMPLER_3D: return 4;\r\n    case WebGLConstants.UNSIGNED_INT_SAMPLER_CUBE: return 4;\r\n    default: {\r\n        errorID(16314);\r\n        return 0;\r\n    }\r\n    }\r\n}\r\n\r\nfunction WebGLGetComponentCount (glType: GLenum, gl: WebGL2RenderingContext): Type {\r\n    switch (glType) {\r\n    case WebGLConstants.FLOAT_MAT2: return 2;\r\n    case WebGLConstants.FLOAT_MAT2x3: return 2;\r\n    case WebGLConstants.FLOAT_MAT2x4: return 2;\r\n    case WebGLConstants.FLOAT_MAT3x2: return 3;\r\n    case WebGLConstants.FLOAT_MAT3: return 3;\r\n    case WebGLConstants.FLOAT_MAT3x4: return 3;\r\n    case WebGLConstants.FLOAT_MAT4x2: return 4;\r\n    case WebGLConstants.FLOAT_MAT4x3: return 4;\r\n    case WebGLConstants.FLOAT_MAT4: return 4;\r\n    default: {\r\n        return 1;\r\n    }\r\n    }\r\n}\r\n\r\nconst WebGLCmpFuncs: GLenum[] = [\r\n    WebGLConstants.NEVER,\r\n    WebGLConstants.LESS,\r\n    WebGLConstants.EQUAL,\r\n    WebGLConstants.LEQUAL,\r\n    WebGLConstants.GREATER,\r\n    WebGLConstants.NOTEQUAL,\r\n    WebGLConstants.GEQUAL,\r\n    WebGLConstants.ALWAYS,\r\n];\r\n\r\nconst WebGLStencilOps: GLenum[] = [\r\n    WebGLConstants.ZERO,\r\n    WebGLConstants.KEEP,\r\n    WebGLConstants.REPLACE,\r\n    WebGLConstants.INCR,\r\n    WebGLConstants.DECR,\r\n    WebGLConstants.INVERT,\r\n    WebGLConstants.INCR_WRAP,\r\n    WebGLConstants.DECR_WRAP,\r\n];\r\n\r\nconst WebGLBlendOps: GLenum[] = [\r\n    WebGLConstants.FUNC_ADD,\r\n    WebGLConstants.FUNC_SUBTRACT,\r\n    WebGLConstants.FUNC_REVERSE_SUBTRACT,\r\n    WebGLConstants.MIN,\r\n    WebGLConstants.MAX,\r\n];\r\n\r\nconst WebGLBlendFactors: GLenum[] = [\r\n    WebGLConstants.ZERO,\r\n    WebGLConstants.ONE,\r\n    WebGLConstants.SRC_ALPHA,\r\n    WebGLConstants.DST_ALPHA,\r\n    WebGLConstants.ONE_MINUS_SRC_ALPHA,\r\n    WebGLConstants.ONE_MINUS_DST_ALPHA,\r\n    WebGLConstants.SRC_COLOR,\r\n    WebGLConstants.DST_COLOR,\r\n    WebGLConstants.ONE_MINUS_SRC_COLOR,\r\n    WebGLConstants.ONE_MINUS_DST_COLOR,\r\n    WebGLConstants.SRC_ALPHA_SATURATE,\r\n    WebGLConstants.CONSTANT_COLOR,\r\n    WebGLConstants.ONE_MINUS_CONSTANT_COLOR,\r\n    WebGLConstants.CONSTANT_ALPHA,\r\n    WebGLConstants.ONE_MINUS_CONSTANT_ALPHA,\r\n];\r\n\r\nexport function WebGL2CmdFuncCreateBuffer (device: WebGL2Device, gpuBuffer: IWebGL2GPUBuffer): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const glUsage: GLenum = gpuBuffer.memUsage & MemoryUsageBit.HOST ? WebGLConstants.DYNAMIC_DRAW : WebGLConstants.STATIC_DRAW;\r\n\r\n    if (gpuBuffer.usage & BufferUsageBit.VERTEX) {\r\n        gpuBuffer.glTarget = WebGLConstants.ARRAY_BUFFER;\r\n        const glBuffer = gl.createBuffer();\r\n\r\n        if (glBuffer) {\r\n            gpuBuffer.glBuffer = glBuffer;\r\n            if (gpuBuffer.size > 0) {\r\n                if (device.extensions.useVAO) {\r\n                    if (cache.glVAO) {\r\n                        gl.bindVertexArray(null);\r\n                        cache.glVAO = null;\r\n                    }\r\n                }\r\n                gfxStateCache.gpuInputAssembler = null;\r\n\r\n                if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                    cache.glArrayBuffer = gpuBuffer.glBuffer;\r\n                }\r\n\r\n                gl.bufferData(WebGLConstants.ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n                cache.glArrayBuffer = null;\r\n            }\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {\r\n        gpuBuffer.glTarget = WebGLConstants.ELEMENT_ARRAY_BUFFER;\r\n        const glBuffer = gl.createBuffer();\r\n        if (glBuffer) {\r\n            gpuBuffer.glBuffer = glBuffer;\r\n            if (gpuBuffer.size > 0) {\r\n                if (device.extensions.useVAO) {\r\n                    if (cache.glVAO) {\r\n                        gl.bindVertexArray(null);\r\n                        cache.glVAO = null;\r\n                    }\r\n                }\r\n                gfxStateCache.gpuInputAssembler = null;\r\n\r\n                if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                    cache.glElementArrayBuffer = gpuBuffer.glBuffer;\r\n                }\r\n\r\n                gl.bufferData(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n                cache.glElementArrayBuffer = null;\r\n            }\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {\r\n        gpuBuffer.glTarget = WebGLConstants.UNIFORM_BUFFER;\r\n        const glBuffer = gl.createBuffer();\r\n        if (glBuffer && gpuBuffer.size > 0) {\r\n            gpuBuffer.glBuffer = glBuffer;\r\n            if (cache.glUniformBuffer !== gpuBuffer.glBuffer) {\r\n                gl.bindBuffer(WebGLConstants.UNIFORM_BUFFER, gpuBuffer.glBuffer);\r\n                cache.glUniformBuffer = gpuBuffer.glBuffer;\r\n            }\r\n\r\n            gl.bufferData(WebGLConstants.UNIFORM_BUFFER, gpuBuffer.size, glUsage);\r\n\r\n            gl.bindBuffer(WebGLConstants.UNIFORM_BUFFER, null);\r\n            cache.glUniformBuffer = null;\r\n        }\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else {\r\n        errorID(16315);\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncDestroyBuffer (device: WebGL2Device, gpuBuffer: IWebGL2GPUBuffer): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const useVAO = device.extensions.useVAO;\r\n\r\n    if (gpuBuffer.glBuffer) {\r\n        // Firefox 75+ implicitly unbind whatever buffer there was on the slot sometimes\r\n        // can be reproduced in the static batching scene at https://github.com/cocos-creator/test-cases-3d\r\n        switch (gpuBuffer.glTarget) {\r\n        case WebGLConstants.ARRAY_BUFFER:\r\n            if (useVAO) {\r\n                if (cache.glVAO) {\r\n                    gl.bindVertexArray(null);\r\n                    cache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n            cache.glArrayBuffer = null;\r\n            break;\r\n        case WebGLConstants.ELEMENT_ARRAY_BUFFER:\r\n            if (useVAO) {\r\n                if (cache.glVAO) {\r\n                    gl.bindVertexArray(null);\r\n                    cache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n            cache.glElementArrayBuffer = null;\r\n            break;\r\n        case WebGLConstants.UNIFORM_BUFFER:\r\n            gl.bindBuffer(WebGLConstants.UNIFORM_BUFFER, null);\r\n            cache.glUniformBuffer = null;\r\n            break;\r\n        default:\r\n        }\r\n\r\n        gl.deleteBuffer(gpuBuffer.glBuffer);\r\n        gpuBuffer.glBuffer = null;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncResizeBuffer (device: WebGL2Device, gpuBuffer: IWebGL2GPUBuffer): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const glUsage: GLenum = gpuBuffer.memUsage & MemoryUsageBit.HOST ? WebGLConstants.DYNAMIC_DRAW : WebGLConstants.STATIC_DRAW;\r\n\r\n    if (gpuBuffer.usage & BufferUsageBit.VERTEX) {\r\n        if (device.extensions.useVAO) {\r\n            if (cache.glVAO) {\r\n                gl.bindVertexArray(null);\r\n                cache.glVAO = null;\r\n            }\r\n        }\r\n        gfxStateCache.gpuInputAssembler = null;\r\n\r\n        if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {\r\n            gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n        }\r\n\r\n        if (gpuBuffer.buffer) {\r\n            gl.bufferData(WebGLConstants.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);\r\n        } else {\r\n            gl.bufferData(WebGLConstants.ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n        }\r\n        gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n        cache.glArrayBuffer = null;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {\r\n        if (device.extensions.useVAO) {\r\n            if (cache.glVAO) {\r\n                gl.bindVertexArray(null);\r\n                cache.glVAO = null;\r\n            }\r\n        }\r\n        gfxStateCache.gpuInputAssembler = null;\r\n\r\n        if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n            gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n        }\r\n\r\n        if (gpuBuffer.buffer) {\r\n            gl.bufferData(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);\r\n        } else {\r\n            gl.bufferData(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);\r\n        }\r\n        gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n        cache.glElementArrayBuffer = null;\r\n    } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {\r\n        if (cache.glUniformBuffer !== gpuBuffer.glBuffer) {\r\n            gl.bindBuffer(WebGLConstants.UNIFORM_BUFFER, gpuBuffer.glBuffer);\r\n        }\r\n\r\n        gl.bufferData(WebGLConstants.UNIFORM_BUFFER, gpuBuffer.size, glUsage);\r\n        gl.bindBuffer(WebGLConstants.UNIFORM_BUFFER, null);\r\n        cache.glUniformBuffer = null;\r\n    } else if ((gpuBuffer.usage & BufferUsageBit.INDIRECT)\r\n            || (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST)\r\n            || (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC)) {\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    } else {\r\n        errorID(16315);\r\n        gpuBuffer.glTarget = WebGLConstants.NONE;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncUpdateBuffer (\r\n    device: WebGL2Device,\r\n    gpuBuffer: IWebGL2GPUBuffer,\r\n    buffer: Readonly<BufferSource>,\r\n    offset: number,\r\n    size: number,\r\n): void {\r\n    if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {\r\n        gpuBuffer.indirects.clearDraws();\r\n        const drawInfos = (buffer as IndirectBuffer).drawInfos;\r\n        for (let i = 0; i < drawInfos.length; ++i) {\r\n            gpuBuffer.indirects.setDrawInfo(offset + i, drawInfos[i]);\r\n        }\r\n    } else {\r\n        const buff = buffer as ArrayBuffer;\r\n        const { gl } = device;\r\n        const cache = device.getStateCache();\r\n\r\n        switch (gpuBuffer.glTarget) {\r\n        case WebGLConstants.ARRAY_BUFFER: {\r\n            if (device.extensions.useVAO) {\r\n                if (cache.glVAO) {\r\n                    gl.bindVertexArray(null);\r\n                    cache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                cache.glArrayBuffer = gpuBuffer.glBuffer;\r\n            }\r\n\r\n            if (systemInfo.os === OS.IOS && (gpuBuffer.memUsage & MemoryUsageBit.HOST) && offset === 0 && size === buff.byteLength) {\r\n                // Fix performance issue on iOS.\r\n                // TODO(zhouzhenglong): glBufferSubData is faster than glBufferData in most cases.\r\n                // We should use multiple buffers to avoid stall (cpu write conflicts with gpu read).\r\n                // Before that, we will use glBufferData instead of glBufferSubData.\r\n                gl.bufferData(gpuBuffer.glTarget, buff, gl.DYNAMIC_DRAW);\r\n            } else if (size === buff.byteLength) {\r\n                gl.bufferSubData(gpuBuffer.glTarget, offset, buff);\r\n            } else {\r\n                gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));\r\n            }\r\n            break;\r\n        }\r\n        case WebGLConstants.ELEMENT_ARRAY_BUFFER: {\r\n            if (device.extensions.useVAO) {\r\n                if (cache.glVAO) {\r\n                    gl.bindVertexArray(null);\r\n                    cache.glVAO = null;\r\n                }\r\n            }\r\n            gfxStateCache.gpuInputAssembler = null;\r\n\r\n            if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                cache.glElementArrayBuffer = gpuBuffer.glBuffer;\r\n            }\r\n\r\n            if (systemInfo.os === OS.IOS && (gpuBuffer.memUsage & MemoryUsageBit.HOST) && offset === 0 && size === buff.byteLength) {\r\n                // Fix performance issue on iOS.\r\n                // TODO(zhouzhenglong): glBufferSubData is faster than glBufferData in most cases.\r\n                // We should use multiple buffers to avoid stall (cpu write conflicts with gpu read).\r\n                // Before that, we will use glBufferData instead of glBufferSubData.\r\n                gl.bufferData(gpuBuffer.glTarget, buff, gl.DYNAMIC_DRAW);\r\n            } else if (size === buff.byteLength) {\r\n                gl.bufferSubData(gpuBuffer.glTarget, offset, buff);\r\n            } else {\r\n                gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));\r\n            }\r\n            break;\r\n        }\r\n        case WebGLConstants.UNIFORM_BUFFER: {\r\n            if (cache.glUniformBuffer !== gpuBuffer.glBuffer) {\r\n                gl.bindBuffer(WebGLConstants.UNIFORM_BUFFER, gpuBuffer.glBuffer);\r\n                cache.glUniformBuffer = gpuBuffer.glBuffer;\r\n            }\r\n\r\n            if (systemInfo.os === OS.IOS && (gpuBuffer.memUsage & MemoryUsageBit.HOST) && offset === 0 && size === buff.byteLength) {\r\n                // Fix performance issue on iOS.\r\n                // TODO(zhouzhenglong): glBufferSubData is faster than glBufferData in most cases.\r\n                // We should use multiple buffers to avoid stall (cpu write conflicts with gpu read).\r\n                // Before that, we will use glBufferData instead of glBufferSubData.\r\n                gl.bufferData(gpuBuffer.glTarget, buff, gl.DYNAMIC_DRAW);\r\n            } else if (size === buff.byteLength) {\r\n                gl.bufferSubData(gpuBuffer.glTarget, offset, buff);\r\n            } else {\r\n                gl.bufferSubData(gpuBuffer.glTarget, offset, new Float32Array(buff, 0, size / 4));\r\n            }\r\n            break;\r\n        }\r\n        default: {\r\n            errorID(16316);\r\n        }\r\n        }\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncCreateTexture (device: WebGL2Device, gpuTexture: IWebGL2GPUTexture): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const capabilities = device.capabilities;\r\n\r\n    gpuTexture.glInternalFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);\r\n    gpuTexture.glFormat = GFXFormatToWebGLFormat(gpuTexture.format, gl);\r\n    gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);\r\n\r\n    let w = gpuTexture.width;\r\n    let h = gpuTexture.height;\r\n    const d = gpuTexture.depth;\r\n    const l = gpuTexture.arrayLayer;\r\n\r\n    switch (gpuTexture.type) {\r\n    case TextureType.TEX2D: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > capabilities.maxTextureSize) {\r\n            errorID(9100, maxSize, capabilities.maxTextureSize);\r\n        }\r\n\r\n        if (gpuTexture.samples === SampleCount.X1) {\r\n            gpuTexture.glTexture = gl.createTexture();\r\n            if (gpuTexture.size > 0) {\r\n                const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n                if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                    gl.bindTexture(WebGLConstants.TEXTURE_2D, gpuTexture.glTexture);\r\n                    glTexUnit.glTexture = gpuTexture.glTexture;\r\n                }\r\n\r\n                if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                    for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                        const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                        const view: Uint8Array = new Uint8Array(imgSize);\r\n                        gl.compressedTexImage2D(WebGLConstants.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                        w = max(1, w >> 1);\r\n                        h = max(1, h >> 1);\r\n                    }\r\n                } else if (gpuTexture.flags & TextureFlagBit.MUTABLE_STORAGE) {\r\n                    gl.texImage2D(WebGLConstants.TEXTURE_2D, 0, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);\r\n                } else {\r\n                    gl.texStorage2D(WebGLConstants.TEXTURE_2D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h);\r\n                }\r\n            }\r\n        } else {\r\n            gpuTexture.glRenderbuffer = gl.createRenderbuffer();\r\n            if (gpuTexture.size > 0) {\r\n                if (cache.glRenderbuffer !== gpuTexture.glRenderbuffer) {\r\n                    gl.bindRenderbuffer(WebGLConstants.RENDERBUFFER, gpuTexture.glRenderbuffer);\r\n                    cache.glRenderbuffer = gpuTexture.glRenderbuffer;\r\n                }\r\n\r\n                gl.renderbufferStorageMultisample(\r\n                    WebGLConstants.RENDERBUFFER,\r\n                    gpuTexture.samples,\r\n                    gpuTexture.glInternalFmt,\r\n                    gpuTexture.width,\r\n                    gpuTexture.height,\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.TEX2D_ARRAY: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D_ARRAY;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > capabilities.maxTextureSize) {\r\n            errorID(9100, maxSize, capabilities.maxTextureSize);\r\n        }\r\n        if (l > capabilities.maxArrayTextureLayers) {\r\n            errorID(9100, l, capabilities.maxArrayTextureLayers);\r\n        }\r\n\r\n        gpuTexture.glTexture = gl.createTexture();\r\n        if (gpuTexture.size > 0) {\r\n            const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_2D_ARRAY, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, l);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage3D(WebGLConstants.TEXTURE_2D_ARRAY, i, gpuTexture.glInternalFmt, w, h, l, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                gl.texStorage3D(WebGLConstants.TEXTURE_2D_ARRAY, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, l);\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.TEX3D: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_3D;\r\n\r\n        const maxSize = max(max(w, h), d);\r\n        if (maxSize > capabilities.max3DTextureSize) {\r\n            errorID(9100, maxSize, capabilities.max3DTextureSize);\r\n        }\r\n\r\n        gpuTexture.glTexture = gl.createTexture();\r\n        if (gpuTexture.size > 0) {\r\n            const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_3D, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, d);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage3D(WebGLConstants.TEXTURE_3D, i, gpuTexture.glInternalFmt, w, h, d, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                gl.texStorage3D(WebGLConstants.TEXTURE_3D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, d);\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.CUBE: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_CUBE_MAP;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > capabilities.maxCubeMapTextureSize) {\r\n            errorID(9100, maxSize, capabilities.maxTextureSize);\r\n        }\r\n\r\n        gpuTexture.glTexture = gl.createTexture();\r\n        if (gpuTexture.size > 0) {\r\n            const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_CUBE_MAP, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    for (let f = 0; f < 6; ++f) {\r\n                        gl.compressedTexImage2D(WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                    }\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                gl.texStorage2D(WebGLConstants.TEXTURE_CUBE_MAP, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h);\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16317);\r\n        gpuTexture.type = TextureType.TEX2D;\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n    }\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncDestroyTexture (device: WebGL2Device, gpuTexture: IWebGL2GPUTexture): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    if (gpuTexture.glTexture) {\r\n        const glTexUnits = cache.glTexUnits;\r\n        let texUnit = cache.texUnit;\r\n        gl.deleteTexture(gpuTexture.glTexture);\r\n        for (let i = 0; i < glTexUnits.length; ++i) {\r\n            if (glTexUnits[i].glTexture === gpuTexture.glTexture) {\r\n                gl.activeTexture(WebGLConstants.TEXTURE0 + i);\r\n                texUnit = i;\r\n                gl.bindTexture(gpuTexture.glTarget, null);\r\n                glTexUnits[i].glTexture = null;\r\n            }\r\n        }\r\n        cache.texUnit = texUnit;\r\n        gpuTexture.glTexture = null;\r\n    }\r\n\r\n    if (gpuTexture.glRenderbuffer) {\r\n        const glRenderbuffer = cache.glRenderbuffer;\r\n        gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);\r\n        if (glRenderbuffer === gpuTexture.glRenderbuffer) {\r\n            gl.bindRenderbuffer(WebGLConstants.RENDERBUFFER, null);\r\n            cache.glRenderbuffer = null;\r\n        }\r\n        gpuTexture.glRenderbuffer = null;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncResizeTexture (device: WebGL2Device, gpuTexture: IWebGL2GPUTexture): void {\r\n    if (!gpuTexture.size) return;\r\n\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const capabilities = device.capabilities;\r\n\r\n    let w = gpuTexture.width;\r\n    let h = gpuTexture.height;\r\n    const d = gpuTexture.depth;\r\n    const l = gpuTexture.arrayLayer;\r\n\r\n    switch (gpuTexture.type) {\r\n    case TextureType.TEX2D: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > capabilities.maxTextureSize) {\r\n            errorID(9100, maxSize, capabilities.maxTextureSize);\r\n        }\r\n\r\n        if (gpuTexture.samples === SampleCount.X1) {\r\n            const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_2D, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage2D(WebGLConstants.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                // immutable by default\r\n                WebGL2CmdFuncDestroyTexture(device, gpuTexture);\r\n                WebGL2CmdFuncCreateTexture(device, gpuTexture);\r\n            }\r\n        } else if (gpuTexture.glRenderbuffer) {\r\n            if (cache.glRenderbuffer !== gpuTexture.glRenderbuffer) {\r\n                gl.bindRenderbuffer(WebGLConstants.RENDERBUFFER, gpuTexture.glRenderbuffer);\r\n                cache.glRenderbuffer = gpuTexture.glRenderbuffer;\r\n            }\r\n\r\n            gl.renderbufferStorageMultisample(\r\n                WebGLConstants.RENDERBUFFER,\r\n                gpuTexture.samples,\r\n                gpuTexture.glInternalFmt,\r\n                gpuTexture.width,\r\n                gpuTexture.height,\r\n            );\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.TEX2D_ARRAY: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D_ARRAY;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > capabilities.maxTextureSize) {\r\n            errorID(9100, maxSize, capabilities.maxTextureSize);\r\n        }\r\n        if (l > capabilities.maxArrayTextureLayers) {\r\n            errorID(9100, l, capabilities.maxArrayTextureLayers);\r\n        }\r\n\r\n        gpuTexture.glTexture = gl.createTexture();\r\n        if (gpuTexture.size > 0) {\r\n            const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_2D_ARRAY, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, l);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage3D(WebGLConstants.TEXTURE_2D_ARRAY, i, gpuTexture.glInternalFmt, w, h, l, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                gl.texStorage3D(WebGLConstants.TEXTURE_2D_ARRAY, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, l);\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.TEX3D: {\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_3D;\r\n\r\n        const maxSize = max(max(w, h), d);\r\n        if (maxSize > capabilities.max3DTextureSize) {\r\n            errorID(9100, maxSize, capabilities.max3DTextureSize);\r\n        }\r\n\r\n        gpuTexture.glTexture = gl.createTexture();\r\n        if (gpuTexture.size > 0) {\r\n            const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n            if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                gl.bindTexture(WebGLConstants.TEXTURE_3D, gpuTexture.glTexture);\r\n                glTexUnit.glTexture = gpuTexture.glTexture;\r\n            }\r\n\r\n            if (FormatInfos[gpuTexture.format].isCompressed) {\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, d);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage3D(WebGLConstants.TEXTURE_3D, i, gpuTexture.glInternalFmt, w, h, d, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            } else {\r\n                gl.texStorage3D(WebGLConstants.TEXTURE_3D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, d);\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case TextureType.CUBE: {\r\n        gpuTexture.type = TextureType.CUBE;\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_CUBE_MAP;\r\n\r\n        const maxSize = max(w, h);\r\n        if (maxSize > capabilities.maxCubeMapTextureSize) {\r\n            errorID(9100, maxSize, capabilities.maxTextureSize);\r\n        }\r\n\r\n        const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n\r\n        if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n            gl.bindTexture(WebGLConstants.TEXTURE_CUBE_MAP, gpuTexture.glTexture);\r\n            glTexUnit.glTexture = gpuTexture.glTexture;\r\n        }\r\n\r\n        if (FormatInfos[gpuTexture.format].isCompressed) {\r\n            for (let f = 0; f < 6; ++f) {\r\n                w = gpuTexture.width;\r\n                h = gpuTexture.height;\r\n                for (let i = 0; i < gpuTexture.mipLevel; ++i) {\r\n                    const imgSize = FormatSize(gpuTexture.format, w, h, 1);\r\n                    const view: Uint8Array = new Uint8Array(imgSize);\r\n                    gl.compressedTexImage2D(WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f, i, gpuTexture.glInternalFmt, w, h, 0, view);\r\n                    w = max(1, w >> 1);\r\n                    h = max(1, h >> 1);\r\n                }\r\n            }\r\n        } else {\r\n            // immutable by default\r\n            WebGL2CmdFuncDestroyTexture(device, gpuTexture);\r\n            WebGL2CmdFuncCreateTexture(device, gpuTexture);\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16317);\r\n        gpuTexture.type = TextureType.TEX2D;\r\n        gpuTexture.glTarget = WebGLConstants.TEXTURE_2D;\r\n    }\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncPrepareSamplerInfo (device: WebGL2Device, gpuSampler: IWebGL2GPUSampler): void {\r\n    const { gl } = device;\r\n\r\n    if (gpuSampler.minFilter === Filter.LINEAR || gpuSampler.minFilter === Filter.ANISOTROPIC) {\r\n        if (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) {\r\n            gpuSampler.glMinFilter = WebGLConstants.LINEAR_MIPMAP_LINEAR;\r\n        } else if (gpuSampler.mipFilter === Filter.POINT) {\r\n            gpuSampler.glMinFilter = WebGLConstants.LINEAR_MIPMAP_NEAREST;\r\n        } else {\r\n            gpuSampler.glMinFilter = WebGLConstants.LINEAR;\r\n        }\r\n    } else if (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) {\r\n        gpuSampler.glMinFilter = WebGLConstants.NEAREST_MIPMAP_LINEAR;\r\n    } else if (gpuSampler.mipFilter === Filter.POINT) {\r\n        gpuSampler.glMinFilter = WebGLConstants.NEAREST_MIPMAP_NEAREST;\r\n    } else {\r\n        gpuSampler.glMinFilter = WebGLConstants.NEAREST;\r\n    }\r\n\r\n    if (gpuSampler.magFilter === Filter.LINEAR || gpuSampler.magFilter === Filter.ANISOTROPIC) {\r\n        gpuSampler.glMagFilter = WebGLConstants.LINEAR;\r\n    } else {\r\n        gpuSampler.glMagFilter = WebGLConstants.NEAREST;\r\n    }\r\n\r\n    gpuSampler.glWrapS = WebGLWraps[gpuSampler.addressU];\r\n    gpuSampler.glWrapT = WebGLWraps[gpuSampler.addressV];\r\n    gpuSampler.glWrapR = WebGLWraps[gpuSampler.addressW];\r\n}\r\n\r\nexport function WebGL2CmdFuncDestroySampler (device: WebGL2Device, gpuSampler: IWebGL2GPUSampler): void {\r\n    const { gl } = device;\r\n    const it = gpuSampler.glSamplers.values();\r\n    const res = it.next();\r\n\r\n    while (!res.done) {\r\n        gl.deleteSampler(res.value);\r\n\r\n        const glSamplerUnits = device.getStateCache().glSamplerUnits;\r\n        for (let i = 0; i < glSamplerUnits.length; ++i) {\r\n            if (glSamplerUnits[i] === res.value) {\r\n                gl.bindSampler(i, null);\r\n                glSamplerUnits[i] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    gpuSampler.glSamplers.clear();\r\n}\r\n\r\nexport function WebGL2CmdFuncCreateFramebuffer (device: WebGL2Device, gpuFramebuffer: IWebGL2GPUFramebuffer): void {\r\n    const cache = device.getStateCache();\r\n    for (let i = 0; i < gpuFramebuffer.gpuColorViews.length; ++i) {\r\n        const tex = gpuFramebuffer.gpuColorViews[i].gpuTexture;\r\n        if (tex.isSwapchainTexture) {\r\n            gpuFramebuffer.isOffscreen = false;\r\n            return;\r\n        }\r\n    }\r\n\r\n    const { gl } = device;\r\n    const attachments: GLenum[] = [];\r\n\r\n    const glFramebuffer = gl.createFramebuffer();\r\n    if (glFramebuffer) {\r\n        gpuFramebuffer.glFramebuffer = glFramebuffer;\r\n\r\n        if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);\r\n        }\r\n\r\n        for (let i = 0; i < gpuFramebuffer.gpuColorViews.length; ++i) {\r\n            const colorTextureView = gpuFramebuffer.gpuColorViews[i];\r\n            const colorTexture = colorTextureView.gpuTexture;\r\n            if (colorTexture) {\r\n                if (colorTexture.glTexture) {\r\n                    gl.framebufferTexture2D(\r\n                        WebGLConstants.FRAMEBUFFER,\r\n                        WebGLConstants.COLOR_ATTACHMENT0 + i,\r\n                        colorTexture.glTarget,\r\n                        colorTexture.glTexture,\r\n                        colorTextureView.baseLevel,\r\n                    );\r\n                } else {\r\n                    gl.framebufferRenderbuffer(\r\n                        WebGLConstants.FRAMEBUFFER,\r\n                        WebGLConstants.COLOR_ATTACHMENT0 + i,\r\n                        WebGLConstants.RENDERBUFFER,\r\n                        colorTexture.glRenderbuffer,\r\n                    );\r\n                }\r\n\r\n                attachments.push(WebGLConstants.COLOR_ATTACHMENT0 + i);\r\n                gpuFramebuffer.width = min(gpuFramebuffer.width, colorTexture.width >> colorTextureView.baseLevel);\r\n                gpuFramebuffer.height = min(gpuFramebuffer.height, colorTexture.height >> colorTextureView.baseLevel);\r\n            }\r\n        }\r\n\r\n        const dstView = gpuFramebuffer.gpuDepthStencilView;\r\n        if (dstView) {\r\n            const dst = dstView.gpuTexture;\r\n            const glAttachment = FormatInfos[dst.format].hasStencil ? WebGLConstants.DEPTH_STENCIL_ATTACHMENT : WebGLConstants.DEPTH_ATTACHMENT;\r\n            if (dst.glTexture) {\r\n                gl.framebufferTexture2D(\r\n                    WebGLConstants.FRAMEBUFFER,\r\n                    glAttachment,\r\n                    dst.glTarget,\r\n                    dst.glTexture,\r\n                    gpuFramebuffer.gpuDepthStencilView!.baseLevel,\r\n                );\r\n            } else {\r\n                gl.framebufferRenderbuffer(\r\n                    WebGLConstants.FRAMEBUFFER,\r\n                    glAttachment,\r\n                    WebGLConstants.RENDERBUFFER,\r\n                    dst.glRenderbuffer,\r\n                );\r\n            }\r\n            gpuFramebuffer.width = min(gpuFramebuffer.width, dst.width >> dstView.baseLevel);\r\n            gpuFramebuffer.height = min(gpuFramebuffer.height, dst.height >> dstView.baseLevel);\r\n        }\r\n\r\n        gl.drawBuffers(attachments);\r\n\r\n        const status = gl.checkFramebufferStatus(WebGLConstants.FRAMEBUFFER);\r\n        if (status !== WebGLConstants.FRAMEBUFFER_COMPLETE) {\r\n            switch (status) {\r\n            case WebGLConstants.FRAMEBUFFER_INCOMPLETE_ATTACHMENT: {\r\n                errorID(16318);\r\n                break;\r\n            }\r\n            case WebGLConstants.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: {\r\n                errorID(16319);\r\n                break;\r\n            }\r\n            case WebGLConstants.FRAMEBUFFER_INCOMPLETE_DIMENSIONS: {\r\n                errorID(16320);\r\n                break;\r\n            }\r\n            case WebGLConstants.FRAMEBUFFER_UNSUPPORTED: {\r\n                errorID(16321);\r\n                break;\r\n            }\r\n            default:\r\n            }\r\n        }\r\n\r\n        if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, cache.glFramebuffer);\r\n        }\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncDestroyFramebuffer (device: WebGL2Device, gpuFramebuffer: IWebGL2GPUFramebuffer): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    if (gpuFramebuffer.glFramebuffer) {\r\n        gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);\r\n        if (cache.glFramebuffer === gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, null);\r\n            cache.glFramebuffer = null;\r\n        }\r\n        gpuFramebuffer.glFramebuffer = null;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncCreateShader (device: WebGL2Device, gpuShader: IWebGL2GPUShader): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const capabilities = device.capabilities;\r\n\r\n    for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n        const gpuStage = gpuShader.gpuStages[k];\r\n\r\n        let glShaderType: GLenum = 0;\r\n        let shaderTypeStr = '';\r\n        let lineNumber = 1;\r\n\r\n        switch (gpuStage.type) {\r\n        case ShaderStageFlagBit.VERTEX: {\r\n            shaderTypeStr = 'VertexShader';\r\n            glShaderType = WebGLConstants.VERTEX_SHADER;\r\n            break;\r\n        }\r\n        case ShaderStageFlagBit.FRAGMENT: {\r\n            shaderTypeStr = 'FragmentShader';\r\n            glShaderType = WebGLConstants.FRAGMENT_SHADER;\r\n            break;\r\n        }\r\n        default: {\r\n            errorID(16322);\r\n            return;\r\n        }\r\n        }\r\n\r\n        const glShader = gl.createShader(glShaderType);\r\n        if (glShader) {\r\n            gpuStage.glShader = glShader;\r\n            gl.shaderSource(gpuStage.glShader, `#version 300 es\\n${gpuStage.source}`);\r\n            gl.compileShader(gpuStage.glShader);\r\n\r\n            if (!gl.getShaderParameter(gpuStage.glShader, WebGLConstants.COMPILE_STATUS)) {\r\n                errorID(16323, shaderTypeStr, gpuShader.name);\r\n                errorID(16324, gpuStage.source.replace(/^|\\n/g, (): string => `\\n${lineNumber++} `));\r\n                error(gl.getShaderInfoLog(gpuStage.glShader));\r\n\r\n                for (let l = 0; l < gpuShader.gpuStages.length; l++) {\r\n                    const stage = gpuShader.gpuStages[k];\r\n                    if (stage.glShader) {\r\n                        gl.deleteShader(stage.glShader);\r\n                        stage.glShader = null;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    const glProgram = gl.createProgram();\r\n    if (!glProgram) {\r\n        return;\r\n    }\r\n\r\n    gpuShader.glProgram = glProgram;\r\n\r\n    const enableEffectImport = !!(cclegacy.rendering && cclegacy.rendering.enableEffectImport);\r\n\r\n    // link program\r\n    for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n        const gpuStage = gpuShader.gpuStages[k];\r\n        gl.attachShader(gpuShader.glProgram, gpuStage.glShader!);\r\n    }\r\n\r\n    gl.linkProgram(gpuShader.glProgram);\r\n\r\n    // detach & delete immediately\r\n    for (let k = 0; k < gpuShader.gpuStages.length; k++) {\r\n        const gpuStage = gpuShader.gpuStages[k];\r\n        if (gpuStage.glShader) {\r\n            gl.detachShader(gpuShader.glProgram, gpuStage.glShader);\r\n            gl.deleteShader(gpuStage.glShader);\r\n            gpuStage.glShader = null;\r\n        }\r\n    }\r\n\r\n    if (gl.getProgramParameter(gpuShader.glProgram, WebGLConstants.LINK_STATUS)) {\r\n        debugID(16325, gpuShader.name);\r\n    } else {\r\n        errorID(16326, gpuShader.name);\r\n        error(gl.getProgramInfoLog(gpuShader.glProgram));\r\n        return;\r\n    }\r\n\r\n    // parse inputs\r\n    const activeAttribCount: number = gl.getProgramParameter(gpuShader.glProgram, WebGLConstants.ACTIVE_ATTRIBUTES);\r\n    gpuShader.glInputs = new Array<IWebGL2GPUInput>(activeAttribCount);\r\n\r\n    for (let i = 0; i < activeAttribCount; ++i) {\r\n        const attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);\r\n        if (attribInfo) {\r\n            let varName: string;\r\n            const nameOffset = attribInfo.name.indexOf('[');\r\n            if (nameOffset !== -1) {\r\n                varName = attribInfo.name.substring(0, nameOffset);\r\n            } else {\r\n                varName = attribInfo.name;\r\n            }\r\n\r\n            const glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);\r\n            const type = WebGLTypeToGFXType(attribInfo.type, gl);\r\n            const stride = WebGLGetTypeSize(attribInfo.type, gl);\r\n\r\n            gpuShader.glInputs[i] = {\r\n                name: varName,\r\n                type,\r\n                stride,\r\n                count: attribInfo.size,\r\n                size: stride * attribInfo.size,\r\n\r\n                glType: attribInfo.type,\r\n                glLoc,\r\n            };\r\n        }\r\n    }\r\n\r\n    // create uniform blocks\r\n    const activeBlockCount: number = gl.getProgramParameter(gpuShader.glProgram, WebGLConstants.ACTIVE_UNIFORM_BLOCKS);\r\n    let blockName: string;\r\n    let blockIdx: number;\r\n    let blockSize: number;\r\n    let block: UniformBlock | null;\r\n\r\n    if (activeBlockCount) {\r\n        gpuShader.glBlocks = new Array<IWebGL2GPUUniformBlock>(activeBlockCount);\r\n\r\n        for (let b = 0; b < activeBlockCount; ++b) {\r\n            blockName = gl.getActiveUniformBlockName(gpuShader.glProgram, b)!;\r\n            const nameOffset = blockName.indexOf('[');\r\n            if (nameOffset !== -1) {\r\n                blockName = blockName.substring(0, nameOffset);\r\n            }\r\n\r\n            // blockIdx = gl.getUniformBlockIndex(gpuShader.glProgram, blockName);\r\n            block = null;\r\n            for (let k = 0; k < gpuShader.blocks.length; k++) {\r\n                if (gpuShader.blocks[k].name === blockName) {\r\n                    block = gpuShader.blocks[k];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!block) {\r\n                errorID(16404, blockName);\r\n            } else {\r\n                // blockIdx = gl.getUniformBlockIndex(gpuShader.glProgram, blockName);\r\n                blockIdx = b;\r\n                blockSize = gl.getActiveUniformBlockParameter(gpuShader.glProgram, blockIdx, WebGLConstants.UNIFORM_BLOCK_DATA_SIZE);\r\n\r\n                const glBinding = enableEffectImport\r\n                    ? block.flattened\r\n                    : block.binding + (device.bindingMappings.blockOffsets[block.set] || 0);\r\n\r\n                gl.uniformBlockBinding(gpuShader.glProgram, blockIdx, glBinding);\r\n\r\n                gpuShader.glBlocks[b] = {\r\n                    set: block.set,\r\n                    binding: block.binding,\r\n                    idx: blockIdx,\r\n                    name: blockName,\r\n                    size: blockSize,\r\n                    glBinding,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // WebGL doesn't support Framebuffer Fetch\r\n    for (let i = 0; i < gpuShader.subpassInputs.length; ++i) {\r\n        const subpassInput = gpuShader.subpassInputs[i];\r\n        gpuShader.samplerTextures.push(\r\n            new UniformSamplerTexture(subpassInput.set, subpassInput.binding, subpassInput.name, Type.SAMPLER2D, subpassInput.count),\r\n        );\r\n    }\r\n\r\n    // create uniform sampler textures\r\n    if (gpuShader.samplerTextures.length > 0) {\r\n        gpuShader.glSamplerTextures = new Array<IWebGL2GPUUniformSamplerTexture>(gpuShader.samplerTextures.length);\r\n\r\n        for (let i = 0; i < gpuShader.samplerTextures.length; ++i) {\r\n            const sampler = gpuShader.samplerTextures[i];\r\n            gpuShader.glSamplerTextures[i] = {\r\n                set: sampler.set,\r\n                binding: sampler.binding,\r\n                name: sampler.name,\r\n                type: sampler.type,\r\n                count: sampler.count,\r\n                units: [],\r\n                glUnits: null!,\r\n                glType: GFXTypeToWebGLType(sampler.type, gl),\r\n                glLoc: null!,\r\n            };\r\n        }\r\n    }\r\n\r\n    // texture unit index mapping optimization\r\n    const glActiveSamplers: IWebGL2GPUUniformSamplerTexture[] = [];\r\n    const glActiveSamplerLocations: WebGLUniformLocation[] = [];\r\n    const texUnitCacheMap = cache.texUnitCacheMap;\r\n\r\n    if (!enableEffectImport) {\r\n        let flexibleSetBaseOffset = 0;\r\n        for (let i = 0; i < gpuShader.blocks.length; ++i) {\r\n            if (gpuShader.blocks[i].set === device.bindingMappings.flexibleSet) {\r\n                flexibleSetBaseOffset++;\r\n            }\r\n        }\r\n\r\n        let arrayOffset = 0;\r\n        for (let i = 0; i < gpuShader.samplerTextures.length; ++i) {\r\n            const sampler = gpuShader.samplerTextures[i];\r\n            const glLoc = gl.getUniformLocation(gpuShader.glProgram, sampler.name);\r\n            // wEcHAT just returns { id: -1 } for non-existing names /eyerolling\r\n            if (glLoc && (glLoc as any).id !== -1) {\r\n                glActiveSamplers.push(gpuShader.glSamplerTextures[i]);\r\n                glActiveSamplerLocations.push(glLoc);\r\n            }\r\n            if (texUnitCacheMap[sampler.name] === undefined) {\r\n                let binding = sampler.binding + device.bindingMappings.samplerTextureOffsets[sampler.set] + arrayOffset;\r\n                if (sampler.set === device.bindingMappings.flexibleSet) { binding -= flexibleSetBaseOffset; }\r\n                texUnitCacheMap[sampler.name] = binding % capabilities.maxTextureUnits;\r\n                arrayOffset += sampler.count - 1;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < gpuShader.samplerTextures.length; ++i) {\r\n            const sampler = gpuShader.samplerTextures[i];\r\n            const glLoc = gl.getUniformLocation(gpuShader.glProgram, sampler.name);\r\n            // wEcHAT just returns { id: -1 } for non-existing names /eyerolling\r\n            if (glLoc && (glLoc as any).id !== -1) {\r\n                glActiveSamplers.push(gpuShader.glSamplerTextures[i]);\r\n                glActiveSamplerLocations.push(glLoc);\r\n            }\r\n            if (texUnitCacheMap[sampler.name] === undefined) {\r\n                texUnitCacheMap[sampler.name] = sampler.flattened % capabilities.maxTextureUnits;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (glActiveSamplers.length) {\r\n        const usedTexUnits: boolean[] = [];\r\n        // try to reuse existing mappings first\r\n        for (let i = 0; i < glActiveSamplers.length; ++i) {\r\n            const glSampler = glActiveSamplers[i];\r\n\r\n            let cachedUnit = texUnitCacheMap[glSampler.name];\r\n            if (cachedUnit !== undefined) {\r\n                glSampler.glLoc = glActiveSamplerLocations[i];\r\n                for (let t = 0; t < glSampler.count; ++t) {\r\n                    while (usedTexUnits[cachedUnit]) {\r\n                        cachedUnit = (cachedUnit + 1) % capabilities.maxTextureUnits;\r\n                    }\r\n                    glSampler.units.push(cachedUnit);\r\n                    usedTexUnits[cachedUnit] = true;\r\n                }\r\n            }\r\n        }\r\n        // fill in the rest sequencially\r\n        let unitIdx = 0;\r\n        for (let i = 0; i < glActiveSamplers.length; ++i) {\r\n            const glSampler = glActiveSamplers[i];\r\n\r\n            if (!glSampler.glLoc) {\r\n                glSampler.glLoc = glActiveSamplerLocations[i];\r\n                while (usedTexUnits[unitIdx]) { unitIdx++; }\r\n                for (let t = 0; t < glSampler.count; ++t) {\r\n                    while (usedTexUnits[unitIdx]) {\r\n                        unitIdx = (unitIdx + 1) % capabilities.maxTextureUnits;\r\n                    }\r\n                    if (texUnitCacheMap[glSampler.name] === undefined) {\r\n                        texUnitCacheMap[glSampler.name] = unitIdx;\r\n                    }\r\n                    glSampler.units.push(unitIdx);\r\n                    usedTexUnits[unitIdx] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (cache.glProgram !== gpuShader.glProgram) {\r\n            gl.useProgram(gpuShader.glProgram);\r\n        }\r\n\r\n        for (let k = 0; k < glActiveSamplers.length; k++) {\r\n            const glSampler = glActiveSamplers[k];\r\n            glSampler.glUnits = new Int32Array(glSampler.units);\r\n            gl.uniform1iv(glSampler.glLoc, glSampler.glUnits);\r\n        }\r\n\r\n        if (cache.glProgram !== gpuShader.glProgram) {\r\n            gl.useProgram(cache.glProgram);\r\n        }\r\n    }\r\n\r\n    gpuShader.glSamplerTextures = glActiveSamplers;\r\n}\r\n\r\nexport function WebGL2CmdFuncDestroyShader (device: WebGL2Device, gpuShader: IWebGL2GPUShader): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    if (gpuShader.glProgram) {\r\n        gl.deleteProgram(gpuShader.glProgram);\r\n        if (cache.glProgram === gpuShader.glProgram) {\r\n            gl.useProgram(null);\r\n            cache.glProgram = null;\r\n        }\r\n        gpuShader.glProgram = null;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncCreateInputAssember (device: WebGL2Device, gpuInputAssembler: IWebGL2GPUInputAssembler): void {\r\n    const { gl } = device;\r\n\r\n    gpuInputAssembler.glAttribs = new Array<IWebGL2Attrib>(gpuInputAssembler.attributes.length);\r\n\r\n    const offsets = [0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    for (let i = 0; i < gpuInputAssembler.attributes.length; ++i) {\r\n        const attrib = gpuInputAssembler.attributes[i];\r\n\r\n        const stream = attrib.stream !== undefined ? attrib.stream : 0;\r\n        // if (stream < gpuInputAssembler.gpuVertexBuffers.length) {\r\n\r\n        const gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];\r\n\r\n        const glType = GFXFormatToWebGLType(attrib.format, gl);\r\n        const { size } = FormatInfos[attrib.format];\r\n\r\n        gpuInputAssembler.glAttribs[i] = {\r\n            name: attrib.name,\r\n            glBuffer: gpuBuffer.glBuffer,\r\n            glType,\r\n            size,\r\n            count: FormatInfos[attrib.format].count,\r\n            stride: gpuBuffer.stride,\r\n            componentCount: WebGLGetComponentCount(glType, gl),\r\n            isNormalized: (attrib.isNormalized !== undefined ? attrib.isNormalized : false),\r\n            isInstanced: (attrib.isInstanced !== undefined ? attrib.isInstanced : false),\r\n            offset: offsets[stream],\r\n        };\r\n\r\n        offsets[stream] += size;\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncDestroyInputAssembler (device: WebGL2Device, gpuInputAssembler: IWebGL2GPUInputAssembler): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n\r\n    const it = gpuInputAssembler.glVAOs.values();\r\n    let res = it.next();\r\n\r\n    let glVAO = cache.glVAO;\r\n    while (!res.done) {\r\n        gl.deleteVertexArray(res.value);\r\n        if (glVAO === res.value) {\r\n            gl.bindVertexArray(null);\r\n            glVAO = null;\r\n        }\r\n        res = it.next();\r\n    }\r\n    cache.glVAO = glVAO;\r\n    gpuInputAssembler.glVAOs.clear();\r\n}\r\n\r\n/** @mangle */\r\ninterface IWebGL2StateCache {\r\n    gpuPipelineState: IWebGL2GPUPipelineState | null;\r\n    gpuInputAssembler: IWebGL2GPUInputAssembler | null;\r\n    glPrimitive: number;\r\n    invalidateAttachments: GLenum[];\r\n}\r\n\r\n/** @mangle */\r\nconst gfxStateCache: IWebGL2StateCache = {\r\n    gpuPipelineState: null,\r\n    gpuInputAssembler: null,\r\n    glPrimitive: 0,\r\n    invalidateAttachments: [],\r\n};\r\n\r\nexport function WebGL2CmdFuncBeginRenderPass (\r\n    device: WebGL2Device,\r\n    gpuRenderPass: IWebGL2GPURenderPass | null,\r\n    gpuFramebuffer: IWebGL2GPUFramebuffer | null,\r\n    renderArea: Readonly<Rect>,\r\n    clearColors: Readonly<Color[]>,\r\n    clearDepth: number,\r\n    clearStencil: number,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n\r\n    let clears: GLbitfield = 0;\r\n\r\n    if (gpuFramebuffer && gpuRenderPass) {\r\n        if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {\r\n            gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);\r\n            cache.glFramebuffer = gpuFramebuffer.glFramebuffer;\r\n        }\r\n\r\n        if (cache.viewport.left !== renderArea.x\r\n            || cache.viewport.top !== renderArea.y\r\n            || cache.viewport.width !== renderArea.width\r\n            || cache.viewport.height !== renderArea.height) {\r\n            gl.viewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height);\r\n\r\n            cache.viewport.left = renderArea.x;\r\n            cache.viewport.top = renderArea.y;\r\n            cache.viewport.width = renderArea.width;\r\n            cache.viewport.height = renderArea.height;\r\n        }\r\n\r\n        if (cache.scissorRect.x !== renderArea.x\r\n            || cache.scissorRect.y !== renderArea.y\r\n            || cache.scissorRect.width !== renderArea.width\r\n            || cache.scissorRect.height !== renderArea.height) {\r\n            gl.scissor(renderArea.x, renderArea.y, renderArea.width, renderArea.height);\r\n\r\n            cache.scissorRect.x = renderArea.x;\r\n            cache.scissorRect.y = renderArea.y;\r\n            cache.scissorRect.width = renderArea.width;\r\n            cache.scissorRect.height = renderArea.height;\r\n        }\r\n\r\n        gfxStateCache.invalidateAttachments.length = 0;\r\n\r\n        for (let j = 0; j < clearColors.length; ++j) {\r\n            const colorAttachment = gpuRenderPass.colorAttachments[j];\r\n\r\n            if (colorAttachment.format !== Format.UNKNOWN) {\r\n                switch (colorAttachment.loadOp) {\r\n                case LoadOp.LOAD: break; // GL default behavior\r\n                case LoadOp.CLEAR: {\r\n                    if (cache.bs.targets[0].blendColorMask !== ColorMask.ALL) {\r\n                        gl.colorMask(true, true, true, true);\r\n                    }\r\n\r\n                    // We-chat mini-game, glClearBufferfv get INVALID_ENUM. MRT may not be supported. use clearColor instead.\r\n                    if (gpuRenderPass.colorAttachments.length === 1) {\r\n                        const clearColor = clearColors[0];\r\n                        gl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);\r\n                        clears |= WebGLConstants.COLOR_BUFFER_BIT;\r\n                    } else {\r\n                        _f32v4[0] = clearColors[j].x;\r\n                        _f32v4[1] = clearColors[j].y;\r\n                        _f32v4[2] = clearColors[j].z;\r\n                        _f32v4[3] = clearColors[j].w;\r\n                        gl.clearBufferfv(WebGLConstants.COLOR, j, _f32v4);\r\n                    }\r\n                    break;\r\n                }\r\n                case LoadOp.DISCARD: {\r\n                    // invalidate the framebuffer\r\n                    gfxStateCache.invalidateAttachments.push(WebGLConstants.COLOR_ATTACHMENT0 + j);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n            }\r\n        } // if (curGPURenderPass)\r\n\r\n        if (gpuRenderPass.depthStencilAttachment) {\r\n            if (gpuRenderPass.depthStencilAttachment.format !== Format.UNKNOWN) {\r\n                switch (gpuRenderPass.depthStencilAttachment.depthLoadOp) {\r\n                case LoadOp.LOAD: break; // GL default behavior\r\n                case LoadOp.CLEAR: {\r\n                    if (!cache.dss.depthWrite) {\r\n                        gl.depthMask(true);\r\n                    }\r\n\r\n                    gl.clearDepth(clearDepth);\r\n\r\n                    clears |= WebGLConstants.DEPTH_BUFFER_BIT;\r\n                    break;\r\n                }\r\n                case LoadOp.DISCARD: {\r\n                    // invalidate the framebuffer\r\n                    gfxStateCache.invalidateAttachments.push(WebGLConstants.DEPTH_ATTACHMENT);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n\r\n                if (FormatInfos[gpuRenderPass.depthStencilAttachment.format].hasStencil) {\r\n                    switch (gpuRenderPass.depthStencilAttachment.stencilLoadOp) {\r\n                    case LoadOp.LOAD: break; // GL default behavior\r\n                    case LoadOp.CLEAR: {\r\n                        if (!cache.dss.stencilWriteMaskFront) {\r\n                            gl.stencilMaskSeparate(WebGLConstants.FRONT, 0xffff);\r\n                        }\r\n\r\n                        if (!cache.dss.stencilWriteMaskBack) {\r\n                            gl.stencilMaskSeparate(WebGLConstants.BACK, 0xffff);\r\n                        }\r\n\r\n                        gl.clearStencil(clearStencil);\r\n                        clears |= WebGLConstants.STENCIL_BUFFER_BIT;\r\n                        break;\r\n                    }\r\n                    case LoadOp.DISCARD: {\r\n                        // invalidate the framebuffer\r\n                        gfxStateCache.invalidateAttachments.push(WebGLConstants.STENCIL_ATTACHMENT);\r\n                        break;\r\n                    }\r\n                    default:\r\n                    }\r\n                }\r\n            }\r\n        } // if (curGPURenderPass.depthStencilAttachment)\r\n\r\n        if (gpuFramebuffer.glFramebuffer && gfxStateCache.invalidateAttachments.length) {\r\n            gl.invalidateFramebuffer(WebGLConstants.FRAMEBUFFER, gfxStateCache.invalidateAttachments);\r\n        }\r\n\r\n        if (clears) {\r\n            gl.clear(clears);\r\n        }\r\n\r\n        // restore states\r\n        if (clears & WebGLConstants.COLOR_BUFFER_BIT) {\r\n            const colorMask = cache.bs.targets[0].blendColorMask;\r\n            if (colorMask !== ColorMask.ALL) {\r\n                const r = (colorMask & ColorMask.R) !== ColorMask.NONE;\r\n                const g = (colorMask & ColorMask.G) !== ColorMask.NONE;\r\n                const b = (colorMask & ColorMask.B) !== ColorMask.NONE;\r\n                const a = (colorMask & ColorMask.A) !== ColorMask.NONE;\r\n                gl.colorMask(r, g, b, a);\r\n            }\r\n        }\r\n\r\n        if ((clears & WebGLConstants.DEPTH_BUFFER_BIT)\r\n            && !cache.dss.depthWrite) {\r\n            gl.depthMask(false);\r\n        }\r\n\r\n        if (clears & WebGLConstants.STENCIL_BUFFER_BIT) {\r\n            if (!cache.dss.stencilWriteMaskFront) {\r\n                gl.stencilMaskSeparate(WebGLConstants.FRONT, 0);\r\n            }\r\n\r\n            if (!cache.dss.stencilWriteMaskBack) {\r\n                gl.stencilMaskSeparate(WebGLConstants.BACK, 0);\r\n            }\r\n        }\r\n    } // if (gpuFramebuffer)\r\n}\r\n\r\nexport function WebGL2CmdFuncBindStates (\r\n    device: WebGL2Device,\r\n    gpuPipelineState: IWebGL2GPUPipelineState | null,\r\n    gpuInputAssembler: IWebGL2GPUInputAssembler | null,\r\n    gpuDescriptorSets: Readonly<IWebGL2GPUDescriptorSet[]>,\r\n    dynamicOffsets: Readonly<number[]>,\r\n    dynamicStates: Readonly<DynamicStates>,\r\n): void {\r\n    const { gl } = device;\r\n    const capabilities = device.capabilities;\r\n    const cache = device.getStateCache();\r\n    const cacheRs = cache.rs;\r\n    const cacheDss = cache.dss;\r\n    const cacheBs = cache.bs;\r\n    const cacheBlendColor = cacheBs.blendColor;\r\n    const gpuShader = gpuPipelineState && gpuPipelineState.gpuShader;\r\n\r\n    let isShaderChanged = false;\r\n\r\n    // bind pipeline\r\n    if (gpuPipelineState && gfxStateCache.gpuPipelineState !== gpuPipelineState) {\r\n        gfxStateCache.gpuPipelineState = gpuPipelineState;\r\n        gfxStateCache.glPrimitive = gpuPipelineState.glPrimitive;\r\n\r\n        if (gpuShader) {\r\n            const { glProgram } = gpuShader;\r\n            if (cache.glProgram !== glProgram) {\r\n                gl.useProgram(glProgram);\r\n                cache.glProgram = glProgram;\r\n                isShaderChanged = true;\r\n            }\r\n        }\r\n\r\n        // rasterizer state\r\n        const { rs } = gpuPipelineState;\r\n        if (rs) {\r\n            if (cacheRs.cullMode !== rs.cullMode) {\r\n                switch (rs.cullMode) {\r\n                case CullMode.NONE: {\r\n                    gl.disable(WebGLConstants.CULL_FACE);\r\n                    break;\r\n                }\r\n                case CullMode.FRONT: {\r\n                    gl.enable(WebGLConstants.CULL_FACE);\r\n                    gl.cullFace(WebGLConstants.FRONT);\r\n                    break;\r\n                }\r\n                case CullMode.BACK: {\r\n                    gl.enable(WebGLConstants.CULL_FACE);\r\n                    gl.cullFace(WebGLConstants.BACK);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n\r\n                cacheRs.cullMode = rs.cullMode;\r\n            }\r\n\r\n            const isFrontFaceCCW = rs.isFrontFaceCCW; // boolean XOR\r\n            if (cacheRs.isFrontFaceCCW !== isFrontFaceCCW) {\r\n                gl.frontFace(isFrontFaceCCW ? WebGLConstants.CCW : WebGLConstants.CW);\r\n                cacheRs.isFrontFaceCCW = isFrontFaceCCW;\r\n            }\r\n\r\n            if ((cacheRs.depthBias !== rs.depthBias)\r\n                || (cacheRs.depthBiasSlop !== rs.depthBiasSlop)) {\r\n                gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);\r\n                cacheRs.depthBias = rs.depthBias;\r\n                cacheRs.depthBiasSlop = rs.depthBiasSlop;\r\n            }\r\n\r\n            if (cacheRs.lineWidth !== rs.lineWidth) {\r\n                gl.lineWidth(rs.lineWidth);\r\n                cacheRs.lineWidth = rs.lineWidth;\r\n            }\r\n        } // rasterizater state\r\n\r\n        // depth-stencil state\r\n        const { dss } = gpuPipelineState;\r\n        if (dss) {\r\n            if (cacheDss.depthTest !== dss.depthTest) {\r\n                if (dss.depthTest) {\r\n                    gl.enable(WebGLConstants.DEPTH_TEST);\r\n                } else {\r\n                    gl.disable(WebGLConstants.DEPTH_TEST);\r\n                }\r\n                cacheDss.depthTest = dss.depthTest;\r\n            }\r\n\r\n            if (cacheDss.depthWrite !== dss.depthWrite) {\r\n                gl.depthMask(dss.depthWrite);\r\n                cacheDss.depthWrite = dss.depthWrite;\r\n            }\r\n\r\n            if (cacheDss.depthFunc !== dss.depthFunc) {\r\n                gl.depthFunc(WebGLCmpFuncs[dss.depthFunc]);\r\n                cacheDss.depthFunc = dss.depthFunc;\r\n            }\r\n\r\n            // front\r\n            if ((cacheDss.stencilTestFront !== dss.stencilTestFront)\r\n                || (cacheDss.stencilTestBack !== dss.stencilTestBack)) {\r\n                if (dss.stencilTestFront || dss.stencilTestBack) {\r\n                    gl.enable(WebGLConstants.STENCIL_TEST);\r\n                } else {\r\n                    gl.disable(WebGLConstants.STENCIL_TEST);\r\n                }\r\n                cacheDss.stencilTestFront = dss.stencilTestFront;\r\n                cacheDss.stencilTestBack = dss.stencilTestBack;\r\n            }\r\n\r\n            if ((cacheDss.stencilFuncFront !== dss.stencilFuncFront)\r\n                || (cacheDss.stencilRefFront !== dss.stencilRefFront)\r\n                || (cacheDss.stencilReadMaskFront !== dss.stencilReadMaskFront)) {\r\n                gl.stencilFuncSeparate(\r\n                    WebGLConstants.FRONT,\r\n                    WebGLCmpFuncs[dss.stencilFuncFront],\r\n                    dss.stencilRefFront,\r\n                    dss.stencilReadMaskFront,\r\n                );\r\n\r\n                cacheDss.stencilFuncFront = dss.stencilFuncFront;\r\n                cacheDss.stencilRefFront = dss.stencilRefFront;\r\n                cacheDss.stencilReadMaskFront = dss.stencilReadMaskFront;\r\n            }\r\n\r\n            if ((cacheDss.stencilFailOpFront !== dss.stencilFailOpFront)\r\n                || (cacheDss.stencilZFailOpFront !== dss.stencilZFailOpFront)\r\n                || (cacheDss.stencilPassOpFront !== dss.stencilPassOpFront)) {\r\n                gl.stencilOpSeparate(\r\n                    WebGLConstants.FRONT,\r\n                    WebGLStencilOps[dss.stencilFailOpFront],\r\n                    WebGLStencilOps[dss.stencilZFailOpFront],\r\n                    WebGLStencilOps[dss.stencilPassOpFront],\r\n                );\r\n\r\n                cacheDss.stencilFailOpFront = dss.stencilFailOpFront;\r\n                cacheDss.stencilZFailOpFront = dss.stencilZFailOpFront;\r\n                cacheDss.stencilPassOpFront = dss.stencilPassOpFront;\r\n            }\r\n\r\n            if (cacheDss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {\r\n                gl.stencilMaskSeparate(WebGLConstants.FRONT, dss.stencilWriteMaskFront);\r\n                cacheDss.stencilWriteMaskFront = dss.stencilWriteMaskFront;\r\n            }\r\n\r\n            // back\r\n            if ((cacheDss.stencilFuncBack !== dss.stencilFuncBack)\r\n                || (cacheDss.stencilRefBack !== dss.stencilRefBack)\r\n                || (cacheDss.stencilReadMaskBack !== dss.stencilReadMaskBack)) {\r\n                gl.stencilFuncSeparate(\r\n                    WebGLConstants.BACK,\r\n                    WebGLCmpFuncs[dss.stencilFuncBack],\r\n                    dss.stencilRefBack,\r\n                    dss.stencilReadMaskBack,\r\n                );\r\n\r\n                cacheDss.stencilFuncBack = dss.stencilFuncBack;\r\n                cacheDss.stencilRefBack = dss.stencilRefBack;\r\n                cacheDss.stencilReadMaskBack = dss.stencilReadMaskBack;\r\n            }\r\n\r\n            if ((cacheDss.stencilFailOpBack !== dss.stencilFailOpBack)\r\n                || (cacheDss.stencilZFailOpBack !== dss.stencilZFailOpBack)\r\n                || (cacheDss.stencilPassOpBack !== dss.stencilPassOpBack)) {\r\n                gl.stencilOpSeparate(\r\n                    WebGLConstants.BACK,\r\n                    WebGLStencilOps[dss.stencilFailOpBack],\r\n                    WebGLStencilOps[dss.stencilZFailOpBack],\r\n                    WebGLStencilOps[dss.stencilPassOpBack],\r\n                );\r\n\r\n                cacheDss.stencilFailOpBack = dss.stencilFailOpBack;\r\n                cacheDss.stencilZFailOpBack = dss.stencilZFailOpBack;\r\n                cacheDss.stencilPassOpBack = dss.stencilPassOpBack;\r\n            }\r\n\r\n            if (cacheDss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {\r\n                gl.stencilMaskSeparate(WebGLConstants.BACK, dss.stencilWriteMaskBack);\r\n                cacheDss.stencilWriteMaskBack = dss.stencilWriteMaskBack;\r\n            }\r\n        } // depth-stencil state\r\n\r\n        // blend state\r\n        const { bs } = gpuPipelineState;\r\n        if (bs) {\r\n            if (cacheBs.isA2C !== bs.isA2C) {\r\n                if (bs.isA2C) {\r\n                    gl.enable(WebGLConstants.SAMPLE_ALPHA_TO_COVERAGE);\r\n                } else {\r\n                    gl.disable(WebGLConstants.SAMPLE_ALPHA_TO_COVERAGE);\r\n                }\r\n                cacheBs.isA2C = bs.isA2C;\r\n            }\r\n\r\n            const blendColor = bs.blendColor;\r\n\r\n            if ((cacheBlendColor.x !== blendColor.x)\r\n                || (cacheBlendColor.y !== blendColor.y)\r\n                || (cacheBlendColor.z !== blendColor.z)\r\n                || (cacheBlendColor.w !== blendColor.w)) {\r\n                gl.blendColor(blendColor.x, blendColor.y, blendColor.z, blendColor.w);\r\n\r\n                cacheBlendColor.x = blendColor.x;\r\n                cacheBlendColor.y = blendColor.y;\r\n                cacheBlendColor.z = blendColor.z;\r\n                cacheBlendColor.w = blendColor.w;\r\n            }\r\n\r\n            const target0 = bs.targets[0];\r\n            const target0Cache = cache.bs.targets[0];\r\n\r\n            if (target0Cache.blend !== target0.blend) {\r\n                if (target0.blend) {\r\n                    gl.enable(WebGLConstants.BLEND);\r\n                } else {\r\n                    gl.disable(WebGLConstants.BLEND);\r\n                }\r\n                target0Cache.blend = target0.blend;\r\n            }\r\n\r\n            if ((target0Cache.blendEq !== target0.blendEq)\r\n                || (target0Cache.blendAlphaEq !== target0.blendAlphaEq)) {\r\n                gl.blendEquationSeparate(WebGLBlendOps[target0.blendEq], WebGLBlendOps[target0.blendAlphaEq]);\r\n                target0Cache.blendEq = target0.blendEq;\r\n                target0Cache.blendAlphaEq = target0.blendAlphaEq;\r\n            }\r\n\r\n            if ((target0Cache.blendSrc !== target0.blendSrc)\r\n                || (target0Cache.blendDst !== target0.blendDst)\r\n                || (target0Cache.blendSrcAlpha !== target0.blendSrcAlpha)\r\n                || (target0Cache.blendDstAlpha !== target0.blendDstAlpha)) {\r\n                gl.blendFuncSeparate(\r\n                    WebGLBlendFactors[target0.blendSrc],\r\n                    WebGLBlendFactors[target0.blendDst],\r\n                    WebGLBlendFactors[target0.blendSrcAlpha],\r\n                    WebGLBlendFactors[target0.blendDstAlpha],\r\n                );\r\n\r\n                target0Cache.blendSrc = target0.blendSrc;\r\n                target0Cache.blendDst = target0.blendDst;\r\n                target0Cache.blendSrcAlpha = target0.blendSrcAlpha;\r\n                target0Cache.blendDstAlpha = target0.blendDstAlpha;\r\n            }\r\n\r\n            if (target0Cache.blendColorMask !== target0.blendColorMask) {\r\n                gl.colorMask(\r\n                    (target0.blendColorMask & ColorMask.R) !== ColorMask.NONE,\r\n                    (target0.blendColorMask & ColorMask.G) !== ColorMask.NONE,\r\n                    (target0.blendColorMask & ColorMask.B) !== ColorMask.NONE,\r\n                    (target0.blendColorMask & ColorMask.A) !== ColorMask.NONE,\r\n                );\r\n\r\n                target0Cache.blendColorMask = target0.blendColorMask;\r\n            }\r\n        } // blend state\r\n    } // bind pipeline\r\n\r\n    // bind descriptor sets\r\n    if (gpuPipelineState && gpuPipelineState.gpuPipelineLayout && gpuShader) {\r\n        const blockLen = gpuShader.glBlocks.length;\r\n        const { dynamicOffsetIndices } = gpuPipelineState.gpuPipelineLayout;\r\n\r\n        for (let j = 0; j < blockLen; j++) {\r\n            const glBlock = gpuShader.glBlocks[j];\r\n            const gpuDescriptorSet = gpuDescriptorSets[glBlock.set];\r\n            const descriptorIndex = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glBlock.binding];\r\n            const gpuDescriptor = descriptorIndex >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIndex];\r\n\r\n            if (!gpuDescriptor || !gpuDescriptor.gpuBuffer) {\r\n                // error(`Buffer binding '${glBlock.name}' at set ${glBlock.set} binding ${glBlock.binding} is not bounded`);\r\n                continue;\r\n            }\r\n\r\n            const dynamicOffsetIndexSet = dynamicOffsetIndices[glBlock.set];\r\n            const dynamicOffsetIndex = dynamicOffsetIndexSet && dynamicOffsetIndexSet[glBlock.binding];\r\n            let offset = gpuDescriptor.gpuBuffer.glOffset;\r\n            if (dynamicOffsetIndex >= 0) { offset += dynamicOffsets[dynamicOffsetIndex]; }\r\n\r\n            if (cache.glBindUBOs[glBlock.glBinding] !== gpuDescriptor.gpuBuffer.glBuffer\r\n                || cache.glBindUBOOffsets[glBlock.glBinding] !== offset) {\r\n                if (offset) {\r\n                    gl.bindBufferRange(\r\n                        WebGLConstants.UNIFORM_BUFFER,\r\n                        glBlock.glBinding,\r\n                        gpuDescriptor.gpuBuffer.glBuffer,\r\n                        offset,\r\n                        gpuDescriptor.gpuBuffer.size,\r\n                    );\r\n                } else {\r\n                    gl.bindBufferBase(WebGLConstants.UNIFORM_BUFFER, glBlock.glBinding, gpuDescriptor.gpuBuffer.glBuffer);\r\n                }\r\n                cache.glUniformBuffer = cache.glBindUBOs[glBlock.glBinding] = gpuDescriptor.gpuBuffer.glBuffer;\r\n                cache.glBindUBOOffsets[glBlock.glBinding] = offset;\r\n            }\r\n        }\r\n\r\n        const samplerLen = gpuShader.glSamplerTextures.length;\r\n        for (let i = 0; i < samplerLen; i++) {\r\n            const glSampler = gpuShader.glSamplerTextures[i];\r\n            const gpuDescriptorSet = gpuDescriptorSets[glSampler.set];\r\n            let descriptorIndex = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glSampler.binding];\r\n            let gpuDescriptor = descriptorIndex >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIndex];\r\n\r\n            for (let l = 0; l < glSampler.units.length; l++) {\r\n                const texUnit = glSampler.units[l];\r\n\r\n                const glTexUnit = cache.glTexUnits[texUnit];\r\n\r\n                if (!gpuDescriptor || !gpuDescriptor.gpuTextureView || !gpuDescriptor.gpuTextureView.gpuTexture || !gpuDescriptor.gpuSampler) {\r\n                    // error(`Sampler binding '${glSampler.name}' at set ${glSampler.set} binding ${glSampler.binding} index ${l} is not bounded`);\r\n                    continue;\r\n                }\r\n\r\n                const gpuTextureView = gpuDescriptor.gpuTextureView;\r\n                const gpuTexture = gpuTextureView.gpuTexture;\r\n                const  minLod = gpuTextureView.baseLevel;\r\n                const  maxLod = minLod + gpuTextureView.levelCount;\r\n\r\n                if (gpuTexture.size > 0) {\r\n                    if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n                        if (cache.texUnit !== texUnit) {\r\n                            gl.activeTexture(WebGLConstants.TEXTURE0 + texUnit);\r\n                            cache.texUnit = texUnit;\r\n                        }\r\n                        if (gpuTexture.glTexture) {\r\n                            gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);\r\n                        } else {\r\n                            gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);\r\n                        }\r\n                        glTexUnit.glTexture = gpuTexture.glTexture;\r\n                    }\r\n\r\n                    const { gpuSampler } = gpuDescriptor; // get sampler with different mipmap levels\r\n                    const glSampler = gpuSampler.getGLSampler(device, minLod, maxLod);\r\n                    if (cache.glSamplerUnits[texUnit] !== glSampler) {\r\n                        gl.bindSampler(texUnit, glSampler);\r\n                        cache.glSamplerUnits[texUnit] = glSampler;\r\n                    }\r\n                }\r\n\r\n                gpuDescriptor = gpuDescriptorSet.gpuDescriptors[++descriptorIndex];\r\n            }\r\n        }\r\n    } // bind descriptor sets\r\n\r\n    // bind vertex/index buffer\r\n    if (gpuInputAssembler && gpuShader\r\n        && (isShaderChanged || gfxStateCache.gpuInputAssembler !== gpuInputAssembler)) {\r\n        gfxStateCache.gpuInputAssembler = gpuInputAssembler;\r\n\r\n        if (device.extensions.useVAO) {\r\n            // check vao\r\n            let glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram!);\r\n            if (!glVAO) {\r\n                glVAO = gl.createVertexArray()!;\r\n                gpuInputAssembler.glVAOs.set(gpuShader.glProgram!, glVAO);\r\n\r\n                gl.bindVertexArray(glVAO);\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n                cache.glArrayBuffer = null;\r\n                cache.glElementArrayBuffer = null;\r\n\r\n                let glAttrib: IWebGL2Attrib | null;\r\n                for (let j = 0; j < gpuShader.glInputs.length; j++) {\r\n                    const glInput = gpuShader.glInputs[j];\r\n                    glAttrib = null;\r\n\r\n                    for (let k = 0; k < gpuInputAssembler.glAttribs.length; k++) {\r\n                        const attrib = gpuInputAssembler.glAttribs[k];\r\n                        if (attrib.name === glInput.name) {\r\n                            glAttrib = attrib;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (glAttrib) {\r\n                        if (cache.glArrayBuffer !== glAttrib.glBuffer) {\r\n                            gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, glAttrib.glBuffer);\r\n                            cache.glArrayBuffer = glAttrib.glBuffer;\r\n                        }\r\n\r\n                        for (let c = 0; c < glAttrib.componentCount; ++c) {\r\n                            const glLoc = glInput.glLoc + c;\r\n                            const attribOffset = glAttrib.offset + glAttrib.size * c;\r\n\r\n                            gl.enableVertexAttribArray(glLoc);\r\n                            cache.glCurrentAttribLocs[glLoc] = true;\r\n\r\n                            gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);\r\n                            gl.vertexAttribDivisor(glLoc, glAttrib.isInstanced ? 1 : 0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const gpuBuffer = gpuInputAssembler.gpuIndexBuffer;\r\n                if (gpuBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                }\r\n\r\n                gl.bindVertexArray(null);\r\n                gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, null);\r\n                gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, null);\r\n                cache.glArrayBuffer = null;\r\n                cache.glElementArrayBuffer = null;\r\n            }\r\n\r\n            if (cache.glVAO !== glVAO) {\r\n                gl.bindVertexArray(glVAO);\r\n                cache.glVAO = glVAO;\r\n            }\r\n        } else {\r\n            for (let a = 0; a < capabilities.maxVertexAttributes; ++a) {\r\n                cache.glCurrentAttribLocs[a] = false;\r\n            }\r\n\r\n            for (let j = 0; j < gpuShader.glInputs.length; j++) {\r\n                const glInput = gpuShader.glInputs[j];\r\n                let glAttrib: IWebGL2Attrib | null = null;\r\n\r\n                for (let k = 0; k < gpuInputAssembler.glAttribs.length; k++) {\r\n                    const attrib = gpuInputAssembler.glAttribs[k];\r\n                    if (attrib.name === glInput.name) {\r\n                        glAttrib = attrib;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (glAttrib) {\r\n                    if (cache.glArrayBuffer !== glAttrib.glBuffer) {\r\n                        gl.bindBuffer(WebGLConstants.ARRAY_BUFFER, glAttrib.glBuffer);\r\n                        cache.glArrayBuffer = glAttrib.glBuffer;\r\n                    }\r\n\r\n                    for (let c = 0; c < glAttrib.componentCount; ++c) {\r\n                        const glLoc = glInput.glLoc + c;\r\n                        const attribOffset = glAttrib.offset + glAttrib.size * c;\r\n\r\n                        if (!cache.glEnabledAttribLocs[glLoc] && glLoc >= 0) {\r\n                            gl.enableVertexAttribArray(glLoc);\r\n                            cache.glEnabledAttribLocs[glLoc] = true;\r\n                        }\r\n                        cache.glCurrentAttribLocs[glLoc] = true;\r\n\r\n                        gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);\r\n                        gl.vertexAttribDivisor(glLoc, glAttrib.isInstanced ? 1 : 0);\r\n                    }\r\n                }\r\n            } // for\r\n\r\n            const gpuBuffer = gpuInputAssembler.gpuIndexBuffer;\r\n            if (gpuBuffer) {\r\n                if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {\r\n                    gl.bindBuffer(WebGLConstants.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);\r\n                    cache.glElementArrayBuffer = gpuBuffer.glBuffer;\r\n                }\r\n            }\r\n\r\n            for (let a = 0; a < capabilities.maxVertexAttributes; ++a) {\r\n                if (cache.glEnabledAttribLocs[a] !== cache.glCurrentAttribLocs[a]) {\r\n                    gl.disableVertexAttribArray(a);\r\n                    cache.glEnabledAttribLocs[a] = false;\r\n                }\r\n            }\r\n        }\r\n    } // bind vertex/index buffer\r\n\r\n    // update dynamic states\r\n    if (gpuPipelineState && gpuPipelineState.dynamicStates.length) {\r\n        const dsLen = gpuPipelineState.dynamicStates.length;\r\n        for (let k = 0; k < dsLen; k++) {\r\n            const dynamicState = gpuPipelineState.dynamicStates[k];\r\n            switch (dynamicState) {\r\n            case DynamicStateFlagBit.LINE_WIDTH: {\r\n                if (cacheRs.lineWidth !== dynamicStates.lineWidth) {\r\n                    gl.lineWidth(dynamicStates.lineWidth);\r\n                    cacheRs.lineWidth = dynamicStates.lineWidth;\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.DEPTH_BIAS: {\r\n                if (cacheRs.depthBias !== dynamicStates.depthBiasConstant\r\n                    || cache.rs.depthBiasSlop !== dynamicStates.depthBiasSlope) {\r\n                    gl.polygonOffset(dynamicStates.depthBiasConstant, dynamicStates.depthBiasSlope);\r\n                    cacheRs.depthBias = dynamicStates.depthBiasConstant;\r\n                    cacheRs.depthBiasSlop = dynamicStates.depthBiasSlope;\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.BLEND_CONSTANTS: {\r\n                const blendConstant = dynamicStates.blendConstant;\r\n                if ((cacheBlendColor.x !== blendConstant.x)\r\n                    || (cacheBlendColor.y !== blendConstant.y)\r\n                    || (cacheBlendColor.z !== blendConstant.z)\r\n                    || (cacheBlendColor.w !== blendConstant.w)) {\r\n                    gl.blendColor(blendConstant.x, blendConstant.y, blendConstant.z, blendConstant.w);\r\n                    cacheBlendColor.copy(blendConstant);\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.STENCIL_WRITE_MASK: {\r\n                const front = dynamicStates.stencilStatesFront;\r\n                const back = dynamicStates.stencilStatesBack;\r\n                if (cacheDss.stencilWriteMaskFront !== front.writeMask) {\r\n                    gl.stencilMaskSeparate(WebGLConstants.FRONT, front.writeMask);\r\n                    cacheDss.stencilWriteMaskFront = front.writeMask;\r\n                }\r\n                if (cacheDss.stencilWriteMaskBack !== back.writeMask) {\r\n                    gl.stencilMaskSeparate(WebGLConstants.BACK, back.writeMask);\r\n                    cacheDss.stencilWriteMaskBack = back.writeMask;\r\n                }\r\n                break;\r\n            }\r\n            case DynamicStateFlagBit.STENCIL_COMPARE_MASK: {\r\n                const front = dynamicStates.stencilStatesFront;\r\n                const back = dynamicStates.stencilStatesBack;\r\n                if (cacheDss.stencilRefFront !== front.reference\r\n                    || cacheDss.stencilReadMaskFront !== front.compareMask) {\r\n                    gl.stencilFuncSeparate(WebGLConstants.FRONT, WebGLCmpFuncs[cacheDss.stencilFuncFront], front.reference, front.compareMask);\r\n                    cacheDss.stencilRefFront = front.reference;\r\n                    cacheDss.stencilReadMaskFront = front.compareMask;\r\n                }\r\n                if (cacheDss.stencilRefBack !== back.reference\r\n                    || cacheDss.stencilReadMaskBack !== back.compareMask) {\r\n                    gl.stencilFuncSeparate(WebGLConstants.BACK, WebGLCmpFuncs[cacheDss.stencilFuncBack], back.reference, back.compareMask);\r\n                    cacheDss.stencilRefBack = back.reference;\r\n                    cacheDss.stencilReadMaskBack = back.compareMask;\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n            } // switch\r\n        } // for\r\n    } // update dynamic states\r\n}\r\n\r\nexport function WebGL2CmdFuncDraw (device: WebGL2Device, drawInfo: Readonly<DrawInfo>): void {\r\n    const { gl } = device;\r\n    const { gpuInputAssembler, glPrimitive } = gfxStateCache;\r\n    const md = device.extensions.WEBGL_multi_draw;\r\n\r\n    if (gpuInputAssembler) {\r\n        const indexBuffer = gpuInputAssembler.gpuIndexBuffer;\r\n        if (gpuInputAssembler.gpuIndirectBuffer) {\r\n            const { indirects } = gpuInputAssembler.gpuIndirectBuffer;\r\n            if (indirects.drawByIndex) {\r\n                for (let j = 0; j < indirects.drawCount; j++) {\r\n                    indirects.byteOffsets[j] = indirects.offsets[j] * indexBuffer!.stride;\r\n                }\r\n                if (md) {\r\n                    if (indirects.instancedDraw) {\r\n                        md.multiDrawElementsInstancedWEBGL(\r\n                            glPrimitive,\r\n                            indirects.counts,\r\n                            0,\r\n                            gpuInputAssembler.glIndexType,\r\n                            indirects.byteOffsets,\r\n                            0,\r\n                            indirects.instances,\r\n                            0,\r\n                            indirects.drawCount,\r\n                        );\r\n                    } else {\r\n                        md.multiDrawElementsWEBGL(\r\n                            glPrimitive,\r\n                            indirects.counts,\r\n                            0,\r\n                            gpuInputAssembler.glIndexType,\r\n                            indirects.byteOffsets,\r\n                            0,\r\n                            indirects.drawCount,\r\n                        );\r\n                    }\r\n                } else {\r\n                    for (let j = 0; j < indirects.drawCount; j++) {\r\n                        if (indirects.instances[j]) {\r\n                            gl.drawElementsInstanced(\r\n                                glPrimitive,\r\n                                indirects.counts[j],\r\n                                gpuInputAssembler.glIndexType,\r\n                                indirects.byteOffsets[j],\r\n                                indirects.instances[j],\r\n                            );\r\n                        } else {\r\n                            gl.drawElements(glPrimitive, indirects.counts[j], gpuInputAssembler.glIndexType, indirects.byteOffsets[j]);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (md) {\r\n                if (indirects.instancedDraw) {\r\n                    md.multiDrawArraysInstancedWEBGL(\r\n                        glPrimitive,\r\n                        indirects.offsets,\r\n                        0,\r\n                        indirects.counts,\r\n                        0,\r\n                        indirects.instances,\r\n                        0,\r\n                        indirects.drawCount,\r\n                    );\r\n                } else {\r\n                    md.multiDrawArraysWEBGL(\r\n                        glPrimitive,\r\n                        indirects.offsets,\r\n                        0,\r\n                        indirects.counts,\r\n                        0,\r\n                        indirects.drawCount,\r\n                    );\r\n                }\r\n            } else {\r\n                for (let j = 0; j < indirects.drawCount; j++) {\r\n                    if (indirects.instances[j]) {\r\n                        gl.drawArraysInstanced(glPrimitive, indirects.offsets[j], indirects.counts[j], indirects.instances[j]);\r\n                    } else {\r\n                        gl.drawArrays(glPrimitive, indirects.offsets[j], indirects.counts[j]);\r\n                    }\r\n                }\r\n            }\r\n        } else if (drawInfo.instanceCount) {\r\n            if (indexBuffer) {\r\n                if (drawInfo.indexCount > 0) {\r\n                    const offset = drawInfo.firstIndex * indexBuffer.stride;\r\n                    gl.drawElementsInstanced(\r\n                        glPrimitive,\r\n                        drawInfo.indexCount,\r\n                        gpuInputAssembler.glIndexType,\r\n                        offset,\r\n                        drawInfo.instanceCount,\r\n                    );\r\n                }\r\n            } else if (drawInfo.vertexCount > 0) {\r\n                gl.drawArraysInstanced(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);\r\n            }\r\n        } else if (indexBuffer) {\r\n            if (drawInfo.indexCount > 0) {\r\n                const offset = drawInfo.firstIndex * indexBuffer.stride;\r\n                gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, offset);\r\n            }\r\n        } else if (drawInfo.vertexCount > 0) {\r\n            gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);\r\n        }\r\n    }\r\n}\r\n\r\nfunction toUseTexImage2D (texImages: Readonly<TexImageSource[]>, regions: Readonly<BufferTextureCopy[]>): boolean {\r\n    if (texImages.length > 1 || regions.length > 1) return false;\r\n    const isVideoElement = texImages[0] instanceof HTMLVideoElement;\r\n    if (isVideoElement) {\r\n        const videoElement = texImages[0] as HTMLVideoElement;\r\n        const isSameSize = regions[0].texOffset.x === 0\r\n        && regions[0].texOffset.y === 0\r\n        && regions[0].texExtent.width === videoElement.videoWidth\r\n        && regions[0].texExtent.height === videoElement.videoHeight;\r\n        return isSameSize;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function WebGL2CmdFuncCopyTexImagesToTexture (\r\n    device: WebGL2Device,\r\n    texImages: Readonly<TexImageSource[]>,\r\n    gpuTexture: IWebGL2GPUTexture,\r\n    regions: Readonly<BufferTextureCopy[]>,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n    if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n        gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);\r\n        glTexUnit.glTexture = gpuTexture.glTexture;\r\n    }\r\n\r\n    let n = 0;\r\n    let f = 0;\r\n\r\n    switch (gpuTexture.glTarget) {\r\n    case WebGLConstants.TEXTURE_2D: {\r\n        if ((gpuTexture.flags & TextureFlagBit.MUTABLE_STORAGE) || toUseTexImage2D(texImages, regions)) {\r\n            gl.texImage2D(\r\n                WebGLConstants.TEXTURE_2D,\r\n                regions[0].texSubres.mipLevel,\r\n                gpuTexture.glInternalFmt,\r\n                regions[0].texExtent.width,\r\n                regions[0].texExtent.height,\r\n                0,\r\n                gpuTexture.glFormat,\r\n                gpuTexture.glType,\r\n                texImages[0],\r\n            );\r\n        } else {\r\n            for (let k = 0; k < regions.length; k++) {\r\n                const region = regions[k];\r\n                gl.texSubImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    region.texSubres.mipLevel,\r\n                    region.texOffset.x,\r\n                    region.texOffset.y,\r\n                    gpuTexture.glFormat,\r\n                    gpuTexture.glType,\r\n                    texImages[n++],\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case WebGLConstants.TEXTURE_CUBE_MAP: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            const regionTexSubres = region.texSubres;\r\n            const regionTexOffset = region.texOffset;\r\n            const fcount = regionTexSubres.baseArrayLayer + regionTexSubres.layerCount;\r\n            for (f = regionTexSubres.baseArrayLayer; f < fcount; ++f) {\r\n                gl.texSubImage2D(\r\n                    WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                    regionTexSubres.mipLevel,\r\n                    regionTexOffset.x,\r\n                    regionTexOffset.y,\r\n                    gpuTexture.glFormat,\r\n                    gpuTexture.glType,\r\n                    texImages[n++],\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16327);\r\n    }\r\n    }\r\n\r\n    if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {\r\n        gl.generateMipmap(gpuTexture.glTarget);\r\n    }\r\n}\r\n\r\nlet stagingBuffer = new Uint8Array(1);\r\nfunction pixelBufferPick (\r\n    buffer: ArrayBufferView,\r\n    format: Format,\r\n    offset: number,\r\n    stride: Extent,\r\n    extent: Extent,\r\n): ArrayBufferView {\r\n    const blockHeight = formatAlignment(format).height;\r\n\r\n    const bufferSize = FormatSize(format, extent.width, extent.height, extent.depth);\r\n    const rowStrideSize = FormatSize(format, stride.width, 1, 1);\r\n    const sliceStrideSize = FormatSize(format, stride.width, stride.height, 1);\r\n    const destRowSize = FormatSize(format, extent.width, 1, 1);\r\n\r\n    const ArrayBufferCtor: TypedArrayConstructor = getTypedArrayConstructor(FormatInfos[format]);\r\n\r\n    if (stagingBuffer.byteLength < bufferSize) {\r\n        stagingBuffer = new Uint8Array(bufferSize);\r\n    }\r\n\r\n    let destOffset = 0;\r\n    let bufferOffset = offset;\r\n\r\n    for (let i = 0; i < extent.depth; i++) {\r\n        bufferOffset = offset + sliceStrideSize * i;\r\n        for (let j = 0; j < extent.height; j += blockHeight) {\r\n            stagingBuffer.subarray(destOffset, destOffset + destRowSize).set(\r\n                new Uint8Array(buffer.buffer, buffer.byteOffset + bufferOffset, destRowSize),\r\n            );\r\n            destOffset += destRowSize;\r\n            bufferOffset += rowStrideSize;\r\n        }\r\n    }\r\n    const length = bufferSize / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n    assertID(Number.isInteger(length), 9101);\r\n    return new ArrayBufferCtor(stagingBuffer.buffer, 0, length);\r\n}\r\n\r\nexport function WebGL2CmdFuncCopyBuffersToTexture (\r\n    device: WebGL2Device,\r\n    buffers: Readonly<ArrayBufferView[]>,\r\n    gpuTexture: IWebGL2GPUTexture,\r\n    regions: Readonly<BufferTextureCopy[]>,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const glTexUnit = cache.glTexUnits[cache.texUnit];\r\n    if (glTexUnit.glTexture !== gpuTexture.glTexture) {\r\n        gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);\r\n        glTexUnit.glTexture = gpuTexture.glTexture;\r\n    }\r\n\r\n    let n = 0;\r\n    let f = 0;\r\n    const fmtInfo: FormatInfo = FormatInfos[gpuTexture.format];\r\n    const ArrayBufferCtor: TypedArrayConstructor = getTypedArrayConstructor(fmtInfo);\r\n    const { isCompressed } = fmtInfo;\r\n\r\n    const blockSize = formatAlignment(gpuTexture.format);\r\n\r\n    const extent: Extent = new Extent();\r\n    const offset: Offset = new Offset();\r\n    const stride: Extent = new Extent();\r\n\r\n    switch (gpuTexture.glTarget) {\r\n    case WebGLConstants.TEXTURE_2D: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            const mipLevel = region.texSubres.mipLevel;\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexExtent = region.texExtent;\r\n            const regionTexExtentWidth = regionTexExtent.width;\r\n            const regionTexExtentHeight = regionTexExtent.height;\r\n            const blockSizeWidth = blockSize.width;\r\n            const blockSizeHeight = blockSize.height;\r\n            const regionBuffStride = region.buffStride;\r\n\r\n            offset.x =  regionTexOffset.x === 0 ? 0 : alignTo(regionTexOffset.x, blockSizeWidth);\r\n            offset.y =  regionTexOffset.y === 0 ? 0 : alignTo(regionTexOffset.y, blockSizeHeight);\r\n            extent.width = regionTexExtentWidth < blockSizeWidth ? regionTexExtentWidth : alignTo(regionTexExtentWidth, blockSizeWidth);\r\n            extent.height = regionTexExtentHeight < blockSizeHeight ? regionTexExtentWidth\r\n                : alignTo(regionTexExtentHeight, blockSizeHeight);\r\n            stride.width = regionBuffStride > 0 ?  regionBuffStride : extent.width;\r\n            stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;\r\n\r\n            const destWidth  = (regionTexExtentWidth + offset.x === (gpuTexture.width >> mipLevel)) ? regionTexExtentWidth : extent.width;\r\n            const destHeight = (regionTexExtentHeight + offset.y === (gpuTexture.height >> mipLevel)) ? regionTexExtentHeight : extent.height;\r\n\r\n            let pixels: ArrayBufferView;\r\n            const buffer = buffers[n++];\r\n            if (stride.width === extent.width && stride.height === extent.height) {\r\n                const length = FormatSize(gpuTexture.format, destWidth, destHeight, 1) / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n                assertID(Number.isInteger(length), 9101);\r\n                pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset, length);\r\n            } else {\r\n                pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);\r\n            }\r\n\r\n            if (!isCompressed) {\r\n                gl.texSubImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    mipLevel,\r\n                    offset.x,\r\n                    offset.y,\r\n                    destWidth,\r\n                    destHeight,\r\n                    gpuTexture.glFormat,\r\n                    gpuTexture.glType,\r\n                    pixels,\r\n                );\r\n            } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL as number) {\r\n                gl.compressedTexSubImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    mipLevel,\r\n                    offset.x,\r\n                    offset.y,\r\n                    destWidth,\r\n                    destHeight,\r\n                    gpuTexture.glFormat,\r\n                    pixels,\r\n                );\r\n            } else { // WEBGL_compressed_texture_etc1\r\n                gl.compressedTexImage2D(\r\n                    WebGLConstants.TEXTURE_2D,\r\n                    mipLevel,\r\n                    gpuTexture.glInternalFmt,\r\n                    destWidth,\r\n                    destHeight,\r\n                    0,\r\n                    pixels,\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case WebGLConstants.TEXTURE_2D_ARRAY: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            const mipLevel = region.texSubres.mipLevel;\r\n\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexExtent = region.texExtent;\r\n            const regionTexExtentWidth = regionTexExtent.width;\r\n            const regionTexExtentHeight = regionTexExtent.height;\r\n            const blockSizeWidth = blockSize.width;\r\n            const blockSizeHeight = blockSize.height;\r\n            const regionBuffStride = region.buffStride;\r\n            const regionTexSubres = region.texSubres;\r\n\r\n            offset.x =  regionTexOffset.x === 0 ? 0 : alignTo(regionTexOffset.x, blockSizeWidth);\r\n            offset.y =  regionTexOffset.y === 0 ? 0 : alignTo(regionTexOffset.y, blockSizeHeight);\r\n            extent.width = regionTexExtentWidth < blockSizeWidth ? regionTexExtentWidth : alignTo(regionTexExtentWidth, blockSizeWidth);\r\n            extent.height = regionTexExtentHeight < blockSizeHeight ? regionTexExtentWidth\r\n                : alignTo(regionTexExtentHeight, blockSizeHeight);\r\n            extent.depth = 1;\r\n            stride.width = regionBuffStride > 0 ?  regionBuffStride : extent.width;\r\n            stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;\r\n\r\n            const destWidth  = (regionTexExtentWidth + offset.x === (gpuTexture.width >> mipLevel)) ? regionTexExtentWidth : extent.width;\r\n            const destHeight = (regionTexExtentHeight + offset.y === (gpuTexture.height >> mipLevel)) ? regionTexExtentHeight : extent.height;\r\n\r\n            const fcount = regionTexSubres.baseArrayLayer + regionTexSubres.layerCount;\r\n            for (f = regionTexSubres.baseArrayLayer; f < fcount; ++f) {\r\n                offset.z = f;\r\n\r\n                let pixels: ArrayBufferView;\r\n                const buffer = buffers[n++];\r\n                if (stride.width === extent.width && stride.height === extent.height) {\r\n                    const length = FormatSize(gpuTexture.format, destWidth, destHeight, 1) / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n                    assertID(Number.isInteger(length), 9101);\r\n                    pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset, length);\r\n                } else {\r\n                    pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);\r\n                }\r\n\r\n                if (!isCompressed) {\r\n                    gl.texSubImage3D(\r\n                        WebGLConstants.TEXTURE_2D_ARRAY,\r\n                        mipLevel,\r\n                        offset.x,\r\n                        offset.y,\r\n                        offset.z,\r\n                        destWidth,\r\n                        destHeight,\r\n                        extent.depth,\r\n                        gpuTexture.glFormat,\r\n                        gpuTexture.glType,\r\n                        pixels,\r\n                    );\r\n                } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL as number) {\r\n                    gl.compressedTexSubImage3D(\r\n                        WebGLConstants.TEXTURE_2D_ARRAY,\r\n                        mipLevel,\r\n                        offset.x,\r\n                        offset.y,\r\n                        offset.z,\r\n                        destWidth,\r\n                        destHeight,\r\n                        extent.depth,\r\n                        gpuTexture.glFormat,\r\n                        pixels,\r\n                    );\r\n                } else { // WEBGL_compressed_texture_etc1\r\n                    gl.compressedTexImage3D(\r\n                        WebGLConstants.TEXTURE_2D_ARRAY,\r\n                        mipLevel,\r\n                        gpuTexture.glInternalFmt,\r\n                        destWidth,\r\n                        destHeight,\r\n                        extent.depth,\r\n                        0,\r\n                        pixels,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case WebGLConstants.TEXTURE_3D: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            const mipLevel = region.texSubres.mipLevel;\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexExtent = region.texExtent;\r\n            const regionTexExtentWidth = regionTexExtent.width;\r\n            const regionTexExtentHeight = regionTexExtent.height;\r\n            const blockSizeWidth = blockSize.width;\r\n            const blockSizeHeight = blockSize.height;\r\n            const regionBuffStride = region.buffStride;\r\n\r\n            offset.x = regionTexOffset.x === 0 ? 0 : alignTo(regionTexOffset.x, blockSizeWidth);\r\n            offset.y = regionTexOffset.y === 0 ? 0 : alignTo(regionTexOffset.y, blockSizeHeight);\r\n            offset.z = regionTexOffset.z;\r\n            extent.width = regionTexExtentWidth < blockSizeWidth ? regionTexExtentWidth : alignTo(regionTexExtentWidth, blockSizeWidth);\r\n            extent.height = regionTexExtentHeight < blockSizeHeight ? regionTexExtentWidth\r\n                : alignTo(regionTexExtentHeight, blockSizeHeight);\r\n            extent.depth = regionTexExtent.depth;\r\n            stride.width = regionBuffStride > 0 ?  regionBuffStride : extent.width;\r\n            stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;\r\n\r\n            const destWidth  = (regionTexExtentWidth + offset.x === (gpuTexture.width >> mipLevel)) ? regionTexExtentWidth : extent.width;\r\n            const destHeight = (regionTexExtentHeight + offset.y === (gpuTexture.height >> mipLevel)) ? regionTexExtentHeight : extent.height;\r\n\r\n            let pixels: ArrayBufferView;\r\n            const buffer = buffers[n++];\r\n            if (stride.width === extent.width && stride.height === extent.height) {\r\n                const length = FormatSize(gpuTexture.format, destWidth, destHeight, extent.depth) / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n                assertID(Number.isInteger(length), 9101);\r\n                pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset, length);\r\n            } else {\r\n                pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);\r\n            }\r\n\r\n            if (!isCompressed) {\r\n                gl.texSubImage3D(\r\n                    WebGLConstants.TEXTURE_2D_ARRAY,\r\n                    mipLevel,\r\n                    offset.x,\r\n                    offset.y,\r\n                    offset.z,\r\n                    destWidth,\r\n                    destHeight,\r\n                    extent.depth,\r\n                    gpuTexture.glFormat,\r\n                    gpuTexture.glType,\r\n                    pixels,\r\n                );\r\n            } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL as number) {\r\n                gl.compressedTexSubImage3D(\r\n                    WebGLConstants.TEXTURE_2D_ARRAY,\r\n                    mipLevel,\r\n                    offset.x,\r\n                    offset.y,\r\n                    offset.z,\r\n                    destWidth,\r\n                    destHeight,\r\n                    extent.depth,\r\n                    gpuTexture.glFormat,\r\n                    pixels,\r\n                );\r\n            } else { // WEBGL_compressed_texture_etc1\r\n                gl.compressedTexImage3D(\r\n                    WebGLConstants.TEXTURE_2D_ARRAY,\r\n                    mipLevel,\r\n                    gpuTexture.glInternalFmt,\r\n                    destWidth,\r\n                    destHeight,\r\n                    extent.depth,\r\n                    0,\r\n                    pixels,\r\n                );\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case WebGLConstants.TEXTURE_CUBE_MAP: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            const mipLevel = region.texSubres.mipLevel;\r\n\r\n            const regionTexOffset = region.texOffset;\r\n            const regionTexExtent = region.texExtent;\r\n            const regionTexExtentWidth = regionTexExtent.width;\r\n            const regionTexExtentHeight = regionTexExtent.height;\r\n            const blockSizeWidth = blockSize.width;\r\n            const blockSizeHeight = blockSize.height;\r\n            const regionBuffStride = region.buffStride;\r\n            const regionTexSubres = region.texSubres;\r\n\r\n            offset.x =  regionTexOffset.x === 0 ? 0 : alignTo(regionTexOffset.x, blockSizeWidth);\r\n            offset.y =  regionTexOffset.y === 0 ? 0 : alignTo(regionTexOffset.y, blockSizeHeight);\r\n            extent.width = regionTexExtentWidth < blockSizeWidth ? regionTexExtentWidth : alignTo(regionTexExtentWidth, blockSizeWidth);\r\n            extent.height = regionTexExtentHeight < blockSizeHeight ? regionTexExtentWidth\r\n                : alignTo(regionTexExtentHeight, blockSizeHeight);\r\n            stride.width = regionBuffStride > 0 ?  regionBuffStride : extent.width;\r\n            stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;\r\n\r\n            const destWidth  = (regionTexExtentWidth + offset.x === (gpuTexture.width >> mipLevel)) ? regionTexExtentWidth : extent.width;\r\n            const destHeight = (regionTexExtentHeight + offset.y === (gpuTexture.height >> mipLevel)) ? regionTexExtentHeight : extent.height;\r\n\r\n            const fcount = regionTexSubres.baseArrayLayer + regionTexSubres.layerCount;\r\n            for (f = regionTexSubres.baseArrayLayer; f < fcount; ++f) {\r\n                let pixels: ArrayBufferView;\r\n                const buffer = buffers[n++];\r\n                if (stride.width === extent.width && stride.height === extent.height) {\r\n                    const length = FormatSize(gpuTexture.format, destWidth, destHeight, 1) / ArrayBufferCtor.BYTES_PER_ELEMENT;\r\n                    assertID(Number.isInteger(length), 9101);\r\n                    pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset, length);\r\n                } else {\r\n                    pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);\r\n                }\r\n\r\n                if (!isCompressed) {\r\n                    gl.texSubImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        mipLevel,\r\n                        offset.x,\r\n                        offset.y,\r\n                        destWidth,\r\n                        destHeight,\r\n                        gpuTexture.glFormat,\r\n                        gpuTexture.glType,\r\n                        pixels,\r\n                    );\r\n                } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL as number) {\r\n                    gl.compressedTexSubImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        mipLevel,\r\n                        offset.x,\r\n                        offset.y,\r\n                        destWidth,\r\n                        destHeight,\r\n                        gpuTexture.glFormat,\r\n                        pixels,\r\n                    );\r\n                } else { // WEBGL_compressed_texture_etc1\r\n                    gl.compressedTexImage2D(\r\n                        WebGLConstants.TEXTURE_CUBE_MAP_POSITIVE_X + f,\r\n                        mipLevel,\r\n                        gpuTexture.glInternalFmt,\r\n                        destWidth,\r\n                        destHeight,\r\n                        0,\r\n                        pixels,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16327);\r\n    }\r\n    }\r\n\r\n    if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {\r\n        gl.generateMipmap(gpuTexture.glTarget);\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncCopyTextureToBuffers (\r\n    device: WebGL2Device,\r\n    gpuTexture: IWebGL2GPUTexture,\r\n    buffers: Readonly<ArrayBufferView[]>,\r\n    regions: Readonly<BufferTextureCopy[]>,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n\r\n    const framebuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, framebuffer);\r\n    let x = 0;\r\n    let y = 0;\r\n    let w = 1;\r\n    let h = 1;\r\n\r\n    switch (gpuTexture.glTarget) {\r\n    case WebGLConstants.TEXTURE_2D: {\r\n        for (let k = 0; k < regions.length; k++) {\r\n            const region = regions[k];\r\n            gl.framebufferTexture2D(\r\n                WebGLConstants.FRAMEBUFFER,\r\n                WebGLConstants.COLOR_ATTACHMENT0,\r\n                gpuTexture.glTarget,\r\n                gpuTexture.glTexture,\r\n                region.texSubres.mipLevel,\r\n            );\r\n            x = region.texOffset.x;\r\n            y = region.texOffset.y;\r\n            w = region.texExtent.width;\r\n            h = region.texExtent.height;\r\n            gl.readPixels(x, y, w, h, gpuTexture.glFormat, gpuTexture.glType, buffers[k]);\r\n        }\r\n        break;\r\n    }\r\n    default: {\r\n        errorID(16399);\r\n    }\r\n    }\r\n    gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, null);\r\n    cache.glFramebuffer = null;\r\n    gl.deleteFramebuffer(framebuffer);\r\n}\r\n\r\nexport function WebGL2CmdFuncBlitFramebuffer (\r\n    device: WebGL2Device,\r\n    src: IWebGL2GPUFramebuffer,\r\n    dst: IWebGL2GPUFramebuffer,\r\n    srcRect: Readonly<Rect>,\r\n    dstRect: Readonly<Rect>,\r\n    filter: Filter,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n\r\n    if (cache.glReadFramebuffer !== src.glFramebuffer) {\r\n        gl.bindFramebuffer(WebGLConstants.READ_FRAMEBUFFER, src.glFramebuffer);\r\n        cache.glReadFramebuffer = src.glFramebuffer;\r\n    }\r\n\r\n    const rebindFBO = (dst.glFramebuffer !== cache.glFramebuffer);\r\n    if (rebindFBO) {\r\n        gl.bindFramebuffer(WebGLConstants.DRAW_FRAMEBUFFER, dst.glFramebuffer);\r\n    }\r\n\r\n    let mask = 0;\r\n    if (src.gpuColorViews.length > 0) {\r\n        mask |= WebGLConstants.COLOR_BUFFER_BIT;\r\n    }\r\n\r\n    if (src.gpuDepthStencilView) {\r\n        mask |= WebGLConstants.DEPTH_BUFFER_BIT;\r\n        if (FormatInfos[src.gpuDepthStencilView.gpuTexture.format].hasStencil) {\r\n            mask |= WebGLConstants.STENCIL_BUFFER_BIT;\r\n        }\r\n    }\r\n\r\n    const glFilter = (filter === Filter.LINEAR || filter === Filter.ANISOTROPIC) ? WebGLConstants.LINEAR : WebGLConstants.NEAREST;\r\n\r\n    gl.blitFramebuffer(\r\n        srcRect.x,\r\n        srcRect.y,\r\n        srcRect.x + srcRect.width,\r\n        srcRect.y + srcRect.height,\r\n        dstRect.x,\r\n        dstRect.y,\r\n        dstRect.x + dstRect.width,\r\n        dstRect.y + dstRect.height,\r\n        mask,\r\n        glFilter,\r\n    );\r\n\r\n    if (rebindFBO) {\r\n        gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, cache.glFramebuffer);\r\n    }\r\n}\r\n\r\nexport function WebGL2CmdFuncBlitTexture (\r\n    device: WebGL2Device,\r\n    src: Readonly<IWebGL2GPUTexture>,\r\n    dst: IWebGL2GPUTexture,\r\n    regions: Readonly<TextureBlit[]>,\r\n    filter: Filter,\r\n): void {\r\n    const { gl } = device;\r\n    const cache = device.getStateCache();\r\n    const blitManager = device.blitManager;\r\n    if (!blitManager) {\r\n        return;\r\n    }\r\n\r\n    // logic different from native, because framebuffer-map is not implemented in webgl2\r\n    const glFilter = (filter === Filter.LINEAR || filter === Filter.ANISOTROPIC) ? WebGLConstants.LINEAR : WebGLConstants.NEAREST;\r\n\r\n    const srcFramebuffer = blitManager.srcFramebuffer;\r\n    const dstFramebuffer = blitManager.dstFramebuffer;\r\n    const origReadFBO = cache.glReadFramebuffer;\r\n    const origDrawFBO = cache.glFramebuffer;\r\n\r\n    let srcMip = regions[0].srcSubres.mipLevel;\r\n    let dstMip = regions[0].dstSubres.mipLevel;\r\n\r\n    const blitInfo = (formatInfo: FormatInfo): { mask: number; attachment: number; } => {\r\n        let mask = 0;\r\n        let attachment: number = WebGLConstants.COLOR_ATTACHMENT0;\r\n\r\n        if (formatInfo.hasStencil) {\r\n            attachment = WebGLConstants.DEPTH_STENCIL_ATTACHMENT;\r\n        } else if (formatInfo.hasDepth) {\r\n            attachment = WebGLConstants.DEPTH_ATTACHMENT;\r\n        }\r\n\r\n        if (formatInfo.hasDepth || formatInfo.hasStencil) {\r\n            if (formatInfo.hasDepth) {\r\n                mask |= WebGLConstants.DEPTH_BUFFER_BIT;\r\n            }\r\n            if (formatInfo.hasStencil) {\r\n                mask |= WebGLConstants.STENCIL_BUFFER_BIT;\r\n            }\r\n        } else {\r\n            mask |= WebGLConstants.COLOR_BUFFER_BIT;\r\n        }\r\n\r\n        return { mask, attachment };\r\n    };\r\n\r\n    const regionIndices = regions.map((_, i): number => i);\r\n    regionIndices.sort((a, b): number => regions[a].srcSubres.mipLevel - regions[b].srcSubres.mipLevel);\r\n\r\n    const { mask: srcMask, attachment: srcAttachment } = blitInfo(FormatInfos[src.format]);\r\n    const { mask: dstMask, attachment: dstAttachment } = blitInfo(FormatInfos[dst.format]);\r\n\r\n    if (cache.glReadFramebuffer !== srcFramebuffer) {\r\n        gl.bindFramebuffer(WebGLConstants.READ_FRAMEBUFFER, srcFramebuffer);\r\n        cache.glReadFramebuffer = srcFramebuffer;\r\n    }\r\n\r\n    if (cache.glFramebuffer !== dstFramebuffer) {\r\n        gl.bindFramebuffer(WebGLConstants.DRAW_FRAMEBUFFER, dstFramebuffer);\r\n        cache.glFramebuffer = dstFramebuffer;\r\n    }\r\n\r\n    if (src.glTexture) {\r\n        gl.framebufferTexture2D(WebGLConstants.READ_FRAMEBUFFER, srcAttachment, src.glTarget, src.glTexture, srcMip);\r\n    } else {\r\n        gl.framebufferRenderbuffer(WebGLConstants.READ_FRAMEBUFFER, srcAttachment, WebGLConstants.RENDERBUFFER, src.glRenderbuffer);\r\n    }\r\n\r\n    if (dst.glTexture) {\r\n        gl.framebufferTexture2D(WebGLConstants.DRAW_FRAMEBUFFER, dstAttachment, dst.glTarget, dst.glTexture, dstMip);\r\n    } else {\r\n        gl.framebufferRenderbuffer(WebGLConstants.DRAW_FRAMEBUFFER, dstAttachment, WebGLConstants.RENDERBUFFER, dst.glRenderbuffer);\r\n    }\r\n\r\n    for (let i = 0; i < regionIndices.length; i++) {\r\n        const region = regions[regionIndices[i]];\r\n\r\n        if (src.glTexture && srcMip !== region.srcSubres.mipLevel) {\r\n            srcMip = region.srcSubres.mipLevel;\r\n            gl.framebufferTexture2D(WebGLConstants.READ_FRAMEBUFFER, srcAttachment, src.glTarget, src.glTexture, srcMip);\r\n        }\r\n\r\n        if (dst.glTexture && dstMip !== region.dstSubres.mipLevel) {\r\n            dstMip = region.dstSubres.mipLevel;\r\n            gl.framebufferTexture2D(WebGLConstants.DRAW_FRAMEBUFFER, dstAttachment, dst.glTarget, dst.glTexture, dstMip);\r\n        }\r\n\r\n        gl.blitFramebuffer(\r\n            region.srcOffset.x,\r\n            region.srcOffset.y,\r\n            region.srcOffset.x + region.srcExtent.width,\r\n            region.srcOffset.y + region.srcExtent.height,\r\n            region.dstOffset.x,\r\n            region.dstOffset.y,\r\n            region.dstOffset.x + region.dstExtent.width,\r\n            region.dstOffset.y + region.dstExtent.height,\r\n            srcMask,\r\n            glFilter,\r\n        );\r\n    }\r\n\r\n    // restore fbo state\r\n    if (cache.glReadFramebuffer !== origReadFBO) {\r\n        gl.bindFramebuffer(WebGLConstants.READ_FRAMEBUFFER, origReadFBO);\r\n        cache.glReadFramebuffer = origReadFBO;\r\n    }\r\n    if (cache.glFramebuffer !== origDrawFBO) {\r\n        gl.bindFramebuffer(WebGLConstants.DRAW_FRAMEBUFFER, origDrawFBO);\r\n        cache.glFramebuffer = origDrawFBO;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { nextPow2 } from '../../core';\r\nimport {\r\n    Address, DescriptorType, BufferUsage, Filter, Format, MemoryUsage, SampleCount, UniformInputAttachment,\r\n    ShaderStageFlagBit, TextureFlags, TextureType, TextureUsage, Type, DynamicStateFlagBit, DrawInfo, Attribute,\r\n    ColorAttachment, DepthStencilAttachment, UniformBlock, UniformSamplerTexture, DescriptorSetLayoutBinding,\r\n} from '../base/define';\r\nimport { BlendState, DepthStencilState, RasterizerState } from '../base/pipeline-state';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { WebGL2Device } from './webgl2-device';\r\n\r\n// For inline enum\r\nconst enum WebGL2IndirectDrawInfosEnums {\r\n    DEFAULT_CAPACITY = 4,\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGL2IndirectDrawInfos {\r\n    public counts: Int32Array;\r\n    public offsets: Int32Array;\r\n    public instances: Int32Array;\r\n    public drawCount = 0;\r\n    public drawByIndex = false;\r\n    public instancedDraw = false;\r\n\r\n    // staging buffer\r\n    public byteOffsets: Int32Array;\r\n\r\n    private _capacity = WebGL2IndirectDrawInfosEnums.DEFAULT_CAPACITY;\r\n\r\n    constructor () {\r\n        this.counts = new Int32Array(WebGL2IndirectDrawInfosEnums.DEFAULT_CAPACITY);\r\n        this.offsets = new Int32Array(WebGL2IndirectDrawInfosEnums.DEFAULT_CAPACITY);\r\n        this.instances  = new Int32Array(WebGL2IndirectDrawInfosEnums.DEFAULT_CAPACITY);\r\n        this.byteOffsets = new Int32Array(WebGL2IndirectDrawInfosEnums.DEFAULT_CAPACITY);\r\n    }\r\n\r\n    public clearDraws (): void {\r\n        this.drawCount = 0;\r\n        this.drawByIndex = false;\r\n        this.instancedDraw = false;\r\n    }\r\n\r\n    public setDrawInfo (idx: number, info: Readonly<DrawInfo>): void {\r\n        this._ensureCapacity(idx);\r\n        this.drawByIndex = info.indexCount > 0;\r\n        this.instancedDraw = !!info.instanceCount;\r\n        this.drawCount = Math.max(idx + 1, this.drawCount);\r\n\r\n        if (this.drawByIndex) {\r\n            this.counts[idx] = info.indexCount;\r\n            this.offsets[idx] = info.firstIndex;\r\n        } else {\r\n            this.counts[idx] = info.vertexCount;\r\n            this.offsets[idx] = info.firstVertex;\r\n        }\r\n        this.instances[idx] = Math.max(1, info.instanceCount);\r\n    }\r\n\r\n    private _ensureCapacity (target: number): void {\r\n        if (this._capacity > target) return;\r\n        this._capacity = nextPow2(target);\r\n\r\n        const counts = new Int32Array(this._capacity);\r\n        const offsets = new Int32Array(this._capacity);\r\n        const instances = new Int32Array(this._capacity);\r\n        this.byteOffsets = new Int32Array(this._capacity);\r\n\r\n        counts.set(this.counts);\r\n        offsets.set(this.offsets);\r\n        instances.set(this.instances);\r\n\r\n        this.counts = counts;\r\n        this.offsets = offsets;\r\n        this.instances = instances;\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2BindingMapping {\r\n    blockOffsets: number[];\r\n    samplerTextureOffsets: number[];\r\n    flexibleSet: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUUniformInfo {\r\n    name: string;\r\n    type: Type;\r\n    count: number;\r\n    offset: number;\r\n    view: Float32Array | Int32Array;\r\n    isDirty: boolean;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUBuffer {\r\n    usage: BufferUsage;\r\n    /** @mangle */\r\n    memUsage: MemoryUsage;\r\n    size: number;\r\n    stride: number;\r\n\r\n    glTarget: GLenum;\r\n    glBuffer: WebGLBuffer | null;\r\n    glOffset: number;\r\n\r\n    buffer: ArrayBufferView | null;\r\n    indirects: WebGL2IndirectDrawInfos;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUTexture {\r\n    type: TextureType;\r\n    format: Format;\r\n    usage: TextureUsage;\r\n    width: number;\r\n    height: number;\r\n    depth: number;\r\n    size: number;\r\n    arrayLayer: number;\r\n    mipLevel: number;\r\n    samples: SampleCount;\r\n    flags: TextureFlags;\r\n    isPowerOf2: boolean;\r\n\r\n    glTarget: GLenum;\r\n    glInternalFmt: GLenum;\r\n    glFormat: GLenum;\r\n    glType: GLenum;\r\n    glUsage: GLenum;\r\n    glTexture: WebGLTexture | null;\r\n    glRenderbuffer: WebGLRenderbuffer | null;\r\n    glWrapS: GLenum;\r\n    glWrapT: GLenum;\r\n    glMinFilter: GLenum;\r\n    glMagFilter: GLenum;\r\n\r\n    isSwapchainTexture: boolean;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUTextureView {\r\n    gpuTexture: IWebGL2GPUTexture;\r\n    type: TextureType;\r\n    format: Format;\r\n    baseLevel: number;\r\n    levelCount: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPURenderPass {\r\n    colorAttachments: ColorAttachment[];\r\n    depthStencilAttachment: DepthStencilAttachment | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUFramebuffer {\r\n    gpuRenderPass: IWebGL2GPURenderPass;\r\n    gpuColorViews: IWebGL2GPUTextureView[];\r\n    gpuDepthStencilView: IWebGL2GPUTextureView | null;\r\n    glFramebuffer: WebGLFramebuffer | null;\r\n    isOffscreen: boolean;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUSampler {\r\n    glSamplers: Map<number, WebGLSampler>;\r\n\r\n    minFilter: Filter;\r\n    magFilter: Filter;\r\n    mipFilter: Filter;\r\n    addressU: Address;\r\n    addressV: Address;\r\n    addressW: Address;\r\n\r\n    glMinFilter: GLenum;\r\n    glMagFilter: GLenum;\r\n    glWrapS: GLenum;\r\n    glWrapT: GLenum;\r\n    glWrapR: GLenum;\r\n\r\n    getGLSampler (device: WebGL2Device, minLod: number, maxLod: number): WebGLSampler;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUInput {\r\n    name: string;\r\n    type: Type;\r\n    stride: number;\r\n    count: number;\r\n    size: number;\r\n\r\n    glType: GLenum;\r\n    glLoc: GLint;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUUniform {\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    stride: number;\r\n    count: number;\r\n    size: number;\r\n    offset: number;\r\n\r\n    glType: GLenum;\r\n    glLoc: WebGLUniformLocation;\r\n    array: number[];\r\n    begin: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUUniformBlock {\r\n    set: number;\r\n    binding: number;\r\n    idx: number;\r\n    name: string;\r\n    size: number;\r\n    glBinding: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUUniformSamplerTexture {\r\n    set: number;\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    count: number;\r\n    units: number[];\r\n    glUnits: Int32Array;\r\n\r\n    glType: GLenum;\r\n    glLoc: WebGLUniformLocation;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUShaderStage {\r\n    type: ShaderStageFlagBit;\r\n    source: string;\r\n    glShader: WebGLShader | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUShader {\r\n    name: string;\r\n    blocks: UniformBlock[];\r\n    samplerTextures: UniformSamplerTexture[];\r\n    subpassInputs: UniformInputAttachment[];\r\n\r\n    gpuStages: IWebGL2GPUShaderStage[];\r\n    glProgram: WebGLProgram | null;\r\n    glInputs: IWebGL2GPUInput[];\r\n    glUniforms: IWebGL2GPUUniform[];\r\n    glBlocks: IWebGL2GPUUniformBlock[];\r\n    glSamplerTextures: IWebGL2GPUUniformSamplerTexture[];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUDescriptorSetLayout {\r\n    bindings: DescriptorSetLayoutBinding[];\r\n    dynamicBindings: number[];\r\n    descriptorIndices: number[];\r\n    descriptorCount: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUPipelineLayout {\r\n    gpuSetLayouts: IWebGL2GPUDescriptorSetLayout[];\r\n    dynamicOffsetCount: number;\r\n    dynamicOffsetOffsets: number[];\r\n    dynamicOffsetIndices: number[][];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUPipelineState {\r\n    glPrimitive: GLenum;\r\n    gpuShader: IWebGL2GPUShader | null;\r\n    gpuPipelineLayout: IWebGL2GPUPipelineLayout | null;\r\n    rs: RasterizerState;\r\n    dss: DepthStencilState;\r\n    bs: BlendState;\r\n    dynamicStates: DynamicStateFlagBit[];\r\n    gpuRenderPass: IWebGL2GPURenderPass | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUDescriptor {\r\n    type: DescriptorType;\r\n    gpuBuffer: IWebGL2GPUBuffer | null;\r\n    gpuTextureView: IWebGL2GPUTextureView | null;\r\n    gpuSampler: IWebGL2GPUSampler | null;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUDescriptorSet {\r\n    gpuDescriptors: IWebGL2GPUDescriptor[];\r\n    descriptorIndices: number[];\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2Attrib {\r\n    name: string;\r\n    glBuffer: WebGLBuffer | null;\r\n    glType: GLenum;\r\n    size: number;\r\n    count: number;\r\n    stride: number;\r\n    componentCount: number;\r\n    isNormalized: boolean;\r\n    isInstanced: boolean;\r\n    offset: number;\r\n}\r\n\r\n/** @mangle */\r\nexport interface IWebGL2GPUInputAssembler {\r\n    attributes: Attribute[];\r\n    gpuVertexBuffers: IWebGL2GPUBuffer[];\r\n    gpuIndexBuffer: IWebGL2GPUBuffer | null;\r\n    gpuIndirectBuffer: IWebGL2GPUBuffer | null;\r\n\r\n    glAttribs: IWebGL2Attrib[];\r\n    glIndexType: GLenum;\r\n    glVAOs: Map<WebGLProgram, WebGLVertexArrayObject>;\r\n}\r\n\r\n/** @mangle */\r\nexport class IWebGL2BlitManager {\r\n    private _srcFramebuffer: WebGLFramebuffer | null;\r\n    private _dstFramebuffer: WebGLFramebuffer | null;\r\n\r\n    get srcFramebuffer (): WebGLFramebuffer | null {\r\n        return this._srcFramebuffer;\r\n    }\r\n\r\n    get dstFramebuffer (): WebGLFramebuffer | null {\r\n        return this._dstFramebuffer;\r\n    }\r\n\r\n    constructor () {\r\n        const { gl } = WebGL2DeviceManager.instance;\r\n        this._srcFramebuffer = gl.createFramebuffer();\r\n        this._dstFramebuffer = gl.createFramebuffer();\r\n    }\r\n\r\n    destroy (): void {\r\n        const { gl } = WebGL2DeviceManager.instance;\r\n        gl.deleteFramebuffer(this._srcFramebuffer);\r\n        gl.deleteFramebuffer(this._dstFramebuffer);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { warnID } from '../../core/platform/debug';\r\nimport { Buffer } from '../base/buffer';\r\nimport { BufferUsageBit, BufferSource, BufferInfo, BufferViewInfo } from '../base/define';\r\nimport {\r\n    WebGL2CmdFuncCreateBuffer,\r\n    WebGL2CmdFuncDestroyBuffer,\r\n    WebGL2CmdFuncResizeBuffer,\r\n    WebGL2CmdFuncUpdateBuffer,\r\n} from './webgl2-commands';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { IWebGL2GPUBuffer, WebGL2IndirectDrawInfos } from './webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2Buffer extends Buffer {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    getGpuBuffer (): IWebGL2GPUBuffer {\r\n        return  this._gpuBuffer!;\r\n    }\r\n\r\n    private _gpuBuffer: IWebGL2GPUBuffer | null = null;\r\n\r\n    public initialize (info: Readonly<BufferInfo> | Readonly<BufferViewInfo>): void {\r\n        if ('buffer' in info) { // buffer view\r\n            this._isBufferView = true;\r\n\r\n            const buffer = info.buffer as WebGL2Buffer;\r\n\r\n            this._usage = buffer.usage;\r\n            this._memUsage = buffer.memUsage;\r\n            this._size = this._stride = info.range;\r\n            this._count = 1;\r\n            this._flags = buffer.flags;\r\n\r\n            this._gpuBuffer = {\r\n                usage: this._usage,\r\n                memUsage: this._memUsage,\r\n                size: this._size,\r\n                stride: this._stride,\r\n                buffer: null,\r\n                indirects: buffer.getGpuBuffer().indirects,\r\n                glTarget: buffer.getGpuBuffer().glTarget,\r\n                glBuffer: buffer.getGpuBuffer().glBuffer,\r\n                glOffset: info.offset,\r\n            };\r\n        } else { // native buffer\r\n            this._usage = info.usage;\r\n            this._memUsage = info.memUsage;\r\n            this._size = info.size;\r\n            this._stride = Math.max(info.stride || this._size, 1);\r\n            this._count = this._size / this._stride;\r\n            this._flags = info.flags;\r\n\r\n            this._gpuBuffer = {\r\n                usage: this._usage,\r\n                memUsage: this._memUsage,\r\n                size: this._size,\r\n                stride: this._stride,\r\n                buffer: null,\r\n                indirects: new WebGL2IndirectDrawInfos(),\r\n                glTarget: 0,\r\n                glBuffer: null,\r\n                glOffset: 0,\r\n            };\r\n\r\n            WebGL2CmdFuncCreateBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);\r\n\r\n            WebGL2DeviceManager.instance.memoryStatus.bufferSize += this._size;\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuBuffer) {\r\n            if (!this._isBufferView) {\r\n                WebGL2CmdFuncDestroyBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);\r\n                WebGL2DeviceManager.instance.memoryStatus.bufferSize -= this._size;\r\n            }\r\n            this._gpuBuffer = null;\r\n        }\r\n    }\r\n\r\n    public resize (size: number): void {\r\n        if (this._isBufferView) {\r\n            warnID(16379);\r\n            return;\r\n        }\r\n\r\n        const oldSize = this._size;\r\n        if (oldSize === size) { return; }\r\n\r\n        this._size = size;\r\n        this._count = this._size / this._stride;\r\n\r\n        if (this._gpuBuffer) {\r\n            this._gpuBuffer.size = size;\r\n            if (size > 0) {\r\n                WebGL2CmdFuncResizeBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);\r\n                WebGL2DeviceManager.instance.memoryStatus.bufferSize -= oldSize;\r\n                WebGL2DeviceManager.instance.memoryStatus.bufferSize += size;\r\n            }\r\n        }\r\n    }\r\n\r\n    public update (buffer: Readonly<BufferSource>, size?: number): void {\r\n        if (this._isBufferView) {\r\n            warnID(16380);\r\n            return;\r\n        }\r\n\r\n        let buffSize: number;\r\n        if (size !== undefined) {\r\n            buffSize = size;\r\n        } else if (this._usage & BufferUsageBit.INDIRECT) {\r\n            buffSize = 0;\r\n        } else {\r\n            buffSize = (buffer as ArrayBuffer).byteLength;\r\n        }\r\n\r\n        WebGL2CmdFuncUpdateBuffer(\r\n            WebGL2DeviceManager.instance,\r\n            this._gpuBuffer!,\r\n            buffer as BufferSource,\r\n            0,\r\n            buffSize,\r\n        );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport {\r\n    StencilFace,\r\n    BufferSource, CommandBufferInfo,\r\n    BufferTextureCopy, Color, Rect, Viewport, DrawInfo, DynamicStates, TextureBlit, Filter,\r\n} from '../base/define';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { PipelineState } from '../base/pipeline-state';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGL2DescriptorSet } from './webgl2-descriptor-set';\r\n\r\nimport { IWebGL2GPUInputAssembler, IWebGL2GPUDescriptorSet, IWebGL2GPUPipelineState } from './webgl2-gpu-objects';\r\nimport { WebGL2InputAssembler } from './webgl2-input-assembler';\r\nimport { WebGL2PipelineState } from './webgl2-pipeline-state';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { GeneralBarrier } from '../base/states/general-barrier';\r\nimport { TextureBarrier } from '../base/states/texture-barrier';\r\nimport { BufferBarrier } from '../base/states/buffer-barrier';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { errorID } from '../../core/platform/debug';\r\n\r\n/** @mangle */\r\nexport class WebGL2CommandBuffer extends CommandBuffer {\r\n    protected _isInRenderPass = false;\r\n    protected _curGPUPipelineState: IWebGL2GPUPipelineState | null = null;\r\n    protected _curGPUDescriptorSets: IWebGL2GPUDescriptorSet[] = [];\r\n    protected _curGPUInputAssembler: IWebGL2GPUInputAssembler | null = null;\r\n    protected _curDynamicOffsets: number[] = Array(8).fill(0);\r\n    protected _curDynamicStates: DynamicStates = new DynamicStates();\r\n    protected _isStateInvalid = false;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<CommandBufferInfo>): void {\r\n        this._type = info.type;\r\n        this._queue = info.queue;\r\n\r\n        const setCount = WebGL2DeviceManager.instance.bindingMappings.blockOffsets.length;\r\n        for (let i = 0; i < setCount; i++) {\r\n            this._curGPUDescriptorSets.push(null!);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n\r\n    }\r\n\r\n    public begin (renderPass?: RenderPass, subpass?: number, frameBuffer?: Framebuffer): void {\r\n        this._curGPUPipelineState = null;\r\n        this._curGPUInputAssembler = null;\r\n        this._curGPUDescriptorSets.length = 0;\r\n        this._numDrawCalls = 0;\r\n        this._numInstances = 0;\r\n        this._numTris = 0;\r\n    }\r\n\r\n    public end (): void {\r\n        if (this._isStateInvalid) {\r\n            this.bindStates();\r\n        }\r\n\r\n        this._isInRenderPass = false;\r\n    }\r\n\r\n    public beginRenderPass (\r\n        renderPass: RenderPass,\r\n        framebuffer: Framebuffer,\r\n        renderArea: Readonly<Rect>,\r\n        clearColors: Readonly<Color[]>,\r\n        clearDepth: number,\r\n        clearStencil: number,\r\n    ): void {\r\n        errorID(16401);\r\n        this._isInRenderPass = true;\r\n    }\r\n\r\n    public endRenderPass (): void {\r\n        this._isInRenderPass = false;\r\n    }\r\n\r\n    public bindPipelineState (pipelineState: PipelineState): void {\r\n        const gpuPipelineState = (pipelineState as WebGL2PipelineState).gpuPipelineState;\r\n        if (gpuPipelineState !== this._curGPUPipelineState) {\r\n            this._curGPUPipelineState = gpuPipelineState;\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public bindDescriptorSet (set: number, descriptorSet: DescriptorSet, dynamicOffsets?: Readonly<number[]>): void {\r\n        const gpuDescriptorSets = (descriptorSet as WebGL2DescriptorSet).gpuDescriptorSet;\r\n        if (gpuDescriptorSets !== this._curGPUDescriptorSets[set]) {\r\n            this._curGPUDescriptorSets[set] = gpuDescriptorSets;\r\n            this._isStateInvalid = true;\r\n        }\r\n        if (dynamicOffsets) {\r\n            const gpuPipelineLayout = this._curGPUPipelineState?.gpuPipelineLayout;\r\n            if (gpuPipelineLayout) {\r\n                const offsets = this._curDynamicOffsets;\r\n                const idx = gpuPipelineLayout.dynamicOffsetOffsets[set];\r\n                for (let i = 0; i < dynamicOffsets.length; i++) offsets[idx + i] = dynamicOffsets[i];\r\n                this._isStateInvalid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public bindInputAssembler (inputAssembler: InputAssembler): void {\r\n        const gpuInputAssembler = (inputAssembler as WebGL2InputAssembler).gpuInputAssembler;\r\n        this._curGPUInputAssembler = gpuInputAssembler;\r\n        this._isStateInvalid = true;\r\n    }\r\n\r\n    public setViewport (viewport: Readonly<Viewport>): void {\r\n        const cache = this._curDynamicStates.viewport;\r\n        if (cache.left !== viewport.left\r\n            || cache.top !== viewport.top\r\n            || cache.width !== viewport.width\r\n            || cache.height !== viewport.height\r\n            || cache.minDepth !== viewport.minDepth\r\n            || cache.maxDepth !== viewport.maxDepth) {\r\n            cache.left = viewport.left;\r\n            cache.top = viewport.top;\r\n            cache.width = viewport.width;\r\n            cache.height = viewport.height;\r\n            cache.minDepth = viewport.minDepth;\r\n            cache.maxDepth = viewport.maxDepth;\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public setScissor (scissor: Readonly<Rect>): void {\r\n        const cache = this._curDynamicStates.scissor;\r\n        if (cache.x !== scissor.x\r\n            || cache.y !== scissor.y\r\n            || cache.width !== scissor.width\r\n            || cache.height !== scissor.height) {\r\n            cache.x = scissor.x;\r\n            cache.y = scissor.y;\r\n            cache.width = scissor.width;\r\n            cache.height = scissor.height;\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public setLineWidth (lineWidth: number): void {\r\n        if (this._curDynamicStates.lineWidth !== lineWidth) {\r\n            this._curDynamicStates.lineWidth = lineWidth;\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public setDepthBias (depthBiasConstantFactor: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void {\r\n        const cache = this._curDynamicStates;\r\n        if (cache.depthBiasConstant !== depthBiasConstantFactor\r\n            || cache.depthBiasClamp !== depthBiasClamp\r\n            || cache.depthBiasSlope !== depthBiasSlopeFactor) {\r\n            cache.depthBiasConstant = depthBiasConstantFactor;\r\n            cache.depthBiasClamp = depthBiasClamp;\r\n            cache.depthBiasSlope = depthBiasSlopeFactor;\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public setBlendConstants (blendConstants: Color): void {\r\n        const cache = this._curDynamicStates.blendConstant;\r\n        if (cache.x !== blendConstants.x\r\n            || cache.y !== blendConstants.y\r\n            || cache.z !== blendConstants.z\r\n            || cache.w !== blendConstants.w) {\r\n            cache.copy(blendConstants);\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public setDepthBound (minDepthBounds: number, maxDepthBounds: number): void {\r\n        const cache = this._curDynamicStates;\r\n        if (cache.depthMinBounds !== minDepthBounds\r\n            || cache.depthMaxBounds !== maxDepthBounds) {\r\n            cache.depthMinBounds = minDepthBounds;\r\n            cache.depthMaxBounds = maxDepthBounds;\r\n            this._isStateInvalid = true;\r\n        }\r\n    }\r\n\r\n    public setStencilWriteMask (face: StencilFace, writeMask: number): void {\r\n        const front = this._curDynamicStates.stencilStatesFront;\r\n        const back = this._curDynamicStates.stencilStatesBack;\r\n        if (face & StencilFace.FRONT) {\r\n            if (front.writeMask !== writeMask) {\r\n                front.writeMask = writeMask;\r\n                this._isStateInvalid = true;\r\n            }\r\n        }\r\n        if (face & StencilFace.BACK) {\r\n            if (back.writeMask !== writeMask) {\r\n                back.writeMask = writeMask;\r\n                this._isStateInvalid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setStencilCompareMask (face: StencilFace, reference: number, compareMask: number): void {\r\n        const front = this._curDynamicStates.stencilStatesFront;\r\n        const back = this._curDynamicStates.stencilStatesBack;\r\n        if (face & StencilFace.FRONT) {\r\n            if (front.compareMask !== compareMask\r\n                || front.reference !== reference) {\r\n                front.reference = reference;\r\n                front.compareMask = compareMask;\r\n                this._isStateInvalid = true;\r\n            }\r\n        }\r\n        if (face & StencilFace.BACK) {\r\n            if (back.compareMask !== compareMask\r\n                || back.reference !== reference) {\r\n                back.reference = reference;\r\n                back.compareMask = compareMask;\r\n                this._isStateInvalid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw (infoOrAssembler: Readonly<DrawInfo> | Readonly<InputAssembler>): void {\r\n        errorID(16328);\r\n    }\r\n\r\n    public updateBuffer (buffer: Buffer, data: Readonly<BufferSource>, size?: number): void {\r\n        errorID(16329);\r\n    }\r\n\r\n    public copyBuffersToTexture (buffers: Readonly<ArrayBufferView[]>, texture: Texture, regions: Readonly<BufferTextureCopy[]>): void {\r\n        errorID(16330);\r\n    }\r\n\r\n    public execute (cmdBuffs: Readonly<CommandBuffer[]>, count: number): void {\r\n        errorID(16402);\r\n    }\r\n\r\n    public pipelineBarrier (\r\n        GeneralBarrier: Readonly<GeneralBarrier>,\r\n        bufferBarriers?: Readonly<BufferBarrier[]>,\r\n        buffers?: Readonly<Buffer[]>,\r\n        textureBarriers?: Readonly<TextureBarrier[]>,\r\n        textures?: Readonly<Texture[]>,\r\n    ): void {\r\n\r\n    }\r\n\r\n    protected bindStates (): void {\r\n        errorID(16401);\r\n        this._isStateInvalid = false;\r\n    }\r\n\r\n    public blitTexture (srcTexture: Readonly<Texture>, dstTexture: Texture, regions: Readonly<TextureBlit []>, filter: Filter): void {\r\n        errorID(16401);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { FramebufferInfo } from '../base/define';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { WebGL2CmdFuncCreateFramebuffer, WebGL2CmdFuncDestroyFramebuffer } from './webgl2-commands';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { IWebGL2GPUFramebuffer, IWebGL2GPUTextureView } from './webgl2-gpu-objects';\r\nimport { WebGL2RenderPass } from './webgl2-render-pass';\r\nimport { WebGL2Texture } from './webgl2-texture';\r\n\r\n/** @mangle */\r\nexport class WebGL2Framebuffer extends Framebuffer {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    getGpuFramebuffer (): IWebGL2GPUFramebuffer {\r\n        return  this._gpuFramebuffer!;\r\n    }\r\n\r\n    private _gpuFramebuffer: IWebGL2GPUFramebuffer | null = null;\r\n    private _gpuColorViews: (WebGLTexture | null)[] = [];\r\n    private _gpuDepthStencilView: WebGLTexture | null | undefined;\r\n\r\n    get needRebuild (): boolean {\r\n        const gpuFramebuffer = this.getGpuFramebuffer();\r\n        if (gpuFramebuffer) {\r\n            for (let i = 0; i < gpuFramebuffer.gpuColorViews.length; i++) {\r\n                if (gpuFramebuffer.gpuColorViews[i].gpuTexture.glTexture !== this._gpuColorViews[i]) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (gpuFramebuffer.gpuDepthStencilView?.gpuTexture.glTexture !== this._gpuDepthStencilView) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public initialize (info: Readonly<FramebufferInfo>): void {\r\n        this._renderPass = info.renderPass;\r\n        this._colorTextures = info.colorTextures || [];\r\n        this._depthStencilTexture = info.depthStencilTexture || null;\r\n\r\n        const gpuColorViews: IWebGL2GPUTextureView[] = [];\r\n        for (let i = 0; i < info.colorTextures.length; i++) {\r\n            const colorTexture = info.colorTextures[i] as WebGL2Texture;\r\n            if (colorTexture) {\r\n                gpuColorViews.push(colorTexture.gpuTextureView);\r\n            }\r\n        }\r\n\r\n        let gpuDepthStencilView: IWebGL2GPUTextureView | null = null;\r\n        if (info.depthStencilTexture) {\r\n            gpuDepthStencilView = (info.depthStencilTexture as WebGL2Texture).gpuTextureView;\r\n        }\r\n\r\n        let width = Number.MAX_SAFE_INTEGER;\r\n        let height = Number.MAX_SAFE_INTEGER;\r\n        this._gpuFramebuffer = {\r\n            gpuRenderPass: (info.renderPass as WebGL2RenderPass).getGpuRenderPass(),\r\n            gpuColorViews,\r\n            gpuDepthStencilView,\r\n            glFramebuffer: null,\r\n            isOffscreen: true,\r\n            get width (): number {\r\n                if (this.gpuColorViews.length > 0) {\r\n                    return this.gpuColorViews[0].gpuTexture.width;\r\n                } else if (this.gpuDepthStencilView) {\r\n                    return this.gpuDepthStencilView.gpuTexture.width;\r\n                }\r\n                return width;\r\n            },\r\n            set width (val) {\r\n                width = val;\r\n            },\r\n            get height (): number {\r\n                if (this.gpuColorViews.length > 0) {\r\n                    return this.gpuColorViews[0].gpuTexture.height;\r\n                } else if (this.gpuDepthStencilView) {\r\n                    return this.gpuDepthStencilView.gpuTexture.height;\r\n                }\r\n                return height;\r\n            },\r\n            set height (val) {\r\n                height = val;\r\n            },\r\n        };\r\n\r\n        WebGL2CmdFuncCreateFramebuffer(WebGL2DeviceManager.instance, this._gpuFramebuffer);\r\n        this._gpuFramebuffer.gpuColorViews.forEach((tex) => this._gpuColorViews.push(tex.gpuTexture.glTexture));\r\n        this._gpuDepthStencilView = this._gpuFramebuffer.gpuDepthStencilView?.gpuTexture.glTexture;\r\n        this._width = this._gpuFramebuffer.width;\r\n        this._height = this._gpuFramebuffer.height;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuFramebuffer) {\r\n            WebGL2CmdFuncDestroyFramebuffer(WebGL2DeviceManager.instance, this._gpuFramebuffer);\r\n            this._gpuFramebuffer = null;\r\n            this._gpuColorViews.length = 0;\r\n            this._gpuDepthStencilView = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { errorID } from '../../core/platform/debug';\r\nimport { InputAssemblerInfo } from '../base/define';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { WebGL2Buffer } from './webgl2-buffer';\r\nimport { WebGL2CmdFuncCreateInputAssember, WebGL2CmdFuncDestroyInputAssembler } from './webgl2-commands';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { IWebGL2GPUInputAssembler, IWebGL2GPUBuffer } from './webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2InputAssembler extends InputAssembler {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public get gpuInputAssembler (): IWebGL2GPUInputAssembler {\r\n        return  this._gpuInputAssembler!;\r\n    }\r\n\r\n    private _gpuInputAssembler: IWebGL2GPUInputAssembler | null = null;\r\n\r\n    public initialize (info: Readonly<InputAssemblerInfo>): void {\r\n        if (info.vertexBuffers.length === 0) {\r\n            errorID(16331);\r\n            return;\r\n        }\r\n\r\n        this._attributes = info.attributes;\r\n        this._attributesHash = this.computeAttributesHash();\r\n        this._vertexBuffers = info.vertexBuffers;\r\n\r\n        if (info.indexBuffer) {\r\n            this._indexBuffer = info.indexBuffer;\r\n            this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;\r\n            this._drawInfo.firstIndex = 0;\r\n        } else {\r\n            const vertBuff = this._vertexBuffers[0];\r\n            this._drawInfo.vertexCount = vertBuff.size / vertBuff.stride;\r\n            this._drawInfo.firstVertex = 0;\r\n            this._drawInfo.vertexOffset = 0;\r\n        }\r\n        this._drawInfo.instanceCount = 0;\r\n        this._drawInfo.firstInstance = 0;\r\n\r\n        this._indirectBuffer = info.indirectBuffer || null;\r\n\r\n        const gpuVertexBuffers: IWebGL2GPUBuffer[] = new Array<IWebGL2GPUBuffer>(info.vertexBuffers.length);\r\n        for (let i = 0; i < info.vertexBuffers.length; ++i) {\r\n            const vb = info.vertexBuffers[i] as WebGL2Buffer;\r\n            if (vb.getGpuBuffer()) {\r\n                gpuVertexBuffers[i] = vb.getGpuBuffer();\r\n            }\r\n        }\r\n\r\n        let gpuIndexBuffer: IWebGL2GPUBuffer | null = null;\r\n        let glIndexType = 0;\r\n        if (info.indexBuffer) {\r\n            gpuIndexBuffer = (info.indexBuffer as WebGL2Buffer).getGpuBuffer();\r\n            if (gpuIndexBuffer) {\r\n                switch (gpuIndexBuffer.stride) {\r\n                case 1: glIndexType = WebGLConstants.UNSIGNED_BYTE; break;\r\n                case 2: glIndexType = WebGLConstants.UNSIGNED_SHORT; break;\r\n                case 4: glIndexType = WebGLConstants.UNSIGNED_INT; break;\r\n                default: {\r\n                    errorID(16332);\r\n                }\r\n                }\r\n            }\r\n        }\r\n\r\n        let gpuIndirectBuffer: IWebGL2GPUBuffer | null = null;\r\n        if (info.indirectBuffer) {\r\n            gpuIndirectBuffer = (info.indirectBuffer as WebGL2Buffer).getGpuBuffer();\r\n        }\r\n\r\n        this._gpuInputAssembler = {\r\n            attributes: info.attributes,\r\n            gpuVertexBuffers,\r\n            gpuIndexBuffer,\r\n            gpuIndirectBuffer,\r\n\r\n            glAttribs: [],\r\n            glIndexType,\r\n            glVAOs: new Map<WebGLProgram, WebGLVertexArrayObject>(),\r\n        };\r\n\r\n        WebGL2CmdFuncCreateInputAssember(WebGL2DeviceManager.instance, this._gpuInputAssembler);\r\n    }\r\n\r\n    public destroy (): void {\r\n        const device = WebGL2DeviceManager.instance;\r\n        if (this._gpuInputAssembler && device.extensions.useVAO) {\r\n            WebGL2CmdFuncDestroyInputAssembler(device, this._gpuInputAssembler);\r\n        }\r\n        this._gpuInputAssembler = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSetLayoutInfo, DESCRIPTOR_DYNAMIC_TYPE } from '../base/define';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { IWebGL2GPUDescriptorSetLayout } from './webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2DescriptorSetLayout extends DescriptorSetLayout {\r\n    getGpuDescriptorSetLayout (): IWebGL2GPUDescriptorSetLayout { return this._gpuDescriptorSetLayout!; }\r\n\r\n    private _gpuDescriptorSetLayout: IWebGL2GPUDescriptorSetLayout | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<DescriptorSetLayoutInfo>): void {\r\n        Array.prototype.push.apply(this._bindings, info.bindings);\r\n\r\n        let descriptorCount = 0; let maxBinding = -1;\r\n        const flattenedIndices: number[] = [];\r\n        for (let i = 0; i < this._bindings.length; i++) {\r\n            const binding = this._bindings[i];\r\n            flattenedIndices.push(descriptorCount);\r\n            descriptorCount += binding.count;\r\n            if (binding.binding > maxBinding) maxBinding = binding.binding;\r\n        }\r\n\r\n        this._bindingIndices = Array(maxBinding + 1).fill(-1);\r\n        const descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);\r\n        for (let i = 0; i < this._bindings.length; i++) {\r\n            const binding = this._bindings[i];\r\n            this._bindingIndices[binding.binding] = i;\r\n            descriptorIndices[binding.binding] = flattenedIndices[i];\r\n        }\r\n\r\n        const dynamicBindings: number[] = [];\r\n        for (let i = 0; i < this._bindings.length; i++) {\r\n            const binding = this._bindings[i];\r\n            if (binding.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {\r\n                for (let j = 0; j < binding.count; j++) {\r\n                    dynamicBindings.push(binding.binding);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._gpuDescriptorSetLayout = {\r\n            bindings: this._bindings,\r\n            dynamicBindings,\r\n            descriptorIndices,\r\n            descriptorCount,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._bindings.length = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PipelineLayout } from '../base/pipeline-layout';\r\nimport { IWebGL2GPUPipelineLayout, IWebGL2GPUDescriptorSetLayout } from './webgl2-gpu-objects';\r\nimport { WebGL2DescriptorSetLayout } from './webgl2-descriptor-set-layout';\r\nimport { PipelineLayoutInfo } from '../base/define';\r\n\r\n/** @mangle */\r\nexport class WebGL2PipelineLayout extends PipelineLayout {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    getGpuPipelineLayout (): IWebGL2GPUPipelineLayout { return this._gpuPipelineLayout!; }\r\n\r\n    private _gpuPipelineLayout: IWebGL2GPUPipelineLayout | null = null;\r\n\r\n    public initialize (info: Readonly<PipelineLayoutInfo>): void {\r\n        Array.prototype.push.apply(this._setLayouts, info.setLayouts);\r\n\r\n        const dynamicOffsetIndices: number[][] = [];\r\n\r\n        const gpuSetLayouts: IWebGL2GPUDescriptorSetLayout[] = [];\r\n        let dynamicOffsetCount = 0;\r\n        const dynamicOffsetOffsets: number[] = [];\r\n        for (let i = 0; i < this._setLayouts.length; i++) {\r\n            const setLayout = this._setLayouts[i] as WebGL2DescriptorSetLayout;\r\n            const gpuDescriptorSetLayout = setLayout.getGpuDescriptorSetLayout();\r\n            const dynamicBindings = gpuDescriptorSetLayout.dynamicBindings;\r\n            const indices = Array<number>(setLayout.bindingIndices.length).fill(-1);\r\n            for (let j = 0; j < dynamicBindings.length; j++) {\r\n                const binding = dynamicBindings[j];\r\n                if (indices[binding] < 0) indices[binding] = dynamicOffsetCount + j;\r\n            }\r\n\r\n            gpuSetLayouts.push(gpuDescriptorSetLayout);\r\n            dynamicOffsetIndices.push(indices);\r\n            dynamicOffsetOffsets.push(dynamicOffsetCount);\r\n            dynamicOffsetCount += dynamicBindings.length;\r\n        }\r\n\r\n        this._gpuPipelineLayout = {\r\n            gpuSetLayouts,\r\n            dynamicOffsetIndices,\r\n            dynamicOffsetCount,\r\n            dynamicOffsetOffsets,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._setLayouts.length = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PipelineState, PipelineStateInfo } from '../base/pipeline-state';\r\nimport { IWebGL2GPUPipelineState } from './webgl2-gpu-objects';\r\nimport { WebGL2RenderPass } from './webgl2-render-pass';\r\nimport { WebGL2Shader } from './webgl2-shader';\r\nimport { DynamicStateFlagBit } from '../base/define';\r\nimport { WebGL2PipelineLayout } from './webgl2-pipeline-layout';\r\nimport { WebGLConstants } from '../gl-constants';\r\n\r\nconst WebGLPrimitives: GLenum[] = [\r\n    WebGLConstants.POINTS,\r\n    WebGLConstants.LINES,\r\n    WebGLConstants.LINE_STRIP,\r\n    WebGLConstants.LINE_LOOP,\r\n    WebGLConstants.NONE,\r\n    WebGLConstants.NONE,\r\n    WebGLConstants.NONE,\r\n    WebGLConstants.TRIANGLES,\r\n    WebGLConstants.TRIANGLE_STRIP,\r\n    WebGLConstants.TRIANGLE_FAN,\r\n    WebGLConstants.NONE,\r\n    WebGLConstants.NONE,\r\n    WebGLConstants.NONE,\r\n    WebGLConstants.NONE,\r\n];\r\n\r\n/** @mangle */\r\nexport class WebGL2PipelineState extends PipelineState {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get gpuPipelineState (): IWebGL2GPUPipelineState {\r\n        return  this._gpuPipelineState!;\r\n    }\r\n\r\n    private _gpuPipelineState: IWebGL2GPUPipelineState | null = null;\r\n\r\n    public initialize (info: Readonly<PipelineStateInfo>): void {\r\n        this._primitive = info.primitive;\r\n        this._shader = info.shader;\r\n        this._pipelineLayout = info.pipelineLayout;\r\n        const bs = this._bs;\r\n        if (info.blendState) {\r\n            const bsInfo = info.blendState;\r\n            const { targets } = bsInfo;\r\n            if (targets) {\r\n                targets.forEach((t, i): void => {\r\n                    bs.setTarget(i, t);\r\n                });\r\n            }\r\n\r\n            if (bsInfo.isA2C !== undefined) { bs.isA2C = bsInfo.isA2C; }\r\n            if (bsInfo.isIndepend !== undefined) { bs.isIndepend = bsInfo.isIndepend; }\r\n            if (bsInfo.blendColor !== undefined) { bs.blendColor = bsInfo.blendColor; }\r\n        }\r\n        Object.assign(this._rs, info.rasterizerState);\r\n        Object.assign(this._dss, info.depthStencilState);\r\n        this._is = info.inputState;\r\n        this._renderPass = info.renderPass;\r\n        this._dynamicStates = info.dynamicStates;\r\n\r\n        const dynamicStates: DynamicStateFlagBit[] = [];\r\n        for (let i = 0; i < 31; i++) {\r\n            if (this._dynamicStates & (1 << i)) {\r\n                dynamicStates.push(1 << i);\r\n            }\r\n        }\r\n\r\n        this._gpuPipelineState = {\r\n            glPrimitive: WebGLPrimitives[info.primitive],\r\n            gpuShader: (info.shader as WebGL2Shader).gpuShader,\r\n            gpuPipelineLayout: (info.pipelineLayout as WebGL2PipelineLayout).getGpuPipelineLayout(),\r\n            rs: info.rasterizerState,\r\n            dss: info.depthStencilState,\r\n            bs: info.blendState,\r\n            gpuRenderPass: (info.renderPass as WebGL2RenderPass).getGpuRenderPass(),\r\n            dynamicStates,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._gpuPipelineState = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { BufferUsageBit, BufferTextureCopy, Color, Rect, BufferSource, DrawInfo, Viewport, TextureBlit, Filter } from '../base/define';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGL2Buffer } from './webgl2-buffer';\r\nimport { WebGL2CommandBuffer } from './webgl2-command-buffer';\r\nimport {\r\n    WebGL2CmdFuncBeginRenderPass, WebGL2CmdFuncBindStates, WebGL2CmdFuncBlitTexture, WebGL2CmdFuncCopyBuffersToTexture,\r\n    WebGL2CmdFuncDraw, WebGL2CmdFuncUpdateBuffer } from './webgl2-commands';\r\nimport { WebGL2Framebuffer } from './webgl2-framebuffer';\r\nimport { WebGL2Texture } from './webgl2-texture';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { WebGL2RenderPass } from './webgl2-render-pass';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { errorID } from '../../core/platform/debug';\r\n\r\n/** @mangle */\r\nexport class WebGL2PrimaryCommandBuffer extends WebGL2CommandBuffer {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public beginRenderPass (\r\n        renderPass: RenderPass,\r\n        framebuffer: Framebuffer,\r\n        renderArea: Readonly<Rect>,\r\n        clearColors: Readonly<Color[]>,\r\n        clearDepth: number,\r\n        clearStencil: number,\r\n    ): void {\r\n        WebGL2CmdFuncBeginRenderPass(\r\n            WebGL2DeviceManager.instance,\r\n            (renderPass as WebGL2RenderPass).getGpuRenderPass(),\r\n            (framebuffer as WebGL2Framebuffer).getGpuFramebuffer(),\r\n            renderArea,\r\n            clearColors,\r\n            clearDepth,\r\n            clearStencil,\r\n        );\r\n        this._isInRenderPass = true;\r\n    }\r\n\r\n    public draw (infoOrAssembler: Readonly<DrawInfo> | Readonly<InputAssembler>): void {\r\n        if (this._isInRenderPass) {\r\n            if (this._isStateInvalid) {\r\n                this.bindStates();\r\n            }\r\n\r\n            const info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;\r\n\r\n            WebGL2CmdFuncDraw(WebGL2DeviceManager.instance, info as DrawInfo);\r\n\r\n            ++this._numDrawCalls;\r\n            this._numInstances += info.instanceCount;\r\n            const indexCount = info.indexCount || info.vertexCount;\r\n            if (this._curGPUPipelineState) {\r\n                const glPrimitive = this._curGPUPipelineState.glPrimitive;\r\n                switch (glPrimitive) {\r\n                case 0x0004: { // WebGLRenderingContext.TRIANGLES\r\n                    this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);\r\n                    break;\r\n                }\r\n                case 0x0005: // WebGLRenderingContext.TRIANGLE_STRIP\r\n                case 0x0006: { // WebGLRenderingContext.TRIANGLE_FAN\r\n                    this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);\r\n                    break;\r\n                }\r\n                default:\r\n                }\r\n            }\r\n        } else {\r\n            errorID(16328);\r\n        }\r\n    }\r\n\r\n    public setViewport (viewport: Readonly<Viewport>): void {\r\n        const { gl } = WebGL2DeviceManager.instance;\r\n        const cache = WebGL2DeviceManager.instance.getStateCache();\r\n\r\n        if (cache.viewport.left !== viewport.left\r\n            || cache.viewport.top !== viewport.top\r\n            || cache.viewport.width !== viewport.width\r\n            || cache.viewport.height !== viewport.height) {\r\n            gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);\r\n\r\n            cache.viewport.left = viewport.left;\r\n            cache.viewport.top = viewport.top;\r\n            cache.viewport.width = viewport.width;\r\n            cache.viewport.height = viewport.height;\r\n        }\r\n    }\r\n\r\n    public setScissor (scissor: Readonly<Rect>): void {\r\n        const { gl } = WebGL2DeviceManager.instance;\r\n        const cache = WebGL2DeviceManager.instance.getStateCache();\r\n\r\n        if (cache.scissorRect.x !== scissor.x\r\n            || cache.scissorRect.y !== scissor.y\r\n            || cache.scissorRect.width !== scissor.width\r\n            || cache.scissorRect.height !== scissor.height) {\r\n            gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);\r\n\r\n            cache.scissorRect.x = scissor.x;\r\n            cache.scissorRect.y = scissor.y;\r\n            cache.scissorRect.width = scissor.width;\r\n            cache.scissorRect.height = scissor.height;\r\n        }\r\n    }\r\n\r\n    public updateBuffer (buffer: Buffer, data: Readonly<BufferSource>, size?: number): void {\r\n        if (!this._isInRenderPass) {\r\n            const gpuBuffer = (buffer as WebGL2Buffer).getGpuBuffer();\r\n            if (gpuBuffer) {\r\n                let buffSize: number;\r\n                if (size !== undefined) {\r\n                    buffSize = size;\r\n                } else if (buffer.usage & BufferUsageBit.INDIRECT) {\r\n                    buffSize = 0;\r\n                } else {\r\n                    buffSize = (data as ArrayBuffer).byteLength;\r\n                }\r\n\r\n                WebGL2CmdFuncUpdateBuffer(WebGL2DeviceManager.instance, gpuBuffer, data as ArrayBuffer, 0, buffSize);\r\n            }\r\n        } else {\r\n            errorID(16329);\r\n        }\r\n    }\r\n\r\n    public copyBuffersToTexture (buffers: Readonly<ArrayBufferView[]>, texture: Texture, regions: Readonly<BufferTextureCopy[]>): void {\r\n        if (!this._isInRenderPass) {\r\n            const gpuTexture = (texture as WebGL2Texture).gpuTexture;\r\n            if (gpuTexture) {\r\n                WebGL2CmdFuncCopyBuffersToTexture(WebGL2DeviceManager.instance, buffers, gpuTexture, regions);\r\n            }\r\n        } else {\r\n            errorID(16330);\r\n        }\r\n    }\r\n\r\n    public execute (cmdBuffs: Readonly<CommandBuffer[]>, count: number): void {\r\n        errorID(16402);\r\n    }\r\n\r\n    protected bindStates (): void {\r\n        WebGL2CmdFuncBindStates(\r\n            WebGL2DeviceManager.instance,\r\n            this._curGPUPipelineState,\r\n            this._curGPUInputAssembler,\r\n            this._curGPUDescriptorSets,\r\n            this._curDynamicOffsets,\r\n            this._curDynamicStates,\r\n        );\r\n        this._isStateInvalid = false;\r\n    }\r\n\r\n    public blitTexture (srcTexture: Readonly<Texture>, dstTexture: Texture, regions: Readonly<TextureBlit []>, filter: Filter): void {\r\n        const gpuTextureSrc = (srcTexture as WebGL2Texture).gpuTexture;\r\n        const gpuTextureDst = (dstTexture as WebGL2Texture).gpuTexture;\r\n        WebGL2CmdFuncBlitTexture(WebGL2DeviceManager.instance, gpuTextureSrc, gpuTextureDst, regions, filter);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { QueueInfo } from '../base/define';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Queue } from '../base/queue';\r\nimport { WebGL2CommandBuffer } from './webgl2-command-buffer';\r\n\r\n/** @mangle */\r\nexport class WebGL2Queue extends Queue {\r\n    public numDrawCalls = 0;\r\n    public numInstances = 0;\r\n    public numTris = 0;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: Readonly<QueueInfo>): void {\r\n        this._type = info.type;\r\n    }\r\n\r\n    public destroy (): void {\r\n    }\r\n\r\n    public submit (cmdBuffs: Readonly<CommandBuffer[]>): void {\r\n        for (let i = 0; i < cmdBuffs.length; i++) {\r\n            const cmdBuff = cmdBuffs[i] as WebGL2CommandBuffer;\r\n            // WebGL2CmdFuncExecuteCmds(this._device as WebGL2Device, cmdBuff.cmdPackage); // opted out\r\n            this.numDrawCalls += cmdBuff.numDrawCalls;\r\n            this.numInstances += cmdBuff.numInstances;\r\n            this.numTris += cmdBuff.numTris;\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        this.numDrawCalls = 0;\r\n        this.numInstances = 0;\r\n        this.numTris = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { RenderPassInfo } from '../base/define';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { IWebGL2GPURenderPass } from './webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2RenderPass extends RenderPass {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public getGpuRenderPass (): IWebGL2GPURenderPass {\r\n        return  this._gpuRenderPass!;\r\n    }\r\n\r\n    private _gpuRenderPass: IWebGL2GPURenderPass | null = null;\r\n\r\n    public initialize (info: Readonly<RenderPassInfo>): void {\r\n        this._colorInfos = info.colorAttachments;\r\n        this._depthStencilInfo = info.depthStencilAttachment;\r\n        this._subpasses = info.subpasses;\r\n\r\n        this._gpuRenderPass = {\r\n            colorAttachments: this._colorInfos,\r\n            depthStencilAttachment: this._depthStencilInfo,\r\n        };\r\n\r\n        this._hash = this.computeHash();\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._gpuRenderPass = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { SamplerInfo } from '../../base/define';\r\nimport { Sampler } from '../../base/states/sampler';\r\nimport { WebGLConstants } from '../../gl-constants';\r\nimport { WebGL2CmdFuncDestroySampler, WebGL2CmdFuncPrepareSamplerInfo } from '../webgl2-commands';\r\nimport { WebGL2DeviceManager } from '../webgl2-define';\r\nimport { WebGL2Device } from '../webgl2-device';\r\nimport { IWebGL2GPUSampler } from '../webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2Sampler extends Sampler {\r\n    public get gpuSampler (): IWebGL2GPUSampler {\r\n        return  this._gpuSampler!;\r\n    }\r\n\r\n    private _gpuSampler: IWebGL2GPUSampler | null = null;\r\n\r\n    constructor (info: Readonly<SamplerInfo>, hash: number) {\r\n        super(info, hash);\r\n\r\n        this._gpuSampler = {\r\n            glSamplers: new Map<number, WebGL2Sampler>(),\r\n            minFilter: this._info.minFilter,\r\n            magFilter: this._info.magFilter,\r\n            mipFilter: this._info.mipFilter,\r\n            addressU: this._info.addressU,\r\n            addressV: this._info.addressV,\r\n            addressW: this._info.addressW,\r\n\r\n            glMinFilter: 0,\r\n            glMagFilter: 0,\r\n            glWrapS: 0,\r\n            glWrapT: 0,\r\n            glWrapR: 0,\r\n\r\n            getGLSampler (device: WebGL2Device, minLod: number, maxLod: number): WebGLSampler {\r\n                const { gl } = device;\r\n                const samplerHash = minLod << 16 | maxLod;\r\n                if (!this.glSamplers.has(samplerHash)) {\r\n                    const glSampler = gl.createSampler();\r\n                    if (glSampler) {\r\n                        this.glSamplers.set(samplerHash, glSampler);\r\n                        const glSamplerParameteri = gl.samplerParameteri.bind(gl);\r\n                        const glSamplerParameterf = gl.samplerParameterf.bind(gl);\r\n                        glSamplerParameteri(glSampler, WebGLConstants.TEXTURE_MIN_FILTER, this.glMinFilter);\r\n                        glSamplerParameteri(glSampler, WebGLConstants.TEXTURE_MAG_FILTER, this.glMagFilter);\r\n                        glSamplerParameteri(glSampler, WebGLConstants.TEXTURE_WRAP_S, this.glWrapS);\r\n                        glSamplerParameteri(glSampler, WebGLConstants.TEXTURE_WRAP_T, this.glWrapT);\r\n                        glSamplerParameteri(glSampler, WebGLConstants.TEXTURE_WRAP_R, this.glWrapR);\r\n                        glSamplerParameterf(glSampler, WebGLConstants.TEXTURE_MIN_LOD, minLod);\r\n                        glSamplerParameterf(glSampler, WebGLConstants.TEXTURE_MAX_LOD, maxLod);\r\n                    }\r\n                }\r\n                const sampler = this.glSamplers.get(samplerHash)!;\r\n                return sampler;\r\n            },\r\n        };\r\n\r\n        WebGL2CmdFuncPrepareSamplerInfo(WebGL2DeviceManager.instance, this._gpuSampler);\r\n    }\r\n\r\n    destroy (): void {\r\n        if (this._gpuSampler) {\r\n            WebGL2CmdFuncDestroySampler(WebGL2DeviceManager.instance, this._gpuSampler);\r\n            this._gpuSampler = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ShaderInfo } from '../base/define';\r\nimport { Shader } from '../base/shader';\r\nimport { WebGL2CmdFuncCreateShader, WebGL2CmdFuncDestroyShader } from './webgl2-commands';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { IWebGL2GPUShader, IWebGL2GPUShaderStage } from './webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2Shader extends Shader {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get gpuShader (): IWebGL2GPUShader {\r\n        if (this._gpuShader!.glProgram === null) {\r\n            WebGL2CmdFuncCreateShader(WebGL2DeviceManager.instance, this._gpuShader!);\r\n        }\r\n        return  this._gpuShader!;\r\n    }\r\n\r\n    private _gpuShader: IWebGL2GPUShader | null = null;\r\n\r\n    public initialize (info: Readonly<ShaderInfo>): void {\r\n        this._name = info.name;\r\n        this._stages = info.stages;\r\n        this._attributes = info.attributes;\r\n        this._blocks = info.blocks;\r\n        this._samplers = info.samplers;\r\n\r\n        this._gpuShader = {\r\n            name: info.name,\r\n            blocks: info.blocks.slice(),\r\n            samplerTextures: info.samplerTextures.slice(),\r\n            subpassInputs: info.subpassInputs.slice(),\r\n\r\n            gpuStages: new Array<IWebGL2GPUShaderStage>(info.stages.length),\r\n            glProgram: null,\r\n            glInputs: [],\r\n            glUniforms: [],\r\n            glBlocks: [],\r\n            glSamplerTextures: [],\r\n        };\r\n\r\n        for (let i = 0; i < info.stages.length; ++i) {\r\n            const stage = info.stages[i];\r\n            this._gpuShader.gpuStages[i] = {\r\n                type: stage.stage,\r\n                source: stage.source,\r\n                glShader: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuShader) {\r\n            WebGL2CmdFuncDestroyShader(WebGL2DeviceManager.instance, this._gpuShader);\r\n            this._gpuShader = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Rect, Viewport } from '../base/define';\r\nimport { BlendState, DepthStencilState, RasterizerState } from '../base/pipeline-state';\r\n\r\n/** @mangle */\r\nexport interface IWebGL2TexUnit {\r\n    glTexture: WebGLTexture | null;\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGL2StateCache {\r\n    public glArrayBuffer: WebGLBuffer | null = null;\r\n    public glElementArrayBuffer: WebGLBuffer | null = null;\r\n    public glUniformBuffer: WebGLBuffer | null = null;\r\n    public glBindUBOs: (WebGLBuffer | null)[] = [];\r\n    public glBindUBOOffsets: number[] = [];\r\n    public glVAO: WebGLVertexArrayObject | null = null;\r\n    public texUnit = 0;\r\n    public glTexUnits: IWebGL2TexUnit[] = [];\r\n    public glSamplerUnits: (WebGLSampler | null)[] = [];\r\n    public glRenderbuffer: WebGLRenderbuffer | null = null;\r\n    public glFramebuffer: WebGLFramebuffer | null = null;\r\n    public glReadFramebuffer: WebGLFramebuffer | null = null;\r\n    public viewport = new Viewport();\r\n    public scissorRect = new Rect(0, 0, 0, 0);\r\n    public rs = new RasterizerState();\r\n    public dss = new DepthStencilState();\r\n    public bs = new BlendState();\r\n    public glProgram: WebGLProgram | null = null;\r\n    public glEnabledAttribLocs: boolean[] = [];\r\n    public glCurrentAttribLocs: boolean[] = [];\r\n    public texUnitCacheMap: Record<string, number> = {};\r\n\r\n    constructor () {\r\n    }\r\n\r\n    initialize (texUnit: number, bufferBindings: number, vertexAttributes: number): void {\r\n        for (let i = 0; i < texUnit; ++i) {\r\n            const glTexUnit: IWebGL2TexUnit = { glTexture: null };\r\n            this.glTexUnits.push(glTexUnit);\r\n        }\r\n\r\n        this.glSamplerUnits.length = texUnit;\r\n        this.glSamplerUnits.fill(null);\r\n\r\n        this.glBindUBOs.length = bufferBindings;\r\n        this.glBindUBOs.fill(null);\r\n\r\n        this.glBindUBOOffsets.length = bufferBindings;\r\n        this.glBindUBOOffsets.fill(0);\r\n\r\n        this.glEnabledAttribLocs.length = vertexAttributes;\r\n        this.glEnabledAttribLocs.fill(false);\r\n\r\n        this.glCurrentAttribLocs.length = vertexAttributes;\r\n        this.glCurrentAttribLocs.fill(false);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { logID } from '../../core/platform/debug';\r\nimport {\r\n    FormatSurfaceSize, TextureInfo, IsPowerOf2, TextureViewInfo, ISwapchainTextureInfo,\r\n    FormatInfos, TextureUsageBit,\r\n} from '../base/define';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGL2CmdFuncCreateTexture, WebGL2CmdFuncDestroyTexture, WebGL2CmdFuncResizeTexture } from './webgl2-commands';\r\nimport { WebGL2DeviceManager } from './webgl2-define';\r\nimport { IWebGL2GPUTexture, IWebGL2GPUTextureView } from './webgl2-gpu-objects';\r\n\r\n/** @mangle */\r\nexport class WebGL2Texture extends Texture {\r\n    private _gpuTexture: IWebGL2GPUTexture | null = null;\r\n    private _gpuTextureView: IWebGL2GPUTextureView | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get gpuTexture (): IWebGL2GPUTexture {\r\n        return this._gpuTexture!;\r\n    }\r\n\r\n    get gpuTextureView (): IWebGL2GPUTextureView {\r\n        return this._gpuTextureView!;\r\n    }\r\n\r\n    public initialize (info: Readonly<TextureInfo> | Readonly<TextureViewInfo>, isSwapchainTexture?: boolean): void {\r\n        const self = this;\r\n        const { instance } = WebGL2DeviceManager;\r\n        const thisTextureInfo = self._info;\r\n        const thisViewInfo = self._viewInfo;\r\n        let texInfo = info as Readonly<TextureInfo>;\r\n        const viewInfo = info as Readonly<TextureViewInfo>;\r\n\r\n        if ('texture' in info) {\r\n            texInfo = viewInfo.texture.info;\r\n            self._isTextureView = true;\r\n        }\r\n\r\n        thisTextureInfo.copy(texInfo);\r\n\r\n        self._isPowerOf2 = IsPowerOf2(thisTextureInfo.width) && IsPowerOf2(thisTextureInfo.height);\r\n        self._size = FormatSurfaceSize(\r\n            thisTextureInfo.format,\r\n            self.width,\r\n            self.height,\r\n            self.depth,\r\n            thisTextureInfo.levelCount,\r\n        ) * thisTextureInfo.layerCount;\r\n\r\n        if (!self._isTextureView) {\r\n            self._gpuTexture = {\r\n                type: texInfo.type,\r\n                format: texInfo.format,\r\n                usage: texInfo.usage,\r\n                width: texInfo.width,\r\n                height: texInfo.height,\r\n                depth: texInfo.depth,\r\n                size: self._size,\r\n                arrayLayer: texInfo.layerCount,\r\n                mipLevel: texInfo.levelCount,\r\n                samples: texInfo.samples,\r\n                flags: texInfo.flags,\r\n                isPowerOf2: self._isPowerOf2,\r\n\r\n                glTarget: 0,\r\n                glInternalFmt: 0,\r\n                glFormat: 0,\r\n                glType: 0,\r\n                glUsage: 0,\r\n                glTexture: null,\r\n                glRenderbuffer: null,\r\n                glWrapS: 0,\r\n                glWrapT: 0,\r\n                glMinFilter: 0,\r\n                glMagFilter: 0,\r\n\r\n                isSwapchainTexture: isSwapchainTexture || false,\r\n            };\r\n\r\n            if (!self._gpuTexture.isSwapchainTexture) {\r\n                WebGL2CmdFuncCreateTexture(instance, self._gpuTexture);\r\n                instance.memoryStatus.textureSize += self._size;\r\n            }\r\n\r\n            thisViewInfo.texture = self;\r\n            thisViewInfo.type = info.type;\r\n            thisViewInfo.format = info.format;\r\n            thisViewInfo.baseLevel = 0;\r\n            thisViewInfo.levelCount = info.levelCount;\r\n            thisViewInfo.baseLayer = 0;\r\n            thisViewInfo.layerCount = info.layerCount;\r\n\r\n            self._gpuTextureView = {\r\n                gpuTexture: self._gpuTexture,\r\n                type: thisViewInfo.type,\r\n                format: thisViewInfo.format,\r\n                baseLevel: thisViewInfo.baseLevel,\r\n                levelCount: thisViewInfo.levelCount,\r\n            };\r\n        } else {\r\n            thisViewInfo.copy(viewInfo);\r\n            self._gpuTexture = (viewInfo.texture as WebGL2Texture)._gpuTexture;\r\n\r\n            if (self._gpuTexture?.format !== texInfo.format) {\r\n                logID(16403);\r\n                return;\r\n            }\r\n\r\n            self._gpuTextureView = {\r\n                gpuTexture: self._gpuTexture,\r\n                type: viewInfo.type,\r\n                format: viewInfo.format,\r\n                baseLevel: viewInfo.baseLevel,\r\n                levelCount: viewInfo.levelCount,\r\n            };\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        const self = this;\r\n        const { instance } = WebGL2DeviceManager;\r\n        if (!self._isTextureView && self._gpuTexture) {\r\n            WebGL2CmdFuncDestroyTexture(instance, self._gpuTexture);\r\n            instance.memoryStatus.textureSize -= self._size;\r\n            self._gpuTexture = null;\r\n        }\r\n    }\r\n\r\n    public getTextureHandle (): number {\r\n        const gpuTexture = this._gpuTexture;\r\n        if (!gpuTexture) {\r\n            return 0;\r\n        }\r\n\r\n        if (gpuTexture.glTexture) {\r\n            return gpuTexture.glTexture as number;\r\n        } else if (gpuTexture.glRenderbuffer) {\r\n            return gpuTexture.glRenderbuffer as number;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public resize (width: number, height: number): void {\r\n        const self = this;\r\n        const { instance } = WebGL2DeviceManager;\r\n        const thisTextureInfo = self._info;\r\n        if (thisTextureInfo.width === width && thisTextureInfo.height === height) {\r\n            return;\r\n        }\r\n\r\n        if (thisTextureInfo.levelCount === WebGL2Texture.getLevelCount(thisTextureInfo.width, thisTextureInfo.height)) {\r\n            thisTextureInfo.levelCount = WebGL2Texture.getLevelCount(width, height);\r\n        } else if (thisTextureInfo.levelCount > 1) {\r\n            thisTextureInfo.levelCount = Math.min(thisTextureInfo.levelCount, WebGL2Texture.getLevelCount(width, height));\r\n        }\r\n\r\n        const oldSize = self._size;\r\n        thisTextureInfo.width = width;\r\n        thisTextureInfo.height = height;\r\n        self._size = FormatSurfaceSize(\r\n            thisTextureInfo.format,\r\n            self.width,\r\n            self.height,\r\n            self.depth,\r\n            thisTextureInfo.levelCount,\r\n        ) * thisTextureInfo.layerCount;\r\n        const thisGpuTexture = self._gpuTexture;\r\n\r\n        if (!self._isTextureView && thisGpuTexture) {\r\n            thisGpuTexture.width = width;\r\n            thisGpuTexture.height = height;\r\n            thisGpuTexture.size = self._size;\r\n            if (!thisGpuTexture.isSwapchainTexture) {\r\n                WebGL2CmdFuncResizeTexture(instance, thisGpuTexture);\r\n                instance.memoryStatus.textureSize -= oldSize;\r\n                instance.memoryStatus.textureSize += self._size;\r\n            }\r\n        }\r\n    }\r\n\r\n    // ======================= Swapchain Specific ======================= //\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public initAsSwapchainTexture (info: Readonly<ISwapchainTextureInfo>): void {\r\n        const texInfo = new TextureInfo();\r\n        texInfo.format = info.format;\r\n        texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;\r\n        texInfo.width = info.width;\r\n        texInfo.height = info.height;\r\n        this.initialize(texInfo, true);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR, USE_XR } from 'internal:constants';\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { warnID, warn, debug } from '../../core/platform/debug';\r\nimport { WebGL2StateCache } from './webgl2-state-cache';\r\nimport { WebGL2Texture } from './webgl2-texture';\r\nimport { Format, TextureInfo, TextureFlagBit, TextureType,\r\n    TextureUsageBit, BufferTextureCopy, SwapchainInfo, SurfaceTransform } from '../base/define';\r\nimport { Swapchain } from '../base/swapchain';\r\nimport { IWebGL2Extensions, WebGL2DeviceManager } from './webgl2-define';\r\nimport { OS } from '../../../pal/system-info/enum-type';\r\nimport { IWebGL2BlitManager } from './webgl2-gpu-objects';\r\nimport { WebGLConstants } from '../gl-constants';\r\nimport { macro } from '../../core/platform/macro';\r\n\r\nconst eventWebGLContextLost = 'webglcontextlost';\r\n\r\nfunction initStates (gl: WebGL2RenderingContext): void {\r\n    gl.activeTexture(WebGLConstants.TEXTURE0);\r\n    gl.pixelStorei(WebGLConstants.PACK_ALIGNMENT, 1);\r\n    gl.pixelStorei(WebGLConstants.UNPACK_ALIGNMENT, 1);\r\n    gl.pixelStorei(WebGLConstants.UNPACK_FLIP_Y_WEBGL, false);\r\n\r\n    gl.bindFramebuffer(WebGLConstants.FRAMEBUFFER, null);\r\n\r\n    // rasterizer state\r\n    gl.enable(WebGLConstants.SCISSOR_TEST);\r\n    gl.enable(WebGLConstants.CULL_FACE);\r\n    gl.cullFace(WebGLConstants.BACK);\r\n    gl.frontFace(WebGLConstants.CCW);\r\n    gl.polygonOffset(0.0, 0.0);\r\n\r\n    // depth stencil state\r\n    gl.enable(WebGLConstants.DEPTH_TEST);\r\n    gl.depthMask(true);\r\n    gl.depthFunc(WebGLConstants.LESS);\r\n\r\n    gl.stencilFuncSeparate(WebGLConstants.FRONT, WebGLConstants.ALWAYS, 1, 0xffff);\r\n    gl.stencilOpSeparate(WebGLConstants.FRONT, WebGLConstants.KEEP, WebGLConstants.KEEP, WebGLConstants.KEEP);\r\n    gl.stencilMaskSeparate(WebGLConstants.FRONT, 0xffff);\r\n    gl.stencilFuncSeparate(WebGLConstants.BACK, WebGLConstants.ALWAYS, 1, 0xffff);\r\n    gl.stencilOpSeparate(WebGLConstants.BACK, WebGLConstants.KEEP, WebGLConstants.KEEP, WebGLConstants.KEEP);\r\n    gl.stencilMaskSeparate(WebGLConstants.BACK, 0xffff);\r\n\r\n    gl.disable(WebGLConstants.STENCIL_TEST);\r\n\r\n    // blend state\r\n    gl.disable(WebGLConstants.SAMPLE_ALPHA_TO_COVERAGE);\r\n    gl.disable(WebGLConstants.BLEND);\r\n    gl.blendEquationSeparate(WebGLConstants.FUNC_ADD, WebGLConstants.FUNC_ADD);\r\n    gl.blendFuncSeparate(WebGLConstants.ONE, WebGLConstants.ZERO, WebGLConstants.ONE, WebGLConstants.ZERO);\r\n    gl.colorMask(true, true, true, true);\r\n    gl.blendColor(0.0, 0.0, 0.0, 0.0);\r\n}\r\n\r\nfunction getExtension (gl: WebGL2RenderingContext, ext: string): any {\r\n    const prefixes = ['', 'WEBKIT_', 'MOZ_'];\r\n    for (let i = 0; i < prefixes.length; ++i) {\r\n        const _ext = gl.getExtension(prefixes[i] + ext);\r\n        if (_ext) {\r\n            return _ext;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getExtensions (gl: WebGL2RenderingContext): IWebGL2Extensions {\r\n    const res: IWebGL2Extensions = {\r\n        EXT_texture_filter_anisotropic: getExtension(gl, 'EXT_texture_filter_anisotropic'),\r\n        EXT_color_buffer_half_float: getExtension(gl, 'EXT_color_buffer_half_float'),\r\n        EXT_color_buffer_float: getExtension(gl, 'EXT_color_buffer_float'),\r\n        WEBGL_compressed_texture_etc1: getExtension(gl, 'WEBGL_compressed_texture_etc1'),\r\n        WEBGL_compressed_texture_etc: getExtension(gl, 'WEBGL_compressed_texture_etc'),\r\n        WEBGL_compressed_texture_pvrtc: getExtension(gl, 'WEBGL_compressed_texture_pvrtc'),\r\n        WEBGL_compressed_texture_astc: getExtension(gl, 'WEBGL_compressed_texture_astc'),\r\n        WEBGL_compressed_texture_s3tc: getExtension(gl, 'WEBGL_compressed_texture_s3tc'),\r\n        WEBGL_compressed_texture_s3tc_srgb: getExtension(gl, 'WEBGL_compressed_texture_s3tc_srgb'),\r\n        WEBGL_debug_shaders: getExtension(gl, 'WEBGL_debug_shaders'),\r\n        WEBGL_lose_context: getExtension(gl, 'WEBGL_lose_context'),\r\n        WEBGL_debug_renderer_info: getExtension(gl, 'WEBGL_debug_renderer_info'),\r\n        OES_texture_half_float_linear: getExtension(gl, 'OES_texture_half_float_linear'),\r\n        OES_texture_float_linear: getExtension(gl, 'OES_texture_float_linear'),\r\n        WEBGL_multi_draw: null,\r\n        useVAO: true,\r\n    };\r\n\r\n    // platform-specific extension hacks\r\n    // eslint-disable-next-line no-lone-blocks\r\n    {\r\n        // Mobile implementation seems to have performance issues\r\n        if (systemInfo.os !== OS.ANDROID && systemInfo.os !== OS.IOS) {\r\n            res.WEBGL_multi_draw = getExtension(gl, 'WEBGL_multi_draw');\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nexport function getContext (canvas: HTMLCanvasElement): WebGL2RenderingContext | null {\r\n    let context: WebGL2RenderingContext | null = null;\r\n    try {\r\n        if (USE_XR && globalThis.__globalXR?.webxrCompatible) {\r\n            const glAttribs = {\r\n                alpha: macro.ENABLE_TRANSPARENT_CANVAS,\r\n                antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,\r\n                depth: true,\r\n                stencil: true,\r\n                premultipliedAlpha: false,\r\n                preserveDrawingBuffer: false,\r\n                powerPreference: 'default',\r\n                failIfMajorPerformanceCaveat: false,\r\n                xrCompatible: true,\r\n            };\r\n            context = canvas.getContext('webgl2', glAttribs) as WebGL2RenderingContext;\r\n            return context;\r\n        }\r\n\r\n        const webGLCtxAttribs: WebGLContextAttributes = {\r\n            alpha: macro.ENABLE_TRANSPARENT_CANVAS,\r\n            antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,\r\n            depth: true,\r\n            stencil: true,\r\n            premultipliedAlpha: false,\r\n            preserveDrawingBuffer: false,\r\n            powerPreference: 'default',\r\n            failIfMajorPerformanceCaveat: false,\r\n        };\r\n\r\n        context = canvas.getContext('webgl2', webGLCtxAttribs);\r\n    } catch (err) {\r\n        return null;\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGL2Swapchain extends Swapchain {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get extensions (): IWebGL2Extensions {\r\n        return this._extensions as IWebGL2Extensions;\r\n    }\r\n\r\n    get blitManager (): IWebGL2BlitManager | null {\r\n        return this._blitManager;\r\n    }\r\n\r\n    public stateCache: WebGL2StateCache = new WebGL2StateCache();\r\n    public nullTex2D: WebGL2Texture = null!;\r\n    public nullTexCube: WebGL2Texture = null!;\r\n\r\n    private _canvas: HTMLCanvasElement | null = null;\r\n    private _webGL2ContextLostHandler: ((event: Event) => void) | null = null;\r\n    private _extensions: IWebGL2Extensions | null = null;\r\n    private _blitManager: IWebGL2BlitManager | null = null;\r\n\r\n    public initialize (info: Readonly<SwapchainInfo>): void {\r\n        const self = this;\r\n        self._canvas = info.windowHandle;\r\n\r\n        self._webGL2ContextLostHandler = self._onWebGLContextLost.bind(self);\r\n        self._canvas.addEventListener(eventWebGLContextLost, self._onWebGLContextLost);\r\n\r\n        const { instance } = WebGL2DeviceManager;\r\n        const { gl, capabilities } = instance;\r\n\r\n        self.stateCache.initialize(\r\n            capabilities.maxTextureUnits,\r\n            capabilities.maxUniformBufferBindings,\r\n            capabilities.maxVertexAttributes,\r\n        );\r\n\r\n        self._extensions = getExtensions(gl);\r\n\r\n        // init states\r\n        initStates(gl);\r\n\r\n        const colorFmt = Format.RGBA8;\r\n        let depthStencilFmt = Format.DEPTH_STENCIL;\r\n\r\n        const depthBits = gl.getParameter(WebGLConstants.DEPTH_BITS);\r\n        const stencilBits = gl.getParameter(WebGLConstants.STENCIL_BITS);\r\n\r\n        if (depthBits && stencilBits) depthStencilFmt = Format.DEPTH_STENCIL;\r\n        else if (depthBits) depthStencilFmt = Format.DEPTH;\r\n\r\n        self._colorTexture = new WebGL2Texture();\r\n        self._colorTexture.initAsSwapchainTexture({\r\n            swapchain: self,\r\n            format: colorFmt,\r\n            width: info.width,\r\n            height: info.height,\r\n        });\r\n\r\n        self._depthStencilTexture = new WebGL2Texture();\r\n        self._depthStencilTexture.initAsSwapchainTexture({\r\n            swapchain: self,\r\n            format: depthStencilFmt,\r\n            width: info.width,\r\n            height: info.height,\r\n        });\r\n\r\n        // create default null texture\r\n        self.nullTex2D = instance.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.SAMPLED,\r\n            Format.RGBA8,\r\n            2,\r\n            2,\r\n            TextureFlagBit.NONE,\r\n        )) as WebGL2Texture;\r\n\r\n        self.nullTexCube = instance.createTexture(new TextureInfo(\r\n            TextureType.CUBE,\r\n            TextureUsageBit.SAMPLED,\r\n            Format.RGBA8,\r\n            2,\r\n            2,\r\n            TextureFlagBit.NONE,\r\n            6,\r\n        )) as WebGL2Texture;\r\n\r\n        const nullTexRegion = new BufferTextureCopy();\r\n        nullTexRegion.texExtent.width = 2;\r\n        nullTexRegion.texExtent.height = 2;\r\n\r\n        const nullTexBuff = new Uint8Array(self.nullTex2D.size);\r\n        nullTexBuff.fill(0);\r\n        instance.copyBuffersToTexture([nullTexBuff], self.nullTex2D, [nullTexRegion]);\r\n\r\n        nullTexRegion.texSubres.layerCount = 6;\r\n        instance.copyBuffersToTexture(\r\n            [nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff],\r\n            self.nullTexCube,\r\n            [nullTexRegion],\r\n        );\r\n\r\n        self._blitManager = new IWebGL2BlitManager();\r\n    }\r\n\r\n    public destroy (): void {\r\n        const self = this;\r\n        if (self._canvas && self._webGL2ContextLostHandler) {\r\n            self._canvas.removeEventListener(eventWebGLContextLost, self._webGL2ContextLostHandler);\r\n            self._webGL2ContextLostHandler = null;\r\n        }\r\n\r\n        if (self.nullTex2D) {\r\n            self.nullTex2D.destroy();\r\n            self.nullTex2D = null!;\r\n        }\r\n\r\n        if (self.nullTexCube) {\r\n            self.nullTexCube.destroy();\r\n            self.nullTexCube = null!;\r\n        }\r\n\r\n        if (self._blitManager) {\r\n            self._blitManager.destroy();\r\n            self._blitManager = null;\r\n        }\r\n\r\n        self._extensions = null;\r\n        self._canvas = null;\r\n    }\r\n\r\n    public resize (width: number, height: number, surfaceTransform: SurfaceTransform): void {\r\n        const self = this;\r\n        if (self._colorTexture.width !== width || self._colorTexture.height !== height) {\r\n            debug(`Resizing swapchain: ${width}x${height}`);\r\n            self._canvas!.width = width;\r\n            self._canvas!.height = height;\r\n            self._colorTexture.resize(width, height);\r\n            self._depthStencilTexture.resize(width, height);\r\n        }\r\n    }\r\n\r\n    private _onWebGLContextLost (event: Event): void {\r\n        warnID(11000);\r\n        warn(event);\r\n        // 2020.9.3: `preventDefault` is not available on some platforms\r\n        // event.preventDefault();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { PipelineLayout } from '../base/pipeline-layout';\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Device } from '../base/device';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { PipelineState, PipelineStateInfo } from '../base/pipeline-state';\r\nimport { Queue } from '../base/queue';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { Sampler } from '../base/states/sampler';\r\nimport { Shader } from '../base/shader';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGL2DescriptorSet } from './webgl2-descriptor-set';\r\nimport { WebGL2Buffer } from './webgl2-buffer';\r\nimport { WebGL2CommandBuffer } from './webgl2-command-buffer';\r\nimport { WebGL2Framebuffer } from './webgl2-framebuffer';\r\nimport { WebGL2InputAssembler } from './webgl2-input-assembler';\r\nimport { WebGL2DescriptorSetLayout } from './webgl2-descriptor-set-layout';\r\nimport { WebGL2PipelineLayout } from './webgl2-pipeline-layout';\r\nimport { WebGL2PipelineState } from './webgl2-pipeline-state';\r\nimport { WebGL2PrimaryCommandBuffer } from './webgl2-primary-command-buffer';\r\nimport { WebGL2Queue } from './webgl2-queue';\r\nimport { WebGL2RenderPass } from './webgl2-render-pass';\r\nimport { WebGL2Sampler } from './states/webgl2-sampler';\r\nimport { WebGL2Shader } from './webgl2-shader';\r\nimport { WebGL2Swapchain, getExtensions, getContext } from './webgl2-swapchain';\r\nimport { WebGL2Texture } from './webgl2-texture';\r\nimport {\r\n    CommandBufferType, DescriptorSetLayoutInfo, DescriptorSetInfo,\r\n    PipelineLayoutInfo, BufferViewInfo, CommandBufferInfo, BufferInfo, FramebufferInfo, InputAssemblerInfo,\r\n    QueueInfo, RenderPassInfo, SamplerInfo, ShaderInfo, TextureInfo, TextureViewInfo, DeviceInfo, GeneralBarrierInfo, TextureBarrierInfo,\r\n    BufferBarrierInfo, QueueType, API, Feature, BufferTextureCopy, SwapchainInfo, FormatFeature, Format, FormatFeatureBit,\r\n} from '../base/define';\r\nimport { WebGL2CmdFuncCopyTextureToBuffers, WebGL2CmdFuncCopyBuffersToTexture, WebGL2CmdFuncCopyTexImagesToTexture } from './webgl2-commands';\r\nimport { GeneralBarrier } from '../base/states/general-barrier';\r\nimport { TextureBarrier } from '../base/states/texture-barrier';\r\nimport { BufferBarrier } from '../base/states/buffer-barrier';\r\nimport { debug, errorID } from '../../core/platform/debug';\r\nimport { sys } from '../../core/platform/sys';\r\nimport { Swapchain } from '../base/swapchain';\r\nimport { IWebGL2Extensions, WebGL2DeviceManager } from './webgl2-define';\r\nimport { IWebGL2BindingMapping, IWebGL2BlitManager } from './webgl2-gpu-objects';\r\nimport { BrowserType, OS } from '../../../pal/system-info/enum-type';\r\nimport type { WebGL2StateCache } from './webgl2-state-cache';\r\nimport { WebGLConstants } from '../gl-constants';\r\n\r\nfunction setFormatFeature (formatFeatures: FormatFeature[], indexArray: Format[], feature: FormatFeature): void {\r\n    for (let i = 0; i < indexArray.length; ++i) {\r\n        formatFeatures[indexArray[i]] = feature;\r\n    }\r\n}\r\n\r\nfunction setTextureExclusive (textureExclusive: boolean[], indexArray: Format[], isExclusive: boolean): void {\r\n    for (let i = 0; i < indexArray.length; ++i) {\r\n        textureExclusive[indexArray[i]] = isExclusive;\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nexport class WebGL2Device extends Device {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get gl (): WebGL2RenderingContext {\r\n        return this._context!;\r\n    }\r\n\r\n    get extensions (): IWebGL2Extensions {\r\n        return this._swapchain!.extensions;\r\n    }\r\n\r\n    getStateCache (): WebGL2StateCache {\r\n        return this._swapchain!.stateCache;\r\n    }\r\n\r\n    get nullTex2D (): WebGL2Texture {\r\n        return this._swapchain!.nullTex2D;\r\n    }\r\n\r\n    get nullTexCube (): WebGL2Texture {\r\n        return this._swapchain!.nullTexCube;\r\n    }\r\n\r\n    get textureExclusive (): boolean[] {\r\n        return this._textureExclusive;\r\n    }\r\n\r\n    get bindingMappings (): IWebGL2BindingMapping {\r\n        return this._bindingMappings!;\r\n    }\r\n\r\n    get blitManager (): IWebGL2BlitManager | null {\r\n        return this._swapchain!.blitManager;\r\n    }\r\n\r\n    private _swapchain: WebGL2Swapchain | null = null;\r\n    private _context: WebGL2RenderingContext | null = null;\r\n    private _bindingMappings: IWebGL2BindingMapping | null = null;\r\n\r\n    protected _textureExclusive = new Array<boolean>(Format.COUNT);\r\n\r\n    public initialize (info: Readonly<DeviceInfo>): boolean {\r\n        WebGL2DeviceManager.setInstance(this);\r\n        this._gfxAPI = API.WEBGL2;\r\n\r\n        const mapping = this._bindingMappingInfo = info.bindingMappingInfo;\r\n        const blockOffsets: number[] = [];\r\n        const samplerTextureOffsets: number[] = [];\r\n        const firstSet = mapping.setIndices[0];\r\n        blockOffsets[firstSet] = 0;\r\n        samplerTextureOffsets[firstSet] = 0;\r\n        for (let i = 1; i < mapping.setIndices.length; ++i) {\r\n            const curSet = mapping.setIndices[i];\r\n            const prevSet = mapping.setIndices[i - 1];\r\n            // accumulate the per set offset according to the specified capacity\r\n            blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];\r\n            samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];\r\n        }\r\n        for (let i = 0; i < mapping.setIndices.length; ++i) {\r\n            const curSet = mapping.setIndices[i];\r\n            // textures always come after UBOs\r\n            samplerTextureOffsets[curSet] -= mapping.maxBlockCounts[curSet];\r\n        }\r\n        this._bindingMappings = {\r\n            blockOffsets,\r\n            samplerTextureOffsets,\r\n            flexibleSet: mapping.setIndices[mapping.setIndices.length - 1],\r\n        };\r\n\r\n        const gl = this._context = getContext(Device.canvas);\r\n\r\n        if (!gl) {\r\n            errorID(16405);\r\n            return false;\r\n        }\r\n\r\n        // create queue\r\n        this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));\r\n        this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));\r\n\r\n        const glGetParameter = gl.getParameter.bind(gl);\r\n\r\n        const caps = this._caps;\r\n        caps.maxVertexAttributes = glGetParameter(WebGLConstants.MAX_VERTEX_ATTRIBS);\r\n        caps.maxVertexUniformVectors = glGetParameter(WebGLConstants.MAX_VERTEX_UNIFORM_VECTORS);\r\n        // Implementation of WebGL2 in WECHAT browser and Safari in IOS exist bugs.\r\n        // It seems to be related to Safari's experimental features 'WebGL via Metal'.\r\n        // So limit using vertex uniform vectors no more than 256 in wechat browser,\r\n        // and using vertex uniform vectors no more than 512 in safari.\r\n        if (systemInfo.os === OS.IOS) {\r\n            const maxVertexUniformVectors = caps.maxVertexUniformVectors;\r\n            if (sys.browserType === BrowserType.WECHAT) {\r\n                caps.maxVertexUniformVectors = maxVertexUniformVectors < 256 ? maxVertexUniformVectors : 256;\r\n            } else if (sys.browserType === BrowserType.SAFARI) {\r\n                caps.maxVertexUniformVectors = maxVertexUniformVectors < 512 ? maxVertexUniformVectors : 512;\r\n            }\r\n        }\r\n        caps.maxFragmentUniformVectors = glGetParameter(WebGLConstants.MAX_FRAGMENT_UNIFORM_VECTORS);\r\n        caps.maxTextureUnits = glGetParameter(WebGLConstants.MAX_TEXTURE_IMAGE_UNITS);\r\n        caps.maxVertexTextureUnits = glGetParameter(WebGLConstants.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\r\n        caps.maxUniformBufferBindings = glGetParameter(WebGLConstants.MAX_UNIFORM_BUFFER_BINDINGS);\r\n        caps.maxUniformBlockSize = glGetParameter(WebGLConstants.MAX_UNIFORM_BLOCK_SIZE);\r\n        caps.maxTextureSize = glGetParameter(WebGLConstants.MAX_TEXTURE_SIZE);\r\n        caps.maxCubeMapTextureSize = glGetParameter(WebGLConstants.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n        caps.maxArrayTextureLayers = glGetParameter(WebGLConstants.MAX_ARRAY_TEXTURE_LAYERS);\r\n        caps.max3DTextureSize = glGetParameter(WebGLConstants.MAX_3D_TEXTURE_SIZE);\r\n        caps.uboOffsetAlignment = glGetParameter(WebGLConstants.UNIFORM_BUFFER_OFFSET_ALIGNMENT);\r\n\r\n        const extensions = gl.getSupportedExtensions();\r\n        let extStr = '';\r\n        if (extensions) {\r\n            extensions.forEach((ext) => {\r\n                extStr += `${ext} `;\r\n            });\r\n        }\r\n\r\n        const exts = getExtensions(gl);\r\n\r\n        if (exts.WEBGL_debug_renderer_info) {\r\n            this._renderer = glGetParameter(exts.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);\r\n            this._vendor = glGetParameter(exts.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);\r\n        } else {\r\n            this._renderer = glGetParameter(WebGLConstants.RENDERER);\r\n            this._vendor = glGetParameter(WebGLConstants.VENDOR);\r\n        }\r\n\r\n        const version: string = glGetParameter(WebGLConstants.VERSION);\r\n\r\n        const features = this._features;\r\n        features.fill(false);\r\n\r\n        this.initFormatFeatures(exts);\r\n\r\n        features[Feature.ELEMENT_INDEX_UINT] = true;\r\n        features[Feature.INSTANCED_ARRAYS] = true;\r\n        features[Feature.MULTIPLE_RENDER_TARGETS] = true;\r\n        features[Feature.BLEND_MINMAX] = true;\r\n\r\n        let compressedFormat = '';\r\n\r\n        if (this.getFormatFeatures(Format.ETC_RGB8)) {\r\n            compressedFormat += 'etc1 ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.ETC2_RGB8)) {\r\n            compressedFormat += 'etc2 ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.BC1)) {\r\n            compressedFormat += 'dxt ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.PVRTC_RGB2)) {\r\n            compressedFormat += 'pvrtc ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {\r\n            compressedFormat += 'astc ';\r\n        }\r\n\r\n        debug('WebGL2 device initialized.');\r\n        debug(`RENDERER: ${this._renderer}`);\r\n        debug(`VENDOR: ${this._vendor}`);\r\n        debug(`VERSION: ${version}`);\r\n        debug(`COMPRESSED_FORMAT: ${compressedFormat}`);\r\n        debug(`EXTENSIONS: ${extStr}`);\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._queue) {\r\n            this._queue.destroy();\r\n            this._queue = null;\r\n        }\r\n\r\n        if (this._cmdBuff) {\r\n            this._cmdBuff.destroy();\r\n            this._cmdBuff = null;\r\n        }\r\n\r\n        const it = this._samplers.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            (res.value as WebGL2Sampler).destroy();\r\n            res = it.next();\r\n        }\r\n\r\n        this._swapchain = null;\r\n    }\r\n\r\n    public flushCommands (cmdBuffs: Readonly<CommandBuffer[]>): void {\r\n        // noop\r\n    }\r\n\r\n    public acquire (swapchains: Readonly<Swapchain[]>): void {\r\n        // noop\r\n    }\r\n\r\n    public present (): void {\r\n        const queue = (this._queue as WebGL2Queue);\r\n        this._numDrawCalls = queue.numDrawCalls;\r\n        this._numInstances = queue.numInstances;\r\n        this._numTris = queue.numTris;\r\n        queue.clear();\r\n    }\r\n\r\n    protected initFormatFeatures (exts: IWebGL2Extensions): void {\r\n        const formatFeatures = this._formatFeatures;\r\n        const textureExclusive = this._textureExclusive;\r\n\r\n        formatFeatures.fill(FormatFeatureBit.NONE);\r\n        textureExclusive.fill(true);\r\n\r\n        let tempFeature: FormatFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.R8,\r\n            Format.RG8,\r\n            Format.RGB8,\r\n            Format.RGBA8,\r\n        ], tempFeature);\r\n\r\n        tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.R8SN,\r\n            Format.RG8SN,\r\n            Format.RGB8SN,\r\n            Format.RGBA8SN,\r\n            Format.R5G6B5,\r\n            Format.RGBA4,\r\n            Format.RGB5A1,\r\n            Format.RGB10A2,\r\n            Format.SRGB8,\r\n            Format.SRGB8_A8,\r\n            Format.R11G11B10F,\r\n            Format.RGB9E5,\r\n            Format.DEPTH,\r\n            Format.DEPTH_STENCIL,\r\n        ], tempFeature);\r\n\r\n        formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE\r\n            | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.R16F,\r\n            Format.RG16F,\r\n            Format.RGB16F,\r\n            Format.RGBA16F,\r\n        ], tempFeature);\r\n\r\n        tempFeature = FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.R32F,\r\n            Format.RG32F,\r\n            Format.RGB32F,\r\n            Format.RGBA32F,\r\n        ], tempFeature);\r\n\r\n        formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE\r\n            | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE\r\n            | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        setFormatFeature(formatFeatures, [\r\n            Format.R8I,\r\n            Format.R8UI,\r\n            Format.R16I,\r\n            Format.R16UI,\r\n            Format.R32I,\r\n            Format.R32UI,\r\n\r\n            Format.RG8I,\r\n            Format.RG8UI,\r\n            Format.RG16I,\r\n            Format.RG16UI,\r\n            Format.RG32I,\r\n            Format.RG32UI,\r\n\r\n            Format.RGB8I,\r\n            Format.RGB8UI,\r\n            Format.RGB16I,\r\n            Format.RGB16UI,\r\n            Format.RGB32I,\r\n            Format.RGB32UI,\r\n\r\n            Format.RGBA8I,\r\n            Format.RGBA8UI,\r\n            Format.RGBA16I,\r\n            Format.RGBA16UI,\r\n            Format.RGBA32I,\r\n            Format.RGBA32UI,\r\n        ], tempFeature);\r\n\r\n        setTextureExclusive(textureExclusive, [\r\n            Format.R8,\r\n            Format.RG8,\r\n            Format.RGB8,\r\n            Format.R5G6B5,\r\n            Format.RGBA4,\r\n\r\n            Format.RGB5A1,\r\n            Format.RGBA8,\r\n            Format.RGB10A2,\r\n            Format.RGB10A2UI,\r\n            Format.SRGB8_A8,\r\n\r\n            Format.R8I,\r\n            Format.R8UI,\r\n            Format.R16I,\r\n            Format.R16UI,\r\n            Format.R32I,\r\n            Format.R32UI,\r\n\r\n            Format.RG8I,\r\n            Format.RG8UI,\r\n            Format.RG16I,\r\n            Format.RG16UI,\r\n            Format.RG32I,\r\n            Format.RG32UI,\r\n\r\n            Format.RGBA8I,\r\n            Format.RGBA8UI,\r\n            Format.RGBA16I,\r\n            Format.RGBA16UI,\r\n            Format.RGBA32I,\r\n            Format.RGBA32UI,\r\n\r\n            Format.DEPTH,\r\n            Format.DEPTH_STENCIL,\r\n        ], false);\r\n\r\n        if (exts.EXT_color_buffer_float) {\r\n            formatFeatures[Format.R32F] |= FormatFeatureBit.RENDER_TARGET;\r\n            formatFeatures[Format.RG32F] |= FormatFeatureBit.RENDER_TARGET;\r\n            formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET;\r\n\r\n            setTextureExclusive(textureExclusive, [\r\n                Format.R32F,\r\n                Format.RG32F,\r\n                Format.RGBA32F,\r\n            ], false);\r\n        }\r\n\r\n        if (exts.EXT_color_buffer_half_float) {\r\n            setTextureExclusive(textureExclusive, [\r\n                Format.R16F,\r\n                Format.RG16F,\r\n                Format.RGBA16F,\r\n            ], false);\r\n        }\r\n\r\n        if (exts.OES_texture_float_linear) {\r\n            formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.R32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.RG32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n        }\r\n\r\n        if (exts.OES_texture_half_float_linear) {\r\n            formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.R16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            formatFeatures[Format.RG16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n        }\r\n\r\n        const compressedFeature: FormatFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        if (exts.WEBGL_compressed_texture_etc1) {\r\n            formatFeatures[Format.ETC_RGB8] = compressedFeature;\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_etc) {\r\n            setFormatFeature(formatFeatures, [\r\n                Format.ETC2_RGB8,\r\n                Format.ETC2_RGBA8,\r\n                Format.ETC2_SRGB8,\r\n                Format.ETC2_SRGB8_A8,\r\n                Format.ETC2_RGB8_A1,\r\n                Format.ETC2_SRGB8_A1,\r\n            ], compressedFeature);\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_s3tc) {\r\n            setFormatFeature(formatFeatures, [\r\n                Format.BC1,\r\n                Format.BC1_ALPHA,\r\n                Format.BC1_SRGB,\r\n                Format.BC1_SRGB_ALPHA,\r\n                Format.BC2,\r\n                Format.BC2_SRGB,\r\n                Format.BC3,\r\n                Format.BC3_SRGB,\r\n            ], compressedFeature);\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_pvrtc) {\r\n            setFormatFeature(formatFeatures, [\r\n                Format.PVRTC_RGB2,\r\n                Format.PVRTC_RGBA2,\r\n                Format.PVRTC_RGB4,\r\n                Format.PVRTC_RGBA4,\r\n            ], compressedFeature);\r\n        }\r\n\r\n        if (exts.WEBGL_compressed_texture_astc) {\r\n            setFormatFeature(formatFeatures, [\r\n                Format.ASTC_RGBA_4X4,\r\n                Format.ASTC_RGBA_5X4,\r\n                Format.ASTC_RGBA_5X5,\r\n                Format.ASTC_RGBA_6X5,\r\n                Format.ASTC_RGBA_6X6,\r\n                Format.ASTC_RGBA_8X5,\r\n                Format.ASTC_RGBA_8X6,\r\n                Format.ASTC_RGBA_8X8,\r\n                Format.ASTC_RGBA_10X5,\r\n                Format.ASTC_RGBA_10X6,\r\n                Format.ASTC_RGBA_10X8,\r\n                Format.ASTC_RGBA_10X10,\r\n                Format.ASTC_RGBA_12X10,\r\n                Format.ASTC_RGBA_12X12,\r\n\r\n                Format.ASTC_SRGBA_4X4,\r\n                Format.ASTC_SRGBA_5X4,\r\n                Format.ASTC_SRGBA_5X5,\r\n                Format.ASTC_SRGBA_6X5,\r\n                Format.ASTC_SRGBA_6X6,\r\n                Format.ASTC_SRGBA_8X5,\r\n                Format.ASTC_SRGBA_8X6,\r\n                Format.ASTC_SRGBA_8X8,\r\n                Format.ASTC_SRGBA_10X5,\r\n                Format.ASTC_SRGBA_10X6,\r\n                Format.ASTC_SRGBA_10X8,\r\n                Format.ASTC_SRGBA_10X10,\r\n                Format.ASTC_SRGBA_12X10,\r\n                Format.ASTC_SRGBA_12X12,\r\n            ], compressedFeature);\r\n        }\r\n    }\r\n\r\n    public createCommandBuffer (info: Readonly<CommandBufferInfo>): CommandBuffer {\r\n        // const Ctor = WebGLCommandBuffer; // opt to instant invocation\r\n        const Ctor = info.type === CommandBufferType.PRIMARY ? WebGL2PrimaryCommandBuffer : WebGL2CommandBuffer;\r\n        const cmdBuff = new Ctor();\r\n        cmdBuff.initialize(info);\r\n        return cmdBuff;\r\n    }\r\n\r\n    public createSwapchain (info: Readonly<SwapchainInfo>): Swapchain {\r\n        const swapchain = new WebGL2Swapchain();\r\n        this._swapchain = swapchain;\r\n        swapchain.initialize(info);\r\n        return swapchain;\r\n    }\r\n\r\n    public createBuffer (info: Readonly<BufferInfo> | Readonly<BufferViewInfo>): Buffer {\r\n        const buffer = new WebGL2Buffer();\r\n        buffer.initialize(info);\r\n        return buffer;\r\n    }\r\n\r\n    public createTexture (info: Readonly<TextureInfo> | Readonly<TextureViewInfo>): Texture {\r\n        const texture = new WebGL2Texture();\r\n        texture.initialize(info);\r\n        return texture;\r\n    }\r\n\r\n    public createDescriptorSet (info: Readonly<DescriptorSetInfo>): DescriptorSet {\r\n        const descriptorSet = new WebGL2DescriptorSet();\r\n        descriptorSet.initialize(info);\r\n        return descriptorSet;\r\n    }\r\n\r\n    public createShader (info: Readonly<ShaderInfo>): Shader {\r\n        const shader = new WebGL2Shader();\r\n        shader.initialize(info);\r\n        return shader;\r\n    }\r\n\r\n    public createInputAssembler (info: Readonly<InputAssemblerInfo>): InputAssembler {\r\n        const inputAssembler = new WebGL2InputAssembler();\r\n        inputAssembler.initialize(info);\r\n        return inputAssembler;\r\n    }\r\n\r\n    public createRenderPass (info: Readonly<RenderPassInfo>): RenderPass {\r\n        const renderPass = new WebGL2RenderPass();\r\n        renderPass.initialize(info);\r\n        return renderPass;\r\n    }\r\n\r\n    public createFramebuffer (info: Readonly<FramebufferInfo>): Framebuffer {\r\n        const framebuffer = new WebGL2Framebuffer();\r\n        framebuffer.initialize(info);\r\n        return framebuffer;\r\n    }\r\n\r\n    public createDescriptorSetLayout (info: Readonly<DescriptorSetLayoutInfo>): DescriptorSetLayout {\r\n        const descriptorSetLayout = new WebGL2DescriptorSetLayout();\r\n        descriptorSetLayout.initialize(info);\r\n        return descriptorSetLayout;\r\n    }\r\n\r\n    public createPipelineLayout (info: Readonly<PipelineLayoutInfo>): PipelineLayout {\r\n        const pipelineLayout = new WebGL2PipelineLayout();\r\n        pipelineLayout.initialize(info);\r\n        return pipelineLayout;\r\n    }\r\n\r\n    public createPipelineState (info: Readonly<PipelineStateInfo>): PipelineState {\r\n        const pipelineState = new WebGL2PipelineState();\r\n        pipelineState.initialize(info);\r\n        return pipelineState;\r\n    }\r\n\r\n    public createQueue (info: Readonly<QueueInfo>): Queue {\r\n        const queue = new WebGL2Queue();\r\n        queue.initialize(info);\r\n        return queue;\r\n    }\r\n\r\n    public getSampler (info: Readonly<SamplerInfo>): Sampler {\r\n        const hash = Sampler.computeHash(info);\r\n        if (!this._samplers.has(hash)) {\r\n            this._samplers.set(hash, new WebGL2Sampler(info, hash));\r\n        }\r\n        return this._samplers.get(hash)!;\r\n    }\r\n\r\n    public getSwapchains (): Readonly<Swapchain[]> {\r\n        return [this._swapchain as Swapchain];\r\n    }\r\n\r\n    public getGeneralBarrier (info: Readonly<GeneralBarrierInfo>): GeneralBarrier {\r\n        const hash = GeneralBarrier.computeHash(info);\r\n        if (!this._generalBarrierss.has(hash)) {\r\n            this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));\r\n        }\r\n        return this._generalBarrierss.get(hash)!;\r\n    }\r\n\r\n    public getTextureBarrier (info: Readonly<TextureBarrierInfo>): TextureBarrier {\r\n        const hash = TextureBarrier.computeHash(info);\r\n        if (!this._textureBarriers.has(hash)) {\r\n            this._textureBarriers.set(hash, new TextureBarrier(info, hash));\r\n        }\r\n        return this._textureBarriers.get(hash)!;\r\n    }\r\n\r\n    public getBufferBarrier (info: Readonly<BufferBarrierInfo>): BufferBarrier {\r\n        const hash = BufferBarrier.computeHash(info);\r\n        if (!this._bufferBarriers.has(hash)) {\r\n            this._bufferBarriers.set(hash, new BufferBarrier(info, hash));\r\n        }\r\n        return this._bufferBarriers.get(hash)!;\r\n    }\r\n\r\n    public copyBuffersToTexture (buffers: Readonly<ArrayBufferView[]>, texture: Texture, regions: Readonly<BufferTextureCopy[]>): void {\r\n        WebGL2CmdFuncCopyBuffersToTexture(\r\n            this,\r\n            buffers,\r\n            (texture as WebGL2Texture).gpuTexture,\r\n            regions,\r\n        );\r\n    }\r\n\r\n    public copyTextureToBuffers (texture: Readonly<Texture>, buffers: ArrayBufferView[], regions: Readonly<BufferTextureCopy[]>): void {\r\n        WebGL2CmdFuncCopyTextureToBuffers(\r\n            this,\r\n            (texture as WebGL2Texture).gpuTexture,\r\n            buffers,\r\n            regions,\r\n        );\r\n    }\r\n\r\n    public copyTexImagesToTexture (\r\n        texImages: Readonly<TexImageSource[]>,\r\n        texture: Texture,\r\n        regions: Readonly<BufferTextureCopy[]>,\r\n    ): void {\r\n        WebGL2CmdFuncCopyTexImagesToTexture(\r\n            this,\r\n            texImages,\r\n            (texture as WebGL2Texture).gpuTexture,\r\n            regions,\r\n        );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated engine source code (the \"Software\"), a limited,\r\n worldwide, royalty-free, non-assignable, revocable and non-exclusive license\r\n to use Cocos Creator solely to develop games on your target platforms. You shall\r\n not use Cocos Creator software for developing other software or tools that's\r\n used for developing games. You are not granted to publish, distribute,\r\n sublicense, and/or sell copies of Cocos Creator.\r\n\r\n The software or tools in this License Agreement are licensed, not sold.\r\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\r\n\r\nimport { WebGL2Device } from '../cocos/gfx/webgl2/webgl2-device';\r\nimport { legacyCC } from '../cocos/core/global-exports';\r\n\r\nexport { WebGL2Device };\r\nlegacyCC.WebGL2Device = WebGL2Device;\r\n"],"names":["WebGL2EXT","WebGL2DescriptorSet","_DescriptorSet","_this","call","this","_gpuDescriptorSet","_inheritsLoose","_proto","prototype","initialize","info","_layout","layout","_getGpuDescriptorSetL","getGpuDescriptorSetLayout","bindings","descriptorIndices","descriptorCount","_buffers","Array","fill","_textures","_samplers","gpuDescriptors","i","length","binding","j","count","gpuDescriptor","type","descriptorType","gpuBuffer","gpuTextureView","gpuSampler","push","destroy","update","_isDirty","descriptors","DESCRIPTOR_BUFFER_TYPE","getGpuBuffer","DESCRIPTOR_SAMPLER_TYPE","_createClass","key","get","DescriptorSet","WebGL2DeviceManager","setInstance","instance","_instance","WebGLWraps","WebGLConstants","REPEAT","MIRRORED_REPEAT","CLAMP_TO_EDGE","_f32v4","Float32Array","max","Math","min","GFXFormatToWebGLType","format","Format","R8","UNSIGNED_BYTE","R8SN","BYTE","R8UI","R8I","R16F","HALF_FLOAT","R16UI","UNSIGNED_SHORT","R16I","SHORT","R32F","FLOAT","R32UI","UNSIGNED_INT","R32I","INT","RG8","RG8SN","RG8UI","RG8I","RG16F","RG16UI","RG16I","RG32F","RG32UI","RG32I","RGB8","SRGB8","RGB8SN","RGB8UI","RGB8I","RGB16F","RGB16UI","RGB16I","RGB32F","RGB32UI","RGB32I","BGRA8","RGBA8","SRGB8_A8","RGBA8SN","RGBA8UI","RGBA8I","RGBA16F","RGBA16UI","RGBA16I","RGBA32F","RGBA32UI","RGBA32I","R5G6B5","UNSIGNED_SHORT_5_6_5","R11G11B10F","UNSIGNED_INT_10F_11F_11F_REV","RGB5A1","UNSIGNED_SHORT_5_5_5_1","RGBA4","UNSIGNED_SHORT_4_4_4_4","RGB10A2","RGB10A2UI","UNSIGNED_INT_2_10_10_10_REV","RGB9E5","DEPTH","DEPTH_STENCIL","UNSIGNED_INT_24_8","BC1","BC1_SRGB","BC2","BC2_SRGB","BC3","BC3_SRGB","BC4","BC4_SNORM","BC5","BC5_SNORM","BC6H_SF16","BC6H_UF16","BC7","BC7_SRGB","ETC_RGB8","ETC2_RGB8","ETC2_SRGB8","ETC2_RGB8_A1","ETC2_SRGB8_A1","EAC_R11","EAC_R11SN","EAC_RG11","EAC_RG11SN","PVRTC_RGB2","PVRTC_RGBA2","PVRTC_RGB4","PVRTC_RGBA4","PVRTC2_2BPP","PVRTC2_4BPP","ASTC_RGBA_4X4","ASTC_RGBA_5X4","ASTC_RGBA_5X5","ASTC_RGBA_6X5","ASTC_RGBA_6X6","ASTC_RGBA_8X5","ASTC_RGBA_8X6","ASTC_RGBA_8X8","ASTC_RGBA_10X5","ASTC_RGBA_10X6","ASTC_RGBA_10X8","ASTC_RGBA_10X10","ASTC_RGBA_12X10","ASTC_RGBA_12X12","ASTC_SRGBA_4X4","ASTC_SRGBA_5X4","ASTC_SRGBA_5X5","ASTC_SRGBA_6X5","ASTC_SRGBA_6X6","ASTC_SRGBA_8X5","ASTC_SRGBA_8X6","ASTC_SRGBA_8X8","ASTC_SRGBA_10X5","ASTC_SRGBA_10X6","ASTC_SRGBA_10X8","ASTC_SRGBA_10X10","ASTC_SRGBA_12X10","ASTC_SRGBA_12X12","GFXFormatToWebGLInternalFormat","A8","ALPHA","L8","LUMINANCE","LA8","LUMINANCE_ALPHA","R8_SNORM","RG8_SNORM","RGB8_SNORM","RGBA8_SNORM","RGB565","RGB5_A1","SRGB8_ALPHA8","RGB10_A2","RGB10_A2UI","R11F_G11F_B10F","DEPTH_COMPONENT32F","DEPTH24_STENCIL8","COMPRESSED_RGB_S3TC_DXT1_EXT","BC1_ALPHA","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_SRGB_S3TC_DXT1_EXT","BC1_SRGB_ALPHA","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA8","COMPRESSED_RGBA8_ETC2_EAC","ETC2_SRGB8_A8","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","errorID","RGBA","GFXFormatToWebGLFormat","RED","RG","RGB","DEPTH_COMPONENT","GFXTypeToWebGLType","Type","BOOL","BOOL2","BOOL_VEC2","BOOL3","BOOL_VEC3","BOOL4","BOOL_VEC4","INT2","INT_VEC2","INT3","INT_VEC3","INT4","INT_VEC4","UINT","FLOAT2","FLOAT_VEC2","FLOAT3","FLOAT_VEC3","FLOAT4","FLOAT_VEC4","MAT2","FLOAT_MAT2","MAT2X3","FLOAT_MAT2x3","MAT2X4","FLOAT_MAT2x4","MAT3X2","FLOAT_MAT3x2","MAT3","FLOAT_MAT3","MAT3X4","FLOAT_MAT3x4","MAT4X2","FLOAT_MAT4x2","MAT4X3","FLOAT_MAT4x3","MAT4","FLOAT_MAT4","SAMPLER2D","SAMPLER_2D","SAMPLER2D_ARRAY","SAMPLER_2D_ARRAY","SAMPLER3D","SAMPLER_3D","SAMPLER_CUBE","UNKNOWN","WebGLTypeToGFXType","glType","UNSIGNED_INT_VEC2","UINT2","UNSIGNED_INT_VEC3","UINT3","UNSIGNED_INT_VEC4","UINT4","WebGLGetTypeSize","SAMPLER_2D_ARRAY_SHADOW","INT_SAMPLER_2D","INT_SAMPLER_2D_ARRAY","INT_SAMPLER_3D","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","WebGLGetComponentCount","WebGLCmpFuncs","NEVER","LESS","EQUAL","LEQUAL","GREATER","NOTEQUAL","GEQUAL","ALWAYS","WebGLStencilOps","ZERO","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","WebGLBlendOps","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","WebGLBlendFactors","ONE","SRC_ALPHA","DST_ALPHA","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_ALPHA","SRC_COLOR","DST_COLOR","ONE_MINUS_SRC_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","WebGL2CmdFuncCreateBuffer","device","gl","cache","getStateCache","glUsage","memUsage","MemoryUsageBit","HOST","DYNAMIC_DRAW","STATIC_DRAW","usage","BufferUsageBit","VERTEX","glTarget","ARRAY_BUFFER","glBuffer","createBuffer","size","extensions","useVAO","glVAO","bindVertexArray","gfxStateCache","gpuInputAssembler","glArrayBuffer","bindBuffer","bufferData","INDEX","ELEMENT_ARRAY_BUFFER","glElementArrayBuffer","UNIFORM","UNIFORM_BUFFER","glUniformBuffer","INDIRECT","TRANSFER_DST","TRANSFER_SRC","NONE","WebGL2CmdFuncDestroyBuffer","deleteBuffer","WebGL2CmdFuncUpdateBuffer","buffer","offset","indirects","clearDraws","drawInfos","setDrawInfo","buff","systemInfo","os","OS","IOS","byteLength","bufferSubData","slice","WebGL2CmdFuncCreateTexture","gpuTexture","capabilities","glInternalFmt","glFormat","w","width","h","height","d","depth","l","arrayLayer","TextureType","TEX2D","TEXTURE_2D","maxSize","maxTextureSize","samples","SampleCount","X1","glTexture","createTexture","glTexUnit","glTexUnits","texUnit","bindTexture","FormatInfos","isCompressed","mipLevel","imgSize","FormatSize","view","Uint8Array","compressedTexImage2D","flags","TextureFlagBit","MUTABLE_STORAGE","texImage2D","texStorage2D","glRenderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","TEX2D_ARRAY","TEXTURE_2D_ARRAY","maxArrayTextureLayers","compressedTexImage3D","texStorage3D","TEX3D","TEXTURE_3D","max3DTextureSize","CUBE","TEXTURE_CUBE_MAP","maxCubeMapTextureSize","f","TEXTURE_CUBE_MAP_POSITIVE_X","WebGL2CmdFuncDestroyTexture","deleteTexture","activeTexture","TEXTURE0","deleteRenderbuffer","WebGL2CmdFuncResizeTexture","WebGL2CmdFuncDestroySampler","res","glSamplers","values","next","done","deleteSampler","value","glSamplerUnits","bindSampler","clear","WebGL2CmdFuncCreateFramebuffer","gpuFramebuffer","gpuColorViews","isSwapchainTexture","isOffscreen","attachments","glFramebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","colorTextureView","colorTexture","framebufferTexture2D","COLOR_ATTACHMENT0","baseLevel","framebufferRenderbuffer","dstView","gpuDepthStencilView","dst","glAttachment","hasStencil","DEPTH_STENCIL_ATTACHMENT","DEPTH_ATTACHMENT","drawBuffers","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","WebGL2CmdFuncCreateShader","gpuShader","_ret","_loop","gpuStage","gpuStages","k","glShaderType","shaderTypeStr","lineNumber","ShaderStageFlagBit","VERTEX_SHADER","FRAGMENT","FRAGMENT_SHADER","v","glShader","createShader","shaderSource","source","compileShader","getShaderParameter","COMPILE_STATUS","name","replace","error","getShaderInfoLog","stage","deleteShader","glProgram","createProgram","enableEffectImport","cclegacy","rendering","attachShader","linkProgram","detachShader","getProgramParameter","LINK_STATUS","getProgramInfoLog","debugID","activeAttribCount","ACTIVE_ATTRIBUTES","glInputs","attribInfo","getActiveAttrib","varName","nameOffset","indexOf","substring","glLoc","getAttribLocation","stride","blockName","blockIdx","blockSize","block","activeBlockCount","ACTIVE_UNIFORM_BLOCKS","glBlocks","b","getActiveUniformBlockName","blocks","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","glBinding","flattened","bindingMappings","blockOffsets","set","uniformBlockBinding","idx","subpassInputs","subpassInput","samplerTextures","UniformSamplerTexture","glSamplerTextures","sampler","units","glUnits","glActiveSamplers","glActiveSamplerLocations","texUnitCacheMap","getUniformLocation","id","undefined","maxTextureUnits","flexibleSetBaseOffset","flexibleSet","arrayOffset","samplerTextureOffsets","usedTexUnits","glSampler","cachedUnit","t","unitIdx","useProgram","Int32Array","uniform1iv","WebGL2CmdFuncCreateInputAssember","glAttribs","attributes","offsets","attrib","stream","gpuVertexBuffers","componentCount","isNormalized","isInstanced","WebGL2CmdFuncDestroyInputAssembler","it","glVAOs","deleteVertexArray","gpuPipelineState","glPrimitive","invalidateAttachments","WebGL2CmdFuncBeginRenderPass","gpuRenderPass","renderArea","clearColors","clearDepth","clearStencil","clears","viewport","left","x","top","y","scissorRect","scissor","colorAttachment","colorAttachments","loadOp","LoadOp","LOAD","CLEAR","bs","targets","blendColorMask","ColorMask","ALL","colorMask","clearColor","z","COLOR_BUFFER_BIT","clearBufferfv","COLOR","DISCARD","depthStencilAttachment","depthLoadOp","dss","depthWrite","depthMask","DEPTH_BUFFER_BIT","stencilLoadOp","stencilWriteMaskFront","stencilMaskSeparate","FRONT","stencilWriteMaskBack","BACK","STENCIL_BUFFER_BIT","STENCIL_ATTACHMENT","invalidateFramebuffer","r","R","g","G","B","a","A","WebGL2CmdFuncBindStates","gpuDescriptorSets","dynamicOffsets","dynamicStates","cacheRs","rs","cacheDss","cacheBs","cacheBlendColor","blendColor","isShaderChanged","cullMode","CullMode","disable","CULL_FACE","enable","cullFace","isFrontFaceCCW","frontFace","CCW","CW","depthBias","depthBiasSlop","polygonOffset","lineWidth","depthTest","DEPTH_TEST","depthFunc","stencilTestFront","stencilTestBack","STENCIL_TEST","stencilFuncFront","stencilRefFront","stencilReadMaskFront","stencilFuncSeparate","stencilFailOpFront","stencilZFailOpFront","stencilPassOpFront","stencilOpSeparate","stencilFuncBack","stencilRefBack","stencilReadMaskBack","stencilFailOpBack","stencilZFailOpBack","stencilPassOpBack","isA2C","SAMPLE_ALPHA_TO_COVERAGE","target0","target0Cache","blend","BLEND","blendEq","blendAlphaEq","blendEquationSeparate","blendSrc","blendDst","blendSrcAlpha","blendDstAlpha","blendFuncSeparate","gpuPipelineLayout","blockLen","dynamicOffsetIndices","glBlock","gpuDescriptorSet","descriptorIndex","dynamicOffsetIndexSet","dynamicOffsetIndex","glOffset","glBindUBOs","glBindUBOOffsets","bindBufferRange","bindBufferBase","samplerLen","minLod","maxLod","levelCount","nullTex2D","getGLSampler","glAttrib","createVertexArray","glInput","c","attribOffset","enableVertexAttribArray","glCurrentAttribLocs","vertexAttribPointer","vertexAttribDivisor","gpuIndexBuffer","maxVertexAttributes","glEnabledAttribLocs","disableVertexAttribArray","dsLen","DynamicStateFlagBit","LINE_WIDTH","DEPTH_BIAS","depthBiasConstant","depthBiasSlope","BLEND_CONSTANTS","blendConstant","copy","STENCIL_WRITE_MASK","front","stencilStatesFront","back","stencilStatesBack","writeMask","STENCIL_COMPARE_MASK","reference","compareMask","WebGL2CmdFuncDraw","drawInfo","md","WEBGL_multi_draw","indexBuffer","gpuIndirectBuffer","drawByIndex","drawCount","byteOffsets","instancedDraw","multiDrawElementsInstancedWEBGL","counts","glIndexType","instances","multiDrawElementsWEBGL","drawElementsInstanced","drawElements","multiDrawArraysInstancedWEBGL","multiDrawArraysWEBGL","drawArraysInstanced","drawArrays","instanceCount","indexCount","firstIndex","vertexCount","firstVertex","toUseTexImage2D","texImages","regions","HTMLVideoElement","videoElement","texOffset","texExtent","videoWidth","videoHeight","WebGL2CmdFuncCopyTexImagesToTexture","n","texSubres","region","texSubImage2D","regionTexSubres","regionTexOffset","fcount","baseArrayLayer","layerCount","GEN_MIPMAP","generateMipmap","stagingBuffer","pixelBufferPick","extent","blockHeight","formatAlignment","bufferSize","rowStrideSize","sliceStrideSize","destRowSize","ArrayBufferCtor","getTypedArrayConstructor","destOffset","bufferOffset","subarray","byteOffset","BYTES_PER_ELEMENT","assertID","Number","isInteger","WebGL2CmdFuncCopyBuffersToTexture","buffers","fmtInfo","Extent","Offset","regionTexExtent","regionTexExtentWidth","regionTexExtentHeight","blockSizeWidth","blockSizeHeight","regionBuffStride","buffStride","alignTo","buffTexHeight","destWidth","destHeight","pixels","buffOffset","compressedTexSubImage2D","compressedTexSubImage3D","texSubImage3D","WebGL2CmdFuncCopyTextureToBuffers","framebuffer","readPixels","deleteFramebuffer","WebGL2CmdFuncBlitTexture","src","filter","blitManager","glFilter","Filter","LINEAR","ANISOTROPIC","NEAREST","srcFramebuffer","dstFramebuffer","origReadFBO","glReadFramebuffer","origDrawFBO","srcMip","srcSubres","dstMip","dstSubres","blitInfo","formatInfo","mask","attachment","hasDepth","regionIndices","map","_","sort","srcMask","srcAttachment","dstAttachment","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","blitFramebuffer","srcOffset","srcExtent","dstOffset","dstExtent","WebGL2IndirectDrawInfos","_capacity","_ensureCapacity","target","nextPow2","IWebGL2BlitManager","_srcFramebuffer","_dstFramebuffer","WebGL2Buffer","_Buffer","_gpuBuffer","_isBufferView","_usage","_memUsage","_size","_stride","range","_count","_flags","memoryStatus","resize","warnID","oldSize","buffSize","Buffer","WebGL2CommandBuffer","_CommandBuffer","_isInRenderPass","_curGPUPipelineState","_curGPUDescriptorSets","_curGPUInputAssembler","_curDynamicOffsets","_curDynamicStates","DynamicStates","_isStateInvalid","_type","_queue","queue","setCount","begin","_numDrawCalls","_numInstances","_numTris","end","bindStates","beginRenderPass","endRenderPass","bindPipelineState","pipelineState","bindDescriptorSet","descriptorSet","_this$_curGPUPipeline","dynamicOffsetOffsets","bindInputAssembler","inputAssembler","setViewport","minDepth","maxDepth","setScissor","setLineWidth","setDepthBias","depthBiasConstantFactor","depthBiasClamp","depthBiasSlopeFactor","setBlendConstants","blendConstants","setDepthBound","minDepthBounds","maxDepthBounds","depthMinBounds","depthMaxBounds","setStencilWriteMask","face","StencilFace","setStencilCompareMask","draw","updateBuffer","copyBuffersToTexture","execute","pipelineBarrier","blitTexture","CommandBuffer","WebGL2Framebuffer","_Framebuffer","_gpuFramebuffer","_gpuColorViews","_gpuDepthStencilView","getGpuFramebuffer","_this$_gpuFramebuffer","_this2","_renderPass","renderPass","_colorTextures","colorTextures","_depthStencilTexture","depthStencilTexture","MAX_SAFE_INTEGER","getGpuRenderPass","val","forEach","tex","_width","_height","_gpuFramebuffer$gpuDe","Framebuffer","WebGL2InputAssembler","_InputAssembler","_gpuInputAssembler","vertexBuffers","_attributes","_attributesHash","computeAttributesHash","_vertexBuffers","_indexBuffer","_drawInfo","vertBuff","vertexOffset","firstInstance","_indirectBuffer","indirectBuffer","vb","Map","InputAssembler","WebGL2DescriptorSetLayout","_DescriptorSetLayout","_gpuDescriptorSetLayout","apply","_bindings","maxBinding","flattenedIndices","_bindingIndices","_descriptorIndices","dynamicBindings","DESCRIPTOR_DYNAMIC_TYPE","DescriptorSetLayout","WebGL2PipelineLayout","_PipelineLayout","_gpuPipelineLayout","getGpuPipelineLayout","_setLayouts","setLayouts","gpuSetLayouts","dynamicOffsetCount","setLayout","gpuDescriptorSetLayout","indices","bindingIndices","PipelineLayout","WebGLPrimitives","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","WebGL2PipelineState","_PipelineState","_gpuPipelineState","_primitive","primitive","_shader","shader","_pipelineLayout","pipelineLayout","_bs","blendState","bsInfo","setTarget","isIndepend","Object","assign","_rs","rasterizerState","_dss","depthStencilState","_is","inputState","_dynamicStates","PipelineState","WebGL2PrimaryCommandBuffer","_WebGL2CommandBuffer","infoOrAssembler","data","texture","srcTexture","dstTexture","gpuTextureSrc","gpuTextureDst","WebGL2Queue","_Queue","numDrawCalls","numInstances","numTris","submit","cmdBuffs","cmdBuff","Queue","WebGL2RenderPass","_RenderPass","_gpuRenderPass","_colorInfos","_depthStencilInfo","_subpasses","subpasses","_hash","computeHash","RenderPass","WebGL2Sampler","_Sampler","hash","_gpuSampler","minFilter","_info","magFilter","mipFilter","addressU","addressV","addressW","glMinFilter","glMagFilter","glWrapS","glWrapT","glWrapR","samplerHash","has","createSampler","glSamplerParameteri","samplerParameteri","bind","glSamplerParameterf","samplerParameterf","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","LINEAR_MIPMAP_LINEAR","POINT","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","Sampler","WebGL2Shader","_Shader","_gpuShader","_name","_stages","stages","_blocks","samplers","glUniforms","deleteProgram","Shader","WebGL2StateCache","Viewport","Rect","RasterizerState","DepthStencilState","BlendState","bufferBindings","vertexAttributes","WebGL2Texture","_Texture","_gpuTexture","_gpuTextureView","self","thisTextureInfo","thisViewInfo","_viewInfo","texInfo","viewInfo","_isTextureView","_isPowerOf2","IsPowerOf2","FormatSurfaceSize","_self$_gpuTexture","logID","isPowerOf2","textureSize","baseLayer","getTextureHandle","getLevelCount","thisGpuTexture","initAsSwapchainTexture","TextureInfo","TextureUsageBit","COLOR_ATTACHMENT","Texture","eventWebGLContextLost","initStates","pixelStorei","PACK_ALIGNMENT","UNPACK_ALIGNMENT","UNPACK_FLIP_Y_WEBGL","SCISSOR_TEST","getExtension","ext","prefixes","_ext","getExtensions","EXT_texture_filter_anisotropic","EXT_color_buffer_half_float","EXT_color_buffer_float","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_pvrtc","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_shaders","WEBGL_lose_context","WEBGL_debug_renderer_info","OES_texture_half_float_linear","OES_texture_float_linear","ANDROID","getContext","canvas","context","_globalThis$__globalX","USE_XR","globalThis","__globalXR","webxrCompatible","alpha","macro","ENABLE_TRANSPARENT_CANVAS","antialias","EDITOR","ENABLE_WEBGL_ANTIALIAS","stencil","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","xrCompatible","webGLCtxAttribs","err","WebGL2Swapchain","_Swapchain","stateCache","nullTexCube","_canvas","_webGL2ContextLostHandler","_extensions","_blitManager","windowHandle","_onWebGLContextLost","addEventListener","maxUniformBufferBindings","colorFmt","depthStencilFmt","depthBits","getParameter","DEPTH_BITS","stencilBits","STENCIL_BITS","_colorTexture","swapchain","SAMPLED","nullTexRegion","BufferTextureCopy","nullTexBuff","removeEventListener","debug","event","warn","Swapchain","setFormatFeature","formatFeatures","indexArray","feature","setTextureExclusive","textureExclusive","isExclusive","WebGL2Device","exports","_Device","_swapchain","_context","_bindingMappings","_textureExclusive","COUNT","_gfxAPI","API","WEBGL2","mapping","_bindingMappingInfo","bindingMappingInfo","firstSet","setIndices","curSet","prevSet","maxBlockCounts","maxSamplerTextureCounts","Device","createQueue","QueueInfo","QueueType","GRAPHICS","_cmdBuff","createCommandBuffer","CommandBufferInfo","glGetParameter","caps","_caps","MAX_VERTEX_ATTRIBS","maxVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","sys","browserType","BrowserType","WECHAT","SAFARI","maxFragmentUniformVectors","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextureUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_UNIFORM_BUFFER_BINDINGS","maxUniformBlockSize","MAX_UNIFORM_BLOCK_SIZE","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_ARRAY_TEXTURE_LAYERS","MAX_3D_TEXTURE_SIZE","uboOffsetAlignment","UNIFORM_BUFFER_OFFSET_ALIGNMENT","getSupportedExtensions","extStr","exts","_renderer","UNMASKED_RENDERER_WEBGL","_vendor","UNMASKED_VENDOR_WEBGL","RENDERER","VENDOR","version","VERSION","features","_features","initFormatFeatures","Feature","ELEMENT_INDEX_UINT","INSTANCED_ARRAYS","MULTIPLE_RENDER_TARGETS","BLEND_MINMAX","compressedFormat","getFormatFeatures","flushCommands","acquire","present","_formatFeatures","FormatFeatureBit","tempFeature","RENDER_TARGET","SAMPLED_TEXTURE","STORAGE_TEXTURE","LINEAR_FILTER","VERTEX_ATTRIBUTE","compressedFeature","CommandBufferType","PRIMARY","createSwapchain","createDescriptorSet","createInputAssembler","createRenderPass","createDescriptorSetLayout","descriptorSetLayout","createPipelineLayout","createPipelineState","getSampler","getSwapchains","getGeneralBarrier","GeneralBarrier","_generalBarrierss","getTextureBarrier","TextureBarrier","_textureBarriers","getBufferBarrier","BufferBarrier","_bufferBarriers","copyTextureToBuffers","copyTexImagesToTexture","legacyCC"],"mappings":"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"}