{"version":3,"file":"gfx-webgpu.js","sources":["../../../cocos/gfx/webgpu/define.ts","../../../cocos/gfx/webgpu/webgpu-commands.ts","../../../cocos/gfx/webgpu/webgpu-descriptor-set.ts","../../../cocos/gfx/webgpu/webgpu-device.ts","../../../cocos/gfx/webgpu/webgpu-buffer.ts","../../../cocos/gfx/webgpu/webgpu-command-buffer.ts","../../../cocos/gfx/webgpu/webgpu-framebuffer.ts","../../../cocos/gfx/webgpu/webgpu-input-assembler.ts","../../../cocos/gfx/webgpu/webgpu-descriptor-set-layout.ts","../../../cocos/gfx/webgpu/webgpu-pipeline-layout.ts","../../../cocos/gfx/webgpu/webgpu-pipeline-state.ts","../../../cocos/gfx/webgpu/webgpu-queue.ts","../../../cocos/gfx/webgpu/webgpu-render-pass.ts","../../../cocos/gfx/webgpu/webgpu-sampler.ts","../../../cocos/gfx/webgpu/webgpu-shader.ts","../../../cocos/gfx/webgpu/webgpu-state-cache.ts","../../../cocos/gfx/webgpu/webgpu-texture.ts","../../../cocos/gfx/webgpu/webgpu-command-allocator.ts","../../../cocos/gfx/webgpu/webgpu-gpu-objects.ts","../../../cocos/gfx/webgpu/webgpu-swapchain.ts","../../../cocos/gfx/webgpu/instantiated.ts","../../../exports/gfx-webgpu.ts"],"sourcesContent":["/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BufferFlagBit, BufferInfo, BufferUsageBit, MemoryUsageBit } from '../base/define';\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { WebGPUDevice } from './webgpu-device';\r\nimport { WebGPUSampler } from './webgpu-sampler';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\n\r\nexport class WebGPUDeviceManager {\r\n    static get instance (): WebGPUDevice {\r\n        return WebGPUDeviceManager._instance!;\r\n    }\r\n    static setInstance (instance: WebGPUDevice): void {\r\n        WebGPUDeviceManager._instance = instance;\r\n    }\r\n    private static _instance: WebGPUDevice | null = null;\r\n}\r\n\r\nfunction hashCombine (hash, currHash: number): number {\r\n    return currHash ^= (hash >>> 0) + 0x9e3779b9 + (currHash << 6) + (currHash >> 2);\r\n}\r\n\r\nexport function hashCombineNum (val: number, currHash: number): number {\r\n    const hash = 5381;\r\n    return hashCombine((hash * 33) ^ val, currHash);\r\n}\r\n\r\nexport function hashCombineStr (str: string, currHash: number): number {\r\n    // DJB2 HASH\r\n    let hash = 5381;\r\n    const strLength = str.length;\r\n    for (let i = 0; i < strLength; i++) {\r\n        hash = (hash * 33) ^ str.charCodeAt(i);\r\n    }\r\n    return hashCombine(hash, currHash);\r\n}\r\n\r\ninterface WebGPU {\r\n    glslang: any;\r\n    twgsl: any;\r\n}\r\n\r\nexport const webGPU: WebGPU = {\r\n    glslang: undefined,\r\n    twgsl: undefined,\r\n};\r\nfunction overrideClass (wasm): void {\r\n    if ('compileGLSL' in wasm) {\r\n        webGPU.glslang = wasm;\r\n    } else if ('convertSpirV2WGSL' in wasm) {\r\n        webGPU.twgsl = wasm;\r\n    }\r\n}\r\n\r\nexport function overrideWebGPUDefine (wasm): void {\r\n    overrideClass(wasm);\r\n}\r\n\r\nexport class DefaultResources {\r\n    // hash, targetResource\r\n    buffersDescLayout: Map<number, WebGPUBuffer> = new Map<number, WebGPUBuffer>();\r\n    texturesDescLayout: Map<number, WebGPUTexture> = new Map<number, WebGPUTexture>();\r\n    samplersDescLayout: Map<number, WebGPUSampler> = new Map<number, WebGPUSampler>();\r\n    buffer!: WebGPUBuffer;\r\n    storageBuffers: WebGPUBuffer[] = [];\r\n    texture!: WebGPUTexture;\r\n    cubeTexture!: WebGPUTexture;\r\n    sampler!: WebGPUSampler;\r\n    setLayout!: DescriptorSetLayout;\r\n    descSet!: DescriptorSet;\r\n    getStorageBuffer (idx: number): WebGPUBuffer {\r\n        if (this.storageBuffers[idx]) {\r\n            return this.storageBuffers[idx];\r\n        }\r\n        const bufferInfo = new BufferInfo(\r\n            BufferUsageBit.STORAGE,\r\n            MemoryUsageBit.DEVICE,\r\n            16,\r\n            16, // in bytes\r\n            BufferFlagBit.NONE,\r\n        );\r\n        const defaultBuff = WebGPUDeviceManager.instance.createBuffer(bufferInfo) as WebGPUBuffer;\r\n        this.storageBuffers[idx] = defaultBuff;\r\n        return defaultBuff;\r\n    }\r\n}\r\n\r\nexport function isBound (binds: number[], compares: number[]): boolean {\r\n    return binds.length === compares.length && binds.every((bind) => compares.includes(bind));\r\n}\r\n\r\nexport function copyNumbersToTarget (source: number[], target: number[], start: number, count: number): void {\r\n    // Check that the source array is out of range\r\n    if (start + count > source.length) {\r\n        throw new Error('Source array is out of bounds');\r\n    }\r\n    // Check whether the target array is out of range\r\n    if (start + count > target.length) {\r\n        target.length = start + count;\r\n    }\r\n    const sliceToCopy = source.slice(start, start + count);\r\n    target.splice(start, count, ...sliceToCopy);\r\n}\r\n\r\nexport enum DescUpdateFrequency {\r\n    LOW,\r\n    NORMAL,\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CachedArray } from '../../core/memop/cached-array';\r\nimport { BufferSource, DrawInfo, IndirectBuffer, Texture } from '..';\r\nimport {\r\n    BufferUsageBit,\r\n    ColorMask,\r\n    Filter,\r\n    Format,\r\n    FormatInfos,\r\n    ShaderStageFlagBit,\r\n    TextureType,\r\n    TextureUsageBit,\r\n    ShaderStageFlags,\r\n    DescriptorType,\r\n    Color, Rect, Viewport, BufferTextureCopy,\r\n    SamplerInfo,\r\n    FormatSize,\r\n    formatAlignment,\r\n    alignTo,\r\n    TextureFlagBit,\r\n    DescriptorSetLayoutBinding,\r\n} from '../base/define';\r\n\r\nimport { WebGPUCommandAllocator } from './webgpu-command-allocator';\r\nimport {\r\n    IWebGPUDepthBias,\r\n    IWebGPUDepthBounds,\r\n    IWebGPUStencilCompareMask,\r\n    IWebGPUStencilWriteMask,\r\n} from './webgpu-command-buffer';\r\nimport { WebGPUDevice } from './webgpu-device';\r\nimport {\r\n    IWebGPUGPUInputAssembler,\r\n    IWebGPUAttrib,\r\n    IWebGPUGPUDescriptorSet,\r\n    IWebGPUGPUBuffer,\r\n    IWebGPUGPUFramebuffer,\r\n    IWebGPUGPUPipelineState,\r\n    IWebGPUGPUSampler,\r\n    IWebGPUGPUShader,\r\n    IWebGPUTexture,\r\n    IWebGPUGPURenderPass,\r\n    IWebGPUGPUShaderStage,\r\n} from './webgpu-gpu-objects';\r\nimport { error, log, warn } from '../../core';\r\nimport { WebGPUDeviceManager } from './define';\r\n\r\nconst WebGPUAdressMode: GPUAddressMode[] = [\r\n    'repeat', // WRAP,\r\n    'mirror-repeat', // MIRROR,\r\n    'clamp-to-edge', // CLAMP,\r\n    'clamp-to-edge', // BORDER,\r\n];\r\n\r\nconst WebGPUCompareFunc: GPUCompareFunction[] = [\r\n    'never',\r\n    'less',\r\n    'equal',\r\n    'less-equal',\r\n    'greater',\r\n    'not-equal',\r\n    'greater-equal',\r\n    'always',\r\n];\r\n\r\nconst SAMPLES: number[] = [\r\n    1,\r\n    2,\r\n    4,\r\n    8,\r\n    16,\r\n    32,\r\n    64,\r\n];\r\n\r\nconst _f32v4 = new Float32Array(4);\r\n\r\n// tslint:disable: max-line-length\r\n\r\nfunction CmpF32NotEuqal (a: number, b: number): boolean {\r\n    const c = a - b;\r\n    return (c > 0.000001 || c < -0.000001);\r\n}\r\n\r\nexport function GFXStageToWebGPUStage (stage: ShaderStageFlags): number {\r\n    let flag = 0x0;\r\n    if (stage & ShaderStageFlagBit.VERTEX) { flag |= GPUShaderStage.VERTEX; }\r\n    if (stage & ShaderStageFlagBit.FRAGMENT) { flag |= GPUShaderStage.FRAGMENT; }\r\n    if (stage & ShaderStageFlagBit.COMPUTE) { flag |= GPUShaderStage.COMPUTE; }\r\n    if (stage === ShaderStageFlagBit.ALL) { flag |= (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE); }\r\n    if (flag === 0x0) { throw new Error('shader stage not supported by webGPU!'); }\r\n    return flag;\r\n}\r\n\r\ntype WebGPUResourceTypeName =\r\n  | 'buffer'\r\n  | 'texture'\r\n  | 'sampler'\r\n  | 'externalTexture'\r\n  | 'storageTexture';\r\n\r\nexport function GFXSamplerToGPUSamplerDescType (info: Readonly<SamplerInfo>): GPUSamplerBindingType {\r\n    if (info.magFilter !== Filter.LINEAR && info.minFilter !== Filter.LINEAR) {\r\n        return 'non-filtering';\r\n    } else {\r\n        return 'filtering';\r\n    }\r\n}\r\n\r\nexport function GFXDescTypeToGPUBufferDescType (descType: DescriptorType): GPUBufferBindingType {\r\n    switch (descType) {\r\n    case DescriptorType.UNIFORM_BUFFER:\r\n    case DescriptorType.DYNAMIC_UNIFORM_BUFFER:\r\n        return 'uniform';\r\n    case DescriptorType.STORAGE_BUFFER:\r\n    case DescriptorType.DYNAMIC_STORAGE_BUFFER:\r\n    default:\r\n        return 'storage';\r\n    }\r\n}\r\n\r\nexport function GFXDescTypeToWebGPUDescType (descType: DescriptorType): WebGPUResourceTypeName {\r\n    switch (descType) {\r\n    case DescriptorType.UNIFORM_BUFFER:\r\n    case DescriptorType.DYNAMIC_UNIFORM_BUFFER:\r\n    case DescriptorType.STORAGE_BUFFER:\r\n        return 'buffer';\r\n    case DescriptorType.SAMPLER:\r\n        return 'sampler';\r\n    case DescriptorType.SAMPLER_TEXTURE:\r\n        return 'texture';\r\n    case DescriptorType.STORAGE_IMAGE:\r\n        return 'storageTexture';\r\n    default:\r\n        return 'externalTexture';\r\n    }\r\n}\r\n\r\nexport function GFXFormatToWGPUVertexFormat (format: Format): GPUVertexFormat {\r\n    switch (format) {\r\n    case Format.R32F: return 'float32';\r\n    case Format.R32UI: return 'uint32';\r\n    case Format.R32I: return 'sint32';\r\n    case Format.RG8: return 'unorm8x2';\r\n    case Format.RG8SN: return 'snorm8x2';\r\n    case Format.RG8UI: return 'uint8x2';\r\n    case Format.RG8I: return 'sint8x2';\r\n    case Format.RG16F: return 'float16x2';\r\n    case Format.RG16UI: return 'uint16x2';\r\n    case Format.RG16I: return 'sint16x2';\r\n    case Format.RG32F: return 'float32x2';\r\n    case Format.RG32UI: return 'uint32x2';\r\n    case Format.RG32I: return 'sint32x2';\r\n    case Format.RGB32F: return 'float32x3';\r\n    case Format.RGB32UI: return 'uint32x3';\r\n    case Format.RGB32I: return 'sint32x3';\r\n    case Format.BGRA8: return 'unorm8x4';\r\n    case Format.RGBA8: return 'unorm8x4';\r\n    case Format.SRGB8_A8: return 'uint8x4';\r\n    case Format.RGBA8SN: return 'snorm8x4';\r\n    case Format.RGBA8UI: return 'uint8x4';\r\n    case Format.RGBA8I: return 'sint8x4';\r\n    case Format.RGBA16F: return 'float16x4';\r\n    case Format.RGBA16UI: return 'uint16x4';\r\n    case Format.RGBA16I: return 'sint16x4';\r\n    case Format.RGBA32F: return 'float32x4';\r\n    case Format.RGBA32UI: return 'uint32x4';\r\n    case Format.RGBA32I: return 'sint32x4';\r\n\r\n    default: {\r\n        warn('Unsupported Format, return sint8x4 in default.');\r\n        return 'sint8x4';\r\n    }\r\n    }\r\n}\r\n\r\nfunction GFXFormatToWGPUTextureFormat (format: Format): GPUTextureFormat {\r\n    switch (format) {\r\n    case Format.R8: return 'r8unorm';\r\n    case Format.R8SN: return 'r8snorm';\r\n    case Format.R8UI: return 'r8uint';\r\n    case Format.R8I: return 'r8sint';\r\n    case Format.RG8: return 'rg8unorm';\r\n    case Format.RG8SN: return 'rg8snorm';\r\n    case Format.RG8UI: return 'rg8uint';\r\n    case Format.RG8I: return 'rg8sint';\r\n    case Format.BGRA8: return 'bgra8unorm';\r\n    case Format.RGBA8: return 'rgba8unorm';\r\n    case Format.SRGB8_A8: return 'rgba8unorm-srgb';\r\n    case Format.RGBA8SN: return 'rgba8snorm';\r\n    case Format.RGBA8UI: return 'rgba8uint';\r\n    case Format.RGBA8I: return 'rgba8sint';\r\n    case Format.R16I: return 'r16sint';\r\n    case Format.R16UI: return 'r16uint';\r\n    case Format.R16F: return 'r16sint';\r\n    case Format.RG16I: return 'rg16sint';\r\n    case Format.RG16UI: return 'rg16uint';\r\n    case Format.RG16F: return 'rg16float';\r\n    case Format.RGBA16I: return 'rgba16sint';\r\n    case Format.RGBA16UI: return 'rgba16uint';\r\n    case Format.RGBA16F: return 'rgba16float';\r\n    case Format.R32I: return 'r32sint';\r\n    case Format.R32UI: return 'r32uint';\r\n    case Format.R32F: return 'r32float';\r\n    case Format.RG32I: return 'rg32sint';\r\n    case Format.RG32UI: return 'rg32uint';\r\n    case Format.RG32F: return 'rg32float';\r\n    case Format.RGBA32I: return 'rgba32sint';\r\n    case Format.RGBA32UI: return 'rgba32uint';\r\n    case Format.RGBA32F: return 'rgba32float';\r\n    case Format.RGB10A2: return 'rgb10a2unorm';\r\n\r\n    case Format.DEPTH: return 'depth24plus';\r\n    case Format.DEPTH_STENCIL: return 'depth24plus-stencil8';\r\n\r\n    case Format.BC1_ALPHA: return 'bc1-rgba-unorm';\r\n    case Format.BC1_SRGB_ALPHA: return 'bc1-rgba-unorm-srgb';\r\n    case Format.BC2: return 'bc2-rgba-unorm';\r\n    case Format.BC2_SRGB: return 'bc2-rgba-unorm-srgb';\r\n    case Format.BC3: return 'bc3-rgba-unorm';\r\n    case Format.BC3_SRGB: return 'bc3-rgba-unorm-srgb';\r\n    case Format.BC4_SNORM: return 'bc4-r-snorm';\r\n    case Format.BC6H_SF16: return 'bc6h-rgb-float';\r\n    case Format.BC6H_UF16: return 'bc6h-rgb-ufloat';\r\n    case Format.BC7: return 'bc7-rgba-unorm';\r\n    case Format.BC7_SRGB: return 'bc7-rgba-unorm-srgb';\r\n\r\n    default: {\r\n        warn('Unsupported Format, return rgba8unorm indefault.');\r\n        return 'rgba8unorm';\r\n    }\r\n    }\r\n}\r\n\r\nexport function GFXFormatToWGPUFormat (format: Format): GPUTextureFormat {\r\n    return GFXFormatToWGPUTextureFormat(format);\r\n}\r\n\r\nfunction wGPUTextureFormatToGFXFormat (format: GPUTextureFormat): Format {\r\n    switch (format) {\r\n    case 'r8unorm': return Format.R8;\r\n    case 'r8snorm': return Format.R8SN;\r\n    case 'r8uint': return Format.R8UI;\r\n    case 'r8sint': return Format.R8I;\r\n    case 'rg8unorm': return Format.RG8;\r\n    case 'rg8snorm': return Format.RG8SN;\r\n    case 'rg8uint': return Format.RG8UI;\r\n    case 'rg8sint': return Format.RG8I;\r\n    case 'bgra8unorm': return Format.BGRA8;\r\n    case 'rgba8unorm': return Format.RGBA8;\r\n    case 'rgba8unorm-srgb': return Format.SRGB8_A8;\r\n    case 'rgba8snorm': return Format.RGBA8SN;\r\n    case 'rgba8uint': return Format.RGBA8UI;\r\n    case 'rgba8sint': return Format.RGBA8I;\r\n    case 'r16sint': return Format.R16I;\r\n    case 'r16uint': return Format.R16UI;\r\n    case 'r16float': return Format.R16F;\r\n    case 'rg16sint': return Format.RG16I;\r\n    case 'rg16uint': return Format.RG16UI;\r\n    case 'rg16float': return Format.RG16F;\r\n    case 'rgba16sint': return Format.RGBA16I;\r\n    case 'rgba16uint': return Format.RGBA16UI;\r\n    case 'rgba16float': return Format.RGBA16F;\r\n    case 'r32sint': return Format.R32I;\r\n    case 'r32uint': return Format.R32UI;\r\n    case 'r32float': return Format.R32F;\r\n    case 'rg32sint': return Format.RG32I;\r\n    case 'rg32uint': return Format.RG32UI;\r\n    case 'rg32float': return Format.RG32F;\r\n    case 'rgba32sint': return Format.RGBA32I;\r\n    case 'rgba32uint': return Format.RGBA32UI;\r\n    case 'rgba32float': return Format.RGBA32F;\r\n    case 'rgb10a2unorm': return Format.RGB10A2;\r\n    case 'depth24plus': return Format.DEPTH;\r\n    case 'depth24plus-stencil8': return Format.DEPTH_STENCIL;\r\n    case 'bc1-rgba-unorm': return Format.BC1_ALPHA;\r\n    case 'bc1-rgba-unorm-srgb': return Format.BC1_SRGB_ALPHA;\r\n    case 'bc2-rgba-unorm': return Format.BC2;\r\n    case 'bc2-rgba-unorm-srgb': return Format.BC2_SRGB;\r\n    case 'bc3-rgba-unorm': return Format.BC3;\r\n    case 'bc3-rgba-unorm-srgb': return Format.BC3_SRGB;\r\n    case 'bc4-r-snorm': return Format.BC4_SNORM;\r\n    case 'bc6h-rgb-float': return Format.BC6H_SF16;\r\n    case 'bc6h-rgb-ufloat': return Format.BC6H_UF16;\r\n    case 'bc7-rgba-unorm': return Format.BC7;\r\n    case 'bc7-rgba-unorm-srgb': return Format.BC7_SRGB;\r\n    default:\r\n        return Format.RGBA8;\r\n    }\r\n}\r\n\r\nexport function WGPUFormatToGFXFormat (format: GPUTextureFormat): Format {\r\n    return wGPUTextureFormatToGFXFormat(format);\r\n}\r\n\r\nexport function GFXTextureToWebGPUTexture (textureType: TextureType): GPUTextureViewDimension {\r\n    switch (textureType) {\r\n    case TextureType.TEX1D: return '1d';\r\n    case TextureType.TEX2D: return '2d';\r\n    case TextureType.TEX2D_ARRAY: return '2d-array';\r\n    case TextureType.TEX3D: return '3d';\r\n    case TextureType.CUBE: return 'cube';\r\n    default: {\r\n        error('Unsupported textureType, convert to WebGPUTexture failed.');\r\n        return '2d';\r\n    }\r\n    }\r\n}\r\n\r\nexport function GFXTextureUsageToNative (usage: TextureUsageBit): GPUTextureUsageFlags {\r\n    let nativeUsage: GPUTextureUsageFlags = 0;\r\n    if (usage & TextureUsageBit.TRANSFER_SRC) {\r\n        nativeUsage |= GPUTextureUsage.COPY_SRC;\r\n    }\r\n\r\n    if (usage & TextureUsageBit.TRANSFER_DST) {\r\n        nativeUsage |= GPUTextureUsage.COPY_DST;\r\n    }\r\n\r\n    if (usage & TextureUsageBit.SAMPLED) {\r\n        nativeUsage |= GPUTextureUsage.TEXTURE_BINDING;\r\n    }\r\n\r\n    if (usage & TextureUsageBit.STORAGE) {\r\n        nativeUsage |= GPUTextureUsage.STORAGE_BINDING;\r\n    }\r\n\r\n    if (usage & TextureUsageBit.COLOR_ATTACHMENT || usage & TextureUsageBit.DEPTH_STENCIL_ATTACHMENT) {\r\n        nativeUsage |= GPUTextureUsage.RENDER_ATTACHMENT;\r\n    }\r\n\r\n    if (!nativeUsage) {\r\n        // The default value is TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\r\n        nativeUsage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT;\r\n    }\r\n\r\n    if ((nativeUsage & GPUTextureUsage.TEXTURE_BINDING)\r\n    && !(nativeUsage & (GPUTextureUsage.RENDER_ATTACHMENT))) {\r\n        nativeUsage |= GPUTextureUsage.RENDER_ATTACHMENT;\r\n    }\r\n\r\n    return nativeUsage;\r\n}\r\n\r\nexport const WebGPUStencilOp: GPUStencilOperation[] = [\r\n    'zero',\r\n    'keep',\r\n    'replace',\r\n    'increment-clamp',\r\n    'decrement-clamp',\r\n    'invert',\r\n    'increment-wrap',\r\n    'decrement-wrap',\r\n];\r\n\r\nexport const WebGPUCompereFunc: GPUCompareFunction[] = [\r\n    'never',\r\n    'less',\r\n    'equal',\r\n    'less-equal',\r\n    'greater',\r\n    'not-equal',\r\n    'greater-equal',\r\n    'always',\r\n];\r\n\r\nexport const WebGPUBlendOps: GPUBlendOperation[] = [\r\n    'add',\r\n    'subtract',\r\n    'reverse-subtract',\r\n    'min',\r\n    'max',\r\n];\r\n\r\nexport function WebGPUBlendMask (mask: ColorMask): GPUColorWriteFlags {\r\n    switch (mask) {\r\n    case ColorMask.R:\r\n        return GPUColorWrite.RED;\r\n    case ColorMask.G:\r\n        return GPUColorWrite.GREEN;\r\n    case ColorMask.B:\r\n        return GPUColorWrite.BLUE;\r\n    case ColorMask.A:\r\n        return GPUColorWrite.ALPHA;\r\n    default:\r\n        return GPUColorWrite.ALL;\r\n    }\r\n}\r\n\r\nexport const WebGPUBlendFactors: GPUBlendFactor[] = [\r\n    'zero',\r\n    'one',\r\n    'src-alpha',\r\n    'dst-alpha',\r\n    'one-minus-src-alpha',\r\n    'one-minus-dst-alpha',\r\n    'src',\r\n    'dst',\r\n    'one-minus-src',\r\n    'one-minus-dst',\r\n    'src-alpha-saturated',\r\n    'constant', // CONSTANT_COLOR\r\n    'one-minus-constant', // ONE_MINUS_CONSTANT_COLOR\r\n    'src-alpha', // CONSTANT_ALPHA: not supported\r\n    'one-minus-src-alpha', // ONE_MINUS_CONSTANT_ALPHA: not supported\r\n];\r\n\r\nexport enum WebGPUCmd {\r\n    BEGIN_RENDER_PASS,\r\n    END_RENDER_PASS,\r\n    BIND_STATES,\r\n    DRAW,\r\n    UPDATE_BUFFER,\r\n    COPY_BUFFER_TO_TEXTURE,\r\n    COUNT,\r\n}\r\n\r\nexport abstract class WebGPUCmdObject {\r\n    public cmdType: WebGPUCmd;\r\n    public refCount = 0;\r\n\r\n    constructor (type: WebGPUCmd) {\r\n        this.cmdType = type;\r\n    }\r\n\r\n    public abstract clear ();\r\n}\r\n\r\nexport class WebGPUCmdBeginRenderPass extends WebGPUCmdObject {\r\n    public gpuRenderPass: IWebGPUGPURenderPass | null = null;\r\n    public gpuFramebuffer: IWebGPUGPUFramebuffer | null = null;\r\n    public renderArea = new Rect();\r\n    public clearColors: Color[] = [];\r\n    public clearDepth = 1.0;\r\n    public clearStencil = 0;\r\n\r\n    constructor () {\r\n        super(WebGPUCmd.BEGIN_RENDER_PASS);\r\n    }\r\n\r\n    public clear (): void {\r\n        this.gpuFramebuffer = null;\r\n        this.clearColors.length = 0;\r\n    }\r\n}\r\n\r\nexport class WebGPUCmdBindStates extends WebGPUCmdObject {\r\n    public gpuPipelineState: IWebGPUGPUPipelineState | null = null;\r\n    public gpuInputAssembler: IWebGPUGPUInputAssembler | null = null;\r\n    public gpuDescriptorSets: IWebGPUGPUDescriptorSet[] = [];\r\n    public dynamicOffsets: number[] = [];\r\n    public viewport: Viewport | null = null;\r\n    public scissor: Rect | null = null;\r\n    public lineWidth: number | null = null;\r\n    public depthBias: IWebGPUDepthBias | null = null;\r\n    public blendConstants: number[] = [];\r\n    public depthBounds: IWebGPUDepthBounds | null = null;\r\n    public stencilWriteMask: IWebGPUStencilWriteMask | null = null;\r\n    public stencilCompareMask: IWebGPUStencilCompareMask | null = null;\r\n\r\n    constructor () {\r\n        super(WebGPUCmd.BIND_STATES);\r\n    }\r\n\r\n    public clear (): void {\r\n        this.gpuPipelineState = null;\r\n        this.gpuInputAssembler = null;\r\n        this.gpuDescriptorSets.length = 0;\r\n        this.dynamicOffsets.length = 0;\r\n        this.viewport = null;\r\n        this.scissor = null;\r\n        this.lineWidth = null;\r\n        this.depthBias = null;\r\n        this.blendConstants.length = 0;\r\n        this.depthBounds = null;\r\n        this.stencilWriteMask = null;\r\n        this.stencilCompareMask = null;\r\n    }\r\n}\r\n\r\nexport class WebGPUCmdDraw extends WebGPUCmdObject {\r\n    public drawInfo = new DrawInfo();\r\n\r\n    constructor () {\r\n        super(WebGPUCmd.DRAW);\r\n    }\r\n\r\n    public clear (): void {\r\n        // nothing\r\n    }\r\n}\r\n\r\nexport class WebGPUCmdUpdateBuffer extends WebGPUCmdObject {\r\n    public gpuBuffer: IWebGPUGPUBuffer | null = null;\r\n    public buffer: BufferSource | null = null;\r\n    public offset = 0;\r\n    public size = 0;\r\n\r\n    constructor () {\r\n        super(WebGPUCmd.UPDATE_BUFFER);\r\n    }\r\n\r\n    public clear (): void {\r\n        this.gpuBuffer = null;\r\n        this.buffer = null;\r\n    }\r\n}\r\n\r\nexport class WebGPUCmdCopyBufferToTexture extends WebGPUCmdObject {\r\n    public gpuTexture: IWebGPUTexture | null = null;\r\n    public buffers: ArrayBufferView[] = [];\r\n    public regions: BufferTextureCopy[] = [];\r\n\r\n    constructor () {\r\n        super(WebGPUCmd.COPY_BUFFER_TO_TEXTURE);\r\n    }\r\n\r\n    public clear (): void {\r\n        this.gpuTexture = null;\r\n        this.buffers.length = 0;\r\n        this.regions.length = 0;\r\n    }\r\n}\r\n\r\nexport class WebGPUCmdPackage {\r\n    public cmds: CachedArray<WebGPUCmd> = new CachedArray(1);\r\n    public beginRenderPassCmds: CachedArray<WebGPUCmdBeginRenderPass> = new CachedArray(1);\r\n    public bindStatesCmds: CachedArray<WebGPUCmdBindStates> = new CachedArray(1);\r\n    public drawCmds: CachedArray<WebGPUCmdDraw> = new CachedArray(1);\r\n    public updateBufferCmds: CachedArray<WebGPUCmdUpdateBuffer> = new CachedArray(1);\r\n    public copyBufferToTextureCmds: CachedArray<WebGPUCmdCopyBufferToTexture> = new CachedArray(1);\r\n\r\n    public clearCmds (allocator: WebGPUCommandAllocator): void {\r\n        if (this.beginRenderPassCmds.length) {\r\n            allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);\r\n            this.beginRenderPassCmds.clear();\r\n        }\r\n\r\n        if (this.bindStatesCmds.length) {\r\n            allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);\r\n            this.bindStatesCmds.clear();\r\n        }\r\n\r\n        if (this.drawCmds.length) {\r\n            allocator.drawCmdPool.freeCmds(this.drawCmds);\r\n            this.drawCmds.clear();\r\n        }\r\n\r\n        if (this.updateBufferCmds.length) {\r\n            allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);\r\n            this.updateBufferCmds.clear();\r\n        }\r\n\r\n        if (this.copyBufferToTextureCmds.length) {\r\n            allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);\r\n            this.copyBufferToTextureCmds.clear();\r\n        }\r\n\r\n        this.cmds.clear();\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncCreateBuffer (device: WebGPUDevice, gpuBuffer: IWebGPUGPUBuffer): void {\r\n    const nativeDevice: GPUDevice = device.nativeDevice!;\r\n\r\n    const bufferDesc = {} as GPUBufferDescriptor;\r\n    bufferDesc.size = gpuBuffer.size;\r\n\r\n    let bufferUsage = 0x0;\r\n    if ((gpuBuffer.usage & BufferUsageBit.INDEX || gpuBuffer.usage & BufferUsageBit.VERTEX) && !(gpuBuffer.usage & BufferUsageBit.TRANSFER_DST)) {\r\n        gpuBuffer.usage |= BufferUsageBit.TRANSFER_DST;\r\n    }\r\n    if (gpuBuffer.usage & BufferUsageBit.VERTEX) bufferUsage |= GPUBufferUsage.VERTEX;\r\n    if (gpuBuffer.usage & BufferUsageBit.INDEX) bufferUsage |= GPUBufferUsage.INDEX;\r\n    if (gpuBuffer.usage & BufferUsageBit.UNIFORM) bufferUsage |= GPUBufferUsage.UNIFORM;\r\n    if (gpuBuffer.usage & BufferUsageBit.INDIRECT) bufferUsage |= GPUBufferUsage.INDIRECT;\r\n    if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) bufferUsage |= GPUBufferUsage.COPY_SRC;\r\n    if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) bufferUsage |= GPUBufferUsage.COPY_DST;\r\n    if (gpuBuffer.usage & BufferUsageBit.STORAGE) bufferUsage |= GPUBufferUsage.STORAGE;\r\n\r\n    if (bufferUsage === 0x0) {\r\n        warn('Unsupported GFXBufferType yet, create UNIFORM buffer in default.');\r\n        bufferUsage |= GPUBufferUsage.UNIFORM;\r\n    }\r\n\r\n    if (!(bufferUsage & GPUBufferUsage.COPY_DST)) {\r\n        bufferUsage |= GPUBufferUsage.COPY_DST;\r\n    }\r\n    bufferDesc.usage = bufferUsage;\r\n    gpuBuffer.gpuTarget = bufferUsage;\r\n    gpuBuffer.gpuBuffer = nativeDevice.createBuffer(bufferDesc);\r\n}\r\n\r\nexport function WebGPUCmdFuncDestroyBuffer (device: WebGPUDevice, gpuBuffer: IWebGPUGPUBuffer): void {\r\n    if (gpuBuffer.gpuBuffer) {\r\n        gpuBuffer.gpuBuffer.destroy();\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncResizeBuffer (device: WebGPUDevice, gpuBuffer: IWebGPUGPUBuffer): void {\r\n    WebGPUCmdFuncDestroyBuffer(device, gpuBuffer);\r\n    WebGPUCmdFuncCreateBuffer(device, gpuBuffer);\r\n}\r\n\r\nexport function WebGPUCmdFuncUpdateBuffer (\r\n    device: WebGPUDevice,\r\n    gpuBuffer: IWebGPUGPUBuffer,\r\n    buffer: BufferSource,\r\n    offset: number,\r\n    size: number,\r\n): void {\r\n    if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {\r\n        gpuBuffer.indirects.length = offset;\r\n        Array.prototype.push.apply(gpuBuffer.indirects, (buffer as IndirectBuffer).drawInfos);\r\n    } else {\r\n        const nativeDevice: GPUDevice = device.nativeDevice!;\r\n        let buff = buffer as ArrayBuffer;\r\n        let rawBuffer: ArrayBuffer;\r\n\r\n        // arraybuffer size not equal to buff.bytelength, so new another array\r\n        buff = buff.slice(0, size);\r\n\r\n        if ('buffer' in buff) {\r\n            // es-lint as any\r\n            rawBuffer = (buff as any).buffer;\r\n        } else {\r\n            rawBuffer = buff;\r\n        }\r\n\r\n        if (rawBuffer.byteLength !== size) {\r\n            rawBuffer = rawBuffer.slice(0, size);\r\n        }\r\n        // Buffer.gpubuffer may not able to be mapped directly, so staging buffer here.\r\n        const stagingBuffer = nativeDevice.createBuffer({\r\n            label: `staging buffer ${size}`,\r\n            size,\r\n            usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\r\n            mappedAtCreation: true,\r\n        });\r\n        const mappedRange = stagingBuffer.getMappedRange();\r\n        new Uint8Array(mappedRange).set(new Uint8Array(rawBuffer));\r\n        stagingBuffer.unmap();\r\n        const commandEncoder = nativeDevice.createCommandEncoder();\r\n        commandEncoder.copyBufferToBuffer(stagingBuffer, 0, gpuBuffer.gpuBuffer as GPUBuffer, offset, size);\r\n        const commandBuffer = commandEncoder.finish();\r\n        nativeDevice.queue.submit([commandBuffer]);\r\n        stagingBuffer.destroy();\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncCreateTexture (device: WebGPUDevice, gpuTexture: IWebGPUTexture): void {\r\n    // dimension optional\r\n    gpuTexture.gpuTarget = GFXTextureToWebGPUTexture(gpuTexture.type);\r\n    gpuTexture.gpuInternalFmt = GFXFormatToWGPUTextureFormat(gpuTexture.format);\r\n    gpuTexture.gpuFormat = GFXFormatToWGPUFormat(gpuTexture.format);\r\n    gpuTexture.gpuUsage = GFXTextureUsageToNative(gpuTexture.usage);\r\n    gpuTexture.gpuWrapS = gpuTexture.isPowerOf2 ? 'repeat' : 'clamp-to-edge';\r\n    gpuTexture.gpuWrapT = gpuTexture.isPowerOf2 ? 'repeat' : 'clamp-to-edge';\r\n    gpuTexture.gpuMinFilter = 'linear';\r\n    gpuTexture.gpuMagFilter = 'linear';\r\n    // only 1 and 4 supported.\r\n    gpuTexture.samples = Number(gpuTexture.samples) > 1 ? 4 : 1;\r\n    const texDescriptor: GPUTextureDescriptor = {\r\n        size: [gpuTexture.width, gpuTexture.height, gpuTexture.arrayLayer],\r\n        mipLevelCount: gpuTexture.mipLevel,\r\n        sampleCount: gpuTexture.samples,\r\n        format: gpuTexture.gpuFormat,\r\n        usage: gpuTexture.gpuUsage,\r\n    };\r\n\r\n    gpuTexture.gpuTexture = device.nativeDevice!.createTexture(texDescriptor);\r\n}\r\n\r\nexport function WebGPUCmdFuncDestroyTexture (gpuTexture: IWebGPUTexture): void {\r\n    if (gpuTexture.gpuTexture) {\r\n        gpuTexture.gpuTexture.destroy();\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncResizeTexture (device: WebGPUDevice, gpuTexture: IWebGPUTexture): void {\r\n    if (gpuTexture.gpuTexture) {\r\n        WebGPUCmdFuncDestroyTexture(gpuTexture);\r\n    }\r\n    WebGPUCmdFuncCreateTexture(device, gpuTexture);\r\n}\r\n\r\nexport function WebGPUCmdFuncCreateSampler (device: WebGPUDevice, gpuSampler: IWebGPUGPUSampler): void {\r\n    const nativeDevice: GPUDevice = device.nativeDevice!;\r\n\r\n    gpuSampler.gpuMinFilter = (gpuSampler.minFilter === Filter.LINEAR || gpuSampler.minFilter === Filter.ANISOTROPIC) ? 'linear' : 'nearest';\r\n    gpuSampler.gpuMagFilter = (gpuSampler.magFilter === Filter.LINEAR || gpuSampler.magFilter === Filter.ANISOTROPIC) ? 'linear' : 'nearest';\r\n    gpuSampler.gpuMipFilter = (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) ? 'linear' : 'nearest';\r\n    gpuSampler.gpuWrapS = WebGPUAdressMode[gpuSampler.addressU];\r\n    gpuSampler.gpuWrapT = WebGPUAdressMode[gpuSampler.addressV];\r\n    gpuSampler.gpuWrapR = WebGPUAdressMode[gpuSampler.addressW];\r\n\r\n    const samplerDesc = {} as GPUSamplerDescriptor;\r\n    samplerDesc.addressModeU = gpuSampler.gpuWrapS;\r\n    samplerDesc.addressModeV = gpuSampler.gpuWrapT;\r\n    samplerDesc.addressModeW = gpuSampler.gpuWrapR;\r\n    samplerDesc.minFilter = gpuSampler.gpuMinFilter;\r\n    samplerDesc.magFilter = gpuSampler.gpuMagFilter;\r\n    samplerDesc.mipmapFilter = gpuSampler.gpuMipFilter;\r\n    samplerDesc.lodMinClamp = 0;// gpuSampler.minLOD;\r\n    samplerDesc.lodMaxClamp = gpuSampler.mipLevel;// gpuSampler.maxLOD;\r\n    if (WebGPUCompareFunc[gpuSampler.compare] !== 'always') {\r\n        samplerDesc.compare = WebGPUCompareFunc[gpuSampler.compare];\r\n    }\r\n    samplerDesc.maxAnisotropy = gpuSampler.maxAnisotropy || 1;\r\n    const sampler: GPUSampler = nativeDevice.createSampler(samplerDesc);\r\n    gpuSampler.gpuSampler = sampler;\r\n}\r\n\r\nexport function WebGPUCmdFuncDestroySampler (device: WebGPUDevice, gpuSampler: IWebGPUGPUSampler): void {\r\n    if (gpuSampler.gpuSampler) {\r\n        gpuSampler.gpuSampler = null;\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncDestroyFramebuffer (device: WebGPUDevice, gpuFramebuffer: IWebGPUGPUFramebuffer): void {\r\n    if (gpuFramebuffer.gpuFramebuffer) {\r\n        gpuFramebuffer.gpuFramebuffer.destroy();\r\n        gpuFramebuffer.gpuFramebuffer = null;\r\n    }\r\n}\r\n\r\nconst copyTexToBufferDesc: GPUBufferDescriptor = {} as GPUBufferDescriptor;\r\nconst destArrayBuffer: ArrayBuffer[] = [];\r\nexport async function WebGPUCmdFuncCopyTextureToBuffer (\r\n    device: WebGPUDevice,\r\n    texture: IWebGPUTexture,\r\n    buffers: ArrayBufferView[],\r\n    regions: readonly BufferTextureCopy[],\r\n): Promise<void> {\r\n    let x = 0;\r\n    let y = 0;\r\n    let w = 1;\r\n    let h = 1;\r\n    const nativeDevice: GPUDevice = device.nativeDevice!;\r\n    const commandEncoder = nativeDevice.createCommandEncoder({});\r\n    const regionSize = regions.length;\r\n    for (let k = 0; k < regionSize; k++) {\r\n        if (destArrayBuffer[k]) {\r\n            (buffers[k] as Uint8Array).set(new Uint8Array(destArrayBuffer[k]), 0);\r\n        }\r\n        copyTexToBufferDesc.size = buffers[k].byteLength;\r\n        copyTexToBufferDesc.usage = GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST;\r\n\r\n        const copyDestBuffer = nativeDevice.createBuffer(copyTexToBufferDesc);\r\n        const region = regions[k];\r\n        x = region.texOffset.x;\r\n        y = region.texOffset.y;\r\n        w = region.texExtent.width;\r\n        h = region.texExtent.height;\r\n\r\n        commandEncoder.copyTextureToBuffer({\r\n            texture: texture.gpuTexture!,\r\n            mipLevel: 0,\r\n            origin: {\r\n                x,\r\n                y,\r\n            },\r\n        }, {\r\n            buffer: copyDestBuffer,\r\n            offset: 0,\r\n            bytesPerRow: w * 4,\r\n            rowsPerImage: h,\r\n        }, {\r\n            width: w,\r\n            height: h,\r\n        });\r\n\r\n        nativeDevice.queue.submit([commandEncoder.finish()]);\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await copyDestBuffer.mapAsync(GPUMapMode.READ);\r\n        destArrayBuffer[k] = copyDestBuffer.getMappedRange();\r\n        (buffers[k] as Uint8Array).set(new Uint8Array(destArrayBuffer[k]), 0);\r\n    }\r\n}\r\n\r\nexport const SEPARATE_SAMPLER_BINDING_OFFSET = 16;\r\nfunction seperateCombinedSamplerTexture (shaderSource: string): string {\r\n    // gather\r\n    const samplerReg = /.*?(\\(set = \\d+, binding = )(\\d+)\\) uniform[^;]+sampler(\\w*) (\\w+);/g;\r\n    let iter = samplerReg.exec(shaderSource);\r\n    // samplerName, samplerType\r\n    const referredMap = new Map<string, string>();\r\n    while (iter) {\r\n        const samplerName = iter[4];\r\n        const samplerType = iter[3];\r\n        referredMap.set(samplerName, samplerType);\r\n        iter = samplerReg.exec(shaderSource);\r\n    }\r\n\r\n    let code = shaderSource;\r\n    const sampReg = /.*?(\\(set = \\d+, binding = )(\\d+)\\) uniform[^;]+sampler(\\w*) (\\w+);/g;\r\n    let it = sampReg.exec(code);\r\n    while (it) {\r\n        code = code.replace(sampReg, `layout$1 $2) uniform texture$3 $4;\\n\r\n        layout$1 $2 + ${SEPARATE_SAMPLER_BINDING_OFFSET}) uniform sampler $4_sampler;\\n`);\r\n        it = sampReg.exec(code);\r\n    }\r\n\r\n    const builtinSample = ['texture', 'textureSize', 'texelFetch', 'textureLod'];\r\n    const replaceBultin = (samplerName: string, samplerType: string, target: string): string => {\r\n        builtinSample.forEach((sampleFunc) => {\r\n            const builtinSampleReg = new RegExp(`${sampleFunc}\\\\s*\\\\(\\\\s*${samplerName}\\\\s*,`);\r\n            let builtinFuncIter = builtinSampleReg.exec(target);\r\n            while (builtinFuncIter) {\r\n                target = target.replace(builtinFuncIter[0], `${sampleFunc}(sampler${samplerType}(${samplerName}, ${samplerName}_sampler),`);\r\n                builtinFuncIter = builtinSampleReg.exec(target);\r\n            }\r\n        });\r\n        return target;\r\n    };\r\n\r\n    const funcReg = /\\s([\\S]+)\\s*\\(([\\w\\s,]+)\\)[\\s|\\\\|n]*{/g;\r\n    let funcIter = funcReg.exec(code);\r\n    const funcSet = new Set<string>();\r\n    const paramTypeMap = new Map<string, string>();\r\n    while (funcIter) {\r\n        paramTypeMap.clear();\r\n\r\n        const params = funcIter[2];\r\n        let paramsRes = params.slice();\r\n        if (params.includes('sampler')) {\r\n            const paramIndexSet = new Set<number>();\r\n            const paramArr = params.split(',');\r\n            const paramSize = paramArr.length;\r\n            for (let i = 0; i < paramSize; ++i) {\r\n                const paramDecl = paramArr[i].split(' ');\r\n                const typeDecl = paramDecl[paramDecl.length - 2];\r\n                if (typeDecl.includes('sampler') && typeDecl !== 'sampler') {\r\n                    const samplerType = typeDecl.replace('sampler', '');\r\n                    const paramName = paramDecl[paramDecl.length - 1];\r\n                    paramsRes = paramsRes.replace(paramArr[i], ` texture${samplerType} ${paramName}, sampler ${paramName}_sampler`);\r\n                    paramIndexSet.add(i);\r\n                    paramTypeMap.set(paramName, samplerType);\r\n                }\r\n            }\r\n\r\n            code = code.replace(params, paramsRes);\r\n\r\n            const funcName = funcIter[1];\r\n            // function may overload\r\n            if (!funcSet.has(funcName)) {\r\n                const funcSamplerReg = new RegExp(`${funcName}\\\\s*?\\\\((\\\\s*[^;\\\\{]+)`, 'g');\r\n                let matched;\r\n                // eslint-disable-next-line no-cond-assign\r\n                while ((matched = funcSamplerReg.exec(code)) !== null) {\r\n                    if (!matched[1].match(/\\b\\w+\\b\\s*\\b\\w+\\b/g)) {\r\n                        const stripStr = matched[1][matched[1].length - 1] === ')' ? matched[1].slice(0, -1) : matched[1];\r\n                        const params = stripStr.split(',');\r\n                        let queued = 0; // '('\r\n                        let paramIndex = 0;\r\n                        const paramSize = params.length;\r\n                        for (let i = 0; i < paramSize; ++i) {\r\n                            if (params[i].includes('(')) {\r\n                                ++queued;\r\n                            }\r\n                            if (params[i].includes(')')) {\r\n                                --queued;\r\n                            }\r\n\r\n                            if (!queued || i === paramSize - 1) {\r\n                                if (paramIndexSet.has(paramIndex)) {\r\n                                    params[i] += `, ${params[i]}_sampler`;\r\n                                }\r\n                                ++paramIndex;\r\n                            }\r\n                        }\r\n                        const newParams = params.join(',');\r\n                        const newInvokeStr = matched[0].replace(stripStr, newParams);\r\n                        code = code.replace(matched[0] as string, newInvokeStr as string);\r\n                    }\r\n                }\r\n            }\r\n\r\n            let count = 1;\r\n            let startIndex = code.indexOf(funcIter[1], funcIter.index);\r\n            startIndex = code.indexOf('{', startIndex) + 1;\r\n            let endIndex = 0;\r\n            while (count) {\r\n                if (code.charAt(startIndex) === '{') {\r\n                    ++count;\r\n                } else if (code.charAt(startIndex) === '}') {\r\n                    --count;\r\n                }\r\n\r\n                if (count === 0) {\r\n                    endIndex = startIndex;\r\n                    break;\r\n                }\r\n\r\n                const nextLeft = code.indexOf('{', startIndex + 1);\r\n                const nextRight = code.indexOf('}', startIndex + 1);\r\n                startIndex = nextLeft === -1 ? nextRight : Math.min(nextLeft, nextRight);\r\n            }\r\n            const funcBody = code.slice(funcIter.index, endIndex);\r\n            let newFunc = funcBody;\r\n            paramTypeMap.forEach((type, name) => {\r\n                newFunc = replaceBultin(name, type, newFunc);\r\n            });\r\n\r\n            code = code.replace(funcBody, newFunc);\r\n            funcSet.add(funcIter[1]);\r\n        }\r\n        funcIter = funcReg.exec(code);\r\n    }\r\n\r\n    referredMap.forEach((type, name) => {\r\n        code = replaceBultin(name, type, code);\r\n    });\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    // isNan, isInf has been removed in dawn:tint\r\n\r\n    let functionDefs = '';\r\n    const precisionKeyWord = 'highp';\r\n    const isNanIndex = code.indexOf('isnan');\r\n    if (isNanIndex !== -1) {\r\n        // getPrecision(isNanIndex);\r\n        functionDefs += `\\n\r\n         bool isNan(${precisionKeyWord} float val) {\r\n             return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\r\n         }\r\n         \\n`;\r\n        code = code.replace(/isnan\\(/gi, 'isNan(');\r\n    }\r\n\r\n    const isInfIndex = code.indexOf('isinf');\r\n    if (isInfIndex !== -1) {\r\n        // getPrecision(isInfIndex);\r\n        functionDefs += `\\n\r\n         bool isInf(${precisionKeyWord} float x) {\r\n             return x == x * 2.0 && x != 0.0;\r\n         }\r\n         \\n`;\r\n        code = code.replace(/isinf\\(/gi, 'isInf(');\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////\r\n\r\n    let firstPrecisionIdx = code.indexOf('precision');\r\n    firstPrecisionIdx = code.indexOf(';', firstPrecisionIdx);\r\n    firstPrecisionIdx += 1;\r\n    code = `${code.slice(0, firstPrecisionIdx)}\\n${functionDefs}\\n${code.slice(firstPrecisionIdx)}`;\r\n\r\n    return code;\r\n}\r\n\r\nfunction reflect (wgsl: string[]): number[][] {\r\n    const bindingList: number[][] = [];\r\n    for (const wgslStr of wgsl) {\r\n        // @group(1) @binding(0) var<uniform> x_78 : Constants;\r\n        // @group(1) @binding(1) var albedoMap : texture_2d<f32>;\r\n        const reg = /@group\\((\\d)\\)\\s+@binding\\((\\d+)\\)/g;\r\n        let iter = reg.exec(wgslStr);\r\n        while (iter) {\r\n            const set = +iter[1];\r\n            const binding = +iter[2];\r\n            while (bindingList.length <= set) {\r\n                bindingList.push([]);\r\n            }\r\n            bindingList[set][bindingList[set].length] = binding;\r\n            iter = reg.exec(wgslStr);\r\n        }\r\n    }\r\n    return bindingList;\r\n}\r\n\r\ninterface ClearPassData {\r\n    vertShader: GPUShaderModule | null;\r\n    fragShader: GPUShaderModule | null;\r\n    bindGroupLayout: GPUBindGroupLayout | null;\r\n    pipelineLayout: GPUPipelineLayout | null;\r\n    pipeline: GPURenderPipeline | null;\r\n}\r\nconst clearPassData: ClearPassData = {\r\n    vertShader: null,\r\n    fragShader: null,\r\n    bindGroupLayout: null,\r\n    pipelineLayout: null,\r\n    pipeline: null,\r\n};\r\nexport function clearRect (device: WebGPUDevice, texture: IWebGPUTexture, renderArea: Rect, color: Color): void {\r\n    const format = texture.gpuTexture!.format;\r\n    const dimension = texture.gpuTarget;\r\n    const nativeDevice = device.nativeDevice!;\r\n    if (!clearPassData.vertShader) {\r\n        const clearQuadVert = `\r\n        struct VertexOutput {\r\n            @builtin(position) Position: vec4<f32>,\r\n        }\r\n\r\n        @vertex\r\n        fn main(@builtin(vertex_index) VertexIndex: u32) -> VertexOutput {\r\n            var pos = array<vec2<f32>, 6>(\r\n            vec2<f32>(1.0, 1.0),\r\n            vec2<f32>(1.0, -1.0),\r\n            vec2<f32>(-1.0, -1.0),\r\n            vec2<f32>(1.0, 1.0),\r\n            vec2<f32>(-1.0, -1.0),\r\n            vec2<f32>(-1.0, 1.0)\r\n            );\r\n\r\n            var output: VertexOutput;\r\n            output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n            return output;\r\n        }\r\n        `;\r\n\r\n        const clearQuadFrag = `\r\n        struct ClearColor {\r\n            color: vec4<f32>,\r\n        }\r\n\r\n        @group(0) @binding(0) var<uniform> uClearColor: ClearColor;\r\n\r\n        @fragment\r\n        fn main() -> @location(0) vec4<f32> {\r\n            return uClearColor.color;\r\n        }\r\n        `;\r\n        const vertShaderModule = nativeDevice.createShaderModule({ code: clearQuadVert });\r\n        const fragShaderModule = nativeDevice.createShaderModule({ code: clearQuadFrag });\r\n        clearPassData.vertShader = vertShaderModule;\r\n        clearPassData.fragShader = fragShaderModule;\r\n\r\n        const bufferEntry: GPUBindGroupLayoutEntry = {\r\n            binding: 0,\r\n            visibility: GPUShaderStage.FRAGMENT,\r\n            buffer: {\r\n                type: 'uniform',\r\n                hasDynamicOffset: false,\r\n                minBindingSize: 16,\r\n            },\r\n        };\r\n        const bgLayoutDesc: GPUBindGroupLayoutDescriptor = {\r\n            label: 'clearPassBGLayout',\r\n            entries: [bufferEntry],\r\n        };\r\n\r\n        const bindGroupLayout = nativeDevice.createBindGroupLayout(bgLayoutDesc);\r\n        clearPassData.bindGroupLayout = bindGroupLayout;\r\n\r\n        const pipelineLayoutDesc: GPUPipelineLayoutDescriptor = {\r\n            label: 'clearPassPipelineLayout',\r\n            bindGroupLayouts: [clearPassData.bindGroupLayout],\r\n        };\r\n\r\n        const pipelineLayout = nativeDevice.createPipelineLayout(pipelineLayoutDesc);\r\n        clearPassData.pipelineLayout = pipelineLayout;\r\n\r\n        const vertexState: GPUVertexState = {\r\n            module: clearPassData.vertShader,\r\n            entryPoint: 'main',\r\n        };\r\n\r\n        const primitiveState: GPUPrimitiveState = {\r\n            topology: 'triangle-list',\r\n            frontFace: 'ccw',\r\n            cullMode: 'none',\r\n        };\r\n        const colorState: GPUColorTargetState = {\r\n            format,\r\n            writeMask: 0xF,\r\n        };\r\n\r\n        const fragState: GPUFragmentState = {\r\n            module: clearPassData.fragShader,\r\n            entryPoint: 'main',\r\n            targets: [colorState],\r\n        };\r\n        const multisample: GPUMultisampleState = {\r\n            count: 1,\r\n            alphaToCoverageEnabled: false,\r\n            mask: 0xFFFFFFFF,\r\n        };\r\n\r\n        const pipelineDesc: GPURenderPipelineDescriptor = {\r\n            label: 'clearPassPipeline',\r\n            layout: clearPassData.pipelineLayout,\r\n            vertex: vertexState,\r\n            primitive: primitiveState,\r\n            fragment: fragState,\r\n            multisample,\r\n        };\r\n        const pipeline = nativeDevice.createRenderPipeline(pipelineDesc);\r\n        clearPassData.pipeline = pipeline;\r\n    }\r\n    const commandEncoder: GPUCommandEncoder = nativeDevice.createCommandEncoder();\r\n    const desc: GPUTextureViewDescriptor = {\r\n        format,\r\n        dimension: '2d',\r\n        baseMipLevel: 0,\r\n        mipLevelCount: 1,\r\n        baseArrayLayer: 0,\r\n        arrayLayerCount: 1,\r\n        aspect: 'all',\r\n    };\r\n    const dstView = texture.gpuTexture?.createView(desc);\r\n    const bufferDesc: GPUBufferDescriptor = {\r\n        usage: GPUBufferUsage.UNIFORM,\r\n        size: 16,\r\n        mappedAtCreation: true,\r\n    };\r\n\r\n    const uniformBuffer = nativeDevice.createBuffer(bufferDesc);\r\n    const colorArr: number[] = [color.x, color.y, color.z, color.w];\r\n\r\n    const mappedBuffer = uniformBuffer.getMappedRange(0, 16);\r\n    const f32 = new Float32Array(mappedBuffer);\r\n    f32.set(colorArr);\r\n    uniformBuffer.unmap();\r\n\r\n    const entry: GPUBindGroupEntry = {\r\n        binding: 0,\r\n        resource: {\r\n            buffer: uniformBuffer,\r\n            offset: 0,\r\n            size: 16,\r\n        },\r\n    };\r\n\r\n    const bindgroupDesc: GPUBindGroupDescriptor = {\r\n        layout: clearPassData.bindGroupLayout!,\r\n        entries: [entry],\r\n    };\r\n    const bindGroup = nativeDevice.createBindGroup(bindgroupDesc);\r\n    const colorAttachment: GPURenderPassColorAttachment = {\r\n        view: dstView!,\r\n        loadOp: 'load',\r\n        storeOp: 'store',\r\n        clearValue: [0.88, 0.88, 0.88, 1.0],\r\n    };\r\n\r\n    const rpDesc: GPURenderPassDescriptor = {\r\n        colorAttachments: [colorAttachment],\r\n    };\r\n\r\n    const renderPassEncoder = commandEncoder.beginRenderPass(rpDesc);\r\n    renderPassEncoder.setPipeline(clearPassData.pipeline!);\r\n\r\n    renderPassEncoder.setBindGroup(0, bindGroup);\r\n    renderPassEncoder.setViewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height, 0.0, 1.0);\r\n    renderPassEncoder.setScissorRect(renderArea.x, renderArea.y, renderArea.width, renderArea.height);\r\n    renderPassEncoder.draw(6, 1, 0, 0);\r\n\r\n    renderPassEncoder.end();\r\n    const commandBuffer = commandEncoder.finish();\r\n    nativeDevice.queue.submit([commandBuffer]);\r\n    uniformBuffer.destroy();\r\n}\r\n\r\nfunction findEmployAttr (stage: IWebGPUGPUShaderStage): void {\r\n    if (stage.type !== ShaderStageFlagBit.VERTEX) {\r\n        return;\r\n    }\r\n    const locationRegex = /@location\\(\\d+\\)[ ]+\\w+/g;\r\n    const matches = stage.source.match(locationRegex);\r\n    if (!matches) {\r\n        return;\r\n    }\r\n    let idx = 0;\r\n    matches.forEach((match) => {\r\n        const locRegex = /@location\\((\\d+)\\)/g;\r\n        const matchLoc = match.match(locRegex)!;\r\n        const location = matchLoc[0].slice(matchLoc[0].indexOf('(') + 1, matchLoc[0].indexOf(')')).trim();\r\n        const locNameRegex = /@location\\(\\d+\\)/;\r\n        const locName = match.replace(locNameRegex, '').trim();\r\n        const rmvLocRegex = new RegExp(`,*[ ]*@location\\\\(\\\\d+\\\\)[ ]+${locName}+\\\\b\\\\s*:\\\\s*\\\\w+\\\\<\\\\w+\\\\>\\\\s*`);\r\n        const equalAttr = new RegExp(`\\\\b(\\\\w+)\\\\s*=[ ]*${locName}\\\\b\\\\s*;`, 'g');\r\n        const targetVar = stage.source.match(equalAttr)!;\r\n        const targetVarName = targetVar[0];\r\n        const searchTarVarName = targetVarName.slice(0, targetVarName.indexOf('=')).trim();\r\n        const matchCountRegex = new RegExp(`\\\\.*\\\\b${searchTarVarName}\\\\b\\\\.*`, 'g');\r\n        const matchesCount = stage.source.match(matchCountRegex);\r\n        const usageCount = matchesCount ? matchesCount.length : 0;\r\n        if (usageCount <= 2) {\r\n            stage.source = stage.source.replace(rmvLocRegex, '');\r\n            stage.source = stage.source.replace(equalAttr, '');\r\n            const varNameReg = new RegExp(`var\\\\<\\\\w+\\\\>\\\\s+${searchTarVarName}+\\\\s*:\\\\s*\\\\w+\\\\<\\\\w+\\\\>\\\\s*;`);\r\n            stage.source = stage.source.replace(varNameReg, '');\r\n        } else {\r\n            stage.attrs.set(parseInt(location), locName);\r\n        }\r\n        idx++;\r\n    });\r\n}\r\n\r\nexport function WebGPUCmdFuncCreateGPUShader (device: WebGPUDevice, gpuShader: IWebGPUGPUShader): void {\r\n    const nativeDevice = device.nativeDevice!;\r\n    const glslang = device.glslang;\r\n    const twgsl = device.twgsl;\r\n    const wgslCodes: string[] = [];\r\n    const stageSize = gpuShader.gpuStages.length;\r\n    for (let i = 0; i < stageSize; ++i) {\r\n        wgslCodes.length = 0;\r\n        const gpuStage = gpuShader.gpuStages[i];\r\n        const glslSource = seperateCombinedSamplerTexture(gpuStage.source);\r\n        const stageStr = gpuStage.type === ShaderStageFlagBit.VERTEX ? 'vertex'\r\n            : gpuStage.type === ShaderStageFlagBit.FRAGMENT ? 'fragment' : 'compute';\r\n        const sourceCode = `#version 450\\n#define CC_USE_WGPU 1\\n${glslSource}`;\r\n        const spv = glslang.compileGLSL(sourceCode, stageStr, false, '1.3');\r\n\r\n        let wgsl: string = twgsl.convertSpirV2WGSL(spv);\r\n        if (wgsl === '') {\r\n            error('empty wgsl');\r\n        }\r\n        gpuStage.source = wgsl;\r\n        findEmployAttr(gpuStage);\r\n        wgsl = gpuStage.source;\r\n        const shader: GPUShaderModule = nativeDevice?.createShaderModule({ code: wgsl });\r\n        // eslint-disable-next-line no-loop-func\r\n        shader.getCompilationInfo().then((compileInfo: GPUCompilationInfo) => {\r\n            compileInfo.messages.forEach((info) => {\r\n                log(sourceCode, wgsl, info.lineNum, info.linePos, info.type, info.message);\r\n            });\r\n        // eslint-disable-next-line no-loop-func\r\n        }).catch((compileInfo: GPUCompilationInfo) => {\r\n            compileInfo.messages.forEach((info) => {\r\n                log(sourceCode, wgsl, info.lineNum, info.linePos, info.type, info.message);\r\n            });\r\n        });\r\n        const shaderStage: GPUProgrammableStage = {\r\n            module: shader,\r\n            entryPoint: 'main',\r\n        };\r\n        gpuStage.gpuShader = shaderStage;\r\n        wgslCodes.push(wgsl);\r\n        const bindingList = reflect(wgslCodes);\r\n        gpuStage.bindings = bindingList;\r\n        const bindingListSize = bindingList.length;\r\n        for (let s = 0; s < bindingListSize; s++) {\r\n            const currBindingSize = bindingList[s].length;\r\n            if (currBindingSize) {\r\n                if (!gpuShader.bindings.has(s)) {\r\n                    gpuShader.bindings.set(s, []);\r\n                }\r\n                const bindings = gpuShader.bindings.get(s)!;\r\n                for (let b = 0; b < currBindingSize; b++) {\r\n                    if (!bindings.includes(bindingList[s][b])) {\r\n                        bindings.push(bindingList[s][b]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncDestroyShader (device: WebGPUDevice, gpuShader: IWebGPUGPUShader): void {\r\n    if (gpuShader.gpuProgram) {\r\n        gpuShader.gpuProgram = null;\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncCreateInputAssember (device: WebGPUDevice, gpuInputAssembler: IWebGPUGPUInputAssembler): void {\r\n    const attrSize = gpuInputAssembler.attributes.length;\r\n    gpuInputAssembler.gpuAttribs = new Array<IWebGPUAttrib>(attrSize);\r\n\r\n    const offsets = [0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n    for (let i = 0; i < attrSize; ++i) {\r\n        const attrib = gpuInputAssembler.attributes[i];\r\n\r\n        const stream = attrib.stream !== undefined ? attrib.stream : 0;\r\n\r\n        const gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];\r\n\r\n        const gpuType = 0;\r\n        const size = FormatInfos[attrib.format].size;\r\n\r\n        gpuInputAssembler.gpuAttribs[i] = {\r\n            name: attrib.name,\r\n            gpuBuffer: gpuBuffer.gpuBuffer,\r\n            gpuType,\r\n            size,\r\n            count: FormatInfos[attrib.format].count,\r\n            stride: gpuBuffer.stride,\r\n            componentCount: 4,\r\n            isNormalized: (attrib.isNormalized !== undefined ? attrib.isNormalized : false),\r\n            isInstanced: (attrib.isInstanced !== undefined ? attrib.isInstanced : false),\r\n            offset: offsets[stream],\r\n        };\r\n\r\n        offsets[stream] += size;\r\n    }\r\n}\r\n\r\nexport function WebGPUCmdFuncDestroyInputAssembler (device: WebGPUDevice, gpuInputAssembler: IWebGPUGPUInputAssembler): void {\r\n    // noop\r\n}\r\n\r\ninterface IWebGPUStateCache {\r\n    gpuPipelineState: IWebGPUGPUPipelineState | null;\r\n    gpuInputAssembler: IWebGPUGPUInputAssembler | null;\r\n    reverseCW: boolean;\r\n    gpuPrimitive: GPUPrimitiveTopology;\r\n    invalidateAttachments: number[];\r\n}\r\n\r\nfunction maxElementOfImageArray (bufInfoArr: BufferTextureCopy[]): number {\r\n    let maxSize = 0;\r\n    const bufInfoSize = bufInfoArr.length;\r\n    for (let i = 0; i < bufInfoSize; i++) {\r\n        const curSize = bufInfoArr[i].texExtent.width * bufInfoArr[i].texExtent.height * bufInfoArr[i].texExtent.depth;\r\n        maxSize = maxSize < curSize ? curSize : maxSize;\r\n    }\r\n    return maxSize;\r\n}\r\n\r\nexport function WebGPUCmdFuncCopyTexImagesToTexture (\r\n    device: WebGPUDevice,\r\n    texImages: TexImageSource[],\r\n    gpuTexture: IWebGPUTexture,\r\n    regions: BufferTextureCopy[],\r\n): void {\r\n    // name all native webgpu resource nativeXXX distinguished from gpuTexture passed in.\r\n    const nativeDevice = device.nativeDevice!;\r\n    const regionSize = regions.length;\r\n    for (let i = 0; i < regionSize; i++) {\r\n        const region = regions[i];\r\n        const texImg = texImages[i];\r\n        nativeDevice.queue.copyExternalImageToTexture(\r\n            { source: texImg },\r\n            {\r\n                texture: gpuTexture.gpuTexture!,\r\n                mipLevel: region.texSubres.mipLevel,\r\n                origin: {\r\n                    x: region.texOffset.x,\r\n                    y: region.texOffset.y,\r\n                    z: region.texSubres.baseArrayLayer,\r\n                },\r\n            },\r\n            [regions[i].texExtent.width, regions[i].texExtent.height, regions[i].texExtent.depth],\r\n        );\r\n    }\r\n    if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {\r\n        genMipMap(device, gpuTexture, 1, gpuTexture.mipLevel - 1, 0);\r\n    }\r\n}\r\n\r\nconst GFXSampleTypeToGPUTextureSampleType: GPUTextureSampleType[] = [\r\n    'float',\r\n    'unfilterable-float',\r\n    'sint',\r\n    'uint',\r\n];\r\n\r\nconst GFXViewDimensionToGPUViewDimension: GPUTextureViewDimension[] = [\r\n    '2d',\r\n    '2d',\r\n    '1d',\r\n    '1d',\r\n    '2d',\r\n    '2d-array',\r\n    '2d',\r\n    '2d-array',\r\n    '3d',\r\n    'cube',\r\n    'cube-array',\r\n    '2d',\r\n];\r\n\r\nconst GFXMemoryAccessToGPUStorageTextureAccess: (GPUStorageTextureAccess | undefined)[] = [\r\n    'read-only',\r\n    'read-only',\r\n    'write-only',\r\n    'read-write',\r\n];\r\n\r\nexport function createBindGroupLayoutEntry (currBind: DescriptorSetLayoutBinding): GPUBindGroupLayoutEntry[] {\r\n    const binding = currBind.binding;\r\n    // Define the mapping from ShaderStageFlagBit to GPUShaderStage\r\n    const gpuVisibility = GFXStageToWebGPUStage(currBind.stageFlags);\r\n    const entrys: GPUBindGroupLayoutEntry[] = [];\r\n    const entry: GPUBindGroupLayoutEntry = {\r\n        binding,\r\n        visibility: gpuVisibility,\r\n    };\r\n    entrys.push(entry);\r\n    const device = WebGPUDeviceManager.instance;\r\n    let entrySampler: GPUBindGroupLayoutEntry | null = null;\r\n    let samplerType = GFXSampleTypeToGPUTextureSampleType[currBind.sampleType];\r\n    if (samplerType === 'float' && !device.floatFilterable) { samplerType = 'unfilterable-float'; }\r\n    const isTexUnFilter = samplerType === 'unfilterable-float';\r\n    const viewDimension = GFXViewDimensionToGPUViewDimension[currBind.viewDimension];\r\n    const type = currBind.descriptorType;\r\n    const multisampled = currBind.viewDimension > 5 && currBind.viewDimension < 8;\r\n    switch (type) {\r\n    case DescriptorType.UNIFORM_BUFFER:\r\n    case DescriptorType.DYNAMIC_UNIFORM_BUFFER:\r\n        entry.buffer = {\r\n            type: 'uniform',\r\n            hasDynamicOffset: type === DescriptorType.DYNAMIC_UNIFORM_BUFFER,\r\n            minBindingSize: undefined,\r\n        };\r\n        break;\r\n\r\n    case DescriptorType.STORAGE_BUFFER:\r\n    case DescriptorType.DYNAMIC_STORAGE_BUFFER:\r\n        entry.buffer = {\r\n            type: 'storage',\r\n            hasDynamicOffset: type === DescriptorType.DYNAMIC_STORAGE_BUFFER,\r\n            minBindingSize: undefined,\r\n        };\r\n        break;\r\n\r\n    case DescriptorType.SAMPLER_TEXTURE:\r\n        // Assuming this is a combined image sampler\r\n        entry.texture = {\r\n            sampleType: samplerType, // or 'unfilterable-float', 'depth', 'sint', 'uint'\r\n            viewDimension, // 2d or 'cube', '3d', '1d'\r\n            multisampled,\r\n        };\r\n        entrySampler = {\r\n            binding: binding + SEPARATE_SAMPLER_BINDING_OFFSET,\r\n            visibility: gpuVisibility,\r\n        };\r\n        entrySampler.sampler = {\r\n            type: isTexUnFilter ? 'non-filtering' : 'filtering', // or 'non-filtering', 'comparison'\r\n        };\r\n        entrys.push(entrySampler);\r\n        break;\r\n\r\n    case DescriptorType.SAMPLER:\r\n        entry.sampler = {\r\n            type: isTexUnFilter ? 'non-filtering' : 'filtering', // or 'non-filtering', 'comparison'\r\n        };\r\n        break;\r\n\r\n    case DescriptorType.TEXTURE:\r\n        entry.texture = {\r\n            sampleType: samplerType, // or 'unfilterable-float', 'depth', 'sint', 'uint'\r\n            viewDimension, // or 'cube', '3d', '1d'\r\n            multisampled,\r\n        };\r\n        break;\r\n\r\n    case DescriptorType.STORAGE_IMAGE:\r\n        entry.storageTexture = {\r\n            access: GFXMemoryAccessToGPUStorageTextureAccess[currBind.access], // or 'read-only', 'read-write'\r\n            format: GFXFormatToWGPUFormat(currBind.format), // Choose the appropriate texture format\r\n            viewDimension, // or 'cube', '3d', '1d'\r\n        };\r\n        break;\r\n\r\n    case DescriptorType.INPUT_ATTACHMENT:\r\n        entry.texture = {\r\n            sampleType: samplerType, // or 'unfilterable-float', 'depth', 'sint', 'uint'\r\n            viewDimension, // or 'cube', '3d', '1d'\r\n            multisampled,\r\n        };\r\n        break;\r\n\r\n    default:\r\n        throw new Error(`Unsupported descriptor type: ${type}`);\r\n    }\r\n    return entrys;\r\n}\r\n\r\nexport function TextureSampleTypeTrait (format: Format): GPUTextureSampleType {\r\n    // See https://gpuweb.github.io/gpuweb/#texture-format-caps\r\n    switch (format) {\r\n    case Format.R8:\r\n    case Format.R8SN:\r\n    case Format.RG8:\r\n    case Format.RGBA8:\r\n    case Format.BGRA8:\r\n    case Format.RG8SN:\r\n    case Format.SRGB8_A8:\r\n    case Format.RGB10A2:\r\n    case Format.RGBA16F:\r\n        return 'float';\r\n    case Format.R8UI:\r\n    case Format.R16UI:\r\n    case Format.RG8UI:\r\n    case Format.R32UI:\r\n    case Format.RG16UI:\r\n    case Format.RGBA8UI:\r\n    case Format.RG32UI:\r\n    case Format.RGBA32UI:\r\n    case Format.RGBA16UI:\r\n    case Format.DEPTH_STENCIL:\r\n        return 'uint';\r\n    case Format.R8I:\r\n    case Format.R16I:\r\n    case Format.RG8I:\r\n    case Format.RG16I:\r\n    case Format.RGBA8I:\r\n    case Format.RG32I:\r\n    case Format.RGBA16I:\r\n    case Format.RGBA32I:\r\n    case Format.R32I:\r\n        return 'sint';\r\n    case Format.R16F:\r\n    case Format.R32F:\r\n    case Format.RG16F:\r\n    case Format.R11G11B10F:\r\n    case Format.RG32F:\r\n    case Format.RGBA32F:\r\n        return 'unfilterable-float';\r\n    case Format.DEPTH:\r\n        return 'depth';\r\n    default:\r\n        warn('Unsupported texture sample type yet. Please refer to the documentation for supported formats.');\r\n        return 'float';\r\n    }\r\n}\r\n\r\nexport function FormatToWGPUFormatType (format: Format): GPUTextureSampleType {\r\n    if (format === Format.DEPTH_STENCIL) {\r\n        return 'unfilterable-float';\r\n    }\r\n    return TextureSampleTypeTrait(format);\r\n}\r\n\r\ninterface MipmapPassData {\r\n    vertShader: GPUShaderModule;\r\n    fragShader: GPUShaderModule;\r\n    sampler: GPUSampler;\r\n    bindGroupLayout: GPUBindGroupLayout;\r\n    pipelineLayout: GPUPipelineLayout;\r\n    pipeline: GPURenderPipeline;\r\n}\r\n\r\nlet mipmapData: MipmapPassData;\r\n\r\nfunction genMipMap (device: WebGPUDevice, texture: IWebGPUTexture, fromLevel: number, levelCount: number, baseLayer: number): void {\r\n    const format = texture.gpuFormat;\r\n    const dimension = texture.gpuTarget;\r\n    const nativeDevice = device.nativeDevice!;\r\n    if (!mipmapData) {\r\n        mipmapData = {} as any;\r\n        const texQuadVert = `\r\n        struct VertexOutput {\r\n            @builtin(position) Position : vec4<f32>,\r\n            @location(0) fragUV : vec2<f32>,\r\n          }\r\n\r\n          @vertex\r\n          fn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n            var pos = array<vec2<f32>, 6>(\r\n              vec2<f32>( 1.0,  1.0),\r\n              vec2<f32>( 1.0, -1.0),\r\n              vec2<f32>(-1.0, -1.0),\r\n              vec2<f32>( 1.0,  1.0),\r\n              vec2<f32>(-1.0, -1.0),\r\n              vec2<f32>(-1.0,  1.0)\r\n            );\r\n\r\n            var uv = array<vec2<f32>, 6>(\r\n              vec2<f32>(1.0, 0.0),\r\n              vec2<f32>(1.0, 1.0),\r\n              vec2<f32>(0.0, 1.0),\r\n              vec2<f32>(1.0, 0.0),\r\n              vec2<f32>(0.0, 1.0),\r\n              vec2<f32>(0.0, 0.0)\r\n            );\r\n\r\n            var output : VertexOutput;\r\n            output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\r\n            output.fragUV = uv[VertexIndex];\r\n            return output;\r\n          }\r\n        `;\r\n        const texQuadFrag = `\r\n        @group(0) @binding(0) var mySampler : sampler;\r\n        @group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n\r\n        @fragment\r\n        fn frag_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\r\n        return textureSample(myTexture, mySampler, fragUV);\r\n        }\r\n        `;\r\n\r\n        const samplerDesc: GPUSamplerDescriptor = {};\r\n        samplerDesc.label = 'filterSampler';\r\n        samplerDesc.addressModeU = 'mirror-repeat';\r\n        samplerDesc.addressModeV = 'mirror-repeat';\r\n        samplerDesc.addressModeW = 'mirror-repeat';\r\n        samplerDesc.magFilter = 'linear';\r\n        samplerDesc.minFilter = 'linear';\r\n        samplerDesc.mipmapFilter = 'linear';\r\n        samplerDesc.lodMinClamp = 0.0;\r\n        samplerDesc.lodMaxClamp = 32.0;\r\n        samplerDesc.maxAnisotropy = 1;\r\n        mipmapData.sampler = nativeDevice.createSampler(samplerDesc);\r\n\r\n        const shaderDescVert: GPUShaderModule = nativeDevice.createShaderModule({\r\n            code: texQuadVert,\r\n        });\r\n        mipmapData.vertShader = shaderDescVert;\r\n        const shaderDescFrag: GPUShaderModule = nativeDevice.createShaderModule({\r\n            code: texQuadFrag,\r\n        });\r\n        mipmapData.fragShader = shaderDescFrag;\r\n\r\n        const samplerEntry: GPUBindGroupLayoutEntry = {\r\n            binding: 0,\r\n            visibility: GPUShaderStage.FRAGMENT,\r\n            sampler: {\r\n                type: 'filtering',\r\n            },\r\n        };\r\n\r\n        const textureEntry: GPUBindGroupLayoutEntry = {\r\n            binding: 1,\r\n            visibility: GPUShaderStage.FRAGMENT,\r\n            texture: {\r\n                sampleType: TextureSampleTypeTrait(texture.format),\r\n                viewDimension: '2d',\r\n                multisampled: false,\r\n            },\r\n        };\r\n\r\n        const bgLayoutDesc: GPUBindGroupLayoutDescriptor = {\r\n            label: 'fullscreenTexturedQuadBGLayout',\r\n            entries: [samplerEntry, textureEntry],\r\n        };\r\n\r\n        const bindGroupLayout = nativeDevice.createBindGroupLayout(bgLayoutDesc);\r\n        mipmapData.bindGroupLayout = bindGroupLayout;\r\n\r\n        const pipelineLayoutDesc: GPUPipelineLayoutDescriptor = {\r\n            label: 'fullscreenTexturedQuadPipelineLayout',\r\n            bindGroupLayouts: [bindGroupLayout],\r\n        };\r\n\r\n        const pipelineLayout = nativeDevice.createPipelineLayout(pipelineLayoutDesc);\r\n        mipmapData.pipelineLayout = pipelineLayout;\r\n\r\n        const vertexState: GPUVertexState = {\r\n            module: mipmapData.vertShader,\r\n            entryPoint: 'vert_main',\r\n            buffers: [],\r\n        };\r\n\r\n        const primitiveState: GPUPrimitiveState = {\r\n            topology: 'triangle-list',\r\n            frontFace: 'ccw',\r\n            cullMode: 'none',\r\n        };\r\n\r\n        const colorState: GPUColorTargetState = {\r\n            format,\r\n            writeMask: 0xF,\r\n        };\r\n\r\n        const fragState: GPUFragmentState = {\r\n            module: mipmapData.fragShader,\r\n            entryPoint: 'frag_main',\r\n            targets: [colorState],\r\n        };\r\n\r\n        const multisample: GPUMultisampleState = {\r\n            count: 1,\r\n            alphaToCoverageEnabled: false,\r\n            mask: 0xFFFFFFFF,\r\n        };\r\n\r\n        const pipelineDesc: GPURenderPipelineDescriptor = {\r\n            label: 'fullscreenTexturedQuadPipeline',\r\n            layout: pipelineLayout,\r\n            vertex: vertexState,\r\n            primitive: primitiveState,\r\n            fragment: fragState,\r\n            multisample,\r\n        };\r\n        const pipeline = nativeDevice.createRenderPipeline(pipelineDesc);\r\n        mipmapData.pipeline = pipeline;\r\n    }\r\n\r\n    const desc: GPUTextureViewDescriptor = {\r\n        format,\r\n        dimension: '2d',\r\n        baseMipLevel: fromLevel,\r\n        mipLevelCount: 1,\r\n        baseArrayLayer: baseLayer,\r\n        arrayLayerCount: 1,\r\n        aspect: 'all',\r\n    };\r\n\r\n    const commandEncoder: GPUCommandEncoder = nativeDevice.createCommandEncoder();\r\n\r\n    for (let i = fromLevel; i < fromLevel + levelCount; ++i) {\r\n        desc.baseMipLevel = i - 1;\r\n        const srcView: GPUTextureView = texture.gpuTexture!.createView(desc);\r\n        desc.baseMipLevel = i;\r\n        desc.baseArrayLayer = baseLayer;\r\n        desc.arrayLayerCount = 1;\r\n        const dstView: GPUTextureView = texture.gpuTexture!.createView(desc);\r\n\r\n        const entries: GPUBindGroupEntry[] = [\r\n            {\r\n                binding: 0,\r\n                resource: mipmapData.sampler,\r\n            },\r\n            {\r\n                binding: 1,\r\n                resource: srcView,\r\n            },\r\n        ];\r\n\r\n        const bindgroupDesc: GPUBindGroupDescriptor = {\r\n            layout: mipmapData.bindGroupLayout,\r\n            entries,\r\n        };\r\n\r\n        const bindGroup: GPUBindGroup = nativeDevice.createBindGroup(bindgroupDesc);\r\n\r\n        const colorAttachment: GPURenderPassColorAttachment = {\r\n            view: dstView,\r\n            loadOp: 'clear',\r\n            storeOp: 'store',\r\n            clearValue: [0.88, 0.88, 0.88, 1.0],\r\n        };\r\n\r\n        const rpDesc: GPURenderPassDescriptor = {\r\n            colorAttachments: [colorAttachment],\r\n        };\r\n\r\n        const renderPassEncoder: GPURenderPassEncoder = commandEncoder.beginRenderPass(rpDesc);\r\n        renderPassEncoder.setPipeline(mipmapData.pipeline);\r\n        renderPassEncoder.setBindGroup(0, bindGroup);\r\n        renderPassEncoder.draw(6, 1, 0, 0);\r\n        renderPassEncoder.end();\r\n    }\r\n\r\n    const commandBuffer = commandEncoder.finish();\r\n    nativeDevice.queue.submit([commandBuffer]);\r\n}\r\n\r\nexport function WebGPUCmdFuncCopyBuffersToTexture (\r\n    device: WebGPUDevice,\r\n    buffers: ArrayBufferView[],\r\n    gpuTexture: IWebGPUTexture,\r\n    regions: BufferTextureCopy[],\r\n): void {\r\n    const nativeDevice = device.nativeDevice!;\r\n    const dstFormat = gpuTexture.format;\r\n    const blockSize = formatAlignment(dstFormat);\r\n    const regionSize = regions.length;\r\n    for (let i = 0; i < regionSize; ++i) {\r\n        const region = regions[i];\r\n        const bufferPixelWidth = region.buffStride > 0 ? region.buffStride : region.texExtent.width;\r\n        const bufferPixelHeight = region.buffTexHeight > 0 ? region.buffTexHeight : region.texExtent.height;\r\n        const bytesPerRow = FormatSize(dstFormat, region.texExtent.width, 1, 1);\r\n        const bufferBytesPerRow = FormatSize(dstFormat, bufferPixelWidth, 1, 1);\r\n        const bufferBytesPerImageSlice = FormatSize(dstFormat, bufferPixelWidth, bufferPixelHeight, 1);\r\n        const bufferBytesPerImageLayer = FormatSize(dstFormat, bufferPixelWidth, bufferPixelHeight, region.texExtent.depth);\r\n        const targetWidth = region.texExtent.width === 0 ? 0 : alignTo(region.texExtent.width, blockSize.width);\r\n        const targetHeight = region.texExtent.height === 0 ? 0 : alignTo(region.texExtent.height, blockSize.height);\r\n        const imgDataLayout: GPUImageDataLayout = {\r\n            offset: 0,\r\n            bytesPerRow: bufferBytesPerRow,\r\n            rowsPerImage: bufferPixelHeight,\r\n        };\r\n        const compactInWidth = bufferPixelWidth === region.texExtent.width;\r\n        for (let l = region.texSubres.baseArrayLayer; l < region.texSubres.layerCount + region.texSubres.baseArrayLayer; l++) {\r\n            for (let d = region.texOffset.z; d < region.texExtent.depth + region.texOffset.z; d++) {\r\n                if (compactInWidth) {\r\n                    const arrayBuffer: ArrayBufferView | ArrayBufferLike = buffers[i];\r\n                    let buffer: Uint8Array; // buffers and regions are a one-to-one mapping\r\n                    if ('buffer' in arrayBuffer) {\r\n                        buffer = new Uint8Array(arrayBuffer.buffer, arrayBuffer.byteOffset, arrayBuffer.byteLength);\r\n                    } else {\r\n                        buffer = new Uint8Array(arrayBuffer);\r\n                    }\r\n                    const srcData = new Uint8Array(buffer, buffer.byteOffset\r\n                        + region.buffOffset\r\n                        + (l - region.texSubres.baseArrayLayer) * bufferBytesPerImageLayer\r\n                        + (d - region.texOffset.z) * bufferBytesPerImageSlice);\r\n                    const copyTarget = {\r\n                        texture: gpuTexture.gpuTexture!,\r\n                        mipLevel: region.texSubres.mipLevel,\r\n                        origin: {\r\n                            x: region.texOffset.x,\r\n                            y: region.texOffset.y,\r\n                            z: l,\r\n                        },\r\n                    };\r\n                    nativeDevice.queue.writeTexture(copyTarget, srcData, imgDataLayout, [targetWidth, targetHeight, region.texExtent.depth]);\r\n                } else {\r\n                    for (let h = region.texOffset.y; h < region.texExtent.height + region.texOffset.y; h += blockSize.height) {\r\n                        const srcData = new Uint8Array(buffers[i].buffer, buffers[i].byteOffset\r\n                            + region.buffOffset + (l - region.texSubres.baseArrayLayer) * bufferBytesPerImageLayer\r\n                            + ((d - region.texOffset.z) * bufferBytesPerImageSlice\r\n                            + (h - region.texOffset.y) / blockSize.height * bufferBytesPerRow));\r\n                        const copyTarget = {\r\n                            texture: gpuTexture.gpuTexture!,\r\n                            mipLevel: region.texSubres.mipLevel,\r\n                            origin: {\r\n                                x: region.texOffset.x,\r\n                                y: h,\r\n                                z: l,\r\n                            },\r\n                        };\r\n                        nativeDevice.queue.writeTexture(copyTarget, srcData, imgDataLayout, [targetWidth, blockSize.height, region.texExtent.depth]);\r\n                    }\r\n                }\r\n            }\r\n            if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {\r\n                genMipMap(device, gpuTexture, 1, gpuTexture.mipLevel - 1, 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { IWebGPUGPUDescriptorSet, IWebGPUGPUDescriptor } from './webgpu-gpu-objects';\r\nimport { WebGPUSampler } from './webgpu-sampler';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\nimport { WebGPUDescriptorSetLayout } from './webgpu-descriptor-set-layout';\r\nimport {\r\n    DescriptorSetInfo,\r\n    DESCRIPTOR_BUFFER_TYPE,\r\n    DESCRIPTOR_SAMPLER_TYPE,\r\n    DescriptorSetLayoutBinding,\r\n    DescriptorType,\r\n    Filter,\r\n    ViewDimension,\r\n    DESCRIPTOR_STORAGE_BUFFER_TYPE,\r\n} from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport { FormatToWGPUFormatType, SEPARATE_SAMPLER_BINDING_OFFSET } from './webgpu-commands';\r\n\r\nexport class WebGPUDescriptorSet extends DescriptorSet {\r\n    get gpuDescriptorSet (): IWebGPUGPUDescriptorSet {\r\n        return this._gpuDescriptorSet as IWebGPUGPUDescriptorSet;\r\n    }\r\n\r\n    private _gpuDescriptorSet: IWebGPUGPUDescriptorSet | null = null;\r\n    private _bindGroupEntries: Map<number, GPUBindGroupEntry> = new Map<number, GPUBindGroupEntry>();\r\n    private _dynamicOffsets: number[] = [];\r\n\r\n    get dynamicOffsets (): number[] {\r\n        return this._dynamicOffsets;\r\n    }\r\n\r\n    get dynamicOffsetCount (): number {\r\n        return this._dynamicOffsets.length;\r\n    }\r\n\r\n    public initialize (info: Readonly<DescriptorSetInfo>): void {\r\n        const layout = this._layout = info.layout as WebGPUDescriptorSetLayout;\r\n        const { bindings, descriptorIndices, descriptorCount } = layout.gpuDescriptorSetLayout!;\r\n\r\n        this._buffers = Array(descriptorCount).fill(null);\r\n        this._textures = Array(descriptorCount).fill(null);\r\n        this._samplers = Array(descriptorCount).fill(null);\r\n\r\n        const gpuDescriptors: IWebGPUGPUDescriptor[] = [];\r\n        const bindGroup = null!;\r\n        const bindGroupLayout = null!;\r\n        this._gpuDescriptorSet = { gpuDescriptors, descriptorIndices, bindGroup, bindGroupLayout };\r\n        const bindingSize = bindings.length;\r\n        for (let i = 0; i < bindingSize; ++i) {\r\n            const binding = bindings[i];\r\n            const bindCount = binding.count;\r\n            for (let j = 0; j < bindCount; j++) {\r\n                gpuDescriptors.push({\r\n                    type: binding.descriptorType,\r\n                    gpuBuffer: null,\r\n                    gpuTexture: null,\r\n                    gpuSampler: null,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._layout = null;\r\n        this._gpuDescriptorSet = null;\r\n        this._buffers.length = 0;\r\n        this._textures.length = 0;\r\n        this._samplers.length = 0;\r\n        this._bindGroupEntries.clear();\r\n    }\r\n\r\n    private _bindBufferEntry (bind: DescriptorSetLayoutBinding, buffer: WebGPUBuffer): void {\r\n        const destBind = this._gpuDescriptorSet!.gpuDescriptors[bind.binding];\r\n        if (destBind) {\r\n            destBind.gpuBuffer = buffer.gpuBuffer;\r\n        }\r\n        const nativeBuffer = buffer.gpuBuffer.gpuBuffer;\r\n        const bindGrpEntry: GPUBindGroupEntry = {\r\n            binding: bind.binding,\r\n            resource: {\r\n                buffer: nativeBuffer!,\r\n                offset: buffer.gpuBuffer.gpuOffset,\r\n                size: buffer.gpuBuffer.size,\r\n            },\r\n        };\r\n        this._bindGroupEntries.set(bindGrpEntry.binding, bindGrpEntry);\r\n        buffer.resetChange();\r\n    }\r\n\r\n    private _bindTextureEntry (bind: DescriptorSetLayoutBinding, texture: WebGPUTexture): void {\r\n        this._gpuDescriptorSet!.gpuDescriptors[bind.binding].gpuTexture = texture.gpuTexture;\r\n        const nativeTexView = texture.getNativeTextureView()!;\r\n        const bindGrpEntry: GPUBindGroupEntry = {\r\n            binding: bind.binding,\r\n            resource: nativeTexView,\r\n        };\r\n        this._bindGroupEntries.set(bindGrpEntry.binding, bindGrpEntry);\r\n        texture.resetChange();\r\n    }\r\n\r\n    private _bindSamplerEntry (bind: DescriptorSetLayoutBinding, sampler: WebGPUSampler): void {\r\n        const samplerIdx = bind.binding + SEPARATE_SAMPLER_BINDING_OFFSET;\r\n        this._gpuDescriptorSet!.gpuDescriptors[bind.binding].gpuSampler = sampler.gpuSampler;\r\n        const device = WebGPUDeviceManager.instance;\r\n        const currTexture = (this._textures[bind.binding] || device.defaultResource.texture) as WebGPUTexture;\r\n        const levelCount = currTexture.levelCount;\r\n        const texFormat = currTexture.format;\r\n        const isUnFilter = FormatToWGPUFormatType(texFormat) === 'unfilterable-float'\r\n        || (FormatToWGPUFormatType(texFormat) === 'float' && !device.floatFilterable);\r\n        if (isUnFilter) {\r\n            sampler.gpuSampler.minFilter = Filter.POINT;\r\n            sampler.gpuSampler.magFilter = Filter.POINT;\r\n            sampler.gpuSampler.mipFilter = Filter.POINT;\r\n        }\r\n        const currGPUSampler = sampler.createGPUSampler(levelCount);\r\n        const bindSamplerGrpEntry: GPUBindGroupEntry = {\r\n            binding: samplerIdx,\r\n            resource: currGPUSampler as GPUSampler,\r\n        };\r\n        this._bindGroupEntries.set(samplerIdx, bindSamplerGrpEntry);\r\n        sampler.resetChange();\r\n    }\r\n\r\n    private _applyBindGroup (): void {\r\n        if (this._isDirty && this._gpuDescriptorSet) {\r\n            const layout = this._layout as WebGPUDescriptorSetLayout;\r\n            this._bindGroupEntries.clear();\r\n            this._dynamicOffsets.length = 0;\r\n            const descriptors = this._gpuDescriptorSet.gpuDescriptors;\r\n            const bindings = layout.gpuDescriptorSetLayout!.bindings;\r\n            const descCount = bindings.length;\r\n            const device = WebGPUDeviceManager.instance;\r\n            for (let i = 0; i < descCount; ++i) {\r\n                const binding = bindings[i];\r\n                const bindIdx = binding.binding;\r\n                const descType = descriptors[i].type;\r\n                if (descType & DESCRIPTOR_BUFFER_TYPE) {\r\n                    const defaultBuffer = device.defaultResource.buffer;\r\n                    let buffer = (this._buffers[i] || defaultBuffer) as WebGPUBuffer;\r\n                    if (buffer === defaultBuffer\r\n                        && (descType & DESCRIPTOR_STORAGE_BUFFER_TYPE)) {\r\n                        buffer =  device.defaultResource.getStorageBuffer(bindIdx);\r\n                    }\r\n                    this._bindBufferEntry(binding, buffer);\r\n                    if (descType & (DescriptorType.DYNAMIC_STORAGE_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER)) {\r\n                        this._dynamicOffsets.push(bindIdx);\r\n                    }\r\n                } else if (descType & DESCRIPTOR_SAMPLER_TYPE) {\r\n                    if ((descType & DescriptorType.SAMPLER) !== DescriptorType.SAMPLER) {\r\n                        // texture\r\n                        let currTex = this._textures[i] as WebGPUTexture;\r\n                        // null or destroyed?\r\n                        if (!currTex || (currTex.hasChange && !currTex.gpuTexture)) {\r\n                            if (binding.viewDimension === ViewDimension.TEXCUBE) {\r\n                                currTex = device.defaultResource.cubeTexture;\r\n                            } else {\r\n                                currTex = device.defaultResource.texture;\r\n                            }\r\n                        }\r\n                        this._bindTextureEntry(binding, currTex);\r\n                    }\r\n\r\n                    if (!((descType & DescriptorType.STORAGE_IMAGE) === DescriptorType.STORAGE_IMAGE\r\n                        || (descType & DescriptorType.INPUT_ATTACHMENT) === DescriptorType.INPUT_ATTACHMENT\r\n                        || (descType & DescriptorType.TEXTURE) === DescriptorType.TEXTURE)) {\r\n                        // sampler\r\n                        const currSampler = (this._samplers[i] || device.defaultResource.sampler) as WebGPUSampler;\r\n                        this._bindSamplerEntry(binding, currSampler);\r\n                    }\r\n                }\r\n            }\r\n            this._isDirty = false;\r\n            this._createBindGroup();\r\n        }\r\n    }\r\n\r\n    private _hasResourceChange (resource: WebGPUBuffer | WebGPUTexture | WebGPUSampler): boolean {\r\n        if (resource && resource.hasChange) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _isResourceChange (): boolean {\r\n        const layout = this._layout as WebGPUDescriptorSetLayout;\r\n        if (!layout) {\r\n            return false;\r\n        }\r\n        return layout.gpuDescriptorSetLayout!.bindings.some((bind) => {\r\n            const binding = bind.binding;\r\n            const resource = this._buffers[binding] as WebGPUBuffer || this._textures[binding] || this._samplers[binding];\r\n            return this._hasResourceChange(resource);\r\n        });\r\n    }\r\n\r\n    public prepare (force: boolean = false): void {\r\n        const breakUpdate = !this._isResourceChange() && !force;\r\n        if (breakUpdate) return;\r\n        this._isDirty = true;\r\n        this._applyBindGroup();\r\n    }\r\n\r\n    private _createBindGroup (): void {\r\n        const device = WebGPUDeviceManager.instance;\r\n        const nativeDevice = device.nativeDevice;\r\n        const layout = this._layout as WebGPUDescriptorSetLayout;\r\n        const bindGroup = nativeDevice?.createBindGroup({\r\n            layout: layout.gpuDescriptorSetLayout!.bindGroupLayout!,\r\n            entries: this._bindGroupEntries.values(),\r\n        });\r\n        this._gpuDescriptorSet!.bindGroupLayout = layout.gpuDescriptorSetLayout!.bindGroupLayout!;\r\n        this._gpuDescriptorSet!.bindGroup = bindGroup!;\r\n    }\r\n\r\n    public update (): void {\r\n        this._applyBindGroup();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Device } from '../base/device';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { PipelineState, PipelineStateInfo } from '../base/pipeline-state';\r\nimport { Queue } from '../base/queue';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { Sampler } from '../base/states/sampler';\r\nimport { Shader } from '../base/shader';\r\nimport { PipelineLayout } from '../base/pipeline-layout';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGPUDescriptorSet } from './webgpu-descriptor-set';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { WebGPUCommandBuffer } from './webgpu-command-buffer';\r\nimport { WebGPUFramebuffer } from './webgpu-framebuffer';\r\nimport { WebGPUInputAssembler } from './webgpu-input-assembler';\r\nimport { WebGPUDescriptorSetLayout } from './webgpu-descriptor-set-layout';\r\nimport { WebGPUPipelineLayout } from './webgpu-pipeline-layout';\r\nimport { WebGPUPipelineState } from './webgpu-pipeline-state';\r\nimport { WebGPUQueue } from './webgpu-queue';\r\nimport { WebGPURenderPass } from './webgpu-render-pass';\r\nimport { WebGPUSampler } from './webgpu-sampler';\r\nimport { WebGPUShader } from './webgpu-shader';\r\nimport { WebGPUStateCache } from './webgpu-state-cache';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\nimport { DefaultResources, hashCombineNum, hashCombineStr, webGPU, WebGPUDeviceManager } from './define';\r\nimport {\r\n    Filter, Format,\r\n    QueueType, Feature, BufferTextureCopy, Rect, DescriptorSetInfo,\r\n    BufferInfo, BufferViewInfo, CommandBufferInfo, DeviceInfo,\r\n    FramebufferInfo, InputAssemblerInfo, QueueInfo, RenderPassInfo, SamplerInfo,\r\n    ShaderInfo, PipelineLayoutInfo, DescriptorSetLayoutInfo, TextureInfo, TextureViewInfo, GeneralBarrierInfo, TextureBarrierInfo,\r\n    SwapchainInfo,\r\n    BufferBarrierInfo,\r\n    API,\r\n    FormatFeatureBit,\r\n    FormatFeature,\r\n    TextureType,\r\n    TextureUsageBit,\r\n    TextureFlagBit,\r\n    SampleCount,\r\n    BufferUsageBit,\r\n    MemoryUsageBit,\r\n    BufferFlagBit,\r\n    DescriptorSetLayoutBinding,\r\n    DescriptorType,\r\n    ShaderStageFlagBit,\r\n} from '../base/define';\r\nimport { WebGPUCommandAllocator } from './webgpu-command-allocator';\r\nimport { GeneralBarrier } from '../base/states/general-barrier';\r\nimport { TextureBarrier } from '../base/states/texture-barrier';\r\nimport { BufferBarrier } from '../base/states/buffer-barrier';\r\nimport { Swapchain } from '../base/swapchain';\r\nimport { WebGPUSwapchain } from './webgpu-swapchain';\r\n\r\nimport { IWebGPUBindingMapping, IWebGPUGPUBuffer as IWebGPUBuffer, IWebGPUGPUSampler as IWebGPUSampler, IWebGPUTexture } from './webgpu-gpu-objects';\r\nimport { debug, warn } from '../../core';\r\nimport { WebGPUCmdFuncCopyBuffersToTexture, WebGPUCmdFuncCopyTexImagesToTexture,\r\n    WebGPUCmdFuncCopyTextureToBuffer, WGPUFormatToGFXFormat } from './webgpu-commands';\r\nimport { waitForWebGPUWasmInstantiation } from './instantiated';\r\n\r\nlet loadWebGPUPromise: Promise<void> | undefined;\r\n\r\nexport function loadWebGPUWasmModule (): Promise<void> {\r\n    if (loadWebGPUPromise) return loadWebGPUPromise;\r\n    loadWebGPUPromise = Promise.resolve()\r\n        .then(() => waitForWebGPUWasmInstantiation());\r\n    return loadWebGPUPromise;\r\n}\r\n\r\nexport class WebGPUDevice extends Device {\r\n    public createSwapchain (info: Readonly<SwapchainInfo>): Swapchain {\r\n        const swapchain = new WebGPUSwapchain();\r\n        this._swapchain = swapchain;\r\n        swapchain.initialize(info);\r\n        return swapchain;\r\n    }\r\n    public getSampler (info: Readonly<SamplerInfo>): Sampler {\r\n        const hash = Sampler.computeHash(info);\r\n        if (!this._samplers.has(hash)) {\r\n            this._samplers.set(hash, new WebGPUSampler(info, hash));\r\n        }\r\n        return this._samplers.get(hash)!;\r\n    }\r\n    public getSwapchains (): readonly Swapchain[] {\r\n        return [this._swapchain as Swapchain];\r\n    }\r\n    public getGeneralBarrier (info: Readonly<GeneralBarrierInfo>): GeneralBarrier {\r\n        const hash = GeneralBarrier.computeHash(info);\r\n        if (!this._generalBarrierss.has(hash)) {\r\n            this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));\r\n        }\r\n        return this._generalBarrierss.get(hash)!;\r\n    }\r\n    public getTextureBarrier (info: Readonly<TextureBarrierInfo>): TextureBarrier {\r\n        const hash = TextureBarrier.computeHash(info);\r\n        if (!this._textureBarriers.has(hash)) {\r\n            this._textureBarriers.set(hash, new TextureBarrier(info, hash));\r\n        }\r\n        return this._textureBarriers.get(hash)!;\r\n    }\r\n    public getBufferBarrier (info: Readonly<BufferBarrierInfo>): BufferBarrier {\r\n        const hash = BufferBarrier.computeHash(info);\r\n        if (!this._bufferBarriers.has(hash)) {\r\n            this._bufferBarriers.set(hash, new BufferBarrier(info, hash));\r\n        }\r\n        return this._bufferBarriers.get(hash)!;\r\n    }\r\n    public async copyTextureToBuffers (texture: Readonly<Texture>, buffers: ArrayBufferView[], regions: readonly BufferTextureCopy[]): Promise<void> {\r\n        await WebGPUCmdFuncCopyTextureToBuffer(this, (texture as WebGPUTexture).gpuTexture, buffers, regions);\r\n    }\r\n    public flushCommands (cmdBuffs: CommandBuffer[]): void {\r\n        // noop\r\n    }\r\n\r\n    get isPremultipliedAlpha (): boolean {\r\n        if (!this._gpuConfig) {\r\n            return false;\r\n        }\r\n        return this._gpuConfig.alphaMode === 'premultiplied';\r\n    }\r\n\r\n    get multiDrawIndirectSupport (): boolean {\r\n        return this._multiDrawIndirect;\r\n    }\r\n\r\n    get bindingMappings (): IWebGPUBindingMapping {\r\n        return this._bindingMappings!;\r\n    }\r\n\r\n    get context (): GPUCanvasContext {\r\n        return this._context!;\r\n    }\r\n\r\n    public stateCache: WebGPUStateCache = new WebGPUStateCache();\r\n    public cmdAllocator: WebGPUCommandAllocator = new WebGPUCommandAllocator();\r\n    public nullTex2D: WebGPUTexture | null = null;\r\n    public nullTexCube: WebGPUTexture | null = null;\r\n    public defaultResource: DefaultResources = new DefaultResources();\r\n\r\n    private _adapter: GPUAdapter | null | undefined = null;\r\n    private _device: GPUDevice | null | undefined = null;\r\n    private _context: GPUCanvasContext | null = null;\r\n    private _swapchain: WebGPUSwapchain | null = null;\r\n    private _glslang;\r\n    private _twgsl;\r\n    private _bindingMappings: IWebGPUBindingMapping | null = null;\r\n    private _multiDrawIndirect = false;\r\n    private _gpuConfig: GPUCanvasConfiguration | null = null;\r\n    protected _textureExclusive = new Array<boolean>(Format.COUNT);\r\n\r\n    public async initialize (info: Readonly<DeviceInfo>): Promise<boolean> {\r\n        WebGPUDeviceManager.setInstance(this);\r\n        return this.initDevice(info);\r\n    }\r\n\r\n    set gpuConfig (config: GPUCanvasConfiguration) {\r\n        this._gpuConfig = config;\r\n    }\r\n\r\n    get gpuConfig (): GPUCanvasConfiguration {\r\n        return this._gpuConfig!;\r\n    }\r\n\r\n    protected initFormatFeatures (exts: GPUSupportedFeatures): void {\r\n        this._formatFeatures.fill(FormatFeatureBit.NONE);\r\n\r\n        this._textureExclusive.fill(true);\r\n\r\n        let tempFeature: FormatFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        this._formatFeatures[Format.R8] = tempFeature;\r\n        this._formatFeatures[Format.RG8] = tempFeature;\r\n        this._formatFeatures[Format.RGB8] = tempFeature;\r\n        this._formatFeatures[Format.RGBA8] = tempFeature;\r\n\r\n        tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        this._formatFeatures[Format.R8SN] = tempFeature;\r\n        this._formatFeatures[Format.RG8SN] = tempFeature;\r\n        this._formatFeatures[Format.RGB8SN] = tempFeature;\r\n        this._formatFeatures[Format.RGBA8SN] = tempFeature;\r\n        this._formatFeatures[Format.R5G6B5] = tempFeature;\r\n        this._formatFeatures[Format.RGBA4] = tempFeature;\r\n        this._formatFeatures[Format.RGB5A1] = tempFeature;\r\n        this._formatFeatures[Format.RGB10A2] = tempFeature;\r\n\r\n        this._formatFeatures[Format.SRGB8] = tempFeature;\r\n        this._formatFeatures[Format.SRGB8_A8] = tempFeature;\r\n\r\n        this._formatFeatures[Format.R11G11B10F] = tempFeature;\r\n        this._formatFeatures[Format.RGB9E5] = tempFeature;\r\n\r\n        this._formatFeatures[Format.DEPTH] = tempFeature;\r\n        this._formatFeatures[Format.DEPTH_STENCIL] = tempFeature;\r\n\r\n        this._formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE\r\n            | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n            | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        this._formatFeatures[Format.R16F] = tempFeature;\r\n        this._formatFeatures[Format.RG16F] = tempFeature;\r\n        this._formatFeatures[Format.RGB16F] = tempFeature;\r\n        this._formatFeatures[Format.RGBA16F] = tempFeature;\r\n\r\n        tempFeature = FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.RENDER_TARGET\r\n        | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        this._formatFeatures[Format.R32F] = tempFeature;\r\n        this._formatFeatures[Format.RG32F] = tempFeature;\r\n        this._formatFeatures[Format.RGB32F] = tempFeature;\r\n        this._formatFeatures[Format.RGBA32F] = tempFeature;\r\n\r\n        this._formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE\r\n            | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE\r\n            | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;\r\n\r\n        this._formatFeatures[Format.R8I] = tempFeature;\r\n        this._formatFeatures[Format.R8UI] = tempFeature;\r\n        this._formatFeatures[Format.R16I] = tempFeature;\r\n        this._formatFeatures[Format.R16UI] = tempFeature;\r\n        this._formatFeatures[Format.R32I] = tempFeature;\r\n        this._formatFeatures[Format.R32UI] = tempFeature;\r\n\r\n        this._formatFeatures[Format.RG8I] = tempFeature;\r\n        this._formatFeatures[Format.RG8UI] = tempFeature;\r\n        this._formatFeatures[Format.RG16I] = tempFeature;\r\n        this._formatFeatures[Format.RG16UI] = tempFeature;\r\n        this._formatFeatures[Format.RG32I] = tempFeature;\r\n        this._formatFeatures[Format.RG32UI] = tempFeature;\r\n\r\n        this._formatFeatures[Format.RGB8I] = tempFeature;\r\n        this._formatFeatures[Format.RGB8UI] = tempFeature;\r\n        this._formatFeatures[Format.RGB16I] = tempFeature;\r\n        this._formatFeatures[Format.RGB16UI] = tempFeature;\r\n        this._formatFeatures[Format.RGB32I] = tempFeature;\r\n        this._formatFeatures[Format.RGB32UI] = tempFeature;\r\n\r\n        this._formatFeatures[Format.RGBA8I] = tempFeature;\r\n        this._formatFeatures[Format.RGBA8UI] = tempFeature;\r\n        this._formatFeatures[Format.RGBA16I] = tempFeature;\r\n        this._formatFeatures[Format.RGBA16UI] = tempFeature;\r\n        this._formatFeatures[Format.RGBA32I] = tempFeature;\r\n        this._formatFeatures[Format.RGBA32UI] = tempFeature;\r\n\r\n        this._textureExclusive[Format.R8] = false;\r\n        this._textureExclusive[Format.RG8] = false;\r\n        this._textureExclusive[Format.RGB8] = false;\r\n        this._textureExclusive[Format.R5G6B5] = false;\r\n        this._textureExclusive[Format.RGBA4] = false;\r\n\r\n        this._textureExclusive[Format.RGB5A1] = false;\r\n        this._textureExclusive[Format.RGBA8] = false;\r\n        this._textureExclusive[Format.RGB10A2] = false;\r\n        this._textureExclusive[Format.RGB10A2UI] = false;\r\n        this._textureExclusive[Format.SRGB8_A8] = false;\r\n\r\n        this._textureExclusive[Format.R8I] = false;\r\n        this._textureExclusive[Format.R8UI] = false;\r\n        this._textureExclusive[Format.R16I] = false;\r\n        this._textureExclusive[Format.R16UI] = false;\r\n        this._textureExclusive[Format.R32I] = false;\r\n        this._textureExclusive[Format.R32UI] = false;\r\n\r\n        this._textureExclusive[Format.RG8I] = false;\r\n        this._textureExclusive[Format.RG8UI] = false;\r\n        this._textureExclusive[Format.RG16I] = false;\r\n        this._textureExclusive[Format.RG16UI] = false;\r\n        this._textureExclusive[Format.RG32I] = false;\r\n        this._textureExclusive[Format.RG32UI] = false;\r\n\r\n        this._textureExclusive[Format.RGBA8I] = false;\r\n        this._textureExclusive[Format.RGBA8UI] = false;\r\n        this._textureExclusive[Format.RGBA16I] = false;\r\n        this._textureExclusive[Format.RGBA16UI] = false;\r\n        this._textureExclusive[Format.RGBA32I] = false;\r\n        this._textureExclusive[Format.RGBA32UI] = false;\r\n\r\n        this._textureExclusive[Format.DEPTH] = false;\r\n        this._textureExclusive[Format.DEPTH_STENCIL] = false;\r\n\r\n        if (exts.has('float32-filterable')) {\r\n            this._formatFeatures[Format.R32F] |= FormatFeatureBit.RENDER_TARGET;\r\n            this._formatFeatures[Format.RG32F] |= FormatFeatureBit.RENDER_TARGET;\r\n            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET;\r\n\r\n            this._textureExclusive[Format.R32F] = false;\r\n            this._textureExclusive[Format.RG32F] = false;\r\n            this._textureExclusive[Format.RGBA32F] = false;\r\n\r\n            this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            this._formatFeatures[Format.R32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            this._formatFeatures[Format.RG32F] |= FormatFeatureBit.LINEAR_FILTER;\r\n        }\r\n\r\n        if (exts.has('shader-f16')) {\r\n            this._textureExclusive[Format.R16F] = false;\r\n            this._textureExclusive[Format.RG16F] = false;\r\n            this._textureExclusive[Format.RGBA16F] = false;\r\n\r\n            this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            this._formatFeatures[Format.R16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n            this._formatFeatures[Format.RG16F] |= FormatFeatureBit.LINEAR_FILTER;\r\n        }\r\n\r\n        const compressedFeature: FormatFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;\r\n\r\n        if (exts.has('texture-compression-etc2')) {\r\n            this._formatFeatures[Format.ETC2_RGB8] = compressedFeature;\r\n            this._formatFeatures[Format.ETC2_RGBA8] = compressedFeature;\r\n            this._formatFeatures[Format.ETC2_SRGB8] = compressedFeature;\r\n            this._formatFeatures[Format.ETC2_SRGB8_A8] = compressedFeature;\r\n            this._formatFeatures[Format.ETC2_RGB8_A1] = compressedFeature;\r\n            this._formatFeatures[Format.ETC2_SRGB8_A1] = compressedFeature;\r\n        }\r\n\r\n        if (exts.has('texture-compression-bc')) {\r\n            this._formatFeatures[Format.BC1] = compressedFeature;\r\n            this._formatFeatures[Format.BC1_ALPHA] = compressedFeature;\r\n            this._formatFeatures[Format.BC1_SRGB] = compressedFeature;\r\n            this._formatFeatures[Format.BC1_SRGB_ALPHA] = compressedFeature;\r\n            this._formatFeatures[Format.BC2] = compressedFeature;\r\n            this._formatFeatures[Format.BC2_SRGB] = compressedFeature;\r\n            this._formatFeatures[Format.BC3] = compressedFeature;\r\n            this._formatFeatures[Format.BC3_SRGB] = compressedFeature;\r\n        }\r\n\r\n        if (exts.has('texture-compression-astc')) {\r\n            this._formatFeatures[Format.ASTC_RGBA_4X4] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_5X4] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_5X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_6X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_6X6] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_8X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_8X6] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_8X8] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_10X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_10X6] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_10X8] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_10X10] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_12X10] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_RGBA_12X12] = compressedFeature;\r\n\r\n            this._formatFeatures[Format.ASTC_SRGBA_4X4] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_5X4] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_5X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_6X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_6X6] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_8X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_8X6] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_8X8] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_10X5] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_10X6] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_10X8] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_10X10] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_12X10] = compressedFeature;\r\n            this._formatFeatures[Format.ASTC_SRGBA_12X12] = compressedFeature;\r\n        }\r\n    }\r\n\r\n    public getDefaultDescResources (\r\n        entry: GPUBindGroupLayoutEntry,\r\n        resourceInfo: IWebGPUBuffer | IWebGPUTexture | IWebGPUSampler,\r\n    ): WebGPUBuffer | WebGPUTexture | WebGPUSampler | undefined {\r\n        let currHash = hashCombineNum(entry.visibility, 0);\r\n        const defaultRes = this.defaultResource;\r\n        if (entry.buffer) {\r\n            currHash = hashCombineStr(entry.buffer.type!, currHash);\r\n            if (entry.buffer.hasDynamicOffset) currHash = hashCombineNum(entry.buffer.hasDynamicOffset ? 1 : 0, currHash);\r\n            if (entry.buffer.minBindingSize !== undefined) currHash = hashCombineNum(entry.buffer.minBindingSize, currHash);\r\n            if (defaultRes.buffersDescLayout.has(currHash)) {\r\n                return defaultRes.buffersDescLayout.get(currHash);\r\n            }\r\n            resourceInfo = resourceInfo as IWebGPUBuffer;\r\n            const bufferInfo = new BufferInfo();\r\n            bufferInfo.usage = resourceInfo.usage;\r\n            bufferInfo.size = bufferInfo.stride = 16;\r\n            bufferInfo.memUsage = resourceInfo.memUsage;\r\n            bufferInfo.flags = resourceInfo.flags!;\r\n            defaultRes.buffersDescLayout.set(currHash, this.createBuffer(bufferInfo) as WebGPUBuffer);\r\n            return defaultRes.buffersDescLayout.get(currHash);\r\n        } else if (entry.texture) {\r\n            resourceInfo = resourceInfo as IWebGPUTexture;\r\n            currHash = hashCombineStr(entry.texture.sampleType!, currHash);\r\n            currHash = hashCombineStr(entry.texture.viewDimension!, currHash);\r\n            currHash = hashCombineNum(entry.texture.multisampled ? 1 : 0, currHash);\r\n            currHash = hashCombineNum(resourceInfo.mipLevel, currHash);\r\n            currHash = hashCombineNum(resourceInfo.arrayLayer, currHash);\r\n            if (defaultRes.texturesDescLayout.has(currHash)) {\r\n                return defaultRes.texturesDescLayout.get(currHash);\r\n            }\r\n            const texInfo = new TextureInfo(\r\n                resourceInfo.type,\r\n                resourceInfo.usage,\r\n                resourceInfo.format,\r\n                2 ** (resourceInfo.mipLevel - 1),\r\n                2 ** (resourceInfo.mipLevel - 1),\r\n                resourceInfo.flags,\r\n                resourceInfo.arrayLayer,\r\n                resourceInfo.mipLevel,\r\n                resourceInfo.samples,\r\n                1,\r\n            );\r\n            defaultRes.texturesDescLayout.set(currHash, this.createTexture(texInfo) as WebGPUTexture);\r\n            return defaultRes.texturesDescLayout.get(currHash);\r\n        } else if (entry.sampler) {\r\n            resourceInfo = resourceInfo as IWebGPUSampler;\r\n            currHash = hashCombineStr(entry.sampler.type!, currHash);\r\n            if (defaultRes.samplersDescLayout.has(currHash)) {\r\n                return defaultRes.samplersDescLayout.get(currHash);\r\n            }\r\n            const samplerInfo = new SamplerInfo();\r\n            samplerInfo.minFilter = resourceInfo.minFilter;\r\n            samplerInfo.magFilter = resourceInfo.magFilter;\r\n            samplerInfo.mipFilter = resourceInfo.mipFilter;\r\n            samplerInfo.addressU = resourceInfo.addressU;\r\n            samplerInfo.addressV = resourceInfo.addressV;\r\n            samplerInfo.addressW = resourceInfo.addressW;\r\n\r\n            defaultRes.samplersDescLayout.set(currHash, this.getSampler(samplerInfo) as WebGPUSampler);\r\n            return defaultRes.samplersDescLayout.get(currHash);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    private _createDefaultDescSet (): void {\r\n        const defaultResource = this.defaultResource;\r\n        // default set layout\r\n        const layoutInfo = new DescriptorSetLayoutInfo();\r\n        const layoutBinding = new DescriptorSetLayoutBinding();\r\n        layoutBinding.binding = 0;\r\n        layoutBinding.count = 1;\r\n        layoutBinding.descriptorType = DescriptorType.UNIFORM_BUFFER;\r\n        layoutBinding.stageFlags = ShaderStageFlagBit.VERTEX;\r\n        layoutInfo.bindings.push(layoutBinding);\r\n        defaultResource.setLayout = this.createDescriptorSetLayout(layoutInfo);\r\n        // default set\r\n        const descInfo = new DescriptorSetInfo();\r\n        descInfo.layout = defaultResource.setLayout;\r\n        defaultResource.descSet = this.createDescriptorSet(descInfo);\r\n        defaultResource.descSet.bindBuffer(0, defaultResource.buffer);\r\n        defaultResource.descSet.update();\r\n    }\r\n\r\n    get floatFilterable (): boolean {\r\n        return this._adapter!.features.has('float32-filterable');\r\n    }\r\n\r\n    private async initDevice (info: Readonly<DeviceInfo>): Promise<boolean> {\r\n        const gpu = navigator.gpu;\r\n        this._adapter = await gpu?.requestAdapter();\r\n        const maxVertAttrs = this._adapter!.limits.maxVertexAttributes;\r\n        const maxSampledTexPerShaderStage = this._adapter!.limits.maxSampledTexturesPerShaderStage;\r\n        const submitFeatures: GPUFeatureName[] = [];\r\n        if (this._adapter!.features.has('float32-filterable')) {\r\n            submitFeatures.push('float32-filterable');\r\n        } else {\r\n            warn('Filterable 32-bit float textures support is not available');\r\n        }\r\n        this._device = await this._adapter?.requestDevice({\r\n            requiredLimits: {\r\n                // Must be changed, default support for 16 is not enough\r\n                maxVertexAttributes: maxVertAttrs,\r\n                maxSampledTexturesPerShaderStage: maxSampledTexPerShaderStage,\r\n            },\r\n            requiredFeatures: submitFeatures,\r\n        });\r\n        await loadWebGPUWasmModule();\r\n        this._glslang = webGPU.glslang;\r\n        this._twgsl = webGPU.twgsl;\r\n\r\n        this._gfxAPI = API.WEBGPU;\r\n        this._swapchainFormat = WGPUFormatToGFXFormat(navigator.gpu.getPreferredCanvasFormat());\r\n        const mapping = this._bindingMappingInfo = info.bindingMappingInfo;\r\n        const blockOffsets: number[] = [];\r\n        const samplerTextureOffsets: number[] = [];\r\n        const firstSet = mapping.setIndices[0];\r\n        blockOffsets[firstSet] = 0;\r\n        samplerTextureOffsets[firstSet] = 0;\r\n        const mappingIdxSize =  mapping.setIndices.length;\r\n        for (let i = 1; i < mappingIdxSize; ++i) {\r\n            const curSet = mapping.setIndices[i];\r\n            const prevSet = mapping.setIndices[i - 1];\r\n            // accumulate the per set offset according to the specified capacity\r\n            blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];\r\n            samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];\r\n        }\r\n        for (let i = 0; i < mappingIdxSize; ++i) {\r\n            const curSet = mapping.setIndices[i];\r\n            // textures always come after UBOs\r\n            samplerTextureOffsets[curSet] -= mapping.maxBlockCounts[curSet];\r\n        }\r\n        this._bindingMappings = {\r\n            blockOffsets,\r\n            samplerTextureOffsets,\r\n            flexibleSet: mapping.setIndices[mappingIdxSize - 1],\r\n        };\r\n\r\n        const canvas = Device.canvas;\r\n        this._context = canvas.getContext('webgpu')!;\r\n        const device: GPUDevice = this._device as GPUDevice;\r\n\r\n        const adapterInfo = this._adapter!.info;\r\n        this._vendor = adapterInfo.vendor;\r\n        this._renderer = adapterInfo.device;\r\n        const description = adapterInfo.description;\r\n\r\n        const limits =  this._adapter!.limits;\r\n        this._caps.clipSpaceMinZ = 0.0;\r\n        this._caps.screenSpaceSignY = -1.0;\r\n        this._caps.uboOffsetAlignment = 256;\r\n        this._caps.maxUniformBufferBindings = 12;\r\n        this._caps.maxVertexAttributes = limits.maxVertexAttributes;\r\n        this._caps.maxUniformBufferBindings = limits.maxUniformBufferBindingSize;\r\n        this._caps.maxTextureSize = limits.maxTextureDimension2D;\r\n        this._caps.maxArrayTextureLayers = limits.maxTextureArrayLayers;\r\n        this._caps.max3DTextureSize = limits.maxTextureDimension3D;\r\n        this._caps.uboOffsetAlignment  = limits.minUniformBufferOffsetAlignment;\r\n\r\n        const features = this._adapter!.features;\r\n        // FIXME: require by query\r\n        this._multiDrawIndirect = false;\r\n\r\n        this._features.fill(false);\r\n        this._features[Feature.ELEMENT_INDEX_UINT] = true;\r\n        this._features[Feature.INSTANCED_ARRAYS] = true;\r\n        this._features[Feature.MULTIPLE_RENDER_TARGETS] = true;\r\n        this.initFormatFeatures(features);\r\n\r\n        this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));\r\n        this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));\r\n\r\n        const texInfo = new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST,\r\n            Format.RGBA8,\r\n            16,\r\n            16,\r\n            TextureFlagBit.NONE,\r\n            1,\r\n            1,\r\n            SampleCount.X1,\r\n            1,\r\n        );\r\n        const defaultDescTexResc = this.createTexture(texInfo);\r\n\r\n        const cubeTexInfo = new TextureInfo(\r\n            TextureType.CUBE,\r\n            TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST,\r\n            Format.RGBA8,\r\n            16,\r\n            16,\r\n            TextureFlagBit.NONE,\r\n            6,\r\n        );\r\n        const defaultDescCubeTexResc = this.createTexture(cubeTexInfo);\r\n\r\n        const bufferInfo = new BufferInfo(\r\n            BufferUsageBit.UNIFORM,\r\n            MemoryUsageBit.DEVICE,\r\n            16,\r\n            16, // in bytes\r\n            BufferFlagBit.NONE,\r\n        );\r\n        const defaultDescBuffResc = this.createBuffer(bufferInfo);\r\n        const samplerInfo = new SamplerInfo();\r\n        const defaultDescSmplResc = this.getSampler(samplerInfo);\r\n        const defaultResource = this.defaultResource;\r\n        defaultResource.buffer = defaultDescBuffResc as WebGPUBuffer;\r\n        defaultResource.texture = defaultDescTexResc as WebGPUTexture;\r\n        defaultResource.sampler = defaultDescSmplResc as WebGPUSampler;\r\n        defaultResource.cubeTexture = defaultDescCubeTexResc as WebGPUTexture;\r\n        this._createDefaultDescSet();\r\n\r\n        let compressedFormat = '';\r\n\r\n        if (this.getFormatFeatures(Format.ETC_RGB8)) {\r\n            compressedFormat += 'etc1 ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.ETC2_RGB8)) {\r\n            compressedFormat += 'etc2 ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.BC1)) {\r\n            compressedFormat += 'dxt ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.PVRTC_RGB2)) {\r\n            compressedFormat += 'pvrtc ';\r\n        }\r\n\r\n        if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {\r\n            compressedFormat += 'astc ';\r\n        }\r\n        debug('WebGPU device initialized.');\r\n        debug(`RENDERER: ${this._renderer}`);\r\n        debug(`VENDOR: ${this._vendor}`);\r\n        debug(`DESCRIPTION: ${description}`);\r\n        debug(`COMPRESSED_FORMAT: ${compressedFormat}`);\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._queue) {\r\n            this._queue.destroy();\r\n            this._queue = null;\r\n        }\r\n\r\n        if (this._cmdBuff) {\r\n            this._cmdBuff.destroy();\r\n            this._cmdBuff = null;\r\n        }\r\n\r\n        const it = this._samplers.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            (res.value as WebGPUSampler).destroy();\r\n            res = it.next();\r\n        }\r\n\r\n        this._swapchain = null;\r\n    }\r\n\r\n    public resize (width: number, height: number): void {\r\n        // noop\r\n    }\r\n\r\n    public acquire (): void {\r\n        // noop\r\n    }\r\n\r\n    get nativeDevice (): GPUDevice | null | undefined {\r\n        return this._device;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n    public get glslang () {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this._glslang;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n    public get twgsl () {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this._twgsl;\r\n    }\r\n\r\n    public present (): void {\r\n        const queue = (this._queue as unknown as WebGPUQueue);\r\n        this._numDrawCalls = queue.numDrawCalls;\r\n        this._numInstances = queue.numInstances;\r\n        this._numTris = queue.numTris;\r\n        queue.clear();\r\n    }\r\n\r\n    public createCommandBuffer (info: CommandBufferInfo): CommandBuffer {\r\n        const cmdBuff = new WebGPUCommandBuffer();\r\n        if (cmdBuff.initialize(info)) {\r\n            return cmdBuff;\r\n        }\r\n        return null!;\r\n    }\r\n\r\n    public createBuffer (info: Readonly<BufferInfo> | Readonly<BufferViewInfo>): Buffer {\r\n        const buffer = new WebGPUBuffer();\r\n        buffer.initialize(info);\r\n        return buffer;\r\n    }\r\n\r\n    public createTexture (info: Readonly<TextureInfo> | Readonly<TextureViewInfo>): Texture {\r\n        const texture = new WebGPUTexture();\r\n        texture.initialize(info);\r\n        return texture;\r\n    }\r\n\r\n    public createDescriptorSet (info: Readonly<DescriptorSetInfo>): DescriptorSet {\r\n        const descriptorSet = new WebGPUDescriptorSet();\r\n        descriptorSet.initialize(info);\r\n        return descriptorSet;\r\n    }\r\n\r\n    public createShader (info: Readonly<ShaderInfo>): Shader {\r\n        const shader = new WebGPUShader();\r\n        shader.initialize(info);\r\n        return shader;\r\n    }\r\n\r\n    public createInputAssembler (info: Readonly<InputAssemblerInfo>): InputAssembler {\r\n        const inputAssembler = new WebGPUInputAssembler();\r\n        inputAssembler.initialize(info);\r\n        return inputAssembler;\r\n    }\r\n\r\n    public createRenderPass (info: Readonly<RenderPassInfo>): RenderPass {\r\n        const renderPass = new WebGPURenderPass();\r\n        renderPass.initialize(info);\r\n        return renderPass;\r\n    }\r\n\r\n    public createFramebuffer (info: Readonly<FramebufferInfo>): Framebuffer {\r\n        const framebuffer = new WebGPUFramebuffer();\r\n        framebuffer.initialize(info);\r\n        return framebuffer;\r\n    }\r\n\r\n    public createDescriptorSetLayout (info: Readonly<DescriptorSetLayoutInfo>): DescriptorSetLayout {\r\n        const descriptorSetLayout = new WebGPUDescriptorSetLayout();\r\n        descriptorSetLayout.initialize(info);\r\n        return descriptorSetLayout;\r\n    }\r\n\r\n    public createPipelineLayout (info: PipelineLayoutInfo): PipelineLayout {\r\n        const pipelineLayout = new WebGPUPipelineLayout();\r\n        if (pipelineLayout.initialize(info)) {\r\n            return pipelineLayout;\r\n        }\r\n        return null!;\r\n    }\r\n\r\n    public createPipelineState (info: Readonly<PipelineStateInfo>): PipelineState {\r\n        const pipelineState = new WebGPUPipelineState();\r\n        pipelineState.initialize(info);\r\n        return pipelineState;\r\n    }\r\n\r\n    public createQueue (info: QueueInfo): Queue {\r\n        const queue = new WebGPUQueue();\r\n        if (queue.initialize(info)) {\r\n            return queue;\r\n        }\r\n        return null!;\r\n    }\r\n\r\n    public copyBuffersToTexture (buffers: ArrayBufferView[], texture: Texture, regions: BufferTextureCopy[]): void {\r\n        WebGPUCmdFuncCopyBuffersToTexture(\r\n            this,\r\n            buffers,\r\n            (texture as unknown as WebGPUTexture).gpuTexture,\r\n            regions,\r\n        );\r\n    }\r\n\r\n    public copyTexImagesToTexture (\r\n        texImages: TexImageSource[],\r\n        texture: Texture,\r\n        regions: BufferTextureCopy[],\r\n    ): void {\r\n        WebGPUCmdFuncCopyTexImagesToTexture(\r\n            this,\r\n            texImages,\r\n            (texture as unknown as WebGPUTexture).gpuTexture,\r\n            regions,\r\n        );\r\n    }\r\n\r\n    public copyFramebufferToBuffer (\r\n        srcFramebuffer: Framebuffer,\r\n        dstBuffer: ArrayBuffer,\r\n        regions: BufferTextureCopy[],\r\n    ): void {\r\n        // noop\r\n    }\r\n\r\n    public blitFramebuffer (src: Framebuffer, dst: Framebuffer, srcRect: Rect, dstRect: Rect, filter: Filter): void {\r\n        // noop\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { warnID } from '../../core/platform/debug';\r\nimport { Buffer } from '../base/buffer';\r\n\r\nimport {\r\n    BufferUsageBit,\r\n    IndirectBuffer,\r\n    BufferSource,\r\n    BufferInfo,\r\n    BufferViewInfo,\r\n} from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport {\r\n    WebGPUCmdFuncCreateBuffer,\r\n    WebGPUCmdFuncDestroyBuffer,\r\n    WebGPUCmdFuncResizeBuffer,\r\n    WebGPUCmdFuncUpdateBuffer,\r\n} from './webgpu-commands';\r\nimport { IWebGPUGPUBuffer as IWebGPUBuffer } from './webgpu-gpu-objects';\r\n\r\nexport class WebGPUBuffer extends Buffer {\r\n    get gpuBuffer (): IWebGPUBuffer {\r\n        return this._gpuBuffer!;\r\n    }\r\n\r\n    private _gpuBuffer: IWebGPUBuffer | null = null;\r\n    private _indirectBuffer: IndirectBuffer | null = null;\r\n    private _hasChange: boolean = false;\r\n    get hasChange (): boolean {\r\n        return this._hasChange;\r\n    }\r\n    public resetChange (): void {\r\n        this._hasChange = false;\r\n    }\r\n    public initialize (info: Readonly<BufferInfo> | Readonly<BufferViewInfo>): void {\r\n        if ('buffer' in info) { // buffer view\r\n            // validate: webGPU buffer offset must be 256 bytes aligned\r\n            // which can be guaranteed by WebGPUDevice::uboOffsetAligned\r\n            this._isBufferView = true;\r\n\r\n            const buffer = info.buffer as WebGPUBuffer;\r\n\r\n            this._usage = buffer.usage;\r\n            this._memUsage = buffer.memUsage;\r\n            this._size = this._stride = Math.ceil(info.range / 4.0) * 4;\r\n            this._count = 1;\r\n            this._flags = buffer.flags;\r\n\r\n            this._gpuBuffer = {\r\n                usage: this._usage,\r\n                memUsage: this._memUsage,\r\n                size: this._size,\r\n                stride: this._stride,\r\n                buffer: null,\r\n                indirects: buffer.gpuBuffer.indirects,\r\n                gpuTarget: buffer.gpuBuffer.gpuTarget,\r\n                gpuBuffer: buffer.gpuBuffer.gpuBuffer,\r\n                gpuOffset: info.offset,\r\n                flags: this._flags,\r\n                drawIndirectByIndex: false,\r\n            };\r\n        } else { // native buffer\r\n            this._usage = info.usage;\r\n            this._memUsage = info.memUsage;\r\n            this._size = Math.ceil(info.size / 4.0) * 4;\r\n            this._stride = Math.max(info.stride || this._size, 1);\r\n            this._count = this._size / this._stride;\r\n            this._flags = info.flags;\r\n\r\n            if (this._usage & BufferUsageBit.INDIRECT) {\r\n                this._indirectBuffer = new IndirectBuffer();\r\n            }\r\n\r\n            this._gpuBuffer = {\r\n                usage: this._usage,\r\n                memUsage: this._memUsage,\r\n                size: this._size,\r\n                stride: this._stride,\r\n                buffer: null,\r\n                indirects: [],\r\n                gpuTarget: 0,\r\n                flags: this._flags,\r\n                gpuBuffer: null,\r\n                gpuOffset: 0,\r\n                drawIndirectByIndex: false,\r\n            };\r\n\r\n            if (info.usage & BufferUsageBit.INDIRECT) {\r\n                this._gpuBuffer.indirects = this._indirectBuffer!.drawInfos;\r\n            }\r\n            const device = WebGPUDeviceManager.instance;\r\n            WebGPUCmdFuncCreateBuffer(device, this._gpuBuffer);\r\n\r\n            device.memoryStatus.bufferSize += this._size;\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuBuffer) {\r\n            if (!this._isBufferView) {\r\n                const device = WebGPUDeviceManager.instance;\r\n                WebGPUCmdFuncDestroyBuffer(device, this._gpuBuffer);\r\n                device.memoryStatus.bufferSize -= this._size;\r\n            }\r\n            this._hasChange = true;\r\n            this._gpuBuffer = null;\r\n        }\r\n    }\r\n\r\n    public resize (size: number): void {\r\n        if (this._isBufferView) {\r\n            warnID(16379);\r\n            return;\r\n        }\r\n\r\n        const oldSize = this._size;\r\n        if (oldSize === size) { return; }\r\n\r\n        this._size = size;\r\n        this._count = this._size / this._stride;\r\n        this._hasChange = true;\r\n        if (this._gpuBuffer) {\r\n            this._gpuBuffer.size = this._size;\r\n            if (this._size > 0) {\r\n                const device = WebGPUDeviceManager.instance;\r\n                WebGPUCmdFuncResizeBuffer(device, this._gpuBuffer);\r\n                device.memoryStatus.bufferSize -= oldSize;\r\n                device.memoryStatus.bufferSize += this._size;\r\n            }\r\n        }\r\n    }\r\n\r\n    public update (buffer: BufferSource, size?: number): void {\r\n        if (this._isBufferView) {\r\n            warnID(16380);\r\n            return;\r\n        }\r\n\r\n        let buffSize: number;\r\n        if (size !== undefined) {\r\n            buffSize = size;\r\n        } else if (this._usage & BufferUsageBit.INDIRECT) {\r\n            buffSize = 0;\r\n        } else {\r\n            buffSize = (buffer as ArrayBuffer).byteLength;\r\n        }\r\n        // Make sure buffSize is a multiple of 4\r\n        buffSize = Math.ceil(buffSize / 4.0) * 4;\r\n        if (this.size < buffSize) {\r\n            this.resize(buffSize);\r\n        }\r\n        this._hasChange = true;\r\n        const device = WebGPUDeviceManager.instance;\r\n\r\n        WebGPUCmdFuncUpdateBuffer(\r\n            device,\r\n            this._gpuBuffer!,\r\n            buffer,\r\n            0,\r\n            buffSize,\r\n        );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { Buffer } from '../base/buffer';\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport {\r\n    BufferUsageBit,\r\n    CommandBufferType,\r\n    StencilFace,\r\n    BufferSource,\r\n    DrawInfo,\r\n    CommandBufferInfo,\r\n    BufferTextureCopy,\r\n    Color,\r\n    Rect,\r\n    Viewport,\r\n    Filter,\r\n    TextureBlit,\r\n    DescriptorSetInfo,\r\n    Format,\r\n} from '../base/define';\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { PipelineState } from '../base/pipeline-state';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGPUDescriptorSet } from './webgpu-descriptor-set';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { WebGPUCommandAllocator } from './webgpu-command-allocator';\r\nimport {\r\n    clearRect,\r\n    WebGPUCmd,\r\n    WebGPUCmdCopyBufferToTexture,\r\n    WebGPUCmdPackage,\r\n    WebGPUCmdUpdateBuffer,\r\n} from './webgpu-commands';\r\nimport { WebGPUFramebuffer } from './webgpu-framebuffer';\r\nimport {\r\n    IWebGPUGPUInputAssembler,\r\n    IWebGPUGPUDescriptorSet,\r\n    IWebGPUGPUPipelineState,\r\n    IWebGPUGPUPipelineLayout,\r\n} from './webgpu-gpu-objects';\r\nimport { WebGPUInputAssembler } from './webgpu-input-assembler';\r\nimport { WebGPUPipelineState } from './webgpu-pipeline-state';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { WebGPURenderPass } from './webgpu-render-pass';\r\nimport { INT_MAX } from '../../core/math/bits';\r\nimport { GeneralBarrier } from '../base/states/general-barrier';\r\nimport { TextureBarrier } from '../base/states/texture-barrier';\r\nimport { BufferBarrier } from '../base/states/buffer-barrier';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport { WebGPUSwapchain } from './webgpu-swapchain';\r\nimport { WebGPUPipelineLayout } from './webgpu-pipeline-layout';\r\nimport { error, errorID } from '../../core';\r\n\r\nexport interface IWebGPUDepthBias {\r\n    constantFactor: number;\r\n    clamp: number;\r\n    slopeFactor: number;\r\n}\r\n\r\nexport interface IWebGPUDepthBounds {\r\n    minBounds: number;\r\n    maxBounds: number;\r\n}\r\n\r\nexport interface IWebGPUStencilWriteMask {\r\n    face: StencilFace;\r\n    writeMask: number;\r\n}\r\n\r\nexport interface IWebGPUStencilCompareMask {\r\n    face: StencilFace;\r\n    reference: number;\r\n    compareMask: number;\r\n}\r\n\r\ninterface CommandEncoder { commandEncoder: GPUCommandEncoder, renderPassEncoder: GPURenderPassEncoder }\r\nlet currPipelineState: WebGPUPipelineState | null = null;\r\nconst descriptorSets: WebGPUDescriptorSet[] = [];\r\nconst groupSets: number[] = [0, 1, 2];\r\nconst renderAreas: Rect[] = [];\r\nexport class WebGPUCommandBuffer extends CommandBuffer {\r\n    public pipelineBarrier (\r\n        barrier: Readonly<GeneralBarrier> | null,\r\n        bufferBarriers?: readonly BufferBarrier[] | undefined,\r\n        buffers?: readonly Buffer[] | undefined,\r\n        textureBarriers?: readonly TextureBarrier[] | undefined,\r\n        textures?: readonly Texture[] | undefined,\r\n    ): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public blitTexture (srcTexture: Readonly<Texture>, dstTexture: Texture, regions: readonly TextureBlit[], filter: Filter): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    public cmdPackage: WebGPUCmdPackage = new WebGPUCmdPackage();\r\n    protected _webGPUAllocator: WebGPUCommandAllocator | null = null;\r\n    protected _isInRenderPass = false;\r\n    protected _curGPUPipelineState: IWebGPUGPUPipelineState | null = null;\r\n    protected _curWebGPUPipelineState: WebGPUPipelineState | null = null;\r\n    protected _curGPUDescriptorSets: IWebGPUGPUDescriptorSet[] = [];\r\n    protected _curGPUInputAssembler: IWebGPUGPUInputAssembler | null = null;\r\n    protected _curDynamicOffsets: number[][] = [];\r\n    protected _curViewport: Viewport | null = null;\r\n    protected _curScissor: Rect | null = null;\r\n    protected _curLineWidth: number | null = null;\r\n    protected _curDepthBias: IWebGPUDepthBias | null = null;\r\n    protected _curBlendConstants: number[] = [];\r\n    protected _curDepthBounds: IWebGPUDepthBounds | null = null;\r\n    protected _curStencilWriteMask: IWebGPUStencilWriteMask | null = null;\r\n    protected _curStencilCompareMask: IWebGPUStencilCompareMask | null = null;\r\n    protected _isStateValid = false;\r\n    protected _globalDescriptors: WebGPUDescriptorSet[] = [];\r\n\r\n    private _nativeCommandBuffer: GPUCommandBuffer | null = null;\r\n    private _encoder: CommandEncoder | undefined = undefined;\r\n    private _descSetDirtyIndex: number = INT_MAX;\r\n    private _nativePassDesc: GPURenderPassDescriptor | null = null;\r\n    private _wgpuRenderPass!: WebGPURenderPass;\r\n\r\n    private _renderPassFuncQueue: ((renPassEncoder: GPURenderPassEncoder) => void)[] = [];\r\n\r\n    public initialize (info: CommandBufferInfo): boolean {\r\n        this._type = info.type;\r\n        this._queue = info.queue;\r\n        const device = WebGPUDeviceManager.instance;\r\n        this._webGPUAllocator = device.cmdAllocator;\r\n        this._encoder = {} as CommandEncoder;\r\n\r\n        const setCount = device.bindingMappings.blockOffsets.length;\r\n        for (let i = 0; i < setCount; i++) {\r\n            this._curGPUDescriptorSets.push(null!);\r\n            this._curDynamicOffsets.push([]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._webGPUAllocator) {\r\n            this._webGPUAllocator.clearCmds(this.cmdPackage);\r\n            this._webGPUAllocator = null;\r\n        }\r\n    }\r\n\r\n    public begin (renderPass?: RenderPass, subpass?: number, frameBuffer?: Framebuffer): void {\r\n        this._webGPUAllocator!.clearCmds(this.cmdPackage);\r\n        renderAreas.length = 0;\r\n        this._curGPUPipelineState = null;\r\n        this._curGPUInputAssembler = null;\r\n        this._curGPUDescriptorSets.length = 0;\r\n        const dynamicOffsetSize = this._curDynamicOffsets.length;\r\n        for (let i = 0; i < dynamicOffsetSize; i++) {\r\n            this._curDynamicOffsets[i].length = 0;\r\n        }\r\n        this._curViewport = null;\r\n        this._curScissor = null;\r\n        this._curLineWidth = null;\r\n        this._curDepthBias = null;\r\n        this._curBlendConstants.length = 0;\r\n        this._curDepthBounds = null;\r\n        this._curStencilWriteMask = null;\r\n        this._curStencilCompareMask = null;\r\n        this._numDrawCalls = 0;\r\n        this._numInstances = 0;\r\n        this._numTris = 0;\r\n    }\r\n\r\n    public end (): void {\r\n        this._isStateValid = false;\r\n        this._isInRenderPass = false;\r\n    }\r\n\r\n    public beginRenderPass (\r\n        renderPass: RenderPass,\r\n        framebuffer: Framebuffer,\r\n        renderArea: Rect,\r\n        clearColors: Color[],\r\n        clearDepth: number,\r\n        clearStencil: number,\r\n    ): void {\r\n        const device = WebGPUDeviceManager.instance;\r\n        const gpuDevice = device;\r\n        this._wgpuRenderPass = renderPass as WebGPURenderPass;\r\n        this._nativePassDesc = this._wgpuRenderPass.gpuRenderPass.nativeRenderPass!;\r\n        const originalRP = this._wgpuRenderPass.gpuRenderPass.originalRP!;\r\n        const gpuFramebuffer = (framebuffer as WebGPUFramebuffer).gpuFramebuffer;\r\n        renderAreas.push(renderArea);\r\n        let needPartialClear = false;\r\n        const renderingFullScreen = gpuFramebuffer.gpuColorTextures.every((val) => {\r\n            if (renderArea.x !== 0 || renderArea.y !== 0 || renderArea.width !== val.width || renderArea.height !== val.height) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        const swapchain = gpuDevice.getSwapchains()[0] as WebGPUSwapchain;\r\n        const clearColorSize = clearColors.length;\r\n        for (let i = 0; i < clearColorSize; i++) {\r\n            const colorTex = gpuFramebuffer.isOffscreen ? gpuFramebuffer.gpuColorTextures[i].getTextureView()\r\n                : swapchain.colorGPUTextureView;\r\n            colorTex!.label = gpuFramebuffer.isOffscreen ? 'offscreen' : 'swapchain';\r\n            if (!renderingFullScreen) {\r\n                needPartialClear = originalRP.colorAttachments[i].loadOp === 'clear';\r\n                if (renderAreas.length > 1) {\r\n                    this._nativePassDesc.colorAttachments[i].loadOp = 'load';\r\n                }\r\n            }\r\n            this._nativePassDesc.colorAttachments[i].view = colorTex;\r\n            this._nativePassDesc.colorAttachments[i].clearValue = [clearColors[i].x, clearColors[i].y, clearColors[i].z, clearColors[i].w];\r\n        }\r\n\r\n        if (this._wgpuRenderPass.depthStencilAttachment?.format !== Format.UNKNOWN) {\r\n            const tex = gpuFramebuffer.gpuDepthStencilTexture?.gpuTexture;\r\n            const depthTex = tex ? tex.createView() : swapchain.gpuDepthStencilTextureView;\r\n            const depthStencilAttachment = this._nativePassDesc.depthStencilAttachment!;\r\n            depthStencilAttachment.view = depthTex;\r\n            depthStencilAttachment.depthClearValue = clearDepth;\r\n            depthStencilAttachment.stencilClearValue = clearStencil;\r\n        }\r\n\r\n        renderArea.x = Math.floor(renderArea.x);\r\n        renderArea.y = Math.floor(renderArea.y);\r\n        renderArea.width = Math.floor(renderArea.width);\r\n        renderArea.height = Math.floor(renderArea.height);\r\n        const vpfunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            passEncoder.setViewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height, 0.0, 1.0);\r\n        };\r\n        const srfunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            passEncoder.setScissorRect(renderArea.x, renderArea.y, renderArea.width, renderArea.height);\r\n        };\r\n\r\n        this._renderPassFuncQueue.push(vpfunc);\r\n        this._renderPassFuncQueue.push(srfunc);\r\n\r\n        if (!renderingFullScreen && needPartialClear) {\r\n            let idx = 0;\r\n            gpuFramebuffer.gpuColorTextures.forEach((tex) => {\r\n                clearRect(device, tex, renderArea, clearColors[idx]);\r\n                idx++;\r\n            });\r\n        }\r\n\r\n        this._isInRenderPass = true;\r\n    }\r\n\r\n    public endRenderPass (): void {\r\n        const device = WebGPUDeviceManager.instance;\r\n        const nativeDevice = (device).nativeDevice!;\r\n        const cmdEncoder = nativeDevice.createCommandEncoder();\r\n        const passEncoder = cmdEncoder.beginRenderPass(this._nativePassDesc!);\r\n        this._renderPassFuncQueue.forEach((cb) => {\r\n            cb(passEncoder);\r\n        });\r\n\r\n        passEncoder.end();\r\n        nativeDevice?.queue.submit([cmdEncoder.finish()]);\r\n        let idx = 0;\r\n        for (const attachment of this._nativePassDesc!.colorAttachments) {\r\n            attachment!.loadOp = this._wgpuRenderPass.gpuRenderPass.originalRP!.colorAttachments[idx].loadOp;\r\n            idx++;\r\n        }\r\n        this._isInRenderPass = false;\r\n        this._isStateValid = false;\r\n        this._renderPassFuncQueue.length = 0;\r\n    }\r\n\r\n    public bindPipelineState (pipelineState: PipelineState): void {\r\n        const webgpuPipelineState = (pipelineState as WebGPUPipelineState);\r\n        const gpuPipelineState = webgpuPipelineState.gpuPipelineState;\r\n        if (gpuPipelineState !== this._curGPUPipelineState) {\r\n            this._curWebGPUPipelineState = webgpuPipelineState;\r\n            this._curGPUPipelineState = gpuPipelineState;\r\n            currPipelineState = webgpuPipelineState;\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public bindDescriptorSet (set: number, descriptorSet: DescriptorSet, dynamicOffsets?: number[]): void {\r\n        const gpuDescriptorSets = (descriptorSet as unknown as WebGPUDescriptorSet).gpuDescriptorSet;\r\n        if (gpuDescriptorSets !== this._curGPUDescriptorSets[set]) {\r\n            this._curGPUDescriptorSets[set] = gpuDescriptorSets;\r\n            descriptorSets[set] = descriptorSet as WebGPUDescriptorSet;\r\n            this._isStateValid = true;\r\n        }\r\n        if (dynamicOffsets && dynamicOffsets.length) {\r\n            const offsets = this._curDynamicOffsets[set];\r\n            const dynamicOffsetSize = dynamicOffsets.length;\r\n            for (let i = 0; i < dynamicOffsetSize; i++) offsets[i] = dynamicOffsets[i];\r\n            offsets.length = dynamicOffsetSize;\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public bindInputAssembler (inputAssembler: InputAssembler): void {\r\n        const gpuInputAssembler = (inputAssembler as unknown as WebGPUInputAssembler).gpuInputAssembler;\r\n        this._curGPUInputAssembler = gpuInputAssembler;\r\n        this._isStateValid = true;\r\n    }\r\n\r\n    public setViewport (viewport: Viewport): void {\r\n        viewport.left = Math.floor(viewport.left);\r\n        viewport.top = Math.floor(viewport.top);\r\n        viewport.width = Math.floor(viewport.width);\r\n        viewport.height = Math.floor(viewport.height);\r\n        viewport.minDepth = Math.floor(viewport.minDepth);\r\n        viewport.maxDepth = Math.floor(viewport.maxDepth);\r\n        this._curViewport = new Viewport(viewport.left, viewport.top, viewport.width, viewport.height, viewport.minDepth, viewport.maxDepth);\r\n        const vpfunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            passEncoder.setViewport(\r\n                viewport.left,\r\n                viewport.top,\r\n                viewport.width,\r\n                viewport.height,\r\n                viewport.minDepth,\r\n                viewport.maxDepth,\r\n            );\r\n        };\r\n        this._renderPassFuncQueue.push(vpfunc);\r\n        this._isStateValid = true;\r\n    }\r\n\r\n    public setScissor (scissor: Rect): void {\r\n        scissor.x = Math.floor(scissor.x);\r\n        scissor.y = Math.floor(scissor.y);\r\n        scissor.width = Math.floor(scissor.width);\r\n        scissor.height = Math.floor(scissor.height);\r\n        const srfunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            passEncoder.setScissorRect(scissor.x, scissor.y, scissor.width, scissor.height);\r\n        };\r\n        this._renderPassFuncQueue.push(srfunc);\r\n        this._isStateValid = true;\r\n    }\r\n\r\n    public setLineWidth (lineWidth: number): void {\r\n        error('line width not supproted by webGPU');\r\n    }\r\n\r\n    public setDepthBias (depthBiasConstantFactor: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void {\r\n        if (!this._curDepthBias) {\r\n            this._curDepthBias = {\r\n                constantFactor: depthBiasConstantFactor,\r\n                clamp: depthBiasClamp,\r\n                slopeFactor: depthBiasSlopeFactor,\r\n            };\r\n            this._isStateValid = true;\r\n        } else if (this._curDepthBias.constantFactor !== depthBiasConstantFactor\r\n            || this._curDepthBias.clamp !== depthBiasClamp\r\n            || this._curDepthBias.slopeFactor !== depthBiasSlopeFactor) {\r\n            this._curDepthBias.constantFactor = depthBiasConstantFactor;\r\n            this._curDepthBias.clamp = depthBiasClamp;\r\n            this._curDepthBias.slopeFactor = depthBiasSlopeFactor;\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public setBlendConstants (blendConstants: Color): void {\r\n        if (\r\n            this._curBlendConstants[0] !== blendConstants.x\r\n            || this._curBlendConstants[1] !== blendConstants.y\r\n            || this._curBlendConstants[2] !== blendConstants.z\r\n            || this._curBlendConstants[3] !== blendConstants.w) {\r\n            this._curBlendConstants.length = 0;\r\n            Array.prototype.push.apply(this._curBlendConstants, [blendConstants.x, blendConstants.y, blendConstants.z, blendConstants.w]);\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public setDepthBound (minDepthBounds: number, maxDepthBounds: number): void {\r\n        if (!this._curDepthBounds) {\r\n            this._curDepthBounds = {\r\n                minBounds: minDepthBounds,\r\n                maxBounds: maxDepthBounds,\r\n            };\r\n            this._isStateValid = true;\r\n        } else if (this._curDepthBounds.minBounds !== minDepthBounds\r\n            || this._curDepthBounds.maxBounds !== maxDepthBounds) {\r\n            this._curDepthBounds = {\r\n                minBounds: minDepthBounds,\r\n                maxBounds: maxDepthBounds,\r\n            };\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public setStencilWriteMask (face: StencilFace, writeMask: number): void {\r\n        if (!this._curStencilWriteMask) {\r\n            this._curStencilWriteMask = {\r\n                face,\r\n                writeMask,\r\n            };\r\n            this._isStateValid = true;\r\n        } else if (this._curStencilWriteMask.face !== face\r\n            || this._curStencilWriteMask.writeMask !== writeMask) {\r\n            this._curStencilWriteMask.face = face;\r\n            this._curStencilWriteMask.writeMask = writeMask;\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public setStencilCompareMask (face: StencilFace, reference: number, compareMask: number): void {\r\n        if (!this._curStencilCompareMask) {\r\n            this._curStencilCompareMask = {\r\n                face,\r\n                reference,\r\n                compareMask,\r\n            };\r\n            this._isStateValid = true;\r\n        } else if (this._curStencilCompareMask.face !== face\r\n            || this._curStencilCompareMask.reference !== reference\r\n            || this._curStencilCompareMask.compareMask !== compareMask) {\r\n            this._curStencilCompareMask.face = face;\r\n            this._curStencilCompareMask.reference = reference;\r\n            this._curStencilCompareMask.compareMask = compareMask;\r\n            this._isStateValid = true;\r\n        }\r\n    }\r\n\r\n    public draw (inputAssembler: InputAssembler): void {\r\n        const device = WebGPUDeviceManager.instance;\r\n        if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass) {\r\n            errorID(16328);\r\n            return;\r\n        }\r\n        if (this._isStateValid) {\r\n            this.bindStates();\r\n        }\r\n\r\n        const ia = inputAssembler as unknown as WebGPUInputAssembler;\r\n        const iaData = ia.gpuInputAssembler;\r\n\r\n        const nativeDevice = device;\r\n\r\n        if (ia.indirectBuffer) {\r\n            const indirectBuffer = iaData.gpuIndirectBuffer!;\r\n            if (nativeDevice.multiDrawIndirectSupport) {\r\n                // not support yet\r\n            } else {\r\n                const drawInfoCount = iaData.gpuIndirectBuffer?.indirects.length as number;\r\n                if (indirectBuffer.drawIndirectByIndex) {\r\n                    const drawFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n                        const drawInfoSize = Object.keys(DrawInfo).length;\r\n                        for (let i = 0; i < drawInfoCount; i++) {\r\n                            passEncoder?.drawIndexedIndirect(indirectBuffer.gpuBuffer!, indirectBuffer.gpuOffset + i * drawInfoSize);\r\n                        }\r\n                    };\r\n                    this._renderPassFuncQueue.push(drawFunc);\r\n                } else {\r\n                    // FIXME: draw IndexedIndirect and Indirect by different buffer\r\n                    const drawFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n                        const drawInfoSize = Object.keys(DrawInfo).length;\r\n                        for (let i = 0; i < drawInfoCount; i++) {\r\n                            passEncoder?.drawIndirect(indirectBuffer.gpuBuffer!, indirectBuffer.gpuOffset + i * drawInfoSize);\r\n                        }\r\n                    };\r\n                    this._renderPassFuncQueue.push(drawFunc);\r\n                }\r\n            }\r\n        } else {\r\n            const instanceCount = inputAssembler.instanceCount > 0 ? inputAssembler.instanceCount : 1;\r\n            const drawByIndex = inputAssembler.indexBuffer && (ia.indexCount > 0);\r\n\r\n            if (drawByIndex) {\r\n                const drawFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n                    const instanceCount = Math.max(ia.instanceCount, 1);\r\n                    passEncoder?.drawIndexed(ia.indexCount, instanceCount, ia.firstIndex, ia.firstVertex, ia.firstInstance);\r\n                };\r\n                this._renderPassFuncQueue.push(drawFunc);\r\n            } else {\r\n                const drawFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n                    const instanceCount = Math.max(ia.instanceCount, 1);\r\n                    passEncoder?.draw(ia.vertexCount, instanceCount, ia.firstVertex, ia.firstInstance);\r\n                };\r\n                this._renderPassFuncQueue.push(drawFunc);\r\n            }\r\n        }\r\n\r\n        ++this._numDrawCalls;\r\n        this._numInstances += inputAssembler.instanceCount;\r\n        const indexCount = inputAssembler.indexCount || inputAssembler.vertexCount;\r\n        if (this._curGPUPipelineState) {\r\n            const gpuPrimitive = this._curGPUPipelineState.gpuPrimitive;\r\n            switch (gpuPrimitive) {\r\n            case 'triangle-strip':\r\n                this._numTris += (indexCount - 2) * Math.max(inputAssembler.instanceCount, 1);\r\n                break;\r\n            case 'triangle-list': {\r\n                this._numTris += indexCount / 3 * Math.max(inputAssembler.instanceCount, 1);\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateBuffer (buffer: Buffer, data: BufferSource, offset?: number, size?: number): void {\r\n        if (this._type === CommandBufferType.PRIMARY && this._isInRenderPass) {\r\n            errorID(16329);\r\n            return;\r\n        }\r\n        const gpuBuffer = (buffer as unknown as WebGPUBuffer).gpuBuffer;\r\n        if (!gpuBuffer) {\r\n            return;\r\n        }\r\n        const cmd = this._webGPUAllocator!.updateBufferCmdPool.alloc(WebGPUCmdUpdateBuffer);\r\n        let buffSize = 0;\r\n        let buff: BufferSource | null = null;\r\n\r\n        // TODO: Have to copy to staging buffer first to make this work for the execution is deferred.\r\n        // But since we are using specialized primary command buffers in WebGL backends, we leave it as is for now\r\n        if (buffer.usage & BufferUsageBit.INDIRECT) {\r\n            buff = data;\r\n        } else {\r\n            if (size !== undefined) {\r\n                buffSize = size;\r\n            } else {\r\n                buffSize = (data as ArrayBuffer).byteLength;\r\n            }\r\n            buff = data;\r\n        }\r\n        const device = WebGPUDeviceManager.instance;\r\n        const nativeDevice = (device).nativeDevice;\r\n        nativeDevice?.queue.writeBuffer(gpuBuffer.gpuBuffer!, gpuBuffer.gpuOffset, buff as ArrayBuffer);\r\n    }\r\n\r\n    public copyBuffersToTexture (buffers: ArrayBufferView[], texture: Texture, regions: BufferTextureCopy[]): void {\r\n        if (this._type === CommandBufferType.PRIMARY && this._isInRenderPass) {\r\n            errorID(16330);\r\n            return;\r\n        }\r\n        const gpuTexture = (texture as WebGPUTexture).gpuTexture;\r\n        if (!gpuTexture) {\r\n            return;\r\n        }\r\n        const cmd = this._webGPUAllocator!.copyBufferToTextureCmdPool.alloc(WebGPUCmdCopyBufferToTexture);\r\n        cmd.gpuTexture = gpuTexture;\r\n        cmd.regions = regions;\r\n        cmd.buffers = buffers;\r\n\r\n        this.cmdPackage.copyBufferToTextureCmds.push(cmd);\r\n        this.cmdPackage.cmds.push(WebGPUCmd.COPY_BUFFER_TO_TEXTURE);\r\n    }\r\n\r\n    public execute (cmdBuffs: CommandBuffer[], count: number): void {\r\n        for (let i = 0; i < count; ++i) {\r\n            const WebGPUCmdBuff = cmdBuffs[i] as WebGPUCommandBuffer;\r\n            const cmdPackage = WebGPUCmdBuff.cmdPackage;\r\n            const rpLength = cmdPackage.beginRenderPassCmds.length;\r\n            for (let c = 0; c < rpLength; ++c) {\r\n                const cmd = cmdPackage.beginRenderPassCmds.array[c];\r\n                ++cmd.refCount;\r\n                this.cmdPackage.beginRenderPassCmds.push(cmd);\r\n            }\r\n            const bindStatesCmds = cmdPackage.bindStatesCmds;\r\n            const stateCmdCount = bindStatesCmds.length;\r\n            for (let c = 0; c < stateCmdCount; ++c) {\r\n                const cmd = bindStatesCmds.array[c];\r\n                ++cmd.refCount;\r\n                this.cmdPackage.bindStatesCmds.push(cmd);\r\n            }\r\n            const drawCmds = cmdPackage.drawCmds;\r\n            const drawCmdCount = drawCmds.length;\r\n            for (let c = 0; c < drawCmdCount; ++c) {\r\n                const cmd = drawCmds.array[c];\r\n                ++cmd.refCount;\r\n                this.cmdPackage.drawCmds.push(cmd);\r\n            }\r\n            const updateBufferCmdCount = cmdPackage.updateBufferCmds.length;\r\n            for (let c = 0; c < updateBufferCmdCount; ++c) {\r\n                const cmd = cmdPackage.updateBufferCmds.array[c];\r\n                ++cmd.refCount;\r\n                this.cmdPackage.updateBufferCmds.push(cmd);\r\n            }\r\n            const copyBufferTexCmdCount = cmdPackage.copyBufferToTextureCmds.length;\r\n            for (let c = 0; c < copyBufferTexCmdCount; ++c) {\r\n                const cmd = cmdPackage.copyBufferToTextureCmds.array[c];\r\n                ++cmd.refCount;\r\n                this.cmdPackage.copyBufferToTextureCmds.push(cmd);\r\n            }\r\n\r\n            this.cmdPackage.cmds.concat(cmdPackage.cmds.array);\r\n\r\n            this._numDrawCalls += WebGPUCmdBuff._numDrawCalls;\r\n            this._numInstances += WebGPUCmdBuff._numInstances;\r\n            this._numTris += WebGPUCmdBuff._numTris;\r\n        }\r\n    }\r\n\r\n    protected bindStates (): void {\r\n        if (!this._curGPUPipelineState) {\r\n            return;\r\n        }\r\n        const gpuPipelineLayout = this._curGPUPipelineState.gpuPipelineLayout as IWebGPUGPUPipelineLayout;\r\n        const wgpuPipLayout = (currPipelineState?.pipelineLayout as WebGPUPipelineLayout);\r\n        const device = WebGPUDeviceManager.instance;\r\n        for (let i = 0; i < groupSets.length; i++) {\r\n            const currSetIdx = groupSets[i];\r\n            const currDesc = descriptorSets[currSetIdx];\r\n            if (currDesc && currDesc.gpuDescriptorSet) {\r\n                currDesc.prepare();\r\n            } else {\r\n                const currLayout = wgpuPipLayout.setLayouts[currSetIdx];\r\n                const currLayoutInfo = new DescriptorSetInfo(currLayout);\r\n                const newDescSet = device.createDescriptorSet(currLayoutInfo) as WebGPUDescriptorSet;\r\n                descriptorSets[currSetIdx] = newDescSet;\r\n                newDescSet.prepare(true);\r\n            }\r\n        }\r\n        this._curWebGPUPipelineState!.prepare(this._curGPUInputAssembler!);\r\n        // ----------------------------wgpu pipline state-----------------------------\r\n        const wgpuPipeline = this._curGPUPipelineState.nativePipeline as GPURenderPipeline;\r\n        const pplFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            passEncoder.setPipeline(wgpuPipeline);\r\n        };\r\n        this._renderPassFuncQueue.push(pplFunc);\r\n        if (this._curGPUPipelineState.pipelineState?.depthStencil) {\r\n            const stencilRef = this._curGPUPipelineState.stencilRef;\r\n            const stencilRefFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n                passEncoder.setStencilReference(stencilRef);\r\n            };\r\n            this._renderPassFuncQueue.push(stencilRefFunc);\r\n        }\r\n        const currGPUDescSize = groupSets.length;\r\n        const wgpuBindGroups = new Array<GPUBindGroup>(currGPUDescSize);\r\n        const wgpuDynOffsets = new Array<number[]>(currGPUDescSize);\r\n        for (let i = 0; i < currGPUDescSize; i++) {\r\n            const currSetIdx = groupSets[i];\r\n            const descObj = descriptorSets[currSetIdx];\r\n            const curGpuDesc = descObj.gpuDescriptorSet;\r\n            wgpuBindGroups[currSetIdx] = curGpuDesc.bindGroup;\r\n            wgpuDynOffsets[currSetIdx] = [...this._curDynamicOffsets[currSetIdx]];\r\n            if (!descObj.dynamicOffsetCount) {\r\n                wgpuDynOffsets[currSetIdx] = [];\r\n            } else if (descObj && descObj.dynamicOffsetCount !== wgpuDynOffsets[currSetIdx].length) {\r\n                wgpuDynOffsets[currSetIdx].length = descObj.dynamicOffsetCount;\r\n                for (let j = 0; j < descObj.dynamicOffsetCount; j++) {\r\n                    const currOffset = wgpuDynOffsets[currSetIdx][j];\r\n                    if (!currOffset) {\r\n                        wgpuDynOffsets[currSetIdx][j] = 0;\r\n                    } else {\r\n                        const currBind = descObj.dynamicOffsets[j];\r\n                        const bindObj = descObj.gpuDescriptorSet.gpuDescriptors[currBind];\r\n                        if (bindObj && bindObj.gpuBuffer && currOffset > bindObj.gpuBuffer.gpuBuffer!.size) {\r\n                            wgpuDynOffsets[currSetIdx][j] = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const bgfunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            const gpuBindGroupSize = wgpuBindGroups.length;\r\n            for (let i = 0; i < gpuBindGroupSize; i++) {\r\n                let currBindGroup = wgpuBindGroups[i];\r\n                if (!currBindGroup) {\r\n                    currBindGroup = (device.defaultResource.descSet as WebGPUDescriptorSet).gpuDescriptorSet.bindGroup;\r\n                }\r\n                // FIXME: this is a special sentence that 2 in 3 parameters I'm not certain.\r\n                passEncoder.setBindGroup(i, currBindGroup, wgpuDynOffsets[i]);\r\n            }\r\n        };\r\n        this._renderPassFuncQueue.push(bgfunc);\r\n\r\n        // ---------------------------- wgpu input assembly  -----------------------------\r\n        const ia = this._curGPUInputAssembler!;\r\n        const wgpuVertexBuffers = new Array<{ slot: number, buffer: GPUBuffer, offset: number }>(ia.gpuVertexBuffers.length);\r\n        const gpuVertBuffSize = ia.gpuVertexBuffers.length;\r\n        for (let i = 0; i < gpuVertBuffSize; i++) {\r\n            wgpuVertexBuffers[i] = { slot: i, buffer: ia.gpuVertexBuffers[i].gpuBuffer!, offset: ia.gpuVertexBuffers[i].gpuOffset };\r\n        }\r\n        const vbFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            const vertBuffSize = wgpuVertexBuffers.length;\r\n            for (let i = 0; i < vertBuffSize; i++) {\r\n                passEncoder.setVertexBuffer(wgpuVertexBuffers[i].slot, wgpuVertexBuffers[i].buffer, wgpuVertexBuffers[i].offset);\r\n            }\r\n        };\r\n        this._renderPassFuncQueue.push(vbFunc);\r\n        if (ia.gpuIndexBuffer) {\r\n            const wgpuIndexBuffer: { indexType: GPUIndexFormat, buffer: GPUBuffer, offset: number, size: number } = {\r\n                indexType: ia.gpuIndexType,\r\n                buffer: ia.gpuIndexBuffer.gpuBuffer as GPUBuffer,\r\n                offset: ia.gpuIndexBuffer.gpuOffset,\r\n                size: ia.gpuIndexBuffer.size,\r\n            };\r\n            const ibFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n                passEncoder.setIndexBuffer(\r\n                    wgpuIndexBuffer.buffer,\r\n                    wgpuIndexBuffer.indexType,\r\n                    wgpuIndexBuffer.offset,\r\n                    wgpuIndexBuffer.size,\r\n                );\r\n            };\r\n            this._renderPassFuncQueue.push(ibFunc);\r\n        }\r\n        const bcFunc = (passEncoder: GPURenderPassEncoder): void => {\r\n            passEncoder.setBlendConstant([this._curBlendConstants[0],\r\n                this._curBlendConstants[1],\r\n                this._curBlendConstants[2],\r\n                this._curBlendConstants[3]]);\r\n        };\r\n\r\n        if (this._curBlendConstants.length) this._renderPassFuncQueue.push(bcFunc);\r\n\r\n        this._isStateValid = false;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Framebuffer } from '../base/framebuffer';\r\nimport { IWebGPUGPUFramebuffer, IWebGPUTexture } from './webgpu-gpu-objects';\r\nimport { WebGPURenderPass } from './webgpu-render-pass';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\nimport { FramebufferInfo } from '../base/define';\r\n\r\nexport class WebGPUFramebuffer extends Framebuffer {\r\n    get gpuFramebuffer (): IWebGPUGPUFramebuffer {\r\n        return this._gpuFramebuffer!;\r\n    }\r\n\r\n    private _gpuFramebuffer: IWebGPUGPUFramebuffer | null = null;\r\n    public initialize (info: Readonly<FramebufferInfo>): void {\r\n        this._renderPass = info.renderPass;\r\n        this._colorTextures = info.colorTextures || [];\r\n        this._depthStencilTexture = info.depthStencilTexture || null;\r\n\r\n        const gpuColorTextures: IWebGPUTexture[] = [];\r\n        let isOffscreen = true;\r\n        const colorTexSize = info.colorTextures.length;\r\n        for (let i = 0; i < colorTexSize; i++) {\r\n            const colorTexture = info.colorTextures[i] as WebGPUTexture;\r\n            if (colorTexture) {\r\n                const gpuTex = colorTexture.gpuTexture;\r\n                gpuColorTextures.push(gpuTex);\r\n                if (gpuTex.isSwapchainTexture) {\r\n                    isOffscreen = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        let gpuDepthStencilTexture: IWebGPUTexture | null = null;\r\n        if (info.depthStencilTexture) {\r\n            gpuDepthStencilTexture = (info.depthStencilTexture as WebGPUTexture).gpuTexture;\r\n        }\r\n        let width = Number.MAX_SAFE_INTEGER;\r\n        let height = Number.MAX_SAFE_INTEGER;\r\n        this._gpuFramebuffer = {\r\n            gpuRenderPass: (info.renderPass as WebGPURenderPass).gpuRenderPass,\r\n            gpuColorTextures,\r\n            gpuDepthStencilTexture,\r\n            gpuFramebuffer: null,\r\n            isOffscreen,\r\n            get width (): number {\r\n                if (this.gpuColorTextures.length > 0) {\r\n                    return this.gpuColorTextures[0].width;\r\n                } else if (this.gpuDepthStencilTexture) {\r\n                    return this.gpuDepthStencilTexture.width;\r\n                }\r\n                return width;\r\n            },\r\n            set width (val) {\r\n                width = val;\r\n            },\r\n            get height (): number {\r\n                if (this.gpuColorTextures.length > 0) {\r\n                    return this.gpuColorTextures[0].height;\r\n                } else if (this.gpuDepthStencilTexture) {\r\n                    return this.gpuDepthStencilTexture.height;\r\n                }\r\n                return height;\r\n            },\r\n            set height (val) {\r\n                height = val;\r\n            },\r\n        };\r\n        this._width = this._gpuFramebuffer.width;\r\n        this._height = this._gpuFramebuffer.height;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._gpuFramebuffer) {\r\n            this._gpuFramebuffer = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { InputAssembler } from '../base/input-assembler';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { WebGPUCmdFuncCreateInputAssember, WebGPUCmdFuncDestroyInputAssembler } from './webgpu-commands';\r\nimport { IWebGPUGPUInputAssembler, IWebGPUGPUBuffer } from './webgpu-gpu-objects';\r\nimport { InputAssemblerInfo } from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport { errorID } from '../../core';\r\n\r\nexport class WebGPUInputAssembler extends InputAssembler {\r\n    public get gpuInputAssembler (): IWebGPUGPUInputAssembler {\r\n        return this._gpuInputAssembler!;\r\n    }\r\n\r\n    private _gpuInputAssembler: IWebGPUGPUInputAssembler | null = null;\r\n\r\n    public initialize (info: Readonly<InputAssemblerInfo>): void {\r\n        if (info.vertexBuffers.length === 0) {\r\n            errorID(16331);\r\n            return;\r\n        }\r\n\r\n        this._attributes = info.attributes;\r\n        this._attributesHash = this.computeAttributesHash();\r\n        this._vertexBuffers = info.vertexBuffers;\r\n\r\n        if (info.indexBuffer) {\r\n            this._indexBuffer = info.indexBuffer;\r\n            this.drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;\r\n            this.drawInfo.firstIndex = 0;\r\n        } else {\r\n            const vertBuff = this._vertexBuffers[0];\r\n            this.drawInfo.vertexCount = vertBuff.size / vertBuff.stride;\r\n            this.drawInfo.firstVertex = 0;\r\n            this.drawInfo.vertexOffset = 0;\r\n        }\r\n\r\n        this._drawInfo.instanceCount = 0;\r\n        this._drawInfo.firstInstance = 0;\r\n\r\n        this._indirectBuffer = info.indirectBuffer || null;\r\n        const vertBuffSize = info.vertexBuffers.length;\r\n        const gpuVertexBuffers: IWebGPUGPUBuffer[] = new Array<IWebGPUGPUBuffer>(vertBuffSize);\r\n        for (let i = 0; i < vertBuffSize; ++i) {\r\n            const vb = info.vertexBuffers[i] as WebGPUBuffer;\r\n            if (vb.gpuBuffer) {\r\n                gpuVertexBuffers[i] = vb.gpuBuffer;\r\n            }\r\n        }\r\n\r\n        let gpuIndexBuffer: IWebGPUGPUBuffer | null = null;\r\n        let gpuIndexType: GPUIndexFormat = 'uint16';\r\n        if (info.indexBuffer) {\r\n            gpuIndexBuffer = (info.indexBuffer as WebGPUBuffer).gpuBuffer;\r\n            if (gpuIndexBuffer) {\r\n                switch (gpuIndexBuffer.stride) {\r\n                // case 1: gpuIndexType = 0x1401; break; // => WebGLRenderingContext.UNSIGNED_BYTE\r\n                case 2: gpuIndexType = 'uint16'; break; // => WebGLRenderingContext.UNSIGNED_SHORT\r\n                case 4: gpuIndexType = 'uint32'; break; // => WebGLRenderingContext.UNSIGNED_INT\r\n                default: {\r\n                    errorID(16332);\r\n                }\r\n                }\r\n            }\r\n        }\r\n\r\n        let gpuIndirectBuffer: IWebGPUGPUBuffer | null = null;\r\n        if (info.indirectBuffer) {\r\n            gpuIndirectBuffer = (info.indirectBuffer as WebGPUBuffer).gpuBuffer;\r\n        }\r\n\r\n        this._gpuInputAssembler = {\r\n            attributes: info.attributes,\r\n            gpuVertexBuffers,\r\n            gpuIndexBuffer,\r\n            gpuIndirectBuffer,\r\n\r\n            gpuAttribs: [],\r\n            gpuIndexType,\r\n        };\r\n\r\n        WebGPUCmdFuncCreateInputAssember(WebGPUDeviceManager.instance, this._gpuInputAssembler);\r\n    }\r\n\r\n    public destroy (): void {\r\n        const WebGPUDev = WebGPUDeviceManager.instance;\r\n        if (this._gpuInputAssembler) {\r\n            WebGPUCmdFuncDestroyInputAssembler(WebGPUDev, this._gpuInputAssembler);\r\n        }\r\n        this._gpuInputAssembler = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { IWebGPUGPUDescriptorSetLayout } from './webgpu-gpu-objects';\r\nimport { createBindGroupLayoutEntry } from './webgpu-commands';\r\nimport {\r\n    DescriptorSetLayoutInfo,\r\n    DESCRIPTOR_DYNAMIC_TYPE,\r\n} from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\nimport { DescriptorSet } from '../base/descriptor-set';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { WebGPUSampler } from './webgpu-sampler';\r\n\r\nexport class WebGPUDescriptorSetLayout extends DescriptorSetLayout {\r\n    get gpuDescriptorSetLayout (): IWebGPUGPUDescriptorSetLayout | null { return this._gpuDescriptorSetLayout!; }\r\n\r\n    private _gpuDescriptorSetLayout: IWebGPUGPUDescriptorSetLayout | null = null;\r\n    private _bindGrpLayoutEntries: Map<number, GPUBindGroupLayoutEntry> = new Map<number, GPUBindGroupLayoutEntry>();\r\n\r\n    private _hasChange = false;\r\n    private _currBinds: number[] = [];\r\n    private _prepareEntries: GPUBindGroupLayoutEntry[] = [];\r\n\r\n    public buffers: Map<number, WebGPUBuffer> = new Map<number, WebGPUBuffer>();\r\n    public textures: Map<number, WebGPUTexture> = new Map<number, WebGPUTexture>();\r\n    public samplers: Map<number, WebGPUSampler> = new Map<number, WebGPUSampler>();\r\n\r\n    public references: DescriptorSet[] = [];\r\n    public get currBinds (): number[] {\r\n        return this._currBinds;\r\n    }\r\n    public get prepareEntries (): GPUBindGroupLayoutEntry[] {\r\n        return this._prepareEntries;\r\n    }\r\n    public get bindGrpLayoutEntries (): Map<number, GPUBindGroupLayoutEntry> {\r\n        return this._bindGrpLayoutEntries;\r\n    }\r\n\r\n    public get hasChanged (): boolean {\r\n        return this._hasChange;\r\n    }\r\n    public resetChanged (): void {\r\n        this._hasChange = false;\r\n    }\r\n    public initialize (info: Readonly<DescriptorSetLayoutInfo>): void {\r\n        Array.prototype.push.apply(this._bindings, info.bindings);\r\n        const gfxDevice = WebGPUDeviceManager.instance;\r\n        // If the bindings are empty, it will cause the corresponding group to be generated as null,\r\n        // which will trigger a warning for the corresponding set being unbound.\r\n        if (!this._bindings.length) {\r\n            this._bindings.push(gfxDevice.defaultResource.setLayout.bindings[0]);\r\n        }\r\n        let descriptorCount = 0; let maxBinding = -1;\r\n        const flattenedIndices: number[] = [];\r\n        const bindingSize = this._bindings.length;\r\n        for (let i = 0; i < bindingSize; i++) {\r\n            const binding = this._bindings[i];\r\n            flattenedIndices.push(descriptorCount);\r\n            descriptorCount += binding.count;\r\n            if (binding.binding > maxBinding) maxBinding = binding.binding;\r\n        }\r\n\r\n        this._bindingIndices = Array(maxBinding + 1).fill(-1);\r\n        const descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);\r\n        for (let i = 0; i < bindingSize; i++) {\r\n            const binding = this._bindings[i];\r\n            this._bindingIndices[binding.binding] = i;\r\n            descriptorIndices[binding.binding] = flattenedIndices[i];\r\n        }\r\n        const dynamicBindings: number[] = [];\r\n        for (let i = 0; i < bindingSize; i++) {\r\n            const binding = this._bindings[i];\r\n            if (binding.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {\r\n                for (let j = 0; j < binding.count; j++) {\r\n                    dynamicBindings.push(binding.binding);\r\n                }\r\n            }\r\n        }\r\n        const bindGrpLayoutEntries: GPUBindGroupLayoutEntry[] = [];\r\n        this._bindings.forEach((binding) => {\r\n            bindGrpLayoutEntries.push(\r\n                ...createBindGroupLayoutEntry(\r\n                    binding,\r\n                ),\r\n            );\r\n        });\r\n        const device = gfxDevice.nativeDevice!;\r\n        const groupLayout = device.createBindGroupLayout({\r\n            entries: bindGrpLayoutEntries,\r\n        });\r\n        this._gpuDescriptorSetLayout = {\r\n            bindings: this._bindings,\r\n            dynamicBindings,\r\n            descriptorIndices,\r\n            descriptorCount,\r\n            entries: bindGrpLayoutEntries,\r\n            bindGroupLayout: groupLayout,\r\n        };\r\n    }\r\n\r\n    public clear (): void {\r\n        this.buffers.clear();\r\n        this.textures.clear();\r\n        this.samplers.clear();\r\n        this._bindGrpLayoutEntries.clear();\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._bindings.length = 0;\r\n        this.clear();\r\n        this._gpuDescriptorSetLayout = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PipelineLayout } from '../base/pipeline-layout';\r\nimport { IWebGPUGPUPipelineLayout, IWebGPUGPUDescriptorSetLayout } from './webgpu-gpu-objects';\r\nimport { WebGPUDescriptorSetLayout } from './webgpu-descriptor-set-layout';\r\nimport { PipelineLayoutInfo } from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\n\r\nexport class WebGPUPipelineLayout extends PipelineLayout {\r\n    get gpuPipelineLayout (): IWebGPUGPUPipelineLayout | null { return this._gpuPipelineLayout!; }\r\n\r\n    private _gpuPipelineLayout: IWebGPUGPUPipelineLayout | null = null;\r\n    private _nativePipelineLayout!: GPUPipelineLayout;\r\n    private _bindGrpLayouts: GPUBindGroupLayout[] = [];\r\n\r\n    public fetchPipelineLayout (resetAll: boolean = true): GPUPipelineLayout {\r\n        const gpuPipelineLayout = this._gpuPipelineLayout!;\r\n        if (resetAll) {\r\n            gpuPipelineLayout.gpuSetLayouts.length = 0;\r\n            gpuPipelineLayout.dynamicOffsetIndices.length = 0;\r\n        }\r\n        const webGPUDevice = WebGPUDeviceManager.instance;\r\n        const nativeDevice = webGPUDevice.nativeDevice;\r\n        this._bindGrpLayouts.length = 0;\r\n        const setLayoutSize = this._setLayouts.length;\r\n        for (let i = 0; i < setLayoutSize; i++) {\r\n            const setLayout = this._setLayouts[i] as WebGPUDescriptorSetLayout;\r\n            const bindGroupLayout = setLayout.gpuDescriptorSetLayout!.bindGroupLayout;\r\n            if (bindGroupLayout) {\r\n                if (resetAll) {\r\n                    const dynamicBindings = setLayout.gpuDescriptorSetLayout!.dynamicBindings;\r\n                    const indices: number[] = Array(setLayout.bindingIndices.length).fill(-1);\r\n                    const dynBindSize = dynamicBindings.length;\r\n                    for (let j = 0; j < dynBindSize; j++) {\r\n                        const binding = dynamicBindings[j];\r\n                        if (indices[binding] < 0) indices[binding] = gpuPipelineLayout.dynamicOffsetCount + j;\r\n                    }\r\n\r\n                    gpuPipelineLayout.gpuSetLayouts.push(setLayout.gpuDescriptorSetLayout!);\r\n                    gpuPipelineLayout.dynamicOffsetIndices.push(indices);\r\n                    gpuPipelineLayout.dynamicOffsetCount += dynBindSize;\r\n                }\r\n                this._bindGrpLayouts[i] = bindGroupLayout;\r\n            }\r\n        }\r\n\r\n        this._nativePipelineLayout = nativeDevice?.createPipelineLayout({ bindGroupLayouts: this._bindGrpLayouts }) as GPUPipelineLayout;\r\n        return this._nativePipelineLayout;\r\n    }\r\n\r\n    public initialize (info: PipelineLayoutInfo): boolean {\r\n        Array.prototype.push.apply(this._setLayouts, info.setLayouts);\r\n\r\n        const dynamicOffsetIndices: number[][] = [];\r\n\r\n        const gpuSetLayouts: IWebGPUGPUDescriptorSetLayout[] = [];\r\n\r\n        const dynamicOffsetCount = 0;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const that = this;\r\n        this._gpuPipelineLayout = {\r\n            setLayouts: this._setLayouts,\r\n            gpuSetLayouts,\r\n            dynamicOffsetIndices,\r\n            dynamicOffsetCount,\r\n            gpuBindGroupLayouts: this._bindGrpLayouts,\r\n            // In order to avoid binding exceeding the number specified by webgpu,\r\n            // gpulayout changes dynamically instead of binding everything at once.\r\n            get nativePipelineLayout (): GPUPipelineLayout {\r\n                return that._nativePipelineLayout;\r\n            },\r\n\r\n        };\r\n        this.fetchPipelineLayout();\r\n        return true;\r\n    }\r\n\r\n    public changeSetLayout (idx: number, setLayout: WebGPUDescriptorSetLayout): void {\r\n        this._setLayouts[idx] = setLayout;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._setLayouts.length = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PipelineState, PipelineStateInfo } from '../base/pipeline-state';\r\nimport { IWebGPUGPUInputAssembler, IWebGPUGPUPipelineState } from './webgpu-gpu-objects';\r\nimport { WebGPURenderPass } from './webgpu-render-pass';\r\nimport { WebGPUShader } from './webgpu-shader';\r\nimport { BlendOp, CullMode, DynamicStateFlagBit, Format, FormatInfos, PrimitiveMode, ShaderStageFlagBit } from '../base/define';\r\nimport { WebGPUPipelineLayout } from './webgpu-pipeline-layout';\r\nimport {\r\n    GFXFormatToWGPUFormat,\r\n    WebGPUBlendFactors,\r\n    WebGPUBlendOps,\r\n    WebGPUCompereFunc,\r\n    WebGPUStencilOp,\r\n    GFXFormatToWGPUVertexFormat,\r\n    WebGPUBlendMask,\r\n} from './webgpu-commands';\r\nimport { WebGPUDeviceManager } from './define';\r\n\r\nconst WebPUPrimitives: GPUPrimitiveTopology[] = [\r\n    'point-list',\r\n    'line-list',\r\n    'line-strip',\r\n    'line-strip',   // no line_loop in webgpu\r\n    'line-list',\r\n    'line-strip',\r\n    'line-list',\r\n    'triangle-list',\r\n    'triangle-strip',\r\n    'triangle-strip',\r\n    'triangle-list',\r\n    'triangle-strip',\r\n    'triangle-strip',\r\n    'triangle-strip',    // no quad\r\n];\r\n\r\nexport class WebGPUPipelineState extends PipelineState {\r\n    get gpuPipelineState (): IWebGPUGPUPipelineState {\r\n        return this._gpuPipelineState!;\r\n    }\r\n\r\n    private _gpuPipelineState: IWebGPUGPUPipelineState | null = null;\r\n    private _locations: Map<string, number> = new Map<string, number>();\r\n    public initialize (info: Readonly<PipelineStateInfo>): void {\r\n        this._primitive = info.primitive;\r\n        this._shader = info.shader;\r\n        this._pipelineLayout = info.pipelineLayout;\r\n        this._rs = info.rasterizerState;\r\n        this._dss = info.depthStencilState;\r\n        this._bs = info.blendState;\r\n        this._is = info.inputState;\r\n        this._renderPass = info.renderPass;\r\n        this._dynamicStates = info.dynamicStates;\r\n\r\n        const dynamicStates: DynamicStateFlagBit[] = [];\r\n        for (let i = 0; i < 31; i++) {\r\n            if (this._dynamicStates & (1 << i)) {\r\n                dynamicStates.push(1 << i);\r\n            }\r\n        }\r\n\r\n        // colorstates\r\n        const colorAttachments = this._renderPass.colorAttachments;\r\n        const colorDescs: GPUColorTargetState[] = [];\r\n        const colAttachmentSize = colorAttachments.length;\r\n        const pipelineLayoutObj = info.pipelineLayout as WebGPUPipelineLayout;\r\n        for (let i = 0; i < colAttachmentSize; i++) {\r\n            const colDesc: GPUColorTargetState = {\r\n                format: GFXFormatToWGPUFormat(colorAttachments[i].format),\r\n                writeMask: WebGPUBlendMask(this._bs.targets[i].blendColorMask),\r\n            };\r\n            if (this._bs.targets[i].blend) {\r\n                colDesc.blend = {\r\n                    color: {\r\n                        dstFactor: WebGPUBlendFactors[this._bs.targets[i].blendDst],\r\n                        operation: WebGPUBlendOps[this._bs.targets[i].blendEq === BlendOp.MAX ? BlendOp.ADD : this._bs.targets[i].blendEq],\r\n                        srcFactor: WebGPUBlendFactors[this._bs.targets[i].blendSrc],\r\n                    },\r\n                    alpha: {\r\n                        dstFactor: WebGPUBlendFactors[this._bs.targets[i].blendDstAlpha],\r\n                        operation: WebGPUBlendOps[this._bs.targets[i].blendAlphaEq === BlendOp.MAX ? BlendOp.ADD : this._bs.targets[i].blendAlphaEq],\r\n                        srcFactor: WebGPUBlendFactors[this._bs.targets[i].blendSrcAlpha],\r\n                    },\r\n                };\r\n            }\r\n            colorDescs.push(colDesc);\r\n        }\r\n\r\n        let vertexStage: GPUProgrammableStage;\r\n        let fragmentStage: GPUProgrammableStage;\r\n        const shaderStages = (this._shader as WebGPUShader).gpuShader.gpuStages;\r\n        const stageSize = shaderStages.length;\r\n        for (let i = 0; i < stageSize; i++) {\r\n            if (shaderStages[i].type === ShaderStageFlagBit.VERTEX) { vertexStage = shaderStages[i].gpuShader!; }\r\n            if (shaderStages[i].type === ShaderStageFlagBit.FRAGMENT) { fragmentStage = shaderStages[i].gpuShader!; }\r\n        }\r\n\r\n        const gpuShader = info.shader as WebGPUShader;\r\n\r\n        const shaderAttrs = gpuShader.attributes;\r\n        const attrsSize = shaderAttrs.length;\r\n        for (let i = 0; i < attrsSize; i++) {\r\n            this._locations.set(shaderAttrs[i].name, shaderAttrs[i].location);\r\n        }\r\n        const stripTopology = (info.primitive === PrimitiveMode.LINE_STRIP || info.primitive === PrimitiveMode.TRIANGLE_STRIP);\r\n        const renderPplDesc: GPURenderPipelineDescriptor = {\r\n            layout: pipelineLayoutObj.gpuPipelineLayout!.nativePipelineLayout,\r\n            vertex: {\r\n                module: vertexStage!.module,\r\n                entryPoint: 'main',\r\n                buffers: [],\r\n            },\r\n            primitive: {\r\n                topology: WebPUPrimitives[info.primitive],\r\n                frontFace: this._rs.isFrontFaceCCW ? 'ccw' : 'cw',\r\n                cullMode: this._rs.cullMode === CullMode.NONE ? 'none' : (this._rs.cullMode === CullMode.FRONT) ? 'front' : 'back',\r\n            },\r\n\r\n            fragment: {\r\n                module: fragmentStage!.module,\r\n                entryPoint: 'main',\r\n                targets: colorDescs,\r\n            },\r\n        };\r\n        if (stripTopology) renderPplDesc.primitive!.stripIndexFormat = 'uint16';\r\n\r\n        // depthstencil states\r\n        let stencilRef = 0;\r\n        if (this._renderPass.depthStencilAttachment?.format !== Format.UNKNOWN) {\r\n            const dssDesc = {} as GPUDepthStencilState;\r\n            dssDesc.format = GFXFormatToWGPUFormat(this._renderPass.depthStencilAttachment!.format);\r\n            dssDesc.depthWriteEnabled = this._dss.depthWrite;\r\n            dssDesc.depthCompare = this._dss.depthTest ? WebGPUCompereFunc[this._dss.depthFunc] : 'always';\r\n            let stencilReadMask = 0;\r\n            let stencilWriteMask = 0;\r\n\r\n            if (this._dss.stencilTestFront) {\r\n                dssDesc.stencilFront = {\r\n                    compare: WebGPUCompereFunc[this._dss.stencilFuncFront],\r\n                    depthFailOp: WebGPUStencilOp[this._dss.stencilZFailOpFront],\r\n                    passOp: WebGPUStencilOp[this._dss.stencilPassOpFront],\r\n                    failOp: WebGPUStencilOp[this._dss.stencilFailOpFront],\r\n                };\r\n                stencilReadMask |= this._dss.stencilReadMaskFront;\r\n                stencilWriteMask |= this._dss.stencilWriteMaskFront;\r\n                stencilRef |= this._dss.stencilRefFront;\r\n            }\r\n            if (this._dss.stencilTestBack) {\r\n                dssDesc.stencilBack = {\r\n                    compare: WebGPUCompereFunc[this._dss.stencilFuncBack],\r\n                    depthFailOp: WebGPUStencilOp[this._dss.stencilZFailOpBack],\r\n                    passOp: WebGPUStencilOp[this._dss.stencilPassOpBack],\r\n                    failOp: WebGPUStencilOp[this._dss.stencilFailOpBack],\r\n                };\r\n                stencilReadMask |= this._dss.stencilReadMaskBack;\r\n                stencilWriteMask |= this._dss.stencilWriteMaskBack;\r\n                stencilRef |= this._dss.stencilRefBack;\r\n            }\r\n            dssDesc.stencilReadMask = stencilReadMask;\r\n            dssDesc.stencilWriteMask = stencilWriteMask;\r\n            dssDesc.depthBias = this._rs.depthBias;\r\n            dssDesc.depthBiasSlopeScale = this._rs.depthBiasSlop;\r\n            dssDesc.depthBiasClamp = this._rs.depthBiasClamp;\r\n            renderPplDesc.depthStencil = dssDesc;\r\n        }\r\n\r\n        this._gpuPipelineState = {\r\n            gpuPrimitive: WebPUPrimitives[info.primitive],\r\n            gpuShader: gpuShader.gpuShader,\r\n            gpuPipelineLayout: pipelineLayoutObj.gpuPipelineLayout,\r\n            rs: info.rasterizerState,\r\n            dss: info.depthStencilState,\r\n            stencilRef,\r\n            bs: info.blendState,\r\n            gpuRenderPass: (info.renderPass as WebGPURenderPass).gpuRenderPass,\r\n            dynamicStates,\r\n            pipelineState: renderPplDesc,\r\n            nativePipeline: undefined,\r\n        };\r\n    }\r\n\r\n    protected _getShaderLocation (name: string): number | undefined {\r\n        return this._locations.get(name);\r\n    }\r\n\r\n    public updatePipelineLayout (): void {\r\n        if (this._gpuPipelineState && this._gpuPipelineState.pipelineState) {\r\n            this._gpuPipelineState.pipelineState.layout = (this._pipelineLayout as WebGPUPipelineLayout).gpuPipelineLayout!.nativePipelineLayout;\r\n        }\r\n    }\r\n\r\n    public prepare (ia: IWebGPUGPUInputAssembler, forceUpdate: boolean = false): void {\r\n        if (this._gpuPipelineState!.nativePipeline && !forceUpdate) {\r\n            return;\r\n        }\r\n        const gpuShader = this.shader;\r\n        const shaderAttrs = gpuShader.attributes;\r\n        const pipelineState = this._gpuPipelineState!.pipelineState!;\r\n        const vertexAttrs: GPUVertexBufferLayout[] = [];\r\n        const emptyPushAttr: string[] = [];\r\n        const streamCount = ia.gpuVertexBuffers.length;\r\n        for (let i = 0; i < streamCount; i++) {\r\n            const currBufferLayout: GPUVertexBufferLayout = {\r\n                arrayStride: 0,\r\n                attributes: [],\r\n            };\r\n            const currAttrs: GPUVertexAttribute[] = [];\r\n            const shaderAttrSize = shaderAttrs.length;\r\n            for (let j = 0; j < shaderAttrSize; j++) {\r\n                const shaderAttr = shaderAttrs[j];\r\n                let hasAttr = false;\r\n                const gpuAttrSize = ia.gpuAttribs.length;\r\n                for (let k = 0; k < gpuAttrSize; k++) {\r\n                    const gpuAttr = ia.gpuAttribs[k];\r\n                    const attr = ia.attributes[k];\r\n                    if (attr.name === shaderAttr.name) {\r\n                        hasAttr = true;\r\n                        const loc = shaderAttr.location;\r\n                        if (attr.stream === i) {\r\n                            currBufferLayout.arrayStride = gpuAttr.stride;\r\n                            currBufferLayout.stepMode = attr.isInstanced ? 'instance' : 'vertex';\r\n                            const attrLayout: GPUVertexAttribute = {\r\n                                format: GFXFormatToWGPUVertexFormat(attr.format),\r\n                                offset: gpuAttr.offset,\r\n                                shaderLocation: loc,\r\n                            };\r\n                            currAttrs.push(attrLayout);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                const format = shaderAttr.format;\r\n                if (!hasAttr && !emptyPushAttr.includes(shaderAttr.name)\r\n                    && (FormatInfos[format].size <= ia.gpuVertexBuffers[i].stride)) {\r\n                    emptyPushAttr.push(shaderAttr.name);\r\n                    const attrLayout: GPUVertexAttribute = {\r\n                        format: GFXFormatToWGPUVertexFormat(format),\r\n                        offset: 0,\r\n                        shaderLocation: shaderAttr.location,\r\n                    };\r\n                    currAttrs.push(attrLayout);\r\n                }\r\n            }\r\n\r\n            if (currAttrs.length) {\r\n                currBufferLayout.attributes = currAttrs;\r\n                vertexAttrs.push(currBufferLayout);\r\n            }\r\n        }\r\n\r\n        pipelineState.vertex.buffers = vertexAttrs;\r\n        const webgpuDevice = (WebGPUDeviceManager.instance);\r\n        const nativeDevice = webgpuDevice.nativeDevice;\r\n        const nativePipeline = nativeDevice?.createRenderPipeline(pipelineState);\r\n        this._gpuPipelineState!.nativePipeline = nativePipeline;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._gpuPipelineState = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CommandBuffer } from '../base/command-buffer';\r\nimport { Queue } from '../base/queue';\r\nimport { WebGPUCommandBuffer } from './webgpu-command-buffer';\r\nimport { QueueInfo } from '../base/define';\r\n\r\nexport class WebGPUQueue extends Queue {\r\n    public numDrawCalls = 0;\r\n    public numInstances = 0;\r\n    public numTris = 0;\r\n\r\n    private _nativeQueue: GPUQueue | null = null;\r\n    private _isAsync = false;\r\n    public initialize (info: QueueInfo): boolean {\r\n        this._type = info.type;\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroy (): void {\r\n        // noop\r\n    }\r\n\r\n    public submit (cmdBuffs: CommandBuffer[]): void {\r\n        // TODO: Async\r\n        if (!this._isAsync) {\r\n            const cmdBuffSize = cmdBuffs.length;\r\n            for (let i = 0; i < cmdBuffSize; i++) {\r\n                const cmdBuff = cmdBuffs[i] as WebGPUCommandBuffer;\r\n                this.numDrawCalls += cmdBuff.numDrawCalls;\r\n                this.numInstances += cmdBuff.numInstances;\r\n                this.numTris += cmdBuff.numTris;\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        this.numDrawCalls = 0;\r\n        this.numInstances = 0;\r\n        this.numTris = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { RenderPass } from '../base/render-pass';\r\nimport { IWebGPUGPURenderPass } from './webgpu-gpu-objects';\r\nimport { LoadOp, StoreOp, RenderPassInfo, DepthStencilAttachment, ColorAttachment, Format } from '../base/define';\r\n\r\nexport class WebGPURenderPass extends RenderPass {\r\n    public get gpuRenderPass (): IWebGPUGPURenderPass {\r\n        return this._gpuRenderPass!;\r\n    }\r\n\r\n    private _gpuRenderPass: IWebGPUGPURenderPass | null = null;\r\n    private _generateColorAttachment (colorAttachment: ColorAttachment): GPURenderPassColorAttachment {\r\n        return {\r\n            view: {} as GPUTextureView, // later\r\n            loadOp: colorAttachment.loadOp === LoadOp.LOAD ? 'load' : 'clear', // what ever as long as not 'load'\r\n            storeOp: colorAttachment.storeOp === StoreOp.STORE ? 'store' : 'discard',\r\n        };\r\n    }\r\n    private _generateDSAttachment (dsAttachment: DepthStencilAttachment): GPURenderPassDepthStencilAttachment {\r\n        const depthStencilDescriptor = {} as GPURenderPassDepthStencilAttachment;\r\n        depthStencilDescriptor.depthClearValue = 1.0;\r\n        depthStencilDescriptor.depthLoadOp = dsAttachment.depthLoadOp === LoadOp.CLEAR ? 'clear' : 'load';\r\n        depthStencilDescriptor.depthStoreOp = dsAttachment.depthStoreOp === StoreOp.STORE ? 'store' : 'discard';\r\n        depthStencilDescriptor.stencilClearValue = 0.0;\r\n        depthStencilDescriptor.stencilLoadOp = dsAttachment.stencilLoadOp === LoadOp.CLEAR ? 'clear' : 'load';\r\n        depthStencilDescriptor.stencilStoreOp = dsAttachment.stencilStoreOp === StoreOp.STORE ? 'store' : 'discard';\r\n        depthStencilDescriptor.view = {} as GPUTextureView;\r\n        return depthStencilDescriptor;\r\n    }\r\n    public initialize (info: Readonly<RenderPassInfo>): void {\r\n        this._colorInfos = info.colorAttachments;\r\n        this._depthStencilInfo = info.depthStencilAttachment;\r\n        this._subpasses = info.subpasses;\r\n\r\n        const colorDescriptions: GPURenderPassColorAttachment[] = [];\r\n        const originalColorDesc: GPURenderPassColorAttachment[] = [];\r\n        for (const attachment of info.colorAttachments) {\r\n            originalColorDesc[colorDescriptions.length] = this._generateColorAttachment(attachment);\r\n            colorDescriptions[colorDescriptions.length] = this._generateColorAttachment(attachment);\r\n        }\r\n\r\n        const renderPassDesc: GPURenderPassDescriptor = {\r\n            colorAttachments: colorDescriptions,\r\n        };\r\n        const originalRPDesc: GPURenderPassDescriptor = {\r\n            colorAttachments: originalColorDesc,\r\n        };\r\n\r\n        if (info.depthStencilAttachment.format !== Format.UNKNOWN) {\r\n            const depthStencilDescriptor = this._generateDSAttachment(info.depthStencilAttachment);\r\n            const originalDepthStencilDesc = this._generateDSAttachment(info.depthStencilAttachment);\r\n            renderPassDesc.depthStencilAttachment = depthStencilDescriptor;\r\n            originalRPDesc.depthStencilAttachment = originalDepthStencilDesc;\r\n        }\r\n\r\n        this._gpuRenderPass = {\r\n            colorAttachments: this._colorInfos,\r\n            depthStencilAttachment: this._depthStencilInfo,\r\n            nativeRenderPass: renderPassDesc,\r\n            originalRP: originalRPDesc,\r\n        };\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._gpuRenderPass = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Sampler } from '../base/states/sampler';\r\nimport { WebGPUCmdFuncCreateSampler, WebGPUCmdFuncDestroySampler } from './webgpu-commands';\r\nimport { IWebGPUGPUSampler } from './webgpu-gpu-objects';\r\nimport { SamplerInfo } from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\n\r\nconst samplerCaches: Map<number, GPUSampler> = new Map();\r\n\r\nexport class WebGPUSampler extends Sampler {\r\n    public get gpuSampler (): IWebGPUGPUSampler {\r\n        return this._gpuSampler!;\r\n    }\r\n\r\n    public get samplerInfo (): SamplerInfo {\r\n        return this._info;\r\n    }\r\n\r\n    private _gpuSampler: IWebGPUGPUSampler | null = null;\r\n    private _hasChange: boolean = false;\r\n    get hasChange (): boolean {\r\n        return this._hasChange;\r\n    }\r\n    public resetChange (): void {\r\n        this._hasChange = false;\r\n    }\r\n    constructor (info: Readonly<SamplerInfo>, hash: number) {\r\n        super(info, hash);\r\n        this._gpuSampler = {\r\n            gpuSampler: null,\r\n            compare: info.cmpFunc,\r\n            minFilter: info.minFilter,\r\n            magFilter: info.magFilter,\r\n            mipFilter: info.mipFilter,\r\n            addressU: info.addressU,\r\n            addressV: info.addressV,\r\n            addressW: info.addressW,\r\n            maxAnisotropy: info.maxAnisotropy,\r\n            mipLevel: 1,\r\n\r\n            gpuMinFilter: 'linear',\r\n            gpuMagFilter: 'linear',\r\n            gpuMipFilter: 'linear',\r\n            gpuWrapS: 'clamp-to-edge',\r\n            gpuWrapT: 'clamp-to-edge',\r\n            gpuWrapR: 'clamp-to-edge',\r\n        };\r\n    }\r\n\r\n    private _computeSamplerKey (info: IWebGPUGPUSampler): number {\r\n        let hash = info.minFilter;\r\n        hash |= ((info.magFilter as number) << 2);\r\n        hash |= ((info.mipFilter as number) << 4);\r\n        hash |= ((info.addressU as number) << 6);\r\n        hash |= ((info.addressV as number) << 8);\r\n        hash |= ((info.addressW as number) << 10);\r\n        hash |= (info.maxAnisotropy << 12);\r\n        hash |= ((info.compare as number) << 16);\r\n        hash |= ((info.mipLevel) << 18);\r\n        return hash;\r\n    }\r\n\r\n    public createGPUSampler (mipLevel: number = 1): GPUSampler | null {\r\n        if (!this._gpuSampler) {\r\n            return null;\r\n        }\r\n        this._gpuSampler.mipLevel = mipLevel;\r\n        const currKey = this._computeSamplerKey(this._gpuSampler);\r\n        let currGPUSampler = samplerCaches.get(currKey);\r\n        if (currGPUSampler) return currGPUSampler;\r\n\r\n        const device = WebGPUDeviceManager.instance;\r\n        this._hasChange = true;\r\n        WebGPUCmdFuncCreateSampler(device, this._gpuSampler);\r\n        currGPUSampler = this._gpuSampler.gpuSampler!;\r\n        samplerCaches.set(currKey, currGPUSampler);\r\n        return currGPUSampler;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (!this._gpuSampler) {\r\n            return;\r\n        }\r\n        this._hasChange = true;\r\n        const device = WebGPUDeviceManager.instance;\r\n        WebGPUCmdFuncDestroySampler(device, this._gpuSampler);\r\n        this._gpuSampler = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Shader } from '../base/shader';\r\nimport { WebGPUCmdFuncCreateGPUShader, WebGPUCmdFuncDestroyShader } from './webgpu-commands';\r\nimport { IWebGPUGPUShader, IWebGPUGPUShaderStage } from './webgpu-gpu-objects';\r\nimport { ShaderInfo } from '../base/define';\r\nimport { WebGPUDeviceManager } from './define';\r\n\r\nexport class WebGPUShader extends Shader {\r\n    get gpuShader (): IWebGPUGPUShader {\r\n        return this._gpuShader!;\r\n    }\r\n\r\n    private _gpuShader: IWebGPUGPUShader | null = null;\r\n\r\n    public initialize (info: Readonly<ShaderInfo>): void {\r\n        this._name = info.name;\r\n        this._stages = info.stages;\r\n        this._attributes = info.attributes;\r\n        this._blocks = info.blocks;\r\n        this._samplers = info.samplers;\r\n        const stageSize = info.stages.length;\r\n        this._gpuShader = {\r\n            name: info.name,\r\n            blocks: info.blocks.slice(),\r\n            samplers: info.samplers,\r\n\r\n            gpuStages: new Array<IWebGPUGPUShaderStage>(stageSize),\r\n            gpuProgram: null,\r\n            gpuInputs: [],\r\n            gpuUniforms: [],\r\n            gpuBlocks: [],\r\n            gpuSamplers: [],\r\n            bindings: new Map<number, number[]>(),\r\n        };\r\n\r\n        for (let i = 0; i < stageSize; ++i) {\r\n            const stage = info.stages[i];\r\n            this._gpuShader.gpuStages[i] = {\r\n                type: stage.stage,\r\n                source: stage.source,\r\n                gpuShader: null,\r\n                bindings: [],\r\n                attrs: new Map(),\r\n            };\r\n        }\r\n        const device = WebGPUDeviceManager.instance;\r\n        WebGPUCmdFuncCreateGPUShader(device, this._gpuShader);\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (!this._gpuShader) {\r\n            return;\r\n        }\r\n        const device = WebGPUDeviceManager.instance;\r\n        WebGPUCmdFuncDestroyShader(device, this._gpuShader);\r\n        this._gpuShader = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Rect, Viewport } from '../base/define';\r\nimport { BlendState, DepthStencilState, RasterizerState } from '../base/pipeline-state';\r\nimport { WebGPUBuffer } from './webgpu-buffer';\r\nimport { WebGPUFramebuffer } from './webgpu-framebuffer';\r\nimport { WebGPUInputAssembler } from './webgpu-input-assembler';\r\nimport { WebGPUSampler } from './webgpu-sampler';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\n\r\nexport interface IWebGPUTexUnit {\r\n    gpuTexture: WebGPUTexture | null;\r\n}\r\n\r\nexport class WebGPUStateCache {\r\n    public gpuArrayBuffer: WebGPUBuffer | null = null;\r\n    public gpuElementArrayBuffer: WebGPUBuffer | null = null;\r\n    public gpuUniformBuffer: WebGPUBuffer | null = null;\r\n    public gpuBindUBOs: (WebGPUBuffer | null)[] = [];\r\n    public gpuBindUBOOffsets: number[] = [];\r\n    public texUnit: number = 0;\r\n    public gpuTexUnits: IWebGPUTexUnit[] = [];\r\n    public gpuSamplerUnits: (WebGPUSampler | null)[] = [];\r\n    public gpuFramebuffer: WebGPUFramebuffer | null = null;\r\n    public gpuReadFramebuffer: WebGPUFramebuffer | null = null;\r\n    public gpuInputAssembler: WebGPUInputAssembler | null = null;\r\n    public viewport = new Viewport();\r\n    public scissorRect = new Rect(0, 0, 0, 0);\r\n    public rs = new RasterizerState();\r\n    public dss = new DepthStencilState();\r\n    public bs = new BlendState();\r\n    public gpuEnabledAttribLocs: boolean[] = [];\r\n    public gpuCurrentAttribLocs: boolean[] = [];\r\n    public texUnitCacheMap: Record<string, number> = {};\r\n\r\n    initialize (texUnit: number, bufferBindings: number, vertexAttributes: number): void {\r\n        for (let i = 0; i < texUnit; ++i) this.gpuTexUnits.push({ gpuTexture: null });\r\n\r\n        this.gpuSamplerUnits.length = texUnit;\r\n        this.gpuSamplerUnits.fill(null);\r\n\r\n        this.gpuBindUBOs.length = bufferBindings;\r\n        this.gpuBindUBOs.fill(null);\r\n\r\n        this.gpuBindUBOOffsets.length = bufferBindings;\r\n        this.gpuBindUBOOffsets.fill(0);\r\n\r\n        this.gpuEnabledAttribLocs.length = vertexAttributes;\r\n        this.gpuEnabledAttribLocs.fill(false);\r\n\r\n        this.gpuCurrentAttribLocs.length = vertexAttributes;\r\n        this.gpuCurrentAttribLocs.fill(false);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    FormatSurfaceSize,\r\n    TextureInfo,\r\n    IsPowerOf2,\r\n    TextureViewInfo,\r\n    ISwapchainTextureInfo,\r\n    TextureHandle,\r\n    FormatInfos,\r\n    TextureUsageBit,\r\n} from '../base/define';\r\nimport { Texture } from '../base/texture';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport {\r\n    GFXFormatToWGPUFormat,\r\n    WebGPUCmdFuncCreateTexture,\r\n    WebGPUCmdFuncDestroyTexture,\r\n    WebGPUCmdFuncResizeTexture,\r\n    WGPUFormatToGFXFormat,\r\n} from './webgpu-commands';\r\nimport { IWebGPUTexture } from './webgpu-gpu-objects';\r\n\r\nexport class WebGPUTexture extends Texture {\r\n    public getTextureHandle (): TextureHandle {\r\n        const gpuTexture = this._gpuTexture;\r\n        if (!gpuTexture) {\r\n            return 0;\r\n        }\r\n        if (gpuTexture.gpuTexture) {\r\n            return gpuTexture.gpuTexture;\r\n        }\r\n        return 0;\r\n    }\r\n    public initAsSwapchainTexture (info: Readonly<ISwapchainTextureInfo>): void {\r\n        const texInfo = new TextureInfo();\r\n        texInfo.format = info.format;\r\n        texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;\r\n        texInfo.width = info.width;\r\n        texInfo.height = info.height;\r\n        this.initialize(texInfo, true);\r\n    }\r\n    get gpuTexture (): IWebGPUTexture {\r\n        return this._gpuTexture!;\r\n    }\r\n\r\n    private _gpuTexture: IWebGPUTexture | null = null;\r\n    private _texDescriptor: GPUTextureDescriptor | null = null;\r\n    private _lodLevel = 0;\r\n    private _hasChange = false;\r\n    get lodLevel (): number {\r\n        return this._lodLevel;\r\n    }\r\n    get hasChange (): boolean {\r\n        return this._hasChange;\r\n    }\r\n    public resetChange (): void {\r\n        this._hasChange = false;\r\n    }\r\n    public initialize (info: Readonly<TextureInfo> | Readonly<TextureViewInfo>, isSwapchainTexture?: boolean): void {\r\n        let texInfo = info as Readonly<TextureInfo>;\r\n        const viewInfo = info as Readonly<TextureViewInfo>;\r\n        if ('texture' in info) {\r\n            texInfo = viewInfo.texture.info;\r\n            this._isTextureView = true;\r\n        }\r\n\r\n        this._info.copy(texInfo);\r\n        this._isPowerOf2 = IsPowerOf2(this._info.width) && IsPowerOf2(this._info.height);\r\n        this._size = FormatSurfaceSize(\r\n            this._info.format,\r\n            this.width,\r\n            this.height,\r\n            this.depth,\r\n            this._info.levelCount,\r\n        ) * this._info.layerCount;\r\n        if (!this._isTextureView) {\r\n            this._gpuTexture = {\r\n                type: texInfo.type,\r\n                format: texInfo.format,\r\n                usage: texInfo.usage,\r\n                width: texInfo.width,\r\n                height: texInfo.height,\r\n                depth: texInfo.depth,\r\n                size: this._size,\r\n                arrayLayer: texInfo.layerCount,\r\n                mipLevel: texInfo.levelCount,\r\n                samples: texInfo.samples,\r\n                flags: texInfo.flags,\r\n                isPowerOf2: this._isPowerOf2,\r\n\r\n                // default value, filled in when texture is created.\r\n                gpuTarget: '2d',\r\n                gpuInternalFmt: 'rgba8unorm',\r\n                gpuFormat: 'rgba8unorm',\r\n                gpuType: 0,\r\n                gpuUsage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n                gpuTexture: undefined,\r\n                gpuRenderbuffer: null,\r\n                gpuWrapS: 'clamp-to-edge',\r\n                gpuWrapT: 'clamp-to-edge',\r\n                gpuMinFilter: 'linear',\r\n                gpuMagFilter: 'linear',\r\n                getTextureView: this.getNativeTextureView.bind(this),\r\n\r\n                isSwapchainTexture: isSwapchainTexture || false,\r\n            };\r\n            if (!isSwapchainTexture) {\r\n                const device = WebGPUDeviceManager.instance;\r\n                WebGPUCmdFuncCreateTexture(device, this._gpuTexture);\r\n                device.memoryStatus.textureSize += this._size;\r\n            } else {\r\n                this._gpuTexture.gpuInternalFmt = GFXFormatToWGPUFormat(this._gpuTexture.format);\r\n                this._gpuTexture.gpuFormat = this._gpuTexture.gpuInternalFmt;\r\n            }\r\n            this._viewInfo.texture = this;\r\n            this._viewInfo.type = info.type;\r\n            this._viewInfo.format = info.format;\r\n            this._viewInfo.baseLevel = 0;\r\n            this._viewInfo.levelCount = info.levelCount;\r\n            this._viewInfo.baseLayer = 0;\r\n            this._viewInfo.layerCount = info.layerCount;\r\n        } else {\r\n            this._viewInfo.copy(viewInfo);\r\n            this._lodLevel = viewInfo.baseLevel;\r\n            this._gpuTexture = (viewInfo.texture as WebGPUTexture)._gpuTexture;\r\n        }\r\n    }\r\n\r\n    set gpuFormat (val: GPUTextureFormat) {\r\n        if (!this._isTextureView && this._gpuTexture && !this._gpuTexture.isSwapchainTexture) {\r\n            WebGPUCmdFuncDestroyTexture(this._gpuTexture);\r\n            const device = WebGPUDeviceManager.instance;\r\n            this._gpuTexture.format =  WGPUFormatToGFXFormat(val);\r\n            WebGPUCmdFuncCreateTexture(device, this._gpuTexture);\r\n            this._hasChange = true;\r\n        }\r\n    }\r\n\r\n    public getNativeTextureView (): GPUTextureView | null {\r\n        if (!this._gpuTexture || !this._gpuTexture.gpuTexture) {\r\n            return null;\r\n        }\r\n        return this._gpuTexture.gpuTexture.createView({\r\n            format: this.gpuTexture.gpuFormat,\r\n            dimension: this._gpuTexture.gpuTarget,\r\n            mipLevelCount: this._gpuTexture.mipLevel,\r\n            arrayLayerCount: this.viewInfo.layerCount,\r\n            baseMipLevel: 0,\r\n            baseArrayLayer: 0,\r\n        });\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._hasChange = true;\r\n        if (this._isTextureView || (!this._isTextureView && !this._gpuTexture)) {\r\n            this._gpuTexture = null;\r\n            return;\r\n        }\r\n        WebGPUCmdFuncDestroyTexture(this._gpuTexture!);\r\n        const device = WebGPUDeviceManager.instance;\r\n        device.memoryStatus.textureSize -= this._size;\r\n        this._gpuTexture = null;\r\n    }\r\n\r\n    public resize (width: number, height: number): void {\r\n        if (this._info.width === width && this._info.height === height) {\r\n            return;\r\n        }\r\n        if (this._info.levelCount === WebGPUTexture.getLevelCount(this._info.width, this._info.height)) {\r\n            this._info.levelCount = WebGPUTexture.getLevelCount(width, height);\r\n        } else if (this._info.levelCount > 1) {\r\n            this._info.levelCount = Math.min(this._info.levelCount, WebGPUTexture.getLevelCount(width, height));\r\n        }\r\n        this._hasChange = true;\r\n        const oldSize = this._size;\r\n        this._info.width = width;\r\n        this._info.height = height;\r\n        this._size = FormatSurfaceSize(\r\n            this.info.format,\r\n            this.width,\r\n            this.height,\r\n            this.depth,\r\n            this.info.levelCount,\r\n        ) * this.info.layerCount;\r\n\r\n        if (!this._isTextureView && this._gpuTexture) {\r\n            this._gpuTexture.width = width;\r\n            this._gpuTexture.height = height;\r\n            this._gpuTexture.size = this._size;\r\n            if (!this._gpuTexture.isSwapchainTexture) {\r\n                const device = WebGPUDeviceManager.instance;\r\n                WebGPUCmdFuncResizeTexture(device, this._gpuTexture);\r\n                device.memoryStatus.textureSize -= oldSize;\r\n                device.memoryStatus.textureSize += this._size;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CachedArray } from '../../core/memop/cached-array';\r\nimport {\r\n    WebGPUCmdBeginRenderPass,\r\n    WebGPUCmdBindStates,\r\n    WebGPUCmdCopyBufferToTexture,\r\n    WebGPUCmdDraw,\r\n    WebGPUCmdObject,\r\n    WebGPUCmdPackage,\r\n    WebGPUCmdUpdateBuffer,\r\n} from './webgpu-commands';\r\n\r\nexport class WebGPUCommandPool<T extends WebGPUCmdObject> {\r\n    private _frees: (T | null)[];\r\n    private _freeIdx: number = 0;\r\n    private _freeCmds: CachedArray<T>;\r\n\r\n    constructor (Clazz: new() => T, count: number) {\r\n        this._frees = new Array(count);\r\n        this._freeCmds = new CachedArray(count);\r\n        for (let i = 0; i < count; ++i) {\r\n            this._frees[i] = new Clazz();\r\n        }\r\n        this._freeIdx = count - 1;\r\n    }\r\n\r\n    public alloc (Clazz: new() => T): T {\r\n        if (this._freeIdx < 0) {\r\n            const size = this._frees.length * 2;\r\n            const temp = this._frees;\r\n            this._frees = new Array<T>(size);\r\n\r\n            const increase = size - temp.length;\r\n            for (let i = 0; i < increase; ++i) {\r\n                this._frees[i] = new Clazz();\r\n            }\r\n\r\n            for (let i = increase, j = 0; i < size; ++i, ++j) {\r\n                this._frees[i] = temp[j];\r\n            }\r\n\r\n            this._freeIdx += increase;\r\n        }\r\n\r\n        const cmd = this._frees[this._freeIdx]!;\r\n        this._frees[this._freeIdx--] = null;\r\n        ++cmd.refCount;\r\n        return cmd;\r\n    }\r\n\r\n    public free (cmd: T): void {\r\n        if (--cmd.refCount === 0) {\r\n            this._freeCmds.push(cmd);\r\n        }\r\n    }\r\n\r\n    public freeCmds (cmds: CachedArray<T>): void {\r\n        const cmdLength = cmds.length;\r\n        for (let i = 0; i < cmdLength; ++i) {\r\n            if (--cmds.array[i].refCount === 0) {\r\n                this._freeCmds.push(cmds.array[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public release (): void {\r\n        const freeCmdLength = this._freeCmds.length;\r\n        for (let i = 0; i < freeCmdLength; ++i) {\r\n            const cmd = this._freeCmds.array[i];\r\n            cmd.clear();\r\n            this._frees[++this._freeIdx] = cmd;\r\n        }\r\n        this._freeCmds.clear();\r\n    }\r\n}\r\n\r\nexport class WebGPUCommandAllocator {\r\n    public beginRenderPassCmdPool: WebGPUCommandPool<WebGPUCmdBeginRenderPass>;\r\n    public bindStatesCmdPool: WebGPUCommandPool<WebGPUCmdBindStates>;\r\n    public drawCmdPool: WebGPUCommandPool<WebGPUCmdDraw>;\r\n    public updateBufferCmdPool: WebGPUCommandPool<WebGPUCmdUpdateBuffer>;\r\n    public copyBufferToTextureCmdPool: WebGPUCommandPool<WebGPUCmdCopyBufferToTexture>;\r\n\r\n    constructor () {\r\n        this.beginRenderPassCmdPool = new WebGPUCommandPool(WebGPUCmdBeginRenderPass, 1);\r\n        this.bindStatesCmdPool = new WebGPUCommandPool(WebGPUCmdBindStates, 1);\r\n        this.drawCmdPool = new WebGPUCommandPool(WebGPUCmdDraw, 1);\r\n        this.updateBufferCmdPool = new WebGPUCommandPool(WebGPUCmdUpdateBuffer, 1);\r\n        this.copyBufferToTextureCmdPool = new WebGPUCommandPool(WebGPUCmdCopyBufferToTexture, 1);\r\n    }\r\n\r\n    public clearCmds (cmdPackage: WebGPUCmdPackage): void {\r\n        if (cmdPackage.beginRenderPassCmds.length) {\r\n            this.beginRenderPassCmdPool.freeCmds(cmdPackage.beginRenderPassCmds);\r\n            cmdPackage.beginRenderPassCmds.clear();\r\n        }\r\n\r\n        if (cmdPackage.bindStatesCmds.length) {\r\n            this.bindStatesCmdPool.freeCmds(cmdPackage.bindStatesCmds);\r\n            cmdPackage.bindStatesCmds.clear();\r\n        }\r\n\r\n        if (cmdPackage.drawCmds.length) {\r\n            this.drawCmdPool.freeCmds(cmdPackage.drawCmds);\r\n            cmdPackage.drawCmds.clear();\r\n        }\r\n\r\n        if (cmdPackage.updateBufferCmds.length) {\r\n            this.updateBufferCmdPool.freeCmds(cmdPackage.updateBufferCmds);\r\n            cmdPackage.updateBufferCmds.clear();\r\n        }\r\n\r\n        if (cmdPackage.copyBufferToTextureCmds.length) {\r\n            this.copyBufferToTextureCmdPool.freeCmds(cmdPackage.copyBufferToTextureCmds);\r\n            cmdPackage.copyBufferToTextureCmds.clear();\r\n        }\r\n\r\n        cmdPackage.cmds.clear();\r\n    }\r\n\r\n    public releaseCmds (): void {\r\n        this.beginRenderPassCmdPool.release();\r\n        this.bindStatesCmdPool.release();\r\n        this.drawCmdPool.release();\r\n        this.updateBufferCmdPool.release();\r\n        this.copyBufferToTextureCmdPool.release();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    Address,\r\n    DescriptorType,\r\n    BufferUsage,\r\n    Filter,\r\n    Format,\r\n    MemoryUsage,\r\n    SampleCount,\r\n    ShaderStageFlagBit,\r\n    TextureFlags,\r\n    TextureType,\r\n    TextureUsage,\r\n    Type,\r\n    DynamicStateFlagBit,\r\n    DrawInfo,\r\n    Attribute,\r\n    ColorAttachment,\r\n    DepthStencilAttachment,\r\n    UniformBlock,\r\n    UniformSampler,\r\n    DescriptorSetLayoutBinding,\r\n    BufferFlags,\r\n    ComparisonFunc,\r\n} from '../base/define';\r\nimport { DescriptorSetLayout } from '../base/descriptor-set-layout';\r\nimport { BlendState, DepthStencilState, RasterizerState } from '../base/pipeline-state';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport { WebGPUFramebuffer } from './webgpu-framebuffer';\r\n\r\nexport interface IWebGPUGPUUniformInfo {\r\n    name: string;\r\n    type: Type;\r\n    count: number;\r\n    offset: number;\r\n    view: Float32Array | Int32Array;\r\n    isDirty: boolean;\r\n}\r\n\r\nexport interface IWebGPUGPUBuffer {\r\n    usage: BufferUsage;\r\n    memUsage: MemoryUsage;\r\n    size: number;\r\n    stride: number;\r\n\r\n    gpuTarget: number;\r\n    gpuBuffer: GPUBuffer | null;\r\n    gpuOffset: number;\r\n    flags: BufferFlags | null;\r\n    buffer: ArrayBufferView | null;\r\n    indirects: DrawInfo[];\r\n    drawIndirectByIndex: boolean;\r\n}\r\n\r\nexport interface IWebGPUTexture {\r\n    type: TextureType;\r\n    format: Format;\r\n    usage: TextureUsage;\r\n    width: number;\r\n    height: number;\r\n    depth: number;\r\n    size: number;\r\n    arrayLayer: number;\r\n    mipLevel: number;\r\n    samples: SampleCount;\r\n    flags: TextureFlags;\r\n    isPowerOf2: boolean;\r\n\r\n    gpuTarget: GPUTextureViewDimension;  // 1d, 2d, 3d\r\n    gpuInternalFmt: GPUTextureFormat;// rgba8unorm\r\n    gpuFormat: GPUTextureFormat;\r\n    gpuType: number;                 // data type, => gl.UNSIGNED_BYTE\r\n    gpuUsage: GPUTextureUsageFlags;  // webgl:DYNIMIC_DRAW... -> webGPU:COPY_DST/STORAGE...\r\n    gpuTexture: GPUTexture | undefined;   // native tex handler\r\n    gpuRenderbuffer: null;           // not suitable for webgpu\r\n    gpuWrapS: GPUAddressMode;        // clamp-to-edge, repeat...\r\n    gpuWrapT: GPUAddressMode;\r\n    gpuMinFilter: GPUFilterMode;     // linear, nearest\r\n    gpuMagFilter: GPUFilterMode;\r\n\r\n    isSwapchainTexture: boolean;\r\n    getTextureView: () => GPUTextureView | null;\r\n}\r\n\r\nexport interface IWebGPUGPURenderPass {\r\n    colorAttachments: ColorAttachment[];\r\n    depthStencilAttachment: DepthStencilAttachment | null;\r\n    nativeRenderPass: GPURenderPassDescriptor | null;\r\n    originalRP: GPURenderPassDescriptor | null;\r\n}\r\n\r\nexport interface IWebGPUGPUFramebuffer {\r\n    gpuRenderPass: IWebGPUGPURenderPass;\r\n    gpuColorTextures: IWebGPUTexture[];\r\n    gpuDepthStencilTexture: IWebGPUTexture | null;\r\n    isOffscreen?: boolean;\r\n    gpuFramebuffer: WebGPUFramebuffer | null;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface IWebGPUGPUSampler {\r\n    gpuSampler: GPUSampler | null;\r\n    compare: ComparisonFunc;\r\n    minFilter: Filter;\r\n    magFilter: Filter;\r\n    mipFilter: Filter;\r\n    addressU: Address;\r\n    addressV: Address;\r\n    addressW: Address;\r\n    mipLevel: number;\r\n    maxAnisotropy: number;\r\n\r\n    gpuMinFilter: GPUFilterMode;\r\n    gpuMagFilter: GPUFilterMode;\r\n    gpuMipFilter: GPUFilterMode;\r\n    gpuWrapS: GPUAddressMode;\r\n    gpuWrapT: GPUAddressMode;\r\n    gpuWrapR: GPUAddressMode;\r\n}\r\n\r\nexport interface IWebGPUGPUInput {\r\n    name: string;\r\n    type: Type;\r\n    stride: number;\r\n    count: number;\r\n    size: number;\r\n\r\n    gpuType: number;\r\n    gpuLoc: number;\r\n}\r\n\r\nexport interface IWebGPUGPUUniform {\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    stride: number;\r\n    count: number;\r\n    size: number;\r\n    offset: number;\r\n\r\n    gpuType: number;\r\n    gpuLoc: number;\r\n    array: number[];\r\n    begin: number;\r\n}\r\n\r\nexport interface IWebGPUGPUUniformBlock {\r\n    set: number;\r\n    binding: number;\r\n    idx: number;\r\n    name: string;\r\n    size: number;\r\n    gpuBinding: number;\r\n}\r\n\r\nexport interface IWebGPUGPUUniformSampler {\r\n    set: number;\r\n    binding: number;\r\n    name: string;\r\n    type: Type;\r\n    count: number;\r\n    units: number[];\r\n    gpuUnits: Int32Array;\r\n\r\n    gpuType: number;\r\n    gpuLoc: number;\r\n}\r\n\r\nexport interface IWebGPUGPUShaderStage {\r\n    type: ShaderStageFlagBit;\r\n    source: string;\r\n    gpuShader: GPUProgrammableStage | null;\r\n    bindings: number[][];\r\n    attrs: Map<number, string>;\r\n}\r\n\r\nexport interface IWebGPUGPUShader {\r\n    name: string;\r\n    blocks: UniformBlock[];\r\n    samplers: UniformSampler[];\r\n\r\n    gpuStages: IWebGPUGPUShaderStage[];\r\n    gpuProgram: number | null;\r\n    gpuInputs: IWebGPUGPUInput[];\r\n    gpuUniforms: IWebGPUGPUUniform[];\r\n    gpuBlocks: IWebGPUGPUUniformBlock[];\r\n    gpuSamplers: IWebGPUGPUUniformSampler[];\r\n    bindings: Map<number, number[]>;\r\n}\r\n\r\nexport interface IWebGPUGPUDescriptorSetLayout {\r\n    bindings: DescriptorSetLayoutBinding[];\r\n    dynamicBindings: number[];\r\n    descriptorIndices: number[];\r\n    descriptorCount: number;\r\n    entries: GPUBindGroupLayoutEntry[];\r\n    bindGroupLayout: GPUBindGroupLayout | null;\r\n}\r\n\r\nexport interface IWebGPUGPUPipelineLayout {\r\n    setLayouts: DescriptorSetLayout[];\r\n    gpuSetLayouts: IWebGPUGPUDescriptorSetLayout[];\r\n    gpuBindGroupLayouts: GPUBindGroupLayout[];\r\n    dynamicOffsetCount: number;\r\n    dynamicOffsetIndices: number[][];\r\n    nativePipelineLayout: GPUPipelineLayout;\r\n}\r\n\r\nexport interface IWebGPUGPUPipelineState {\r\n    gpuPrimitive: GPUPrimitiveTopology;\r\n    gpuShader: IWebGPUGPUShader | null;\r\n    gpuPipelineLayout: IWebGPUGPUPipelineLayout | null;\r\n    rs: RasterizerState;\r\n    dss: DepthStencilState;\r\n    stencilRef: number;\r\n    bs: BlendState;\r\n    dynamicStates: DynamicStateFlagBit[];\r\n    gpuRenderPass: IWebGPUGPURenderPass | null;\r\n    pipelineState: GPURenderPipelineDescriptor | undefined;\r\n    nativePipeline: GPUPipelineBase | undefined;\r\n}\r\n\r\nexport interface IWebGPUGPUDescriptor {\r\n    type: DescriptorType;\r\n    gpuBuffer: IWebGPUGPUBuffer | null;\r\n    gpuTexture: IWebGPUTexture | null;\r\n    gpuSampler: IWebGPUGPUSampler | null;\r\n}\r\n\r\nexport interface IWebGPUGPUDescriptorSet {\r\n    gpuDescriptors: IWebGPUGPUDescriptor[];\r\n    descriptorIndices: number[];\r\n    bindGroup: GPUBindGroup;\r\n    bindGroupLayout: GPUBindGroupLayout;\r\n}\r\n\r\nexport interface IWebGPUAttrib {\r\n    name: string;\r\n    gpuBuffer: GPUBuffer | null;\r\n    gpuType: number;\r\n    size: number;\r\n    count: number;\r\n    stride: number;\r\n    componentCount: number;\r\n    isNormalized: boolean;\r\n    isInstanced: boolean;\r\n    offset: number;\r\n}\r\n\r\nexport interface IWebGPUGPUInputAssembler {\r\n    attributes: Attribute[];\r\n    gpuVertexBuffers: IWebGPUGPUBuffer[];\r\n    gpuIndexBuffer: IWebGPUGPUBuffer | null;\r\n    gpuIndirectBuffer: IWebGPUGPUBuffer | null;\r\n\r\n    gpuAttribs: IWebGPUAttrib[];\r\n    gpuIndexType: GPUIndexFormat;\r\n}\r\n\r\nexport interface IWebGPUBindingMapping {\r\n    blockOffsets: number[];\r\n    samplerTextureOffsets: number[];\r\n    flexibleSet: number;\r\n}\r\n\r\nexport class IWebGPUBlitManager {\r\n    private _srcFramebuffer: WebGPUFramebuffer | null = null;\r\n    private _dstFramebuffer: WebGPUFramebuffer | null = null;\r\n\r\n    get srcFramebuffer (): WebGPUFramebuffer | null {\r\n        return this._srcFramebuffer;\r\n    }\r\n\r\n    get dstFramebuffer (): WebGPUFramebuffer | null {\r\n        return this._dstFramebuffer;\r\n    }\r\n\r\n    constructor () {\r\n        const device = WebGPUDeviceManager.instance;\r\n    }\r\n\r\n    destroy (): void {\r\n        // noop\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BufferTextureCopy, Format, SurfaceTransform, SwapchainInfo,\r\n    TextureFlagBit, TextureInfo, TextureType, TextureUsageBit } from '../base/define';\r\nimport { Texture } from '../base/texture';\r\nimport { Swapchain } from '../base/swapchain';\r\nimport { WebGPUTexture } from './webgpu-texture';\r\nimport { debug, warn, warnID } from '../../core';\r\nimport { WebGPUDeviceManager } from './define';\r\nimport { GFXFormatToWGPUFormat } from './webgpu-commands';\r\nimport { IWebGPUBlitManager } from './webgpu-gpu-objects';\r\n/**\r\n * @en GFX Swapchain implementation based on WebGPU.\r\n * @zh 基于 WebGPU 的 GFX 交换链实现。\r\n */\r\nexport class WebGPUSwapchain extends Swapchain {\r\n    public nullTex2D: WebGPUTexture = null!;\r\n    public nullTexCube: WebGPUTexture = null!;\r\n    private _canvas: HTMLCanvasElement | null = null;\r\n    private _blitManager: IWebGPUBlitManager | null = null;\r\n    get blitManager (): IWebGPUBlitManager | null {\r\n        return this._blitManager;\r\n    }\r\n    private _webGPUDeviceLostHandler: ((info: GPUDeviceLostInfo) => void) | null = null;\r\n    public initialize (info: Readonly<SwapchainInfo>): void {\r\n        this._canvas = info.windowHandle;\r\n        const { width, height } = info;\r\n        this._canvas.width = width;\r\n        this._canvas.height = height;\r\n\r\n        this._webGPUDeviceLostHandler = this._onWebGPUDeviceLost.bind(this);\r\n        const device = WebGPUDeviceManager.instance;\r\n        const nativeDevice = device.nativeDevice as GPUDevice;\r\n        nativeDevice.lost.then(this._webGPUDeviceLostHandler).catch((reasons) => {\r\n            // noop\r\n        });\r\n        const capabilities = device.capabilities;\r\n        device.stateCache.initialize(\r\n            capabilities.maxTextureUnits,\r\n            capabilities.maxUniformBufferBindings,\r\n            capabilities.maxVertexAttributes,\r\n        );\r\n\r\n        this._createTexture(width, height);\r\n        this._depthStencilTexture = this._createDepthStencilTexture(width, height);\r\n        this.nullTex2D = device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST,\r\n            Format.RGBA8,\r\n            2,\r\n            2,\r\n            TextureFlagBit.NONE,\r\n        ))  as WebGPUTexture;\r\n        this.nullTexCube = device.createTexture(new TextureInfo(\r\n            TextureType.CUBE,\r\n            TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST,\r\n            Format.RGBA8,\r\n            2,\r\n            2,\r\n            TextureFlagBit.NONE,\r\n            6,\r\n        ))  as WebGPUTexture;\r\n\r\n        const nullTexRegion = new BufferTextureCopy();\r\n        nullTexRegion.texExtent.width = 2;\r\n        nullTexRegion.texExtent.height = 2;\r\n\r\n        const nullTexBuff = new Uint8Array(this.nullTex2D.size);\r\n        nullTexBuff.fill(0);\r\n        device.copyBuffersToTexture([nullTexBuff], this.nullTex2D, [nullTexRegion]);\r\n\r\n        nullTexRegion.texSubres.layerCount = 6;\r\n        device.copyBuffersToTexture(\r\n            [nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff],\r\n            this.nullTexCube,\r\n            [nullTexRegion],\r\n        );\r\n\r\n        this._blitManager = new IWebGPUBlitManager();\r\n    }\r\n\r\n    public override resize (width: number, height: number, surfaceTransform: SurfaceTransform): void {\r\n        const device = WebGPUDeviceManager.instance.nativeDevice!;\r\n        // Make sure it's valid for WebGPU\r\n        width = Math.max(1, Math.min(width, device.limits.maxTextureDimension2D));\r\n        height = Math.max(1, Math.min(height, device.limits.maxTextureDimension2D));\r\n\r\n        if (this._colorTexture.width !== width || this._colorTexture.height !== height) {\r\n            debug(`Resizing swapchain: ${width}x${height}`);\r\n            this._canvas!.width = width;\r\n            this._canvas!.height = height;\r\n            this._colorTexture.resize(width, height);\r\n            this._depthStencilTexture.resize(width, height);\r\n        }\r\n    }\r\n\r\n    public override destroy (): void {\r\n        if (this._canvas && this._webGPUDeviceLostHandler) {\r\n            this._webGPUDeviceLostHandler = null;\r\n        }\r\n\r\n        if (this.nullTex2D) {\r\n            this.nullTex2D.destroy();\r\n            this.nullTex2D = null!;\r\n        }\r\n\r\n        if (this.nullTexCube) {\r\n            this.nullTexCube.destroy();\r\n            this.nullTexCube = null!;\r\n        }\r\n\r\n        if (this._blitManager) {\r\n            this._blitManager.destroy();\r\n            this._blitManager = null;\r\n        }\r\n        this._canvas = null;\r\n    }\r\n\r\n    public get colorTexture (): Texture {\r\n        (this._colorTexture as WebGPUTexture).gpuTexture.gpuTexture = WebGPUDeviceManager.instance.context.getCurrentTexture();\r\n        return this._colorTexture;\r\n    }\r\n\r\n    public get colorGPUTexture (): GPUTexture {\r\n        (this._colorTexture as WebGPUTexture).gpuTexture.gpuTexture = WebGPUDeviceManager.instance.context.getCurrentTexture();\r\n        return (this._colorTexture as WebGPUTexture).gpuTexture.gpuTexture!;\r\n    }\r\n\r\n    public get colorGPUTextureView (): GPUTextureView {\r\n        (this._colorTexture as WebGPUTexture).gpuTexture.gpuTexture = WebGPUDeviceManager.instance.context.getCurrentTexture();\r\n        return (this._colorTexture as WebGPUTexture).gpuTexture.gpuTexture!.createView();\r\n    }\r\n\r\n    public get depthStencilTexture (): Texture {\r\n        return this._depthStencilTexture;\r\n    }\r\n\r\n    public get gpuDepthStencilTexture (): GPUTexture {\r\n        return (this._depthStencilTexture  as WebGPUTexture).gpuTexture.gpuTexture!;\r\n    }\r\n\r\n    public get gpuDepthStencilTextureView (): GPUTextureView {\r\n        return (this._depthStencilTexture  as WebGPUTexture).gpuTexture.gpuTexture!.createView();\r\n    }\r\n\r\n    private _createTexture (width: number, height: number): WebGPUTexture {\r\n        const device = WebGPUDeviceManager.instance;\r\n        const gfxSwapchainFormat = device.swapchainFormat;\r\n        const swapchainFormat = GFXFormatToWGPUFormat(gfxSwapchainFormat);// navigator.gpu.getPreferredCanvasFormat();\r\n        if (!this._colorTexture) {\r\n            const nativeDevice = device.nativeDevice as GPUDevice;\r\n            const gpuConfig: GPUCanvasConfiguration = {\r\n                device: nativeDevice,\r\n                format: swapchainFormat,\r\n                alphaMode: 'opaque',\r\n            };\r\n            device.gpuConfig = gpuConfig;\r\n            device.context.configure(gpuConfig);\r\n        }\r\n        this._colorTexture = new WebGPUTexture();\r\n        this._colorTexture.initAsSwapchainTexture({\r\n            swapchain: this,\r\n            format: gfxSwapchainFormat,\r\n            width,\r\n            height,\r\n        });\r\n        (this._colorTexture as WebGPUTexture).gpuTexture.gpuTexture = device.context.getCurrentTexture();\r\n        return (this._colorTexture as WebGPUTexture);\r\n    }\r\n\r\n    private _createDepthStencilTexture (width: number, height: number): WebGPUTexture {\r\n        const device = WebGPUDeviceManager.instance;\r\n        const depthInfo = new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.DEPTH_STENCIL_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n            Format.DEPTH_STENCIL,\r\n            width,\r\n            height,\r\n        );\r\n        const depthTexture = device.createTexture(depthInfo);\r\n        return depthTexture as WebGPUTexture;\r\n    }\r\n\r\n    private _onWebGPUDeviceLost (info: GPUDeviceLostInfo): void {\r\n        warnID(11000);\r\n        warn('webgpu device lost');\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { fetchBuffer, ensureWasmModuleReady, instantiateWasm, fetchUrl } from 'pal/wasm';\r\nimport { NATIVE_CODE_BUNDLE_MODE } from 'internal:constants';\r\nimport { error, sys } from '../../core';\r\nimport { NativeCodeBundleMode } from '../../misc/webassembly-support';\r\nimport { WebGPUWasm } from './webgpu-core';\r\nimport { overrideWebGPUDefine } from './define';\r\n\r\nconst PAGESIZE = 65536; // 64KiB\r\n\r\n// How many pages of the wasm memory\r\n// TODO: let this can be canfiguable by user.\r\nconst PAGECOUNT = 32 * 16;\r\n\r\n// How mush memory size of the wasm memory\r\nconst MEMORYSIZE = PAGESIZE * PAGECOUNT; // 32 MiB\r\n\r\nlet wasmInstance: WebGPUWasm.instance = null!;\r\nconst registerList: any[] = [];\r\n\r\nfunction initWasm (wasmFactory, wasmUrl: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        const errorMessage = (err: any): string => `[WebGPU]: WebGPU wasm load failed: ${err}`;\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        wasmFactory({\r\n            instantiateWasm (\r\n                importObject: WebAssembly.Imports,\r\n                receiveInstance: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\r\n            ) {\r\n                instantiateWasm(wasmUrl, importObject).then((result) => {\r\n                    receiveInstance(result.instance, result.module);\r\n                }).catch((err) => reject(errorMessage(err)));\r\n            },\r\n        }).then((Instance: any) => {\r\n            wasmInstance = Instance;\r\n            registerList.forEach((cb) => {\r\n                cb(wasmInstance);\r\n            });\r\n        }).then(resolve).catch((err: any) => reject(errorMessage(err)));\r\n    });\r\n}\r\n\r\nfunction initAsmJS (asmFactory, asmJsMemUrl: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        fetchBuffer(asmJsMemUrl).then((arrayBuffer) => {\r\n            const wasmMemory: any = {};\r\n            wasmMemory.buffer = new ArrayBuffer(MEMORYSIZE);\r\n            const module = {\r\n                wasmMemory,\r\n                memoryInitializerRequest: {\r\n                    response: arrayBuffer,\r\n                    status: 200,\r\n                } as Partial<XMLHttpRequest>,\r\n            };\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n            return asmFactory(module).then((instance: any) => {\r\n                wasmInstance = instance;\r\n                registerList.forEach((cb) => {\r\n                    cb(wasmInstance);\r\n                });\r\n            });\r\n        }).then(resolve).catch(reject);\r\n    });\r\n}\r\n\r\nfunction shouldUseWasmModule (): boolean {\r\n    if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.BOTH as number)) {\r\n        return sys.hasFeature(sys.Feature.WASM);\r\n    } else if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.WASM as number)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function waitForWebGPUWasmInstantiation (): Promise<void> {\r\n    const errorReport = (msg: any): void => {\r\n        error('Error during WebGPU Wasm instantiation:', msg);\r\n    };\r\n    try {\r\n        await ensureWasmModuleReady();\r\n        if (shouldUseWasmModule()) {\r\n            const [\r\n                glslModule,\r\n                glslWasmModule,\r\n                twgslModule,\r\n                twgslWasmModule,\r\n            ] = await Promise.all([\r\n                import('external:emscripten/webgpu/glslang.js'),\r\n                import('external:emscripten/webgpu/glslang.wasm'),\r\n                import('external:emscripten/webgpu/twgsl.js'),\r\n                import('external:emscripten/webgpu/twgsl.wasm'),\r\n            ]);\r\n            const glslFactory = glslModule.default;\r\n            const glslWasmUrl = glslWasmModule.default;\r\n            const twgslFactory = twgslModule.default;\r\n            const twgslWasmUrl = twgslWasmModule.default;\r\n            await Promise.all([initWasm(glslFactory, glslWasmUrl), initWasm(twgslFactory, twgslWasmUrl)]);\r\n        } else {\r\n            throw new Error('Wasm module is not supported in this environment.');\r\n        }\r\n    } catch (error) {\r\n        errorReport(error);\r\n    }\r\n}\r\n\r\nregisterList.push(overrideWebGPUDefine);\r\n\r\nexport const WEBGPU_WASM = 1;\r\n","/**\r\n * @packageDocumentation\r\n * @hidden\r\n */\r\n\r\nimport { WebGPUDevice } from '../cocos/gfx/webgpu/webgpu-device';\r\nimport { legacyCC } from '../cocos/core/global-exports';\r\n\r\nexport { WebGPUDevice };\r\nlegacyCC.WebGPUDevice = WebGPUDevice;\r\n"],"names":["WebGPUDeviceManager","setInstance","instance","_instance","_createClass","key","get","hashCombine","hash","currHash","hashCombineNum","val","hashCombineStr","str","strLength","length","i","charCodeAt","webGPU","glslang","undefined","twgsl","overrideClass","wasm","DescUpdateFrequency","DefaultResources","this","buffersDescLayout","Map","texturesDescLayout","samplersDescLayout","buffer","storageBuffers","texture","cubeTexture","sampler","setLayout","descSet","prototype","getStorageBuffer","idx","bufferInfo","BufferInfo","BufferUsageBit","STORAGE","MemoryUsageBit","DEVICE","BufferFlagBit","NONE","defaultBuff","createBuffer","WebGPUAdressMode","WebGPUCompareFunc","GFXStageToWebGPUStage","stage","flag","ShaderStageFlagBit","VERTEX","GPUShaderStage","FRAGMENT","COMPUTE","ALL","Error","GFXFormatToWGPUVertexFormat","format","Format","R32F","R32UI","R32I","RG8","RG8SN","RG8UI","RG8I","RG16F","RG16UI","RG16I","RG32F","RG32UI","RG32I","RGB32F","RGB32UI","RGB32I","BGRA8","RGBA8","SRGB8_A8","RGBA8SN","RGBA8UI","RGBA8I","RGBA16F","RGBA16UI","RGBA16I","RGBA32F","RGBA32UI","RGBA32I","warn","GFXFormatToWGPUTextureFormat","R8","R8SN","R8UI","R8I","R16I","R16UI","R16F","RGB10A2","DEPTH","DEPTH_STENCIL","BC1_ALPHA","BC1_SRGB_ALPHA","BC2","BC2_SRGB","BC3","BC3_SRGB","BC4_SNORM","BC6H_SF16","BC6H_UF16","BC7","BC7_SRGB","GFXFormatToWGPUFormat","wGPUTextureFormatToGFXFormat","WGPUFormatToGFXFormat","GFXTextureToWebGPUTexture","textureType","TextureType","TEX1D","TEX2D","TEX2D_ARRAY","TEX3D","CUBE","error","WebGPUStencilOp","WebGPUCompereFunc","WebGPUBlendOps","WebGPUBlendMask","mask","ColorMask","R","GPUColorWrite","RED","G","GREEN","B","BLUE","A","ALPHA","WebGPUCmd","WebGPUBlendFactors","WebGPUCmdObject","type","cmdType","refCount","WebGPUCmdBeginRenderPass","_WebGPUCmdObject","_this","BEGIN_RENDER_PASS","gpuRenderPass","gpuFramebuffer","renderArea","Rect","clearColors","clearDepth","clearStencil","_inheritsLoose","clear","WebGPUCmdBindStates","_WebGPUCmdObject2","_this2","BIND_STATES","gpuPipelineState","gpuInputAssembler","gpuDescriptorSets","dynamicOffsets","viewport","scissor","lineWidth","depthBias","blendConstants","depthBounds","stencilWriteMask","stencilCompareMask","WebGPUCmdDraw","_WebGPUCmdObject3","_this3","DRAW","drawInfo","DrawInfo","WebGPUCmdUpdateBuffer","_WebGPUCmdObject4","_this4","UPDATE_BUFFER","gpuBuffer","offset","size","WebGPUCmdCopyBufferToTexture","_WebGPUCmdObject5","_this5","COPY_BUFFER_TO_TEXTURE","gpuTexture","buffers","regions","WebGPUCmdPackage","cmds","CachedArray","beginRenderPassCmds","bindStatesCmds","drawCmds","updateBufferCmds","copyBufferToTextureCmds","clearCmds","allocator","beginRenderPassCmdPool","freeCmds","bindStatesCmdPool","drawCmdPool","updateBufferCmdPool","copyBufferToTextureCmdPool","WebGPUCmdFuncCreateBuffer","device","nativeDevice","bufferDesc","bufferUsage","usage","INDEX","TRANSFER_DST","GPUBufferUsage","UNIFORM","INDIRECT","TRANSFER_SRC","COPY_SRC","COPY_DST","gpuTarget","WebGPUCmdFuncDestroyBuffer","destroy","WebGPUCmdFuncResizeBuffer","WebGPUCmdFuncUpdateBuffer","indirects","Array","push","apply","drawInfos","rawBuffer","buff","slice","byteLength","stagingBuffer","label","MAP_WRITE","mappedAtCreation","mappedRange","getMappedRange","Uint8Array","set","unmap","commandEncoder","createCommandEncoder","copyBufferToBuffer","commandBuffer","finish","queue","submit","WebGPUCmdFuncCreateTexture","nativeUsage","gpuInternalFmt","gpuFormat","gpuUsage","TextureUsageBit","GPUTextureUsage","SAMPLED","TEXTURE_BINDING","STORAGE_BINDING","COLOR_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RENDER_ATTACHMENT","gpuWrapS","isPowerOf2","gpuWrapT","gpuMinFilter","gpuMagFilter","samples","Number","texDescriptor","width","height","arrayLayer","mipLevelCount","mipLevel","sampleCount","createTexture","WebGPUCmdFuncDestroyTexture","WebGPUCmdFuncResizeTexture","WebGPUCmdFuncCreateSampler","gpuSampler","minFilter","Filter","LINEAR","ANISOTROPIC","magFilter","gpuMipFilter","mipFilter","addressU","addressV","gpuWrapR","addressW","samplerDesc","addressModeU","addressModeV","addressModeW","mipmapFilter","lodMinClamp","lodMaxClamp","compare","maxAnisotropy","createSampler","copyTexToBufferDesc","destArrayBuffer","WebGPUCmdFuncCopyTextureToBuffer","_x","_x2","_x3","_x4","_WebGPUCmdFuncCopyTextureToBuffer","arguments","_asyncToGenerator","_regeneratorRuntime","mark","x","y","w","h","regionSize","k","copyDestBuffer","region","wrap","_context","prev","next","MAP_READ","texOffset","texExtent","copyTextureToBuffer","origin","bytesPerRow","rowsPerImage","mapAsync","GPUMapMode","READ","stop","_callee","seperateCombinedSamplerTexture","shaderSource","samplerReg","iter","exec","referredMap","samplerName","samplerType","code","sampReg","it","replace","builtinSample","replaceBultin","target","forEach","sampleFunc","builtinSampleReg","RegExp","builtinFuncIter","funcReg","funcIter","funcSet","Set","paramTypeMap","_loop","params","paramsRes","includes","paramIndexSet","paramArr","split","paramSize","paramDecl","typeDecl","paramName","add","funcName","has","matched","funcSamplerReg","match","stripStr","queued","paramIndex","newParams","join","newInvokeStr","count","startIndex","indexOf","index","endIndex","charAt","nextLeft","nextRight","Math","min","funcBody","newFunc","name","functionDefs","firstPrecisionIdx","reflect","wgsl","_step","bindingList","_iterator","_createForOfIteratorHelperLoose","done","wgslStr","value","reg","binding","clearPassData","vertShader","fragShader","bindGroupLayout","pipelineLayout","pipeline","clearRect","color","_texture$gpuTexture","vertShaderModule","createShaderModule","fragShaderModule","bgLayoutDesc","entries","visibility","hasDynamicOffset","minBindingSize","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","vertexState","module","entryPoint","colorState","writeMask","fragState","targets","pipelineDesc","layout","vertex","primitive","topology","frontFace","cullMode","fragment","multisample","alphaToCoverageEnabled","createRenderPipeline","desc","dimension","baseMipLevel","baseArrayLayer","arrayLayerCount","aspect","dstView","createView","uniformBuffer","colorArr","z","mappedBuffer","Float32Array","entry","resource","bindgroupDesc","bindGroup","createBindGroup","rpDesc","colorAttachments","view","loadOp","storeOp","clearValue","renderPassEncoder","beginRenderPass","setPipeline","setBindGroup","setViewport","setScissorRect","draw","end","findEmployAttr","matches","source","matchLoc","location","trim","locName","rmvLocRegex","equalAttr","targetVarName","searchTarVarName","matchCountRegex","matchesCount","varNameReg","attrs","parseInt","WebGPUCmdFuncCreateGPUShader","gpuShader","wgslCodes","stageSize","gpuStages","_loop2","gpuStage","glslSource","stageStr","sourceCode","spv","compileGLSL","convertSpirV2WGSL","shader","getCompilationInfo","then","compileInfo","messages","info","log","lineNum","linePos","message","shaderStage","bindings","bindingListSize","s","currBindingSize","b","WebGPUCmdFuncCreateInputAssember","attrSize","attributes","gpuAttribs","offsets","attrib","stream","gpuVertexBuffers","FormatInfos","gpuType","stride","componentCount","isNormalized","isInstanced","WebGPUCmdFuncCopyTexImagesToTexture","texImages","texImg","copyExternalImageToTexture","texSubres","depth","flags","TextureFlagBit","GEN_MIPMAP","genMipMap","mipmapData","GFXSampleTypeToGPUTextureSampleType","GFXViewDimensionToGPUViewDimension","GFXMemoryAccessToGPUStorageTextureAccess","createBindGroupLayoutEntry","currBind","gpuVisibility","stageFlags","entrys","entrySampler","sampleType","floatFilterable","isTexUnFilter","viewDimension","descriptorType","multisampled","DescriptorType","UNIFORM_BUFFER","DYNAMIC_UNIFORM_BUFFER","STORAGE_BUFFER","DYNAMIC_STORAGE_BUFFER","SAMPLER_TEXTURE","SAMPLER","TEXTURE","STORAGE_IMAGE","storageTexture","access","INPUT_ATTACHMENT","TextureSampleTypeTrait","R11G11B10F","FormatToWGPUFormatType","fromLevel","levelCount","baseLayer","shaderDescVert","shaderDescFrag","srcView","WebGPUCmdFuncCopyBuffersToTexture","dstFormat","blockSize","formatAlignment","bufferPixelWidth","buffStride","bufferPixelHeight","buffTexHeight","FormatSize","bufferBytesPerRow","bufferBytesPerImageSlice","bufferBytesPerImageLayer","targetWidth","alignTo","targetHeight","imgDataLayout","compactInWidth","l","layerCount","d","arrayBuffer","byteOffset","srcData","buffOffset","copyTarget","writeTexture","loadWebGPUPromise","WebGPUDescriptorSet","_DescriptorSet","_len","args","_key","call","concat","_gpuDescriptorSet","_bindGroupEntries","_dynamicOffsets","_proto","initialize","_layout","gpuDescriptorSetLayout","descriptorIndices","descriptorCount","_buffers","fill","_textures","_samplers","gpuDescriptors","bindingSize","bindCount","j","_bindBufferEntry","bind","destBind","nativeBuffer","bindGrpEntry","gpuOffset","resetChange","_bindTextureEntry","nativeTexView","getNativeTextureView","_bindSamplerEntry","samplerIdx","currTexture","defaultResource","texFormat","POINT","bindSamplerGrpEntry","createGPUSampler","_applyBindGroup","_isDirty","descriptors","descCount","bindIdx","descType","DESCRIPTOR_BUFFER_TYPE","defaultBuffer","DESCRIPTOR_STORAGE_BUFFER_TYPE","DESCRIPTOR_SAMPLER_TYPE","currTex","hasChange","ViewDimension","TEXCUBE","currSampler","_createBindGroup","_hasResourceChange","_isResourceChange","some","prepare","force","values","update","DescriptorSet","WebGPUBuffer","_Buffer","_gpuBuffer","_indirectBuffer","_hasChange","_isBufferView","_usage","_memUsage","memUsage","_size","_stride","ceil","range","_count","_flags","drawIndirectByIndex","max","IndirectBuffer","memoryStatus","bufferSize","resize","warnID","oldSize","buffSize","Buffer","currPipelineState","descriptorSets","groupSets","renderAreas","WebGPUCommandBuffer","_CommandBuffer","cmdPackage","_webGPUAllocator","_isInRenderPass","_curGPUPipelineState","_curWebGPUPipelineState","_curGPUDescriptorSets","_curGPUInputAssembler","_curDynamicOffsets","_curViewport","_curScissor","_curLineWidth","_curDepthBias","_curBlendConstants","_curDepthBounds","_curStencilWriteMask","_curStencilCompareMask","_isStateValid","_globalDescriptors","_nativeCommandBuffer","_encoder","_descSetDirtyIndex","INT_MAX","_nativePassDesc","_wgpuRenderPass","_renderPassFuncQueue","pipelineBarrier","blitTexture","_type","_queue","cmdAllocator","setCount","bindingMappings","blockOffsets","begin","dynamicOffsetSize","_numDrawCalls","_numInstances","_numTris","renderPass","framebuffer","_this$_wgpuRenderPass","gpuDevice","nativeRenderPass","originalRP","needPartialClear","renderingFullScreen","gpuColorTextures","every","swapchain","getSwapchains","clearColorSize","colorTex","isOffscreen","getTextureView","colorGPUTextureView","depthStencilAttachment","UNKNOWN","_gpuFramebuffer$gpuDe","tex","gpuDepthStencilTexture","depthTex","gpuDepthStencilTextureView","depthClearValue","stencilClearValue","floor","passEncoder","endRenderPass","cmdEncoder","cb","bindPipelineState","pipelineState","webgpuPipelineState","bindDescriptorSet","descriptorSet","gpuDescriptorSet","bindInputAssembler","inputAssembler","left","top","minDepth","maxDepth","Viewport","setScissor","setLineWidth","setDepthBias","depthBiasConstantFactor","depthBiasClamp","depthBiasSlopeFactor","constantFactor","clamp","slopeFactor","setBlendConstants","setDepthBound","minDepthBounds","maxDepthBounds","minBounds","maxBounds","setStencilWriteMask","face","setStencilCompareMask","reference","compareMask","CommandBufferType","PRIMARY","bindStates","ia","iaData","indirectBuffer","gpuIndirectBuffer","multiDrawIndirectSupport","_iaData$gpuIndirectBu","drawInfoCount","drawInfoSize","Object","keys","drawIndexedIndirect","drawIndirect","instanceCount","indexBuffer","indexCount","drawIndexed","firstIndex","firstVertex","firstInstance","vertexCount","gpuPrimitive","errorID","updateBuffer","data","alloc","writeBuffer","copyBuffersToTexture","cmd","execute","cmdBuffs","WebGPUCmdBuff","rpLength","c","array","stateCmdCount","drawCmdCount","updateBufferCmdCount","copyBufferTexCmdCount","_currPipelineState","_this$_curGPUPipeline","gpuPipelineLayout","wgpuPipLayout","currSetIdx","currDesc","currLayout","setLayouts","currLayoutInfo","DescriptorSetInfo","newDescSet","createDescriptorSet","wgpuPipeline","nativePipeline","depthStencil","stencilRef","setStencilReference","currGPUDescSize","wgpuBindGroups","wgpuDynOffsets","descObj","curGpuDesc","dynamicOffsetCount","currOffset","bindObj","gpuBindGroupSize","currBindGroup","wgpuVertexBuffers","gpuVertBuffSize","slot","vertBuffSize","setVertexBuffer","gpuIndexBuffer","wgpuIndexBuffer","indexType","gpuIndexType","setIndexBuffer","setBlendConstant","CommandBuffer","WebGPUFramebuffer","_Framebuffer","_gpuFramebuffer","_renderPass","_colorTextures","colorTextures","_depthStencilTexture","depthStencilTexture","colorTexSize","colorTexture","gpuTex","isSwapchainTexture","MAX_SAFE_INTEGER","_width","_height","Framebuffer","WebGPUInputAssembler","_InputAssembler","_gpuInputAssembler","vertexBuffers","_attributes","_attributesHash","computeAttributesHash","_vertexBuffers","_indexBuffer","vertBuff","vertexOffset","_drawInfo","vb","InputAssembler","WebGPUDescriptorSetLayout","_DescriptorSetLayout","_gpuDescriptorSetLayout","_bindGrpLayoutEntries","_currBinds","_prepareEntries","textures","samplers","references","resetChanged","_bindings","gfxDevice","maxBinding","flattenedIndices","_bindingIndices","_descriptorIndices","dynamicBindings","DESCRIPTOR_DYNAMIC_TYPE","bindGrpLayoutEntries","groupLayout","DescriptorSetLayout","WebGPUPipelineLayout","_PipelineLayout","_gpuPipelineLayout","_nativePipelineLayout","_bindGrpLayouts","fetchPipelineLayout","resetAll","gpuSetLayouts","dynamicOffsetIndices","setLayoutSize","_setLayouts","indices","bindingIndices","dynBindSize","that","gpuBindGroupLayouts","nativePipelineLayout","changeSetLayout","PipelineLayout","WebPUPrimitives","WebGPUPipelineState","_PipelineState","_gpuPipelineState","_locations","_this$_renderPass$dep","_primitive","_shader","_pipelineLayout","_rs","rasterizerState","_dss","depthStencilState","_bs","blendState","_is","inputState","_dynamicStates","dynamicStates","vertexStage","fragmentStage","colorDescs","colAttachmentSize","pipelineLayoutObj","colDesc","blendColorMask","blend","dstFactor","blendDst","operation","blendEq","BlendOp","MAX","ADD","srcFactor","blendSrc","alpha","blendDstAlpha","blendAlphaEq","blendSrcAlpha","shaderStages","shaderAttrs","attrsSize","stripTopology","PrimitiveMode","LINE_STRIP","TRIANGLE_STRIP","renderPplDesc","isFrontFaceCCW","CullMode","FRONT","stripIndexFormat","dssDesc","depthWriteEnabled","depthWrite","depthCompare","depthTest","depthFunc","stencilReadMask","stencilTestFront","stencilFront","stencilFuncFront","depthFailOp","stencilZFailOpFront","passOp","stencilPassOpFront","failOp","stencilFailOpFront","stencilReadMaskFront","stencilWriteMaskFront","stencilRefFront","stencilTestBack","stencilBack","stencilFuncBack","stencilZFailOpBack","stencilPassOpBack","stencilFailOpBack","stencilReadMaskBack","stencilWriteMaskBack","stencilRefBack","depthBiasSlopeScale","depthBiasSlop","rs","dss","bs","_getShaderLocation","updatePipelineLayout","forceUpdate","vertexAttrs","emptyPushAttr","streamCount","currBufferLayout","arrayStride","currAttrs","shaderAttrSize","shaderAttr","hasAttr","gpuAttrSize","gpuAttr","attr","loc","stepMode","attrLayout","shaderLocation","PipelineState","WebGPUQueue","_Queue","numDrawCalls","numInstances","numTris","_nativeQueue","_isAsync","cmdBuffSize","cmdBuff","Queue","WebGPURenderPass","_RenderPass","_gpuRenderPass","_generateColorAttachment","colorAttachment","LoadOp","LOAD","StoreOp","STORE","_generateDSAttachment","dsAttachment","depthStencilDescriptor","depthLoadOp","CLEAR","depthStoreOp","stencilLoadOp","stencilStoreOp","_colorInfos","_depthStencilInfo","_subpasses","subpasses","colorDescriptions","originalColorDesc","attachment","renderPassDesc","originalRPDesc","originalDepthStencilDesc","RenderPass","samplerCaches","WebGPUSampler","_Sampler","_gpuSampler","cmpFunc","_computeSamplerKey","currKey","currGPUSampler","_info","Sampler","WebGPUShader","_Shader","_gpuShader","_name","_stages","stages","_blocks","blocks","gpuProgram","gpuInputs","gpuUniforms","gpuBlocks","gpuSamplers","Shader","WebGPUStateCache","gpuArrayBuffer","gpuElementArrayBuffer","gpuUniformBuffer","gpuBindUBOs","gpuBindUBOOffsets","texUnit","gpuTexUnits","gpuSamplerUnits","gpuReadFramebuffer","scissorRect","RasterizerState","DepthStencilState","BlendState","gpuEnabledAttribLocs","gpuCurrentAttribLocs","texUnitCacheMap","bufferBindings","vertexAttributes","WebGPUTexture","_Texture","_gpuTexture","_texDescriptor","_lodLevel","getTextureHandle","initAsSwapchainTexture","texInfo","TextureInfo","hasDepth","viewInfo","_isTextureView","copy","_isPowerOf2","IsPowerOf2","FormatSurfaceSize","_viewInfo","baseLevel","gpuRenderbuffer","textureSize","getLevelCount","Texture","WebGPUCommandPool","Clazz","_frees","_freeIdx","_freeCmds","temp","increase","free","cmdLength","release","freeCmdLength","WebGPUCommandAllocator","_proto2","releaseCmds","IWebGPUBlitManager","_srcFramebuffer","_dstFramebuffer","WebGPUSwapchain","_Swapchain","nullTex2D","nullTexCube","_canvas","_blitManager","_webGPUDeviceLostHandler","windowHandle","_onWebGPUDeviceLost","lost","capabilities","stateCache","maxTextureUnits","maxUniformBufferBindings","maxVertexAttributes","_createTexture","_createDepthStencilTexture","nullTexRegion","BufferTextureCopy","nullTexBuff","limits","maxTextureDimension2D","_colorTexture","debug","gfxSwapchainFormat","swapchainFormat","gpuConfig","alphaMode","context","configure","getCurrentTexture","depthInfo","Swapchain","wasmInstance","registerList","initWasm","wasmFactory","wasmUrl","Promise","resolve","reject","errorMessage","err","instantiateWasm","importObject","receiveInstance","result","Instance","waitForWebGPUWasmInstantiation","_waitForWebGPUWasmInstantiation","errorReport","_yield$Promise$all2","glslModule","glslWasmModule","twgslModule","twgslWasmModule","glslFactory","glslWasmUrl","twgslFactory","twgslWasmUrl","msg","ensureWasmModuleReady","sys","hasFeature","Feature","WASM","all","import","sent","t0","WebGPUDevice","exports","_Device","_adapter","_device","_swapchain","_glslang","_twgsl","_bindingMappings","_multiDrawIndirect","_gpuConfig","_textureExclusive","COUNT","_copyTextureToBuffers","_initialize","_initDevice","createSwapchain","getSampler","computeHash","getGeneralBarrier","GeneralBarrier","_generalBarrierss","getTextureBarrier","TextureBarrier","_textureBarriers","getBufferBarrier","BufferBarrier","_bufferBarriers","copyTextureToBuffers","flushCommands","_context2","abrupt","initDevice","_callee2","initFormatFeatures","exts","_formatFeatures","FormatFeatureBit","tempFeature","RENDER_TARGET","SAMPLED_TEXTURE","STORAGE_TEXTURE","LINEAR_FILTER","VERTEX_ATTRIBUTE","RGB8","RGB8SN","R5G6B5","RGBA4","RGB5A1","SRGB8","RGB9E5","RGB10A2UI","RGB16F","RGB8I","RGB8UI","RGB16I","RGB16UI","compressedFeature","ETC2_RGB8","ETC2_RGBA8","ETC2_SRGB8","ETC2_SRGB8_A8","ETC2_RGB8_A1","ETC2_SRGB8_A1","BC1","BC1_SRGB","ASTC_RGBA_4X4","ASTC_RGBA_5X4","ASTC_RGBA_5X5","ASTC_RGBA_6X5","ASTC_RGBA_6X6","ASTC_RGBA_8X5","ASTC_RGBA_8X6","ASTC_RGBA_8X8","ASTC_RGBA_10X5","ASTC_RGBA_10X6","ASTC_RGBA_10X8","ASTC_RGBA_10X10","ASTC_RGBA_12X10","ASTC_RGBA_12X12","ASTC_SRGBA_4X4","ASTC_SRGBA_5X4","ASTC_SRGBA_5X5","ASTC_SRGBA_6X5","ASTC_SRGBA_6X6","ASTC_SRGBA_8X5","ASTC_SRGBA_8X6","ASTC_SRGBA_8X8","ASTC_SRGBA_10X5","ASTC_SRGBA_10X6","ASTC_SRGBA_10X8","ASTC_SRGBA_10X10","ASTC_SRGBA_12X10","ASTC_SRGBA_12X12","getDefaultDescResources","resourceInfo","defaultRes","pow","samplerInfo","SamplerInfo","_createDefaultDescSet","layoutInfo","DescriptorSetLayoutInfo","layoutBinding","DescriptorSetLayoutBinding","createDescriptorSetLayout","descInfo","bindBuffer","_this$_adapter","gpu","maxVertAttrs","maxSampledTexPerShaderStage","submitFeatures","mapping","samplerTextureOffsets","firstSet","mappingIdxSize","curSet","prevSet","_i2","_curSet","canvas","adapterInfo","description","features","defaultDescTexResc","cubeTexInfo","defaultDescCubeTexResc","defaultDescBuffResc","defaultDescSmplResc","compressedFormat","_context3","navigator","requestAdapter","maxSampledTexturesPerShaderStage","requestDevice","requiredLimits","requiredFeatures","_gfxAPI","API","WEBGPU","_swapchainFormat","getPreferredCanvasFormat","_bindingMappingInfo","bindingMappingInfo","setIndices","maxBlockCounts","maxSamplerTextureCounts","flexibleSet","Device","getContext","_vendor","vendor","_renderer","_caps","clipSpaceMinZ","screenSpaceSignY","uboOffsetAlignment","maxUniformBufferBindingSize","maxTextureSize","maxArrayTextureLayers","maxTextureArrayLayers","max3DTextureSize","maxTextureDimension3D","minUniformBufferOffsetAlignment","_features","ELEMENT_INDEX_UINT","INSTANCED_ARRAYS","MULTIPLE_RENDER_TARGETS","createQueue","QueueInfo","QueueType","GRAPHICS","_cmdBuff","createCommandBuffer","CommandBufferInfo","SampleCount","X1","getFormatFeatures","ETC_RGB8","PVRTC_RGB2","_callee3","_x5","res","acquire","present","createShader","createInputAssembler","createRenderPass","createFramebuffer","descriptorSetLayout","createPipelineState","copyTexImagesToTexture","copyFramebufferToBuffer","blitFramebuffer","config","legacyCC"],"mappings":"snCAgCA,IAAaA,GAAmB,WAAA,SAAAA,IAAA,CAG3B,OAH2BA,EAIrBC,YAAP,SAAoBC,GAChBF,EAAoBG,UAAYD,CACnC,EAAAE,EAAAJ,EAAA,KAAA,CAAA,CAAAK,IAAA,WAAAC,IALD,WACI,OAAON,EAAoBG,SAC/B,KAACH,CAAA,CAH2B,GAUhC,SAASO,GAAaC,EAAMC,GACxB,OAAOA,EAA2B,YAAdD,IAAS,IAAmBC,GAAY,IAAMA,GAAY,EAClF,CAEM,SAAUC,GAAgBC,EAAaF,GAEzC,OAAOF,GAAaC,OAAaG,EAAKF,EAC1C,CAEM,SAAUG,GAAgBC,EAAaJ,GAIzC,IAFA,IAAID,EAAO,KACLM,EAAYD,EAAIE,OACbC,EAAI,EAAGA,EAAIF,EAAWE,IAC3BR,EAAe,GAAPA,EAAaK,EAAII,WAAWD,GAExC,OAAOT,GAAYC,EAAMC,EAC7B,CA3BaT,GAOMG,UAAiC,KA2B7C,IAAMe,GAAiB,CAC1BC,aAASC,EACTC,WAAOD,GAEX,SAASE,GAAeC,GAChB,gBAAiBA,EACjBL,GAAOC,QAAUI,EACV,sBAAuBA,IAC9BL,GAAOG,MAAQE,EAEvB,CAMA,IA8CYC,GA9CCC,GAAgB,WAAA,SAAAA,IAAAC,KAEzBC,kBAA+C,IAAIC,IAA2BF,KAC9EG,mBAAiD,IAAID,IAA4BF,KACjFI,mBAAiD,IAAIF,IAA4BF,KACjFK,YAAM,EAAAL,KACNM,eAAiC,GAAEN,KACnCO,aAAO,EAAAP,KACPQ,iBAAW,EAAAR,KACXS,aAAO,EAAAT,KACPU,eAAS,EAAAV,KACTW,aAAO,CAAA,CAeN,OAfMZ,EAAAa,UACPC,iBAAA,SAAkBC,GACd,GAAId,KAAKM,eAAeQ,GACpB,OAAOd,KAAKM,eAAeQ,GAE/B,IAAMC,EAAa,IAAIC,EACnBC,EAAeC,QACfC,EAAeC,OACf,GACA,GACAC,EAAcC,MAEZC,EAAcjD,GAAoBE,SAASgD,aAAaT,GAE9D,OADAf,KAAKM,eAAeQ,GAAOS,EACpBA,CACV,EAAAxB,CAAA,CA1BwB,IAiD5B,SAHWD,GAAAA,EAAAA,EAAmB,IAAA,GAAA,MAAnBA,EAAAA,EAAmB,OAAA,GAAA,QAAnBA,CAGX,CAHWA,KAAAA,GAAmB,CAAA,IC1D/B,IAAM2B,GAAqC,CACvC,SACA,gBACA,gBACA,iBAGEC,GAA0C,CAC5C,QACA,OACA,QACA,aACA,UACA,YACA,gBACA,mBAsBYC,GAAuBC,GACnC,IAAIC,EAAO,EAKX,GAJID,EAAQE,EAAmBC,SAAUF,GAAQG,eAAeD,QAC5DH,EAAQE,EAAmBG,WAAYJ,GAAQG,eAAeC,UAC9DL,EAAQE,EAAmBI,UAAWL,GAAQG,eAAeE,SAC7DN,IAAUE,EAAmBK,MAAON,GAASG,eAAeD,OAASC,eAAeC,SAAWD,eAAeE,SACrG,IAATL,EAAgB,MAAM,IAAIO,MAAM,yCACpC,OAAOP,CACX,UA8CgBQ,GAA6BC,GACzC,OAAQA,GACR,KAAKC,EAAOC,KAAM,MAAO,UACzB,KAAKD,EAAOE,MAAO,MAAO,SAC1B,KAAKF,EAAOG,KAAM,MAAO,SACzB,KAAKH,EAAOI,IAAK,MAAO,WACxB,KAAKJ,EAAOK,MAAO,MAAO,WAC1B,KAAKL,EAAOM,MAAO,MAAO,UAC1B,KAAKN,EAAOO,KAAM,MAAO,UACzB,KAAKP,EAAOQ,MAAO,MAAO,YAC1B,KAAKR,EAAOS,OAAQ,MAAO,WAC3B,KAAKT,EAAOU,MAAO,MAAO,WAC1B,KAAKV,EAAOW,MAAO,MAAO,YAC1B,KAAKX,EAAOY,OAAQ,MAAO,WAC3B,KAAKZ,EAAOa,MAAO,MAAO,WAC1B,KAAKb,EAAOc,OAAQ,MAAO,YAC3B,KAAKd,EAAOe,QAAS,MAAO,WAC5B,KAAKf,EAAOgB,OAAQ,MAAO,WAC3B,KAAKhB,EAAOiB,MACZ,KAAKjB,EAAOkB,MAAO,MAAO,WAC1B,KAAKlB,EAAOmB,SAAU,MAAO,UAC7B,KAAKnB,EAAOoB,QAAS,MAAO,WAC5B,KAAKpB,EAAOqB,QAAS,MAAO,UAC5B,KAAKrB,EAAOsB,OAAQ,MAAO,UAC3B,KAAKtB,EAAOuB,QAAS,MAAO,YAC5B,KAAKvB,EAAOwB,SAAU,MAAO,WAC7B,KAAKxB,EAAOyB,QAAS,MAAO,WAC5B,KAAKzB,EAAO0B,QAAS,MAAO,YAC5B,KAAK1B,EAAO2B,SAAU,MAAO,WAC7B,KAAK3B,EAAO4B,QAAS,MAAO,WAE5B,QAEI,OADAC,EAAK,kDACE,UAGf,CAEA,SAASC,GAA8B/B,GACnC,OAAQA,GACR,KAAKC,EAAO+B,GAAI,MAAO,UACvB,KAAK/B,EAAOgC,KAAM,MAAO,UACzB,KAAKhC,EAAOiC,KAAM,MAAO,SACzB,KAAKjC,EAAOkC,IAAK,MAAO,SACxB,KAAKlC,EAAOI,IAAK,MAAO,WACxB,KAAKJ,EAAOK,MAAO,MAAO,WAC1B,KAAKL,EAAOM,MAAO,MAAO,UAC1B,KAAKN,EAAOO,KAAM,MAAO,UACzB,KAAKP,EAAOiB,MAAO,MAAO,aAC1B,KAAKjB,EAAOkB,MAAO,MAAO,aAC1B,KAAKlB,EAAOmB,SAAU,MAAO,kBAC7B,KAAKnB,EAAOoB,QAAS,MAAO,aAC5B,KAAKpB,EAAOqB,QAAS,MAAO,YAC5B,KAAKrB,EAAOsB,OAAQ,MAAO,YAC3B,KAAKtB,EAAOmC,KAAM,MAAO,UACzB,KAAKnC,EAAOoC,MAAO,MAAO,UAC1B,KAAKpC,EAAOqC,KAAM,MAAO,UACzB,KAAKrC,EAAOU,MAAO,MAAO,WAC1B,KAAKV,EAAOS,OAAQ,MAAO,WAC3B,KAAKT,EAAOQ,MAAO,MAAO,YAC1B,KAAKR,EAAOyB,QAAS,MAAO,aAC5B,KAAKzB,EAAOwB,SAAU,MAAO,aAC7B,KAAKxB,EAAOuB,QAAS,MAAO,cAC5B,KAAKvB,EAAOG,KAAM,MAAO,UACzB,KAAKH,EAAOE,MAAO,MAAO,UAC1B,KAAKF,EAAOC,KAAM,MAAO,WACzB,KAAKD,EAAOa,MAAO,MAAO,WAC1B,KAAKb,EAAOY,OAAQ,MAAO,WAC3B,KAAKZ,EAAOW,MAAO,MAAO,YAC1B,KAAKX,EAAO4B,QAAS,MAAO,aAC5B,KAAK5B,EAAO2B,SAAU,MAAO,aAC7B,KAAK3B,EAAO0B,QAAS,MAAO,cAC5B,KAAK1B,EAAOsC,QAAS,MAAO,eAE5B,KAAKtC,EAAOuC,MAAO,MAAO,cAC1B,KAAKvC,EAAOwC,cAAe,MAAO,uBAElC,KAAKxC,EAAOyC,UAAW,MAAO,iBAC9B,KAAKzC,EAAO0C,eAAgB,MAAO,sBACnC,KAAK1C,EAAO2C,IAAK,MAAO,iBACxB,KAAK3C,EAAO4C,SAAU,MAAO,sBAC7B,KAAK5C,EAAO6C,IAAK,MAAO,iBACxB,KAAK7C,EAAO8C,SAAU,MAAO,sBAC7B,KAAK9C,EAAO+C,UAAW,MAAO,cAC9B,KAAK/C,EAAOgD,UAAW,MAAO,iBAC9B,KAAKhD,EAAOiD,UAAW,MAAO,kBAC9B,KAAKjD,EAAOkD,IAAK,MAAO,iBACxB,KAAKlD,EAAOmD,SAAU,MAAO,sBAE7B,QAEI,OADAtB,EAAK,oDACE,aAGf,UAEgBuB,GAAuBrD,GACnC,OAAO+B,GAA6B/B,EACxC,CAEA,SAASsD,GAA8BtD,GACnC,OAAQA,GACR,IAAK,UAAW,OAAOC,EAAO+B,GAC9B,IAAK,UAAW,OAAO/B,EAAOgC,KAC9B,IAAK,SAAU,OAAOhC,EAAOiC,KAC7B,IAAK,SAAU,OAAOjC,EAAOkC,IAC7B,IAAK,WAAY,OAAOlC,EAAOI,IAC/B,IAAK,WAAY,OAAOJ,EAAOK,MAC/B,IAAK,UAAW,OAAOL,EAAOM,MAC9B,IAAK,UAAW,OAAON,EAAOO,KAC9B,IAAK,aAAc,OAAOP,EAAOiB,MACjC,IAAK,aAqCL,QACI,OAAOjB,EAAOkB,MArClB,IAAK,kBAAmB,OAAOlB,EAAOmB,SACtC,IAAK,aAAc,OAAOnB,EAAOoB,QACjC,IAAK,YAAa,OAAOpB,EAAOqB,QAChC,IAAK,YAAa,OAAOrB,EAAOsB,OAChC,IAAK,UAAW,OAAOtB,EAAOmC,KAC9B,IAAK,UAAW,OAAOnC,EAAOoC,MAC9B,IAAK,WAAY,OAAOpC,EAAOqC,KAC/B,IAAK,WAAY,OAAOrC,EAAOU,MAC/B,IAAK,WAAY,OAAOV,EAAOS,OAC/B,IAAK,YAAa,OAAOT,EAAOQ,MAChC,IAAK,aAAc,OAAOR,EAAOyB,QACjC,IAAK,aAAc,OAAOzB,EAAOwB,SACjC,IAAK,cAAe,OAAOxB,EAAOuB,QAClC,IAAK,UAAW,OAAOvB,EAAOG,KAC9B,IAAK,UAAW,OAAOH,EAAOE,MAC9B,IAAK,WAAY,OAAOF,EAAOC,KAC/B,IAAK,WAAY,OAAOD,EAAOa,MAC/B,IAAK,WAAY,OAAOb,EAAOY,OAC/B,IAAK,YAAa,OAAOZ,EAAOW,MAChC,IAAK,aAAc,OAAOX,EAAO4B,QACjC,IAAK,aAAc,OAAO5B,EAAO2B,SACjC,IAAK,cAAe,OAAO3B,EAAO0B,QAClC,IAAK,eAAgB,OAAO1B,EAAOsC,QACnC,IAAK,cAAe,OAAOtC,EAAOuC,MAClC,IAAK,uBAAwB,OAAOvC,EAAOwC,cAC3C,IAAK,iBAAkB,OAAOxC,EAAOyC,UACrC,IAAK,sBAAuB,OAAOzC,EAAO0C,eAC1C,IAAK,iBAAkB,OAAO1C,EAAO2C,IACrC,IAAK,sBAAuB,OAAO3C,EAAO4C,SAC1C,IAAK,iBAAkB,OAAO5C,EAAO6C,IACrC,IAAK,sBAAuB,OAAO7C,EAAO8C,SAC1C,IAAK,cAAe,OAAO9C,EAAO+C,UAClC,IAAK,iBAAkB,OAAO/C,EAAOgD,UACrC,IAAK,kBAAmB,OAAOhD,EAAOiD,UACtC,IAAK,iBAAkB,OAAOjD,EAAOkD,IACrC,IAAK,sBAAuB,OAAOlD,EAAOmD,SAI9C,UAEgBG,GAAuBvD,GACnC,OAAOsD,GAA6BtD,EACxC,UAEgBwD,GAA2BC,GACvC,OAAQA,GACR,KAAKC,EAAYC,MAAO,MAAO,KAC/B,KAAKD,EAAYE,MAAO,MAAO,KAC/B,KAAKF,EAAYG,YAAa,MAAO,WACrC,KAAKH,EAAYI,MAAO,MAAO,KAC/B,KAAKJ,EAAYK,KAAM,MAAO,OAC9B,QAEI,OADAC,EAAM,6DACC,KAGf,CAqCO,IAAMC,GAAyC,CAClD,OACA,OACA,UACA,kBACA,kBACA,SACA,iBACA,kBAGSC,GAA0C,CACnD,QACA,OACA,QACA,aACA,UACA,YACA,gBACA,UAGSC,GAAsC,CAC/C,MACA,WACA,mBACA,MACA,gBAGYC,GAAiBC,GAC7B,OAAQA,GACR,KAAKC,EAAUC,EACX,OAAOC,cAAcC,IACzB,KAAKH,EAAUI,EACX,OAAOF,cAAcG,MACzB,KAAKL,EAAUM,EACX,OAAOJ,cAAcK,KACzB,KAAKP,EAAUQ,EACX,OAAON,cAAcO,MACzB,QACI,OAAOP,cAAc3E,IAE7B,CAEO,IAkBKmF,GAlBCC,GAAuC,CAChD,OACA,MACA,YACA,YACA,sBACA,sBACA,MACA,MACA,gBACA,gBACA,sBACA,WACA,qBACA,YACA,wBAWH,SARWD,GAAAA,EAAAA,EAAS,kBAAA,GAAA,oBAATA,EAAAA,EAAS,gBAAA,GAAA,kBAATA,EAAAA,EAAS,YAAA,GAAA,cAATA,EAAAA,EAAS,KAAA,GAAA,OAATA,EAAAA,EAAS,cAAA,GAAA,gBAATA,EAAAA,EAAS,uBAAA,GAAA,yBAATA,EAAAA,EAAS,MAAA,GAAA,OAATA,CAQX,CARWA,KAAAA,GAAS,CAAA,IAUrB,IAAsBE,GAIlB,SAAaC,GAAezH,KAHrB0H,aAAO,EAAA1H,KACP2H,SAAW,EAGd3H,KAAK0H,QAAUD,CACnB,EAKSG,GAAyB,SAAAC,GAQlC,SAAAD,IAAA,IAAAE,EAFuB,OAGnBA,EAAMR,EAAAA,KAAAA,KAAAA,GAAUS,oBAAkB/H,MAR/BgI,cAA6C,KAAIF,EACjDG,eAA+C,KAAIH,EACnDI,WAAa,IAAIC,EAAML,EACvBM,YAAuB,GAAEN,EACzBO,WAAa,EAAGP,EAChBQ,aAAe,EAACR,CAIvB,CAKC,OAfiCS,EAAAX,EAAAC,GAUjCD,EAAAhH,UAEM4H,MAAP,WACIxI,KAAKiI,eAAiB,KACtBjI,KAAKoI,YAAY/I,OAAS,CAC7B,EAAAuI,CAAA,CAfiC,CAAQJ,IAkBjCiB,GAAoB,SAAAC,GAc7B,SAAAD,IAAA,IAAAE,EAFkE,OAG9DA,EAAMrB,EAAAA,KAAAA,KAAAA,GAAUsB,cAAY5I,MAdzB6I,iBAAmD,KAAIF,EACvDG,kBAAqD,KAAIH,EACzDI,kBAA+C,GAAEJ,EACjDK,eAA2B,GAAEL,EAC7BM,SAA4B,KAAIN,EAChCO,QAAuB,KAAIP,EAC3BQ,UAA2B,KAAIR,EAC/BS,UAAqC,KAAIT,EACzCU,eAA2B,GAAEV,EAC7BW,YAAyC,KAAIX,EAC7CY,iBAAmD,KAAIZ,EACvDa,mBAAuD,KAAIb,CAIlE,CAeC,OA/B4BJ,EAAAE,EAAAC,GAgB5BD,EAAA7H,UAEM4H,MAAP,WACIxI,KAAK6I,iBAAmB,KACxB7I,KAAK8I,kBAAoB,KACzB9I,KAAK+I,kBAAkB1J,OAAS,EAChCW,KAAKgJ,eAAe3J,OAAS,EAC7BW,KAAKiJ,SAAW,KAChBjJ,KAAKkJ,QAAU,KACflJ,KAAKmJ,UAAY,KACjBnJ,KAAKoJ,UAAY,KACjBpJ,KAAKqJ,eAAehK,OAAS,EAC7BW,KAAKsJ,YAAc,KACnBtJ,KAAKuJ,iBAAmB,KACxBvJ,KAAKwJ,mBAAqB,IAC7B,EAAAf,CAAA,CA/B4B,CAAQjB,IAkC5BiC,GAAc,SAAAC,GAGvB,SAAAD,IAAA,IAAAE,EAFgC,OAG5BA,EAAMrC,EAAAA,KAAAA,KAAAA,GAAUsC,OAAK5J,MAHlB6J,SAAW,IAAIC,EAAUH,CAIhC,CAIC,OATsBpB,EAAAkB,EAAAC,GAKtBD,EAAA7I,UAEM4H,MAAP,WAEC,EAAAiB,CAAA,CATsB,CAAQjC,IAYtBuC,GAAsB,SAAAC,GAM/B,SAAAD,IAAA,IAAAE,EAFe,OAGXA,EAAM3C,EAAAA,KAAAA,KAAAA,GAAU4C,gBAAclK,MAN3BmK,UAAqC,KAAIF,EACzC5J,OAA8B,KAAI4J,EAClCG,OAAS,EAACH,EACVI,KAAO,EAACJ,CAIf,CAKC,OAb8B1B,EAAAwB,EAAAC,GAQ9BD,EAAAnJ,UAEM4H,MAAP,WACIxI,KAAKmK,UAAY,KACjBnK,KAAKK,OAAS,IACjB,EAAA0J,CAAA,CAb8B,CAAQvC,IAgB9B8C,GAA6B,SAAAC,GAKtC,SAAAD,IAAA,IAAAE,EAFwC,OAGpCA,EAAMlD,EAAAA,KAAAA,KAAAA,GAAUmD,yBAAuBzK,MALpC0K,WAAoC,KAAIF,EACxCG,QAA6B,GAAEH,EAC/BI,QAA+B,GAAEJ,CAIxC,CAMC,OAbqCjC,EAAA+B,EAAAC,GAOrCD,EAAA1J,UAEM4H,MAAP,WACIxI,KAAK0K,WAAa,KAClB1K,KAAK2K,QAAQtL,OAAS,EACtBW,KAAK4K,QAAQvL,OAAS,CACzB,EAAAiL,CAAA,CAbqC,CAAQ9C,IAgBrCqD,GAAgB,WAAA,SAAAA,IAAA7K,KAClB8K,KAA+B,IAAIC,EAAY,GAAE/K,KACjDgL,oBAA6D,IAAID,EAAY,GAAE/K,KAC/EiL,eAAmD,IAAIF,EAAY,GAAE/K,KACrEkL,SAAuC,IAAIH,EAAY,GAAE/K,KACzDmL,iBAAuD,IAAIJ,EAAY,GAAE/K,KACzEoL,wBAAqE,IAAIL,EAAY,EAAE,CA6B7F,OA7B6FF,EAAAjK,UAEvFyK,UAAP,SAAkBC,GACVtL,KAAKgL,oBAAoB3L,SACzBiM,EAAUC,uBAAuBC,SAASxL,KAAKgL,qBAC/ChL,KAAKgL,oBAAoBxC,SAGzBxI,KAAKiL,eAAe5L,SACpBiM,EAAUG,kBAAkBD,SAASxL,KAAKiL,gBAC1CjL,KAAKiL,eAAezC,SAGpBxI,KAAKkL,SAAS7L,SACdiM,EAAUI,YAAYF,SAASxL,KAAKkL,UACpClL,KAAKkL,SAAS1C,SAGdxI,KAAKmL,iBAAiB9L,SACtBiM,EAAUK,oBAAoBH,SAASxL,KAAKmL,kBAC5CnL,KAAKmL,iBAAiB3C,SAGtBxI,KAAKoL,wBAAwB/L,SAC7BiM,EAAUM,2BAA2BJ,SAASxL,KAAKoL,yBACnDpL,KAAKoL,wBAAwB5C,SAGjCxI,KAAK8K,KAAKtC,OACb,EAAAqC,CAAA,CAnCwB,GAsCvB,SAAUgB,GAA2BC,EAAsB3B,GAC7D,IAAM4B,EAA0BD,EAAOC,aAEjCC,EAAa,CAAyB,EAC5CA,EAAW3B,KAAOF,EAAUE,KAE5B,IAAI4B,EAAc,IACb9B,EAAU+B,MAAQjL,EAAekL,OAAShC,EAAU+B,MAAQjL,EAAec,SAAaoI,EAAU+B,MAAQjL,EAAemL,eAC1HjC,EAAU+B,OAASjL,EAAemL,cAElCjC,EAAU+B,MAAQjL,EAAec,SAAQkK,GAAeI,eAAetK,QACvEoI,EAAU+B,MAAQjL,EAAekL,QAAOF,GAAeI,eAAeF,OACtEhC,EAAU+B,MAAQjL,EAAeqL,UAASL,GAAeI,eAAeC,SACxEnC,EAAU+B,MAAQjL,EAAesL,WAAUN,GAAeI,eAAeE,UACzEpC,EAAU+B,MAAQjL,EAAeuL,eAAcP,GAAeI,eAAeI,UAC7EtC,EAAU+B,MAAQjL,EAAemL,eAAcH,GAAeI,eAAeK,UAC7EvC,EAAU+B,MAAQjL,EAAeC,UAAS+K,GAAeI,eAAenL,SAExD,IAAhB+K,IACA7H,EAAK,oEACL6H,GAAeI,eAAeC,SAG5BL,EAAcI,eAAeK,WAC/BT,GAAeI,eAAeK,UAElCV,EAAWE,MAAQD,EACnB9B,EAAUwC,UAAYV,EACtB9B,EAAUA,UAAY4B,EAAavK,aAAawK,EACpD,CAEM,SAAUY,GAA4Bd,EAAsB3B,GAC1DA,EAAUA,WACVA,EAAUA,UAAU0C,SAE5B,CAEM,SAAUC,GAA2BhB,EAAsB3B,GAC7DyC,GAA2Bd,EAAQ3B,GACnC0B,GAA0BC,EAAQ3B,EACtC,CAEM,SAAU4C,GACZjB,EACA3B,EACA9J,EACA+J,EACAC,GAEA,GAAIF,EAAU+B,MAAQjL,EAAesL,SACjCpC,EAAU6C,UAAU3N,OAAS+K,EAC7B6C,MAAMrM,UAAUsM,KAAKC,MAAMhD,EAAU6C,UAAY3M,EAA0B+M,eACxE,CACH,IAEIC,EAFEtB,EAA0BD,EAAOC,aACnCuB,EAAOjN,GAQPgN,EAFA,WAFJC,EAAOA,EAAKC,MAAM,EAAGlD,IAIJiD,EAAajN,OAEdiN,GAGFE,aAAenD,IACzBgD,EAAYA,EAAUE,MAAM,EAAGlD,IAGnC,IAAMoD,EAAgB1B,EAAavK,aAAa,CAC5CkM,wBAAyBrD,EACzBA,KAAAA,EACA6B,MAAOG,eAAesB,UAAYtB,eAAeI,SACjDmB,kBAAkB,IAEhBC,EAAcJ,EAAcK,iBAClC,IAAIC,WAAWF,GAAaG,IAAI,IAAID,WAAWV,IAC/CI,EAAcQ,QACd,IAAMC,EAAiBnC,EAAaoC,uBACpCD,EAAeE,mBAAmBX,EAAe,EAAGtD,EAAUA,UAAwBC,EAAQC,GAC9F,IAAMgE,EAAgBH,EAAeI,SACrCvC,EAAawC,MAAMC,OAAO,CAACH,IAC3BZ,EAAcZ,SACjB,CACL,CAEM,SAAU4B,GAA4B3C,EAAsBpB,OArVzBwB,EACjCwC,EAsVJhE,EAAWiC,UAAY7G,GAA0B4E,EAAWjD,MAC5DiD,EAAWiE,eAAiBtK,GAA6BqG,EAAWpI,QACpEoI,EAAWkE,UAAYjJ,GAAsB+E,EAAWpI,QACxDoI,EAAWmE,UAzVPH,EAAoC,GADHxC,EA0VSxB,EAAWwB,OAxV7C4C,EAAgBtC,eACxBkC,GAAeK,gBAAgBtC,UAG/BP,EAAQ4C,EAAgB1C,eACxBsC,GAAeK,gBAAgBrC,UAG/BR,EAAQ4C,EAAgBE,UACxBN,GAAeK,gBAAgBE,iBAG/B/C,EAAQ4C,EAAgB5N,UACxBwN,GAAeK,gBAAgBG,kBAG/BhD,EAAQ4C,EAAgBK,kBAAoBjD,EAAQ4C,EAAgBM,4BACpEV,GAAeK,gBAAgBM,mBAG9BX,IAEDA,EAAcK,gBAAgBE,gBAAkBF,gBAAgBM,mBAG/DX,EAAcK,gBAAgBE,mBAC9BP,EAAeK,gBAAgBM,qBAChCX,GAAeK,gBAAgBM,mBAG5BX,GA2TPhE,EAAW4E,SAAW5E,EAAW6E,WAAa,SAAW,gBACzD7E,EAAW8E,SAAW9E,EAAW6E,WAAa,SAAW,gBACzD7E,EAAW+E,aAAe,SAC1B/E,EAAWgF,aAAe,SAE1BhF,EAAWiF,QAAUC,OAAOlF,EAAWiF,SAAW,EAAI,EAAI,EAC1D,IAAME,EAAsC,CACxCxF,KAAM,CAACK,EAAWoF,MAAOpF,EAAWqF,OAAQrF,EAAWsF,YACvDC,cAAevF,EAAWwF,SAC1BC,YAAazF,EAAWiF,QACxBrN,OAAQoI,EAAWkE,UACnB1C,MAAOxB,EAAWmE,UAGtBnE,EAAWA,WAAaoB,EAAOC,aAAcqE,cAAcP,EAC/D,UAEgBQ,GAA6B3F,GACrCA,EAAWA,YACXA,EAAWA,WAAWmC,SAE9B,CAEM,SAAUyD,GAA4BxE,EAAsBpB,GAC1DA,EAAWA,YACX2F,GAA4B3F,GAEhC+D,GAA2B3C,EAAQpB,EACvC,CAEM,SAAU6F,GAA4BzE,EAAsB0E,GAC9D,IAAMzE,EAA0BD,EAAOC,aAEvCyE,EAAWf,aAAgBe,EAAWC,YAAcC,EAAOC,QAAUH,EAAWC,YAAcC,EAAOE,YAAe,SAAW,UAC/HJ,EAAWd,aAAgBc,EAAWK,YAAcH,EAAOC,QAAUH,EAAWK,YAAcH,EAAOE,YAAe,SAAW,UAC/HJ,EAAWM,aAAgBN,EAAWO,YAAcL,EAAOC,QAAUH,EAAWO,YAAcL,EAAOE,YAAe,SAAW,UAC/HJ,EAAWlB,SAAW7N,GAAiB+O,EAAWQ,UAClDR,EAAWhB,SAAW/N,GAAiB+O,EAAWS,UAClDT,EAAWU,SAAWzP,GAAiB+O,EAAWW,UAElD,IAAMC,EAAc,CAA0B,EAC9CA,EAAYC,aAAeb,EAAWlB,SACtC8B,EAAYE,aAAed,EAAWhB,SACtC4B,EAAYG,aAAef,EAAWU,SACtCE,EAAYX,UAAYD,EAAWf,aACnC2B,EAAYP,UAAYL,EAAWd,aACnC0B,EAAYI,aAAehB,EAAWM,aACtCM,EAAYK,YAAc,EAC1BL,EAAYM,YAAclB,EAAWN,SACS,WAA1CxO,GAAkB8O,EAAWmB,WAC7BP,EAAYO,QAAUjQ,GAAkB8O,EAAWmB,UAEvDP,EAAYQ,cAAgBpB,EAAWoB,eAAiB,EACxD,IAAMnR,EAAsBsL,EAAa8F,cAAcT,GACvDZ,EAAWA,WAAa/P,CAC5B,CAeA,IAAMqR,GAA2C,CAAyB,EACpEC,GAAiC,GACvC,SAAsBC,GAAgCC,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAAlF,MAAAnN,KAAAsS,UAAA,CAkDrD,SAAAD,KAAA,OAAAA,GAAAE,EAAAC,IAAAC,MAlDM,WACH3G,EACAvL,EACAoK,EACAC,GAAqC,IAAA8H,EAAAC,EAAAC,EAAAC,EAAA9G,EAAAmC,EAAA4E,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,IAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAEjCX,EAAI,EACJC,EAAI,EACJC,EAAI,EACJC,EAAI,EACF9G,EAA0BD,EAAOC,aACjCmC,EAAiBnC,EAAaoC,qBAAqB,IACnD2E,EAAalI,EAAQvL,OAClB0T,EAAI,EAAC,KAAA,EAAA,KAAEA,EAAID,GAAU,CAAAK,EAAAE,KAAA,GAAA,KAAA,CA+B2B,OA9BjDtB,GAAgBgB,IACfpI,EAAQoI,GAAkB/E,IAAI,IAAID,WAAWgE,GAAgBgB,IAAK,GAEvEjB,GAAoBzH,KAAOM,EAAQoI,GAAGvF,WACtCsE,GAAoB5F,MAAQG,eAAeiH,SAAWjH,eAAeK,SAE/DsG,EAAiBjH,EAAavK,aAAasQ,IAC3CmB,EAASrI,EAAQmI,GACvBL,EAAIO,EAAOM,UAAUb,EACrBC,EAAIM,EAAOM,UAAUZ,EACrBC,EAAIK,EAAOO,UAAU1D,MACrB+C,EAAII,EAAOO,UAAUzD,OAErB7B,EAAeuF,oBAAoB,CAC/BlT,QAASA,EAAQmK,WACjBwF,SAAU,EACVwD,OAAQ,CACJhB,EAAAA,EACAC,EAAAA,IAEL,CACCtS,OAAQ2S,EACR5I,OAAQ,EACRuJ,YAAiB,EAAJf,EACbgB,aAAcf,GACf,CACC/C,MAAO8C,EACP7C,OAAQ8C,IAGZ9G,EAAawC,MAAMC,OAAO,CAACN,EAAeI,WAAW6E,EAAAE,KAAA,GAE/CL,EAAea,SAASC,WAAWC,MAAK,KAAA,GAC9ChC,GAAgBgB,GAAKC,EAAelF,iBACnCnD,EAAQoI,GAAkB/E,IAAI,IAAID,WAAWgE,GAAgBgB,IAAK,GAAG,KAAA,GAnC1CA,IAAGI,EAAAE,KAAA,EAAA,MAAA,KAAA,GAAA,IAAA,MAAA,OAAAF,EAAAa,OAAA,GAAAC,QAqCtC9G,MAAAnN,KAAAsS,UAAA,CAGD,SAAS4B,GAAgCC,GAMrC,IAJA,IAAMC,EAAa,uEACfC,EAAOD,EAAWE,KAAKH,GAErBI,EAAc,IAAIrU,IACjBmU,GAAM,CACT,IAAMG,EAAcH,EAAK,GACnBI,EAAcJ,EAAK,GACzBE,EAAYvG,IAAIwG,EAAaC,GAC7BJ,EAAOD,EAAWE,KAAKH,EAC1B,CAKD,IAHA,IAAIO,EAAOP,EACLQ,EAAU,uEACZC,EAAKD,EAAQL,KAAKI,GACfE,GACHF,EAAOA,EAAKG,QAAQF,EAAO,iGAE3BC,EAAKD,EAAQL,KAAKI,GAoBtB,IAjBA,IAAMI,EAAgB,CAAC,UAAW,cAAe,aAAc,cACzDC,EAAgB,SAACP,EAAqBC,EAAqBO,GAS7D,OARAF,EAAcG,SAAQ,SAACC,GAGnB,IAFA,IAAMC,EAAmB,IAAIC,OAAUF,EAAU,cAAcV,EAAmB,SAC9Ea,EAAkBF,EAAiBb,KAAKU,GACrCK,GACHL,EAASA,EAAOH,QAAQQ,EAAgB,GAAOH,EAAqBT,WAAAA,MAAeD,EAAW,KAAKA,EAAwB,cAC3Ha,EAAkBF,EAAiBb,KAAKU,EAEhD,IACOA,CACV,EAEKM,EAAU,yCACZC,EAAWD,EAAQhB,KAAKI,GACtBc,EAAU,IAAIC,IACdC,EAAe,IAAIxV,IACRyV,EAAA,WACbD,EAAalN,QAEb,IAAMoN,EAASL,EAAS,GACpBM,EAAYD,EAAOrI,QACvB,GAAIqI,EAAOE,SAAS,WAAY,CAI5B,IAHA,IAAMC,EAAgB,IAAIN,IACpBO,EAAWJ,EAAOK,MAAM,KACxBC,EAAYF,EAAS3W,OAClBC,EAAI,EAAGA,EAAI4W,IAAa5W,EAAG,CAChC,IAAM6W,EAAYH,EAAS1W,GAAG2W,MAAM,KAC9BG,EAAWD,EAAUA,EAAU9W,OAAS,GAC9C,GAAI+W,EAASN,SAAS,YAA2B,YAAbM,EAAwB,CACxD,IAAM3B,EAAc2B,EAASvB,QAAQ,UAAW,IAC1CwB,EAAYF,EAAUA,EAAU9W,OAAS,GAC/CwW,EAAYA,EAAUhB,QAAQmB,EAAS1W,cAAemV,EAAW,IAAI4B,EAAS,aAAaA,EAAoB,YAC/GN,EAAcO,IAAIhX,GAClBoW,EAAa1H,IAAIqI,EAAW5B,EAC/B,CACJ,CAEDC,EAAOA,EAAKG,QAAQe,EAAQC,GAE5B,IAAMU,EAAWhB,EAAS,GAE1B,IAAKC,EAAQgB,IAAID,GAIb,IAHA,IACIE,EADEC,EAAiB,IAAItB,OAAUmB,EAAQ,yBAA0B,KAGtB,QAAzCE,EAAUC,EAAepC,KAAKI,KAClC,IAAK+B,EAAQ,GAAGE,MAAM,sBAAuB,CAMzC,IALA,IAAMC,EAAiD,MAAtCH,EAAQ,GAAGA,EAAQ,GAAGpX,OAAS,GAAaoX,EAAQ,GAAGlJ,MAAM,GAAI,GAAKkJ,EAAQ,GACzFb,EAASgB,EAASX,MAAM,KAC1BY,EAAS,EACTC,EAAa,EACXZ,EAAYN,EAAOvW,OAChBC,EAAI,EAAGA,EAAI4W,IAAa5W,EACzBsW,EAAOtW,GAAGwW,SAAS,QACjBe,EAEFjB,EAAOtW,GAAGwW,SAAS,QACjBe,EAGDA,GAAUvX,IAAM4W,EAAY,IACzBH,EAAcS,IAAIM,KAClBlB,EAAOtW,IAAE,KAASsW,EAAOtW,GAAY,cAEvCwX,GAGV,IAAMC,EAAYnB,EAAOoB,KAAK,KACxBC,EAAeR,EAAQ,GAAG5B,QAAQ+B,EAAUG,GAClDrC,EAAOA,EAAKG,QAAQ4B,EAAQ,GAAcQ,EAC7C,CAIT,IAAIC,EAAQ,EACRC,EAAazC,EAAK0C,QAAQ7B,EAAS,GAAIA,EAAS8B,OACpDF,EAAazC,EAAK0C,QAAQ,IAAKD,GAAc,EAE7C,IADA,IAAIG,EAAW,EACRJ,GAAO,CAOV,GANgC,MAA5BxC,EAAK6C,OAAOJ,KACVD,EACiC,MAA5BxC,EAAK6C,OAAOJ,MACjBD,EAGQ,IAAVA,EAAa,CACbI,EAAWH,EACX,KACH,CAED,IAAMK,EAAW9C,EAAK0C,QAAQ,IAAKD,EAAa,GAC1CM,EAAY/C,EAAK0C,QAAQ,IAAKD,EAAa,GACjDA,GAA2B,IAAdK,EAAkBC,EAAYC,KAAKC,IAAIH,EAAUC,EACjE,CACD,IAAMG,EAAWlD,EAAKnH,MAAMgI,EAAS8B,MAAOC,GACxCO,EAAUD,EACdlC,EAAaT,SAAQ,SAACxN,EAAMqQ,GACxBD,EAAU9C,EAAc+C,EAAMrQ,EAAMoQ,EACxC,IAEAnD,EAAOA,EAAKG,QAAQ+C,EAAUC,GAC9BrC,EAAQc,IAAIf,EAAS,GACxB,CACDA,EAAWD,EAAQhB,KAAKI,EAC3B,EAxFMa,GAAQI,IA0FfpB,EAAYU,SAAQ,SAACxN,EAAMqQ,GACvBpD,EAAOK,EAAc+C,EAAMrQ,EAAMiN,EACrC,IAKA,IAAIqD,EAAe,IAGC,IADDrD,EAAK0C,QAAQ,WAG5BW,GAAY,kJAKZrD,EAAOA,EAAKG,QAAQ,YAAa,YAIjB,IADDH,EAAK0C,QAAQ,WAG5BW,GAAY,mHAKZrD,EAAOA,EAAKG,QAAQ,YAAa,WAKrC,IAAImD,EAAoBtD,EAAK0C,QAAQ,aAKrC,OAJAY,EAAoBtD,EAAK0C,QAAQ,IAAKY,GACtCA,GAAqB,EACrBtD,EAAUA,EAAKnH,MAAM,EAAGyK,GAAkB,KAAKD,EAAiBrD,KAAAA,EAAKnH,MAAMyK,EAG/E,CAEA,SAASC,GAASC,GAEd,IADA,IAC4BC,EADtBC,EAA0B,GAChCC,EAAAC,EAAsBJ,KAAMC,EAAAE,KAAAE,MAKxB,IALwB,IAAjBC,EAAOL,EAAAM,MAGRC,EAAM,sCACRrE,EAAOqE,EAAIpE,KAAKkE,GACbnE,GAAM,CAGT,IAFA,IAAMrG,GAAOqG,EAAK,GACZsE,GAAWtE,EAAK,GACf+D,EAAY/Y,QAAU2O,GACzBoK,EAAYlL,KAAK,IAErBkL,EAAYpK,GAAKoK,EAAYpK,GAAK3O,QAAUsZ,EAC5CtE,EAAOqE,EAAIpE,KAAKkE,EACnB,CAEL,OAAOJ,CACX,CASA,IAAMQ,GAA+B,CACjCC,WAAY,KACZC,WAAY,KACZC,gBAAiB,KACjBC,eAAgB,KAChBC,SAAU,eAEEC,GAAWpN,EAAsBvL,EAAyB2H,EAAkBiR,GAAmB,IAAAC,EACrG9W,EAAS/B,EAAQmK,WAAYpI,OACjB/B,EAAQoM,UAC1B,IAAMZ,EAAeD,EAAOC,aAC5B,IAAK6M,GAAcC,WAAY,CAC3B,IAkCMQ,EAAmBtN,EAAauN,mBAAmB,CAAE5E,KAd1D,gnBAeK6E,EAAmBxN,EAAauN,mBAAmB,CAAE5E,KAF1D,mRAGDkE,GAAcC,WAAaQ,EAC3BT,GAAcE,WAAaS,EAE3B,IASMC,EAA6C,CAC/C9L,MAAO,oBACP+L,QAAS,CAXgC,CACzCd,QAAS,EACTe,WAAY1X,eAAeC,SAC3B5B,OAAQ,CACJoH,KAAM,UACNkS,kBAAkB,EAClBC,eAAgB,OAQlBb,EAAkBhN,EAAa8N,sBAAsBL,GAC3DZ,GAAcG,gBAAkBA,EAEhC,IAAMe,EAAkD,CACpDpM,MAAO,0BACPqM,iBAAkB,CAACnB,GAAcG,kBAG/BC,EAAiBjN,EAAaiO,qBAAqBF,GACzDlB,GAAcI,eAAiBA,EAE/B,IAAMiB,EAA8B,CAChCC,OAAQtB,GAAcC,WACtBsB,WAAY,QAQVC,EAAkC,CACpC9X,OAAAA,EACA+X,UAAW,IAGTC,EAA8B,CAChCJ,OAAQtB,GAAcE,WACtBqB,WAAY,OACZI,QAAS,CAACH,IAQRI,EAA4C,CAC9C9M,MAAO,oBACP+M,OAAQ7B,GAAcI,eACtB0B,OAAQT,EACRU,UAzBsC,CACtCC,SAAU,gBACVC,UAAW,MACXC,SAAU,QAuBVC,SAAUT,EACVU,YAZqC,CACrC9D,MAAO,EACP+D,wBAAwB,EACxBtU,KAAM,aAWJsS,EAAWlN,EAAamP,qBAAqBV,GACnD5B,GAAcK,SAAWA,CAC5B,CACD,IAAM/K,EAAoCnC,EAAaoC,uBACjDgN,EAAiC,CACnC7Y,OAAAA,EACA8Y,UAAW,KACXC,aAAc,EACdpL,cAAe,EACfqL,eAAgB,EAChBC,gBAAiB,EACjBC,OAAQ,OAENC,SAAUlb,EAAAA,EAAQmK,mBAAR0O,EAAoBsC,WAAWP,GACzCnP,EAAkC,CACpCE,MAAOG,eAAeC,QACtBjC,KAAM,GACNuD,kBAAkB,GAGhB+N,EAAgB5P,EAAavK,aAAawK,GAC1C4P,EAAqB,CAACzC,EAAMzG,EAAGyG,EAAMxG,EAAGwG,EAAM0C,EAAG1C,EAAMvG,GAEvDkJ,EAAeH,EAAc7N,eAAe,EAAG,IACzC,IAAIiO,aAAaD,GACzB9N,IAAI4N,GACRD,EAAc1N,QAEd,IAAM+N,EAA2B,CAC7BrD,QAAS,EACTsD,SAAU,CACN5b,OAAQsb,EACRvR,OAAQ,EACRC,KAAM,KAIR6R,EAAwC,CAC1CzB,OAAQ7B,GAAcG,gBACtBU,QAAS,CAACuC,IAERG,EAAYpQ,EAAaqQ,gBAAgBF,GAQzCG,EAAkC,CACpCC,iBAAkB,CARgC,CAClDC,KAAMd,EACNe,OAAQ,OACRC,QAAS,QACTC,WAAY,CAAC,IAAM,IAAM,IAAM,MAO7BC,EAAoBzO,EAAe0O,gBAAgBP,GACzDM,EAAkBE,YAAYjE,GAAcK,UAE5C0D,EAAkBG,aAAa,EAAGX,GAClCQ,EAAkBI,YAAY7U,EAAWwK,EAAGxK,EAAWyK,EAAGzK,EAAW4H,MAAO5H,EAAW6H,OAAQ,EAAK,GACpG4M,EAAkBK,eAAe9U,EAAWwK,EAAGxK,EAAWyK,EAAGzK,EAAW4H,MAAO5H,EAAW6H,QAC1F4M,EAAkBM,KAAK,EAAG,EAAG,EAAG,GAEhCN,EAAkBO,MAClB,IAAM7O,EAAgBH,EAAeI,SACrCvC,EAAawC,MAAMC,OAAO,CAACH,IAC3BsN,EAAc9O,SAClB,CAEA,SAASsQ,GAAgBvb,GACrB,GAAIA,EAAM6F,OAAS3F,EAAmBC,OAAtC,CAGA,IACMqb,EAAUxb,EAAMyb,OAAO1G,MADP,4BAEjByG,GAILA,EAAQnI,SAAQ,SAAC0B,GACb,IACM2G,EAAW3G,EAAMA,MADN,uBAEX4G,EAAWD,EAAS,GAAG/P,MAAM+P,EAAS,GAAGlG,QAAQ,KAAO,EAAGkG,EAAS,GAAGlG,QAAQ,MAAMoG,OAErFC,EAAU9G,EAAM9B,QADD,mBACuB,IAAI2I,OAC1CE,EAAc,IAAItI,OAAM,gCAAiCqI,EAAyC,mCAClGE,EAAY,IAAIvI,4BAA4BqI,EAAO,WAAY,KAE/DG,EADYhc,EAAMyb,OAAO1G,MAAMgH,GACL,GAC1BE,EAAmBD,EAAcrQ,MAAM,EAAGqQ,EAAcxG,QAAQ,MAAMoG,OACtEM,EAAkB,IAAI1I,iBAAiByI,EAAgB,UAAW,KAClEE,EAAenc,EAAMyb,OAAO1G,MAAMmH,GAExC,IADmBC,EAAeA,EAAa1e,OAAS,IACtC,EAAG,CACjBuC,EAAMyb,OAASzb,EAAMyb,OAAOxI,QAAQ6I,EAAa,IACjD9b,EAAMyb,OAASzb,EAAMyb,OAAOxI,QAAQ8I,EAAW,IAC/C,IAAMK,EAAa,IAAI5I,OAAM,oBAAqByI,EAAgD,iCAClGjc,EAAMyb,OAASzb,EAAMyb,OAAOxI,QAAQmJ,EAAY,GACnD,MACGpc,EAAMqc,MAAMjQ,IAAIkQ,SAASX,GAAWE,EAG5C,GA9BC,CA+BL,CAEM,SAAUU,GAA8BrS,EAAsBsS,GAMhE,IALA,IAAMrS,EAAeD,EAAOC,aACtBtM,EAAUqM,EAAOrM,QACjBE,EAAQmM,EAAOnM,MACf0e,EAAsB,GACtBC,EAAYF,EAAUG,UAAUlf,OACFmf,EAAA,WAChCH,EAAUhf,OAAS,EACnB,IAAMof,EAAWL,EAAUG,UAAUjf,GAC/Bof,EAAaxK,GAA+BuK,EAASpB,QACrDsB,EAAWF,EAAShX,OAAS3F,EAAmBC,OAAS,SACzD0c,EAAShX,OAAS3F,EAAmBG,SAAW,WAAa,UAC7D2c,0CAAqDF,EACrDG,EAAMpf,EAAQqf,YAAYF,EAAYD,GAAU,EAAO,OAEzDzG,EAAevY,EAAMof,kBAAkBF,GAC9B,KAAT3G,GACA5R,EAAM,cAEVmY,EAASpB,OAASnF,EAClBiF,GAAesB,GACfvG,EAAOuG,EAASpB,OAChB,IAAM2B,QAA0BjT,SAAAA,EAAcuN,mBAAmB,CAAE5E,KAAMwD,IAEzE8G,EAAOC,qBAAqBC,MAAK,SAACC,GAC9BA,EAAYC,SAASnK,SAAQ,SAACoK,GAC1BC,EAAIV,EAAY1G,EAAMmH,EAAKE,QAASF,EAAKG,QAASH,EAAK5X,KAAM4X,EAAKI,QACtE,GAEJ,IAAE,OAAO,SAACN,GACNA,EAAYC,SAASnK,SAAQ,SAACoK,GAC1BC,EAAIV,EAAY1G,EAAMmH,EAAKE,QAASF,EAAKG,QAASH,EAAK5X,KAAM4X,EAAKI,QACtE,GACJ,IACA,IAAMC,EAAoC,CACtCxF,OAAQ8E,EACR7E,WAAY,QAEhBsE,EAASL,UAAYsB,EACrBrB,EAAUnR,KAAKgL,GACf,IAAME,EAAcH,GAAQoG,GAC5BI,EAASkB,SAAWvH,EAEpB,IADA,IAAMwH,EAAkBxH,EAAY/Y,OAC3BwgB,EAAI,EAAGA,EAAID,EAAiBC,IAAK,CACtC,IAAMC,EAAkB1H,EAAYyH,GAAGxgB,OACvC,GAAIygB,EAAiB,CACZ1B,EAAUuB,SAASnJ,IAAIqJ,IACxBzB,EAAUuB,SAAS3R,IAAI6R,EAAG,IAG9B,IADA,IAAMF,EAAWvB,EAAUuB,SAAS/gB,IAAIihB,GAC/BE,EAAI,EAAGA,EAAID,EAAiBC,IAC5BJ,EAAS7J,SAASsC,EAAYyH,GAAGE,KAClCJ,EAASzS,KAAKkL,EAAYyH,GAAGE,GAGxC,CACJ,CACJ,EAnDQzgB,EAAI,EAAGA,EAAIgf,IAAahf,EAACkf,GAoDtC,CAQM,SAAUwB,GAAkClU,EAAsBhD,GACpE,IAAMmX,EAAWnX,EAAkBoX,WAAW7gB,OAC9CyJ,EAAkBqX,WAAa,IAAIlT,MAAqBgT,GAIxD,IAFA,IAAMG,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE7B9gB,EAAI,EAAGA,EAAI2gB,IAAY3gB,EAAG,CAC/B,IAAM+gB,EAASvX,EAAkBoX,WAAW5gB,GAEtCghB,OAA2B5gB,IAAlB2gB,EAAOC,OAAuBD,EAAOC,OAAS,EAEvDnW,EAAYrB,EAAkByX,iBAAiBD,GAG/CjW,EAAOmW,EAAYH,EAAO/d,QAAQ+H,KAExCvB,EAAkBqX,WAAW7gB,GAAK,CAC9BwY,KAAMuI,EAAOvI,KACb3N,UAAWA,EAAUA,UACrBsW,QANY,EAOZpW,KAAAA,EACA6M,MAAOsJ,EAAYH,EAAO/d,QAAQ4U,MAClCwJ,OAAQvW,EAAUuW,OAClBC,eAAgB,EAChBC,kBAAuClhB,IAAxB2gB,EAAOO,cAA6BP,EAAOO,aAC1DC,iBAAqCnhB,IAAvB2gB,EAAOQ,aAA4BR,EAAOQ,YACxDzW,OAAQgW,EAAQE,IAGpBF,EAAQE,IAAWjW,CACtB,CACL,CAwBM,SAAUyW,GACZhV,EACAiV,EACArW,EACAE,GAKA,IAFA,IAAMmB,EAAeD,EAAOC,aACtB+G,EAAalI,EAAQvL,OAClBC,EAAI,EAAGA,EAAIwT,EAAYxT,IAAK,CACjC,IAAM2T,EAASrI,EAAQtL,GACjB0hB,EAASD,EAAUzhB,GACzByM,EAAawC,MAAM0S,2BACf,CAAE5D,OAAQ2D,GACV,CACIzgB,QAASmK,EAAWA,WACpBwF,SAAU+C,EAAOiO,UAAUhR,SAC3BwD,OAAQ,CACJhB,EAAGO,EAAOM,UAAUb,EACpBC,EAAGM,EAAOM,UAAUZ,EACpBkJ,EAAG5I,EAAOiO,UAAU5F,iBAG5B,CAAC1Q,EAAQtL,GAAGkU,UAAU1D,MAAOlF,EAAQtL,GAAGkU,UAAUzD,OAAQnF,EAAQtL,GAAGkU,UAAU2N,OAEtF,CACGzW,EAAW0W,MAAQC,EAAeC,YAClCC,GAAUzV,EAAQpB,EAAY,EAAGA,EAAWwF,SAAW,EAAG,EAElE,CAEA,IAwLIsR,GAxLEC,GAA8D,CAChE,QACA,qBACA,OACA,QAGEC,GAAgE,CAClE,KACA,KACA,KACA,KACA,KACA,WACA,KACA,WACA,KACA,OACA,aACA,MAGEC,GAAoF,CACtF,YACA,YACA,aACA,cAGE,SAAUC,GAA4BC,GACxC,IAAMlJ,EAAUkJ,EAASlJ,QAEnBmJ,EAAgBngB,GAAsBkgB,EAASE,YAC/CC,EAAoC,GACpChG,EAAiC,CACnCrD,QAAAA,EACAe,WAAYoI,GAEhBE,EAAO9U,KAAK8O,GACZ,IAAMlQ,EAASxN,GAAoBE,SAC/ByjB,EAA+C,KAC/CxN,EAAcgN,GAAoCI,EAASK,YAC3C,UAAhBzN,GAA4B3I,EAAOqW,kBAAmB1N,EAAc,sBACxE,IAAM2N,EAAgC,uBAAhB3N,EAChB4N,EAAgBX,GAAmCG,EAASQ,eAC5D5a,EAAOoa,EAASS,eAChBC,EAAeV,EAASQ,cAAgB,GAAKR,EAASQ,cAAgB,EAC5E,OAAQ5a,GACR,KAAK+a,EAAeC,eACpB,KAAKD,EAAeE,uBAChB1G,EAAM3b,OAAS,CACXoH,KAAM,UACNkS,iBAAkBlS,IAAS+a,EAAeE,uBAC1C9I,oBAAgBla,GAEpB,MAEJ,KAAK8iB,EAAeG,eACpB,KAAKH,EAAeI,uBAChB5G,EAAM3b,OAAS,CACXoH,KAAM,UACNkS,iBAAkBlS,IAAS+a,EAAeI,uBAC1ChJ,oBAAgBla,GAEpB,MAEJ,KAAK8iB,EAAeK,gBAEhB7G,EAAMzb,QAAU,CACZ2hB,WAAYzN,EACZ4N,cAAAA,EACAE,aAAAA,IAEJN,EAAe,CACXtJ,QAASA,EA7nB0B,GA8nBnCe,WAAYoI,IAEHrhB,QAAU,CACnBgH,KAAM2a,EAAgB,gBAAkB,aAE5CJ,EAAO9U,KAAK+U,GACZ,MAEJ,KAAKO,EAAeM,QAChB9G,EAAMvb,QAAU,CACZgH,KAAM2a,EAAgB,gBAAkB,aAE5C,MAEJ,KAAKI,EAAeO,QAChB/G,EAAMzb,QAAU,CACZ2hB,WAAYzN,EACZ4N,cAAAA,EACAE,aAAAA,GAEJ,MAEJ,KAAKC,EAAeQ,cAChBhH,EAAMiH,eAAiB,CACnBC,OAAQvB,GAAyCE,EAASqB,QAC1D5gB,OAAQqD,GAAsBkc,EAASvf,QACvC+f,cAAAA,GAEJ,MAEJ,KAAKG,EAAeW,iBAChBnH,EAAMzb,QAAU,CACZ2hB,WAAYzN,EACZ4N,cAAAA,EACAE,aAAAA,GAEJ,MAEJ,QACI,MAAM,IAAIngB,MAAsCqF,gCAAAA,GAEpD,OAAOua,CACX,UAEgBoB,GAAwB9gB,GAEpC,OAAQA,GACR,KAAKC,EAAO+B,GACZ,KAAK/B,EAAOgC,KACZ,KAAKhC,EAAOI,IACZ,KAAKJ,EAAOkB,MACZ,KAAKlB,EAAOiB,MACZ,KAAKjB,EAAOK,MACZ,KAAKL,EAAOmB,SACZ,KAAKnB,EAAOsC,QACZ,KAAKtC,EAAOuB,QACR,MAAO,QACX,KAAKvB,EAAOiC,KACZ,KAAKjC,EAAOoC,MACZ,KAAKpC,EAAOM,MACZ,KAAKN,EAAOE,MACZ,KAAKF,EAAOS,OACZ,KAAKT,EAAOqB,QACZ,KAAKrB,EAAOY,OACZ,KAAKZ,EAAO2B,SACZ,KAAK3B,EAAOwB,SACZ,KAAKxB,EAAOwC,cACR,MAAO,OACX,KAAKxC,EAAOkC,IACZ,KAAKlC,EAAOmC,KACZ,KAAKnC,EAAOO,KACZ,KAAKP,EAAOU,MACZ,KAAKV,EAAOsB,OACZ,KAAKtB,EAAOa,MACZ,KAAKb,EAAOyB,QACZ,KAAKzB,EAAO4B,QACZ,KAAK5B,EAAOG,KACR,MAAO,OACX,KAAKH,EAAOqC,KACZ,KAAKrC,EAAOC,KACZ,KAAKD,EAAOQ,MACZ,KAAKR,EAAO8gB,WACZ,KAAK9gB,EAAOW,MACZ,KAAKX,EAAO0B,QACR,MAAO,qBACX,KAAK1B,EAAOuC,MACR,MAAO,QACX,QAEI,OADAV,EAAK,iGACE,QAEf,UAEgBkf,GAAwBhhB,GACpC,OAAIA,IAAWC,EAAOwC,cACX,qBAEJqe,GAAuB9gB,EAClC,CAaA,SAASif,GAAWzV,EAAsBvL,EAAyBgjB,EAAmBC,EAAoBC,GACtG,IAAMnhB,EAAS/B,EAAQqO,UACLrO,EAAQoM,UAC1B,IAAMZ,EAAeD,EAAOC,aAC5B,IAAKyV,GAAY,EACbA,GAAa,CAAS,GAsDX/gB,QAAUsL,EAAa8F,cAXQ,CAC1CT,MAAoB,gBACpBA,aAA2B,gBAC3BA,aAA2B,gBAC3BA,aAA2B,gBAC3BA,UAAwB,SACxBA,UAAwB,SACxBA,aAA2B,SAC3BA,YAA0B,EAC1BA,YAA0B,GAC1BA,cAA4B,IAG5B,IAAMsS,EAAkC3X,EAAauN,mBAAmB,CACpE5E,KAzBH,kgCA2BD8M,GAAW3I,WAAa6K,EACxB,IAAMC,EAAkC5X,EAAauN,mBAAmB,CACpE5E,KApBH,uTAsBD8M,GAAW1I,WAAa6K,EAExB,IAkBMnK,EAA6C,CAC/C9L,MAAO,iCACP+L,QAAS,CApBiC,CAC1Cd,QAAS,EACTe,WAAY1X,eAAeC,SAC3BxB,QAAS,CACLgH,KAAM,cAIgC,CAC1CkR,QAAS,EACTe,WAAY1X,eAAeC,SAC3B1B,QAAS,CACL2hB,WAAYkB,GAAuB7iB,EAAQ+B,QAC3C+f,cAAe,KACfE,cAAc,MAShBxJ,EAAkBhN,EAAa8N,sBAAsBL,GAC3DgI,GAAWzI,gBAAkBA,EAE7B,IAAMe,EAAkD,CACpDpM,MAAO,uCACPqM,iBAAkB,CAAChB,IAGjBC,EAAiBjN,EAAaiO,qBAAqBF,GACzD0H,GAAWxI,eAAiBA,EAE5B,IAYMoB,EAAkC,CACpC9X,OAAAA,EACA+X,UAAW,IAeTG,EAA4C,CAC9C9M,MAAO,iCACP+M,OAAQzB,EACR0B,OAhCgC,CAChCR,OAAQsH,GAAW3I,WACnBsB,WAAY,YACZxP,QAAS,IA8BTgQ,UA3BsC,CACtCC,SAAU,gBACVC,UAAW,MACXC,SAAU,QAyBVC,SAjBgC,CAChCb,OAAQsH,GAAW1I,WACnBqB,WAAY,YACZI,QAAS,CAACH,IAeVY,YAZqC,CACrC9D,MAAO,EACP+D,wBAAwB,EACxBtU,KAAM,aAWJsS,EAAWlN,EAAamP,qBAAqBV,GACnDgH,GAAWvI,SAAWA,CACzB,CAcD,IAZA,IAAMkC,EAAiC,CACnC7Y,OAAAA,EACA8Y,UAAW,KACXC,aAAckI,EACdtT,cAAe,EACfqL,eAAgBmI,EAChBlI,gBAAiB,EACjBC,OAAQ,OAGNtN,EAAoCnC,EAAaoC,uBAE9C7O,EAAIikB,EAAWjkB,EAAIikB,EAAYC,IAAclkB,EAAG,CACrD6b,EAAKE,aAAe/b,EAAI,EACxB,IAAMskB,EAA0BrjB,EAAQmK,WAAYgR,WAAWP,GAC/DA,EAAKE,aAAe/b,EACpB6b,EAAKG,eAAiBmI,EACtBtI,EAAKI,gBAAkB,EACvB,IAAME,EAA0Blb,EAAQmK,WAAYgR,WAAWP,GAEzD1B,EAA+B,CACjC,CACId,QAAS,EACTsD,SAAUuF,GAAW/gB,SAEzB,CACIkY,QAAS,EACTsD,SAAU2H,IAIZ1H,EAAwC,CAC1CzB,OAAQ+G,GAAWzI,gBACnBU,QAAAA,GAGE0C,EAA0BpQ,EAAaqQ,gBAAgBF,GASvDG,EAAkC,CACpCC,iBAAkB,CARgC,CAClDC,KAAMd,EACNe,OAAQ,QACRC,QAAS,QACTC,WAAY,CAAC,IAAM,IAAM,IAAM,MAO7BC,EAA0CzO,EAAe0O,gBAAgBP,GAC/EM,EAAkBE,YAAY2E,GAAWvI,UACzC0D,EAAkBG,aAAa,EAAGX,GAClCQ,EAAkBM,KAAK,EAAG,EAAG,EAAG,GAChCN,EAAkBO,KACrB,CAED,IAAM7O,EAAgBH,EAAeI,SACrCvC,EAAawC,MAAMC,OAAO,CAACH,GAC/B,CAEM,SAAUwV,GACZ/X,EACAnB,EACAD,EACAE,GAMA,IAJA,IAAMmB,EAAeD,EAAOC,aACtB+X,EAAYpZ,EAAWpI,OACvByhB,EAAYC,EAAgBF,GAC5BhR,EAAalI,EAAQvL,OAClBC,EAAI,EAAGA,EAAIwT,IAAcxT,EAAG,CACjC,IAAM2T,EAASrI,EAAQtL,GACjB2kB,EAAmBhR,EAAOiR,WAAa,EAAIjR,EAAOiR,WAAajR,EAAOO,UAAU1D,MAChFqU,EAAoBlR,EAAOmR,cAAgB,EAAInR,EAAOmR,cAAgBnR,EAAOO,UAAUzD,OACzEsU,EAAWP,EAAW7Q,EAAOO,UAAU1D,MAAO,EAAG,GAYrE,IAXA,IAAMwU,EAAoBD,EAAWP,EAAWG,EAAkB,EAAG,GAC/DM,EAA2BF,EAAWP,EAAWG,EAAkBE,EAAmB,GACtFK,EAA2BH,EAAWP,EAAWG,EAAkBE,EAAmBlR,EAAOO,UAAU2N,OACvGsD,EAAyC,IAA3BxR,EAAOO,UAAU1D,MAAc,EAAI4U,EAAQzR,EAAOO,UAAU1D,MAAOiU,EAAUjU,OAC3F6U,EAA2C,IAA5B1R,EAAOO,UAAUzD,OAAe,EAAI2U,EAAQzR,EAAOO,UAAUzD,OAAQgU,EAAUhU,QAC9F6U,EAAoC,CACtCxa,OAAQ,EACRuJ,YAAa2Q,EACb1Q,aAAcuQ,GAEZU,EAAiBZ,IAAqBhR,EAAOO,UAAU1D,MACpDgV,EAAI7R,EAAOiO,UAAU5F,eAAgBwJ,EAAI7R,EAAOiO,UAAU6D,WAAa9R,EAAOiO,UAAU5F,eAAgBwJ,IAAK,CAClH,IAAK,IAAIE,EAAI/R,EAAOM,UAAUsI,EAAGmJ,EAAI/R,EAAOO,UAAU2N,MAAQlO,EAAOM,UAAUsI,EAAGmJ,IAC9E,GAAIH,EAAgB,CAChB,IACIxkB,EADE4kB,EAAiDta,EAAQrL,GAG3De,EADA,WAAY4kB,EACH,IAAIlX,WAAWkX,EAAY5kB,OAAQ4kB,EAAYC,WAAYD,EAAYzX,YAEvE,IAAIO,WAAWkX,GAE5B,IAAME,EAAU,IAAIpX,WAAW1N,EAAQA,EAAO6kB,WACxCjS,EAAOmS,YACNN,EAAI7R,EAAOiO,UAAU5F,gBAAkBkJ,GACvCQ,EAAI/R,EAAOM,UAAUsI,GAAK0I,GAC3Bc,EAAa,CACf9kB,QAASmK,EAAWA,WACpBwF,SAAU+C,EAAOiO,UAAUhR,SAC3BwD,OAAQ,CACJhB,EAAGO,EAAOM,UAAUb,EACpBC,EAAGM,EAAOM,UAAUZ,EACpBkJ,EAAGiJ,IAGX/Y,EAAawC,MAAM+W,aAAaD,EAAYF,EAASP,EAAe,CAACH,EAAaE,EAAc1R,EAAOO,UAAU2N,OACpH,MACG,IAAK,IAAItO,EAAII,EAAOM,UAAUZ,EAAGE,EAAII,EAAOO,UAAUzD,OAASkD,EAAOM,UAAUZ,EAAGE,GAAKkR,EAAUhU,OAAQ,CACtG,IAAMoV,EAAU,IAAIpX,WAAWpD,EAAQrL,GAAGe,OAAQsK,EAAQrL,GAAG4lB,WACvDjS,EAAOmS,YAAcN,EAAI7R,EAAOiO,UAAU5F,gBAAkBkJ,IAC1DQ,EAAI/R,EAAOM,UAAUsI,GAAK0I,GAC3B1R,EAAII,EAAOM,UAAUZ,GAAKoR,EAAUhU,OAASuU,IAC9Ce,EAAa,CACf9kB,QAASmK,EAAWA,WACpBwF,SAAU+C,EAAOiO,UAAUhR,SAC3BwD,OAAQ,CACJhB,EAAGO,EAAOM,UAAUb,EACpBC,EAAGE,EACHgJ,EAAGiJ,IAGX/Y,EAAawC,MAAM+W,aAAaD,EAAYF,EAASP,EAAe,CAACH,EAAaV,EAAUhU,OAAQkD,EAAOO,UAAU2N,OACxH,CAGLzW,EAAW0W,MAAQC,EAAeC,YAClCC,GAAUzV,EAAQpB,EAAY,EAAGA,EAAWwF,SAAW,EAAG,EAEjE,CACJ,CACL,CC5vDA,IC6CIqV,GD7CSC,GAAoB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAA1d,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAOS,OAPT9d,EAAA2d,EAAAI,KAAA1Y,MAAAsY,EAAA,CAAAzlB,MAAA8lB,OAAAH,KAAA3lB,MAKrB+lB,kBAAoD,KAAIje,EACxDke,kBAAoD,IAAI9lB,IAAgC4H,EACxFme,gBAA4B,GAAEne,CAAA,CAPTS,EAAAid,EAAAC,GAOS,IAAAS,EAAAV,EAAA5kB,UAQrC,OARqCslB,EAU/BC,WAAP,SAAmB9G,GACf,IACyD5E,GAD1Cza,KAAKomB,QAAU/G,EAAK5E,QAC6B4L,uBAAxD1G,IAAAA,SAAU2G,IAAAA,kBAAmBC,IAAAA,gBAErCvmB,KAAKwmB,SAAWvZ,MAAMsZ,GAAiBE,KAAK,MAC5CzmB,KAAK0mB,UAAYzZ,MAAMsZ,GAAiBE,KAAK,MAC7CzmB,KAAK2mB,UAAY1Z,MAAMsZ,GAAiBE,KAAK,MAE7C,IAAMG,EAAyC,GAG/C5mB,KAAK+lB,kBAAoB,CAAEa,eAAAA,EAAgBN,kBAAAA,EAAmBnK,UAF5C,KAEuDpD,gBADjD,MAGxB,IADA,IAAM8N,EAAclH,EAAStgB,OACpBC,EAAI,EAAGA,EAAIunB,IAAevnB,EAG/B,IAFA,IAAMqZ,EAAUgH,EAASrgB,GACnBwnB,EAAYnO,EAAQzB,MACjB6P,EAAI,EAAGA,EAAID,EAAWC,IAC3BH,EAAe1Z,KAAK,CAChBzF,KAAMkR,EAAQ2J,eACdnY,UAAW,KACXO,WAAY,KACZ8F,WAAY,MAI3B,EAAA0V,EAEMrZ,QAAP,WACI7M,KAAKomB,QAAU,KACfpmB,KAAK+lB,kBAAoB,KACzB/lB,KAAKwmB,SAASnnB,OAAS,EACvBW,KAAK0mB,UAAUrnB,OAAS,EACxBW,KAAK2mB,UAAUtnB,OAAS,EACxBW,KAAKgmB,kBAAkBxd,OAC1B,EAAA0d,EAEOc,iBAAR,SAA0BC,EAAkC5mB,GACxD,IAAM6mB,EAAWlnB,KAAK+lB,kBAAmBa,eAAeK,EAAKtO,SACzDuO,IACAA,EAAS/c,UAAY9J,EAAO8J,WAEhC,IAAMgd,EAAe9mB,EAAO8J,UAAUA,UAChCid,EAAkC,CACpCzO,QAASsO,EAAKtO,QACdsD,SAAU,CACN5b,OAAQ8mB,EACR/c,OAAQ/J,EAAO8J,UAAUkd,UACzBhd,KAAMhK,EAAO8J,UAAUE,OAG/BrK,KAAKgmB,kBAAkBhY,IAAIoZ,EAAazO,QAASyO,GACjD/mB,EAAOinB,aACV,EAAApB,EAEOqB,kBAAR,SAA2BN,EAAkC1mB,GACzDP,KAAK+lB,kBAAmBa,eAAeK,EAAKtO,SAASjO,WAAanK,EAAQmK,WAC1E,IAAM8c,EAAgBjnB,EAAQknB,uBACxBL,EAAkC,CACpCzO,QAASsO,EAAKtO,QACdsD,SAAUuL,GAEdxnB,KAAKgmB,kBAAkBhY,IAAIoZ,EAAazO,QAASyO,GACjD7mB,EAAQ+mB,aACX,EAAApB,EAEOwB,kBAAR,SAA2BT,EAAkCxmB,GACzD,IAAMknB,EAAaV,EAAKtO,QDqqBe,GCpqBvC3Y,KAAK+lB,kBAAmBa,eAAeK,EAAKtO,SAASnI,WAAa/P,EAAQ+P,WAC1E,IAAM1E,EAASxN,GAAoBE,SAC7BopB,EAAe5nB,KAAK0mB,UAAUO,EAAKtO,UAAY7M,EAAO+b,gBAAgBtnB,QACtEijB,EAAaoE,EAAYpE,WACzBsE,EAAYF,EAAYtlB,QAC2B,uBAAtCghB,GAAuBwE,IACA,UAAtCxE,GAAuBwE,KAA2Bhc,EAAOqW,mBAEzD1hB,EAAQ+P,WAAWC,UAAYC,EAAOqX,MACtCtnB,EAAQ+P,WAAWK,UAAYH,EAAOqX,MACtCtnB,EAAQ+P,WAAWO,UAAYL,EAAOqX,OAE1C,IACMC,EAAyC,CAC3CrP,QAASgP,EACT1L,SAHmBxb,EAAQwnB,iBAAiBzE,IAKhDxjB,KAAKgmB,kBAAkBhY,IAAI2Z,EAAYK,GACvCvnB,EAAQ6mB,aACX,EAAApB,EAEOgC,gBAAR,WACI,GAAIloB,KAAKmoB,UAAYnoB,KAAK+lB,kBAAmB,CACzC,IAAMtL,EAASza,KAAKomB,QACpBpmB,KAAKgmB,kBAAkBxd,QACvBxI,KAAKimB,gBAAgB5mB,OAAS,EAK9B,IAJA,IAAM+oB,EAAcpoB,KAAK+lB,kBAAkBa,eACrCjH,EAAWlF,EAAO4L,uBAAwB1G,SAC1C0I,EAAY1I,EAAStgB,OACrByM,EAASxN,GAAoBE,SAC1Bc,EAAI,EAAGA,EAAI+oB,IAAa/oB,EAAG,CAChC,IAAMqZ,EAAUgH,EAASrgB,GACnBgpB,EAAU3P,EAAQA,QAClB4P,EAAWH,EAAY9oB,GAAGmI,KAChC,GAAI8gB,EAAWC,EAAwB,CACnC,IAAMC,EAAgB3c,EAAO+b,gBAAgBxnB,OACzCA,EAAUL,KAAKwmB,SAASlnB,IAAMmpB,EAC9BpoB,IAAWooB,GACPF,EAAWG,IACfroB,EAAUyL,EAAO+b,gBAAgBhnB,iBAAiBynB,IAEtDtoB,KAAKgnB,iBAAiBrO,EAAStY,GAC3BkoB,GAAY/F,EAAeI,uBAAyBJ,EAAeE,yBACnE1iB,KAAKimB,gBAAgB/Y,KAAKob,EAEjC,MAAM,GAAIC,EAAWI,EAAyB,CAC3C,IAAKJ,EAAW/F,EAAeM,WAAaN,EAAeM,QAAS,CAEhE,IAAI8F,EAAU5oB,KAAK0mB,UAAUpnB,KAExBspB,GAAYA,EAAQC,YAAcD,EAAQle,cAEvCke,EADAjQ,EAAQ0J,gBAAkByG,EAAcC,QAC9Bjd,EAAO+b,gBAAgBrnB,YAEvBsL,EAAO+b,gBAAgBtnB,SAGzCP,KAAKunB,kBAAkB5O,EAASiQ,EACnC,CAED,IAAOL,EAAW/F,EAAeQ,iBAAmBR,EAAeQ,gBAC3DuF,EAAW/F,EAAeW,oBAAsBX,EAAeW,mBAC/DoF,EAAW/F,EAAeO,WAAaP,EAAeO,QAAU,CAEpE,IAAMiG,EAAehpB,KAAK2mB,UAAUrnB,IAAMwM,EAAO+b,gBAAgBpnB,QACjET,KAAK0nB,kBAAkB/O,EAASqQ,EACnC,CACJ,CACJ,CACDhpB,KAAKmoB,UAAW,EAChBnoB,KAAKipB,kBACR,CACJ,EAAA/C,EAEOgD,mBAAR,SAA4BjN,GACxB,SAAIA,IAAYA,EAAS4M,UAI5B,EAAA3C,EAEOiD,kBAAR,WAAqC,IAAAxgB,EAAA3I,KAC3Bya,EAASza,KAAKomB,QACpB,QAAK3L,GAGEA,EAAO4L,uBAAwB1G,SAASyJ,MAAK,SAACnC,GACjD,IAAMtO,EAAUsO,EAAKtO,QACfsD,EAAWtT,EAAK6d,SAAS7N,IAA4BhQ,EAAK+d,UAAU/N,IAAYhQ,EAAKge,UAAUhO,GACrG,OAAOhQ,EAAKugB,mBAAmBjN,EACnC,GACH,EAAAiK,EAEMmD,QAAP,SAAgBC,QAAc,IAAdA,IAAAA,GAAiB,IACRtpB,KAAKmpB,sBAAwBG,IAElDtpB,KAAKmoB,UAAW,EAChBnoB,KAAKkoB,kBACR,EAAAhC,EAEO+C,iBAAR,WACI,IACMld,EADSzN,GAAoBE,SACPuN,aACtB0O,EAASza,KAAKomB,QACdjK,QAAYpQ,SAAAA,EAAcqQ,gBAAgB,CAC5C3B,OAAQA,EAAO4L,uBAAwBtN,gBACvCU,QAASzZ,KAAKgmB,kBAAkBuD,WAEpCvpB,KAAK+lB,kBAAmBhN,gBAAkB0B,EAAO4L,uBAAwBtN,gBACzE/Y,KAAK+lB,kBAAmB5J,UAAYA,CACvC,EAAA+J,EAEMsD,OAAP,WACIxpB,KAAKkoB,iBACR,EAAAxpB,EAAA8mB,EAAA,CAAA,CAAA7mB,IAAA,mBAAAC,IArMD,WACI,OAAOoB,KAAK+lB,iBAChB,GAAC,CAAApnB,IAAA,iBAAAC,IAMD,WACI,OAAOoB,KAAKimB,eAChB,GAAC,CAAAtnB,IAAA,qBAAAC,IAED,WACI,OAAOoB,KAAKimB,gBAAgB5mB,MAChC,KAACmmB,CAAA,CAf4B,CAAQiE,GEA5BC,GAAa,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAA5hB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAOa,OAPb9d,EAAA6hB,EAAA9D,KAAA1Y,MAAAwc,EAAA,CAAA3pB,MAAA8lB,OAAAH,KAAA3lB,MAKd4pB,WAAmC,KAAI9hB,EACvC+hB,gBAAyC,KAAI/hB,EAC7CgiB,YAAsB,EAAKhiB,CAAA,CAPbS,EAAAmhB,EAAAC,GAOa,IAAAzD,EAAAwD,EAAA9oB,UAGlC,OAHkCslB,EAI5BoB,YAAP,WACItnB,KAAK8pB,YAAa,CACrB,EAAA5D,EACMC,WAAP,SAAmB9G,GACf,GAAI,WAAYA,EAAM,CAGlBrf,KAAK+pB,eAAgB,EAErB,IAAM1pB,EAASgf,EAAKhf,OAEpBL,KAAKgqB,OAAS3pB,EAAO6L,MACrBlM,KAAKiqB,UAAY5pB,EAAO6pB,SACxBlqB,KAAKmqB,MAAQnqB,KAAKoqB,QAAwC,EAA9B1S,KAAK2S,KAAKhL,EAAKiL,MAAQ,GACnDtqB,KAAKuqB,OAAS,EACdvqB,KAAKwqB,OAASnqB,EAAO+gB,MAErBphB,KAAK4pB,WAAa,CACd1d,MAAOlM,KAAKgqB,OACZE,SAAUlqB,KAAKiqB,UACf5f,KAAMrK,KAAKmqB,MACXzJ,OAAQ1gB,KAAKoqB,QACb/pB,OAAQ,KACR2M,UAAW3M,EAAO8J,UAAU6C,UAC5BL,UAAWtM,EAAO8J,UAAUwC,UAC5BxC,UAAW9J,EAAO8J,UAAUA,UAC5Bkd,UAAWhI,EAAKjV,OAChBgX,MAAOphB,KAAKwqB,OACZC,qBAAqB,EAE5B,KAAM,CACHzqB,KAAKgqB,OAAS3K,EAAKnT,MACnBlM,KAAKiqB,UAAY5K,EAAK6K,SACtBlqB,KAAKmqB,MAAqC,EAA7BzS,KAAK2S,KAAKhL,EAAKhV,KAAO,GACnCrK,KAAKoqB,QAAU1S,KAAKgT,IAAIrL,EAAKqB,QAAU1gB,KAAKmqB,MAAO,GACnDnqB,KAAKuqB,OAASvqB,KAAKmqB,MAAQnqB,KAAKoqB,QAChCpqB,KAAKwqB,OAASnL,EAAK+B,MAEfphB,KAAKgqB,OAAS/oB,EAAesL,WAC7BvM,KAAK6pB,gBAAkB,IAAIc,GAG/B3qB,KAAK4pB,WAAa,CACd1d,MAAOlM,KAAKgqB,OACZE,SAAUlqB,KAAKiqB,UACf5f,KAAMrK,KAAKmqB,MACXzJ,OAAQ1gB,KAAKoqB,QACb/pB,OAAQ,KACR2M,UAAW,GACXL,UAAW,EACXyU,MAAOphB,KAAKwqB,OACZrgB,UAAW,KACXkd,UAAW,EACXoD,qBAAqB,GAGrBpL,EAAKnT,MAAQjL,EAAesL,WAC5BvM,KAAK4pB,WAAW5c,UAAYhN,KAAK6pB,gBAAiBzc,WAEtD,IAAMtB,EAASxN,GAAoBE,SACnCqN,GAA0BC,EAAQ9L,KAAK4pB,YAEvC9d,EAAO8e,aAAaC,YAAc7qB,KAAKmqB,KAC1C,CACJ,EAAAjE,EAEMrZ,QAAP,WACI,GAAI7M,KAAK4pB,WAAY,CACjB,IAAK5pB,KAAK+pB,cAAe,CACrB,IAAMje,EAASxN,GAAoBE,SACnCoO,GAA2Bd,EAAQ9L,KAAK4pB,YACxC9d,EAAO8e,aAAaC,YAAc7qB,KAAKmqB,KAC1C,CACDnqB,KAAK8pB,YAAa,EAClB9pB,KAAK4pB,WAAa,IACrB,CACJ,EAAA1D,EAEM4E,OAAP,SAAezgB,GACX,GAAIrK,KAAK+pB,cACLgB,EAAO,WADX,CAKA,IAAMC,EAAUhrB,KAAKmqB,MACrB,GAAIa,IAAY3gB,IAEhBrK,KAAKmqB,MAAQ9f,EACbrK,KAAKuqB,OAASvqB,KAAKmqB,MAAQnqB,KAAKoqB,QAChCpqB,KAAK8pB,YAAa,EACd9pB,KAAK4pB,aACL5pB,KAAK4pB,WAAWvf,KAAOrK,KAAKmqB,MACxBnqB,KAAKmqB,MAAQ,IAAG,CAChB,IAAMre,EAASxN,GAAoBE,SACnCsO,GAA0BhB,EAAQ9L,KAAK4pB,YACvC9d,EAAO8e,aAAaC,YAAcG,EAClClf,EAAO8e,aAAaC,YAAc7qB,KAAKmqB,KAC1C,CAfJ,CAiBJ,EAAAjE,EAEMsD,OAAP,SAAenpB,EAAsBgK,GAMjC,IAAI4gB,EALAjrB,KAAK+pB,cACLgB,EAAO,QAMPE,OADSvrB,IAAT2K,EACWA,EACJrK,KAAKgqB,OAAS/oB,EAAesL,SACzB,EAEClM,EAAuBmN,WAGvCyd,EAAuC,EAA5BvT,KAAK2S,KAAKY,EAAW,GAC5BjrB,KAAKqK,KAAO4gB,GACZjrB,KAAK8qB,OAAOG,GAEhBjrB,KAAK8pB,YAAa,EAGlB/c,GAFezO,GAAoBE,SAI/BwB,KAAK4pB,WACLvpB,EACA,EACA4qB,GAEP,EAAAvsB,EAAAgrB,EAAA,CAAA,CAAA/qB,IAAA,YAAAC,IA5ID,WACI,OAAOoB,KAAK4pB,UAChB,GAAC,CAAAjrB,IAAA,YAAAC,IAKD,WACI,OAAOoB,KAAK8pB,UAChB,KAACJ,CAAA,CAVqB,CAAQwB,GC0D9BC,GAAgD,KAC9CC,GAAwC,GACxCC,GAAsB,CAAC,EAAG,EAAG,GAC7BC,GAAsB,GACfC,GAAoB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAzjB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAuCwD,OAvCxD9d,EAAA0jB,EAAA3F,KAAA1Y,MAAAqe,EAAA,CAAAxrB,MAAA8lB,OAAAH,KAAA3lB,MActByrB,WAA+B,IAAI5gB,GAAkB/C,EAClD4jB,iBAAkD,KAAI5jB,EACtD6jB,iBAAkB,EAAK7jB,EACvB8jB,qBAAuD,KAAI9jB,EAC3D+jB,wBAAsD,KAAI/jB,EAC1DgkB,sBAAmD,GAAEhkB,EACrDikB,sBAAyD,KAAIjkB,EAC7DkkB,mBAAiC,GAAElkB,EACnCmkB,aAAgC,KAAInkB,EACpCokB,YAA2B,KAAIpkB,EAC/BqkB,cAA+B,KAAIrkB,EACnCskB,cAAyC,KAAItkB,EAC7CukB,mBAA+B,GAAEvkB,EACjCwkB,gBAA6C,KAAIxkB,EACjDykB,qBAAuD,KAAIzkB,EAC3D0kB,uBAA2D,KAAI1kB,EAC/D2kB,eAAgB,EAAK3kB,EACrB4kB,mBAA4C,GAAE5kB,EAEhD6kB,qBAAgD,KAAI7kB,EACpD8kB,cAAuCltB,EAASoI,EAChD+kB,mBAA6BC,EAAOhlB,EACpCilB,gBAAkD,KAAIjlB,EACtDklB,qBAAe,EAAAllB,EAEfmlB,qBAA2E,GAAEnlB,CAAA,CAvCxDS,EAAAgjB,EAAAC,GAuCwD,IAAAtF,EAAAqF,EAAA3qB,UAwkBpF,OAxkBoFslB,EAtC9EgH,gBAAP,WAOI,MAAM,IAAI9qB,MAAM,0BACnB,EAAA8jB,EACMiH,YAAP,WACI,MAAM,IAAI/qB,MAAM,0BACnB,EAAA8jB,EA6BMC,WAAP,SAAmB9G,GACfrf,KAAKotB,MAAQ/N,EAAK5X,KAClBzH,KAAKqtB,OAAShO,EAAK9Q,MACnB,IAAMzC,EAASxN,GAAoBE,SACnCwB,KAAK0rB,iBAAmB5f,EAAOwhB,aAC/BttB,KAAK4sB,SAAW,CAAoB,EAGpC,IADA,IAAMW,EAAWzhB,EAAO0hB,gBAAgBC,aAAapuB,OAC5CC,EAAI,EAAGA,EAAIiuB,EAAUjuB,IAC1BU,KAAK8rB,sBAAsB5e,KAAK,MAChClN,KAAKgsB,mBAAmB9e,KAAK,IAGjC,OAAO,CACV,EAAAgZ,EAEMrZ,QAAP,WACQ7M,KAAK0rB,mBACL1rB,KAAK0rB,iBAAiBrgB,UAAUrL,KAAKyrB,YACrCzrB,KAAK0rB,iBAAmB,KAE/B,EAAAxF,EAEMwH,MAAP,WACI1tB,KAAK0rB,iBAAkBrgB,UAAUrL,KAAKyrB,YACtCH,GAAYjsB,OAAS,EACrBW,KAAK4rB,qBAAuB,KAC5B5rB,KAAK+rB,sBAAwB,KAC7B/rB,KAAK8rB,sBAAsBzsB,OAAS,EAEpC,IADA,IAAMsuB,EAAoB3tB,KAAKgsB,mBAAmB3sB,OACzCC,EAAI,EAAGA,EAAIquB,EAAmBruB,IACnCU,KAAKgsB,mBAAmB1sB,GAAGD,OAAS,EAExCW,KAAKisB,aAAe,KACpBjsB,KAAKksB,YAAc,KACnBlsB,KAAKmsB,cAAgB,KACrBnsB,KAAKosB,cAAgB,KACrBpsB,KAAKqsB,mBAAmBhtB,OAAS,EACjCW,KAAKssB,gBAAkB,KACvBtsB,KAAKusB,qBAAuB,KAC5BvsB,KAAKwsB,uBAAyB,KAC9BxsB,KAAK4tB,cAAgB,EACrB5tB,KAAK6tB,cAAgB,EACrB7tB,KAAK8tB,SAAW,CACnB,EAAA5H,EAEMhJ,IAAP,WACIld,KAAKysB,eAAgB,EACrBzsB,KAAK2rB,iBAAkB,CAC1B,EAAAzF,EAEMtJ,gBAAP,SACImR,EACAC,EACA9lB,EACAE,EACAC,EACAC,GACG,IAAA2lB,EACGniB,EAASxN,GAAoBE,SAC7B0vB,EAAYpiB,EAClB9L,KAAKgtB,gBAAkBe,EACvB/tB,KAAK+sB,gBAAkB/sB,KAAKgtB,gBAAgBhlB,cAAcmmB,iBAC1D,IAAMC,EAAapuB,KAAKgtB,gBAAgBhlB,cAAcomB,WAChDnmB,EAAkB+lB,EAAkC/lB,eAC1DqjB,GAAYpe,KAAKhF,GAUjB,IATA,IAAImmB,GAAmB,EACjBC,EAAsBrmB,EAAesmB,iBAAiBC,OAAM,SAACvvB,GAC/D,OAAqB,IAAjBiJ,EAAWwK,GAA4B,IAAjBxK,EAAWyK,GAAWzK,EAAW4H,QAAU7Q,EAAI6Q,OAAS5H,EAAW6H,SAAW9Q,EAAI8Q,MAIhH,IACM0e,EAAYP,EAAUQ,gBAAgB,GACtCC,EAAiBvmB,EAAY/I,OAC1BC,EAAI,EAAGA,EAAIqvB,EAAgBrvB,IAAK,CACrC,IAAMsvB,EAAW3mB,EAAe4mB,YAAc5mB,EAAesmB,iBAAiBjvB,GAAGwvB,iBAC3EL,EAAUM,oBAChBH,EAAUlhB,MAAQzF,EAAe4mB,YAAc,YAAc,YACxDP,IACDD,EAA6D,UAA1CD,EAAW9R,iBAAiBhd,GAAGkd,OAC9C8O,GAAYjsB,OAAS,IACrBW,KAAK+sB,gBAAgBzQ,iBAAiBhd,GAAGkd,OAAS,SAG1Dxc,KAAK+sB,gBAAgBzQ,iBAAiBhd,GAAGid,KAAOqS,EAChD5uB,KAAK+sB,gBAAgBzQ,iBAAiBhd,GAAGod,WAAa,CAACtU,EAAY9I,GAAGoT,EAAGtK,EAAY9I,GAAGqT,EAAGvK,EAAY9I,GAAGuc,EAAGzT,EAAY9I,GAAGsT,EAC/H,CAED,IAA+C,OAAvCqb,EAAAjuB,KAACgtB,gBAAgBgC,6BAAsB,EAA3Cf,EAA6C3rB,UAAWC,EAAO0sB,QAAS,CAAA,IAAAC,EAClEC,EAA2C,OAArClnB,EAAAA,EAAemnB,6BAAsB,EAArCF,EAAuCxkB,WAC7C2kB,EAAWF,EAAMA,EAAIzT,aAAe+S,EAAUa,2BAC9CN,EAAyBhvB,KAAK+sB,gBAAgBiC,uBACpDA,EAAuBzS,KAAO8S,EAC9BL,EAAuBO,gBAAkBlnB,EACzC2mB,EAAuBQ,kBAAoBlnB,CAC9C,CAgBD,GAdAJ,EAAWwK,EAAIgF,KAAK+X,MAAMvnB,EAAWwK,GACrCxK,EAAWyK,EAAI+E,KAAK+X,MAAMvnB,EAAWyK,GACrCzK,EAAW4H,MAAQ4H,KAAK+X,MAAMvnB,EAAW4H,OACzC5H,EAAW6H,OAAS2H,KAAK+X,MAAMvnB,EAAW6H,QAQ1C/P,KAAKitB,qBAAqB/f,MAPX,SAACwiB,GACZA,EAAY3S,YAAY7U,EAAWwK,EAAGxK,EAAWyK,EAAGzK,EAAW4H,MAAO5H,EAAW6H,OAAQ,EAAK,EACjG,IAMD/P,KAAKitB,qBAAqB/f,MALX,SAACwiB,GACZA,EAAY1S,eAAe9U,EAAWwK,EAAGxK,EAAWyK,EAAGzK,EAAW4H,MAAO5H,EAAW6H,OACvF,KAKIue,GAAuBD,EAAkB,CAC1C,IAAIvtB,EAAM,EACVmH,EAAesmB,iBAAiBtZ,SAAQ,SAACka,GACrCjW,GAAUpN,EAAQqjB,EAAKjnB,EAAYE,EAAYtH,IAC/CA,GACJ,GACH,CAEDd,KAAK2rB,iBAAkB,CAC1B,EAAAzF,EAEMyJ,cAAP,WACI,IACM5jB,EADSzN,GAAoBE,SACLuN,aACxB6jB,EAAa7jB,EAAaoC,uBAC1BuhB,EAAcE,EAAWhT,gBAAgB5c,KAAK+sB,iBACpD/sB,KAAKitB,qBAAqBhY,SAAQ,SAAC4a,GAC/BA,EAAGH,EACP,IAEAA,EAAYxS,MACZnR,MAAAA,GAAAA,EAAcwC,MAAMC,OAAO,CAACohB,EAAWthB,WAEvC,IADA,IACiE6J,EAD7DrX,EAAM,EACVuX,EAAAC,EAAyBtY,KAAK+sB,gBAAiBzQ,oBAAkBnE,EAAAE,KAAAE,MAA5CJ,EAAAM,MACL+D,OAASxc,KAAKgtB,gBAAgBhlB,cAAcomB,WAAY9R,iBAAiBxb,GAAK0b,OAC1F1b,IAEJd,KAAK2rB,iBAAkB,EACvB3rB,KAAKysB,eAAgB,EACrBzsB,KAAKitB,qBAAqB5tB,OAAS,CACtC,EAAA6mB,EAEM4J,kBAAP,SAA0BC,GACtB,IAAMC,EAAuBD,EACvBlnB,EAAmBmnB,EAAoBnnB,iBACzCA,IAAqB7I,KAAK4rB,uBAC1B5rB,KAAK6rB,wBAA0BmE,EAC/BhwB,KAAK4rB,qBAAuB/iB,EAC5BsiB,GAAoB6E,EACpBhwB,KAAKysB,eAAgB,EAE5B,EAAAvG,EAEM+J,kBAAP,SAA0BjiB,EAAakiB,EAA8BlnB,GACjE,IAAMD,EAAqBmnB,EAAiDC,iBAM5E,GALIpnB,IAAsB/I,KAAK8rB,sBAAsB9d,KACjDhO,KAAK8rB,sBAAsB9d,GAAOjF,EAClCqiB,GAAepd,GAAOkiB,EACtBlwB,KAAKysB,eAAgB,GAErBzjB,GAAkBA,EAAe3J,OAAQ,CAGzC,IAFA,IAAM+gB,EAAUpgB,KAAKgsB,mBAAmBhe,GAClC2f,EAAoB3kB,EAAe3J,OAChCC,EAAI,EAAGA,EAAIquB,EAAmBruB,IAAK8gB,EAAQ9gB,GAAK0J,EAAe1J,GACxE8gB,EAAQ/gB,OAASsuB,EACjB3tB,KAAKysB,eAAgB,CACxB,CACJ,EAAAvG,EAEMkK,mBAAP,SAA2BC,GACvB,IAAMvnB,EAAqBunB,EAAmDvnB,kBAC9E9I,KAAK+rB,sBAAwBjjB,EAC7B9I,KAAKysB,eAAgB,CACxB,EAAAvG,EAEMnJ,YAAP,SAAoB9T,GAChBA,EAASqnB,KAAO5Y,KAAK+X,MAAMxmB,EAASqnB,MACpCrnB,EAASsnB,IAAM7Y,KAAK+X,MAAMxmB,EAASsnB,KACnCtnB,EAAS6G,MAAQ4H,KAAK+X,MAAMxmB,EAAS6G,OACrC7G,EAAS8G,OAAS2H,KAAK+X,MAAMxmB,EAAS8G,QACtC9G,EAASunB,SAAW9Y,KAAK+X,MAAMxmB,EAASunB,UACxCvnB,EAASwnB,SAAW/Y,KAAK+X,MAAMxmB,EAASwnB,UACxCzwB,KAAKisB,aAAe,IAAIyE,EAASznB,EAASqnB,KAAMrnB,EAASsnB,IAAKtnB,EAAS6G,MAAO7G,EAAS8G,OAAQ9G,EAASunB,SAAUvnB,EAASwnB,UAW3HzwB,KAAKitB,qBAAqB/f,MAVX,SAACwiB,GACZA,EAAY3S,YACR9T,EAASqnB,KACTrnB,EAASsnB,IACTtnB,EAAS6G,MACT7G,EAAS8G,OACT9G,EAASunB,SACTvnB,EAASwnB,SAEhB,IAEDzwB,KAAKysB,eAAgB,CACxB,EAAAvG,EAEMyK,WAAP,SAAmBznB,GACfA,EAAQwJ,EAAIgF,KAAK+X,MAAMvmB,EAAQwJ,GAC/BxJ,EAAQyJ,EAAI+E,KAAK+X,MAAMvmB,EAAQyJ,GAC/BzJ,EAAQ4G,MAAQ4H,KAAK+X,MAAMvmB,EAAQ4G,OACnC5G,EAAQ6G,OAAS2H,KAAK+X,MAAMvmB,EAAQ6G,QAIpC/P,KAAKitB,qBAAqB/f,MAHX,SAACwiB,GACZA,EAAY1S,eAAe9T,EAAQwJ,EAAGxJ,EAAQyJ,EAAGzJ,EAAQ4G,MAAO5G,EAAQ6G,OAC3E,IAED/P,KAAKysB,eAAgB,CACxB,EAAAvG,EAEM0K,aAAP,WACItqB,EAAM,qCACT,EAAA4f,EAEM2K,aAAP,SAAqBC,EAAiCC,EAAwBC,GACrEhxB,KAAKosB,cAOCpsB,KAAKosB,cAAc6E,iBAAmBH,GAC1C9wB,KAAKosB,cAAc8E,QAAUH,GAC7B/wB,KAAKosB,cAAc+E,cAAgBH,IACtChxB,KAAKosB,cAAc6E,eAAiBH,EACpC9wB,KAAKosB,cAAc8E,MAAQH,EAC3B/wB,KAAKosB,cAAc+E,YAAcH,EACjChxB,KAAKysB,eAAgB,IAZrBzsB,KAAKosB,cAAgB,CACjB6E,eAAgBH,EAChBI,MAAOH,EACPI,YAAaH,GAEjBhxB,KAAKysB,eAAgB,EAS5B,EAAAvG,EAEMkL,kBAAP,SAA0B/nB,GAElBrJ,KAAKqsB,mBAAmB,KAAOhjB,EAAeqJ,GAC3C1S,KAAKqsB,mBAAmB,KAAOhjB,EAAesJ,GAC9C3S,KAAKqsB,mBAAmB,KAAOhjB,EAAewS,GAC9C7b,KAAKqsB,mBAAmB,KAAOhjB,EAAeuJ,IACjD5S,KAAKqsB,mBAAmBhtB,OAAS,EACjC4N,MAAMrM,UAAUsM,KAAKC,MAAMnN,KAAKqsB,mBAAoB,CAAChjB,EAAeqJ,EAAGrJ,EAAesJ,EAAGtJ,EAAewS,EAAGxS,EAAeuJ,IAC1H5S,KAAKysB,eAAgB,EAE5B,EAAAvG,EAEMmL,cAAP,SAAsBC,EAAwBC,GACrCvxB,KAAKssB,iBAMCtsB,KAAKssB,gBAAgBkF,YAAcF,GACvCtxB,KAAKssB,gBAAgBmF,YAAcF,IANtCvxB,KAAKssB,gBAAkB,CACnBkF,UAAWF,EACXG,UAAWF,GAEfvxB,KAAKysB,eAAgB,EAS5B,EAAAvG,EAEMwL,oBAAP,SAA4BC,EAAmBtX,GACtCra,KAAKusB,qBAMCvsB,KAAKusB,qBAAqBoF,OAASA,GACvC3xB,KAAKusB,qBAAqBlS,YAAcA,IAC3Cra,KAAKusB,qBAAqBoF,KAAOA,EACjC3xB,KAAKusB,qBAAqBlS,UAAYA,EACtCra,KAAKysB,eAAgB,IATrBzsB,KAAKusB,qBAAuB,CACxBoF,KAAAA,EACAtX,UAAAA,GAEJra,KAAKysB,eAAgB,EAO5B,EAAAvG,EAEM0L,sBAAP,SAA8BD,EAAmBE,EAAmBC,GAC3D9xB,KAAKwsB,uBAOCxsB,KAAKwsB,uBAAuBmF,OAASA,GACzC3xB,KAAKwsB,uBAAuBqF,YAAcA,GAC1C7xB,KAAKwsB,uBAAuBsF,cAAgBA,IAC/C9xB,KAAKwsB,uBAAuBmF,KAAOA,EACnC3xB,KAAKwsB,uBAAuBqF,UAAYA,EACxC7xB,KAAKwsB,uBAAuBsF,YAAcA,EAC1C9xB,KAAKysB,eAAgB,IAZrBzsB,KAAKwsB,uBAAyB,CAC1BmF,KAAAA,EACAE,UAAAA,EACAC,YAAAA,GAEJ9xB,KAAKysB,eAAgB,EAS5B,EAAAvG,EAEMjJ,KAAP,SAAaoT,GACT,IAAMvkB,EAASxN,GAAoBE,SACnC,GAAIwB,KAAKotB,QAAU2E,EAAkBC,SAAYhyB,KAAK2rB,gBAAtD,CAII3rB,KAAKysB,eACLzsB,KAAKiyB,aAGT,IAAMC,EAAK7B,EACL8B,EAASD,EAAGppB,kBAEZiD,EAAeD,EAErB,GAAIomB,EAAGE,eAAgB,CACnB,IAAMA,EAAiBD,EAAOE,kBAC9B,GAAItmB,EAAaumB,8BAEV,CAAA,IAAAC,EACGC,EAAgB,SAAAL,EAAOE,wBAAP,EAAAE,EAA0BvlB,UAAU3N,OACtD+yB,EAAe3H,oBAOfzqB,KAAKitB,qBAAqB/f,MANT,SAACwiB,GAEd,IADA,IAAM+C,EAAeC,OAAOC,KAAK7oB,GAAUzK,OAClCC,EAAI,EAAGA,EAAIkzB,EAAelzB,UAC/BowB,GAAAA,EAAakD,oBAAoBR,EAAejoB,UAAYioB,EAAe/K,UAAY/nB,EAAImzB,EAElG,IAUDzyB,KAAKitB,qBAAqB/f,MANT,SAACwiB,GAEd,IADA,IAAM+C,EAAeC,OAAOC,KAAK7oB,GAAUzK,OAClCC,EAAI,EAAGA,EAAIkzB,EAAelzB,UAC/BowB,GAAAA,EAAamD,aAAaT,EAAejoB,UAAYioB,EAAe/K,UAAY/nB,EAAImzB,EAE3F,GAGR,CACJ,OACyBpC,EAAeyC,cAAgB,IAAIzC,EAAeyC,cACpDzC,EAAe0C,aAAgBb,EAAGc,WAAa,EAO/DhzB,KAAKitB,qBAAqB/f,MAJT,SAACwiB,GACd,IAAMoD,EAAgBpb,KAAKgT,IAAIwH,EAAGY,cAAe,GACtC,MAAXpD,GAAAA,EAAauD,YAAYf,EAAGc,WAAYF,EAAeZ,EAAGgB,WAAYhB,EAAGiB,YAAajB,EAAGkB,cAC5F,IAODpzB,KAAKitB,qBAAqB/f,MAJT,SAACwiB,GACd,IAAMoD,EAAgBpb,KAAKgT,IAAIwH,EAAGY,cAAe,SACjDpD,GAAAA,EAAazS,KAAKiV,EAAGmB,YAAaP,EAAeZ,EAAGiB,YAAajB,EAAGkB,cACvE,MAKPpzB,KAAK4tB,cACP5tB,KAAK6tB,eAAiBwC,EAAeyC,cACrC,IAAME,EAAa3C,EAAe2C,YAAc3C,EAAegD,YAC/D,GAAIrzB,KAAK4rB,qBAEL,OADqB5rB,KAAK4rB,qBAAqB0H,cAE/C,IAAK,iBACDtzB,KAAK8tB,WAAakF,EAAa,GAAKtb,KAAKgT,IAAI2F,EAAeyC,cAAe,GAC3E,MACJ,IAAK,gBACD9yB,KAAK8tB,UAAYkF,EAAa,EAAItb,KAAKgT,IAAI2F,EAAeyC,cAAe,GAhEhF,MAFGS,EAAQ,MAyEf,EAAArN,EAEMsN,aAAP,SAAqBnzB,EAAgBozB,EAAoBrpB,EAAiBC,GACtE,GAAIrK,KAAKotB,QAAU2E,EAAkBC,SAAWhyB,KAAK2rB,gBACjD4H,EAAQ,WADZ,CAIA,IAAMppB,EAAa9J,EAAmC8J,UACtD,GAAKA,EAAL,CAGYnK,KAAK0rB,iBAAkB/f,oBAAoB+nB,MAAM3pB,IAE7D,IAAIuD,EAIAjN,EAAO6L,MAAQjL,EAAesL,eAGjB7M,IAAT2K,GAGYopB,EAAqBjmB,WALrCF,EAAOmmB,EASX,IACM1nB,EADSzN,GAAoBE,SACLuN,mBAC9BA,GAAAA,EAAcwC,MAAMolB,YAAYxpB,EAAUA,UAAYA,EAAUkd,UAAW/Z,EAnB1E,CAJA,CAwBJ,EAAA4Y,EAEM0N,qBAAP,SAA6BjpB,EAA4BpK,EAAkBqK,GACvE,GAAI5K,KAAKotB,QAAU2E,EAAkBC,SAAWhyB,KAAK2rB,gBACjD4H,EAAQ,WADZ,CAIA,IAAM7oB,EAAcnK,EAA0BmK,WAC9C,GAAKA,EAAL,CAGA,IAAMmpB,EAAM7zB,KAAK0rB,iBAAkB9f,2BAA2B8nB,MAAMppB,IACpEupB,EAAInpB,WAAaA,EACjBmpB,EAAIjpB,QAAUA,EACdipB,EAAIlpB,QAAUA,EAEd3K,KAAKyrB,WAAWrgB,wBAAwB8B,KAAK2mB,GAC7C7zB,KAAKyrB,WAAW3gB,KAAKoC,KAAK5F,GAAUmD,uBAPnC,CAJA,CAYJ,EAAAyb,EAEM4N,QAAP,SAAgBC,EAA2B7c,GACvC,IAAK,IAAI5X,EAAI,EAAGA,EAAI4X,IAAS5X,EAAG,CAI5B,IAHA,IAAM00B,EAAgBD,EAASz0B,GACzBmsB,EAAauI,EAAcvI,WAC3BwI,EAAWxI,EAAWzgB,oBAAoB3L,OACvC60B,EAAI,EAAGA,EAAID,IAAYC,EAAG,CAC/B,IAAML,EAAMpI,EAAWzgB,oBAAoBmpB,MAAMD,KAC/CL,EAAIlsB,SACN3H,KAAKyrB,WAAWzgB,oBAAoBkC,KAAK2mB,EAC5C,CAGD,IAFA,IAAM5oB,EAAiBwgB,EAAWxgB,eAC5BmpB,EAAgBnpB,EAAe5L,OAC5B60B,EAAI,EAAGA,EAAIE,IAAiBF,EAAG,CACpC,IAAML,EAAM5oB,EAAekpB,MAAMD,KAC/BL,EAAIlsB,SACN3H,KAAKyrB,WAAWxgB,eAAeiC,KAAK2mB,EACvC,CAGD,IAFA,IAAM3oB,EAAWugB,EAAWvgB,SACtBmpB,EAAenpB,EAAS7L,OACrB60B,EAAI,EAAGA,EAAIG,IAAgBH,EAAG,CACnC,IAAML,EAAM3oB,EAASipB,MAAMD,KACzBL,EAAIlsB,SACN3H,KAAKyrB,WAAWvgB,SAASgC,KAAK2mB,EACjC,CAED,IADA,IAAMS,EAAuB7I,EAAWtgB,iBAAiB9L,OAChD60B,EAAI,EAAGA,EAAII,IAAwBJ,EAAG,CAC3C,IAAML,EAAMpI,EAAWtgB,iBAAiBgpB,MAAMD,KAC5CL,EAAIlsB,SACN3H,KAAKyrB,WAAWtgB,iBAAiB+B,KAAK2mB,EACzC,CAED,IADA,IAAMU,EAAwB9I,EAAWrgB,wBAAwB/L,OACxD60B,EAAI,EAAGA,EAAIK,IAAyBL,EAAG,CAC5C,IAAML,EAAMpI,EAAWrgB,wBAAwB+oB,MAAMD,KACnDL,EAAIlsB,SACN3H,KAAKyrB,WAAWrgB,wBAAwB8B,KAAK2mB,EAChD,CAED7zB,KAAKyrB,WAAW3gB,KAAKgb,OAAO2F,EAAW3gB,KAAKqpB,OAE5Cn0B,KAAK4tB,eAAiBoG,EAAcpG,cACpC5tB,KAAK6tB,eAAiBmG,EAAcnG,cACpC7tB,KAAK8tB,UAAYkG,EAAclG,QAClC,CACJ,EAAA5H,EAES+L,WAAV,WAA6B,IAAAuC,EAAAC,EAAA9rB,EAAA3I,KACzB,GAAKA,KAAK4rB,qBAAV,CAG0B5rB,KAAK4rB,qBAAqB8I,kBAGpD,IAFA,IAAMC,EAAkC,OAArBH,EAAIrJ,SAAiB,EAAjBqJ,EAAmBxb,eACpClN,EAASxN,GAAoBE,SAC1Bc,EAAI,EAAGA,EAAI+rB,GAAUhsB,OAAQC,IAAK,CACvC,IAAMs1B,EAAavJ,GAAU/rB,GACvBu1B,EAAWzJ,GAAewJ,GAChC,GAAIC,GAAYA,EAAS1E,iBACrB0E,EAASxL,cACN,CACH,IAAMyL,EAAaH,EAAcI,WAAWH,GACtCI,EAAiB,IAAIC,EAAkBH,GACvCI,EAAappB,EAAOqpB,oBAAoBH,GAC9C5J,GAAewJ,GAAcM,EAC7BA,EAAW7L,SAAQ,EACtB,CACJ,CACDrpB,KAAK6rB,wBAAyBxC,QAAQrpB,KAAK+rB,uBAE3C,IAAMqJ,EAAep1B,KAAK4rB,qBAAqByJ,eAK/C,GADAr1B,KAAKitB,qBAAqB/f,MAHV,SAACwiB,GACbA,EAAY7S,YAAYuY,EAC3B,IAEG,OAAAX,EAAAz0B,KAAK4rB,qBAAqBmE,gBAA1B0E,EAAyCa,aAAc,CACvD,IAAMC,EAAav1B,KAAK4rB,qBAAqB2J,WAI7Cv1B,KAAKitB,qBAAqB/f,MAHH,SAACwiB,GACpBA,EAAY8F,oBAAoBD,EACnC,GAEJ,CAID,IAHA,IAAME,EAAkBpK,GAAUhsB,OAC5Bq2B,EAAiB,IAAIzoB,MAAoBwoB,GACzCE,EAAiB,IAAI1oB,MAAgBwoB,GAClCn2B,EAAI,EAAGA,EAAIm2B,EAAiBn2B,IAAK,CACtC,IAAMs1B,EAAavJ,GAAU/rB,GACvBs2B,EAAUxK,GAAewJ,GACzBiB,EAAaD,EAAQzF,iBAG3B,GAFAuF,EAAed,GAAciB,EAAW1Z,UACxCwZ,EAAef,GAAkB,GAAA9O,OAAA9lB,KAAKgsB,mBAAmB4I,IACpDgB,EAAQE,oBAEN,GAAIF,GAAWA,EAAQE,qBAAuBH,EAAef,GAAYv1B,OAAQ,CACpFs2B,EAAef,GAAYv1B,OAASu2B,EAAQE,mBAC5C,IAAK,IAAI/O,EAAI,EAAGA,EAAI6O,EAAQE,mBAAoB/O,IAAK,CACjD,IAAMgP,EAAaJ,EAAef,GAAY7N,GAC9C,GAAKgP,EAEE,CACH,IAAMlU,EAAW+T,EAAQ5sB,eAAe+d,GAClCiP,EAAUJ,EAAQzF,iBAAiBvJ,eAAe/E,GACpDmU,GAAWA,EAAQ7rB,WAAa4rB,EAAaC,EAAQ7rB,UAAUA,UAAWE,OAC1EsrB,EAAef,GAAY7N,GAAK,EAEvC,MAPG4O,EAAef,GAAY7N,GAAK,CAQvC,CACJ,OAfG4O,EAAef,GAAc,EAgBpC,CAaD50B,KAAKitB,qBAAqB/f,MAXX,SAACwiB,GAEZ,IADA,IAAMuG,EAAmBP,EAAer2B,OAC/BC,EAAI,EAAGA,EAAI22B,EAAkB32B,IAAK,CACvC,IAAI42B,EAAgBR,EAAep2B,GAC9B42B,IACDA,EAAiBpqB,EAAO+b,gBAAgBlnB,QAAgCwvB,iBAAiBhU,WAG7FuT,EAAY5S,aAAaxd,EAAG42B,EAAeP,EAAer2B,GAC7D,CACJ,IAOD,IAHA,IAAM4yB,EAAKlyB,KAAK+rB,sBACVoK,EAAoB,IAAIlpB,MAA2DilB,EAAG3R,iBAAiBlhB,QACvG+2B,EAAkBlE,EAAG3R,iBAAiBlhB,OACnCC,EAAI,EAAGA,EAAI82B,EAAiB92B,IACjC62B,EAAkB72B,GAAK,CAAE+2B,KAAM/2B,EAAGe,OAAQ6xB,EAAG3R,iBAAiBjhB,GAAG6K,UAAYC,OAAQ8nB,EAAG3R,iBAAiBjhB,GAAG+nB,WAShH,GADArnB,KAAKitB,qBAAqB/f,MANX,SAACwiB,GAEZ,IADA,IAAM4G,EAAeH,EAAkB92B,OAC9BC,EAAI,EAAGA,EAAIg3B,EAAch3B,IAC9BowB,EAAY6G,gBAAgBJ,EAAkB72B,GAAG+2B,KAAMF,EAAkB72B,GAAGe,OAAQ81B,EAAkB72B,GAAG8K,OAEhH,IAEG8nB,EAAGsE,eAAgB,CACnB,IAAMC,EAAkG,CACpGC,UAAWxE,EAAGyE,aACdt2B,OAAQ6xB,EAAGsE,eAAersB,UAC1BC,OAAQ8nB,EAAGsE,eAAenP,UAC1Bhd,KAAM6nB,EAAGsE,eAAensB,MAU5BrK,KAAKitB,qBAAqB/f,MARX,SAACwiB,GACZA,EAAYkH,eACRH,EAAgBp2B,OAChBo2B,EAAgBC,UAChBD,EAAgBrsB,OAChBqsB,EAAgBpsB,KAEvB,GAEJ,CAQGrK,KAAKqsB,mBAAmBhtB,QAAQW,KAAKitB,qBAAqB/f,MAP/C,SAACwiB,GACZA,EAAYmH,iBAAiB,CAACluB,EAAK0jB,mBAAmB,GAClD1jB,EAAK0jB,mBAAmB,GACxB1jB,EAAK0jB,mBAAmB,GACxB1jB,EAAK0jB,mBAAmB,IAC/B,IAIDrsB,KAAKysB,eAAgB,CAhHpB,CAiHJ,EAAAlB,CAAA,CA/mB4B,CAAQuL,GC3E5BC,GAAkB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAjvB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAKiC,OALjC9d,EAAAkvB,EAAAnR,KAAA1Y,MAAA6pB,EAAA,CAAAh3B,MAAA8lB,OAAAH,KAAA3lB,MAKnBi3B,gBAAgD,KAAInvB,CAAA,CALjCS,EAAAwuB,EAAAC,GAKiC,IAAA9Q,EAAA6Q,EAAAn2B,UAF3D,OAE2DslB,EACrDC,WAAP,SAAmB9G,GACfrf,KAAKk3B,YAAc7X,EAAK0O,WACxB/tB,KAAKm3B,eAAiB9X,EAAK+X,eAAiB,GAC5Cp3B,KAAKq3B,qBAAuBhY,EAAKiY,qBAAuB,KAKxD,IAHA,IAAM/I,EAAqC,GACvCM,GAAc,EACZ0I,EAAelY,EAAK+X,cAAc/3B,OAC/BC,EAAI,EAAGA,EAAIi4B,EAAcj4B,IAAK,CACnC,IAAMk4B,EAAenY,EAAK+X,cAAc93B,GACxC,GAAIk4B,EAAc,CACd,IAAMC,EAASD,EAAa9sB,WAC5B6jB,EAAiBrhB,KAAKuqB,GAClBA,EAAOC,qBACP7I,GAAc,EAErB,CACJ,CAED,IAAIO,EAAgD,KAChD/P,EAAKiY,sBACLlI,EAA0B/P,EAAKiY,oBAAsC5sB,YAEzE,IAAIoF,EAAQF,OAAO+nB,iBACf5nB,EAASH,OAAO+nB,iBACpB33B,KAAKi3B,gBAAkB,CACnBjvB,cAAgBqX,EAAK0O,WAAgC/lB,cACrDumB,iBAAAA,EACAa,uBAAAA,EACAnnB,eAAgB,KAChB4mB,YAAAA,EACA,SAAI/e,GACA,OAAI9P,KAAKuuB,iBAAiBlvB,OAAS,EACxBW,KAAKuuB,iBAAiB,GAAGze,MACzB9P,KAAKovB,uBACLpvB,KAAKovB,uBAAuBtf,MAEhCA,CACV,EACD,SAAIA,CAAO7Q,GACP6Q,EAAQ7Q,CACX,EACD,UAAI8Q,GACA,OAAI/P,KAAKuuB,iBAAiBlvB,OAAS,EACxBW,KAAKuuB,iBAAiB,GAAGxe,OACzB/P,KAAKovB,uBACLpvB,KAAKovB,uBAAuBrf,OAEhCA,CACV,EACD,UAAIA,CAAQ9Q,GACR8Q,EAAS9Q,CACb,GAEJe,KAAK43B,OAAS53B,KAAKi3B,gBAAgBnnB,MACnC9P,KAAK63B,QAAU73B,KAAKi3B,gBAAgBlnB,MACvC,EAAAmW,EAEMrZ,QAAP,WACQ7M,KAAKi3B,kBACLj3B,KAAKi3B,gBAAkB,KAE9B,EAAAv4B,EAAAq4B,EAAA,CAAA,CAAAp4B,IAAA,iBAAAC,IAnED,WACI,OAAOoB,KAAKi3B,eAChB,KAACF,CAAA,CAH0B,CAAQe,GCE1BC,GAAqB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAjwB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAKoC,OALpC9d,EAAAkwB,EAAAnS,KAAA1Y,MAAA6qB,EAAA,CAAAh4B,MAAA8lB,OAAAH,KAAA3lB,MAKtBi4B,mBAAsD,KAAInwB,CAAA,CALpCS,EAAAwvB,EAAAC,GAKoC,IAAA9R,EAAA6R,EAAAn3B,UAFjE,OAEiEslB,EAE3DC,WAAP,SAAmB9G,GACf,GAAkC,IAA9BA,EAAK6Y,cAAc74B,OAAvB,CASA,GAJAW,KAAKm4B,YAAc9Y,EAAKa,WACxBlgB,KAAKo4B,gBAAkBp4B,KAAKq4B,wBAC5Br4B,KAAKs4B,eAAiBjZ,EAAK6Y,cAEvB7Y,EAAK0T,YACL/yB,KAAKu4B,aAAelZ,EAAK0T,YACzB/yB,KAAK6J,SAASmpB,WAAahzB,KAAKu4B,aAAaluB,KAAOrK,KAAKu4B,aAAa7X,OACtE1gB,KAAK6J,SAASqpB,WAAa,MACxB,CACH,IAAMsF,EAAWx4B,KAAKs4B,eAAe,GACrCt4B,KAAK6J,SAASwpB,YAAcmF,EAASnuB,KAAOmuB,EAAS9X,OACrD1gB,KAAK6J,SAASspB,YAAc,EAC5BnzB,KAAK6J,SAAS4uB,aAAe,CAChC,CAEDz4B,KAAK04B,UAAU5F,cAAgB,EAC/B9yB,KAAK04B,UAAUtF,cAAgB,EAE/BpzB,KAAK6pB,gBAAkBxK,EAAK+S,gBAAkB,KAG9C,IAFA,IAAMkE,EAAejX,EAAK6Y,cAAc74B,OAClCkhB,EAAuC,IAAItT,MAAwBqpB,GAChEh3B,EAAI,EAAGA,EAAIg3B,IAAgBh3B,EAAG,CACnC,IAAMq5B,EAAKtZ,EAAK6Y,cAAc54B,GAC1Bq5B,EAAGxuB,YACHoW,EAAiBjhB,GAAKq5B,EAAGxuB,UAEhC,CAED,IAAIqsB,EAA0C,KAC1CG,EAA+B,SACnC,GAAItX,EAAK0T,cACLyD,EAAkBnX,EAAK0T,YAA6B5oB,WAEhD,OAAQqsB,EAAe9V,QAEvB,KAAK,EAAGiW,EAAe,SAAU,MACjC,KAAK,EAAGA,EAAe,SAAU,MACjC,QACIpD,EAAQ,OAMpB,IAAIlB,EAA6C,KAC7ChT,EAAK+S,iBACLC,EAAqBhT,EAAK+S,eAAgCjoB,WAG9DnK,KAAKi4B,mBAAqB,CACtB/X,WAAYb,EAAKa,WACjBK,iBAAAA,EACAiW,eAAAA,EACAnE,kBAAAA,EAEAlS,WAAY,GACZwW,aAAAA,GAGJ3W,GAAiC1hB,GAAoBE,SAAUwB,KAAKi4B,mBA7DnE,MAFG1E,EAAQ,MAgEf,EAAArN,EAEMrZ,QAAP,WACsBvO,GAAoBE,SAClCwB,KAAKi4B,oBACyCj4B,KAAKi4B,mBAEvDj4B,KAAKi4B,mBAAqB,IAC7B,EAAAv5B,EAAAq5B,EAAA,CAAA,CAAAp5B,IAAA,oBAAAC,IAhFD,WACI,OAAOoB,KAAKi4B,kBAChB,KAACF,CAAA,CAH6B,CAAQa,GCK7BC,GAA0B,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAA/wB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAcI,OAdJ9d,EAAAgxB,EAAAjT,KAAA1Y,MAAA2rB,EAAA,CAAA94B,MAAA8lB,OAAAH,KAAA3lB,MAG3B+4B,wBAAgE,KAAIjxB,EACpEkxB,sBAA8D,IAAI94B,IAAsC4H,EAExGgiB,YAAa,EAAKhiB,EAClBmxB,WAAuB,GAAEnxB,EACzBoxB,gBAA6C,GAAEpxB,EAEhD6C,QAAqC,IAAIzK,IAA2B4H,EACpEqxB,SAAuC,IAAIj5B,IAA4B4H,EACvEsxB,SAAuC,IAAIl5B,IAA4B4H,EAEvEuxB,WAA8B,GAAEvxB,CAAA,CAdJS,EAAAswB,EAAAC,GAcI,IAAA5S,EAAA2S,EAAAj4B,UAatC,OAbsCslB,EAchCoT,aAAP,WACIt5B,KAAK8pB,YAAa,CACrB,EAAA5D,EACMC,WAAP,SAAmB9G,GACfpS,MAAMrM,UAAUsM,KAAKC,MAAMnN,KAAKu5B,UAAWla,EAAKM,UAChD,IAAM6Z,EAAYl7B,GAAoBE,SAGjCwB,KAAKu5B,UAAUl6B,QAChBW,KAAKu5B,UAAUrsB,KAAKssB,EAAU3R,gBAAgBnnB,UAAUif,SAAS,IAKrE,IAHA,IAAI4G,EAAkB,EAAOkT,GAAc,EACrCC,EAA6B,GAC7B7S,EAAc7mB,KAAKu5B,UAAUl6B,OAC1BC,EAAI,EAAGA,EAAIunB,EAAavnB,IAAK,CAClC,IAAMqZ,EAAU3Y,KAAKu5B,UAAUj6B,GAC/Bo6B,EAAiBxsB,KAAKqZ,GACtBA,GAAmB5N,EAAQzB,MACvByB,EAAQA,QAAU8gB,IAAYA,EAAa9gB,EAAQA,QAC1D,CAED3Y,KAAK25B,gBAAkB1sB,MAAMwsB,EAAa,GAAGhT,MAAM,GAEnD,IADA,IAAMH,EAAoBtmB,KAAK45B,mBAAqB3sB,MAAMwsB,EAAa,GAAGhT,MAAM,GACvEnnB,EAAI,EAAGA,EAAIunB,EAAavnB,IAAK,CAClC,IAAMqZ,EAAU3Y,KAAKu5B,UAAUj6B,GAC/BU,KAAK25B,gBAAgBhhB,EAAQA,SAAWrZ,EACxCgnB,EAAkB3N,EAAQA,SAAW+gB,EAAiBp6B,EACzD,CAED,IADA,IAAMu6B,EAA4B,GACzBv6B,EAAI,EAAGA,EAAIunB,EAAavnB,IAAK,CAClC,IAAMqZ,EAAU3Y,KAAKu5B,UAAUj6B,GAC/B,GAAIqZ,EAAQ2J,eAAiBwX,EACzB,IAAK,IAAI/S,EAAI,EAAGA,EAAIpO,EAAQzB,MAAO6P,IAC/B8S,EAAgB3sB,KAAKyL,EAAQA,QAGxC,CACD,IAAMohB,EAAkD,GACxD/5B,KAAKu5B,UAAUtkB,SAAQ,SAAC0D,GACpBohB,EAAqB7sB,KAArB6sB,MAAAA,EACOnY,GACCjJ,GAGZ,IACA,IACMqhB,EADSR,EAAUztB,aACE8N,sBAAsB,CAC7CJ,QAASsgB,IAEb/5B,KAAK+4B,wBAA0B,CAC3BpZ,SAAU3f,KAAKu5B,UACfM,gBAAAA,EACAvT,kBAAAA,EACAC,gBAAAA,EACA9M,QAASsgB,EACThhB,gBAAiBihB,EAExB,EAAA9T,EAEM1d,MAAP,WACIxI,KAAK2K,QAAQnC,QACbxI,KAAKm5B,SAAS3wB,QACdxI,KAAKo5B,SAAS5wB,QACdxI,KAAKg5B,sBAAsBxwB,OAC9B,EAAA0d,EAEMrZ,QAAP,WACI7M,KAAKu5B,UAAUl6B,OAAS,EACxBW,KAAKwI,QACLxI,KAAK+4B,wBAA0B,IAClC,EAAAr6B,EAAAm6B,EAAA,CAAA,CAAAl6B,IAAA,yBAAAC,IAjGD,WAAsE,OAAOoB,KAAK+4B,uBAA0B,GAAC,CAAAp6B,IAAA,YAAAC,IAc7G,WACI,OAAOoB,KAAKi5B,UAChB,GAAC,CAAAt6B,IAAA,iBAAAC,IACD,WACI,OAAOoB,KAAKk5B,eAChB,GAAC,CAAAv6B,IAAA,uBAAAC,IACD,WACI,OAAOoB,KAAKg5B,qBAChB,GAAC,CAAAr6B,IAAA,aAAAC,IAED,WACI,OAAOoB,KAAK8pB,UAChB,KAAC+O,CAAA,CA3BkC,CAAQoB,GCPlCC,GAAqB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAApyB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAKoB,OALpB9d,EAAAqyB,EAAAtU,KAAA1Y,MAAAgtB,EAAA,CAAAn6B,MAAA8lB,OAAAH,KAAA3lB,MAGtBo6B,mBAAsD,KAAItyB,EAC1DuyB,2BAAqB,EAAAvyB,EACrBwyB,gBAAwC,GAAExyB,CAAA,CALpBS,EAAA2xB,EAAAC,GAKoB,IAAAjU,EAAAgU,EAAAt5B,UAJ4C,OAI5CslB,EAE3CqU,oBAAP,SAA4BC,QAAiB,IAAjBA,IAAAA,GAAoB,GAC5C,IAAM9F,EAAoB10B,KAAKo6B,mBAC3BI,IACA9F,EAAkB+F,cAAcp7B,OAAS,EACzCq1B,EAAkBgG,qBAAqBr7B,OAAS,GAEpD,IACM0M,EADezN,GAAoBE,SACPuN,aAClC/L,KAAKs6B,gBAAgBj7B,OAAS,EAE9B,IADA,IAAMs7B,EAAgB36B,KAAK46B,YAAYv7B,OAC9BC,EAAI,EAAGA,EAAIq7B,EAAer7B,IAAK,CACpC,IAAMoB,EAAYV,KAAK46B,YAAYt7B,GAC7ByZ,EAAkBrY,EAAU2lB,uBAAwBtN,gBAC1D,GAAIA,EAAiB,CACjB,GAAIyhB,EAAU,CAIV,IAHA,IAAMX,EAAkBn5B,EAAU2lB,uBAAwBwT,gBACpDgB,EAAoB5tB,MAAMvM,EAAUo6B,eAAez7B,QAAQonB,MAAM,GACjEsU,EAAclB,EAAgBx6B,OAC3B0nB,EAAI,EAAGA,EAAIgU,EAAahU,IAAK,CAClC,IAAMpO,EAAUkhB,EAAgB9S,GAC5B8T,EAAQliB,GAAW,IAAGkiB,EAAQliB,GAAW+b,EAAkBoB,mBAAqB/O,EACvF,CAED2N,EAAkB+F,cAAcvtB,KAAKxM,EAAU2lB,wBAC/CqO,EAAkBgG,qBAAqBxtB,KAAK2tB,GAC5CnG,EAAkBoB,oBAAsBiF,CAC3C,CACD/6B,KAAKs6B,gBAAgBh7B,GAAKyZ,CAC7B,CACJ,CAGD,OADA/Y,KAAKq6B,4BAAwBtuB,SAAAA,EAAciO,qBAAqB,CAAED,iBAAkB/Z,KAAKs6B,kBAClFt6B,KAAKq6B,qBACf,EAAAnU,EAEMC,WAAP,SAAmB9G,GACfpS,MAAMrM,UAAUsM,KAAKC,MAAMnN,KAAK46B,YAAavb,EAAK0V,YAElD,IAOMiG,EAAOh7B,KAeb,OAdAA,KAAKo6B,mBAAqB,CACtBrF,WAAY/0B,KAAK46B,YACjBH,cARmD,GASnDC,qBAXqC,GAYrC5E,mBARuB,EASvBmF,oBAAqBj7B,KAAKs6B,gBAG1B,wBAAIY,GACA,OAAOF,EAAKX,qBAChB,GAGJr6B,KAAKu6B,uBACE,CACV,EAAArU,EAEMiV,gBAAP,SAAwBr6B,EAAaJ,GACjCV,KAAK46B,YAAY95B,GAAOJ,CAC3B,EAAAwlB,EAEMrZ,QAAP,WACI7M,KAAK46B,YAAYv7B,OAAS,CAC7B,EAAAX,EAAAw7B,EAAA,CAAA,CAAAv7B,IAAA,oBAAAC,IA3ED,WAA4D,OAAOoB,KAAKo6B,kBAAqB,KAACF,CAAA,CADhE,CAAQkB,GCWpCC,GAA0C,CAC5C,aACA,YACA,aACA,aACA,YACA,aACA,YACA,gBACA,iBACA,iBACA,gBACA,iBACA,iBACA,kBAGSC,GAAoB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAxzB,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAMsC,OANtC9d,EAAAyzB,EAAA1V,KAAA1Y,MAAAouB,EAAA,CAAAv7B,MAAA8lB,OAAAH,KAAA3lB,MAKrBw7B,kBAAoD,KAAI1zB,EACxD2zB,WAAkC,IAAIv7B,IAAqB4H,CAAA,CANtCS,EAAA+yB,EAAAC,GAMsC,IAAArV,EAAAoV,EAAA16B,UAHlE,OAGkEslB,EAC5DC,WAAP,SAAmB9G,GAAwC,IAAAqc,EACvD17B,KAAK27B,WAAatc,EAAK1E,UACvB3a,KAAK47B,QAAUvc,EAAKL,OACpBhf,KAAK67B,gBAAkBxc,EAAKrG,eAC5BhZ,KAAK87B,IAAMzc,EAAK0c,gBAChB/7B,KAAKg8B,KAAO3c,EAAK4c,kBACjBj8B,KAAKk8B,IAAM7c,EAAK8c,WAChBn8B,KAAKo8B,IAAM/c,EAAKgd,WAChBr8B,KAAKk3B,YAAc7X,EAAK0O,WACxB/tB,KAAKs8B,eAAiBjd,EAAKkd,cAG3B,IADA,IAAMA,EAAuC,GACpCj9B,EAAI,EAAGA,EAAI,GAAIA,IAChBU,KAAKs8B,eAAkB,GAAKh9B,GAC5Bi9B,EAAcrvB,KAAK,GAAK5N,GAShC,IAJA,IA0BIk9B,EACAC,EA3BEngB,EAAmBtc,KAAKk3B,YAAY5a,iBACpCogB,EAAoC,GACpCC,EAAoBrgB,EAAiBjd,OACrCu9B,EAAoBvd,EAAKrG,eACtB1Z,EAAI,EAAGA,EAAIq9B,EAAmBr9B,IAAK,CACxC,IAAMu9B,EAA+B,CACjCv6B,OAAQqD,GAAsB2W,EAAiBhd,GAAGgD,QAClD+X,UAAW3T,GAAgB1G,KAAKk8B,IAAI3hB,QAAQjb,GAAGw9B,iBAE/C98B,KAAKk8B,IAAI3hB,QAAQjb,GAAGy9B,QACpBF,EAAQE,MAAQ,CACZ5jB,MAAO,CACH6jB,UAAWz1B,GAAmBvH,KAAKk8B,IAAI3hB,QAAQjb,GAAG29B,UAClDC,UAAWz2B,GAAezG,KAAKk8B,IAAI3hB,QAAQjb,GAAG69B,UAAYC,EAAQC,IAAMD,EAAQE,IAAMt9B,KAAKk8B,IAAI3hB,QAAQjb,GAAG69B,SAC1GI,UAAWh2B,GAAmBvH,KAAKk8B,IAAI3hB,QAAQjb,GAAGk+B,WAEtDC,MAAO,CACHT,UAAWz1B,GAAmBvH,KAAKk8B,IAAI3hB,QAAQjb,GAAGo+B,eAClDR,UAAWz2B,GAAezG,KAAKk8B,IAAI3hB,QAAQjb,GAAGq+B,eAAiBP,EAAQC,IAAMD,EAAQE,IAAMt9B,KAAKk8B,IAAI3hB,QAAQjb,GAAGq+B,cAC/GJ,UAAWh2B,GAAmBvH,KAAKk8B,IAAI3hB,QAAQjb,GAAGs+B,kBAI9DlB,EAAWxvB,KAAK2vB,EACnB,CAMD,IAFA,IAAMgB,EAAgB79B,KAAK47B,QAAyBxd,UAAUG,UACxDD,EAAYuf,EAAax+B,OACtBC,EAAI,EAAGA,EAAIgf,EAAWhf,IACvBu+B,EAAav+B,GAAGmI,OAAS3F,EAAmBC,SAAUy6B,EAAcqB,EAAav+B,GAAG8e,WACpFyf,EAAav+B,GAAGmI,OAAS3F,EAAmBG,WAAYw6B,EAAgBoB,EAAav+B,GAAG8e,WAOhG,IAJA,IAAMA,EAAYiB,EAAKL,OAEjB8e,EAAc1f,EAAU8B,WACxB6d,EAAYD,EAAYz+B,OACrBC,EAAI,EAAGA,EAAIy+B,EAAWz+B,IAC3BU,KAAKy7B,WAAWztB,IAAI8vB,EAAYx+B,GAAGwY,KAAMgmB,EAAYx+B,GAAGie,UAE5D,IAAMygB,EAAiB3e,EAAK1E,YAAcsjB,EAAcC,YAAc7e,EAAK1E,YAAcsjB,EAAcE,eACjGC,EAA6C,CAC/C3jB,OAAQmiB,EAAkBlI,kBAAmBwG,qBAC7CxgB,OAAQ,CACJR,OAAQsiB,EAAatiB,OACrBC,WAAY,OACZxP,QAAS,IAEbgQ,UAAW,CACPC,SAAUygB,GAAgBhc,EAAK1E,WAC/BE,UAAW7a,KAAK87B,IAAIuC,eAAiB,MAAQ,KAC7CvjB,SAAU9a,KAAK87B,IAAIhhB,WAAawjB,EAASh9B,KAAO,OAAUtB,KAAK87B,IAAIhhB,WAAawjB,EAASC,MAAS,QAAU,QAGhHxjB,SAAU,CACNb,OAAQuiB,EAAeviB,OACvBC,WAAY,OACZI,QAASmiB,IAGbsB,IAAeI,EAAczjB,UAAW6jB,iBAAmB,UAG/D,IAAIjJ,EAAa,EACjB,IAA2C,OAAnCmG,EAAA17B,KAACk3B,YAAYlI,6BAAsB,EAAvC0M,EAAyCp5B,UAAWC,EAAO0sB,QAAS,CACpE,IAAMwP,EAAU,CAA0B,EAC1CA,EAAQn8B,OAASqD,GAAsB3F,KAAKk3B,YAAYlI,uBAAwB1sB,QAChFm8B,EAAQC,kBAAoB1+B,KAAKg8B,KAAK2C,WACtCF,EAAQG,aAAe5+B,KAAKg8B,KAAK6C,UAAYr4B,GAAkBxG,KAAKg8B,KAAK8C,WAAa,SACtF,IAAIC,EAAkB,EAClBx1B,EAAmB,EAEnBvJ,KAAKg8B,KAAKgD,mBACVP,EAAQQ,aAAe,CACnBttB,QAASnL,GAAkBxG,KAAKg8B,KAAKkD,kBACrCC,YAAa54B,GAAgBvG,KAAKg8B,KAAKoD,qBACvCC,OAAQ94B,GAAgBvG,KAAKg8B,KAAKsD,oBAClCC,OAAQh5B,GAAgBvG,KAAKg8B,KAAKwD,qBAEtCT,GAAmB/+B,KAAKg8B,KAAKyD,qBAC7Bl2B,GAAoBvJ,KAAKg8B,KAAK0D,sBAC9BnK,GAAcv1B,KAAKg8B,KAAK2D,iBAExB3/B,KAAKg8B,KAAK4D,kBACVnB,EAAQoB,YAAc,CAClBluB,QAASnL,GAAkBxG,KAAKg8B,KAAK8D,iBACrCX,YAAa54B,GAAgBvG,KAAKg8B,KAAK+D,oBACvCV,OAAQ94B,GAAgBvG,KAAKg8B,KAAKgE,mBAClCT,OAAQh5B,GAAgBvG,KAAKg8B,KAAKiE,oBAEtClB,GAAmB/+B,KAAKg8B,KAAKkE,oBAC7B32B,GAAoBvJ,KAAKg8B,KAAKmE,qBAC9B5K,GAAcv1B,KAAKg8B,KAAKoE,gBAE5B3B,EAAQM,gBAAkBA,EAC1BN,EAAQl1B,iBAAmBA,EAC3Bk1B,EAAQr1B,UAAYpJ,KAAK87B,IAAI1yB,UAC7Bq1B,EAAQ4B,oBAAsBrgC,KAAK87B,IAAIwE,cACvC7B,EAAQ1N,eAAiB/wB,KAAK87B,IAAI/K,eAClCqN,EAAc9I,aAAemJ,CAChC,CAEDz+B,KAAKw7B,kBAAoB,CACrBlI,aAAc+H,GAAgBhc,EAAK1E,WACnCyD,UAAWA,EAAUA,UACrBsW,kBAAmBkI,EAAkBlI,kBACrC6L,GAAIlhB,EAAK0c,gBACTyE,IAAKnhB,EAAK4c,kBACV1G,WAAAA,EACAkL,GAAIphB,EAAK8c,WACTn0B,cAAgBqX,EAAK0O,WAAgC/lB,cACrDu0B,cAAAA,EACAxM,cAAeqO,EACf/I,oBAAgB31B,EAEvB,EAAAwmB,EAESwa,mBAAV,SAA8B5oB,GAC1B,OAAO9X,KAAKy7B,WAAW78B,IAAIkZ,EAC9B,EAAAoO,EAEMya,qBAAP,WACQ3gC,KAAKw7B,mBAAqBx7B,KAAKw7B,kBAAkBzL,gBACjD/vB,KAAKw7B,kBAAkBzL,cAActV,OAAUza,KAAK67B,gBAAyCnH,kBAAmBwG,qBAEvH,EAAAhV,EAEMmD,QAAP,SAAgB6I,EAA8B0O,GAC1C,QAD8D,IAApBA,IAAAA,GAAuB,IAC7D5gC,KAAKw7B,kBAAmBnG,gBAAmBuL,EAA/C,CASA,IANA,IACM9C,EADY99B,KAAKgf,OACOkB,WACxB6P,EAAgB/vB,KAAKw7B,kBAAmBzL,cACxC8Q,EAAuC,GACvCC,EAA0B,GAC1BC,EAAc7O,EAAG3R,iBAAiBlhB,OAC/BC,EAAI,EAAGA,EAAIyhC,EAAazhC,IAAK,CAOlC,IANA,IAAM0hC,EAA0C,CAC5CC,YAAa,EACb/gB,WAAY,IAEVghB,EAAkC,GAClCC,EAAiBrD,EAAYz+B,OAC1B0nB,EAAI,EAAGA,EAAIoa,EAAgBpa,IAAK,CAIrC,IAHA,IAAMqa,EAAatD,EAAY/W,GAC3Bsa,GAAU,EACRC,EAAcpP,EAAG/R,WAAW9gB,OACzB0T,EAAI,EAAGA,EAAIuuB,EAAavuB,IAAK,CAClC,IAAMwuB,EAAUrP,EAAG/R,WAAWpN,GACxByuB,EAAOtP,EAAGhS,WAAWnN,GAC3B,GAAIyuB,EAAK1pB,OAASspB,EAAWtpB,KAAM,CAC/BupB,GAAU,EACV,IAAMI,EAAML,EAAW7jB,SACvB,GAAIikB,EAAKlhB,SAAWhhB,EAAG,CACnB0hC,EAAiBC,YAAcM,EAAQ7gB,OACvCsgB,EAAiBU,SAAWF,EAAK3gB,YAAc,WAAa,SAC5D,IAAM8gB,EAAiC,CACnCr/B,OAAQD,GAA4Bm/B,EAAKl/B,QACzC8H,OAAQm3B,EAAQn3B,OAChBw3B,eAAgBH,GAEpBP,EAAUh0B,KAAKy0B,EAClB,CACD,KACH,CACJ,CACD,IAAMr/B,EAAS8+B,EAAW9+B,OAC1B,IAAK++B,IAAYP,EAAchrB,SAASsrB,EAAWtpB,OAC3C0I,EAAYle,GAAQ+H,MAAQ6nB,EAAG3R,iBAAiBjhB,GAAGohB,OAAS,CAChEogB,EAAc5zB,KAAKk0B,EAAWtpB,MAC9B,IAAM6pB,EAAiC,CACnCr/B,OAAQD,GAA4BC,GACpC8H,OAAQ,EACRw3B,eAAgBR,EAAW7jB,UAE/B2jB,EAAUh0B,KAAKy0B,EAClB,CACJ,CAEGT,EAAU7hC,SACV2hC,EAAiB9gB,WAAaghB,EAC9BL,EAAY3zB,KAAK8zB,GAExB,CAEDjR,EAAcrV,OAAO/P,QAAUk2B,EAC/B,IACM90B,EADgBzN,GAAoBE,SACRuN,aAC5BspB,EAA6B,MAAZtpB,OAAY,EAAZA,EAAcmP,qBAAqB6U,GAC1D/vB,KAAKw7B,kBAAmBnG,eAAiBA,CA5DxC,CA6DJ,EAAAnP,EAEMrZ,QAAP,WACI7M,KAAKw7B,kBAAoB,IAC5B,EAAA98B,EAAA48B,EAAA,CAAA,CAAA38B,IAAA,mBAAAC,IA9ND,WACI,OAAOoB,KAAKw7B,iBAChB,KAACF,CAAA,CAH4B,CAAQuG,GC7B5BC,GAAY,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAh6B,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAMG,OANH9d,EAAAi6B,EAAAlc,KAAA1Y,MAAA40B,EAAA,CAAA/hC,MAAA8lB,OAAAH,KAAA3lB,MACdgiC,aAAe,EAACl6B,EAChBm6B,aAAe,EAACn6B,EAChBo6B,QAAU,EAACp6B,EAEVq6B,aAAgC,KAAIr6B,EACpCs6B,UAAW,EAAKt6B,CAAA,CANHS,EAAAu5B,EAAAC,GAMG,IAAA7b,EAAA4b,EAAAlhC,UA4BvB,OA5BuBslB,EACjBC,WAAP,SAAmB9G,GAGf,OAFArf,KAAKotB,MAAQ/N,EAAK5X,MAEX,CACV,EAAAye,EAEMrZ,QAAP,WAEC,EAAAqZ,EAEM1X,OAAP,SAAeulB,GAEX,IAAK/zB,KAAKoiC,SAEN,IADA,IAAMC,EAActO,EAAS10B,OACpBC,EAAI,EAAGA,EAAI+iC,EAAa/iC,IAAK,CAClC,IAAMgjC,EAAUvO,EAASz0B,GACzBU,KAAKgiC,cAAgBM,EAAQN,aAC7BhiC,KAAKiiC,cAAgBK,EAAQL,aAC7BjiC,KAAKkiC,SAAWI,EAAQJ,OAC3B,CAER,EAAAhc,EAEM1d,MAAP,WACIxI,KAAKgiC,aAAe,EACpBhiC,KAAKiiC,aAAe,EACpBjiC,KAAKkiC,QAAU,CAClB,EAAAJ,CAAA,CAlCoB,CAAQS,GCDpBC,GAAiB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAA16B,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAKgC,OALhC9d,EAAA26B,EAAA5c,KAAA1Y,MAAAs1B,EAAA,CAAAziC,MAAA8lB,OAAAH,KAAA3lB,MAKlB0iC,eAA8C,KAAI56B,CAAA,CALhCS,EAAAi6B,EAAAC,GAKgC,IAAAvc,EAAAsc,EAAA5hC,UAFzD,OAEyDslB,EAClDyc,yBAAR,SAAkCC,GAC9B,MAAO,CACHrmB,KAAM,CAAoB,EAC1BC,OAAQomB,EAAgBpmB,SAAWqmB,GAAOC,KAAO,OAAS,QAC1DrmB,QAASmmB,EAAgBnmB,UAAYsmB,GAAQC,MAAQ,QAAU,UAEtE,EAAA9c,EACO+c,sBAAR,SAA+BC,GAC3B,IAAMC,EAAyB,CAC/BA,gBAAyC,GAOzC,OANAA,EAAuBC,YAAcF,EAAaE,cAAgBP,GAAOQ,MAAQ,QAAU,OAC3FF,EAAuBG,aAAeJ,EAAaI,eAAiBP,GAAQC,MAAQ,QAAU,UAC9FG,EAAuB3T,kBAAoB,EAC3C2T,EAAuBI,cAAgBL,EAAaK,gBAAkBV,GAAOQ,MAAQ,QAAU,OAC/FF,EAAuBK,eAAiBN,EAAaM,iBAAmBT,GAAQC,MAAQ,QAAU,UAClGG,EAAuB5mB,KAAO,CAAoB,EAC3C4mB,CACV,EAAAjd,EACMC,WAAP,SAAmB9G,GACfrf,KAAKyjC,YAAcpkB,EAAK/C,iBACxBtc,KAAK0jC,kBAAoBrkB,EAAK2P,uBAC9BhvB,KAAK2jC,WAAatkB,EAAKukB,UAIvB,IAFA,IAEgDzrB,EAF1C0rB,EAAoD,GACpDC,EAAoD,GACjCzkB,EAAAA,EAAAA,EAAK/C,oBAAkBnE,EAAAE,KAAAE,MAAA,CAAA,IAArCwrB,EAAU5rB,EAAAM,MACjBqrB,EAAkBD,EAAkBxkC,QAAUW,KAAK2iC,yBAAyBoB,GAC5EF,EAAkBA,EAAkBxkC,QAAUW,KAAK2iC,yBAAyBoB,EAC/E,CAED,IAAMC,EAA0C,CAC5C1nB,iBAAkBunB,GAEhBI,EAA0C,CAC5C3nB,iBAAkBwnB,GAGtB,GAAIzkB,EAAK2P,uBAAuB1sB,SAAWC,EAAO0sB,QAAS,CACvD,IAAMkU,EAAyBnjC,KAAKijC,sBAAsB5jB,EAAK2P,wBACzDkV,EAA2BlkC,KAAKijC,sBAAsB5jB,EAAK2P,wBACjEgV,EAAehV,uBAAyBmU,EACxCc,EAAejV,uBAAyBkV,CAC3C,CAEDlkC,KAAK0iC,eAAiB,CAClBpmB,iBAAkBtc,KAAKyjC,YACvBzU,uBAAwBhvB,KAAK0jC,kBAC7BvV,iBAAkB6V,EAClB5V,WAAY6V,EAEnB,EAAA/d,EAEMrZ,QAAP,WACI7M,KAAK0iC,eAAiB,IACzB,EAAAhkC,EAAA8jC,EAAA,CAAA,CAAA7jC,IAAA,gBAAAC,IA3DD,WACI,OAAOoB,KAAK0iC,cAChB,KAACF,CAAA,CAHyB,CAAQ2B,ICEhCC,GAAyC,IAAIlkC,IAEtCmkC,GAAc,SAAAC,GAAA/7B,EAAA87B,EAAAC,GAAA,IAAApe,EAAAme,EAAAzjC,UAiBvB,SAAaye,EAAAA,EAA6BvgB,GAAY,IAAAgJ,EAoBhD,OAnBFA,EAAMuX,EAAAA,KAAAA,KAAAA,EAAMvgB,IAAKkB,MATbukC,YAAwC,KAAIz8B,EAC5CgiB,YAAsB,EAS1BhiB,EAAKy8B,YAAc,CACf/zB,WAAY,KACZmB,QAAS0N,EAAKmlB,QACd/zB,UAAW4O,EAAK5O,UAChBI,UAAWwO,EAAKxO,UAChBE,UAAWsO,EAAKtO,UAChBC,SAAUqO,EAAKrO,SACfC,SAAUoO,EAAKpO,SACfE,SAAUkO,EAAKlO,SACfS,cAAeyN,EAAKzN,cACpB1B,SAAU,EAEVT,aAAc,SACdC,aAAc,SACdoB,aAAc,SACdxB,SAAU,gBACVE,SAAU,gBACV0B,SAAU,iBACZpJ,CACN,CAzBC,OAbsBoe,EAchBoB,YAAP,WACItnB,KAAK8pB,YAAa,CACrB,EAsBA5D,EAEOue,mBAAR,SAA4BplB,GACxB,IAAIvgB,EAAOugB,EAAK5O,UAShB,OARA3R,GAAUugB,EAAKxO,WAAwB,EACvC/R,GAAUugB,EAAKtO,WAAwB,EACvCjS,GAAUugB,EAAKrO,UAAuB,EACtClS,GAAUugB,EAAKpO,UAAuB,EACtCnS,GAAUugB,EAAKlO,UAAuB,GACtCrS,GAASugB,EAAKzN,eAAiB,IAC/B9S,GAAUugB,EAAK1N,SAAsB,IAC3B0N,EAAKnP,UAAa,EAE/B,EAAAgW,EAEM+B,iBAAP,SAAyB/X,GACrB,QADqC,IAAhBA,IAAAA,EAAmB,IACnClQ,KAAKukC,YACN,OAAO,KAEXvkC,KAAKukC,YAAYr0B,SAAWA,EAC5B,IAAMw0B,EAAU1kC,KAAKykC,mBAAmBzkC,KAAKukC,aACzCI,EAAiBP,GAAcxlC,IAAI8lC,GACvC,GAAIC,EAAgB,OAAOA,EAE3B,IAAM74B,EAASxN,GAAoBE,SAKnC,OAJAwB,KAAK8pB,YAAa,EAClBvZ,GAA2BzE,EAAQ9L,KAAKukC,aACxCI,EAAiB3kC,KAAKukC,YAAY/zB,WAClC4zB,GAAcp2B,IAAI02B,EAASC,GACpBA,CACV,EAAAze,EAEMrZ,QAAP,WAKI,IZqnB2D2D,EYznBtDxQ,KAAKukC,cAGVvkC,KAAK8pB,YAAa,EACHxrB,GAAoBE,UZqnBwBgS,EYpnBvBxQ,KAAKukC,aZqnB9B/zB,aACXA,EAAWA,WAAa,MYrnBxBxQ,KAAKukC,YAAc,KACtB,EAAA7lC,EAAA2lC,EAAA,CAAA,CAAA1lC,IAAA,aAAAC,IA7ED,WACI,OAAOoB,KAAKukC,WAChB,GAAC,CAAA5lC,IAAA,cAAAC,IAED,WACI,OAAOoB,KAAK4kC,KAChB,GAAC,CAAAjmC,IAAA,YAAAC,IAID,WACI,OAAOoB,KAAK8pB,UAChB,KAACua,CAAA,CAbsB,CAAQQ,ICFtBC,GAAa,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAh9B,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAK4B,OAL5B9d,EAAAi9B,EAAAlf,KAAA1Y,MAAA43B,EAAA,CAAA/kC,MAAA8lB,OAAAH,KAAA3lB,MAKdglC,WAAsC,KAAIl9B,CAAA,CAL5BS,EAAAu8B,EAAAC,GAK4B,IAAA7e,EAAA4e,EAAAlkC,UAFjD,OAEiDslB,EAE3CC,WAAP,SAAmB9G,GACfrf,KAAKilC,MAAQ5lB,EAAKvH,KAClB9X,KAAKklC,QAAU7lB,EAAK8lB,OACpBnlC,KAAKm4B,YAAc9Y,EAAKa,WACxBlgB,KAAKolC,QAAU/lB,EAAKgmB,OACpBrlC,KAAK2mB,UAAYtH,EAAK+Z,SACtB,IAAM9a,EAAYe,EAAK8lB,OAAO9lC,OAC9BW,KAAKglC,WAAa,CACdltB,KAAMuH,EAAKvH,KACXutB,OAAQhmB,EAAKgmB,OAAO93B,QACpB6rB,SAAU/Z,EAAK+Z,SAEf7a,UAAW,IAAItR,MAA6BqR,GAC5CgnB,WAAY,KACZC,UAAW,GACXC,YAAa,GACbC,UAAW,GACXC,YAAa,GACb/lB,SAAU,IAAIzf,KAGlB,IAAK,IAAIZ,EAAI,EAAGA,EAAIgf,IAAahf,EAAG,CAChC,IAAMsC,EAAQyd,EAAK8lB,OAAO7lC,GAC1BU,KAAKglC,WAAWzmB,UAAUjf,GAAK,CAC3BmI,KAAM7F,EAAMA,MACZyb,OAAQzb,EAAMyb,OACde,UAAW,KACXuB,SAAU,GACV1B,MAAO,IAAI/d,IAElB,CAEDie,GADe7f,GAAoBE,SACEwB,KAAKglC,WAC7C,EAAA9e,EAEMrZ,QAAP,WAII,Ib8qC0DuR,EajrCrDpe,KAAKglC,aAGK1mC,GAAoBE,Ub8qCuB4f,Ea7qCvBpe,KAAKglC,Yb8qC9BM,aACVlnB,EAAUknB,WAAa,Ma9qCvBtlC,KAAKglC,WAAa,KACrB,EAAAtmC,EAAAomC,EAAA,CAAA,CAAAnmC,IAAA,YAAAC,IAhDD,WACI,OAAOoB,KAAKglC,UAChB,KAACF,CAAA,CAHqB,CAAQa,ICMrBC,GAAgB,WAAA,SAAAA,IAAA5lC,KAClB6lC,eAAsC,KAAI7lC,KAC1C8lC,sBAA6C,KAAI9lC,KACjD+lC,iBAAwC,KAAI/lC,KAC5CgmC,YAAuC,GAAEhmC,KACzCimC,kBAA8B,GAAEjmC,KAChCkmC,QAAkB,EAAClmC,KACnBmmC,YAAgC,GAAEnmC,KAClComC,gBAA4C,GAAEpmC,KAC9CiI,eAA2C,KAAIjI,KAC/CqmC,mBAA+C,KAAIrmC,KACnD8I,kBAAiD,KAAI9I,KACrDiJ,SAAW,IAAIynB,EAAU1wB,KACzBsmC,YAAc,IAAIn+B,EAAK,EAAG,EAAG,EAAG,GAAEnI,KAClCugC,GAAK,IAAIgG,GAAiBvmC,KAC1BwgC,IAAM,IAAIgG,GAAmBxmC,KAC7BygC,GAAK,IAAIgG,GAAYzmC,KACrB0mC,qBAAkC,GAAE1mC,KACpC2mC,qBAAkC,GAAE3mC,KACpC4mC,gBAA0C,CAAE,CAAA,CAmBlD,OAnBkDhB,EAAAhlC,UAEnDulB,WAAA,SAAY+f,EAAiBW,EAAwBC,GACjD,IAAK,IAAIxnC,EAAI,EAAGA,EAAI4mC,IAAW5mC,EAAGU,KAAKmmC,YAAYj5B,KAAK,CAAExC,WAAY,OAEtE1K,KAAKomC,gBAAgB/mC,OAAS6mC,EAC9BlmC,KAAKomC,gBAAgB3f,KAAK,MAE1BzmB,KAAKgmC,YAAY3mC,OAASwnC,EAC1B7mC,KAAKgmC,YAAYvf,KAAK,MAEtBzmB,KAAKimC,kBAAkB5mC,OAASwnC,EAChC7mC,KAAKimC,kBAAkBxf,KAAK,GAE5BzmB,KAAK0mC,qBAAqBrnC,OAASynC,EACnC9mC,KAAK0mC,qBAAqBjgB,MAAK,GAE/BzmB,KAAK2mC,qBAAqBtnC,OAASynC,EACnC9mC,KAAK2mC,qBAAqBlgB,MAAK,EAClC,EAAAmf,CAAA,CAtCwB,GCShBmB,GAAc,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAj/B,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GA0BG,OA1BH9d,EAAAk/B,EAAAnhB,KAAA1Y,MAAA65B,EAAA,CAAAhnC,MAAA8lB,OAAAH,KAAA3lB,MAuBfinC,YAAqC,KAAIn/B,EACzCo/B,eAA8C,KAAIp/B,EAClDq/B,UAAY,EAACr/B,EACbgiB,YAAa,EAAKhiB,CAAA,CA1BHS,EAAAw+B,EAAAC,GA0BG,IAAA9gB,EAAA6gB,EAAAnmC,UAwFzB,OAxFyBslB,EAzBnBkhB,iBAAP,WACI,IAAM18B,EAAa1K,KAAKinC,YACxB,OAAKv8B,GAGDA,EAAWA,WACJA,EAAWA,WAHX,CAMd,EAAAwb,EACMmhB,uBAAP,SAA+BhoB,GAC3B,IAAMioB,EAAU,IAAIC,GACpBD,EAAQhlC,OAAS+c,EAAK/c,OACtBglC,EAAQp7B,MAAQsU,EAAYnB,EAAK/c,QAAQklC,SAAW14B,EAAgBM,yBAA2BN,EAAgBK,iBAC/Gm4B,EAAQx3B,MAAQuP,EAAKvP,MACrBw3B,EAAQv3B,OAASsP,EAAKtP,OACtB/P,KAAKmmB,WAAWmhB,GAAS,EAC5B,EAAAphB,EAeMoB,YAAP,WACItnB,KAAK8pB,YAAa,CACrB,EAAA5D,EACMC,WAAP,SAAmB9G,EAAyDqY,GACxE,IAAI4P,EAAUjoB,EACRooB,EAAWpoB,EAejB,GAdI,YAAaA,IACbioB,EAAUG,EAASlnC,QAAQ8e,KAC3Brf,KAAK0nC,gBAAiB,GAG1B1nC,KAAK4kC,MAAM+C,KAAKL,GAChBtnC,KAAK4nC,YAAcC,GAAW7nC,KAAK4kC,MAAM90B,QAAU+3B,GAAW7nC,KAAK4kC,MAAM70B,QACzE/P,KAAKmqB,MAAQ2d,GACT9nC,KAAK4kC,MAAMtiC,OACXtC,KAAK8P,MACL9P,KAAK+P,OACL/P,KAAKmhB,MACLnhB,KAAK4kC,MAAMphB,YACXxjB,KAAK4kC,MAAM7f,WACV/kB,KAAK0nC,eA+CN1nC,KAAK+nC,UAAUJ,KAAKF,GACpBznC,KAAKmnC,UAAYM,EAASO,UAC1BhoC,KAAKinC,YAAeQ,EAASlnC,QAA0B0mC,gBAjDjC,CA+BtB,GA9BAjnC,KAAKinC,YAAc,CACfx/B,KAAM6/B,EAAQ7/B,KACdnF,OAAQglC,EAAQhlC,OAChB4J,MAAOo7B,EAAQp7B,MACf4D,MAAOw3B,EAAQx3B,MACfC,OAAQu3B,EAAQv3B,OAChBoR,MAAOmmB,EAAQnmB,MACf9W,KAAMrK,KAAKmqB,MACXna,WAAYs3B,EAAQviB,WACpB7U,SAAUo3B,EAAQ9jB,WAClB7T,QAAS23B,EAAQ33B,QACjByR,MAAOkmB,EAAQlmB,MACf7R,WAAYvP,KAAK4nC,YAGjBj7B,UAAW,KACXgC,eAAgB,aAChBC,UAAW,aACX6R,QAAS,EACT5R,SAAUE,gBAAgBM,kBAC1B3E,gBAAYhL,EACZuoC,gBAAiB,KACjB34B,SAAU,gBACVE,SAAU,gBACVC,aAAc,SACdC,aAAc,SACdof,eAAgB9uB,KAAKynB,qBAAqBR,KAAKjnB,MAE/C03B,mBAAoBA,IAAsB,GAEzCA,EAKD13B,KAAKinC,YAAYt4B,eAAiBhJ,GAAsB3F,KAAKinC,YAAY3kC,QACzEtC,KAAKinC,YAAYr4B,UAAY5O,KAAKinC,YAAYt4B,mBANzB,CACrB,IAAM7C,EAASxN,GAAoBE,SACnCiQ,GAA2B3C,EAAQ9L,KAAKinC,aACxCn7B,EAAO8e,aAAasd,aAAeloC,KAAKmqB,KAC3C,CAIDnqB,KAAK+nC,UAAUxnC,QAAUP,KACzBA,KAAK+nC,UAAUtgC,KAAO4X,EAAK5X,KAC3BzH,KAAK+nC,UAAUzlC,OAAS+c,EAAK/c,OAC7BtC,KAAK+nC,UAAUC,UAAY,EAC3BhoC,KAAK+nC,UAAUvkB,WAAanE,EAAKmE,WACjCxjB,KAAK+nC,UAAUtkB,UAAY,EAC3BzjB,KAAK+nC,UAAUhjB,WAAa1F,EAAK0F,UACpC,CAKJ,EAAAmB,EAYMuB,qBAAP,WACI,OAAKznB,KAAKinC,aAAgBjnC,KAAKinC,YAAYv8B,WAGpC1K,KAAKinC,YAAYv8B,WAAWgR,WAAW,CAC1CpZ,OAAQtC,KAAK0K,WAAWkE,UACxBwM,UAAWpb,KAAKinC,YAAYt6B,UAC5BsD,cAAejQ,KAAKinC,YAAY/2B,SAChCqL,gBAAiBvb,KAAKynC,SAAS1iB,WAC/B1J,aAAc,EACdC,eAAgB,IART,IAUd,EAAA4K,EAEMrZ,QAAP,WACI7M,KAAK8pB,YAAa,EACd9pB,KAAK0nC,iBAAoB1nC,KAAK0nC,iBAAmB1nC,KAAKinC,cAI1D52B,GAA4BrQ,KAAKinC,aAClB3oC,GAAoBE,SAC5BosB,aAAasd,aAAeloC,KAAKmqB,OALpCnqB,KAAKinC,YAAc,IAO1B,EAAA/gB,EAEM4E,OAAP,SAAehb,EAAeC,GAC1B,GAAI/P,KAAK4kC,MAAM90B,QAAUA,GAAS9P,KAAK4kC,MAAM70B,SAAWA,EAAxD,CAGI/P,KAAK4kC,MAAMphB,aAAeujB,EAAcoB,cAAcnoC,KAAK4kC,MAAM90B,MAAO9P,KAAK4kC,MAAM70B,QACnF/P,KAAK4kC,MAAMphB,WAAaujB,EAAcoB,cAAcr4B,EAAOC,GACpD/P,KAAK4kC,MAAMphB,WAAa,IAC/BxjB,KAAK4kC,MAAMphB,WAAa9L,KAAKC,IAAI3X,KAAK4kC,MAAMphB,WAAYujB,EAAcoB,cAAcr4B,EAAOC,KAE/F/P,KAAK8pB,YAAa,EAClB,IAAMkB,EAAUhrB,KAAKmqB,MAWrB,GAVAnqB,KAAK4kC,MAAM90B,MAAQA,EACnB9P,KAAK4kC,MAAM70B,OAASA,EACpB/P,KAAKmqB,MAAQ2d,GACT9nC,KAAKqf,KAAK/c,OACVtC,KAAK8P,MACL9P,KAAK+P,OACL/P,KAAKmhB,MACLnhB,KAAKqf,KAAKmE,YACVxjB,KAAKqf,KAAK0F,YAET/kB,KAAK0nC,gBAAkB1nC,KAAKinC,cAC7BjnC,KAAKinC,YAAYn3B,MAAQA,EACzB9P,KAAKinC,YAAYl3B,OAASA,EAC1B/P,KAAKinC,YAAY58B,KAAOrK,KAAKmqB,OACxBnqB,KAAKinC,YAAYvP,oBAAoB,CACtC,IAAM5rB,EAASxN,GAAoBE,SACnC8R,GAA2BxE,EAAQ9L,KAAKinC,aACxCn7B,EAAO8e,aAAasd,aAAeld,EACnClf,EAAO8e,aAAasd,aAAeloC,KAAKmqB,KAC3C,CA3BJ,CA6BJ,EAAAzrB,EAAAqoC,EAAA,CAAA,CAAApoC,IAAA,aAAAC,IA3JD,WACI,OAAOoB,KAAKinC,WAChB,GAAC,CAAAtoC,IAAA,WAAAC,IAMD,WACI,OAAOoB,KAAKmnC,SAChB,GAAC,CAAAxoC,IAAA,YAAAC,IACD,WACI,OAAOoB,KAAK8pB,UAChB,GAAC,CAAAnrB,IAAA,YAAAqP,IA0ED,SAAe/O,GACX,IAAKe,KAAK0nC,gBAAkB1nC,KAAKinC,cAAgBjnC,KAAKinC,YAAYvP,mBAAoB,CAClFrnB,GAA4BrQ,KAAKinC,aACjC,IAAMn7B,EAASxN,GAAoBE,SACnCwB,KAAKinC,YAAY3kC,OAAUuD,GAAsB5G,GACjDwP,GAA2B3C,EAAQ9L,KAAKinC,aACxCjnC,KAAK8pB,YAAa,CACrB,CACL,KAACid,CAAA,CAlHsB,CAAQqB,ICVtBC,GAAiB,WAK1B,SAAaC,EAAAA,EAAmBpxB,GAAalX,KAJrCuoC,YAAM,EAAAvoC,KACNwoC,SAAmB,EAACxoC,KACpByoC,eAAS,EAGbzoC,KAAKuoC,OAAS,IAAIt7B,MAAMiK,GACxBlX,KAAKyoC,UAAY,IAAI19B,EAAYmM,GACjC,IAAK,IAAI5X,EAAI,EAAGA,EAAI4X,IAAS5X,EACzBU,KAAKuoC,OAAOjpC,GAAK,IAAIgpC,EAEzBtoC,KAAKwoC,SAAWtxB,EAAQ,CAC5B,CAAC,IAAAgP,EAAAmiB,EAAAznC,UAiDA,OAjDAslB,EAEMwN,MAAP,SAAc4U,GACV,GAAItoC,KAAKwoC,SAAW,EAAG,CACnB,IAAMn+B,EAA4B,EAArBrK,KAAKuoC,OAAOlpC,OACnBqpC,EAAO1oC,KAAKuoC,OAClBvoC,KAAKuoC,OAAS,IAAIt7B,MAAS5C,GAG3B,IADA,IAAMs+B,EAAWt+B,EAAOq+B,EAAKrpC,OACpBC,EAAI,EAAGA,EAAIqpC,IAAYrpC,EAC5BU,KAAKuoC,OAAOjpC,GAAK,IAAIgpC,EAGzB,IAAK,IAAIhpC,EAAIqpC,EAAU5hB,EAAI,EAAGznB,EAAI+K,IAAQ/K,IAAKynB,EAC3C/mB,KAAKuoC,OAAOjpC,GAAKopC,EAAK3hB,GAG1B/mB,KAAKwoC,UAAYG,CACpB,CAED,IAAM9U,EAAM7zB,KAAKuoC,OAAOvoC,KAAKwoC,UAG7B,OAFAxoC,KAAKuoC,OAAOvoC,KAAKwoC,YAAc,OAC7B3U,EAAIlsB,SACCksB,CACV,EAAA3N,EAEM0iB,KAAP,SAAa/U,GACc,KAAjBA,EAAIlsB,UACN3H,KAAKyoC,UAAUv7B,KAAK2mB,EAE3B,EAAA3N,EAEM1a,SAAP,SAAiBV,GAEb,IADA,IAAM+9B,EAAY/9B,EAAKzL,OACdC,EAAI,EAAGA,EAAIupC,IAAavpC,EACI,KAA3BwL,EAAKqpB,MAAM70B,GAAGqI,UAChB3H,KAAKyoC,UAAUv7B,KAAKpC,EAAKqpB,MAAM70B,GAG1C,EAAA4mB,EAEM4iB,QAAP,WAEI,IADA,IAAMC,EAAgB/oC,KAAKyoC,UAAUppC,OAC5BC,EAAI,EAAGA,EAAIypC,IAAiBzpC,EAAG,CACpC,IAAMu0B,EAAM7zB,KAAKyoC,UAAUtU,MAAM70B,GACjCu0B,EAAIrrB,QACJxI,KAAKuoC,SAASvoC,KAAKwoC,UAAY3U,CAClC,CACD7zB,KAAKyoC,UAAUjgC,OAClB,EAAA6/B,CAAA,CA7DyB,GAgEjBW,GAAsB,WAO/B,SAAAA,IAAAhpC,KANOuL,4BAAsB,EAAAvL,KACtByL,uBAAiB,EAAAzL,KACjB0L,iBAAW,EAAA1L,KACX2L,yBAAmB,EAAA3L,KACnB4L,gCAA0B,EAG7B5L,KAAKuL,uBAAyB,IAAI88B,GAAkBzgC,GAA0B,GAC9E5H,KAAKyL,kBAAoB,IAAI48B,GAAkB5/B,GAAqB,GACpEzI,KAAK0L,YAAc,IAAI28B,GAAkB5+B,GAAe,GACxDzJ,KAAK2L,oBAAsB,IAAI08B,GAAkBt+B,GAAuB,GACxE/J,KAAK4L,2BAA6B,IAAIy8B,GAAkB/9B,GAA8B,EAC1F,CAAC,IAAA2+B,EAAAD,EAAApoC,UAqCA,OArCAqoC,EAEM59B,UAAP,SAAkBogB,GACVA,EAAWzgB,oBAAoB3L,SAC/BW,KAAKuL,uBAAuBC,SAASigB,EAAWzgB,qBAChDygB,EAAWzgB,oBAAoBxC,SAG/BijB,EAAWxgB,eAAe5L,SAC1BW,KAAKyL,kBAAkBD,SAASigB,EAAWxgB,gBAC3CwgB,EAAWxgB,eAAezC,SAG1BijB,EAAWvgB,SAAS7L,SACpBW,KAAK0L,YAAYF,SAASigB,EAAWvgB,UACrCugB,EAAWvgB,SAAS1C,SAGpBijB,EAAWtgB,iBAAiB9L,SAC5BW,KAAK2L,oBAAoBH,SAASigB,EAAWtgB,kBAC7CsgB,EAAWtgB,iBAAiB3C,SAG5BijB,EAAWrgB,wBAAwB/L,SACnCW,KAAK4L,2BAA2BJ,SAASigB,EAAWrgB,yBACpDqgB,EAAWrgB,wBAAwB5C,SAGvCijB,EAAW3gB,KAAKtC,OACnB,EAAAygC,EAEMC,YAAP,WACIlpC,KAAKuL,uBAAuBu9B,UAC5B9oC,KAAKyL,kBAAkBq9B,UACvB9oC,KAAK0L,YAAYo9B,UACjB9oC,KAAK2L,oBAAoBm9B,UACzB9oC,KAAK4L,2BAA2Bk9B,SACnC,EAAAE,CAAA,CAlD8B,GC8LtBG,GAAkB,WAY3B,SAAAA,IAAAnpC,KAXQopC,gBAA4C,KAAIppC,KAChDqpC,gBAA4C,KAWjC/qC,GAAoBE,QACvC,CAJC,OAIA2qC,EAAAvoC,UAEDiM,QAAA,WAEC,EAAAnO,EAAAyqC,EAAA,CAAA,CAAAxqC,IAAA,iBAAAC,IAdD,WACI,OAAOoB,KAAKopC,eAChB,GAAC,CAAAzqC,IAAA,iBAAAC,IAED,WACI,OAAOoB,KAAKqpC,eAChB,KAACF,CAAA,CAV0B,GC5PlBG,GAAgB,SAAAC,GAAA,SAAAD,IAAA,IAAA,IAAAxhC,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GAQ0D,OAR1D9d,EAAAyhC,EAAA1jB,KAAA1Y,MAAAo8B,EAAA,CAAAvpC,MAAA8lB,OAAAH,KAAA3lB,MAClBwpC,UAA2B,KAAI1hC,EAC/B2hC,YAA6B,KAAI3hC,EAChC4hC,QAAoC,KAAI5hC,EACxC6hC,aAA0C,KAAI7hC,EAI9C8hC,yBAAuE,KAAI9hC,CAAA,CAR1DS,EAAA+gC,EAAAC,GAQ0D,IAAArjB,EAAAojB,EAAA1oC,UAwHlF,OAxHkFslB,EAC5EC,WAAP,SAAmB9G,GACfrf,KAAK0pC,QAAUrqB,EAAKwqB,aACpB,IAAQ/5B,EAAkBuP,EAAlBvP,MAAOC,EAAWsP,EAAXtP,OACf/P,KAAK0pC,QAAQ55B,MAAQA,EACrB9P,KAAK0pC,QAAQ35B,OAASA,EAEtB/P,KAAK4pC,yBAA2B5pC,KAAK8pC,oBAAoB7iB,KAAKjnB,MAC9D,IAAM8L,EAASxN,GAAoBE,SACdsN,EAAOC,aACfg+B,KAAK7qB,KAAKlf,KAAK4pC,0BAAyB,OAAO,WAE5D,IACA,IAAMI,EAAel+B,EAAOk+B,aAC5Bl+B,EAAOm+B,WAAW9jB,WACd6jB,EAAaE,gBACbF,EAAaG,yBACbH,EAAaI,qBAGjBpqC,KAAKqqC,eAAev6B,EAAOC,GAC3B/P,KAAKq3B,qBAAuBr3B,KAAKsqC,2BAA2Bx6B,EAAOC,GACnE/P,KAAKwpC,UAAY19B,EAAOsE,cAAc,IAAIm3B,GACtCvhC,EAAYE,MACZ4I,EAAgBE,QAAUF,EAAgB1C,aAC1C7J,EAAOkB,MACP,EACA,EACA4d,EAAe/f,OAEnBtB,KAAKypC,YAAc39B,EAAOsE,cAAc,IAAIm3B,GACxCvhC,EAAYK,KACZyI,EAAgBE,QAAUF,EAAgB1C,aAC1C7J,EAAOkB,MACP,EACA,EACA4d,EAAe/f,KACf,IAGJ,IAAMipC,EAAgB,IAAIC,GAC1BD,EAAc/2B,UAAU1D,MAAQ,EAChCy6B,EAAc/2B,UAAUzD,OAAS,EAEjC,IAAM06B,EAAc,IAAI18B,WAAW/N,KAAKwpC,UAAUn/B,MAClDogC,EAAYhkB,KAAK,GACjB3a,EAAO8nB,qBAAqB,CAAC6W,GAAczqC,KAAKwpC,UAAW,CAACe,IAE5DA,EAAcrpB,UAAU6D,WAAa,EACrCjZ,EAAO8nB,qBACH,CAAC6W,EAAaA,EAAaA,EAAaA,EAAaA,EAAaA,GAClEzqC,KAAKypC,YACL,CAACc,IAGLvqC,KAAK2pC,aAAe,IAAIR,EAC3B,EAAAjjB,EAEe4E,OAAhB,SAAwBhb,EAAeC,GACnC,IAAMjE,EAASxN,GAAoBE,SAASuN,aAE5C+D,EAAQ4H,KAAKgT,IAAI,EAAGhT,KAAKC,IAAI7H,EAAOhE,EAAO4+B,OAAOC,wBAClD56B,EAAS2H,KAAKgT,IAAI,EAAGhT,KAAKC,IAAI5H,EAAQjE,EAAO4+B,OAAOC,wBAEhD3qC,KAAK4qC,cAAc96B,QAAUA,GAAS9P,KAAK4qC,cAAc76B,SAAWA,IACpE86B,EAA6B/6B,uBAAAA,EAASC,IAAAA,GACtC/P,KAAK0pC,QAAS55B,MAAQA,EACtB9P,KAAK0pC,QAAS35B,OAASA,EACvB/P,KAAK4qC,cAAc9f,OAAOhb,EAAOC,GACjC/P,KAAKq3B,qBAAqBvM,OAAOhb,EAAOC,GAE/C,EAAAmW,EAEerZ,QAAhB,WACQ7M,KAAK0pC,SAAW1pC,KAAK4pC,2BACrB5pC,KAAK4pC,yBAA2B,MAGhC5pC,KAAKwpC,YACLxpC,KAAKwpC,UAAU38B,UACf7M,KAAKwpC,UAAY,MAGjBxpC,KAAKypC,cACLzpC,KAAKypC,YAAY58B,UACjB7M,KAAKypC,YAAc,MAGnBzpC,KAAK2pC,eACL3pC,KAAK2pC,aAAa98B,UAClB7M,KAAK2pC,aAAe,MAExB3pC,KAAK0pC,QAAU,IAClB,EAAAxjB,EA6BOmkB,eAAR,SAAwBv6B,EAAeC,GACnC,IAAMjE,EAASxN,GAAoBE,SAC7BssC,EAAqBh/B,EAAOi/B,gBAC5BA,EAAkBplC,GAAsBmlC,GAC9C,IAAK9qC,KAAK4qC,cAAe,CACrB,IACMI,EAAoC,CACtCl/B,OAFiBA,EAAOC,aAGxBzJ,OAAQyoC,EACRE,UAAW,UAEfn/B,EAAOk/B,UAAYA,EACnBl/B,EAAOo/B,QAAQC,UAAUH,EAC5B,CASD,OARAhrC,KAAK4qC,cAAgB,IAAI7D,GACzB/mC,KAAK4qC,cAAcvD,uBAAuB,CACtC5Y,UAAWzuB,KACXsC,OAAQwoC,EACRh7B,MAAAA,EACAC,OAAAA,IAEH/P,KAAK4qC,cAAgClgC,WAAWA,WAAaoB,EAAOo/B,QAAQE,oBACrEprC,KAAK4qC,aAChB,EAAA1kB,EAEOokB,2BAAR,SAAoCx6B,EAAeC,GAC/C,IAAMjE,EAASxN,GAAoBE,SAC7B6sC,EAAY,IAAI9D,GAClBvhC,EAAYE,MACZ4I,EAAgBM,yBAA2BN,EAAgBE,QAC3DzM,EAAOwC,cACP+K,EACAC,GAGJ,OADqBjE,EAAOsE,cAAci7B,EAE7C,EAAAnlB,EAEO4jB,oBAAR,WACI/e,EAAO,MACP3mB,EAAK,qBACR,EAAA1F,EAAA4qC,EAAA,CAAA,CAAA3qC,IAAA,cAAAC,IAtKD,WACI,OAAOoB,KAAK2pC,YAChB,GAAC,CAAAhrC,IAAA,eAAAC,IAgGD,WAEI,OADCoB,KAAK4qC,cAAgClgC,WAAWA,WAAapM,GAAoBE,SAAS0sC,QAAQE,oBAC5FprC,KAAK4qC,aAChB,GAAC,CAAAjsC,IAAA,kBAAAC,IAED,WAEI,OADCoB,KAAK4qC,cAAgClgC,WAAWA,WAAapM,GAAoBE,SAAS0sC,QAAQE,oBAC3FprC,KAAK4qC,cAAgClgC,WAAWA,UAC5D,GAAC,CAAA/L,IAAA,sBAAAC,IAED,WAEI,OADCoB,KAAK4qC,cAAgClgC,WAAWA,WAAapM,GAAoBE,SAAS0sC,QAAQE,oBAC3FprC,KAAK4qC,cAAgClgC,WAAWA,WAAYgR,YACxE,GAAC,CAAA/c,IAAA,sBAAAC,IAED,WACI,OAAOoB,KAAKq3B,oBAChB,GAAC,CAAA14B,IAAA,yBAAAC,IAED,WACI,OAAQoB,KAAKq3B,qBAAwC3sB,WAAWA,UACpE,GAAC,CAAA/L,IAAA,6BAAAC,IAED,WACI,OAAQoB,KAAKq3B,qBAAwC3sB,WAAWA,WAAYgR,YAChF,KAAC4tB,CAAA,CAhIwB,CAAQgC,ICGjCC,GAAoC,KAClCC,GAAsB,GAE5B,SAASC,GAAUC,EAAaC,GAC5B,OAAO,IAAIC,SAAc,SAACC,EAASC,GAC/B,IAAMC,EAAe,SAACC,GAAQ,MAAA,sCAAmDA,CAAK,EAEtFN,EAAY,CACRO,gBACIC,SAAAA,EACAC,GAEAF,GAAgBN,EAASO,GAAchtB,MAAK,SAACktB,GACzCD,EAAgBC,EAAO5tC,SAAU4tC,EAAOlyB,OAC5C,IAAE,OAAO,SAAC8xB,GAAG,OAAKF,EAAOC,EAAaC,MAC1C,IACD9sB,MAAK,SAACmtB,GACLd,GAAec,EACfb,GAAav2B,SAAQ,SAAC4a,GAClBA,EAAG0b,GACP,OACDrsB,KAAK2sB,GAAQ,OAAO,SAACG,GAAQ,OAAKF,EAAOC,EAAaC,MAC7D,GACJ,CAmCA,SAAsBM,KAA8B,OAAAC,GAAAp/B,MAAAnN,KAAAsS,UAAA,CA6BnD,SAAAi6B,KAAA,OAAAA,GA7BMh6B,EAAAC,IAAAC,MAAA,SAAAwB,IAAA,IAAAu4B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAz6B,IAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAGF,OAFKm5B,EAAc,SAACU,GACjB5mC,EAAM,0CAA2C4mC,EACpD,EAAA/5B,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAES85B,KAAuB,KAAA,EAAA,IAbtBC,GAAIC,WAAWD,GAAIE,QAAQC,MAcT,CAAAp6B,EAAAE,KAAA,GAAA,KAAA,CAAA,OAAAF,EAAAE,KAAA,EAMXu4B,QAAQ4B,IAAI,CAClBtzB,EAAAuzB,OAAO,yBACPvzB,EAAAuzB,OAAO,yBACPvzB,SAAO,uBACPA,EAAOuzB,OAAA,yBACT,KAAA,EAI0C,OAJ1ChB,EAAAt5B,EAAAu6B,KATEhB,EAAUD,EAAA,GACVE,EAAcF,EAAA,GACdG,EAAWH,EAAA,GACXI,EAAeJ,EAAA,GAObK,EAAcJ,EAAkB,QAChCK,EAAcJ,EAAsB,QACpCK,EAAeJ,EAAmB,QAClCK,EAAeJ,EAAuB,QAAA15B,EAAAE,KAAA,GACtCu4B,QAAQ4B,IAAI,CAAC/B,GAASqB,EAAaC,GAActB,GAASuB,EAAcC,KAAe,KAAA,GAAA95B,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,MAEvF,IAAIjR,MAAM,qDAAoD,KAAA,GAAA+Q,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAw6B,GAAAx6B,EAAA,MAAA,GAGxEq5B,EAAkBr5B,EAAAw6B,IAAC,KAAA,GAAA,IAAA,MAAA,OAAAx6B,EAAAa,OAAA,GAAAC,EAAA,KAAA,CAAA,CAAA,EAAA,WAE1B9G,MAAAnN,KAAAsS,UAAA,CAEDk5B,GAAat+B,MpBnDG,SAAsBrN,GAClCD,GAAcC,EAClB,IGiBA,IAAa+tC,GAAaC,EAAA,eAAA,SAAAC,GAAA,SAAAF,IAAA,IAAA,IAAA9lC,EAAA4d,EAAApT,UAAAjT,OAAAsmB,EAAA,IAAA1Y,MAAAyY,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,GAAAtT,UAAAsT,GA+EwC,OA/ExC9d,EAAAgmC,EAAAjoB,KAAA1Y,MAAA2gC,EAAA,CAAA9tC,MAAA8lB,OAAAH,KAAA3lB,MAgEfiqC,WAA+B,IAAIrE,GAAkB99B,EACrDwlB,aAAuC,IAAI0b,GAAwBlhC,EACnE0hC,UAAkC,KAAI1hC,EACtC2hC,YAAoC,KAAI3hC,EACxC+f,gBAAoC,IAAI9nB,GAAkB+H,EAEzDimC,SAA0C,KAAIjmC,EAC9CkmC,QAAwC,KAAIlmC,EAC5CqL,SAAoC,KAAIrL,EACxCmmC,WAAqC,KAAInmC,EACzComC,cAAQ,EAAApmC,EACRqmC,YAAM,EAAArmC,EACNsmC,iBAAiD,KAAItmC,EACrDumC,oBAAqB,EAAKvmC,EAC1BwmC,WAA4C,KAAIxmC,EAC9CymC,kBAAoB,IAAIthC,MAAe1K,EAAOisC,OAAM1mC,CAAA,CA/ExCS,EAAAqlC,EAAAE,GA+EwC,IAzC7BW,EA2CVC,EAiTCC,EAnTsCzoB,EAAA0nB,EAAAhtC,UAyf7D,OAzf6DslB,EA9EvD0oB,gBAAP,SAAwBvvB,GACpB,IAAMoP,EAAY,IAAI6a,GAGtB,OAFAtpC,KAAKiuC,WAAaxf,EAClBA,EAAUtI,WAAW9G,GACdoP,CACV,EAAAvI,EACM2oB,WAAP,SAAmBxvB,GACf,IAAMvgB,EAAO+lC,GAAQiK,YAAYzvB,GAIjC,OAHKrf,KAAK2mB,UAAUnQ,IAAI1X,IACpBkB,KAAK2mB,UAAU3Y,IAAIlP,EAAM,IAAIulC,GAAchlB,EAAMvgB,IAE9CkB,KAAK2mB,UAAU/nB,IAAIE,EAC7B,EAAAonB,EACMwI,cAAP,WACI,MAAO,CAAC1uB,KAAKiuC,WAChB,EAAA/nB,EACM6oB,kBAAP,SAA0B1vB,GACtB,IAAMvgB,EAAOkwC,GAAeF,YAAYzvB,GAIxC,OAHKrf,KAAKivC,kBAAkBz4B,IAAI1X,IAC5BkB,KAAKivC,kBAAkBjhC,IAAIlP,EAAM,IAAIkwC,GAAe3vB,EAAMvgB,IAEvDkB,KAAKivC,kBAAkBrwC,IAAIE,EACrC,EAAAonB,EACMgpB,kBAAP,SAA0B7vB,GACtB,IAAMvgB,EAAOqwC,GAAeL,YAAYzvB,GAIxC,OAHKrf,KAAKovC,iBAAiB54B,IAAI1X,IAC3BkB,KAAKovC,iBAAiBphC,IAAIlP,EAAM,IAAIqwC,GAAe9vB,EAAMvgB,IAEtDkB,KAAKovC,iBAAiBxwC,IAAIE,EACpC,EAAAonB,EACMmpB,iBAAP,SAAyBhwB,GACrB,IAAMvgB,EAAOwwC,GAAcR,YAAYzvB,GAIvC,OAHKrf,KAAKuvC,gBAAgB/4B,IAAI1X,IAC1BkB,KAAKuvC,gBAAgBvhC,IAAIlP,EAAM,IAAIwwC,GAAcjwB,EAAMvgB,IAEpDkB,KAAKuvC,gBAAgB3wC,IAAIE,EACnC,EAAAonB,EACYspB,sBAAoBf,EAAAl8B,EAAAC,IAAAC,MAAjC,SAAmClS,EAAAA,EAA4BoK,EAA4BC,GAAqC,OAAA4H,IAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EACtHrB,GAAiChS,KAAOO,EAA0BmK,WAAYC,EAASC,GAAQ,KAAA,EAAA,IAAA,MAAA,OAAAuI,EAAAa,OAAA,GAAAC,EAAAjU,UACxG,SAAAiS,EAAAC,EAAAC,GAAA,OAAAs8B,EAAAthC,MAAAnN,KAAAsS,UAAA,GAAA4T,EACMupB,cAAP,WAEC,EAAAvpB,EAsCYC,YAAUuoB,EAAAn8B,EAAAC,IAAAC,MAAvB,WAAyB4M,GAA0B,OAAA7M,IAAAU,MAAA,SAAAw8B,GAAA,cAAAA,EAAAt8B,KAAAs8B,EAAAr8B,MAAA,KAAA,EACT,OAAtC/U,GAAoBC,YAAYyB,MAAM0vC,EAAAC,OAAA,SAC/B3vC,KAAK4vC,WAAWvwB,IAAK,KAAA,EAAA,IAAA,MAAA,OAAAqwB,EAAA17B,OAAA,GAAA67B,EAAA7vC,UAC/B,SAAAoS,GAAA,OAAAs8B,EAAAvhC,MAAAnN,KAAAsS,UAAA,GAAA4T,EAUS4pB,mBAAV,SAA8BC,GAC1B/vC,KAAKgwC,gBAAgBvpB,KAAKwpB,GAAiB3uC,MAE3CtB,KAAKuuC,kBAAkB9nB,MAAK,GAE5B,IAAIypB,EAA6BD,GAAiBE,cAAgBF,GAAiBG,gBAC7EH,GAAiBI,gBAAkBJ,GAAiBK,cAAgBL,GAAiBM,iBAE3FvwC,KAAKgwC,gBAAgBztC,EAAO+B,IAAM4rC,EAClClwC,KAAKgwC,gBAAgBztC,EAAOI,KAAOutC,EACnClwC,KAAKgwC,gBAAgBztC,EAAOiuC,MAAQN,EACpClwC,KAAKgwC,gBAAgBztC,EAAOkB,OAASysC,EAErCA,EAAcD,GAAiBE,cAAgBF,GAAiBG,gBAC1DH,GAAiBI,gBAAkBJ,GAAiBK,cAE1DtwC,KAAKgwC,gBAAgBztC,EAAOgC,MAAQ2rC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOK,OAASstC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOkuC,QAAUP,EACtClwC,KAAKgwC,gBAAgBztC,EAAOoB,SAAWusC,EACvClwC,KAAKgwC,gBAAgBztC,EAAOmuC,QAAUR,EACtClwC,KAAKgwC,gBAAgBztC,EAAOouC,OAAST,EACrClwC,KAAKgwC,gBAAgBztC,EAAOquC,QAAUV,EACtClwC,KAAKgwC,gBAAgBztC,EAAOsC,SAAWqrC,EAEvClwC,KAAKgwC,gBAAgBztC,EAAOsuC,OAASX,EACrClwC,KAAKgwC,gBAAgBztC,EAAOmB,UAAYwsC,EAExClwC,KAAKgwC,gBAAgBztC,EAAO8gB,YAAc6sB,EAC1ClwC,KAAKgwC,gBAAgBztC,EAAOuuC,QAAUZ,EAEtClwC,KAAKgwC,gBAAgBztC,EAAOuC,OAASorC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOwC,eAAiBmrC,EAE7ClwC,KAAKgwC,gBAAgBztC,EAAOwuC,WAAad,GAAiBE,cAAgBF,GAAiBI,gBACrFJ,GAAiBG,gBAAkBH,GAAiBK,cAE1DJ,EAAcD,GAAiBE,cAAgBF,GAAiBG,gBAC1DH,GAAiBI,gBAAkBJ,GAAiBM,iBAE1DvwC,KAAKgwC,gBAAgBztC,EAAOqC,MAAQsrC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOQ,OAASmtC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOyuC,QAAUd,EACtClwC,KAAKgwC,gBAAgBztC,EAAOuB,SAAWosC,EAEvCA,EAAcD,GAAiBI,gBAAkBJ,GAAiBE,cAChEF,GAAiBG,gBAAkBH,GAAiBM,iBAEtDvwC,KAAKgwC,gBAAgBztC,EAAOC,MAAQ0tC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOW,OAASgtC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOc,QAAU6sC,EACtClwC,KAAKgwC,gBAAgBztC,EAAO0B,SAAWisC,EAEvClwC,KAAKgwC,gBAAgBztC,EAAOwuC,WAAad,GAAiBE,cAAgBF,GAAiBI,gBACrFJ,GAAiBG,gBAAkBH,GAAiBK,cAE1DJ,EAAcD,GAAiBE,cAAgBF,GAAiBI,gBAC1DJ,GAAiBG,gBAAkBH,GAAiBK,cAAgBL,GAAiBM,iBAE3FvwC,KAAKgwC,gBAAgBztC,EAAOkC,KAAOyrC,EACnClwC,KAAKgwC,gBAAgBztC,EAAOiC,MAAQ0rC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOmC,MAAQwrC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOoC,OAASurC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOG,MAAQwtC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOE,OAASytC,EAErClwC,KAAKgwC,gBAAgBztC,EAAOO,MAAQotC,EACpClwC,KAAKgwC,gBAAgBztC,EAAOM,OAASqtC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOU,OAASitC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOS,QAAUktC,EACtClwC,KAAKgwC,gBAAgBztC,EAAOa,OAAS8sC,EACrClwC,KAAKgwC,gBAAgBztC,EAAOY,QAAU+sC,EAEtClwC,KAAKgwC,gBAAgBztC,EAAO0uC,OAASf,EACrClwC,KAAKgwC,gBAAgBztC,EAAO2uC,QAAUhB,EACtClwC,KAAKgwC,gBAAgBztC,EAAO4uC,QAAUjB,EACtClwC,KAAKgwC,gBAAgBztC,EAAO6uC,SAAWlB,EACvClwC,KAAKgwC,gBAAgBztC,EAAOgB,QAAU2sC,EACtClwC,KAAKgwC,gBAAgBztC,EAAOe,SAAW4sC,EAEvClwC,KAAKgwC,gBAAgBztC,EAAOsB,QAAUqsC,EACtClwC,KAAKgwC,gBAAgBztC,EAAOqB,SAAWssC,EACvClwC,KAAKgwC,gBAAgBztC,EAAOyB,SAAWksC,EACvClwC,KAAKgwC,gBAAgBztC,EAAOwB,UAAYmsC,EACxClwC,KAAKgwC,gBAAgBztC,EAAO4B,SAAW+rC,EACvClwC,KAAKgwC,gBAAgBztC,EAAO2B,UAAYgsC,EAExClwC,KAAKuuC,kBAAkBhsC,EAAO+B,KAAM,EACpCtE,KAAKuuC,kBAAkBhsC,EAAOI,MAAO,EACrC3C,KAAKuuC,kBAAkBhsC,EAAOiuC,OAAQ,EACtCxwC,KAAKuuC,kBAAkBhsC,EAAOmuC,SAAU,EACxC1wC,KAAKuuC,kBAAkBhsC,EAAOouC,QAAS,EAEvC3wC,KAAKuuC,kBAAkBhsC,EAAOquC,SAAU,EACxC5wC,KAAKuuC,kBAAkBhsC,EAAOkB,QAAS,EACvCzD,KAAKuuC,kBAAkBhsC,EAAOsC,UAAW,EACzC7E,KAAKuuC,kBAAkBhsC,EAAOwuC,YAAa,EAC3C/wC,KAAKuuC,kBAAkBhsC,EAAOmB,WAAY,EAE1C1D,KAAKuuC,kBAAkBhsC,EAAOkC,MAAO,EACrCzE,KAAKuuC,kBAAkBhsC,EAAOiC,OAAQ,EACtCxE,KAAKuuC,kBAAkBhsC,EAAOmC,OAAQ,EACtC1E,KAAKuuC,kBAAkBhsC,EAAOoC,QAAS,EACvC3E,KAAKuuC,kBAAkBhsC,EAAOG,OAAQ,EACtC1C,KAAKuuC,kBAAkBhsC,EAAOE,QAAS,EAEvCzC,KAAKuuC,kBAAkBhsC,EAAOO,OAAQ,EACtC9C,KAAKuuC,kBAAkBhsC,EAAOM,QAAS,EACvC7C,KAAKuuC,kBAAkBhsC,EAAOU,QAAS,EACvCjD,KAAKuuC,kBAAkBhsC,EAAOS,SAAU,EACxChD,KAAKuuC,kBAAkBhsC,EAAOa,QAAS,EACvCpD,KAAKuuC,kBAAkBhsC,EAAOY,SAAU,EAExCnD,KAAKuuC,kBAAkBhsC,EAAOsB,SAAU,EACxC7D,KAAKuuC,kBAAkBhsC,EAAOqB,UAAW,EACzC5D,KAAKuuC,kBAAkBhsC,EAAOyB,UAAW,EACzChE,KAAKuuC,kBAAkBhsC,EAAOwB,WAAY,EAC1C/D,KAAKuuC,kBAAkBhsC,EAAO4B,UAAW,EACzCnE,KAAKuuC,kBAAkBhsC,EAAO2B,WAAY,EAE1ClE,KAAKuuC,kBAAkBhsC,EAAOuC,QAAS,EACvC9E,KAAKuuC,kBAAkBhsC,EAAOwC,gBAAiB,EAE3CgrC,EAAKv5B,IAAI,wBACTxW,KAAKgwC,gBAAgBztC,EAAOC,OAASytC,GAAiBE,cACtDnwC,KAAKgwC,gBAAgBztC,EAAOW,QAAU+sC,GAAiBE,cACvDnwC,KAAKgwC,gBAAgBztC,EAAO0B,UAAYgsC,GAAiBE,cAEzDnwC,KAAKuuC,kBAAkBhsC,EAAOC,OAAQ,EACtCxC,KAAKuuC,kBAAkBhsC,EAAOW,QAAS,EACvClD,KAAKuuC,kBAAkBhsC,EAAO0B,UAAW,EAEzCjE,KAAKgwC,gBAAgBztC,EAAOc,SAAW4sC,GAAiBK,cACxDtwC,KAAKgwC,gBAAgBztC,EAAO0B,UAAYgsC,GAAiBK,cACzDtwC,KAAKgwC,gBAAgBztC,EAAOC,OAASytC,GAAiBK,cACtDtwC,KAAKgwC,gBAAgBztC,EAAOW,QAAU+sC,GAAiBK,eAGvDP,EAAKv5B,IAAI,gBACTxW,KAAKuuC,kBAAkBhsC,EAAOqC,OAAQ,EACtC5E,KAAKuuC,kBAAkBhsC,EAAOQ,QAAS,EACvC/C,KAAKuuC,kBAAkBhsC,EAAOuB,UAAW,EAEzC9D,KAAKgwC,gBAAgBztC,EAAOyuC,SAAWf,GAAiBK,cACxDtwC,KAAKgwC,gBAAgBztC,EAAOuB,UAAYmsC,GAAiBK,cACzDtwC,KAAKgwC,gBAAgBztC,EAAOqC,OAASqrC,GAAiBK,cACtDtwC,KAAKgwC,gBAAgBztC,EAAOQ,QAAUktC,GAAiBK,eAG3D,IAAMe,EAAmCpB,GAAiBG,gBAAkBH,GAAiBK,cAEzFP,EAAKv5B,IAAI,8BACTxW,KAAKgwC,gBAAgBztC,EAAO+uC,WAAaD,EACzCrxC,KAAKgwC,gBAAgBztC,EAAOgvC,YAAcF,EAC1CrxC,KAAKgwC,gBAAgBztC,EAAOivC,YAAcH,EAC1CrxC,KAAKgwC,gBAAgBztC,EAAOkvC,eAAiBJ,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAOmvC,cAAgBL,EAC5CrxC,KAAKgwC,gBAAgBztC,EAAOovC,eAAiBN,GAG7CtB,EAAKv5B,IAAI,4BACTxW,KAAKgwC,gBAAgBztC,EAAOqvC,KAAOP,EACnCrxC,KAAKgwC,gBAAgBztC,EAAOyC,WAAaqsC,EACzCrxC,KAAKgwC,gBAAgBztC,EAAOsvC,UAAYR,EACxCrxC,KAAKgwC,gBAAgBztC,EAAO0C,gBAAkBosC,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAO2C,KAAOmsC,EACnCrxC,KAAKgwC,gBAAgBztC,EAAO4C,UAAYksC,EACxCrxC,KAAKgwC,gBAAgBztC,EAAO6C,KAAOisC,EACnCrxC,KAAKgwC,gBAAgBztC,EAAO8C,UAAYgsC,GAGxCtB,EAAKv5B,IAAI,8BACTxW,KAAKgwC,gBAAgBztC,EAAOuvC,eAAiBT,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAOwvC,eAAiBV,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAOyvC,eAAiBX,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAO0vC,eAAiBZ,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAO2vC,eAAiBb,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAO4vC,eAAiBd,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAO6vC,eAAiBf,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAO8vC,eAAiBhB,EAC7CrxC,KAAKgwC,gBAAgBztC,EAAO+vC,gBAAkBjB,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOgwC,gBAAkBlB,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOiwC,gBAAkBnB,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOkwC,iBAAmBpB,EAC/CrxC,KAAKgwC,gBAAgBztC,EAAOmwC,iBAAmBrB,EAC/CrxC,KAAKgwC,gBAAgBztC,EAAOowC,iBAAmBtB,EAE/CrxC,KAAKgwC,gBAAgBztC,EAAOqwC,gBAAkBvB,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOswC,gBAAkBxB,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOuwC,gBAAkBzB,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOwwC,gBAAkB1B,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAOywC,gBAAkB3B,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAO0wC,gBAAkB5B,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAO2wC,gBAAkB7B,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAO4wC,gBAAkB9B,EAC9CrxC,KAAKgwC,gBAAgBztC,EAAO6wC,iBAAmB/B,EAC/CrxC,KAAKgwC,gBAAgBztC,EAAO8wC,iBAAmBhC,EAC/CrxC,KAAKgwC,gBAAgBztC,EAAO+wC,iBAAmBjC,EAC/CrxC,KAAKgwC,gBAAgBztC,EAAOgxC,kBAAoBlC,EAChDrxC,KAAKgwC,gBAAgBztC,EAAOixC,kBAAoBnC,EAChDrxC,KAAKgwC,gBAAgBztC,EAAOkxC,kBAAoBpC,EAEvD,EAAAnrB,EAEMwtB,wBAAP,SACI13B,EACA23B,GAEA,IAAI50C,EAAWC,GAAegd,EAAMtC,WAAY,GAC1Ck6B,EAAa5zC,KAAK6nB,gBACxB,GAAI7L,EAAM3b,OAAQ,CAId,GAHAtB,EAAWG,GAAe8c,EAAM3b,OAAOoH,KAAO1I,GAC1Cid,EAAM3b,OAAOsZ,mBAAkB5a,EAAWC,GAAegd,EAAM3b,OAAOsZ,iBAAmB,EAAI,EAAG5a,SAChEW,IAAhCsc,EAAM3b,OAAOuZ,iBAA8B7a,EAAWC,GAAegd,EAAM3b,OAAOuZ,eAAgB7a,IAClG60C,EAAW3zC,kBAAkBuW,IAAIzX,GACjC,OAAO60C,EAAW3zC,kBAAkBrB,IAAIG,GAG5C,IAAMgC,EAAa,IAAIC,EAMvB,OALAD,EAAWmL,MAAQynC,EAAaznC,MAChCnL,EAAWsJ,KAAOtJ,EAAW2f,OAAS,GACtC3f,EAAWmpB,SAAWypB,EAAazpB,SACnCnpB,EAAWqgB,MAAQuyB,EAAavyB,MAChCwyB,EAAW3zC,kBAAkB+N,IAAIjP,EAAUiB,KAAKwB,aAAaT,IACtD6yC,EAAW3zC,kBAAkBrB,IAAIG,EAC3C,CAAM,GAAIid,EAAMzb,QAAS,CAOtB,GALAxB,EAAWG,GAAe8c,EAAMzb,QAAQ2hB,WAAanjB,GACrDA,EAAWG,GAAe8c,EAAMzb,QAAQ8hB,cAAgBtjB,GACxDA,EAAWC,GAAegd,EAAMzb,QAAQgiB,aAAe,EAAI,EAAGxjB,GAC9DA,EAAWC,GAAe20C,EAAazjC,SAAUnR,GACjDA,EAAWC,GAAe20C,EAAa3jC,WAAYjR,GAC/C60C,EAAWzzC,mBAAmBqW,IAAIzX,GAClC,OAAO60C,EAAWzzC,mBAAmBvB,IAAIG,GAE7C,IAAMuoC,EAAU,IAAIC,GAChBoM,EAAalsC,KACbksC,EAAaznC,MACbynC,EAAarxC,OACboV,KAAAm8B,IAAA,EAAMF,EAAazjC,SAAW,GAACwH,KAAAm8B,IAC/B,EAAMF,EAAazjC,SAAW,GAC9ByjC,EAAavyB,MACbuyB,EAAa3jC,WACb2jC,EAAazjC,SACbyjC,EAAahkC,QACb,GAGJ,OADAikC,EAAWzzC,mBAAmB6N,IAAIjP,EAAUiB,KAAKoQ,cAAck3B,IACxDsM,EAAWzzC,mBAAmBvB,IAAIG,EAC5C,CAAM,GAAIid,EAAMvb,QAAS,CAGtB,GADA1B,EAAWG,GAAe8c,EAAMvb,QAAQgH,KAAO1I,GAC3C60C,EAAWxzC,mBAAmBoW,IAAIzX,GAClC,OAAO60C,EAAWxzC,mBAAmBxB,IAAIG,GAE7C,IAAM+0C,EAAc,IAAIC,GASxB,OARAD,EAAYrjC,UAAYkjC,EAAaljC,UACrCqjC,EAAYjjC,UAAY8iC,EAAa9iC,UACrCijC,EAAY/iC,UAAY4iC,EAAa5iC,UACrC+iC,EAAY9iC,SAAW2iC,EAAa3iC,SACpC8iC,EAAY7iC,SAAW0iC,EAAa1iC,SACpC6iC,EAAY3iC,SAAWwiC,EAAaxiC,SAEpCyiC,EAAWxzC,mBAAmB4N,IAAIjP,EAAUiB,KAAK6uC,WAAWiF,IACrDF,EAAWxzC,mBAAmBxB,IAAIG,EAC5C,CAEJ,EAAAmnB,EAEO8tB,sBAAR,WACI,IAAMnsB,EAAkB7nB,KAAK6nB,gBAEvBosB,EAAa,IAAIC,GACjBC,EAAgB,IAAIC,GAC1BD,EAAcx7B,QAAU,EACxBw7B,EAAcj9B,MAAQ,EACtBi9B,EAAc7xB,eAAiBE,EAAeC,eAC9C0xB,EAAcpyB,WAAajgB,EAAmBC,OAC9CkyC,EAAWt0B,SAASzS,KAAKinC,GACzBtsB,EAAgBnnB,UAAYV,KAAKq0C,0BAA0BJ,GAE3D,IAAMK,EAAW,IAAIrf,EACrBqf,EAAS75B,OAASoN,EAAgBnnB,UAClCmnB,EAAgBlnB,QAAUX,KAAKm1B,oBAAoBmf,GACnDzsB,EAAgBlnB,QAAQ4zC,WAAW,EAAG1sB,EAAgBxnB,QACtDwnB,EAAgBlnB,QAAQ6oB,QAC3B,EAAAtD,EAMa0pB,YAAUjB,EAAAp8B,EAAAC,IAAAC,MAAxB,WAA0B4M,GAA0B,IAAAm1B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApnB,EAAAqnB,EAAAC,EAAAC,EAAA11C,EAAA21C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7K,EAAA8K,EAAAlO,EAAAmO,EAAAC,EAAAC,EAAA50C,EAAA60C,EAAA9B,EAAA+B,EAAAhuB,EAAAiuB,EAAA,OAAAtjC,IAAAU,MAAA,SAAA6iC,GAAA,cAAAA,EAAA3iC,KAAA2iC,EAAA1iC,MAAA,KAAA,EACvB,OAAnBohC,EAAMuB,UAAUvB,IAAGsB,EAAA1iC,KAAA,EACA,MAAHohC,OAAG,EAAHA,EAAKwB,iBAAgB,KAAA,EAQ1C,OARDj2C,KAAK+tC,SAAQgI,EAAArI,KACPgH,EAAe10C,KAAK+tC,SAAUrD,OAAON,oBACrCuK,EAA8B30C,KAAK+tC,SAAUrD,OAAOwL,iCACpDtB,EAAmC,GACrC50C,KAAK+tC,SAAUyH,SAASh/B,IAAI,sBAC5Bo+B,EAAe1nC,KAAK,sBAEpB9I,EAAK,6DACR2xC,EAAA1iC,KAAA,GACoB,OADpBmhC,EACoBx0C,KAAK+tC,eAAL,EAAAyG,EAAe2B,cAAc,CAC9CC,eAAgB,CAEZhM,oBAAqBsK,EACrBwB,iCAAkCvB,GAEtC0B,iBAAkBzB,IACpB,KAAA,GAPU,OAAZ50C,KAAKguC,QAAO+H,EAAArI,KAAAqI,EAAA1iC,KAAA,GAnZZkS,KACJA,GAAoBqmB,QAAQC,UACvB3sB,MAAK,WAAA,OAAMotB,SAyZgB,KAAA,GAa5B,IAZAtsC,KAAKkuC,SAAW1uC,GAAOC,QACvBO,KAAKmuC,OAAS3uC,GAAOG,MAErBK,KAAKs2C,QAAUC,GAAIC,OACnBx2C,KAAKy2C,iBAAmB5wC,GAAsBmwC,UAAUvB,IAAIiC,4BACtD7B,EAAU70C,KAAK22C,oBAAsBt3B,EAAKu3B,mBAC1CnpB,EAAyB,GACzBqnB,EAAkC,GAClCC,EAAWF,EAAQgC,WAAW,GACpCppB,EAAasnB,GAAY,EACzBD,EAAsBC,GAAY,EAC5BC,EAAkBH,EAAQgC,WAAWx3C,OAClCC,EAAI,EAAGA,EAAI01C,IAAkB11C,EAC5B21C,EAASJ,EAAQgC,WAAWv3C,GAC5B41C,EAAUL,EAAQgC,WAAWv3C,EAAI,GAEvCmuB,EAAawnB,GAAUJ,EAAQiC,eAAe5B,GAAWznB,EAAaynB,GACtEJ,EAAsBG,GAAUJ,EAAQkC,wBAAwB7B,GAAWJ,EAAsBI,GAErG,IAAS51C,EAAI,EAAGA,EAAI01C,IAAkB11C,EAC5B21C,EAASJ,EAAQgC,WAAWv3C,GAElCw1C,EAAsBG,IAAWJ,EAAQiC,eAAe7B,GA6GZ,OA3GhDj1C,KAAKouC,iBAAmB,CACpB3gB,aAAAA,EACAqnB,sBAAAA,EACAkC,YAAanC,EAAQgC,WAAW7B,EAAiB,IAG/CK,EAAS4B,GAAO5B,OACtBr1C,KAAKmT,SAAWkiC,EAAO6B,WAAW,UACRl3C,KAAKguC,QAEzBsH,EAAct1C,KAAK+tC,SAAU1uB,KACnCrf,KAAKm3C,QAAU7B,EAAY8B,OAC3Bp3C,KAAKq3C,UAAY/B,EAAYxpC,OACvBypC,EAAcD,EAAYC,YAE1B7K,EAAU1qC,KAAK+tC,SAAUrD,OAC/B1qC,KAAKs3C,MAAMC,cAAgB,EAC3Bv3C,KAAKs3C,MAAME,kBAAoB,EAC/Bx3C,KAAKs3C,MAAMG,mBAAqB,IAChCz3C,KAAKs3C,MAAMnN,yBAA2B,GACtCnqC,KAAKs3C,MAAMlN,oBAAsBM,EAAON,oBACxCpqC,KAAKs3C,MAAMnN,yBAA2BO,EAAOgN,4BAC7C13C,KAAKs3C,MAAMK,eAAiBjN,EAAOC,sBACnC3qC,KAAKs3C,MAAMM,sBAAwBlN,EAAOmN,sBAC1C73C,KAAKs3C,MAAMQ,iBAAmBpN,EAAOqN,sBACrC/3C,KAAKs3C,MAAMG,mBAAsB/M,EAAOsN,gCAElCxC,EAAWx1C,KAAK+tC,SAAUyH,SAEhCx1C,KAAKquC,oBAAqB,EAE1BruC,KAAKi4C,UAAUxxB,MAAK,GACpBzmB,KAAKi4C,UAAU3K,GAAQ4K,qBAAsB,EAC7Cl4C,KAAKi4C,UAAU3K,GAAQ6K,mBAAoB,EAC3Cn4C,KAAKi4C,UAAU3K,GAAQ8K,0BAA2B,EAClDp4C,KAAK8vC,mBAAmB0F,GAExBx1C,KAAKqtB,OAASrtB,KAAKq4C,YAAY,IAAIC,GAAUC,GAAUC,WACvDx4C,KAAKy4C,SAAWz4C,KAAK04C,oBAAoB,IAAIC,GAAkB34C,KAAKqtB,SAE9Dia,EAAU,IAAIC,GAChBvhC,EAAYE,MACZ4I,EAAgB5N,QAAU4N,EAAgBE,QAAUF,EAAgB1C,aACpE7J,EAAOkB,MACP,GACA,GACA4d,EAAe/f,KACf,EACA,EACAs3C,GAAYC,GACZ,GAEEpD,EAAqBz1C,KAAKoQ,cAAck3B,GAExCoO,EAAc,IAAInO,GACpBvhC,EAAYK,KACZyI,EAAgB5N,QAAU4N,EAAgBE,QAAUF,EAAgB1C,aACpE7J,EAAOkB,MACP,GACA,GACA4d,EAAe/f,KACf,GAEEq0C,EAAyB31C,KAAKoQ,cAAcslC,GAE5C30C,EAAa,IAAIC,EACnBC,EAAeqL,QACfnL,EAAeC,OACf,GACA,GACAC,EAAcC,MAEZs0C,EAAsB51C,KAAKwB,aAAaT,GACxC+yC,EAAc,IAAIC,GAClB8B,EAAsB71C,KAAK6uC,WAAWiF,IACtCjsB,EAAkB7nB,KAAK6nB,iBACbxnB,OAASu1C,EACzB/tB,EAAgBtnB,QAAUk1C,EAC1B5tB,EAAgBpnB,QAAUo1C,EAC1BhuB,EAAgBrnB,YAAcm1C,EAC9B31C,KAAKg0C,wBAED8B,EAAmB,GAEnB91C,KAAK84C,kBAAkBv2C,EAAOw2C,YAC9BjD,GAAoB,SAGpB91C,KAAK84C,kBAAkBv2C,EAAO+uC,aAC9BwE,GAAoB,SAGpB91C,KAAK84C,kBAAkBv2C,EAAOqvC,OAC9BkE,GAAoB,QAGpB91C,KAAK84C,kBAAkBv2C,EAAOy2C,cAC9BlD,GAAoB,UAGpB91C,KAAK84C,kBAAkBv2C,EAAOuvC,iBAC9BgE,GAAoB,SAExBjL,EAAM,8BACNA,EAAmB,aAAA7qC,KAAKq3C,WACxBxM,EAAiB,WAAA7qC,KAAKm3C,SACtBtM,EAAK,gBAAiB0K,GACtB1K,EAAK,sBAAuBiL,GAAoBC,EAAApG,OAAA,SACzC/D,QAAQC,SAAQ,IAAK,KAAA,GAAA,IAAA,MAAA,OAAAkK,EAAA/hC,OAAA,GAAAilC,EAAAj5C,UAC/B,SAAAk5C,GAAA,OAAAvK,EAAAxhC,MAAAnN,KAAAsS,UAAA,GAAA4T,EAEMrZ,QAAP,WACQ7M,KAAKqtB,SACLrtB,KAAKqtB,OAAOxgB,UACZ7M,KAAKqtB,OAAS,MAGdrtB,KAAKy4C,WACLz4C,KAAKy4C,SAAS5rC,UACd7M,KAAKy4C,SAAW,MAKpB,IAFA,IAAM7jC,EAAK5U,KAAK2mB,UAAU4C,SACtB4vB,EAAMvkC,EAAGvB,QACL8lC,EAAI5gC,MACP4gC,EAAI1gC,MAAwB5L,UAC7BssC,EAAMvkC,EAAGvB,OAGbrT,KAAKiuC,WAAa,IACrB,EAAA/nB,EAEM4E,OAAP,WAEC,EAAA5E,EAEMkzB,QAAP,WAEC,EAAAlzB,EAkBMmzB,QAAP,WACI,IAAM9qC,EAASvO,KAAKqtB,OACpBrtB,KAAK4tB,cAAgBrf,EAAMyzB,aAC3BhiC,KAAK6tB,cAAgBtf,EAAM0zB,aAC3BjiC,KAAK8tB,SAAWvf,EAAM2zB,QACtB3zB,EAAM/F,OACT,EAAA0d,EAEMwyB,oBAAP,SAA4Br5B,GACxB,IAAMijB,EAAU,IAAI/W,GACpB,OAAI+W,EAAQnc,WAAW9G,GACZijB,EAEJ,IACV,EAAApc,EAEM1kB,aAAP,SAAqB6d,GACjB,IAAMhf,EAAS,IAAIqpB,GAEnB,OADArpB,EAAO8lB,WAAW9G,GACXhf,CACV,EAAA6lB,EAEM9V,cAAP,SAAsBiP,GAClB,IAAM9e,EAAU,IAAIwmC,GAEpB,OADAxmC,EAAQ4lB,WAAW9G,GACZ9e,CACV,EAAA2lB,EAEMiP,oBAAP,SAA4B9V,GACxB,IAAM6Q,EAAgB,IAAI1K,GAE1B,OADA0K,EAAc/J,WAAW9G,GAClB6Q,CACV,EAAAhK,EAEMozB,aAAP,SAAqBj6B,GACjB,IAAML,EAAS,IAAI8lB,GAEnB,OADA9lB,EAAOmH,WAAW9G,GACXL,CACV,EAAAkH,EAEMqzB,qBAAP,SAA6Bl6B,GACzB,IAAMgR,EAAiB,IAAI0H,GAE3B,OADA1H,EAAelK,WAAW9G,GACnBgR,CACV,EAAAnK,EAEMszB,iBAAP,SAAyBn6B,GACrB,IAAM0O,EAAa,IAAIyU,GAEvB,OADAzU,EAAW5H,WAAW9G,GACf0O,CACV,EAAA7H,EAEMuzB,kBAAP,SAA0Bp6B,GACtB,IAAM2O,EAAc,IAAI+I,GAExB,OADA/I,EAAY7H,WAAW9G,GAChB2O,CACV,EAAA9H,EAEMmuB,0BAAP,SAAkCh1B,GAC9B,IAAMq6B,EAAsB,IAAI7gB,GAEhC,OADA6gB,EAAoBvzB,WAAW9G,GACxBq6B,CACV,EAAAxzB,EAEMlM,qBAAP,SAA6BqF,GACzB,IAAMrG,EAAiB,IAAIkhB,GAC3B,OAAIlhB,EAAemN,WAAW9G,GACnBrG,EAEJ,IACV,EAAAkN,EAEMyzB,oBAAP,SAA4Bt6B,GACxB,IAAM0Q,EAAgB,IAAIuL,GAE1B,OADAvL,EAAc5J,WAAW9G,GAClB0Q,CACV,EAAA7J,EAEMmyB,YAAP,SAAoBh5B,GAChB,IAAM9Q,EAAQ,IAAIuzB,GAClB,OAAIvzB,EAAM4X,WAAW9G,GACV9Q,EAEJ,IACV,EAAA2X,EAEM0N,qBAAP,SAA6BjpB,EAA4BpK,EAAkBqK,GACvEiZ,GACI7jB,KACA2K,EACCpK,EAAqCmK,WACtCE,EAEP,EAAAsb,EAEM0zB,uBAAP,SACI74B,EACAxgB,EACAqK,GAEAkW,GACI9gB,KACA+gB,EACCxgB,EAAqCmK,WACtCE,EAEP,EAAAsb,EAEM2zB,wBAAP,WAMC,EAAA3zB,EAEM4zB,gBAAP,WAEC,EAAAp7C,EAAAkvC,EAAA,CAAA,CAAAjvC,IAAA,uBAAAC,IAnpBD,WACI,QAAKoB,KAAKsuC,YAG2B,kBAA9BtuC,KAAKsuC,WAAWrD,SAC3B,GAAC,CAAAtsC,IAAA,2BAAAC,IAED,WACI,OAAOoB,KAAKquC,kBAChB,GAAC,CAAA1vC,IAAA,kBAAAC,IAED,WACI,OAAOoB,KAAKouC,gBAChB,GAAC,CAAAzvC,IAAA,UAAAC,IAED,WACI,OAAOoB,KAAKmT,QAChB,GAAC,CAAAxU,IAAA,YAAAC,IA4BD,WACI,OAAOoB,KAAKsuC,UACf,EAAAtgC,IAND,SAAe+rC,GACX/5C,KAAKsuC,WAAayL,CACtB,GAAC,CAAAp7C,IAAA,kBAAAC,IAsSD,WACI,OAAOoB,KAAK+tC,SAAUyH,SAASh/B,IAAI,qBACvC,GAAC,CAAA7X,IAAA,eAAAC,IA0LD,WACI,OAAOoB,KAAKguC,OAChB,GAAC,CAAArvC,IAAA,UAAAC,IAGD,WAEI,OAAOoB,KAAKkuC,QAChB,GAAC,CAAAvvC,IAAA,QAAAC,IAGD,WAEI,OAAOoB,KAAKmuC,MAChB,KAACP,CAAA,CAxkBqB,CAAQqJ,KkBxFlC+C,GAASpM,aAAeA"}