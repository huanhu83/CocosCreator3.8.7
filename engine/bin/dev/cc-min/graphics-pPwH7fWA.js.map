{"version":3,"file":"graphics-pPwH7fWA.js","sources":["../../../cocos/2d/assembler/graphics/types.ts","../../../cocos/2d/assembler/graphics/helper.ts","../../../cocos/2d/assembler/graphics/webgl/impl.ts","../../../cocos/2d/components/graphics.ts"],"sourcesContent":["/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccenum } from '../../../core';\r\n\r\n/**\r\n * @en Enum for LineCap.\r\n * @zh 线段末端属性\r\n * @enum Graphics.LineCap\r\n */\r\nexport enum LineCap {\r\n    /**\r\n     * @en The ends of lines are squared off at the endpoints.\r\n     * @zh 线段末端以方形结束。\r\n     */\r\n    BUTT = 0,\r\n\r\n    /**\r\n     * @en The ends of lines are rounded.\r\n     * @zh 线段末端以圆形结束。\r\n     */\r\n    ROUND = 1,\r\n\r\n    /**\r\n     * @en The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\r\n     * @zh 线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域。\r\n     */\r\n    SQUARE = 2,\r\n}\r\n\r\nccenum(LineCap);\r\n\r\n/**\r\n * @en Enum for LineJoin.\r\n * @zh 线段拐角属性\r\n * @enum Graphics.LineJoin\r\n */\r\nexport enum LineJoin {\r\n    /**\r\n     * @en Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\r\n     * @zh 在相连部分的末端填充一个额外的以三角形为底的区域， 每个部分都有各自独立的矩形拐角。\r\n     */\r\n    BEVEL = 0,\r\n\r\n    /**\r\n     * @en Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments.\r\n     * The radius for these rounded corners is equal to the line width.\r\n     * @zh 通过填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。 圆角的半径是线段的宽度。\r\n     */\r\n    ROUND = 1,\r\n\r\n    /**\r\n     * @en Connected segments are joined by extending their outside edges to connect at a single point,\r\n     * with the effect of filling an additional lozenge-shaped area.\r\n     * @zh 通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。\r\n     */\r\n    MITER = 2,\r\n}\r\n\r\nccenum(LineJoin);\r\n\r\n// PointFlags\r\nexport enum PointFlags {\r\n    PT_CORNER = 0x01,\r\n    PT_LEFT = 0x02,\r\n    PT_BEVEL = 0x04,\r\n    PT_INNERBEVEL = 0x08,\r\n}\r\n\r\nccenum(PointFlags);\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PointFlags } from './types';\r\nimport { Impl } from './webgl/impl';\r\n\r\nconst PI = Math.PI;\r\nconst min = Math.min;\r\nconst max = Math.max;\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\nconst abs = Math.abs;\r\nconst sign = Math.sign;\r\n\r\nconst KAPPA90 = 0.5522847493;\r\n\r\nexport function arc (ctx: Impl, cx: number, cy: number, r: number, startAngle: number, endAngle: number, counterclockwise: boolean): void {\r\n    counterclockwise = counterclockwise || false;\r\n\r\n    let a = 0;\r\n    let da = 0;\r\n    let hda = 0;\r\n    let kappa = 0;\r\n    let dx = 0;\r\n    let dy = 0;\r\n    let x = 0;\r\n    let y = 0;\r\n    let tanx = 0;\r\n    let tany = 0;\r\n    let px = 0;\r\n    let py = 0;\r\n    let ptanx = 0;\r\n    let ptany = 0;\r\n    let i = 0;\r\n    let ndivs = 0;\r\n\r\n    // Clamp angles\r\n    da = endAngle - startAngle;\r\n    if (counterclockwise) {\r\n        if (abs(da) >= PI * 2) {\r\n            da = PI * 2;\r\n        } else {\r\n            while (da < 0) { da += PI * 2; }\r\n        }\r\n    } else if (abs(da) >= PI * 2) {\r\n        da = -PI * 2;\r\n    } else {\r\n        while (da > 0) { da -= PI * 2; }\r\n    }\r\n\r\n    // Split arc into max 90 degree segments.\r\n    ndivs = max(1, min(abs(da) / (PI * 0.5) + 0.5, 5)) | 0;\r\n    hda = da / ndivs / 2.0;\r\n    kappa = abs(4.0 / 3.0 * (1 - cos(hda)) / sin(hda));\r\n\r\n    if (!counterclockwise) { kappa = -kappa; }\r\n\r\n    for (i = 0; i <= ndivs; i++) {\r\n        a = startAngle + da * (i / ndivs);\r\n        dx = cos(a);\r\n        dy = sin(a);\r\n        x = cx + dx * r;\r\n        y = cy + dy * r;\r\n        tanx = -dy * r * kappa;\r\n        tany = dx * r * kappa;\r\n\r\n        if (i === 0) {\r\n            ctx.moveTo(x, y);\r\n        } else {\r\n            ctx.bezierCurveTo(px + ptanx, py + ptany, x - tanx, y - tany, x, y);\r\n        }\r\n        px = x;\r\n        py = y;\r\n        ptanx = tanx;\r\n        ptany = tany;\r\n    }\r\n}\r\n\r\nexport function ellipse (ctx: Impl, cx: number, cy: number, rx: number, ry: number): void {\r\n    ctx.moveTo(cx - rx, cy);\r\n    ctx.bezierCurveTo(cx - rx, cy + ry * KAPPA90, cx - rx * KAPPA90, cy + ry, cx, cy + ry);\r\n    ctx.bezierCurveTo(cx + rx * KAPPA90, cy + ry, cx + rx, cy + ry * KAPPA90, cx + rx, cy);\r\n    ctx.bezierCurveTo(cx + rx, cy - ry * KAPPA90, cx + rx * KAPPA90, cy - ry, cx, cy - ry);\r\n    ctx.bezierCurveTo(cx - rx * KAPPA90, cy - ry, cx - rx, cy - ry * KAPPA90, cx - rx, cy);\r\n    ctx.close();\r\n}\r\n\r\nexport function roundRect (ctx: Impl, x: number, y: number, w: number, h: number, r: number): void {\r\n    if (r < 0.1) {\r\n        ctx.rect(x, y, w, h);\r\n    } else {\r\n        const rx = min(r, abs(w) * 0.5) * sign(w);\r\n        const ry = min(r, abs(h) * 0.5) * sign(h);\r\n\r\n        ctx.moveTo(x, y + ry);\r\n        ctx.lineTo(x, y + h - ry);\r\n        ctx.bezierCurveTo(x, y + h - ry * (1 - KAPPA90), x + rx * (1 - KAPPA90), y + h, x + rx, y + h);\r\n        ctx.lineTo(x + w - rx, y + h);\r\n        ctx.bezierCurveTo(x + w - rx * (1 - KAPPA90), y + h, x + w, y + h - ry * (1 - KAPPA90), x + w, y + h - ry);\r\n        ctx.lineTo(x + w, y + ry);\r\n        ctx.bezierCurveTo(x + w, y + ry * (1 - KAPPA90), x + w - rx * (1 - KAPPA90), y, x + w - rx, y);\r\n        ctx.lineTo(x + rx, y);\r\n        ctx.bezierCurveTo(x + rx * (1 - KAPPA90), y, x, y + ry * (1 - KAPPA90), x, y + ry);\r\n        ctx.close();\r\n    }\r\n}\r\n\r\nexport function tesselateBezier (\r\n    ctx: Impl,\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    x3: number,\r\n    y3: number,\r\n    x4: number,\r\n    y4: number,\r\n    level: number,\r\n    type: number,\r\n): void {\r\n    let x12 = 0;\r\n    let y12 = 0;\r\n    let x23 = 0;\r\n    let y23 = 0;\r\n    let x34 = 0;\r\n    let y34 = 0;\r\n    let x123 = 0;\r\n    let y123 = 0;\r\n    let x234 = 0;\r\n    let y234 = 0;\r\n    let x1234 = 0;\r\n    let y1234 = 0;\r\n    let dx = 0;\r\n    let dy = 0;\r\n    let d2 = 0;\r\n    let d3 = 0;\r\n\r\n    if (level > 10) {\r\n        return;\r\n    }\r\n\r\n    x12 = (x1 + x2) * 0.5;\r\n    y12 = (y1 + y2) * 0.5;\r\n    x23 = (x2 + x3) * 0.5;\r\n    y23 = (y2 + y3) * 0.5;\r\n    x34 = (x3 + x4) * 0.5;\r\n    y34 = (y3 + y4) * 0.5;\r\n    x123 = (x12 + x23) * 0.5;\r\n    y123 = (y12 + y23) * 0.5;\r\n\r\n    dx = x4 - x1;\r\n    dy = y4 - y1;\r\n    d2 = abs((x2 - x4) * dy - (y2 - y4) * dx);\r\n    d3 = abs((x3 - x4) * dy - (y3 - y4) * dx);\r\n\r\n    if ((d2 + d3) * (d2 + d3) < ctx.tessTol * (dx * dx + dy * dy)) {\r\n        ctx.addPoint(x4, y4, type === 0 ? type | PointFlags.PT_BEVEL : type);\r\n        return;\r\n    }\r\n\r\n    x234 = (x23 + x34) * 0.5;\r\n    y234 = (y23 + y34) * 0.5;\r\n    x1234 = (x123 + x234) * 0.5;\r\n    y1234 = (y123 + y234) * 0.5;\r\n\r\n    tesselateBezier(ctx, x1, y1, x12, y12, x123, y123, x1234, y1234, level + 1, 0);\r\n    tesselateBezier(ctx, x1234, y1234, x234, y234, x34, y34, x4, y4, level + 1, type);\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { Color, Vec2 } from '../../../../core';\r\nimport { Graphics } from '../../../components/graphics';\r\nimport { RenderData, MeshRenderData } from '../../../renderer/render-data';\r\nimport { RenderDrawInfoType } from '../../../renderer/render-draw-info';\r\nimport { arc, ellipse, roundRect, tesselateBezier } from '../helper';\r\nimport { LineCap, LineJoin, PointFlags } from '../types';\r\n\r\nexport class Point extends Vec2 {\r\n    public dx = 0;\r\n    public dy = 0;\r\n    public dmx = 0;\r\n    public dmy = 0;\r\n    public flags = 0;\r\n    public len = 0;\r\n\r\n    constructor (x: number, y: number) {\r\n        super(x, y);\r\n    }\r\n\r\n    public reset (): void {\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.dmx = 0;\r\n        this.dmy = 0;\r\n        this.flags = 0;\r\n        this.len = 0;\r\n    }\r\n}\r\n\r\nexport class Path {\r\n    public closed = false;\r\n    public bevel = 0;\r\n    public complex = true;\r\n    public points: Point[] = [];\r\n\r\n    public reset (): void {\r\n        this.closed = false;\r\n        this.bevel = 0;\r\n        this.complex = true;\r\n        this.points.length = 0;\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nexport class Impl {\r\n    public dataOffset = 0;\r\n    public updatePathOffset = false;\r\n\r\n    public pathLength = 0;\r\n    public pathOffset = 0;\r\n\r\n    public paths: Path[] = [];\r\n    // inner properties\r\n    public tessTol = 0.25;\r\n    public distTol = 0.01;\r\n    public fillColor = Color.WHITE.clone();\r\n    public lineCap = LineCap.BUTT;\r\n    public strokeColor = Color.BLACK.clone();\r\n    public lineJoin = LineJoin.MITER;\r\n    public lineWidth = 0;\r\n\r\n    public pointsOffset = 0;\r\n\r\n    private _commandX = 0;\r\n    private _commandY = 0;\r\n    private _points: Point[] = [];\r\n    private _renderDataList: MeshRenderData[] = [];\r\n    private _curPath: Path | null = null;\r\n    private declare _comp: Graphics;\r\n\r\n    constructor (comp: Graphics) {\r\n        this._comp = comp;\r\n    }\r\n\r\n    public moveTo (x: number, y: number): void {\r\n        if (this.updatePathOffset) {\r\n            this.pathOffset = this.pathLength;\r\n            this.updatePathOffset = false;\r\n        }\r\n\r\n        this._addPath();\r\n        this.addPoint(x, y, PointFlags.PT_CORNER);\r\n\r\n        this._commandX = x;\r\n        this._commandY = y;\r\n    }\r\n\r\n    public lineTo (x: number, y: number): void {\r\n        this.addPoint(x, y, PointFlags.PT_CORNER);\r\n\r\n        this._commandX = x;\r\n        this._commandY = y;\r\n    }\r\n\r\n    public bezierCurveTo (c1x: number, c1y: number, c2x: number, c2y: number, x: number, y: number): void {\r\n        const path = this._curPath!;\r\n        const last = path.points[path.points.length - 1];\r\n        if (!last) {\r\n            return;\r\n        }\r\n\r\n        if (last.x === c1x && last.y === c1y && c2x === x && c2y === y) {\r\n            this.lineTo(x, y);\r\n            return;\r\n        }\r\n\r\n        tesselateBezier(this, last.x, last.y, c1x, c1y, c2x, c2y, x, y, 0, PointFlags.PT_CORNER);\r\n\r\n        this._commandX = x;\r\n        this._commandY = y;\r\n    }\r\n\r\n    public quadraticCurveTo (cx: number, cy: number, x: number, y: number): void {\r\n        const x0 = this._commandX;\r\n        const y0 = this._commandY;\r\n        this.bezierCurveTo(x0 + 2.0 / 3.0 * (cx - x0), y0 + 2.0 / 3.0 * (cy - y0), x + 2.0 / 3.0 * (cx - x), y + 2.0 / 3.0 * (cy - y), x, y);\r\n    }\r\n\r\n    public arc (cx: number, cy: number, r: number, startAngle: number, endAngle: number, counterclockwise: boolean): void {\r\n        arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);\r\n    }\r\n\r\n    public ellipse (cx: number, cy: number, rx: number, ry: number): void {\r\n        ellipse(this, cx, cy, rx, ry);\r\n        this._curPath!.complex = false;\r\n    }\r\n\r\n    public circle (cx: number, cy: number, r: number): void {\r\n        ellipse(this, cx, cy, r, r);\r\n        this._curPath!.complex = false;\r\n    }\r\n\r\n    public rect (x: number, y: number, w: number, h: number): void {\r\n        this.moveTo(x, y);\r\n        this.lineTo(x + w, y);\r\n        this.lineTo(x + w, y + h);\r\n        this.lineTo(x, y + h);\r\n\r\n        this.close();\r\n        this._curPath!.complex = false;\r\n    }\r\n\r\n    public roundRect (x: number, y: number, w: number, h: number, r: number): void {\r\n        roundRect(this, x, y, w, h, r);\r\n        this._curPath!.complex = false;\r\n    }\r\n\r\n    public clear (): void {\r\n        this.pathLength = 0;\r\n        this.pathOffset = 0;\r\n        this.pointsOffset = 0;\r\n        this.dataOffset = 0;\r\n        this._curPath = null;\r\n        this.paths.length = 0;\r\n        this._points.length = 0;\r\n\r\n        const dataList = this._renderDataList;\r\n        for (let i = 0, l = dataList.length; i < l; i++) {\r\n            const data = dataList[i];\r\n            if (!data) {\r\n                continue;\r\n            }\r\n\r\n            MeshRenderData.remove(data);\r\n            if (JSB) {\r\n                this._comp.renderEntity.clearRenderDrawInfos();\r\n            }\r\n        }\r\n\r\n        this._renderDataList.length = 0;\r\n    }\r\n\r\n    public close (): void {\r\n        this._curPath!.closed = true;\r\n    }\r\n\r\n    public requestRenderData (): MeshRenderData {\r\n        const renderData = MeshRenderData.add();\r\n        this._renderDataList.push(renderData);\r\n        if (JSB) {\r\n            renderData.initRenderDrawInfo(this._comp, RenderDrawInfoType.MODEL);\r\n            // TODO: MeshRenderData and RenderData are both sub class of BaseRenderData, here we weirdly use MeshRenderData as RenderData\r\n            // please fix the type @holycanvas\r\n            // issue: https://github.com/cocos/cocos-engine/issues/14637\r\n            renderData.material = this._comp.getMaterialInstance(0)!;// hack\r\n            this._comp.setRenderData(renderData as unknown as RenderData);\r\n        }\r\n\r\n        return renderData;\r\n    }\r\n\r\n    public getRenderDataList (): MeshRenderData[] {\r\n        if (this._renderDataList.length === 0) {\r\n            this.requestRenderData();\r\n        }\r\n\r\n        return this._renderDataList;\r\n    }\r\n\r\n    public addPoint (x: number, y: number, flags: PointFlags): void {\r\n        const path = this._curPath;\r\n        if (!path) {\r\n            return;\r\n        }\r\n\r\n        const points = this._points;\r\n        const pathPoints = path.points;\r\n\r\n        const offset = this.pointsOffset++;\r\n        let pt: Point = points[offset];\r\n\r\n        if (!pt) {\r\n            pt = new Point(x, y);\r\n            points.push(pt);\r\n        } else {\r\n            pt.x = x;\r\n            pt.y = y;\r\n        }\r\n\r\n        pt.flags = flags;\r\n        pathPoints.push(pt);\r\n    }\r\n\r\n    private _addPath (): Path {\r\n        const offset = this.pathLength;\r\n        let path = this.paths[offset];\r\n\r\n        if (!path) {\r\n            path = new Path();\r\n\r\n            this.paths.push(path);\r\n        } else {\r\n            path.reset();\r\n        }\r\n\r\n        this.pathLength++;\r\n        this._curPath = path;\r\n\r\n        return path;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, help, executionOrder, menu, tooltip, type, visible, override, editable, serializable } from \"cc.decorator\";\r\nimport { JSB } from \"internal:constants\";\r\nimport { builtinResMgr } from \"../../asset/asset-manager\";\r\nimport { InstanceMaterialType, UIRenderer } from \"../framework/ui-renderer\";\r\nimport { director } from \"../../game/director\";\r\nimport { Color, warnID, cclegacy } from \"../../core\";\r\nimport { scene } from \"../../render-scene\";\r\nimport type { IBatcher } from \"../renderer/i-batcher\";\r\nimport { LineCap, LineJoin } from \"../assembler/graphics/types\";\r\nimport { Impl } from \"../assembler/graphics/webgl/impl\";\r\nimport { Material, RenderingSubMesh } from \"../../asset/assets\";\r\nimport { Format, PrimitiveMode, Attribute, Device, BufferUsageBit, BufferInfo, MemoryUsageBit, deviceManager } from \"../../gfx\";\r\nimport { vfmtPosColor, getAttributeStride, getComponentPerVertex } from \"../renderer/vertex-format\";\r\nimport { NativeUIModelProxy } from \"../renderer/native-2d\";\r\nimport { RenderEntity, RenderEntityType } from \"../renderer/render-entity\";\r\nimport type { GraphicsAssembler } from \"../assembler/graphics/webgl/graphics-assembler\";\r\n\r\nconst attributes = vfmtPosColor.concat([new Attribute(\"a_dist\", Format.R32F)]);\r\n\r\nconst componentPerVertex = getComponentPerVertex(attributes);\r\n\r\nconst stride = getAttributeStride(attributes);\r\n\r\n/**\r\n * @en\r\n * Graphics component.\r\n *\r\n * @zh\r\n * 自定义图形类。\r\n */\r\n@ccclass(\"cc.Graphics\")\r\n@help(\"i18n:cc.Graphics\")\r\n@executionOrder(110)\r\n@menu(\"2D/Graphics\")\r\nexport class Graphics extends UIRenderer {\r\n    /**\r\n     * @en\r\n     * Current line width.\r\n     *\r\n     * @zh\r\n     * 当前线条宽度。\r\n     */\r\n    @editable\r\n    @tooltip(\"i18n:graphics.lineWidth\")\r\n    get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n    set lineWidth(value) {\r\n        this._lineWidth = value;\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.lineWidth = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined together.\r\n     *\r\n     * @zh\r\n     * 用来设置2个长度不为0的相连部分（线段，圆弧，曲线）如何连接在一起的属性。\r\n     */\r\n    @type(LineJoin)\r\n    @tooltip(\"i18n:graphics.lineJoin\")\r\n    get lineJoin(): LineJoin {\r\n        return this._lineJoin;\r\n    }\r\n\r\n    set lineJoin(value: LineJoin) {\r\n        this._lineJoin = value;\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.lineJoin = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Determines how the end points of every line are drawn.\r\n     *\r\n     * @zh\r\n     * 指定如何绘制每一条线段末端。\r\n     */\r\n    @type(LineCap)\r\n    @tooltip(\"i18n:graphics.lineCap\")\r\n    get lineCap(): LineCap {\r\n        return this._lineCap;\r\n    }\r\n\r\n    set lineCap(value: LineCap) {\r\n        this._lineCap = value;\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.lineCap = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Brush stroke color.\r\n     *\r\n     * @zh\r\n     * 笔触的颜色。\r\n     */\r\n    @tooltip(\"i18n:graphics.strokeColor\")\r\n    // @constget\r\n    get strokeColor(): Readonly<Color> {\r\n        return this._strokeColor;\r\n    }\r\n\r\n    set strokeColor(value) {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this._strokeColor.set(value);\r\n        this.impl.strokeColor = this._strokeColor;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Fill paint color.\r\n     *\r\n     * @zh\r\n     * 填充绘画的颜色。\r\n     */\r\n    @tooltip(\"i18n:graphics.fillColor\")\r\n    // @constget\r\n    get fillColor(): Readonly<Color> {\r\n        return this._fillColor;\r\n    }\r\n\r\n    set fillColor(value) {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this._fillColor.set(value);\r\n        this.impl.fillColor = this._fillColor;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Set the miter limit ratio.\r\n     *\r\n     * @zh\r\n     * 设置斜接面限制比例。\r\n     */\r\n    @tooltip(\"i18n:graphics.miterLimit\")\r\n    get miterLimit(): number {\r\n        return this._miterLimit;\r\n    }\r\n\r\n    set miterLimit(value) {\r\n        this._miterLimit = value;\r\n        // this.impl.miterLimit = value;\r\n    }\r\n\r\n    @override\r\n    @visible(false)\r\n    get color(): Color {\r\n        return this._color;\r\n    }\r\n\r\n    set color(value) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color.set(value);\r\n    }\r\n\r\n    public static LineJoin = LineJoin;\r\n    public static LineCap = LineCap;\r\n    public impl: Impl | null = null;\r\n    /**\r\n     * @deprecated since v3.6.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public model: scene.Model | null = null;\r\n    @serializable\r\n    protected _lineWidth = 1;\r\n    @serializable\r\n    protected _strokeColor = Color.BLACK.clone();\r\n    @serializable\r\n    protected _lineJoin = LineJoin.MITER;\r\n    @serializable\r\n    protected _lineCap = LineCap.BUTT;\r\n    @serializable\r\n    protected _fillColor = Color.WHITE.clone();\r\n    @serializable\r\n    protected _miterLimit = 10;\r\n\r\n    protected _isDrawing = false;\r\n    protected _isNeedUploadData = true;\r\n\r\n    private _graphicsUseSubMeshes: RenderingSubMesh[] = [];\r\n\r\n    //nativeObj\r\n    protected declare _graphicsNativeProxy: NativeUIModelProxy;\r\n    /**\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get graphicsNativeProxy(): NativeUIModelProxy {\r\n        return this._graphicsNativeProxy;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this._instanceMaterialType = InstanceMaterialType.ADD_COLOR;\r\n        this.impl = new Impl(this);\r\n        if (JSB) {\r\n            this._graphicsNativeProxy = new NativeUIModelProxy();\r\n        }\r\n    }\r\n\r\n    public onRestore(): void {\r\n        if (!this.impl) {\r\n            this._flushAssembler();\r\n        }\r\n    }\r\n\r\n    public onLoad(): void {\r\n        super.onLoad();\r\n        if (JSB) {\r\n            this._graphicsNativeProxy.initModel(this.node);\r\n            this.model = this._graphicsNativeProxy.getModel();\r\n        } else {\r\n            this.model = director.root!.createModel(scene.Model);\r\n            this.model.node = this.model.transform = this.node;\r\n        }\r\n        this._flushAssembler();\r\n    }\r\n\r\n    public onEnable(): void {\r\n        super.onEnable();\r\n        this._updateMtlForGraphics();\r\n    }\r\n\r\n    public onDestroy(): void {\r\n        this._sceneGetter = null;\r\n        if (JSB) {\r\n            this._graphicsNativeProxy.destroy();\r\n            this.model = null;\r\n        } else {\r\n            if (this.model) {\r\n                director.root!.destroyModel(this.model);\r\n                this.model = null;\r\n            }\r\n\r\n            const subMeshLength = this._graphicsUseSubMeshes.length;\r\n            if (subMeshLength > 0) {\r\n                for (let i = 0; i < subMeshLength; ++i) {\r\n                    this._graphicsUseSubMeshes[i].destroy();\r\n                }\r\n                this._graphicsUseSubMeshes.length = 0;\r\n            }\r\n        }\r\n\r\n        if (this.impl) {\r\n            this._isDrawing = false;\r\n            this.impl.clear();\r\n            this.impl = null;\r\n        }\r\n\r\n        super.onDestroy();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Move path start point to (x,y).\r\n     *\r\n     * @zh\r\n     * 移动路径起点到坐标(x, y)。\r\n     *\r\n     * @param x @en The x-axis coordinate of the target position.\r\n     *          @zh 目标位置的 X 轴坐标。\r\n     * @param y @en The y-axis coordinate of the target position.\r\n     *          @zh 目标位置的 y 轴坐标。\r\n     */\r\n    public moveTo(x: number, y: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.moveTo(x, y);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a straight line to the path.\r\n     *\r\n     * @zh\r\n     * 绘制直线路径。\r\n     *\r\n     * @param x @en The x-axis coordinate of the target position.\r\n     *          @zh 目标位置的 x 轴坐标。\r\n     * @param y @en The x-axis coordinate of the target position.\r\n     *          @zh 目标位置的 y 轴坐标。\r\n     */\r\n    public lineTo(x: number, y: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.lineTo(x, y);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a cubic Bézier curve to the path.\r\n     *\r\n     * @zh\r\n     * 绘制三次贝赛尔曲线路径。\r\n     *\r\n     * @param c1x @en The x-axis coordinate of the first control point.\r\n     *            @zh 第一个控制点的 x 轴坐标。\r\n     * @param c1y @en The y-axis coordinate of the first control point.\r\n     *            @zh 第一个控制点的 y 轴坐标。\r\n     * @param c2x @en The x-axis coordinate of the second control point.\r\n     *            @zh 第二个控制点的 x 轴坐标。\r\n     * @param c2y @en The y-axis coordinate of the second control point.\r\n     *            @zh 第二个控制点的 y 轴坐标。\r\n     * @param x @en The x-axis coordinate of the last control point.\r\n     *          @zh 最后一个控制点的 x 轴坐标。\r\n     * @param y @en The y-axis coordinate of the last control point.\r\n     *          @zh 最后一个控制点的 y 轴坐标。\r\n     */\r\n    public bezierCurveTo(c1x: number, c1y: number, c2x: number, c2y: number, x: number, y: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a quadratic Bézier curve to the path.\r\n     *\r\n     * @zh\r\n     * 绘制二次贝赛尔曲线路径。\r\n     *\r\n     * @param cx @en The x-axis coordinate of the starting control point.\r\n     *           @zh 起始控制点的 x 轴坐标。\r\n     * @param cy @en The y-axis coordinate of the starting control point.\r\n     *           @zh 起始控制点的 y 轴坐标。\r\n     * @param x @en The x-axis coordinates of the endpoint control point.\r\n     *          @zh 终点控制点的 x 轴坐标。\r\n     * @param y @en The y-axis coordinates of the endpoint control point.\r\n     *          @zh 终点控制点的 x 轴坐标。\r\n     */\r\n    public quadraticCurveTo(cx: number, cy: number, x: number, y: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.quadraticCurveTo(cx, cy, x, y);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds an arc to the path which is centered at (cx, cy) position with radius r starting at startAngle\r\n     * and ending at endAngle going in the given direction by counterclockwise (defaulting to false).\r\n     *\r\n     * @zh\r\n     * 绘制圆弧路径。圆弧路径的圆心在 (cx, cy) 位置，半径为 r ，根据 counterclockwise （默认为false）指定的方向从 startAngle 开始绘制，到 endAngle 结束。\r\n     *\r\n     * @param cx @en The coordinate x-axis of the central control point.\r\n     *           @zh 中心控制点的坐标 x 轴。\r\n     * @param cy @en The coordinate y-axis of the central control point.\r\n     *           @zh 中心控制点的坐标 y 轴。\r\n     * @param r @en Angle in Radian.\r\n     *          @zh 圆弧弧度。\r\n     * @param startAngle @en The starting angle in radian, measured clockwise from the positive x-axis.\r\n     *                   @zh 弧度起点，从正 x 轴顺时针方向测量。\r\n     * @param endAngle @en The ending angle in radian, measured clockwise from the positive x-axis.\r\n     *                 @zh 弧度终点，从正 x 轴顺时针方向测量。\r\n     * @param counterclockwise @en If true, draws counterclockwise between the two angles. Default is clockwise.\r\n     *                         @zh 如果为真，在两个角度之间逆时针绘制。默认顺时针。\r\n     */\r\n    public arc(cx: number, cy: number, r: number, startAngle: number, endAngle: number, counterclockwise: boolean): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.arc(cx, cy, r, startAngle, endAngle, counterclockwise);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds an ellipse to the path.\r\n     *\r\n     * @zh\r\n     * 绘制椭圆路径。\r\n     *\r\n     * @param cx @en The x-axis coordinates of the center point.\r\n     *           @zh 中心点的 x 轴坐标。\r\n     * @param cy @en The y-axis coordinates of the center point.\r\n     *           @zh 中心点的 y 轴坐标。\r\n     * @param rx @en The radius of the x-axis of the ellipse.\r\n     *           @zh 椭圆 x 轴半径。\r\n     * @param ry @en The radius of the y-axis of the ellipse.\r\n     *           @zh 椭圆 y 轴半径。\r\n     */\r\n    public ellipse(cx: number, cy: number, rx: number, ry: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.ellipse(cx, cy, rx, ry);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a circle to the path.\r\n     *\r\n     * @zh\r\n     * 绘制圆形路径。\r\n     *\r\n     * @param cx @en The x-axis coordinates of the center point.\r\n     *           @zh 中心点的 x 轴坐标。\r\n     * @param cy @en The y-axis coordinates of the center point.\r\n     *           @zh 中心点的 y 轴坐标。\r\n     * @param r @en Radius.\r\n     *          @zh 圆半径。\r\n     */\r\n    public circle(cx: number, cy: number, r: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.circle(cx, cy, r);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a rectangle to the path.\r\n     *\r\n     * @zh\r\n     * 绘制矩形路径。\r\n     *\r\n     * @param x @en The x-axis coordinate of the top left point of the rectangle.\r\n     *          @zh 矩形起始 x 轴坐标。\r\n     * @param y @en The y-axis coordinate of the top left point of the rectangle.\r\n     *          @zh 矩形起始 y 轴坐标。\r\n     * @param w @en The width of the rectangle.\r\n     *          @zh 矩形宽度。\r\n     * @param h @en The height of the rectangle.\r\n     *          @zh 矩形高度。\r\n     */\r\n    public rect(x: number, y: number, w: number, h: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.rect(x, y, w, h);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a round corner rectangle to the path.\r\n     *\r\n     * @zh\r\n     * 绘制圆角矩形路径。\r\n     *\r\n     * @param x @en The x-axis coordinate of the top left point of the rectangle.\r\n     *          @zh 矩形起始 x 轴坐标。\r\n     * @param y @en The y-axis coordinate of the top left point of the rectangle.\r\n     *          @zh 矩形起始 y 轴坐标。\r\n     * @param w @en The width of the rectangle.\r\n     *          @zh 矩形宽度。\r\n     * @param h @en The height of the rectangle.\r\n     *          @zh 矩形高度。\r\n     * @param r @en Radius of rectangular rounded corners.\r\n     *          @zh 矩形圆角半径。\r\n     */\r\n    public roundRect(x: number, y: number, w: number, h: number, r: number): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.roundRect(x, y, w, h, r);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Draws a filled rectangle.\r\n     *\r\n     * @zh\r\n     * 绘制填充矩形。\r\n     *\r\n     * @param x @en The x-axis coordinate of the top left point of the rectangle.\r\n     *          @zh 矩形起始 x 轴坐标。\r\n     * @param y @en The y-axis coordinate of the top left point of the rectangle.\r\n     *          @zh 矩形起始 y 轴坐标。\r\n     * @param w @en The width of the rectangle.\r\n     *          @zh 矩形宽度。\r\n     * @param h @en The height of the rectangle.\r\n     *          @zh 矩形高度。\r\n     */\r\n    public fillRect(x: number, y: number, w: number, h: number): void {\r\n        this.rect(x, y, w, h);\r\n        this.fill();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Erasing any previously drawn content.\r\n     *\r\n     * @zh\r\n     * 擦除之前绘制的所有内容的方法。\r\n     */\r\n    public clear(): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.clear();\r\n        this._isDrawing = false;\r\n        if (JSB) {\r\n            this._graphicsNativeProxy.clear(); // need native\r\n        } else if (this.model) {\r\n            for (let i = 0; i < this.model.subModels.length; i++) {\r\n                const subModel = this.model.subModels[i];\r\n                const ia = subModel.inputAssembler;\r\n                ia.indexCount = 0;\r\n                ia.vertexCount = 0;\r\n            }\r\n        }\r\n\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Causes the point of the pen to move back to the start of the current path.\r\n     * It tries to add a straight line from the current point to the start.\r\n     *\r\n     * @zh\r\n     * 将笔点返回到当前路径起始点的。它尝试从当前点到起始点绘制一条直线。\r\n     */\r\n    public close(): void {\r\n        if (!this.impl) {\r\n            return;\r\n        }\r\n\r\n        this.impl.close();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Strokes the current or given path with the current stroke style.\r\n     *\r\n     * @zh\r\n     * 根据当前的画线样式，绘制当前或已经存在的路径。\r\n     */\r\n    public stroke(): void {\r\n        if (!this._assembler) {\r\n            this._flushAssembler();\r\n        }\r\n\r\n        this._isDrawing = true;\r\n        this._isNeedUploadData = true;\r\n        (this._assembler as GraphicsAssembler).stroke(this);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Fills the current or given path with the current fill style.\r\n     *\r\n     * @zh\r\n     * 根据当前的画线样式，填充当前或已经存在的路径。\r\n     */\r\n    public fill(): void {\r\n        if (!this._assembler) {\r\n            this._flushAssembler();\r\n        }\r\n\r\n        this._isDrawing = true;\r\n        this._isNeedUploadData = true;\r\n        (this._assembler as GraphicsAssembler).fill(this);\r\n    }\r\n\r\n    private _updateMtlForGraphics(): void {\r\n        let mat;\r\n        if (this._customMaterial) {\r\n            mat = this.getMaterialInstance(0);\r\n        } else {\r\n            mat = builtinResMgr.get(\"ui-graphics-material\");\r\n            this.setSharedMaterial(mat as Material, 0);\r\n            mat = this.getMaterialInstance(0);\r\n            mat.recompileShaders({ USE_LOCAL: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public activeSubModel(idx: number): void {\r\n        if (!this.model) {\r\n            warnID(4500, this.node.name);\r\n            return;\r\n        }\r\n\r\n        if (this.model.subModels.length <= idx) {\r\n            const gfxDevice: Device = deviceManager.gfxDevice;\r\n            const vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 65535 * stride, stride));\r\n            const indexBuffer = gfxDevice.createBuffer(\r\n                new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 65535 * Uint16Array.BYTES_PER_ELEMENT * 2, Uint16Array.BYTES_PER_ELEMENT)\r\n            );\r\n\r\n            const renderMesh = new RenderingSubMesh([vertexBuffer], attributes, PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n            renderMesh.subMeshIdx = 0;\r\n\r\n            this.model.initSubModel(idx, renderMesh, this.getMaterialInstance(0)!);\r\n            this._graphicsUseSubMeshes.push(renderMesh);\r\n        }\r\n    }\r\n\r\n    protected _uploadData(): void {\r\n        const impl = this.impl;\r\n        if (!impl) {\r\n            return;\r\n        }\r\n\r\n        const renderDataList = impl && impl.getRenderDataList();\r\n        if (renderDataList.length <= 0 || !this.model) {\r\n            return;\r\n        }\r\n\r\n        const subModelList = this.model.subModels;\r\n        for (let i = 0; i < renderDataList.length; i++) {\r\n            const renderData = renderDataList[i];\r\n            const ia = subModelList[i].inputAssembler;\r\n            if (renderData.lastFilledVertex === renderData.vertexStart) {\r\n                continue;\r\n            }\r\n\r\n            const vb = new Float32Array(renderData.vData.buffer, 0, renderData.vertexStart * componentPerVertex);\r\n            ia.vertexBuffers[0].update(vb);\r\n            ia.vertexCount = renderData.vertexStart;\r\n            const ib = new Uint16Array(renderData.iData.buffer, 0, renderData.indexStart);\r\n            ia.indexBuffer!.update(ib);\r\n            ia.indexCount = renderData.indexStart;\r\n            renderData.lastFilledVertex = renderData.vertexStart;\r\n            renderData.lastFilledIndex = renderData.indexStart;\r\n        }\r\n\r\n        this._isNeedUploadData = false;\r\n    }\r\n\r\n    protected _render(render: IBatcher): void {\r\n        //#region [自定义]，保护渲染报错\r\n        if (!this.getMaterialInstance(0)) {\r\n            return;\r\n        }\r\n        //endregion\r\n\r\n        if (this._isNeedUploadData) {\r\n            if (this.impl) {\r\n                const renderDataList = this.impl.getRenderDataList();\r\n                const len = this.model!.subModels.length;\r\n                if (renderDataList.length > len) {\r\n                    for (let i = len; i < renderDataList.length; i++) {\r\n                        this.activeSubModel(i);\r\n                    }\r\n                }\r\n            }\r\n            this._uploadData();\r\n        }\r\n\r\n        render.commitModel(this, this.model, this.getMaterialInstance(0));\r\n    }\r\n\r\n    protected _flushAssembler(): void {\r\n        const assembler = Graphics.Assembler.getAssembler(this);\r\n\r\n        if (this._assembler !== assembler) {\r\n            this._assembler = assembler;\r\n        }\r\n    }\r\n\r\n    protected _canRender(): boolean {\r\n        if (!super._canRender()) {\r\n            return false;\r\n        }\r\n\r\n        if (JSB) {\r\n            return this._isDrawing;\r\n        } else {\r\n            return !!this.model && this._isDrawing;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public updateRenderer(): void {\r\n        super.updateRenderer();\r\n        if (JSB) {\r\n            if (this._isNeedUploadData) {\r\n                if (this.impl) {\r\n                    const renderDataList = this.impl.getRenderDataList();\r\n                    for (let i = 0; i < renderDataList.length; i++) {\r\n                        renderDataList[i].setRenderDrawInfoAttributes();\r\n                    }\r\n                    this._graphicsNativeProxy.activeSubModels();\r\n                }\r\n                this._graphicsNativeProxy.uploadData();\r\n                this._isNeedUploadData = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected createRenderEntity(): RenderEntity {\r\n        return new RenderEntity(RenderEntityType.DYNAMIC);\r\n    }\r\n}\r\n\r\ncclegacy.Graphics = Graphics;\r\n"],"names":["LineCap","LineJoin","PointFlags","exports","ccenum","PI","Math","min","max","cos","sin","abs","sign","KAPPA90","arc","ctx","cx","cy","r","startAngle","endAngle","counterclockwise","hda","ndivs","a","da","kappa","dx","dy","x","y","tanx","tany","px","py","ptanx","ptany","i","moveTo","bezierCurveTo","ellipse","rx","ry","close","roundRect","w","h","rect","lineTo","tesselateBezier","x1","y1","x2","y2","x3","y3","x4","y4","level","type","x12","y12","x23","y23","x34","y34","x123","y123","x234","y234","x1234","y1234","d2","d3","tessTol","addPoint","PT_BEVEL","Point","_Vec","_this","this","dmx","dmy","flags","len","_inheritsLoose","prototype","reset","Vec2","Path","closed","bevel","complex","points","length","Impl","comp","dataOffset","updatePathOffset","pathLength","pathOffset","paths","distTol","fillColor","Color","WHITE","clone","lineCap","BUTT","strokeColor","BLACK","lineJoin","MITER","lineWidth","pointsOffset","_commandX","_commandY","_points","_renderDataList","_curPath","_comp","_proto3","_addPath","PT_CORNER","c1x","c1y","c2x","c2y","path","last","quadraticCurveTo","x0","y0","circle","clear","dataList","l","data","MeshRenderData","remove","requestRenderData","renderData","add","push","getRenderDataList","pathPoints","pt","offset","attributes","vfmtPosColor","concat","Attribute","Format","R32F","componentPerVertex","getComponentPerVertex","stride","getAttributeStride","Graphics","ccclass","_dec2","executionOrder","_dec","_class","_class3","_UIRenderer","call","impl","model","_lineWidth","_initializer","_strokeColor","_initializer2","_lineJoin","_initializer3","_lineCap","_initializer4","_fillColor","_initializer5","_miterLimit","_initializer6","_isDrawing","_isNeedUploadData","_graphicsUseSubMeshes","_instanceMaterialType","InstanceMaterialType","ADD_COLOR","_assertThisInitialized","_proto","onRestore","_flushAssembler","onLoad","director","root","createModel","scene","node","transform","onEnable","_updateMtlForGraphics","onDestroy","_sceneGetter","destroyModel","subMeshLength","destroy","fillRect","fill","subModels","ia","inputAssembler","indexCount","vertexCount","_markForUpdateRenderData","stroke","_assembler","mat","_customMaterial","getMaterialInstance","builtinResMgr","get","setSharedMaterial","recompileShaders","USE_LOCAL","activeSubModel","idx","gfxDevice","deviceManager","vertexBuffer","createBuffer","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","DEVICE","indexBuffer","INDEX","Uint16Array","BYTES_PER_ELEMENT","renderMesh","RenderingSubMesh","PrimitiveMode","TRIANGLE_LIST","subMeshIdx","initSubModel","warnID","name","_uploadData","renderDataList","subModelList","lastFilledVertex","vertexStart","vb","Float32Array","vData","buffer","vertexBuffers","update","ib","iData","indexStart","lastFilledIndex","_render","render","commitModel","assembler","Assembler","getAssembler","_canRender","updateRenderer","createRenderEntity","RenderEntity","RenderEntityType","DYNAMIC","_createClass","key","set","value","_color","_graphicsNativeProxy","UIRenderer","_applyDecoratedDescriptor","_class2","_dec3","Object","getOwnPropertyDescriptor","_dec4","override","_applyDecoratedInitializer","serializable","cclegacy"],"mappings":"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"}