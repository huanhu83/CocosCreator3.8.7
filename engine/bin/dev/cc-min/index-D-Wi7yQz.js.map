{"version":3,"file":"index-D-Wi7yQz.js","sources":["../../../cocos/physics/framework/physics-selector.ts","../../../cocos/physics/framework/assets/physics-material.ts","../../../cocos/physics/framework/physics-ray-result.ts","../../../cocos/physics/framework/physics-system.ts","../../../cocos/physics/framework/components/rigid-body.ts","../../../cocos/physics/framework/components/colliders/collider.ts","../../../cocos/physics/framework/components/colliders/box-collider.ts","../../../cocos/physics/framework/components/colliders/sphere-collider.ts","../../../cocos/physics/framework/components/colliders/capsule-collider.ts","../../../cocos/physics/framework/components/colliders/cylinder-collider.ts","../../../cocos/physics/framework/components/colliders/cone-collider.ts","../../../cocos/physics/framework/components/colliders/mesh-collider.ts","../../../cocos/physics/framework/components/constant-force.ts","../../../cocos/physics/framework/components/colliders/terrain-collider.ts","../../../cocos/physics/framework/components/colliders/simplex-collider.ts","../../../cocos/physics/framework/components/colliders/plane-collider.ts","../../../cocos/physics/framework/components/constraints/constraint.ts","../../../cocos/physics/framework/components/constraints/hinge-constraint.ts","../../../cocos/physics/framework/components/constraints/fixed-constraint.ts","../../../cocos/physics/framework/components/constraints/configurable-constraint.ts","../../../cocos/physics/framework/components/constraints/point-to-point-constraint.ts","../../../cocos/physics/framework/components/character-controllers/character-controller.ts","../../../cocos/physics/framework/components/character-controllers/box-character-controller.ts","../../../cocos/physics/framework/components/character-controllers/capsule-character-controller.ts","../../../cocos/physics/framework/physics-interface.ts","../../../cocos/physics/framework/index.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable import/no-mutable-exports */\r\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { EDITOR, TEST } from 'internal:constants';\r\nimport { IBaseConstraint, IPointToPointConstraint, IHingeConstraint, IFixedConstraint,\r\n    IConfigurableConstraint } from '../spec/i-physics-constraint';\r\nimport {\r\n    IBoxShape, ISphereShape, ICapsuleShape, ITrimeshShape, ICylinderShape,\r\n    IConeShape, ITerrainShape, ISimplexShape, IPlaneShape, IBaseShape,\r\n} from '../spec/i-physics-shape';\r\nimport { IPhysicsWorld } from '../spec/i-physics-world';\r\nimport { IRigidBody } from '../spec/i-rigid-body';\r\nimport { IBoxCharacterController, ICapsuleCharacterController } from '../spec/i-character-controller';\r\nimport { errorID, IVec3Like, warn, cclegacy, log } from '../../core';\r\nimport { EColliderType, EConstraintType, ECharacterControllerType } from './physics-enum';\r\nimport { PhysicsMaterial } from '.';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\r\nexport type IPhysicsEngineId = 'builtin' | 'cannon.js' | 'bullet' | 'physx' | string;\r\n\r\ninterface IPhysicsWrapperObject {\r\n    PhysicsWorld?: Constructor<IPhysicsWorld>,\r\n    RigidBody?: Constructor<IRigidBody>,\r\n    BoxCharacterController?: Constructor<IBoxCharacterController>,\r\n    CapsuleCharacterController?: Constructor<ICapsuleCharacterController>,\r\n    BoxShape?: Constructor<IBoxShape>,\r\n    SphereShape?: Constructor<ISphereShape>,\r\n    CapsuleShape?: Constructor<ICapsuleShape>,\r\n    TrimeshShape?: Constructor<ITrimeshShape>,\r\n    CylinderShape?: Constructor<ICylinderShape>,\r\n    ConeShape?: Constructor<IConeShape>,\r\n    TerrainShape?: Constructor<ITerrainShape>,\r\n    SimplexShape?: Constructor<ISimplexShape>,\r\n    PlaneShape?: Constructor<IPlaneShape>,\r\n    PointToPointConstraint?: Constructor<IPointToPointConstraint>,\r\n    HingeConstraint?: Constructor<IHingeConstraint>,\r\n    FixedConstraint?: Constructor<IFixedConstraint>,\r\n    ConfigurableConstraint?: Constructor<IConfigurableConstraint>,\r\n}\r\n\r\ninterface IPhysicsBackend { [key: string]: IPhysicsWrapperObject; }\r\n\r\nexport interface IPhysicsSelector {\r\n    /**\r\n     * @en\r\n     * The id of the physics engine being used by the physics system.\r\n     * @zh\r\n     * 物理系统正在使用的物理引擎的唯一标志。\r\n     */\r\n    readonly id: IPhysicsEngineId,\r\n\r\n    /**\r\n     * @en\r\n     * The wrapper of the physics engine being used by the physics system.\r\n     * @zh\r\n     * 物理系统使用的物理引擎的封装层。\r\n     */\r\n    readonly wrapper: IPhysicsWrapperObject,\r\n\r\n    /**\r\n     * @en\r\n     * All physics engine backends that the physics module has registered.\r\n     * @zh\r\n     * 物理模块已注册的所有物理引擎后端。\r\n     */\r\n    readonly backend: IPhysicsBackend,\r\n\r\n    /**\r\n     * @en\r\n     * An instance of the physical world through which you can access the lowlevel objects.\r\n     * @zh\r\n     * 物理世界实例，通过它可以访问到底层对象。\r\n     */\r\n    readonly physicsWorld: IPhysicsWorld | null;\r\n\r\n    /**\r\n     * @en\r\n     * To register the backend, the system will use the last backend registered before initialization,\r\n     * and the registration after that needs to be switched manually.\r\n     * @zh\r\n     * 注册后端，系统将使用在初始化前注册的最后一个后端，此后注册的需要手动切换。\r\n     */\r\n    register: (id: IPhysicsEngineId, wrapper: IPhysicsWrapperObject) => void,\r\n\r\n    /**\r\n     * @en\r\n     * Switch to the physics backend corresponding to the id in the registry.\r\n     * @zh\r\n     * 切换为注册表里对应 id 的物理后端。\r\n     */\r\n    switchTo: (id: IPhysicsEngineId) => void,\r\n\r\n    // polyfill\r\n    [x: string]: any,\r\n}\r\n\r\nfunction updateLegacyMacro (id: string): void {\r\n    cclegacy._global.CC_PHYSICS_BUILTIN = id === 'builtin';\r\n    cclegacy._global.CC_PHYSICS_CANNON = id === 'cannon.js';\r\n    cclegacy._global.CC_PHYSICS_AMMO = id === 'bullet';\r\n}\r\n\r\nfunction register (id: IPhysicsEngineId, wrapper: IPhysicsWrapperObject): void {\r\n    if (!EDITOR && !TEST) log(`[PHYSICS]: register ${id}.`);\r\n    selector.backend[id] = wrapper;\r\n    if (!selector.physicsWorld || selector.id === id) {\r\n        updateLegacyMacro(id);\r\n        const mutableSelector = selector as Mutable<IPhysicsSelector>;\r\n        mutableSelector.id = id;\r\n        mutableSelector.wrapper = wrapper;\r\n    }\r\n}\r\n\r\nexport interface IWorldInitData {\r\n    gravity: IVec3Like;\r\n    allowSleep: boolean;\r\n    defaultMaterial: PhysicsMaterial;\r\n}\r\nlet worldInitData: IWorldInitData | null;\r\n\r\nfunction switchTo (id: IPhysicsEngineId): void {\r\n    if (!selector.runInEditor) return;\r\n    const mutableSelector = selector as Mutable<IPhysicsSelector>;\r\n    if (selector.physicsWorld && id !== selector.id && selector.backend[id] != null) {\r\n        selector.physicsWorld.destroy();\r\n        if (!TEST) log(`[PHYSICS]: switch from ${selector.id} to ${id}.`);\r\n        updateLegacyMacro(id);\r\n        mutableSelector.id = id;\r\n        mutableSelector.wrapper = selector.backend[id];\r\n        mutableSelector.physicsWorld = createPhysicsWorld();\r\n    } else {\r\n        if (!EDITOR && !TEST) log(`[PHYSICS]: using ${id}.`);\r\n        mutableSelector.physicsWorld = createPhysicsWorld();\r\n    }\r\n    if (worldInitData) {\r\n        const world = mutableSelector.physicsWorld;\r\n        world.setGravity(worldInitData.gravity);\r\n        world.setAllowSleep(worldInitData.allowSleep);\r\n    }\r\n}\r\n\r\n/**\r\n * @en\r\n * The physics selector is used to register and switch the physics engine backend.\r\n * @zh\r\n * 物理选择器用于注册和切换物理引擎后端。\r\n */\r\nexport const selector: IPhysicsSelector = {\r\n    id: '',\r\n    switchTo,\r\n    register,\r\n    wrapper: {} as any,\r\n    backend: {} as any,\r\n    physicsWorld: null as any,\r\n\r\n    /// hide for now ///\r\n    runInEditor: !EDITOR,\r\n};\r\n\r\nexport function constructDefaultWorld (data: IWorldInitData): void {\r\n    if (!worldInitData) worldInitData = data;\r\n    if (!selector.runInEditor) return;\r\n    if (!selector.physicsWorld) {\r\n        if (!TEST) log(`[PHYSICS]: using ${selector.id}.`);\r\n        const mutableSelector = selector as Mutable<IPhysicsSelector>;\r\n        const world = mutableSelector.physicsWorld = createPhysicsWorld();\r\n        world.setGravity(worldInitData.gravity);\r\n        world.setAllowSleep(worldInitData.allowSleep);\r\n    }\r\n}\r\n\r\n/// Utility Function For Create Wrapper Entity ///\r\n\r\nconst FUNC = (...v: any): any => 0 as any;\r\nconst ENTIRE_WORLD: IPhysicsWorld = {\r\n    impl: null,\r\n    debugDrawFlags: 0,\r\n    debugDrawConstraintSize: 0,\r\n    setGravity: FUNC,\r\n    setAllowSleep: FUNC,\r\n    setDefaultMaterial: FUNC,\r\n    step: FUNC,\r\n    syncAfterEvents: FUNC,\r\n    syncSceneToPhysics: FUNC,\r\n    raycast: FUNC,\r\n    raycastClosest: FUNC,\r\n    sweepBox: FUNC,\r\n    sweepBoxClosest: FUNC,\r\n    sweepSphere: FUNC,\r\n    sweepSphereClosest: FUNC,\r\n    sweepCapsule: FUNC,\r\n    sweepCapsuleClosest: FUNC,\r\n    emitEvents: FUNC,\r\n    destroy: FUNC,\r\n};\r\n\r\nenum ECheckType {\r\n    World,\r\n    RigidBody,\r\n    // COLLIDER //\r\n    BoxCollider,\r\n    SphereCollider,\r\n    CapsuleCollider,\r\n    MeshCollider,\r\n    CylinderCollider,\r\n    ConeCollider,\r\n    TerrainCollider,\r\n    SimplexCollider,\r\n    PlaneCollider,\r\n    // JOINT //\r\n    PointToPointConstraint,\r\n    HingeConstraint,\r\n    FixedConstraint,\r\n    ConfigurableConstraint,\r\n    // CHARACTER CONTROLLER //\r\n    BoxCharacterController,\r\n    CapsuleCharacterController,\r\n}\r\n\r\nfunction check (obj: any, type: ECheckType): boolean {\r\n    if (obj == null) {\r\n        if (selector.id) {\r\n            warn(`${selector.id} physics does not support ${ECheckType[type]}`);\r\n        } else {\r\n            errorID(9600);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function createPhysicsWorld (): IPhysicsWorld {\r\n    if (check(selector.wrapper.PhysicsWorld, ECheckType.World)) {\r\n        return ENTIRE_WORLD;\r\n    }\r\n    return new selector.wrapper.PhysicsWorld!();\r\n}\r\n\r\nconst ENTIRE_RIGID_BODY: IRigidBody = {\r\n    impl: null,\r\n    rigidBody: null as unknown as any,\r\n    isAwake: false,\r\n    isSleepy: false,\r\n    isSleeping: false,\r\n    initialize: FUNC,\r\n    onEnable: FUNC,\r\n    onDisable: FUNC,\r\n    onDestroy: FUNC,\r\n    setType: FUNC,\r\n    setMass: FUNC,\r\n    setLinearDamping: FUNC,\r\n    setAngularDamping: FUNC,\r\n    useGravity: FUNC,\r\n    setLinearFactor: FUNC,\r\n    setAngularFactor: FUNC,\r\n    setAllowSleep: FUNC,\r\n    wakeUp: FUNC,\r\n    sleep: FUNC,\r\n    clearState: FUNC,\r\n    clearForces: FUNC,\r\n    clearVelocity: FUNC,\r\n    setSleepThreshold: FUNC,\r\n    getSleepThreshold: FUNC,\r\n    getLinearVelocity: FUNC,\r\n    setLinearVelocity: FUNC,\r\n    getAngularVelocity: FUNC,\r\n    setAngularVelocity: FUNC,\r\n    applyForce: FUNC,\r\n    applyLocalForce: FUNC,\r\n    applyImpulse: FUNC,\r\n    applyLocalImpulse: FUNC,\r\n    applyTorque: FUNC,\r\n    applyLocalTorque: FUNC,\r\n    setGroup: FUNC,\r\n    getGroup: FUNC,\r\n    addGroup: FUNC,\r\n    removeGroup: FUNC,\r\n    setMask: FUNC,\r\n    getMask: FUNC,\r\n    addMask: FUNC,\r\n    removeMask: FUNC,\r\n    isUsingCCD: FUNC,\r\n    useCCD: FUNC,\r\n};\r\n\r\nexport function createRigidBody (): IRigidBody {\r\n    if (check(selector.wrapper.RigidBody, ECheckType.RigidBody)) {\r\n        return ENTIRE_RIGID_BODY;\r\n    }\r\n    return new selector.wrapper.RigidBody!();\r\n}\r\n\r\n/// CREATE COLLIDER ///\r\n\r\nconst CREATE_COLLIDER_PROXY = { INITED: false };\r\n\r\ninterface IEntireShape extends IBoxShape, ISphereShape, ICapsuleShape,\r\n    ITrimeshShape, ICylinderShape, IConeShape, ITerrainShape, ISimplexShape, IPlaneShape { }\r\nconst ENTIRE_SHAPE: IEntireShape = {\r\n    impl: null,\r\n    collider: null as unknown as any,\r\n    attachedRigidBody: null,\r\n    initialize: FUNC,\r\n    onLoad: FUNC,\r\n    onEnable: FUNC,\r\n    onDisable: FUNC,\r\n    onDestroy: FUNC,\r\n    setGroup: FUNC,\r\n    getGroup: FUNC,\r\n    addGroup: FUNC,\r\n    removeGroup: FUNC,\r\n    setMask: FUNC,\r\n    getMask: FUNC,\r\n    addMask: FUNC,\r\n    removeMask: FUNC,\r\n    setMaterial: FUNC,\r\n    setAsTrigger: FUNC,\r\n    setCenter: FUNC,\r\n    getAABB: FUNC,\r\n    getBoundingSphere: FUNC,\r\n    updateSize: FUNC,\r\n    updateRadius: FUNC,\r\n    setRadius: FUNC,\r\n    setCylinderHeight: FUNC,\r\n    setDirection: FUNC,\r\n    setHeight: FUNC,\r\n    setShapeType: FUNC,\r\n    setVertices: FUNC,\r\n    setMesh: FUNC,\r\n    setTerrain: FUNC,\r\n    setNormal: FUNC,\r\n    setConstant: FUNC,\r\n    updateEventListener: FUNC,\r\n};\r\n\r\nexport function createShape (type: EColliderType): IBaseShape {\r\n    initColliderProxy();\r\n    return CREATE_COLLIDER_PROXY[type]();\r\n}\r\n\r\nfunction initColliderProxy (): void {\r\n    if (CREATE_COLLIDER_PROXY.INITED) return;\r\n    CREATE_COLLIDER_PROXY.INITED = true;\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.BOX] = function createBoxShape (): IBoxShape {\r\n        if (check(selector.wrapper.BoxShape, ECheckType.BoxCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.BoxShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.SPHERE] = function createSphereShape (): ISphereShape {\r\n        if (check(selector.wrapper.SphereShape, ECheckType.SphereCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.SphereShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.CAPSULE] = function createCapsuleShape (): ICapsuleShape {\r\n        if (check(selector.wrapper.CapsuleShape, ECheckType.CapsuleCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.CapsuleShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.CYLINDER] = function createCylinderShape (): ICylinderShape {\r\n        if (check(selector.wrapper.CylinderShape, ECheckType.CylinderCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.CylinderShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.CONE] = function createConeShape (): IConeShape {\r\n        if (check(selector.wrapper.ConeShape, ECheckType.ConeCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.ConeShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.MESH] = function createTrimeshShape (): ITrimeshShape {\r\n        if (check(selector.wrapper.TrimeshShape, ECheckType.MeshCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.TrimeshShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.TERRAIN] = function createTerrainShape (): ITerrainShape {\r\n        if (check(selector.wrapper.TerrainShape, ECheckType.TerrainCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.TerrainShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.SIMPLEX] = function createSimplexShape (): ISimplexShape {\r\n        if (check(selector.wrapper.SimplexShape, ECheckType.SimplexCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.SimplexShape!();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[EColliderType.PLANE] = function createPlaneShape (): IPlaneShape {\r\n        if (check(selector.wrapper.PlaneShape, ECheckType.PlaneCollider)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.PlaneShape!();\r\n    };\r\n}\r\n\r\n/// CREATE CONSTRAINT ///\r\n\r\nconst CREATE_CONSTRAINT_PROXY = { INITED: false };\r\n\r\ninterface IEntireConstraint extends IPointToPointConstraint, IHingeConstraint, IFixedConstraint, IConfigurableConstraint { }\r\nconst ENTIRE_CONSTRAINT: IEntireConstraint = {\r\n    impl: null,\r\n    initialize: FUNC,\r\n    onLoad: FUNC,\r\n    onEnable: FUNC,\r\n    onDisable: FUNC,\r\n    onDestroy: FUNC,\r\n    setEnableCollision: FUNC,\r\n    setConnectedBody: FUNC,\r\n    setPivotA: FUNC,\r\n    setPivotB: FUNC,\r\n    setAxis: FUNC,\r\n    setSecondaryAxis: FUNC,\r\n    setBreakForce: FUNC,\r\n    setBreakTorque: FUNC,\r\n    setConstraintMode: FUNC,\r\n    setLinearLimit: FUNC,\r\n    setAngularExtent: FUNC,\r\n    setLinearSoftConstraint: FUNC,\r\n    setLinearStiffness: FUNC,\r\n    setLinearDamping: FUNC,\r\n    setLinearRestitution: FUNC,\r\n    setSwingSoftConstraint: FUNC,\r\n    setTwistSoftConstraint: FUNC,\r\n    setSwingStiffness: FUNC,\r\n    setSwingDamping: FUNC,\r\n    setSwingRestitution: FUNC,\r\n    setTwistStiffness: FUNC,\r\n    setTwistDamping: FUNC,\r\n    setTwistRestitution: FUNC,\r\n    setDriverMode: FUNC,\r\n    setLinearMotorTarget: FUNC,\r\n    setLinearMotorVelocity: FUNC,\r\n    setLinearMotorForceLimit: FUNC,\r\n    setAngularMotorTarget: FUNC,\r\n    setAngularMotorVelocity: FUNC,\r\n    setAngularMotorForceLimit: FUNC,\r\n    setAutoPivotB: FUNC,\r\n    setLimitEnabled: FUNC,\r\n    setLowerLimit: FUNC,\r\n    setUpperLimit: FUNC,\r\n    setMotorEnabled: FUNC,\r\n    setMotorVelocity: FUNC,\r\n    setMotorForceLimit: FUNC,\r\n};\r\n\r\nexport function createConstraint (type: EConstraintType): IBaseConstraint {\r\n    initConstraintProxy();\r\n    return CREATE_CONSTRAINT_PROXY[type]();\r\n}\r\n\r\nfunction initConstraintProxy (): void {\r\n    if (CREATE_CONSTRAINT_PROXY.INITED) return;\r\n    CREATE_CONSTRAINT_PROXY.INITED = true;\r\n\r\n    CREATE_CONSTRAINT_PROXY[EConstraintType.POINT_TO_POINT] = function createPointToPointConstraint (): IPointToPointConstraint {\r\n        if (check(selector.wrapper.PointToPointConstraint, ECheckType.PointToPointConstraint)) { return ENTIRE_CONSTRAINT; }\r\n        return new selector.wrapper.PointToPointConstraint!();\r\n    };\r\n\r\n    CREATE_CONSTRAINT_PROXY[EConstraintType.HINGE] = function createHingeConstraint (): IHingeConstraint {\r\n        if (check(selector.wrapper.HingeConstraint, ECheckType.HingeConstraint)) { return ENTIRE_CONSTRAINT; }\r\n        return new selector.wrapper.HingeConstraint!();\r\n    };\r\n\r\n    CREATE_CONSTRAINT_PROXY[EConstraintType.FIXED] = function createFixedConstraint (): IFixedConstraint {\r\n        if (check(selector.wrapper.FixedConstraint, ECheckType.FixedConstraint)) { return ENTIRE_CONSTRAINT; }\r\n        return new selector.wrapper.FixedConstraint!();\r\n    };\r\n\r\n    CREATE_CONSTRAINT_PROXY[EConstraintType.CONFIGURABLE] = function createConfigurableConstraint (): IConfigurableConstraint {\r\n        if (check(selector.wrapper.ConfigurableConstraint, ECheckType.ConfigurableConstraint)) { return ENTIRE_CONSTRAINT; }\r\n        return new selector.wrapper.ConfigurableConstraint!();\r\n    };\r\n}\r\n\r\n/// CREATE CHARACTER CONTROLLER ///\r\nconst CREATE_CHARACTER_CONTROLLER_PROXY = { INITED: false };\r\n\r\ninterface IEntireCharacterController extends IBoxCharacterController, ICapsuleCharacterController { }\r\nconst ENTIRE_CHARACTER_CONTROLLER: IEntireCharacterController = {\r\n    initialize: FUNC,\r\n    onLoad: FUNC,\r\n    onEnable: FUNC,\r\n    onDisable: FUNC,\r\n    onDestroy: FUNC,\r\n    onGround: FUNC,\r\n    getPosition: FUNC,\r\n    setPosition: FUNC,\r\n    setStepOffset: FUNC,\r\n    setSlopeLimit: FUNC,\r\n    setContactOffset: FUNC,\r\n    setDetectCollisions: FUNC,\r\n    setOverlapRecovery: FUNC,\r\n    setGroup: FUNC,\r\n    getGroup: FUNC,\r\n    addGroup: FUNC,\r\n    removeGroup: FUNC,\r\n    setMask: FUNC,\r\n    getMask: FUNC,\r\n    addMask: FUNC,\r\n    removeMask: FUNC,\r\n    move: FUNC,\r\n    syncPhysicsToScene: FUNC,\r\n    updateEventListener: FUNC,\r\n    //IBoxCharacterController\r\n    setHalfHeight: FUNC,\r\n    setHalfSideExtent: FUNC,\r\n    setHalfForwardExtent: FUNC,\r\n    //ICapsuleCharacterController\r\n    setRadius: FUNC,\r\n    setHeight: FUNC,\r\n};\r\n\r\nexport function createCharacterController (type: ECharacterControllerType): IEntireCharacterController {\r\n    initCharacterControllerProxy();\r\n    return CREATE_CHARACTER_CONTROLLER_PROXY[type]();\r\n}\r\n\r\nfunction initCharacterControllerProxy (): void {\r\n    if (CREATE_CHARACTER_CONTROLLER_PROXY.INITED) return;\r\n    CREATE_CHARACTER_CONTROLLER_PROXY.INITED = true;\r\n\r\n    CREATE_CHARACTER_CONTROLLER_PROXY[ECharacterControllerType.BOX] = function createBoxCharacterController (): IBoxCharacterController {\r\n        if (check(selector.wrapper.BoxCharacterController, ECheckType.BoxCharacterController)) { return ENTIRE_CHARACTER_CONTROLLER; }\r\n        return new selector.wrapper.BoxCharacterController!();\r\n    };\r\n\r\n    CREATE_CHARACTER_CONTROLLER_PROXY[ECharacterControllerType.CAPSULE] = function createCapsuleCharacterController (): ICapsuleCharacterController {\r\n        if (check(selector.wrapper.CapsuleCharacterController, ECheckType.CapsuleCharacterController)) { return ENTIRE_CHARACTER_CONTROLLER; }\r\n        return new selector.wrapper.CapsuleCharacterController!();\r\n    };\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n// @ts-check\r\n\r\nimport { ccclass, editable, range, serializable, type } from 'cc.decorator';\r\nimport { Asset } from '../../../asset/assets/asset';\r\nimport { CCFloat, math } from '../../../core';\r\n\r\n/**\r\n * @en\r\n * Physics materials.\r\n * @zh\r\n * 物理材质。\r\n */\r\n@ccclass('cc.PhysicsMaterial')\r\nexport class PhysicsMaterial extends Asset {\r\n    /**\r\n     * @en\r\n     * Gets all physics material instances.\r\n     * @zh\r\n     * 获取所有的物理材质实例。\r\n     */\r\n    static allMaterials: PhysicsMaterial[] = [];\r\n\r\n    /**\r\n     * @en\r\n     * The event which will be triggered when the entity of physics material update.\r\n     * @zh\r\n     * 物理材质实例更新时触发的事件。\r\n     * @event PhysicsMaterial.EVENT_UPDATE\r\n     */\r\n    static readonly EVENT_UPDATE = 'event_update';\r\n\r\n    /**\r\n     * @en\r\n     * Friction for this material.\r\n     * @zh\r\n     * 此材质的摩擦系数。\r\n     */\r\n    @editable\r\n    @type(CCFloat)\r\n    get friction (): number {\r\n        return this._friction;\r\n    }\r\n\r\n    set friction (value) {\r\n        if (!math.equals(this._friction, value)) {\r\n            this._friction = value;\r\n            this.emit(PhysicsMaterial.EVENT_UPDATE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Rolling friction for this material.\r\n     * @zh\r\n     * 此材质的滚动摩擦系数。\r\n     */\r\n    @editable\r\n    @type(CCFloat)\r\n    get rollingFriction (): number {\r\n        return this._rollingFriction;\r\n    }\r\n\r\n    set rollingFriction (value) {\r\n        if (!math.equals(this._rollingFriction, value)) {\r\n            this._rollingFriction = value;\r\n            this.emit(PhysicsMaterial.EVENT_UPDATE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Spinning friction for this material.\r\n     * @zh\r\n     * 此材质的自旋摩擦系数。\r\n     */\r\n    @editable\r\n    @type(CCFloat)\r\n    get spinningFriction (): number {\r\n        return this._spinningFriction;\r\n    }\r\n\r\n    set spinningFriction (value) {\r\n        if (!math.equals(this._spinningFriction, value)) {\r\n            this._spinningFriction = value;\r\n            this.emit(PhysicsMaterial.EVENT_UPDATE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Restitution for this material.\r\n     * @zh\r\n     * 此材质的回弹系数。\r\n     */\r\n    @editable\r\n    @type(CCFloat)\r\n    @range([0, 1, 0.01])\r\n    get restitution (): number {\r\n        return this._restitution;\r\n    }\r\n\r\n    set restitution (value) {\r\n        if (!math.equals(this._restitution, value)) {\r\n            this._restitution = value;\r\n            this.emit(PhysicsMaterial.EVENT_UPDATE);\r\n        }\r\n    }\r\n\r\n    readonly id: number;\r\n    private static _idCounter = 0;\r\n\r\n    @serializable\r\n    private _friction = 0.6;\r\n\r\n    @serializable\r\n    private _rollingFriction = 0.0;\r\n\r\n    @serializable\r\n    private _spinningFriction = 0.0;\r\n\r\n    @serializable\r\n    private _restitution = 0.0;\r\n\r\n    constructor () {\r\n        super();\r\n        PhysicsMaterial.allMaterials.push(this);\r\n        this.id = PhysicsMaterial._idCounter++;\r\n        if (!this._uuid) this._uuid = `pm_${this.id}`;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * clone.\r\n     * @zh\r\n     * 克隆。\r\n     */\r\n    public clone (): PhysicsMaterial {\r\n        const c = new PhysicsMaterial();\r\n        c._friction = this._friction;\r\n        c._restitution = this._restitution;\r\n        c._rollingFriction = this._rollingFriction;\r\n        c._spinningFriction = this._spinningFriction;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * destroy.\r\n     * @zh\r\n     * 销毁。\r\n     * @return 是否成功\r\n     */\r\n    public destroy (): boolean {\r\n        if (super.destroy()) {\r\n            const idx = PhysicsMaterial.allMaterials.indexOf(this);\r\n            if (idx >= 0) {\r\n                PhysicsMaterial.allMaterials.splice(idx, 1);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the coefficients values.\r\n     * @zh\r\n     * 设置材质相关的系数。\r\n     * @param friction\r\n     * @param rollingFriction\r\n     * @param spinningFriction\r\n     * @param restitution\r\n     */\r\n    public setValues (friction: number, rollingFriction: number, spinningFriction: number, restitution: number): void {\r\n        const emitUpdate = this._friction !== friction || this._rollingFriction !== rollingFriction\r\n            || this._spinningFriction !== spinningFriction || this._restitution !== restitution;\r\n        this._friction = friction;\r\n        this._rollingFriction = rollingFriction;\r\n        this._spinningFriction = spinningFriction;\r\n        this._restitution = restitution;\r\n        if (emitUpdate) this.emit(PhysicsMaterial.EVENT_UPDATE);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, IVec3Like } from '../../core';\r\nimport { Collider } from '../../../exports/physics-framework';\r\n\r\n/**\r\n * @en\r\n * Used to store physics ray test results.\r\n * @zh\r\n * 用于保存物理射线检测结果。\r\n */\r\nexport class PhysicsRayResult {\r\n    /**\r\n     * @en\r\n     * The hit point，in world space.\r\n     * @zh\r\n     * 在世界坐标系下的击中点。\r\n     */\r\n    get hitPoint (): Vec3 {\r\n        return this._hitPoint;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The distance between the ray origin with the hit.\r\n     * @zh\r\n     * 距离。\r\n     */\r\n    get distance (): number {\r\n        return this._distance;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The collider hit by the ray.\r\n     * @zh\r\n     * 击中的碰撞盒\r\n     */\r\n    get collider (): Collider {\r\n        return this._collider!;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The normal of the hit plane，in world space.\r\n     * @zh\r\n     * 在世界坐标系下击中面的法线。\r\n     */\r\n    get hitNormal (): Vec3 {\r\n        return this._hitNormal;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Represents the fraction (range: 0.0 to 1.0) along the ray's path where the closest collision occurs.\r\n     * A value of 0.0 indicates an immediate collision at the ray's starting point,\r\n     * while a value of 1.0 means no collision along the entire ray length.\r\n     * Intermediate values indicate the fraction of the ray distance at which the closest hit is detected.\r\n     * Warning: only take effect with Bullet.\r\n     * @zh\r\n     * 表示射线路径上最近碰撞发生的位置，以百分比形式（范围：0.0 到 1.0）。\r\n     * 0.0 表示射线在起点处立即发生碰撞，1.0 表示射线在整个路径上未发生碰撞。\r\n     * 中间值表示碰撞点在射线总长度上的比例位置。\r\n     * 注意：只在 Bullet 引擎起效.\r\n     */\r\n    get closestHitFraction (): number {\r\n        return this._closestHitFraction;\r\n    }\r\n\r\n    protected _hitPoint: Vec3 = new Vec3();\r\n    protected _hitNormal: Vec3 = new Vec3();\r\n    protected _distance = 0;\r\n    protected _collider: Collider | null = null;\r\n    protected _closestHitFraction = 0;\r\n\r\n    /**\r\n     * @en\r\n     * internal methods.\r\n     * @zh\r\n     * 设置射线，此方法由引擎内部使用，请勿在外部脚本调用。\r\n     *\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _assign (hitPoint: IVec3Like, distance: number, collider: Collider, hitNormal: IVec3Like, closestHitFraction?: number): void {\r\n        Vec3.copy(this._hitPoint, hitPoint);\r\n        Vec3.copy(this._hitNormal, hitNormal);\r\n        this._distance = distance;\r\n        this._collider = collider;\r\n        if (closestHitFraction) this._closestHitFraction = closestHitFraction;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * clone.\r\n     * @zh\r\n     * 克隆。\r\n     */\r\n    public clone (): PhysicsRayResult {\r\n        const c = new PhysicsRayResult();\r\n        Vec3.copy(c._hitPoint, this._hitPoint);\r\n        Vec3.copy(c._hitNormal, this._hitNormal);\r\n        c._distance = this._distance;\r\n        c._collider = this._collider;\r\n        c._closestHitFraction = this._closestHitFraction;\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @en\r\n * Used to store physics line strip cast test results.\r\n * @zh\r\n * 用于保存物理逐线段检测结果。\r\n */\r\nexport class PhysicsLineStripCastResult extends PhysicsRayResult {\r\n    private _id = 0;\r\n\r\n    /**\r\n     * @en\r\n     * The line id of the line segments. This is only for lineStripCast\r\n     * @zh\r\n     * id\r\n     */\r\n    get id (): number {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * internal methods.\r\n     * @zh\r\n     * 设置射线，此方法由引擎内部使用，请勿在外部脚本调用。\r\n     * @engineInternal\r\n     */\r\n    public _assign (hitPoint: IVec3Like, distance: number, collider: Collider, hitNormal: IVec3Like, id = 0): void {\r\n        super._assign(hitPoint, distance, collider, hitNormal);\r\n        this._id = id;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * clone.\r\n     * @zh\r\n     * 克隆。\r\n     */\r\n    public clone (): PhysicsLineStripCastResult {\r\n        const c = new PhysicsLineStripCastResult();\r\n        Vec3.copy(c._hitPoint, this._hitPoint);\r\n        Vec3.copy(c._hitNormal, this._hitNormal);\r\n        c._distance = this._distance;\r\n        c._collider = this._collider;\r\n        c._id = this._id;\r\n        return c;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD, EDITOR_NOT_IN_PREVIEW, LOAD_BULLET_MANUALLY, LOAD_PHYSX_MANUALLY } from 'internal:constants';\r\nimport { Vec3, RecyclePool, Enum, System, cclegacy, settings, geometry, warn, IQuatLike, IVec3Like, SettingsCategory, errorID, warnID } from '../../core';\r\nimport { IPhysicsWorld, IRaycastOptions } from '../spec/i-physics-world';\r\nimport { director, DirectorEvent, game } from '../../game';\r\nimport { PhysicsMaterial } from './assets/physics-material';\r\nimport { PhysicsRayResult, PhysicsLineStripCastResult } from './physics-ray-result';\r\nimport { IPhysicsConfig, ICollisionMatrix } from './physics-config';\r\nimport { CollisionMatrix } from './collision-matrix';\r\nimport { PhysicsGroup } from './physics-enum';\r\nimport { constructDefaultWorld, IWorldInitData, selector } from './physics-selector';\r\nimport { assetManager, builtinResMgr } from '../../asset/asset-manager';\r\n\r\ncclegacy.internal.PhysicsGroup = PhysicsGroup;\r\n\r\nconst querySettings = settings.querySettings.bind(settings);\r\n\r\n/**\r\n * @en\r\n * Physics system.\r\n * @zh\r\n * 物理系统。\r\n */\r\nexport class PhysicsSystem extends System implements IWorldInitData {\r\n    public static get PHYSICS_NONE (): boolean {\r\n        return !selector.id;\r\n    }\r\n\r\n    public static get PHYSICS_BUILTIN (): boolean {\r\n        return selector.id === 'builtin';\r\n    }\r\n\r\n    public static get PHYSICS_CANNON (): boolean {\r\n        return selector.id === 'cannon.js';\r\n    }\r\n\r\n    public static get PHYSICS_BULLET (): boolean {\r\n        return selector.id === 'bullet';\r\n    }\r\n\r\n    public static get PHYSICS_PHYSX (): boolean {\r\n        return selector.id === 'physx';\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the ID of the system.\r\n     * @zh\r\n     * 获取此系统的ID。\r\n     */\r\n    public static readonly ID = 'PHYSICS';\r\n\r\n    /**\r\n     * @en\r\n     * Gets the predefined physics groups.\r\n     * @zh\r\n     * 获取预定义的物理分组。\r\n     */\r\n    public static get PhysicsGroup (): typeof PhysicsGroup {\r\n        return PhysicsGroup;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the physical system instance.\r\n     * @zh\r\n     * 获取物理系统实例。\r\n     */\r\n    public static get instance (): PhysicsSystem {\r\n        return PhysicsSystem._instance!;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether the physical system is enabled, which can be used to pause or continue running the physical system.\r\n     * @zh\r\n     * 获取或设置是否启用物理系统，可以用于暂停或继续运行物理系统。\r\n     */\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (value: boolean) {\r\n        this._enable = value;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * Gets or sets whether the physical system allows automatic sleep, which defaults to true.\r\n     * @zh\r\n     * 获取或设置物理系统是否允许自动休眠，默认为 true。\r\n     */\r\n    public get allowSleep (): boolean {\r\n        return this._allowSleep;\r\n    }\r\n\r\n    public set allowSleep (v: boolean) {\r\n        this._allowSleep = v;\r\n        if (this.physicsWorld) {\r\n            this.physicsWorld.setAllowSleep(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the maximum number of simulated substeps per frame.\r\n     * @zh\r\n     * 获取或设置每帧模拟的最大子步数。\r\n     */\r\n    public get maxSubSteps (): number {\r\n        return this._maxSubSteps;\r\n    }\r\n\r\n    public set maxSubSteps (value: number) {\r\n        this._maxSubSteps = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the fixed delta time consumed by each simulation step in seconds.\r\n     * @zh\r\n     * 获取或设置每步模拟消耗的固定时间（以 s 为单位）。\r\n     */\r\n    public get fixedTimeStep (): number {\r\n        return this._fixedTimeStep;\r\n    }\r\n\r\n    public set fixedTimeStep (value: number) {\r\n        this._fixedTimeStep = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the value of gravity in the physical world, which defaults to (0, -10, 0).\r\n     * @zh\r\n     * 获取或设置物理世界的重力数值，默认为 (0, -10, 0)。\r\n     */\r\n    public get gravity (): Vec3 {\r\n        return this._gravity;\r\n    }\r\n\r\n    public set gravity (gravity: Vec3) {\r\n        this._gravity.set(gravity);\r\n        if (this.physicsWorld) {\r\n            this.physicsWorld.setGravity(gravity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the default speed threshold for going to sleep.\r\n     * @zh\r\n     * 获取或设置进入休眠的默认速度临界值。\r\n     */\r\n    public get sleepThreshold (): number {\r\n        return this._sleepThreshold;\r\n    }\r\n\r\n    public set sleepThreshold (v: number) {\r\n        this._sleepThreshold = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Turn on or off the automatic simulation.\r\n     * @zh\r\n     * 获取或设置是否自动模拟。\r\n     */\r\n    public get autoSimulation (): boolean {\r\n        return this._autoSimulation;\r\n    }\r\n\r\n    public set autoSimulation (value: boolean) {\r\n        this._autoSimulation = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the global default physical material.\r\n     * @zh\r\n     * 获取全局的默认物理材质。\r\n     */\r\n    public get defaultMaterial (): PhysicsMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Set the default physics material.\r\n     * @zh\r\n     * 设置默认物理材质。\r\n     */\r\n    public setDefaultPhysicsMaterial (material: PhysicsMaterial): void {\r\n        this._material = material;\r\n        this.physicsWorld.setDefaultMaterial(this._material);\r\n        this._material.on(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n    }\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    private initDefaultMaterial (): Promise<void> {\r\n        if (this._material != null) return Promise.resolve();\r\n\r\n        const builtinMaterial = builtinResMgr.get<PhysicsMaterial>('default-physics-material');\r\n        if (!builtinMaterial) {\r\n            errorID(9642);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const userMaterial: string | null = querySettings(SettingsCategory.PHYSICS, 'defaultMaterial');\r\n        if (!userMaterial) { //use built-in default physics material\r\n            this.setDefaultPhysicsMaterial(builtinMaterial);\r\n            return Promise.resolve();\r\n        } else { //use user customized default physics material\r\n            return new Promise<PhysicsMaterial>((resolve, reject): void => {\r\n                assetManager.loadAny(userMaterial, (err, asset): void => ((err || !(asset instanceof PhysicsMaterial))\r\n                    ? reject(err)\r\n                    : resolve(asset)));\r\n            }).then((asset): void => {\r\n                this.setDefaultPhysicsMaterial(asset);\r\n            }).catch((reason): void => {\r\n                warn(reason);\r\n                warnID(9643, userMaterial);\r\n                this.setDefaultPhysicsMaterial(builtinMaterial);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrappered object of the physical world through which you can access the actual underlying object.\r\n     * @zh\r\n     * 获取物理世界的封装对象，通过它你可以访问到实际的底层对象。\r\n     */\r\n    public get physicsWorld (): IPhysicsWorld {\r\n        return selector.physicsWorld!;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the raycastClosest test result.\r\n     * @zh\r\n     * 获取 raycastClosest 的检测结果。\r\n     */\r\n    public readonly raycastClosestResult = new PhysicsRayResult();\r\n\r\n    /**\r\n    * @en\r\n    * Gets the raycast test results.\r\n    * @zh\r\n    * 获取 raycast 的检测结果。\r\n    */\r\n    public readonly raycastResults: PhysicsRayResult[] = [];\r\n\r\n    /**\r\n     * @en\r\n     * Gets the lineStripCastClosest test result.\r\n     * @zh\r\n     * 获取 lineStripCastClosest 的检测结果。\r\n     */\r\n    public lineStripCastClosestResult = new PhysicsLineStripCastResult();\r\n\r\n    /**\r\n    * @en\r\n    * Gets the lineStripCast test results.\r\n    * @zh\r\n    * 获取 lineStripCast 的检测结果。\r\n    */\r\n    public lineStripCastResults: PhysicsLineStripCastResult[] = [];\r\n\r\n    /**\r\n     * @en\r\n     * Gets the sweepCastClosest test result.\r\n     * @zh\r\n     * 获取 sweepCastClosest 的检测结果。\r\n     */\r\n    public readonly sweepCastClosestResult = new PhysicsRayResult();\r\n\r\n    /**\r\n        * @en\r\n        * Gets the sweepCast test results.\r\n        * @zh\r\n        * 获取 sweepCast 的检测结果。\r\n        */\r\n    public readonly sweepCastResults: PhysicsRayResult[] = [];\r\n\r\n    /**\r\n    * @en\r\n    * Gets the collision matrix that used for initialization only.\r\n    * @zh\r\n    * 获取碰撞矩阵，它仅用于初始化。\r\n    */\r\n    public readonly collisionMatrix: ICollisionMatrix = new CollisionMatrix(1) as ICollisionMatrix;\r\n\r\n    /**\r\n     * @en\r\n     * The minimum size of the collision body.\r\n     * @zh\r\n     * 碰撞体的最小尺寸。\r\n     */\r\n    public minVolumeSize = 1e-5;\r\n\r\n    public readonly useNodeChains: boolean = false;\r\n\r\n    private _enable = true;\r\n    private _allowSleep = true;\r\n    private _maxSubSteps = 1;\r\n    private _subStepCount = 0;\r\n    private _fixedTimeStep = 1.0 / 60.0;\r\n    private _autoSimulation = true;\r\n    private _accumulator = 0;\r\n    private _sleepThreshold = 0.1;\r\n    private readonly _gravity = new Vec3(0, -10, 0);\r\n    private _material!: PhysicsMaterial; //default physics material\r\n    private static readonly _instance: PhysicsSystem | null = null;\r\n    private readonly raycastOptions: IRaycastOptions = {\r\n        group: -1,\r\n        mask: -1,\r\n        queryTrigger: true,\r\n        maxDistance: 10000000,\r\n    };\r\n\r\n    private readonly raycastResultPool = new RecyclePool<PhysicsRayResult>((): PhysicsRayResult => new PhysicsRayResult(), 1);\r\n    private readonly sweepResultPool = new RecyclePool<PhysicsRayResult>((): PhysicsRayResult => new PhysicsRayResult(), 1);\r\n\r\n    private constructor () {\r\n        super();\r\n    }\r\n\r\n    postUpdate (deltaTime: number): void {\r\n        if (EDITOR_NOT_IN_PREVIEW && !this._executeInEditMode && !selector.runInEditor) return;\r\n\r\n        if (!this.physicsWorld) return;\r\n\r\n        if (!this._enable) {\r\n            this.physicsWorld.syncSceneToPhysics();\r\n            return;\r\n        }\r\n\r\n        if (this._autoSimulation) {\r\n            this._subStepCount = 0;\r\n            this._accumulator += deltaTime;\r\n            director.emit(DirectorEvent.BEFORE_PHYSICS);\r\n            while (this._subStepCount < this._maxSubSteps) {\r\n                if (this._accumulator >= this._fixedTimeStep) {\r\n                    this.physicsWorld.syncSceneToPhysics();\r\n                    this.physicsWorld.step(this._fixedTimeStep);\r\n                    this.physicsWorld.emitEvents();\r\n                    this.physicsWorld.syncAfterEvents();\r\n                    this._accumulator -= this._fixedTimeStep;\r\n                    this._subStepCount++;\r\n                } else {\r\n                    this.physicsWorld.syncSceneToPhysics();\r\n                    break;\r\n                }\r\n            }\r\n            director.emit(DirectorEvent.AFTER_PHYSICS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Reset the physics configuration.\r\n     * @zh\r\n     * 重置物理配置。\r\n     */\r\n    resetConfiguration (config?: IPhysicsConfig): void {\r\n        const allowSleep = config ? config.allowSleep : querySettings(SettingsCategory.PHYSICS, 'allowSleep');\r\n        if (typeof allowSleep === 'boolean') this._allowSleep = allowSleep;\r\n        const fixedTimeStep = config ? config.fixedTimeStep : querySettings(SettingsCategory.PHYSICS, 'fixedTimeStep');\r\n        if (typeof fixedTimeStep === 'number') this._fixedTimeStep = fixedTimeStep;\r\n        const maxSubSteps = config ? config.maxSubSteps : querySettings(SettingsCategory.PHYSICS, 'maxSubSteps');\r\n        if (typeof maxSubSteps === 'number') this._maxSubSteps = maxSubSteps;\r\n        const sleepThreshold = config ? config.sleepThreshold : querySettings(SettingsCategory.PHYSICS, 'sleepThreshold');\r\n        if (typeof sleepThreshold === 'number') this._sleepThreshold = sleepThreshold;\r\n        const autoSimulation = config ? config.autoSimulation : querySettings(SettingsCategory.PHYSICS, 'autoSimulation');\r\n        if (typeof autoSimulation === 'boolean') this.autoSimulation = autoSimulation;\r\n\r\n        const gravity = config ? config.gravity : querySettings(SettingsCategory.PHYSICS, 'gravity');\r\n        if (gravity) Vec3.copy(this._gravity, gravity);\r\n\r\n        const collisionMatrix = config ? config.collisionMatrix : querySettings(SettingsCategory.PHYSICS, 'collisionMatrix');\r\n        if (collisionMatrix) {\r\n            for (const i in collisionMatrix) {\r\n                this.collisionMatrix[`${1 << parseInt(i)}`] = collisionMatrix[i];\r\n            }\r\n        }\r\n        const collisionGroups = config ? config.collisionGroups : querySettings<Array<{ name: string, index: number }>>(SettingsCategory.PHYSICS, 'collisionGroups');\r\n        if (collisionGroups) {\r\n            const cg = collisionGroups;\r\n            if (cg instanceof Array) {\r\n                cg.forEach((v): void => { PhysicsGroup[v.name] = 1 << v.index; });\r\n                Enum.update(PhysicsGroup);\r\n            }\r\n        }\r\n\r\n        if (this.physicsWorld) {\r\n            this.physicsWorld.setGravity(this._gravity);\r\n            this.physicsWorld.setAllowSleep(this._allowSleep);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Reset the accumulator of time to given value.\r\n     * @zh\r\n     * 重置时间累积总量为给定值。\r\n     */\r\n    resetAccumulator (time = 0): void {\r\n        this._accumulator = time;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Perform simulation steps for the physics world.\r\n     * @zh\r\n     * 执行物理世界的模拟步进。\r\n     * @param fixedTimeStep\r\n     */\r\n    step (fixedTimeStep: number, deltaTime?: number, maxSubSteps?: number): void {\r\n        if (this.physicsWorld) this.physicsWorld.step(fixedTimeStep, deltaTime, maxSubSteps);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sync the scene world transform changes to the physics world.\r\n     * @zh\r\n     * 同步场景世界的变化信息到物理世界中。\r\n     */\r\n    syncSceneToPhysics (): void {\r\n        if (this.physicsWorld) this.physicsWorld.syncSceneToPhysics();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Emit trigger and collision events.\r\n     * @zh\r\n     * 触发`trigger`和`collision`事件。\r\n     */\r\n    emitEvents (): void {\r\n        if (this.physicsWorld) this.physicsWorld.emitEvents();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get or set debug draw flags. Default is EPhysicsDrawFlags.NONE.\r\n     * Refer to EPhysicsDrawFlags.\r\n     * Note: Since physics debug draw uses Geometry-Renderer to do drawing,\r\n     * make sure Geometry-Renderer is not cropped in Project Setting.\r\n     * @zh\r\n     * 获取或设置调试绘制标志。默认为 EPhysicsDrawFlags.NONE。\r\n     * 参考 EPhysicsDrawFlags。\r\n     * 注意：因为物理调试绘制使用几何渲染器来绘制，请确保项目设置中几何渲染器没有被裁剪掉。\r\n     */\r\n    get debugDrawFlags (): number {\r\n        return this.physicsWorld.debugDrawFlags;\r\n    }\r\n\r\n    set debugDrawFlags (v) {\r\n        this.physicsWorld.debugDrawFlags = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get or set constraint debug draw size. Default is 0.3.\r\n     * @zh\r\n     * 获取或设置约束的调试绘制尺寸。默认为 0.3。\r\n     */\r\n    get debugDrawConstraintSize (): number {\r\n        return this.physicsWorld.debugDrawConstraintSize;\r\n    }\r\n\r\n    set debugDrawConstraintSize (v) {\r\n        this.physicsWorld.debugDrawConstraintSize = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Collision detect all collider, and record all the detected results, through PhysicsSystem.Instance.RaycastResults access to the results.\r\n     * @zh\r\n     * 检测所有的碰撞盒，并记录所有被检测到的结果，通过 PhysicsSystem.instance.raycastResults 访问结果。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                    @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    raycast (worldRay: geometry.Ray, mask = 0xffffffff, maxDistance = 10000000, queryTrigger = true): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.raycastResultPool.reset();\r\n        this.raycastResults.length = 0;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.raycast(worldRay, this.raycastOptions, this.raycastResultPool, this.raycastResults);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Collision detect all collider, and record and ray test results with the shortest distance\r\n     * by PhysicsSystem.Instance.RaycastClosestResult access to the results.\r\n     * @zh\r\n     * 检测所有的碰撞盒，并记录与射线距离最短的检测结果，通过 PhysicsSystem.instance.raycastClosestResult 访问结果。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                    @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    raycastClosest (worldRay: geometry.Ray, mask = 0xffffffff, maxDistance = 10000000, queryTrigger = true): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.raycastClosest(worldRay, this.raycastOptions, this.raycastClosestResult);\r\n    }\r\n\r\n    /**\r\n    * @en\r\n    * Collision detect all collider and record all the detected results, using\r\n    * PhysicsSystem.Instance.lineStripCastResults to access the results.\r\n    * @zh\r\n    * 逐线段检测所有的碰撞盒，并记录所有检测结果。通过 PhysicsSystem.instance.lineStripCastResults 访问结果。\r\n    * @param samplePointsWorldSpace @zh 世界空间下的采样点/直线段 @en sample points/line segments in world space\r\n    * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n    * @param maxDistance @zh 沿着直线段的最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n    *                    @en Maximum detection distance along the line segments, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n    * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n    * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n    */\r\n    lineStripCast (samplePointsWorldSpace: Array<Vec3>, mask = 0xffffffff, maxDistance = 10000000, queryTrigger = true): boolean {\r\n        if (samplePointsWorldSpace.length < 2) return false;\r\n        this.lineStripCastResults = [];\r\n        let distance = 0;\r\n        const worldRay = new geometry.Ray();\r\n        for (let i = 1; i < samplePointsWorldSpace.length; ++i) {\r\n            if (distance > maxDistance) break;\r\n\r\n            const fromPoint = samplePointsWorldSpace[i - 1];\r\n            const toPoint = samplePointsWorldSpace[i];\r\n            const direction = new Vec3();\r\n            Vec3.subtract(direction, toPoint, fromPoint);\r\n            const stepLength = Vec3.len(direction);\r\n            distance += stepLength;\r\n            Vec3.multiplyScalar(direction, direction, 1.0 / stepLength);\r\n            worldRay.d = direction;\r\n            worldRay.o = fromPoint;\r\n            const hit = this.raycast(worldRay, mask, stepLength, queryTrigger);\r\n            if (hit) {\r\n                for (let re = 0; re < this.raycastResults.length; re++) {\r\n                    const result = this.raycastResults[re];\r\n                    //if ray starts inside shape and hit point equals to start point, this should be ignored\r\n                    if (re === 0 && Vec3.equals(fromPoint, result.hitPoint)) { continue; }\r\n                    const copiedResult = new PhysicsLineStripCastResult();\r\n                    copiedResult._assign(result.hitPoint, result.distance, result.collider, result.hitNormal, i - 1);\r\n                    this.lineStripCastResults.push(copiedResult);\r\n                }\r\n            }\r\n        }\r\n        return this.lineStripCastResults.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Collision detect all collider, and record the ray test results with the shortest distance.\r\n     * Using PhysicsSystem.Instance.lineStripCastClosestResult to access the result.\r\n     * @zh\r\n     * 逐线段检测所有的碰撞盒，并记录沿这些线段距离最短的检测结果，通过 PhysicsSystem.instance.lineStripCastClosestResult 访问结果。\r\n     * @param samplePointsWorldSpace @zh 世界空间下的采样点/直线段 @en sample points/line segments in world space\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 沿着直线段的最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                    @en Maximum detection distance along the line segments, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    lineStripCastClosest (samplePointsWorldSpace: Array<Vec3>, mask = 0xffffffff, maxDistance = 10000000, queryTrigger = true): boolean {\r\n        if (samplePointsWorldSpace.length < 2) { return false; }\r\n        let distance = 0;\r\n        const worldRay = new geometry.Ray();\r\n        let hit = false;\r\n        for (let i = 1; i < samplePointsWorldSpace.length; ++i) {\r\n            if (distance > maxDistance) break;\r\n\r\n            const fromPoint = samplePointsWorldSpace[i - 1];\r\n            const toPoint = samplePointsWorldSpace[i];\r\n            const direction = new Vec3();\r\n            Vec3.subtract(direction, toPoint, fromPoint);\r\n            const stepLength = Vec3.len(direction);\r\n            distance += stepLength;\r\n            Vec3.multiplyScalar(direction, direction, 1.0 / stepLength);\r\n            worldRay.d = direction;\r\n            worldRay.o = fromPoint;\r\n            hit = this.raycastClosest(worldRay, mask, stepLength, queryTrigger);\r\n            if (hit) {\r\n                const result = this.raycastClosestResult;\r\n                const copiedResult = new PhysicsLineStripCastResult();\r\n                copiedResult._assign(result.hitPoint, result.distance, result.collider, result.hitNormal, i - 1);\r\n                this.lineStripCastClosestResult = copiedResult;\r\n                break;\r\n            }\r\n        }\r\n        return hit;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Cast a box along a ray and record information on what was hit.\r\n     * Access the results through PhysicsSystem.Instance.sweepCastResults.\r\n     * @zh\r\n     * 将盒体沿着射线发射，记录所有被检测到的结果，通过 PhysicsSystem.instance.sweepCastResults 访问结果。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param halfExtent @zh 盒体的一半尺寸 @en Half extent of the box\r\n     * @param orientation @zh 盒体的方向 @en Orientation of the box\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                    @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    sweepBox (\r\n        worldRay: geometry.Ray,\r\n        halfExtent: IVec3Like,\r\n        orientation: IQuatLike,\r\n        mask = 0xffffffff,\r\n        maxDistance = 10000000,\r\n        queryTrigger = true,\r\n    ): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.sweepResultPool.reset();\r\n        this.sweepCastResults.length = 0;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.sweepBox(\r\n            worldRay,\r\n            halfExtent,\r\n            orientation,\r\n            this.raycastOptions,\r\n            this.sweepResultPool,\r\n            this.sweepCastResults,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Cast a box along a ray and record information on the closest hit.\r\n     * Access the results through PhysicsSystem.Instance.sweepCastClosestResult.\r\n     * @zh\r\n     * 将盒体沿着射线发射，记录距离最近的碰撞结果，通过 PhysicsSystem.instance.sweepCastClosestResult 访问结果。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param halfExtent @zh 盒体的一半尺寸 @en Half extent of the box\r\n     * @param orientation @zh 盒体的方向 @en Orientation of the box\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                   @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    sweepBoxClosest (\r\n        worldRay: geometry.Ray,\r\n        halfExtent: IVec3Like,\r\n        orientation: IQuatLike,\r\n        mask = 0xffffffff,\r\n        maxDistance = 10000000,\r\n        queryTrigger = true,\r\n    ): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.sweepBoxClosest(\r\n            worldRay,\r\n            halfExtent,\r\n            orientation,\r\n            this.raycastOptions,\r\n            this.sweepCastClosestResult,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Cast a sphere along a ray and record information on what was hit.\r\n     * Access the results through PhysicsSystem.Instance.sweepCastResults.\r\n     * @zh\r\n     * 将球体沿着射线发射，记录所有被检测到的结果，通过 PhysicsSystem.instance.sweepCastResults 访问结果。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param radius @zh 球体的半径 @en Radius of the sphere\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                  @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    sweepSphere (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        mask = 0xffffffff,\r\n        maxDistance = 10000000,\r\n        queryTrigger = true,\r\n    ): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.sweepResultPool.reset();\r\n        this.sweepCastResults.length = 0;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.sweepSphere(\r\n            worldRay,\r\n            radius,\r\n            this.raycastOptions,\r\n            this.sweepResultPool,\r\n            this.sweepCastResults,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Cast a sphere along a ray and record information on the closest hit.\r\n     * Access the result through PhysicsSystem.Instance.sweepCastClosestResult.\r\n     * @zh\r\n     * 将球体沿着射线发射，记录距离最近的碰撞结果，通过 PhysicsSystem.instance.sweepCastClosestResult 访问结果。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param radius @zh 球体的半径 @en Radius of the sphere\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                 @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    sweepSphereClosest (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        mask = 0xffffffff,\r\n        maxDistance = 10000000,\r\n        queryTrigger = true,\r\n    ): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.sweepSphereClosest(\r\n            worldRay,\r\n            radius,\r\n            this.raycastOptions,\r\n            this.sweepCastClosestResult,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Cast a capsule along a ray and record information on what was hit.\r\n     * Access the results through PhysicsSystem.Instance.sweepCastResults.\r\n     * Capsule's default axis is along the world space Y axis.\r\n     * @zh\r\n     * 将胶囊体沿着射线发射，记录所有被检测到的结果，通过 PhysicsSystem.instance.sweepCastResults 访问结果。\r\n     * 胶囊体的默认朝向是世界空间下的 Y 轴。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param radius @zh 胶囊体的半径 @en Radius of the capsule\r\n     * @param height @zh 胶囊体末端两个半球圆心的距离 @en Distance between the two half-sphere centers of the capsule\r\n     * @param orientation @zh 胶囊体的朝向 @en Orientation of the capsule\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *                @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    sweepCapsule (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        height: number,\r\n        orientation: IQuatLike,\r\n        mask = 0xffffffff,\r\n        maxDistance = 10000000,\r\n        queryTrigger = true,\r\n    ): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.sweepResultPool.reset();\r\n        this.sweepCastResults.length = 0;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.sweepCapsule(\r\n            worldRay,\r\n            radius,\r\n            height,\r\n            orientation,\r\n            this.raycastOptions,\r\n            this.sweepResultPool,\r\n            this.sweepCastResults,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Cast a capsule along a ray and record information on the closest hit.\r\n     * Access the result through PhysicsSystem.Instance.sweepCastClosestResult.\r\n     * Capsule's default axis is along the world space Y axis.\r\n     * @zh\r\n     * 将胶囊体沿着射线发射，记录距离最近的碰撞结果，通过 PhysicsSystem.instance.sweepCastClosestResult 访问结果。\r\n     * 胶囊体的默认朝向是世界空间下的 Y 轴。\r\n     * @param worldRay @zh 世界空间下的一条射线 @en A ray in world space\r\n     * @param radius @zh 胶囊体的半径 @en Radius of the capsule\r\n     * @param height @zh 胶囊体末端两个半球圆心的距离 @en Distance between the two half-sphere centers of the capsule\r\n     * @param orientation @zh 胶囊体的朝向 @en Orientation of the capsule\r\n     * @param mask @zh 掩码，默认为 0xffffffff @en Mask, default value is 0xffffffff\r\n     * @param maxDistance @zh 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE\r\n     *               @en Maximum detection distance, default value is 10000000, do not pass Infinity or Number.MAX_VALUE for now\r\n     * @param queryTrigger @zh 是否检测触发器 @en Whether to detect triggers\r\n     * @return {boolean} @zh 表示是否有检测到碰撞 @en Indicates whether a collision has been detected\r\n     */\r\n    sweepCapsuleClosest (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        height: number,\r\n        orientation: IQuatLike,\r\n        mask = 0xffffffff,\r\n        maxDistance = 10000000,\r\n        queryTrigger = true,\r\n    ): boolean {\r\n        if (!this.physicsWorld) return false;\r\n        this.raycastOptions.mask = mask >>> 0;\r\n        this.raycastOptions.maxDistance = maxDistance;\r\n        this.raycastOptions.queryTrigger = queryTrigger;\r\n        return this.physicsWorld.sweepCapsuleClosest(\r\n            worldRay,\r\n            radius,\r\n            height,\r\n            orientation,\r\n            this.raycastOptions,\r\n            this.sweepCastClosestResult,\r\n        );\r\n    }\r\n\r\n    private _updateMaterial (): void {\r\n        if (this.physicsWorld) this.physicsWorld.setDefaultMaterial(this._material);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Construct and register the system singleton.\r\n     * If the module is pre-loaded, it will be executed automatically.\r\n     * @zh\r\n     * 构造并注册系统单例。\r\n     * 预先加载模块的情况下，会自动执行。\r\n     */\r\n    static constructAndRegister (): void {\r\n        if (BUILD && (LOAD_BULLET_MANUALLY || LOAD_PHYSX_MANUALLY)) return;\r\n        if (!PhysicsSystem._instance) {\r\n            const sys = this.doConstructAndRegister();\r\n            if (sys) game.onPostProjectInitDelegate.add(sys.initDefaultMaterial.bind(sys));\r\n        }\r\n    }\r\n\r\n    static constructAndRegisterManually (): Promise<void> {\r\n        if (BUILD && (LOAD_BULLET_MANUALLY || LOAD_PHYSX_MANUALLY)) {\r\n            if (!PhysicsSystem._instance) {\r\n                const sys = this.doConstructAndRegister();\r\n                if (sys) return sys.initDefaultMaterial();\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private static doConstructAndRegister (): PhysicsSystem | null {\r\n        const enabled = querySettings(SettingsCategory.PHYSICS, 'enabled') ?? true;\r\n        if (!enabled) { return null; }\r\n        if (!PhysicsSystem._instance) {\r\n            // Construct physics world and physics system only once\r\n            const sys = new PhysicsSystem();\r\n            (PhysicsSystem._instance as unknown as PhysicsSystem) = sys;\r\n            sys.resetConfiguration();\r\n            constructDefaultWorld(sys);\r\n            director.registerSystem(PhysicsSystem.ID, sys, sys.priority);\r\n        }\r\n        return PhysicsSystem._instance;\r\n    }\r\n}\r\n\r\n/**\r\n * By registering the initialization event, the system can be automatically\r\n * constructed and registered when the module is pre-loaded\r\n */\r\ndirector.once(DirectorEvent.INIT, (): void => { PhysicsSystem.constructAndRegister(); });\r\n","/* eslint-disable @typescript-eslint/no-namespace */\r\n/* eslint-disable func-names */\r\n/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    disallowMultiple,\r\n    executeInEditMode,\r\n    menu,\r\n    executionOrder,\r\n    tooltip,\r\n    displayOrder,\r\n    visible,\r\n    type,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { DEBUG } from 'internal:constants';\r\nimport { Vec3, error, warn } from '../../../core';\r\nimport { Component } from '../../../scene-graph';\r\nimport { IRigidBody } from '../../spec/i-rigid-body';\r\nimport { selector, createRigidBody } from '../physics-selector';\r\nimport { ERigidBodyType } from '../physics-enum';\r\nimport { PhysicsSystem } from '../physics-system';\r\n\r\n/**\r\n * @en\r\n * Rigid body component.\r\n * @zh\r\n * 刚体组件。\r\n */\r\n@ccclass('cc.RigidBody')\r\n@help('i18n:cc.RigidBody')\r\n@menu('Physics/RigidBody')\r\n@executeInEditMode\r\n@disallowMultiple\r\n@executionOrder(-1)\r\nexport class RigidBody extends Component {\r\n    /**\r\n     * @en\r\n     * Enumeration of rigid body types.\r\n     * @zh\r\n     * 刚体类型的枚举。\r\n     */\r\n    static readonly Type = ERigidBodyType;\r\n\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the group of the rigid body.\r\n     * @zh\r\n     * 获取或设置分组。\r\n     */\r\n    @type(PhysicsSystem.PhysicsGroup)\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:physics3d.rigidbody.group')\r\n    public get group (): number {\r\n        return this._group;\r\n    }\r\n\r\n    public set group (v: number) {\r\n        if (DEBUG && !Number.isInteger(Math.log2(v >>> 0))) warn('[Physics]: The group should only have one bit.');\r\n        this._group = v;\r\n        if (this._body) {\r\n            // The judgment is added here because the data exists in two places\r\n            if (this._body.getGroup() !== v) this._body.setGroup(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the type of rigid body.\r\n     * @zh\r\n     * 获取或设置刚体类型。\r\n     */\r\n    @type(ERigidBodyType)\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:physics3d.rigidbody.type')\r\n    public get type (): ERigidBodyType {\r\n        return this._type;\r\n    }\r\n\r\n    public set type (v: ERigidBodyType) {\r\n        if (this._type === v) return;\r\n        this._type = v;\r\n        if (this._body) this._body.setType(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the mass of the rigid body.\r\n     * @zh\r\n     * 获取或设置刚体的质量。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(0)\r\n    @tooltip('i18n:physics3d.rigidbody.mass')\r\n    public get mass (): number {\r\n        return this._mass;\r\n    }\r\n\r\n    public set mass (value) {\r\n        if (DEBUG && value <= 0) warn('[Physics]: The mass should be greater than zero.');\r\n        if (this._mass === value) return;\r\n        value = value <= 0 ? 0.0001 : value;\r\n        this._mass = value;\r\n        if (this._body) this._body.setMass(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether hibernation is allowed.\r\n     * @zh\r\n     * 获取或设置是否允许休眠。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(0.5)\r\n    @tooltip('i18n:physics3d.rigidbody.allowSleep')\r\n    public get allowSleep (): boolean {\r\n        return this._allowSleep;\r\n    }\r\n\r\n    public set allowSleep (v: boolean) {\r\n        this._allowSleep = v;\r\n        if (this._body) this._body.setAllowSleep(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets linear damping.\r\n     * @zh\r\n     * 获取或设置线性阻尼。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(1)\r\n    @tooltip('i18n:physics3d.rigidbody.linearDamping')\r\n    public get linearDamping (): number {\r\n        return this._linearDamping;\r\n    }\r\n\r\n    public set linearDamping (value) {\r\n        if (DEBUG && (value < 0 || value > 1)) warn('[Physics]: The damping should be between zero to one.');\r\n        this._linearDamping = value;\r\n        if (this._body) this._body.setLinearDamping(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the rotation damping.\r\n     * @zh\r\n     * 获取或设置旋转阻尼。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(2)\r\n    @tooltip('i18n:physics3d.rigidbody.angularDamping')\r\n    public get angularDamping (): number {\r\n        return this._angularDamping;\r\n    }\r\n\r\n    public set angularDamping (value) {\r\n        if (DEBUG && (value < 0 || value > 1)) warn('[Physics]: The damping should be between zero to one.');\r\n        this._angularDamping = value;\r\n        if (this._body) this._body.setAngularDamping(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether a rigid body uses gravity.\r\n     * @zh\r\n     * 获取或设置刚体是否使用重力。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(4)\r\n    @tooltip('i18n:physics3d.rigidbody.useGravity')\r\n    public get useGravity (): boolean {\r\n        return this._useGravity;\r\n    }\r\n\r\n    public set useGravity (value) {\r\n        this._useGravity = value;\r\n        if (this._body) this._body.useGravity(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the linear velocity factor that can be used to control the scaling of the velocity in each axis direction.\r\n     * @zh\r\n     * 获取或设置线性速度的因子，可以用来控制每个轴方向上的速度的缩放。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(6)\r\n    @tooltip('i18n:physics3d.rigidbody.linearFactor')\r\n    public get linearFactor (): Vec3 {\r\n        return this._linearFactor;\r\n    }\r\n\r\n    public set linearFactor (value: Vec3) {\r\n        Vec3.copy(this._linearFactor, value);\r\n        if (this._body) {\r\n            this._body.setLinearFactor(this._linearFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the rotation speed factor that can be used to control the scaling of the rotation speed in each axis direction.\r\n     * @zh\r\n     * 获取或设置旋转速度的因子，可以用来控制每个轴方向上的旋转速度的缩放。\r\n     */\r\n    @visible(isDynamicBody)\r\n    @displayOrder(7)\r\n    @tooltip('i18n:physics3d.rigidbody.angularFactor')\r\n    public get angularFactor (): Vec3 {\r\n        return this._angularFactor;\r\n    }\r\n\r\n    public set angularFactor (value: Vec3) {\r\n        Vec3.copy(this._angularFactor, value);\r\n        if (this._body) {\r\n            this._body.setAngularFactor(this._angularFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the speed threshold for going to sleep.\r\n     * @zh\r\n     * 获取或设置进入休眠的速度临界值。\r\n     */\r\n    public get sleepThreshold (): number {\r\n        if (this._isInitialized) {\r\n            return this._body!.getSleepThreshold();\r\n        }\r\n        return 0.1;\r\n    }\r\n\r\n    public set sleepThreshold (v: number) {\r\n        if (this._isInitialized) {\r\n            this._body!.setSleepThreshold(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Turning on or off continuous collision detection.\r\n     * @zh\r\n     * 开启或关闭连续碰撞检测。\r\n     */\r\n    public get useCCD (): boolean {\r\n        if (this._isInitialized) {\r\n            return this._body!.isUsingCCD();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public set useCCD (v: boolean) {\r\n        if (this._isInitialized) {\r\n            this._body!.useCCD(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets whether it is the state of awake.\r\n     * @zh\r\n     * 获取是否是唤醒的状态。\r\n     */\r\n    public get isAwake (): boolean {\r\n        if (this._isInitialized) return this._body!.isAwake;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets whether you can enter a dormant state.\r\n     * @zh\r\n     * 获取是否是可进入休眠的状态。\r\n     */\r\n    public get isSleepy (): boolean {\r\n        if (this._isInitialized) return this._body!.isSleepy;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets whether the state is dormant.\r\n     * @zh\r\n     * 获取是否是正在休眠的状态。\r\n     */\r\n    public get isSleeping (): boolean {\r\n        if (this._isInitialized) return this._body!.isSleeping;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether the rigid body is static.\r\n     * @zh\r\n     * 获取或设置刚体是否是静态类型的（静止不动的）。\r\n     */\r\n    public get isStatic (): boolean {\r\n        return this._type === ERigidBodyType.STATIC;\r\n    }\r\n\r\n    public set isStatic (v: boolean) {\r\n        if ((v && this.isStatic) || (!v && !this.isStatic)) return;\r\n        this.type = v ? ERigidBodyType.STATIC : ERigidBodyType.DYNAMIC;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether the rigid body moves through physical dynamics.\r\n     * @zh\r\n     * 获取或设置刚体是否是动力学态类型的（将根据物理动力学控制运动）。\r\n     */\r\n    public get isDynamic (): boolean {\r\n        return this._type === ERigidBodyType.DYNAMIC;\r\n    }\r\n\r\n    public set isDynamic (v: boolean) {\r\n        if ((v && this.isDynamic) || (!v && !this.isDynamic)) return;\r\n        this.type = v ? ERigidBodyType.DYNAMIC : ERigidBodyType.KINEMATIC;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether a rigid body is controlled by users.\r\n     * @zh\r\n     * 获取或设置刚体是否是运动态类型的（将由用户来控制运动）。\r\n     */\r\n    public get isKinematic (): boolean {\r\n        return this._type === ERigidBodyType.KINEMATIC;\r\n    }\r\n\r\n    public set isKinematic (v: boolean) {\r\n        if ((v && this.isKinematic) || (!v && !this.isKinematic)) return;\r\n        this.type = v ? ERigidBodyType.KINEMATIC : ERigidBodyType.DYNAMIC;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get body (): IRigidBody | null {\r\n        return this._body;\r\n    }\r\n\r\n    private _body: IRigidBody | null = null;\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _group: number = PhysicsSystem.PhysicsGroup.DEFAULT;\r\n\r\n    @serializable\r\n    private _type: ERigidBodyType = ERigidBodyType.DYNAMIC;\r\n\r\n    @serializable\r\n    private _mass = 1;\r\n\r\n    @serializable\r\n    private _allowSleep = true;\r\n\r\n    @serializable\r\n    private _linearDamping = 0.1;\r\n\r\n    @serializable\r\n    private _angularDamping = 0.1;\r\n\r\n    @serializable\r\n    private _useGravity = true;\r\n\r\n    @serializable\r\n    private _linearFactor: Vec3 = new Vec3(1, 1, 1);\r\n\r\n    @serializable\r\n    private _angularFactor: Vec3 = new Vec3(1, 1, 1);\r\n\r\n    protected get _isInitialized (): boolean {\r\n        const r = this._body === null;\r\n        if (r) { error('[Physics]: This component has not been call onLoad yet, please make sure the node has been added to the scene.'); }\r\n        return !r;\r\n    }\r\n\r\n    /// COMPONENT LIFECYCLE ///\r\n\r\n    protected onLoad (): void {\r\n        if (!selector.runInEditor) return;\r\n        this._body = createRigidBody();\r\n        this._body.initialize(this);\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        if (this._body) this._body.onEnable!();\r\n    }\r\n\r\n    protected onDisable (): void {\r\n        if (this._body) this._body.onDisable!();\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        if (this._body) this._body.onDestroy!();\r\n    }\r\n\r\n    /// PUBLIC METHOD ///\r\n\r\n    /**\r\n     * @en\r\n     * Apply force to a world point. This could, for example, be a point on the Body surface.\r\n     * @zh\r\n     * 在世界空间中，相对于刚体的质心的某点上对刚体施加作用力。\r\n     * @param force @zh 作用力 @en The force applied\r\n     * @param relativePoint @zh 作用点，相对于刚体的质心 @en The point to apply the force on, relative to the center of mass of the rigid body\r\n     */\r\n    public applyForce (force: Vec3, relativePoint?: Vec3): void {\r\n        if (this._isInitialized) this._body!.applyForce(force, relativePoint);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply force to a local point. This could, for example, be a point on the Body surface.\r\n     * @zh\r\n     * 在本地空间中，相对于刚体的质心的某点上对刚体施加作用力。\r\n     * @param force @zh 作用力 @en The force applied\r\n     * @param localPoint @zh 作用点 @en The point to apply the force on\r\n     */\r\n    public applyLocalForce (force: Vec3, localPoint?: Vec3): void {\r\n        if (this._isInitialized) this._body!.applyLocalForce(force, localPoint);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * In world space, impulse is applied to the rigid body at some point relative to the center of mass of the rigid body.\r\n     * @zh\r\n     * 在世界空间中，相对于刚体的质心的某点上对刚体施加冲量。\r\n     * @param impulse @zh 冲量 @en The impulse applied\r\n     * @param relativePoint @zh 作用点，相对于刚体的中心点 @en The point to apply the impulse, relative to the center of mass of the rigid body\r\n     */\r\n    public applyImpulse (impulse: Vec3, relativePoint?: Vec3): void {\r\n        if (this._isInitialized) this._body!.applyImpulse(impulse, relativePoint);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * In local space, impulse is applied to the rigid body at some point relative to the center of mass of the rigid body.\r\n     * @zh\r\n     * 在本地空间中，相对于刚体的质心的某点上对刚体施加冲量。\r\n     * @param impulse @zh 冲量 @en The impulse applied\r\n     * @param localPoint @zh 作用点 @en The point to apply the impulse\r\n     */\r\n    public applyLocalImpulse (impulse: Vec3, localPoint?: Vec3): void {\r\n        if (this._isInitialized) this._body!.applyLocalImpulse(impulse, localPoint);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * In world space, torque is applied to the rigid body.\r\n     * @zh\r\n     * 在世界空间中，对刚体施加扭矩。\r\n     * @param torque @zh 扭矩 @en The torque applied\r\n     */\r\n    public applyTorque (torque: Vec3): void {\r\n        if (this._isInitialized) this._body!.applyTorque(torque);\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 在本地空间中，对刚体施加扭矩。\r\n     * @zh\r\n     * In local space, torque is applied to the rigid body.\r\n     * @param torque @zh 扭矩 @en The torque applied\r\n     */\r\n    public applyLocalTorque (torque: Vec3): void {\r\n        if (this._isInitialized) this._body!.applyLocalTorque(torque);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Wake up the rigid body.\r\n     * @zh\r\n     * 唤醒刚体。\r\n     */\r\n    public wakeUp (): void {\r\n        if (this._isInitialized) this._body!.wakeUp();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Dormancy of rigid body.\r\n     * @zh\r\n     * 休眠刚体。\r\n     */\r\n    public sleep (): void {\r\n        if (this._isInitialized) this._body!.sleep();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Clear the forces and velocity of the rigid body.\r\n     * @zh\r\n     * 清除刚体受到的力和速度。\r\n     */\r\n    public clearState (): void {\r\n        if (this._isInitialized) this._body!.clearState();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Clear the forces of the rigid body.\r\n     * @zh\r\n     * 清除刚体受到的力。\r\n     */\r\n    public clearForces (): void {\r\n        if (this._isInitialized) this._body!.clearForces();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Clear velocity of the rigid body.\r\n     * @zh\r\n     * 清除刚体的速度。\r\n     */\r\n    public clearVelocity (): void {\r\n        if (this._isInitialized) this._body!.clearVelocity();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the linear velocity.\r\n     * @zh\r\n     * 获取线性速度。\r\n     * @param out @zh 速度向量 @en The velocity vector\r\n     */\r\n    public getLinearVelocity (out: Vec3): void {\r\n        if (this._isInitialized) this._body!.getLinearVelocity(out);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the linear velocity.\r\n     * @zh\r\n     * 设置线性速度。\r\n     * @param value @zh 速度向量 @en The velocity vector\r\n     */\r\n    public setLinearVelocity (value: Vec3): void {\r\n        if (this._isInitialized) this._body!.setLinearVelocity(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the angular velocity.\r\n     * @zh\r\n     * 获取旋转速度。\r\n     * @param out @zh 角速度向量 @en The angular velocity vector\r\n     */\r\n    public getAngularVelocity (out: Vec3): void {\r\n        if (this._isInitialized) this._body!.getAngularVelocity(out);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the angular velocity.\r\n     * @zh\r\n     * 设置旋转速度。\r\n     * @param value @zh 角速度向量 @en The angular velocity vector\r\n     */\r\n    public setAngularVelocity (value: Vec3): void {\r\n        if (this._isInitialized) this._body!.setAngularVelocity(value);\r\n    }\r\n\r\n    /// GROUP MASK ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets the group value.\r\n     * @zh\r\n     * 获取分组值。\r\n     * @returns @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public getGroup (): number {\r\n        if (this._isInitialized) return this._body!.getGroup();\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the group value.\r\n     * @zh\r\n     * 设置分组值。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public setGroup (v: number): void {\r\n        if (this._isInitialized) this._body!.setGroup(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add a grouping value to fill in the group you want to join.\r\n     * @zh\r\n     * 添加分组值，可填要加入的 group。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public addGroup (v: number): void {\r\n        if (this._isInitialized) this._body!.addGroup(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Subtract the grouping value to fill in the group to be removed.\r\n     * @zh\r\n     * 减去分组值，可填要移除的 group。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public removeGroup (v: number): void {\r\n        if (this._isInitialized) this._body!.removeGroup(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the mask value.\r\n     * @zh\r\n     * 获取掩码值。\r\n     * @returns {number} @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public getMask (): number {\r\n        if (this._isInitialized) return this._body!.getMask();\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the mask value.\r\n     * @zh\r\n     * 设置掩码值。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public setMask (v: number): void {\r\n        if (this._isInitialized) this._body!.setMask(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add mask values to fill in groups that need to be checked.\r\n     * @zh\r\n     * 添加掩码值，可填入需要检查的 group。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public addMask (v: number): void {\r\n        if (this._isInitialized) this._body!.addMask(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Subtract the mask value to fill in the group that does not need to be checked.\r\n     * @zh\r\n     * 减去掩码值，可填入不需要检查的 group。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public removeMask (v: number): void {\r\n        if (this._isInitialized) this._body!.removeMask(v);\r\n    }\r\n}\r\n\r\nfunction isDynamicBody (this: RigidBody): boolean { return this.isDynamic; }\r\n\r\nexport namespace RigidBody {\r\n    export type Type = EnumAlias<typeof ERigidBodyType>;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-namespace */\r\n/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, displayName, readOnly, type, serializable } from 'cc.decorator';\r\nimport { EDITOR } from 'internal:constants';\r\nimport { Eventify, Vec3, error, geometry } from '../../../../core';\r\nimport { CharacterTriggerEventType, CollisionEventType, TriggerEventType } from '../../physics-interface';\r\nimport { RigidBody } from '../rigid-body';\r\nimport { PhysicsMaterial } from '../../assets/physics-material';\r\nimport { Component, Node } from '../../../../scene-graph';\r\nimport { IBaseShape } from '../../../spec/i-physics-shape';\r\nimport { EColliderType, EAxisDirection } from '../../physics-enum';\r\nimport { selector, createShape } from '../../physics-selector';\r\n\r\ntype Callback = (...args: any[]) => any;\r\n\r\n/**\r\n * @en\r\n * Base class for colliders.\r\n * @zh\r\n * 碰撞器的基类。\r\n */\r\n@ccclass('cc.Collider')\r\nexport class Collider extends Eventify(Component) {\r\n    /**\r\n     * @en\r\n     * Enumeration of collider types.\r\n     * @zh\r\n     * 碰撞体类型的枚举。\r\n     */\r\n    static readonly Type = EColliderType;\r\n\r\n    /**\r\n     * @en\r\n     * Enumeration of axes.\r\n     * @zh\r\n     * 坐标轴方向的枚举。\r\n     */\r\n    static readonly Axis = EAxisDirection;\r\n\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Get the rigid body component to which the collider is bound, possibly null.\r\n     * @zh\r\n     * 获取碰撞器所绑定的刚体组件，可能为空。\r\n     */\r\n    @type(RigidBody)\r\n    @readOnly\r\n    @displayName('Attached')\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:physics3d.collider.attached')\r\n    public get attachedRigidBody (): RigidBody | null {\r\n        return findAttachedBody(this.node);\r\n        // return this._attachedRigidBody;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the physical material for this collider.\r\n     * @zh\r\n     * 获取或设置此碰撞器的物理材质。\r\n     */\r\n    @type(PhysicsMaterial)\r\n    @displayName('Material')\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:physics3d.collider.sharedMaterial')\r\n    public get sharedMaterial (): PhysicsMaterial | null {\r\n        return this._material;\r\n    }\r\n\r\n    public set sharedMaterial (value) {\r\n        if (EDITOR) {\r\n            this._material = value;\r\n        } else {\r\n            this.material = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the physics material for this collider, which in Shared state will generate a new instance.\r\n     * @zh\r\n     * 获取或设置此碰撞器的物理材质，共享状态下获取将会生成新的实例。\r\n     */\r\n    public get material (): PhysicsMaterial | null {\r\n        if (this._isSharedMaterial && this._material) {\r\n            this._material.off(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n            this._material = this._material.clone();\r\n            this._material.on(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n            this._isSharedMaterial = false;\r\n        }\r\n        return this._material;\r\n    }\r\n\r\n    public set material (value) {\r\n        if (this._shape) {\r\n            if (value && this._material) {\r\n                if (this._material.id !== value.id) {\r\n                    this._material.off(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n                    value.on(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n                    this._isSharedMaterial = false;\r\n                    this._material = value;\r\n                }\r\n            } else if (value && !this._material) {\r\n                value.on(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n                this._material = value;\r\n            } else if (!value && this._material) {\r\n                this._material.off(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n                this._material = value;\r\n            }\r\n            this._updateMaterial();\r\n        } else {\r\n            this._material = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the collider is trigger, this will be always trigger if using builtin.\r\n     * @zh\r\n     * 获取或设置碰撞器是否为触发器。(builtin 中无论真假都为触发器)\r\n     */\r\n    @displayOrder(0)\r\n    @tooltip('i18n:physics3d.collider.isTrigger')\r\n    public get isTrigger (): boolean {\r\n        return this._isTrigger;\r\n    }\r\n\r\n    public set isTrigger (value) {\r\n        this._isTrigger = value;\r\n        if (this._shape) {\r\n            this._shape.setAsTrigger(this._isTrigger);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the center of the collider, in local space.\r\n     * @zh\r\n     * 在本地空间中，获取或设置碰撞器的中心点。\r\n     */\r\n    @type(Vec3)\r\n    @displayOrder(1)\r\n    @tooltip('i18n:physics3d.collider.center')\r\n    public get center (): Vec3 {\r\n        return this._center;\r\n    }\r\n\r\n    public set center (value: Vec3) {\r\n        Vec3.copy(this._center, value);\r\n        if (this._shape) {\r\n            this._shape.setCenter(this._center);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get shape (): IBaseShape | null {\r\n        return this._shape;\r\n    }\r\n\r\n    public get worldBounds (): Readonly<geometry.AABB> {\r\n        if (this._aabb == null) this._aabb = new geometry.AABB();\r\n        if (this._shape) this._shape.getAABB(this._aabb);\r\n        return this._aabb;\r\n    }\r\n\r\n    public get boundingSphere (): Readonly<geometry.Sphere> {\r\n        if (this._boundingSphere == null) this._boundingSphere = new geometry.Sphere();\r\n        if (this._shape) this._shape.getBoundingSphere(this._boundingSphere);\r\n        return this._boundingSphere;\r\n    }\r\n\r\n    public get needTriggerEvent (): boolean {\r\n        return this._needTriggerEvent;\r\n    }\r\n\r\n    public get needCollisionEvent (): boolean {\r\n        return this._needCollisionEvent;\r\n    }\r\n\r\n    readonly type: EColliderType;\r\n\r\n    /// PROTECTED PROPERTY ///\r\n\r\n    protected _shape: IBaseShape | null = null;\r\n    protected _aabb: geometry.AABB | null = null;\r\n    protected _boundingSphere: geometry.Sphere | null = null;\r\n    protected _isSharedMaterial = true;\r\n    protected _needTriggerEvent = false;\r\n    protected _needCollisionEvent = false;\r\n    // protected _attachedRigidBody: RigidBody | null = null;\r\n\r\n    @type(PhysicsMaterial)\r\n    protected _material: PhysicsMaterial | null = null;\r\n\r\n    @serializable\r\n    protected _isTrigger = false;\r\n\r\n    @serializable\r\n    protected readonly _center: Vec3 = new Vec3();\r\n\r\n    protected get _isInitialized (): boolean {\r\n        const r = this._shape === null;\r\n        if (r) { error('[Physics]: This component has not been call onLoad yet, please make sure the node has been added to the scene.'); }\r\n        return !r;\r\n    }\r\n\r\n    constructor (type: EColliderType) {\r\n        super();\r\n        this.type = type;\r\n    }\r\n\r\n    /// EVENT INTERFACE ///\r\n\r\n    /**\r\n     * @en\r\n     * Registers callbacks associated with triggered or collision events.\r\n     * @zh\r\n     * 注册触发或碰撞事件相关的回调。\r\n     * @param type - The event type, onTriggerEnter|onTriggerStay|onTriggerExit|onCollisionEnter|onCollisionStay|onCollisionExit;\r\n     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.\r\n     * @param target - The event callback target.\r\n     */\r\n    public on<TFunction extends Callback> (\r\n        type: TriggerEventType | CollisionEventType | CharacterTriggerEventType,\r\n        callback: TFunction,\r\n        target?,\r\n        once?: boolean,\r\n    ): any {\r\n        const ret = super.on(type, callback, target, once);\r\n        this._updateNeedEvent(type);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Unregisters callbacks associated with trigger or collision events that have been registered.\r\n     * @zh\r\n     * 取消已经注册的触发或碰撞事件相关的回调。\r\n     * @param type - The event type, onTriggerEnter|onTriggerStay|onTriggerExit|onCollisionEnter|onCollisionStay|onCollisionExit;\r\n     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.\r\n     * @param target - The event callback target.\r\n     */\r\n    public off (type: TriggerEventType | CollisionEventType | CharacterTriggerEventType, callback?: Callback, target?): void {\r\n        super.off(type, callback, target);\r\n        this._updateNeedEvent();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Registers a callback associated with a trigger or collision event, which is automatically unregistered once executed.\r\n     * @zh\r\n     * 注册触发或碰撞事件相关的回调，执行一次后会自动取消注册。\r\n     * @param type - The event type, onTriggerEnter|onTriggerStay|onTriggerExit|onCollisionEnter|onCollisionStay|onCollisionExit;\r\n     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.\r\n     * @param target - The event callback target.\r\n     */\r\n    public once<TFunction extends Callback> (\r\n        type: TriggerEventType | CollisionEventType | CharacterTriggerEventType,\r\n        callback: TFunction,\r\n        target?,\r\n    ): any {\r\n        // TODO: callback invoker now is a entity, after `once` will not calling the upper `off`.\r\n        const ret = super.once(type, callback, target);\r\n        this._updateNeedEvent(type);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Removes all registered events of the specified target or type.\r\n     * @zh\r\n     * 移除所有指定目标或类型的注册事件。\r\n     * @param typeOrTarget - The event type or target.\r\n     */\r\n    public removeAll (typeOrTarget: TriggerEventType | CollisionEventType | Record<string, unknown>): void {\r\n        super.removeAll(typeOrTarget);\r\n        this._updateNeedEvent();\r\n    }\r\n\r\n    /// GROUP MASK ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets the group value.\r\n     * @zh\r\n     * 获取分组值。\r\n     * @returns @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public getGroup (): number {\r\n        if (this._isInitialized) {\r\n            return this._shape!.getGroup();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the group value.\r\n     * @zh\r\n     * 设置分组值。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public setGroup (v: number): void {\r\n        if (this._isInitialized) {\r\n            this._shape!.setGroup(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add a grouping value to fill in the group you want to join.\r\n     * @zh\r\n     * 添加分组值，可填要加入的 group。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public addGroup (v: number): void {\r\n        if (this._isInitialized) {\r\n            this._shape!.addGroup(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Subtract the grouping value to fill in the group to be removed.\r\n     * @zh\r\n     * 减去分组值，可填要移除的 group。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public removeGroup (v: number): void {\r\n        if (this._isInitialized) {\r\n            this._shape!.removeGroup(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the mask value.\r\n     * @zh\r\n     * 获取掩码值。\r\n     * @returns @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public getMask (): number {\r\n        if (this._isInitialized) {\r\n            return this._shape!.getMask();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the mask value.\r\n     * @zh\r\n     * 设置掩码值。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public setMask (v: number): void {\r\n        if (this._isInitialized) {\r\n            this._shape!.setMask(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add mask values to fill in groups that need to be checked.\r\n     * @zh\r\n     * 添加掩码值，可填入需要检查的 group。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public addMask (v: number): void {\r\n        if (this._isInitialized) {\r\n            this._shape!.addMask(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Subtract the mask value to fill in the group that does not need to be checked.\r\n     * @zh\r\n     * 减去掩码值，可填入不需要检查的 group。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public removeMask (v: number): void {\r\n        if (this._isInitialized) {\r\n            this._shape!.removeMask(v);\r\n        }\r\n    }\r\n\r\n    /// COMPONENT LIFECYCLE ///\r\n\r\n    protected onLoad (): void {\r\n        if (!selector.runInEditor) return;\r\n\r\n        this.sharedMaterial = this._material;\r\n        this._shape = createShape(this.type);\r\n        this._shape.initialize(this);\r\n        this._shape.onLoad!();\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        if (this._shape) {\r\n            this._shape.onEnable!();\r\n        }\r\n    }\r\n\r\n    protected onDisable (): void {\r\n        if (this._shape) {\r\n            this._shape.onDisable!();\r\n        }\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        if (this._shape) {\r\n            this._needTriggerEvent = false;\r\n            this._needCollisionEvent = false;\r\n            this._shape.updateEventListener();\r\n            if (this._material) this._material.off(PhysicsMaterial.EVENT_UPDATE, this._updateMaterial, this);\r\n            this._shape.onDestroy!();\r\n        }\r\n        if (this._boundingSphere) this._boundingSphere.destroy();\r\n    }\r\n\r\n    private _updateMaterial (): void {\r\n        if (this._shape) this._shape.setMaterial(this._material);\r\n    }\r\n\r\n    private _updateNeedEvent (type?: string): void {\r\n        if (this.isValid) {\r\n            if (type !== undefined) {\r\n                if (type === 'onCollisionEnter' || type === 'onCollisionStay' || type === 'onCollisionExit') {\r\n                    this._needCollisionEvent = true;\r\n                }\r\n                if (type === 'onTriggerEnter' || type === 'onTriggerStay' || type === 'onTriggerExit'\r\n                    || type === 'onControllerTriggerEnter' || type === 'onControllerTriggerStay' || type === 'onControllerTriggerExit') {\r\n                    this._needTriggerEvent = true;\r\n                }\r\n            } else {\r\n                if (!(this.hasEventListener('onTriggerEnter')\r\n                    || this.hasEventListener('onTriggerStay')\r\n                    || this.hasEventListener('onTriggerExit')\r\n                    || this.hasEventListener('onControllerTriggerEnter')\r\n                    || this.hasEventListener('onControllerTriggerStay')\r\n                    || this.hasEventListener('onControllerTriggerExit')\r\n                )) {\r\n                    this._needTriggerEvent = false;\r\n                }\r\n                if (!(this.hasEventListener('onCollisionEnter')\r\n                    || this.hasEventListener('onCollisionStay')\r\n                    || this.hasEventListener('onCollisionExit'))) {\r\n                    this._needCollisionEvent = false;\r\n                }\r\n            }\r\n            if (this._shape) this._shape.updateEventListener();\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace Collider {\r\n    export type Type = EnumAlias<typeof EColliderType>;\r\n    export type Axis = EnumAlias<typeof EAxisDirection>;\r\n}\r\n\r\nfunction findAttachedBody (node: Node): RigidBody | null {\r\n    const rb = node.getComponent(RigidBody);\r\n    if (rb && rb.isValid) {\r\n        return rb;\r\n    }\r\n    return null;\r\n    // if (node.parent == null || node.parent == node.scene) return null;\r\n    // return findAttachedBody(node.parent);\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    tooltip,\r\n    type,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { Vec3 } from '../../../../core';\r\nimport { Collider } from './collider';\r\nimport { IBoxShape } from '../../../spec/i-physics-shape';\r\nimport { EColliderType } from '../../physics-enum';\r\nimport { absolute } from '../../../utils/util';\r\n\r\n/**\r\n * @en\r\n * Box collider component.\r\n * @zh\r\n * 盒子碰撞器。\r\n */\r\n@ccclass('cc.BoxCollider')\r\n@help('i18n:cc.BoxCollider')\r\n@menu('Physics/BoxCollider')\r\n@executeInEditMode\r\nexport class BoxCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the size of the box, in local space.\r\n     * @zh\r\n     * 获取或设置盒的大小。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.collider.box_size')\r\n    public get size (): Vec3 {\r\n        return this._size;\r\n    }\r\n\r\n    public set size (value) {\r\n        if (Vec3.strictEquals(this._size, value)) return;\r\n        Vec3.copy(this._size, value);\r\n        absolute(this._size);\r\n        if (this._shape) {\r\n            this.shape.updateSize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get shape (): IBoxShape {\r\n        return this._shape as IBoxShape;\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _size: Vec3 = new Vec3(1, 1, 1);\r\n\r\n    constructor () {\r\n        super(EColliderType.BOX);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    tooltip,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { Collider } from './collider';\r\nimport { ISphereShape } from '../../../spec/i-physics-shape';\r\nimport { EColliderType } from '../../physics-enum';\r\n\r\n/**\r\n * @en\r\n * Sphere collider component.\r\n * @zh\r\n * 球碰撞器。\r\n */\r\n@ccclass('cc.SphereCollider')\r\n@help('i18n:cc.SphereCollider')\r\n@menu('Physics/SphereCollider')\r\n@executeInEditMode\r\nexport class SphereCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the radius of the sphere.\r\n     * @zh\r\n     * 获取或设置球的半径。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.sphere_radius')\r\n    public get radius (): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius (value) {\r\n        if (this._radius === value) return;\r\n        this._radius = Math.abs(value);\r\n        if (this._shape) {\r\n            this.shape.updateRadius();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get shape (): ISphereShape {\r\n        return this._shape as ISphereShape;\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _radius = 0.5;\r\n\r\n    constructor () {\r\n        super(EColliderType.SPHERE);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    tooltip,\r\n    type,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { Collider } from './collider';\r\nimport { ICapsuleShape } from '../../../spec/i-physics-shape';\r\nimport { EAxisDirection, EColliderType } from '../../physics-enum';\r\nimport { absMax } from '../../../../core';\r\n\r\n/**\r\n * @en\r\n * Capsule collider component.\r\n * @zh\r\n * 胶囊体碰撞器。\r\n */\r\n@ccclass('cc.CapsuleCollider')\r\n@help('i18n:cc.CapsuleCollider')\r\n@menu('Physics/CapsuleCollider')\r\n@executeInEditMode\r\nexport class CapsuleCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the radius of the sphere on the capsule body, in local space.\r\n     * @zh\r\n     * 获取或设置胶囊体在本地坐标系下的球半径。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.capsule_radius')\r\n    public get radius (): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius (value) {\r\n        if (this._radius === value) return;\r\n        this._radius = Math.abs(value);\r\n        if (this._shape) {\r\n            this.shape.setRadius(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the cylinder on the capsule body is at the corresponding axial height, in local space.\r\n     * @zh\r\n     * 获取或设置在本地坐标系下的胶囊体上圆柱体的高度。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.capsule_cylinderHeight')\r\n    public get cylinderHeight (): number {\r\n        return this._cylinderHeight;\r\n    }\r\n\r\n    public set cylinderHeight (value) {\r\n        if (this._cylinderHeight === value) return;\r\n        this._cylinderHeight = Math.abs(value);\r\n        if (this._shape) {\r\n            this.shape.setCylinderHeight(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the capsule direction, in local space.\r\n     * @zh\r\n     * 获取或设置在本地坐标系下胶囊体的方向。\r\n     */\r\n    @type(EAxisDirection)\r\n    @tooltip('i18n:physics3d.collider.capsule_direction')\r\n    public get direction (): EAxisDirection {\r\n        return this._direction;\r\n    }\r\n\r\n    public set direction (value: EAxisDirection) {\r\n        value = Math.floor(value);\r\n        if (value < EAxisDirection.X_AXIS || value > EAxisDirection.Z_AXIS) return;\r\n        if (this._direction === value) return;\r\n        this._direction = value;\r\n        if (this._shape) {\r\n            this.shape.setDirection(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the capsule height, in local space, with the minimum value being the diameter of the sphere.\r\n     * @zh\r\n     * 获取或设置在本地坐标系下胶囊体的高度，最小值为球的直径。\r\n     */\r\n    public get height (): number {\r\n        return this._radius * 2 + this._cylinderHeight;\r\n    }\r\n\r\n    public set height (value) {\r\n        let ch = value - this._radius * 2;\r\n        if (ch < 0) ch = 0;\r\n        this.cylinderHeight = ch;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the capsule body is at the corresponding axial height, in world space.\r\n     * @zh\r\n     * 获取胶囊体在世界坐标系下相应胶囊体朝向上的高度，只读属性。\r\n     */\r\n    public get worldHeight (): number {\r\n        return this._radius * 2 * this._getRadiusScale() + this._cylinderHeight * this._getHeightScale();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get shape (): ICapsuleShape {\r\n        return this._shape as ICapsuleShape;\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _radius = 0.5;\r\n\r\n    @serializable\r\n    private _cylinderHeight = 1;\r\n\r\n    @serializable\r\n    private _direction = EAxisDirection.Y_AXIS;\r\n\r\n    constructor () {\r\n        super(EColliderType.CAPSULE);\r\n    }\r\n\r\n    private _getRadiusScale (): number {\r\n        if (this.node == null) return 1;\r\n        const ws = this.node.worldScale;\r\n        if (this._direction === EAxisDirection.Y_AXIS) return Math.abs(absMax(ws.x, ws.z));\r\n        if (this._direction === EAxisDirection.X_AXIS) return Math.abs(absMax(ws.y, ws.z));\r\n        return Math.abs(absMax(ws.x, ws.y));\r\n    }\r\n\r\n    private _getHeightScale (): number {\r\n        if (this.node == null) return 1;\r\n        const ws = this.node.worldScale;\r\n        if (this._direction === EAxisDirection.Y_AXIS) return Math.abs(ws.y);\r\n        if (this._direction === EAxisDirection.X_AXIS) return Math.abs(ws.x);\r\n        return Math.abs(ws.z);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    tooltip,\r\n    type,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { Collider } from './collider';\r\nimport { ICylinderShape } from '../../../spec/i-physics-shape';\r\nimport { EAxisDirection, EColliderType } from '../../physics-enum';\r\n\r\n/**\r\n * @en\r\n * Cylinder collider component.\r\n * @zh\r\n * 圆柱体碰撞器。\r\n */\r\n@ccclass('cc.CylinderCollider')\r\n@help('i18n:cc.CylinderCollider')\r\n@menu('Physics/CylinderCollider')\r\n@executeInEditMode\r\nexport class CylinderCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the radius of the circle on the cylinder body, in local space.\r\n     * @zh\r\n     * 获取或设置圆柱体上圆面半径。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.cylinder_radius')\r\n    public get radius (): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius (value) {\r\n        if (this._radius === value) return;\r\n        this._radius = Math.abs(value);\r\n        if (this._shape) {\r\n            this.shape.setRadius(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the cylinder body is at the corresponding axial height, in local space.\r\n     * @zh\r\n     * 获取或设置圆柱体在相应轴向的高度。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.cylinder_height')\r\n    public get height (): number {\r\n        return this._height;\r\n    }\r\n\r\n    public set height (value) {\r\n        if (this._height === value) return;\r\n        this._height = Math.abs(value);\r\n        if (this._shape) {\r\n            this.shape.setHeight(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the cylinder direction, in local space.\r\n     * @zh\r\n     * 获取或设置在圆柱体本地空间上的方向。\r\n     */\r\n    @type(EAxisDirection)\r\n    @tooltip('i18n:physics3d.collider.cylinder_direction')\r\n    public get direction (): EAxisDirection {\r\n        return this._direction;\r\n    }\r\n\r\n    public set direction (value: EAxisDirection) {\r\n        if (this._direction === value) return;\r\n        if (value < EAxisDirection.X_AXIS || value > EAxisDirection.Z_AXIS) return;\r\n        this._direction = value;\r\n        if (this._shape) {\r\n            this.shape.setDirection(value);\r\n        }\r\n    }\r\n\r\n    public get shape (): ICylinderShape {\r\n        return this._shape as ICylinderShape;\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _radius = 0.5;\r\n\r\n    @serializable\r\n    private _height = 2;\r\n\r\n    @serializable\r\n    private _direction = EAxisDirection.Y_AXIS;\r\n\r\n    constructor () {\r\n        super(EColliderType.CYLINDER);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    tooltip,\r\n    type,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { Collider } from './collider';\r\nimport { IConeShape } from '../../../spec/i-physics-shape';\r\nimport { EAxisDirection, EColliderType } from '../../physics-enum';\r\n\r\n/**\r\n * @en\r\n * Cone collider component.\r\n * @zh\r\n * 圆锥体碰撞器。\r\n */\r\n@ccclass('cc.ConeCollider')\r\n@help('i18n:cc.ConeCollider')\r\n@menu('Physics/ConeCollider')\r\n@executeInEditMode\r\nexport class ConeCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the radius of the circle on the cone body, in local space.\r\n     * @zh\r\n     * 获取或设置圆锥体上圆面半径。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.cone_radius')\r\n    public get radius (): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius (value) {\r\n        if (this._radius === value) return;\r\n        this._radius = Math.abs(value);\r\n        if (this._shape) {\r\n            this.shape.setRadius(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the cone body is at the corresponding axial height, in local space.\r\n     * @zh\r\n     * 获取或设置圆锥体在相应轴向的高度。\r\n     */\r\n    @tooltip('i18n:physics3d.collider.cone_height')\r\n    public get height (): number {\r\n        return this._height;\r\n    }\r\n\r\n    public set height (value) {\r\n        if (this._height === value) return;\r\n        if (value < 0) value = 0;\r\n        this._height = value;\r\n        if (this._shape) {\r\n            this.shape.setHeight(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the cone direction, in local space.\r\n     * @zh\r\n     * 获取或设置在圆锥体本地空间上的方向。\r\n     */\r\n    @type(EAxisDirection)\r\n    @tooltip('i18n:physics3d.collider.cone_direction')\r\n    public get direction (): EAxisDirection {\r\n        return this._direction;\r\n    }\r\n\r\n    public set direction (value: EAxisDirection) {\r\n        if (this._direction === value) return;\r\n        if (value < EAxisDirection.X_AXIS || value > EAxisDirection.Z_AXIS) return;\r\n        this._direction = value;\r\n        if (this._shape) {\r\n            this.shape.setDirection(value);\r\n        }\r\n    }\r\n\r\n    public get shape (): IConeShape {\r\n        return this._shape as IConeShape;\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _radius = 0.5;\r\n\r\n    @serializable\r\n    private _height = 1;\r\n\r\n    @serializable\r\n    private _direction = EAxisDirection.Y_AXIS;\r\n\r\n    constructor () {\r\n        super(EColliderType.CONE);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    type,\r\n    editable,\r\n    serializable,\r\n    tooltip,\r\n} from 'cc.decorator';\r\nimport { Collider } from './collider';\r\nimport { Mesh } from '../../../../3d/assets';\r\nimport { ITrimeshShape } from '../../../spec/i-physics-shape';\r\nimport { EColliderType, ERigidBodyType } from '../../physics-enum';\r\nimport { warnID } from '../../../../core';\r\nimport { RigidBody } from '../rigid-body';\r\n\r\n/**\r\n * @en\r\n * Triangle mesh collider component.\r\n * @zh\r\n * 三角网格碰撞器。\r\n */\r\n@ccclass('cc.MeshCollider')\r\n@help('i18n:cc.MeshCollider')\r\n@menu('Physics/MeshCollider')\r\n@executeInEditMode\r\nexport class MeshCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the mesh assets referenced by this collider.\r\n     * @zh\r\n     * 获取或设置此碰撞体引用的网格资源.\r\n     */\r\n    @type(Mesh)\r\n    @tooltip('i18n:physics3d.collider.mesh_mesh')\r\n    get mesh (): Mesh | null {\r\n        return this._mesh;\r\n    }\r\n\r\n    set mesh (value) {\r\n        if (this._mesh === value) return;\r\n        this._mesh = value;\r\n        if (this._shape) this.shape.setMesh(this._mesh);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets whether the collider replaces the mesh with a convex shape.\r\n     * @zh\r\n     * 获取或设置此碰撞体是否用凸形状代替网格.\r\n     */\r\n    @editable\r\n    @tooltip('i18n:physics3d.collider.mesh_convex')\r\n    get convex (): boolean {\r\n        return this._convex;\r\n    }\r\n\r\n    set convex (value) {\r\n        if (this._convex === value) return;\r\n        this._convex = value;\r\n\r\n        if (this._shape && this._mesh) this.shape.setMesh(this._mesh);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    get shape (): ITrimeshShape {\r\n        return this._shape as ITrimeshShape;\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        super.onEnable();\r\n\r\n        if (this.node) {\r\n            const body = this.node.getComponent(RigidBody);\r\n            if (body && body.isValid && (body.type === ERigidBodyType.DYNAMIC) && !this.convex) {\r\n                warnID(9630, this.node.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _mesh: Mesh | null = null;\r\n\r\n    @serializable\r\n    private _convex = false;\r\n\r\n    constructor () {\r\n        super(EColliderType.MESH);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    requireComponent,\r\n    disallowMultiple,\r\n    tooltip,\r\n    displayOrder,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Component } from '../../../scene-graph/component';\r\nimport { RigidBody } from './rigid-body';\r\nimport { Vec3 } from '../../../core';\r\n\r\n/**\r\n * @en\r\n * A tool component to help apply force to the rigid body at each frame.\r\n * @zh\r\n * 在每帧对一个刚体施加持续的力，依赖 RigidBody 组件。\r\n */\r\n@ccclass('cc.ConstantForce')\r\n@help('i18n:cc.ConstantForce')\r\n@requireComponent(RigidBody)\r\n@menu('Physics/ConstantForce')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class ConstantForce extends Component {\r\n    private _rigidBody: RigidBody | null = null;\r\n\r\n    @serializable\r\n    private readonly _force: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    private readonly _localForce: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    private readonly _torque: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    private readonly _localTorque: Vec3 = new Vec3();\r\n\r\n    private _mask = 0;\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets forces in world coordinates.\r\n     * @zh\r\n     * 获取或设置世界坐标系下的力。\r\n     */\r\n    @displayOrder(0)\r\n    @tooltip('i18n:physics3d.constant_force.force')\r\n    public get force (): Vec3 {\r\n        return this._force;\r\n    }\r\n\r\n    public set force (value: Vec3) {\r\n        Vec3.copy(this._force, value);\r\n        this._maskUpdate(this._force, 1);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the forces in the local coordinate system.\r\n     * @zh\r\n     * 获取或设置本地坐标系下的力。\r\n     */\r\n    @displayOrder(1)\r\n    @tooltip('i18n:physics3d.constant_force.localForce')\r\n    public get localForce (): Vec3 {\r\n        return this._localForce;\r\n    }\r\n\r\n    public set localForce (value: Vec3) {\r\n        Vec3.copy(this._localForce, value);\r\n        this._maskUpdate(this.localForce, 2);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the torsional force in world coordinates.\r\n     * @zh\r\n     * 获取或设置世界坐标系下的扭转力。\r\n     */\r\n    @displayOrder(2)\r\n    @tooltip('i18n:physics3d.constant_force.torque')\r\n    public get torque (): Vec3 {\r\n        return this._torque;\r\n    }\r\n\r\n    public set torque (value: Vec3) {\r\n        Vec3.copy(this._torque, value);\r\n        this._maskUpdate(this._torque, 4);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the torsional force in the local coordinate system.\r\n     * @zh\r\n     * 获取或设置本地坐标系下的扭转力。\r\n     */\r\n    @displayOrder(3)\r\n    @tooltip('i18n:physics3d.constant_force.localTorque')\r\n    public get localTorque (): Vec3 {\r\n        return this._localTorque;\r\n    }\r\n\r\n    public set localTorque (value: Vec3) {\r\n        Vec3.copy(this._localTorque, value);\r\n        this._maskUpdate(this._localTorque, 8);\r\n    }\r\n\r\n    public onLoad (): void {\r\n        this._rigidBody = this.node.getComponent(RigidBody);\r\n        this._maskUpdate(this._force, 1);\r\n        this._maskUpdate(this._localForce, 2);\r\n        this._maskUpdate(this._torque, 4);\r\n        this._maskUpdate(this._localTorque, 8);\r\n    }\r\n\r\n    public lateUpdate (dt: number): void {\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            if (this._rigidBody != null && this._mask !== 0) {\r\n                if (this._mask & 1) this._rigidBody.applyForce(this._force);\r\n                if (this._mask & 2) this._rigidBody.applyLocalForce(this.localForce);\r\n                if (this._mask & 4) this._rigidBody.applyTorque(this._torque);\r\n                if (this._mask & 8) this._rigidBody.applyLocalTorque(this._localTorque);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _maskUpdate (t: Vec3, m: number): void {\r\n        if (t.strictEquals(Vec3.ZERO)) {\r\n            this._mask &= ~m;\r\n        } else {\r\n            this._mask |= m;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    type,\r\n    serializable,\r\n    tooltip,\r\n} from 'cc.decorator';\r\nimport { Collider } from './collider';\r\nimport { ITerrainShape } from '../../../spec/i-physics-shape';\r\nimport { ITerrainAsset } from '../../../spec/i-external';\r\nimport { TerrainAsset } from '../../../../terrain/terrain-asset';\r\nimport { EColliderType, ERigidBodyType } from '../../physics-enum';\r\nimport { RigidBody } from '../rigid-body';\r\nimport { warnID } from '../../../../core';\r\n\r\n/**\r\n * @en\r\n * Terrain collider component.\r\n * @zh\r\n * 地形碰撞器。\r\n */\r\n@ccclass('cc.TerrainCollider')\r\n@help('i18n:cc.TerrainCollider')\r\n@menu('Physics/TerrainCollider')\r\n@executeInEditMode\r\nexport class TerrainCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the terrain assets referenced by this collider.\r\n     * @zh\r\n     * 获取或设置此碰撞体引用的网格资源.\r\n     */\r\n    @type(TerrainAsset)\r\n    @tooltip('i18n:physics3d.collider.terrain_terrain')\r\n    get terrain (): ITerrainAsset | null {\r\n        return this._terrain;\r\n    }\r\n\r\n    set terrain (value) {\r\n        this._terrain = value;\r\n        if (this._shape) this.shape.setTerrain(this._terrain);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    get shape (): ITerrainShape {\r\n        return this._shape as ITerrainShape;\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        super.onEnable();\r\n\r\n        if (this.node) {\r\n            const body = this.node.getComponent(RigidBody);\r\n            if (body && body.isValid && (body.type === ERigidBodyType.DYNAMIC)) {\r\n                warnID(9630, this.node.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _terrain: ITerrainAsset | null = null;\r\n\r\n    constructor () {\r\n        super(EColliderType.TERRAIN);\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-namespace */\r\n/* eslint-disable func-names */\r\n/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    visible,\r\n    type,\r\n    editable,\r\n    serializable,\r\n    tooltip,\r\n} from 'cc.decorator';\r\nimport { Vec3, IVec3Like } from '../../../../core';\r\nimport { Collider } from './collider';\r\nimport { ISimplexShape } from '../../../spec/i-physics-shape';\r\nimport { ESimplexType, EColliderType } from '../../physics-enum';\r\n\r\n/**\r\n * @en\r\n * Simplex collider, support point, line, triangle, tetrahedron.\r\n * @zh\r\n * 单纯形碰撞器，支持点、线、三角形、四面体。\r\n */\r\n@ccclass('cc.SimplexCollider')\r\n@help('i18n:cc.SimplexCollider')\r\n@menu('Physics/SimplexCollider')\r\n@executeInEditMode\r\nexport class SimplexCollider extends Collider {\r\n    static readonly ESimplexType = ESimplexType;\r\n\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    @type(ESimplexType)\r\n    @tooltip('i18n:physics3d.collider.simplex_shapeType')\r\n    get shapeType (): ESimplexType {\r\n        return this._shapeType;\r\n    }\r\n\r\n    set shapeType (v) {\r\n        this._shapeType = v;\r\n        if (this._shape) {\r\n            this.shape.setShapeType(v);\r\n        }\r\n    }\r\n\r\n    @editable\r\n    @tooltip('i18n:physics3d.collider.simplex_vertex0')\r\n    get vertex0 (): IVec3Like {\r\n        return this._vertices[0];\r\n    }\r\n\r\n    set vertex0 (v: IVec3Like) {\r\n        Vec3.copy(this._vertices[0], v);\r\n        this.updateVertices();\r\n    }\r\n\r\n    @visible(function (this: SimplexCollider) { return this._shapeType > 1; })\r\n    @tooltip('i18n:physics3d.collider.simplex_vertex1')\r\n    get vertex1 (): IVec3Like {\r\n        return this._vertices[1];\r\n    }\r\n\r\n    set vertex1 (v: IVec3Like) {\r\n        Vec3.copy(this._vertices[1], v);\r\n        this.updateVertices();\r\n    }\r\n\r\n    @visible(function (this: SimplexCollider) { return this._shapeType > 2; })\r\n    @tooltip('i18n:physics3d.collider.simplex_vertex2')\r\n    get vertex2 (): IVec3Like {\r\n        return this._vertices[2];\r\n    }\r\n\r\n    set vertex2 (v: IVec3Like) {\r\n        Vec3.copy(this._vertices[2], v);\r\n        this.updateVertices();\r\n    }\r\n\r\n    @visible(function (this: SimplexCollider) { return this._shapeType > 3; })\r\n    @tooltip('i18n:physics3d.collider.simplex_vertex3')\r\n    get vertex3 (): IVec3Like {\r\n        return this._vertices[3];\r\n    }\r\n\r\n    set vertex3 (v: IVec3Like) {\r\n        Vec3.copy(this._vertices[3], v);\r\n        this.updateVertices();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get shape (): ISimplexShape {\r\n        return this._shape as ISimplexShape;\r\n    }\r\n\r\n    get vertices (): IVec3Like[] {\r\n        return this._vertices;\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _shapeType: ESimplexType = ESimplexType.TETRAHEDRON;\r\n\r\n    @serializable\r\n    private _vertices: IVec3Like[] = [\r\n        new Vec3(0, 0, 0),\r\n        new Vec3(0, 0, 1),\r\n        new Vec3(1, 0, 0),\r\n        new Vec3(0, 1, 0),\r\n    ];\r\n\r\n    constructor () {\r\n        super(EColliderType.SIMPLEX);\r\n    }\r\n\r\n    updateVertices (): void {\r\n        if (this._shape) {\r\n            this.shape.setVertices(this._vertices);\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace SimplexCollider {\r\n    export type ESimplexType = EnumAlias<typeof ESimplexType>;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    executeInEditMode,\r\n    menu,\r\n    tooltip,\r\n    type,\r\n    editable,\r\n    serializable,\r\n} from 'cc.decorator';\r\nimport { Vec3, warnID } from '../../../../core';\r\nimport { Collider } from './collider';\r\nimport { IPlaneShape } from '../../../spec/i-physics-shape';\r\nimport { EColliderType, ERigidBodyType } from '../../physics-enum';\r\nimport { RigidBody } from '../rigid-body';\r\n\r\n/**\r\n * @en\r\n * Plane collider component.\r\n * @zh\r\n * 静态平面碰撞器。\r\n */\r\n@ccclass('cc.PlaneCollider')\r\n@help('i18n:cc.PlaneCollider')\r\n@menu('Physics/PlaneCollider')\r\n@executeInEditMode\r\nexport class PlaneCollider extends Collider {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the normal of the plane, in local space.\r\n     * @zh\r\n     * 获取或设置平面在本地坐标系下的法线。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.collider.plane_normal')\r\n    public get normal (): Vec3 {\r\n        return this._normal;\r\n    }\r\n\r\n    public set normal (value) {\r\n        if (Vec3.strictEquals(this._normal, value)) return;\r\n        Vec3.copy(this._normal, value);\r\n        if (this._shape) {\r\n            this.shape.setNormal(this._normal);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the value of the plane moving along the normal, in local space.\r\n     * @zh\r\n     * 获取或设置平面在本地坐标系下沿着法线移动的数值。\r\n     */\r\n    @editable\r\n    @tooltip('i18n:physics3d.collider.plane_constant')\r\n    public get constant (): number {\r\n        return this._constant;\r\n    }\r\n\r\n    public set constant (v: number) {\r\n        if (this._constant === v) return;\r\n        this._constant = v;\r\n        if (this._shape) {\r\n            this.shape.setConstant(this._constant);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrapper object, through which the lowLevel instance can be accessed.\r\n     * @zh\r\n     * 获取封装对象，通过此对象可以访问到底层实例。\r\n     */\r\n    public get shape (): IPlaneShape {\r\n        return this._shape as IPlaneShape;\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        super.onEnable();\r\n\r\n        if (this.node) {\r\n            const body = this.node.getComponent(RigidBody);\r\n            if (body && body.isValid && (body.type === ERigidBodyType.DYNAMIC)) {\r\n                warnID(9630, this.node.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n\r\n    @serializable\r\n    private _normal = new Vec3(0, 1, 0);\r\n\r\n    @serializable\r\n    private _constant = 0;\r\n\r\n    constructor () {\r\n        super(EColliderType.PLANE);\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-namespace */\r\n/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, requireComponent, displayOrder, type, readOnly, serializable, tooltip } from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Component } from '../../../../scene-graph';\r\nimport { RigidBody } from '../rigid-body';\r\nimport { Eventify } from '../../../../core';\r\nimport { IBaseConstraint } from '../../../spec/i-physics-constraint';\r\nimport { selector, createConstraint } from '../../physics-selector';\r\nimport { EConstraintType } from '../../physics-enum';\r\n\r\n/**\r\n * @en\r\n * Base class for joint constraints, which depends on rigid body components.\r\n * @zh\r\n * 关节约束的基类，它依赖于刚体组件。\r\n */\r\n@ccclass('cc.Constraint')\r\n@requireComponent(RigidBody)\r\nexport class Constraint extends Eventify(Component) {\r\n    /**\r\n     * @en\r\n     * Enumeration of joint types.\r\n     * @zh\r\n     * 关节类型的枚举。\r\n     */\r\n    static readonly Type = EConstraintType;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the collider attached rigid-body.\r\n     * @zh\r\n     * 获取碰撞器所绑定的刚体组件。\r\n     */\r\n    @type(RigidBody)\r\n    @readOnly\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:physics3d.constraint.attachedBody')\r\n    get attachedBody (): RigidBody | null {\r\n        return this.getComponent(RigidBody);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get or set the jointed rigid body, null means link to a static rigid body at the world origin.\r\n     * @zh\r\n     * 获取或设置关节连接的刚体，为空时表示链接到位于世界原点的静态刚体。\r\n     */\r\n    @type(RigidBody)\r\n    @displayOrder(-1)\r\n    @tooltip('i18n:physics3d.constraint.connectedBody')\r\n    get connectedBody (): RigidBody | null {\r\n        return this._connectedBody;\r\n    }\r\n\r\n    set connectedBody (v: RigidBody | null) {\r\n        this._connectedBody = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            if (this._constraint) this._constraint.setConnectedBody(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get or set whether collision is turned on between two rigid bodies connected by a joint.\r\n     * @zh\r\n     * 获取或设置关节连接的两刚体之间是否开启碰撞。\r\n     */\r\n    @displayOrder(0)\r\n    @tooltip('i18n:physics3d.constraint.enableCollision')\r\n    get enableCollision (): boolean {\r\n        return this._enableCollision;\r\n    }\r\n\r\n    set enableCollision (v) {\r\n        this._enableCollision = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            if (this._constraint) this._constraint.setEnableCollision(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the type of this joint.\r\n     * @zh\r\n     * 获取此关节的类型。\r\n     */\r\n    readonly TYPE: EConstraintType;\r\n\r\n    /// PROTECTED PROPERTY ///\r\n\r\n    @serializable\r\n    protected _enableCollision = true;\r\n\r\n    @type(RigidBody)\r\n    protected _connectedBody: RigidBody | null = null;\r\n\r\n    protected _constraint: IBaseConstraint | null = null;\r\n\r\n    constructor (type: EConstraintType) {\r\n        super();\r\n        this.TYPE = type;\r\n    }\r\n\r\n    /// COMPONENT LIFECYCLE ///\r\n\r\n    protected onLoad (): void {\r\n        if (!selector.runInEditor) return;\r\n        this._constraint = createConstraint(this.TYPE);\r\n        this._constraint.initialize(this);\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        if (this._constraint) {\r\n            this._constraint.onEnable!();\r\n        }\r\n    }\r\n\r\n    protected onDisable (): void {\r\n        if (this._constraint) {\r\n            this._constraint.onDisable!();\r\n        }\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        if (this._constraint) {\r\n            this._constraint.onDestroy!();\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace Constraint {\r\n    export type Type = EnumAlias<typeof EConstraintType>;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    menu,\r\n    serializable,\r\n    formerlySerializedAs,\r\n    type,\r\n    tooltip,\r\n} from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Constraint } from './constraint';\r\nimport { Vec3, CCFloat, CCBoolean } from '../../../../core';\r\nimport { EConstraintType } from '../../physics-enum';\r\nimport { IHingeConstraint } from '../../../spec/i-physics-constraint';\r\n\r\n/**\r\n * @en The hinge constraint limitation data.\r\n * @zh 铰链约束的限制数据。\r\n */\r\n@ccclass('cc.HingeLimitData')\r\nexport class HingeLimitData {\r\n    @serializable\r\n    @formerlySerializedAs('enabled')\r\n    private _enabled = false;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('upperLimit')\r\n    private _upperLimit = Number.MAX_VALUE;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('lowerLimit')\r\n    private _lowerLimit = -Number.MAX_VALUE;\r\n\r\n    constructor () {}\r\n\r\n    /**\r\n     * @en\r\n     * Whether to enable the rotation limit of the hinge constraint.\r\n     * @zh\r\n     * 是否开启旋转限制。\r\n     */\r\n    @type(CCBoolean)\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n    set enabled (v: boolean) {\r\n        this._enabled = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The upper limit to the rotation of pivotB related to pivotB's local position. (in degrees)\r\n     * @zh\r\n     * 转轴约束的旋转上限。（以度为单位）\r\n     */\r\n    @type(CCFloat)\r\n    get upperLimit (): number {\r\n        return this._upperLimit;\r\n    }\r\n    set upperLimit (v: number) {\r\n        this._upperLimit = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The lower limit to the rotation of pivotB related to pivotB's local position. (in degrees)\r\n     * @zh\r\n     * 转轴约束的旋转下限。（以度为单位）\r\n     */\r\n    @type(CCFloat)\r\n    get lowerLimit (): number {\r\n        return this._lowerLimit;\r\n    }\r\n    set lowerLimit (v: number) {\r\n        this._lowerLimit = v;\r\n    }\r\n}\r\n\r\n/**\r\n * @en The hinge constraint motor data.\r\n * @zh 铰链约束的马达数据。\r\n */\r\n@ccclass('cc.HingeMotorData')\r\nexport class HingeMotorData {\r\n    @serializable\r\n    @formerlySerializedAs('enabled')\r\n    private _enabled = false;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('motorVelocity')\r\n    private _motorVelocity = 0;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('motorForceLimit')\r\n    private _motorForceLimit = 0;\r\n\r\n    constructor () {}\r\n\r\n    /**\r\n     * @en\r\n     * Whether the motor is enabled or not.\r\n     * @zh\r\n     * 转轴约束是否启用 Motor\r\n     */\r\n    @type(CCBoolean)\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n    set enabled (v: boolean) {\r\n        this._enabled = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The rotation speed of pivotA related to pivotB. (in degrees per second)\r\n     * @zh\r\n     * 转轴约束的旋转速度。（以度每秒为单位）\r\n     */\r\n    @type(CCFloat)\r\n    get motorVelocity (): number {\r\n        return this._motorVelocity;\r\n    }\r\n    set motorVelocity (v: number) {\r\n        this._motorVelocity = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The max drive force of the motor.\r\n     * @zh\r\n     * 转轴约束的最大驱动力。\r\n     */\r\n    @type(CCFloat)\r\n    get motorForceLimit (): number {\r\n        return this._motorForceLimit;\r\n    }\r\n    set motorForceLimit (v: number) {\r\n        this._motorForceLimit = v;\r\n    }\r\n}\r\n\r\n/**\r\n * @en Hinge constraint.\r\n * It keeps the local rotation axes of two rigid bodies aligned,\r\n * and locks the relative motion along the rotation axis.\r\n * @zh 铰链约束。\r\n * 它保持两个刚体的本地旋转轴对齐，并锁定沿旋转轴的相对运动。\r\n */\r\n@ccclass('cc.HingeConstraint')\r\n@help('i18n:cc.HingeConstraint')\r\n@menu('Physics/HingeConstraint(beta)')\r\nexport class HingeConstraint extends Constraint {\r\n    /**\r\n     * @en\r\n     * The pivot point of the constraint in the local coordinate system of the attached rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体的本地坐标系中的锚点。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.pivotA')\r\n    get pivotA (): Vec3 {\r\n        return this._pivotA;\r\n    }\r\n\r\n    set pivotA (v: Vec3) {\r\n        Vec3.copy(this._pivotA, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setPivotA(this._pivotA);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The pivot point of the constraint in the local coordinate system of the connected rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体的本地坐标系中的锚点。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.pivotB')\r\n    get pivotB (): Vec3 {\r\n        return this._pivotB;\r\n    }\r\n\r\n    set pivotB (v: Vec3) {\r\n        Vec3.copy(this._pivotB, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setPivotB(this._pivotB);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The axis of the constraint in the local coordinate system of the attached rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体的本地坐标系中的轴。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.axis')\r\n    get axis (): Vec3 {\r\n        return this._axis;\r\n    }\r\n\r\n    set axis (v: Vec3) {\r\n        Vec3.copy(this._axis, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setAxis(this._axis);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether to enable the rotation limit of the hinge constraint.\r\n     * @zh\r\n     * 是否开启旋转限制。\r\n     */\r\n    @type(CCBoolean)\r\n    get limitEnabled (): boolean {\r\n        return this._limitData.enabled;\r\n    }\r\n    set limitEnabled (v: boolean) {\r\n        this._limitData.enabled = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setLimitEnabled(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The upper limit to the rotation angle of pivotB related to pivotB's local position.\r\n     * @zh\r\n     * 转轴约束的旋转角度上限。\r\n     */\r\n    @type(CCFloat)\r\n    get upperLimit (): number {\r\n        return this._limitData.upperLimit;\r\n    }\r\n    set upperLimit (v: number) {\r\n        this._limitData.upperLimit = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setUpperLimit(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The lower limit to the rotation angle of pivotB related to pivotB's local position.\r\n     * @zh\r\n     * 转轴约束的旋转角度下限。\r\n     */\r\n    @type(CCFloat)\r\n    get lowerLimit (): number {\r\n        return this._limitData.lowerLimit;\r\n    }\r\n    set lowerLimit (v: number) {\r\n        this._limitData.lowerLimit = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setLowerLimit(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether the motor is enabled or not.\r\n     * @zh\r\n     * 转轴约束是否启用 Motor\r\n     */\r\n    @type(CCBoolean)\r\n    get motorEnabled (): boolean {\r\n        return this._motorData.enabled;\r\n    }\r\n    set motorEnabled (v: boolean) {\r\n        this._motorData.enabled = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setMotorEnabled(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The rotation speed of pivotA related to pivotB.\r\n     * @zh\r\n     * 转轴约束的旋转速度。\r\n     */\r\n    @type(CCFloat)\r\n    get motorVelocity (): number {\r\n        return this._motorData.motorVelocity;\r\n    }\r\n    set motorVelocity (v: number) {\r\n        this._motorData.motorVelocity = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setMotorVelocity(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The max drive force of the motor.\r\n     * @zh\r\n     * 转轴约束的最大驱动力。\r\n     */\r\n    @type(CCFloat)\r\n    get motorForceLimit (): number {\r\n        return this._motorData.motorForceLimit;\r\n    }\r\n    set motorForceLimit (v: number) {\r\n        this._motorData.motorForceLimit = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setMotorForceLimit(v);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    @formerlySerializedAs('axisA')\r\n    private readonly _axis: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    @formerlySerializedAs('pivotA')\r\n    private readonly _pivotA: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    @formerlySerializedAs('pivotB')\r\n    private readonly _pivotB: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    @formerlySerializedAs('limitData')\r\n    private _limitData =  new HingeLimitData();\r\n\r\n    @serializable\r\n    @formerlySerializedAs('motorData')\r\n    private _motorData =  new HingeMotorData();\r\n\r\n    get constraint (): IHingeConstraint {\r\n        return this._constraint as IHingeConstraint;\r\n    }\r\n\r\n    constructor () {\r\n        super(EConstraintType.HINGE);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    menu,\r\n    serializable,\r\n    formerlySerializedAs,\r\n    type,\r\n    tooltip,\r\n} from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Constraint } from './constraint';\r\nimport { CCFloat } from '../../../../core';\r\nimport { EConstraintType } from '../../physics-enum';\r\nimport { IFixedConstraint } from '../../../spec/i-physics-constraint';\r\n\r\n/**\r\n * @en The fixed constraint.\r\n * It locks the relative position and rotation between two rigid bodies.\r\n * @zh 固定关节。\r\n * 固定关节会锁定两个刚体间的相对位置和相对旋转。\r\n */\r\n@ccclass('cc.FixedConstraint')\r\n@help('i18n:cc.FixedConstraint')\r\n@menu('Physics/FixedConstraint(beta)')\r\nexport class FixedConstraint extends Constraint {\r\n    /**\r\n     * @en\r\n     * The maximum force that can be applied to the constraint before it breaks.\r\n     * @zh\r\n     * 约束的断裂力阈值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.breakForce')\r\n    get breakForce (): number {\r\n        return this._breakForce;\r\n    }\r\n\r\n    set breakForce (v: number) {\r\n        this._breakForce = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setBreakForce(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The maximum torque that can be applied to the constraint before it breaks.\r\n     * @zh\r\n     * 约束的断裂扭矩阈值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.breakTorque')\r\n    get breakTorque (): number {\r\n        return this._breakTorque;\r\n    }\r\n\r\n    set breakTorque (v: number) {\r\n        this._breakTorque = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setBreakTorque(v);\r\n        }\r\n    }\r\n\r\n    get constraint (): IFixedConstraint {\r\n        return this._constraint as IFixedConstraint;\r\n    }\r\n\r\n    @serializable\r\n    @formerlySerializedAs('breakForce')\r\n    private _breakForce = 1e8;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('breakTorque')\r\n    private _breakTorque = 1e8;\r\n\r\n    constructor () {\r\n        super(EConstraintType.FIXED);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    menu,\r\n    serializable,\r\n    formerlySerializedAs,\r\n    type,\r\n    tooltip,\r\n    editable,\r\n    group,\r\n} from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Constraint } from './constraint';\r\nimport { Vec3, CCFloat, CCBoolean } from '../../../../core';\r\nimport { EConstraintType, EConstraintMode, EDriverMode } from '../../physics-enum';\r\nimport { IConfigurableConstraint } from '../../../spec/i-physics-constraint';\r\n\r\n/**\r\n * @en The linear limit settings of the configurable constraint.\r\n * @zh 可配置约束的线性限制设置。\r\n */\r\n@ccclass('cc.LinearLimitSettings')\r\nexport class LinearLimitSettings  {\r\n    @type(EConstraintMode)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.xMotion')\r\n    get xMotion (): EConstraintMode {\r\n        return this._xMotion;\r\n    }\r\n    set xMotion (v: EConstraintMode) {\r\n        this._xMotion = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setConstraintMode(0, v);\r\n        }\r\n    }\r\n\r\n    @type(EConstraintMode)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.yMotion')\r\n    get yMotion (): EConstraintMode {\r\n        return this._yMotion;\r\n    }\r\n    set yMotion (v: EConstraintMode) {\r\n        this._yMotion = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setConstraintMode(1, v);\r\n        }\r\n    }\r\n\r\n    @type(EConstraintMode)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.zMotion')\r\n    get zMotion (): EConstraintMode {\r\n        return this._zMotion;\r\n    }\r\n    set zMotion (v: EConstraintMode) {\r\n        this._zMotion = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setConstraintMode(2, v);\r\n        }\r\n    }\r\n\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.upper')\r\n    get upper (): Vec3 {\r\n        return this._upper;\r\n    }\r\n    set upper (v: Vec3) {\r\n        Vec3.copy(this._upper, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const lower = this.lower;\r\n            this._impl.setLinearLimit(0, lower.x, v.x);\r\n            this._impl.setLinearLimit(1, lower.y, v.y);\r\n            this._impl.setLinearLimit(2, lower.z, v.z);\r\n        }\r\n    }\r\n\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.lower')\r\n    get lower (): Vec3 {\r\n        return this._lower;\r\n    }\r\n    set lower (v: Vec3) {\r\n        Vec3.copy(this._lower, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const upper = this.upper;\r\n            this._impl.setLinearLimit(0, v.x, upper.x);\r\n            this._impl.setLinearLimit(1, v.y, upper.y);\r\n            this._impl.setLinearLimit(2, v.z, upper.z);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.restitution')\r\n    get restitution (): number {\r\n        return this._bounciness;\r\n    }\r\n    set restitution (v: number) {\r\n        this._bounciness = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearRestitution(v);\r\n        }\r\n    }\r\n\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.enableSoftConstraint')\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings', style: 'section' })\r\n    get enableSoftConstraint (): boolean {\r\n        return this._enableSoftConstraint;\r\n    }\r\n    set enableSoftConstraint (v: boolean) {\r\n        this._enableSoftConstraint = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearSoftConstraint(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.stiffness')\r\n    get stiffness (): number {\r\n        return this._stiffness;\r\n    }\r\n    set stiffness (v: number) {\r\n        this._stiffness = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearStiffness(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit.damping')\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    get damping (): number {\r\n        return this._damping;\r\n    }\r\n    set damping (v: number) {\r\n        this._damping = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearDamping(v);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _xMotion = EConstraintMode.FREE;\r\n    @serializable\r\n    private _yMotion = EConstraintMode.FREE;\r\n    @serializable\r\n    private _zMotion = EConstraintMode.FREE;\r\n    @serializable\r\n    private _upper = new Vec3();\r\n    @serializable\r\n    private _lower = new Vec3();\r\n    @serializable\r\n    private _enableSoftConstraint = false;\r\n    @serializable\r\n    private _bounciness = 0; // restitution [0,1]\r\n    @serializable\r\n    private _stiffness = 0;\r\n    @serializable\r\n    private _damping = 0;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set impl (v: IConfigurableConstraint) {\r\n        this._impl = v;\r\n    }\r\n\r\n    private _impl: IConfigurableConstraint;\r\n    constructor (configurableConstraint: IConfigurableConstraint) {\r\n        this._impl = configurableConstraint;\r\n    }\r\n}\r\n\r\n/**\r\n * @en The angular limit settings of the configurable constraint.\r\n * @zh 可配置约束的角度限制设置。\r\n */\r\n@ccclass('cc.AngularLimitSettings')\r\nexport class AngularLimitSettings {\r\n    @type(EConstraintMode)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.twistMotion')\r\n    get twistMotion (): EConstraintMode {\r\n        return this._twistMotion;\r\n    }\r\n    set twistMotion (v: EConstraintMode) {\r\n        this._twistMotion = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setConstraintMode(3, v);\r\n        }\r\n    }\r\n    @type(EConstraintMode)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingMotion1')\r\n    get swingMotion1 (): EConstraintMode {\r\n        return this._swing1Motion;\r\n    }\r\n    set swingMotion1 (v: EConstraintMode) {\r\n        this._swing1Motion = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setConstraintMode(4, v);\r\n        }\r\n    }\r\n    @type(EConstraintMode)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingMotion2')\r\n    get swingMotion2 (): EConstraintMode {\r\n        return this._swing2Motion;\r\n    }\r\n    set swingMotion2 (v: EConstraintMode) {\r\n        this._swing2Motion = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setConstraintMode(5, v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.twistExtent')\r\n    get twistExtent (): number {\r\n        return this._twistExtent;\r\n    }\r\n    set twistExtent (v: number) {\r\n        this._twistExtent = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setAngularExtent(v, this.swingExtent1, this.swingExtent2);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingExtent1')\r\n    get swingExtent1 (): number {\r\n        return this._swingExtent1;\r\n    }\r\n    set swingExtent1 (v: number) {\r\n        this._swingExtent1 = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setAngularExtent(this.twistExtent, v, this.swingExtent2);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingExtent2')\r\n    get swingExtent2 (): number {\r\n        return this._swingExtent2;\r\n    }\r\n    set swingExtent2 (v: number) {\r\n        this._swingExtent2 = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setAngularExtent(this.twistExtent, this.swingExtent1, v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.twistRestitution')\r\n    get twistRestitution (): number {\r\n        return this._twistBounciness;\r\n    }\r\n    set twistRestitution (v: number) {\r\n        this._twistBounciness = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setTwistRestitution(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingRestitution')\r\n    get swingRestitution (): number {\r\n        return this._swingBounciness;\r\n    }\r\n    set swingRestitution (v: number) {\r\n        this._swingBounciness = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setSwingRestitution(v);\r\n        }\r\n    }\r\n\r\n    @type(CCBoolean)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.enableSoftConstraintTwist')\r\n    get enableSoftConstraintTwist (): boolean {\r\n        return this._enableSoftConstraintTwist;\r\n    }\r\n    set enableSoftConstraintTwist (v: boolean) {\r\n        this._enableSoftConstraintTwist = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setTwistSoftConstraint(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.twistStiffness')\r\n    get twistStiffness (): number {\r\n        return this._twistStiffness;\r\n    }\r\n    set twistStiffness (v: number) {\r\n        this._twistStiffness = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setTwistStiffness(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.twistDamping')\r\n    get twistDamping (): number {\r\n        return this._twistDamping;\r\n    }\r\n    set twistDamping (v: number) {\r\n        this._twistDamping = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setTwistDamping(v);\r\n        }\r\n    }\r\n\r\n    @type(CCBoolean)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.enableSoftConstraintSwing')\r\n    get enableSoftConstraintSwing (): boolean {\r\n        return this._enableSoftConstraintSwing;\r\n    }\r\n    set enableSoftConstraintSwing (v: boolean) {\r\n        this._enableSoftConstraintSwing = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setSwingSoftConstraint(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingStiffness')\r\n    get swingStiffness (): number {\r\n        return this._swingStiffness;\r\n    }\r\n    set swingStiffness (v: number) {\r\n        this._swingStiffness = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setSwingStiffness(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @group({ id: 'SoftConstraint', name: 'SoftConstraintSettings' })\r\n    @tooltip('i18n:physics3d.constraint.angularLimit.swingDamping')\r\n    get swingDamping (): number {\r\n        return this._swingDamping;\r\n    }\r\n    set swingDamping (v: number) {\r\n        this._swingDamping = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setSwingDamping(v);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _swing1Motion = EConstraintMode.FREE;\r\n    @serializable\r\n    private _swing2Motion = EConstraintMode.FREE;\r\n    @serializable\r\n    private _twistMotion = EConstraintMode.FREE;\r\n\r\n    @serializable\r\n    private _twistExtent = 0;\r\n    @serializable\r\n    private _swingExtent1 = 0;\r\n    @serializable\r\n    private _swingExtent2 = 0;\r\n\r\n    @serializable\r\n    private _enableSoftConstraintSwing = false;\r\n    @serializable\r\n    private _swingBounciness = 0;\r\n    @serializable\r\n    private _swingStiffness = 0;\r\n    @serializable\r\n    private _swingDamping = 0;\r\n\r\n    @serializable\r\n    private _enableSoftConstraintTwist = false;\r\n    @serializable\r\n    private _twistBounciness = 0;\r\n    @serializable\r\n    private _twistStiffness = 0;\r\n    @serializable\r\n    private _twistDamping = 0;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set impl (v: IConfigurableConstraint) {\r\n        this._impl = v;\r\n    }\r\n\r\n    private _impl: IConfigurableConstraint;\r\n    constructor (configurableConstraint: IConfigurableConstraint) {\r\n        this._impl = configurableConstraint;\r\n    }\r\n}\r\n\r\n/**\r\n * @en The linear driver settings of the configurable constraint.\r\n * @zh 可配置约束的线性驱动器设置。\r\n */\r\n@ccclass('cc.LinearDriverSettings')\r\nexport class LinearDriverSettings {\r\n    @type(EDriverMode)\r\n    @tooltip('i18n:physics3d.constraint.linearDriver.xMode')\r\n    get xDrive (): EDriverMode {\r\n        return this._xDrive;\r\n    }\r\n    set xDrive (v: EDriverMode) {\r\n        this._xDrive = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setDriverMode(0, v);\r\n        }\r\n    }\r\n\r\n    @type(EDriverMode)\r\n    @tooltip('i18n:physics3d.constraint.linearDriver.yMode')\r\n    get yDrive (): EDriverMode {\r\n        return this._yDrive;\r\n    }\r\n    set yDrive (v: EDriverMode) {\r\n        this._yDrive = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setDriverMode(1, v);\r\n        }\r\n    }\r\n\r\n    @type(EDriverMode)\r\n    @tooltip('i18n:physics3d.constraint.linearDriver.zMode')\r\n    get zDrive (): EDriverMode {\r\n        return this._zDrive;\r\n    }\r\n    set zDrive (v: EDriverMode) {\r\n        this._zDrive = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setDriverMode(2, v);\r\n        }\r\n    }\r\n\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.linearDriver.targetPosition')\r\n    get targetPosition (): Vec3 {\r\n        return this._target;\r\n    }\r\n    set targetPosition (v: Vec3) {\r\n        Vec3.copy(this._target, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearMotorTarget(v);\r\n        }\r\n    }\r\n\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.linearDriver.targetVelocity')\r\n    get targetVelocity (): Vec3 {\r\n        return this._velocity;\r\n    }\r\n    set targetVelocity (v: Vec3) {\r\n        Vec3.copy(this._velocity, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearMotorVelocity(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.linearDriver.strength')\r\n    get strength (): number {\r\n        return this._strength;\r\n    }\r\n    set strength (v) {\r\n        this._strength = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setLinearMotorForceLimit(v);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _target = new Vec3();\r\n    @serializable\r\n    private _velocity = new Vec3();\r\n\r\n    @serializable\r\n    private _xDrive = EDriverMode.DISABLED;\r\n    @serializable\r\n    private _yDrive = EDriverMode.DISABLED;\r\n    @serializable\r\n    private _zDrive = EDriverMode.DISABLED;\r\n\r\n    @serializable\r\n    private _strength = 0;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set impl (v: IConfigurableConstraint) {\r\n        this._impl = v;\r\n    }\r\n\r\n    private _impl: IConfigurableConstraint;\r\n    constructor (configurableConstraint: IConfigurableConstraint) {\r\n        this._impl = configurableConstraint;\r\n    }\r\n}\r\n\r\n/**\r\n * @en The angular driver settings of the configurable constraint.\r\n * @zh 可配置约束的角度驱动器设置。\r\n */\r\n@ccclass('cc.AngularDriverSettings')\r\nexport class AngularDriverSettings {\r\n    @type(EDriverMode)\r\n    @tooltip('i18n:physics3d.constraint.angularDriver.twistMode')\r\n    get twistDrive (): EDriverMode {\r\n        return this._twistDrive;\r\n    }\r\n    set twistDrive (v: EDriverMode) {\r\n        this._twistDrive = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setDriverMode(3, v);\r\n        }\r\n    }\r\n\r\n    @type(EDriverMode)\r\n    @tooltip('i18n:physics3d.constraint.angularDriver.swingMode1')\r\n    get swingDrive1 (): EDriverMode {\r\n        return this._swingDrive1;\r\n    }\r\n    set swingDrive1 (v: EDriverMode) {\r\n        this._swingDrive1 = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setDriverMode(4, v);\r\n        }\r\n    }\r\n\r\n    @type(EDriverMode)\r\n    @tooltip('i18n:physics3d.constraint.angularDriver.swingMode2')\r\n    get swingDrive2 (): EDriverMode {\r\n        return this._swingDrive2;\r\n    }\r\n    set swingDrive2 (v: EDriverMode) {\r\n        this._swingDrive2 = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setDriverMode(5, v);\r\n        }\r\n    }\r\n\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.angularDriver.targetOrientation')\r\n    get targetOrientation (): Vec3 {\r\n        return this._targetOrientation;\r\n    }\r\n    set targetOrientation (v) {\r\n        Vec3.copy(this._targetOrientation, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setAngularMotorTarget(v);\r\n        }\r\n    }\r\n\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.angularDriver.targetAngularVelocity')\r\n    get targetVelocity (): Vec3 {\r\n        return this._targetVelocity;\r\n    }\r\n    set targetVelocity (v) {\r\n        Vec3.copy(this._targetVelocity, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setAngularMotorVelocity(v);\r\n        }\r\n    }\r\n\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.angularDriver.strength')\r\n    get strength (): number {\r\n        return this._strength;\r\n    }\r\n    set strength (v) {\r\n        this._strength = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._impl.setAngularMotorForceLimit(v);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _swingDrive1 = EDriverMode.DISABLED;\r\n    @serializable\r\n    private _swingDrive2 = EDriverMode.DISABLED;\r\n    @serializable\r\n    private _twistDrive = EDriverMode.DISABLED;\r\n\r\n    @serializable\r\n    private _targetOrientation = new Vec3();\r\n    @serializable\r\n    private _targetVelocity = new Vec3();\r\n\r\n    @serializable\r\n    private _strength = 0;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set impl (v: IConfigurableConstraint) {\r\n        this._impl = v;\r\n    }\r\n\r\n    private _impl: IConfigurableConstraint;\r\n    constructor (configurableConstraint: IConfigurableConstraint) {\r\n        this._impl = configurableConstraint;\r\n    }\r\n}\r\n\r\n/**\r\n * @en The configurable constraint component.\r\n * The configurable constraint provides all the functionality of other constraints, and provides comprehensive configurable options.\r\n * @zh 可配置约束组件。\r\n * 可配置约束提供了其他约束的所有功能支持，提供了全面的可配置选项。\r\n */\r\n@ccclass('cc.ConfigurableConstraint')\r\n@help('i18n:cc.ConfigurableConstraint')\r\n@menu('Physics/ConfigurableConstraint(beta)')\r\nexport class ConfigurableConstraint extends Constraint {\r\n    /**\r\n     * @en\r\n     * The axis of the constraint in the local coordinate system of the attached rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体的本地坐标系中的轴。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.axis')\r\n    get axis (): Vec3 {\r\n        return this._axis;\r\n    }\r\n    set axis (v: Vec3) {\r\n        Vec3.copy(this._axis, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setAxis(this._axis);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The secondary axis of the constraint in the local coordinate system of the attached rigid body.\r\n     * @zh 约束关节在连接刚体的本地坐标系中的第二轴。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.secondaryAxis')\r\n    get secondaryAxis (): Vec3 {\r\n        return this._secondaryAxis;\r\n    }\r\n    set secondaryAxis (v: Vec3) {\r\n        Vec3.copy(this._secondaryAxis, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setSecondaryAxis(this._secondaryAxis);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The pivot point of the constraint in the local coordinate system of the attached rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体的本地坐标系中的锚点。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.pivotA')\r\n    get pivotA (): Vec3 {\r\n        return this._pivotA;\r\n    }\r\n\r\n    set pivotA (v: Vec3) {\r\n        Vec3.copy(this._pivotA, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setPivotA(this._pivotA);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The pivot point of the constraint in the local coordinate system of the connected rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体的本地坐标系中的锚点。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.pivotB')\r\n    get pivotB (): Vec3 {\r\n        return this._pivotB;\r\n    }\r\n\r\n    set pivotB (v: Vec3) {\r\n        Vec3.copy(this._pivotB, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setPivotB(this._pivotB);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The pivotB is derived automatically.\r\n     * @zh\r\n     * pivotB 会自动计算。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics3d.constraint.autoCalculatePivotB')\r\n    get autoPivotB (): boolean {\r\n        return this._autoPivotB;\r\n    }\r\n\r\n    set autoPivotB (v: boolean) {\r\n        this._autoPivotB = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setAutoPivotB(this._autoPivotB);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The break force threshold of the constraint.\r\n     * @zh\r\n     * 约束的断裂力阈值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.breakForce')\r\n    get breakForce (): number {\r\n        return this._breakForce;\r\n    }\r\n    set breakForce (v) {\r\n        this._breakForce = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setBreakForce(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The break torque threshold of the constraint.\r\n     * @zh\r\n     * 约束的断裂扭矩阈值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics3d.constraint.breakTorque')\r\n    get breakTorque (): number {\r\n        return this._breakTorque;\r\n    }\r\n    set breakTorque (v) {\r\n        this._breakTorque = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setBreakTorque(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The linear limit settings of the constraint.\r\n     * @zh\r\n     * 线性限制设置。\r\n     */\r\n    @type(LinearLimitSettings)\r\n    @tooltip('i18n:physics3d.constraint.linearLimit')\r\n    get linearLimitSettings (): LinearLimitSettings {\r\n        return this._linearLimitSettings;\r\n    }\r\n    set linearLimitSettings (v) {\r\n        this._linearLimitSettings = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const constraint = this.constraint;\r\n            constraint.setConstraintMode(0, v.xMotion);\r\n            constraint.setConstraintMode(1, v.yMotion);\r\n            constraint.setConstraintMode(2, v.zMotion);\r\n            const upper = v.upper;\r\n            const lower = v.lower;\r\n            constraint.setLinearLimit(0, lower.x, upper.x);\r\n            constraint.setLinearLimit(1, lower.y, upper.y);\r\n            constraint.setLinearLimit(2, lower.z, upper.z);\r\n            constraint.setLinearSoftConstraint(v.enableSoftConstraint);\r\n            constraint.setLinearDamping(v.damping);\r\n            constraint.setLinearStiffness(v.stiffness);\r\n            constraint.setLinearRestitution(v.restitution);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The angular limit settings of the constraint.\r\n     * @zh\r\n     * 角度限制设置。\r\n     */\r\n    @type(AngularLimitSettings)\r\n    @tooltip('i18n:physics3d.constraint.angularLimit')\r\n    get angularLimitSettings (): AngularLimitSettings {\r\n        return this._angularLimitSettings;\r\n    }\r\n    set angularLimitSettings (v) {\r\n        this._angularLimitSettings = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const constraint = this.constraint;\r\n            constraint.setConstraintMode(3, v.twistMotion);\r\n            constraint.setConstraintMode(4, v.swingMotion1);\r\n            constraint.setConstraintMode(5, v.swingMotion2);\r\n            constraint.setAngularExtent(v.twistExtent, v.swingExtent1, v.swingExtent2);\r\n            constraint.setTwistRestitution(v.twistRestitution);\r\n            constraint.setSwingRestitution(v.swingRestitution);\r\n            constraint.setTwistSoftConstraint(v.enableSoftConstraintTwist);\r\n            constraint.setSwingSoftConstraint(v.enableSoftConstraintSwing);\r\n            constraint.setTwistDamping(v.twistDamping);\r\n            constraint.setSwingDamping(v.swingDamping);\r\n            constraint.setTwistStiffness(v.twistStiffness);\r\n            constraint.setSwingStiffness(v.swingStiffness);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The linear drive settings of the constraint.\r\n     * @zh\r\n     * 线性驱动设置。\r\n     */\r\n    @type(LinearDriverSettings)\r\n    @tooltip('i18n:physics3d.constraint.linearDrive')\r\n    get linearDriverSettings (): LinearDriverSettings {\r\n        return this._linearDriverSettings;\r\n    }\r\n    set linearDriverSettings (v) {\r\n        this._linearDriverSettings = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const constraint = this.constraint;\r\n            constraint.setDriverMode(0, v.xDrive);\r\n            constraint.setDriverMode(1, v.yDrive);\r\n            constraint.setDriverMode(2, v.zDrive);\r\n            constraint.setLinearMotorTarget(v.targetPosition);\r\n            constraint.setLinearMotorVelocity(v.targetVelocity);\r\n            constraint.setLinearMotorForceLimit(v.strength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The angular drive settings of the constraint.\r\n     * @zh\r\n     * 角度驱动设置。\r\n     */\r\n    @type(AngularDriverSettings)\r\n    @tooltip('i18n:physics3d.constraint.angularDrive')\r\n    get angularDriverSettings (): AngularDriverSettings {\r\n        return this._angularDriverSettings;\r\n    }\r\n    set angularDriverSettings (v) {\r\n        this._angularDriverSettings = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const constraint = this.constraint;\r\n            constraint.setDriverMode(3, v.twistDrive);\r\n            constraint.setDriverMode(4, v.swingDrive1);\r\n            constraint.setDriverMode(5, v.swingDrive2);\r\n            constraint.setAngularMotorTarget(v.targetOrientation);\r\n            constraint.setAngularMotorVelocity(v.targetVelocity);\r\n            constraint.setAngularMotorForceLimit(v.strength);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _breakForce = 1e8;\r\n\r\n    @serializable\r\n    private _breakTorque = 1e8;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('linearLimitSettings')\r\n    private _linearLimitSettings: LinearLimitSettings;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('angularLimitSettings')\r\n    private _angularLimitSettings: AngularLimitSettings;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('linearDriverSettings')\r\n    private _linearDriverSettings: LinearDriverSettings;\r\n\r\n    @serializable\r\n    @formerlySerializedAs('angularDriverSettings')\r\n    private _angularDriverSettings: AngularDriverSettings;\r\n\r\n    @serializable\r\n    private readonly _pivotA: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    private readonly _pivotB: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    private _autoPivotB = false;\r\n\r\n    @serializable\r\n    private readonly _axis: Vec3 = new Vec3(0, 1, 0);\r\n\r\n    @serializable\r\n    private readonly _secondaryAxis: Vec3 = new Vec3(1, 0, 0);\r\n\r\n    get constraint (): IConfigurableConstraint {\r\n        return this._constraint as IConfigurableConstraint;\r\n    }\r\n\r\n    constructor () {\r\n        super(EConstraintType.CONFIGURABLE);\r\n        this._linearLimitSettings = new LinearLimitSettings(this.constraint);\r\n        this._angularLimitSettings = new AngularLimitSettings(this.constraint);\r\n        this._linearDriverSettings = new LinearDriverSettings(this.constraint);\r\n        this._angularDriverSettings = new AngularDriverSettings(this.constraint);\r\n    }\r\n\r\n    onLoad (): void {\r\n        super.onLoad();\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.linearLimitSettings.impl = this.constraint;\r\n            this.angularLimitSettings.impl = this.constraint;\r\n            this.linearDriverSettings.impl = this.constraint;\r\n            this.angularDriverSettings.impl = this.constraint;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    help,\r\n    menu,\r\n    type,\r\n    serializable,\r\n    tooltip,\r\n} from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Constraint } from './constraint';\r\nimport { Vec3, IVec3Like } from '../../../../core';\r\nimport { EConstraintType } from '../../physics-enum';\r\nimport { IPointToPointConstraint } from '../../../spec/i-physics-constraint';\r\n\r\n/**\r\n * @en The point to point constraint.\r\n * It locks the relative position of the pivots between two rigid bodies.\r\n * @zh 点对点约束。\r\n * 点对点约束会锁定两个刚体间的连接点的相对位置。\r\n */\r\n@ccclass('cc.PointToPointConstraint')\r\n@help('i18n:cc.PointToPointConstraint')\r\n@menu('Physics/PointToPointConstraint(beta)')\r\nexport class PointToPointConstraint extends Constraint {\r\n    /**\r\n     * @en\r\n     * The pivot point of the constraint in the local coordinate system of the attached rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体本地坐标系中的位置。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.pivotA')\r\n    get pivotA (): IVec3Like {\r\n        return this._pivotA;\r\n    }\r\n\r\n    set pivotA (v: IVec3Like) {\r\n        Vec3.copy(this._pivotA, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setPivotA(this._pivotA);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The pivot point of the constraint in the local coordinate system of the connected rigid body.\r\n     * @zh\r\n     * 约束关节在连接刚体本地坐标系中的位置。\r\n     */\r\n    @type(Vec3)\r\n    @tooltip('i18n:physics3d.constraint.pivotB')\r\n    get pivotB (): IVec3Like {\r\n        return this._pivotB;\r\n    }\r\n\r\n    set pivotB (v: IVec3Like) {\r\n        Vec3.copy(this._pivotB, v);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.constraint.setPivotB(this._pivotB);\r\n        }\r\n    }\r\n\r\n    get constraint (): IPointToPointConstraint {\r\n        return this._constraint as IPointToPointConstraint;\r\n    }\r\n\r\n    @serializable\r\n    private readonly _pivotA: Vec3 = new Vec3();\r\n\r\n    @serializable\r\n    private readonly _pivotB: Vec3 = new Vec3();\r\n\r\n    constructor () {\r\n        super(EConstraintType.POINT_TO_POINT);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass, disallowMultiple,\r\n    tooltip, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { DEBUG } from 'internal:constants';\r\nimport { Vec3, warn, CCFloat, Eventify } from '../../../../core';\r\nimport { Component } from '../../../../scene-graph';\r\nimport { IBaseCharacterController } from '../../../spec/i-character-controller';\r\nimport { ECharacterControllerType } from '../../physics-enum';\r\nimport { CharacterCollisionEventType, CharacterTriggerEventType } from '../../physics-interface';\r\nimport { selector, createCharacterController } from '../../physics-selector';\r\nimport { PhysicsSystem } from '../../physics-system';\r\n\r\ntype Callback = (...args: any[]) => any;\r\n\r\n/**\r\n * @en\r\n * Base class for Character Controller component.\r\n * @zh\r\n * 角色控制器组件基类。\r\n */\r\n@ccclass('cc.CharacterController')\r\n@disallowMultiple\r\nexport class CharacterController extends Eventify(Component) {\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the group of the character controller.\r\n     * @zh\r\n     * 获取或设置分组。\r\n     */\r\n    @type(PhysicsSystem.PhysicsGroup)\r\n    @displayOrder(-2)\r\n    @tooltip('i18n:physics3d.character_controller.group')\r\n    public get group (): number {\r\n        return this._group;\r\n    }\r\n\r\n    public set group (v: number) {\r\n        if (DEBUG && !Number.isInteger(Math.log2(v >>> 0))) {\r\n            warn('[Physics]: The group should only have one bit.');\r\n        }\r\n        this._group = v;\r\n        if (this._cct) {\r\n            // The judgment is added here because the data exists in two places\r\n            if (this._cct.getGroup() !== v) this._cct.setGroup(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the minimum movement distance of the character controller.\r\n     * @zh\r\n     * 获取或设置角色控制器的最小移动距离。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.minMoveDistance')\r\n    @type(CCFloat)\r\n    public get minMoveDistance (): number {\r\n        return this._minMoveDistance;\r\n    }\r\n\r\n    public set minMoveDistance (value) {\r\n        if (this._minMoveDistance === value) return;\r\n        this._minMoveDistance = Math.abs(value);\r\n    }\r\n\r\n    /**\r\n     * @en 、\r\n     * Gets or sets the maximum height the character controller can automatically climb.\r\n     * @zh\r\n     * 获取或设置角色控制器的最大自动爬台阶高度。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.stepOffset')\r\n    @type(CCFloat)\r\n    public get stepOffset (): number {\r\n        return this._stepOffset;\r\n    }\r\n\r\n    public set stepOffset (value) {\r\n        if (this._stepOffset === value) return;\r\n        this._stepOffset = Math.abs(value);\r\n        if (this._cct) {\r\n            this._cct.setStepOffset(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the slope limit of the character controller in degree.\r\n     * @zh\r\n     * 获取或设置角色控制器的最大爬坡角度。\r\n    */\r\n    @tooltip('i18n:physics3d.character_controller.slopeLimit')\r\n    @type(CCFloat)\r\n    public get slopeLimit (): number {\r\n        return this._slopeLimit;\r\n    }\r\n\r\n    public set slopeLimit (value) {\r\n        if (this._slopeLimit === value) return;\r\n        this._slopeLimit = Math.abs(value);\r\n        if (this._cct) {\r\n            this._cct.setSlopeLimit(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the skin width of the character controller.\r\n     * @zh\r\n     * 获取或设置角色控制器的皮肤宽度。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.skinWidth')\r\n    @type(CCFloat)\r\n    public get skinWidth (): number {\r\n        return this._skinWidth;\r\n    }\r\n\r\n    public set skinWidth (value) {\r\n        if (this._skinWidth === value) return;\r\n        this._skinWidth = Math.abs(value);\r\n        if (this._cct) {\r\n            this._cct.setContactOffset(Math.max(0.0001, value));\r\n        }\r\n    }\r\n\r\n    // /**\r\n    //  * @en\r\n    //  * Gets or sets if the character controller can collide with other objects.\r\n    //  * @zh\r\n    //  * 获取或设置角色控制器是否和发生碰撞。\r\n    //  */\r\n    // @tooltip('i18n:physics3d.character_controller.detectCollisions')\r\n    // @type(CCBoolean)\r\n    // public get detectCollisions () {\r\n    //     return this._detectCollisions;\r\n    // }\r\n\r\n    // public set detectCollisions (value) {\r\n    //     if (this._detectCollisions === value) return;\r\n    //     this._detectCollisions = value;\r\n    //     if (this._cct) {\r\n    //         this._cct.setDetectCollisions(value);\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * @en\r\n    //  * Gets or sets if the character controller enables overlap recovery when penetrating with other colliders.\r\n    //  * @zh\r\n    //  * 获取或设置角色控制器和其他碰撞体穿透时是否恢复。\r\n    //  */\r\n    // @tooltip('i18n:physics3d.character_controller.enableOverlapRecovery')\r\n    // @type(CCBoolean)\r\n    // public get enableOverlapRecovery () {\r\n    //     return this._enableOverlapRecovery;\r\n    // }\r\n\r\n    // public set enableOverlapRecovery (value) {\r\n    //     if (this._enableOverlapRecovery === value) return;\r\n    //     this._enableOverlapRecovery = value;\r\n    //     if (this._cct) {\r\n    //         this._cct.setOverlapRecovery(value);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the center of the character controller in local space.\r\n     * @zh\r\n     * 获取或设置角色控制器的中心点在局部坐标系中的位置。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.center')\r\n    @type(Vec3)\r\n    public get center (): Readonly<Vec3> {\r\n        return this._center;\r\n    }\r\n\r\n    public set center (value: Readonly<Vec3>) {\r\n        if (Vec3.equals(this._center, value)) return;\r\n        Vec3.copy(this._center, value);\r\n        // if (this._cct) { //update cct position\r\n        //     Vec3.copy(VEC3_0, this.node.worldPosition);\r\n        //     VEC3_0.add(this.scaledCenter);//cct world position\r\n        //     this._cct.setPosition(VEC3_0);\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the type of this character controller.\r\n     * @zh\r\n     * 获取此角色控制器的类型。\r\n     */\r\n    readonly type: ECharacterControllerType;\r\n\r\n    constructor (type: ECharacterControllerType) {\r\n        super();\r\n        this.type = type;\r\n    }\r\n\r\n    protected _cct: IBaseCharacterController | null = null; //lowLevel instance\r\n\r\n    /// PRIVATE PROPERTY ///\r\n    @serializable\r\n    private _group: number = PhysicsSystem.PhysicsGroup.DEFAULT;\r\n    @serializable\r\n    private _minMoveDistance = 0.001; //[ 0, infinity ]\r\n    @serializable\r\n    private _stepOffset = 0.5;\r\n    @serializable\r\n    private _slopeLimit = 45.0; //degree[ 0, 180]\r\n    @serializable\r\n    private _skinWidth = 0.01; //[ 0.0001, infinity ]\r\n    // @serializable\r\n    // private _detectCollisions = true;\r\n    // @serializable\r\n    // private _enableOverlapRecovery = true;\r\n    @serializable\r\n    private _center: Vec3 = new Vec3();\r\n\r\n    private _initialized = false;\r\n    private _prevPos: Vec3 = new Vec3();\r\n    private _currentPos: Vec3 = new Vec3();\r\n    private _velocity: Vec3 = new Vec3();\r\n    private _centerWorldPosition: Vec3 = new Vec3();\r\n\r\n    protected _needCollisionEvent = false;\r\n    protected _needTriggerEvent = false;\r\n\r\n    protected get _isInitialized (): boolean {\r\n        if (this._cct === null || !this._initialized) {\r\n            //error('[Physics]: This component has not been call onLoad yet, please make sure the node has been added to the scene.');\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /// COMPONENT LIFECYCLE ///\r\n\r\n    protected onLoad (): void {\r\n        if (!selector.runInEditor) return;\r\n        this._cct = createCharacterController(this.type);\r\n        this._initialized = this._cct.initialize(this);\r\n        this._cct.onLoad!();\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        if (this._cct) {\r\n            this._cct.onEnable!();\r\n        }\r\n    }\r\n\r\n    protected onDisable (): void {\r\n        if (this._cct) {\r\n            this._cct.onDisable!();\r\n        }\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        if (this._cct) {\r\n            this._needCollisionEvent = false;\r\n            this._needTriggerEvent = false;\r\n            this._cct.updateEventListener();\r\n            this._cct.onDestroy!();\r\n            this._cct = null;\r\n        }\r\n    }\r\n\r\n    /// PUBLIC METHOD ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets world position of center.\r\n     * @zh\r\n     * 获取中心的世界坐标。\r\n     */\r\n    public get centerWorldPosition (): Readonly<Vec3> {\r\n        if (this._isInitialized) this._cct!.getPosition(this._centerWorldPosition);\r\n        return this._centerWorldPosition;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets world position of center.\r\n     * Note: Calling this function will immediately synchronize the position of\r\n     * the character controller in the physics world to the node.\r\n     * @zh\r\n     * 设置中心的世界坐标。\r\n     * 注意：调用该函数会立刻将角色控制器在物理世界中的位置同步到节点上。\r\n     */\r\n    public set centerWorldPosition (value: Readonly<Vec3>) {\r\n        if (this._isInitialized) this._cct!.setPosition(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the velocity.\r\n     * Note: velocity is only updated after move() is called.\r\n     * @zh\r\n     * 获取速度。\r\n     * 注意：velocity 只会在 move() 调用后更新。\r\n     */\r\n    public get velocity (): Readonly<Vec3> {\r\n        return this._velocity;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets whether the character is on the ground.\r\n     * Note: isGrounded is only updated after move() is called.\r\n     * @zh\r\n     * 获取是否在地面上。\r\n     * 注意：isGrounded 只会在 move() 调用后更新。\r\n     */\r\n    public get isGrounded (): boolean {\r\n        return this._cct!.onGround();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Move the character.\r\n     * @zh\r\n     * 移动角色控制器。\r\n     * @param movement @zh 移动向量 @en The movement vector\r\n     */\r\n    public move (movement: Vec3): void {\r\n        if (!this._isInitialized) { return; }\r\n\r\n        this._prevPos.set(this.centerWorldPosition);\r\n\r\n        const elapsedTime = PhysicsSystem.instance.fixedTimeStep;\r\n        this._cct!.move(movement, this._minMoveDistance, elapsedTime);\r\n\r\n        this._currentPos.set(this.centerWorldPosition);\r\n        this._velocity = this._currentPos.subtract(this._prevPos).multiplyScalar(1.0 / elapsedTime);\r\n\r\n        this._cct!.syncPhysicsToScene();\r\n    }\r\n\r\n    /// EVENT INTERFACE ///\r\n    /**\r\n     * @en\r\n     * Registers callbacks associated with triggered or collision events.\r\n     * @zh\r\n     * 注册触发或碰撞事件相关的回调。\r\n     * @param type - The event type, onControllerColliderHit;\r\n     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.\r\n     * @param target - The event callback target.\r\n     */\r\n    public on<TFunction extends Callback> (\r\n        type: CharacterTriggerEventType | CharacterCollisionEventType,\r\n        callback: TFunction,\r\n        target?,\r\n        once?: boolean,\r\n    ): any {\r\n        const ret = super.on(type, callback, target, once);\r\n        this._updateNeedEvent(type);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Unregisters callbacks associated with trigger or collision events that have been registered.\r\n     * @zh\r\n     * 取消已经注册的触发或碰撞事件相关的回调。\r\n     * @param type - The event type, onControllerColliderHit;\r\n     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.\r\n     * @param target - The event callback target.\r\n     */\r\n    public off (type: CharacterTriggerEventType | CharacterCollisionEventType, callback?: Callback, target?): void {\r\n        super.off(type, callback, target);\r\n        this._updateNeedEvent();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Registers a callback associated with a trigger or collision event, which is automatically unregistered once executed.\r\n     * @zh\r\n     * 注册触发或碰撞事件相关的回调，执行一次后会自动取消注册。\r\n     * @param type - The event type, onControllerColliderHit;\r\n     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.\r\n     * @param target - The event callback target.\r\n     */\r\n    public once<TFunction extends Callback> (\r\n        type: CharacterTriggerEventType | CharacterCollisionEventType,\r\n        callback: TFunction,\r\n        target?,\r\n    ): any {\r\n        // TODO: callback invoker now is a entity, after `once` will not calling the upper `off`.\r\n        const ret = super.once(type, callback, target);\r\n        this._updateNeedEvent(type);\r\n        return ret;\r\n    }\r\n\r\n    /// GROUP MASK ///\r\n\r\n    /**\r\n     * @en\r\n     * Gets the group value.\r\n     * @zh\r\n     * 获取分组值。\r\n     * @returns @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public getGroup (): number {\r\n        if (this._isInitialized) return this._cct!.getGroup();\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the group value.\r\n     * @zh\r\n     * 设置分组值。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public setGroup (v: number): void {\r\n        if (this._isInitialized) this._cct!.setGroup(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add a grouping value to fill in the group you want to join.\r\n     * @zh\r\n     * 添加分组值，可填要加入的 group。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public addGroup (v: number): void {\r\n        if (this._isInitialized) this._cct!.addGroup(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Subtract the grouping value to fill in the group to be removed.\r\n     * @zh\r\n     * 减去分组值，可填要移除的 group。\r\n     * @param v @zh 分组值，为 32 位整数，范围为 [2^0, 2^31] @en Group value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public removeGroup (v: number): void {\r\n        if (this._isInitialized) this._cct!.removeGroup(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the mask value.\r\n     * @zh\r\n     * 获取掩码值。\r\n     * @returns {number} @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public getMask (): number {\r\n        if (this._isInitialized) return this._cct!.getMask();\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the mask value.\r\n     * @zh\r\n     * 设置掩码值。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public setMask (v: number): void {\r\n        if (this._isInitialized) this._cct!.setMask(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add mask values to fill in groups that need to be checked.\r\n     * @zh\r\n     * 添加掩码值，可填入需要检查的 group。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public addMask (v: number): void {\r\n        if (this._isInitialized) this._cct!.addMask(v);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Subtract the mask value to fill in the group that does not need to be checked.\r\n     * @zh\r\n     * 减去掩码值，可填入不需要检查的 group。\r\n     * @param v @zh 掩码值，为 32 位整数，范围为 [2^0, 2^31] @en Mask value which is a 32-bits integer, the range is [2^0, 2^31]\r\n     */\r\n    public removeMask (v: number): void {\r\n        if (this._isInitialized) this._cct!.removeMask(v);\r\n    }\r\n\r\n    public get needCollisionEvent (): boolean {\r\n        return this._needCollisionEvent;\r\n    }\r\n\r\n    public get needTriggerEvent (): boolean {\r\n        return this._needTriggerEvent;\r\n    }\r\n\r\n    private _updateNeedEvent (type?: string): void {\r\n        if (this.isValid) {\r\n            if (type !== undefined) {\r\n                if (type === 'onControllerColliderHit') {\r\n                    this._needCollisionEvent = true;\r\n                }\r\n                if (type === 'onControllerTriggerEnter' || type === 'onControllerTriggerStay' || type === 'onControllerTriggerExit') {\r\n                    this._needTriggerEvent = true;\r\n                }\r\n            } else {\r\n                if (!this.hasEventListener('onControllerColliderHit')) {\r\n                    this._needCollisionEvent = false;\r\n                }\r\n                if (!(this.hasEventListener('onControllerTriggerEnter')\r\n                    || this.hasEventListener('onControllerTriggerStay')\r\n                    || this.hasEventListener('onControllerTriggerExit'))) {\r\n                    this._needTriggerEvent = false;\r\n                }\r\n            }\r\n            if (this._cct) this._cct.updateEventListener();\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass, help, executeInEditMode, menu, executionOrder,\r\n    tooltip, type, serializable } from 'cc.decorator';\r\nimport { Vec3, CCFloat } from '../../../../core';\r\nimport { IBoxCharacterController } from '../../../spec/i-character-controller';\r\nimport { ECharacterControllerType } from '../../physics-enum';\r\nimport { CharacterController } from './character-controller';\r\n\r\nconst v3_0 = new Vec3(0, 0, 0);\r\n\r\n/**\r\n * @en\r\n * Character Controller component.\r\n * @zh\r\n * 角色控制器组件。\r\n */\r\n@ccclass('cc.BoxCharacterController')\r\n@help('i18n:cc.BoxCharacterController')\r\n@menu('Physics/BoxCharacterController')\r\n@executeInEditMode\r\n@executionOrder(-1)\r\nexport class BoxCharacterController extends CharacterController {\r\n    constructor () {\r\n        super(ECharacterControllerType.BOX);\r\n    }\r\n\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n    /**\r\n     * @en\r\n     * Gets or sets the half height of the box shape of the CharacterController in local space.\r\n     * @zh\r\n     * 获取或设置立方体在本地坐标系下的高度的一半。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.boxHalfHeight')\r\n    @type(CCFloat)\r\n    public get halfHeight (): number {\r\n        return this._halfHeight;\r\n    }\r\n\r\n    public set halfHeight (value) {\r\n        if (this._halfHeight === value) return;\r\n        this._halfHeight = Math.abs(value);\r\n        if (this._cct) {\r\n            (this._cct as IBoxCharacterController).setHalfHeight(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the half side extent of box shape of the CharacterController in local space.\r\n     * @zh\r\n     * 获取或设置立方体在本地坐标系下的横向宽度的一半。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.boxHalfSideExtent')\r\n    @type(CCFloat)\r\n    public get halfSideExtent (): number {\r\n        return this._halfSideExtent;\r\n    }\r\n\r\n    public set halfSideExtent (value) {\r\n        if (this._halfSideExtent === value) return;\r\n        this._halfSideExtent = Math.abs(value);\r\n        if (this._cct) {\r\n            (this._cct as IBoxCharacterController).setHalfSideExtent(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the half forward extent of the box on the CharacterController in local space.\r\n     * @zh\r\n     * 获取或设置立方体在本地坐标系下的纵向宽度一半。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.boxHalfForwardExtent')\r\n    @type(CCFloat)\r\n    public get halfForwardExtent (): number {\r\n        return this._halfForwardExtent;\r\n    }\r\n\r\n    public set halfForwardExtent (value) {\r\n        if (this._halfForwardExtent === value) return;\r\n        this._halfForwardExtent = Math.abs(value);\r\n        if (this._cct) {\r\n            (this._cct as IBoxCharacterController).setHalfForwardExtent(value);\r\n        }\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n    @serializable\r\n    private _halfHeight = 0.5;\r\n    @serializable\r\n    private _halfSideExtent = 0.5;\r\n    @serializable\r\n    private _halfForwardExtent = 0.5;\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass, help, executeInEditMode, menu, executionOrder,\r\n    tooltip, type, serializable } from 'cc.decorator';\r\nimport { Vec3, CCFloat } from '../../../../core';\r\nimport { ICapsuleCharacterController } from '../../../spec/i-character-controller';\r\nimport { ECharacterControllerType } from '../../physics-enum';\r\nimport { CharacterController } from './character-controller';\r\n\r\nconst v3_0 = new Vec3(0, 0, 0);\r\n\r\n/**\r\n * @en\r\n * Character Controller component.\r\n * @zh\r\n * 角色控制器组件。\r\n */\r\n@ccclass('cc.CapsuleCharacterController')\r\n@help('i18n:cc.CapsuleCharacterController')\r\n@menu('Physics/CapsuleCharacterController')\r\n@executeInEditMode\r\n@executionOrder(-1)\r\nexport class CapsuleCharacterController extends CharacterController {\r\n    constructor () {\r\n        super(ECharacterControllerType.CAPSULE);\r\n    }\r\n\r\n    /// PUBLIC PROPERTY GETTER\\SETTER ///\r\n    /**\r\n     * @en\r\n     * Gets or sets the radius of the sphere of the capsule shape of the CharacterController in local space.\r\n     * @zh\r\n     * 获取或设置在本地坐标系下的胶囊体球半径。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.capsuleRadius')\r\n    @type(CCFloat)\r\n    public get radius (): number {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius (value) {\r\n        if (this._radius === value) return;\r\n        this._radius = Math.abs(value);\r\n        if (this._cct) {\r\n            (this._cct as ICapsuleCharacterController).setRadius(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the height of the capsule shape of the CharacterController in local space.\r\n     * Height the distance between the two sphere centers at the end of the capsule.\r\n     * @zh\r\n     * 获取或设置在本地坐标系下的胶囊体末端两个球心的距离。\r\n     */\r\n    @tooltip('i18n:physics3d.character_controller.capsuleHeight')\r\n    @type(CCFloat)\r\n    public get height (): number {\r\n        return this._height;\r\n    }\r\n\r\n    public set height (value) {\r\n        if (this._height === value) return;\r\n        this._height = Math.abs(value);\r\n        if (this._cct) {\r\n            (this._cct as ICapsuleCharacterController).setHeight(value);\r\n        }\r\n    }\r\n\r\n    /// PRIVATE PROPERTY ///\r\n    @serializable\r\n    private _radius = 0.5;\r\n    @serializable\r\n    private _height = 1.0;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like, Vec3 } from '../../core';\r\nimport { CharacterController } from './components/character-controllers/character-controller';\r\nimport { Collider } from './components/colliders/collider';\r\n\r\n/**\r\n * @en\r\n * The definition of the triggering event.\r\n * @zh\r\n * 触发事件。\r\n */\r\nexport interface ITriggerEvent {\r\n    /**\r\n     * @en\r\n     * The type of trigger event.\r\n     * @zh\r\n     * 触发的事件类型。\r\n     */\r\n    readonly type: TriggerEventType;\r\n\r\n    /**\r\n     * @en\r\n     * The collider component instance of the event owner.\r\n     * @zh\r\n     * 触发事件中的自己的碰撞器\r\n     */\r\n    readonly selfCollider: Collider;\r\n\r\n    /**\r\n     * @en\r\n     * Trigger another collider in event.\r\n     * @zh\r\n     * 触发事件中的另一个碰撞器\r\n     */\r\n    readonly otherCollider: Collider;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the lowLevel object, through which all the exposed properties can be accessed.\r\n     * @zh\r\n     * 获取实现对象，通过它可以访问到底层暴露的所有属性。\r\n     */\r\n    readonly impl: any\r\n}\r\n\r\n/**\r\n * @en\r\n * The value type definition of the trigger event.\r\n * @zh\r\n * 触发事件的值类型定义。\r\n */\r\nexport type TriggerEventType = 'onTriggerEnter' | 'onTriggerStay' | 'onTriggerExit';\r\n\r\n/**\r\n * @en\r\n * Signature definition of the callback function that triggers the event.\r\n * @zh\r\n * 触发事件的回调函数签名定义。\r\n */\r\nexport type TriggerCallback = (event?: ITriggerEvent) => void;\r\n\r\n/**\r\n * @en\r\n * Collision information for collision events.\r\n * @zh\r\n * 碰撞事件的碰撞信息。\r\n */\r\nexport interface IContactEquation {\r\n    /**\r\n     * @en\r\n     * Gets the lowLevel object, through which all the exposed properties can be accessed.\r\n     * @zh\r\n     * 获取实现对象，通过它可以访问到底层暴露的所有属性。\r\n     */\r\n    readonly impl: any;\r\n\r\n    /**\r\n     * @en\r\n     * Gets whether the rigid body bound to the selfCollider is A.\r\n     * @zh\r\n     * 获取`selfCollider`所绑定的刚体是否为 A 。\r\n     */\r\n    readonly isBodyA: boolean;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact point relative to the rigid body A in the local coordinate system.\r\n     * @zh\r\n     * 获取本地坐标系中相对于刚体 A 的碰撞点。\r\n     * @param out used to storage the output.\r\n     */\r\n    getLocalPointOnA (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact point relative to the rigid body B in the local coordinate system.\r\n     * @zh\r\n     * 获取本地坐标系中相对于刚体 B 的碰撞点。\r\n     * @param out used to storage the output.\r\n     */\r\n    getLocalPointOnB (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact point relative to the rigid body A in the world coordinate system.\r\n     * @zh\r\n     * 获取世界坐标系中相对于刚体 A 的碰撞点。\r\n     * @param out used to storage the output.\r\n     */\r\n    getWorldPointOnA (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact point relative to the rigid body B in the world coordinate system.\r\n     * @zh\r\n     * 获取世界坐标系中相对于刚体 B 的碰撞点。\r\n     * @param out used to storage the output.\r\n     */\r\n    getWorldPointOnB (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact normal relative to the rigid body A in the local coordinate system.\r\n     * @zh\r\n     * 获取本地坐标系中相对于刚体 A 的碰撞法线。\r\n     * @param out used to storage the output.\r\n     */\r\n    getLocalNormalOnA (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact normal relative to the rigid body B in the local coordinate system.\r\n     * @zh\r\n     * 获取本地坐标系中相对于刚体 B 的碰撞法线。\r\n     * @param out used to storage the output.\r\n     */\r\n    getLocalNormalOnB (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact normal relative to the rigid body A in the world coordinate system.\r\n     * @zh\r\n     * 获取世界坐标系中相对于刚体 A 的碰撞法线。\r\n     * @param out used to storage the output.\r\n     */\r\n    getWorldNormalOnA (out: IVec3Like): void;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the contact normal relative to the rigid body B in the world coordinate system.\r\n     * @zh\r\n     * 获取世界坐标系中相对于刚体 B 的碰撞法线。\r\n     * @param out used to storage the output.\r\n     */\r\n    getWorldNormalOnB (out: IVec3Like): void;\r\n}\r\n\r\n/**\r\n * @en\r\n * The definition of the collision event.\r\n * @zh\r\n * 碰撞事件。\r\n */\r\nexport interface ICollisionEvent {\r\n    /**\r\n     * @en\r\n     * The type of collision event.\r\n     * @zh\r\n     * 碰撞的事件类型。\r\n     */\r\n    readonly type: CollisionEventType;\r\n\r\n    /**\r\n     * @en\r\n     * The collider component instance of the event owner.\r\n     * @zh\r\n     * 碰撞中的自己的碰撞器。\r\n     */\r\n    readonly selfCollider: Collider;\r\n\r\n    /**\r\n     * @en\r\n     * Another collider in collision.\r\n     * @zh\r\n     * 碰撞中的另一个碰撞器。\r\n     */\r\n    readonly otherCollider: Collider;\r\n\r\n    /**\r\n     * @en\r\n     * Information about all points of impact in a collision event.\r\n     * @zh\r\n     * 碰撞中的所有碰撞点的信息。\r\n     */\r\n    readonly contacts: IContactEquation[];\r\n\r\n    /**\r\n     * @en\r\n     * Gets the lowLevel object, through which all the exposed properties can be accessed.\r\n     * @zh\r\n     * 获取实现对象，通过它可以访问到底层暴露的所有属性。\r\n     */\r\n    readonly impl: any;\r\n}\r\n\r\n/**\r\n * @en\r\n * Value type definitions for collision events.\r\n * @zh\r\n * 碰撞事件的值类型定义。\r\n */\r\nexport type CollisionEventType = 'onCollisionEnter' | 'onCollisionStay' | 'onCollisionExit';\r\n\r\n/**\r\n * @en\r\n * Callback function signature definition for collision events.\r\n * @zh\r\n * 碰撞事件的回调函数签名定义。\r\n */\r\nexport type CollisionCallback = (event?: ICollisionEvent) => void;\r\n\r\n/**\r\n * @en\r\n * The definition of the trigger event of the character controller.\r\n * @zh\r\n * 角色控制器触发事件的值类型定义。\r\n */\r\nexport type CharacterTriggerEventType = 'onControllerTriggerEnter' | 'onControllerTriggerStay' | 'onControllerTriggerExit';\r\n\r\n/**\r\n * @en\r\n * Value type definitions fot the collision events of character controller.\r\n * @zh\r\n * 角色控制器碰撞事件的值类型定义。\r\n */\r\nexport type CharacterCollisionEventType = 'onControllerColliderHit';\r\n\r\n/**\r\n * @en\r\n * Contact information of the collision event of character controller.\r\n * @zh\r\n * 角色控制器碰撞事件的碰撞信息。\r\n */\r\nexport class CharacterControllerContact {\r\n    /**\r\n     * @en\r\n     * Character Controller in collision.\r\n     * @zh\r\n     * 碰撞中的角色控制器。\r\n     */\r\n    declare controller: CharacterController;\r\n\r\n    /**\r\n     * @en\r\n     * Collider in collision.\r\n     * @zh\r\n     * 碰撞中的碰撞器。\r\n     */\r\n    declare collider: Collider;\r\n\r\n    /**\r\n     * @en\r\n     * The contact point in the world coordinate system.\r\n     * @zh\r\n     * 世界坐标系中的碰撞点。\r\n     */\r\n    worldPosition: Vec3 = new Vec3();\r\n\r\n    /**\r\n     * @en\r\n     * The contact normal in the world coordinate system.\r\n     * @zh\r\n     * 世界坐标系中的碰撞法线。\r\n     */\r\n    worldNormal: Vec3 = new Vec3();\r\n\r\n    /**\r\n     * @en\r\n     * Motion direction.\r\n     * @zh\r\n     * 移动方向。\r\n     */\r\n    motionDirection: Vec3 = new Vec3();\r\n\r\n    /**\r\n     * @en\r\n     * Motion length.\r\n     * @zh\r\n     * 移动长度。\r\n     */\r\n    motionLength = 0;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PhysicsSystem } from './physics-system';\r\nimport { PhysicsMaterial } from './assets/physics-material';\r\nimport { PhysicsRayResult, PhysicsLineStripCastResult } from './physics-ray-result';\r\nimport { BoxCollider } from './components/colliders/box-collider';\r\nimport { Collider } from './components/colliders/collider';\r\nimport { SphereCollider } from './components/colliders/sphere-collider';\r\nimport { CapsuleCollider } from './components/colliders/capsule-collider';\r\nimport { CylinderCollider } from './components/colliders/cylinder-collider';\r\nimport { ConeCollider } from './components/colliders/cone-collider';\r\nimport { MeshCollider } from './components/colliders/mesh-collider';\r\nimport { RigidBody } from './components/rigid-body';\r\nimport { ConstantForce } from './components/constant-force';\r\nimport { TerrainCollider } from './components/colliders/terrain-collider';\r\nimport { SimplexCollider } from './components/colliders/simplex-collider';\r\nimport { PlaneCollider } from './components/colliders/plane-collider';\r\n\r\n// constraints\r\nimport { Constraint } from './components/constraints/constraint';\r\nimport { HingeConstraint } from './components/constraints/hinge-constraint';\r\nimport { FixedConstraint } from './components/constraints/fixed-constraint';\r\nimport { ConfigurableConstraint } from './components/constraints/configurable-constraint';\r\n\r\nimport { PointToPointConstraint } from './components/constraints/point-to-point-constraint';\r\n\r\nimport { CharacterController } from './components/character-controllers/character-controller';\r\nimport { BoxCharacterController } from './components/character-controllers/box-character-controller';\r\nimport { CapsuleCharacterController } from './components/character-controllers/capsule-character-controller';\r\n\r\nimport { cclegacy } from '../../core';\r\nimport { selector } from './physics-selector';\r\nimport * as utils from '../utils/util';\r\n\r\nexport {\r\n    PhysicsSystem,\r\n    PhysicsRayResult,\r\n    PhysicsLineStripCastResult,\r\n\r\n    Collider,\r\n    BoxCollider,\r\n    SphereCollider,\r\n    CapsuleCollider,\r\n    MeshCollider,\r\n    CylinderCollider,\r\n    ConeCollider,\r\n    TerrainCollider,\r\n    SimplexCollider,\r\n    PlaneCollider,\r\n\r\n    Constraint,\r\n    HingeConstraint,\r\n    FixedConstraint,\r\n    PointToPointConstraint,\r\n    ConfigurableConstraint,\r\n\r\n    RigidBody,\r\n    PhysicsMaterial,\r\n    ConstantForce,\r\n\r\n    CharacterController,\r\n    BoxCharacterController,\r\n    CapsuleCharacterController,\r\n\r\n    selector,\r\n    utils,\r\n};\r\n\r\ncclegacy.PhysicsSystem = PhysicsSystem;\r\n\r\ncclegacy.PhysicsMaterial = PhysicsMaterial;\r\ncclegacy.PhysicsRayResult = PhysicsRayResult;\r\ncclegacy.ConstantForce = ConstantForce;\r\n\r\nexport * from './physics-interface';\r\nexport * from './physics-config';\r\nexport * from './physics-enum';\r\n"],"names":["worldInitData","PhysicsMaterial","ccclass","type","CCFloat","_dec3","_dec4","_dec","_class3","_Asset","_this","call","this","id","_friction","_initializer","_rollingFriction","_initializer2","_spinningFriction","_initializer3","_restitution","_initializer4","allMaterials","push","_assertThisInitialized","_idCounter","_uuid","_inheritsLoose","_proto","prototype","clone","c","destroy","idx","indexOf","splice","setValues","friction","rollingFriction","spinningFriction","restitution","emitUpdate","emit","EVENT_UPDATE","_createClass","key","get","set","value","math","Asset","_class2","serializable","_applyDecoratedInitializer","_class","PhysicsRayResult","_hitPoint","Vec3","_hitNormal","_distance","_collider","_closestHitFraction","_assign","hitPoint","distance","collider","hitNormal","closestHitFraction","copy","PhysicsLineStripCastResult","exports","_PhysicsRayResult","_len","arguments","length","args","Array","_key","apply","concat","_id","_proto2","updateLegacyMacro","cclegacy","_global","CC_PHYSICS_BUILTIN","CC_PHYSICS_CANNON","CC_PHYSICS_AMMO","selector","switchTo","runInEditor","mutableSelector","physicsWorld","backend","log","wrapper","createPhysicsWorld","world","setGravity","gravity","setAllowSleep","allowSleep","register","EDITOR","constructDefaultWorld","data","ECheckType","FUNC","ENTIRE_WORLD","impl","debugDrawFlags","debugDrawConstraintSize","setDefaultMaterial","step","syncAfterEvents","syncSceneToPhysics","raycast","raycastClosest","sweepBox","sweepBoxClosest","sweepSphere","sweepSphereClosest","sweepCapsule","sweepCapsuleClosest","emitEvents","check","obj","warn","errorID","PhysicsWorld","World","ENTIRE_RIGID_BODY","rigidBody","isAwake","isSleepy","isSleeping","initialize","onEnable","onDisable","onDestroy","setType","setMass","setLinearDamping","setAngularDamping","useGravity","setLinearFactor","setAngularFactor","wakeUp","sleep","clearState","clearForces","clearVelocity","setSleepThreshold","getSleepThreshold","getLinearVelocity","setLinearVelocity","getAngularVelocity","setAngularVelocity","applyForce","applyLocalForce","applyImpulse","applyLocalImpulse","applyTorque","applyLocalTorque","setGroup","getGroup","addGroup","removeGroup","setMask","getMask","addMask","removeMask","isUsingCCD","useCCD","CREATE_COLLIDER_PROXY","INITED","ENTIRE_SHAPE","attachedRigidBody","onLoad","setMaterial","setAsTrigger","setCenter","getAABB","getBoundingSphere","updateSize","updateRadius","setRadius","setCylinderHeight","setDirection","setHeight","setShapeType","setVertices","setMesh","setTerrain","setNormal","setConstant","updateEventListener","createShape","EColliderType","BOX","BoxShape","BoxCollider","SPHERE","SphereShape","SphereCollider","CAPSULE","CapsuleShape","CapsuleCollider","CYLINDER","CylinderShape","CylinderCollider","CONE","ConeShape","ConeCollider","MESH","TrimeshShape","MeshCollider","TERRAIN","TerrainShape","TerrainCollider","SIMPLEX","SimplexShape","SimplexCollider","PLANE","PlaneShape","PlaneCollider","CREATE_CONSTRAINT_PROXY","ENTIRE_CONSTRAINT","setEnableCollision","setConnectedBody","setPivotA","setPivotB","setAxis","setSecondaryAxis","setBreakForce","setBreakTorque","setConstraintMode","setLinearLimit","setAngularExtent","setLinearSoftConstraint","setLinearStiffness","setLinearRestitution","setSwingSoftConstraint","setTwistSoftConstraint","setSwingStiffness","setSwingDamping","setSwingRestitution","setTwistStiffness","setTwistDamping","setTwistRestitution","setDriverMode","setLinearMotorTarget","setLinearMotorVelocity","setLinearMotorForceLimit","setAngularMotorTarget","setAngularMotorVelocity","setAngularMotorForceLimit","setAutoPivotB","setLimitEnabled","setLowerLimit","setUpperLimit","setMotorEnabled","setMotorVelocity","setMotorForceLimit","createConstraint","EConstraintType","POINT_TO_POINT","PointToPointConstraint","HINGE","HingeConstraint","FIXED","FixedConstraint","CONFIGURABLE","ConfigurableConstraint","CREATE_CHARACTER_CONTROLLER_PROXY","ENTIRE_CHARACTER_CONTROLLER","onGround","getPosition","setPosition","setStepOffset","setSlopeLimit","setContactOffset","setDetectCollisions","setOverlapRecovery","move","syncPhysicsToScene","setHalfHeight","setHalfSideExtent","setHalfForwardExtent","createCharacterController","ECharacterControllerType","BoxCharacterController","CapsuleCharacterController","internal","PhysicsGroup","querySettings","settings","bind","PhysicsSystem","_System","raycastClosestResult","raycastResults","lineStripCastClosestResult","lineStripCastResults","sweepCastClosestResult","sweepCastResults","collisionMatrix","CollisionMatrix","minVolumeSize","useNodeChains","_enable","_allowSleep","_maxSubSteps","_subStepCount","_fixedTimeStep","_autoSimulation","_accumulator","_sleepThreshold","_gravity","_material","raycastOptions","group","mask","queryTrigger","maxDistance","raycastResultPool","RecyclePool","sweepResultPool","setDefaultPhysicsMaterial","material","on","_updateMaterial","initDefaultMaterial","_this2","Promise","resolve","builtinMaterial","builtinResMgr","userMaterial","SettingsCategory","PHYSICS","reject","assetManager","loadAny","err","asset","then","reason","warnID","postUpdate","deltaTime","director","DirectorEvent","BEFORE_PHYSICS","AFTER_PHYSICS","resetConfiguration","config","fixedTimeStep","maxSubSteps","sleepThreshold","autoSimulation","i","parseInt","collisionGroups","forEach","v","name","index","Enum","update","resetAccumulator","time","worldRay","reset","lineStripCast","samplePointsWorldSpace","geometry","fromPoint","toPoint","direction","subtract","stepLength","len","multiplyScalar","d","o","re","result","equals","copiedResult","lineStripCastClosest","hit","halfExtent","orientation","radius","height","constructAndRegister","_instance","sys","doConstructAndRegister","game","onPostProjectInitDelegate","add","constructAndRegisterManually","_querySettings","registerSystem","ID","priority","System","once","INIT","RigidBody","executionOrder","ERigidBodyType","disallowMultiple","_dec2","_Component","_body","_group","_type","_mass","_linearDamping","_initializer5","_angularDamping","_initializer6","_useGravity","_initializer7","_linearFactor","_initializer8","_angularFactor","_initializer9","force","relativePoint","_isInitialized","localPoint","impulse","torque","out","Number","isInteger","Math","log2","STATIC","isStatic","DYNAMIC","isDynamic","KINEMATIC","isKinematic","r","error","Component","Type","DEFAULT","Collider","_Eventify","_shape","_aabb","_boundingSphere","_isSharedMaterial","_needTriggerEvent","_needCollisionEvent","_isTrigger","_center","callback","target","ret","_updateNeedEvent","off","removeAll","typeOrTarget","sharedMaterial","isValid","undefined","hasEventListener","node","rb","getComponent","Eventify","Axis","EAxisDirection","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor","_dec5","_Collider","_size","strictEquals","absolute","shape","_radius","abs","_cylinderHeight","_direction","_getRadiusScale","ws","worldScale","Y_AXIS","absMax","x","z","X_AXIS","y","_getHeightScale","floor","Z_AXIS","ch","cylinderHeight","_height","Mesh","_mesh","_convex","body","convex","ConstantForce","requireComponent","_rigidBody","_force","_localForce","_torque","_localTorque","_mask","_maskUpdate","lateUpdate","localForce","t","m","ZERO","TerrainAsset","_terrain","ESimplexType","_shapeType","_vertices","updateVertices","TETRAHEDRON","_normal","_constant","Constraint","TYPE","_enableCollision","_connectedBody","_constraint","HingeLimitData","formerlySerializedAs","CCBoolean","_dec6","_dec7","_enabled","_upperLimit","_lowerLimit","MAX_VALUE","HingeMotorData","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_class5","_motorVelocity","_motorForceLimit","_class4","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_class8","_Constraint","_axis","_pivotA","_pivotB","_limitData","_initializer10","_motorData","_initializer11","constraint","enabled","upperLimit","lowerLimit","motorVelocity","motorForceLimit","_class7","_breakForce","_breakTorque","LinearLimitSettings","EConstraintMode","configurableConstraint","_xMotion","_yMotion","_zMotion","_upper","_lower","_enableSoftConstraint","_bounciness","_stiffness","_damping","_impl","lower","upper","FREE","AngularLimitSettings","_swing1Motion","_swing2Motion","_twistMotion","_initializer12","_twistExtent","_initializer13","_swingExtent1","_initializer14","_swingExtent2","_initializer15","_enableSoftConstraintSwing","_initializer16","_swingBounciness","_initializer17","_swingStiffness","_initializer18","_swingDamping","_initializer19","_enableSoftConstraintTwist","_initializer20","_twistBounciness","_initializer21","_twistStiffness","_initializer22","_twistDamping","_initializer23","swingExtent1","swingExtent2","twistExtent","LinearDriverSettings","EDriverMode","_dec30","_dec31","_dec32","_target","_initializer24","_velocity","_initializer25","_xDrive","_initializer26","_yDrive","_initializer27","_zDrive","_initializer28","_strength","_initializer29","DISABLED","AngularDriverSettings","_dec33","_dec34","_dec35","_dec36","_dec37","_dec38","_dec39","_class11","_swingDrive1","_initializer30","_swingDrive2","_initializer31","_twistDrive","_initializer32","_targetOrientation","_initializer33","_targetVelocity","_initializer34","_initializer35","_class10","_dec47","_dec48","_dec49","_dec50","_dec40","_class14","_initializer36","_initializer37","_linearLimitSettings","_initializer38","_angularLimitSettings","_initializer39","_linearDriverSettings","_initializer40","_angularDriverSettings","_initializer41","_initializer42","_initializer43","_autoPivotB","_initializer44","_initializer45","_secondaryAxis","_initializer46","linearLimitSettings","angularLimitSettings","linearDriverSettings","angularDriverSettings","xMotion","yMotion","zMotion","enableSoftConstraint","damping","stiffness","twistMotion","swingMotion1","swingMotion2","twistRestitution","swingRestitution","enableSoftConstraintTwist","enableSoftConstraintSwing","twistDamping","swingDamping","twistStiffness","swingStiffness","xDrive","yDrive","zDrive","targetPosition","targetVelocity","strength","twistDrive","swingDrive1","swingDrive2","targetOrientation","_dec53","_class13","CharacterController","_cct","_minMoveDistance","_stepOffset","_slopeLimit","_skinWidth","_initialized","_prevPos","_currentPos","_centerWorldPosition","movement","centerWorldPosition","elapsedTime","instance","max","_CharacterController","_halfHeight","_halfSideExtent","_halfForwardExtent","CharacterControllerContact","worldPosition","worldNormal","motionDirection","motionLength"],"mappings":"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"}