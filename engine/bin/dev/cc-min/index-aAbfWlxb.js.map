{"version":3,"file":"index-aAbfWlxb.js","sources":["../../../cocos/rendering/custom/types.ts","../../../cocos/rendering/custom/define.ts","../../../cocos/rendering/custom/graph.ts","../../../cocos/rendering/custom/render-graph.ts","../../../cocos/rendering/custom/pipeline.ts","../../../cocos/rendering/custom/serialization.ts","../../../cocos/rendering/custom/layout-graph.ts","../../../cocos/rendering/custom/effect.ts","../../../cocos/rendering/custom/utils.ts","../../../cocos/rendering/custom/web-pipeline-types.ts","../../../cocos/rendering/custom/layout-graph-utils.ts","../../../cocos/rendering/custom/scene-culling.ts","../../../cocos/rendering/custom/executor.ts","../../../cocos/rendering/custom/web-pipeline.ts","../../../cocos/rendering/custom/compiler.ts","../../../cocos/rendering/custom/binary-archive.ts","../../../cocos/rendering/custom/web-types.ts","../../../cocos/rendering/custom/web-program-library.ts","../../../cocos/rendering/custom/framework.ts","../../../cocos/rendering/custom/index.ts"],"sourcesContent":["/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport { ResolveMode } from '../../gfx';\r\nimport type { ReflectionProbe } from '../../render-scene/scene/reflection-probe';\r\nimport type { Light } from '../../render-scene/scene';\r\nimport { RecyclePool } from '../../core/memop';\r\nimport type { OutputArchive, InputArchive } from './archive';\r\nimport { saveUniformBlock, loadUniformBlock } from './serialization';\r\n\r\nexport enum UpdateFrequency {\r\n    PER_INSTANCE,\r\n    PER_BATCH,\r\n    PER_PHASE,\r\n    PER_PASS,\r\n    COUNT,\r\n}\r\n\r\nexport const enum ParameterType {\r\n    CONSTANTS,\r\n    CBV,\r\n    UAV,\r\n    SRV,\r\n    TABLE,\r\n    SSV,\r\n}\r\n\r\nexport enum ResourceResidency {\r\n    MANAGED,\r\n    MEMORYLESS,\r\n    PERSISTENT,\r\n    EXTERNAL,\r\n    BACKBUFFER,\r\n}\r\n\r\nexport enum QueueHint {\r\n    NONE,\r\n    OPAQUE,\r\n    MASK,\r\n    BLEND,\r\n    RENDER_OPAQUE = OPAQUE,\r\n    RENDER_CUTOUT = MASK,\r\n    RENDER_TRANSPARENT = BLEND,\r\n}\r\n\r\nexport enum ResourceDimension {\r\n    BUFFER,\r\n    TEXTURE1D,\r\n    TEXTURE2D,\r\n    TEXTURE3D,\r\n}\r\n\r\nexport enum ResourceFlags {\r\n    NONE = 0,\r\n    UNIFORM = 0x1,\r\n    INDIRECT = 0x2,\r\n    STORAGE = 0x4,\r\n    SAMPLED = 0x8,\r\n    COLOR_ATTACHMENT = 0x10,\r\n    DEPTH_STENCIL_ATTACHMENT = 0x20,\r\n    INPUT_ATTACHMENT = 0x40,\r\n    SHADING_RATE = 0x80,\r\n    TRANSFER_SRC = 0x100,\r\n    TRANSFER_DST = 0x200,\r\n}\r\n\r\nexport const enum TaskType {\r\n    SYNC,\r\n    ASYNC,\r\n}\r\n\r\nexport enum SceneFlags {\r\n    NONE = 0,\r\n    OPAQUE = 0x1,\r\n    MASK = 0x2,\r\n    BLEND = 0x4,\r\n    /**\r\n     * @deprecated Please use OPAQUE.\r\n     */\r\n    OPAQUE_OBJECT = OPAQUE,\r\n    /**\r\n     * @deprecated Please use MASK.\r\n     */\r\n    CUTOUT_OBJECT = MASK,\r\n    /**\r\n     * @deprecated Please use BLEND.\r\n     */\r\n    TRANSPARENT_OBJECT = BLEND,\r\n    SHADOW_CASTER = 0x8,\r\n    /**\r\n     * @deprecated Please add 2D node in the render graph.\r\n     */\r\n    UI = 0x10,\r\n    DEFAULT_LIGHTING = 0x20,\r\n    VOLUMETRIC_LIGHTING = 0x40,\r\n    CLUSTERED_LIGHTING = 0x80,\r\n    PLANAR_SHADOW = 0x100,\r\n    GEOMETRY = 0x200,\r\n    /**\r\n     * @deprecated Please add profiler node in the render graph.\r\n     */\r\n    PROFILER = 0x400,\r\n    DRAW_INSTANCING = 0x800,\r\n    DRAW_NON_INSTANCING = 0x1000,\r\n    REFLECTION_PROBE = 0x2000,\r\n    GPU_DRIVEN = 0x4000,\r\n    NON_BUILTIN = 0x8000,\r\n    ALL = 0xFFFFFFFF,\r\n}\r\n\r\nexport const enum LightingMode {\r\n    NONE,\r\n    DEFAULT,\r\n    CLUSTERED,\r\n}\r\n\r\nexport const enum AttachmentType {\r\n    RENDER_TARGET,\r\n    DEPTH_STENCIL,\r\n    SHADING_RATE,\r\n}\r\n\r\nexport enum AccessType {\r\n    READ,\r\n    READ_WRITE,\r\n    WRITE,\r\n}\r\n\r\nexport const enum ClearValueType {\r\n    NONE,\r\n    FLOAT_TYPE,\r\n    INT_TYPE,\r\n}\r\n\r\nexport class LightInfo {\r\n    constructor (light: Light | null = null, level = 0, culledByLight = false, probe: ReflectionProbe | null = null) {\r\n        this.light = light;\r\n        this.probe = probe;\r\n        this.level = level;\r\n        this.culledByLight = culledByLight;\r\n    }\r\n    reset (light: Light | null, level: number, culledByLight: boolean, probe: ReflectionProbe | null): void {\r\n        this.light = light;\r\n        this.probe = probe;\r\n        this.level = level;\r\n        this.culledByLight = culledByLight;\r\n    }\r\n    declare /*refcount*/ light: Light | null;\r\n    declare /*pointer*/ probe: ReflectionProbe | null;\r\n    declare level: number;\r\n    declare culledByLight: boolean;\r\n}\r\n\r\nexport const enum ResolveFlags {\r\n    NONE = 0,\r\n    COLOR = 1 << 0,\r\n    DEPTH = 1 << 1,\r\n    STENCIL = 1 << 2,\r\n}\r\n\r\nexport class ResolvePair {\r\n    constructor (\r\n        source = '',\r\n        target = '',\r\n        resolveFlags: ResolveFlags = ResolveFlags.NONE,\r\n        mode: ResolveMode = ResolveMode.SAMPLE_ZERO,\r\n        mode1: ResolveMode = ResolveMode.SAMPLE_ZERO,\r\n    ) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.resolveFlags = resolveFlags;\r\n        this.mode = mode;\r\n        this.mode1 = mode1;\r\n    }\r\n    reset (\r\n        source: string,\r\n        target: string,\r\n        resolveFlags: ResolveFlags,\r\n        mode: ResolveMode,\r\n        mode1: ResolveMode,\r\n    ): void {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.resolveFlags = resolveFlags;\r\n        this.mode = mode;\r\n        this.mode1 = mode1;\r\n    }\r\n    declare source: string;\r\n    declare target: string;\r\n    declare resolveFlags: ResolveFlags;\r\n    declare mode: ResolveMode;\r\n    declare mode1: ResolveMode;\r\n}\r\n\r\nexport class CopyPair {\r\n    constructor (\r\n        source = '',\r\n        target = '',\r\n        mipLevels = 0xFFFFFFFF,\r\n        numSlices = 0xFFFFFFFF,\r\n        sourceMostDetailedMip = 0,\r\n        sourceFirstSlice = 0,\r\n        sourcePlaneSlice = 0,\r\n        targetMostDetailedMip = 0,\r\n        targetFirstSlice = 0,\r\n        targetPlaneSlice = 0,\r\n    ) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.mipLevels = mipLevels;\r\n        this.numSlices = numSlices;\r\n        this.sourceMostDetailedMip = sourceMostDetailedMip;\r\n        this.sourceFirstSlice = sourceFirstSlice;\r\n        this.sourcePlaneSlice = sourcePlaneSlice;\r\n        this.targetMostDetailedMip = targetMostDetailedMip;\r\n        this.targetFirstSlice = targetFirstSlice;\r\n        this.targetPlaneSlice = targetPlaneSlice;\r\n    }\r\n    reset (\r\n        source: string,\r\n        target: string,\r\n        mipLevels: number,\r\n        numSlices: number,\r\n        sourceMostDetailedMip: number,\r\n        sourceFirstSlice: number,\r\n        sourcePlaneSlice: number,\r\n        targetMostDetailedMip: number,\r\n        targetFirstSlice: number,\r\n        targetPlaneSlice: number,\r\n    ): void {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.mipLevels = mipLevels;\r\n        this.numSlices = numSlices;\r\n        this.sourceMostDetailedMip = sourceMostDetailedMip;\r\n        this.sourceFirstSlice = sourceFirstSlice;\r\n        this.sourcePlaneSlice = sourcePlaneSlice;\r\n        this.targetMostDetailedMip = targetMostDetailedMip;\r\n        this.targetFirstSlice = targetFirstSlice;\r\n        this.targetPlaneSlice = targetPlaneSlice;\r\n    }\r\n    declare source: string;\r\n    declare target: string;\r\n    declare mipLevels: number;\r\n    declare numSlices: number;\r\n    declare sourceMostDetailedMip: number;\r\n    declare sourceFirstSlice: number;\r\n    declare sourcePlaneSlice: number;\r\n    declare targetMostDetailedMip: number;\r\n    declare targetFirstSlice: number;\r\n    declare targetPlaneSlice: number;\r\n}\r\n\r\nexport class UploadPair {\r\n    constructor (\r\n        source: Uint8Array = new Uint8Array(0),\r\n        target = '',\r\n        mipLevels = 0xFFFFFFFF,\r\n        numSlices = 0xFFFFFFFF,\r\n        targetMostDetailedMip = 0,\r\n        targetFirstSlice = 0,\r\n        targetPlaneSlice = 0,\r\n    ) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.mipLevels = mipLevels;\r\n        this.numSlices = numSlices;\r\n        this.targetMostDetailedMip = targetMostDetailedMip;\r\n        this.targetFirstSlice = targetFirstSlice;\r\n        this.targetPlaneSlice = targetPlaneSlice;\r\n    }\r\n    reset (\r\n        target: string,\r\n        mipLevels: number,\r\n        numSlices: number,\r\n        targetMostDetailedMip: number,\r\n        targetFirstSlice: number,\r\n        targetPlaneSlice: number,\r\n    ): void {\r\n        // source: Uint8Array size unchanged\r\n        this.target = target;\r\n        this.mipLevels = mipLevels;\r\n        this.numSlices = numSlices;\r\n        this.targetMostDetailedMip = targetMostDetailedMip;\r\n        this.targetFirstSlice = targetFirstSlice;\r\n        this.targetPlaneSlice = targetPlaneSlice;\r\n    }\r\n    declare readonly source: Uint8Array;\r\n    declare target: string;\r\n    declare mipLevels: number;\r\n    declare numSlices: number;\r\n    declare targetMostDetailedMip: number;\r\n    declare targetFirstSlice: number;\r\n    declare targetPlaneSlice: number;\r\n}\r\n\r\nexport class MovePair {\r\n    constructor (\r\n        source = '',\r\n        target = '',\r\n        mipLevels = 0xFFFFFFFF,\r\n        numSlices = 0xFFFFFFFF,\r\n        targetMostDetailedMip = 0,\r\n        targetFirstSlice = 0,\r\n        targetPlaneSlice = 0,\r\n    ) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.mipLevels = mipLevels;\r\n        this.numSlices = numSlices;\r\n        this.targetMostDetailedMip = targetMostDetailedMip;\r\n        this.targetFirstSlice = targetFirstSlice;\r\n        this.targetPlaneSlice = targetPlaneSlice;\r\n    }\r\n    reset (\r\n        source: string,\r\n        target: string,\r\n        mipLevels: number,\r\n        numSlices: number,\r\n        targetMostDetailedMip: number,\r\n        targetFirstSlice: number,\r\n        targetPlaneSlice: number,\r\n    ): void {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.mipLevels = mipLevels;\r\n        this.numSlices = numSlices;\r\n        this.targetMostDetailedMip = targetMostDetailedMip;\r\n        this.targetFirstSlice = targetFirstSlice;\r\n        this.targetPlaneSlice = targetPlaneSlice;\r\n    }\r\n    declare source: string;\r\n    declare target: string;\r\n    declare mipLevels: number;\r\n    declare numSlices: number;\r\n    declare targetMostDetailedMip: number;\r\n    declare targetFirstSlice: number;\r\n    declare targetPlaneSlice: number;\r\n}\r\n\r\nexport class PipelineStatistics {\r\n    reset (): void {\r\n        this.numRenderPasses = 0;\r\n        this.numManagedTextures = 0;\r\n        this.totalManagedTextures = 0;\r\n        this.numUploadBuffers = 0;\r\n        this.numUploadBufferViews = 0;\r\n        this.numFreeUploadBuffers = 0;\r\n        this.numFreeUploadBufferViews = 0;\r\n        this.numDescriptorSets = 0;\r\n        this.numFreeDescriptorSets = 0;\r\n        this.numInstancingBuffers = 0;\r\n        this.numInstancingUniformBlocks = 0;\r\n    }\r\n    numRenderPasses = 0;\r\n    numManagedTextures = 0;\r\n    totalManagedTextures = 0;\r\n    numUploadBuffers = 0;\r\n    numUploadBufferViews = 0;\r\n    numFreeUploadBuffers = 0;\r\n    numFreeUploadBufferViews = 0;\r\n    numDescriptorSets = 0;\r\n    numFreeDescriptorSets = 0;\r\n    numInstancingBuffers = 0;\r\n    numInstancingUniformBlocks = 0;\r\n}\r\n\r\nfunction createPool<T> (Constructor: new() => T): RecyclePool<T> {\r\n    return new RecyclePool<T>(() => new Constructor(), 16);\r\n}\r\n\r\nexport class RenderCommonObjectPool {\r\n    constructor () {\r\n    }\r\n    reset (): void {\r\n        this.li.reset(); // LightInfo\r\n        this.rp.reset(); // ResolvePair\r\n        this.cp.reset(); // CopyPair\r\n        this.up.reset(); // UploadPair\r\n        this.mp.reset(); // MovePair\r\n        this.ps.reset(); // PipelineStatistics\r\n    }\r\n    createLightInfo (\r\n        light: Light | null = null,\r\n        level = 0,\r\n        culledByLight = false,\r\n        probe: ReflectionProbe | null = null,\r\n    ): LightInfo {\r\n        const v = this.li.add(); // LightInfo\r\n        v.reset(light, level, culledByLight, probe);\r\n        return v;\r\n    }\r\n    createResolvePair (\r\n        source = '',\r\n        target = '',\r\n        resolveFlags: ResolveFlags = ResolveFlags.NONE,\r\n        mode: ResolveMode = ResolveMode.SAMPLE_ZERO,\r\n        mode1: ResolveMode = ResolveMode.SAMPLE_ZERO,\r\n    ): ResolvePair {\r\n        const v = this.rp.add(); // ResolvePair\r\n        v.reset(source, target, resolveFlags, mode, mode1);\r\n        return v;\r\n    }\r\n    createCopyPair (\r\n        source = '',\r\n        target = '',\r\n        mipLevels = 0xFFFFFFFF,\r\n        numSlices = 0xFFFFFFFF,\r\n        sourceMostDetailedMip = 0,\r\n        sourceFirstSlice = 0,\r\n        sourcePlaneSlice = 0,\r\n        targetMostDetailedMip = 0,\r\n        targetFirstSlice = 0,\r\n        targetPlaneSlice = 0,\r\n    ): CopyPair {\r\n        const v = this.cp.add(); // CopyPair\r\n        v.reset(source, target, mipLevels, numSlices, sourceMostDetailedMip, sourceFirstSlice, sourcePlaneSlice, targetMostDetailedMip, targetFirstSlice, targetPlaneSlice);\r\n        return v;\r\n    }\r\n    createUploadPair (\r\n        target = '',\r\n        mipLevels = 0xFFFFFFFF,\r\n        numSlices = 0xFFFFFFFF,\r\n        targetMostDetailedMip = 0,\r\n        targetFirstSlice = 0,\r\n        targetPlaneSlice = 0,\r\n    ): UploadPair {\r\n        const v = this.up.add(); // UploadPair\r\n        v.reset(target, mipLevels, numSlices, targetMostDetailedMip, targetFirstSlice, targetPlaneSlice);\r\n        return v;\r\n    }\r\n    createMovePair (\r\n        source = '',\r\n        target = '',\r\n        mipLevels = 0xFFFFFFFF,\r\n        numSlices = 0xFFFFFFFF,\r\n        targetMostDetailedMip = 0,\r\n        targetFirstSlice = 0,\r\n        targetPlaneSlice = 0,\r\n    ): MovePair {\r\n        const v = this.mp.add(); // MovePair\r\n        v.reset(source, target, mipLevels, numSlices, targetMostDetailedMip, targetFirstSlice, targetPlaneSlice);\r\n        return v;\r\n    }\r\n    createPipelineStatistics (): PipelineStatistics {\r\n        const v = this.ps.add(); // PipelineStatistics\r\n        v.reset();\r\n        return v;\r\n    }\r\n    private readonly li: RecyclePool<LightInfo> = createPool(LightInfo);\r\n    private readonly rp: RecyclePool<ResolvePair> = createPool(ResolvePair);\r\n    private readonly cp: RecyclePool<CopyPair> = createPool(CopyPair);\r\n    private readonly up: RecyclePool<UploadPair> = createPool(UploadPair);\r\n    private readonly mp: RecyclePool<MovePair> = createPool(MovePair);\r\n    private readonly ps: RecyclePool<PipelineStatistics> = createPool(PipelineStatistics);\r\n}\r\n\r\nexport function saveLightInfo (a: OutputArchive, v: LightInfo): void {\r\n    // skip, v.light: Light\r\n    // skip, v.probe: ReflectionProbe\r\n    a.n(v.level);\r\n    a.b(v.culledByLight);\r\n}\r\n\r\nexport function loadLightInfo (a: InputArchive, v: LightInfo): void {\r\n    // skip, v.light: Light\r\n    // skip, v.probe: ReflectionProbe\r\n    v.level = a.n();\r\n    v.culledByLight = a.b();\r\n}\r\n\r\nexport function saveResolvePair (a: OutputArchive, v: ResolvePair): void {\r\n    a.s(v.source);\r\n    a.s(v.target);\r\n    a.n(v.resolveFlags);\r\n    a.n(v.mode);\r\n    a.n(v.mode1);\r\n}\r\n\r\nexport function loadResolvePair (a: InputArchive, v: ResolvePair): void {\r\n    v.source = a.s();\r\n    v.target = a.s();\r\n    v.resolveFlags = a.n();\r\n    v.mode = a.n();\r\n    v.mode1 = a.n();\r\n}\r\n\r\nexport function saveCopyPair (a: OutputArchive, v: CopyPair): void {\r\n    a.s(v.source);\r\n    a.s(v.target);\r\n    a.n(v.mipLevels);\r\n    a.n(v.numSlices);\r\n    a.n(v.sourceMostDetailedMip);\r\n    a.n(v.sourceFirstSlice);\r\n    a.n(v.sourcePlaneSlice);\r\n    a.n(v.targetMostDetailedMip);\r\n    a.n(v.targetFirstSlice);\r\n    a.n(v.targetPlaneSlice);\r\n}\r\n\r\nexport function loadCopyPair (a: InputArchive, v: CopyPair): void {\r\n    v.source = a.s();\r\n    v.target = a.s();\r\n    v.mipLevels = a.n();\r\n    v.numSlices = a.n();\r\n    v.sourceMostDetailedMip = a.n();\r\n    v.sourceFirstSlice = a.n();\r\n    v.sourcePlaneSlice = a.n();\r\n    v.targetMostDetailedMip = a.n();\r\n    v.targetFirstSlice = a.n();\r\n    v.targetPlaneSlice = a.n();\r\n}\r\n\r\nexport function saveMovePair (a: OutputArchive, v: MovePair): void {\r\n    a.s(v.source);\r\n    a.s(v.target);\r\n    a.n(v.mipLevels);\r\n    a.n(v.numSlices);\r\n    a.n(v.targetMostDetailedMip);\r\n    a.n(v.targetFirstSlice);\r\n    a.n(v.targetPlaneSlice);\r\n}\r\n\r\nexport function loadMovePair (a: InputArchive, v: MovePair): void {\r\n    v.source = a.s();\r\n    v.target = a.s();\r\n    v.mipLevels = a.n();\r\n    v.numSlices = a.n();\r\n    v.targetMostDetailedMip = a.n();\r\n    v.targetFirstSlice = a.n();\r\n    v.targetPlaneSlice = a.n();\r\n}\r\n\r\nexport function savePipelineStatistics (a: OutputArchive, v: PipelineStatistics): void {\r\n    a.n(v.numRenderPasses);\r\n    a.n(v.numManagedTextures);\r\n    a.n(v.totalManagedTextures);\r\n    a.n(v.numUploadBuffers);\r\n    a.n(v.numUploadBufferViews);\r\n    a.n(v.numFreeUploadBuffers);\r\n    a.n(v.numFreeUploadBufferViews);\r\n    a.n(v.numDescriptorSets);\r\n    a.n(v.numFreeDescriptorSets);\r\n    a.n(v.numInstancingBuffers);\r\n    a.n(v.numInstancingUniformBlocks);\r\n}\r\n\r\nexport function loadPipelineStatistics (a: InputArchive, v: PipelineStatistics): void {\r\n    v.numRenderPasses = a.n();\r\n    v.numManagedTextures = a.n();\r\n    v.totalManagedTextures = a.n();\r\n    v.numUploadBuffers = a.n();\r\n    v.numUploadBufferViews = a.n();\r\n    v.numFreeUploadBuffers = a.n();\r\n    v.numFreeUploadBufferViews = a.n();\r\n    v.numDescriptorSets = a.n();\r\n    v.numFreeDescriptorSets = a.n();\r\n    v.numInstancingBuffers = a.n();\r\n    v.numInstancingUniformBlocks = a.n();\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BufferInfo, Buffer, BufferUsageBit, ClearFlagBit, Color, DescriptorSet, LoadOp,\r\n    Format, Rect, Sampler, StoreOp, Texture, Viewport, MemoryUsageBit,\r\n    UniformBlock,\r\n    Device,\r\n} from '../../gfx';\r\nimport { ReflectionProbe } from '../../render-scene/scene/reflection-probe';\r\nimport { Camera, SkyBoxFlagValue } from '../../render-scene/scene/camera';\r\nimport { CSMLevel, ShadowType, Shadows } from '../../render-scene/scene/shadows';\r\nimport { Light, LightType } from '../../render-scene/scene/light';\r\nimport { DirectionalLight } from '../../render-scene/scene/directional-light';\r\nimport { RangedDirectionalLight } from '../../render-scene/scene/ranged-directional-light';\r\nimport { PointLight } from '../../render-scene/scene/point-light';\r\nimport { SphereLight } from '../../render-scene/scene/sphere-light';\r\nimport { SpotLight } from '../../render-scene/scene/spot-light';\r\nimport { UBOForwardLightEnum, supportsR32FloatTexture, supportsRGBA16HalfFloatTexture } from '../define';\r\nimport { BasicPipeline } from './pipeline';\r\nimport {\r\n    AttachmentType, LightInfo,\r\n    QueueHint, ResourceResidency, SceneFlags, UpdateFrequency,\r\n} from './types';\r\nimport { Vec4, geometry, toRadian, cclegacy } from '../../core';\r\nimport { RenderWindow } from '../../render-scene/core/render-window';\r\nimport { RasterPass, RenderData, RenderGraph } from './render-graph';\r\nimport { WebPipeline } from './web-pipeline';\r\nimport { DescriptorSetData, LayoutGraphData } from './layout-graph';\r\nimport { AABB } from '../../core/geometry';\r\nimport { getUBOTypeCount } from './utils';\r\n\r\nconst _rangedDirLightBoundingBox = new AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\r\nconst _tmpBoundingBox = new AABB();\r\n\r\n// Anti-aliasing type, other types will be gradually added in the future\r\nexport enum AntiAliasing {\r\n    NONE,\r\n    FXAA,\r\n    FXAAHQ,\r\n}\r\n\r\nexport function getRTFormatBeforeToneMapping (ppl: BasicPipeline): Format {\r\n    const useFloatOutput = ppl.getMacroBool('CC_USE_FLOAT_OUTPUT');\r\n    return ppl.pipelineSceneData.isHDR && useFloatOutput && supportsRGBA16HalfFloatTexture(ppl.device) ? Format.RGBA16F : Format.RGBA8;\r\n}\r\n\r\nexport function validPunctualLightsCulling (pipeline: BasicPipeline, camera: Camera): void {\r\n    const sceneData = pipeline.pipelineSceneData;\r\n    const validPunctualLights = sceneData.validPunctualLights;\r\n    validPunctualLights.length = 0;\r\n    const _sphere = geometry.Sphere.create(0, 0, 0, 1);\r\n    const { spotLights } = camera.scene!;\r\n    const disableLightmap = camera.node.scene.globals.disableLightmap;\r\n    for (let i = 0; i < spotLights.length; i++) {\r\n        const light = spotLights[i];\r\n        if (light.baked && !disableLightmap) {\r\n            continue;\r\n        }\r\n\r\n        geometry.Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n        if (geometry.intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n\r\n    const { sphereLights } = camera.scene!;\r\n    for (let i = 0; i < sphereLights.length; i++) {\r\n        const light = sphereLights[i];\r\n        if (light.baked && !disableLightmap) {\r\n            continue;\r\n        }\r\n        geometry.Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n        if (geometry.intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n\r\n    const { pointLights } = camera.scene!;\r\n    for (let i = 0; i < pointLights.length; i++) {\r\n        const light = pointLights[i];\r\n        if (light.baked) {\r\n            continue;\r\n        }\r\n        geometry.Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n        if (geometry.intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n\r\n    const { rangedDirLights } = camera.scene!;\r\n    for (let i = 0; i < rangedDirLights.length; i++) {\r\n        const light = rangedDirLights[i];\r\n        AABB.transform(_tmpBoundingBox, _rangedDirLightBoundingBox, light.node!.getWorldMatrix());\r\n        if (geometry.intersect.aabbFrustum(_tmpBoundingBox, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n    // in jsb, std::vector is not synchronized, so we need to assign it manually\r\n    sceneData.validPunctualLights = validPunctualLights;\r\n}\r\n\r\nexport function getCameraUniqueID (camera: Camera): number {\r\n    return camera.cameraId;\r\n}\r\n\r\nexport function getLoadOpOfClearFlag (clearFlag: ClearFlagBit, attachment: AttachmentType): LoadOp {\r\n    let loadOp = LoadOp.CLEAR;\r\n    if (!(clearFlag & ClearFlagBit.COLOR)\r\n        && attachment === AttachmentType.RENDER_TARGET) {\r\n        if (clearFlag & SkyBoxFlagValue.VALUE) {\r\n            loadOp = LoadOp.CLEAR;\r\n        } else {\r\n            loadOp = LoadOp.LOAD;\r\n        }\r\n    }\r\n    if ((clearFlag & ClearFlagBit.DEPTH_STENCIL) !== ClearFlagBit.DEPTH_STENCIL\r\n        && attachment === AttachmentType.DEPTH_STENCIL) {\r\n        if (!(clearFlag & ClearFlagBit.DEPTH)) loadOp = LoadOp.LOAD;\r\n        if (!(clearFlag & ClearFlagBit.STENCIL)) loadOp = LoadOp.LOAD;\r\n    }\r\n    return loadOp;\r\n}\r\n\r\nexport function getRenderArea (\r\n    camera: Camera,\r\n    width: number,\r\n    height: number,\r\n    light: Light | null = null,\r\n    level = 0,\r\n    out: Rect | undefined = undefined,\r\n): Rect {\r\n    out = out || new Rect();\r\n    const vp = camera ? camera.viewport : new Rect(0, 0, 1, 1);\r\n    const w = width;\r\n    const h = height;\r\n    out.x = vp.x * w;\r\n    out.y = vp.y * h;\r\n    out.width = vp.width * w;\r\n    out.height = vp.height * h;\r\n    if (light) {\r\n        switch (light.type) {\r\n        case LightType.DIRECTIONAL: {\r\n            const mainLight = light as DirectionalLight;\r\n            if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1) {\r\n                out.x = 0;\r\n                out.y = 0;\r\n                out.width = w;\r\n                out.height = h;\r\n            } else {\r\n                const screenSpaceSignY = cclegacy.director.root.device.capabilities.screenSpaceSignY;\r\n                out.x = level % 2 * 0.5 * w;\r\n                if (screenSpaceSignY > 0) {\r\n                    out.y = (1 - Math.floor(level / 2)) * 0.5 * h;\r\n                } else {\r\n                    out.y = Math.floor(level / 2) * 0.5 * h;\r\n                }\r\n                out.width = 0.5 * w;\r\n                out.height = 0.5 * h;\r\n            }\r\n            break;\r\n        }\r\n        case LightType.SPOT: {\r\n            out.x = 0;\r\n            out.y = 0;\r\n            out.width = w;\r\n            out.height = h;\r\n            break;\r\n        }\r\n        default:\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\nlet shadowPass;\r\nexport function buildShadowPass (\r\n    passName: Readonly<string>,\r\n    ppl: BasicPipeline,\r\n    camera: Camera,\r\n    light: Light,\r\n    level: number,\r\n    width: Readonly<number>,\r\n    height: Readonly<number>,\r\n): void {\r\n    const fboW = width;\r\n    const fboH = height;\r\n    const area = getRenderArea(camera, width, height, light, level);\r\n    width = area.width;\r\n    height = area.height;\r\n    const device = ppl.device;\r\n    const shadowMapName = passName;\r\n    if (!ppl.containsResource(shadowMapName)) {\r\n        const format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;\r\n        ppl.addRenderTarget(shadowMapName, format, fboW, fboH, ResourceResidency.MANAGED);\r\n        ppl.addDepthStencil(`${shadowMapName}Depth`, Format.DEPTH_STENCIL, fboW, fboH, ResourceResidency.MANAGED);\r\n    }\r\n    ppl.updateRenderTarget(shadowMapName, fboW, fboH);\r\n    ppl.updateDepthStencil(`${shadowMapName}Depth`, fboW, fboH);\r\n    if (!level) {\r\n        shadowPass = ppl.addRenderPass(width, height, 'default');\r\n        shadowPass.name = passName;\r\n        shadowPass.setViewport(new Viewport(0, 0, fboW, fboH));\r\n        shadowPass.addRenderTarget(shadowMapName, LoadOp.CLEAR, StoreOp.STORE, new Color(1, 1, 1, camera.clearColor.w));\r\n        shadowPass.addDepthStencil(\r\n            `${shadowMapName}Depth`,\r\n            LoadOp.CLEAR,\r\n            StoreOp.DISCARD,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n            ClearFlagBit.DEPTH_STENCIL,\r\n        );\r\n    }\r\n    const queue = shadowPass.addQueue(QueueHint.RENDER_OPAQUE, 'shadow-caster');\r\n    queue.addScene(\r\n        camera,\r\n        SceneFlags.SHADOW_CASTER | SceneFlags.OPAQUE_OBJECT | SceneFlags.MASK,\r\n    ).useLightFrustum(light, light.type !== LightType.DIRECTIONAL ? 0 : level);\r\n    queue.setViewport(new Viewport(area.x, area.y, area.width, area.height));\r\n}\r\n\r\nexport function buildReflectionProbePass (\r\n    camera: Camera,\r\n    ppl: BasicPipeline,\r\n    probe: ReflectionProbe,\r\n    renderWindow: RenderWindow,\r\n    faceIdx: number,\r\n): void {\r\n    const cameraName = `Camera${faceIdx}`;\r\n    const area = probe.renderArea();\r\n    const width = area.x;\r\n    const height = area.y;\r\n    const probeCamera = probe.camera;\r\n\r\n    const probePassRTName = `reflectionProbePassColor${cameraName}`;\r\n    const probePassDSName = `reflectionProbePassDS${cameraName}`;\r\n\r\n    if (!ppl.containsResource(probePassRTName)) {\r\n        ppl.addRenderWindow(probePassRTName, Format.RGBA8, width, height, renderWindow);\r\n        ppl.addDepthStencil(probePassDSName, Format.DEPTH_STENCIL, width, height, ResourceResidency.EXTERNAL);\r\n    }\r\n    ppl.updateRenderWindow(probePassRTName, renderWindow);\r\n    ppl.updateDepthStencil(probePassDSName, width, height);\r\n\r\n    const probePass = ppl.addRenderPass(width, height, 'default');\r\n    probePass.name = `ReflectionProbePass${faceIdx}`;\r\n    probePass.setViewport(new Viewport(0, 0, width, height));\r\n    probePass.addRenderTarget(\r\n        probePassRTName,\r\n        getLoadOpOfClearFlag(probeCamera.clearFlag, AttachmentType.RENDER_TARGET),\r\n        StoreOp.STORE,\r\n        new Color(probeCamera.clearColor.x, probeCamera.clearColor.y, probeCamera.clearColor.z, probeCamera.clearColor.w),\r\n    );\r\n    probePass.addDepthStencil(\r\n        probePassDSName,\r\n        getLoadOpOfClearFlag(probeCamera.clearFlag, AttachmentType.DEPTH_STENCIL),\r\n        StoreOp.STORE,\r\n        probeCamera.clearDepth,\r\n        probeCamera.clearStencil,\r\n        probeCamera.clearFlag,\r\n    );\r\n    const passBuilder = probePass.addQueue(QueueHint.RENDER_OPAQUE, 'reflect-map');\r\n    const lightInfo = new LightInfo();\r\n    lightInfo.probe = probe;\r\n    passBuilder.addSceneOfCamera(camera, lightInfo, SceneFlags.REFLECTION_PROBE | SceneFlags.OPAQUE_OBJECT);\r\n    updateCameraUBO(passBuilder as unknown as any, probeCamera, ppl);\r\n}\r\n\r\nexport class ShadowInfo {\r\n    shadowEnabled = false;\r\n    mainLightShadowNames: string[] = [];\r\n    spotLightShadowNames: string[] = [];\r\n    validLights: Light[] = [];\r\n    reset (): void {\r\n        this.shadowEnabled = false;\r\n        this.mainLightShadowNames.length = 0;\r\n        this.spotLightShadowNames.length = 0;\r\n        this.validLights.length = 0;\r\n    }\r\n}\r\n\r\nexport function buildShadowPasses (cameraName: string, camera: Camera, ppl: BasicPipeline): ShadowInfo {\r\n    validPunctualLightsCulling(ppl, camera);\r\n    const pipeline = ppl;\r\n    const shadow = pipeline.pipelineSceneData.shadows;\r\n    const validPunctualLights = ppl.pipelineSceneData.validPunctualLights;\r\n    shadowInfo.reset();\r\n    const shadows = ppl.pipelineSceneData.shadows;\r\n    if (!shadow.enabled || shadow.type !== ShadowType.ShadowMap) { return shadowInfo; }\r\n    shadowInfo.shadowEnabled = true;\r\n    let n = 0;\r\n    let m = 0;\r\n    for (;n < shadow.maxReceived && m < validPunctualLights.length;) {\r\n        const light = validPunctualLights[m];\r\n        if (light.type === LightType.SPOT) {\r\n            const spotLight = light as SpotLight;\r\n            if (spotLight.shadowEnabled) {\r\n                shadowInfo.validLights.push(light);\r\n                n++;\r\n            }\r\n        }\r\n        m++;\r\n    }\r\n\r\n    const { mainLight } = camera.scene!;\r\n    // build shadow map\r\n    const mapWidth = shadows.size.x;\r\n    const mapHeight = shadows.size.y;\r\n    if (mainLight && mainLight.shadowEnabled) {\r\n        shadowInfo.mainLightShadowNames[0] = `MainLightShadow${cameraName}`;\r\n        if (mainLight.shadowFixedArea) {\r\n            buildShadowPass(\r\n                shadowInfo.mainLightShadowNames[0],\r\n                ppl,\r\n                camera,\r\n                mainLight,\r\n                0,\r\n                mapWidth,\r\n                mapHeight,\r\n            );\r\n        } else {\r\n            const csmLevel = pipeline.pipelineSceneData.csmSupported ? mainLight.csmLevel : 1;\r\n            shadowInfo.mainLightShadowNames[0] = `MainLightShadow${cameraName}`;\r\n            for (let i = 0; i < csmLevel; i++) {\r\n                buildShadowPass(\r\n                    shadowInfo.mainLightShadowNames[0],\r\n                    ppl,\r\n                    camera,\r\n                    mainLight,\r\n                    i,\r\n                    mapWidth,\r\n                    mapHeight,\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let l = 0; l < shadowInfo.validLights.length; l++) {\r\n        const light = shadowInfo.validLights[l];\r\n        const passName = `SpotLightShadow${l.toString()}${cameraName}`;\r\n        shadowInfo.spotLightShadowNames[l] = passName;\r\n        buildShadowPass(\r\n            passName,\r\n            ppl,\r\n            camera,\r\n            light,\r\n            0,\r\n            mapWidth,\r\n            mapHeight,\r\n        );\r\n    }\r\n    return shadowInfo;\r\n}\r\nconst shadowInfo = new ShadowInfo();\r\n\r\nexport function updateCameraUBO (setter: any, camera: Readonly<Camera>, ppl: Readonly<BasicPipeline>): void {\r\n    const pipeline = cclegacy.director.root!.pipeline as WebPipeline;\r\n    const sceneData = ppl.pipelineSceneData;\r\n    const skybox = sceneData.skybox;\r\n    // setter.addConstant('CCCamera');\r\n    setter.setMat4('cc_matView', camera.matView);\r\n    setter.setMat4('cc_matViewInv', camera.node.worldMatrix);\r\n    setter.setMat4('cc_matProj', camera.matProj);\r\n    setter.setMat4('cc_matProjInv', camera.matProjInv);\r\n    setter.setMat4('cc_matViewProj', camera.matViewProj);\r\n    setter.setMat4('cc_matViewProjInv', camera.matViewProjInv);\r\n    setter.setVec4('cc_cameraPos', new Vec4(camera.position.x, camera.position.y, camera.position.z, pipeline.getCombineSignY()));\r\n    // eslint-disable-next-line max-len\r\n    setter.setVec4('cc_surfaceTransform', new Vec4(camera.surfaceTransform, 0.0, Math.cos(toRadian(skybox.getRotationAngle())), Math.sin(toRadian(skybox.getRotationAngle()))));\r\n    // eslint-disable-next-line max-len\r\n    setter.setVec4('cc_screenScale', new Vec4(sceneData.shadingScale, sceneData.shadingScale, 1.0 / sceneData.shadingScale, 1.0 / sceneData.shadingScale));\r\n    setter.setVec4('cc_exposure', new Vec4(camera.exposure, 1.0 / camera.exposure, sceneData.isHDR ? 1.0 : 0.0, 1.0 / Camera.standardExposureValue));\r\n}\r\n\r\nfunction bindDescValue (desc: DescriptorSet, binding: number, value): void {\r\n    if (value instanceof Buffer) {\r\n        desc.bindBuffer(binding, value);\r\n    } else if (value instanceof Texture) {\r\n        desc.bindTexture(binding, value);\r\n    } else if (value instanceof Sampler) {\r\n        desc.bindSampler(binding, value);\r\n    }\r\n}\r\n\r\nfunction bindGlobalDesc (desc: DescriptorSet, binding: number, value): void {\r\n    bindDescValue(desc, binding, value);\r\n}\r\n\r\nexport function getDescBinding (descId, descData: DescriptorSetData): number {\r\n    const layoutData = descData;\r\n    // find descriptor binding\r\n    for (const block of layoutData.descriptorSetLayoutData.descriptorBlocks) {\r\n        for (let i = 0; i !== block.descriptors.length; ++i) {\r\n            if (descId === block.descriptors[i].descriptorID) {\r\n                return block.offset + i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport function getDescBindingFromName (bindingName: string): number {\r\n    const pipeline = cclegacy.director.root.pipeline as WebPipeline;\r\n    const layoutGraph = pipeline.layoutGraph;\r\n    const vertIds = layoutGraph.v();\r\n    const descId = layoutGraph.attributeIndex.get(bindingName);\r\n    let currDesData: DescriptorSetData;\r\n    for (const i of vertIds) {\r\n        const layout = layoutGraph.getLayout(i);\r\n        const sets = layout.getSets();\r\n        for (const [k, descData] of sets) {\r\n            const layoutData = descData.descriptorSetLayoutData;\r\n            const blocks = layoutData.descriptorBlocks;\r\n            for (const b of blocks) {\r\n                for (const ds of b.descriptors) {\r\n                    if (ds.descriptorID === descId) {\r\n                        currDesData = descData;\r\n                        return getDescBinding(descId, currDesData);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nclass DescBuffManager {\r\n    private buffers: Buffer[] = [];\r\n    private currBuffIdx: number = 0;\r\n    private device: Device;\r\n    public currUniform: Float32Array;\r\n    private _root;\r\n    constructor (bufferSize: number, numBuffers: number = 2) {\r\n        const root = this._root = cclegacy.director.root;\r\n        const device = root.device;\r\n        this.device = device;\r\n        this.currUniform = new Float32Array(bufferSize / 4);\r\n        for (let i = 0; i < numBuffers; i++) {\r\n            const bufferInfo: BufferInfo = new BufferInfo(\r\n                BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n                bufferSize,\r\n                bufferSize,\r\n            );\r\n            this.buffers.push(this.device.createBuffer(bufferInfo));\r\n        }\r\n    }\r\n    getCurrentBuffer (): Buffer {\r\n        const { director } = cclegacy;\r\n        this.currBuffIdx = director.getTotalFrames() % this.buffers.length;\r\n        return this.buffers[this.currBuffIdx];\r\n    }\r\n    updateData (vals: number[]): void {\r\n        this.currUniform.set(vals);\r\n    }\r\n    updateBuffer (bindId: number, setData: DescriptorSetData): void {\r\n        const descriptorSet = setData.descriptorSet!;\r\n        const buffer = this.getCurrentBuffer();\r\n        buffer.update(this.currUniform);\r\n        bindGlobalDesc(descriptorSet, bindId, buffer);\r\n    }\r\n}\r\n\r\nconst buffsMap: Map<string, DescBuffManager> = new Map();\r\nconst currBindBuffs: Map<string, number> = new Map();\r\n\r\nconst layouts: Map<string, DescriptorSetData> = new Map();\r\nexport function getDescriptorSetDataFromLayout (layoutName: string): DescriptorSetData | undefined {\r\n    const descLayout = layouts.get(layoutName);\r\n    if (descLayout) {\r\n        return descLayout;\r\n    }\r\n    const webPip = cclegacy.director.root.pipeline as WebPipeline;\r\n    const stageId = webPip.layoutGraph.locateChild(webPip.layoutGraph.N, layoutName);\r\n    const layout = webPip.layoutGraph.getLayout(stageId);\r\n    const layoutData = layout.getSet(UpdateFrequency.PER_PASS);\r\n    layouts.set(layoutName, layoutData!);\r\n    return layoutData;\r\n}\r\n\r\nexport function getDescriptorSetDataFromLayoutId (id: number): DescriptorSetData | undefined {\r\n    const webPip = cclegacy.director.root.pipeline as WebPipeline;\r\n    const layout = webPip.layoutGraph.getLayout(id);\r\n    const layoutData = layout.getSet(UpdateFrequency.PER_PASS);\r\n    return layoutData;\r\n}\r\n\r\nexport function updateGlobalDescBinding (data: RenderData, sceneId: number, idxRD: number, layoutName = 'default'): void {\r\n    updatePerPassUBO(layoutName, sceneId, idxRD, data);\r\n}\r\n\r\nfunction getUniformBlock (block: string, layoutName: string): UniformBlock | undefined {\r\n    const webPip = cclegacy.director.root.pipeline as WebPipeline;\r\n    const lg = webPip.layoutGraph;\r\n    const nodeId = lg.locateChild(0xFFFFFFFF, layoutName);\r\n    const ppl = lg.getLayout(nodeId);\r\n    const layout = ppl.getSet(UpdateFrequency.PER_PASS)!.descriptorSetLayoutData;\r\n    const nameID: number = lg.attributeIndex.get(block)!;\r\n    return layout.uniformBlocks.get(nameID);\r\n}\r\n\r\nfunction getUniformOffset (uniform: string, block: string, layout: string): number {\r\n    const uniformBlock = getUniformBlock(block, layout);\r\n    if (!uniformBlock) return -1;\r\n    let offset = 0;\r\n    for (const currUniform of uniformBlock.members) {\r\n        const currCount = getUBOTypeCount(currUniform.type);\r\n        if (currUniform.name === uniform) {\r\n            return offset;\r\n        }\r\n        offset += currCount * currUniform.count;\r\n    }\r\n    return -1;\r\n}\r\n\r\nconst uniformBlockMap: Map<string, number[]> = new Map();\r\nclass ConstantBlockInfo {\r\n    offset: number = -1;\r\n    buffer: number[] = [];\r\n    blockId: number = -1;\r\n}\r\nconst constantBlockMap: Map<number, ConstantBlockInfo> = new Map();\r\nfunction copyToConstantBuffer (target: number[], val: number[], offset: number): boolean {\r\n    let isImparity = false;\r\n    if (offset < 0 || offset > target.length) {\r\n        return isImparity;\r\n    }\r\n    const length = Math.min(val.length, target.length - offset);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (target[offset + i] !== val[i]) {\r\n            target[offset + i] = val[i];\r\n            isImparity = true;\r\n        }\r\n    }\r\n    return isImparity;\r\n}\r\n\r\nfunction addConstantBuffer (block: string, layout: string): number[] | null {\r\n    let buffers = uniformBlockMap.get(block);\r\n    if (buffers) {\r\n        return buffers;\r\n    }\r\n    buffers = [];\r\n    const webPip = cclegacy.director.root.pipeline as WebPipeline;\r\n    const lg = webPip.layoutGraph;\r\n    let currCount = 0;\r\n    const currBlock = getUniformBlock(block, layout);\r\n    if (!currBlock) return null;\r\n    for (const uniform of currBlock.members) {\r\n        currCount += getUBOTypeCount(uniform.type) * uniform.count;\r\n    }\r\n    buffers.length = currCount;\r\n    buffers.fill(0);\r\n    uniformBlockMap.set(block, buffers);\r\n    return buffers;\r\n}\r\n\r\nfunction updateGlobalDescBuffer (descKey: string, vals: number[]): void {\r\n    let currDescBuff = buffsMap.get(descKey);\r\n    if (!currDescBuff) {\r\n        buffsMap.set(descKey, new DescBuffManager(vals.length * 4, 2));\r\n        currDescBuff = buffsMap.get(descKey);\r\n    }\r\n    currDescBuff!.updateData(vals);\r\n}\r\n\r\nfunction updateConstantBlock (\r\n    constantBuff: ConstantBlockInfo,\r\n    data: number[],\r\n    descriptorSetData: DescriptorSetData,\r\n    sceneId: number,\r\n    idxRD: number,\r\n): void {\r\n    const blockId = constantBuff.blockId;\r\n    const buffer = constantBuff.buffer;\r\n    const isImparity = copyToConstantBuffer(buffer, data, constantBuff.offset);\r\n    const bindId = getDescBinding(blockId, descriptorSetData);\r\n    const desc = descriptorSetData.descriptorSet!;\r\n    if (isImparity || !desc.getBuffer(bindId) && bindId !== -1) {\r\n        const descKey = `${blockId}${bindId}${idxRD}${sceneId}`;\r\n        currBindBuffs.set(descKey, bindId);\r\n        updateGlobalDescBuffer(descKey, buffer);\r\n    }\r\n}\r\n\r\nfunction updateDefaultConstantBlock (blockId: number, sceneId: number, idxRD: number, vals: number[], setData: DescriptorSetData): void {\r\n    const bindId = getDescBinding(blockId, setData);\r\n    if (bindId === -1) { return; }\r\n    const descKey = `${blockId}${bindId}${idxRD}${sceneId}`;\r\n    currBindBuffs.set(descKey, bindId);\r\n    updateGlobalDescBuffer(descKey, vals);\r\n}\r\n\r\nexport function updatePerPassUBO (layout: string, sceneId: number, idxRD: number, user: RenderData): void {\r\n    const { constants, samplers, textures, buffers } = user;\r\n    const webPip = cclegacy.director.root.pipeline as WebPipeline;\r\n    const lg = webPip.layoutGraph;\r\n    const descriptorSetData = getDescriptorSetDataFromLayout(layout)!;\r\n    currBindBuffs.clear();\r\n    for (const [key, data] of constants) {\r\n        let constantBlock = constantBlockMap.get(key);\r\n        if (!constantBlock) {\r\n            const currMemKey = Array.from(lg.constantIndex).find(([_, v]) => v === key)![0];\r\n            for (const [block, blockId] of lg.attributeIndex) {\r\n                const constantBuff = addConstantBuffer(block, layout);\r\n                if (!constantBuff) continue;\r\n                const offset = getUniformOffset(currMemKey, block, layout);\r\n                // not found\r\n                if (offset === -1) {\r\n                    // Although the current uniformMem does not belong to the current uniform block,\r\n                    // it does not mean that it should not be bound to the corresponding descriptor.\r\n                    updateDefaultConstantBlock(blockId, sceneId, idxRD, constantBuff, descriptorSetData);\r\n                    continue;\r\n                }\r\n                constantBlockMap.set(key, new ConstantBlockInfo());\r\n                constantBlock = constantBlockMap.get(key)!;\r\n                constantBlock.buffer = constantBuff;\r\n                constantBlock.blockId = blockId;\r\n                constantBlock.offset = offset;\r\n                updateConstantBlock(constantBlock, data, descriptorSetData, sceneId, idxRD);\r\n            }\r\n        } else {\r\n            updateConstantBlock(constantBlock, data, descriptorSetData, sceneId, idxRD);\r\n        }\r\n    }\r\n\r\n    const descriptorSet = descriptorSetData.descriptorSet!;\r\n    for (const [key, value] of textures) {\r\n        const bindId = getDescBinding(key, descriptorSetData);\r\n        if (bindId === -1) { continue; }\r\n        const tex = descriptorSet.getTexture(bindId);\r\n        if (value !== tex\r\n        // @ts-ignore\r\n        || (!tex.gpuTexture && !(tex.gpuTextureView && tex.gpuTextureView.gpuTexture))) {\r\n            bindGlobalDesc(descriptorSet, bindId, value);\r\n        }\r\n    }\r\n    for (const [key, value] of samplers) {\r\n        const bindId = getDescBinding(key, descriptorSetData);\r\n        if (bindId === -1) { continue; }\r\n        const sampler = descriptorSet.getSampler(bindId);\r\n        if (sampler !== value) {\r\n            bindGlobalDesc(descriptorSet, bindId, value);\r\n        }\r\n    }\r\n    for (const [key, value] of currBindBuffs) {\r\n        const buffManager = buffsMap.get(key)!;\r\n        buffManager.updateBuffer(value, descriptorSetData);\r\n    }\r\n    for (const [key, value] of buffers) {\r\n        const bindId = getDescBinding(key, descriptorSetData);\r\n        if (bindId === -1) { continue; }\r\n        const buffer = descriptorSet.getBuffer(bindId);\r\n        if (!buffer) {\r\n            bindGlobalDesc(descriptorSet, bindId, value);\r\n        }\r\n    }\r\n}\r\n\r\nexport function hashCombineKey (val): string {\r\n    return `${val}-`;\r\n}\r\n\r\nexport function hashCombineStr (str: string): number {\r\n    // DJB2 HASH\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = ((hash << 5) - hash) + str.charCodeAt(i);\r\n        hash |= 0;// Convert to 32bit integer\r\n    }\r\n    return hash;\r\n}\r\n\r\nexport function bool (val): boolean {\r\n    return !!val;\r\n}\r\n\r\nexport function AlignUp (value: number, alignment: number): number {\r\n    return (value + (alignment - 1)) & ~(alignment - 1);\r\n}\r\nconst kLightMeterScale = 10000;\r\nexport function SetLightUBO (\r\n    light: Light | null,\r\n    bHDR: boolean,\r\n    exposure: number,\r\n    shadowInfo: Shadows | null,\r\n    buffer: Float32Array,\r\n    offset: number,\r\n    elemSize: number,\r\n): void {\r\n    const vec4Array = new Float32Array(4);\r\n    let size = 0.0;\r\n    let range = 0.0;\r\n    let luminanceHDR = 0.0;\r\n    let luminanceLDR = 0.0;\r\n\r\n    if (light && light.type === LightType.SPHERE) {\r\n        const sphereLight = light as SphereLight;\r\n        vec4Array[0] = sphereLight.position.x;\r\n        vec4Array[1] = sphereLight.position.y;\r\n        vec4Array[2] = sphereLight.position.z;\r\n        vec4Array[3] = LightType.SPHERE;\r\n        size = sphereLight.size;\r\n        range = sphereLight.range;\r\n        luminanceHDR = sphereLight.luminanceHDR;\r\n        luminanceLDR = sphereLight.luminanceLDR;\r\n    } else if (light && light.type === LightType.SPOT) {\r\n        const spotLight = light as SpotLight;\r\n        vec4Array[0] = spotLight.position.x;\r\n        vec4Array[1] = spotLight.position.y;\r\n        vec4Array[2] = spotLight.position.z;\r\n        vec4Array[3] = LightType.SPOT;\r\n        size = spotLight.size;\r\n        range = spotLight.range;\r\n        luminanceHDR = spotLight.luminanceHDR;\r\n        luminanceLDR = spotLight.luminanceLDR;\r\n    } else if (light && light.type === LightType.POINT) {\r\n        const pointLight = light as PointLight;\r\n        vec4Array[0] = pointLight.position.x;\r\n        vec4Array[1] = pointLight.position.y;\r\n        vec4Array[2] = pointLight.position.z;\r\n        vec4Array[3] = LightType.POINT;\r\n        size = 0.0;\r\n        range = pointLight.range;\r\n        luminanceHDR = pointLight.luminanceHDR;\r\n        luminanceLDR = pointLight.luminanceLDR;\r\n    } else if (light && light.type === LightType.RANGED_DIRECTIONAL) {\r\n        const rangedDirLight = light as RangedDirectionalLight;\r\n        vec4Array[0] = rangedDirLight.position.x;\r\n        vec4Array[1] = rangedDirLight.position.y;\r\n        vec4Array[2] = rangedDirLight.position.z;\r\n        vec4Array[3] = LightType.RANGED_DIRECTIONAL;\r\n        size = 0.0;\r\n        range = 0.0;\r\n        luminanceHDR = rangedDirLight.illuminanceHDR;\r\n        luminanceLDR = rangedDirLight.illuminanceLDR;\r\n    }\r\n\r\n    let index = offset + UBOForwardLightEnum.LIGHT_POS_OFFSET;\r\n    buffer.set(vec4Array, index);\r\n\r\n    index = offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET;\r\n    vec4Array.set([size, range, 0, 0]);\r\n    buffer.set(vec4Array, index);\r\n\r\n    index = offset + UBOForwardLightEnum.LIGHT_COLOR_OFFSET;\r\n    const color = light ? light.color : new Color();\r\n    if (light && light.useColorTemperature) {\r\n        const tempRGB = light.colorTemperatureRGB;\r\n        buffer[index++] = color.x * tempRGB.x;\r\n        buffer[index++] = color.y * tempRGB.y;\r\n        buffer[index++] = color.z * tempRGB.z;\r\n    } else {\r\n        buffer[index++] = color.x;\r\n        buffer[index++] = color.y;\r\n        buffer[index++] = color.z;\r\n    }\r\n\r\n    if (bHDR) {\r\n        buffer[index] = luminanceHDR * exposure * kLightMeterScale;\r\n    } else {\r\n        buffer[index] = luminanceLDR;\r\n    }\r\n\r\n    switch (light ? light.type : LightType.UNKNOWN) {\r\n    case LightType.SPHERE:\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 2] = 0;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 3] = 0;\r\n        break;\r\n    case LightType.SPOT: {\r\n        const spotLight = light as SpotLight;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 2] = spotLight.spotAngle;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 3] =                (shadowInfo && shadowInfo.enabled\r\n                 && spotLight.shadowEnabled\r\n                 && shadowInfo.type === ShadowType.ShadowMap) ? 1.0 : 0.0;\r\n\r\n        index = offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET;\r\n        const direction = spotLight.direction;\r\n        buffer[index++] = direction.x;\r\n        buffer[index++] = direction.y;\r\n        buffer[index] = direction.z;\r\n\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 0] = 0;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 1] = 0;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 2] = 0;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 3] = spotLight.angleAttenuationStrength;\r\n    } break;\r\n    case LightType.POINT:\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 2] = 0;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 3] = 0;\r\n        break;\r\n    case LightType.RANGED_DIRECTIONAL: {\r\n        const rangedDirLight = light as RangedDirectionalLight;\r\n        const right = rangedDirLight.right;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 0] = right.x;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 1] = right.y;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 2] = right.z;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET + 3] = 0;\r\n\r\n        const direction = rangedDirLight.direction;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET + 0] = direction.x;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET + 1] = direction.y;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET + 2] = direction.z;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET + 3] = 0;\r\n\r\n        const scale = rangedDirLight.scale;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 0] = scale.x * 0.5;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 1] = scale.y * 0.5;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 2] = scale.z * 0.5;\r\n        buffer[offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET + 3] = 0;\r\n    } break;\r\n    default:\r\n        break;\r\n    }\r\n}\r\n\r\nexport function getSubpassOrPassID (sceneId: number, rg: RenderGraph, lg: LayoutGraphData): number {\r\n    const queueId = rg.getParent(sceneId);\r\n    const subpassOrPassID = rg.getParent(queueId);\r\n    const passId = rg.getParent(subpassOrPassID);\r\n    let layoutId = lg.N;\r\n    // single render pass\r\n    if (passId === rg.N) {\r\n        const layoutName: string = rg.getLayout(subpassOrPassID);\r\n        layoutId = lg.locateChild(lg.N, layoutName);\r\n    } else {\r\n        const passLayoutName: string = rg.getLayout(passId);\r\n        const passLayoutId = lg.locateChild(lg.N, passLayoutName);\r\n\r\n        const subpassLayoutName: string = rg.getLayout(subpassOrPassID);\r\n        if (subpassLayoutName.length === 0) {\r\n            layoutId = passLayoutId;\r\n        } else {\r\n            const subpassLayoutId = lg.locateChild(passLayoutId, subpassLayoutName);\r\n            layoutId = subpassLayoutId;\r\n        }\r\n    }\r\n    return layoutId;\r\n}\r\n\r\nexport function genHashValue (pass: RasterPass): void {\r\n    let hashCode = '';\r\n    for (const [name, raster] of pass.rasterViews) {\r\n        hashCode += hashCombineKey(name);\r\n        hashCode += hashCombineKey(raster.slotName);\r\n        hashCode += hashCombineKey(raster.accessType);\r\n        hashCode += hashCombineKey(raster.attachmentType);\r\n        hashCode += hashCombineKey(raster.loadOp);\r\n        hashCode += hashCombineKey(raster.storeOp);\r\n        hashCode += hashCombineKey(raster.clearFlags);\r\n        hashCode += hashCombineKey(raster.clearColor.x);\r\n        hashCode += hashCombineKey(raster.clearColor.y);\r\n        hashCode += hashCombineKey(raster.clearColor.z);\r\n        hashCode += hashCombineKey(raster.clearColor.w);\r\n        hashCode += hashCombineKey(raster.slotID);\r\n        hashCode += hashCombineKey(raster.shaderStageFlags);\r\n    }\r\n    for (const [name, computes] of pass.computeViews) {\r\n        hashCode += hashCombineKey(name);\r\n        for (const compute of computes) {\r\n            hashCode += hashCombineKey(compute.name);\r\n            hashCode += hashCombineKey(compute.accessType);\r\n            hashCode += hashCombineKey(compute.clearFlags);\r\n            hashCode += hashCombineKey(compute.clearValueType);\r\n            hashCode += hashCombineKey(compute.clearValue.x);\r\n            hashCode += hashCombineKey(compute.clearValue.y);\r\n            hashCode += hashCombineKey(compute.clearValue.z);\r\n            hashCode += hashCombineKey(compute.clearValue.w);\r\n            hashCode += hashCombineKey(compute.shaderStageFlags);\r\n        }\r\n    }\r\n    hashCode += hashCombineKey(pass.showStatistics ? 1 : 0);\r\n    pass.hashValue = hashCombineStr(hashCode);\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n****************************************************************************/\r\n\r\nexport const enum directional {\r\n    undirected = 0,\r\n    directed = 1,\r\n    bidirectional = 2,\r\n}\r\n\r\nexport const enum parallel {\r\n    disallow = 0,\r\n    allow = 1,\r\n}\r\n\r\nexport const enum traversal {\r\n    none = 0,\r\n    incidence = 1 << 0,\r\n    bidirectional = 1 << 1,\r\n    adjacency = 1 << 2,\r\n    vertex_list = 1 << 3,\r\n    edge_list = 1 << 4,\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// Vertex\r\n//--------------------------------------------------------------------------\r\nexport interface Vertex {\r\n    nullVertex (): Vertex | null;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// Vertex Descriptor\r\n//--------------------------------------------------------------------------\r\nexport type vertex_descriptor = number | Vertex;\r\n\r\n//--------------------------------------------------------------------------\r\n// Edge\r\n//--------------------------------------------------------------------------\r\nexport interface Edge {\r\n    getProperty (): unknown;\r\n    source: vertex_descriptor;\r\n    target: vertex_descriptor;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// Edge Descriptor\r\n//--------------------------------------------------------------------------\r\nexport class ED {\r\n    constructor (source: vertex_descriptor, target: vertex_descriptor) {\r\n        this.source = source;\r\n        this.target = target;\r\n    }\r\n    equals (rhs: ED): boolean {\r\n        return this.source === rhs.source\r\n            && this.target === rhs.target;\r\n    }\r\n    source: vertex_descriptor;\r\n    target: vertex_descriptor;\r\n}\r\n\r\n// Edge Descriptor with Property\r\nexport class EPD {\r\n    constructor (source: vertex_descriptor, target: vertex_descriptor, edge: Edge) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.edge = edge;\r\n    }\r\n    equals (rhs: EPD): boolean {\r\n        return this.edge === rhs.edge;\r\n    }\r\n    source: vertex_descriptor;\r\n    target: vertex_descriptor;\r\n    readonly edge: Edge;\r\n}\r\n\r\n// Edge Descriptor\r\nexport type edge_descriptor = ED | EPD;\r\n\r\n//--------------------------------------------------------------------------\r\n// OutEdge\r\n//--------------------------------------------------------------------------\r\n// OutEdge\r\nexport class OutE {\r\n    constructor (target: vertex_descriptor) {\r\n        this.target = target;\r\n    }\r\n    equals (rhs: OutE): boolean {\r\n        return this.target === rhs.target;\r\n    }\r\n    target: vertex_descriptor;\r\n}\r\n\r\n// OutEdge(Property)\r\nexport class OutEP {\r\n    constructor (target: vertex_descriptor, edge: Edge) {\r\n        this.target = target;\r\n        this.edge = edge;\r\n    }\r\n    equals (rhs: OutEP): boolean {\r\n        return this.target === rhs.target;\r\n    }\r\n    getProperty (): unknown {\r\n        return this.edge.getProperty();\r\n    }\r\n    target: vertex_descriptor;\r\n    readonly edge: Edge;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// OutEdge Iterator\r\n//--------------------------------------------------------------------------\r\nexport class OutEI implements IterableIterator<ED> {\r\n    constructor (iterator: IterableIterator<OutE>, source: vertex_descriptor) {\r\n        this.iterator = iterator;\r\n        this.source = source;\r\n    }\r\n    [Symbol.iterator] (): OutEI {\r\n        return this;\r\n    }\r\n    next (): IteratorResult<ED> {\r\n        const res = this.iterator.next();\r\n        if (res.done) {\r\n            return { value: undefined, done: true };\r\n        } else {\r\n            return { value: new ED(this.source, res.value.target), done: false };\r\n        }\r\n    }\r\n    readonly iterator: IterableIterator<OutE>;\r\n    readonly source: vertex_descriptor;\r\n}\r\n\r\n// OutEdge(Property) Iterator\r\nexport class OutEPI implements IterableIterator<EPD> {\r\n    constructor (iterator: IterableIterator<OutEP>, source: vertex_descriptor) {\r\n        this.iterator = iterator;\r\n        this.source = source;\r\n    }\r\n    [Symbol.iterator] (): OutEPI {\r\n        return this;\r\n    }\r\n    next (): IteratorResult<EPD> {\r\n        const res = this.iterator.next();\r\n        if (res.done) {\r\n            return { value: undefined, done: true };\r\n        } else {\r\n            return { value: new EPD(this.source, res.value.target, res.value.edge), done: false };\r\n        }\r\n    }\r\n    readonly iterator: IterableIterator<OutEP>;\r\n    readonly source: vertex_descriptor;\r\n}\r\n\r\n// OutEdge Iterator\r\nexport type out_edge_iterator = OutEI | OutEPI;\r\n\r\n//--------------------------------------------------------------------------\r\n// InEdge Iterator\r\n//--------------------------------------------------------------------------\r\n// InEdge Iterator\r\nexport class InEI implements IterableIterator<ED> {\r\n    constructor (iterator: IterableIterator<OutE>, source: vertex_descriptor) {\r\n        this.iterator = iterator;\r\n        this.source = source;\r\n    }\r\n    [Symbol.iterator] (): InEI {\r\n        return this;\r\n    }\r\n    next (): IteratorResult<ED> {\r\n        const res = this.iterator.next();\r\n        if (res.done) {\r\n            return { value: undefined, done: true };\r\n        } else {\r\n            return { value: new ED(res.value.target, this.source), done: false };\r\n        }\r\n    }\r\n    readonly iterator: IterableIterator<OutE>;\r\n    readonly source: vertex_descriptor;\r\n}\r\n\r\n// InEdge(Property) Iterator\r\nexport class InEPI implements IterableIterator<EPD> {\r\n    constructor (iterator: IterableIterator<OutEP>, source: vertex_descriptor) {\r\n        this.iterator = iterator;\r\n        this.source = source;\r\n    }\r\n    [Symbol.iterator] (): InEPI {\r\n        return this;\r\n    }\r\n    next (): IteratorResult<EPD> {\r\n        const res = this.iterator.next();\r\n        if (res.done) {\r\n            return { value: undefined, done: true };\r\n        } else {\r\n            return { value: new EPD(res.value.target, this.source, res.value.edge), done: false };\r\n        }\r\n    }\r\n    readonly iterator: IterableIterator<OutEP>;\r\n    readonly source: vertex_descriptor;\r\n}\r\n\r\n// InEdge Iterator\r\nexport type in_edge_iterator = InEI | InEPI;\r\n\r\n//--------------------------------------------------------------------------\r\n// Graph\r\n//--------------------------------------------------------------------------\r\nexport interface Graph {\r\n    // readonly directed_category: directional;\r\n    // readonly edge_parallel_category: parallel;\r\n    // readonly traversal_category: traversal;\r\n\r\n    readonly N: number | null; // nullVertex (): vertex_descriptor | null;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// IncidenceGraph\r\n//--------------------------------------------------------------------------\r\nexport interface IncidenceGraph extends Graph {\r\n    edge (u: vertex_descriptor, v: vertex_descriptor): boolean;\r\n    source (e: edge_descriptor): vertex_descriptor;\r\n    target (e: edge_descriptor): vertex_descriptor;\r\n    /** Return out edge iterator of the vertex */\r\n    oe (v: vertex_descriptor): out_edge_iterator;\r\n    /** Return out degree of the vertex */\r\n    od (v: vertex_descriptor): number;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// BidirectionalGraph\r\n//--------------------------------------------------------------------------\r\nexport interface BidirectionalGraph extends IncidenceGraph {\r\n    /** Return in edge iterator of the vertex */\r\n    ie (v: vertex_descriptor): in_edge_iterator;\r\n    /** Return in degree of the vertex */\r\n    id (v: vertex_descriptor): number;\r\n    /** Return degree of the vertex */\r\n    d (v: vertex_descriptor): number;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// AdjacencyGraph\r\n//--------------------------------------------------------------------------\r\n// Adjacency Iterator\r\nexport class AdjI implements IterableIterator<vertex_descriptor> {\r\n    constructor (graph: IncidenceGraph, iterator: OutEI) {\r\n        this.graph = graph;\r\n        this.iterator = iterator;\r\n    }\r\n    [Symbol.iterator] (): AdjI {\r\n        return this;\r\n    }\r\n    next (): IteratorResult<vertex_descriptor> {\r\n        const res = this.iterator.next();\r\n        if (res.done) {\r\n            return { value: undefined, done: true };\r\n        } else {\r\n            return { value: this.graph.target(res.value), done: false };\r\n        }\r\n    }\r\n    readonly graph: IncidenceGraph;\r\n    readonly iterator: OutEI;\r\n}\r\n\r\nexport class AdjPI implements IterableIterator<vertex_descriptor> {\r\n    constructor (graph: IncidenceGraph, iterator: OutEPI) {\r\n        this.graph = graph;\r\n        this.iterator = iterator;\r\n    }\r\n    [Symbol.iterator] (): AdjPI {\r\n        return this;\r\n    }\r\n    next (): IteratorResult<vertex_descriptor> {\r\n        const res = this.iterator.next();\r\n        if (res.done) {\r\n            return { value: undefined, done: true };\r\n        } else {\r\n            return { value: this.graph.target(res.value), done: false };\r\n        }\r\n    }\r\n    readonly graph: IncidenceGraph;\r\n    readonly iterator: OutEPI;\r\n}\r\n\r\n// Adjacency Iterator\r\nexport type adjacency_iterator = AdjI | AdjPI;\r\n\r\n// AdjacencyGraph\r\nexport interface AdjacencyGraph extends Graph {\r\n    /** Return adjacenct vertex iterator */\r\n    adj (v: vertex_descriptor): adjacency_iterator;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// VertexListGraph\r\n//--------------------------------------------------------------------------\r\nexport interface VertexListGraph extends Graph {\r\n    /** Return vertex iterator */\r\n    v (): IterableIterator<vertex_descriptor>;\r\n    /** Return number of vertices */\r\n    nv (): number;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// EdgeListGraph\r\n//--------------------------------------------------------------------------\r\nexport interface EdgeListGraph extends Graph {\r\n    // edges (): IterableIterator<edge_descriptor>;\r\n    /** Return number of edges */\r\n    ne (): number;\r\n    source (e: edge_descriptor): vertex_descriptor;\r\n    target (e: edge_descriptor): vertex_descriptor;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// MutableGraph\r\n//--------------------------------------------------------------------------\r\nexport interface MutableGraph extends Graph {\r\n    addVertex (...args): vertex_descriptor;\r\n    // clearVertex (v: vertex_descriptor): void;\r\n    // removeVertex (v: vertex_descriptor): void;\r\n    addEdge (u: vertex_descriptor, v: vertex_descriptor, p?: unknown): edge_descriptor | null;\r\n    // removeEdges (u: vertex_descriptor, v: vertex_descriptor): void;\r\n    // removeEdge (e: edge_descriptor): void;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// PropertyMap\r\n//--------------------------------------------------------------------------\r\nexport interface PropertyMap {\r\n    get (x: vertex_descriptor | edge_descriptor): unknown;\r\n}\r\n\r\nexport interface MutableVertexPropertyMap<T> extends PropertyMap {\r\n    put (x: vertex_descriptor, value: T): void;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// PropertyGraph\r\n//--------------------------------------------------------------------------\r\nexport interface PropertyGraph extends Graph {\r\n    // get (tag: string): PropertyMap;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// NamedGraph\r\n//--------------------------------------------------------------------------\r\nexport interface NamedGraph extends Graph {\r\n    vertexName (v: vertex_descriptor): string;\r\n    // vertexNameMap (): PropertyMap;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// ComponentGraph\r\n//--------------------------------------------------------------------------\r\nexport interface ComponentGraph extends Graph {\r\n    // readonly components: string[];\r\n    // m (id: number, v: vertex_descriptor): unknown;\r\n    // componentMap (id: number): unknown; // should be PropertyMap\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// PolymorphicGraph\r\n//--------------------------------------------------------------------------\r\nexport interface PolymorphicGraph extends Graph {\r\n    /** Checks if a vertex currently holds a given type */\r\n    h (id: number, v: vertex_descriptor): boolean;\r\n    /** Returns the zero-based index of the alternative held by the vertex */\r\n    w (v: vertex_descriptor): number;\r\n    object (v: vertex_descriptor): unknown;\r\n    value (id: number, v: vertex_descriptor): unknown;\r\n    // tryValue(id: number, v: vertex_descriptor): unknown;\r\n    visitVertex (visitor: unknown, v: vertex_descriptor): void;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// ReferenceGraph\r\n//--------------------------------------------------------------------------\r\nexport type reference_descriptor = ED | EPD;\r\nexport type child_iterator = OutEI | OutEPI;\r\nexport type parent_iterator = InEI | InEPI;\r\n\r\nexport interface ReferenceGraph extends Graph {\r\n    reference (u: vertex_descriptor, v: vertex_descriptor): boolean;\r\n    parent (e: reference_descriptor): vertex_descriptor;\r\n    child (e: reference_descriptor): vertex_descriptor;\r\n    // parents (v: vertex_descriptor): parent_iterator;\r\n    children (v: vertex_descriptor): child_iterator;\r\n    // numParents (v: vertex_descriptor): number;\r\n    numChildren (v: vertex_descriptor): number;\r\n    getParent (v: vertex_descriptor): vertex_descriptor | null;\r\n    // isAncestor (ancestor: vertex_descriptor, descendent: vertex_descriptor): boolean;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// MutableReferenceGraph\r\n//--------------------------------------------------------------------------\r\nexport interface MutableReferenceGraph extends ReferenceGraph {\r\n    addReference (u: vertex_descriptor, v: vertex_descriptor, p?: unknown): reference_descriptor | null;\r\n    // removeReference (e: reference_descriptor): void;\r\n    // removeReferences (u: vertex_descriptor, v: vertex_descriptor): void;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// ParentGraph\r\n//--------------------------------------------------------------------------\r\nexport interface ParentGraph extends ReferenceGraph, NamedGraph {\r\n    locateChild (v: vertex_descriptor | null, name: string): vertex_descriptor | null;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// AddressableGraph\r\n//--------------------------------------------------------------------------\r\nexport interface AddressableGraph extends ParentGraph {\r\n    // addressable (absPath: string): boolean;\r\n    locate (absPath: string): vertex_descriptor | null;\r\n    locateRelative (path: string, start?: vertex_descriptor | null): vertex_descriptor | null;\r\n    path (v: vertex_descriptor): string;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// UuidGraph\r\n//--------------------------------------------------------------------------\r\nexport interface UuidGraph<Key> extends Graph {\r\n    contains (key: Key): boolean;\r\n    vertex (key: Key): vertex_descriptor;\r\n    find (key: Key): vertex_descriptor | null;\r\n}\r\n\r\n//--------------------------------------------------------------------------\r\n// Help Functions\r\n//--------------------------------------------------------------------------\r\nexport function reindexEdgeList (el: (OutE|OutEP)[], u: number): void {\r\n    for (const e of el) {\r\n        if (e.target as number > u) {\r\n            --(e.target as number);\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeAllEdgesFromList (edges: Set<Edge>, el: OutEP[], v: vertex_descriptor): void {\r\n    const sz = el.length;\r\n    for (let i = 0; i !== sz; ++i) {\r\n        const oe = el[i];\r\n        if (oe.target === v) {\r\n            // NOTE: Wihtout this skip, this loop will double-delete\r\n            // properties of loop edges. This solution is based on the\r\n            // observation that the incidence edges of a vertex with a loop\r\n            // are adjacent in the out edge list. This *may* actually hold\r\n            // for multisets also.\r\n            const skip = (i + 1 !== sz && oe.edge === el[i + 1].edge);\r\n            edges.delete(oe.edge);\r\n            if (skip) {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getPath (g: ReferenceGraph & NamedGraph, v: vertex_descriptor | null): string {\r\n    if (v === g.N) {\r\n        return '';\r\n    }\r\n    const paths: string[] = [];\r\n    for (; v !== g.N; v = g.getParent(v as vertex_descriptor)) {\r\n        paths.push(g.vertexName(v as vertex_descriptor));\r\n    }\r\n    let path = '';\r\n    for (let i = paths.length; i-- > 0;) {\r\n        path += '/';\r\n        path += paths[i];\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function findRelative (g: ParentGraph, v: vertex_descriptor | null, path: string): vertex_descriptor | null {\r\n    const pseudo = g.N;\r\n    const names = path.split('/');\r\n\r\n    if (names.length === 0) { // empty string\r\n        return v;\r\n    }\r\n\r\n    let curr = v;\r\n    let start = 0;\r\n    if (names[0] === '') { // absolute path\r\n        // reset v to pseudo root\r\n        curr = pseudo;\r\n        // skip pseudo root\r\n        ++start;\r\n    }\r\n    // locating begins\r\n    for (let i = start; i !== names.length; ++i) {\r\n        const name = names[i];\r\n        if (name === '') { // empty name, do nothing\r\n            continue;\r\n        }\r\n        if (name === '.') { // current node, do nothing\r\n            continue;\r\n        }\r\n        if (name === '..') { // parent node\r\n            if (curr === pseudo) {\r\n                // current node is pseudo already, return not found\r\n                return pseudo;\r\n            }\r\n            curr = g.getParent(curr as vertex_descriptor);\r\n            continue;\r\n        }\r\n        curr = g.locateChild(curr, name);\r\n        if (curr === pseudo) { // child not found\r\n            return pseudo;\r\n        }\r\n    }\r\n    return curr;\r\n}\r\n\r\n//=======================================================================\r\n// DFS\r\n// Based on boost/graph/depth_first_search.hpp\r\n//=======================================================================\r\n\r\n//=======================================================================\r\n// Copyright 1997, 1998, 1999, 2000 University of Notre Dame.\r\n// Copyright 2003 Bruce Barr\r\n// Authors: Andrew Lumsdaine, Lie-Quan Lee, Jeremy G. Siek\r\n//\r\n// Distributed under the Boost Software License, Version 1.0. (See\r\n// accompanying file LICENSE_1_0.txt or copy at\r\n// http://www.boost.org/LICENSE_1_0.txt)\r\n//=======================================================================\r\n\r\nexport interface TerminatorFunc {\r\n    terminate (v: vertex_descriptor, g: IncidenceGraph): boolean;\r\n}\r\n\r\nclass NoTermination implements TerminatorFunc {\r\n    terminate (v: vertex_descriptor, g: IncidenceGraph): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction getDefaultStartingVertex (g: IncidenceGraph & VertexListGraph): vertex_descriptor | null {\r\n    const iter = g.v();\r\n    const v = iter.next();\r\n    if (v.done) {\r\n        return g.N;\r\n    } else {\r\n        return v.value;\r\n    }\r\n}\r\n\r\nexport interface GraphVisitor {\r\n    // 0. before dfs\r\n    initializeVertex (v: vertex_descriptor, g: IncidenceGraph): void;\r\n    // 1. dfs starting vertex (usually the root)\r\n    startVertex (v: vertex_descriptor, g: IncidenceGraph): void;\r\n    // 2. vertex discovered\r\n    discoverVertex (v: vertex_descriptor, g: IncidenceGraph): void;\r\n    // 3. edge discovered\r\n    examineEdge (e: edge_descriptor, g: IncidenceGraph): void;\r\n    // 4(a). is tree edge\r\n    treeEdge (e: edge_descriptor, g: IncidenceGraph): void;\r\n    // 4(b). is back edge\r\n    backEdge (e: edge_descriptor, g: IncidenceGraph): void;\r\n    // 4(c). is forward or cross edge\r\n    forwardOrCrossEdge (e: edge_descriptor, g: IncidenceGraph): void;\r\n    // 5. edge finished\r\n    finishEdge (e: edge_descriptor, g: IncidenceGraph): void;\r\n    // 6. vertex finished\r\n    finishVertex (v: vertex_descriptor, g: IncidenceGraph): void;\r\n}\r\n\r\nexport enum GraphColor {\r\n    WHITE,\r\n    GRAY,\r\n    GREEN,\r\n    RED,\r\n    BLACK,\r\n}\r\n\r\nclass VertexInfo {\r\n    constructor (\r\n        v: vertex_descriptor,\r\n        e: edge_descriptor | null,\r\n        iter: out_edge_iterator | null,\r\n    ) {\r\n        this.v = v;\r\n        this.e = e;\r\n        this.iter = iter;\r\n    }\r\n    v: vertex_descriptor;\r\n    e: edge_descriptor | null;\r\n    iter: out_edge_iterator | null;\r\n}\r\n\r\nfunction depthFirstVisitImpl (\r\n    g: IncidenceGraph,\r\n    u: vertex_descriptor,\r\n    visitor: GraphVisitor,\r\n    color: MutableVertexPropertyMap<GraphColor>,\r\n    func: TerminatorFunc,\r\n): void {\r\n    let srcE: edge_descriptor | null = null;\r\n    let ei: out_edge_iterator | null = null;\r\n    const stack = new Array<VertexInfo>();\r\n\r\n    color.put(u, GraphColor.GRAY);\r\n    visitor.discoverVertex(u, g);\r\n\r\n    ei = g.oe(u);\r\n    if (func.terminate(u, g)) {\r\n        // If this vertex terminates the search, we push empty range\r\n        stack.push(new VertexInfo(u, null, null));\r\n    } else {\r\n        stack.push(new VertexInfo(u, null, ei));\r\n    }\r\n\r\n    while (stack.length) {\r\n        const back = stack.pop()!;\r\n        u = back.v;\r\n        srcE = back.e;\r\n        ei = back.iter;\r\n        // finish_edge has to be called here, not after the\r\n        // loop. Think of the pop as the return from a recursive call.\r\n        if (srcE !== null) {\r\n            visitor.finishEdge(srcE, g);\r\n        }\r\n        if (ei) { // has out edges\r\n            for (let ev = ei.next(); !ev.done; ev = ei.next()) {\r\n                const e = ev.value;\r\n                const v = e.target;\r\n                visitor.examineEdge(e, g);\r\n                const vColor = color.get(v);\r\n                if (vColor === GraphColor.WHITE) {\r\n                    visitor.treeEdge(e, g);\r\n                    srcE = e;\r\n                    stack.push(new VertexInfo(u, srcE, ei));\r\n                    u = v;\r\n                    color.put(u, GraphColor.GRAY);\r\n                    visitor.discoverVertex(u, g);\r\n                    ei = g.oe(u);\r\n                    if (func.terminate(u, g)) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (vColor === GraphColor.GRAY) {\r\n                        visitor.backEdge(e, g);\r\n                    } else {\r\n                        visitor.forwardOrCrossEdge(e, g);\r\n                    }\r\n                    visitor.finishEdge(e, g);\r\n                }\r\n            }\r\n        }\r\n        color.put(u, GraphColor.BLACK);\r\n        visitor.finishVertex(u, g);\r\n    }\r\n}\r\n\r\nexport function depthFirstSearch (\r\n    g: IncidenceGraph & VertexListGraph,\r\n    visitor: GraphVisitor,\r\n    color: MutableVertexPropertyMap<GraphColor>,\r\n    startVertex: vertex_descriptor | null = null,\r\n): void {\r\n    // get start vertex\r\n    startVertex = startVertex || getDefaultStartingVertex(g);\r\n    // graph is empty, do nothing\r\n    if (startVertex === null || g.nv() === 0) {\r\n        return;\r\n    }\r\n    // initialize vertex and color map\r\n    for (const u of g.v()) {\r\n        color.put(u, GraphColor.WHITE);\r\n        visitor.initializeVertex(u, g);\r\n    }\r\n    // start DFS\r\n    const terminator = new NoTermination();\r\n    // try starting from startVertex\r\n    if (startVertex !== getDefaultStartingVertex(g)) {\r\n        visitor.startVertex(startVertex, g);\r\n        depthFirstVisitImpl(g, startVertex, visitor, color, terminator);\r\n    }\r\n    // try starting from each vertex\r\n    for (const u of g.v()) {\r\n        // if vertex is not visited, start DFS\r\n        if (color.get(u) === GraphColor.WHITE) {\r\n            visitor.startVertex(u, g);\r\n            depthFirstVisitImpl(g, u, visitor, color, terminator);\r\n        }\r\n    }\r\n}\r\n\r\nexport function depthFirstVisit (\r\n    g: IncidenceGraph,\r\n    u: vertex_descriptor,\r\n    visitor: GraphVisitor,\r\n    color: MutableVertexPropertyMap<GraphColor>,\r\n    func: TerminatorFunc = new NoTermination(),\r\n): void {\r\n    visitor.startVertex(u, g);\r\n    depthFirstVisitImpl(g, u, visitor, color, func);\r\n}\r\n\r\nexport class DefaultVisitor implements GraphVisitor {\r\n    initializeVertex (v: vertex_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    startVertex (v: vertex_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    discoverVertex (v: vertex_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    examineEdge (e: edge_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    treeEdge (e: edge_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    backEdge (e: edge_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    forwardOrCrossEdge (e: edge_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    finishEdge (e: edge_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n    finishVertex (v: vertex_descriptor, g: IncidenceGraph): void {\r\n        // do nothing\r\n    }\r\n}\r\n\r\nexport class ReferenceGraphView <BaseGraph extends ReferenceGraph & VertexListGraph>\r\nimplements IncidenceGraph, VertexListGraph {\r\n    constructor (g: BaseGraph) {\r\n        this.g = g;\r\n        this.N = g.N;\r\n        // this.directed_category = directional.directed;\r\n        // this.edge_parallel_category = parallel.allow;\r\n        // this.traversal_category = traversal.incidence | traversal.vertex_list;\r\n    }\r\n    declare readonly N: number | null;\r\n\r\n    edge (u: vertex_descriptor, v: vertex_descriptor): boolean {\r\n        return this.g.reference(u, v);\r\n    }\r\n    source (e: edge_descriptor): vertex_descriptor {\r\n        return this.g.parent(e);\r\n    }\r\n    target (e: edge_descriptor): vertex_descriptor {\r\n        return this.g.child(e);\r\n    }\r\n    oe (v: vertex_descriptor): out_edge_iterator {\r\n        return this.g.children(v);\r\n    }\r\n    od (v: vertex_descriptor): number {\r\n        return this.g.numChildren(v);\r\n    }\r\n    v (): IterableIterator<vertex_descriptor> {\r\n        return this.g.v();\r\n    }\r\n    nv (): number {\r\n        return this.g.nv();\r\n    }\r\n    // readonly directed_category: directional;\r\n    // readonly edge_parallel_category: parallel;\r\n    // readonly traversal_category: traversal;\r\n    g: BaseGraph;\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport { AdjI, AdjacencyGraph, BidirectionalGraph, ComponentGraph, ED, InEI, MutableGraph, MutableReferenceGraph, NamedGraph, OutE, OutEI, PolymorphicGraph, PropertyGraph, ReferenceGraph, UuidGraph, VertexListGraph } from './graph';\r\nimport type { Material } from '../../asset/assets';\r\nimport type { Camera } from '../../render-scene/scene/camera';\r\nimport type { Buffer, Framebuffer, RenderPass, Sampler, SamplerInfo, Swapchain, Texture } from '../../gfx';\r\nimport { AccessFlagBit, ClearFlagBit, Color, Format, LoadOp, SampleCount, ShaderStageFlagBit, StoreOp, TextureFlagBit, TextureType, Viewport } from '../../gfx';\r\nimport type { CopyPair, MovePair, ResolvePair, UploadPair } from './types';\r\nimport { AccessType, AttachmentType, ClearValueType, LightInfo, QueueHint, ResourceDimension, ResourceFlags, ResourceResidency, SceneFlags, RenderCommonObjectPool } from './types';\r\nimport type { RenderScene } from '../../render-scene/core/render-scene';\r\nimport type { RenderWindow } from '../../render-scene/core/render-window';\r\nimport type { Light, Model } from '../../render-scene/scene';\r\nimport { RecyclePool } from '../../core/memop';\r\n\r\nfunction resetColor (v: Color): void {\r\n    v.x = 0;\r\n    v.y = 0;\r\n    v.z = 0;\r\n    v.w = 0;\r\n}\r\n\r\nfunction resetViewport (v: Viewport): void {\r\n    v.left = 0;\r\n    v.top = 0;\r\n    v.width = 0;\r\n    v.height = 0;\r\n    v.minDepth = 0;\r\n    v.maxDepth = 1;\r\n}\r\n\r\nexport class ClearValue {\r\n    constructor (x = 0, y = 0, z = 0, w = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n    reset (x: number, y: number, z: number, w: number): void {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n    declare x: number;\r\n    declare y: number;\r\n    declare z: number;\r\n    declare w: number;\r\n}\r\n\r\nexport class RasterView {\r\n    constructor (\r\n        slotName = '',\r\n        accessType: AccessType = AccessType.WRITE,\r\n        attachmentType: AttachmentType = AttachmentType.RENDER_TARGET,\r\n        loadOp: LoadOp = LoadOp.LOAD,\r\n        storeOp: StoreOp = StoreOp.STORE,\r\n        clearFlags: ClearFlagBit = ClearFlagBit.ALL,\r\n        clearColor: Color = new Color(),\r\n        shaderStageFlags: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n    ) {\r\n        this.slotName = slotName;\r\n        this.accessType = accessType;\r\n        this.attachmentType = attachmentType;\r\n        this.loadOp = loadOp;\r\n        this.storeOp = storeOp;\r\n        this.clearFlags = clearFlags;\r\n        this.clearColor = clearColor;\r\n        this.shaderStageFlags = shaderStageFlags;\r\n    }\r\n    reset (\r\n        slotName: string,\r\n        accessType: AccessType,\r\n        attachmentType: AttachmentType,\r\n        loadOp: LoadOp,\r\n        storeOp: StoreOp,\r\n        clearFlags: ClearFlagBit,\r\n        shaderStageFlags: ShaderStageFlagBit,\r\n    ): void {\r\n        this.slotName = slotName;\r\n        this.slotName1 = '';\r\n        this.accessType = accessType;\r\n        this.attachmentType = attachmentType;\r\n        this.loadOp = loadOp;\r\n        this.storeOp = storeOp;\r\n        this.clearFlags = clearFlags;\r\n        resetColor(this.clearColor);\r\n        this.slotID = 0;\r\n        this.shaderStageFlags = shaderStageFlags;\r\n    }\r\n    declare slotName: string;\r\n    slotName1 = '';\r\n    declare accessType: AccessType;\r\n    declare attachmentType: AttachmentType;\r\n    declare loadOp: LoadOp;\r\n    declare storeOp: StoreOp;\r\n    declare clearFlags: ClearFlagBit;\r\n    declare readonly clearColor: Color;\r\n    slotID = 0;\r\n    declare shaderStageFlags: ShaderStageFlagBit;\r\n}\r\n\r\nexport class ComputeView {\r\n    constructor (\r\n        name = '',\r\n        accessType: AccessType = AccessType.READ,\r\n        clearFlags: ClearFlagBit = ClearFlagBit.NONE,\r\n        clearValueType: ClearValueType = ClearValueType.NONE,\r\n        clearValue: ClearValue = new ClearValue(),\r\n        shaderStageFlags: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n    ) {\r\n        this.name = name;\r\n        this.accessType = accessType;\r\n        this.clearFlags = clearFlags;\r\n        this.clearValueType = clearValueType;\r\n        this.clearValue = clearValue;\r\n        this.shaderStageFlags = shaderStageFlags;\r\n    }\r\n    reset (\r\n        name: string,\r\n        accessType: AccessType,\r\n        clearFlags: ClearFlagBit,\r\n        clearValueType: ClearValueType,\r\n        shaderStageFlags: ShaderStageFlagBit,\r\n    ): void {\r\n        this.name = name;\r\n        this.accessType = accessType;\r\n        this.plane = 0;\r\n        this.clearFlags = clearFlags;\r\n        this.clearValueType = clearValueType;\r\n        this.clearValue.reset(0, 0, 0, 0);\r\n        this.shaderStageFlags = shaderStageFlags;\r\n    }\r\n    declare name: string;\r\n    declare accessType: AccessType;\r\n    plane = 0;\r\n    declare clearFlags: ClearFlagBit;\r\n    declare clearValueType: ClearValueType;\r\n    declare readonly clearValue: ClearValue;\r\n    declare shaderStageFlags: ShaderStageFlagBit;\r\n}\r\n\r\nexport class ResourceDesc {\r\n    reset (): void {\r\n        this.dimension = ResourceDimension.BUFFER;\r\n        this.alignment = 0;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.depthOrArraySize = 0;\r\n        this.mipLevels = 0;\r\n        this.format = Format.UNKNOWN;\r\n        this.sampleCount = SampleCount.X1;\r\n        this.textureFlags = TextureFlagBit.NONE;\r\n        this.flags = ResourceFlags.NONE;\r\n        this.viewType = TextureType.TEX2D;\r\n    }\r\n    dimension: ResourceDimension = ResourceDimension.BUFFER;\r\n    alignment = 0;\r\n    width = 0;\r\n    height = 0;\r\n    depthOrArraySize = 0;\r\n    mipLevels = 0;\r\n    format: Format = Format.UNKNOWN;\r\n    sampleCount: SampleCount = SampleCount.X1;\r\n    textureFlags: TextureFlagBit = TextureFlagBit.NONE;\r\n    flags: ResourceFlags = ResourceFlags.NONE;\r\n    viewType: TextureType = TextureType.TEX2D;\r\n}\r\n\r\nexport class ResourceTraits {\r\n    constructor (residency: ResourceResidency = ResourceResidency.MANAGED) {\r\n        this.residency = residency;\r\n    }\r\n    reset (residency: ResourceResidency): void {\r\n        this.residency = residency;\r\n    }\r\n    declare residency: ResourceResidency;\r\n}\r\n\r\nexport class RenderSwapchain {\r\n    constructor (swapchain: Swapchain | null = null, isDepthStencil = false) {\r\n        this.swapchain = swapchain;\r\n        this.isDepthStencil = isDepthStencil;\r\n    }\r\n    reset (swapchain: Swapchain | null, isDepthStencil: boolean): void {\r\n        this.swapchain = swapchain;\r\n        this.renderWindow = null;\r\n        this.currentID = 0;\r\n        this.numBackBuffers = 0;\r\n        this.generation = 0xFFFFFFFF;\r\n        this.isDepthStencil = isDepthStencil;\r\n    }\r\n    declare /*pointer*/ swapchain: Swapchain | null;\r\n    /*pointer*/ renderWindow: RenderWindow | null = null;\r\n    currentID = 0;\r\n    numBackBuffers = 0;\r\n    generation = 0xFFFFFFFF;\r\n    declare isDepthStencil: boolean;\r\n}\r\n\r\nexport class ResourceStates {\r\n    reset (): void {\r\n        this.states = AccessFlagBit.NONE;\r\n    }\r\n    states: AccessFlagBit = AccessFlagBit.NONE;\r\n}\r\n\r\nexport class ManagedBuffer {\r\n    constructor (buffer: Buffer | null = null) {\r\n        this.buffer = buffer;\r\n    }\r\n    reset (buffer: Buffer | null): void {\r\n        this.buffer = buffer;\r\n        this.fenceValue = 0;\r\n    }\r\n    declare /*refcount*/ buffer: Buffer | null;\r\n    fenceValue = 0;\r\n}\r\n\r\nexport class PersistentBuffer {\r\n    constructor (buffer: Buffer | null = null) {\r\n        this.buffer = buffer;\r\n    }\r\n    reset (buffer: Buffer | null): void {\r\n        this.buffer = buffer;\r\n        this.fenceValue = 0;\r\n    }\r\n    declare /*refcount*/ buffer: Buffer | null;\r\n    fenceValue = 0;\r\n}\r\n\r\nexport class ManagedTexture {\r\n    constructor (texture: Texture | null = null) {\r\n        this.texture = texture;\r\n    }\r\n    reset (texture: Texture | null): void {\r\n        this.texture = texture;\r\n        this.fenceValue = 0;\r\n    }\r\n    declare /*refcount*/ texture: Texture | null;\r\n    fenceValue = 0;\r\n}\r\n\r\nexport class PersistentTexture {\r\n    constructor (texture: Texture | null = null) {\r\n        this.texture = texture;\r\n    }\r\n    reset (texture: Texture | null): void {\r\n        this.texture = texture;\r\n        this.fenceValue = 0;\r\n    }\r\n    declare /*refcount*/ texture: Texture | null;\r\n    fenceValue = 0;\r\n}\r\n\r\nexport class ManagedResource {\r\n    reset (): void {\r\n        this.unused = 0;\r\n    }\r\n    unused = 0;\r\n}\r\n\r\nexport class Subpass {\r\n    reset (): void {\r\n        this.rasterViews.clear();\r\n        this.computeViews.clear();\r\n        this.resolvePairs.length = 0;\r\n    }\r\n    readonly rasterViews: Map<string, RasterView> = new Map<string, RasterView>();\r\n    readonly computeViews: Map<string, ComputeView[]> = new Map<string, ComputeView[]>();\r\n    readonly resolvePairs: ResolvePair[] = [];\r\n}\r\n\r\n//=================================================================\r\n// SubpassGraph\r\n//=================================================================\r\n// Graph Concept\r\nexport class SubpassGraphVertex {\r\n    /** Out edge list */\r\n    readonly o: OutE[] = [];\r\n    /** In edge list */\r\n    readonly i: OutE[] = [];\r\n}\r\n//-----------------------------------------------------------------\r\n// ComponentGraph Concept\r\nexport const enum SubpassGraphComponent {\r\n    Name,\r\n    Subpass,\r\n}\r\n\r\nexport interface SubpassGraphComponentType {\r\n    [SubpassGraphComponent.Name]: string;\r\n    [SubpassGraphComponent.Subpass]: Subpass;\r\n}\r\n\r\n//-----------------------------------------------------------------\r\n// SubpassGraph Implementation\r\nexport class SubpassGraph implements BidirectionalGraph\r\n, AdjacencyGraph\r\n, VertexListGraph\r\n, MutableGraph\r\n, PropertyGraph\r\n, NamedGraph\r\n, ComponentGraph {\r\n    //-----------------------------------------------------------------\r\n    // Graph\r\n    /** null vertex descriptor */\r\n    readonly N = 0xFFFFFFFF;\r\n    // type edge_descriptor = ED;\r\n    //-----------------------------------------------------------------\r\n    // IncidenceGraph\r\n    // type out_edge_iterator = OutEI;\r\n    // type degree_size_type = number;\r\n    edge (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    source (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    target (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    oe (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    od (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // BidirectionalGraph\r\n    // type in_edge_iterator = InEI;\r\n    ie (v: number): InEI {\r\n        return new InEI(this.x[v].i.values(), v);\r\n    }\r\n    id (v: number): number {\r\n        return this.x[v].i.length;\r\n    }\r\n    d (v: number): number {\r\n        return this.od(v) + this.id(v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AdjacencyGraph\r\n    // type adjacency_iterator = AdjI;\r\n    adj (v: number): AdjI {\r\n        return new AdjI(this, this.oe(v));\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // VertexListGraph\r\n    v (): IterableIterator<number> {\r\n        return this.x.keys();\r\n    }\r\n    nv (): number {\r\n        return this.x.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // EdgeListGraph\r\n    ne (): number {\r\n        let numEdges = 0;\r\n        for (const v of this.v()) {\r\n            numEdges += this.od(v);\r\n        }\r\n        return numEdges;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableGraph\r\n    clear (): void {\r\n        // ComponentGraph\r\n        this._names.length = 0;\r\n        this._subpasses.length = 0;\r\n        // Graph Vertices\r\n        this.x.length = 0;\r\n    }\r\n    addVertex (\r\n        name: string,\r\n        subpass: Subpass,\r\n    ): number {\r\n        const vert = new SubpassGraphVertex();\r\n        const v = this.x.length;\r\n        this.x.push(vert);\r\n        this._names.push(name);\r\n        this._subpasses.push(subpass);\r\n        return v;\r\n    }\r\n    addEdge (u: number, v: number): ED | null {\r\n        // update in/out edge list\r\n        this.x[u].o.push(new OutE(v));\r\n        this.x[v].i.push(new OutE(u));\r\n        return new ED(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // NamedGraph\r\n    vertexName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ComponentGraph\r\n    getName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    setName (v: number, value: string): void {\r\n        this._names[v] = value;\r\n    }\r\n    getSubpass (v: number): Subpass {\r\n        return this._subpasses[v];\r\n    }\r\n    readonly x: SubpassGraphVertex[] = [];\r\n    readonly _names: string[] = [];\r\n    readonly _subpasses: Subpass[] = [];\r\n}\r\n\r\nexport class RasterSubpass {\r\n    constructor (subpassID = 0xFFFFFFFF, count = 1, quality = 0) {\r\n        this.subpassID = subpassID;\r\n        this.count = count;\r\n        this.quality = quality;\r\n    }\r\n    reset (subpassID: number, count: number, quality: number): void {\r\n        this.rasterViews.clear();\r\n        this.computeViews.clear();\r\n        this.resolvePairs.length = 0;\r\n        resetViewport(this.viewport);\r\n        this.subpassID = subpassID;\r\n        this.count = count;\r\n        this.quality = quality;\r\n        this.showStatistics = false;\r\n    }\r\n    readonly rasterViews: Map<string, RasterView> = new Map<string, RasterView>();\r\n    readonly computeViews: Map<string, ComputeView[]> = new Map<string, ComputeView[]>();\r\n    readonly resolvePairs: ResolvePair[] = [];\r\n    readonly viewport: Viewport = new Viewport();\r\n    declare subpassID: number;\r\n    declare count: number;\r\n    declare quality: number;\r\n    showStatistics = false;\r\n}\r\n\r\nexport class ComputeSubpass {\r\n    constructor (subpassID = 0xFFFFFFFF) {\r\n        this.subpassID = subpassID;\r\n    }\r\n    reset (subpassID: number): void {\r\n        this.rasterViews.clear();\r\n        this.computeViews.clear();\r\n        this.subpassID = subpassID;\r\n    }\r\n    readonly rasterViews: Map<string, RasterView> = new Map<string, RasterView>();\r\n    readonly computeViews: Map<string, ComputeView[]> = new Map<string, ComputeView[]>();\r\n    declare subpassID: number;\r\n}\r\n\r\nexport class RasterPass {\r\n    reset (): void {\r\n        this.rasterViews.clear();\r\n        this.computeViews.clear();\r\n        this.attachmentIndexMap.clear();\r\n        this.textures.clear();\r\n        this.subpassGraph.clear();\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.count = 1;\r\n        this.quality = 0;\r\n        resetViewport(this.viewport);\r\n        this.versionName = '';\r\n        this.version = 0;\r\n        this.hashValue = 0;\r\n        this.showStatistics = false;\r\n    }\r\n    readonly rasterViews: Map<string, RasterView> = new Map<string, RasterView>();\r\n    readonly computeViews: Map<string, ComputeView[]> = new Map<string, ComputeView[]>();\r\n    readonly attachmentIndexMap: Map<string, number> = new Map<string, number>();\r\n    readonly textures: Map<string, ShaderStageFlagBit> = new Map<string, ShaderStageFlagBit>();\r\n    readonly subpassGraph: SubpassGraph = new SubpassGraph();\r\n    width = 0;\r\n    height = 0;\r\n    count = 1;\r\n    quality = 0;\r\n    readonly viewport: Viewport = new Viewport();\r\n    versionName = '';\r\n    version = 0;\r\n    hashValue = 0;\r\n    showStatistics = false;\r\n}\r\n\r\nexport class PersistentRenderPassAndFramebuffer {\r\n    constructor (renderPass: RenderPass | null = null, framebuffer: Framebuffer | null = null) {\r\n        this.renderPass = renderPass;\r\n        this.framebuffer = framebuffer;\r\n    }\r\n    reset (renderPass: RenderPass | null, framebuffer: Framebuffer | null): void {\r\n        this.renderPass = renderPass;\r\n        this.framebuffer = framebuffer;\r\n        this.clearColors.length = 0;\r\n        this.clearDepth = 0;\r\n        this.clearStencil = 0;\r\n    }\r\n    declare /*refcount*/ renderPass: RenderPass | null;\r\n    declare /*refcount*/ framebuffer: Framebuffer | null;\r\n    readonly clearColors: Color[] = [];\r\n    clearDepth = 0;\r\n    clearStencil = 0;\r\n}\r\n\r\nexport class FormatView {\r\n    reset (): void {\r\n        this.format = Format.UNKNOWN;\r\n    }\r\n    format: Format = Format.UNKNOWN;\r\n}\r\n\r\nexport class SubresourceView {\r\n    reset (): void {\r\n        this.textureView = null;\r\n        this.format = Format.UNKNOWN;\r\n        this.indexOrFirstMipLevel = 0;\r\n        this.numMipLevels = 0;\r\n        this.firstArraySlice = 0;\r\n        this.numArraySlices = 0;\r\n        this.firstPlane = 0;\r\n        this.numPlanes = 0;\r\n    }\r\n    /*refcount*/ textureView: Texture | null = null;\r\n    format: Format = Format.UNKNOWN;\r\n    indexOrFirstMipLevel = 0;\r\n    numMipLevels = 0;\r\n    firstArraySlice = 0;\r\n    numArraySlices = 0;\r\n    firstPlane = 0;\r\n    numPlanes = 0;\r\n}\r\n\r\n//=================================================================\r\n// ResourceGraph\r\n//=================================================================\r\n// PolymorphicGraph Concept\r\nexport const enum ResourceGraphValue {\r\n    Managed,\r\n    ManagedBuffer,\r\n    ManagedTexture,\r\n    PersistentBuffer,\r\n    PersistentTexture,\r\n    Framebuffer,\r\n    Swapchain,\r\n    FormatView,\r\n    SubresourceView,\r\n}\r\n\r\nexport function getResourceGraphValueName (e: ResourceGraphValue): string {\r\n    switch (e) {\r\n    case ResourceGraphValue.Managed: return 'Managed';\r\n    case ResourceGraphValue.ManagedBuffer: return 'ManagedBuffer';\r\n    case ResourceGraphValue.ManagedTexture: return 'ManagedTexture';\r\n    case ResourceGraphValue.PersistentBuffer: return 'PersistentBuffer';\r\n    case ResourceGraphValue.PersistentTexture: return 'PersistentTexture';\r\n    case ResourceGraphValue.Framebuffer: return 'Framebuffer';\r\n    case ResourceGraphValue.Swapchain: return 'Swapchain';\r\n    case ResourceGraphValue.FormatView: return 'FormatView';\r\n    case ResourceGraphValue.SubresourceView: return 'SubresourceView';\r\n    default: return '';\r\n    }\r\n}\r\n\r\nexport interface ResourceGraphValueType {\r\n    [ResourceGraphValue.Managed]: ManagedResource\r\n    [ResourceGraphValue.ManagedBuffer]: ManagedBuffer\r\n    [ResourceGraphValue.ManagedTexture]: ManagedTexture\r\n    [ResourceGraphValue.PersistentBuffer]: PersistentBuffer\r\n    [ResourceGraphValue.PersistentTexture]: PersistentTexture\r\n    [ResourceGraphValue.Framebuffer]: Framebuffer\r\n    [ResourceGraphValue.Swapchain]: RenderSwapchain\r\n    [ResourceGraphValue.FormatView]: FormatView\r\n    [ResourceGraphValue.SubresourceView]: SubresourceView\r\n}\r\n\r\nexport interface ResourceGraphVisitor {\r\n    managed(value: ManagedResource): unknown;\r\n    managedBuffer(value: ManagedBuffer): unknown;\r\n    managedTexture(value: ManagedTexture): unknown;\r\n    persistentBuffer(value: PersistentBuffer): unknown;\r\n    persistentTexture(value: PersistentTexture): unknown;\r\n    framebuffer(value: Framebuffer): unknown;\r\n    swapchain(value: RenderSwapchain): unknown;\r\n    formatView(value: FormatView): unknown;\r\n    subresourceView(value: SubresourceView): unknown;\r\n}\r\n\r\nexport type ResourceGraphObject = ManagedResource\r\n| ManagedBuffer\r\n| ManagedTexture\r\n| PersistentBuffer\r\n| PersistentTexture\r\n| Framebuffer\r\n| RenderSwapchain\r\n| FormatView\r\n| SubresourceView;\r\n\r\n//-----------------------------------------------------------------\r\n// Graph Concept\r\nexport class ResourceGraphVertex {\r\n    constructor (\r\n        readonly id: ResourceGraphValue,\r\n        readonly object: ResourceGraphObject,\r\n    ) {\r\n        this.t = id;\r\n        this.j = object;\r\n    }\r\n    /** Out edge list */\r\n    readonly o: OutE[] = [];\r\n    /** In edge list */\r\n    readonly i: OutE[] = [];\r\n    /** Polymorphic object Id */\r\n    readonly t: ResourceGraphValue;\r\n    /** Polymorphic object */\r\n    j: ResourceGraphObject;\r\n}\r\n//-----------------------------------------------------------------\r\n// ComponentGraph Concept\r\nexport const enum ResourceGraphComponent {\r\n    Name,\r\n    Desc,\r\n    Traits,\r\n    States,\r\n    Sampler,\r\n}\r\n\r\nexport interface ResourceGraphComponentType {\r\n    [ResourceGraphComponent.Name]: string;\r\n    [ResourceGraphComponent.Desc]: ResourceDesc;\r\n    [ResourceGraphComponent.Traits]: ResourceTraits;\r\n    [ResourceGraphComponent.States]: ResourceStates;\r\n    [ResourceGraphComponent.Sampler]: SamplerInfo;\r\n}\r\n\r\n//-----------------------------------------------------------------\r\n// ResourceGraph Implementation\r\nexport class ResourceGraph implements BidirectionalGraph\r\n, AdjacencyGraph\r\n, VertexListGraph\r\n, MutableGraph\r\n, PropertyGraph\r\n, NamedGraph\r\n, ComponentGraph\r\n, PolymorphicGraph\r\n, ReferenceGraph\r\n, MutableReferenceGraph\r\n, UuidGraph<string> {\r\n    //-----------------------------------------------------------------\r\n    // Graph\r\n    /** null vertex descriptor */\r\n    readonly N = 0xFFFFFFFF;\r\n    // type edge_descriptor = ED;\r\n    //-----------------------------------------------------------------\r\n    // IncidenceGraph\r\n    // type out_edge_iterator = OutEI;\r\n    // type degree_size_type = number;\r\n    edge (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    source (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    target (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    oe (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    od (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // BidirectionalGraph\r\n    // type in_edge_iterator = InEI;\r\n    ie (v: number): InEI {\r\n        return new InEI(this.x[v].i.values(), v);\r\n    }\r\n    id (v: number): number {\r\n        return this.x[v].i.length;\r\n    }\r\n    d (v: number): number {\r\n        return this.od(v) + this.id(v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AdjacencyGraph\r\n    // type adjacency_iterator = AdjI;\r\n    adj (v: number): AdjI {\r\n        return new AdjI(this, this.oe(v));\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // VertexListGraph\r\n    v (): IterableIterator<number> {\r\n        return this.x.keys();\r\n    }\r\n    nv (): number {\r\n        return this.x.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // EdgeListGraph\r\n    ne (): number {\r\n        let numEdges = 0;\r\n        for (const v of this.v()) {\r\n            numEdges += this.od(v);\r\n        }\r\n        return numEdges;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableGraph\r\n    clear (): void {\r\n        // Members\r\n        this.renderPasses.clear();\r\n        this.nextFenceValue = 0;\r\n        this.version = 0;\r\n        // UuidGraph\r\n        this._valueIndex.clear();\r\n        // ComponentGraph\r\n        this._names.length = 0;\r\n        this._descs.length = 0;\r\n        this._traits.length = 0;\r\n        this._states.length = 0;\r\n        this._samplerInfo.length = 0;\r\n        // Graph Vertices\r\n        this.x.length = 0;\r\n    }\r\n    addVertex<T extends ResourceGraphValue> (\r\n        id: T,\r\n        object: ResourceGraphValueType[T],\r\n        name: string,\r\n        desc: ResourceDesc,\r\n        traits: ResourceTraits,\r\n        states: ResourceStates,\r\n        sampler: SamplerInfo,\r\n        u = 0xFFFFFFFF,\r\n    ): number {\r\n        const vert = new ResourceGraphVertex(id, object);\r\n        const v = this.x.length;\r\n        this.x.push(vert);\r\n        this._names.push(name);\r\n        this._descs.push(desc);\r\n        this._traits.push(traits);\r\n        this._states.push(states);\r\n        this._samplerInfo.push(sampler);\r\n        // UuidGraph\r\n        this._valueIndex.set(name, v);\r\n\r\n        // ReferenceGraph\r\n        if (u !== 0xFFFFFFFF) {\r\n            this.addEdge(u, v);\r\n        }\r\n\r\n        return v;\r\n    }\r\n    addEdge (u: number, v: number): ED | null {\r\n        // update in/out edge list\r\n        this.x[u].o.push(new OutE(v));\r\n        this.x[v].i.push(new OutE(u));\r\n        return new ED(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // NamedGraph\r\n    vertexName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ComponentGraph\r\n    getName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    setName (v: number, value: string): void {\r\n        this._names[v] = value;\r\n    }\r\n    getDesc (v: number): ResourceDesc {\r\n        return this._descs[v];\r\n    }\r\n    getTraits (v: number): ResourceTraits {\r\n        return this._traits[v];\r\n    }\r\n    getStates (v: number): ResourceStates {\r\n        return this._states[v];\r\n    }\r\n    getSampler (v: number): SamplerInfo {\r\n        return this._samplerInfo[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // PolymorphicGraph\r\n    h (id: ResourceGraphValue, v: number): boolean {\r\n        return this.x[v].t === id;\r\n    }\r\n    w (v: number): ResourceGraphValue {\r\n        return this.x[v].t;\r\n    }\r\n    object (v: number): ResourceGraphObject {\r\n        return this.x[v].j;\r\n    }\r\n    value<T extends ResourceGraphValue> (id: T, v: number): ResourceGraphValueType[T] {\r\n        if (this.x[v].t === id) {\r\n            return this.x[v].j as ResourceGraphValueType[T];\r\n        } else {\r\n            throw Error('value id not match');\r\n        }\r\n    }\r\n    visitVertex (visitor: ResourceGraphVisitor, v: number): unknown {\r\n        const vert = this.x[v];\r\n        switch (vert.t) {\r\n        case ResourceGraphValue.Managed:\r\n            return visitor.managed(vert.j as ManagedResource);\r\n        case ResourceGraphValue.ManagedBuffer:\r\n            return visitor.managedBuffer(vert.j as ManagedBuffer);\r\n        case ResourceGraphValue.ManagedTexture:\r\n            return visitor.managedTexture(vert.j as ManagedTexture);\r\n        case ResourceGraphValue.PersistentBuffer:\r\n            return visitor.persistentBuffer(vert.j as PersistentBuffer);\r\n        case ResourceGraphValue.PersistentTexture:\r\n            return visitor.persistentTexture(vert.j as PersistentTexture);\r\n        case ResourceGraphValue.Framebuffer:\r\n            return visitor.framebuffer(vert.j as Framebuffer);\r\n        case ResourceGraphValue.Swapchain:\r\n            return visitor.swapchain(vert.j as RenderSwapchain);\r\n        case ResourceGraphValue.FormatView:\r\n            return visitor.formatView(vert.j as FormatView);\r\n        case ResourceGraphValue.SubresourceView:\r\n            return visitor.subresourceView(vert.j as SubresourceView);\r\n        default:\r\n            throw Error('polymorphic type not found');\r\n        }\r\n    }\r\n    j<T extends ResourceGraphObject> (v: number): T {\r\n        return this.x[v].j as T;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ReferenceGraph\r\n    // type reference_descriptor = ED;\r\n    // type child_iterator = OutEI;\r\n    // type parent_iterator = InEI;\r\n    reference (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    parent (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    child (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    children (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    numChildren (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    getParent (v: number): number {\r\n        if (v === 0xFFFFFFFF) {\r\n            return 0xFFFFFFFF;\r\n        }\r\n        const list = this.x[v].i;\r\n        if (list.length === 0) {\r\n            return 0xFFFFFFFF;\r\n        } else {\r\n            return list[0].target as number;\r\n        }\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableReferenceGraph\r\n    addReference (u: number, v: number): ED | null {\r\n        return this.addEdge(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // UuidGraph\r\n    contains (key: string): boolean {\r\n        return this._valueIndex.has(key);\r\n    }\r\n    vertex (key: string): number {\r\n        return this._valueIndex.get(key)!;\r\n    }\r\n    find (key: string): number {\r\n        const v = this._valueIndex.get(key);\r\n        if (v === undefined) return 0xFFFFFFFF;\r\n        return v;\r\n    }\r\n    readonly x: ResourceGraphVertex[] = [];\r\n    readonly _names: string[] = [];\r\n    readonly _descs: ResourceDesc[] = [];\r\n    readonly _traits: ResourceTraits[] = [];\r\n    readonly _states: ResourceStates[] = [];\r\n    readonly _samplerInfo: SamplerInfo[] = [];\r\n    readonly _valueIndex: Map<string, number> = new Map<string, number>();\r\n    readonly renderPasses: Map<string, PersistentRenderPassAndFramebuffer> = new Map<string, PersistentRenderPassAndFramebuffer>();\r\n    nextFenceValue = 0;\r\n    version = 0;\r\n}\r\n\r\nexport class ComputePass {\r\n    reset (): void {\r\n        this.computeViews.clear();\r\n        this.textures.clear();\r\n    }\r\n    readonly computeViews: Map<string, ComputeView[]> = new Map<string, ComputeView[]>();\r\n    readonly textures: Map<string, ShaderStageFlagBit> = new Map<string, ShaderStageFlagBit>();\r\n}\r\n\r\nexport class ResolvePass {\r\n    reset (): void {\r\n        this.resolvePairs.length = 0;\r\n    }\r\n    readonly resolvePairs: ResolvePair[] = [];\r\n}\r\n\r\nexport class CopyPass {\r\n    reset (): void {\r\n        this.copyPairs.length = 0;\r\n        this.uploadPairs.length = 0;\r\n    }\r\n    readonly copyPairs: CopyPair[] = [];\r\n    readonly uploadPairs: UploadPair[] = [];\r\n}\r\n\r\nexport class MovePass {\r\n    reset (): void {\r\n        this.movePairs.length = 0;\r\n    }\r\n    readonly movePairs: MovePair[] = [];\r\n}\r\n\r\nexport class RaytracePass {\r\n    reset (): void {\r\n        this.computeViews.clear();\r\n    }\r\n    readonly computeViews: Map<string, ComputeView[]> = new Map<string, ComputeView[]>();\r\n}\r\n\r\nexport class ClearView {\r\n    constructor (slotName = '', clearFlags: ClearFlagBit = ClearFlagBit.ALL, clearColor: Color = new Color()) {\r\n        this.slotName = slotName;\r\n        this.clearFlags = clearFlags;\r\n        this.clearColor = clearColor;\r\n    }\r\n    reset (slotName: string, clearFlags: ClearFlagBit): void {\r\n        this.slotName = slotName;\r\n        this.clearFlags = clearFlags;\r\n        resetColor(this.clearColor);\r\n    }\r\n    declare slotName: string;\r\n    declare clearFlags: ClearFlagBit;\r\n    declare readonly clearColor: Color;\r\n}\r\n\r\nexport class RenderQueue {\r\n    constructor (hint: QueueHint = QueueHint.RENDER_OPAQUE, phaseID = 0xFFFFFFFF, passLayoutID = 0xFFFFFFFF) {\r\n        this.hint = hint;\r\n        this.phaseID = phaseID;\r\n        this.passLayoutID = passLayoutID;\r\n    }\r\n    reset (hint: QueueHint, phaseID: number, passLayoutID: number): void {\r\n        this.hint = hint;\r\n        this.phaseID = phaseID;\r\n        this.passLayoutID = passLayoutID;\r\n        this.viewport = null;\r\n    }\r\n    declare hint: QueueHint;\r\n    declare phaseID: number;\r\n    declare passLayoutID: number;\r\n    viewport: Viewport | null = null;\r\n}\r\n\r\nexport const enum CullingFlags {\r\n    NONE = 0,\r\n    CAMERA_FRUSTUM = 0x1,\r\n    LIGHT_FRUSTUM = 0x2,\r\n    LIGHT_BOUNDS = 0x4,\r\n}\r\n\r\nexport class SceneData {\r\n    constructor (\r\n        scene: RenderScene | null = null,\r\n        camera: Camera | null = null,\r\n        flags: SceneFlags = SceneFlags.NONE,\r\n        light: LightInfo = new LightInfo(),\r\n        cullingFlags: CullingFlags = CullingFlags.CAMERA_FRUSTUM,\r\n        shadingLight: Light | null = null,\r\n    ) {\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.light = light;\r\n        this.flags = flags;\r\n        this.cullingFlags = cullingFlags;\r\n        this.shadingLight = shadingLight;\r\n    }\r\n    reset (\r\n        scene: RenderScene | null,\r\n        camera: Camera | null,\r\n        flags: SceneFlags,\r\n        cullingFlags: CullingFlags,\r\n        shadingLight: Light | null,\r\n    ): void {\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.light.reset(null, 0, false, null);\r\n        this.flags = flags;\r\n        this.cullingFlags = cullingFlags;\r\n        this.shadingLight = shadingLight;\r\n    }\r\n    declare /*pointer*/ scene: RenderScene | null;\r\n    declare /*pointer*/ camera: Camera | null;\r\n    declare readonly light: LightInfo;\r\n    declare flags: SceneFlags;\r\n    declare cullingFlags: CullingFlags;\r\n    declare /*refcount*/ shadingLight: Light | null;\r\n}\r\n\r\nexport class Dispatch {\r\n    constructor (\r\n        material: Material | null = null,\r\n        passID = 0,\r\n        threadGroupCountX = 0,\r\n        threadGroupCountY = 0,\r\n        threadGroupCountZ = 0,\r\n    ) {\r\n        this.material = material;\r\n        this.passID = passID;\r\n        this.threadGroupCountX = threadGroupCountX;\r\n        this.threadGroupCountY = threadGroupCountY;\r\n        this.threadGroupCountZ = threadGroupCountZ;\r\n    }\r\n    reset (\r\n        material: Material | null,\r\n        passID: number,\r\n        threadGroupCountX: number,\r\n        threadGroupCountY: number,\r\n        threadGroupCountZ: number,\r\n    ): void {\r\n        this.material = material;\r\n        this.passID = passID;\r\n        this.threadGroupCountX = threadGroupCountX;\r\n        this.threadGroupCountY = threadGroupCountY;\r\n        this.threadGroupCountZ = threadGroupCountZ;\r\n    }\r\n    declare /*refcount*/ material: Material | null;\r\n    declare passID: number;\r\n    declare threadGroupCountX: number;\r\n    declare threadGroupCountY: number;\r\n    declare threadGroupCountZ: number;\r\n}\r\n\r\nexport const enum BlitType {\r\n    FULLSCREEN_QUAD,\r\n    DRAW_2D,\r\n    DRAW_PROFILE,\r\n    DRAW_3D,\r\n}\r\n\r\nexport class Blit {\r\n    constructor (\r\n        material: Material | null = null,\r\n        passID = 0,\r\n        sceneFlags: SceneFlags = SceneFlags.NONE,\r\n        camera: Camera | null = null,\r\n        blitType: BlitType = BlitType.FULLSCREEN_QUAD,\r\n    ) {\r\n        this.material = material;\r\n        this.passID = passID;\r\n        this.sceneFlags = sceneFlags;\r\n        this.camera = camera;\r\n        this.blitType = blitType;\r\n    }\r\n    reset (\r\n        material: Material | null,\r\n        passID: number,\r\n        sceneFlags: SceneFlags,\r\n        camera: Camera | null,\r\n        blitType: BlitType,\r\n    ): void {\r\n        this.material = material;\r\n        this.passID = passID;\r\n        this.sceneFlags = sceneFlags;\r\n        this.camera = camera;\r\n        this.blitType = blitType;\r\n        this.models.length = 0;\r\n    }\r\n    declare /*refcount*/ material: Material | null;\r\n    declare passID: number;\r\n    declare sceneFlags: SceneFlags;\r\n    declare /*pointer*/ camera: Camera | null;\r\n    declare blitType: BlitType;\r\n    readonly models: Model[] = [];\r\n}\r\n\r\nexport class RenderData {\r\n    reset (): void {\r\n        this.constants.clear();\r\n        this.buffers.clear();\r\n        this.textures.clear();\r\n        this.samplers.clear();\r\n        this.custom = '';\r\n    }\r\n    readonly constants: Map<number, number[]> = new Map<number, number[]>();\r\n    readonly buffers: Map<number, Buffer> = new Map<number, Buffer>();\r\n    readonly textures: Map<number, Texture> = new Map<number, Texture>();\r\n    readonly samplers: Map<number, Sampler> = new Map<number, Sampler>();\r\n    custom = '';\r\n}\r\n\r\n//=================================================================\r\n// RenderGraph\r\n//=================================================================\r\n// PolymorphicGraph Concept\r\nexport const enum RenderGraphValue {\r\n    RasterPass,\r\n    RasterSubpass,\r\n    ComputeSubpass,\r\n    Compute,\r\n    Resolve,\r\n    Copy,\r\n    Move,\r\n    Raytrace,\r\n    Queue,\r\n    Scene,\r\n    Blit,\r\n    Dispatch,\r\n    Clear,\r\n    Viewport,\r\n}\r\n\r\nexport function getRenderGraphValueName (e: RenderGraphValue): string {\r\n    switch (e) {\r\n    case RenderGraphValue.RasterPass: return 'RasterPass';\r\n    case RenderGraphValue.RasterSubpass: return 'RasterSubpass';\r\n    case RenderGraphValue.ComputeSubpass: return 'ComputeSubpass';\r\n    case RenderGraphValue.Compute: return 'Compute';\r\n    case RenderGraphValue.Resolve: return 'Resolve';\r\n    case RenderGraphValue.Copy: return 'Copy';\r\n    case RenderGraphValue.Move: return 'Move';\r\n    case RenderGraphValue.Raytrace: return 'Raytrace';\r\n    case RenderGraphValue.Queue: return 'Queue';\r\n    case RenderGraphValue.Scene: return 'Scene';\r\n    case RenderGraphValue.Blit: return 'Blit';\r\n    case RenderGraphValue.Dispatch: return 'Dispatch';\r\n    case RenderGraphValue.Clear: return 'Clear';\r\n    case RenderGraphValue.Viewport: return 'Viewport';\r\n    default: return '';\r\n    }\r\n}\r\n\r\nexport interface RenderGraphValueType {\r\n    [RenderGraphValue.RasterPass]: RasterPass\r\n    [RenderGraphValue.RasterSubpass]: RasterSubpass\r\n    [RenderGraphValue.ComputeSubpass]: ComputeSubpass\r\n    [RenderGraphValue.Compute]: ComputePass\r\n    [RenderGraphValue.Resolve]: ResolvePass\r\n    [RenderGraphValue.Copy]: CopyPass\r\n    [RenderGraphValue.Move]: MovePass\r\n    [RenderGraphValue.Raytrace]: RaytracePass\r\n    [RenderGraphValue.Queue]: RenderQueue\r\n    [RenderGraphValue.Scene]: SceneData\r\n    [RenderGraphValue.Blit]: Blit\r\n    [RenderGraphValue.Dispatch]: Dispatch\r\n    [RenderGraphValue.Clear]: ClearView[]\r\n    [RenderGraphValue.Viewport]: Viewport\r\n}\r\n\r\nexport interface RenderGraphVisitor {\r\n    rasterPass(value: RasterPass): unknown;\r\n    rasterSubpass(value: RasterSubpass): unknown;\r\n    computeSubpass(value: ComputeSubpass): unknown;\r\n    compute(value: ComputePass): unknown;\r\n    resolve(value: ResolvePass): unknown;\r\n    copy(value: CopyPass): unknown;\r\n    move(value: MovePass): unknown;\r\n    raytrace(value: RaytracePass): unknown;\r\n    queue(value: RenderQueue): unknown;\r\n    scene(value: SceneData): unknown;\r\n    blit(value: Blit): unknown;\r\n    dispatch(value: Dispatch): unknown;\r\n    clear(value: ClearView[]): unknown;\r\n    viewport(value: Viewport): unknown;\r\n}\r\n\r\nexport type RenderGraphObject = RasterPass\r\n| RasterSubpass\r\n| ComputeSubpass\r\n| ComputePass\r\n| ResolvePass\r\n| CopyPass\r\n| MovePass\r\n| RaytracePass\r\n| RenderQueue\r\n| SceneData\r\n| Blit\r\n| Dispatch\r\n| ClearView[]\r\n| Viewport;\r\n\r\n//-----------------------------------------------------------------\r\n// Graph Concept\r\nexport class RenderGraphVertex {\r\n    constructor (\r\n        readonly id: RenderGraphValue,\r\n        readonly object: RenderGraphObject,\r\n    ) {\r\n        this.t = id;\r\n        this.j = object;\r\n    }\r\n    /** Out edge list */\r\n    readonly o: OutE[] = [];\r\n    /** In edge list */\r\n    readonly i: OutE[] = [];\r\n    /** Child edge list */\r\n    readonly c: OutE[] = [];\r\n    /** Parent edge list */\r\n    readonly p: OutE[] = [];\r\n    /** Polymorphic object Id */\r\n    readonly t: RenderGraphValue;\r\n    /** Polymorphic object */\r\n    j: RenderGraphObject;\r\n}\r\n//-----------------------------------------------------------------\r\n// ComponentGraph Concept\r\nexport const enum RenderGraphComponent {\r\n    Name,\r\n    Layout,\r\n    Data,\r\n    Valid,\r\n}\r\n\r\nexport interface RenderGraphComponentType {\r\n    [RenderGraphComponent.Name]: string;\r\n    [RenderGraphComponent.Layout]: string;\r\n    [RenderGraphComponent.Data]: RenderData;\r\n    [RenderGraphComponent.Valid]: boolean;\r\n}\r\n\r\n//-----------------------------------------------------------------\r\n// RenderGraph Implementation\r\nexport class RenderGraph implements BidirectionalGraph\r\n, AdjacencyGraph\r\n, VertexListGraph\r\n, MutableGraph\r\n, PropertyGraph\r\n, NamedGraph\r\n, ComponentGraph\r\n, PolymorphicGraph\r\n, ReferenceGraph\r\n, MutableReferenceGraph {\r\n    //-----------------------------------------------------------------\r\n    // Graph\r\n    /** null vertex descriptor */\r\n    readonly N = 0xFFFFFFFF;\r\n    // type edge_descriptor = ED;\r\n    //-----------------------------------------------------------------\r\n    // IncidenceGraph\r\n    // type out_edge_iterator = OutEI;\r\n    // type degree_size_type = number;\r\n    edge (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    source (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    target (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    oe (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    od (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // BidirectionalGraph\r\n    // type in_edge_iterator = InEI;\r\n    ie (v: number): InEI {\r\n        return new InEI(this.x[v].i.values(), v);\r\n    }\r\n    id (v: number): number {\r\n        return this.x[v].i.length;\r\n    }\r\n    d (v: number): number {\r\n        return this.od(v) + this.id(v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AdjacencyGraph\r\n    // type adjacency_iterator = AdjI;\r\n    adj (v: number): AdjI {\r\n        return new AdjI(this, this.oe(v));\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // VertexListGraph\r\n    v (): IterableIterator<number> {\r\n        return this.x.keys();\r\n    }\r\n    nv (): number {\r\n        return this.x.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // EdgeListGraph\r\n    ne (): number {\r\n        let numEdges = 0;\r\n        for (const v of this.v()) {\r\n            numEdges += this.od(v);\r\n        }\r\n        return numEdges;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableGraph\r\n    clear (): void {\r\n        // Members\r\n        this.index.clear();\r\n        this.sortedVertices.length = 0;\r\n        this.globalRenderData.reset();\r\n        // ComponentGraph\r\n        this._names.length = 0;\r\n        this._layoutNodes.length = 0;\r\n        this._data.length = 0;\r\n        this._valid.length = 0;\r\n        // Graph Vertices\r\n        this.x.length = 0;\r\n    }\r\n    addVertex<T extends RenderGraphValue> (\r\n        id: T,\r\n        object: RenderGraphValueType[T],\r\n        name: string,\r\n        layout: string,\r\n        data: RenderData,\r\n        valid: boolean,\r\n        u = 0xFFFFFFFF,\r\n    ): number {\r\n        const vert = new RenderGraphVertex(id, object);\r\n        const v = this.x.length;\r\n        this.x.push(vert);\r\n        this._names.push(name);\r\n        this._layoutNodes.push(layout);\r\n        this._data.push(data);\r\n        this._valid.push(valid);\r\n\r\n        // ReferenceGraph\r\n        if (u !== 0xFFFFFFFF) {\r\n            this.x[u].c.push(new OutE(v));\r\n            vert.p.push(new OutE(u));\r\n        }\r\n\r\n        return v;\r\n    }\r\n    addEdge (u: number, v: number): ED | null {\r\n        // update in/out edge list\r\n        this.x[u].o.push(new OutE(v));\r\n        this.x[v].i.push(new OutE(u));\r\n        return new ED(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // NamedGraph\r\n    vertexName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ComponentGraph\r\n    getName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    setName (v: number, value: string): void {\r\n        this._names[v] = value;\r\n    }\r\n    getLayout (v: number): string {\r\n        return this._layoutNodes[v];\r\n    }\r\n    setLayout (v: number, value: string): void {\r\n        this._layoutNodes[v] = value;\r\n    }\r\n    getData (v: number): RenderData {\r\n        return this._data[v];\r\n    }\r\n    getValid (v: number): boolean {\r\n        return this._valid[v];\r\n    }\r\n    setValid (v: number, value: boolean): void {\r\n        this._valid[v] = value;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // PolymorphicGraph\r\n    h (id: RenderGraphValue, v: number): boolean {\r\n        return this.x[v].t === id;\r\n    }\r\n    w (v: number): RenderGraphValue {\r\n        return this.x[v].t;\r\n    }\r\n    object (v: number): RenderGraphObject {\r\n        return this.x[v].j;\r\n    }\r\n    value<T extends RenderGraphValue> (id: T, v: number): RenderGraphValueType[T] {\r\n        if (this.x[v].t === id) {\r\n            return this.x[v].j as RenderGraphValueType[T];\r\n        } else {\r\n            throw Error('value id not match');\r\n        }\r\n    }\r\n    visitVertex (visitor: RenderGraphVisitor, v: number): unknown {\r\n        const vert = this.x[v];\r\n        switch (vert.t) {\r\n        case RenderGraphValue.RasterPass:\r\n            return visitor.rasterPass(vert.j as RasterPass);\r\n        case RenderGraphValue.RasterSubpass:\r\n            return visitor.rasterSubpass(vert.j as RasterSubpass);\r\n        case RenderGraphValue.ComputeSubpass:\r\n            return visitor.computeSubpass(vert.j as ComputeSubpass);\r\n        case RenderGraphValue.Compute:\r\n            return visitor.compute(vert.j as ComputePass);\r\n        case RenderGraphValue.Resolve:\r\n            return visitor.resolve(vert.j as ResolvePass);\r\n        case RenderGraphValue.Copy:\r\n            return visitor.copy(vert.j as CopyPass);\r\n        case RenderGraphValue.Move:\r\n            return visitor.move(vert.j as MovePass);\r\n        case RenderGraphValue.Raytrace:\r\n            return visitor.raytrace(vert.j as RaytracePass);\r\n        case RenderGraphValue.Queue:\r\n            return visitor.queue(vert.j as RenderQueue);\r\n        case RenderGraphValue.Scene:\r\n            return visitor.scene(vert.j as SceneData);\r\n        case RenderGraphValue.Blit:\r\n            return visitor.blit(vert.j as Blit);\r\n        case RenderGraphValue.Dispatch:\r\n            return visitor.dispatch(vert.j as Dispatch);\r\n        case RenderGraphValue.Clear:\r\n            return visitor.clear(vert.j as ClearView[]);\r\n        case RenderGraphValue.Viewport:\r\n            return visitor.viewport(vert.j as Viewport);\r\n        default:\r\n            throw Error('polymorphic type not found');\r\n        }\r\n    }\r\n    j<T extends RenderGraphObject> (v: number): T {\r\n        return this.x[v].j as T;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ReferenceGraph\r\n    // type reference_descriptor = ED;\r\n    // type child_iterator = OutEI;\r\n    // type parent_iterator = InEI;\r\n    reference (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].c) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    parent (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    child (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    children (v: number): OutEI {\r\n        return new OutEI(this.x[v].c.values(), v);\r\n    }\r\n    numChildren (v: number): number {\r\n        return this.x[v].c.length;\r\n    }\r\n    getParent (v: number): number {\r\n        if (v === 0xFFFFFFFF) {\r\n            return 0xFFFFFFFF;\r\n        }\r\n        const list = this.x[v].p;\r\n        if (list.length === 0) {\r\n            return 0xFFFFFFFF;\r\n        } else {\r\n            return list[0].target as number;\r\n        }\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableReferenceGraph\r\n    addReference (u: number, v: number): ED | null {\r\n        // update in/out edge list\r\n        this.x[u].c.push(new OutE(v));\r\n        this.x[v].p.push(new OutE(u));\r\n        return new ED(u, v);\r\n    }\r\n    readonly x: RenderGraphVertex[] = [];\r\n    readonly _names: string[] = [];\r\n    readonly _layoutNodes: string[] = [];\r\n    readonly _data: RenderData[] = [];\r\n    readonly _valid: boolean[] = [];\r\n    readonly index: Map<string, number> = new Map<string, number>();\r\n    readonly sortedVertices: number[] = [];\r\n    readonly globalRenderData: RenderData = new RenderData();\r\n}\r\n\r\nfunction createPool<T> (Constructor: new() => T): RecyclePool<T> {\r\n    return new RecyclePool<T>(() => new Constructor(), 16);\r\n}\r\n\r\nexport class RenderGraphObjectPool {\r\n    constructor (renderCommon: RenderCommonObjectPool) {\r\n        this.renderCommon = renderCommon;\r\n    }\r\n    reset (): void {\r\n        this.cv.reset(); // ClearValue\r\n        this.rv.reset(); // RasterView\r\n        this.cv1.reset(); // ComputeView\r\n        this.rd.reset(); // ResourceDesc\r\n        this.rt.reset(); // ResourceTraits\r\n        this.rs.reset(); // RenderSwapchain\r\n        this.rs1.reset(); // ResourceStates\r\n        this.mb.reset(); // ManagedBuffer\r\n        this.pb.reset(); // PersistentBuffer\r\n        this.mt.reset(); // ManagedTexture\r\n        this.pt.reset(); // PersistentTexture\r\n        this.mr.reset(); // ManagedResource\r\n        this.s.reset(); // Subpass\r\n        this.sg.reset(); // SubpassGraph\r\n        this.rs2.reset(); // RasterSubpass\r\n        this.cs.reset(); // ComputeSubpass\r\n        this.rp.reset(); // RasterPass\r\n        this.prpaf.reset(); // PersistentRenderPassAndFramebuffer\r\n        this.fv.reset(); // FormatView\r\n        this.sv.reset(); // SubresourceView\r\n        this.rg.reset(); // ResourceGraph\r\n        this.cp.reset(); // ComputePass\r\n        this.rp1.reset(); // ResolvePass\r\n        this.cp1.reset(); // CopyPass\r\n        this.mp.reset(); // MovePass\r\n        this.rp2.reset(); // RaytracePass\r\n        this.cv2.reset(); // ClearView\r\n        this.rq.reset(); // RenderQueue\r\n        this.sd.reset(); // SceneData\r\n        this.d.reset(); // Dispatch\r\n        this.b.reset(); // Blit\r\n        this.rd1.reset(); // RenderData\r\n        this.rg1.reset(); // RenderGraph\r\n    }\r\n    createClearValue (\r\n        x = 0,\r\n        y = 0,\r\n        z = 0,\r\n        w = 0,\r\n    ): ClearValue {\r\n        const v = this.cv.add(); // ClearValue\r\n        v.reset(x, y, z, w);\r\n        return v;\r\n    }\r\n    createRasterView (\r\n        slotName = '',\r\n        accessType: AccessType = AccessType.WRITE,\r\n        attachmentType: AttachmentType = AttachmentType.RENDER_TARGET,\r\n        loadOp: LoadOp = LoadOp.LOAD,\r\n        storeOp: StoreOp = StoreOp.STORE,\r\n        clearFlags: ClearFlagBit = ClearFlagBit.ALL,\r\n        shaderStageFlags: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n    ): RasterView {\r\n        const v = this.rv.add(); // RasterView\r\n        v.reset(slotName, accessType, attachmentType, loadOp, storeOp, clearFlags, shaderStageFlags);\r\n        return v;\r\n    }\r\n    createComputeView (\r\n        name = '',\r\n        accessType: AccessType = AccessType.READ,\r\n        clearFlags: ClearFlagBit = ClearFlagBit.NONE,\r\n        clearValueType: ClearValueType = ClearValueType.NONE,\r\n        shaderStageFlags: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n    ): ComputeView {\r\n        const v = this.cv1.add(); // ComputeView\r\n        v.reset(name, accessType, clearFlags, clearValueType, shaderStageFlags);\r\n        return v;\r\n    }\r\n    createResourceDesc (): ResourceDesc {\r\n        const v = this.rd.add(); // ResourceDesc\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createResourceTraits (\r\n        residency: ResourceResidency = ResourceResidency.MANAGED,\r\n    ): ResourceTraits {\r\n        const v = this.rt.add(); // ResourceTraits\r\n        v.reset(residency);\r\n        return v;\r\n    }\r\n    createRenderSwapchain (\r\n        swapchain: Swapchain | null = null,\r\n        isDepthStencil = false,\r\n    ): RenderSwapchain {\r\n        const v = this.rs.add(); // RenderSwapchain\r\n        v.reset(swapchain, isDepthStencil);\r\n        return v;\r\n    }\r\n    createResourceStates (): ResourceStates {\r\n        const v = this.rs1.add(); // ResourceStates\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createManagedBuffer (\r\n        buffer: Buffer | null = null,\r\n    ): ManagedBuffer {\r\n        const v = this.mb.add(); // ManagedBuffer\r\n        v.reset(buffer);\r\n        return v;\r\n    }\r\n    createPersistentBuffer (\r\n        buffer: Buffer | null = null,\r\n    ): PersistentBuffer {\r\n        const v = this.pb.add(); // PersistentBuffer\r\n        v.reset(buffer);\r\n        return v;\r\n    }\r\n    createManagedTexture (\r\n        texture: Texture | null = null,\r\n    ): ManagedTexture {\r\n        const v = this.mt.add(); // ManagedTexture\r\n        v.reset(texture);\r\n        return v;\r\n    }\r\n    createPersistentTexture (\r\n        texture: Texture | null = null,\r\n    ): PersistentTexture {\r\n        const v = this.pt.add(); // PersistentTexture\r\n        v.reset(texture);\r\n        return v;\r\n    }\r\n    createManagedResource (): ManagedResource {\r\n        const v = this.mr.add(); // ManagedResource\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createSubpass (): Subpass {\r\n        const v = this.s.add(); // Subpass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createSubpassGraph (): SubpassGraph {\r\n        const v = this.sg.add(); // SubpassGraph\r\n        v.clear();\r\n        return v;\r\n    }\r\n    createRasterSubpass (\r\n        subpassID = 0xFFFFFFFF,\r\n        count = 1,\r\n        quality = 0,\r\n    ): RasterSubpass {\r\n        const v = this.rs2.add(); // RasterSubpass\r\n        v.reset(subpassID, count, quality);\r\n        return v;\r\n    }\r\n    createComputeSubpass (\r\n        subpassID = 0xFFFFFFFF,\r\n    ): ComputeSubpass {\r\n        const v = this.cs.add(); // ComputeSubpass\r\n        v.reset(subpassID);\r\n        return v;\r\n    }\r\n    createRasterPass (): RasterPass {\r\n        const v = this.rp.add(); // RasterPass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createPersistentRenderPassAndFramebuffer (\r\n        renderPass: RenderPass | null = null,\r\n        framebuffer: Framebuffer | null = null,\r\n    ): PersistentRenderPassAndFramebuffer {\r\n        const v = this.prpaf.add(); // PersistentRenderPassAndFramebuffer\r\n        v.reset(renderPass, framebuffer);\r\n        return v;\r\n    }\r\n    createFormatView (): FormatView {\r\n        const v = this.fv.add(); // FormatView\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createSubresourceView (): SubresourceView {\r\n        const v = this.sv.add(); // SubresourceView\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createResourceGraph (): ResourceGraph {\r\n        const v = this.rg.add(); // ResourceGraph\r\n        v.clear();\r\n        return v;\r\n    }\r\n    createComputePass (): ComputePass {\r\n        const v = this.cp.add(); // ComputePass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createResolvePass (): ResolvePass {\r\n        const v = this.rp1.add(); // ResolvePass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createCopyPass (): CopyPass {\r\n        const v = this.cp1.add(); // CopyPass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createMovePass (): MovePass {\r\n        const v = this.mp.add(); // MovePass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createRaytracePass (): RaytracePass {\r\n        const v = this.rp2.add(); // RaytracePass\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createClearView (\r\n        slotName = '',\r\n        clearFlags: ClearFlagBit = ClearFlagBit.ALL,\r\n    ): ClearView {\r\n        const v = this.cv2.add(); // ClearView\r\n        v.reset(slotName, clearFlags);\r\n        return v;\r\n    }\r\n    createRenderQueue (\r\n        hint: QueueHint = QueueHint.RENDER_OPAQUE,\r\n        phaseID = 0xFFFFFFFF,\r\n        passLayoutID = 0xFFFFFFFF,\r\n    ): RenderQueue {\r\n        const v = this.rq.add(); // RenderQueue\r\n        v.reset(hint, phaseID, passLayoutID);\r\n        return v;\r\n    }\r\n    createSceneData (\r\n        scene: RenderScene | null = null,\r\n        camera: Camera | null = null,\r\n        flags: SceneFlags = SceneFlags.NONE,\r\n        cullingFlags: CullingFlags = CullingFlags.CAMERA_FRUSTUM,\r\n        shadingLight: Light | null = null,\r\n    ): SceneData {\r\n        const v = this.sd.add(); // SceneData\r\n        v.reset(scene, camera, flags, cullingFlags, shadingLight);\r\n        return v;\r\n    }\r\n    createDispatch (\r\n        material: Material | null = null,\r\n        passID = 0,\r\n        threadGroupCountX = 0,\r\n        threadGroupCountY = 0,\r\n        threadGroupCountZ = 0,\r\n    ): Dispatch {\r\n        const v = this.d.add(); // Dispatch\r\n        v.reset(material, passID, threadGroupCountX, threadGroupCountY, threadGroupCountZ);\r\n        return v;\r\n    }\r\n    createBlit (\r\n        material: Material | null = null,\r\n        passID = 0,\r\n        sceneFlags: SceneFlags = SceneFlags.NONE,\r\n        camera: Camera | null = null,\r\n        blitType: BlitType = BlitType.FULLSCREEN_QUAD,\r\n    ): Blit {\r\n        const v = this.b.add(); // Blit\r\n        v.reset(material, passID, sceneFlags, camera, blitType);\r\n        return v;\r\n    }\r\n    createRenderData (): RenderData {\r\n        const v = this.rd1.add(); // RenderData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createRenderGraph (): RenderGraph {\r\n        const v = this.rg1.add(); // RenderGraph\r\n        v.clear();\r\n        return v;\r\n    }\r\n    public readonly renderCommon: RenderCommonObjectPool;\r\n    private readonly cv: RecyclePool<ClearValue> = createPool(ClearValue);\r\n    private readonly rv: RecyclePool<RasterView> = createPool(RasterView);\r\n    private readonly cv1: RecyclePool<ComputeView> = createPool(ComputeView);\r\n    private readonly rd: RecyclePool<ResourceDesc> = createPool(ResourceDesc);\r\n    private readonly rt: RecyclePool<ResourceTraits> = createPool(ResourceTraits);\r\n    private readonly rs: RecyclePool<RenderSwapchain> = createPool(RenderSwapchain);\r\n    private readonly rs1: RecyclePool<ResourceStates> = createPool(ResourceStates);\r\n    private readonly mb: RecyclePool<ManagedBuffer> = createPool(ManagedBuffer);\r\n    private readonly pb: RecyclePool<PersistentBuffer> = createPool(PersistentBuffer);\r\n    private readonly mt: RecyclePool<ManagedTexture> = createPool(ManagedTexture);\r\n    private readonly pt: RecyclePool<PersistentTexture> = createPool(PersistentTexture);\r\n    private readonly mr: RecyclePool<ManagedResource> = createPool(ManagedResource);\r\n    private readonly s: RecyclePool<Subpass> = createPool(Subpass);\r\n    private readonly sg: RecyclePool<SubpassGraph> = createPool(SubpassGraph);\r\n    private readonly rs2: RecyclePool<RasterSubpass> = createPool(RasterSubpass);\r\n    private readonly cs: RecyclePool<ComputeSubpass> = createPool(ComputeSubpass);\r\n    private readonly rp: RecyclePool<RasterPass> = createPool(RasterPass);\r\n    private readonly prpaf: RecyclePool<PersistentRenderPassAndFramebuffer> = createPool(PersistentRenderPassAndFramebuffer);\r\n    private readonly fv: RecyclePool<FormatView> = createPool(FormatView);\r\n    private readonly sv: RecyclePool<SubresourceView> = createPool(SubresourceView);\r\n    private readonly rg: RecyclePool<ResourceGraph> = createPool(ResourceGraph);\r\n    private readonly cp: RecyclePool<ComputePass> = createPool(ComputePass);\r\n    private readonly rp1: RecyclePool<ResolvePass> = createPool(ResolvePass);\r\n    private readonly cp1: RecyclePool<CopyPass> = createPool(CopyPass);\r\n    private readonly mp: RecyclePool<MovePass> = createPool(MovePass);\r\n    private readonly rp2: RecyclePool<RaytracePass> = createPool(RaytracePass);\r\n    private readonly cv2: RecyclePool<ClearView> = createPool(ClearView);\r\n    private readonly rq: RecyclePool<RenderQueue> = createPool(RenderQueue);\r\n    private readonly sd: RecyclePool<SceneData> = createPool(SceneData);\r\n    private readonly d: RecyclePool<Dispatch> = createPool(Dispatch);\r\n    private readonly b: RecyclePool<Blit> = createPool(Blit);\r\n    private readonly rd1: RecyclePool<RenderData> = createPool(RenderData);\r\n    private readonly rg1: RecyclePool<RenderGraph> = createPool(RenderGraph);\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport type { Material } from '../../asset/assets';\r\nimport type { Camera } from '../../render-scene/scene/camera';\r\nimport type { DirectionalLight } from '../../render-scene/scene/directional-light';\r\nimport type { GeometryRenderer } from '../geometry-renderer';\r\nimport type { Buffer, BufferInfo, ClearFlagBit, Color, CommandBuffer, DescriptorSet, DescriptorSetLayout, Device, Format, LoadOp, ResolveMode, SampleCount, Sampler, ShaderStageFlagBit, StoreOp, Swapchain, Texture, TextureInfo, TextureType, Viewport } from '../../gfx';\r\nimport type { GlobalDSManager } from '../global-descriptor-set-manager';\r\nimport type { Mat4, Quat, Vec2, Vec4 } from '../../core/math';\r\nimport type { MacroRecord } from '../../render-scene/core/pass-utils';\r\nimport type { PipelineSceneData } from '../pipeline-scene-data';\r\nimport type { PointLight } from '../../render-scene/scene/point-light';\r\nimport type { RangedDirectionalLight } from '../../render-scene/scene/ranged-directional-light';\r\nimport type { AccessType, CopyPair, LightInfo, MovePair, QueueHint, ResolvePair, ResourceDimension, ResourceFlags, ResourceResidency, SceneFlags, UpdateFrequency, UploadPair } from './types';\r\nimport type { RenderScene } from '../../render-scene/core/render-scene';\r\nimport type { RenderWindow } from '../../render-scene/core/render-window';\r\nimport type { Light, Model } from '../../render-scene/scene';\r\nimport type { SphereLight } from '../../render-scene/scene/sphere-light';\r\nimport type { SpotLight } from '../../render-scene/scene/spot-light';\r\n\r\n/**\r\n * @engineInternal\r\n * @en PipelineRuntime is the runtime of both classical and custom pipelines.\r\n * It is used internally and should not be called directly.\r\n * @zh PipelineRuntime是经典管线以及自定义管线的运行时。\r\n * 属于内部实现，用户不应直接调用。\r\n */\r\nexport interface PipelineRuntime {\r\n    /**\r\n     * @en Activate PipelineRuntime with default swapchain\r\n     * @zh 用默认交换链初始化PipelineRuntime\r\n     * @param swapchain @en Default swapchain @zh 默认的交换链\r\n     * @returns Success or not\r\n     */\r\n    activate (swapchain: Swapchain): boolean;\r\n    /**\r\n     * @en Destroy resources of PipelineRuntime\r\n     * @zh 销毁PipelineRuntime所持资源\r\n     * @returns Success or not\r\n     */\r\n    destroy (): boolean;\r\n    /**\r\n     * @en Render contents of cameras\r\n     * @zh 根据相机进行绘制\r\n     * @param cameras @en Camera list @zh 相机列表\r\n     */\r\n    render (cameras: Camera[]): void;\r\n    /**\r\n     * @en Get graphics device\r\n     * @zh 获得图形设备\r\n     */\r\n    readonly device: Device;\r\n    /**\r\n     * @en Get user macros\r\n     * @zh 获得用户宏列表\r\n     */\r\n    readonly macros: MacroRecord;\r\n    /**\r\n     * @en Get global descriptor set manager\r\n     * @zh 获得全局(Global)级别描述符集(DescriptorSet)管理器\r\n     */\r\n    readonly globalDSManager: GlobalDSManager;\r\n    /**\r\n     * @en Get global descriptor set layout\r\n     * @zh 获得全局(Global)级别描述符集的布局(DescriptorSet Layout)\r\n     */\r\n    readonly descriptorSetLayout: DescriptorSetLayout;\r\n    /**\r\n     * @en Get global descriptor set\r\n     * @zh 获得全局(Global)级别描述符集(DescriptorSet)\r\n     */\r\n    readonly descriptorSet: DescriptorSet;\r\n    /**\r\n     * @en Get command buffers of render pipeline\r\n     * @zh 获得渲染管线的命令缓冲(CommandBuffer)列表\r\n     */\r\n    readonly commandBuffers: CommandBuffer[];\r\n    /**\r\n     * @en Get scene data of render pipeline.\r\n     * Scene data contains render configurations of the current scene.\r\n     * @zh 获得渲染管线相关的场景数据，此场景数据一般包含渲染所需配置信息\r\n     */\r\n    readonly pipelineSceneData: PipelineSceneData;\r\n    /**\r\n     * @en Get constant macros.\r\n     * Constant macro is platform-dependent and immutable.\r\n     * @zh 获得常量宏列表，常量宏平台相关且无法修改\r\n     */\r\n    readonly constantMacros: string;\r\n    /**\r\n     * @en Get profiler model.\r\n     * This model is used to render profile information in Debug mode.\r\n     * @zh 获得分析工具(Profiler)的渲染实例，用于Debug模式下显示调试与性能检测信息\r\n     */\r\n    profiler: Model | null;\r\n    /**\r\n     * @en Get geometry renderer.\r\n     * Geometry renderer is used to render procedural geometries.\r\n     * @zh 获得几何渲染器(GeometryRenderer)，几何渲染器用于程序化渲染基础几何图形\r\n     */\r\n    readonly geometryRenderer: GeometryRenderer | null;\r\n    /**\r\n     * @en Get shading scale.\r\n     * Shading scale affects shading texels per pixel.\r\n     * Currently it affects classic native forward pipeline and builtin custom pipeline.\r\n     * Users can change the size of the render targets according to the shading scale,\r\n     * when writing their own custom pipelines.\r\n     * To change screen size, please check director.root.resize.\r\n     * @zh 获得渲染倍率(ShadingScale)，每像素(pixel)绘制的纹素(texel)会根据渲染倍率进行调整。\r\n     * 目前仅对原有原生Forward管线以及内置自定义管线生效。\r\n     * 用户编写自定义管线时，可以根据渲染倍率进行渲染目标尺寸大小的调整。\r\n     * 如果要修改屏幕大小，详见director.root.resize。\r\n     */\r\n    shadingScale: number;\r\n    /**\r\n     * @en Get macro as string.\r\n     * @zh 根据宏名获得字符串\r\n     * @param name @en Name of macro @zh 宏的名字\r\n     * @returns String value\r\n     */\r\n    getMacroString (name: string): string;\r\n    /**\r\n     * @en Get macro as integer.\r\n     * @zh 根据宏名获得整型\r\n     * @param name @en Name of macro @zh 宏的名字\r\n     * @returns Integer value\r\n     */\r\n    getMacroInt (name: string): number;\r\n    /**\r\n     * @en Get macro as boolean.\r\n     * @zh 根据宏名获得布尔值\r\n     * @param name @en Name of macro @zh 宏的名字\r\n     * @returns Boolean value\r\n     */\r\n    getMacroBool (name: string): boolean;\r\n    /**\r\n     * @en Assign string value to macro.\r\n     * @zh 给宏赋值字符串\r\n     * @param name @en Name of macro @zh 宏的名字\r\n     * @param value @en String value @zh 字符串\r\n     */\r\n    setMacroString (name: string, value: string): void;\r\n    /**\r\n     * @en Assign integer value to macro.\r\n     * @zh 给宏赋值整型\r\n     * @param name @en Name of macro @zh 宏的名字\r\n     * @param value @en Integer value @zh 整型值\r\n     */\r\n    setMacroInt (name: string, value: number): void;\r\n    /**\r\n     * @en Assign boolean value to macro.\r\n     * @zh 给宏赋值布尔值\r\n     * @param name @en Name of macro @zh 宏的名字\r\n     * @param value @en Boolean value @zh 布尔值\r\n     */\r\n    setMacroBool (name: string, value: boolean): void;\r\n    /**\r\n     * @en Trigger pipeline state change event\r\n     * @zh 触发管线状态更新事件\r\n     */\r\n    onGlobalPipelineStateChanged (): void;\r\n}\r\n\r\n/**\r\n * @en Type of render pipeline.\r\n * Different types of pipeline have different hardward capabilities and interfaces.\r\n * @zh 管线类型，不同类型的管线具有不同的硬件能力与接口\r\n */\r\nexport enum PipelineType {\r\n    /**\r\n     * @en Basic render pipeline.\r\n     * Basic render pipeline is available on all platforms.\r\n     * The corresponding interface is {@link BasicPipeline}\r\n     * @zh 基础渲染管线，全平台支持。对应接口为 {@link BasicPipeline}\r\n     */\r\n    BASIC,\r\n    /**\r\n     * @en Standard render pipeline.\r\n     * Standard render pipeline supports compute shader and subpass rendering.\r\n     * It works well on Tile-based GPUs and is available on all native platforms.\r\n     * Vulkan, GLES3 and Metal backends are supported.\r\n     * The corresponding interface is {@link Pipeline}\r\n     * @zh 标准渲染管线.\r\n     * 标准渲染管线支持计算着色器(Compute Shader)与次通道渲染(Subpass rendering)。\r\n     * 能充分利用Tile-based GPU，支持所有原生平台并对移动平台特别优化。\r\n     * 支持Vulkan、GLES3、Metal图形后端。\r\n     * 对应接口为{@link Pipeline}\r\n     */\r\n    STANDARD,\r\n}\r\n\r\n/**\r\n * @en Render subpass capabilities.\r\n * Tile-based GPUs support reading color or depth_stencil attachment in pixel shader.\r\n * Our implementation is based-on Vulkan abstraction (aka input attachment),\r\n * and it is emulated on other graphics backends.\r\n * For example, in GLES3 we have used various framebuffer fetch (FBF) extensions.\r\n * As a result, different backends and hardwares support different input attachment features.\r\n * User should inspect pipeline capabilities when implementing tile-based rendering algorithms.\r\n * Using unsupported feature is undefined behaviour.\r\n * @zh 次通道渲染能力\r\n * Tile-based GPU可以在像素着色器读取当前像素的值。\r\n * 我们的抽象方式基于Vulkan的input attachment，并在其他图形后端模拟了这个功能。\r\n * 比如在GLES3上，我们使用了多种framebuffer fetch (FBF) 扩展来实现这个功能。\r\n * 所以对于不同的硬件以及图形API，支持的能力是略有不同的。\r\n * 在编写渲染算法时，应该查询当前设备的能力，来选择合适的tile-based算法。\r\n * 使用硬件不支持的特性，会导致未定义行为。\r\n */\r\nexport enum SubpassCapabilities {\r\n    NONE = 0,\r\n    /**\r\n     * @en Supports read depth/stencil value at current pixel.\r\n     * @zh 支持读取当前像素的depth/stencil值\r\n     */\r\n    INPUT_DEPTH_STENCIL = 1 << 0,\r\n    /**\r\n     * @en Supports read color value 0 at current pixel.\r\n     * @zh 支持读取当前像素第0个颜色值\r\n     */\r\n    INPUT_COLOR = 1 << 1,\r\n    /**\r\n     * @en Supports read color values at current pixel.\r\n     * @zh 支持读取当前像素任意颜色值\r\n     */\r\n    INPUT_COLOR_MRT = 1 << 2,\r\n    /**\r\n     * @en Each subpass has its own sample count.\r\n     * @zh 每个Subpass拥有不同的采样数\r\n     */\r\n    HETEROGENEOUS_SAMPLE_COUNT = 1 << 3,\r\n}\r\n\r\n/**\r\n * @en Pipeline capabilities.\r\n * The following capabilities are partially supported on different hardware and graphics backends.\r\n * @zh 管线能力。根据硬件与后端，支持的特性会有所不同\r\n */\r\nexport class PipelineCapabilities {\r\n    subpass: SubpassCapabilities = SubpassCapabilities.NONE;\r\n}\r\n\r\n/**\r\n * @en Base class of render graph node.\r\n * A node of render graph represents a specific type of rendering operation.\r\n * A render graph consists of these nodes and form a forest(which is a set of trees).\r\n * @zh RenderGraph中节点的基类，每个RenderGraph节点代表一种渲染操作，并构成一个森林(一组树)\r\n */\r\nexport interface RenderNode {\r\n    /**\r\n     * @en Get debug name of current node.\r\n     * @zh 获得当前节点调试用的名字\r\n     */\r\n    name: string;\r\n    /**\r\n     * @experimental\r\n     */\r\n    setCustomBehavior (name: string): void;\r\n}\r\n\r\n/**\r\n * @en Render node which supports setting uniforms and descriptors.\r\n * @zh 节点支持设置常量值(uniform/constant)与描述符\r\n */\r\nexport interface Setter extends RenderNode {\r\n    /**\r\n     * @en Set matrix4x4 常量(uniform) which consists of 16 floats (64 bytes).\r\n     * @zh 设置4x4矩阵，常量(uniform)有16个float (64 bytes)\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     */\r\n    setMat4 (name: string, mat: Mat4): void;\r\n    /**\r\n     * @en Set quaternion uniform which consists of 4 floats (16 bytes).\r\n     * @zh 设置四元数向量，常量(uniform)有4个float (16 bytes)\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     */\r\n    setQuaternion (name: string, quat: Quat): void;\r\n    /**\r\n     * @en Set color uniform which consists of 4 floats (16 bytes).\r\n     * @zh 设置颜色值，常量(uniform)有4个float (16 bytes)\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     */\r\n    setColor (name: string, color: Color): void;\r\n    /**\r\n     * @en Set vector4 uniform which consists of 4 floats (16 bytes).\r\n     * @zh 设置vector4向量，常量(uniform)有4个float (16 bytes)\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     */\r\n    setVec4 (name: string, vec: Vec4): void;\r\n    /**\r\n     * @en Set vector2 uniform which consists of 2 floats (8 bytes).\r\n     * @zh 设置vector2向量，常量(uniform)有2个float (8 bytes)\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     */\r\n    setVec2 (name: string, vec: Vec2): void;\r\n    /**\r\n     * @en Set float uniform (4 bytes).\r\n     * @zh 设置浮点值 (4 bytes)\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     */\r\n    setFloat (name: string, v: number): void;\r\n    /**\r\n     * @en Set uniform array.\r\n     * Size and type of the data should match the corresponding uniforms in the shader.\r\n     * Mismatches will cause undefined behaviour.\r\n     * Memory alignment is not required.\r\n     * @zh 设置数组。类型与大小需要与着色器中的常量(uniform)相匹配，不匹配会引起未定义行为。\r\n     * 内存地址不需要对齐。\r\n     * @param name @en uniform name in shader. @zh 填写着色器中的常量(uniform)名字\r\n     * @param arrayBuffer @en array of bytes @zh byte数组\r\n     */\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void;\r\n    /**\r\n     * @en Set buffer descriptor.\r\n     * Size and type of the buffer should match the one in shader.\r\n     * Buffer should be in read states and satisfy shader stage visibilities.\r\n     * Mismatches will cause undefined behaviour.\r\n     * @zh 设置缓冲(buffer)描述符。大小与类型需要与着色器中的一致，处于只读状态且着色阶段可见。\r\n     * 不匹配会引起未定义行为。\r\n     * @param name @en descriptor name in shader. @zh 填写着色器中的描述符(descriptor)名字\r\n     * @param buffer @en readonly buffer @zh 只读的缓冲\r\n     */\r\n    setBuffer (name: string, buffer: Buffer): void;\r\n    /**\r\n     * @en Set texture descriptor.\r\n     * Type of the texture should match the one in shader.\r\n     * Texture should be in read states and satisfy shader stage visibilities.\r\n     * Mismatches will cause undefined behaviour.\r\n     * @zh 设置贴图描述符。类型需要与着色器中的一致，处于只读状态且着色阶段可见。\r\n     * 不匹配会引起未定义行为。\r\n     * @param name @en descriptor name in shader. @zh 填写着色器中的描述符(descriptor)名字\r\n     * @param texture @en readonly texture @zh 只读的贴图\r\n     */\r\n    setTexture (name: string, texture: Texture): void;\r\n    /**\r\n     * @en Set sampler descriptor.\r\n     * Type of the sampler should match the one in shader.\r\n     * @zh 设置采样器描述符。类型需要与着色器中的一致。\r\n     * 不匹配会引起未定义行为。\r\n     * @param name @en descriptor name in shader. @zh 填写着色器中的描述符(descriptor)名字\r\n     */\r\n    setSampler (name: string, sampler: Sampler): void;\r\n    /**\r\n     * @en Set builtin camera constants of CCCamera, such as cc_matView.\r\n     * For list of constants, please check CCCamera in cc-global.chunk.\r\n     * @zh 设置内置相机常量，例如cc_matView。\r\n     * 具体常量见cc-global.chunk中的CCCamera.\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     */\r\n    setBuiltinCameraConstants (camera: Camera): void;\r\n    /**\r\n     * @en Set builtin directional light and shadow constants.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk and CCCamera in cc-global.chunk.\r\n     * @zh 设置内置方向光与阴影常量。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow与cc-global.chunk中的CCCamera。\r\n     * @param light @en The main light. @zh 主光\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     */\r\n    setBuiltinDirectionalLightConstants (light: DirectionalLight, camera: Camera): void;\r\n    /**\r\n     * @en Set builtin sphere light and shadow constants.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk and CCForwardLight in cc-forward-light.chunk.\r\n     * @zh 设置内置球形光与阴影常量。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow与cc-forward-light.chunk中的CCForwardLight。\r\n     * @param light @en The sphere light. @zh 球形光源\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     */\r\n    setBuiltinSphereLightConstants (light: SphereLight, camera: Camera): void;\r\n    /**\r\n     * @en Set builtin spot light and shadow constants.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk and CCForwardLight in cc-forward-light.chunk.\r\n     * @zh 设置内置探照光与阴影常量。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow与cc-forward-light.chunk中的CCForwardLight。\r\n     * @param light @en The spot light. @zh 探照光源\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     */\r\n    setBuiltinSpotLightConstants (light: SpotLight, camera: Camera): void;\r\n    /**\r\n     * @en Set builtin point light and shadow constants.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk and CCForwardLight in cc-forward-light.chunk.\r\n     * @zh 设置内置点光与阴影常量。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow与cc-forward-light.chunk中的CCForwardLight。\r\n     * @param light @en The point light. @zh 点光源\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     */\r\n    setBuiltinPointLightConstants (light: PointLight, camera: Camera): void;\r\n    /**\r\n     * @en Set builtin ranged directional light and shadow constants.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk and CCForwardLight in cc-forward-light.chunk.\r\n     * @zh 设置内置区间平行光与阴影常量。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow与cc-forward-light.chunk中的CCForwardLight。\r\n     * @param light @en The ranged directional light. @zh 区间平行光源\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     */\r\n    setBuiltinRangedDirectionalLightConstants (light: RangedDirectionalLight, camera: Camera): void;\r\n    /**\r\n     * @en Set builtin directional light frustum and shadow constants.\r\n     * These constants are used in builtin shadow map, cascaded shadow map and planar shadow.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk and CCCSM in cc-csm.chunk.\r\n     * @zh 设置内置平行光视锥与阴影常量。\r\n     * 这些常量用于内置的阴影、级联阴影与平面阴影。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow与cc-csm.chunk中的CCCSM。\r\n     * @param light @en The directional light. @zh 平行光源\r\n     * @param camera @en The camera instance to be set. @zh 当前相机\r\n     * @param csmLevel @en Curent level of cascaded shadow map @zh 级联阴影等级\r\n     */\r\n    setBuiltinDirectionalLightFrustumConstants (\r\n        camera: Camera,\r\n        light: DirectionalLight,\r\n        csmLevel?: number): void;\r\n    /**\r\n     * @en Set builtin spot light frustum and shadow constants.\r\n     * These constants are used in builtin shadow map.\r\n     * For list of constants, please check CCShadow in cc-shadow.chunk.\r\n     * @zh 设置内置探照光视锥与阴影常量。\r\n     * 这些常量用于内置的阴影。\r\n     * 具体常量见cc-shadow.chunk中的CCShadow。\r\n     * @param light @en The spot light. @zh 探照光源\r\n     */\r\n    setBuiltinSpotLightFrustumConstants (light: SpotLight): void;\r\n}\r\n\r\n/**\r\n * @en Scene\r\n * A scene is an abstraction of content for rendering.\r\n * @zh 场景。需要绘制的场景内容。\r\n */\r\nexport interface SceneBuilder extends Setter {\r\n    /**\r\n     * @en Use the frustum information of light instead of camera.\r\n     * Often used in building shadow map.\r\n     * @zh 使用光源视锥进行投影，而不是用相机。常用于shadow map的生成。\r\n     * @param light @en The light used for projection @zh 用于投影的光源\r\n     * @param csmLevel @en Curent level of cascaded shadow map @zh 级联阴影等级\r\n     * @param optCamera @en Additional scene culling camera. @zh 额外的场景裁切相机\r\n     */\r\n    useLightFrustum (\r\n        light: Light,\r\n        csmLevel?: number,\r\n        optCamera?: Camera): void;\r\n}\r\n\r\n/**\r\n * @en Render queue\r\n * A render queue is an abstraction of graphics commands submission.\r\n * Only when the graphics commands in a render queue are all submitted,\r\n * the next render queue will start submitting.\r\n * @zh 渲染队列。渲染队列是图形命令提交的抽象。\r\n * 只有一个渲染队列中的渲染命令全部提交完，才会开始提交下一个渲染队列中的命令。\r\n */\r\nexport interface RenderQueueBuilder extends Setter {\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Render the scene the camera is looking at.\r\n     * @zh 渲染当前相机指向的场景。\r\n     * @param camera @en Required camera @zh 所需相机\r\n     * @param light @en Lighting information of the scene @zh 场景光照信息\r\n     * @param sceneFlags @en Rendering flags of the scene @zh 场景渲染标志位\r\n     */\r\n    addSceneOfCamera (\r\n        camera: Camera,\r\n        light: LightInfo,\r\n        sceneFlags?: SceneFlags): void;\r\n    /**\r\n     * @en Add the scene to be rendered.\r\n     * If SceneFlags.NON_BUILTIN is specified, no builtin constants will be set.\r\n     * Otherwise, related builtin constants will be set automatically.\r\n     * @zh 添加需要绘制的场景。\r\n     * 如果设置了SceneFlags.NON_BUILTIN，那么不会自动设置内置常量。\r\n     * @param camera @en Camera used for projection @zh 用于投影的相机\r\n     * @param sceneFlags @en Rendering flags of the scene @zh 场景渲染标志位\r\n     * @param light @en Light used for lighting computation @zh 用于光照的光源\r\n     */\r\n    addScene (\r\n        camera: Camera,\r\n        sceneFlags: SceneFlags,\r\n        light?: Light,\r\n        scene?: RenderScene): SceneBuilder;\r\n    /**\r\n     * @en Render a full-screen quad.\r\n     * @zh 渲染全屏四边形\r\n     * @param material @en The material used for shading @zh 着色所需材质\r\n     * @param passID @en Material pass ID @zh 材质通道ID\r\n     * @param sceneFlags @en Rendering flags of the quad @zh Quad所需场景渲染标志位\r\n     */\r\n    addFullscreenQuad (\r\n        material: Material,\r\n        passID: number,\r\n        sceneFlags?: SceneFlags): void;\r\n    /**\r\n     * @en Render a full-screen quad from the camera view.\r\n     * @zh 从相机视角渲染全屏四边形\r\n     * @param camera @en The required camera @zh 所需相机\r\n     * @param material @en The material used for shading @zh 着色所需材质\r\n     * @param passID @en Material pass ID @zh 材质通道ID\r\n     * @param sceneFlags @en Rendering flags of the quad @zh Quad所需场景渲染标志位\r\n     */\r\n    addCameraQuad (\r\n        camera: Camera,\r\n        material: Material,\r\n        passID: number,\r\n        sceneFlags?: SceneFlags): void;\r\n    /**\r\n     * @beta Feature is under development\r\n     */\r\n    addDraw3D (\r\n        camera: Camera,\r\n        models: Model[],\r\n        sceneFlags?: SceneFlags): void;\r\n    /**\r\n     * @beta Feature is under development\r\n     */\r\n    addDraw2D (camera: Camera): void;\r\n    /**\r\n     * @beta Feature is under development\r\n     */\r\n    addProfiler (camera: Camera): void;\r\n    /**\r\n     * @en Clear current render target.\r\n     * @zh 清除当前渲染目标\r\n     * @param name @en The name of the render target @zh 渲染目标的名字\r\n     * @param color @en The clearing color @zh 用来清除与填充的颜色\r\n     */\r\n    clearRenderTarget (name: string, color?: Color): void;\r\n    /**\r\n     * @en Set rendering viewport.\r\n     * @zh 设置渲染视口\r\n     * @param viewport @en The required viewport @zh 所需视口\r\n     */\r\n    setViewport (viewport: Viewport): void;\r\n    /**\r\n     * @experimental\r\n     */\r\n    addCustomCommand (customBehavior: string): void;\r\n}\r\n\r\n/**\r\n * @en Basic render pass.\r\n * @zh 基础光栅通道\r\n */\r\nexport interface BasicRenderPassBuilder extends Setter {\r\n    /**\r\n     * @en Add render target for rasterization\r\n     * The render target must have registered in pipeline.\r\n     * @zh 添加光栅化渲染目标，渲染目标必须已注册。\r\n     * @param name @en name of the render target @zh 渲染目标的名字\r\n     * @param loadOp @en Type of load operation @zh 读取操作的类型\r\n     * @param storeOp @en Type of store operation @zh 写入操作的类型\r\n     * @param color @en The clear color to use when loadOp is Clear @zh 读取操作为清除时，所用颜色\r\n     */\r\n    addRenderTarget (\r\n        name: string,\r\n        loadOp?: LoadOp,\r\n        storeOp?: StoreOp,\r\n        color?: Color): void;\r\n    /**\r\n     * @en Add depth stencil for rasterization\r\n     * The depth stencil must have registered in pipeline.\r\n     * @zh 添加光栅化深度模板缓冲，深度模板缓冲必须已注册。\r\n     * @param name @en name of the depth stencil @zh 渲染目标的名字\r\n     * @param loadOp @en Type of load operation @zh 读取操作的类型\r\n     * @param storeOp @en Type of store operation @zh 写入操作的类型\r\n     * @param depth @en Depth value used to clear @zh 用于清除的深度值\r\n     * @param stencil @en Stencil value used to clear @zh 用于清除的模板值\r\n     * @param clearFlags @en To clear depth, stencil or both @zh 清除分量：深度、模板、两者。\r\n     */\r\n    addDepthStencil (\r\n        name: string,\r\n        loadOp?: LoadOp,\r\n        storeOp?: StoreOp,\r\n        depth?: number,\r\n        stencil?: number,\r\n        clearFlags?: ClearFlagBit): void;\r\n    /**\r\n     * @en Add texture for sampling\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加采样用的贴图，贴图必须已注册。\r\n     * @param name @en name of the texture @zh 贴图的注册名\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     * @param sampler @en the sampler to use @zh 采样器名字\r\n     * @param plane @en the image plane ID to sample (color|depth|stencil|video) @zh 需要采样的贴图平面(颜色|深度|模板|视频)\r\n     */\r\n    addTexture (\r\n        name: string,\r\n        slotName: string,\r\n        sampler?: Sampler,\r\n        plane?: number): void;\r\n    /**\r\n     * @en Add render queue.\r\n     * Every render queue has a hint type, such as NONE, OPAQUE, MASK or BLEND.\r\n     * User should only add objects of this hint type to the render queue.\r\n     * Objects of mixed types might cause downgrading of performance.\r\n     * The order of render queues should be adjusted according to the hardward and algorithms,\r\n     * in order to reach peak performance.\r\n     * For example, [1.opaque, 2.mask, 3.blend] might result in best performance on mobile platforms.\r\n     * This hint is for validation only and has no effect on rendering.\r\n     *\r\n     * Every render queue has a phase name. Only objects of the same phase name will be rendered.\r\n     *\r\n     * @zh 添加渲染队列\r\n     * 每个渲染队列有一个用途提示，例如无提示(NONE)、不透明(OPAQUE)、遮罩(MASK)和混合(BLEND)。\r\n     * 每个队列最好只渲染相匹配的对象，混合不同类型的对象，会造成性能下降。\r\n     * 不同类型队列的渲染顺序，需要根据硬件类型与渲染算法进行调整，以到达最高性能。\r\n     * 比如在移动平台上，先渲染OPAQUE，再渲染MASK、最后渲染BLEND可能会有最好的性能。\r\n     * 用途提示只用于问题检测，对渲染流程没有任何影响。\r\n     *\r\n     * 每个队列有一个相位(phase)名字，具有相同相位名字的物件才会被渲染。\r\n     *\r\n     * @param hint @en Usage hint of the queue @zh 用途的提示\r\n     * @param phaseName @en The name of the phase declared in the effect. Default value is 'default' @zh effect中相位(phase)的名字，缺省为'default'。\r\n     * @param passName @en The name of the pass declared in the effect. It is used to override the pass name in the parent pass/subpass. @zh effect中通道(pass)的名字，会覆盖(override)父(通道/子通道)中已设置的pass名字。\r\n     * @returns @en render queue builder @zh 渲染队列\r\n     */\r\n    addQueue (\r\n        hint?: QueueHint,\r\n        phaseName?: string,\r\n        passName?: string): RenderQueueBuilder;\r\n    /**\r\n     * @en Set rendering viewport.\r\n     * @zh 设置渲染视口\r\n     * @param viewport @en The required viewport @zh 所需视口\r\n     */\r\n    setViewport (viewport: Viewport): void;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     */\r\n    setVersion (name: string, version: number): void;\r\n    /**\r\n     * @en Show statistics on screen\r\n     * @zh 在屏幕上渲染统计数据\r\n     */\r\n    showStatistics: boolean;\r\n}\r\n\r\n/**\r\n * @en Basic multisample render pass builder\r\n * Support resolve render targets and depth stencil.\r\n * This render pass only contains one render subpass.\r\n * If resolve targets are specified, they will be resolved at the end of the render pass.\r\n * After resolving, the contents of multisample render targets and depth stencils are unspecified.\r\n * @zh 基础的多重采样渲染通道。支持决算(Resolve)渲染目标与深度缓冲。\r\n * 此渲染通道只包含一个渲染子通道。\r\n * 如果添加了决算对象，那么在渲染通道结束时，会进行决算。\r\n * 决算后多重采样渲染目标与深度缓冲的内容是未定义的。\r\n */\r\nexport interface BasicMultisampleRenderPassBuilder extends BasicRenderPassBuilder {\r\n    /**\r\n     * @en Set resolve render target\r\n     * @zh 设置决算渲染目标\r\n     */\r\n    resolveRenderTarget (source: string, target: string): void;\r\n    /**\r\n     * @en Set resolve depth stencil\r\n     * @zh 设置决算深度模板缓冲\r\n     */\r\n    resolveDepthStencil (\r\n        source: string,\r\n        target: string,\r\n        depthMode?: ResolveMode,\r\n        stencilMode?: ResolveMode): void;\r\n}\r\n\r\n/**\r\n * @en BasicPipeline\r\n * Basic pipeline provides basic rendering features which are supported on all platforms.\r\n * User can register resources which will be used in the render graph.\r\n * Theses resources are generally read and write, and will be managed by the pipeline.\r\n * The residency information of resource should not be changed after registration.\r\n * In each frame, user can create a render graph to be executed by the pipeline.\r\n * @zh 基础渲染管线。\r\n * 基础渲染管线提供基础的渲染能力，能在全平台使用。\r\n * 用户可以在渲染管线中注册资源，这些资源将由管线托管，用于render graph。\r\n * 这些资源一般是可读写的资源。\r\n * 资源在注册后，不能更改驻留属性。\r\n * 用户可以每帧构建一个render graph，然后交由管线执行。\r\n */\r\nexport interface BasicPipeline extends PipelineRuntime {\r\n    readonly type: PipelineType;\r\n    readonly capabilities: PipelineCapabilities;\r\n    /**\r\n     * @engineInternal\r\n     * @en Begin render pipeline setup\r\n     * @zh 开始管线构建\r\n     */\r\n    beginSetup (): void;\r\n    /**\r\n     * @engineInternal\r\n     * @en End render pipeline setup\r\n     * @zh 结束管线构建\r\n     */\r\n    endSetup (): void;\r\n    /**\r\n     * @en Enable cpu culling of objects affected by the light. Enabled by default.\r\n     * @zh 光照计算时，裁切受光源影响的物件。默认开启。\r\n     */\r\n    enableCpuLightCulling: boolean;\r\n    /**\r\n     * @en Check whether the resource has been registered in the pipeline.\r\n     * @zh 检查资源是否在管线中已注册\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @returns Exist or not\r\n     */\r\n    containsResource (name: string): boolean;\r\n    /**\r\n     * @en Add or update render window to the pipeline.\r\n     * If the render window is a swapchain and its default framebuffer contains depth stencil buffer,\r\n     * user should specify the name of the depth stencil buffer.\r\n     * If the depth stencil name is specified but the depth stencil buffer does not exist, a managed one will be created.\r\n     * @zh 注册或更新渲染窗口(RenderWindow)。\r\n     * 如果渲染窗口是交换链并且默认Framebuffer包含深度模板缓冲。用户需要指定深度模板缓冲的名字。\r\n     * 如果指定了深度模板缓冲的名字，但深度模板缓冲不存在，会创建一个托管的深度模板缓冲。\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Expected format of the render window @zh 期望的渲染窗口格式\r\n     * @param width @en Expected width of the render window @zh 期望的渲染窗口宽度\r\n     * @param height @en Expected height of the render window @zh 期望的渲染窗口高度\r\n     * @param renderWindow @en The render window to add. @zh 需要注册的渲染窗口\r\n     * @param depthStencilName @en The name of the depth stencil buffer of the default framebuffer. @zh 默认Framebuffer的深度模板缓冲的名字\r\n     * @returns Resource ID\r\n     */\r\n    addRenderWindow (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        renderWindow: RenderWindow,\r\n        depthStencilName?: string): number;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update render window information.\r\n     * When render window information is updated, such as resized, user should notify the pipeline.\r\n     * @zh 更新渲染窗口信息。当渲染窗口发生更新时，用户应通知管线。\r\n     * @param renderWindow @en The render window to update. @zh 渲染窗口\r\n     */\r\n    updateRenderWindow (\r\n        name: string,\r\n        renderWindow: RenderWindow,\r\n        depthStencilName?: string): void;\r\n    /**\r\n     * @en Add or update 2D render target.\r\n     * @zh 添加或更新2D渲染目标\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     * @returns Resource ID\r\n     */\r\n    addRenderTarget (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        residency?: ResourceResidency): number;\r\n    /**\r\n     * @en Add or update 2D depth stencil.\r\n     * @zh 添加或更新2D深度模板缓冲\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     * @returns Resource ID\r\n     */\r\n    addDepthStencil (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        residency?: ResourceResidency): number;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update render target information.\r\n     * @zh 更新渲染目标的信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     */\r\n    updateRenderTarget (\r\n        name: string,\r\n        width: number,\r\n        height: number,\r\n        format?: Format): void;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update depth stencil information.\r\n     * @zh 更新深度模板缓冲的信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     */\r\n    updateDepthStencil (\r\n        name: string,\r\n        width: number,\r\n        height: number,\r\n        format?: Format): void;\r\n    /**\r\n     * @en Add or update buffer.\r\n     * @zh 添加或更新缓冲\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param size @en Size of the resource in bytes @zh 资源的大小\r\n     * @param flags @en Flags of the resource @zh 资源的标志位\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     * @returns Resource ID\r\n     */\r\n    addBuffer (\r\n        name: string,\r\n        size: number,\r\n        flags: ResourceFlags,\r\n        residency: ResourceResidency): number;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update buffer information.\r\n     * @zh 更新缓冲的信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param size @en Size of the resource in bytes @zh 资源的大小\r\n     */\r\n    updateBuffer (name: string, size: number): void;\r\n    /**\r\n     * @en Add or update external texture.\r\n     * Must be readonly.\r\n     * @zh 添加或更新外部的贴图。贴图必须是只读的。\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param texture @en External unmanaged texture @zh 外部不受管理的贴图\r\n     * @param flags @en Flags of the resource @zh 资源的标志位\r\n     * @returns Resource ID\r\n     */\r\n    addExternalTexture (\r\n        name: string,\r\n        texture: Texture,\r\n        flags: ResourceFlags): number;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update external texture information.\r\n     * @zh 更新外部的贴图信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param texture @en External unmanaged texture @zh 外部不受管理的贴图\r\n     */\r\n    updateExternalTexture (name: string, texture: Texture): void;\r\n    /**\r\n     * @en Add or update texture.\r\n     * @zh 添加或更新外部的贴图。\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param type @en Type of the texture @zh 贴图的类型\r\n     * @param format @en Format of the texture @zh 贴图的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param depth @en Depth of the resource @zh 资源的深度\r\n     * @param arraySize @en Size of the array @zh 资源数组的大小\r\n     * @param mipLevels @en Mip levels of the texture @zh 贴图的Mipmap数目\r\n     * @param sampleCount @en Sample count of the texture @zh 贴图的采样数目\r\n     * @param flags @en Flags of the resource @zh 资源的标志位\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     * @returns Resource ID\r\n     */\r\n    addTexture (\r\n        name: string,\r\n        type: TextureType,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        arraySize: number,\r\n        mipLevels: number,\r\n        sampleCount: SampleCount,\r\n        flags: ResourceFlags,\r\n        residency: ResourceResidency): number;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update texture information.\r\n     * @zh 更新贴图信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Format of the texture @zh 贴图的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param depth @en Depth of the resource @zh 资源的深度\r\n     * @param arraySize @en Size of the array @zh 资源数组的大小\r\n     * @param mipLevels @en Mip levels of the texture @zh 贴图的Mipmap数目\r\n     * @param sampleCount @en Sample count of the texture @zh 贴图的采样数目\r\n     */\r\n    updateTexture (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        arraySize: number,\r\n        mipLevels: number,\r\n        sampleCount: SampleCount): void;\r\n    /**\r\n     * @en Add or update resource.\r\n     * @zh 添加或更新资源\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param dimension @en Dimension of the resource @zh 资源的维度\r\n     * @param format @en Format of the texture @zh 资源的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param depth @en Depth of the resource @zh 资源的深度\r\n     * @param arraySize @en Size of the array @zh 资源数组的大小\r\n     * @param mipLevels @en Mip levels of the texture @zh 资源的Mipmap数目\r\n     * @param sampleCount @en Sample count of the texture @zh 资源的采样数目\r\n     * @param flags @en Flags of the resource @zh 资源的标志位\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     * @returns Resource ID\r\n     */\r\n    addResource (\r\n        name: string,\r\n        dimension: ResourceDimension,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        arraySize: number,\r\n        mipLevels: number,\r\n        sampleCount: SampleCount,\r\n        flags: ResourceFlags,\r\n        residency: ResourceResidency): number;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Update resource information.\r\n     * @zh 更新资源信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Format of the texture @zh 资源的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param depth @en Depth of the resource @zh 资源的深度\r\n     * @param arraySize @en Size of the array @zh 资源数组的大小\r\n     * @param mipLevels @en Mip levels of the texture @zh 资源的Mipmap数目\r\n     * @param sampleCount @en Sample count of the texture @zh 资源的采样数目\r\n     */\r\n    updateResource (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        arraySize: number,\r\n        mipLevels: number,\r\n        sampleCount: SampleCount): void;\r\n    /**\r\n     * @engineInternal\r\n     * @en Begin rendering one frame\r\n     * @zh 开始一帧的渲染\r\n     */\r\n    beginFrame (): void;\r\n    /**\r\n     * @engineInternal\r\n     * @en Update camera\r\n     * @zh 更新相机\r\n     * @param camera @en Camera @zh 相机\r\n     */\r\n    update (camera: Camera): void;\r\n    /**\r\n     * @engineInternal\r\n     * @en End rendering one frame\r\n     * @zh 结束一帧的渲染\r\n     */\r\n    endFrame (): void;\r\n    /**\r\n     * @en Add render pass\r\n     * @zh 添加渲染通道\r\n     * @param width @en Width of the render pass @zh 渲染通道的宽度\r\n     * @param height @en Height of the render pass @zh 渲染通道的高度\r\n     * @param passName @en Pass name declared in the effect. Default value is 'default' @zh effect中的pass name，缺省为'default'\r\n     * @returns Basic render pass builder\r\n     */\r\n    addRenderPass (\r\n        width: number,\r\n        height: number,\r\n        passName?: string): BasicRenderPassBuilder;\r\n    /**\r\n     * @beta Feature is under development\r\n     * @en Add multisample render pass\r\n     * @zh 添加多重采样渲染通道\r\n     * @param width @en Width of the render pass @zh 渲染通道的宽度\r\n     * @param height @en Height of the render pass @zh 渲染通道的高度\r\n     * @param count @en Sample count @zh 采样数\r\n     * @param quality @en Sample quality. Default value is 0 @zh 采样质量，默认值是0\r\n     * @param passName @en Pass name declared in the effect. Default value is 'default' @zh effect中的pass name，缺省为'default'\r\n     * @returns Multisample basic render pass builder\r\n     */\r\n    addMultisampleRenderPass (\r\n        width: number,\r\n        height: number,\r\n        count: number,\r\n        quality: number,\r\n        passName?: string): BasicMultisampleRenderPassBuilder;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     */\r\n    addResolvePass (resolvePairs: ResolvePair[]): void;\r\n    /**\r\n     * @en Add copy pass.\r\n     * The source and target resources:\r\n     * Must be different resources(have different resource names).\r\n     * Must have compatible formats.\r\n     * Must have identical dimensions(width, height, depth), sample count and sample quality.\r\n     * Can't be currently mapped.\r\n     *\r\n     * Reinterpret copy is not supported.\r\n     *\r\n     * @zh 添加拷贝通道，来源与目标必须满足：\r\n     * 是不同的注册资源。\r\n     * 资源格式兼容。\r\n     * 具有相同的尺寸、采样数、采样质量。\r\n     * 不能被Map。\r\n     *\r\n     * 暂不支持转义拷贝。\r\n     *\r\n     * @param copyPairs @en Array of copy source and target @zh 拷贝来源与目标的数组\r\n     */\r\n    addCopyPass (copyPairs: CopyPair[]): void;\r\n    /**\r\n     * @deprecated Method will be removed in the future\r\n     * @en Builtin reflection probe pass\r\n     * @zh 添加内置环境光反射通道\r\n     * @param camera @en Capturing camera @zh 用于捕捉的相机\r\n     */\r\n    addBuiltinReflectionProbePass (camera: Camera): void;\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    getDescriptorSetLayout (shaderName: string, freq: UpdateFrequency): DescriptorSetLayout | undefined;\r\n    setMat4 (name: string, mat: Mat4): void;\r\n    setQuaternion (name: string, quat: Quat): void;\r\n    setColor (name: string, color: Color): void;\r\n    setVec4 (name: string, vec: Vec4): void;\r\n    setVec2 (name: string, vec: Vec2): void;\r\n    setFloat (name: string, v: number): void;\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void;\r\n    setBuffer (name: string, buffer: Buffer): void;\r\n    setTexture (name: string, texture: Texture): void;\r\n    setSampler (name: string, sampler: Sampler): void;\r\n    setBuiltinCameraConstants (camera: Camera): void;\r\n    setBuiltinDirectionalLightConstants (light: DirectionalLight, camera: Camera): void;\r\n    setBuiltinSphereLightConstants (light: SphereLight, camera: Camera): void;\r\n    setBuiltinSpotLightConstants (light: SpotLight, camera: Camera): void;\r\n    setBuiltinPointLightConstants (light: PointLight, camera: Camera): void;\r\n    setBuiltinRangedDirectionalLightConstants (light: RangedDirectionalLight, camera: Camera): void;\r\n    setBuiltinDirectionalLightFrustumConstants (\r\n        camera: Camera,\r\n        light: DirectionalLight,\r\n        csmLevel?: number): void;\r\n    setBuiltinSpotLightFrustumConstants (light: SpotLight): void;\r\n}\r\n\r\n/**\r\n * @beta Feature is under development\r\n * @en Render subpass\r\n * @zh 渲染次通道\r\n */\r\nexport interface RenderSubpassBuilder extends Setter {\r\n    /**\r\n     * @en Add render target for rasterization\r\n     * The render target must have registered in pipeline.\r\n     * @zh 添加光栅化渲染目标，渲染目标必须已注册。\r\n     * @param name @en name of the render target @zh 渲染目标的名字\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of the descriptor in shader @zh 着色器中描述符的名字\r\n     * @param loadOp @en Type of load operation @zh 读取操作的类型\r\n     * @param storeOp @en Type of store operation @zh 写入操作的类型\r\n     * @param color @en The clear color to use when loadOp is Clear @zh 读取操作为清除时，所用颜色\r\n     */\r\n    addRenderTarget (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName?: string,\r\n        loadOp?: LoadOp,\r\n        storeOp?: StoreOp,\r\n        color?: Color): void;\r\n    /**\r\n     * @en Add depth stencil for rasterization\r\n     * The depth stencil must have registered in pipeline.\r\n     * @zh 添加光栅化深度模板缓冲，深度模板缓冲必须已注册。\r\n     * @param name @en name of the depth stencil @zh 渲染目标的名字\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param depthSlotName @en name of the depth descriptor in shader @zh 着色器中深度描述符的名字\r\n     * @param stencilSlotName @en name of the stencil descriptor in shader @zh 着色器中模板描述符的名字\r\n     * @param loadOp @en Type of load operation @zh 读取操作的类型\r\n     * @param storeOp @en Type of store operation @zh 写入操作的类型\r\n     * @param depth @en Depth value used to clear @zh 用于清除的深度值\r\n     * @param stencil @en Stencil value used to clear @zh 用于清除的模板值\r\n     * @param clearFlags @en To clear depth, stencil or both @zh 清除分量：深度、模板、两者。\r\n     */\r\n    addDepthStencil (\r\n        name: string,\r\n        accessType: AccessType,\r\n        depthSlotName?: string,\r\n        stencilSlotName?: string,\r\n        loadOp?: LoadOp,\r\n        storeOp?: StoreOp,\r\n        depth?: number,\r\n        stencil?: number,\r\n        clearFlags?: ClearFlagBit): void;\r\n    /**\r\n     * @en Add texture for sampling\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加采样用的贴图，贴图必须已注册。\r\n     * @param name @en name of the texture @zh 贴图的注册名\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     * @param sampler @en the sampler to use @zh 采样器名字\r\n     * @param plane @en the image plane ID to sample (color|depth|stencil|video) @zh 需要采样的贴图平面(颜色|深度|模板|视频)\r\n     */\r\n    addTexture (\r\n        name: string,\r\n        slotName: string,\r\n        sampler?: Sampler,\r\n        plane?: number): void;\r\n    /**\r\n     * @en Add storage buffer.\r\n     * The buffer must have registered in pipeline.\r\n     * @zh 添加存储缓冲，缓冲必须已注册。\r\n     * @param name @en Name of the buffer @zh 缓冲的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageBuffer (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Add storage texture.\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加存储贴图，贴图必须已注册。\r\n     * @param name @en Name of the buffer @zh 贴图的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageImage (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Set rendering viewport.\r\n     * @zh 设置渲染视口\r\n     * @param viewport @en The required viewport @zh 所需视口\r\n     */\r\n    setViewport (viewport: Viewport): void;\r\n    /**\r\n     * @en Add render queue.\r\n     * Every render queue has a hint type, such as NONE, OPAQUE, MASK or BLEND.\r\n     * User should only add objects of this hint type to the render queue.\r\n     * Objects of mixed types might cause downgrading of performance.\r\n     * The order of render queues should be adjusted according to the hardward and algorithms,\r\n     * in order to reach peak performance.\r\n     * For example, [1.opaque, 2.mask, 3.blend] might result in best performance on mobile platforms.\r\n     * This hint is for validation only and has no effect on rendering.\r\n     *\r\n     * Every render queue has a phase name. Only objects of the same phase name will be rendered.\r\n     *\r\n     * @zh 添加渲染队列\r\n     * 每个渲染队列有一个用途提示，例如无提示(NONE)、不透明(OPAQUE)、遮罩(MASK)和混合(BLEND)。\r\n     * 每个队列最好只渲染相匹配的对象，混合不同类型的对象，会造成性能下降。\r\n     * 不同类型队列的渲染顺序，需要根据硬件类型与渲染算法进行调整，以到达最高性能。\r\n     * 比如在移动平台上，先渲染OPAQUE，再渲染MASK、最后渲染BLEND可能会有最好的性能。\r\n     * 用途提示只用于问题检测，对渲染流程没有任何影响。\r\n     *\r\n     * 每个队列有一个相位(phase)名字，具有相同相位名字的物件才会被渲染。\r\n     *\r\n     * @param hint @en Usage hint of the queue @zh 用途的提示\r\n     * @param phaseName @en The name of the phase declared in the effect. Default value is 'default' @zh effect中相位(phase)的名字，缺省为'default'。\r\n     * @param passName @en The name of the pass declared in the effect. It is used to override the pass name in the parent pass/subpass. @zh effect中通道(pass)的名字，会覆盖(override)父(通道/子通道)中已设置的pass名字。\r\n     * @returns @en render queue builder @zh 渲染队列\r\n     */\r\n    addQueue (\r\n        hint?: QueueHint,\r\n        phaseName?: string,\r\n        passName?: string): RenderQueueBuilder;\r\n    /**\r\n     * @en Show statistics on screen\r\n     * @zh 在屏幕上渲染统计数据\r\n     */\r\n    showStatistics: boolean;\r\n    /**\r\n     * @experimental\r\n     */\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void;\r\n}\r\n\r\n/**\r\n * @beta Feature is under development\r\n * @en Multisample render subpass\r\n * @zh 多重采样渲染次通道\r\n */\r\nexport interface MultisampleRenderSubpassBuilder extends RenderSubpassBuilder {\r\n    /**\r\n     * @en Resolve render target\r\n     * @zh 汇总渲染目标\r\n     * @param source @en Multisample source @zh 多重采样来源\r\n     * @param target @en Resolve target @zh 汇总目标\r\n     */\r\n    resolveRenderTarget (source: string, target: string): void;\r\n    /**\r\n     * @en Resolve depth stencil\r\n     * @zh 汇总深度模板缓冲\r\n     * @param source @en Multisample source @zh 多重采样来源\r\n     * @param target @en Resolve target @zh 汇总目标\r\n     * @param depthMode @en Resolve mode of depth component @zh 深度分量汇总模式\r\n     * @param stencilMode @en Resolve mode of stencil component @zh 模板分量汇总模式\r\n     */\r\n    resolveDepthStencil (\r\n        source: string,\r\n        target: string,\r\n        depthMode?: ResolveMode,\r\n        stencilMode?: ResolveMode): void;\r\n}\r\n\r\n/**\r\n * @en Compute queue\r\n * @zh 计算队列\r\n */\r\nexport interface ComputeQueueBuilder extends Setter {\r\n    /**\r\n     * @en Dispatch compute task\r\n     * @zh 发送计算任务\r\n     * @param threadGroupCountX @en Thread group count X  @zh 线程组的X分量的数目\r\n     * @param threadGroupCountY @en Thread group count Y  @zh 线程组的Y分量的数目\r\n     * @param threadGroupCountZ @en Thread group count Z  @zh 线程组的Z分量的数目\r\n     * @param material @en The material to use @zh 计算任务用的材质\r\n     * @param passID @en The name of the pass declared in the effect. @zh effect中的通道名字\r\n     */\r\n    addDispatch (\r\n        threadGroupCountX: number,\r\n        threadGroupCountY: number,\r\n        threadGroupCountZ: number,\r\n        material?: Material,\r\n        passID?: number): void;\r\n}\r\n\r\n/**\r\n * @beta Feature is under development\r\n * @en Compute subpass\r\n * @zh 计算次通道\r\n */\r\nexport interface ComputeSubpassBuilder extends Setter {\r\n    /**\r\n     * @en Add input render target.\r\n     * @zh 添加输入渲染目标\r\n     * @param name @en name of the render target @zh 渲染目标的名字\r\n     * @param slotName @en name of the descriptor in shader @zh 着色器中描述符的名字\r\n     */\r\n    addRenderTarget (name: string, slotName: string): void;\r\n    /**\r\n     * @en Add texture for sampling\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加采样用的贴图，贴图必须已注册。\r\n     * @param name @en name of the texture @zh 贴图的注册名\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     * @param sampler @en the sampler to use @zh 采样器名字\r\n     * @param plane @en the image plane ID to sample (color|depth|stencil|video) @zh 需要采样的贴图平面(颜色|深度|模板|视频)\r\n     */\r\n    addTexture (\r\n        name: string,\r\n        slotName: string,\r\n        sampler?: Sampler,\r\n        plane?: number): void;\r\n    /**\r\n     * @en Add storage buffer.\r\n     * The buffer must have registered in pipeline.\r\n     * @zh 添加存储缓冲，缓冲必须已注册。\r\n     * @param name @en Name of the buffer @zh 缓冲的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageBuffer (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Add storage texture.\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加存储贴图，贴图必须已注册。\r\n     * @param name @en Name of the buffer @zh 贴图的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageImage (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Add render queue.\r\n     * Every render queue has a hint type, such as NONE, OPAQUE, MASK or BLEND.\r\n     * User should only add objects of this hint type to the render queue.\r\n     * Objects of mixed types might cause downgrading of performance.\r\n     * The order of render queues should be adjusted according to the hardward and algorithms,\r\n     * in order to reach peak performance.\r\n     * For example, [1.opaque, 2.mask, 3.blend] might result in best performance on mobile platforms.\r\n     * This hint is for validation only and has no effect on rendering.\r\n     *\r\n     * Every render queue has a phase name. Only objects of the same phase name will be rendered.\r\n     *\r\n     * @zh 添加渲染队列\r\n     * 每个渲染队列有一个用途提示，例如无提示(NONE)、不透明(OPAQUE)、遮罩(MASK)和混合(BLEND)。\r\n     * 每个队列最好只渲染相匹配的对象，混合不同类型的对象，会造成性能下降。\r\n     * 不同类型队列的渲染顺序，需要根据硬件类型与渲染算法进行调整，以到达最高性能。\r\n     * 比如在移动平台上，先渲染OPAQUE，再渲染MASK、最后渲染BLEND可能会有最好的性能。\r\n     * 用途提示只用于问题检测，对渲染流程没有任何影响。\r\n     *\r\n     * 每个队列有一个相位(phase)名字，具有相同相位名字的物件才会被渲染。\r\n     *\r\n     * @param hint @en Usage hint of the queue @zh 用途的提示\r\n     * @param phaseName @en The name of the phase declared in the effect. Default value is 'default' @zh effect中相位(phase)的名字，缺省为'default'。\r\n     * @param passName @en The name of the pass declared in the effect. It is used to override the pass name in the parent pass/subpass. @zh effect中通道(pass)的名字，会覆盖(override)父(通道/子通道)中已设置的pass名字。\r\n     * @returns @en compute queue builder @zh 计算队列\r\n     */\r\n    addQueue (phaseName?: string, passName?: string): ComputeQueueBuilder;\r\n    /**\r\n     * @experimental\r\n     */\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void;\r\n}\r\n\r\n/**\r\n * @beta Feature is under development\r\n * @en Render pass\r\n * @zh 渲染通道\r\n */\r\nexport interface RenderPassBuilder extends BasicRenderPassBuilder {\r\n    /**\r\n     * @en Add storage buffer.\r\n     * The buffer must have registered in pipeline.\r\n     * @zh 添加存储缓冲，缓冲必须已注册。\r\n     * @param name @en Name of the buffer @zh 缓冲的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageBuffer (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Add storage texture.\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加存储贴图，贴图必须已注册。\r\n     * @param name @en Name of the buffer @zh 贴图的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageImage (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @beta Feature is under development\r\n     */\r\n    addMaterialTexture (resourceName: string, flags?: ShaderStageFlagBit): void;\r\n    /**\r\n     * @beta Feature is under development\r\n     * @en Add render subpass.\r\n     * @zh 添加渲染次通道\r\n     * @param subpassName @en Subpass name declared in the effect @zh effect中的subpass name\r\n     * @returns Render subpass builder\r\n     */\r\n    addRenderSubpass (subpassName: string): RenderSubpassBuilder;\r\n    /**\r\n     * @beta Feature is under development\r\n     * @en Add multisample render subpass.\r\n     * Sample count and quality should match those of the resources.\r\n     * @zh 添加多重采样渲染次通道，采样数与质量需要与资源一致。\r\n     * @param count @en Sample count @zh 采样数\r\n     * @param quality @en Sample quality @zh 采样质量\r\n     * @param subpassName @en Subpass name declared in the effect @zh effect中的subpass name\r\n     * @returns Multisample render subpass builder\r\n     */\r\n    addMultisampleRenderSubpass (\r\n        count: number,\r\n        quality: number,\r\n        subpassName: string): MultisampleRenderSubpassBuilder;\r\n    /**\r\n     * @experimental\r\n     * @en Add compute subpass.\r\n     * @zh 添加计算次通道\r\n     * @param subpassName @en Subpass name declared in the effect @zh effect中的subpass name\r\n     * @returns Compute subpass builder\r\n     */\r\n    addComputeSubpass (subpassName?: string): ComputeSubpassBuilder;\r\n    /**\r\n     * @experimental\r\n     */\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void;\r\n}\r\n\r\n/**\r\n * @en Multisample render pass builder\r\n * @zh 多重采样渲染通道。\r\n */\r\nexport interface MultisampleRenderPassBuilder extends BasicMultisampleRenderPassBuilder {\r\n    /**\r\n     * @en Add storage buffer\r\n     * @zh 添加存储缓冲\r\n     * @param name @en Name of the storage buffer @zh 存储缓冲的名字\r\n     * @param accessType @en Access type of the buffer in the render pass @zh 渲染通道中缓冲的读写状态\r\n     * @param slotName @en name of the descriptor in shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageBuffer (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Add storage image\r\n     * @zh 添加存储贴图\r\n     * @param name @en Name of the storage texture @zh 存储贴图的名字\r\n     * @param accessType @en Access type of the texture in the render pass @zh 渲染通道中贴图的读写状态\r\n     * @param slotName @en name of the descriptor in shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageImage (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n}\r\n\r\n/**\r\n * @en Compute pass\r\n * @zh 计算通道\r\n */\r\nexport interface ComputePassBuilder extends Setter {\r\n    /**\r\n     * @en Add texture for sampling\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加采样用的贴图，贴图必须已注册。\r\n     * @param name @en name of the texture @zh 贴图的注册名\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     * @param sampler @en the sampler to use @zh 采样器名字\r\n     * @param plane @en the image plane ID to sample (color|depth|stencil|video) @zh 需要采样的贴图平面(颜色|深度|模板|视频)\r\n     */\r\n    addTexture (\r\n        name: string,\r\n        slotName: string,\r\n        sampler?: Sampler,\r\n        plane?: number): void;\r\n    /**\r\n     * @en Add storage buffer.\r\n     * The buffer must have registered in pipeline.\r\n     * @zh 添加存储缓冲，缓冲必须已注册。\r\n     * @param name @en Name of the buffer @zh 缓冲的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageBuffer (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @en Add storage texture.\r\n     * The texture must have registered in pipeline.\r\n     * @zh 添加存储贴图，贴图必须已注册。\r\n     * @param name @en Name of the buffer @zh 贴图的注册名\r\n     * @param accessType @en Access type @zh 读写状态\r\n     * @param slotName @en name of descriptor in the shader @zh 着色器中描述符的名字\r\n     */\r\n    addStorageImage (\r\n        name: string,\r\n        accessType: AccessType,\r\n        slotName: string): void;\r\n    /**\r\n     * @beta Feature is under development\r\n     */\r\n    addMaterialTexture (resourceName: string, flags?: ShaderStageFlagBit): void;\r\n    /**\r\n     * @en Add render queue.\r\n     * Every render queue has a hint type, such as NONE, OPAQUE, MASK or BLEND.\r\n     * User should only add objects of this hint type to the render queue.\r\n     * Objects of mixed types might cause downgrading of performance.\r\n     * The order of render queues should be adjusted according to the hardward and algorithms,\r\n     * in order to reach peak performance.\r\n     * For example, [1.opaque, 2.mask, 3.blend] might result in best performance on mobile platforms.\r\n     * This hint is for validation only and has no effect on rendering.\r\n     *\r\n     * Every render queue has a phase name. Only objects of the same phase name will be rendered.\r\n     *\r\n     * @zh 添加渲染队列\r\n     * 每个渲染队列有一个用途提示，例如无提示(NONE)、不透明(OPAQUE)、遮罩(MASK)和混合(BLEND)。\r\n     * 每个队列最好只渲染相匹配的对象，混合不同类型的对象，会造成性能下降。\r\n     * 不同类型队列的渲染顺序，需要根据硬件类型与渲染算法进行调整，以到达最高性能。\r\n     * 比如在移动平台上，先渲染OPAQUE，再渲染MASK、最后渲染BLEND可能会有最好的性能。\r\n     * 用途提示只用于问题检测，对渲染流程没有任何影响。\r\n     *\r\n     * 每个队列有一个相位(phase)名字，具有相同相位名字的物件才会被渲染。\r\n     *\r\n     * @param hint @en Usage hint of the queue @zh 用途的提示\r\n     * @param phaseName @en The name of the phase declared in the effect. Default value is 'default' @zh effect中相位(phase)的名字，缺省为'default'。\r\n     * @param passName @en The name of the pass declared in the effect. It is used to override the pass name in the parent pass/subpass. @zh effect中通道(pass)的名字，会覆盖(override)父(通道/子通道)中已设置的pass名字。\r\n     * @returns @en compute queue builder @zh 计算队列\r\n     */\r\n    addQueue (phaseName?: string, passName?: string): ComputeQueueBuilder;\r\n    /**\r\n     * @experimental\r\n     */\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void;\r\n}\r\n\r\n/**\r\n * @en Render pipeline.\r\n * @zh 渲染管线\r\n */\r\nexport interface Pipeline extends BasicPipeline {\r\n    /**\r\n     * @en Add or update storage buffer.\r\n     * @zh 添加或更新存储缓冲\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     * @param size @en Size of the resource in bytes @zh 资源的大小\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     */\r\n    addStorageBuffer (\r\n        name: string,\r\n        format: Format,\r\n        size: number,\r\n        residency?: ResourceResidency): number;\r\n    /**\r\n     * @en Add or update 2D storage texture\r\n     * @zh 添加或更新2D存储贴图\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     */\r\n    addStorageTexture (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        residency?: ResourceResidency): number;\r\n    /**\r\n     * @experimental\r\n     * @en Add or update 2D shading rate texture\r\n     * @zh 添加或更新2D着色率贴图\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param residency @en Residency of the resource. @zh 资源的驻留性\r\n     */\r\n    addShadingRateTexture (\r\n        name: string,\r\n        width: number,\r\n        height: number,\r\n        residency?: ResourceResidency): number;\r\n    /**\r\n     * @en Update storage buffer information.\r\n     * @zh 更新存储缓冲的信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param size @en Size of the resource in bytes @zh 资源的大小\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     */\r\n    updateStorageBuffer (\r\n        name: string,\r\n        size: number,\r\n        format?: Format): void;\r\n    /**\r\n     * @en Update storage texture information.\r\n     * @zh 更新2D存储贴图的信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     * @param format @en Format of the resource @zh 资源的格式\r\n     */\r\n    updateStorageTexture (\r\n        name: string,\r\n        width: number,\r\n        height: number,\r\n        format?: Format): void;\r\n    /**\r\n     * @en Update shading rate texture information.\r\n     * @zh 更新2D着色率贴图的信息\r\n     * @param name @en Resource name @zh 资源名字\r\n     * @param width @en Width of the resource @zh 资源的宽度\r\n     * @param height @en Height of the resource @zh 资源的高度\r\n     */\r\n    updateShadingRateTexture (\r\n        name: string,\r\n        width: number,\r\n        height: number): void;\r\n    /**\r\n     * @en Add render pass\r\n     * @zh 添加渲染通道\r\n     * @param width @en Width of the render pass @zh 渲染通道的宽度\r\n     * @param height @en Height of the render pass @zh 渲染通道的高度\r\n     * @param passName @en Pass name declared in the effect. Default value is 'default' @zh effect中的pass name，缺省为'default'\r\n     * @returns Render pass builder\r\n     */\r\n    addRenderPass (\r\n        width: number,\r\n        height: number,\r\n        passName: string): RenderPassBuilder;\r\n    /**\r\n     * @en Add multisample render pass\r\n     * @zh 添加多重采样渲染通道\r\n     * @param width @en Width of the render pass @zh 渲染通道的宽度\r\n     * @param height @en Height of the render pass @zh 渲染通道的高度\r\n     * @param count @en Sample count @zh 采样数目\r\n     * @param quality @en Sample quality (default is 0) @zh 采样质量（默认为0）\r\n     * @param passName @en Pass name declared in the effect. Default value is 'default' @zh effect中的pass name，缺省为'default'\r\n     * @returns Multisample render pass builder\r\n     */\r\n    addMultisampleRenderPass (\r\n        width: number,\r\n        height: number,\r\n        count: number,\r\n        quality: number,\r\n        passName: string): MultisampleRenderPassBuilder;\r\n    /**\r\n     * @en Add compute pass\r\n     * @zh 添加计算通道\r\n     * @param passName @en Pass name declared in the effect. Default value is 'default' @zh effect中的pass name，缺省为'default'\r\n     * @returns Compute pass builder\r\n     */\r\n    addComputePass (passName: string): ComputePassBuilder;\r\n    /**\r\n     * @beta Feature is under development\r\n     * @en Add upload pass.\r\n     * The source and target resources:\r\n     * Must be different resources(have different resource names).\r\n     * Must have compatible formats.\r\n     * Must have identical dimensions(width, height, depth), sample count and sample quality.\r\n     * Can't be currently mapped.\r\n     *\r\n     * @zh 添加上传通道，来源与目标必须满足：\r\n     * 是不同的注册资源。\r\n     * 资源格式兼容。\r\n     * 具有相同的尺寸、采样数、采样质量。\r\n     * 不能被Map。\r\n     *\r\n     * @param uploadPairs @en Array of upload source and target @zh 上传来源与目标的数组\r\n     */\r\n    addUploadPass (uploadPairs: UploadPair[]): void;\r\n    /**\r\n     * @en Add move pass.\r\n     * Move-construct target resource, by moving source resources into subresources of target.\r\n     * After the move, the target resource must be completely initialized.\r\n     * Target write conflicts will result in undefined behaviour.\r\n     * The source and target resources:\r\n     * Must be different resources(have different resource names).\r\n     * Must have compatible formats.\r\n     * Must have identical dimensions(width, height, depth), sample count and sample quality.\r\n     * Can't be currently mapped.\r\n     *\r\n     * @zh 添加移动通道。\r\n     * 移动构造目标资源，将来源移入目标的次级资源。\r\n     * 移动后，目标资源必须完全初始化。\r\n     * 目标写入冲突是未定义行为。\r\n     * 来源与目标必须满足：\r\n     * 是不同的注册资源。\r\n     * 资源格式兼容。\r\n     * 具有相同的尺寸、采样数、采样质量。\r\n     * 不能被Map。\r\n     *\r\n     * @param movePairs @en Array of move source and target @zh 移动来源与目标的数组\r\n     */\r\n    addMovePass (movePairs: MovePair[]): void;\r\n    /**\r\n     * @experimental\r\n     */\r\n    addCustomBuffer (\r\n        name: string,\r\n        info: BufferInfo,\r\n        type: string): number;\r\n    /**\r\n     * @experimental\r\n     */\r\n    addCustomTexture (\r\n        name: string,\r\n        info: TextureInfo,\r\n        type: string): number;\r\n}\r\n\r\nexport interface PipelinePassBuilder {\r\n    getConfigOrder (): number;\r\n    getRenderOrder (): number;\r\n    configCamera? (\r\n        camera: Readonly<Camera>,\r\n        pplConfigs: { readonly [name: string]: any },\r\n        cameraConfigs: { [name: string]: any }): void;\r\n    windowResize? (\r\n        ppl: BasicPipeline,\r\n        pplConfigs: { readonly [name: string]: any },\r\n        cameraConfigs: { readonly [name: string]: any },\r\n        window: RenderWindow,\r\n        camera: Camera,\r\n        width: number,\r\n        height: number): void;\r\n    setup? (\r\n        ppl: BasicPipeline,\r\n        pplConfigs: { readonly [name: string]: any },\r\n        cameraConfigs: { readonly [name: string]: any },\r\n        camera: Camera,\r\n        context: { [name: string]: any },\r\n        prevRenderPass?: BasicRenderPassBuilder): BasicRenderPassBuilder | undefined;\r\n}\r\n\r\n/**\r\n * @en Pipeline builder.\r\n * User can implement this interface and setup render graph.\r\n * Call setCustomPipeline to register the pipeline builder\r\n * @zh 管线构造器\r\n * 用户可以实现这个接口，来构建自己想要的render graph。\r\n * 调用setCustomPipeline注册管线\r\n */\r\nexport interface PipelineBuilder {\r\n    windowResize? (\r\n        pipeline: BasicPipeline,\r\n        window: RenderWindow,\r\n        camera: Camera,\r\n        width: number,\r\n        height: number): void;\r\n    /**\r\n     * @en Setup render graph\r\n     * @zh 构建渲染管线\r\n     * @param cameras @en Camera list to render @zh 需要渲染的相机列表\r\n     * @param pipeline @en Current render pipeline @zh 当前管线\r\n     */\r\n    setup (cameras: Camera[], pipeline: BasicPipeline): void;\r\n    /**\r\n     * @en Callback of pipeline state changed\r\n     * @zh 渲染管线状态更新的回调\r\n     */\r\n    onGlobalPipelineStateChanged? (): void;\r\n}\r\n\r\n/**\r\n * @engineInternal\r\n */\r\nexport interface RenderingModule {\r\n    getPassID (name: string): number;\r\n    getSubpassID (passID: number, name: string): number;\r\n    getPhaseID (subpassOrPassID: number, name: string): number;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { OutputArchive, InputArchive } from './archive';\r\nimport { Color, DescriptorSetLayoutBinding, DescriptorSetLayoutInfo, Uniform, UniformBlock } from '../../gfx';\r\n\r\nexport function saveColor (ar: OutputArchive, v: Color): void {\r\n    ar.n(v.x);\r\n    ar.n(v.y);\r\n    ar.n(v.z);\r\n    ar.n(v.w);\r\n}\r\n\r\nexport function loadColor (ar: InputArchive, v: Color): void {\r\n    v.x = ar.n();\r\n    v.y = ar.n();\r\n    v.z = ar.n();\r\n    v.w = ar.n();\r\n}\r\n\r\nexport function saveUniform (ar: OutputArchive, v: Uniform): void {\r\n    ar.s(v.name);\r\n    ar.n(v.type);\r\n    ar.n(v.count);\r\n}\r\n\r\nexport function loadUniform (ar: InputArchive, v: Uniform): void {\r\n    v.name = ar.s();\r\n    v.type = ar.n();\r\n    v.count = ar.n();\r\n}\r\n\r\nexport function saveUniformBlock (ar: OutputArchive, v: UniformBlock): void {\r\n    ar.n(v.set);\r\n    ar.n(v.binding);\r\n    ar.s(v.name);\r\n    ar.n(v.members.length);\r\n    for (const v1 of v.members) {\r\n        saveUniform(ar, v1);\r\n    }\r\n    ar.n(v.count);\r\n}\r\n\r\nexport function loadUniformBlock (ar: InputArchive, v: UniformBlock): void {\r\n    v.set = ar.n();\r\n    v.binding = ar.n();\r\n    v.name = ar.s();\r\n    let sz = 0;\r\n    sz = ar.n();\r\n    v.members.length = sz;\r\n    for (let i = 0; i !== sz; ++i) {\r\n        const v1 = new Uniform();\r\n        loadUniform(ar, v1);\r\n        v.members[i] = v1;\r\n    }\r\n    v.count = ar.n();\r\n}\r\n\r\nexport function saveDescriptorSetLayoutBinding (ar: OutputArchive, v: DescriptorSetLayoutBinding): void {\r\n    ar.n(v.binding);\r\n    ar.n(v.descriptorType);\r\n    ar.n(v.count);\r\n    ar.n(v.stageFlags);\r\n    // skip immutableSamplers;\r\n}\r\n\r\nexport function loadDescriptorSetLayoutBinding (ar: InputArchive, v: DescriptorSetLayoutBinding): void {\r\n    v.binding = ar.n();\r\n    v.descriptorType = ar.n();\r\n    v.count = ar.n();\r\n    v.stageFlags = ar.n();\r\n    // skip immutableSamplers;\r\n}\r\n\r\nexport function saveDescriptorSetLayoutInfo (ar: OutputArchive, v: DescriptorSetLayoutInfo): void {\r\n    ar.n(v.bindings.length);\r\n    for (const v1 of v.bindings) {\r\n        saveDescriptorSetLayoutBinding(ar, v1);\r\n    }\r\n}\r\n\r\nexport function loadDescriptorSetLayoutInfo (ar: InputArchive, v: DescriptorSetLayoutInfo): void {\r\n    const sz = ar.n();\r\n    v.bindings.length = sz;\r\n    for (let i = 0; i !== sz; ++i) {\r\n        const v1 = new DescriptorSetLayoutBinding();\r\n        loadDescriptorSetLayoutBinding(ar, v1);\r\n        v.bindings[i] = v1;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport { COCOS_RUNTIME, HTML5 } from 'internal:constants';\r\nimport { AddressableGraph, AdjI, AdjacencyGraph, BidirectionalGraph, ComponentGraph, ED, InEI, MutableGraph, MutableReferenceGraph, NamedGraph, OutE, OutEI, PolymorphicGraph, PropertyGraph, ReferenceGraph, VertexListGraph, findRelative, getPath } from './graph';\r\nimport type { DescriptorSet, DescriptorSetLayout, PipelineLayout } from '../../gfx';\r\nimport { DescriptorSetLayoutInfo, Format, MemoryAccessBit, SampleType, ShaderStageFlagBit, Type, UniformBlock, ViewDimension } from '../../gfx';\r\nimport { ParameterType, UpdateFrequency, RenderCommonObjectPool } from './types';\r\nimport { RecyclePool } from '../../core/memop';\r\nimport type { OutputArchive, InputArchive } from './archive';\r\nimport { saveUniformBlock, loadUniformBlock, saveDescriptorSetLayoutInfo, loadDescriptorSetLayoutInfo } from './serialization';\r\n\r\nfunction resetDescriptorSetLayoutInfo (info: DescriptorSetLayoutInfo): void {\r\n    info.bindings.length = 0;\r\n}\r\n\r\nexport const enum LayoutType {\r\n    VULKAN,\r\n    WEBGPU,\r\n}\r\n\r\nexport class Layout {\r\n    static type = LayoutType.VULKAN;\r\n    static isWebGPU = false;\r\n}\r\n\r\nexport const enum DescriptorTypeOrder {\r\n    UNIFORM_BUFFER,\r\n    DYNAMIC_UNIFORM_BUFFER,\r\n    SAMPLER_TEXTURE,\r\n    SAMPLER,\r\n    TEXTURE,\r\n    STORAGE_BUFFER,\r\n    DYNAMIC_STORAGE_BUFFER,\r\n    STORAGE_IMAGE,\r\n    INPUT_ATTACHMENT,\r\n}\r\n\r\nexport class Descriptor {\r\n    constructor (type: Type = Type.UNKNOWN) {\r\n        this.type = type;\r\n    }\r\n    reset (type: Type): void {\r\n        this.type = type;\r\n        this.count = 1;\r\n    }\r\n    declare type: Type;\r\n    count = 1;\r\n}\r\n\r\nexport class DescriptorBlock {\r\n    reset (): void {\r\n        this.descriptors.clear();\r\n        this.uniformBlocks.clear();\r\n        this.capacity = 0;\r\n        this.count = 0;\r\n    }\r\n    readonly descriptors: Map<string, Descriptor> = new Map<string, Descriptor>();\r\n    readonly uniformBlocks: Map<string, UniformBlock> = new Map<string, UniformBlock>();\r\n    capacity = 0;\r\n    count = 0;\r\n}\r\n\r\nexport class DescriptorBlockFlattened {\r\n    reset (): void {\r\n        this.descriptorNames.length = 0;\r\n        this.uniformBlockNames.length = 0;\r\n        this.descriptors.length = 0;\r\n        this.uniformBlocks.length = 0;\r\n        this.capacity = 0;\r\n        this.count = 0;\r\n    }\r\n    readonly descriptorNames: string[] = [];\r\n    readonly uniformBlockNames: string[] = [];\r\n    readonly descriptors: Descriptor[] = [];\r\n    readonly uniformBlocks: UniformBlock[] = [];\r\n    capacity = 0;\r\n    count = 0;\r\n}\r\n\r\nexport class DescriptorBlockIndex {\r\n    constructor (updateFrequency: UpdateFrequency = UpdateFrequency.PER_INSTANCE, parameterType: ParameterType = ParameterType.CONSTANTS, descriptorType: DescriptorTypeOrder = DescriptorTypeOrder.UNIFORM_BUFFER, visibility: ShaderStageFlagBit = ShaderStageFlagBit.NONE) {\r\n        this.updateFrequency = updateFrequency;\r\n        this.parameterType = parameterType;\r\n        this.descriptorType = descriptorType;\r\n        this.visibility = visibility;\r\n    }\r\n    declare updateFrequency: UpdateFrequency;\r\n    declare parameterType: ParameterType;\r\n    declare descriptorType: DescriptorTypeOrder;\r\n    declare visibility: ShaderStageFlagBit;\r\n}\r\n\r\nexport class DescriptorGroupBlockIndex {\r\n    constructor (\r\n        updateFrequency: UpdateFrequency = UpdateFrequency.PER_INSTANCE,\r\n        parameterType: ParameterType = ParameterType.CONSTANTS,\r\n        descriptorType: DescriptorTypeOrder = DescriptorTypeOrder.UNIFORM_BUFFER,\r\n        visibility: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n        accessType: MemoryAccessBit = MemoryAccessBit.READ_ONLY,\r\n        viewDimension: ViewDimension = ViewDimension.UNKNOWN,\r\n        sampleType: SampleType = SampleType.FLOAT,\r\n        format: Format = Format.UNKNOWN,\r\n    ) {\r\n        this.updateFrequency = updateFrequency;\r\n        this.parameterType = parameterType;\r\n        this.descriptorType = descriptorType;\r\n        this.visibility = visibility;\r\n        this.accessType = accessType;\r\n        this.viewDimension = viewDimension;\r\n        this.sampleType = sampleType;\r\n        this.format = format;\r\n    }\r\n    declare updateFrequency: UpdateFrequency;\r\n    declare parameterType: ParameterType;\r\n    declare descriptorType: DescriptorTypeOrder;\r\n    declare visibility: ShaderStageFlagBit;\r\n    declare accessType: MemoryAccessBit;\r\n    declare viewDimension: ViewDimension;\r\n    declare sampleType: SampleType;\r\n    declare format: Format;\r\n}\r\n\r\nexport class DescriptorDB {\r\n    reset (): void {\r\n        this.blocks.clear();\r\n        this.groupBlocks.clear();\r\n    }\r\n    readonly blocks: Map<string, DescriptorBlock> = new Map<string, DescriptorBlock>();\r\n    readonly groupBlocks: Map<string, DescriptorBlock> = new Map<string, DescriptorBlock>();\r\n}\r\n\r\nexport class RenderPhase {\r\n    reset (): void {\r\n        this.shaders.clear();\r\n    }\r\n    readonly shaders: Set<string> = new Set<string>();\r\n}\r\n\r\nexport const enum RenderPassType {\r\n    SINGLE_RENDER_PASS,\r\n    RENDER_PASS,\r\n    RENDER_SUBPASS,\r\n}\r\n\r\n//=================================================================\r\n// LayoutGraph\r\n//=================================================================\r\n// PolymorphicGraph Concept\r\nexport const enum LayoutGraphValue {\r\n    RenderStage,\r\n    RenderPhase,\r\n}\r\n\r\nexport function getLayoutGraphValueName (e: LayoutGraphValue): string {\r\n    switch (e) {\r\n    case LayoutGraphValue.RenderStage: return 'RenderStage';\r\n    case LayoutGraphValue.RenderPhase: return 'RenderPhase';\r\n    default: return '';\r\n    }\r\n}\r\n\r\nexport interface LayoutGraphValueType {\r\n    [LayoutGraphValue.RenderStage]: RenderPassType\r\n    [LayoutGraphValue.RenderPhase]: RenderPhase\r\n}\r\n\r\nexport interface LayoutGraphVisitor {\r\n    renderStage(value: RenderPassType): unknown;\r\n    renderPhase(value: RenderPhase): unknown;\r\n}\r\n\r\nexport type LayoutGraphObject = RenderPassType | RenderPhase;\r\n\r\n//-----------------------------------------------------------------\r\n// Graph Concept\r\nexport class LayoutGraphVertex {\r\n    constructor (\r\n        readonly id: LayoutGraphValue,\r\n        readonly object: LayoutGraphObject,\r\n    ) {\r\n        this.t = id;\r\n        this.j = object;\r\n    }\r\n    /** Out edge list */\r\n    readonly o: OutE[] = [];\r\n    /** In edge list */\r\n    readonly i: OutE[] = [];\r\n    /** Polymorphic object Id */\r\n    readonly t: LayoutGraphValue;\r\n    /** Polymorphic object */\r\n    j: LayoutGraphObject;\r\n}\r\n//-----------------------------------------------------------------\r\n// ComponentGraph Concept\r\nexport const enum LayoutGraphComponent {\r\n    Name,\r\n    Descriptors,\r\n}\r\n\r\nexport interface LayoutGraphComponentType {\r\n    [LayoutGraphComponent.Name]: string;\r\n    [LayoutGraphComponent.Descriptors]: DescriptorDB;\r\n}\r\n\r\n//-----------------------------------------------------------------\r\n// LayoutGraph Implementation\r\nexport class LayoutGraph implements BidirectionalGraph\r\n, AdjacencyGraph\r\n, VertexListGraph\r\n, MutableGraph\r\n, PropertyGraph\r\n, NamedGraph\r\n, ComponentGraph\r\n, PolymorphicGraph\r\n, ReferenceGraph\r\n, MutableReferenceGraph\r\n, AddressableGraph {\r\n    //-----------------------------------------------------------------\r\n    // Graph\r\n    /** null vertex descriptor */\r\n    readonly N = 0xFFFFFFFF;\r\n    // type edge_descriptor = ED;\r\n    //-----------------------------------------------------------------\r\n    // IncidenceGraph\r\n    // type out_edge_iterator = OutEI;\r\n    // type degree_size_type = number;\r\n    edge (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    source (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    target (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    oe (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    od (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // BidirectionalGraph\r\n    // type in_edge_iterator = InEI;\r\n    ie (v: number): InEI {\r\n        return new InEI(this.x[v].i.values(), v);\r\n    }\r\n    id (v: number): number {\r\n        return this.x[v].i.length;\r\n    }\r\n    d (v: number): number {\r\n        return this.od(v) + this.id(v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AdjacencyGraph\r\n    // type adjacency_iterator = AdjI;\r\n    adj (v: number): AdjI {\r\n        return new AdjI(this, this.oe(v));\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // VertexListGraph\r\n    v (): IterableIterator<number> {\r\n        return this.x.keys();\r\n    }\r\n    nv (): number {\r\n        return this.x.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // EdgeListGraph\r\n    ne (): number {\r\n        let numEdges = 0;\r\n        for (const v of this.v()) {\r\n            numEdges += this.od(v);\r\n        }\r\n        return numEdges;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableGraph\r\n    clear (): void {\r\n        // ComponentGraph\r\n        this._names.length = 0;\r\n        this._descriptors.length = 0;\r\n        // Graph Vertices\r\n        this.x.length = 0;\r\n    }\r\n    addVertex<T extends LayoutGraphValue> (\r\n        id: T,\r\n        object: LayoutGraphValueType[T],\r\n        name: string,\r\n        descriptors: DescriptorDB,\r\n        u = 0xFFFFFFFF,\r\n    ): number {\r\n        const vert = new LayoutGraphVertex(id, object);\r\n        const v = this.x.length;\r\n        this.x.push(vert);\r\n        this._names.push(name);\r\n        this._descriptors.push(descriptors);\r\n\r\n        // ReferenceGraph\r\n        if (u !== 0xFFFFFFFF) {\r\n            this.addEdge(u, v);\r\n        }\r\n\r\n        return v;\r\n    }\r\n    addEdge (u: number, v: number): ED | null {\r\n        // update in/out edge list\r\n        this.x[u].o.push(new OutE(v));\r\n        this.x[v].i.push(new OutE(u));\r\n        return new ED(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // NamedGraph\r\n    vertexName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ComponentGraph\r\n    // skip setName, Name is constant in AddressableGraph\r\n    getName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    getDescriptors (v: number): DescriptorDB {\r\n        return this._descriptors[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // PolymorphicGraph\r\n    h (id: LayoutGraphValue, v: number): boolean {\r\n        return this.x[v].t === id;\r\n    }\r\n    w (v: number): LayoutGraphValue {\r\n        return this.x[v].t;\r\n    }\r\n    object (v: number): LayoutGraphObject {\r\n        return this.x[v].j;\r\n    }\r\n    value<T extends LayoutGraphValue> (id: T, v: number): LayoutGraphValueType[T] {\r\n        if (this.x[v].t === id) {\r\n            return this.x[v].j as LayoutGraphValueType[T];\r\n        } else {\r\n            throw Error('value id not match');\r\n        }\r\n    }\r\n    visitVertex (visitor: LayoutGraphVisitor, v: number): unknown {\r\n        const vert = this.x[v];\r\n        switch (vert.t) {\r\n        case LayoutGraphValue.RenderStage:\r\n            return visitor.renderStage(vert.j as RenderPassType);\r\n        case LayoutGraphValue.RenderPhase:\r\n            return visitor.renderPhase(vert.j as RenderPhase);\r\n        default:\r\n            throw Error('polymorphic type not found');\r\n        }\r\n    }\r\n    j<T extends LayoutGraphObject> (v: number): T {\r\n        return this.x[v].j as T;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ReferenceGraph\r\n    // type reference_descriptor = ED;\r\n    // type child_iterator = OutEI;\r\n    // type parent_iterator = InEI;\r\n    reference (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    parent (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    child (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    children (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    numChildren (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    getParent (v: number): number {\r\n        if (v === 0xFFFFFFFF) {\r\n            return 0xFFFFFFFF;\r\n        }\r\n        const list = this.x[v].i;\r\n        if (list.length === 0) {\r\n            return 0xFFFFFFFF;\r\n        } else {\r\n            return list[0].target as number;\r\n        }\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableReferenceGraph\r\n    addReference (u: number, v: number): ED | null {\r\n        return this.addEdge(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ParentGraph\r\n    locateChild (u: number, name: string): number {\r\n        if (u === 0xFFFFFFFF) {\r\n            for (const v of this.x.keys()) {\r\n                const vert = this.x[v];\r\n                if (vert.i.length === 0 && this._names[v] === name) {\r\n                    return v;\r\n                }\r\n            }\r\n            return 0xFFFFFFFF;\r\n        }\r\n        for (const oe of this.x[u].o) {\r\n            const child = oe.target as number;\r\n            if (name === this._names[child]) {\r\n                return child;\r\n            }\r\n        }\r\n        return 0xFFFFFFFF;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AddressableGraph\r\n    locate (absPath: string): number {\r\n        return findRelative(this, 0xFFFFFFFF, absPath) as number;\r\n    }\r\n    locateRelative (path: string, start = 0xFFFFFFFF): number {\r\n        return findRelative(this, start, path) as number;\r\n    }\r\n    path (v: number): string {\r\n        return getPath(this, v);\r\n    }\r\n    readonly x: LayoutGraphVertex[] = [];\r\n    readonly _names: string[] = [];\r\n    readonly _descriptors: DescriptorDB[] = [];\r\n}\r\n\r\nexport class UniformData {\r\n    constructor (uniformID = 0xFFFFFFFF, uniformType: Type = Type.UNKNOWN, offset = 0) {\r\n        this.uniformID = uniformID;\r\n        this.uniformType = uniformType;\r\n        this.offset = offset;\r\n    }\r\n    reset (uniformID: number, uniformType: Type, offset: number): void {\r\n        this.uniformID = uniformID;\r\n        this.uniformType = uniformType;\r\n        this.offset = offset;\r\n        this.size = 0;\r\n    }\r\n    declare uniformID: number;\r\n    declare uniformType: Type;\r\n    declare offset: number;\r\n    size = 0;\r\n}\r\n\r\nexport class UniformBlockData {\r\n    reset (): void {\r\n        this.bufferSize = 0;\r\n        this.uniforms.length = 0;\r\n    }\r\n    bufferSize = 0;\r\n    readonly uniforms: UniformData[] = [];\r\n}\r\n\r\nexport class DescriptorData {\r\n    constructor (descriptorID = 0, type: Type = Type.UNKNOWN, count = 1) {\r\n        this.descriptorID = descriptorID;\r\n        this.type = type;\r\n        this.count = count;\r\n    }\r\n    reset (descriptorID: number, type: Type, count: number): void {\r\n        this.descriptorID = descriptorID;\r\n        this.type = type;\r\n        this.count = count;\r\n    }\r\n    declare descriptorID: number;\r\n    declare type: Type;\r\n    declare count: number;\r\n}\r\n\r\nexport class DescriptorBlockData {\r\n    constructor (\r\n        type: DescriptorTypeOrder = DescriptorTypeOrder.UNIFORM_BUFFER,\r\n        visibility: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n        capacity = 0,\r\n        accessType: MemoryAccessBit = MemoryAccessBit.READ_ONLY,\r\n        viewDimension: ViewDimension = ViewDimension.UNKNOWN,\r\n        sampleType: SampleType = SampleType.FLOAT,\r\n        format: Format = Format.UNKNOWN,\r\n    ) {\r\n        this.type = type;\r\n        this.visibility = visibility;\r\n        this.capacity = capacity;\r\n        this.accessType = accessType;\r\n        this.viewDimension = viewDimension;\r\n        this.sampleType = sampleType;\r\n        this.format = format;\r\n    }\r\n    reset (\r\n        type: DescriptorTypeOrder,\r\n        visibility: ShaderStageFlagBit,\r\n        capacity: number,\r\n        accessType: MemoryAccessBit,\r\n        viewDimension: ViewDimension,\r\n        sampleType: SampleType,\r\n        format: Format,\r\n    ): void {\r\n        this.type = type;\r\n        this.visibility = visibility;\r\n        this.offset = 0;\r\n        this.capacity = capacity;\r\n        this.accessType = accessType;\r\n        this.viewDimension = viewDimension;\r\n        this.sampleType = sampleType;\r\n        this.format = format;\r\n        this.descriptors.length = 0;\r\n    }\r\n    declare type: DescriptorTypeOrder;\r\n    declare visibility: ShaderStageFlagBit;\r\n    offset = 0;\r\n    declare capacity: number;\r\n    declare accessType: MemoryAccessBit;\r\n    declare viewDimension: ViewDimension;\r\n    declare sampleType: SampleType;\r\n    declare format: Format;\r\n    readonly descriptors: DescriptorData[] = [];\r\n}\r\n\r\nexport class DescriptorSetLayoutData {\r\n    constructor (\r\n        slot = 0xFFFFFFFF,\r\n        capacity = 0,\r\n        descriptorBlocks: DescriptorBlockData[] = [],\r\n        uniformBlocks: Map<number, UniformBlock> = new Map<number, UniformBlock>(),\r\n        bindingMap: Map<number, number> = new Map<number, number>(),\r\n    ) {\r\n        this.slot = slot;\r\n        this.capacity = capacity;\r\n        this.descriptorBlocks = descriptorBlocks;\r\n        this.uniformBlocks = uniformBlocks;\r\n        this.bindingMap = bindingMap;\r\n    }\r\n    reset (\r\n        slot: number,\r\n        capacity: number,\r\n    ): void {\r\n        this.slot = slot;\r\n        this.capacity = capacity;\r\n        this.uniformBlockCapacity = 0;\r\n        this.samplerTextureCapacity = 0;\r\n        this.descriptorBlocks.length = 0;\r\n        this.uniformBlocks.clear();\r\n        this.bindingMap.clear();\r\n    }\r\n    declare slot: number;\r\n    declare capacity: number;\r\n    uniformBlockCapacity = 0;\r\n    samplerTextureCapacity = 0;\r\n    declare readonly descriptorBlocks: DescriptorBlockData[];\r\n    declare readonly uniformBlocks: Map<number, UniformBlock>;\r\n    declare readonly bindingMap: Map<number, number>;\r\n}\r\n\r\nexport class DescriptorSetData {\r\n    constructor (descriptorSetLayoutData: DescriptorSetLayoutData = new DescriptorSetLayoutData(), descriptorSetLayout: DescriptorSetLayout | null = null, descriptorSet: DescriptorSet | null = null) {\r\n        this.descriptorSetLayoutData = descriptorSetLayoutData;\r\n        this.descriptorSetLayout = descriptorSetLayout;\r\n        this.descriptorSet = descriptorSet;\r\n    }\r\n    reset (descriptorSetLayout: DescriptorSetLayout | null, descriptorSet: DescriptorSet | null): void {\r\n        this.descriptorSetLayoutData.reset(0xFFFFFFFF, 0);\r\n        resetDescriptorSetLayoutInfo(this.descriptorSetLayoutInfo);\r\n        this.descriptorSetLayout = descriptorSetLayout;\r\n        this.descriptorSet = descriptorSet;\r\n    }\r\n    declare readonly descriptorSetLayoutData: DescriptorSetLayoutData;\r\n    readonly descriptorSetLayoutInfo: DescriptorSetLayoutInfo = new DescriptorSetLayoutInfo();\r\n    declare /*refcount*/ descriptorSetLayout: DescriptorSetLayout | null;\r\n    declare /*refcount*/ descriptorSet: DescriptorSet | null;\r\n}\r\n\r\nexport class PipelineLayoutData {\r\n    reset (): void {\r\n        this.descriptorSets.clear();\r\n        this.descriptorGroups.clear();\r\n    }\r\n    getSets (): Map<UpdateFrequency, DescriptorSetData> {\r\n        return (COCOS_RUNTIME || HTML5) && Layout.isWebGPU ? this.descriptorGroups : this.descriptorSets;\r\n    }\r\n    getSet (frequency: UpdateFrequency): DescriptorSetData | undefined {\r\n        return (COCOS_RUNTIME || HTML5) && Layout.isWebGPU ? this.descriptorGroups.get(frequency) : this.descriptorSets.get(frequency);\r\n    }\r\n    readonly descriptorSets: Map<UpdateFrequency, DescriptorSetData> = new Map<UpdateFrequency, DescriptorSetData>();\r\n    readonly descriptorGroups: Map<UpdateFrequency, DescriptorSetData> = new Map<UpdateFrequency, DescriptorSetData>();\r\n}\r\n\r\nexport class ShaderBindingData {\r\n    reset (): void {\r\n        this.descriptorBindings.clear();\r\n    }\r\n    readonly descriptorBindings: Map<number, number> = new Map<number, number>();\r\n}\r\n\r\nexport class ShaderLayoutData {\r\n    reset (): void {\r\n        this.layoutData.clear();\r\n        this.bindingData.clear();\r\n    }\r\n    readonly layoutData: Map<UpdateFrequency, DescriptorSetLayoutData> = new Map<UpdateFrequency, DescriptorSetLayoutData>();\r\n    readonly bindingData: Map<UpdateFrequency, ShaderBindingData> = new Map<UpdateFrequency, ShaderBindingData>();\r\n}\r\n\r\nexport class TechniqueData {\r\n    reset (): void {\r\n        this.passes.length = 0;\r\n    }\r\n    readonly passes: ShaderLayoutData[] = [];\r\n}\r\n\r\nexport class EffectData {\r\n    reset (): void {\r\n        this.techniques.clear();\r\n    }\r\n    readonly techniques: Map<string, TechniqueData> = new Map<string, TechniqueData>();\r\n}\r\n\r\nexport class ShaderProgramData {\r\n    reset (): void {\r\n        this.layout.reset();\r\n        this.pipelineLayout = null;\r\n    }\r\n    readonly layout: PipelineLayoutData = new PipelineLayoutData();\r\n    /*refcount*/ pipelineLayout: PipelineLayout | null = null;\r\n}\r\n\r\nexport class RenderStageData {\r\n    reset (): void {\r\n        this.descriptorVisibility.clear();\r\n    }\r\n    readonly descriptorVisibility: Map<number, ShaderStageFlagBit> = new Map<number, ShaderStageFlagBit>();\r\n}\r\n\r\nexport class RenderPhaseData {\r\n    reset (): void {\r\n        this.rootSignature = '';\r\n        this.shaderPrograms.length = 0;\r\n        this.shaderIndex.clear();\r\n        this.pipelineLayout = null;\r\n    }\r\n    rootSignature = '';\r\n    readonly shaderPrograms: ShaderProgramData[] = [];\r\n    readonly shaderIndex: Map<string, number> = new Map<string, number>();\r\n    /*refcount*/ pipelineLayout: PipelineLayout | null = null;\r\n}\r\n\r\n//=================================================================\r\n// LayoutGraphData\r\n//=================================================================\r\n// PolymorphicGraph Concept\r\nexport const enum LayoutGraphDataValue {\r\n    RenderStage,\r\n    RenderPhase,\r\n}\r\n\r\nexport function getLayoutGraphDataValueName (e: LayoutGraphDataValue): string {\r\n    switch (e) {\r\n    case LayoutGraphDataValue.RenderStage: return 'RenderStage';\r\n    case LayoutGraphDataValue.RenderPhase: return 'RenderPhase';\r\n    default: return '';\r\n    }\r\n}\r\n\r\nexport interface LayoutGraphDataValueType {\r\n    [LayoutGraphDataValue.RenderStage]: RenderStageData\r\n    [LayoutGraphDataValue.RenderPhase]: RenderPhaseData\r\n}\r\n\r\nexport interface LayoutGraphDataVisitor {\r\n    renderStage(value: RenderStageData): unknown;\r\n    renderPhase(value: RenderPhaseData): unknown;\r\n}\r\n\r\nexport type LayoutGraphDataObject = RenderStageData | RenderPhaseData;\r\n\r\n//-----------------------------------------------------------------\r\n// Graph Concept\r\nexport class LayoutGraphDataVertex {\r\n    constructor (\r\n        readonly id: LayoutGraphDataValue,\r\n        readonly object: LayoutGraphDataObject,\r\n    ) {\r\n        this.t = id;\r\n        this.j = object;\r\n    }\r\n    /** Out edge list */\r\n    readonly o: OutE[] = [];\r\n    /** In edge list */\r\n    readonly i: OutE[] = [];\r\n    /** Polymorphic object Id */\r\n    readonly t: LayoutGraphDataValue;\r\n    /** Polymorphic object */\r\n    j: LayoutGraphDataObject;\r\n}\r\n//-----------------------------------------------------------------\r\n// ComponentGraph Concept\r\nexport const enum LayoutGraphDataComponent {\r\n    Name,\r\n    Update,\r\n    Layout,\r\n}\r\n\r\nexport interface LayoutGraphDataComponentType {\r\n    [LayoutGraphDataComponent.Name]: string;\r\n    [LayoutGraphDataComponent.Update]: UpdateFrequency;\r\n    [LayoutGraphDataComponent.Layout]: PipelineLayoutData;\r\n}\r\n\r\n//-----------------------------------------------------------------\r\n// LayoutGraphData Implementation\r\nexport class LayoutGraphData implements BidirectionalGraph\r\n, AdjacencyGraph\r\n, VertexListGraph\r\n, MutableGraph\r\n, PropertyGraph\r\n, NamedGraph\r\n, ComponentGraph\r\n, PolymorphicGraph\r\n, ReferenceGraph\r\n, MutableReferenceGraph\r\n, AddressableGraph {\r\n    //-----------------------------------------------------------------\r\n    // Graph\r\n    /** null vertex descriptor */\r\n    readonly N = 0xFFFFFFFF;\r\n    // type edge_descriptor = ED;\r\n    //-----------------------------------------------------------------\r\n    // IncidenceGraph\r\n    // type out_edge_iterator = OutEI;\r\n    // type degree_size_type = number;\r\n    edge (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    source (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    target (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    oe (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    od (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // BidirectionalGraph\r\n    // type in_edge_iterator = InEI;\r\n    ie (v: number): InEI {\r\n        return new InEI(this.x[v].i.values(), v);\r\n    }\r\n    id (v: number): number {\r\n        return this.x[v].i.length;\r\n    }\r\n    d (v: number): number {\r\n        return this.od(v) + this.id(v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AdjacencyGraph\r\n    // type adjacency_iterator = AdjI;\r\n    adj (v: number): AdjI {\r\n        return new AdjI(this, this.oe(v));\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // VertexListGraph\r\n    v (): IterableIterator<number> {\r\n        return this.x.keys();\r\n    }\r\n    nv (): number {\r\n        return this.x.length;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // EdgeListGraph\r\n    ne (): number {\r\n        let numEdges = 0;\r\n        for (const v of this.v()) {\r\n            numEdges += this.od(v);\r\n        }\r\n        return numEdges;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableGraph\r\n    clear (): void {\r\n        // Members\r\n        this.valueNames.length = 0;\r\n        this.attributeIndex.clear();\r\n        this.constantIndex.clear();\r\n        this.shaderLayoutIndex.clear();\r\n        this.effects.clear();\r\n        this.constantMacros = '';\r\n        // ComponentGraph\r\n        this._names.length = 0;\r\n        this._updateFrequencies.length = 0;\r\n        this._layouts.length = 0;\r\n        // Graph Vertices\r\n        this.x.length = 0;\r\n    }\r\n    addVertex<T extends LayoutGraphDataValue> (\r\n        id: T,\r\n        object: LayoutGraphDataValueType[T],\r\n        name: string,\r\n        update: UpdateFrequency,\r\n        layout: PipelineLayoutData,\r\n        u = 0xFFFFFFFF,\r\n    ): number {\r\n        const vert = new LayoutGraphDataVertex(id, object);\r\n        const v = this.x.length;\r\n        this.x.push(vert);\r\n        this._names.push(name);\r\n        this._updateFrequencies.push(update);\r\n        this._layouts.push(layout);\r\n\r\n        // ReferenceGraph\r\n        if (u !== 0xFFFFFFFF) {\r\n            this.addEdge(u, v);\r\n        }\r\n\r\n        return v;\r\n    }\r\n    addEdge (u: number, v: number): ED | null {\r\n        // update in/out edge list\r\n        this.x[u].o.push(new OutE(v));\r\n        this.x[v].i.push(new OutE(u));\r\n        return new ED(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // NamedGraph\r\n    vertexName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ComponentGraph\r\n    // skip setName, Name is constant in AddressableGraph\r\n    getName (v: number): string {\r\n        return this._names[v];\r\n    }\r\n    getUpdate (v: number): UpdateFrequency {\r\n        return this._updateFrequencies[v];\r\n    }\r\n    setUpdate (v: number, value: UpdateFrequency): void {\r\n        this._updateFrequencies[v] = value;\r\n    }\r\n    getLayout (v: number): PipelineLayoutData {\r\n        return this._layouts[v];\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // PolymorphicGraph\r\n    h (id: LayoutGraphDataValue, v: number): boolean {\r\n        return this.x[v].t === id;\r\n    }\r\n    w (v: number): LayoutGraphDataValue {\r\n        return this.x[v].t;\r\n    }\r\n    object (v: number): LayoutGraphDataObject {\r\n        return this.x[v].j;\r\n    }\r\n    value<T extends LayoutGraphDataValue> (id: T, v: number): LayoutGraphDataValueType[T] {\r\n        if (this.x[v].t === id) {\r\n            return this.x[v].j as LayoutGraphDataValueType[T];\r\n        } else {\r\n            throw Error('value id not match');\r\n        }\r\n    }\r\n    visitVertex (visitor: LayoutGraphDataVisitor, v: number): unknown {\r\n        const vert = this.x[v];\r\n        switch (vert.t) {\r\n        case LayoutGraphDataValue.RenderStage:\r\n            return visitor.renderStage(vert.j as RenderStageData);\r\n        case LayoutGraphDataValue.RenderPhase:\r\n            return visitor.renderPhase(vert.j as RenderPhaseData);\r\n        default:\r\n            throw Error('polymorphic type not found');\r\n        }\r\n    }\r\n    j<T extends LayoutGraphDataObject> (v: number): T {\r\n        return this.x[v].j as T;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ReferenceGraph\r\n    // type reference_descriptor = ED;\r\n    // type child_iterator = OutEI;\r\n    // type parent_iterator = InEI;\r\n    reference (u: number, v: number): boolean {\r\n        for (const oe of this.x[u].o) {\r\n            if (v === oe.target as number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    parent (e: ED): number {\r\n        return e.source as number;\r\n    }\r\n    child (e: ED): number {\r\n        return e.target as number;\r\n    }\r\n    children (v: number): OutEI {\r\n        return new OutEI(this.x[v].o.values(), v);\r\n    }\r\n    numChildren (v: number): number {\r\n        return this.x[v].o.length;\r\n    }\r\n    getParent (v: number): number {\r\n        if (v === 0xFFFFFFFF) {\r\n            return 0xFFFFFFFF;\r\n        }\r\n        const list = this.x[v].i;\r\n        if (list.length === 0) {\r\n            return 0xFFFFFFFF;\r\n        } else {\r\n            return list[0].target as number;\r\n        }\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // MutableReferenceGraph\r\n    addReference (u: number, v: number): ED | null {\r\n        return this.addEdge(u, v);\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // ParentGraph\r\n    locateChild (u: number, name: string): number {\r\n        if (u === 0xFFFFFFFF) {\r\n            for (const v of this.x.keys()) {\r\n                const vert = this.x[v];\r\n                if (vert.i.length === 0 && this._names[v] === name) {\r\n                    return v;\r\n                }\r\n            }\r\n            return 0xFFFFFFFF;\r\n        }\r\n        for (const oe of this.x[u].o) {\r\n            const child = oe.target as number;\r\n            if (name === this._names[child]) {\r\n                return child;\r\n            }\r\n        }\r\n        return 0xFFFFFFFF;\r\n    }\r\n    //-----------------------------------------------------------------\r\n    // AddressableGraph\r\n    locate (absPath: string): number {\r\n        return findRelative(this, 0xFFFFFFFF, absPath) as number;\r\n    }\r\n    locateRelative (path: string, start = 0xFFFFFFFF): number {\r\n        return findRelative(this, start, path) as number;\r\n    }\r\n    path (v: number): string {\r\n        return getPath(this, v);\r\n    }\r\n    readonly x: LayoutGraphDataVertex[] = [];\r\n    readonly _names: string[] = [];\r\n    readonly _updateFrequencies: UpdateFrequency[] = [];\r\n    readonly _layouts: PipelineLayoutData[] = [];\r\n    readonly valueNames: string[] = [];\r\n    readonly attributeIndex: Map<string, number> = new Map<string, number>();\r\n    readonly constantIndex: Map<string, number> = new Map<string, number>();\r\n    readonly shaderLayoutIndex: Map<string, number> = new Map<string, number>();\r\n    readonly effects: Map<string, EffectData> = new Map<string, EffectData>();\r\n    constantMacros = '';\r\n}\r\n\r\nfunction createPool<T> (Constructor: new() => T): RecyclePool<T> {\r\n    return new RecyclePool<T>(() => new Constructor(), 16);\r\n}\r\n\r\nexport class LayoutGraphObjectPool {\r\n    constructor (renderCommon: RenderCommonObjectPool) {\r\n        this.renderCommon = renderCommon;\r\n    }\r\n    reset (): void {\r\n        this.l.reset(); // Layout\r\n        this.d.reset(); // Descriptor\r\n        this.db.reset(); // DescriptorBlock\r\n        this.dbf.reset(); // DescriptorBlockFlattened\r\n        this.dbi.reset(); // DescriptorBlockIndex\r\n        this.dgbi.reset(); // DescriptorGroupBlockIndex\r\n        this.dd.reset(); // DescriptorDB\r\n        this.rp.reset(); // RenderPhase\r\n        this.lg.reset(); // LayoutGraph\r\n        this.ud.reset(); // UniformData\r\n        this.ubd.reset(); // UniformBlockData\r\n        this.dd1.reset(); // DescriptorData\r\n        this.dbd.reset(); // DescriptorBlockData\r\n        this.dsld.reset(); // DescriptorSetLayoutData\r\n        this.dsd.reset(); // DescriptorSetData\r\n        this.pld.reset(); // PipelineLayoutData\r\n        this.sbd.reset(); // ShaderBindingData\r\n        this.sld.reset(); // ShaderLayoutData\r\n        this.td.reset(); // TechniqueData\r\n        this.ed.reset(); // EffectData\r\n        this.spd.reset(); // ShaderProgramData\r\n        this.rsd.reset(); // RenderStageData\r\n        this.rpd.reset(); // RenderPhaseData\r\n        this.lgd.reset(); // LayoutGraphData\r\n    }\r\n    createLayout (): Layout {\r\n        const v = this.l.add(); // Layout\r\n        return v;\r\n    }\r\n    createDescriptor (\r\n        type: Type = Type.UNKNOWN,\r\n    ): Descriptor {\r\n        const v = this.d.add(); // Descriptor\r\n        v.reset(type);\r\n        return v;\r\n    }\r\n    createDescriptorBlock (): DescriptorBlock {\r\n        const v = this.db.add(); // DescriptorBlock\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createDescriptorBlockFlattened (): DescriptorBlockFlattened {\r\n        const v = this.dbf.add(); // DescriptorBlockFlattened\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createDescriptorBlockIndex (\r\n        updateFrequency: UpdateFrequency = UpdateFrequency.PER_INSTANCE,\r\n        parameterType: ParameterType = ParameterType.CONSTANTS,\r\n        descriptorType: DescriptorTypeOrder = DescriptorTypeOrder.UNIFORM_BUFFER,\r\n        visibility: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n    ): DescriptorBlockIndex {\r\n        const v = this.dbi.add(); // DescriptorBlockIndex\r\n        v.updateFrequency = updateFrequency;\r\n        v.parameterType = parameterType;\r\n        v.descriptorType = descriptorType;\r\n        v.visibility = visibility;\r\n        return v;\r\n    }\r\n    createDescriptorGroupBlockIndex (\r\n        updateFrequency: UpdateFrequency = UpdateFrequency.PER_INSTANCE,\r\n        parameterType: ParameterType = ParameterType.CONSTANTS,\r\n        descriptorType: DescriptorTypeOrder = DescriptorTypeOrder.UNIFORM_BUFFER,\r\n        visibility: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n        accessType: MemoryAccessBit = MemoryAccessBit.READ_ONLY,\r\n        viewDimension: ViewDimension = ViewDimension.UNKNOWN,\r\n        sampleType: SampleType = SampleType.FLOAT,\r\n        format: Format = Format.UNKNOWN,\r\n    ): DescriptorGroupBlockIndex {\r\n        const v = this.dgbi.add(); // DescriptorGroupBlockIndex\r\n        v.updateFrequency = updateFrequency;\r\n        v.parameterType = parameterType;\r\n        v.descriptorType = descriptorType;\r\n        v.visibility = visibility;\r\n        v.accessType = accessType;\r\n        v.viewDimension = viewDimension;\r\n        v.sampleType = sampleType;\r\n        v.format = format;\r\n        return v;\r\n    }\r\n    createDescriptorDB (): DescriptorDB {\r\n        const v = this.dd.add(); // DescriptorDB\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createRenderPhase (): RenderPhase {\r\n        const v = this.rp.add(); // RenderPhase\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createLayoutGraph (): LayoutGraph {\r\n        const v = this.lg.add(); // LayoutGraph\r\n        v.clear();\r\n        return v;\r\n    }\r\n    createUniformData (\r\n        uniformID = 0xFFFFFFFF,\r\n        uniformType: Type = Type.UNKNOWN,\r\n        offset = 0,\r\n    ): UniformData {\r\n        const v = this.ud.add(); // UniformData\r\n        v.reset(uniformID, uniformType, offset);\r\n        return v;\r\n    }\r\n    createUniformBlockData (): UniformBlockData {\r\n        const v = this.ubd.add(); // UniformBlockData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createDescriptorData (\r\n        descriptorID = 0,\r\n        type: Type = Type.UNKNOWN,\r\n        count = 1,\r\n    ): DescriptorData {\r\n        const v = this.dd1.add(); // DescriptorData\r\n        v.reset(descriptorID, type, count);\r\n        return v;\r\n    }\r\n    createDescriptorBlockData (\r\n        type: DescriptorTypeOrder = DescriptorTypeOrder.UNIFORM_BUFFER,\r\n        visibility: ShaderStageFlagBit = ShaderStageFlagBit.NONE,\r\n        capacity = 0,\r\n        accessType: MemoryAccessBit = MemoryAccessBit.READ_ONLY,\r\n        viewDimension: ViewDimension = ViewDimension.UNKNOWN,\r\n        sampleType: SampleType = SampleType.FLOAT,\r\n        format: Format = Format.UNKNOWN,\r\n    ): DescriptorBlockData {\r\n        const v = this.dbd.add(); // DescriptorBlockData\r\n        v.reset(type, visibility, capacity, accessType, viewDimension, sampleType, format);\r\n        return v;\r\n    }\r\n    createDescriptorSetLayoutData (\r\n        slot = 0xFFFFFFFF,\r\n        capacity = 0,\r\n    ): DescriptorSetLayoutData {\r\n        const v = this.dsld.add(); // DescriptorSetLayoutData\r\n        v.reset(slot, capacity);\r\n        return v;\r\n    }\r\n    createDescriptorSetData (\r\n        descriptorSetLayout: DescriptorSetLayout | null = null,\r\n        descriptorSet: DescriptorSet | null = null,\r\n    ): DescriptorSetData {\r\n        const v = this.dsd.add(); // DescriptorSetData\r\n        v.reset(descriptorSetLayout, descriptorSet);\r\n        return v;\r\n    }\r\n    createPipelineLayoutData (): PipelineLayoutData {\r\n        const v = this.pld.add(); // PipelineLayoutData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createShaderBindingData (): ShaderBindingData {\r\n        const v = this.sbd.add(); // ShaderBindingData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createShaderLayoutData (): ShaderLayoutData {\r\n        const v = this.sld.add(); // ShaderLayoutData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createTechniqueData (): TechniqueData {\r\n        const v = this.td.add(); // TechniqueData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createEffectData (): EffectData {\r\n        const v = this.ed.add(); // EffectData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createShaderProgramData (): ShaderProgramData {\r\n        const v = this.spd.add(); // ShaderProgramData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createRenderStageData (): RenderStageData {\r\n        const v = this.rsd.add(); // RenderStageData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createRenderPhaseData (): RenderPhaseData {\r\n        const v = this.rpd.add(); // RenderPhaseData\r\n        v.reset();\r\n        return v;\r\n    }\r\n    createLayoutGraphData (): LayoutGraphData {\r\n        const v = this.lgd.add(); // LayoutGraphData\r\n        v.clear();\r\n        return v;\r\n    }\r\n    public readonly renderCommon: RenderCommonObjectPool;\r\n    private readonly l: RecyclePool<Layout> = createPool(Layout);\r\n    private readonly d: RecyclePool<Descriptor> = createPool(Descriptor);\r\n    private readonly db: RecyclePool<DescriptorBlock> = createPool(DescriptorBlock);\r\n    private readonly dbf: RecyclePool<DescriptorBlockFlattened> = createPool(DescriptorBlockFlattened);\r\n    private readonly dbi: RecyclePool<DescriptorBlockIndex> = createPool(DescriptorBlockIndex);\r\n    private readonly dgbi: RecyclePool<DescriptorGroupBlockIndex> = createPool(DescriptorGroupBlockIndex);\r\n    private readonly dd: RecyclePool<DescriptorDB> = createPool(DescriptorDB);\r\n    private readonly rp: RecyclePool<RenderPhase> = createPool(RenderPhase);\r\n    private readonly lg: RecyclePool<LayoutGraph> = createPool(LayoutGraph);\r\n    private readonly ud: RecyclePool<UniformData> = createPool(UniformData);\r\n    private readonly ubd: RecyclePool<UniformBlockData> = createPool(UniformBlockData);\r\n    private readonly dd1: RecyclePool<DescriptorData> = createPool(DescriptorData);\r\n    private readonly dbd: RecyclePool<DescriptorBlockData> = createPool(DescriptorBlockData);\r\n    private readonly dsld: RecyclePool<DescriptorSetLayoutData> = createPool(DescriptorSetLayoutData);\r\n    private readonly dsd: RecyclePool<DescriptorSetData> = createPool(DescriptorSetData);\r\n    private readonly pld: RecyclePool<PipelineLayoutData> = createPool(PipelineLayoutData);\r\n    private readonly sbd: RecyclePool<ShaderBindingData> = createPool(ShaderBindingData);\r\n    private readonly sld: RecyclePool<ShaderLayoutData> = createPool(ShaderLayoutData);\r\n    private readonly td: RecyclePool<TechniqueData> = createPool(TechniqueData);\r\n    private readonly ed: RecyclePool<EffectData> = createPool(EffectData);\r\n    private readonly spd: RecyclePool<ShaderProgramData> = createPool(ShaderProgramData);\r\n    private readonly rsd: RecyclePool<RenderStageData> = createPool(RenderStageData);\r\n    private readonly rpd: RecyclePool<RenderPhaseData> = createPool(RenderPhaseData);\r\n    private readonly lgd: RecyclePool<LayoutGraphData> = createPool(LayoutGraphData);\r\n}\r\n\r\nexport function saveDescriptor (a: OutputArchive, v: Descriptor): void {\r\n    a.n(v.type);\r\n    a.n(v.count);\r\n}\r\n\r\nexport function loadDescriptor (a: InputArchive, v: Descriptor): void {\r\n    v.type = a.n();\r\n    v.count = a.n();\r\n}\r\n\r\nexport function saveDescriptorBlock (a: OutputArchive, v: DescriptorBlock): void {\r\n    a.n(v.descriptors.size); // Map<string, Descriptor>\r\n    for (const [k1, v1] of v.descriptors) {\r\n        a.s(k1);\r\n        saveDescriptor(a, v1);\r\n    }\r\n    a.n(v.uniformBlocks.size); // Map<string, UniformBlock>\r\n    for (const [k1, v1] of v.uniformBlocks) {\r\n        a.s(k1);\r\n        saveUniformBlock(a, v1);\r\n    }\r\n    a.n(v.capacity);\r\n    a.n(v.count);\r\n}\r\n\r\nexport function loadDescriptorBlock (a: InputArchive, v: DescriptorBlock): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<string, Descriptor>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = new Descriptor();\r\n        loadDescriptor(a, v1);\r\n        v.descriptors.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<string, UniformBlock>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = new UniformBlock();\r\n        loadUniformBlock(a, v1);\r\n        v.uniformBlocks.set(k1, v1);\r\n    }\r\n    v.capacity = a.n();\r\n    v.count = a.n();\r\n}\r\n\r\nexport function saveDescriptorBlockFlattened (a: OutputArchive, v: DescriptorBlockFlattened): void {\r\n    a.n(v.descriptorNames.length); // string[]\r\n    for (const v1 of v.descriptorNames) {\r\n        a.s(v1);\r\n    }\r\n    a.n(v.uniformBlockNames.length); // string[]\r\n    for (const v1 of v.uniformBlockNames) {\r\n        a.s(v1);\r\n    }\r\n    a.n(v.descriptors.length); // Descriptor[]\r\n    for (const v1 of v.descriptors) {\r\n        saveDescriptor(a, v1);\r\n    }\r\n    a.n(v.uniformBlocks.length); // UniformBlock[]\r\n    for (const v1 of v.uniformBlocks) {\r\n        saveUniformBlock(a, v1);\r\n    }\r\n    a.n(v.capacity);\r\n    a.n(v.count);\r\n}\r\n\r\nexport function loadDescriptorBlockFlattened (a: InputArchive, v: DescriptorBlockFlattened): void {\r\n    let sz = 0;\r\n    sz = a.n(); // string[]\r\n    v.descriptorNames.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        v.descriptorNames[i1] = a.s();\r\n    }\r\n    sz = a.n(); // string[]\r\n    v.uniformBlockNames.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        v.uniformBlockNames[i1] = a.s();\r\n    }\r\n    sz = a.n(); // Descriptor[]\r\n    v.descriptors.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new Descriptor();\r\n        loadDescriptor(a, v1);\r\n        v.descriptors[i1] = v1;\r\n    }\r\n    sz = a.n(); // UniformBlock[]\r\n    v.uniformBlocks.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new UniformBlock();\r\n        loadUniformBlock(a, v1);\r\n        v.uniformBlocks[i1] = v1;\r\n    }\r\n    v.capacity = a.n();\r\n    v.count = a.n();\r\n}\r\n\r\nexport function saveDescriptorBlockIndex (a: OutputArchive, v: DescriptorBlockIndex): void {\r\n    a.n(v.updateFrequency);\r\n    a.n(v.parameterType);\r\n    a.n(v.descriptorType);\r\n    a.n(v.visibility);\r\n}\r\n\r\nexport function loadDescriptorBlockIndex (a: InputArchive, v: DescriptorBlockIndex): void {\r\n    v.updateFrequency = a.n();\r\n    v.parameterType = a.n();\r\n    v.descriptorType = a.n();\r\n    v.visibility = a.n();\r\n}\r\n\r\nexport function saveDescriptorGroupBlockIndex (a: OutputArchive, v: DescriptorGroupBlockIndex): void {\r\n    a.n(v.updateFrequency);\r\n    a.n(v.parameterType);\r\n    a.n(v.descriptorType);\r\n    a.n(v.visibility);\r\n    a.n(v.accessType);\r\n    a.n(v.viewDimension);\r\n    a.n(v.sampleType);\r\n    a.n(v.format);\r\n}\r\n\r\nexport function loadDescriptorGroupBlockIndex (a: InputArchive, v: DescriptorGroupBlockIndex): void {\r\n    v.updateFrequency = a.n();\r\n    v.parameterType = a.n();\r\n    v.descriptorType = a.n();\r\n    v.visibility = a.n();\r\n    v.accessType = a.n();\r\n    v.viewDimension = a.n();\r\n    v.sampleType = a.n();\r\n    v.format = a.n();\r\n}\r\n\r\nexport function saveDescriptorDB (a: OutputArchive, v: DescriptorDB): void {\r\n    a.n(v.blocks.size); // Map<string, DescriptorBlock>\r\n    for (const [k1, v1] of v.blocks) {\r\n        saveDescriptorBlockIndex(a, JSON.parse(k1) as DescriptorBlockIndex);\r\n        saveDescriptorBlock(a, v1);\r\n    }\r\n    a.n(v.groupBlocks.size); // Map<string, DescriptorBlock>\r\n    for (const [k1, v1] of v.groupBlocks) {\r\n        saveDescriptorGroupBlockIndex(a, JSON.parse(k1) as DescriptorGroupBlockIndex);\r\n        saveDescriptorBlock(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadDescriptorDB (a: InputArchive, v: DescriptorDB): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<string, DescriptorBlock>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = new DescriptorBlockIndex();\r\n        loadDescriptorBlockIndex(a, k1);\r\n        const v1 = new DescriptorBlock();\r\n        loadDescriptorBlock(a, v1);\r\n        v.blocks.set(JSON.stringify(k1), v1);\r\n    }\r\n    sz = a.n(); // Map<string, DescriptorBlock>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = new DescriptorGroupBlockIndex();\r\n        loadDescriptorGroupBlockIndex(a, k1);\r\n        const v1 = new DescriptorBlock();\r\n        loadDescriptorBlock(a, v1);\r\n        v.groupBlocks.set(JSON.stringify(k1), v1);\r\n    }\r\n}\r\n\r\nexport function saveRenderPhase (a: OutputArchive, v: RenderPhase): void {\r\n    a.n(v.shaders.size); // Set<string>\r\n    for (const v1 of v.shaders) {\r\n        a.s(v1);\r\n    }\r\n}\r\n\r\nexport function loadRenderPhase (a: InputArchive, v: RenderPhase): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Set<string>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = a.s();\r\n        v.shaders.add(v1);\r\n    }\r\n}\r\n\r\nexport function saveLayoutGraph (a: OutputArchive, g: LayoutGraph): void {\r\n    const numVertices = g.nv();\r\n    const numEdges = g.ne();\r\n    a.n(numVertices);\r\n    a.n(numEdges);\r\n    let numStages = 0;\r\n    let numPhases = 0;\r\n    for (const v of g.v()) {\r\n        switch (g.w(v)) {\r\n        case LayoutGraphValue.RenderStage:\r\n            numStages += 1;\r\n            break;\r\n        case LayoutGraphValue.RenderPhase:\r\n            numPhases += 1;\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    a.n(numStages);\r\n    a.n(numPhases);\r\n    for (const v of g.v()) {\r\n        a.n(g.w(v));\r\n        a.n(g.getParent(v));\r\n        a.s(g.getName(v));\r\n        saveDescriptorDB(a, g.getDescriptors(v));\r\n        switch (g.w(v)) {\r\n        case LayoutGraphValue.RenderStage:\r\n            a.n(g.x[v].j as RenderPassType);\r\n            break;\r\n        case LayoutGraphValue.RenderPhase:\r\n            saveRenderPhase(a, g.x[v].j as RenderPhase);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function loadLayoutGraph (a: InputArchive, g: LayoutGraph): void {\r\n    const numVertices = a.n();\r\n    const numEdges = a.n();\r\n    const numStages = a.n();\r\n    const numPhases = a.n();\r\n    for (let v = 0; v !== numVertices; ++v) {\r\n        const id = a.n();\r\n        const u = a.n();\r\n        const name = a.s();\r\n        const descriptors = new DescriptorDB();\r\n        loadDescriptorDB(a, descriptors);\r\n        switch (id) {\r\n        case LayoutGraphValue.RenderStage: {\r\n            const renderStage = a.n();\r\n            g.addVertex<LayoutGraphValue.RenderStage>(LayoutGraphValue.RenderStage, renderStage, name, descriptors, u);\r\n            break;\r\n        }\r\n        case LayoutGraphValue.RenderPhase: {\r\n            const renderPhase = new RenderPhase();\r\n            loadRenderPhase(a, renderPhase);\r\n            g.addVertex<LayoutGraphValue.RenderPhase>(LayoutGraphValue.RenderPhase, renderPhase, name, descriptors, u);\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function saveUniformData (a: OutputArchive, v: UniformData): void {\r\n    a.n(v.uniformID);\r\n    a.n(v.uniformType);\r\n    a.n(v.offset);\r\n    a.n(v.size);\r\n}\r\n\r\nexport function loadUniformData (a: InputArchive, v: UniformData): void {\r\n    v.uniformID = a.n();\r\n    v.uniformType = a.n();\r\n    v.offset = a.n();\r\n    v.size = a.n();\r\n}\r\n\r\nexport function saveUniformBlockData (a: OutputArchive, v: UniformBlockData): void {\r\n    a.n(v.bufferSize);\r\n    a.n(v.uniforms.length); // UniformData[]\r\n    for (const v1 of v.uniforms) {\r\n        saveUniformData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadUniformBlockData (a: InputArchive, v: UniformBlockData): void {\r\n    v.bufferSize = a.n();\r\n    let sz = 0;\r\n    sz = a.n(); // UniformData[]\r\n    v.uniforms.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new UniformData();\r\n        loadUniformData(a, v1);\r\n        v.uniforms[i1] = v1;\r\n    }\r\n}\r\n\r\nexport function saveDescriptorData (a: OutputArchive, v: DescriptorData): void {\r\n    a.n(v.descriptorID);\r\n    a.n(v.type);\r\n    a.n(v.count);\r\n}\r\n\r\nexport function loadDescriptorData (a: InputArchive, v: DescriptorData): void {\r\n    v.descriptorID = a.n();\r\n    v.type = a.n();\r\n    v.count = a.n();\r\n}\r\n\r\nexport function saveDescriptorBlockData (a: OutputArchive, v: DescriptorBlockData): void {\r\n    a.n(v.type);\r\n    a.n(v.visibility);\r\n    a.n(v.offset);\r\n    a.n(v.capacity);\r\n    a.n(v.accessType);\r\n    a.n(v.viewDimension);\r\n    a.n(v.sampleType);\r\n    a.n(v.format);\r\n    a.n(v.descriptors.length); // DescriptorData[]\r\n    for (const v1 of v.descriptors) {\r\n        saveDescriptorData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadDescriptorBlockData (a: InputArchive, v: DescriptorBlockData): void {\r\n    v.type = a.n();\r\n    v.visibility = a.n();\r\n    v.offset = a.n();\r\n    v.capacity = a.n();\r\n    v.accessType = a.n();\r\n    v.viewDimension = a.n();\r\n    v.sampleType = a.n();\r\n    v.format = a.n();\r\n    let sz = 0;\r\n    sz = a.n(); // DescriptorData[]\r\n    v.descriptors.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new DescriptorData();\r\n        loadDescriptorData(a, v1);\r\n        v.descriptors[i1] = v1;\r\n    }\r\n}\r\n\r\nexport function saveDescriptorSetLayoutData (a: OutputArchive, v: DescriptorSetLayoutData): void {\r\n    a.n(v.slot);\r\n    a.n(v.capacity);\r\n    a.n(v.uniformBlockCapacity);\r\n    a.n(v.samplerTextureCapacity);\r\n    a.n(v.descriptorBlocks.length); // DescriptorBlockData[]\r\n    for (const v1 of v.descriptorBlocks) {\r\n        saveDescriptorBlockData(a, v1);\r\n    }\r\n    a.n(v.uniformBlocks.size); // Map<number, UniformBlock>\r\n    for (const [k1, v1] of v.uniformBlocks) {\r\n        a.n(k1);\r\n        saveUniformBlock(a, v1);\r\n    }\r\n    a.n(v.bindingMap.size); // Map<number, number>\r\n    for (const [k1, v1] of v.bindingMap) {\r\n        a.n(k1);\r\n        a.n(v1);\r\n    }\r\n}\r\n\r\nexport function loadDescriptorSetLayoutData (a: InputArchive, v: DescriptorSetLayoutData): void {\r\n    v.slot = a.n();\r\n    v.capacity = a.n();\r\n    v.uniformBlockCapacity = a.n();\r\n    v.samplerTextureCapacity = a.n();\r\n    let sz = 0;\r\n    sz = a.n(); // DescriptorBlockData[]\r\n    v.descriptorBlocks.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new DescriptorBlockData();\r\n        loadDescriptorBlockData(a, v1);\r\n        v.descriptorBlocks[i1] = v1;\r\n    }\r\n    sz = a.n(); // Map<number, UniformBlock>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = new UniformBlock();\r\n        loadUniformBlock(a, v1);\r\n        v.uniformBlocks.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<number, number>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = a.n();\r\n        v.bindingMap.set(k1, v1);\r\n    }\r\n}\r\n\r\nexport function saveDescriptorSetData (a: OutputArchive, v: DescriptorSetData): void {\r\n    saveDescriptorSetLayoutData(a, v.descriptorSetLayoutData);\r\n    saveDescriptorSetLayoutInfo(a, v.descriptorSetLayoutInfo);\r\n    // skip, v.descriptorSetLayout: DescriptorSetLayout\r\n    // skip, v.descriptorSet: DescriptorSet\r\n}\r\n\r\nexport function loadDescriptorSetData (a: InputArchive, v: DescriptorSetData): void {\r\n    loadDescriptorSetLayoutData(a, v.descriptorSetLayoutData);\r\n    loadDescriptorSetLayoutInfo(a, v.descriptorSetLayoutInfo);\r\n    // skip, v.descriptorSetLayout: DescriptorSetLayout\r\n    // skip, v.descriptorSet: DescriptorSet\r\n}\r\n\r\nexport function savePipelineLayoutData (a: OutputArchive, v: PipelineLayoutData): void {\r\n    a.n(v.descriptorSets.size); // Map<UpdateFrequency, DescriptorSetData>\r\n    for (const [k1, v1] of v.descriptorSets) {\r\n        a.n(k1);\r\n        saveDescriptorSetData(a, v1);\r\n    }\r\n    a.n(v.descriptorGroups.size); // Map<UpdateFrequency, DescriptorSetData>\r\n    for (const [k1, v1] of v.descriptorGroups) {\r\n        a.n(k1);\r\n        saveDescriptorSetData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadPipelineLayoutData (a: InputArchive, v: PipelineLayoutData): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<UpdateFrequency, DescriptorSetData>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = new DescriptorSetData();\r\n        loadDescriptorSetData(a, v1);\r\n        v.descriptorSets.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<UpdateFrequency, DescriptorSetData>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = new DescriptorSetData();\r\n        loadDescriptorSetData(a, v1);\r\n        v.descriptorGroups.set(k1, v1);\r\n    }\r\n}\r\n\r\nexport function saveShaderBindingData (a: OutputArchive, v: ShaderBindingData): void {\r\n    a.n(v.descriptorBindings.size); // Map<number, number>\r\n    for (const [k1, v1] of v.descriptorBindings) {\r\n        a.n(k1);\r\n        a.n(v1);\r\n    }\r\n}\r\n\r\nexport function loadShaderBindingData (a: InputArchive, v: ShaderBindingData): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<number, number>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = a.n();\r\n        v.descriptorBindings.set(k1, v1);\r\n    }\r\n}\r\n\r\nexport function saveShaderLayoutData (a: OutputArchive, v: ShaderLayoutData): void {\r\n    a.n(v.layoutData.size); // Map<UpdateFrequency, DescriptorSetLayoutData>\r\n    for (const [k1, v1] of v.layoutData) {\r\n        a.n(k1);\r\n        saveDescriptorSetLayoutData(a, v1);\r\n    }\r\n    a.n(v.bindingData.size); // Map<UpdateFrequency, ShaderBindingData>\r\n    for (const [k1, v1] of v.bindingData) {\r\n        a.n(k1);\r\n        saveShaderBindingData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadShaderLayoutData (a: InputArchive, v: ShaderLayoutData): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<UpdateFrequency, DescriptorSetLayoutData>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = new DescriptorSetLayoutData();\r\n        loadDescriptorSetLayoutData(a, v1);\r\n        v.layoutData.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<UpdateFrequency, ShaderBindingData>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = new ShaderBindingData();\r\n        loadShaderBindingData(a, v1);\r\n        v.bindingData.set(k1, v1);\r\n    }\r\n}\r\n\r\nexport function saveTechniqueData (a: OutputArchive, v: TechniqueData): void {\r\n    a.n(v.passes.length); // ShaderLayoutData[]\r\n    for (const v1 of v.passes) {\r\n        saveShaderLayoutData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadTechniqueData (a: InputArchive, v: TechniqueData): void {\r\n    let sz = 0;\r\n    sz = a.n(); // ShaderLayoutData[]\r\n    v.passes.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new ShaderLayoutData();\r\n        loadShaderLayoutData(a, v1);\r\n        v.passes[i1] = v1;\r\n    }\r\n}\r\n\r\nexport function saveEffectData (a: OutputArchive, v: EffectData): void {\r\n    a.n(v.techniques.size); // Map<string, TechniqueData>\r\n    for (const [k1, v1] of v.techniques) {\r\n        a.s(k1);\r\n        saveTechniqueData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadEffectData (a: InputArchive, v: EffectData): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<string, TechniqueData>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = new TechniqueData();\r\n        loadTechniqueData(a, v1);\r\n        v.techniques.set(k1, v1);\r\n    }\r\n}\r\n\r\nexport function saveShaderProgramData (a: OutputArchive, v: ShaderProgramData): void {\r\n    savePipelineLayoutData(a, v.layout);\r\n    // skip, v.pipelineLayout: PipelineLayout\r\n}\r\n\r\nexport function loadShaderProgramData (a: InputArchive, v: ShaderProgramData): void {\r\n    loadPipelineLayoutData(a, v.layout);\r\n    // skip, v.pipelineLayout: PipelineLayout\r\n}\r\n\r\nexport function saveRenderStageData (a: OutputArchive, v: RenderStageData): void {\r\n    a.n(v.descriptorVisibility.size); // Map<number, ShaderStageFlagBit>\r\n    for (const [k1, v1] of v.descriptorVisibility) {\r\n        a.n(k1);\r\n        a.n(v1);\r\n    }\r\n}\r\n\r\nexport function loadRenderStageData (a: InputArchive, v: RenderStageData): void {\r\n    let sz = 0;\r\n    sz = a.n(); // Map<number, ShaderStageFlagBit>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.n();\r\n        const v1 = a.n();\r\n        v.descriptorVisibility.set(k1, v1);\r\n    }\r\n}\r\n\r\nexport function saveRenderPhaseData (a: OutputArchive, v: RenderPhaseData): void {\r\n    a.s(v.rootSignature);\r\n    a.n(v.shaderPrograms.length); // ShaderProgramData[]\r\n    for (const v1 of v.shaderPrograms) {\r\n        saveShaderProgramData(a, v1);\r\n    }\r\n    a.n(v.shaderIndex.size); // Map<string, number>\r\n    for (const [k1, v1] of v.shaderIndex) {\r\n        a.s(k1);\r\n        a.n(v1);\r\n    }\r\n    // skip, v.pipelineLayout: PipelineLayout\r\n}\r\n\r\nexport function loadRenderPhaseData (a: InputArchive, v: RenderPhaseData): void {\r\n    v.rootSignature = a.s();\r\n    let sz = 0;\r\n    sz = a.n(); // ShaderProgramData[]\r\n    v.shaderPrograms.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const v1 = new ShaderProgramData();\r\n        loadShaderProgramData(a, v1);\r\n        v.shaderPrograms[i1] = v1;\r\n    }\r\n    sz = a.n(); // Map<string, number>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = a.n();\r\n        v.shaderIndex.set(k1, v1);\r\n    }\r\n    // skip, v.pipelineLayout: PipelineLayout\r\n}\r\n\r\nexport function saveLayoutGraphData (a: OutputArchive, g: LayoutGraphData): void {\r\n    const numVertices = g.nv();\r\n    const numEdges = g.ne();\r\n    a.n(numVertices);\r\n    a.n(numEdges);\r\n    let numStages = 0;\r\n    let numPhases = 0;\r\n    for (const v of g.v()) {\r\n        switch (g.w(v)) {\r\n        case LayoutGraphDataValue.RenderStage:\r\n            numStages += 1;\r\n            break;\r\n        case LayoutGraphDataValue.RenderPhase:\r\n            numPhases += 1;\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    a.n(numStages);\r\n    a.n(numPhases);\r\n    for (const v of g.v()) {\r\n        a.n(g.w(v));\r\n        a.n(g.getParent(v));\r\n        a.s(g.getName(v));\r\n        a.n(g.getUpdate(v));\r\n        savePipelineLayoutData(a, g.getLayout(v));\r\n        switch (g.w(v)) {\r\n        case LayoutGraphDataValue.RenderStage:\r\n            saveRenderStageData(a, g.x[v].j as RenderStageData);\r\n            break;\r\n        case LayoutGraphDataValue.RenderPhase:\r\n            saveRenderPhaseData(a, g.x[v].j as RenderPhaseData);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    a.n(g.valueNames.length); // string[]\r\n    for (const v1 of g.valueNames) {\r\n        a.s(v1);\r\n    }\r\n    a.n(g.attributeIndex.size); // Map<string, number>\r\n    for (const [k1, v1] of g.attributeIndex) {\r\n        a.s(k1);\r\n        a.n(v1);\r\n    }\r\n    a.n(g.constantIndex.size); // Map<string, number>\r\n    for (const [k1, v1] of g.constantIndex) {\r\n        a.s(k1);\r\n        a.n(v1);\r\n    }\r\n    a.n(g.shaderLayoutIndex.size); // Map<string, number>\r\n    for (const [k1, v1] of g.shaderLayoutIndex) {\r\n        a.s(k1);\r\n        a.n(v1);\r\n    }\r\n    a.n(g.effects.size); // Map<string, EffectData>\r\n    for (const [k1, v1] of g.effects) {\r\n        a.s(k1);\r\n        saveEffectData(a, v1);\r\n    }\r\n}\r\n\r\nexport function loadLayoutGraphData (a: InputArchive, g: LayoutGraphData): void {\r\n    const numVertices = a.n();\r\n    const numEdges = a.n();\r\n    const numStages = a.n();\r\n    const numPhases = a.n();\r\n    for (let v = 0; v !== numVertices; ++v) {\r\n        const id = a.n();\r\n        const u = a.n();\r\n        const name = a.s();\r\n        const update = a.n();\r\n        const layout = new PipelineLayoutData();\r\n        loadPipelineLayoutData(a, layout);\r\n        switch (id) {\r\n        case LayoutGraphDataValue.RenderStage: {\r\n            const renderStage = new RenderStageData();\r\n            loadRenderStageData(a, renderStage);\r\n            g.addVertex<LayoutGraphDataValue.RenderStage>(LayoutGraphDataValue.RenderStage, renderStage, name, update, layout, u);\r\n            break;\r\n        }\r\n        case LayoutGraphDataValue.RenderPhase: {\r\n            const renderPhase = new RenderPhaseData();\r\n            loadRenderPhaseData(a, renderPhase);\r\n            g.addVertex<LayoutGraphDataValue.RenderPhase>(LayoutGraphDataValue.RenderPhase, renderPhase, name, update, layout, u);\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    let sz = 0;\r\n    sz = a.n(); // string[]\r\n    g.valueNames.length = sz;\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        g.valueNames[i1] = a.s();\r\n    }\r\n    sz = a.n(); // Map<string, number>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = a.n();\r\n        g.attributeIndex.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<string, number>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = a.n();\r\n        g.constantIndex.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<string, number>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = a.n();\r\n        g.shaderLayoutIndex.set(k1, v1);\r\n    }\r\n    sz = a.n(); // Map<string, EffectData>\r\n    for (let i1 = 0; i1 !== sz; ++i1) {\r\n        const k1 = a.s();\r\n        const v1 = new EffectData();\r\n        loadEffectData(a, v1);\r\n        g.effects.set(k1, v1);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { GraphColor, MutableVertexPropertyMap } from './graph';\r\n\r\nexport class VectorGraphColorMap implements MutableVertexPropertyMap<GraphColor> {\r\n    constructor (sz: number) {\r\n        this.colors = new Array<GraphColor>(sz);\r\n    }\r\n    get (u: number): GraphColor {\r\n        return this.colors[u];\r\n    }\r\n    put (u: number, value: GraphColor): void {\r\n        this.colors[u] = value;\r\n    }\r\n    readonly colors: Array<GraphColor>;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n// https://stackoverflow.com/questions/56714318/how-to-disable-multiple-rules-for-eslint-nextline?msclkid=5d4c2298ba7911eca34d0ab30591752e\r\n\r\nimport { Type } from '../../gfx';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\n\r\nexport function isUICamera (camera: Camera): boolean {\r\n    const scene = camera.scene!;\r\n    const batches = scene.batches;\r\n    for (let i = 0; batches && i < batches.length; i++) {\r\n        const batch = batches[i];\r\n        if (camera.visibility & batch.visFlags) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport function replacer (key: unknown, value: unknown): unknown {\r\n    if (value instanceof Map) {\r\n        return {\r\n            meta_t: 'Map',\r\n            value: Array.from(value.entries()).sort((a, b): number => String(a[0]).localeCompare(b[0])),\r\n        };\r\n    } else if (value instanceof Set) {\r\n        return {\r\n            meta_t: 'Set',\r\n            value: Array.from(value).sort(),\r\n        };\r\n    }\r\n    return value;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars\r\nexport function reviver (key: unknown, value: any): any {\r\n    if (typeof value === 'object' && value !== null) {\r\n        if (value.meta_t === 'Map') {\r\n            return new Map(value.value);\r\n        } else if (value.meta_t === 'Set') {\r\n            return new Set(value.value);\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return value;\r\n}\r\n\r\nexport function stringify (data: unknown, space?: string | number | undefined): string {\r\n    return JSON.stringify(data, replacer, space);\r\n}\r\n\r\nexport function parse (text: string): any {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return JSON.parse(text, reviver);\r\n}\r\n\r\nexport function getUBOTypeCount (type: Type): number {\r\n    switch (type) {\r\n    case Type.BOOL:\r\n    case Type.INT:\r\n    case Type.UINT:\r\n    case Type.FLOAT:\r\n        return 1;\r\n    case Type.INT2:\r\n    case Type.FLOAT2:\r\n    case Type.UINT2:\r\n    case Type.BOOL2:\r\n        return 2;\r\n    case Type.FLOAT3:\r\n    case Type.BOOL3:\r\n    case Type.UINT3:\r\n    case Type.INT3:\r\n        return 3;\r\n    case Type.BOOL4:\r\n    case Type.FLOAT4:\r\n    case Type.UINT4:\r\n    case Type.INT4:\r\n        return 4;\r\n    case Type.MAT2:\r\n        return 4;\r\n    case Type.MAT2X3:\r\n    case Type.MAT3X2:\r\n        return 6;\r\n    case Type.MAT2X4:\r\n    case Type.MAT4X2:\r\n        return 8;\r\n    case Type.MAT3:\r\n        return 9;\r\n    case Type.MAT3X4:\r\n    case Type.MAT4X3:\r\n        return 12;\r\n    case Type.MAT4:\r\n        return 16;\r\n    default:\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport class ObjectPool<T, U extends any[]> {\r\n    // Array to store objects in the pool\r\n    private pool: T[] = [];\r\n    // Function to create new objects\r\n    private createFunction: (...args: U) => T;\r\n\r\n    // Constructor, takes a function to create objects as parameter\r\n    constructor (createFunction: (...args: U) => T) {\r\n        this.createFunction = createFunction;\r\n    }\r\n    // Get object from the pool, either take from the pool if available or create a new one\r\n    acquire (...args: U): T {\r\n        if (this.pool.length > 0) {\r\n            return this.pool.pop()!;\r\n        }\r\n        return this.createFunction(...args);\r\n    }\r\n    // Put the object back into the pool for later reuse\r\n    release (obj: T): void {\r\n        // Push the object to the end of the pool\r\n        if (!this.pool.includes(obj)) {\r\n            this.pool.push(obj);\r\n        }\r\n    }\r\n\r\n    create (...args: U): T {\r\n        return this.createFunction(...args);\r\n    }\r\n}\r\n","import { Mat4, RecyclePool, IVec4Like, IMat4Like, IVec2Like,\r\n    Color as CoreColor, assert, cclegacy, Quat, Vec4, Vec2, Vec3, toRadian } from '../../core';\r\nimport { Color, CommandBuffer, DescriptorSet, Buffer, Device, PipelineState, RenderPass,\r\n    Sampler, Texture, deviceManager, Shader, InputAssembler } from '../../gfx';\r\nimport { IMacroPatch, Pass, RenderScene } from '../../render-scene';\r\nimport { Camera, CSMLevel, DirectionalLight, Light, LightType, Model, PCFType, PointLight,\r\n    RangedDirectionalLight, Shadows, ShadowType, SphereLight, SpotLight, SubModel } from '../../render-scene/scene';\r\nimport { Root } from '../../root';\r\nimport { SetIndex, supportsR32FloatTexture } from '../define';\r\nimport { InstancedBuffer, instancingCompareFn } from '../instanced-buffer';\r\nimport { PipelineStateManager } from '../pipeline-state-manager';\r\nimport { LayoutGraphData } from './layout-graph';\r\nimport { RenderData } from './render-graph';\r\nimport { SceneFlags, UpdateFrequency } from './types';\r\nimport { Setter } from './pipeline';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { CSMLayers, CSMShadowLayer } from '../shadow/csm-layers';\r\nimport { builtinResMgr } from '../../asset/asset-manager';\r\nimport { TextureCube } from '../../asset/assets';\r\n\r\nconst _uboVec = new Vec4();\r\nconst _uboVec3 = new Vec3();\r\nconst _uboCol = new Color();\r\nconst _matView = new Mat4();\r\nconst _mulMatView = new Mat4();\r\nexport function setTextureUBOView (setter: WebSetter, cfg: Readonly<PipelineSceneData>, layout = 'default'): void {\r\n    const skybox = cfg.skybox;\r\n    const director = cclegacy.director;\r\n    const root = director.root;\r\n    const pipeline = root.pipeline;\r\n    if (skybox.reflectionMap) {\r\n        const texture = skybox.reflectionMap.getGFXTexture()!;\r\n        const sampler: Sampler = root.device.getSampler(skybox.reflectionMap.getSamplerInfo());\r\n        setter.setTexture('cc_environment', texture);\r\n        setter.setSampler('cc_environment', sampler);\r\n    } else {\r\n        const envmap = skybox.envmap ? skybox.envmap : builtinResMgr.get<TextureCube>('default-cube-texture');\r\n        if (envmap) {\r\n            const texture = envmap.getGFXTexture()!;\r\n            const sampler: Sampler = root.device.getSampler(envmap.getSamplerInfo());\r\n            setter.setTexture('cc_environment', texture);\r\n            setter.setSampler('cc_environment', sampler);\r\n        }\r\n    }\r\n    const diffuseMap = skybox.diffuseMap ? skybox.diffuseMap : builtinResMgr.get<TextureCube>('default-cube-texture');\r\n    if (diffuseMap) {\r\n        const texture = diffuseMap.getGFXTexture()!;\r\n        const sampler: Sampler = root.device.getSampler(diffuseMap.getSamplerInfo());\r\n        setter.setTexture('cc_diffuseMap', texture);\r\n        setter.setSampler('cc_diffuseMap', sampler);\r\n    }\r\n    if (!setter.hasSampler('cc_shadowMap')) {\r\n        setter.setSampler('cc_shadowMap', pipeline.defaultSampler as Sampler);\r\n    }\r\n    if (!setter.hasTexture('cc_shadowMap')) {\r\n        setter.setTexture('cc_shadowMap', pipeline.defaultShadowTexture as Texture);\r\n    }\r\n    if (!setter.hasSampler('cc_spotShadowMap')) {\r\n        setter.setSampler('cc_spotShadowMap', pipeline.defaultSampler as Sampler);\r\n    }\r\n    if (!setter.hasTexture('cc_spotShadowMap')) {\r\n        setter.setTexture('cc_spotShadowMap', pipeline.defaultShadowTexture as Texture);\r\n    }\r\n}\r\n\r\nexport function setCameraUBOValues (\r\n    setter: WebSetter,\r\n    camera: Readonly<Camera> | null,\r\n    cfg: Readonly<PipelineSceneData>,\r\n    scene: RenderScene | null,\r\n    layoutName = 'default',\r\n): void {\r\n    const director = cclegacy.director;\r\n    const root = director.root;\r\n    const pipeline = root.pipeline;\r\n    const shadowInfo = cfg.shadows;\r\n    const skybox = cfg.skybox;\r\n    const shadingScale = cfg.shadingScale;\r\n    // Camera\r\n    if (camera) {\r\n        setter.setMat4('cc_matView', camera.matView);\r\n        setter.setMat4('cc_matViewInv', camera.node.worldMatrix);\r\n        setter.setMat4('cc_matProj', camera.matProj);\r\n        setter.setMat4('cc_matProjInv', camera.matProjInv);\r\n        setter.setMat4('cc_matViewProj', camera.matViewProj);\r\n        setter.setMat4('cc_matViewProjInv', camera.matViewProjInv);\r\n        _uboVec.set(\r\n            camera.surfaceTransform,\r\n            camera.cameraUsage,\r\n            Math.cos(toRadian(skybox.getRotationAngle())),\r\n            Math.sin(toRadian(skybox.getRotationAngle())),\r\n        );\r\n        setter.setVec4('cc_surfaceTransform', _uboVec);\r\n        _uboVec.set(camera.exposure, 1.0 / camera.exposure, cfg.isHDR ? 1.0 : 0.0, 1.0 / Camera.standardExposureValue);\r\n        setter.setVec4('cc_exposure', _uboVec);\r\n    }\r\n    if (camera) {\r\n        _uboVec.set(camera.position.x, camera.position.y, camera.position.z, pipeline.getCombineSignY() as number);\r\n    } else {\r\n        _uboVec.set(0, 0, 0, pipeline.getCombineSignY() as number);\r\n    }\r\n    setter.setVec4('cc_cameraPos', _uboVec);\r\n    _uboVec.set(cfg.shadingScale, cfg.shadingScale, 1.0 / cfg.shadingScale, 1.0 / cfg.shadingScale);\r\n    setter.setVec4('cc_screenScale', _uboVec);\r\n    const mainLight = scene && scene.mainLight;\r\n    if (mainLight) {\r\n        const shadowEnable = (mainLight.shadowEnabled && shadowInfo.type === ShadowType.ShadowMap) ? 1.0 : 0.0;\r\n        _uboVec.set(mainLight.direction.x, mainLight.direction.y, mainLight.direction.z, shadowEnable);\r\n        setter.setVec4('cc_mainLitDir', _uboVec);\r\n        let r = mainLight.color.x;\r\n        let g = mainLight.color.y;\r\n        let b = mainLight.color.z;\r\n        if (mainLight.useColorTemperature) {\r\n            r *= mainLight.colorTemperatureRGB.x;\r\n            g *= mainLight.colorTemperatureRGB.y;\r\n            b *= mainLight.colorTemperatureRGB.z;\r\n        }\r\n        let w = mainLight.illuminance;\r\n        if (cfg.isHDR && camera) {\r\n            w *= camera.exposure;\r\n        }\r\n        _uboVec.set(r, g, b, w);\r\n        setter.setVec4('cc_mainLitColor', _uboVec);\r\n    } else {\r\n        _uboVec.set(0, 0, 1, 0);\r\n        setter.setVec4('cc_mainLitDir', _uboVec);\r\n        _uboVec.set(0, 0, 0, 0);\r\n        setter.setVec4('cc_mainLitColor', _uboVec);\r\n    }\r\n\r\n    const ambient = cfg.ambient;\r\n    const skyColor = ambient.skyColor;\r\n    if (cfg.isHDR) {\r\n        skyColor.w = ambient.skyIllum * (camera ? camera.exposure : 1);\r\n    } else {\r\n        skyColor.w = ambient.skyIllum;\r\n    }\r\n    _uboVec.set(skyColor.x, skyColor.y, skyColor.z, skyColor.w);\r\n    setter.setVec4('cc_ambientSky', _uboVec);\r\n    _uboVec.set(ambient.groundAlbedo.x, ambient.groundAlbedo.y, ambient.groundAlbedo.z, skybox.envmap ? skybox.envmap?.mipmapLevel : 1.0);\r\n    setter.setVec4('cc_ambientGround', _uboVec);\r\n    const fog = cfg.fog;\r\n    const colorTempRGB = fog.colorArray;\r\n    _uboVec.set(colorTempRGB.x, colorTempRGB.y, colorTempRGB.z, colorTempRGB.z);\r\n    setter.setVec4('cc_fogColor', _uboVec);\r\n    _uboVec.set(fog.fogStart, fog.fogEnd, fog.fogDensity, 0.0);\r\n    setter.setVec4('cc_fogBase', _uboVec);\r\n    _uboVec.set(fog.fogTop, fog.fogRange, fog.fogAtten, 0.0);\r\n    setter.setVec4('cc_fogAdd', _uboVec);\r\n    if (camera) {\r\n        _uboVec.set(camera.nearClip, camera.farClip, camera.getClipSpaceMinz(), 0.0);\r\n        setter.setVec4('cc_nearFar', _uboVec);\r\n        _uboVec.set(\r\n            camera.viewport.x,\r\n            camera.viewport.y,\r\n            shadingScale * camera.window.width * camera.viewport.z,\r\n            shadingScale * camera.window.height * camera.viewport.w,\r\n        );\r\n        setter.setVec4('cc_viewPort', _uboVec);\r\n    }\r\n}\r\n\r\nexport class DrawInstance {\r\n    subModel: SubModel | null;\r\n    priority: number;\r\n    hash: number;\r\n    depth: number;\r\n    shaderID: number;\r\n    passIndex: number;\r\n\r\n    constructor (\r\n        subModel: SubModel | null = null,\r\n        priority = 0,\r\n        hash = 0,\r\n        depth = 0,\r\n        shaderID = 0,\r\n        passIndex = 0,\r\n    ) {\r\n        this.subModel = subModel;\r\n        this.priority = priority;\r\n        this.hash = hash;\r\n        this.depth = depth;\r\n        this.shaderID = shaderID;\r\n        this.passIndex = passIndex;\r\n    }\r\n    update (\r\n        subModel: SubModel | null = null,\r\n        priority = 0,\r\n        hash = 0,\r\n        depth = 0,\r\n        shaderID = 0,\r\n        passIndex = 0,\r\n    ): void {\r\n        this.subModel = subModel;\r\n        this.priority = priority;\r\n        this.hash = hash;\r\n        this.depth = depth;\r\n        this.shaderID = shaderID;\r\n        this.passIndex = passIndex;\r\n    }\r\n}\r\n\r\nexport const instancePool = new RecyclePool(() => new DrawInstance(), 8);\r\n\r\nconst CC_USE_RGBE_OUTPUT = 'CC_USE_RGBE_OUTPUT';\r\nfunction getLayoutId (passLayout: string, phaseLayout: string): number {\r\n    const r = cclegacy.rendering;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return r.getPhaseID(r.getPassID(passLayout), phaseLayout);\r\n}\r\nfunction getPassIndexFromLayout (subModel: SubModel, phaseLayoutId: number): number {\r\n    const passes = subModel.passes;\r\n    for (let k = 0; k < passes.length; k++) {\r\n        if ((passes[k].phaseID === phaseLayoutId)) {\r\n            return k;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport class ProbeHelperQueue {\r\n    probeMap: Array<SubModel> = new Array<SubModel>();\r\n    defaultId: number = getLayoutId('default', 'default');\r\n\r\n    clear (): void {\r\n        this.probeMap.length = 0;\r\n    }\r\n\r\n    applyMacro (): void {\r\n        for (const subModel of this.probeMap) {\r\n            let patches: IMacroPatch[] = [\r\n                { name: CC_USE_RGBE_OUTPUT, value: true },\r\n            ];\r\n            if (subModel.patches) {\r\n                patches = patches.concat(subModel.patches);\r\n            }\r\n            subModel.onMacroPatchesStateChanged(patches);\r\n        }\r\n    }\r\n    removeMacro (): void {\r\n        for (const subModel of this.probeMap) {\r\n            if (!subModel.patches) continue;\r\n            const patches = subModel.patches.filter(\r\n                (patch) => patch.name !== CC_USE_RGBE_OUTPUT,\r\n            );\r\n            if (patches.length === 0) {\r\n                subModel.onMacroPatchesStateChanged(null);\r\n            } else {\r\n                subModel.onMacroPatchesStateChanged(patches);\r\n            }\r\n        }\r\n    }\r\n    addToProbeQueue (model: Model, probeLayoutId: number): void {\r\n        const subModels = model.subModels;\r\n        for (let j = 0; j < subModels.length; j++) {\r\n            const subModel: SubModel = subModels[j];\r\n\r\n            //Filter transparent objects\r\n            const isTransparent = subModel.passes[0].blendState.targets[0].blend;\r\n            if (isTransparent) {\r\n                continue;\r\n            }\r\n\r\n            let passIdx = getPassIndexFromLayout(subModel, probeLayoutId);\r\n            let bUseReflectPass = true;\r\n            if (passIdx < 0) {\r\n                probeLayoutId = this.defaultId;\r\n                passIdx = getPassIndexFromLayout(subModel, probeLayoutId);\r\n                bUseReflectPass = false;\r\n            }\r\n            if (passIdx < 0) { continue; }\r\n            if (!bUseReflectPass) {\r\n                this.probeMap.push(subModel);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setShadowUBOLightView (\r\n    setter: WebSetter,\r\n    camera: Camera | null,\r\n    light: Light,\r\n    csmLevel: number,\r\n    layout = 'default',\r\n): void {\r\n    const director = cclegacy.director;\r\n    const pipeline = (director.root as Root).pipeline;\r\n    const device = pipeline.device;\r\n    const sceneData = pipeline.pipelineSceneData;\r\n\r\n    const shadowInfo = sceneData.shadows;\r\n    if (shadowInfo.type === ShadowType.Planar) {\r\n        return;\r\n    }\r\n    const csmLayers = sceneData.csmLayers;\r\n    const packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;\r\n    const cap = pipeline.device.capabilities;\r\n    // ShadowMap\r\n    if (shadowInfo.enabled) {\r\n        if (shadowInfo.type === ShadowType.ShadowMap) {\r\n            // update CSM layers\r\n            if (light && light.node && light.type === LightType.DIRECTIONAL) {\r\n                csmLayers.update(sceneData, camera!);\r\n            }\r\n        }\r\n    }\r\n    switch (light.type) {\r\n    case LightType.DIRECTIONAL: {\r\n        const mainLight = light as DirectionalLight;\r\n        if (shadowInfo.enabled && mainLight && mainLight.shadowEnabled) {\r\n            if (shadowInfo.type === ShadowType.ShadowMap) {\r\n                let near = 0.1;\r\n                let far = 0;\r\n                let matShadowView: Mat4;\r\n                let matShadowProj: Mat4;\r\n                let matShadowViewProj: Mat4;\r\n                let levelCount = 0;\r\n                if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1) {\r\n                    matShadowView = csmLayers.specialLayer.matShadowView;\r\n                    matShadowProj = csmLayers.specialLayer.matShadowProj;\r\n                    matShadowViewProj = csmLayers.specialLayer.matShadowViewProj;\r\n                    if (mainLight.shadowFixedArea) {\r\n                        near = mainLight.shadowNear;\r\n                        far = mainLight.shadowFar;\r\n                        levelCount = 0;\r\n                    } else {\r\n                        near = 0.1;\r\n                        far = csmLayers.specialLayer.shadowCameraFar;\r\n                        levelCount = 1;\r\n                    }\r\n                    _uboVec.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, 0);\r\n                    setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n                } else {\r\n                    const layer = csmLayers.layers[csmLevel];\r\n                    matShadowView = layer.matShadowView;\r\n                    matShadowProj = layer.matShadowProj;\r\n                    matShadowViewProj = layer.matShadowViewProj;\r\n\r\n                    near = layer.splitCameraNear;\r\n                    far = layer.splitCameraFar;\r\n                    levelCount = mainLight.csmLevel;\r\n                }\r\n                setter.setMat4('cc_matLightView', matShadowView);\r\n                _uboVec.set(matShadowProj.m10, matShadowProj.m14, matShadowProj.m11, matShadowProj.m15);\r\n                setter.setVec4('cc_shadowProjDepthInfo', _uboVec);\r\n                _uboVec.set(matShadowProj.m00, matShadowProj.m05, 1.0 / matShadowProj.m00, 1.0 / matShadowProj.m05);\r\n                setter.setVec4('cc_shadowProjInfo', _uboVec);\r\n                setter.setMat4('cc_matLightViewProj', matShadowViewProj);\r\n                _uboVec.set(near, far, 0, 1.0 - mainLight.shadowSaturation);\r\n                setter.setVec4('cc_shadowNFLSInfo', _uboVec);\r\n                _uboVec.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, levelCount);\r\n                setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n                _uboVec.set(shadowInfo.size.x, shadowInfo.size.y, mainLight.shadowPcf, mainLight.shadowBias);\r\n                setter.setVec4('cc_shadowWHPBInfo', _uboVec);\r\n            }\r\n        }\r\n        break;\r\n    }\r\n    case LightType.SPOT: {\r\n        const spotLight = light as SpotLight;\r\n        if (shadowInfo.enabled && spotLight && spotLight.shadowEnabled) {\r\n            Mat4.invert(_matView, spotLight.node!.getWorldMatrix());\r\n            setter.setMat4('cc_matLightView', _matView);\r\n            Mat4.perspective(\r\n                _mulMatView,\r\n                spotLight.angle,\r\n                1.0,\r\n                0.001,\r\n                spotLight.range,\r\n                true,\r\n                cap.clipSpaceMinZ,\r\n                cap.clipSpaceSignY,\r\n                0,\r\n            );\r\n            const matShadowInvProj: Mat4 = _mulMatView.clone().invert();\r\n            const matShadowProj: Mat4 = _mulMatView.clone();\r\n\r\n            Mat4.multiply(_matView, _mulMatView, _matView);\r\n            setter.setMat4('cc_matLightViewProj', _matView);\r\n            _uboVec.set(0.01, (light as SpotLight).range, 0.0, 0.0);\r\n            setter.setVec4('cc_shadowNFLSInfo', _uboVec);\r\n            _uboVec.set(shadowInfo.size.x, shadowInfo.size.y, spotLight.shadowPcf, spotLight.shadowBias);\r\n            setter.setVec4('cc_shadowWHPBInfo', _uboVec);\r\n            _uboVec.set(LightType.SPOT, packing, spotLight.shadowNormalBias, 0.0);\r\n            setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n            _uboVec.set(matShadowProj.m10, matShadowProj.m14, matShadowProj.m11, matShadowProj.m15);\r\n            setter.setVec4('cc_shadowProjDepthInfo', _uboVec);\r\n            _uboVec.set(matShadowInvProj.m10, matShadowInvProj.m14, matShadowInvProj.m11, matShadowInvProj.m15);\r\n            setter.setVec4('cc_shadowInvProjDepthInfo', _uboVec);\r\n            _uboVec.set(matShadowProj.m00, matShadowProj.m05, 1.0 / matShadowProj.m00, 1.0 / matShadowProj.m05);\r\n            setter.setVec4('cc_shadowProjInfo', _uboVec);\r\n        }\r\n        break;\r\n    }\r\n    case LightType.SPHERE: {\r\n        _uboVec.set(shadowInfo.size.x, shadowInfo.size.y, 1.0, 0.0);\r\n        setter.setVec4('cc_shadowWHPBInfo', _uboVec);\r\n        _uboVec.set(LightType.SPHERE, packing, 0.0, 0.0);\r\n        setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n        break;\r\n    }\r\n    case LightType.POINT: {\r\n        _uboVec.set(shadowInfo.size.x, shadowInfo.size.y, 1.0, 0.0);\r\n        setter.setVec4('cc_shadowWHPBInfo', _uboVec);\r\n        _uboVec.set(LightType.POINT, packing, 0.0, 0.0);\r\n        setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n        break;\r\n    }\r\n    default:\r\n    }\r\n    _uboCol.set(shadowInfo.shadowColor.x, shadowInfo.shadowColor.y, shadowInfo.shadowColor.z, shadowInfo.shadowColor.w);\r\n    setter.setColor('cc_shadowColor', _uboCol);\r\n}\r\n\r\nfunction getPCFRadius (shadowInfo: Shadows, mainLight: DirectionalLight): number {\r\n    const shadowMapSize = shadowInfo.size.x;\r\n    switch (mainLight.shadowPcf) {\r\n    case PCFType.HARD:\r\n        return 0.0;\r\n    case PCFType.SOFT:\r\n        return 1.0 / (shadowMapSize * 0.5);\r\n    case PCFType.SOFT_2X:\r\n        return 2.0 / (shadowMapSize * 0.5);\r\n    case PCFType.SOFT_4X:\r\n        return 3.0 / (shadowMapSize * 0.5);\r\n    default:\r\n    }\r\n    return 0.0;\r\n}\r\nexport function setShadowUBOView (setter: WebSetter, camera: Camera | null, layout = 'default'): void {\r\n    const director = cclegacy.director;\r\n    const pipeline = director.root.pipeline;\r\n    const device: Device = pipeline.device;\r\n    const scene = director.getScene();\r\n    const mainLight: DirectionalLight = camera && camera.scene ? camera.scene.mainLight : scene ? scene.renderScene.mainLight : null;\r\n    const sceneData = pipeline.pipelineSceneData;\r\n    const shadowInfo: Shadows = sceneData.shadows;\r\n    const csmLayers: CSMLayers = sceneData.csmLayers;\r\n    const csmSupported = sceneData.csmSupported;\r\n    const packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;\r\n    if (mainLight && shadowInfo.enabled) {\r\n        if (shadowInfo.type === ShadowType.ShadowMap) {\r\n            if (mainLight.shadowEnabled) {\r\n                if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !csmSupported) {\r\n                    const matShadowView: Mat4 = csmLayers.specialLayer.matShadowView;\r\n                    const matShadowProj: Mat4 = csmLayers.specialLayer.matShadowProj;\r\n                    const matShadowViewProj: Mat4 = csmLayers.specialLayer.matShadowViewProj;\r\n                    const near: number = mainLight.shadowNear;\r\n                    const far: number = mainLight.shadowFar;\r\n                    setter.setMat4('cc_matLightView', matShadowView);\r\n                    _uboVec.set(matShadowProj.m10, matShadowProj.m14, matShadowProj.m11, matShadowProj.m15);\r\n                    setter.setVec4('cc_shadowProjDepthInfo', _uboVec);\r\n                    _uboVec.set(matShadowProj.m00, matShadowProj.m05, 1.0 / matShadowProj.m00, 1.0 / matShadowProj.m05);\r\n                    setter.setVec4('cc_shadowProjInfo', _uboVec);\r\n                    setter.setMat4('cc_matLightViewProj', matShadowViewProj);\r\n                    _uboVec.set(near, far, 0, 1.0 - mainLight.shadowSaturation);\r\n                    setter.setVec4('cc_shadowNFLSInfo', _uboVec);\r\n                    _uboVec.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, 0);\r\n                    setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n                } else {\r\n                    const layerThreshold = getPCFRadius(shadowInfo, mainLight);\r\n                    for (let i = 0; i < mainLight.csmLevel; i++) {\r\n                        const layer: CSMShadowLayer = csmLayers.layers[i];\r\n                        const matShadowView: Mat4 = layer.matShadowView;\r\n                        _uboVec.set(matShadowView.m00, matShadowView.m04, matShadowView.m08, layerThreshold);\r\n                        setter.setVec4('cc_csmViewDir0', _uboVec, i);\r\n                        _uboVec.set(matShadowView.m01, matShadowView.m05, matShadowView.m09, layer.splitCameraNear);\r\n                        setter.setVec4('cc_csmViewDir1', _uboVec, i);\r\n                        _uboVec.set(matShadowView.m02, matShadowView.m06, matShadowView.m10, layer.splitCameraFar);\r\n                        setter.setVec4('cc_csmViewDir2', _uboVec, i);\r\n\r\n                        const csmAtlas = layer.csmAtlas;\r\n                        setter.setVec4('cc_csmAtlas', csmAtlas, i);\r\n\r\n                        const matShadowViewProj = layer.matShadowViewProj;\r\n                        setter.setMat4('cc_matCSMViewProj', matShadowViewProj, i);\r\n                        const matShadowProj = layer.matShadowProj;\r\n                        _uboVec.set(matShadowProj.m10, matShadowProj.m14, matShadowProj.m11, matShadowProj.m15);\r\n                        setter.setVec4('cc_csmProjDepthInfo', _uboVec, i);\r\n\r\n                        _uboVec.set(matShadowProj.m00, matShadowProj.m05, 1.0 / matShadowProj.m00, 1.0 / matShadowProj.m05);\r\n                        setter.setVec4('cc_csmProjInfo', _uboVec, i);\r\n                    }\r\n                    _uboVec.set(mainLight.csmTransitionRange, 0, 0, 0);\r\n                    setter.setVec4('cc_csmSplitsInfo', _uboVec);\r\n                    _uboVec.set(0.1, mainLight.shadowDistance, 0, 1.0 - mainLight.shadowSaturation);\r\n                    setter.setVec4('cc_shadowNFLSInfo', _uboVec);\r\n                    _uboVec.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, mainLight.csmLevel);\r\n                    setter.setVec4('cc_shadowLPNNInfo', _uboVec);\r\n                }\r\n                _uboVec.set(shadowInfo.size.x, shadowInfo.size.y, mainLight.shadowPcf, mainLight.shadowBias);\r\n                setter.setVec4('cc_shadowWHPBInfo', _uboVec);\r\n            }\r\n        } else {\r\n            Vec3.normalize(_uboVec3, shadowInfo.normal);\r\n            _uboVec.set(_uboVec3.x, _uboVec3.y, _uboVec3.z, -shadowInfo.distance);\r\n            setter.setVec4('cc_planarNDInfo', _uboVec);\r\n\r\n            _uboVec.set(0, 0, 0, shadowInfo.planeBias);\r\n            setter.setVec4('cc_shadowWHPBInfo', _uboVec);\r\n        }\r\n        setter.setMathColor('cc_shadowColor', shadowInfo.shadowColor);\r\n    }\r\n}\r\n\r\nexport class WebSetter implements Setter {\r\n    constructor (data: RenderData, lg: LayoutGraphData) {\r\n        this._data = data;\r\n        this._lg = lg;\r\n    }\r\n    get name (): string {\r\n        return '';\r\n    }\r\n    set name (name: string) {\r\n        // noop\r\n    }\r\n\r\n    public setMat4 (name: string, mat: Mat4, idx = 0): void {\r\n        WebSetter.setMat4(this._lg, this._data, name, mat, idx);\r\n    }\r\n\r\n    public static setMat4 (lg: LayoutGraphData, data: RenderData, name: string, mat: Mat4, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        Mat4.toArray(info.dataArr, mat, idx * 16);\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n\r\n    public setQuaternion (name: string, quat: Quat, idx = 0): void {\r\n        WebSetter.setQuaternion(this._lg, this._data, name, quat, idx);\r\n    }\r\n    public static setQuaternion (lg: LayoutGraphData, data: RenderData, name: string, quat: Quat, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        Quat.toArray(info.dataArr, quat, idx * 4);\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n    public setColor (name: string, color: Color, idx = 0): void {\r\n        WebSetter.setColor(this._lg, this._data, name, color, idx);\r\n    }\r\n\r\n    public static setColor (lg: LayoutGraphData, data: RenderData, name: string, color: Color, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        const currIdx = idx * 4;\r\n        info.dataArr[0 + currIdx] = color.x;\r\n        info.dataArr[1 + currIdx] = color.y;\r\n        info.dataArr[2 + currIdx] = color.z;\r\n        info.dataArr[3 + currIdx] = color.w;\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n\r\n    public setMathColor (name: string, color: CoreColor, idx = 0): void {\r\n        WebSetter.setMathColor(this._lg, this._data, name, color, idx);\r\n    }\r\n    public static setMathColor (lg: LayoutGraphData, data: RenderData,  name: string, color: CoreColor, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        CoreColor.toArray(info.dataArr, color, idx * 4);\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n    public static getConstantInfo (lg: LayoutGraphData, data: RenderData, name: string): { constantID: number, dataArr: Array<number>} {\r\n        const constantID = lg.constantIndex.get(name)!;\r\n        if (constantID === undefined) {\r\n            throw new Error(`Constant with name ${name} not found.`);\r\n        }\r\n        const dataArr = data.constants.get(constantID)! || [];\r\n        return { constantID, dataArr };\r\n    }\r\n    public setVec4 (name: string, vec: Vec4, idx = 0): void {\r\n        WebSetter.setVec4(this._lg, this._data, name, vec, idx);\r\n    }\r\n    public static setVec4 (lg: LayoutGraphData, data: RenderData, name: string, vec: Vec4, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        Vec4.toArray(info.dataArr, vec, idx * 4);\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n    public setVec2 (name: string, vec: Vec2, idx = 0): void {\r\n        WebSetter.setVec2(this._lg, this._data, name, vec, idx);\r\n    }\r\n    public static setVec2 (lg: LayoutGraphData, data: RenderData, name: string, vec: Vec2, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        Vec2.toArray(info.dataArr, vec, idx * 2);\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n\r\n    public setFloat (name: string, v: number, idx = 0): void {\r\n        WebSetter.setFloat(this._lg, this._data, name, v, idx);\r\n    }\r\n    public static setFloat (lg: LayoutGraphData, data: RenderData, name: string, v: number, idx = 0): void {\r\n        const info =  WebSetter.getConstantInfo(lg, data, name);\r\n        info.dataArr[0 + idx] = v;\r\n        data.constants.set(info.constantID, info.dataArr);\r\n    }\r\n    public setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void {\r\n        WebSetter.setArrayBuffer(this._lg, this._data, name, arrayBuffer);\r\n    }\r\n    public static setArrayBuffer (lg: LayoutGraphData, data: RenderData, name: string, arrayBuffer: ArrayBuffer): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public setBuffer (name: string, buffer: Buffer): void {\r\n        WebSetter.setBuffer(this._lg, this._data, name, buffer);\r\n    }\r\n    public static setBuffer (lg: LayoutGraphData, data: RenderData, name: string, buffer: Buffer): void {\r\n        const num = lg.attributeIndex.get(name)!;\r\n        data.buffers.set(num, buffer);\r\n    }\r\n    public setTexture (name: string, texture: Texture): void {\r\n        WebSetter.setTexture(this._lg, this._data, name, texture);\r\n    }\r\n    public static setTexture (lg: LayoutGraphData, data: RenderData, name: string, texture: Texture): void {\r\n        const num = lg.attributeIndex.get(name)!;\r\n        data.textures.set(num, texture);\r\n    }\r\n    public setReadWriteBuffer (name: string, buffer: Buffer): void {\r\n        WebSetter.setReadWriteBuffer(this._lg, this._data, name, buffer);\r\n    }\r\n    public static setReadWriteBuffer (lg: LayoutGraphData, data: RenderData, name: string, buffer: Buffer): void {\r\n        const num = lg.attributeIndex.get(name)!;\r\n        data.buffers.set(num, buffer);\r\n    }\r\n    public setReadWriteTexture (name: string, texture: Texture): void {\r\n        WebSetter.setReadWriteTexture(this._lg, this._data, name, texture);\r\n    }\r\n    public static setReadWriteTexture (lg: LayoutGraphData, data: RenderData, name: string, texture: Texture): void {\r\n        const num = lg.attributeIndex.get(name)!;\r\n        data.textures.set(num, texture);\r\n    }\r\n    public setSampler (name: string, sampler: Sampler): void {\r\n        WebSetter.setSampler(this._lg, this._data, name, sampler);\r\n    }\r\n    public static setSampler (lg: LayoutGraphData, data: RenderData, name: string, sampler: Sampler): void {\r\n        const num = lg.attributeIndex.get(name)!;\r\n        data.samplers.set(num, sampler);\r\n    }\r\n\r\n    public getParentLayout (): string {\r\n        const director = cclegacy.director;\r\n        const root = director.root;\r\n        const pipeline = root.pipeline;\r\n        const parId = pipeline.renderGraph!.getParent(this._vertID);\r\n        const layoutName = pipeline.renderGraph!.getLayout(parId) as string;\r\n        return layoutName;\r\n    }\r\n\r\n    public getCurrentLayout (): string {\r\n        const director = cclegacy.director;\r\n        const root = director.root;\r\n        const pipeline = root.pipeline;\r\n        const layoutName = pipeline.renderGraph!.getLayout(this._vertID) as string;\r\n        return layoutName;\r\n    }\r\n\r\n    public setBuiltinCameraConstants (camera: Camera): void {\r\n        const director = cclegacy.director;\r\n        const root = director.root;\r\n        const pipeline = root.pipeline;\r\n        const layoutName = this.getParentLayout();\r\n        setCameraUBOValues(this, camera, pipeline.pipelineSceneData as PipelineSceneData, camera.scene, layoutName);\r\n    }\r\n    public setBuiltinDirectionalLightFrustumConstants (camera: Camera, light: DirectionalLight, csmLevel = 0): void {\r\n        setShadowUBOLightView(this, camera, light, csmLevel);\r\n    }\r\n    public setBuiltinSpotLightFrustumConstants (light: SpotLight): void {\r\n        setShadowUBOLightView(this, null, light, 0);\r\n    }\r\n    public setBuiltinDirectionalLightConstants (light: DirectionalLight, camera: Camera): void {\r\n        setShadowUBOView(this, null, this.getParentLayout());\r\n    }\r\n    public setBuiltinSphereLightConstants (light: SphereLight, camera: Camera): void {\r\n        const director = cclegacy.director;\r\n        const pipeline = (director.root as Root).pipeline;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        _uboVec.set(light.position.x, light.position.y, light.position.z, LightType.SPHERE);\r\n        this.setVec4('cc_lightPos', _uboVec);\r\n\r\n        _uboVec.set(light.size, light.range, 0.0, 0.0);\r\n        this.setVec4('cc_lightSizeRangeAngle', _uboVec);\r\n\r\n        const isHDR = sceneData.isHDR;\r\n        const lightMeterScale = 10000.0;\r\n        _uboVec.set(light.color.x, light.color.y, light.color.z, 0);\r\n        if (light.useColorTemperature) {\r\n            const finalColor = light.finalColor;\r\n            _uboVec.x = finalColor.x;\r\n            _uboVec.y = finalColor.y;\r\n            _uboVec.z = finalColor.z;\r\n        }\r\n        if (isHDR) {\r\n            _uboVec.w = (light).luminance * camera.exposure * lightMeterScale;\r\n        } else {\r\n            _uboVec.w = (light).luminance;\r\n        }\r\n        this.setVec4('cc_lightColor', _uboVec);\r\n    }\r\n    public setBuiltinSpotLightConstants (light: SpotLight, camera: Camera): void {\r\n        const director = cclegacy.director;\r\n        const pipeline = (director.root as Root).pipeline;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n\r\n        const shadowInfo = sceneData.shadows;\r\n        _uboVec.set(light.position.x, light.position.y, light.position.z, LightType.SPOT);\r\n        this.setVec4('cc_lightPos', _uboVec);\r\n        _uboVec.set(\r\n            light.size,\r\n            light.range,\r\n            light.spotAngle,\r\n            (shadowInfo.enabled && light.shadowEnabled && shadowInfo.type === ShadowType.ShadowMap) ? 1 : 0,\r\n        );\r\n        this.setVec4('cc_lightSizeRangeAngle', _uboVec);\r\n        _uboVec.set(light.direction.x, light.direction.y, light.direction.z, 0);\r\n        this.setVec4('cc_lightDir', _uboVec);\r\n        const isHDR = sceneData.isHDR;\r\n        const lightMeterScale = 10000.0;\r\n        _uboVec.set(light.color.x, light.color.y, light.color.z, 0);\r\n        if (light.useColorTemperature) {\r\n            const finalColor = light.finalColor;\r\n            _uboVec.x = finalColor.x;\r\n            _uboVec.y = finalColor.y;\r\n            _uboVec.z = finalColor.z;\r\n        }\r\n        if (isHDR) {\r\n            _uboVec.w = (light).luminance * camera.exposure * lightMeterScale;\r\n        } else {\r\n            _uboVec.w = (light).luminance;\r\n        }\r\n        this.setVec4('cc_lightColor', _uboVec);\r\n        _uboVec.set(0, 0, 0, light.angleAttenuationStrength);\r\n        this.setVec4('cc_lightBoundingSizeVS', _uboVec);\r\n    }\r\n    public setBuiltinPointLightConstants (light: PointLight, camera: Camera): void {\r\n        const director = cclegacy.director;\r\n        const pipeline = (director.root as Root).pipeline;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        _uboVec.set(light.position.x, light.position.y, light.position.z, LightType.POINT);\r\n        this.setVec4('cc_lightPos', _uboVec);\r\n        _uboVec.set(0.0, light.range, 0.0, 0.0);\r\n        this.setVec4('cc_lightSizeRangeAngle', _uboVec);\r\n        const isHDR = sceneData.isHDR;\r\n        const lightMeterScale = 10000.0;\r\n        if (light.useColorTemperature) {\r\n            const finalColor = light.finalColor;\r\n            _uboVec.x = finalColor.x;\r\n            _uboVec.y = finalColor.y;\r\n            _uboVec.z = finalColor.z;\r\n        }\r\n        if (isHDR) {\r\n            _uboVec.w = (light).luminance * camera.exposure * lightMeterScale;\r\n        } else {\r\n            _uboVec.w = (light).luminance;\r\n        }\r\n        _uboVec.set(light.color.x, light.color.y, light.color.z, 0);\r\n        this.setVec4('cc_lightColor', _uboVec);\r\n    }\r\n    public setBuiltinRangedDirectionalLightConstants (light: RangedDirectionalLight, camera: Camera): void {\r\n        const director = cclegacy.director;\r\n        const pipeline = (director.root as Root).pipeline;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        _uboVec.set(light.position.x, light.position.y, light.position.z, LightType.RANGED_DIRECTIONAL);\r\n        this.setVec4('cc_lightPos', _uboVec);\r\n\r\n        _uboVec.set(light.right.x, light.right.y, light.right.z, 0.0);\r\n        this.setVec4('cc_lightSizeRangeAngle', _uboVec);\r\n\r\n        _uboVec.set(light.direction.x, light.direction.y, light.direction.z, 0);\r\n        this.setVec4('cc_lightDir', _uboVec);\r\n        const scale = light.scale;\r\n        _uboVec.set(scale.x * 0.5, scale.y * 0.5, scale.z * 0.5, 0);\r\n        this.setVec4('cc_lightBoundingSizeVS', _uboVec);\r\n        const isHDR = sceneData.isHDR;\r\n        _uboVec.set(light.color.x, light.color.y, light.color.z, 0);\r\n        if (light.useColorTemperature) {\r\n            const finalColor = light.finalColor;\r\n            _uboVec.x = finalColor.x;\r\n            _uboVec.y = finalColor.y;\r\n            _uboVec.z = finalColor.z;\r\n        }\r\n        if (isHDR) {\r\n            _uboVec.w = light.illuminance * camera.exposure;\r\n        } else {\r\n            _uboVec.w = light.illuminance;\r\n        }\r\n        this.setVec4('cc_lightColor', _uboVec);\r\n    }\r\n    public hasSampler (name: string): boolean {\r\n        const id = this._lg.constantIndex.get(name);\r\n        if (id === undefined) {\r\n            return false;\r\n        }\r\n        return this._data.samplers.has(id);\r\n    }\r\n    public hasTexture (name: string): boolean {\r\n        const id = this._lg.constantIndex.get(name);\r\n        if (id === undefined) {\r\n            return false;\r\n        }\r\n        return this._data.textures.has(id);\r\n    }\r\n    public setCustomBehavior (name: string): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    // protected\r\n    protected _data: RenderData;\r\n    protected _lg: LayoutGraphData;\r\n    protected _vertID: number = -1;\r\n    protected _currBlock;\r\n    protected _currStage: string = '';\r\n    protected _currFrequency: UpdateFrequency = UpdateFrequency.PER_PASS;\r\n    protected _currCount;\r\n    protected _currConstant: number[] = [];\r\n}\r\n\r\nexport class RenderDrawQueue {\r\n    instances: Array<DrawInstance> = new Array<DrawInstance>();\r\n\r\n    empty (): boolean {\r\n        return this.instances.length === 0;\r\n    }\r\n\r\n    clear (): void {\r\n        this.instances.length = 0;\r\n    }\r\n\r\n    add (model: Model, depth: number, subModelIdx: number, passIdx: number): void {\r\n        const subModel = model.subModels[subModelIdx];\r\n        const pass = subModel.passes[passIdx];\r\n        const passPriority = pass.priority;\r\n        const modelPriority = subModel.priority;\r\n        const shaderId = subModel.shaders[passIdx].typedID;\r\n        const hash = (0 << 30) | (passPriority as number << 16) | (modelPriority as number << 8) | passIdx;\r\n        const priority = model.priority;\r\n        const instance = instancePool.add();\r\n        instance.update(subModel, priority, hash, depth, shaderId, passIdx);\r\n        this.instances.push(instance);\r\n    }\r\n    /**\r\n     * @en Comparison sorting function. Opaque objects are sorted by priority -> depth front to back -> shader ID.\r\n     * @zh 比较排序函数。不透明对象按优先级 -> 深度由前向后 -> Shader ID 顺序排序。\r\n     */\r\n    sortOpaqueOrCutout (): void {\r\n        this.instances.sort((lhs: DrawInstance, rhs: DrawInstance) => {\r\n            if (lhs.hash !== rhs.hash) {\r\n                return lhs.hash - rhs.hash;\r\n            }\r\n            if (lhs.depth !== rhs.depth) {\r\n                return lhs.depth - rhs.depth;\r\n            }\r\n            return lhs.shaderID - rhs.shaderID;\r\n        });\r\n    }\r\n    /**\r\n     * @en Comparison sorting function. Transparent objects are sorted by priority -> depth back to front -> shader ID.\r\n     * @zh 比较排序函数。半透明对象按优先级 -> 深度由后向前 -> Shader ID 顺序排序。\r\n     */\r\n    sortTransparent (): void {\r\n        this.instances.sort((lhs: DrawInstance, rhs: DrawInstance) => {\r\n            if (lhs.priority !== rhs.priority) {\r\n                return lhs.priority - rhs.priority;\r\n            }\r\n            if (lhs.hash !== rhs.hash) {\r\n                return lhs.hash - rhs.hash;\r\n            }\r\n            if (lhs.depth !== rhs.depth) {\r\n                return rhs.depth - lhs.depth; // 注意此处的差值顺序，为了按照降序排列\r\n            }\r\n            return lhs.shaderID - rhs.shaderID;\r\n        });\r\n    }\r\n\r\n    recordCommandBuffer (\r\n        device: Device,\r\n        renderPass: RenderPass,\r\n        cmdBuffer: CommandBuffer,\r\n        ds: DescriptorSet | null = null,\r\n        offset = 0,\r\n        dynamicOffsets: number[] | null = null,\r\n    ): void {\r\n        for (const instance of this.instances) {\r\n            const subModel = instance.subModel!;\r\n\r\n            const passIdx = instance.passIndex;\r\n            const inputAssembler = subModel.inputAssembler;\r\n            const pass = subModel.passes[passIdx];\r\n            const shader = subModel.shaders[passIdx];\r\n            const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);\r\n\r\n            cmdBuffer.bindPipelineState(pso);\r\n            cmdBuffer.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n            if (ds) {\r\n                cmdBuffer.bindDescriptorSet(SetIndex.GLOBAL, ds, [offset]);\r\n            }\r\n            if (dynamicOffsets) {\r\n                cmdBuffer.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet, dynamicOffsets);\r\n            } else {\r\n                cmdBuffer.bindDescriptorSet(\r\n                    SetIndex.LOCAL,\r\n                    subModel.descriptorSet,\r\n                );\r\n            }\r\n            cmdBuffer.bindInputAssembler(inputAssembler);\r\n            cmdBuffer.draw(inputAssembler);\r\n        }\r\n    }\r\n}\r\n\r\nexport class RenderInstancingQueue {\r\n    passInstances: Map<Pass, number> = new Map<Pass, number>();\r\n    instanceBuffers: Array<InstancedBuffer> = new Array<InstancedBuffer>();\r\n    empty (): boolean {\r\n        return this.passInstances.size === 0;\r\n    }\r\n\r\n    add (pass: Pass, subModel: SubModel, passID: number): void {\r\n        const iter = this.passInstances.get(pass);\r\n        if (iter === undefined) {\r\n            const instanceBufferID = this.passInstances.size;\r\n            if (instanceBufferID >= this.instanceBuffers.length) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.instanceBuffers.push(new InstancedBuffer(pass));\r\n            }\r\n            this.passInstances.set(pass, instanceBufferID);\r\n\r\n            const instanceBuffer = this.instanceBuffers[instanceBufferID];\r\n            instanceBuffer.pass = pass;\r\n            const instances = instanceBuffer.instances;\r\n        }\r\n\r\n        const instancedBuffer = this.instanceBuffers[this.passInstances.get(pass)!];\r\n        instancedBuffer.merge(subModel, passID);\r\n    }\r\n\r\n    clear (): void {\r\n        this.passInstances.clear();\r\n        const instanceBuffers = this.instanceBuffers;\r\n        instanceBuffers.forEach((instance) => {\r\n            instance.clear();\r\n        });\r\n    }\r\n\r\n    sort (): void {\r\n        this.instanceBuffers = this.instanceBuffers.sort(instancingCompareFn);\r\n    }\r\n\r\n    uploadBuffers (cmdBuffer: CommandBuffer): void {\r\n        for (const [pass, bufferID] of this.passInstances.entries()) {\r\n            const instanceBuffer = this.instanceBuffers[bufferID];\r\n            if (instanceBuffer.hasPendingModels) {\r\n                instanceBuffer.uploadBuffers(cmdBuffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    recordCommandBuffer (\r\n        renderPass: RenderPass,\r\n        cmdBuffer: CommandBuffer,\r\n        ds: DescriptorSet | null = null,\r\n        offset = 0,\r\n        dynamicOffsets: number[] | null = null,\r\n    ): void {\r\n        const renderQueue = this.instanceBuffers;\r\n        for (const instanceBuffer of renderQueue) {\r\n            if (!instanceBuffer.hasPendingModels) {\r\n                continue;\r\n            }\r\n            const instances = instanceBuffer.instances;\r\n            const drawPass = instanceBuffer.pass;\r\n            cmdBuffer.bindDescriptorSet(SetIndex.MATERIAL, drawPass.descriptorSet);\r\n            let lastPSO: PipelineState | null = null;\r\n            for (const instance of instances) {\r\n                if (!instance.count) {\r\n                    continue;\r\n                }\r\n                const pso = PipelineStateManager.getOrCreatePipelineState(\r\n                    deviceManager.gfxDevice,\r\n                    drawPass,\r\n                    instance.shader!,\r\n                    renderPass,\r\n                    instance.ia,\r\n                );\r\n                if (lastPSO !== pso) {\r\n                    cmdBuffer.bindPipelineState(pso);\r\n                    lastPSO = pso;\r\n                }\r\n                if (ds) {\r\n                    cmdBuffer.bindDescriptorSet(SetIndex.GLOBAL, ds, [offset]);\r\n                }\r\n                if (dynamicOffsets) {\r\n                    cmdBuffer.bindDescriptorSet(SetIndex.LOCAL, instance.descriptorSet, dynamicOffsets);\r\n                } else {\r\n                    cmdBuffer.bindDescriptorSet(\r\n                        SetIndex.LOCAL,\r\n                        instance.descriptorSet,\r\n                        instanceBuffer.dynamicOffsets,\r\n                    );\r\n                }\r\n                cmdBuffer.bindInputAssembler(instance.ia);\r\n                cmdBuffer.draw(instance.ia);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class RenderQueueQuery {\r\n    frustumCulledResultID: number;\r\n    lightBoundsCulledResultID: number;\r\n    renderQueueTarget: number;\r\n\r\n    constructor (\r\n        frustumCulledResultID = 0xFFFFFFFF,\r\n        lightBoundsCulledResultID = 0xFFFFFFFF,\r\n        renderQueueTargetIn = 0xFFFFFFFF,\r\n    ) {\r\n        this.frustumCulledResultID = frustumCulledResultID;\r\n        this.lightBoundsCulledResultID = lightBoundsCulledResultID;\r\n        this.renderQueueTarget = renderQueueTargetIn;\r\n    }\r\n    update (\r\n        culledSourceIn = 0xFFFFFFFF,\r\n        lightBoundsCulledResultID = 0xFFFFFFFF,\r\n        renderQueueTargetIn = 0xFFFFFFFF,\r\n    ): void {\r\n        this.frustumCulledResultID = culledSourceIn;\r\n        this.lightBoundsCulledResultID = lightBoundsCulledResultID;\r\n        this.renderQueueTarget = renderQueueTargetIn;\r\n    }\r\n}\r\n\r\nexport function recordCommand (\r\n    cmdBuffer: CommandBuffer,\r\n    _renderPass: RenderPass,\r\n    pass: Pass,\r\n    localDesc: DescriptorSet,\r\n    shader: Shader | null,\r\n    ia: InputAssembler | null,\r\n): void {\r\n    let pso!: PipelineState;\r\n    if (shader && ia) {\r\n        pso = PipelineStateManager.getOrCreatePipelineState(\r\n            deviceManager.gfxDevice,\r\n            pass,\r\n            shader,\r\n            _renderPass,\r\n            ia,\r\n        );\r\n    }\r\n    if (pso) {\r\n        const _ia = ia!;\r\n        cmdBuffer.bindPipelineState(pso);\r\n        cmdBuffer.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n        cmdBuffer.bindDescriptorSet(SetIndex.LOCAL, localDesc);\r\n        cmdBuffer.bindInputAssembler(_ia);\r\n        cmdBuffer.draw(_ia);\r\n    }\r\n}\r\n\r\nexport class RenderQueue {\r\n    probeQueue: ProbeHelperQueue = new ProbeHelperQueue();\r\n    opaqueQueue: RenderDrawQueue = new RenderDrawQueue();\r\n    transparentQueue: RenderDrawQueue = new RenderDrawQueue();\r\n    opaqueInstancingQueue: RenderInstancingQueue = new RenderInstancingQueue();\r\n    transparentInstancingQueue: RenderInstancingQueue = new RenderInstancingQueue();\r\n    camera: Camera | null = null;\r\n    sceneFlags: SceneFlags = SceneFlags.NONE;\r\n    lightByteOffset = 0xFFFFFFFF;\r\n    sort (): void {\r\n        this.opaqueQueue.sortOpaqueOrCutout();\r\n        this.transparentQueue.sortTransparent();\r\n        this.opaqueInstancingQueue.sort();\r\n        this.transparentInstancingQueue.sort();\r\n    }\r\n\r\n    update (): void {\r\n        this.probeQueue.clear();\r\n        this.opaqueQueue.clear();\r\n        this.transparentQueue.clear();\r\n        this.opaqueInstancingQueue.clear();\r\n        this.transparentInstancingQueue.clear();\r\n        this.camera = null;\r\n        this.sceneFlags = SceneFlags.NONE;\r\n        this.lightByteOffset = 0xFFFFFFFF;\r\n    }\r\n\r\n    empty (): boolean {\r\n        return this.opaqueQueue.empty()\r\n        && this.transparentQueue.empty()\r\n        && this.opaqueInstancingQueue.empty()\r\n        && this.transparentInstancingQueue.empty();\r\n    }\r\n\r\n    recordCommands (cmdBuffer: CommandBuffer, renderPass: RenderPass, sceneFlags: SceneFlags): void {\r\n        const offsets = this.lightByteOffset === 0xFFFFFFFF ? null : [this.lightByteOffset];\r\n        if (sceneFlags & (SceneFlags.OPAQUE | SceneFlags.MASK)) {\r\n            this.opaqueQueue.recordCommandBuffer(deviceManager.gfxDevice, renderPass, cmdBuffer, null, 0, offsets);\r\n            this.opaqueInstancingQueue.recordCommandBuffer(renderPass, cmdBuffer, null, 0, offsets);\r\n        }\r\n        if (sceneFlags & SceneFlags.BLEND) {\r\n            this.transparentInstancingQueue.recordCommandBuffer(renderPass, cmdBuffer, null, 0, offsets);\r\n            this.transparentQueue.recordCommandBuffer(deviceManager.gfxDevice, renderPass, cmdBuffer, null, 0, offsets);\r\n        }\r\n    }\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n****************************************************************************/\r\n\r\n/* eslint-disable max-len */\r\nimport { COCOS_RUNTIME, HTML5 } from 'internal:constants';\r\nimport { EffectAsset } from '../../asset/assets';\r\nimport { assert, error, warn } from '../../core';\r\nimport { API, DescriptorSetInfo, DescriptorSetLayout, DescriptorSetLayoutBinding, DescriptorSetLayoutInfo, DescriptorType, Device, Feature, Format, FormatFeatureBit, GetTypeSize, MemoryAccessBit, PipelineLayout, PipelineLayoutInfo, SampleType, ShaderStageFlagBit, Type, Uniform, UniformBlock, ViewDimension } from '../../gfx';\r\nimport { UBOForwardLightEnum, UBOSkinning } from '../define';\r\nimport type {\r\n    DescriptorGroupBlockIndex,\r\n    LayoutGraphData,\r\n    PipelineLayoutData, RenderPhaseData,\r\n} from './layout-graph';\r\nimport {\r\n    DescriptorBlockData,\r\n    DescriptorBlockIndex,\r\n    DescriptorData,\r\n    DescriptorSetLayoutData,\r\n    DescriptorTypeOrder,\r\n    Layout,\r\n    LayoutGraphDataValue,\r\n    LayoutType,\r\n} from './layout-graph';\r\nimport {\r\n    ParameterType, UpdateFrequency,\r\n} from './types';\r\n\r\nexport const INVALID_ID = 0xFFFFFFFF;\r\nexport const ENABLE_SUBPASS = true;\r\n\r\n// get DescriptorType from DescriptorTypeOrder\r\nexport function getGfxDescriptorType (type: DescriptorTypeOrder): DescriptorType {\r\n    switch (type) {\r\n    case DescriptorTypeOrder.UNIFORM_BUFFER:\r\n        return DescriptorType.UNIFORM_BUFFER;\r\n    case DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER:\r\n        return DescriptorType.DYNAMIC_UNIFORM_BUFFER;\r\n    case DescriptorTypeOrder.SAMPLER_TEXTURE:\r\n        return DescriptorType.SAMPLER_TEXTURE;\r\n    case DescriptorTypeOrder.SAMPLER:\r\n        return DescriptorType.SAMPLER;\r\n    case DescriptorTypeOrder.TEXTURE:\r\n        return DescriptorType.TEXTURE;\r\n    case DescriptorTypeOrder.STORAGE_BUFFER:\r\n        return DescriptorType.STORAGE_BUFFER;\r\n    case DescriptorTypeOrder.DYNAMIC_STORAGE_BUFFER:\r\n        return DescriptorType.DYNAMIC_STORAGE_BUFFER;\r\n    case DescriptorTypeOrder.STORAGE_IMAGE:\r\n        return DescriptorType.STORAGE_IMAGE;\r\n    case DescriptorTypeOrder.INPUT_ATTACHMENT:\r\n        return DescriptorType.INPUT_ATTACHMENT;\r\n    default:\r\n        error('DescriptorType not found');\r\n        return DescriptorType.INPUT_ATTACHMENT;\r\n    }\r\n}\r\n\r\n// get DescriptorTypeOrder from DescriptorType\r\nexport function getDescriptorTypeOrder (type: DescriptorType): DescriptorTypeOrder {\r\n    switch (type) {\r\n    case DescriptorType.UNIFORM_BUFFER:\r\n        return DescriptorTypeOrder.UNIFORM_BUFFER;\r\n    case DescriptorType.DYNAMIC_UNIFORM_BUFFER:\r\n        return DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER;\r\n    case DescriptorType.SAMPLER_TEXTURE:\r\n        return DescriptorTypeOrder.SAMPLER_TEXTURE;\r\n    case DescriptorType.SAMPLER:\r\n        return DescriptorTypeOrder.SAMPLER;\r\n    case DescriptorType.TEXTURE:\r\n        return DescriptorTypeOrder.TEXTURE;\r\n    case DescriptorType.STORAGE_BUFFER:\r\n        return DescriptorTypeOrder.STORAGE_BUFFER;\r\n    case DescriptorType.DYNAMIC_STORAGE_BUFFER:\r\n        return DescriptorTypeOrder.DYNAMIC_STORAGE_BUFFER;\r\n    case DescriptorType.STORAGE_IMAGE:\r\n        return DescriptorTypeOrder.STORAGE_IMAGE;\r\n    case DescriptorType.INPUT_ATTACHMENT:\r\n        return DescriptorTypeOrder.INPUT_ATTACHMENT;\r\n    case DescriptorType.UNKNOWN:\r\n    default:\r\n        error('DescriptorTypeOrder not found');\r\n        return DescriptorTypeOrder.INPUT_ATTACHMENT;\r\n    }\r\n}\r\n\r\n// find passID using name\r\nexport function getCustomPassID (lg: LayoutGraphData, name: string | undefined): number {\r\n    return lg.locateChild(lg.N, name || 'default');\r\n}\r\n\r\n// find subpassID using name\r\nexport function getCustomSubpassID (lg: LayoutGraphData, passID: number, name: string): number {\r\n    return lg.locateChild(passID, name);\r\n}\r\n\r\n// find phaseID using subpassOrPassID and phase name\r\nexport function getCustomPhaseID (lg: LayoutGraphData, subpassOrPassID: number, name: string | number | undefined): number {\r\n    if (name === undefined) {\r\n        return lg.locateChild(subpassOrPassID, 'default');\r\n    }\r\n    if (typeof (name) === 'number') {\r\n        return lg.locateChild(subpassOrPassID, name.toString());\r\n    }\r\n    return lg.locateChild(subpassOrPassID, name);\r\n}\r\n\r\nexport const DEFAULT_UNIFORM_COUNTS: Map<string, number> = new Map([\r\n    ['cc_lightPos', UBOForwardLightEnum.LIGHTS_PER_PASS],\r\n    ['cc_lightColor', UBOForwardLightEnum.LIGHTS_PER_PASS],\r\n    ['cc_lightSizeRangeAngle', UBOForwardLightEnum.LIGHTS_PER_PASS],\r\n    ['cc_lightDir', UBOForwardLightEnum.LIGHTS_PER_PASS],\r\n    ['cc_lightBoundingSizeVS', UBOForwardLightEnum.LIGHTS_PER_PASS],\r\n]);\r\n\r\nexport const DYNAMIC_UNIFORM_BLOCK: Set<string> = new Set([\r\n    'CCCamera',\r\n    'CCForwardLight',\r\n    'CCUILocal',\r\n]);\r\n\r\nexport function getUniformBlockSize (blockMembers: Array<Uniform>): number {\r\n    let prevSize: number = 0;\r\n\r\n    for (const m of blockMembers) {\r\n        if (m.count) {\r\n            prevSize += GetTypeSize(m.type) * m.count;\r\n            continue;\r\n        }\r\n\r\n        const iter = DEFAULT_UNIFORM_COUNTS.get(m.name);\r\n        if (iter !== undefined) {\r\n            prevSize += GetTypeSize(m.type) * iter;\r\n            continue;\r\n        }\r\n\r\n        if (m.name === 'cc_joints') {\r\n            const sz = GetTypeSize(m.type) * UBOSkinning.LAYOUT.members[0].count;\r\n            assert(sz !== UBOSkinning.SIZE);\r\n            prevSize += sz;\r\n            continue;\r\n        }\r\n\r\n        error(`Invalid uniform count: ${m.name}`);\r\n    }\r\n\r\n    assert(!!prevSize);\r\n\r\n    return prevSize;\r\n}\r\n\r\n// sort descriptorBlocks using DescriptorBlockIndex\r\nexport function sortDescriptorBlocks<T> (lhs: [string, T], rhs: [string, T]): number {\r\n    const lhsIndex: DescriptorBlockIndex = JSON.parse(lhs[0]);\r\n    const rhsIndex: DescriptorBlockIndex = JSON.parse(rhs[0]);\r\n    const lhsValue = lhsIndex.updateFrequency * 10000\r\n        + lhsIndex.parameterType * 1000\r\n        + lhsIndex.descriptorType * 100\r\n        + lhsIndex.visibility;\r\n    const rhsValue = rhsIndex.updateFrequency * 10000\r\n        + rhsIndex.parameterType * 1000\r\n        + rhsIndex.descriptorType * 100\r\n        + rhsIndex.visibility;\r\n    return lhsValue - rhsValue;\r\n}\r\n\r\nexport function sortDescriptorGroupBlocks<T> (lhs: [string, T], rhs: [string, T]): number {\r\n    const lhsIndex: DescriptorGroupBlockIndex = JSON.parse(lhs[0]);\r\n    const rhsIndex: DescriptorGroupBlockIndex = JSON.parse(rhs[0]);\r\n\r\n    const lhsValue = lhsIndex.updateFrequency * 1000000000\r\n        + lhsIndex.parameterType * 100000000\r\n        + lhsIndex.descriptorType * 10000000\r\n        + lhsIndex.visibility * 1000000\r\n        + lhsIndex.accessType * 100000\r\n        + lhsIndex.viewDimension * 10000\r\n        + lhsIndex.sampleType * 1000\r\n        + lhsIndex.format;\r\n    const rhsValue = rhsIndex.updateFrequency * 1000000000\r\n        + rhsIndex.parameterType * 100000000\r\n        + rhsIndex.descriptorType * 10000000\r\n        + rhsIndex.visibility * 1000000\r\n        + rhsIndex.accessType * 100000\r\n        + rhsIndex.viewDimension * 10000\r\n        + rhsIndex.sampleType * 1000\r\n        + rhsIndex.format;\r\n    return lhsValue - rhsValue;\r\n}\r\n\r\n// get descriptor nameID from name\r\nexport function getOrCreateDescriptorID (lg: LayoutGraphData, name: string): number {\r\n    const nameID = lg.attributeIndex.get(name);\r\n    if (nameID === undefined) {\r\n        const newID = lg.valueNames.length;\r\n        lg.attributeIndex.set(name, newID);\r\n        lg.valueNames.push(name);\r\n        return newID;\r\n    }\r\n    return nameID;\r\n}\r\n\r\nfunction createDescriptorInfo (layoutData: DescriptorSetLayoutData, info: DescriptorSetLayoutInfo): void {\r\n    info.bindings.length = 0;\r\n    for (let i = 0; i < layoutData.descriptorBlocks.length; ++i) {\r\n        const block = layoutData.descriptorBlocks[i];\r\n        let slot = block.offset;\r\n        for (let j = 0; j < block.descriptors.length; ++j) {\r\n            const d = block.descriptors[j];\r\n            const binding: DescriptorSetLayoutBinding = new DescriptorSetLayoutBinding();\r\n            binding.binding = slot;\r\n            binding.descriptorType = getGfxDescriptorType(block.type);\r\n            binding.count = d.count;\r\n            binding.stageFlags = block.visibility;\r\n            binding.access = block.accessType;\r\n            binding.viewDimension = block.viewDimension;\r\n            binding.sampleType = block.sampleType;\r\n            binding.format = block.format;\r\n            binding.immutableSamplers = [];\r\n            info.bindings.push(binding);\r\n            slot += d.count;\r\n        }\r\n    }\r\n}\r\n\r\nfunction createDescriptorSetLayout (device: Device | null, layoutData: DescriptorSetLayoutData): DescriptorSetLayout | null {\r\n    const info: DescriptorSetLayoutInfo = new DescriptorSetLayoutInfo();\r\n    createDescriptorInfo(layoutData, info);\r\n\r\n    if (device) {\r\n        return device.createDescriptorSetLayout(info);\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function createGfxDescriptorSetsAndPipelines (device: Device | null, g: LayoutGraphData): void {\r\n    for (let i = 0; i < g._layouts.length; ++i) {\r\n        const ppl: PipelineLayoutData = g.getLayout(i);\r\n        const sets = ppl.getSets();\r\n        sets.forEach((value, key): void => {\r\n            const level = value;\r\n            const layoutData = level.descriptorSetLayoutData;\r\n            if (device) {\r\n                const layout: DescriptorSetLayout | null = createDescriptorSetLayout(device, layoutData);\r\n                if (layout) {\r\n                    level.descriptorSetLayout = (layout);\r\n                    level.descriptorSet = (device.createDescriptorSet(new DescriptorSetInfo(layout)));\r\n                }\r\n            } else {\r\n                createDescriptorInfo(layoutData, level.descriptorSetLayoutInfo);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// lookup DescriptorBlockData from Map\r\nfunction getDescriptorBlockData (map: Map<string, DescriptorBlockData>, index: DescriptorBlockIndex): DescriptorBlockData {\r\n    const key = JSON.stringify(index);\r\n    const block = map.get(key);\r\n    if (block) {\r\n        return block;\r\n    }\r\n    const newBlock = new DescriptorBlockData(index.descriptorType, index.visibility, 0);\r\n    map.set(key, newBlock);\r\n    return newBlock;\r\n}\r\n\r\nfunction getDescriptorGroupBlockData (map: Map<string, DescriptorBlockData>, index: DescriptorGroupBlockIndex): DescriptorBlockData {\r\n    const key = JSON.stringify(index);\r\n    const block = map.get(key);\r\n    if (block) {\r\n        return block;\r\n    }\r\n    const newBlock = new DescriptorBlockData(\r\n        index.descriptorType,\r\n        index.visibility,\r\n        0,\r\n        index.accessType,\r\n        index.viewDimension,\r\n        index.sampleType,\r\n        index.format,\r\n    );\r\n    map.set(key, newBlock);\r\n    return newBlock;\r\n}\r\n\r\nfunction getViewDimension (type: Type): ViewDimension  {\r\n    switch (type) {\r\n    case Type.SAMPLER1D:\r\n    case Type.TEXTURE1D:\r\n    case Type.IMAGE1D:\r\n        return ViewDimension.TEX1D;\r\n    case Type.SAMPLER2D:\r\n    case Type.TEXTURE2D:\r\n    case Type.IMAGE2D:\r\n        return ViewDimension.TEX2D;\r\n    case Type.SAMPLER2D_ARRAY:\r\n    case Type.TEXTURE2D_ARRAY:\r\n    case Type.IMAGE2D_ARRAY:\r\n        return ViewDimension.TEX2D_ARRAY;\r\n    case Type.SAMPLER_CUBE:\r\n    case Type.TEXTURE_CUBE:\r\n    case Type.IMAGE_CUBE:\r\n        return ViewDimension.TEXCUBE;\r\n    case Type.SAMPLER3D:\r\n    case Type.TEXTURE3D:\r\n    case Type.IMAGE3D:\r\n        return ViewDimension.TEX3D;\r\n    default:\r\n        return ViewDimension.UNKNOWN;\r\n    }\r\n}\r\n\r\n// make DescriptorSetLayoutData from effect directly\r\nexport function makeDescriptorSetLayoutData (\r\n    lg: LayoutGraphData,\r\n    rate: UpdateFrequency,\r\n    set: number,\r\n    descriptors: EffectAsset.IDescriptorInfo,\r\n): DescriptorSetLayoutData {\r\n    const map = new Map<string, DescriptorBlockData>();\r\n    const uniformBlocks: Map<number, UniformBlock> = new Map<number, UniformBlock>();\r\n\r\n    for (let i = 0; i < descriptors.blocks.length; i++) {\r\n        const cb = descriptors.blocks[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.UNIFORM_BUFFER,\r\n                visibility: cb.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: ViewDimension.BUFFER,\r\n                sampleType: SampleType.FLOAT,\r\n                format: Format.UNKNOWN,\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.UNIFORM_BUFFER,\r\n                visibility: cb.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, cb.name);\r\n        block.descriptors.push(new DescriptorData(nameID, Type.UNKNOWN, 1));\r\n        // add uniform buffer\r\n        uniformBlocks.set(nameID, new UniformBlock(set, 0xFFFFFFFF, cb.name, cb.members, 1));\r\n    }\r\n    for (let i = 0; i < descriptors.samplerTextures.length; i++) {\r\n        const samplerTexture = descriptors.samplerTextures[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.SAMPLER_TEXTURE,\r\n                visibility: samplerTexture.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: getViewDimension(samplerTexture.type),\r\n                sampleType: samplerTexture.sampleType,\r\n                format: Format.UNKNOWN,\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.SAMPLER_TEXTURE,\r\n                visibility: samplerTexture.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, samplerTexture.name);\r\n        block.descriptors.push(new DescriptorData(nameID, samplerTexture.type, samplerTexture.count));\r\n    }\r\n    for (let i = 0; i < descriptors.samplers.length; i++) {\r\n        const sampler = descriptors.samplers[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.SAMPLER,\r\n                visibility: sampler.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: ViewDimension.UNKNOWN,\r\n                sampleType: SampleType.FLOAT,\r\n                format: Format.UNKNOWN,\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.SAMPLER,\r\n                visibility: sampler.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, sampler.name);\r\n        block.descriptors.push(new DescriptorData(nameID, Type.SAMPLER, sampler.count));\r\n    }\r\n    for (let i = 0; i < descriptors.textures.length; i++) {\r\n        const texture = descriptors.textures[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.TEXTURE,\r\n                visibility: texture.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: getViewDimension(texture.type),\r\n                sampleType: texture.sampleType,\r\n                format: Format.UNKNOWN,\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.TEXTURE,\r\n                visibility: texture.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, texture.name);\r\n        block.descriptors.push(new DescriptorData(nameID, texture.type, texture.count));\r\n    }\r\n    for (let i = 0; i < descriptors.buffers.length; i++) {\r\n        const buffer = descriptors.buffers[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.STORAGE_BUFFER,\r\n                visibility: buffer.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: ViewDimension.BUFFER,\r\n                sampleType: SampleType.FLOAT,\r\n                format: Format.UNKNOWN,\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.STORAGE_BUFFER,\r\n                visibility: buffer.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, buffer.name);\r\n        block.descriptors.push(new DescriptorData(nameID, Type.UNKNOWN, 1));\r\n    }\r\n    for (let i = 0; i < descriptors.images.length; i++) {\r\n        const image = descriptors.images[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.STORAGE_IMAGE,\r\n                visibility: image.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: getViewDimension(image.type),\r\n                sampleType: SampleType.FLOAT,\r\n                format: Format.UNKNOWN, // TODO(zhouzhenglong): Add storage image format\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.STORAGE_IMAGE,\r\n                visibility: image.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, image.name);\r\n        block.descriptors.push(new DescriptorData(nameID, image.type, image.count));\r\n    }\r\n    for (let i = 0; i < descriptors.subpassInputs.length; i++) {\r\n        const subpassInput = descriptors.subpassInputs[i];\r\n        const block = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n            ? getDescriptorGroupBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.INPUT_ATTACHMENT,\r\n                visibility: subpassInput.stageFlags,\r\n                accessType: MemoryAccessBit.READ_ONLY,\r\n                viewDimension: ViewDimension.TEX2D,\r\n                sampleType: SampleType.FLOAT,\r\n                format: Format.UNKNOWN,\r\n            })\r\n            : getDescriptorBlockData(map, {\r\n                updateFrequency: rate,\r\n                parameterType: ParameterType.TABLE,\r\n                descriptorType: DescriptorTypeOrder.INPUT_ATTACHMENT,\r\n                visibility: subpassInput.stageFlags,\r\n            });\r\n        const nameID = getOrCreateDescriptorID(lg, subpassInput.name);\r\n        block.descriptors.push(new DescriptorData(nameID, Type.UNKNOWN, subpassInput.count));\r\n    }\r\n\r\n    // sort blocks\r\n    const flattenedBlocks = (COCOS_RUNTIME || HTML5) && Layout.isWebGPU\r\n        ? Array.from(map).sort(sortDescriptorGroupBlocks)\r\n        : Array.from(map).sort(sortDescriptorBlocks);\r\n\r\n    const data = new DescriptorSetLayoutData(set, 0);\r\n    // calculate bindings\r\n    let capacity = 0;\r\n    for (const [key, block] of flattenedBlocks) {\r\n        const index = JSON.parse(key) as DescriptorBlockIndex | DescriptorGroupBlockIndex;\r\n        block.offset = capacity;\r\n        for (const d of block.descriptors) {\r\n            if (index.descriptorType === DescriptorTypeOrder.UNIFORM_BUFFER) {\r\n                // update uniform buffer binding\r\n                const ub = uniformBlocks.get(d.descriptorID);\r\n                if (!ub) {\r\n                    error(`Uniform block not found for ${d.descriptorID}`);\r\n                    continue;\r\n                }\r\n                assert(ub.binding === 0xFFFFFFFF);\r\n                ub.binding = block.capacity;\r\n                // add uniform buffer to output\r\n                data.uniformBlocks.set(d.descriptorID, ub);\r\n            }\r\n            // update block capacity\r\n            const binding = data.bindingMap.get(d.descriptorID);\r\n            if (binding !== undefined) {\r\n                error(`Duplicated descriptor ${d.descriptorID}`);\r\n            }\r\n            data.bindingMap.set(d.descriptorID, block.offset + block.capacity);\r\n            block.capacity += d.count;\r\n        }\r\n        // increate total capacity\r\n        capacity += block.capacity;\r\n        data.capacity += block.capacity;\r\n        if (index.descriptorType === DescriptorTypeOrder.UNIFORM_BUFFER\r\n            || index.descriptorType === DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER) {\r\n            data.uniformBlockCapacity += block.capacity;\r\n        } else if (index.descriptorType === DescriptorTypeOrder.SAMPLER_TEXTURE) {\r\n            data.samplerTextureCapacity += block.capacity;\r\n        }\r\n        data.descriptorBlocks.push(block);\r\n    }\r\n    return data;\r\n}\r\n\r\n// fill DescriptorSetLayoutInfo from DescriptorSetLayoutData\r\nexport function initializeDescriptorSetLayoutInfo (\r\n    layoutData: DescriptorSetLayoutData,\r\n    info: DescriptorSetLayoutInfo,\r\n): void {\r\n    info.bindings.length = 0;\r\n    for (let i = 0; i < layoutData.descriptorBlocks.length; ++i) {\r\n        const block = layoutData.descriptorBlocks[i];\r\n        let slot = block.offset;\r\n        for (let j = 0; j < block.descriptors.length; ++j) {\r\n            const d = block.descriptors[j];\r\n            const binding = new DescriptorSetLayoutBinding();\r\n            binding.binding = slot;\r\n            binding.descriptorType = getGfxDescriptorType(block.type);\r\n            binding.count = d.count;\r\n            binding.stageFlags = block.visibility;\r\n            binding.access = block.accessType;\r\n            binding.viewDimension = block.viewDimension;\r\n            binding.sampleType = block.sampleType;\r\n            binding.format = block.format;\r\n            binding.immutableSamplers = [];\r\n            info.bindings.push(binding);\r\n            slot += d.count;\r\n        }\r\n    }\r\n}\r\n\r\nlet _emptyDescriptorSetLayout: DescriptorSetLayout;\r\nlet _emptyPipelineLayout: PipelineLayout;\r\n\r\nexport function populatePipelineLayoutInfo (\r\n    layout: PipelineLayoutData,\r\n    rate: UpdateFrequency,\r\n    info: PipelineLayoutInfo,\r\n): void {\r\n    const set = layout.getSet(rate);\r\n    if (set && set.descriptorSetLayout) {\r\n        info.setLayouts.push(set.descriptorSetLayout);\r\n    } else {\r\n        info.setLayouts.push(_emptyDescriptorSetLayout);\r\n    }\r\n}\r\n\r\nexport function generateConstantMacros (device: Device, constantMacros: string): void {\r\n    constantMacros = `\r\n  #define CC_DEVICE_SUPPORT_FLOAT_TEXTURE ${device.getFormatFeatures(Format.RGBA32F) & (\r\n        FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE\r\n    ) ? '1' : '0'}\r\n  #define CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS ${device.capabilities.maxVertexUniformVectors}\r\n  #define CC_DEVICE_MAX_FRAGMENT_UNIFORM_VECTORS ${device.capabilities.maxFragmentUniformVectors}\r\n  #define CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT ${device.hasFeature(Feature.INPUT_ATTACHMENT_BENEFIT) ? '1' : '0'}\r\n  #define CC_PLATFORM_ANDROID_AND_WEBGL 0\r\n  #define CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES 0\r\n  #define CC_JOINT_UNIFORM_CAPACITY ${UBOSkinning.JOINT_UNIFORM_CAPACITY}`;\r\n}\r\n\r\n// initialize layout graph module\r\nexport function initializeLayoutGraphData (device: Device, lg: LayoutGraphData): void {\r\n    Layout.type = device.gfxAPI === API.WEBGPU ? LayoutType.WEBGPU : LayoutType.VULKAN;\r\n    Layout.isWebGPU = device.gfxAPI === API.WEBGPU;\r\n    // create descriptor sets\r\n    _emptyDescriptorSetLayout = device.createDescriptorSetLayout(new DescriptorSetLayoutInfo());\r\n    _emptyPipelineLayout = device.createPipelineLayout(new PipelineLayoutInfo());\r\n    for (const v of lg.v()) {\r\n        const layoutData = lg.getLayout(v);\r\n        const sets = layoutData.getSets();\r\n        for (const [_, set] of sets) {\r\n            if (set.descriptorSetLayout !== null) {\r\n                warn('descriptor set layout already initialized. It will be overwritten');\r\n            }\r\n            initializeDescriptorSetLayoutInfo(\r\n                set.descriptorSetLayoutData,\r\n                set.descriptorSetLayoutInfo,\r\n            );\r\n            set.descriptorSetLayout = device.createDescriptorSetLayout(set.descriptorSetLayoutInfo);\r\n        }\r\n    }\r\n    // create pipeline layouts\r\n    for (const v of lg.v()) {\r\n        if (!lg.h(LayoutGraphDataValue.RenderPhase, v)) {\r\n            continue;\r\n        }\r\n        const subpassOrPassID = lg.getParent(v);\r\n        const phaseID = v;\r\n        const passLayout = lg.getLayout(subpassOrPassID);\r\n        const phaseLayout = lg.getLayout(phaseID);\r\n        const info = new PipelineLayoutInfo();\r\n        populatePipelineLayoutInfo(passLayout, UpdateFrequency.PER_PASS, info);\r\n        populatePipelineLayoutInfo(phaseLayout, UpdateFrequency.PER_PHASE, info);\r\n        populatePipelineLayoutInfo(phaseLayout, UpdateFrequency.PER_BATCH, info);\r\n        populatePipelineLayoutInfo(phaseLayout, UpdateFrequency.PER_INSTANCE, info);\r\n        const phase = lg.j<RenderPhaseData>(phaseID);\r\n        phase.pipelineLayout = device.createPipelineLayout(info);\r\n    }\r\n}\r\n\r\n// terminate layout graph module\r\nexport function terminateLayoutGraphData (lg: LayoutGraphData): void {\r\n    for (const v of lg.v()) {\r\n        const layoutData = lg.getLayout(v);\r\n        const sets = layoutData.getSets();\r\n        for (const [_, set] of sets) {\r\n            if (set.descriptorSetLayout !== null) {\r\n                set.descriptorSetLayout.destroy();\r\n            }\r\n        }\r\n    }\r\n    _emptyPipelineLayout.destroy();\r\n    _emptyDescriptorSetLayout.destroy();\r\n}\r\n\r\n// get empty descriptor set layout\r\nexport function getEmptyDescriptorSetLayout (): DescriptorSetLayout {\r\n    return _emptyDescriptorSetLayout;\r\n}\r\n\r\n// get empty pipeline layout\r\nexport function getEmptyPipelineLayout (): PipelineLayout {\r\n    return _emptyPipelineLayout;\r\n}\r\n\r\n// get descriptor set from LayoutGraphData (not from ProgramData)\r\nexport function getOrCreateDescriptorSetLayout (\r\n    lg: LayoutGraphData,\r\n    subpassOrPassID: number,\r\n    phaseID: number,\r\n    rate: UpdateFrequency,\r\n): DescriptorSetLayout {\r\n    if (rate < UpdateFrequency.PER_PASS) {\r\n        const phaseData = lg.getLayout(phaseID);\r\n        const data = phaseData.getSet(rate);\r\n        if (data) {\r\n            if (!data.descriptorSetLayout) {\r\n                error('descriptor set layout not initialized');\r\n                return _emptyDescriptorSetLayout;\r\n            }\r\n            return data.descriptorSetLayout;\r\n        }\r\n        return _emptyDescriptorSetLayout;\r\n    }\r\n\r\n    assert(rate === UpdateFrequency.PER_PASS);\r\n    assert(subpassOrPassID === lg.getParent(phaseID));\r\n\r\n    const passData = lg.getLayout(subpassOrPassID);\r\n    const data = passData.getSet(rate);\r\n    if (data) {\r\n        if (!data.descriptorSetLayout) {\r\n            error('descriptor set layout not initialized');\r\n            return _emptyDescriptorSetLayout;\r\n        }\r\n        return data.descriptorSetLayout;\r\n    }\r\n    return _emptyDescriptorSetLayout;\r\n}\r\n\r\n// getDescriptorSetLayout from LayoutGraphData\r\nexport function getDescriptorSetLayout (\r\n    lg: LayoutGraphData,\r\n    subpassOrPassID: number,\r\n    phaseID: number,\r\n    rate: UpdateFrequency,\r\n): DescriptorSetLayout | null {\r\n    if (rate < UpdateFrequency.PER_PASS) {\r\n        const phaseData = lg.getLayout(phaseID);\r\n        const data = phaseData.getSet(rate);\r\n        if (data) {\r\n            if (!data.descriptorSetLayout) {\r\n                error('descriptor set layout not initialized');\r\n                return null;\r\n            }\r\n            return data.descriptorSetLayout;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    assert(rate === UpdateFrequency.PER_PASS);\r\n    assert(subpassOrPassID === lg.getParent(phaseID));\r\n\r\n    const passData = lg.getLayout(subpassOrPassID);\r\n    const data = passData.getSet(rate);\r\n    if (data) {\r\n        if (!data.descriptorSetLayout) {\r\n            error('descriptor set layout not initialized');\r\n            return null;\r\n        }\r\n        return data.descriptorSetLayout;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getProgramID (lg: LayoutGraphData, phaseID: number, programName: string): number {\r\n    assert(phaseID !== lg.N);\r\n    const phase = lg.j<RenderPhaseData>(phaseID);\r\n    const programID = phase.shaderIndex.get(programName);\r\n    if (programID === undefined) {\r\n        return INVALID_ID;\r\n    }\r\n    return programID;\r\n}\r\n\r\nexport function getDescriptorNameID (lg: LayoutGraphData, name: string): number {\r\n    const nameID = lg.attributeIndex.get(name);\r\n    if (nameID === undefined) {\r\n        return INVALID_ID;\r\n    }\r\n    return nameID;\r\n}\r\n\r\nexport function getDescriptorName (lg: LayoutGraphData, nameID: number): string {\r\n    if (nameID >= lg.valueNames.length) {\r\n        return '';\r\n    }\r\n    return lg.valueNames[nameID];\r\n}\r\n\r\nexport function getPerPassDescriptorSetLayoutData (\r\n    lg: LayoutGraphData,\r\n    subpassOrPassID: number,\r\n): DescriptorSetLayoutData | null {\r\n    assert(subpassOrPassID !== lg.N);\r\n    const node = lg.getLayout(subpassOrPassID);\r\n    const set = node.getSet(UpdateFrequency.PER_PASS);\r\n    if (set === undefined) {\r\n        return null;\r\n    }\r\n    return set.descriptorSetLayoutData;\r\n}\r\n\r\nexport function getPerPhaseDescriptorSetLayoutData (\r\n    lg: LayoutGraphData,\r\n    phaseID: number,\r\n): DescriptorSetLayoutData | null {\r\n    assert(phaseID !== lg.N);\r\n    const node = lg.getLayout(phaseID);\r\n    const set = node.getSet(UpdateFrequency.PER_PHASE);\r\n    if (set === undefined) {\r\n        return null;\r\n    }\r\n    return set.descriptorSetLayoutData;\r\n}\r\n\r\nexport function getPerBatchDescriptorSetLayoutData (\r\n    lg: LayoutGraphData,\r\n    phaseID: number,\r\n    programID: number,\r\n): DescriptorSetLayoutData | null {\r\n    assert(phaseID !== lg.N);\r\n    const phase = lg.j<RenderPhaseData>(phaseID);\r\n    assert(programID < phase.shaderPrograms.length);\r\n    const program = phase.shaderPrograms[programID];\r\n    const set = program.layout.getSet(UpdateFrequency.PER_BATCH);\r\n    if (set === undefined) {\r\n        return null;\r\n    }\r\n    return set.descriptorSetLayoutData;\r\n}\r\n\r\nexport function getPerInstanceDescriptorSetLayoutData (\r\n    lg: LayoutGraphData,\r\n    phaseID: number,\r\n    programID: number,\r\n): DescriptorSetLayoutData | null {\r\n    assert(phaseID !== lg.N);\r\n    const phase = lg.j<RenderPhaseData>(phaseID);\r\n    assert(programID < phase.shaderPrograms.length);\r\n    const program = phase.shaderPrograms[programID];\r\n    const set = program.layout.getSet(UpdateFrequency.PER_INSTANCE);\r\n    if (set === undefined) {\r\n        return null;\r\n    }\r\n    return set.descriptorSetLayoutData;\r\n}\r\n\r\nexport function getBinding (layout: DescriptorSetLayoutData, nameID: number): number {\r\n    const binding = layout.bindingMap.get(nameID);\r\n    if (binding === undefined) {\r\n        return 0xFFFFFFFF;\r\n    }\r\n    return binding;\r\n}\r\n","import { DEBUG } from 'internal:constants';\r\nimport { Vec3, RecyclePool, assert } from '../../core';\r\nimport { Frustum, intersect, AABB } from '../../core/geometry';\r\nimport { CommandBuffer, Device, Buffer, BufferInfo, BufferViewInfo, MemoryUsageBit, BufferUsageBit } from '../../gfx';\r\nimport { BatchingSchemes, RenderScene } from '../../render-scene';\r\nimport { CSMLevel, Camera, DirectionalLight, Light, LightType, Model, PointLight, ProbeType,\r\n    RangedDirectionalLight,\r\n    ReflectionProbe, SkyBoxFlagValue, ShadowType, Shadows, SphereLight, SpotLight } from '../../render-scene/scene';\r\nimport { Layers, Node } from '../../scene-graph';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { bool, AlignUp, SetLightUBO, hashCombineKey } from './define';\r\nimport { LayoutGraphData } from './layout-graph';\r\nimport { CullingFlags, RenderGraph, RenderGraphValue, SceneData, RenderQueue as RenderQueue0 } from './render-graph';\r\nimport { SceneFlags } from './types';\r\nimport { RenderQueue, RenderQueueQuery, instancePool } from './web-pipeline-types';\r\nimport { getUniformBlockSize } from './layout-graph-utils';\r\nimport { WebProgramLibrary } from './web-program-library';\r\n\r\nclass CullingPools {\r\n    frustumCullingKeyRecycle = new RecyclePool(() => new FrustumCullingKey(), 8);\r\n    frustumCullingsRecycle = new RecyclePool(() => new FrustumCulling(), 8);\r\n    lightBoundsCullingRecycle = new RecyclePool(() => new LightBoundsCulling(), 8);\r\n    lightBoundsCullingResultRecycle = new RecyclePool(() => new LightBoundsCullingResult(), 8);\r\n    lightBoundsCullingKeyRecycle = new RecyclePool(() => new LightBoundsCullingKey(), 8);\r\n    renderQueueRecycle = new RecyclePool(() => new RenderQueue(), 8);\r\n    renderQueueQueryRecycle = new RecyclePool(() => new RenderQueueQuery(), 8);\r\n}\r\nconst REFLECTION_PROBE_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.UI_3D,\r\n    Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR,\r\n    Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]);\r\nconst objIdMap: WeakMap<object, number> = new WeakMap();\r\nlet cullingKeys: string = '';\r\nlet objectCount: number = 0;\r\nfunction objectID (claze: object): number {\r\n    if (!objIdMap.has(claze)) objIdMap.set(claze, ++objectCount);\r\n    return objIdMap.get(claze)!;\r\n}\r\nfunction computeCullingKey (\r\n    sceneData: SceneData,\r\n    castShadows: boolean,\r\n    refId: number = -1,\r\n): string {\r\n    cullingKeys = '';\r\n    const camera = sceneData.camera!;\r\n    const light = sceneData.light.light!;\r\n    const lightLevel = sceneData.light.level;\r\n    const reflectProbe = sceneData.light.probe!;\r\n    const shadeLight = sceneData.shadingLight;\r\n    cullingKeys += hashCombineKey(camera ? objectID(camera) : 0);\r\n    cullingKeys += hashCombineKey(reflectProbe ? objectID(reflectProbe) : 0);\r\n    cullingKeys += hashCombineKey((refId === -1 && light) ? objectID(light) : 0);\r\n    cullingKeys += hashCombineKey((refId !== -1 && shadeLight) ? objectID(shadeLight) : 0);\r\n    cullingKeys += hashCombineKey(refId === -1 ? lightLevel : 0);\r\n    cullingKeys += hashCombineKey(castShadows ? 1 : 0);\r\n    cullingKeys += hashCombineKey(refId);\r\n    return cullingKeys;\r\n}\r\n\r\nclass FrustumCullingKey {\r\n    sceneData: SceneData | null = null;\r\n    castShadows = false;\r\n    constructor (sceneData: SceneData | null = null, castShadows: boolean = false) {\r\n        this.sceneData = sceneData;\r\n        this.castShadows = castShadows;\r\n    }\r\n    update (sceneData: SceneData, castShadows: boolean): void {\r\n        this.sceneData = sceneData;\r\n        this.castShadows = castShadows;\r\n    }\r\n}\r\n\r\nclass LightBoundsCullingKey {\r\n    sceneData: SceneData | null = null;\r\n    frustumCullingID: FrustumCullingID = -1;\r\n    constructor (sceneData: SceneData | null = null, frustumCullingID: FrustumCullingID = -1) {\r\n        this.sceneData = sceneData;\r\n        this.frustumCullingID = frustumCullingID;\r\n    }\r\n    update (sceneData: SceneData | null = null, frustumCullingID: FrustumCullingID = -1): void {\r\n        this.sceneData = sceneData;\r\n        this.frustumCullingID = frustumCullingID;\r\n    }\r\n}\r\n\r\nclass LightBoundsCulling {\r\n    resultKeyIndex: Map<string, LightBoundsCullingKey> = new Map<string, LightBoundsCullingKey>();\r\n    resultIndex: Map<string, LightBoundsCullingID> = new Map<string, LightBoundsCullingID>();\r\n    update (): void {\r\n        this.resultIndex.clear();\r\n        this.resultKeyIndex.clear();\r\n    }\r\n}\r\n\r\nclass LightBoundsCullingResult {\r\n    instances: Model[] = [];\r\n    lightByteOffset: number = 0xFFFFFFFF;\r\n    update (): LightBoundsCullingResult {\r\n        this.instances.length = 0;\r\n        this.lightByteOffset = 0xFFFFFFFF;\r\n        return this;\r\n    }\r\n}\r\n\r\ntype FrustumCullingID = number;\r\ntype LightBoundsCullingID = number;\r\ntype RenderQueueID = number;\r\n\r\nfunction makeRenderQueueKey (\r\n    frustumCulledResultID: FrustumCullingID,\r\n    lightBoundsCulledResultID: LightBoundsCullingID,\r\n    queueLayoutID: RenderQueueID,\r\n): string {\r\n    return `${frustumCulledResultID}-${lightBoundsCulledResultID}-${queueLayoutID}`;\r\n}\r\n\r\nfunction extractRenderQueueKey (key: string): number[] {\r\n    const keys = key.split('-');\r\n    return [parseInt(keys[0]), parseInt(keys[1]), parseInt(keys[2])];\r\n}\r\n\r\nlet pSceneData: PipelineSceneData;\r\n\r\nclass FrustumCulling {\r\n    // key: hash val\r\n    resultIndex: Map<string, FrustumCullingID> = new Map<string, FrustumCullingID>();\r\n    resultKeyIndex: Map<string, FrustumCullingKey> = new Map<string, FrustumCullingKey>();\r\n    update (): void {\r\n        this.resultIndex.clear();\r\n        this.resultKeyIndex.clear();\r\n    }\r\n}\r\n\r\nfunction isNodeVisible (node: Node, visibility: number): boolean {\r\n    return node && ((visibility & node.layer) === node.layer);\r\n}\r\n\r\nfunction isModelVisible (model: Model, visibility: number): boolean {\r\n    return !!(visibility & model.visFlags);\r\n}\r\n\r\nfunction isVisible (model: Model, visibility: number): boolean {\r\n    return isNodeVisible(model.node, visibility) || isModelVisible(model, visibility);\r\n}\r\n\r\nfunction isReflectProbeMask (model: Model): boolean {\r\n    return bool((model.node.layer & REFLECTION_PROBE_DEFAULT_MASK) === model.node.layer || (REFLECTION_PROBE_DEFAULT_MASK & model.visFlags));\r\n}\r\n\r\nconst transWorldBounds = new AABB();\r\nfunction isFrustumVisible (model: Model, frustum: Readonly<Frustum>, castShadow: boolean): boolean {\r\n    const modelWorldBounds = model.worldBounds!;\r\n    const shadows = pSceneData.shadows;\r\n    if (castShadow && shadows.type === ShadowType.Planar) {\r\n        AABB.transform(transWorldBounds, modelWorldBounds, shadows.matLight);\r\n        return !intersect.aabbFrustum(transWorldBounds, frustum);\r\n    }\r\n    return !intersect.aabbFrustum(modelWorldBounds, frustum);\r\n}\r\n\r\nfunction isIntersectAABB (lAABB: AABB, rAABB: AABB): boolean {\r\n    return !intersect.aabbWithAABB(lAABB, rAABB);\r\n}\r\n\r\nfunction sceneCulling (\r\n    scene: RenderScene,\r\n    camera: Camera,\r\n    camOrLightFrustum: Readonly<Frustum>,\r\n    castShadow: boolean,\r\n    probe: ReflectionProbe | null,\r\n    models: Array<Model>,\r\n): void {\r\n    const skybox = pSceneData.skybox;\r\n    const skyboxModel = skybox.model;\r\n    const visibility = camera.visibility;\r\n    const camSkyboxFlag = camera.clearFlag & SkyBoxFlagValue.VALUE;\r\n    if (!castShadow && skybox && skybox.enabled && skyboxModel && camSkyboxFlag) {\r\n        models.push(skyboxModel);\r\n    }\r\n\r\n    for (const model of scene.models) {\r\n        if (!model.enabled || !model.node || (castShadow && !model.castShadow)) {\r\n            continue;\r\n        }\r\n        if (scene.isCulledByLod(camera, model)) {\r\n            continue;\r\n        }\r\n        const wBounds = model.worldBounds;\r\n        if (!probe) {\r\n            if (!isVisible(model, visibility)) {\r\n                continue;\r\n            }\r\n            // frustum culling\r\n            if (wBounds && isFrustumVisible(model, camOrLightFrustum, castShadow)) {\r\n                continue;\r\n            }\r\n            models.push(model);\r\n        } else if (probe.probeType === ProbeType.CUBE) {\r\n            if (!isVisible(model, visibility)) {\r\n                continue;\r\n            }\r\n            if (wBounds && isIntersectAABB(wBounds, probe.boundingBox!)) {\r\n                continue;\r\n            }\r\n            models.push(model);\r\n        } else if (isReflectProbeMask(model)) {\r\n            models.push(model);\r\n        }\r\n    }\r\n}\r\n\r\nconst _tempVec3 = new Vec3();\r\nfunction computeSortingDepth (camera: Camera, model: Model): number {\r\n    let depth = 0;\r\n    if (model.node) {\r\n        Vec3.subtract(_tempVec3, model.worldBounds ? model.worldBounds.center : model.node.worldPosition, camera.position);\r\n        depth = Vec3.dot(_tempVec3, camera.forward);\r\n    }\r\n    return depth;\r\n}\r\n\r\nfunction addRenderObject (\r\n    phaseLayoutId: number,\r\n    isDrawOpaqueOrMask: boolean,\r\n    isDrawBlend: boolean,\r\n    isDrawProbe: boolean,\r\n    camera: Camera,\r\n    model: Model,\r\n    queue: RenderQueue,\r\n): void {\r\n    const probeQueue = queue.probeQueue;\r\n    if (isDrawProbe) {\r\n        probeQueue.addToProbeQueue(model, phaseLayoutId);\r\n    }\r\n    const subModels = model.subModels;\r\n    const subModelCount = subModels.length;\r\n    const skyboxModel = pSceneData.skybox.model;\r\n    const depth = computeSortingDepth(camera, model);\r\n    for (let subModelIdx = 0; subModelIdx < subModelCount; ++subModelIdx) {\r\n        const subModel = subModels[subModelIdx];\r\n        const passes = subModel.passes;\r\n        const passCount = passes.length;\r\n        const probePhase = probeQueue.probeMap.includes(subModel);\r\n        if (probePhase) phaseLayoutId = probeQueue.defaultId;\r\n        for (let passIdx = 0; passIdx < passCount; ++passIdx) {\r\n            if (model === skyboxModel && !subModelIdx && !passIdx && isDrawOpaqueOrMask) {\r\n                queue.opaqueQueue.add(model, depth, subModelIdx, passIdx);\r\n                continue;\r\n            }\r\n            const pass = passes[passIdx];\r\n            // check phase\r\n            const phaseAllowed = phaseLayoutId === pass.phaseID;\r\n            if (!phaseAllowed) {\r\n                continue;\r\n            }\r\n            // check scene flags\r\n            const is_blend = pass.blendState.targets[0].blend;\r\n            const isOpaqueOrMask = !is_blend;\r\n            if (!isDrawBlend && is_blend) {\r\n                // skip transparent object\r\n                continue;\r\n            }\r\n            if (!isDrawOpaqueOrMask && isOpaqueOrMask) {\r\n                // skip opaque object\r\n                continue;\r\n            }\r\n\r\n            // add object to queue\r\n            if (pass.batchingScheme === BatchingSchemes.INSTANCING) {\r\n                if (is_blend) {\r\n                    queue.transparentInstancingQueue.add(pass, subModel, passIdx);\r\n                } else {\r\n                    queue.opaqueInstancingQueue.add(pass, subModel, passIdx);\r\n                }\r\n            } else if (is_blend) {\r\n                queue.transparentQueue.add(model, depth, subModelIdx, passIdx);\r\n            } else {\r\n                queue.opaqueQueue.add(model, depth, subModelIdx, passIdx);\r\n            }\r\n        }\r\n    }\r\n}\r\nconst rangedDirLightBoundingBox = new AABB(0, 0, 0, 0.5, 0.5, 0.5);\r\nconst lightAABB = new AABB();\r\nexport class SceneCulling {\r\n    frustumCullings: Map<RenderScene, FrustumCulling> = new Map<RenderScene, FrustumCulling>();\r\n    frustumCullingResults: Array<Array<Model>> = [];\r\n    lightBoundsCullings: Map<RenderScene, LightBoundsCulling> = new Map<RenderScene, LightBoundsCulling>();\r\n    lightBoundsCullingResults: Array<LightBoundsCullingResult> = [];\r\n    renderQueueIndex: Map<string, number> = new Map<string, RenderQueueID>();\r\n    renderQueues: Array<RenderQueue> = [];\r\n    renderQueueQueryIndex: Map<number, RenderQueueQuery> = new Map<number, RenderQueueQuery>();\r\n    cullingPools = new CullingPools();\r\n    // source id\r\n    numFrustumCulling = 0;\r\n    numLightBoundsCulling = 0;\r\n    // target id\r\n    numRenderQueues = 0;\r\n    layoutGraph;\r\n    renderGraph!: RenderGraph;\r\n    enableLightCulling = true;\r\n\r\n    readonly kFilterMask = SceneFlags.SHADOW_CASTER | SceneFlags.REFLECTION_PROBE;\r\n    readonly kDrawMask = SceneFlags.OPAQUE | SceneFlags.MASK | SceneFlags.BLEND;\r\n    readonly kAllMask = this.kFilterMask | this.kDrawMask;\r\n\r\n    resetPool (): void {\r\n        const cullingPools = this.cullingPools;\r\n        cullingPools.frustumCullingKeyRecycle.reset();\r\n        cullingPools.frustumCullingsRecycle.reset();\r\n        cullingPools.lightBoundsCullingRecycle.reset();\r\n        cullingPools.lightBoundsCullingResultRecycle.reset();\r\n        cullingPools.lightBoundsCullingKeyRecycle.reset();\r\n        cullingPools.renderQueueRecycle.reset();\r\n        cullingPools.renderQueueQueryRecycle.reset();\r\n        instancePool.reset();\r\n    }\r\n    clear (): void {\r\n        this.resetPool();\r\n        this.frustumCullings.clear();\r\n        this.frustumCullingResults.length = 0;\r\n        this.lightBoundsCullings.clear();\r\n        this.lightBoundsCullingResults.length = 0;\r\n        this.renderQueueIndex.clear();\r\n        this.renderQueues.length = 0;\r\n        this.renderQueueQueryIndex.clear();\r\n        this.numLightBoundsCulling = 0;\r\n        this.numFrustumCulling = 0;\r\n        this.numRenderQueues = 0;\r\n    }\r\n\r\n    buildRenderQueues (rg: RenderGraph, lg: LayoutGraphData, pplSceneData: PipelineSceneData): void {\r\n        this.layoutGraph = lg;\r\n        this.renderGraph = rg;\r\n        pSceneData = pplSceneData;\r\n        this.collectCullingQueries(rg);\r\n        this.batchFrustumCulling(pplSceneData);\r\n        this.batchLightBoundsCulling();\r\n        this.fillRenderQueues();\r\n    }\r\n\r\n    private getOrCreateLightBoundsCulling (sceneData: SceneData, frustumCullingID: FrustumCullingID): LightBoundsCullingID {\r\n        if (!(sceneData.cullingFlags & CullingFlags.LIGHT_BOUNDS)) {\r\n            return 0xFFFFFFFF; // Return an empty ID.\r\n        }\r\n        if (sceneData.shadingLight?.type === LightType.DIRECTIONAL) {\r\n            return 0xFFFFFFFF;\r\n        }\r\n        if (!this.enableLightCulling) {\r\n            return 0xFFFFFFFF; // Return an empty ID.\r\n        }\r\n        const scene = sceneData.scene!;\r\n\r\n        let queries = this.lightBoundsCullings.get(scene);\r\n        if (!queries) {\r\n            const cullingQuery = this.cullingPools.lightBoundsCullingRecycle.add();\r\n            cullingQuery.update();\r\n            this.lightBoundsCullings.set(scene, cullingQuery);\r\n            queries = this.lightBoundsCullings.get(scene)!;\r\n        }\r\n        const key = computeCullingKey(sceneData, false, frustumCullingID);\r\n        const cullNum = queries.resultIndex.get(key);\r\n        if (cullNum !== undefined) {\r\n            return cullNum;\r\n        }\r\n        const lightBoundsCullingID: LightBoundsCullingID = this.numLightBoundsCulling++;\r\n        if (this.numLightBoundsCulling >  this.lightBoundsCullingResults.length) {\r\n            this.lightBoundsCullingResults.push(this.cullingPools.lightBoundsCullingResultRecycle.add().update());\r\n        }\r\n        queries.resultIndex.set(key, lightBoundsCullingID);\r\n        const cullingKey = this.cullingPools.lightBoundsCullingKeyRecycle.add();\r\n        cullingKey.update(\r\n            sceneData,\r\n            frustumCullingID,\r\n        );\r\n        queries.resultKeyIndex.set(key, cullingKey);\r\n        return lightBoundsCullingID;\r\n    }\r\n\r\n    private getOrCreateFrustumCulling (sceneId: number): number {\r\n        const sceneData: SceneData = this.renderGraph.j<SceneData>(sceneId);\r\n        const scene = sceneData.scene!;\r\n        let queries = this.frustumCullings.get(scene);\r\n        if (!queries) {\r\n            const cullingQuery = this.cullingPools.frustumCullingsRecycle.add();\r\n            cullingQuery.update();\r\n            this.frustumCullings.set(scene, cullingQuery);\r\n            queries = this.frustumCullings.get(scene)!;\r\n        }\r\n        const castShadow: boolean = bool(sceneData.flags & SceneFlags.SHADOW_CASTER);\r\n        const key = computeCullingKey(sceneData, castShadow);\r\n        const cullNum = queries.resultIndex.get(key);\r\n        if (cullNum !== undefined) {\r\n            return cullNum;\r\n        }\r\n        const frustumCulledResultID: FrustumCullingID = this.numFrustumCulling++;\r\n        if (this.numFrustumCulling >  this.frustumCullingResults.length) {\r\n            this.frustumCullingResults.push([]);\r\n        }\r\n        queries.resultIndex.set(key, frustumCulledResultID);\r\n        const cullingKey = this.cullingPools.frustumCullingKeyRecycle.add();\r\n        cullingKey.update(\r\n            sceneData,\r\n            castShadow,\r\n        );\r\n        queries.resultKeyIndex.set(key, cullingKey);\r\n        return frustumCulledResultID;\r\n    }\r\n\r\n    private getOrCreateRenderQueue (renderQueueKey: string, sceneFlags: SceneFlags, camera: Camera | null): number {\r\n        const renderQueueID = this.renderQueueIndex.get(renderQueueKey);\r\n        if (renderQueueID !== undefined) {\r\n            const rq = this.renderQueues[renderQueueID];\r\n            if (DEBUG) {\r\n                assert(rq.camera === camera);\r\n                assert((rq.sceneFlags & this.kFilterMask) === (sceneFlags & this.kFilterMask));\r\n            }\r\n            rq.sceneFlags |= sceneFlags & this.kDrawMask;\r\n            return renderQueueID;\r\n        }\r\n\r\n        const targetID = this.numRenderQueues++;\r\n\r\n        // renderQueues are not cleared, so we can reuse the space\r\n        // this->renderQueues.size() is more like a capacity\r\n        if (this.numRenderQueues > this.renderQueues.length) {\r\n            const renderQueue = this.cullingPools.renderQueueRecycle.add();\r\n            renderQueue.update();\r\n            this.renderQueues.push(renderQueue);\r\n        }\r\n        const rq = this.renderQueues[targetID];\r\n\r\n        // Update render queue index\r\n        this.renderQueueIndex.set(renderQueueKey, targetID);\r\n\r\n        // Update render queue\r\n        if (DEBUG) {\r\n            assert(rq.empty());\r\n            assert(rq.camera === null);\r\n            assert(rq.sceneFlags === SceneFlags.NONE);\r\n            assert(camera !== null);\r\n            assert(this.renderQueueIndex.size === this.numRenderQueues);\r\n        }\r\n        rq.camera = camera;\r\n        rq.sceneFlags = sceneFlags & this.kAllMask;\r\n\r\n        return targetID;\r\n    }\r\n\r\n    private collectCullingQueries (rg: RenderGraph): void {\r\n        for (const v of rg.v()) {\r\n            if (!rg.h(RenderGraphValue.Scene, v) || !rg.getValid(v)) {\r\n                continue;\r\n            }\r\n            const sceneData = rg.j<SceneData>(v);\r\n            if (!sceneData.scene) {\r\n                continue;\r\n            }\r\n            const frustumCulledResultID = this.getOrCreateFrustumCulling(v);\r\n            const lightBoundsCullingID = this.getOrCreateLightBoundsCulling(sceneData, frustumCulledResultID);\r\n\r\n            // Get render queue phaseLayoutID\r\n            const queueID = rg.getParent(v);\r\n            if (DEBUG) {\r\n                assert(queueID !== 0xFFFFFFFF);\r\n                assert(rg.h(RenderGraphValue.Queue, queueID));\r\n            }\r\n            const renderQueue = rg.j<RenderQueue0>(queueID);\r\n            const phaseLayoutID = renderQueue.phaseID;\r\n\r\n            // Make render queue key\r\n            const renderQueueKey = makeRenderQueueKey(\r\n                frustumCulledResultID,\r\n                lightBoundsCullingID,\r\n                phaseLayoutID,\r\n            );\r\n\r\n            // Get or create render queue\r\n            const renderQueueID = this.getOrCreateRenderQueue(renderQueueKey, sceneData.flags, sceneData.camera);\r\n\r\n            // add render queue query\r\n            const renderQueueQuery = this.cullingPools.renderQueueQueryRecycle.add();\r\n            renderQueueQuery.update(frustumCulledResultID, lightBoundsCullingID, renderQueueID);\r\n\r\n            // add render queue to query source\r\n            this.renderQueueQueryIndex.set(v, renderQueueQuery);\r\n        }\r\n    }\r\n\r\n    uploadInstancing (cmdBuffer: CommandBuffer): void {\r\n        for (let queueID = 0; queueID !== this.numRenderQueues; ++queueID) {\r\n            const queue = this.renderQueues[queueID];\r\n            queue.opaqueInstancingQueue.uploadBuffers(cmdBuffer);\r\n            queue.transparentInstancingQueue.uploadBuffers(cmdBuffer);\r\n        }\r\n    }\r\n\r\n    private _getPhaseIdFromScene (scene: number): number {\r\n        const rg: RenderGraph = this.renderGraph;\r\n        const renderQueueId = rg.getParent(scene);\r\n        const graphRenderQueue = rg.j<RenderQueue0>(renderQueueId);\r\n        return graphRenderQueue.phaseID;\r\n    }\r\n\r\n    private getBuiltinShadowFrustum (pplSceneData: PipelineSceneData, camera: Camera, mainLight: DirectionalLight, level: number): Readonly<Frustum> {\r\n        const csmLayers = pplSceneData.csmLayers;\r\n        const csmLevel = mainLight.csmLevel;\r\n        let frustum: Readonly<Frustum>;\r\n        const shadows = pplSceneData.shadows;\r\n        if (shadows.type === ShadowType.Planar) {\r\n            return camera.frustum;\r\n        }\r\n        if (shadows.enabled && shadows.type === ShadowType.ShadowMap && mainLight && mainLight.node) {\r\n            // pplSceneData.updateShadowUBORange(UBOShadowEnum.SHADOW_COLOR_OFFSET, shadows.shadowColor);\r\n            csmLayers.update(pplSceneData, camera);\r\n        }\r\n\r\n        if (mainLight.shadowFixedArea || csmLevel === CSMLevel.LEVEL_1) {\r\n            return csmLayers.specialLayer.validFrustum;\r\n        }\r\n        return csmLayers.layers[level].validFrustum;\r\n    }\r\n\r\n    private batchFrustumCulling (pplSceneData: PipelineSceneData): void {\r\n        for (const [scene, queries] of this.frustumCullings) {\r\n            for (const [key, frustomCulledResultID] of queries.resultIndex) {\r\n                const cullingKey = queries.resultKeyIndex.get(key)!;\r\n                const sceneData = cullingKey.sceneData!;\r\n                const light = sceneData.light.light;\r\n                const level = sceneData.light.level;\r\n                const castShadow = cullingKey.castShadows;\r\n                const probe = sceneData.light.probe;\r\n                const camera = probe ? probe.camera : sceneData.camera;\r\n                const models = this.frustumCullingResults[frustomCulledResultID];\r\n                if (probe) {\r\n                    sceneCulling(scene, camera!, camera!.frustum, castShadow, probe, models);\r\n                    continue;\r\n                }\r\n                if (light) {\r\n                    switch (light.type) {\r\n                    case LightType.SPOT:\r\n                        sceneCulling(scene, camera!, (light as SpotLight).frustum, castShadow, null, models);\r\n                        break;\r\n                    case LightType.DIRECTIONAL: {\r\n                        const frustum = this.getBuiltinShadowFrustum(pplSceneData, camera!, light as DirectionalLight, level);\r\n                        sceneCulling(scene, camera!, frustum, castShadow, null, models);\r\n                    }\r\n                        break;\r\n                    default:\r\n                    }\r\n                } else {\r\n                    sceneCulling(scene, camera!, camera!.frustum, castShadow, null, models);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private executeSphereLightCulling (light: SphereLight, frustumCullingResult: Array<Model>, lightBoundsCullingResult: Array<Model>): void {\r\n        const lightAABB = light.aabb;\r\n        for (const model of frustumCullingResult) {\r\n            const modelBounds = model.worldBounds;\r\n            if (!modelBounds || intersect.aabbWithAABB(modelBounds, lightAABB)) {\r\n                lightBoundsCullingResult.push(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    private executeSpotLightCulling (light: SpotLight, frustumCullingResult: Array<Model>, lightBoundsCullingResult: Array<Model>): void {\r\n        const lightAABB = light.aabb;\r\n        const lightFrustum: Frustum = light.frustum;\r\n        for (const model of frustumCullingResult) {\r\n            const modelBounds = model.worldBounds;\r\n            if (!modelBounds || (intersect.aabbWithAABB(lightAABB, modelBounds) && intersect.aabbFrustum(modelBounds, lightFrustum))) {\r\n                lightBoundsCullingResult.push(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    private executePointLightCulling (light: PointLight, frustumCullingResult: Array<Model>, lightBoundsCullingResult: Array<Model>): void {\r\n        const lightAABB = light.aabb;\r\n        for (const model of frustumCullingResult) {\r\n            const modelBounds = model.worldBounds;\r\n            if (!modelBounds || intersect.aabbWithAABB(lightAABB, modelBounds)) {\r\n                lightBoundsCullingResult.push(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    private executeRangedDirectionalLightCulling (\r\n        light: RangedDirectionalLight,\r\n        frustumCullingResult: Array<Model>,\r\n        lightBoundsCullingResult: Array<Model>,\r\n    ): void {\r\n        rangedDirLightBoundingBox.transform(light.node!.worldMatrix, null, null, null, lightAABB);\r\n        for (const model of frustumCullingResult) {\r\n            const modelBounds = model.worldBounds;\r\n            if (!modelBounds || intersect.aabbWithAABB(lightAABB, modelBounds)) {\r\n                lightBoundsCullingResult.push(model);\r\n            }\r\n        }\r\n    }\r\n\r\n    private batchLightBoundsCulling (): void {\r\n        for (const [scene, queries] of this.lightBoundsCullings) {\r\n            for (const [key, cullingID] of queries.resultIndex) {\r\n                const cullingKey = queries.resultKeyIndex.get(key)!;\r\n                const sceneData = cullingKey.sceneData!;\r\n                const frustumCullingID = cullingKey.frustumCullingID;\r\n                const frustumCullingResult = this.frustumCullingResults[frustumCullingID];\r\n                const lightBoundsCullingResult = this.lightBoundsCullingResults[cullingID];\r\n                switch (sceneData.shadingLight!.type) {\r\n                case LightType.SPHERE:\r\n                    {\r\n                        const light = sceneData.shadingLight as SphereLight;\r\n                        this.executeSphereLightCulling(light, frustumCullingResult, lightBoundsCullingResult.instances);\r\n                    }\r\n                    break;\r\n                case LightType.SPOT:\r\n                    {\r\n                        const light = sceneData.shadingLight as SpotLight;\r\n                        this.executeSpotLightCulling(light, frustumCullingResult, lightBoundsCullingResult.instances);\r\n                    }\r\n                    break;\r\n                case LightType.POINT:\r\n                    {\r\n                        const light = sceneData.shadingLight as PointLight;\r\n                        this.executePointLightCulling(light, frustumCullingResult, lightBoundsCullingResult.instances);\r\n                    }\r\n                    break;\r\n                case LightType.RANGED_DIRECTIONAL:\r\n                    {\r\n                        const light = sceneData.shadingLight as RangedDirectionalLight;\r\n                        this.executeRangedDirectionalLightCulling(light, frustumCullingResult, lightBoundsCullingResult.instances);\r\n                    }\r\n                    break;\r\n                case LightType.DIRECTIONAL:\r\n                case LightType.UNKNOWN:\r\n                default:\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getModelsByCullingResults (lightBoundsCullingID, frustomCulledResultID): Array<Model> {\r\n        // is culled by light bounds\r\n        if (lightBoundsCullingID !== 0xFFFFFFFF) {\r\n            if (lightBoundsCullingID < this.lightBoundsCullingResults.length) {\r\n                return this.lightBoundsCullingResults[lightBoundsCullingID].instances;\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n        // not culled by light bounds\r\n        if (frustomCulledResultID < this.frustumCullingResults.length) {\r\n            return this.frustumCullingResults[frustomCulledResultID];\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    private fillRenderQueues (): void {\r\n        for (const [key, targetID] of this.renderQueueIndex) {\r\n            // render queue target\r\n            const renderQueue = this.renderQueues[targetID];\r\n            if (DEBUG) {\r\n                assert(targetID < this.renderQueues.length);\r\n                assert(renderQueue.empty());\r\n            }\r\n\r\n            const [frustomCulledResultID, lightBoundsCullingID, phaseLayoutID] = extractRenderQueueKey(key);\r\n\r\n            // check scene flags\r\n            const isDrawBlend: boolean = bool(renderQueue.sceneFlags & SceneFlags.BLEND);\r\n            const isDrawOpaqueOrMask: boolean = bool(renderQueue.sceneFlags & (SceneFlags.OPAQUE | SceneFlags.MASK));\r\n            const isDrawShadowCaster: boolean = bool(renderQueue.sceneFlags & SceneFlags.SHADOW_CASTER);\r\n            const isDrawProbe: boolean = bool(renderQueue.sceneFlags & SceneFlags.REFLECTION_PROBE);\r\n\r\n            if (!isDrawShadowCaster && !isDrawBlend && !isDrawOpaqueOrMask && !isDrawProbe) {\r\n                // nothing to draw\r\n                continue;\r\n            }\r\n\r\n            // culling source\r\n            const sourceModels = this._getModelsByCullingResults(lightBoundsCullingID, frustomCulledResultID);\r\n\r\n            // skybox\r\n            const camera = renderQueue.camera!;\r\n\r\n            // fill render queue\r\n            for (const model of sourceModels) {\r\n                addRenderObject(\r\n                    phaseLayoutID,\r\n                    isDrawOpaqueOrMask,\r\n                    isDrawBlend,\r\n                    isDrawProbe,\r\n                    camera,\r\n                    model,\r\n                    renderQueue,\r\n                );\r\n            }\r\n            // post-processing\r\n            renderQueue.sort();\r\n        }\r\n    }\r\n}\r\n\r\nexport class LightResource {\r\n    private cpuBuffer!: Float32Array;\r\n    private programLibrary?: WebProgramLibrary;\r\n    private device: Device | null = null;\r\n    private elementSize: number = 0;\r\n    private maxNumLights: number = 16;\r\n    private binding: number = 0xFFFFFFFF;\r\n    private resized: boolean = false;\r\n    private lightBuffer?: Buffer;\r\n    private firstLightBufferView: Buffer | null = null;\r\n    private readonly lights: Array<Light> = [];\r\n    private readonly lightIndex = new Map<Light, number>();\r\n\r\n    init (programLib: WebProgramLibrary, deviceIn: Device, maxNumLights: number): void {\r\n        this.device = deviceIn;\r\n        this.programLibrary = programLib;\r\n\r\n        const instanceLayout = this.programLibrary.localLayoutData;\r\n        const attrID: number = programLib.layoutGraph.attributeIndex.get('CCForwardLight')!;\r\n        const uniformBlock = instanceLayout.uniformBlocks.get(attrID);\r\n\r\n        this.elementSize = AlignUp(\r\n            getUniformBlockSize(uniformBlock!.members),\r\n            this.device.capabilities.uboOffsetAlignment,\r\n        );\r\n        this.maxNumLights = maxNumLights;\r\n        this.binding = programLib.localLayoutData.bindingMap.get(attrID)!;\r\n\r\n        const bufferSize = this.elementSize * this.maxNumLights;\r\n\r\n        this.lightBuffer = this.device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            bufferSize,\r\n            this.elementSize,\r\n        ));\r\n        this.firstLightBufferView = this.device.createBuffer(new BufferViewInfo(\r\n            this.lightBuffer,\r\n            0,\r\n            this.elementSize,\r\n        ));\r\n\r\n        this.cpuBuffer = new Float32Array(bufferSize / Float32Array.BYTES_PER_ELEMENT);\r\n        this.resized = true;\r\n    }\r\n\r\n    buildLights (sceneCulling: SceneCulling, bHDR: boolean, shadowInfo: Shadows | null): void {\r\n        // Build light buffer\r\n        for (const [scene, lightBoundsCullings] of sceneCulling.lightBoundsCullings) {\r\n            for (const [key, lightBoundsCullingID] of lightBoundsCullings.resultIndex) {\r\n                const lightBoundsCulling = lightBoundsCullings.resultKeyIndex.get(key)!;\r\n                const sceneData = lightBoundsCulling.sceneData!;\r\n                let exposure: number = 1.0;\r\n                if (sceneData.camera) {\r\n                    exposure = sceneData.camera.exposure;\r\n                } else if (sceneData.light.probe && sceneData.light.probe.camera) {\r\n                    exposure = sceneData.light.probe.camera.exposure;\r\n                } else {\r\n                    throw new Error('Unexpected situation: No camera or probe found.');\r\n                }\r\n                const lightByteOffset: number = this.addLight(\r\n                    sceneData.shadingLight!,\r\n                    bHDR,\r\n                    exposure,\r\n                    shadowInfo,\r\n                );\r\n\r\n                // Save light byte offset for each light bounds culling\r\n                const result: LightBoundsCullingResult = sceneCulling.lightBoundsCullingResults[lightBoundsCullingID];\r\n                result.lightByteOffset = lightByteOffset;\r\n            }\r\n        }\r\n\r\n        // Assign light byte offset to each queue\r\n        for (const [sceneID, query] of sceneCulling.renderQueueQueryIndex) {\r\n            if (query.lightBoundsCulledResultID === 0xFFFFFFFF) {\r\n                continue;\r\n            }\r\n            const lightByteOffset: number = sceneCulling.lightBoundsCullingResults[query.lightBoundsCulledResultID].lightByteOffset;\r\n\r\n            sceneCulling.renderQueues[query.renderQueueTarget].lightByteOffset = lightByteOffset;\r\n        }\r\n    }\r\n\r\n    tryUpdateRenderSceneLocalDescriptorSet (sceneCulling: SceneCulling): void {\r\n        if (!sceneCulling.lightBoundsCullings.size) {\r\n            return;\r\n        }\r\n\r\n        for (const [scene, culling] of sceneCulling.frustumCullings) {\r\n            for (const model of scene.models) {\r\n                if (!model) {\r\n                    throw new Error('Unexpected null model.');\r\n                }\r\n                for (const submodel of model.subModels) {\r\n                    const set = submodel.descriptorSet;\r\n                    const prev = set.getBuffer(this.binding);\r\n                    if (this.resized || prev !== this.firstLightBufferView) {\r\n                        set.bindBuffer(this.binding, this.firstLightBufferView!);\r\n                        set.update();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.resized = false;\r\n    }\r\n\r\n    clear (): void {\r\n        this.cpuBuffer.fill(0);\r\n        this.lights.length = 0;\r\n        this.lightIndex.clear();\r\n    }\r\n\r\n    addLight (light: Light, bHDR: boolean, exposure: number, shadowInfo: Shadows | null): number {\r\n        // Already added\r\n        const existingLightID = this.lightIndex.get(light);\r\n        if (existingLightID !== undefined) {\r\n            return existingLightID;\r\n        }\r\n\r\n        // Resize buffer if needed\r\n        if (this.lights.length === this.maxNumLights) {\r\n            this.resized = true;\r\n            this.maxNumLights *= 2;\r\n            const bufferSize = this.elementSize * this.maxNumLights;\r\n            this.lightBuffer!.resize(bufferSize);\r\n            this.firstLightBufferView = this.device!.createBuffer(new BufferViewInfo(\r\n                this.lightBuffer,\r\n                0,\r\n                this.elementSize,\r\n            ));\r\n            const prevCpuBuffer = this.cpuBuffer;\r\n            this.cpuBuffer = new Float32Array(bufferSize / Float32Array.BYTES_PER_ELEMENT);\r\n            this.cpuBuffer.set(prevCpuBuffer);\r\n        }\r\n\r\n        // Add light\r\n        const lightID = this.lights.length;\r\n        this.lights[lightID] = light;\r\n        this.lightIndex.set(light, lightID);\r\n\r\n        // Update buffer\r\n        const offset = this.elementSize / Float32Array.BYTES_PER_ELEMENT * lightID;\r\n        SetLightUBO(light, bHDR, exposure, shadowInfo, this.cpuBuffer, offset, this.elementSize);\r\n\r\n        return lightID * this.elementSize;\r\n    }\r\n\r\n    buildLightBuffer (cmdBuffer: CommandBuffer): void {\r\n        cmdBuffer.updateBuffer(\r\n            this.lightBuffer!,\r\n            this.cpuBuffer,\r\n            (this.lights.length * this.elementSize) / Float32Array.BYTES_PER_ELEMENT,\r\n        );\r\n    }\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n ****************************************************************************/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport { getPhaseID, PipelineStateManager } from '..';\r\nimport { cclegacy, RecyclePool } from '../../core';\r\nimport intersect from '../../core/geometry/intersect';\r\nimport { Sphere } from '../../core/geometry/sphere';\r\nimport {\r\n    AccessFlagBit,\r\n    Attribute,\r\n    Buffer,\r\n    BufferInfo,\r\n    BufferUsageBit,\r\n    BufferViewInfo,\r\n    Color,\r\n    ColorAttachment,\r\n    CommandBuffer,\r\n    DepthStencilAttachment,\r\n    DescriptorSet,\r\n    DescriptorSetInfo,\r\n    Device,\r\n    deviceManager,\r\n    DispatchInfo,\r\n    Format,\r\n    Framebuffer,\r\n    FramebufferInfo,\r\n    GeneralBarrierInfo,\r\n    InputAssembler,\r\n    InputAssemblerInfo,\r\n    LoadOp,\r\n    MemoryUsageBit,\r\n    PipelineBindPoint,\r\n    PipelineState,\r\n    PipelineStateInfo,\r\n    Rect,\r\n    RenderPass,\r\n    RenderPassInfo,\r\n    SamplerInfo,\r\n    StoreOp,\r\n    SurfaceTransform,\r\n    Swapchain,\r\n    Texture,\r\n    TextureInfo,\r\n    TextureType,\r\n    TextureUsageBit,\r\n    Viewport,\r\n} from '../../gfx';\r\nimport { legacyCC } from '../../core/global-exports';\r\nimport { Vec3 } from '../../core/math/vec3';\r\nimport { Vec4 } from '../../core/math/vec4';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport { ShadowType } from '../../render-scene/scene/shadows';\r\nimport { Root } from '../../root';\r\nimport { IRenderPass, SetIndex, UBODeferredLight, UBOForwardLight, UBOLocal, UBOLocalEnum } from '../define';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { PipelineInputAssemblerData } from '../render-types';\r\nimport { DescriptorSetData, LayoutGraphData, LayoutGraphDataValue, PipelineLayoutData, RenderPhaseData, RenderStageData } from './layout-graph';\r\nimport { BasicPipeline } from './pipeline';\r\nimport {\r\n    Blit,\r\n    BlitType,\r\n    ClearView,\r\n    ComputePass,\r\n    ComputeSubpass,\r\n    ComputeView,\r\n    CopyPass,\r\n    Dispatch,\r\n    FormatView,\r\n    ManagedBuffer,\r\n    ManagedResource,\r\n    ManagedTexture,\r\n    MovePass,\r\n    PersistentBuffer,\r\n    PersistentTexture,\r\n    RasterPass,\r\n    RasterSubpass,\r\n    RaytracePass,\r\n    RenderData,\r\n    RenderGraph,\r\n    RenderGraphValue,\r\n    RenderGraphVisitor,\r\n    RenderQueue,\r\n    RenderSwapchain,\r\n    ResolvePass,\r\n    ResourceDesc,\r\n    ResourceGraph,\r\n    ResourceGraphVisitor,\r\n    ResourceTraits,\r\n    SceneData,\r\n    SubresourceView,\r\n} from './render-graph';\r\nimport {\r\n    AccessType,\r\n    AttachmentType,\r\n    QueueHint,\r\n    ResourceDimension,\r\n    ResourceFlags,\r\n    ResourceResidency,\r\n    SceneFlags,\r\n    UpdateFrequency,\r\n} from './types';\r\nimport { DefaultVisitor, depthFirstSearch, ReferenceGraphView } from './graph';\r\nimport { VectorGraphColorMap } from './effect';\r\nimport {\r\n    bool,\r\n    getDescriptorSetDataFromLayout,\r\n    getRenderArea,\r\n    updateGlobalDescBinding,\r\n} from './define';\r\nimport { LightResource, SceneCulling } from './scene-culling';\r\nimport { Pass, RenderScene } from '../../render-scene';\r\nimport { WebProgramLibrary } from './web-program-library';\r\nimport { recordCommand, RenderQueue as RenderExeQueue } from './web-pipeline-types';\r\nimport { SpotLight, SphereLight } from '../../render-scene/scene';\r\n\r\nclass ResourceVisitor implements ResourceGraphVisitor {\r\n    name: string;\r\n    constructor (resName = '') {\r\n        this.name = resName;\r\n        if (context) {\r\n            const ppl = context.pipeline as any;\r\n            ppl.resourceUses.push(resName);\r\n        }\r\n    }\r\n    set resName (value: string) {\r\n        this.name = value;\r\n    }\r\n    checkTexture (name: string): boolean {\r\n        const dTex = context.deviceTextures.get(name);\r\n        if (!dTex) return false;\r\n        const { width: descWidth, height: descHeight } = context.resourceGraph.getDesc(context.resourceGraph.vertex(name));\r\n        const checkDimensions = (actualWidth: number, actualHeight: number): boolean => actualWidth === descWidth && actualHeight === descHeight;\r\n        return (dTex.texture ? checkDimensions(dTex.texture.width, dTex.texture.height)\r\n            : dTex.swapchain ? checkDimensions(dTex.swapchain.width, dTex.swapchain.height)\r\n                : false);\r\n    }\r\n    createDeviceTex (value: PersistentTexture | Framebuffer | ManagedResource | RenderSwapchain): void {\r\n        let dTex = context.deviceTextures.get(this.name);\r\n        if (!dTex || !this.checkTexture(this.name)) {\r\n            if (dTex?.texture) {\r\n                dTex.texture.destroy();\r\n            }\r\n            dTex = new DeviceTexture(this.name, value);\r\n            context.deviceTextures.set(this.name, dTex);\r\n        }\r\n    }\r\n    checkBuffer (name: string): boolean {\r\n        const dBuf = context.deviceBuffers.get(name)!;\r\n        const resID = context.resourceGraph.vertex(this.name);\r\n        const desc = context.resourceGraph.getDesc(resID);\r\n        return dBuf.buffer!.size >= desc.width;\r\n    }\r\n    createDeviceBuf (value: ManagedBuffer | PersistentBuffer): void {\r\n        let dBuf = context.deviceBuffers.get(this.name);\r\n        if (!dBuf || !this.checkBuffer(this.name)) {\r\n            if (dBuf?.buffer) {\r\n                dBuf.buffer.destroy();\r\n            }\r\n            dBuf = new DeviceBuffer(this.name, value);\r\n            context.deviceBuffers.set(this.name, dBuf);\r\n        }\r\n    }\r\n    managed (value: ManagedResource): void {\r\n        this.createDeviceTex(value);\r\n    }\r\n    managedBuffer (value: ManagedBuffer): void {\r\n        this.createDeviceBuf(value);\r\n    }\r\n    managedTexture (value: ManagedTexture): void {\r\n        // noop\r\n    }\r\n    persistentBuffer (value: PersistentBuffer): void {\r\n        this.createDeviceBuf(value);\r\n    }\r\n    persistentTexture (value: PersistentTexture): void {\r\n        this.createDeviceTex(value);\r\n    }\r\n    framebuffer (value: Framebuffer): void {\r\n        this.createDeviceTex(value);\r\n    }\r\n    swapchain (value: RenderSwapchain): void {\r\n        this.createDeviceTex(value);\r\n    }\r\n    formatView (value: FormatView): void {\r\n        // do nothing\r\n    }\r\n    subresourceView (value: SubresourceView): void {\r\n        // do nothing\r\n    }\r\n}\r\n\r\n// Defining the recording interface\r\ninterface RecordingInterface {\r\n    preRecord(): void;\r\n    record(): void;\r\n    postRecord(): void;\r\n  }\r\n\r\nlet context: ExecutorContext;\r\nclass DeviceResource {\r\n    protected _name: string;\r\n    constructor (name: string) {\r\n        this._name = name;\r\n    }\r\n    get name (): string { return this._name; }\r\n}\r\nclass DeviceTexture extends DeviceResource {\r\n    protected _texture: Texture | null = null;\r\n    protected _swapchain: Swapchain | null = null;\r\n    protected _framebuffer: Framebuffer | null = null;\r\n    protected _desc: ResourceDesc | null = null;\r\n    protected _trait: ResourceTraits | null = null;\r\n\r\n    get texture (): Texture | null { return this._texture; }\r\n    set framebuffer (val: Framebuffer | null) { this._framebuffer = val; }\r\n    get framebuffer (): Framebuffer | null { return this._framebuffer; }\r\n    get description (): ResourceDesc | null { return this._desc; }\r\n    get trait (): ResourceTraits | null { return this._trait; }\r\n    get swapchain (): Swapchain | null { return this._swapchain; }\r\n\r\n    constructor (name: string, tex: PersistentTexture | Framebuffer | RenderSwapchain | ManagedResource) {\r\n        super(name);\r\n        const resGraph = context.resourceGraph;\r\n        const verID = resGraph.vertex(name);\r\n        this._desc = resGraph.getDesc(verID);\r\n        this._trait = resGraph.getTraits(verID);\r\n\r\n        if (tex instanceof Texture) {\r\n            this._texture = tex;\r\n        } else if (tex instanceof Framebuffer) {\r\n            this._framebuffer = tex;\r\n        } else if (tex instanceof RenderSwapchain) {\r\n            this._swapchain = tex.swapchain;\r\n        } else {\r\n            this.createTextureFromDesc(this._desc);\r\n        }\r\n    }\r\n\r\n    private createTextureFromDesc (desc: ResourceDesc): void {\r\n        let type = TextureType.TEX2D;\r\n        switch (desc.dimension) {\r\n        case ResourceDimension.TEXTURE1D:\r\n            type = TextureType.TEX1D;\r\n            break;\r\n        case ResourceDimension.TEXTURE3D:\r\n            type = TextureType.TEX3D;\r\n            break;\r\n        default:\r\n        }\r\n\r\n        const usageFlags = [\r\n            [ResourceFlags.COLOR_ATTACHMENT, TextureUsageBit.COLOR_ATTACHMENT],\r\n            [ResourceFlags.DEPTH_STENCIL_ATTACHMENT, TextureUsageBit.DEPTH_STENCIL_ATTACHMENT],\r\n            [ResourceFlags.INPUT_ATTACHMENT, TextureUsageBit.INPUT_ATTACHMENT],\r\n            [ResourceFlags.SAMPLED, TextureUsageBit.SAMPLED],\r\n            [ResourceFlags.STORAGE, TextureUsageBit.STORAGE],\r\n            [ResourceFlags.TRANSFER_SRC, TextureUsageBit.TRANSFER_SRC],\r\n            [ResourceFlags.TRANSFER_DST, TextureUsageBit.TRANSFER_DST],\r\n        ].reduce((acc, [flag, bit]) => (desc.flags & flag ? acc | bit : acc), TextureUsageBit.NONE);\r\n\r\n        this._texture = context.device.createTexture(new TextureInfo(\r\n            type,\r\n            usageFlags,\r\n            desc.format,\r\n            desc.width,\r\n            desc.height,\r\n        ));\r\n    }\r\n\r\n    release (): void {\r\n        this.framebuffer?.destroy();\r\n        this._framebuffer = null;\r\n        this.texture?.destroy();\r\n        this._texture = null;\r\n    }\r\n}\r\n\r\nfunction isShadowMap (scene?: SceneData): boolean {\r\n    const pSceneData: PipelineSceneData = cclegacy.director.root.pipeline.pipelineSceneData;\r\n    return !!(pSceneData.shadows.enabled\r\n        && pSceneData.shadows.type === ShadowType.ShadowMap\r\n        && scene\r\n        && (scene.flags & SceneFlags.SHADOW_CASTER) !== 0);\r\n}\r\n\r\nclass DeviceBuffer extends DeviceResource {\r\n    private _buffer: Buffer | null = null;\r\n\r\n    get buffer (): Buffer | null {\r\n        return this._buffer;\r\n    }\r\n\r\n    constructor (name: string, buffer: ManagedBuffer | PersistentBuffer) {\r\n        super(name);\r\n        const resGraph = context.resourceGraph;\r\n        const verID = resGraph.vertex(name);\r\n        const desc = resGraph.getDesc(verID);\r\n        const bufferInfo = new BufferInfo(\r\n            this.calculateBufferUsage(desc.flags),\r\n            MemoryUsageBit.DEVICE,\r\n            desc.width,\r\n        );\r\n        this._buffer = context.device.createBuffer(bufferInfo);\r\n    }\r\n\r\n    private calculateBufferUsage (flags: ResourceFlags): BufferUsageBit {\r\n        const flagToUsageMap: [ResourceFlags, BufferUsageBit][] = [\r\n            [ResourceFlags.INDIRECT, BufferUsageBit.INDIRECT],\r\n            [ResourceFlags.UNIFORM, BufferUsageBit.UNIFORM],\r\n            [ResourceFlags.STORAGE, BufferUsageBit.STORAGE],\r\n            [ResourceFlags.TRANSFER_SRC, BufferUsageBit.TRANSFER_SRC],\r\n            [ResourceFlags.TRANSFER_DST, BufferUsageBit.TRANSFER_DST],\r\n        ];\r\n\r\n        return flagToUsageMap.reduce((acc, [flag, usage]) => ((flags & flag) ? acc | usage : acc), BufferUsageBit.NONE);\r\n    }\r\n\r\n    release (): void {\r\n        this._buffer?.destroy();\r\n        this._buffer = null;\r\n    }\r\n}\r\n\r\nconst _vec4Array = new Float32Array(4);\r\n\r\nclass BlitDesc {\r\n    private _isUpdate = false;\r\n    private _isGatherLight = false;\r\n    private _blit: Blit;\r\n    private _screenQuad: PipelineInputAssemblerData | null = null;\r\n    private _stageDesc: DescriptorSet | undefined;\r\n    // If VOLUMETRIC_LIGHTING is turned on, it needs to be assigned\r\n    private _lightVolumeBuffer: Buffer | null = null;\r\n    private _lightMeterScale = 10000.0;\r\n    private _lightBufferData!: Float32Array;\r\n\r\n    get screenQuad (): PipelineInputAssemblerData | null { return this._screenQuad; }\r\n    get blit (): Blit { return this._blit; }\r\n    set blit (blit: Blit) { this._blit = blit; }\r\n    get stageDesc (): DescriptorSet | undefined { return this._stageDesc; }\r\n\r\n    constructor (blit: Blit) {\r\n        this._blit = blit;\r\n    }\r\n    /**\r\n     * @zh\r\n     * 创建四边形输入汇集器。\r\n     */\r\n    protected _createQuadInputAssembler (): PipelineInputAssemblerData {\r\n        return context.blit.pipelineIAData;\r\n    }\r\n\r\n    createScreenQuad (): void {\r\n        if (!this._screenQuad) {\r\n            this._screenQuad = this._createQuadInputAssembler();\r\n        }\r\n    }\r\n\r\n    private _gatherVolumeLights (camera: Camera): void {\r\n        if (!camera.scene) return;\r\n\r\n        const pipeline = context.pipeline;\r\n        const cmdBuff = context.commandBuffer;\r\n        const sphereLights = camera.scene.sphereLights;\r\n        const spotLights = camera.scene.spotLights;\r\n        const exposure = camera.exposure;\r\n        const maxLights = UBODeferredLight.LIGHTS_PER_PASS;\r\n        const elementLen = Vec4.length; // sizeof(vec4) / sizeof(float32)\r\n        const fieldLen = elementLen * maxLights;\r\n        const _sphere = Sphere.create(0, 0, 0, 1);\r\n        let idx = 0;\r\n\r\n        const processLight = (light: SphereLight | SpotLight, isSpot: boolean): void => {\r\n            if (idx >= maxLights) return;\r\n            Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n                // cc_lightPos\r\n                Vec3.toArray(_vec4Array, light.position);\r\n                _vec4Array[3] = isSpot ? 1 : 0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 0);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const tempRGB = light.colorTemperatureRGB;\r\n                    _vec4Array[0] *= tempRGB.x;\r\n                    _vec4Array[1] *= tempRGB.y;\r\n                    _vec4Array[2] *= tempRGB.z;\r\n                }\r\n                _vec4Array[3] = pipeline.pipelineSceneData.isHDR\r\n                    ? light.luminance * exposure * this._lightMeterScale\r\n                    : light.luminance;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);\r\n\r\n                // cc_lightSizeRangeAngle\r\n                _vec4Array[0] = light.size;\r\n                _vec4Array[1] = light.range;\r\n                _vec4Array[2] = isSpot ? (light as SpotLight).spotAngle : 0.0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);\r\n\r\n                if (isSpot) {\r\n                // cc_lightDir\r\n                    Vec3.toArray(_vec4Array, (light as SpotLight).direction);\r\n                    this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 3);\r\n                }\r\n                idx++;\r\n            }\r\n        };\r\n\r\n        for (const light of sphereLights) {\r\n            processLight(light, false);\r\n        }\r\n\r\n        for (const light of spotLights) {\r\n            processLight(light, true);\r\n        }\r\n\r\n        // Set the count of lights in cc_lightDir[0].w\r\n        const offset = fieldLen * 3 + 3;\r\n        this._lightBufferData.set([idx], offset);\r\n        cmdBuff.updateBuffer(this._lightVolumeBuffer!, this._lightBufferData);\r\n    }\r\n\r\n    update (): void {\r\n        if (this.blit.sceneFlags & SceneFlags.VOLUMETRIC_LIGHTING && this.blit.camera && !this._isGatherLight) {\r\n            this._gatherVolumeLights(this.blit.camera);\r\n            this._isGatherLight = true;\r\n            this._isUpdate = false;\r\n        }\r\n        if (!this._isUpdate) {\r\n            this._stageDesc!.update();\r\n            this._isUpdate = true;\r\n        }\r\n    }\r\n\r\n    reset (): void {\r\n        this._isUpdate = false;\r\n        this._isGatherLight = false;\r\n    }\r\n\r\n    createStageDescriptor (): void {\r\n        const blit = this.blit;\r\n        const pass = blit.material!.passes[blit.passID];\r\n        const device = context.device;\r\n        this._stageDesc = context.blit.stageDescs.get(pass) || device.createDescriptorSet(new DescriptorSetInfo(pass.localSetLayout));\r\n        context.blit.stageDescs.set(pass, this._stageDesc);\r\n        if (this.blit.sceneFlags & SceneFlags.VOLUMETRIC_LIGHTING) {\r\n            this._lightVolumeBuffer = context.blit.lightVolumeBuffer;\r\n            const deferredLitsBufView = context.blit.deferredLitsBufView;\r\n            this._lightBufferData = context.blit.lightBufferData;\r\n            this._lightBufferData.fill(0);\r\n            this._stageDesc.bindBuffer(UBOForwardLight.BINDING, deferredLitsBufView);\r\n        }\r\n\r\n        this._stageDesc.bindBuffer(UBOLocal.BINDING, context.blit.emptyLocalUBO);\r\n    }\r\n}\r\n\r\nclass DeviceComputeQueue implements RecordingInterface {\r\n    preRecord (): void {\r\n        // nothing to do\r\n    }\r\n    postRecord (): void {\r\n        // nothing to do\r\n    }\r\n    private _devicePass: DeviceComputePass | undefined;\r\n    private _hint: QueueHint = QueueHint.NONE;\r\n    private _phaseID: number = getPhaseID('default');\r\n    private _renderPhase: RenderPhaseData | null = null;\r\n    private _descSetData: DescriptorSetData | null = null;\r\n    private _layoutID = -1;\r\n    private _isUpdateUBO = false;\r\n    private _isUploadInstance = false;\r\n    private _isUploadBatched = false;\r\n    private _queueId = -1;\r\n    init (devicePass: DeviceComputePass, renderQueue: RenderQueue, id: number): void {\r\n        this.reset();\r\n        this.queueHint = renderQueue.hint;\r\n        this.queueId = id;\r\n        this._devicePass = devicePass;\r\n        this._phaseID = cclegacy.rendering.getPhaseID(devicePass.passID, context.renderGraph.getLayout(id));\r\n    }\r\n    get phaseID (): number { return this._phaseID; }\r\n    set layoutID (value: number) {\r\n        this._layoutID = value;\r\n        const layoutGraph = context.layoutGraph;\r\n        this._renderPhase = layoutGraph.h(LayoutGraphDataValue.RenderPhase, value)\r\n            ? layoutGraph.j<RenderPhaseData>(value)\r\n            : null;\r\n        const layout = layoutGraph.getLayout(value);\r\n        this._descSetData = layout.getSet(UpdateFrequency.PER_PHASE)!;\r\n    }\r\n    get layoutID (): number { return this._layoutID; }\r\n    get descSetData (): DescriptorSetData | null { return this._descSetData; }\r\n    get renderPhase (): RenderPhaseData | null { return this._renderPhase; }\r\n    set queueId (val) { this._queueId = val; }\r\n    get queueId (): number { return this._queueId; }\r\n    set isUpdateUBO (update: boolean) { this._isUpdateUBO = update; }\r\n    get isUpdateUBO (): boolean { return this._isUpdateUBO; }\r\n    set isUploadInstance (value: boolean) { this._isUploadInstance = value; }\r\n    get isUploadInstance (): boolean { return this._isUploadInstance; }\r\n    set isUploadBatched (value: boolean) { this._isUploadBatched = value; }\r\n    get isUploadBatched (): boolean { return this._isUploadBatched; }\r\n\r\n    reset (): void {\r\n        this._isUpdateUBO = false;\r\n        this._isUploadInstance = false;\r\n        this._isUploadBatched = false;\r\n    }\r\n    set queueHint (value: QueueHint) { this._hint = value; }\r\n    get queueHint (): QueueHint { return this._hint; }\r\n    get devicePass (): DeviceComputePass { return this._devicePass!; }\r\n\r\n    record (): void {\r\n        if (this._descSetData && this._descSetData.descriptorSet) {\r\n            context.commandBuffer\r\n                .bindDescriptorSet(SetIndex.COUNT, this._descSetData.descriptorSet);\r\n        }\r\n    }\r\n}\r\n\r\nclass DeviceRenderQueue implements RecordingInterface {\r\n    private _renderScenes: DeviceRenderScene[] = [];\r\n    private _devicePass?: DeviceRenderPass;\r\n    private _hint: QueueHint = QueueHint.NONE;\r\n    private _graphQueue!: RenderQueue;\r\n    private _phaseID: number = getPhaseID('default');\r\n    private _renderPhase: RenderPhaseData | null = null;\r\n    private _descSetData: DescriptorSetData | null = null;\r\n    private _viewport: Viewport | null = null;\r\n    private _scissor: Rect | null = null;\r\n    private _layoutID = -1;\r\n    private _isUpdateUBO = false;\r\n    private _isUploadInstance = false;\r\n    private _isUploadBatched = false;\r\n    get phaseID (): number { return this._phaseID; }\r\n    set layoutID (value: number) {\r\n        this._layoutID = value;\r\n        const layoutGraph = context.layoutGraph;\r\n        this._renderPhase = layoutGraph.h(LayoutGraphDataValue.RenderPhase, value)\r\n            ? layoutGraph.j<RenderPhaseData>(value)\r\n            : null;\r\n        const layout = layoutGraph.getLayout(value);\r\n        this._descSetData = layout.getSet(UpdateFrequency.PER_PHASE)!;\r\n    }\r\n    get layoutID (): number { return this._layoutID; }\r\n    get descSetData (): DescriptorSetData | null { return this._descSetData; }\r\n    get renderPhase (): RenderPhaseData | null { return this._renderPhase; }\r\n    get viewport (): Viewport | null { return this._viewport; }\r\n    get scissor (): Rect | null { return this._scissor; }\r\n    private _blitDesc: BlitDesc | null = null;\r\n    private _queueId = -1;\r\n    set queueId (val) { this._queueId = val; }\r\n    get queueId (): number { return this._queueId; }\r\n    set isUpdateUBO (update: boolean) { this._isUpdateUBO = update; }\r\n    get isUpdateUBO (): boolean { return this._isUpdateUBO; }\r\n    set isUploadInstance (value: boolean) { this._isUploadInstance = value; }\r\n    get isUploadInstance (): boolean { return this._isUploadInstance; }\r\n    set isUploadBatched (value: boolean) { this._isUploadBatched = value; }\r\n    get isUploadBatched (): boolean { return this._isUploadBatched; }\r\n    init (devicePass, renderQueue: RenderQueue, id: number): void {\r\n        this.reset();\r\n        this._graphQueue = renderQueue;\r\n        this.queueHint = renderQueue.hint;\r\n        const viewport = this._viewport = renderQueue.viewport;\r\n        if (viewport) {\r\n            this._scissor = new Rect(viewport.left, viewport.top, viewport.width, viewport.height);\r\n        }\r\n        this.queueId = id;\r\n        this._devicePass = devicePass;\r\n        this._phaseID = cclegacy.rendering.getPhaseID(devicePass.passID, context.renderGraph.getLayout(id));\r\n    }\r\n    createBlitDesc (blit: Blit): void {\r\n        if (!this._blitDesc) {\r\n            this._blitDesc = new BlitDesc(blit);\r\n        }\r\n        this._blitDesc.createScreenQuad();\r\n        this._blitDesc.createStageDescriptor();\r\n    }\r\n\r\n    setScene (sceneID: number, scene?: SceneData, blit?: Blit): DeviceRenderScene {\r\n        const deviceScene = context.pools.addDeviceScene();\r\n        deviceScene.init(this, sceneID, scene, blit);\r\n        this._renderScenes.push(deviceScene);\r\n        return deviceScene;\r\n    }\r\n    reset (): void {\r\n        this._renderScenes.length = 0;\r\n        this._isUpdateUBO = false;\r\n        this._isUploadInstance = false;\r\n        this._isUploadBatched = false;\r\n        this._blitDesc?.reset();\r\n    }\r\n    get graphQueue (): RenderQueue { return this._graphQueue; }\r\n    get blitDesc (): BlitDesc | null { return this._blitDesc; }\r\n    get renderScenes (): DeviceRenderScene[] { return this._renderScenes; }\r\n    set queueHint (value: QueueHint) { this._hint = value; }\r\n    get queueHint (): QueueHint { return this._hint; }\r\n    get devicePass (): DeviceRenderPass { return this._devicePass!; }\r\n    preRecord (): void {\r\n        // nothing to do\r\n    }\r\n\r\n    record (): void {\r\n        if (this._descSetData && this._descSetData.descriptorSet) {\r\n            context.commandBuffer\r\n                .bindDescriptorSet(SetIndex.COUNT, this._descSetData.descriptorSet);\r\n        }\r\n        this._renderScenes.forEach((scene) => {\r\n            scene.record();\r\n        });\r\n    }\r\n\r\n    postRecord (): void {\r\n        // nothing to do\r\n    }\r\n}\r\n\r\nclass RenderPassLayoutInfo {\r\n    protected _layoutID = 0;\r\n    protected _vertID = -1;\r\n    private _resID = -1;\r\n    protected _stage: RenderStageData | null = null;\r\n    protected _layout: PipelineLayoutData;\r\n    protected _inputName: string;\r\n    protected _descriptorSet: DescriptorSet | null = null;\r\n    constructor (layoutId: number, vertId: number, input: [string, ComputeView[]]) {\r\n        this._inputName = input[0];\r\n        this._layoutID = layoutId;\r\n        this._vertID = vertId;\r\n\r\n        const lg = context.layoutGraph;\r\n        this._stage = lg.j<RenderStageData>(layoutId);\r\n        this._layout = lg.getLayout(layoutId);\r\n\r\n        const layoutData = this._layout.getSet(UpdateFrequency.PER_PASS);\r\n        if (!layoutData) {\r\n            return;\r\n        }\r\n\r\n        const layoutDesc = layoutData.descriptorSet!;\r\n        const deviceTex = context.deviceTextures.get(this._inputName);\r\n        const gfxTex = deviceTex?.texture;\r\n\r\n        const deviceBuf = context.deviceBuffers.get(this._inputName);\r\n        const gfxBuf = deviceBuf?.buffer;\r\n\r\n        if (!gfxTex && !gfxBuf) {\r\n            throw Error(`Could not find texture with resource name ${this._inputName}`);\r\n        }\r\n\r\n        this._resID = context.resourceGraph.vertex(this._inputName);\r\n        const samplerInfo = context.resourceGraph.getSampler(this._resID);\r\n\r\n        // bind descriptors\r\n        for (const descriptor of input[1]) {\r\n            const descriptorName = descriptor.name;\r\n            const descriptorID = lg.attributeIndex.get(descriptorName);\r\n            if (descriptorID === undefined) {\r\n                continue;\r\n            }\r\n            this.bindDescriptor(layoutDesc, descriptorID, gfxTex!, gfxBuf!, samplerInfo, input[1][0].accessType);\r\n        }\r\n    }\r\n\r\n    private bindDescriptor (\r\n        layoutDesc: DescriptorSet,\r\n        descriptorID: number,\r\n        gfxTex: Texture,\r\n        gfxBuf: Buffer,\r\n        samplerInfo: SamplerInfo,\r\n        accessType: AccessType,\r\n    ): void {\r\n        const layoutData = this._layout.getSet(UpdateFrequency.PER_PASS)!;\r\n        const desc = context.resourceGraph.getDesc(this._resID);\r\n        for (const block of layoutData.descriptorSetLayoutData.descriptorBlocks) {\r\n            for (let i = 0; i < block.descriptors.length; ++i) {\r\n                if (descriptorID === block.descriptors[i].descriptorID) {\r\n                    const offset = block.offset;\r\n                    if (gfxTex) {\r\n                        layoutDesc.bindTexture(offset + i, gfxTex);\r\n                        const renderData = context.renderGraph.getData(this._vertID);\r\n                        const sampler = renderData.samplers.get(descriptorID) || context.device.getSampler(samplerInfo);\r\n                        layoutDesc.bindSampler(offset + i, sampler);\r\n                    } else if (desc.flags & ResourceFlags.STORAGE) {\r\n                        const access = accessType !== AccessType.READ ? AccessFlagBit.COMPUTE_SHADER_WRITE : AccessFlagBit.COMPUTE_SHADER_READ_OTHER;\r\n                        (layoutDesc as any).bindBuffer(block.offset + i, gfxBuf, 0, access);\r\n                    } else {\r\n                        layoutDesc.bindBuffer(offset + i, gfxBuf);\r\n                    }\r\n                    if (!this._descriptorSet) {\r\n                        this._descriptorSet = layoutDesc;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get descriptorSet (): DescriptorSet | null { return this._descriptorSet; }\r\n    get layoutID (): number { return this._layoutID; }\r\n    get vertID (): number { return this._vertID; }\r\n    get stage (): RenderStageData | null { return this._stage; }\r\n    get layout (): PipelineLayoutData { return this._layout; }\r\n}\r\n\r\nconst profilerViewport = new Viewport();\r\nconst renderPassArea = new Rect();\r\nconst resourceVisitor = new ResourceVisitor();\r\nclass DeviceRenderPass implements RecordingInterface {\r\n    protected _renderPass: RenderPass;\r\n    protected _framebuffer!: Framebuffer;\r\n    protected _clearColor: Color[] = [];\r\n    protected _deviceQueues: Map<number, DeviceRenderQueue> = new Map();\r\n    protected _clearDepth = 1;\r\n    protected _clearStencil = 0;\r\n    protected _passID: number;\r\n    protected _rasterID: number;\r\n    protected _rasterPass: RasterPass;\r\n    protected _layoutName: string;\r\n    protected _viewport: Viewport | null = null;\r\n    private _layout: RenderPassLayoutInfo | null = null;\r\n    private _idxOfRenderData: number = 0;\r\n    constructor (rasterID: number, rasterPass: RasterPass) {\r\n        this._rasterID = rasterID;\r\n        this._rasterPass = rasterPass;\r\n        const device = context.device;\r\n        this._layoutName = context.renderGraph.getLayout(rasterID);\r\n        this._passID = cclegacy.rendering.getPassID(this._layoutName);\r\n        const depAtt = new DepthStencilAttachment();\r\n        depAtt.format = Format.DEPTH_STENCIL;\r\n        const colors: ColorAttachment[] = [];\r\n        const colorTexs: Texture[] = [];\r\n        let depthTex: Texture | null = null;\r\n        let swapchain: Swapchain | null = null;\r\n        let framebuffer: Framebuffer | null = null;\r\n        for (const [resName, rasterV] of rasterPass.rasterViews) {\r\n            let resTex = context.deviceTextures.get(resName);\r\n            if (!resTex) {\r\n                this.visitResource(resName);\r\n                resTex = context.deviceTextures.get(resName)!;\r\n            } else {\r\n                const resGraph = context.resourceGraph;\r\n                const resId = resGraph.vertex(resName);\r\n                const resFbo = resGraph.object(resId);\r\n                if (resTex.framebuffer && resFbo instanceof Framebuffer && resTex.framebuffer !== resFbo) {\r\n                    resTex.framebuffer = resFbo;\r\n                } else if (resTex.texture) {\r\n                    const desc = resGraph.getDesc(resId);\r\n                    if (resTex.texture.width !== desc.width || resTex.texture.height !== desc.height) {\r\n                        resTex.texture.resize(desc.width, desc.height);\r\n                    }\r\n                }\r\n            }\r\n            if (!swapchain) swapchain = resTex.swapchain;\r\n            if (!framebuffer) framebuffer = resTex.framebuffer;\r\n            if (rasterV.attachmentType === AttachmentType.RENDER_TARGET) {\r\n                if (!resTex.swapchain && !resTex.framebuffer) colorTexs.push(resTex.texture!);\r\n                const colAtt = new ColorAttachment();\r\n                colAtt.format = resTex.description!.format;\r\n                colAtt.sampleCount = resTex.description!.sampleCount;\r\n                colAtt.loadOp = rasterV.loadOp;\r\n                colAtt.storeOp = rasterV.storeOp;\r\n                colAtt.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n                    rasterV.loadOp === LoadOp.LOAD ? AccessFlagBit.COLOR_ATTACHMENT_WRITE : AccessFlagBit.NONE,\r\n                    rasterV.storeOp === StoreOp.STORE ? AccessFlagBit.COLOR_ATTACHMENT_WRITE : AccessFlagBit.NONE,\r\n                ));\r\n                const currCol = new Color();\r\n                currCol.copy(rasterV.clearColor);\r\n                this._clearColor.push(currCol);\r\n                colors.push(colAtt);\r\n            } else if (rasterV.attachmentType === AttachmentType.DEPTH_STENCIL) {\r\n                depAtt.depthStoreOp = rasterV.storeOp;\r\n                depAtt.stencilStoreOp = rasterV.storeOp;\r\n                depAtt.depthLoadOp = rasterV.loadOp;\r\n                depAtt.stencilLoadOp = rasterV.loadOp;\r\n                depAtt.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n                    rasterV.loadOp === LoadOp.LOAD ? AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE : AccessFlagBit.NONE,\r\n                    rasterV.storeOp === StoreOp.STORE ? AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE : AccessFlagBit.NONE,\r\n                ));\r\n                if (!resTex.swapchain && !resTex.framebuffer) {\r\n                    depthTex = resTex.texture!;\r\n                } else if (resTex.swapchain) {\r\n                    depthTex = resTex.swapchain.depthStencilTexture;\r\n                }\r\n                this._clearDepth = rasterV.clearColor.x;\r\n                this._clearStencil = rasterV.clearColor.y;\r\n            }\r\n        }\r\n        if (colors.length === 0) {\r\n            const colorAttachment = new ColorAttachment();\r\n            colors.push(colorAttachment);\r\n        }\r\n        if (colorTexs.length === 0 && !swapchain && !framebuffer) {\r\n            const currTex = device.createTexture(new TextureInfo());\r\n            colorTexs.push(currTex);\r\n        }\r\n        const renderPassInfo = new RenderPassInfo();\r\n        renderPassInfo.colorAttachments = colors;\r\n        const depth = swapchain ? swapchain.depthStencilTexture : depthTex;\r\n        if (depth) {\r\n            renderPassInfo.depthStencilAttachment = depAtt;\r\n        }\r\n        this._renderPass = device.createRenderPass(renderPassInfo);\r\n        this._createFramebuffer(\r\n            framebuffer,\r\n            swapchain ? [swapchain.colorTexture] : colorTexs,\r\n            swapchain ? swapchain.depthStencilTexture : depthTex,\r\n        );\r\n    }\r\n    get indexOfRD (): number { return this._idxOfRenderData; }\r\n    get rasterID (): number { return this._rasterID; }\r\n    get layoutName (): string { return this._layoutName; }\r\n    get passID (): number { return this._passID; }\r\n    get renderLayout (): RenderPassLayoutInfo | null { return this._layout; }\r\n    get renderPass (): RenderPass { return this._renderPass; }\r\n    get framebuffer (): Framebuffer { return this._framebuffer; }\r\n    get clearColor (): Color[] { return this._clearColor; }\r\n    get clearDepth (): number { return this._clearDepth; }\r\n    get clearStencil (): number { return this._clearStencil; }\r\n    get deviceQueues (): Map<number, DeviceRenderQueue> { return this._deviceQueues; }\r\n    get viewport (): Viewport | null { return this._viewport; }\r\n    addIdxOfRD (): void {\r\n        this._idxOfRenderData++;\r\n    }\r\n    visitResource (resName: string): void {\r\n        const resourceGraph = context.resourceGraph;\r\n        const vertId = resourceGraph.vertex(resName);\r\n        resourceVisitor.resName = resName;\r\n        resourceGraph.visitVertex(resourceVisitor, vertId);\r\n    }\r\n    addQueue (queue: DeviceRenderQueue): void {\r\n        this._deviceQueues.set(queue.queueId, queue);\r\n    }\r\n    preRecord (): void {\r\n        context.passDescriptorSet = getDescriptorSetDataFromLayout(this.layoutName)!.descriptorSet;\r\n    }\r\n    protected _applyRenderLayout (input: [string, ComputeView[]]): void {\r\n        const stageName = context.renderGraph.getLayout(this._rasterID);\r\n        if (stageName) {\r\n            const layoutGraph = context.layoutGraph;\r\n            const stageId = layoutGraph.locateChild(layoutGraph.N, stageName);\r\n            if (stageId !== 0xFFFFFFFF) {\r\n                this._layout = new RenderPassLayoutInfo(stageId, this._rasterID, input);\r\n            }\r\n        }\r\n    }\r\n    getGlobalDescData (): DescriptorSetData {\r\n        const stageId = context.layoutGraph.locateChild(context.layoutGraph.N, 'default');\r\n        const layout = context.layoutGraph.getLayout(stageId);\r\n        const layoutData = layout.getSet(UpdateFrequency.PER_PASS)!;\r\n        return layoutData;\r\n    }\r\n\r\n    protected _applyViewport (frameTex: Texture): void {\r\n        this._viewport = null;\r\n        const viewport = this._rasterPass.viewport;\r\n        if (viewport.left !== 0\r\n            || viewport.top !== 0\r\n            || viewport.width !== 0\r\n            || viewport.height !== 0) {\r\n            this._viewport = viewport;\r\n        }\r\n    }\r\n\r\n    beginPass (): void {\r\n        const tex = this.framebuffer.colorTextures[0]!;\r\n        this._applyViewport(tex);\r\n        const cmdBuff = context.commandBuffer;\r\n\r\n        if (this._viewport) {\r\n            renderPassArea.x = this._viewport.left;\r\n            renderPassArea.y = this._viewport.top;\r\n            renderPassArea.width = this._viewport.width;\r\n            renderPassArea.height = this._viewport.height;\r\n        } else {\r\n            renderPassArea.y = renderPassArea.x = 0;\r\n            renderPassArea.width = tex.width;\r\n            renderPassArea.height = tex.height;\r\n        }\r\n        cmdBuff.beginRenderPass(\r\n            this.renderPass,\r\n            this.framebuffer,\r\n            renderPassArea,\r\n            this.clearColor,\r\n            this.clearDepth,\r\n            this.clearStencil,\r\n        );\r\n        if (context.passDescriptorSet) {\r\n            cmdBuff.bindDescriptorSet(\r\n                SetIndex.GLOBAL,\r\n                context.passDescriptorSet,\r\n            );\r\n        }\r\n    }\r\n\r\n    endPass (): void {\r\n        const cmdBuff = context.commandBuffer;\r\n        cmdBuff.endRenderPass();\r\n    }\r\n    // record common buffer\r\n    record (): void {\r\n        this.beginPass();\r\n        for (const queue of this._deviceQueues.values()) {\r\n            queue.record();\r\n        }\r\n        this.endPass();\r\n    }\r\n\r\n    postRecord (): void {\r\n        // nothing to do\r\n    }\r\n\r\n    private _processRenderLayout (pass: RasterPass): void {\r\n        for (const cv of pass.computeViews) {\r\n            this._applyRenderLayout(cv);\r\n        }\r\n        // update the layout descriptorSet\r\n        if (this.renderLayout && this.renderLayout.descriptorSet) {\r\n            this.renderLayout.descriptorSet.update();\r\n        }\r\n    }\r\n\r\n    public processRenderLayout (): void {\r\n        this._processRenderLayout(this._rasterPass);\r\n    }\r\n\r\n    private _createFramebuffer (fbo: Framebuffer | null, cols: Texture[], depthTex: Texture | null): void {\r\n        if (!fbo && !cols.length) return;\r\n        if (this._framebuffer && fbo !== this._framebuffer) this._framebuffer.destroy();\r\n        this._framebuffer = fbo || context.device.createFramebuffer(new FramebufferInfo(\r\n            this._renderPass,\r\n            cols,\r\n            depthTex,\r\n        ));\r\n    }\r\n\r\n    resetResource (id: number, pass: RasterPass): void {\r\n        this._rasterID = id;\r\n        this._rasterPass = pass;\r\n        this._layoutName = context.renderGraph.getLayout(id);\r\n        this._passID = cclegacy.rendering.getPassID(this._layoutName);\r\n        this._deviceQueues.clear();\r\n        this._idxOfRenderData = 0;\r\n        let framebuffer: Framebuffer | null = null;\r\n        const colTextures: Texture[] = [];\r\n        const currFramebuffer = this._framebuffer;\r\n        const currFBDepthTex = currFramebuffer?.depthStencilTexture ?? null;\r\n        let depTexture = currFramebuffer ? currFBDepthTex : null;\r\n        const currentWidth = currFramebuffer?.width ?? 0;\r\n        const currentHeight = currFramebuffer?.height ?? 0;\r\n\r\n        let [width, height] = [0, 0];\r\n        for (const [resName, rasterV] of pass.rasterViews) {\r\n            if (rasterV.attachmentType !== AttachmentType.SHADING_RATE) {\r\n                const resDesc = context.resourceGraph.getDesc(context.resourceGraph.vertex(resName));\r\n                width = resDesc.width;\r\n                height = resDesc.height;\r\n                break;\r\n            }\r\n        }\r\n        // The texture inside the fbo was destroyed？\r\n        const isInsideTexDestroy = currFramebuffer?.colorTextures.some((colTex) => !colTex || colTex.getTextureHandle() === 0)\r\n                               || (currFBDepthTex && currFBDepthTex.getTextureHandle() === 0);\r\n        const needRebuild = width !== currentWidth || height !== currentHeight || (currFramebuffer?.needRebuild ?? false) || isInsideTexDestroy;\r\n        for (const [resName, rasterV] of pass.rasterViews) {\r\n            let deviceTex = context.deviceTextures.get(resName)!;\r\n            if (!deviceTex) {\r\n                this.visitResource(resName);\r\n                deviceTex = context.deviceTextures.get(resName)!;\r\n            }\r\n            const resGraph = context.resourceGraph;\r\n            const resId = resGraph.vertex(resName);\r\n            const resFbo = resGraph.object(resId);\r\n            const resDesc = resGraph.getDesc(resId);\r\n            if (deviceTex.framebuffer && resFbo instanceof Framebuffer && (deviceTex.framebuffer !== resFbo || resFbo !== this._framebuffer)) {\r\n                framebuffer = this._framebuffer = deviceTex.framebuffer = resFbo;\r\n            } else if (deviceTex.texture && needRebuild) {\r\n                const gfxTex = deviceTex.texture;\r\n                gfxTex.resize(resDesc.width, resDesc.height);\r\n                if (rasterV.attachmentType === AttachmentType.RENDER_TARGET) {\r\n                    colTextures.push(gfxTex);\r\n                } else if (rasterV.attachmentType === AttachmentType.DEPTH_STENCIL) {\r\n                    depTexture = gfxTex;\r\n                }\r\n            }\r\n        }\r\n        this._createFramebuffer(framebuffer, colTextures, depTexture);\r\n    }\r\n}\r\n\r\nclass ComputePassInfo {\r\n    protected _id!: number;\r\n    protected _pass!: ComputePass;\r\n    get id (): number { return this._id; }\r\n    get pass (): ComputePass { return this._pass; }\r\n    applyInfo (id: number, pass: ComputePass): void {\r\n        this._id = id;\r\n        this._pass = pass;\r\n    }\r\n}\r\n\r\nclass DeviceComputePass implements RecordingInterface {\r\n    protected _deviceQueues: DeviceComputeQueue[] = [];\r\n    protected _passID: number;\r\n    protected _layoutName: string;\r\n    protected _viewport: Viewport | null = null;\r\n    private _computeInfo: ComputePassInfo;\r\n    private _layout: RenderPassLayoutInfo | null = null;\r\n    constructor (passInfo: ComputePassInfo) {\r\n        this._computeInfo = passInfo;\r\n        this._layoutName = context.renderGraph.getLayout(passInfo.id);\r\n        this._passID = cclegacy.rendering.getPassID(this._layoutName);\r\n\r\n        for (const cv of passInfo.pass.computeViews) {\r\n            let resTex = context.deviceTextures.get(cv[0]);\r\n            if (!resTex) {\r\n                this.visitResource(cv[0]);\r\n                resTex = context.deviceTextures.get(cv[0])!;\r\n            }\r\n            this._applyRenderLayout(cv);\r\n        }\r\n        // update the layout descriptorSet\r\n        if (this.renderLayout && this.renderLayout.descriptorSet) {\r\n            this.renderLayout.descriptorSet.update();\r\n        }\r\n    }\r\n    preRecord (): void {\r\n        context.passDescriptorSet = getDescriptorSetDataFromLayout(this.layoutName)!.descriptorSet;\r\n    }\r\n    postRecord (): void {\r\n        // nothing to do\r\n    }\r\n    get layoutName (): string { return this._layoutName; }\r\n    get passID (): number { return this._passID; }\r\n    get renderLayout (): RenderPassLayoutInfo | null { return this._layout; }\r\n\r\n    get deviceQueues (): DeviceComputeQueue[] { return this._deviceQueues; }\r\n    get computePassInfo (): ComputePassInfo { return this._computeInfo; }\r\n    visitResource (resName: string): void {\r\n        const resourceGraph = context.resourceGraph;\r\n        const vertId = resourceGraph.vertex(resName);\r\n        resourceVisitor.resName = resName;\r\n        resourceGraph.visitVertex(resourceVisitor, vertId);\r\n    }\r\n    addQueue (queue: DeviceComputeQueue): void { this._deviceQueues.push(queue); }\r\n    protected _applyRenderLayout (input: [string, ComputeView[]]): void {\r\n        const stageName = context.renderGraph.getLayout(this._computeInfo.id);\r\n        if (stageName) {\r\n            const layoutGraph = context.layoutGraph;\r\n            const stageId = layoutGraph.locateChild(layoutGraph.N, stageName);\r\n            if (stageId !== 0xFFFFFFFF) {\r\n                this._layout = new RenderPassLayoutInfo(stageId, this._computeInfo.id, input);\r\n            }\r\n        }\r\n    }\r\n    getGlobalDescData (): DescriptorSetData {\r\n        const stageId = context.layoutGraph.locateChild(context.layoutGraph.N, 'default');\r\n        const layout = context.layoutGraph.getLayout(stageId);\r\n        const layoutData = layout.getSet(UpdateFrequency.PER_PASS)!;\r\n        return layoutData;\r\n    }\r\n\r\n    // record common buffer\r\n    record (): void {\r\n        const cmdBuff = context.commandBuffer;\r\n        if (context.passDescriptorSet) {\r\n            cmdBuff.bindDescriptorSet(\r\n                SetIndex.GLOBAL,\r\n                context.passDescriptorSet,\r\n            );\r\n        }\r\n\r\n        for (const queue of this._deviceQueues) {\r\n            queue.record();\r\n        }\r\n        const renderData = context.renderGraph.getData(this._computeInfo.id);\r\n        updateGlobalDescBinding(renderData, -1, 0, context.renderGraph.getLayout(this._computeInfo.id));\r\n    }\r\n\r\n    resetResource (id: number, pass: ComputePass): void {\r\n        this._computeInfo.applyInfo(id, pass);\r\n        this._layoutName = context.renderGraph.getLayout(id);\r\n        this._passID = cclegacy.rendering.getPassID(this._layoutName);\r\n        this._deviceQueues.length = 0;\r\n        for (const cv of this._computeInfo.pass.computeViews) {\r\n            this._applyRenderLayout(cv);\r\n        }\r\n        // update the layout descriptorSet\r\n        if (this.renderLayout && this.renderLayout.descriptorSet) {\r\n            this.renderLayout.descriptorSet.update();\r\n        }\r\n    }\r\n}\r\n\r\nconst sceneViewport = new Viewport();\r\nclass DeviceRenderScene implements RecordingInterface {\r\n    protected _currentQueue!: DeviceRenderQueue;\r\n    protected _renderPass!: RenderPass;\r\n    protected _scene: RenderScene | null = null;\r\n    protected _camera: Camera | null = null;\r\n    protected _sceneData?: SceneData;\r\n    protected _blit?: Blit;\r\n    protected _sceneID: number = -1;\r\n    get blit (): Blit | undefined { return this._blit; }\r\n    get sceneData (): SceneData | undefined { return this._sceneData; }\r\n    get sceneID (): number { return this._sceneID; }\r\n    get camera (): Camera | null { return this._camera; }\r\n    preRecord (): void {\r\n        if (this._blit && this._blit.blitType === BlitType.FULLSCREEN_QUAD) {\r\n            this._currentQueue.createBlitDesc(this._blit);\r\n            this._currentQueue.blitDesc!.update();\r\n        }\r\n        context.lightResource.buildLightBuffer(context.commandBuffer);\r\n        context.lightResource.tryUpdateRenderSceneLocalDescriptorSet(context.culling);\r\n    }\r\n    postRecord (): void {\r\n        // nothing to do\r\n    }\r\n    init (queue: DeviceRenderQueue, sceneID: number, scene?: SceneData, blit?: Blit): void {\r\n        this._currentQueue = queue;\r\n        this._sceneData = scene;\r\n        this._blit = blit;\r\n        this._sceneID = sceneID;\r\n        this._renderPass = queue.devicePass.renderPass;\r\n        const camera = scene && scene.camera ? scene.camera : blit && blit.camera ? blit.camera : null;\r\n        if (camera) {\r\n            this._scene = camera.scene;\r\n            this._camera = camera;\r\n        }\r\n    }\r\n\r\n    protected _record3D (): void {\r\n        const blit = this._blit!;\r\n        const device = context.device;\r\n        const cmdBuff = context.commandBuffer;\r\n        for (const model of blit.models) {\r\n            for (const subModel of model.subModels) {\r\n                const inputAssembler = subModel.inputAssembler;\r\n                const passCount = subModel.passes.length;\r\n                for (let passId = 0; passId < passCount; ++passId) {\r\n                    const pass = subModel.passes[passId];\r\n                    const shader = subModel.shaders[passId];\r\n                    const pso = PipelineStateManager.getOrCreatePipelineState(\r\n                        device,\r\n                        pass,\r\n                        shader,\r\n                        this._renderPass,\r\n                        inputAssembler,\r\n                    );\r\n                    cmdBuff.bindPipelineState(pso);\r\n                    cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n                    cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);\r\n                    cmdBuff.bindInputAssembler(inputAssembler);\r\n                    cmdBuff.draw(inputAssembler);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _recordUI (): void {\r\n        const batches = this.camera!.scene!.batches;\r\n        for (let i = 0; i < batches.length; i++) {\r\n            const batch = batches[i];\r\n            let visible = false;\r\n            if (this.camera!.visibility & batch.visFlags) {\r\n                visible = true;\r\n            }\r\n\r\n            if (!visible) continue;\r\n            // shaders.length always equals actual used passes.length\r\n            const count = batch.shaders.length;\r\n            for (let j = 0; j < count; j++) {\r\n                const pass = batch.passes[j];\r\n                if (pass.phaseID !== this._currentQueue.phaseID) continue;\r\n                const shader = batch.shaders[j];\r\n                const ia: InputAssembler = batch.inputAssembler!;\r\n                const ds = batch.descriptorSet!;\r\n                recordCommand(context.commandBuffer, this._renderPass, pass, ds, shader, ia);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _showProfiler (): void {\r\n        const rect = renderPassArea;\r\n        const profiler = context.pipeline.profiler!;\r\n        if (!profiler || !profiler.enabled || !context.passShowStatistics) {\r\n            return;\r\n        }\r\n        const profilerDesc = context.profilerDescriptorSet;\r\n        const renderPass = this._renderPass;\r\n        const cmdBuff = context.commandBuffer;\r\n        const submodel = profiler.subModels[0];\r\n        const pass = submodel.passes[0];\r\n        const ia = submodel.inputAssembler;\r\n        profilerViewport.width = rect.width;\r\n        profilerViewport.height = rect.height;\r\n        cmdBuff.setViewport(profilerViewport);\r\n        cmdBuff.setScissor(rect);\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, profilerDesc);\r\n        recordCommand(cmdBuff, renderPass, pass, submodel.descriptorSet, submodel.shaders[0], ia);\r\n    }\r\n    private _recordBlit (): void {\r\n        if (!this.blit) { return; }\r\n\r\n        const blit = this.blit;\r\n        const currMat = blit.material!;\r\n        const pass = currMat.passes[blit.passID];\r\n        pass.update();\r\n        const shader = pass.getShaderVariant();\r\n        const blitDesc = this._currentQueue.blitDesc!;\r\n        const screenIa = blitDesc.screenQuad!.quadIA;\r\n        recordCommand(context.commandBuffer, this._renderPass, pass, blitDesc.stageDesc!, shader, screenIa);\r\n    }\r\n\r\n    protected _updateGlobal (data: RenderData, sceneId: number): void {\r\n        const devicePass = this._currentQueue.devicePass;\r\n        devicePass.addIdxOfRD();\r\n        updateGlobalDescBinding(data, sceneId, devicePass.indexOfRD, context.renderGraph.getLayout(devicePass.rasterID));\r\n    }\r\n\r\n    protected _updateRenderData (): void {\r\n        if (this._currentQueue.isUpdateUBO) return;\r\n        const devicePass = this._currentQueue.devicePass;\r\n        const rasterId = devicePass.rasterID;\r\n        const passRenderData = context.renderGraph.getData(rasterId);\r\n        const sceneId = this.sceneID;\r\n        // global\r\n        this._updateGlobal(context.renderGraph.globalRenderData, sceneId);\r\n        // pass\r\n        this._updateGlobal(passRenderData, sceneId);\r\n        // queue\r\n        const queueId = this._currentQueue.queueId;\r\n        const queueRenderData = context.renderGraph.getData(queueId)!;\r\n        this._updateGlobal(queueRenderData, sceneId);\r\n        // scene\r\n        const sceneRenderData = context.renderGraph.getData(sceneId)!;\r\n        if (sceneRenderData) this._updateGlobal(sceneRenderData, sceneId);\r\n        devicePass.processRenderLayout();\r\n        context.passDescriptorSet?.update();\r\n        this._currentQueue.isUpdateUBO = true;\r\n    }\r\n\r\n    private _applyViewport (): void {\r\n        const queueViewport = this._currentQueue.viewport;\r\n        if (queueViewport) {\r\n            context.commandBuffer.setViewport(queueViewport);\r\n            context.commandBuffer.setScissor(this._currentQueue.scissor!);\r\n        } else if (!this._currentQueue.devicePass.viewport) {\r\n            const texture = this._currentQueue.devicePass.framebuffer.colorTextures[0]!;\r\n            const lightInfo = this.sceneData ? this.sceneData.light : null;\r\n            const area = isShadowMap(this.sceneData) && this.sceneData && lightInfo!.light\r\n                ? getRenderArea(this.camera!, texture.width, texture.height, lightInfo!.light, lightInfo!.level)\r\n                : getRenderArea(this.camera!, texture.width, texture.height);\r\n            sceneViewport.left = area.x;\r\n            sceneViewport.top = area.y;\r\n            sceneViewport.width = area.width;\r\n            sceneViewport.height = area.height;\r\n            context.commandBuffer.setViewport(sceneViewport);\r\n            context.commandBuffer.setScissor(area);\r\n        }\r\n    }\r\n\r\n    public record (): void {\r\n        const devicePass = this._currentQueue.devicePass;\r\n        const sceneCulling = context.culling;\r\n        this._updateRenderData();\r\n        this._applyViewport();\r\n\r\n        // Currently processing blit and camera first\r\n        if (this.blit) {\r\n            switch (this.blit.blitType) {\r\n            case BlitType.FULLSCREEN_QUAD:\r\n                this._recordBlit();\r\n                break;\r\n            case BlitType.DRAW_2D:\r\n                this._recordUI();\r\n                break;\r\n            case BlitType.DRAW_PROFILE:\r\n                this._showProfiler();\r\n                break;\r\n            case BlitType.DRAW_3D:\r\n                this._record3D();\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n            return;\r\n        }\r\n        const rqQuery = sceneCulling.renderQueueQueryIndex.get(this.sceneID)!;\r\n        const rq = sceneCulling.renderQueues[rqQuery.renderQueueTarget];\r\n        const graphSceneData = this.sceneData!;\r\n        const isProbe = bool(graphSceneData.flags & SceneFlags.REFLECTION_PROBE);\r\n        if (isProbe) rq.probeQueue.applyMacro();\r\n        rq.recordCommands(context.commandBuffer, this._renderPass, graphSceneData.flags);\r\n        if (isProbe) rq.probeQueue.removeMacro();\r\n        if (graphSceneData.flags & SceneFlags.GEOMETRY) {\r\n            this.camera!.geometryRenderer?.render(\r\n                devicePass.renderPass,\r\n                context.commandBuffer,\r\n                context.pipeline.pipelineSceneData,\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nclass ExecutorPools {\r\n    constructor () {\r\n        this.deviceQueuePool = new RecyclePool<DeviceRenderQueue>((): DeviceRenderQueue => new DeviceRenderQueue(), 16);\r\n        this.deviceScenePool = new RecyclePool<DeviceRenderScene>((): DeviceRenderScene => new DeviceRenderScene(), 16);\r\n        this.computeQueuePool = new RecyclePool<DeviceComputeQueue>((): DeviceComputeQueue => new DeviceComputeQueue(), 16);\r\n        this.passPool = new RecyclePool<IRenderPass>((): { priority: number; hash: number; depth: number; shaderId: number; subModel: any; passIdx: number; } => ({\r\n            priority: 0,\r\n            hash: 0,\r\n            depth: 0,\r\n            shaderId: 0,\r\n            subModel: null!,\r\n            passIdx: 0,\r\n        }), 64);\r\n    }\r\n    addDeviceQueue (): DeviceRenderQueue {\r\n        return this.deviceQueuePool.add();\r\n    }\r\n    addComputeQueue (): DeviceComputeQueue {\r\n        return this.computeQueuePool.add();\r\n    }\r\n    addDeviceScene (): DeviceRenderScene {\r\n        return this.deviceScenePool.add();\r\n    }\r\n    reset (): void {\r\n        this.deviceQueuePool.reset();\r\n        this.computeQueuePool.reset();\r\n        this.deviceScenePool.reset();\r\n    }\r\n    readonly deviceQueuePool: RecyclePool<DeviceRenderQueue>;\r\n    readonly computeQueuePool: RecyclePool<DeviceComputeQueue>;\r\n    readonly passPool: RecyclePool<IRenderPass>;\r\n    readonly deviceScenePool: RecyclePool<DeviceRenderScene>;\r\n}\r\n\r\nconst vbData = new Float32Array(4 * 4);\r\nconst quadRect = new Rect();\r\n// The attribute length of the volume light\r\nconst volLightAttrCount = 5;\r\n\r\nclass BlitInfo {\r\n    private _pipelineIAData: PipelineInputAssemblerData;\r\n    private _context: ExecutorContext;\r\n    private _width: number;\r\n    private _height: number;\r\n    private _lightVolumeBuffer!: Buffer;\r\n    private _lightBufferData!: Float32Array;\r\n    private _deferredLitsBufView!: Buffer;\r\n    private _localUBO!: Buffer;\r\n    private _stageDescs: Map<Pass, DescriptorSet> = new Map();\r\n    get pipelineIAData (): PipelineInputAssemblerData {\r\n        return this._pipelineIAData;\r\n    }\r\n    get deferredLitsBufView (): Buffer {\r\n        return this._deferredLitsBufView;\r\n    }\r\n    get lightVolumeBuffer (): Buffer {\r\n        return this._lightVolumeBuffer;\r\n    }\r\n    get lightBufferData (): Float32Array {\r\n        return this._lightBufferData;\r\n    }\r\n    get stageDescs (): Map<Pass, DescriptorSet> {\r\n        return this._stageDescs;\r\n    }\r\n    get emptyLocalUBO (): Buffer {\r\n        return this._localUBO;\r\n    }\r\n    constructor (context: ExecutorContext) {\r\n        this._context = context;\r\n        this._width = context.width;\r\n        this._height = context.height;\r\n        this._pipelineIAData = this._createQuadInputAssembler();\r\n        const vb = this._genQuadVertexData(SurfaceTransform.IDENTITY, new Rect(0, 0, context.width, context.height));\r\n        this._pipelineIAData.quadVB!.update(vb);\r\n        this._createLightVolumes();\r\n        const size: number = UBOLocalEnum.SIZE;\r\n        this._localUBO = context.device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            size,\r\n            size,\r\n        ));\r\n    }\r\n\r\n    resize (width, height): void {\r\n        if (width !== this._width || height !== this._height) {\r\n            quadRect.y = quadRect.x = 0;\r\n            quadRect.width = width;\r\n            quadRect.height = height;\r\n            const vb = this._genQuadVertexData(SurfaceTransform.IDENTITY, quadRect);\r\n            this._pipelineIAData.quadVB!.update(vb);\r\n        }\r\n    }\r\n\r\n    private _createLightVolumes (): void {\r\n        const device = this._context.root.device;\r\n        let totalSize = Float32Array.BYTES_PER_ELEMENT * volLightAttrCount * 4 * UBODeferredLight.LIGHTS_PER_PASS;\r\n        totalSize = Math.ceil(totalSize / device.capabilities.uboOffsetAlignment) * device.capabilities.uboOffsetAlignment;\r\n\r\n        this._lightVolumeBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            totalSize,\r\n            device.capabilities.uboOffsetAlignment,\r\n        ));\r\n\r\n        this._deferredLitsBufView = device.createBuffer(new BufferViewInfo(this._lightVolumeBuffer, 0, totalSize));\r\n        this._lightBufferData = new Float32Array(totalSize / Float32Array.BYTES_PER_ELEMENT);\r\n    }\r\n\r\n    private _genQuadVertexData (surfaceTransform: SurfaceTransform, renderArea: Rect): Float32Array {\r\n        const minX = renderArea.x / this._context.width;\r\n        const maxX = (renderArea.x + renderArea.width) / this._context.width;\r\n        let minY = renderArea.y / this._context.height;\r\n        let maxY = (renderArea.y + renderArea.height) / this._context.height;\r\n\r\n        // Flip the minimum maximum Y value according to the sign of the Y-axis of the screen space\r\n        if (this._context.root.device.capabilities.screenSpaceSignY > 0) {\r\n            [minY, maxY] = [maxY, minY];\r\n        }\r\n        const vbData = new Float32Array(16);\r\n        const fillVertices = (x1, y1, u1, v1, x2, y2, u2, v2, x3, y3, u3, v3, x4, y4, u4, v4): void => {\r\n            vbData.set([x1, y1, u1, v1, x2, y2, u2, v2, x3, y3, u3, v3, x4, y4, u4, v4]);\r\n        };\r\n        switch (surfaceTransform) {\r\n        case SurfaceTransform.IDENTITY:\r\n            fillVertices(-1, -1, minX, maxY, 1, -1, maxX, maxY, -1, 1, minX, minY, 1, 1, maxX, minY);\r\n            break;\r\n        case SurfaceTransform.ROTATE_90:\r\n            fillVertices(-1, -1, maxX, maxY, 1, -1, maxX, minY, -1, 1, minX, maxY, 1, 1, minX, minY);\r\n            break;\r\n        case SurfaceTransform.ROTATE_180:\r\n            fillVertices(-1, -1, minX, minY, 1, -1, maxX, minY, -1, 1, minX, maxY, 1, 1, maxX, maxY);\r\n            break;\r\n        case SurfaceTransform.ROTATE_270:\r\n            fillVertices(-1, -1, minX, minY, 1, -1, minX, maxY, -1, 1, maxX, minY, 1, 1, maxX, maxY);\r\n            break;\r\n        default:\r\n        }\r\n        return vbData;\r\n    }\r\n\r\n    private _createQuadInputAssembler (): PipelineInputAssemblerData {\r\n        // create vertex buffer\r\n        const inputAssemblerData = new PipelineInputAssemblerData();\r\n\r\n        const vbStride = Float32Array.BYTES_PER_ELEMENT * 4;\r\n        const vbSize = vbStride * 4;\r\n        const device = cclegacy.director.root.device;\r\n        const quadVB: Buffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE | MemoryUsageBit.HOST,\r\n            vbSize,\r\n            vbStride,\r\n        ));\r\n\r\n        if (!quadVB) {\r\n            return inputAssemblerData;\r\n        }\r\n\r\n        // create index buffer\r\n        const ibStride = Uint16Array.BYTES_PER_ELEMENT;\r\n        const ibSize = ibStride * 6;\r\n\r\n        const quadIB: Buffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            ibSize,\r\n            ibStride,\r\n        ));\r\n\r\n        if (!quadIB) {\r\n            return inputAssemblerData;\r\n        }\r\n\r\n        const indices = new Uint16Array(6);\r\n        indices[0] = 0; indices[1] = 1; indices[2] = 2;\r\n        indices[3] = 1; indices[4] = 3; indices[5] = 2;\r\n\r\n        quadIB.update(indices.buffer);\r\n\r\n        // create input assembler\r\n\r\n        const attributes = new Array<Attribute>(2);\r\n        attributes[0] = new Attribute('a_position', Format.RG32F);\r\n        attributes[1] = new Attribute('a_texCoord', Format.RG32F);\r\n\r\n        const quadIA = device.createInputAssembler(new InputAssemblerInfo(\r\n            attributes,\r\n            [quadVB],\r\n            quadIB,\r\n        ));\r\n\r\n        inputAssemblerData.quadIB = quadIB;\r\n        inputAssemblerData.quadVB = quadVB;\r\n        inputAssemblerData.quadIA = quadIA;\r\n        return inputAssemblerData;\r\n    }\r\n}\r\n\r\nclass ExecutorContext {\r\n    constructor (\r\n        pipeline: BasicPipeline,\r\n        device: Device,\r\n        resourceGraph: ResourceGraph,\r\n        renderGraph: RenderGraph,\r\n        layoutGraph: LayoutGraphData,\r\n        width: number,\r\n        height: number,\r\n        descriptorSet = null,\r\n    ) {\r\n        this.pipeline = pipeline;\r\n        this.device = device;\r\n        this.commandBuffer = device.commandBuffer;\r\n        this.pipelineSceneData = pipeline.pipelineSceneData;\r\n        this.resourceGraph = resourceGraph;\r\n        this.renderGraph = renderGraph;\r\n        this.root = legacyCC.director.root;\r\n        this.layoutGraph = layoutGraph;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.pools = new ExecutorPools();\r\n        this.blit = new BlitInfo(this);\r\n        this.culling = new SceneCulling();\r\n        this.passDescriptorSet = descriptorSet;\r\n        this.profilerDescriptorSet = getDescriptorSetDataFromLayout('default')!.descriptorSet!;\r\n    }\r\n    reset (): void {\r\n        this.culling.clear();\r\n        this.pools.reset();\r\n        this.cullCamera = null;\r\n        this.lightResource.clear();\r\n        this.passShowStatistics = false;\r\n    }\r\n    resize (width: number, height: number): void {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.blit.resize(width, height);\r\n    }\r\n    readonly device: Device;\r\n    readonly pipeline: BasicPipeline;\r\n    readonly commandBuffer: CommandBuffer;\r\n    readonly pipelineSceneData: PipelineSceneData;\r\n    readonly resourceGraph: ResourceGraph;\r\n    readonly devicePasses: Map<number, DeviceRenderPass> = new Map<number, DeviceRenderPass>();\r\n    readonly deviceTextures: Map<string, DeviceTexture> = new Map<string, DeviceTexture>();\r\n    readonly deviceBuffers: Map<string, DeviceBuffer> = new Map<string, DeviceBuffer>();\r\n    readonly layoutGraph: LayoutGraphData;\r\n    readonly root: Root;\r\n    readonly pools: ExecutorPools;\r\n    readonly blit: BlitInfo;\r\n    readonly culling: SceneCulling;\r\n    lightResource: LightResource = new LightResource();\r\n    renderGraph: RenderGraph;\r\n    width: number;\r\n    height: number;\r\n    cullCamera;\r\n    passDescriptorSet: DescriptorSet | null;\r\n    profilerDescriptorSet: DescriptorSet;\r\n    passShowStatistics: boolean = false;\r\n}\r\n\r\nexport class Executor {\r\n    constructor (\r\n        pipeline: BasicPipeline,\r\n        device: Device,\r\n        resourceGraph: ResourceGraph,\r\n        layoutGraph: LayoutGraphData,\r\n        width: number,\r\n        height: number,\r\n    ) {\r\n        context = this._context = new ExecutorContext(\r\n            pipeline,\r\n            device,\r\n            resourceGraph,\r\n            new RenderGraph(),\r\n            layoutGraph,\r\n            width,\r\n            height,\r\n        );\r\n        const programLib: WebProgramLibrary = cclegacy.rendering.programLib;\r\n        context.lightResource.init(programLib, device, 16);\r\n    }\r\n\r\n    resize (width: number, height: number): void {\r\n        context.resize(width, height);\r\n    }\r\n\r\n    private _removeDeviceResource (): void {\r\n        const pipeline: any = context.pipeline;\r\n        const resourceUses = pipeline.resourceUses;\r\n        const deletes: string[] = [];\r\n        const deviceTexs = context.deviceTextures;\r\n        for (const [name, dTex] of deviceTexs) {\r\n            const resId = context.resourceGraph.vertex(name);\r\n            const trait = context.resourceGraph.getTraits(resId);\r\n            if (!resourceUses.includes(name)) {\r\n                switch (trait.residency) {\r\n                case ResourceResidency.MANAGED:\r\n                    deletes.push(name);\r\n                    break;\r\n                default:\r\n                }\r\n            }\r\n        }\r\n        for (const name of deletes) {\r\n            deviceTexs.get(name)!.release();\r\n            deviceTexs.delete(name);\r\n        }\r\n\r\n        const deletesBuff: string[] = [];\r\n        const deviceBuffs = context.deviceBuffers;\r\n        for (const [name, dBuff] of deviceBuffs) {\r\n            const resId = context.resourceGraph.vertex(name);\r\n            const trait = context.resourceGraph.getTraits(resId);\r\n            if (!resourceUses.includes(name)) {\r\n                switch (trait.residency) {\r\n                case ResourceResidency.MANAGED:\r\n                    deletesBuff.push(name);\r\n                    break;\r\n                default:\r\n                }\r\n            }\r\n        }\r\n        for (const name of deletesBuff) {\r\n            deviceBuffs.get(name)!.release();\r\n            deviceBuffs.delete(name);\r\n        }\r\n        resourceUses.length = 0;\r\n    }\r\n\r\n    execute (rg: RenderGraph): void {\r\n        context.renderGraph = rg;\r\n        context.reset();\r\n        const cmdBuff = context.commandBuffer;\r\n        const culling = context.culling;\r\n        culling.buildRenderQueues(rg, context.layoutGraph, context.pipelineSceneData);\r\n        context.lightResource.buildLights(culling, context.pipelineSceneData.isHDR, context.pipelineSceneData.shadows);\r\n        this._removeDeviceResource();\r\n        cmdBuff.begin();\r\n        culling.uploadInstancing(cmdBuff);\r\n        if (!this._visitor) this._visitor = new RenderVisitor();\r\n        depthFirstSearch(this._visitor.graphView, this._visitor, this._visitor.colorMap);\r\n        cmdBuff.end();\r\n        context.device.queue.submit([cmdBuff]);\r\n    }\r\n\r\n    release (): void {\r\n        context.devicePasses.clear();\r\n        for (const [k, v] of context.deviceTextures) {\r\n            v.release();\r\n        }\r\n        context.deviceTextures.clear();\r\n\r\n        for (const [k, v] of context.deviceBuffers) {\r\n            v.release();\r\n        }\r\n        context.deviceBuffers.clear();\r\n    }\r\n    readonly _context: ExecutorContext;\r\n    private _visitor: RenderVisitor | undefined;\r\n}\r\n\r\nclass BaseRenderVisitor {\r\n    public queueID = 0xFFFFFFFF;\r\n    public sceneID = 0xFFFFFFFF;\r\n    public passID = 0xFFFFFFFF;\r\n    public dispatchID = 0xFFFFFFFF;\r\n    public currPass: DeviceRenderPass | DeviceComputePass | undefined;\r\n    public currQueue: DeviceRenderQueue |DeviceComputeQueue | undefined;\r\n    public rg: RenderGraph;\r\n    constructor () {\r\n        this.rg = context.renderGraph;\r\n    }\r\n    protected _isRasterPass (u: number): boolean {\r\n        return context.renderGraph.h(RenderGraphValue.RasterPass, u);\r\n    }\r\n    protected isComputePass (u: number): boolean {\r\n        return context.renderGraph.h(RenderGraphValue.Compute, u);\r\n    }\r\n    protected isDispatch (u: number): boolean {\r\n        return context.renderGraph.h(RenderGraphValue.Dispatch, u);\r\n    }\r\n    protected _isQueue (u: number): boolean {\r\n        return context.renderGraph.h(RenderGraphValue.Queue, u);\r\n    }\r\n    protected _isScene (u: number): boolean {\r\n        return context.renderGraph.h(RenderGraphValue.Scene, u);\r\n    }\r\n    protected _isBlit (u: number): boolean {\r\n        return context.renderGraph.h(RenderGraphValue.Blit, u);\r\n    }\r\n    applyID (id: number): void {\r\n        if (this._isRasterPass(id)) {\r\n            this.passID = id;\r\n        } else if (this._isQueue(id)) {\r\n            this.queueID = id;\r\n        } else if (this._isScene(id) || this._isBlit(id)) {\r\n            this.sceneID = id;\r\n        } else if (this.isComputePass(id)) {\r\n            this.passID = id;\r\n        } else if (this.isDispatch(id)) {\r\n            this.dispatchID = id;\r\n        }\r\n    }\r\n}\r\n\r\nclass PreRenderVisitor extends BaseRenderVisitor implements RenderGraphVisitor {\r\n    constructor () {\r\n        super();\r\n    }\r\n    clear (value: ClearView[]): void {\r\n        // do nothing\r\n    }\r\n    viewport (value: Viewport): void {\r\n        // do nothing\r\n    }\r\n    rasterPass (pass: RasterPass): void {\r\n        if (!this.rg.getValid(this.passID)) return;\r\n        const devicePasses = context.devicePasses;\r\n        const passHash = pass.hashValue;\r\n        this.currPass = devicePasses.get(passHash);\r\n        if (!this.currPass) {\r\n            this.currPass = new DeviceRenderPass(this.passID, pass);\r\n            devicePasses.set(passHash, this.currPass);\r\n        } else {\r\n            this.currPass.resetResource(this.passID, pass);\r\n        }\r\n        this.currPass.preRecord();\r\n    }\r\n    rasterSubpass (value: RasterSubpass): void {\r\n        // do nothing\r\n    }\r\n    computeSubpass (value: ComputeSubpass): void {\r\n        // do nothing\r\n    }\r\n    resolve (value: ResolvePass): void {\r\n        // do nothing\r\n    }\r\n    move (value: MovePass): void {\r\n        // do nothing\r\n    }\r\n    raytrace (value: RaytracePass): void {\r\n        // do nothing\r\n    }\r\n    compute (pass: ComputePass): void {\r\n        if (!this.rg.getValid(this.passID)) return;\r\n        const devicePasses = context.devicePasses;\r\n        const computeInfo = new ComputePassInfo();\r\n        computeInfo.applyInfo(this.passID, pass);\r\n        this.currPass = new DeviceComputePass(computeInfo);\r\n        this.currPass.preRecord();\r\n        this.currPass.record();\r\n    }\r\n    copy (value: CopyPass): void {\r\n        if (value.uploadPairs.length) {\r\n            for (const upload of value.uploadPairs) {\r\n                const resBuffers = context.deviceBuffers;\r\n                const resourceGraph = context.resourceGraph;\r\n                const vertId = resourceGraph.vertex(upload.target);\r\n                resourceVisitor.resName = upload.target;\r\n                resourceGraph.visitVertex(resourceVisitor, vertId);\r\n\r\n                const gfxBuffer = resBuffers.get(upload.target);\r\n                context.device.commandBuffer.updateBuffer(gfxBuffer!.buffer!, upload.source, upload.source.byteLength);\r\n            }\r\n        }\r\n    }\r\n    queue (value: RenderQueue): void {\r\n        if (!this.rg.getValid(this.queueID)) return;\r\n        let deviceQueue: DeviceComputeQueue | DeviceRenderQueue;\r\n        if (this.currPass instanceof DeviceRenderPass) {\r\n            deviceQueue = context.pools.addDeviceQueue();\r\n            deviceQueue.init(this.currPass, value, this.queueID);\r\n            this.currQueue = deviceQueue;\r\n            this.currPass.addQueue(deviceQueue);\r\n        } else {\r\n            deviceQueue = context.pools.addComputeQueue();\r\n            deviceQueue.init(this.currPass!, value, this.queueID);\r\n            this.currQueue = deviceQueue;\r\n            this.currPass!.addQueue(deviceQueue);\r\n        }\r\n        const layoutName = this.rg.getLayout(this.queueID);\r\n        if (layoutName) {\r\n            const layoutGraph = context.layoutGraph;\r\n            if (this.currPass!.renderLayout) {\r\n                const layoutId = layoutGraph.locateChild(this.currPass!.renderLayout.layoutID, layoutName);\r\n                this.currQueue.layoutID = layoutId;\r\n            }\r\n        }\r\n        this.currQueue.preRecord();\r\n    }\r\n    scene (value: SceneData): void {\r\n        if (!this.rg.getValid(this.sceneID)) return;\r\n        const renderQueue = this.currQueue as DeviceRenderQueue;\r\n        const renderScene = renderQueue.setScene(this.sceneID, value);\r\n        renderScene.preRecord();\r\n    }\r\n    blit (value: Blit): void {\r\n        if (!this.rg.getValid(this.sceneID)) return;\r\n        const renderQueue = this.currQueue as DeviceRenderQueue;\r\n        const renderScene = renderQueue.setScene(this.sceneID, undefined, value);\r\n        renderScene.preRecord();\r\n    }\r\n    dispatch (value: Dispatch): void {\r\n        let pso: PipelineState | null = null;\r\n        const devicePass = this.currPass as DeviceComputePass;\r\n        const pass = value.material?.passes[value.passID];\r\n        pass?.update();\r\n        const shader = pass?.getShaderVariant();\r\n\r\n        if (pass !== null && shader !== null) {\r\n            const psoInfo = new PipelineStateInfo(\r\n                shader,\r\n                pass?.pipelineLayout,\r\n            );\r\n            psoInfo.bindPoint = PipelineBindPoint.COMPUTE;\r\n            pso = deviceManager.gfxDevice.createPipelineState(psoInfo);\r\n        }\r\n        const cmdBuff = context.commandBuffer;\r\n        if (pso) {\r\n            cmdBuff.bindPipelineState(pso);\r\n            const layoutStage = devicePass.renderLayout;\r\n            const layoutDesc = layoutStage!.descriptorSet!;\r\n            cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, layoutDesc);\r\n        }\r\n\r\n        const gx = value.threadGroupCountX;\r\n        const gy = value.threadGroupCountY;\r\n        const gz = value.threadGroupCountZ;\r\n        (cmdBuff as any).dispatch(new DispatchInfo(gx, gy, gz));\r\n    }\r\n}\r\n\r\nclass PostRenderVisitor extends BaseRenderVisitor implements RenderGraphVisitor {\r\n    constructor () {\r\n        super();\r\n    }\r\n    clear (value: ClearView[]): void {\r\n        // do nothing\r\n    }\r\n    viewport (value: Viewport): void {\r\n        // do nothing\r\n    }\r\n    rasterPass (pass: RasterPass): void {\r\n        const devicePasses = context.devicePasses;\r\n        const passHash = pass.hashValue;\r\n        const currPass = devicePasses.get(passHash);\r\n        if (!currPass) return;\r\n        this.currPass = currPass;\r\n        context.passShowStatistics = pass.showStatistics;\r\n        this.currPass.record();\r\n    }\r\n    rasterSubpass (value: RasterSubpass): void {\r\n        // do nothing\r\n    }\r\n    computeSubpass (value: ComputeSubpass): void {\r\n        // do nothing\r\n    }\r\n    resolve (value: ResolvePass): void {\r\n        // do nothing\r\n    }\r\n    compute (value: ComputePass): void {\r\n        // do nothing\r\n    }\r\n    copy (value: CopyPass): void {\r\n        // do nothing\r\n    }\r\n    move (value: MovePass): void {\r\n        // do nothing\r\n    }\r\n    raytrace (value: RaytracePass): void {\r\n        // do nothing\r\n    }\r\n    queue (value: RenderQueue): void {\r\n        // collect scene results\r\n    }\r\n    scene (value: SceneData): void {\r\n        // scene command list finished\r\n    }\r\n    blit (value: Blit): void {\r\n        // do nothing\r\n    }\r\n    dispatch (value: Dispatch): void {\r\n        // do nothing\r\n    }\r\n}\r\n\r\nexport class RenderVisitor extends DefaultVisitor {\r\n    private _preVisitor: PreRenderVisitor;\r\n    private _postVisitor: PostRenderVisitor;\r\n    private _graphView: ReferenceGraphView<RenderGraph>;\r\n    private _colorMap: VectorGraphColorMap;\r\n    constructor () {\r\n        super();\r\n        this._preVisitor = new PreRenderVisitor();\r\n        this._postVisitor = new PostRenderVisitor();\r\n        this._graphView = new ReferenceGraphView<RenderGraph>(context.renderGraph);\r\n        this._colorMap = new VectorGraphColorMap(context.renderGraph.nv());\r\n    }\r\n\r\n    get graphView (): ReferenceGraphView<RenderGraph> { return this._graphView; }\r\n    get colorMap (): VectorGraphColorMap { return this._colorMap; }\r\n    discoverVertex (u: number, gv: ReferenceGraphView<RenderGraph>): void {\r\n        const g = gv.g;\r\n        this._preVisitor.applyID(u);\r\n        g.visitVertex(this._preVisitor, u);\r\n    }\r\n    finishVertex (v: number, gv: ReferenceGraphView<RenderGraph>): void {\r\n        const g = gv.g;\r\n        g.visitVertex(this._postVisitor, v);\r\n    }\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n ****************************************************************************/\r\n\r\n/* eslint-disable max-len */\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { DEBUG, EDITOR } from 'internal:constants';\r\nimport { DescriptorSetLayout, Device, Feature, Format, FormatFeatureBit, Sampler, Swapchain, Texture, ClearFlagBit, DescriptorSet, deviceManager, Viewport, API, CommandBuffer, Type, SamplerInfo, Filter, Address, DescriptorSetInfo, LoadOp, StoreOp, ShaderStageFlagBit, BufferInfo, TextureInfo, TextureType, ResolveMode, SampleCount, Color, ComparisonFunc, Buffer } from '../../gfx';\r\nimport { Vec4, macro, cclegacy, RecyclePool, Mat4, Quat, Vec2 } from '../../core';\r\nimport { AccessType, AttachmentType, CopyPair, LightInfo, LightingMode, MovePair, QueueHint, RenderCommonObjectPool, ResolvePair, ResourceDimension, ResourceFlags, ResourceResidency, SceneFlags, UpdateFrequency, UploadPair } from './types';\r\nimport { ComputePass, CopyPass, MovePass, RasterPass, RasterSubpass, RenderData, RenderGraph, RenderGraphComponent, RenderGraphValue, RenderQueue, RenderSwapchain, ResourceDesc, ResourceGraph, ResourceGraphValue, ResourceStates, ResourceTraits, SceneData, Subpass, PersistentBuffer, RenderGraphObjectPool, CullingFlags, ManagedResource, ManagedBuffer, BlitType } from './render-graph';\r\nimport { ComputePassBuilder, ComputeQueueBuilder, BasicPipeline, RenderQueueBuilder, RenderSubpassBuilder, PipelineType, BasicRenderPassBuilder, PipelineCapabilities, BasicMultisampleRenderPassBuilder, Setter, SceneBuilder } from './pipeline';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { Model, Camera, PCFType, ProbeType, DirectionalLight, PointLight, RangedDirectionalLight, SphereLight, SpotLight } from '../../render-scene/scene';\r\nimport { Light, LightType } from '../../render-scene/scene/light';\r\nimport { DescriptorSetData, LayoutGraphData } from './layout-graph';\r\nimport { Executor } from './executor';\r\nimport { RenderWindow } from '../../render-scene/core/render-window';\r\nimport { MacroRecord, RenderScene } from '../../render-scene';\r\nimport { GlobalDSManager } from '../global-descriptor-set-manager';\r\nimport { getDefaultShadowTexture, supportsR32FloatTexture, supportsRGBA16HalfFloatTexture, UBOSkinning } from '../define';\r\nimport { OS } from '../../../pal/system-info/enum-type';\r\nimport { Compiler } from './compiler';\r\nimport { GeometryRenderer } from '../geometry-renderer';\r\nimport { Material } from '../../asset/assets';\r\nimport { decideProfilerCamera } from '../pipeline-funcs';\r\nimport { DebugViewCompositeType } from '../debug-view';\r\nimport { buildReflectionProbePass, genHashValue } from './define';\r\nimport { createGfxDescriptorSetsAndPipelines } from './layout-graph-utils';\r\nimport { Root } from '../../root';\r\nimport { Scene } from '../../scene-graph';\r\nimport { Director } from '../../game';\r\nimport { ReflectionProbeManager } from '../../3d';\r\nimport { legacyCC } from '../../core/global-exports';\r\nimport { WebSetter, setCameraUBOValues, setShadowUBOLightView, setShadowUBOView, setTextureUBOView } from './web-pipeline-types';\r\n\r\nconst _uboVec = new Vec4();\r\nconst _samplerPointInfo = new SamplerInfo(\r\n    Filter.POINT,\r\n    Filter.POINT,\r\n    Filter.NONE,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n\r\nclass PipelinePool {\r\n    renderData = new RenderData();\r\n    layoutGraph = new LayoutGraphData();\r\n    rg = new RenderGraph();\r\n    vertId = -1;\r\n    sceneData = new SceneData();\r\n    resourceGraph = new ResourceGraph();\r\n    computePass = new ComputePass();\r\n    rasterPass = new RasterPass();\r\n    rasterSubpass = new RasterSubpass();\r\n    renderQueue = new RenderQueue();\r\n    sceneBuilder = new RecyclePool<WebSceneBuilder>(() => new WebSceneBuilder(this.renderData, this.layoutGraph, this.rg, this.vertId, this.sceneData), 16);\r\n    renderPassBuilder = new RecyclePool<WebRenderPassBuilder>(() => new WebRenderPassBuilder(this.renderData, this.rg, this.layoutGraph, this.resourceGraph, this.vertId, this.rasterPass, this.getPipelineSceneData()), 16);\r\n    computeQueueBuilder = new RecyclePool<WebComputeQueueBuilder>(() => new WebComputeQueueBuilder(this.renderData, this.rg, this.layoutGraph, this.vertId, this.renderQueue, this.getPipelineSceneData()), 16);\r\n    renderQueueBuilder = new RecyclePool<WebRenderQueueBuilder>(() => new WebRenderQueueBuilder(this.renderData, this.rg, this.layoutGraph, this.vertId, this.renderQueue, this.getPipelineSceneData()), 16);\r\n    renderSubpassBuilder = new RecyclePool<WebRenderSubpassBuilder>(() => new WebRenderSubpassBuilder(this.renderData, this.rg, this.layoutGraph, this.vertId, this.rasterSubpass, this.getPipelineSceneData()), 16);\r\n    computePassBuilder = new RecyclePool<WebComputePassBuilder>(() => new WebComputePassBuilder(this.renderData, this.rg, this.layoutGraph, this.resourceGraph, this.vertId, this.computePass, this.getPipelineSceneData()), 16);\r\n    samplerInfo = new RecyclePool<SamplerInfo>(() => new SamplerInfo(), 16);\r\n    color = new RecyclePool<Color>(() => new Color(), 16);\r\n    renderCommonObjectPool = new RenderCommonObjectPool();\r\n    renderGraphPool = new RenderGraphObjectPool(this.renderCommonObjectPool);\r\n    viewport = new RecyclePool(() => new Viewport(), 16);\r\n\r\n    getPipelineSceneData (): PipelineSceneData {\r\n        return (legacyCC.director.root as Root).pipeline.pipelineSceneData;\r\n    }\r\n\r\n    createColor (\r\n        x: number = 0,\r\n        y: number = 0,\r\n        z: number = 0,\r\n        w: number = 0,\r\n    ): Color {\r\n        const color = this.color.add();\r\n        color.set(x, y, z, w);\r\n        return color;\r\n    }\r\n    createSamplerInfo (\r\n        minFilter: Filter = Filter.LINEAR,\r\n        magFilter: Filter = Filter.LINEAR,\r\n        mipFilter: Filter = Filter.NONE,\r\n        addressU: Address = Address.WRAP,\r\n        addressV: Address = Address.WRAP,\r\n        addressW: Address = Address.WRAP,\r\n        maxAnisotropy: number = 0,\r\n        cmpFunc: ComparisonFunc = ComparisonFunc.ALWAYS,\r\n    ): SamplerInfo {\r\n        const samplerInfo = this.samplerInfo.add();\r\n        samplerInfo.minFilter = minFilter;\r\n        samplerInfo.magFilter = magFilter;\r\n        samplerInfo.mipFilter = mipFilter;\r\n        samplerInfo.addressU = addressU;\r\n        samplerInfo.addressV = addressV;\r\n        samplerInfo.addressW = addressW;\r\n        samplerInfo.maxAnisotropy = maxAnisotropy;\r\n        samplerInfo.cmpFunc = cmpFunc;\r\n        return samplerInfo;\r\n    }\r\n    reset (): void {\r\n        this.sceneBuilder.reset();\r\n        this.renderPassBuilder.reset();\r\n        this.computePassBuilder.reset();\r\n        this.computeQueueBuilder.reset();\r\n        this.renderCommonObjectPool.reset();\r\n        this.renderGraphPool.reset();\r\n        this.viewport.reset();\r\n        this.samplerInfo.reset();\r\n        this.color.reset();\r\n        this.renderQueueBuilder.reset();\r\n        this.renderSubpassBuilder.reset();\r\n    }\r\n}\r\nlet pipelinePool: PipelinePool;\r\nlet renderGraphPool: RenderGraphObjectPool;\r\n\r\nfunction setComputeConstants (setter: WebSetter, layoutName: string): void {\r\n    const director = cclegacy.director;\r\n    const root = director.root;\r\n    const pipeline = root.pipeline as WebPipeline;\r\n    // setter.addConstant('CCConst', layoutName);\r\n}\r\n\r\nfunction getTextureType (dimension: ResourceDimension, arraySize: number): TextureType {\r\n    switch (dimension) {\r\n    case ResourceDimension.TEXTURE1D:\r\n        return arraySize > 1 ? TextureType.TEX1D_ARRAY : TextureType.TEX1D;\r\n    case ResourceDimension.TEXTURE2D:\r\n        return arraySize > 1 ? TextureType.TEX2D_ARRAY : TextureType.TEX2D;\r\n    case ResourceDimension.TEXTURE3D:\r\n        return TextureType.TEX3D;\r\n    case ResourceDimension.BUFFER:\r\n        return TextureType.TEX2D;\r\n    default:\r\n        break;\r\n    }\r\n    return TextureType.TEX2D;\r\n}\r\n\r\nfunction getResourceDimension (type: TextureType): ResourceDimension {\r\n    switch (type) {\r\n    case TextureType.TEX1D:\r\n    case TextureType.TEX1D_ARRAY:\r\n        return ResourceDimension.TEXTURE1D;\r\n    case TextureType.TEX2D:\r\n    case TextureType.TEX2D_ARRAY:\r\n    case TextureType.CUBE:\r\n        return ResourceDimension.TEXTURE2D;\r\n    case TextureType.TEX3D:\r\n        return ResourceDimension.TEXTURE3D;\r\n    default:\r\n        break;\r\n    }\r\n    return ResourceDimension.TEXTURE2D;\r\n}\r\n\r\nconst emptyMaterial = new Material();\r\nconst emptyRenderData = new RenderData();\r\nexport class WebSceneBuilder extends WebSetter implements SceneBuilder {\r\n    constructor (\r\n        data: RenderData,\r\n        layoutGraph: LayoutGraphData,\r\n        rg: RenderGraph,\r\n        sceneId: number,\r\n        scene: SceneData,\r\n    ) {\r\n        super(data, layoutGraph);\r\n        this._renderGraph = rg;\r\n        this._scene = scene;\r\n        this._vertID = sceneId;\r\n    }\r\n    update (\r\n        data: RenderData,\r\n        layoutGraph: LayoutGraphData,\r\n        rg: RenderGraph,\r\n        sceneId: number,\r\n        scene: SceneData,\r\n    ): void {\r\n        this._data = data;\r\n        this._lg = layoutGraph;\r\n        this._renderGraph = rg;\r\n        this._scene = scene;\r\n        this._vertID = sceneId;\r\n    }\r\n\r\n    useLightFrustum (light: Light, csmLevel = 0, optCamera: Camera | undefined = undefined): void {\r\n        this._scene.light.light = light;\r\n        this._scene.light.level = csmLevel;\r\n        this._scene.light.culledByLight = true;\r\n        if (optCamera) {\r\n            this._scene.camera = optCamera;\r\n        }\r\n        if (this._scene.flags & SceneFlags.NON_BUILTIN) {\r\n            return;\r\n        }\r\n        const queueId = this._renderGraph.getParent(this._vertID);\r\n        const passId = this._renderGraph.getParent(queueId);\r\n        const layoutName = this._renderGraph.getLayout(passId);\r\n        setShadowUBOLightView(this, this._scene.camera, light, csmLevel, layoutName);\r\n    }\r\n    private _renderGraph: RenderGraph;\r\n    private _scene: SceneData;\r\n}\r\n\r\nexport class WebRenderQueueBuilder extends WebSetter implements RenderQueueBuilder {\r\n    constructor (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, vertID: number, queue: RenderQueue, pipeline: PipelineSceneData) {\r\n        super(data, layoutGraph);\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._queue = queue;\r\n        this._pipeline = pipeline;\r\n    }\r\n    update (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, vertID: number, queue: RenderQueue, pipeline: PipelineSceneData): void {\r\n        this._data = data;\r\n        this._lg = layoutGraph;\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._queue = queue;\r\n        this._pipeline = pipeline;\r\n    }\r\n\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n\r\n    addSceneOfCamera (camera: Camera, light: LightInfo, sceneFlags = SceneFlags.NONE, name = 'Camera'): void {\r\n        const lightTarget = light.light;\r\n        this.addScene(camera, sceneFlags, lightTarget);\r\n    }\r\n    addScene (camera: Camera, sceneFlags = SceneFlags.NONE, light: Light | undefined | null = null, scene: RenderScene | undefined = undefined): SceneBuilder {\r\n        const sceneData = renderGraphPool.createSceneData(\r\n            scene || camera.scene,\r\n            camera,\r\n            sceneFlags,\r\n            light && !(sceneFlags & SceneFlags.SHADOW_CASTER) ? CullingFlags.CAMERA_FRUSTUM | CullingFlags.LIGHT_BOUNDS : CullingFlags.CAMERA_FRUSTUM,\r\n            light,\r\n        );\r\n        const renderData = renderGraphPool.createRenderData();\r\n        const sceneId = this._renderGraph.addVertex<RenderGraphValue.Scene>(RenderGraphValue.Scene, sceneData, 'Scene', '', renderData, !DEBUG, this._vertID);\r\n        if (!(sceneFlags & SceneFlags.NON_BUILTIN)) {\r\n            const layoutName = this.getParentLayout();\r\n            setCameraUBOValues(\r\n                this,\r\n                camera,\r\n                this._pipeline,\r\n                scene || camera.scene,\r\n                layoutName,\r\n            );\r\n            if (light && light.type !== LightType.DIRECTIONAL) setShadowUBOLightView(this, camera, light, 0, layoutName);\r\n            else if (!(sceneFlags & SceneFlags.SHADOW_CASTER)) setShadowUBOView(this, camera, layoutName);\r\n        }\r\n        const passOrSubpassId = this._renderGraph.getParent(this._vertID);\r\n        if (sceneFlags & SceneFlags.UI) {\r\n            const queueId = this._renderGraph.addVertex<RenderGraphValue.Queue>(\r\n                RenderGraphValue.Queue,\r\n                this._queue,\r\n                'UI Queue',\r\n                'default',\r\n                this._data,\r\n                !DEBUG,\r\n                passOrSubpassId,\r\n            );\r\n\r\n            this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n                RenderGraphValue.Blit,\r\n                renderGraphPool.createBlit(emptyMaterial, this._renderGraph.N, SceneFlags.NONE, camera, BlitType.DRAW_2D),\r\n                'UI',\r\n                '',\r\n                emptyRenderData,\r\n                !DEBUG,\r\n                queueId,\r\n            );\r\n        }\r\n        if (sceneFlags & SceneFlags.PROFILER) {\r\n            this.addProfiler(camera);\r\n        }\r\n        const sceneBuilder = pipelinePool.sceneBuilder.add();\r\n        sceneBuilder.update(renderData, this._lg, this._renderGraph, sceneId, sceneData);\r\n        return sceneBuilder;\r\n    }\r\n    addFullscreenQuad (material: Material, passID: number, sceneFlags = SceneFlags.NONE, name = 'Quad'): void {\r\n        this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            renderGraphPool.createBlit(material, passID, sceneFlags, null),\r\n            name,\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n        const layoutName = this.getParentLayout();\r\n        const scene: Scene | null = cclegacy.director.getScene();\r\n        setCameraUBOValues(\r\n            this,\r\n            null,\r\n            this._pipeline,\r\n            scene ? scene.renderScene : null,\r\n            layoutName,\r\n        );\r\n        if (sceneFlags & SceneFlags.SHADOW_CASTER) {\r\n            // setShadowUBOLightView(this, light.light!, light.level);\r\n        } else {\r\n            setShadowUBOView(this, null, layoutName);\r\n        }\r\n    }\r\n    addCameraQuad (camera: Camera, material: Material, passID: number, sceneFlags = SceneFlags.NONE): void {\r\n        this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            renderGraphPool.createBlit(material, passID, sceneFlags, camera),\r\n            'CameraQuad',\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n        const layoutName = this.getParentLayout();\r\n        const scene: Scene = cclegacy.director.getScene();\r\n        setCameraUBOValues(\r\n            this,\r\n            camera,\r\n            this._pipeline,\r\n            camera.scene || (scene ? scene.renderScene : null),\r\n            layoutName,\r\n        );\r\n        if (sceneFlags & SceneFlags.SHADOW_CASTER) {\r\n            // setShadowUBOLightView(this, light.light!, light.level);\r\n        } else {\r\n            setShadowUBOView(this, camera, layoutName);\r\n        }\r\n    }\r\n    addDraw3D (camera: Camera, models: Model[], sceneFlags = SceneFlags.NON_BUILTIN): void {\r\n        const blit = renderGraphPool.createBlit(emptyMaterial, this._renderGraph.N, SceneFlags.NONE, camera, BlitType.DRAW_3D);\r\n        for (const model of models) {\r\n            blit.models.push(model);\r\n        }\r\n        this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            blit,\r\n            'Draw3D',\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n        if (!(sceneFlags & SceneFlags.NON_BUILTIN)) {\r\n            const layoutName = this.getParentLayout();\r\n            setCameraUBOValues(\r\n                this,\r\n                camera,\r\n                this._pipeline,\r\n                camera.scene,\r\n                layoutName,\r\n            );\r\n            if (!(sceneFlags & SceneFlags.SHADOW_CASTER)) setShadowUBOView(this, camera, layoutName);\r\n        }\r\n    }\r\n    addDraw2D (camera: Camera): void {\r\n        const layoutName = this.getParentLayout();\r\n        setCameraUBOValues(\r\n            this,\r\n            camera,\r\n            this._pipeline,\r\n            camera.scene,\r\n            layoutName,\r\n        );\r\n        this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            renderGraphPool.createBlit(emptyMaterial, this._renderGraph.N, SceneFlags.NONE, camera, BlitType.DRAW_2D),\r\n            'Draw2D',\r\n            '',\r\n            emptyRenderData,\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n    }\r\n    addProfiler (camera: Camera): void {\r\n        const passOrSubpassId = this._renderGraph.getParent(this._vertID);\r\n        const queueId = this._renderGraph.addVertex<RenderGraphValue.Queue>(\r\n            RenderGraphValue.Queue,\r\n            this._queue,\r\n            'UI Queue',\r\n            'default',\r\n            this._data,\r\n            !DEBUG,\r\n            passOrSubpassId,\r\n        );\r\n        const blitID = this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            renderGraphPool.createBlit(emptyMaterial, this._renderGraph.N, SceneFlags.NONE, camera, BlitType.DRAW_PROFILE),\r\n            'Profiler',\r\n            '',\r\n            emptyRenderData,\r\n            !DEBUG,\r\n            queueId,\r\n        );\r\n\r\n        const data = this._renderGraph.getData(blitID);\r\n        WebSetter.setMat4(this._lg, data, 'cc_matProj', camera.matProj);\r\n    }\r\n    clearRenderTarget (name: string, color: Color = new Color()): void {\r\n        const clearView = renderGraphPool.createClearView(name, ClearFlagBit.COLOR);\r\n        clearView.clearColor.copy(color);\r\n        this._renderGraph.addVertex<RenderGraphValue.Clear>(\r\n            RenderGraphValue.Clear,\r\n            [clearView],\r\n            'ClearRenderTarget',\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n    }\r\n    setViewport (viewport: Viewport): void {\r\n        const currViewport = pipelinePool.viewport.add();\r\n        this._queue.viewport = currViewport.copy(viewport);\r\n    }\r\n    addCustomCommand (customBehavior: string): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    private _renderGraph: RenderGraph;\r\n    private _queue: RenderQueue;\r\n    private _pipeline: PipelineSceneData;\r\n}\r\n\r\nexport class WebRenderSubpassBuilder extends WebSetter implements RenderSubpassBuilder {\r\n    constructor (\r\n        data: RenderData,\r\n        renderGraph: RenderGraph,\r\n        layoutGraph: LayoutGraphData,\r\n        vertID: number,\r\n        subpass: RasterSubpass,\r\n        pipeline: PipelineSceneData,\r\n    ) {\r\n        super(data, layoutGraph);\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._subpass = subpass;\r\n        this._pipeline = pipeline;\r\n\r\n        const layoutName = this._renderGraph.getLayout(this._vertID);\r\n        this._layoutID = layoutGraph.locateChild(layoutGraph.N, layoutName);\r\n    }\r\n    update (\r\n        data: RenderData,\r\n        renderGraph: RenderGraph,\r\n        layoutGraph: LayoutGraphData,\r\n        vertID: number,\r\n        subpass: RasterSubpass,\r\n        pipeline: PipelineSceneData,\r\n    ): void {\r\n        this._data = data;\r\n        this._lg = layoutGraph;\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._subpass = subpass;\r\n        this._pipeline = pipeline;\r\n\r\n        const layoutName = this._renderGraph.getLayout(this._vertID);\r\n        this._layoutID = layoutGraph.locateChild(layoutGraph.N, layoutName);\r\n    }\r\n    addRenderTarget (name: string, accessType: AccessType, slotName?: string | undefined, loadOp?: LoadOp | undefined, storeOp?: StoreOp | undefined, color?: Color | undefined): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n\r\n    addDepthStencil (name: string, accessType: AccessType, depthSlotName = '', stencilSlotName = '', loadOp = LoadOp.CLEAR, storeOp = StoreOp.STORE, depth = 1, stencil = 0, clearFlag = ClearFlagBit.DEPTH_STENCIL): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addTexture (name: string, slotName: string, sampler: Sampler | null = null): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addStorageBuffer (name: string, accessType: AccessType, slotName: string): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addStorageImage (name: string, accessType: AccessType, slotName: string): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setViewport (viewport: Viewport): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addQueue (hint: QueueHint = QueueHint.RENDER_OPAQUE, layoutName = 'default', passName = ''): RenderQueueBuilder {\r\n        const layoutId = this._lg.locateChild(this._layoutID, layoutName);\r\n        const queue = renderGraphPool.createRenderQueue(hint, layoutId);\r\n        const data = renderGraphPool.createRenderData();\r\n        const queueID = this._renderGraph.addVertex<RenderGraphValue.Queue>(RenderGraphValue.Queue, queue, '', layoutName, data, !DEBUG, this._vertID);\r\n        const queueBuilder = pipelinePool.renderQueueBuilder.add();\r\n        queueBuilder.update(data, this._renderGraph, this._lg, queueID, queue, this._pipeline);\r\n        return queueBuilder;\r\n    }\r\n    get showStatistics (): boolean {\r\n        return this._subpass.showStatistics;\r\n    }\r\n    set showStatistics (enable: boolean) {\r\n        this._subpass.showStatistics = enable;\r\n    }\r\n    private _renderGraph: RenderGraph;\r\n    private _layoutID: number;\r\n    private _subpass: RasterSubpass;\r\n    private _pipeline: PipelineSceneData;\r\n}\r\n\r\nexport class WebRenderPassBuilder extends WebSetter implements BasicMultisampleRenderPassBuilder {\r\n    constructor (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, resourceGraph: ResourceGraph, vertID: number, pass: RasterPass, pipeline: PipelineSceneData) {\r\n        super(data, layoutGraph);\r\n        this._renderGraph = renderGraph;\r\n        this._resourceGraph = resourceGraph;\r\n        this._vertID = vertID;\r\n        this._pass = pass;\r\n        this._pipeline = pipeline;\r\n        const layoutName = this._renderGraph.getLayout(this._vertID);\r\n        this._layoutID = layoutGraph.locateChild(layoutGraph.N, layoutName);\r\n    }\r\n    update (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, resourceGraph: ResourceGraph, vertID: number, pass: RasterPass, pipeline: PipelineSceneData): void {\r\n        this._renderGraph = renderGraph;\r\n        this._lg = layoutGraph;\r\n        this._resourceGraph = resourceGraph;\r\n        this._vertID = vertID;\r\n        this._pass = pass;\r\n        this._pipeline = pipeline;\r\n        this._data = data;\r\n        const layoutName = this._renderGraph.getLayout(this._vertID);\r\n        this._layoutID = layoutGraph.locateChild(layoutGraph.N, layoutName);\r\n    }\r\n\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setVersion (name: string, version: number): void {\r\n        this._pass.versionName = name;\r\n        this._pass.version = version;\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n    addRenderTarget (name: string, loadOp = LoadOp.CLEAR, storeOp = StoreOp.STORE, clearColor = new Color()): void {\r\n        let clearFlag = ClearFlagBit.COLOR;\r\n        if (loadOp === LoadOp.LOAD) {\r\n            clearFlag = ClearFlagBit.NONE;\r\n        }\r\n        const view = renderGraphPool.createRasterView(\r\n            '',\r\n            AccessType.WRITE,\r\n\r\n            AttachmentType.RENDER_TARGET,\r\n            loadOp,\r\n            storeOp,\r\n            clearFlag,\r\n        );\r\n        view.clearColor.copy(clearColor);\r\n        this._pass.rasterViews.set(name, view);\r\n    }\r\n    addDepthStencil (name: string, loadOp = LoadOp.CLEAR, storeOp = StoreOp.STORE, depth = 1, stencil = 0, clearFlag = ClearFlagBit.DEPTH_STENCIL): void {\r\n        const view = renderGraphPool.createRasterView(\r\n            '',\r\n            AccessType.WRITE,\r\n\r\n            AttachmentType.DEPTH_STENCIL,\r\n            loadOp,\r\n            storeOp,\r\n            clearFlag,\r\n        );\r\n        view.clearColor.set(depth, stencil, 0, 0);\r\n        this._pass.rasterViews.set(name, view);\r\n    }\r\n    resolveRenderTarget (source: string, target: string): void {\r\n        // TODO\r\n    }\r\n    resolveDepthStencil (\r\n        source: string,\r\n        target: string,\r\n        depthMode?: ResolveMode,\r\n        stencilMode?: ResolveMode,\r\n    ): void {\r\n        // TODO\r\n    }\r\n    private _addComputeResource (name: string, accessType: AccessType, slotName: string): void {\r\n        const view = renderGraphPool.createComputeView(slotName);\r\n        view.accessType = accessType;\r\n        if (this._pass.computeViews.has(name)) {\r\n            this._pass.computeViews.get(name)?.push(view);\r\n        } else {\r\n            this._pass.computeViews.set(name, [view]);\r\n        }\r\n    }\r\n    addTexture (name: string, slotName: string, sampler: Sampler | null = null): void {\r\n        this._addComputeResource(name, AccessType.READ, slotName);\r\n        if (sampler) {\r\n            const descriptorID = this._lg.attributeIndex.get(slotName)!;\r\n            this._data.samplers.set(descriptorID, sampler);\r\n        }\r\n    }\r\n    addStorageBuffer (name: string, accessType: AccessType, slotName: string): void {\r\n        this._addComputeResource(name, accessType, slotName);\r\n    }\r\n    addStorageImage (name: string, accessType: AccessType, slotName: string): void {\r\n        this._addComputeResource(name, accessType, slotName);\r\n    }\r\n    addRenderSubpass (layoutName = ''): RenderSubpassBuilder {\r\n        const name = 'Raster';\r\n        const subpassID = this._pass.subpassGraph.nv();\r\n        this._pass.subpassGraph.addVertex(name, renderGraphPool.createSubpass());\r\n        const subpass = renderGraphPool.createRasterSubpass(subpassID, 1, 0);\r\n        const data = renderGraphPool.createRenderData();\r\n        const vertID = this._renderGraph.addVertex<RenderGraphValue.RasterSubpass>(RenderGraphValue.RasterSubpass, subpass, name, layoutName, data, !DEBUG);\r\n        const result = pipelinePool.renderSubpassBuilder.add();\r\n        result.update(data, this._renderGraph, this._lg, vertID, subpass, this._pipeline);\r\n        return result;\r\n    }\r\n    addQueue (hint: QueueHint = QueueHint.RENDER_OPAQUE, layoutName = 'default', passName = ''): WebRenderQueueBuilder {\r\n        const layoutId = this._lg.locateChild(this._layoutID, layoutName);\r\n        const queue = renderGraphPool.createRenderQueue(hint, layoutId);\r\n        const data = renderGraphPool.createRenderData();\r\n        const queueID = this._renderGraph.addVertex<RenderGraphValue.Queue>(RenderGraphValue.Queue, queue, '', layoutName, data, !DEBUG, this._vertID);\r\n        const result = pipelinePool.renderQueueBuilder.add();\r\n        result.update(data, this._renderGraph, this._lg, queueID, queue, this._pipeline);\r\n        return result;\r\n    }\r\n\r\n    addFullscreenQuad (material: Material, passID: number, sceneFlags = SceneFlags.NONE, name = 'FullscreenQuad'): void {\r\n        const queue = renderGraphPool.createRenderQueue(QueueHint.RENDER_TRANSPARENT);\r\n        const queueId = this._renderGraph.addVertex<RenderGraphValue.Queue>(\r\n            RenderGraphValue.Queue,\r\n            queue,\r\n            'Queue',\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n        this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            renderGraphPool.createBlit(material, passID, sceneFlags, null),\r\n            name,\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            queueId,\r\n        );\r\n    }\r\n\r\n    addCameraQuad (camera: Camera, material: Material, passID: number, sceneFlags: SceneFlags, name = 'CameraQuad'): void {\r\n        const queue = renderGraphPool.createRenderQueue(QueueHint.RENDER_TRANSPARENT);\r\n        const queueId = this._renderGraph.addVertex<RenderGraphValue.Queue>(\r\n            RenderGraphValue.Queue,\r\n            queue,\r\n            'Queue',\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            this._vertID,\r\n        );\r\n        this._renderGraph.addVertex<RenderGraphValue.Blit>(\r\n            RenderGraphValue.Blit,\r\n            renderGraphPool.createBlit(material, passID, sceneFlags, camera),\r\n            name,\r\n            '',\r\n            renderGraphPool.createRenderData(),\r\n            !DEBUG,\r\n            queueId,\r\n        );\r\n    }\r\n    setViewport (viewport: Viewport): void {\r\n        this._pass.viewport.copy(viewport);\r\n    }\r\n    get showStatistics (): boolean {\r\n        return this._pass.showStatistics;\r\n    }\r\n    set showStatistics (enable: boolean) {\r\n        this._pass.showStatistics = enable;\r\n    }\r\n    private _renderGraph: RenderGraph;\r\n    private _layoutID: number;\r\n    private _pass: RasterPass;\r\n    private _pipeline: PipelineSceneData;\r\n    private _resourceGraph: ResourceGraph;\r\n}\r\n\r\nexport class WebComputeQueueBuilder extends WebSetter implements ComputeQueueBuilder {\r\n    constructor (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, vertID: number, queue: RenderQueue, pipeline: PipelineSceneData) {\r\n        super(data, layoutGraph);\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._queue = queue;\r\n        this._pipeline = pipeline;\r\n    }\r\n    update (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, vertID: number, queue: RenderQueue, pipeline: PipelineSceneData): void {\r\n        this._data = data;\r\n        this._lg = layoutGraph;\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._queue = queue;\r\n        this._pipeline = pipeline;\r\n    }\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n    addDispatch (\r\n        threadGroupCountX: number,\r\n        threadGroupCountY: number,\r\n        threadGroupCountZ: number,\r\n        material: Material | null = null,\r\n        passID = 0,\r\n        name = 'Dispatch',\r\n    ): void {\r\n        this._renderGraph.addVertex<RenderGraphValue.Dispatch>(\r\n            RenderGraphValue.Dispatch,\r\n            renderGraphPool.createDispatch(material, passID, threadGroupCountX, threadGroupCountY, threadGroupCountZ),\r\n            name,\r\n\r\n            '',\r\n\r\n            renderGraphPool.createRenderData(),\r\n\r\n            !DEBUG,\r\n\r\n            this._vertID,\r\n        );\r\n    }\r\n    private _renderGraph: RenderGraph;\r\n    private _queue: RenderQueue;\r\n    private _pipeline: PipelineSceneData;\r\n}\r\n\r\nexport class WebComputePassBuilder extends WebSetter implements ComputePassBuilder {\r\n    constructor (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, resourceGraph: ResourceGraph, vertID: number, pass: ComputePass, pipeline: PipelineSceneData) {\r\n        super(data, layoutGraph);\r\n        this._renderGraph = renderGraph;\r\n        this._resourceGraph = resourceGraph;\r\n        this._vertID = vertID;\r\n        this._pass = pass;\r\n        this._pipeline = pipeline;\r\n\r\n        const layoutName = this._renderGraph.getLayout(this._vertID);\r\n        this._layoutID = layoutGraph.locateChild(layoutGraph.N, layoutName);\r\n    }\r\n    update (data: RenderData, renderGraph: RenderGraph, layoutGraph: LayoutGraphData, resourceGraph: ResourceGraph, vertID: number, pass: ComputePass, pipeline: PipelineSceneData): void {\r\n        this._data = data;\r\n        this._renderGraph = renderGraph;\r\n        this._lg = layoutGraph;\r\n        this._resourceGraph = resourceGraph;\r\n        this._vertID = vertID;\r\n        this._pass = pass;\r\n        this._pipeline = pipeline;\r\n\r\n        const layoutName = this._renderGraph.getLayout(this._vertID);\r\n        this._layoutID = layoutGraph.locateChild(layoutGraph.N, layoutName);\r\n    }\r\n    setCustomShaderStages (name: string, stageFlags: ShaderStageFlagBit): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setArrayBuffer (name: string, arrayBuffer: ArrayBuffer): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n    addTexture (name: string, slotName: string, sampler: Sampler | null = null): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addStorageBuffer (name: string, accessType: AccessType, slotName: string): void {\r\n        this._addComputeResource(name, accessType, slotName);\r\n    }\r\n    addStorageImage (name: string, accessType: AccessType, slotName: string): void {\r\n        this._addComputeResource(name, accessType, slotName);\r\n    }\r\n    addMaterialTexture (resourceName: string, flags?: ShaderStageFlagBit | undefined): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addQueue (layoutName = 'default', passName = ''): WebComputeQueueBuilder {\r\n        const layoutId = this._lg.locateChild(this._layoutID, layoutName);\r\n        const queue = renderGraphPool.createRenderQueue(QueueHint.RENDER_OPAQUE, layoutId);\r\n        const data = renderGraphPool.createRenderData();\r\n        const queueID = this._renderGraph.addVertex<RenderGraphValue.Queue>(RenderGraphValue.Queue, queue, '', layoutName, data, !DEBUG, this._vertID);\r\n        const computeQueueBuilder = pipelinePool.computeQueueBuilder.add();\r\n        computeQueueBuilder.update(data, this._renderGraph, this._lg, queueID, queue, this._pipeline);\r\n        return computeQueueBuilder;\r\n    }\r\n\r\n    private _addComputeResource (name: string, accessType: AccessType, slotName: string): void {\r\n        const view = renderGraphPool.createComputeView(slotName);\r\n        view.accessType = accessType;\r\n        if (this._pass.computeViews.has(name)) {\r\n            this._pass.computeViews.get(name)?.push(view);\r\n        } else {\r\n            this._pass.computeViews.set(name, [view]);\r\n        }\r\n    }\r\n\r\n    private _renderGraph: RenderGraph;\r\n    private _resourceGraph: ResourceGraph;\r\n    private _layoutID: number;\r\n    private _pass: ComputePass;\r\n    private _pipeline: PipelineSceneData;\r\n}\r\n\r\nexport class WebMovePassBuilder {\r\n    constructor (renderGraph: RenderGraph, vertID: number, pass: MovePass) {\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._pass = pass;\r\n    }\r\n    setCustomBehavior (name: string): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n    addPair (pair: MovePair): void {\r\n        this._pass.movePairs.push(pair);\r\n    }\r\n    private readonly _renderGraph: RenderGraph;\r\n    private readonly _vertID: number;\r\n    private readonly _pass: MovePass;\r\n}\r\n\r\nexport class WebCopyPassBuilder {\r\n    constructor (renderGraph: RenderGraph, vertID: number, pass: CopyPass) {\r\n        this._renderGraph = renderGraph;\r\n        this._vertID = vertID;\r\n        this._pass = pass;\r\n    }\r\n    addPair (pair: CopyPair): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    setCustomBehavior (name: string): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    get name (): string {\r\n        return this._renderGraph.getName(this._vertID);\r\n    }\r\n    set name (name: string) {\r\n        this._renderGraph.setName(this._vertID, name);\r\n    }\r\n    private readonly _renderGraph: RenderGraph;\r\n    private readonly _vertID: number;\r\n    private readonly _pass: CopyPass;\r\n}\r\n\r\nfunction isManaged (residency: ResourceResidency): boolean {\r\n    return residency === ResourceResidency.MANAGED\r\n        || residency === ResourceResidency.MEMORYLESS;\r\n}\r\n\r\nexport class WebPipeline extends WebSetter implements BasicPipeline {\r\n    constructor (layoutGraph: LayoutGraphData) {\r\n        super(new RenderData(), layoutGraph);\r\n        this._renderGraph = new RenderGraph();\r\n        this._data = this._renderGraph.globalRenderData;\r\n    }\r\n    globalDSManager!: GlobalDSManager;\r\n    descriptorSetLayout!: DescriptorSetLayout;\r\n    descriptorSet!: DescriptorSet;\r\n    get type (): PipelineType {\r\n        return PipelineType.BASIC;\r\n    }\r\n    get capabilities (): PipelineCapabilities {\r\n        return new PipelineCapabilities();\r\n    }\r\n    get enableCpuLightCulling (): boolean {\r\n        if (!this._executor) {\r\n            return true;\r\n        }\r\n        return this._executor._context.culling.enableLightCulling;\r\n    }\r\n    set enableCpuLightCulling (enable: boolean) {\r\n        if (!this._executor) {\r\n            return;\r\n        }\r\n        this._executor._context.culling.enableLightCulling = enable;\r\n    }\r\n    addCustomBuffer (name: string, info: BufferInfo, type: string): number {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    addCustomTexture (name: string, info: TextureInfo, type: string): number {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    tryAddRenderWindowDepthStencil (\r\n        width: number,\r\n        height: number,\r\n        depthStencilName?: string,\r\n        swapchain?: Swapchain,\r\n    ): void {\r\n        if (!depthStencilName) {\r\n            return;\r\n        }\r\n        if (swapchain) {\r\n            this.addDepthStencilImpl(\r\n                depthStencilName,\r\n                swapchain.depthStencilTexture.format,\r\n                width,\r\n                height,\r\n                ResourceResidency.BACKBUFFER,\r\n                swapchain,\r\n            );\r\n        } else {\r\n            this.addDepthStencilImpl(\r\n                depthStencilName,\r\n                Format.DEPTH_STENCIL,\r\n                width,\r\n                height,\r\n                ResourceResidency.MANAGED,\r\n            );\r\n        }\r\n    }\r\n    addRenderWindow (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        renderWindow: RenderWindow,\r\n        depthStencilName?: string,\r\n    ): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateRenderWindow(name, renderWindow, depthStencilName);\r\n            return resID;\r\n        }\r\n\r\n        this.tryAddRenderWindowDepthStencil(width, height, depthStencilName, renderWindow.swapchain);\r\n\r\n        // Objects need to be held for a long time, so there is no need to use pool management\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.TEXTURE2D;\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = 1;\r\n        desc.mipLevels = 1;\r\n        desc.format = renderWindow.framebuffer.colorTextures[0]!.format;\r\n        desc.flags = ResourceFlags.COLOR_ATTACHMENT;\r\n\r\n        if (!renderWindow.swapchain) {\r\n            desc.sampleCount = renderWindow.framebuffer.colorTextures[0]!.info.samples;\r\n            return this._resourceGraph.addVertex<ResourceGraphValue.Framebuffer>(\r\n                ResourceGraphValue.Framebuffer,\r\n                renderWindow.framebuffer,\r\n                name,\r\n                desc,\r\n                new ResourceTraits(ResourceResidency.EXTERNAL),\r\n                new ResourceStates(),\r\n                new SamplerInfo(),\r\n            );\r\n        } else {\r\n            return this._resourceGraph.addVertex<ResourceGraphValue.Swapchain>(\r\n                ResourceGraphValue.Swapchain,\r\n                new RenderSwapchain(renderWindow.swapchain),\r\n                name,\r\n                desc,\r\n                new ResourceTraits(ResourceResidency.BACKBUFFER),\r\n                new ResourceStates(),\r\n                new SamplerInfo(),\r\n            );\r\n        }\r\n    }\r\n    updateRenderWindow (name: string, renderWindow: RenderWindow, depthStencilName?: string): void {\r\n        const resId = this.resourceGraph.vertex(name);\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = renderWindow.width;\r\n        desc.height = renderWindow.height;\r\n        const currFbo = this.resourceGraph.object(resId);\r\n        if (currFbo !== renderWindow.framebuffer) {\r\n            this.resourceGraph.x[resId].j = renderWindow.framebuffer;\r\n        }\r\n        this.tryAddRenderWindowDepthStencil(renderWindow.width, renderWindow.height, depthStencilName, renderWindow.swapchain);\r\n    }\r\n    updateStorageBuffer (name: string, size: number, format = Format.UNKNOWN): void {\r\n        const resId = this.resourceGraph.vertex(name);\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = size;\r\n        if (format !== Format.UNKNOWN) {\r\n            desc.format = format;\r\n        }\r\n    }\r\n    updateRenderTarget (name: string, width: number, height: number, format: Format = Format.UNKNOWN): void {\r\n        const resId = this.resourceGraph.vertex(name);\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = width;\r\n        desc.height = height;\r\n        if (format !== Format.UNKNOWN) desc.format = format;\r\n    }\r\n    updateDepthStencil (name: string, width: number, height: number, format: Format = Format.UNKNOWN): void {\r\n        const resId = this.resourceGraph.find(name);\r\n        if (resId === 0xFFFFFFFF) {\r\n            return;\r\n        }\r\n        this.updateDepthStencilImpl(resId, width, height, format);\r\n    }\r\n    updateStorageTexture (name: string, width: number, height: number, format = Format.UNKNOWN): void {\r\n        const resId = this.resourceGraph.vertex(name);\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = width;\r\n        desc.height = height;\r\n        if (format !== Format.UNKNOWN) {\r\n            desc.format = format;\r\n        }\r\n    }\r\n    updateShadingRateTexture (name: string, width: number, height: number): void {\r\n        const resId = this.resourceGraph.vertex(name);\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = width;\r\n        desc.height = height;\r\n    }\r\n\r\n    public addBuffer (name: string, size: number, flags: ResourceFlags, residency: ResourceResidency): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateBuffer(name, size);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.BUFFER;\r\n        desc.width = size;\r\n        desc.flags = flags;\r\n        return this._resourceGraph.addVertex<ResourceGraphValue.Managed>(\r\n            ResourceGraphValue.Managed,\r\n            new ManagedResource(),\r\n            name,\r\n\r\n            desc,\r\n            new ResourceTraits(residency),\r\n            new ResourceStates(),\r\n            new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP),\r\n        );\r\n    }\r\n\r\n    public updateBuffer (name: string, size: number): void {\r\n        this.updateResource(name, Format.UNKNOWN, size, 0, 0, 0, 0, SampleCount.X1);\r\n    }\r\n\r\n    public addExternalTexture (name: string, texture: Texture, flags: ResourceFlags): number {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    public updateExternalTexture (name: string, texture: Texture): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    public addTexture (name: string, textureType: TextureType, format: Format, width: number, height: number, depth: number, arraySize: number, mipLevels: number, sampleCount: SampleCount, flags: ResourceFlags, residency: ResourceResidency): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateTexture(name, format, width, height, depth, arraySize, mipLevels, sampleCount);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = getResourceDimension(textureType);\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = desc.dimension === ResourceDimension.TEXTURE3D ? depth : arraySize;\r\n        desc.mipLevels = mipLevels;\r\n        desc.format = format;\r\n        desc.sampleCount = sampleCount;\r\n        desc.flags = flags;\r\n        desc.viewType = textureType;\r\n        return this._resourceGraph.addVertex<ResourceGraphValue.Managed>(\r\n            ResourceGraphValue.Managed,\r\n            new ManagedResource(),\r\n            name,\r\n\r\n            desc,\r\n            new ResourceTraits(residency),\r\n            new ResourceStates(),\r\n            new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP),\r\n        );\r\n    }\r\n\r\n    public updateTexture (name: string, format: Format, width: number, height: number, depth: number, arraySize: number, mipLevels: number, sampleCount: SampleCount): void {\r\n        this.updateResource(name, format, width, height, depth, arraySize, mipLevels, sampleCount);\r\n    }\r\n\r\n    public addResource (name: string, dimension: ResourceDimension, format: Format, width: number, height: number, depth: number, arraySize: number, mipLevels: number, sampleCount: SampleCount, flags: ResourceFlags, residency: ResourceResidency): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateResource(name, format, width, height, depth, arraySize, mipLevels, sampleCount);\r\n            return resID;\r\n        }\r\n        if (dimension === ResourceDimension.BUFFER) {\r\n            return this.addBuffer(name, width, flags, residency);\r\n        } else {\r\n            return this.addTexture(name, getTextureType(dimension, arraySize), format, width, height, depth, arraySize, mipLevels, sampleCount, flags, residency);\r\n        }\r\n    }\r\n    public updateResource (name: string, format: Format, width: number, height: number, depth: number, arraySize: number, mipLevels: number, sampleCount: SampleCount): void {\r\n        const resId = this.resourceGraph.vertex(name);\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = desc.dimension === ResourceDimension.TEXTURE3D ? depth : arraySize;\r\n        desc.mipLevels = mipLevels;\r\n        if (format !== Format.UNKNOWN) {\r\n            desc.format = format;\r\n        }\r\n        desc.sampleCount = sampleCount;\r\n    }\r\n    public containsResource (name: string): boolean {\r\n        return this._resourceGraph.contains(name);\r\n    }\r\n    public addResolvePass (resolvePairs: ResolvePair[]): void {\r\n        // TODO: implement resolve pass\r\n        throw new Error('Method not implemented.');\r\n    }\r\n\r\n    public addComputePass (passName: string): ComputePassBuilder {\r\n        const name = 'Compute';\r\n        const pass = renderGraphPool.createComputePass();\r\n\r\n        const data = renderGraphPool.createRenderData();\r\n        const vertID = this._renderGraph!.addVertex<RenderGraphValue.Compute>(RenderGraphValue.Compute, pass, name, passName, data, !DEBUG);\r\n        const result = pipelinePool.computePassBuilder.add();\r\n        result.update(data, this._renderGraph!, this._lg, this._resourceGraph, vertID, pass, this._pipelineSceneData);\r\n        setComputeConstants(result, passName);\r\n        return result;\r\n    }\r\n\r\n    public addUploadPass (uploadPairs: UploadPair[]): void {\r\n        const name = 'UploadPass';\r\n        const pass = renderGraphPool.createCopyPass();\r\n        for (const up of uploadPairs) {\r\n            pass.uploadPairs.push(up);\r\n        }\r\n\r\n        const vertID = this._renderGraph!.addVertex<RenderGraphValue.Copy>(RenderGraphValue.Copy, pass, name, '', renderGraphPool.createRenderData(), !DEBUG);\r\n        // const result = new WebCopyPassBuilder(this._renderGraph!, vertID, pass);\r\n    }\r\n\r\n    public addCopyPass (copyPairs: CopyPair[]): void {\r\n        for (const pair of copyPairs) {\r\n            const targetName = pair.target;\r\n            const tarVerId = this.resourceGraph.find(targetName);\r\n            const resDesc = this.resourceGraph.getDesc(tarVerId);\r\n            const currRaster = this.addRenderPass(resDesc.width, resDesc.height, 'copy-pass');\r\n            currRaster.addRenderTarget(targetName, LoadOp.CLEAR, StoreOp.STORE, pipelinePool.createColor());\r\n            currRaster.setFloat('flip', this.getCombineSignY());\r\n            currRaster.addTexture(pair.source, 'outputResultMap');\r\n            currRaster.addQueue(QueueHint.NONE).addFullscreenQuad(this._copyPassMat, 0, SceneFlags.NONE);\r\n        }\r\n    }\r\n    // ------------------------------------------------------\r\n    // Setter interface\r\n    // ------------------------------------------------------\r\n    get name (): string {\r\n        return 'WebPipeline';\r\n    }\r\n    // ------------------------------------------------------\r\n    // Setter interface end\r\n    // ------------------------------------------------------\r\n    protected _generateConstantMacros (clusterEnabled: boolean): void {\r\n        let str = '';\r\n        str += `#define CC_DEVICE_SUPPORT_FLOAT_TEXTURE ${this._device.getFormatFeatures(Format.RGBA32F)\r\n            & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE) ? 1 : 0}\\n`;\r\n        // str += `#define CC_ENABLE_CLUSTERED_LIGHT_CULLING ${clusterEnabled ? 1 : 0}\\n`; // defined in material\r\n        str += `#define CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS ${this._device.capabilities.maxVertexUniformVectors}\\n`;\r\n        str += `#define CC_DEVICE_MAX_FRAGMENT_UNIFORM_VECTORS ${this._device.capabilities.maxFragmentUniformVectors}\\n`;\r\n        str += `#define CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT ${this._device.hasFeature(Feature.INPUT_ATTACHMENT_BENEFIT) ? 1 : 0}\\n`;\r\n        str += `#define CC_PLATFORM_ANDROID_AND_WEBGL ${systemInfo.os === OS.ANDROID && systemInfo.isBrowser ? 1 : 0}\\n`;\r\n        str += `#define CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES ${macro.ENABLE_WEBGL_HIGHP_STRUCT_VALUES ? 1 : 0}\\n`;\r\n        const jointUniformCapacity = UBOSkinning.JOINT_UNIFORM_CAPACITY;\r\n        str += `#define CC_JOINT_UNIFORM_CAPACITY ${jointUniformCapacity}\\n`;\r\n        this._constantMacros = str;\r\n        this._lg.constantMacros = this._constantMacros;\r\n    }\r\n    public setCustomPipelineName (name: string): void {\r\n        this._customPipelineName = name;\r\n        if (this._customPipelineName === 'Deferred') {\r\n            this._usesDeferredPipeline = true;\r\n        }\r\n    }\r\n\r\n    public getGlobalDescriptorSetData (): DescriptorSetData | undefined {\r\n        const stageId = this.layoutGraph.locateChild(this.layoutGraph.N, 'default');\r\n        const layout = this.layoutGraph.getLayout(stageId);\r\n        const layoutData: DescriptorSetData | undefined = layout.getSet(UpdateFrequency.PER_PASS);\r\n        return layoutData;\r\n    }\r\n\r\n    private _initCombineSignY (): void {\r\n        const device = this._device;\r\n        this._combineSignY = (device.capabilities.screenSpaceSignY * 0.5 + 0.5) << 1 | (device.capabilities.clipSpaceSignY * 0.5 + 0.5);\r\n    }\r\n\r\n    public getCombineSignY (): number {\r\n        return this._combineSignY;\r\n    }\r\n\r\n    get globalDescriptorSetData (): DescriptorSetData {\r\n        return this._globalDescSetData;\r\n    }\r\n\r\n    get defaultSampler (): Sampler {\r\n        return this._defaultSampler;\r\n    }\r\n\r\n    get defaultShadowTexture (): Texture {\r\n        return getDefaultShadowTexture(this.device);\r\n    }\r\n\r\n    private _compileMaterial (): void {\r\n        this._copyPassMat.initialize({\r\n            effectName: 'pipeline/copy-pass',\r\n        });\r\n        for (let i = 0; i < this._copyPassMat.passes.length; ++i) {\r\n            this._copyPassMat.passes[i].tryCompile();\r\n        }\r\n    }\r\n\r\n    public activate (swapchain: Swapchain): boolean {\r\n        this._device = deviceManager.gfxDevice;\r\n        pipelinePool = new PipelinePool();\r\n        renderGraphPool = pipelinePool.renderGraphPool;\r\n        createGfxDescriptorSetsAndPipelines(this._device, this._lg);\r\n        this._compileMaterial();\r\n        this.setMacroBool('CC_USE_HDR', this._pipelineSceneData.isHDR);\r\n        this.setMacroBool('CC_USE_FLOAT_OUTPUT', macro.ENABLE_FLOAT_OUTPUT && supportsRGBA16HalfFloatTexture(this._device));\r\n        this._generateConstantMacros(false);\r\n        this._pipelineSceneData.activate(this._device);\r\n        this._initCombineSignY();\r\n        const isFloat = supportsR32FloatTexture(this._device) ? 0 : 1;\r\n        this.setMacroInt('CC_SHADOWMAP_FORMAT', isFloat);\r\n        // 0: SHADOWMAP_LINER_DEPTH_OFF, 1: SHADOWMAP_LINER_DEPTH_ON.\r\n        const isLinear = this._device.gfxAPI === API.WEBGL ? 1 : 0;\r\n        this.setMacroInt('CC_SHADOWMAP_USE_LINEAR_DEPTH', isLinear);\r\n        const director: Director = cclegacy.director;\r\n        const root: Root = director.root!;\r\n        this._defaultSampler = root.device.getSampler(_samplerPointInfo);\r\n        // 0: UNIFORM_VECTORS_LESS_EQUAL_64, 1: UNIFORM_VECTORS_GREATER_EQUAL_125.\r\n        this.pipelineSceneData.csmSupported = this.device.capabilities.maxFragmentUniformVectors\r\n            >= (WebPipeline.CSM_UNIFORM_VECTORS + WebPipeline.GLOBAL_UNIFORM_VECTORS);\r\n        this.setMacroBool('CC_SUPPORT_CASCADED_SHADOW_MAP', this.pipelineSceneData.csmSupported);\r\n\r\n        // 0: CC_SHADOW_NONE, 1: CC_SHADOW_PLANAR, 2: CC_SHADOW_MAP\r\n        this.setMacroInt('CC_SHADOW_TYPE', 0);\r\n\r\n        // 0: PCFType.HARD, 1: PCFType.SOFT, 2: PCFType.SOFT_2X, 3: PCFType.SOFT_4X\r\n        this.setMacroInt('CC_DIR_SHADOW_PCF_TYPE', PCFType.HARD);\r\n\r\n        // 0: CC_DIR_LIGHT_SHADOW_NONE, 1: CC_DIR_LIGHT_SHADOW_UNIFORM, 2: CC_DIR_LIGHT_SHADOW_CASCADED, 3: CC_DIR_LIGHT_SHADOW_VARIANCE\r\n        this.setMacroInt('CC_DIR_LIGHT_SHADOW_TYPE', 0);\r\n\r\n        // 0: CC_CASCADED_LAYERS_TRANSITION_OFF, 1: CC_CASCADED_LAYERS_TRANSITION_ON\r\n        this.setMacroBool('CC_CASCADED_LAYERS_TRANSITION', false);\r\n\r\n        // enable the deferred pipeline\r\n        if (this.usesDeferredPipeline) {\r\n            this.setMacroInt('CC_PIPELINE_TYPE', 1);\r\n        }\r\n        return true;\r\n    }\r\n    public destroy (): boolean {\r\n        this._pipelineSceneData?.destroy();\r\n        return true;\r\n    }\r\n    public get device (): Device {\r\n        return this._device;\r\n    }\r\n    public get lightingMode (): LightingMode {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this._lightingMode;\r\n    }\r\n    public set lightingMode (mode: LightingMode) {\r\n        this._lightingMode = mode;\r\n    }\r\n    public get usesDeferredPipeline (): boolean {\r\n        return this._usesDeferredPipeline;\r\n    }\r\n    public get macros (): MacroRecord {\r\n        return this._macros;\r\n    }\r\n    public get profilerDescriptorSet (): DescriptorSet {\r\n        return this._profilerDescriptorSet!;\r\n    }\r\n    // public get globalDescriptorSet (): DescriptorSet {\r\n    //     return this._globalDescriptorSet!;\r\n    // }\r\n    // public get globalDescriptorSetInfo (): DescriptorSetInfo {\r\n    //     return this._globalDescriptorSetInfo!;\r\n    // }\r\n    public get commandBuffers (): CommandBuffer[] {\r\n        return [this._device.commandBuffer];\r\n    }\r\n    public get pipelineSceneData (): PipelineSceneData {\r\n        return this._pipelineSceneData;\r\n    }\r\n    public get constantMacros (): string {\r\n        return this._constantMacros;\r\n    }\r\n    public get profiler (): Model | null {\r\n        return this._profiler;\r\n    }\r\n    public set profiler (profiler: Model | null) {\r\n        this._profiler = profiler;\r\n    }\r\n    public get geometryRenderer (): GeometryRenderer | null {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    public get shadingScale (): number {\r\n        return this._pipelineSceneData.shadingScale;\r\n    }\r\n    public set shadingScale (scale: number) {\r\n        this._pipelineSceneData.shadingScale = scale;\r\n    }\r\n    public getMacroString (name: string): string {\r\n        const str = this._macros[name];\r\n        if (str === undefined) {\r\n            return '';\r\n        }\r\n        return str as string;\r\n    }\r\n    public getMacroInt (name: string): number {\r\n        const value = this._macros[name];\r\n        if (value === undefined) {\r\n            return 0;\r\n        }\r\n        return value as number;\r\n    }\r\n    public getMacroBool (name: string): boolean {\r\n        const value = this._macros[name];\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n        return value as boolean;\r\n    }\r\n    public getSamplerInfo (name: string): SamplerInfo | null {\r\n        if (this.containsResource(name)) {\r\n            const verId = this._resourceGraph.vertex(name);\r\n            return this._resourceGraph.getSampler(verId);\r\n        }\r\n        return null;\r\n    }\r\n    public setMacroString (name: string, value: string): void {\r\n        this._macros[name] = value;\r\n    }\r\n    public setMacroInt (name: string, value: number): void {\r\n        this._macros[name] = value;\r\n    }\r\n    public setMacroBool (name: string, value: boolean): void {\r\n        this._macros[name] = value;\r\n    }\r\n    public onGlobalPipelineStateChanged (): void {\r\n        const builder = cclegacy.rendering.getCustomPipeline(macro.CUSTOM_PIPELINE_NAME);\r\n        if (builder) {\r\n            if (typeof builder.onGlobalPipelineStateChanged === 'function') {\r\n                builder.onGlobalPipelineStateChanged();\r\n            }\r\n            cclegacy.rendering.forceResizeAllWindows();\r\n        }\r\n    }\r\n    beginSetup (): void {\r\n        if (!this._renderGraph) {\r\n            this._renderGraph = new RenderGraph();\r\n            this._data = this._renderGraph.globalRenderData;\r\n        }\r\n        pipelinePool.reset();\r\n    }\r\n    endSetup (): void {\r\n        this.compile();\r\n    }\r\n    addStorageBuffer (name: string, format: Format, size: number, residency = ResourceResidency.MANAGED): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateStorageBuffer(name, size, format);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.BUFFER;\r\n        desc.width = size;\r\n        desc.height = 1;\r\n        desc.depthOrArraySize = 1;\r\n        desc.mipLevels = 1;\r\n        desc.format = format;\r\n        desc.flags = ResourceFlags.STORAGE;\r\n\r\n        if (residency === ResourceResidency.PERSISTENT) {\r\n            return this._resourceGraph.addVertex<ResourceGraphValue.PersistentBuffer>(\r\n                ResourceGraphValue.PersistentBuffer,\r\n                new PersistentBuffer(),\r\n                name,\r\n                desc,\r\n                new ResourceTraits(ResourceResidency.PERSISTENT),\r\n                new ResourceStates(),\r\n                new SamplerInfo(),\r\n            );\r\n        }\r\n\r\n        return this._resourceGraph.addVertex<ResourceGraphValue.ManagedBuffer>(\r\n            ResourceGraphValue.ManagedBuffer,\r\n            new ManagedBuffer(),\r\n            name,\r\n            desc,\r\n            new ResourceTraits(residency),\r\n            new ResourceStates(),\r\n            new SamplerInfo(),\r\n        );\r\n    }\r\n    addRenderTarget (name: string, format: Format, width: number, height: number, residency = ResourceResidency.MANAGED): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateRenderTarget(name, width, height, format);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.TEXTURE2D;\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = 1;\r\n        desc.mipLevels = 1;\r\n        desc.format = format;\r\n        desc.sampleCount = SampleCount.X1;\r\n        desc.flags = ResourceFlags.COLOR_ATTACHMENT | ResourceFlags.SAMPLED;\r\n\r\n        return this._resourceGraph.addVertex<ResourceGraphValue.Managed>(\r\n            ResourceGraphValue.Managed,\r\n            new ManagedResource(),\r\n            name,\r\n            desc,\r\n            new ResourceTraits(residency),\r\n            new ResourceStates(),\r\n            new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP),\r\n        );\r\n    }\r\n    updateDepthStencilImpl (\r\n        resId: number,\r\n        width: number,\r\n        height: number,\r\n        format: Format,\r\n        swapchain?: Swapchain,\r\n    ): void {\r\n        const desc = this.resourceGraph.getDesc(resId);\r\n        desc.width = width;\r\n        desc.height = height;\r\n        if (swapchain) {\r\n            const sc = this.resourceGraph.j<RenderSwapchain>(resId);\r\n            sc.swapchain = swapchain;\r\n            desc.format = sc.swapchain.depthStencilTexture.format;\r\n        } else if (format !== Format.UNKNOWN) {\r\n            desc.format = format;\r\n        }\r\n    }\r\n    addDepthStencilImpl (\r\n        name: string,\r\n        format: Format,\r\n        width: number,\r\n        height: number,\r\n        residency: ResourceResidency,\r\n        swapchain?: Swapchain,\r\n    ): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateDepthStencilImpl(resID, width, height, format, swapchain);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.TEXTURE2D;\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = 1;\r\n        desc.mipLevels = 1;\r\n        desc.format = format;\r\n        desc.sampleCount = SampleCount.X1;\r\n        desc.flags = ResourceFlags.DEPTH_STENCIL_ATTACHMENT | ResourceFlags.SAMPLED;\r\n\r\n        if (swapchain) {\r\n            return this._resourceGraph.addVertex<ResourceGraphValue.Swapchain>(\r\n                ResourceGraphValue.Swapchain,\r\n                new RenderSwapchain(swapchain, true),\r\n                name,\r\n                desc,\r\n                new ResourceTraits(residency),\r\n                new ResourceStates(),\r\n                new SamplerInfo(Filter.POINT, Filter.POINT, Filter.NONE),\r\n            );\r\n        } else {\r\n            return this._resourceGraph.addVertex<ResourceGraphValue.Managed>(\r\n                ResourceGraphValue.Managed,\r\n                new ManagedResource(),\r\n                name,\r\n                desc,\r\n                new ResourceTraits(residency),\r\n                new ResourceStates(),\r\n                new SamplerInfo(Filter.POINT, Filter.POINT, Filter.NONE),\r\n            );\r\n        }\r\n    }\r\n    addDepthStencil (name: string, format: Format, width: number, height: number, residency = ResourceResidency.MANAGED): number {\r\n        return this.addDepthStencilImpl(name, format, width, height, residency);\r\n    }\r\n    addStorageTexture (name: string, format: Format, width: number, height: number, residency = ResourceResidency.MANAGED): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.updateStorageTexture(name, width, height, format);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.TEXTURE2D;\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = 1;\r\n        desc.mipLevels = 1;\r\n        desc.format = format;\r\n        desc.flags = ResourceFlags.STORAGE | ResourceFlags.SAMPLED;\r\n        return this._resourceGraph.addVertex<ResourceGraphValue.Managed>(\r\n            ResourceGraphValue.Managed,\r\n            new ManagedResource(),\r\n            name,\r\n            desc,\r\n            new ResourceTraits(residency),\r\n            new ResourceStates(),\r\n            new SamplerInfo(Filter.POINT, Filter.POINT, Filter.NONE),\r\n        );\r\n    }\r\n    addShadingRateTexture (name: string, width: number, height: number, residency = ResourceResidency.MANAGED): number {\r\n        const resID = this._resourceGraph.find(name);\r\n        if (resID !== 0xFFFFFFFF) {\r\n            this.addShadingRateTexture(name, width, height);\r\n            return resID;\r\n        }\r\n        const desc = new ResourceDesc();\r\n        desc.dimension = ResourceDimension.TEXTURE2D;\r\n        desc.width = width;\r\n        desc.height = height;\r\n        desc.depthOrArraySize = 1;\r\n        desc.mipLevels = 1;\r\n        desc.format = Format.R8UI;\r\n        desc.flags = ResourceFlags.SHADING_RATE | ResourceFlags.STORAGE | ResourceFlags.SAMPLED;\r\n\r\n        return this._resourceGraph.addVertex<ResourceGraphValue.Managed>(\r\n            ResourceGraphValue.Managed,\r\n            new ManagedResource(),\r\n            name,\r\n            desc,\r\n            new ResourceTraits(residency),\r\n            new ResourceStates(),\r\n            new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP),\r\n        );\r\n    }\r\n    beginFrame (): void {\r\n        const director: Director = cclegacy.director;\r\n        director.buildRenderPipeline();\r\n    }\r\n    update (camera: Camera): void {\r\n        // noop\r\n    }\r\n    endFrame (): void {\r\n        this.renderGraph?.clear();\r\n    }\r\n\r\n    compile (): void {\r\n        if (!this._renderGraph) {\r\n            throw new Error('RenderGraph cannot be built without being created');\r\n        }\r\n        if (DEBUG) {\r\n            if (!this._compiler) {\r\n                this._compiler = new Compiler(this, this._renderGraph, this._resourceGraph, this._lg);\r\n            }\r\n            this._compiler.compile(this._renderGraph);\r\n        } else {\r\n            this._renderGraph.x.forEach((vert) => {\r\n                if (vert.t === RenderGraphValue.RasterPass) {\r\n                    genHashValue(vert.j as RasterPass);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    execute (): void {\r\n        if (!this._renderGraph) {\r\n            throw new Error('Cannot run without creating rendergraph');\r\n        }\r\n        if (!this._executor) {\r\n            this._executor = new Executor(\r\n                this,\r\n                this._device,\r\n                this._resourceGraph,\r\n                this.layoutGraph,\r\n                this.width,\r\n                this.height,\r\n            );\r\n        }\r\n        this._executor.resize(this.width, this.height);\r\n        this._executor.execute(this._renderGraph);\r\n    }\r\n    protected _applySize (cameras: Camera[]): void {\r\n        let newWidth = this._width;\r\n        let newHeight = this._height;\r\n        cameras.forEach((camera): void => {\r\n            const window = camera.window;\r\n            newWidth = Math.max(window.width, newWidth);\r\n            newHeight = Math.max(window.height, newHeight);\r\n            if (!this._cameras.includes(camera)) {\r\n                this._cameras.push(camera);\r\n            }\r\n        });\r\n        if (newWidth !== this._width || newHeight !== this._height) {\r\n            this._width = newWidth;\r\n            this._height = newHeight;\r\n        }\r\n    }\r\n\r\n    private _width = 0;\r\n    private _height = 0;\r\n    get width (): number { return this._width; }\r\n    get height (): number { return this._height; }\r\n    render (cameras: Camera[]): void {\r\n        if (cameras.length === 0) {\r\n            return;\r\n        }\r\n        this._applySize(cameras);\r\n        decideProfilerCamera(cameras);\r\n        // build graph\r\n        this.beginFrame();\r\n        this.execute();\r\n        this.endFrame();\r\n    }\r\n    addBuiltinReflectionProbePass (camera: Camera): void {\r\n        const reflectionProbeManager = cclegacy.internal.reflectionProbeManager as ReflectionProbeManager;\r\n        if (!reflectionProbeManager) return;\r\n        const probes = reflectionProbeManager.getProbes();\r\n        if (probes.length === 0) return;\r\n        for (let i = 0; i < probes.length; i++) {\r\n            const probe = probes[i];\r\n            if (probe.needRender) {\r\n                if (probes[i].probeType === ProbeType.PLANAR) {\r\n                    buildReflectionProbePass(camera, this, probe, probe.realtimePlanarTexture!.window!, 0);\r\n                } else if (EDITOR) {\r\n                    for (let faceIdx = 0; faceIdx < probe.bakedCubeTextures.length; faceIdx++) {\r\n                        probe.updateCameraDir(faceIdx);\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                        buildReflectionProbePass(camera, this, probe, probe.bakedCubeTextures[faceIdx].window!, faceIdx);\r\n                    }\r\n                    probe.needRender = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    addRenderPassImpl (width: number, height: number, layoutName: string, count = 1, quality = 0): BasicMultisampleRenderPassBuilder {\r\n        const name = 'Raster';\r\n        const pass = renderGraphPool.createRasterPass();\r\n        pass.viewport.width = width;\r\n        pass.viewport.height = height;\r\n        pass.count = count;\r\n        pass.quality = quality;\r\n        const data = renderGraphPool.createRenderData();\r\n        const vertID = this._renderGraph!.addVertex<RenderGraphValue.RasterPass>(RenderGraphValue.RasterPass, pass, name, layoutName, data, !DEBUG);\r\n        const result = pipelinePool.renderPassBuilder.add();\r\n        result.update(data, this._renderGraph!, this._lg, this._resourceGraph, vertID, pass, this._pipelineSceneData);\r\n        this._updateRasterPassConstants(result, width, height, layoutName);\r\n        setTextureUBOView(result, this._pipelineSceneData);\r\n        return result;\r\n    }\r\n    addRenderPass (width: number, height: number, layoutName = 'default'): BasicRenderPassBuilder {\r\n        return this.addRenderPassImpl(width, height, layoutName);\r\n    }\r\n    addMultisampleRenderPass (width: number, height: number, count: number, quality: number, layoutName = 'default'): BasicMultisampleRenderPassBuilder {\r\n        return this.addRenderPassImpl(width, height, layoutName, count, quality);\r\n    }\r\n    public getDescriptorSetLayout (shaderName: string, freq: UpdateFrequency): DescriptorSetLayout {\r\n        const lg = this._lg;\r\n        const phaseID = lg.shaderLayoutIndex.get(shaderName)!;\r\n        const pplLayout = lg.getLayout(phaseID);\r\n        const setLayout = pplLayout.getSet(freq)!;\r\n        return setLayout.descriptorSetLayout as DescriptorSetLayout;\r\n    }\r\n    get renderGraph (): RenderGraph | null {\r\n        return this._renderGraph;\r\n    }\r\n    get resourceGraph (): ResourceGraph {\r\n        return this._resourceGraph;\r\n    }\r\n    get layoutGraph (): LayoutGraphData {\r\n        return this._lg;\r\n    }\r\n\r\n    get resourceUses (): string[] {\r\n        return this._resourceUses;\r\n    }\r\n\r\n    protected _updateRasterPassConstants (setter: WebSetter, width: number, height: number, layoutName = 'default'): void {\r\n        const director: Director = cclegacy.director;\r\n        const root: Root = director.root!;\r\n        const shadingWidth = width;\r\n        const shadingHeight = height;\r\n        const pipeline = root.pipeline as WebPipeline;\r\n        const layoutGraph = pipeline.layoutGraph;\r\n        // Global\r\n        _uboVec.set(root.cumulativeTime, root.frameTime, director.getTotalFrames());\r\n        setter.setVec4('cc_time', _uboVec);\r\n        _uboVec.set(shadingWidth, shadingHeight, 1.0 / shadingWidth, 1.0 / shadingHeight);\r\n        setter.setVec4('cc_screenSize', _uboVec);\r\n        _uboVec.set(shadingWidth, shadingHeight, 1.0 / shadingWidth, 1.0 / shadingHeight);\r\n        setter.setVec4('cc_nativeSize', _uboVec);\r\n        const debugView = root.debugView;\r\n        _uboVec.set(0.0, 0.0, 0.0, 0.0);\r\n        if (debugView) {\r\n            const debugPackVec: number[] = [debugView.singleMode as number, 0.0, 0.0, 0.0];\r\n            for (let i = DebugViewCompositeType.DIRECT_DIFFUSE as number; i < (DebugViewCompositeType.MAX_BIT_COUNT as number); i++) {\r\n                const idx = i >> 3;\r\n                const bit = i % 8;\r\n                debugPackVec[idx + 1] += (debugView.isCompositeModeEnabled(i) ? 1.0 : 0.0) * (10.0 ** bit);\r\n            }\r\n            debugPackVec[3] += (debugView.lightingWithAlbedo ? 1.0 : 0.0) * (10.0 ** 6.0);\r\n            debugPackVec[3] += (debugView.csmLayerColoration ? 1.0 : 0.0) * (10.0 ** 7.0);\r\n            _uboVec.set(debugPackVec[0], debugPackVec[1], debugPackVec[2], debugPackVec[3]);\r\n        }\r\n        setter.setVec4('cc_debug_view_mode', _uboVec);\r\n    }\r\n\r\n    public static MAX_BLOOM_FILTER_PASS_NUM = 6;\r\n    private _usesDeferredPipeline = false;\r\n    private _copyPassMat: Material = new Material();\r\n    private _device!: Device;\r\n    private _defaultSampler!: Sampler;\r\n    private _profilerDescriptorSet: DescriptorSet | null = null;\r\n    private readonly _macros: MacroRecord = {};\r\n    private readonly _pipelineSceneData: PipelineSceneData = new PipelineSceneData();\r\n    private _constantMacros = '';\r\n    private _lightingMode = LightingMode.DEFAULT;\r\n    private _profiler: Model | null = null;\r\n    private _cameras: Camera[] = [];\r\n    private _resourceUses: string[] = [];\r\n\r\n    private readonly _resourceGraph: ResourceGraph = new ResourceGraph();\r\n    private _renderGraph: RenderGraph | null = null;\r\n    private _compiler: Compiler | null = null;\r\n    private _executor: Executor | null = null;\r\n    private _customPipelineName = '';\r\n    private _globalDescSetData!: DescriptorSetData;\r\n    private _combineSignY = 0;\r\n    // csm uniform used vectors count\r\n    public static CSM_UNIFORM_VECTORS = 61;\r\n    // all global uniform used vectors count\r\n    public static GLOBAL_UNIFORM_VECTORS = 64;\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n****************************************************************************/\r\nimport { Buffer, Framebuffer, Texture, Viewport } from '../../gfx';\r\nimport { genHashValue } from './define';\r\nimport { VectorGraphColorMap } from './effect';\r\nimport { DefaultVisitor, depthFirstSearch, ReferenceGraphView } from './graph';\r\nimport { LayoutGraphData } from './layout-graph';\r\nimport { BasicPipeline } from './pipeline';\r\nimport {\r\n    Blit, ClearView, ComputePass, ComputeSubpass, CopyPass, Dispatch, FormatView, ManagedBuffer, ManagedResource, ManagedTexture, MovePass,\r\n    RasterPass, RasterSubpass, RaytracePass, RenderGraph, RenderGraphVisitor, RasterView, ComputeView,\r\n    RenderQueue, RenderSwapchain, ResolvePass, ResourceGraph, ResourceGraphVisitor, SceneData, SubresourceView, PersistentBuffer, PersistentTexture,\r\n    RenderGraphValue,\r\n} from './render-graph';\r\nimport { AccessType, ResourceResidency, SceneFlags } from './types';\r\n\r\nconst readViews: Map<string, RasterView> = new Map();\r\nclass PassVisitor implements RenderGraphVisitor {\r\n    public queueID = 0xFFFFFFFF;\r\n    public sceneID = 0xFFFFFFFF;\r\n    public passID = 0xFFFFFFFF;\r\n    public dispatchID = 0xFFFFFFFF;\r\n    // output resourcetexture id\r\n    public resID = 0xFFFFFFFF;\r\n    public context: CompilerContext;\r\n    private _currPass: RasterPass | CopyPass | ComputePass | null = null;\r\n    private _resVisitor: ResourceVisitor;\r\n    constructor (context: CompilerContext) {\r\n        this.context = context;\r\n        this._resVisitor = new ResourceVisitor(this.context);\r\n    }\r\n    protected _isRasterPass (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.RasterPass, u);\r\n    }\r\n    protected _isCopyPass (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.Copy, u);\r\n    }\r\n    protected _isCompute (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.Compute, u);\r\n    }\r\n    protected _isDispatch (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.Dispatch, u);\r\n    }\r\n    protected _isQueue (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.Queue, u);\r\n    }\r\n    protected _isShadowMap (u: number): boolean {\r\n        const sceneData = this._getSceneData(u);\r\n        if (sceneData) {\r\n            return sceneData.light && !!sceneData.light.light && (sceneData.flags & SceneFlags.SHADOW_CASTER) !== 0;\r\n        }\r\n        return false;\r\n    }\r\n    protected _getSceneData (u: number): SceneData | null {\r\n        if (!this.context.renderGraph.h(RenderGraphValue.Scene, u)) {\r\n            return null;\r\n        }\r\n        return this.context.renderGraph.j<SceneData>(u);\r\n    }\r\n    protected _isScene (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.Scene, u);\r\n    }\r\n    protected _isBlit (u: number): boolean {\r\n        return this.context.renderGraph.h(RenderGraphValue.Blit, u);\r\n    }\r\n\r\n    private _useResourceInfo (input: string, raster: RasterView): void {\r\n        const resContext = this.context.resourceContext;\r\n        const useContext = resContext.get(input);\r\n        const resGraph = this.context.resourceGraph;\r\n        // There are resources being used\r\n        if (useContext) {\r\n            const rasters = useContext.rasters;\r\n            const passRaster = rasters.get(this.passID);\r\n            if (passRaster === raster) {\r\n                return;\r\n            }\r\n            const computes = useContext.computes;\r\n            let isPreRaster = false;\r\n            for (const [passId, currRaster] of rasters) {\r\n                if (passId > this.passID) {\r\n                    isPreRaster = true;\r\n                }\r\n            }\r\n            for (const [passId] of computes) {\r\n                if (passId > this.passID) {\r\n                    isPreRaster = true;\r\n                    break;\r\n                }\r\n            }\r\n            rasters.set(this.passID, raster);\r\n        } else {\r\n            const resId = resGraph.vertex(input);\r\n            const trait = resGraph.getTraits(resId);\r\n            switch (trait.residency) {\r\n            case ResourceResidency.PERSISTENT:\r\n                break;\r\n            default:\r\n            }\r\n            const useContext = new ResourceUseContext();\r\n            resContext.set(input, useContext);\r\n            useContext.rasters.set(this.passID, raster);\r\n        }\r\n    }\r\n\r\n    private _fetchValidPass (): void {\r\n        const rg = this.context.renderGraph;\r\n        const resContext = this.context.resourceContext;\r\n        const outputId = this.resID;\r\n        const outputName = this.context.resourceGraph.vertexName(outputId);\r\n        readViews.clear();\r\n        const pass = this._currPass! as RasterPass;\r\n        const validPass = rg.getValid(this.passID);\r\n        for (const [readName, raster] of pass.rasterViews) {\r\n            // find the pass\r\n            if (readName === outputName\r\n                && raster.accessType !== AccessType.READ) {\r\n                this._useResourceInfo(readName, raster);\r\n                rg.setValid(this.passID, true);\r\n                rg.setValid(this.queueID, true);\r\n                rg.setValid(this.sceneID, true);\r\n                continue;\r\n            }\r\n            if (raster.accessType !== AccessType.WRITE) {\r\n                readViews.set(readName, raster);\r\n            }\r\n        }\r\n        if (validPass) return;\r\n        if (rg.getValid(this.sceneID)) {\r\n            for (const [readName, raster] of pass.rasterViews) {\r\n                context.pipeline.resourceUses.push(readName);\r\n            }\r\n            let resourceGraph;\r\n            let vertID;\r\n            for (const [rasterName, raster] of readViews) {\r\n                resourceGraph = this.context.resourceGraph;\r\n                vertID = resourceGraph.find(rasterName);\r\n                if (vertID !== 0xFFFFFFFF) {\r\n                    this._resVisitor.resID = vertID;\r\n                    resourceGraph.visitVertex(this._resVisitor, vertID);\r\n                }\r\n            }\r\n            for (const [computeName, cViews] of pass.computeViews) {\r\n                let resUseContext = resContext.get(computeName);\r\n                if (!resUseContext) {\r\n                    resUseContext = new ResourceUseContext();\r\n                    resContext.set(computeName, resUseContext);\r\n                }\r\n                const computes = resUseContext.computes;\r\n                const currUseComputes = computes.get(this.passID);\r\n                if (currUseComputes) {\r\n                    currUseComputes.push(cViews);\r\n                } else {\r\n                    computes.set(this.passID, [cViews]);\r\n                }\r\n                resourceGraph = this.context.resourceGraph;\r\n                vertID = resourceGraph.find(computeName);\r\n                if (vertID !== 0xFFFFFFFF) {\r\n                    this._resVisitor.resID = vertID;\r\n                    resourceGraph.visitVertex(this._resVisitor, vertID);\r\n                }\r\n            }\r\n            genHashValue(pass);\r\n        }\r\n    }\r\n    applyID (id: number, resId: number): void {\r\n        this.resID = resId;\r\n        if (this._isRasterPass(id) || this._isCopyPass(id) || this._isCompute(id)) {\r\n            this.passID = id;\r\n        } else if (this._isQueue(id)) {\r\n            this.queueID = id;\r\n        } else if (this._isScene(id) || this._isBlit(id)) {\r\n            this.sceneID = id;\r\n        } else if (this._isDispatch(id)) {\r\n            this.dispatchID = id;\r\n        }\r\n    }\r\n    rasterPass (pass: RasterPass): void {\r\n        // const rg = this.context.renderGraph;\r\n        // Since the pass is valid, there is no need to continue traversing.\r\n        // if (rg.getValid(this.passID)) {\r\n        //     return;\r\n        // }\r\n        this._currPass = pass;\r\n    }\r\n    rasterSubpass (value: RasterSubpass): void {\r\n        // noop\r\n    }\r\n    computeSubpass (value: ComputeSubpass): void {\r\n        // noop\r\n    }\r\n    compute (value: ComputePass): void {\r\n        this._currPass = value;\r\n        const rg = context.renderGraph;\r\n        rg.setValid(this.passID, true);\r\n    }\r\n    resolve (value: ResolvePass): void {\r\n        // noop\r\n    }\r\n    copy (value: CopyPass): void {\r\n        const rg = context.renderGraph;\r\n        if (rg.getValid(this.passID)) {\r\n            return;\r\n        }\r\n        const resourceGraph = this.context.resourceGraph;\r\n        this._currPass = value;\r\n        const outputId = this.resID;\r\n        const outputName = resourceGraph.vertexName(outputId);\r\n        let vertID: number;\r\n        for (const pair of value.copyPairs) {\r\n            if (pair.target === outputName) {\r\n                rg.setValid(this.passID, true);\r\n                vertID = resourceGraph.find(pair.source);\r\n                if (vertID !== 0xFFFFFFFF) {\r\n                    this._resVisitor.resID = vertID;\r\n                    resourceGraph.visitVertex(this._resVisitor, vertID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    move (value: MovePass): void {\r\n        // noop\r\n    }\r\n    raytrace (value: RaytracePass): void {\r\n        // noop\r\n    }\r\n    queue (value: RenderQueue): void {\r\n        // noop\r\n    }\r\n    scene (value: SceneData): void {\r\n        this._fetchValidPass();\r\n    }\r\n    blit (value: Blit): void {\r\n        this._fetchValidPass();\r\n    }\r\n    dispatch (value: Dispatch): void {\r\n        const rg = this.context.renderGraph;\r\n        rg.setValid(this.queueID, true);\r\n        rg.setValid(this.dispatchID, true);\r\n    }\r\n    clear (value: ClearView[]): void {\r\n        // noop\r\n    }\r\n    viewport (value: Viewport): void {\r\n        // noop\r\n    }\r\n}\r\n\r\nclass PassManagerVisitor extends DefaultVisitor {\r\n    private _colorMap: VectorGraphColorMap;\r\n    private _graphView: ReferenceGraphView<RenderGraph>;\r\n    private _passVisitor: PassVisitor;\r\n    private _resId = 0xFFFFFFFF;\r\n\r\n    set resId (value: number) {\r\n        this._resId = value;\r\n        this._colorMap.colors.length = context.renderGraph.nv();\r\n    }\r\n    get resId (): number {\r\n        return this._resId;\r\n    }\r\n    constructor (context: CompilerContext, resId: number) {\r\n        super();\r\n        this._resId = resId;\r\n        this._passVisitor = new PassVisitor(context);\r\n        this._graphView = new ReferenceGraphView<RenderGraph>(context.renderGraph);\r\n        this._colorMap = new VectorGraphColorMap(context.renderGraph.nv());\r\n    }\r\n    get graphView (): ReferenceGraphView<RenderGraph> { return this._graphView; }\r\n    get colorMap (): VectorGraphColorMap { return this._colorMap; }\r\n    discoverVertex (u: number, gv: ReferenceGraphView<RenderGraph>): void {\r\n        const g = gv.g;\r\n        this._passVisitor.applyID(u, this.resId);\r\n        g.visitVertex(this._passVisitor, u);\r\n    }\r\n}\r\n\r\nclass ResourceVisitor implements ResourceGraphVisitor {\r\n    private readonly _context: CompilerContext;\r\n    public resID = 0xFFFFFFFF;\r\n    private _passManagerVis!: PassManagerVisitor;\r\n    constructor (context: CompilerContext) {\r\n        this._context = context;\r\n    }\r\n    managedBuffer (value: ManagedBuffer): void {\r\n        // noop\r\n    }\r\n    managedTexture (value: ManagedTexture): void {\r\n        // noop\r\n    }\r\n    managed (value: ManagedResource): void {\r\n        this.dependency();\r\n    }\r\n    persistentBuffer (value: Buffer | PersistentBuffer): void {\r\n        // noop\r\n    }\r\n\r\n    dependency (): void {\r\n        if (!this._passManagerVis) {\r\n            this._passManagerVis = new PassManagerVisitor(this._context, this.resID);\r\n        } else {\r\n            this._passManagerVis.resId = this.resID;\r\n        }\r\n        depthFirstSearch(this._passManagerVis.graphView, this._passManagerVis, this._passManagerVis.colorMap);\r\n    }\r\n\r\n    persistentTexture (value: Texture | PersistentTexture): void {\r\n        this.dependency();\r\n    }\r\n    framebuffer (value: Framebuffer): void {\r\n        this.dependency();\r\n    }\r\n    swapchain (value: RenderSwapchain): void {\r\n        this.dependency();\r\n    }\r\n    formatView (value: FormatView): void {\r\n        // noop\r\n    }\r\n    subresourceView (value: SubresourceView): void {\r\n        // noop\r\n    }\r\n}\r\n\r\nclass ResourceUseContext {\r\n    // <passID, pass view>\r\n    readonly rasters: Map<number, RasterView> = new Map<number, RasterView>();\r\n    // <pass Use ID, compute views>\r\n    computes: Map<number, [ComputeView[]]> = new Map<number, [ComputeView[]]>();\r\n}\r\nclass CompilerContext {\r\n    set (\r\n        pipeline: BasicPipeline,\r\n        resGraph: ResourceGraph,\r\n        renderGraph: RenderGraph,\r\n        layoutGraph: LayoutGraphData,\r\n    ): void {\r\n        this.pipeline = pipeline;\r\n        this.resourceGraph = resGraph;\r\n        this.renderGraph = renderGraph;\r\n        this.layoutGraph = layoutGraph;\r\n        if (!this.resourceContext) {\r\n            this.resourceContext = new Map<string, ResourceUseContext>();\r\n        }\r\n        this.resourceContext.clear();\r\n    }\r\n    resourceGraph!: ResourceGraph;\r\n    pipeline;\r\n    renderGraph!: RenderGraph;\r\n    layoutGraph!: LayoutGraphData;\r\n    resourceContext!: Map<string, ResourceUseContext>;\r\n}\r\n\r\nexport class Compiler {\r\n    private _resourceGraph: ResourceGraph;\r\n    private _pipeline: BasicPipeline;\r\n    private _layoutGraph: LayoutGraphData;\r\n    private _visitor: ResourceManagerVisitor;\r\n    constructor (\r\n        pipeline: BasicPipeline,\r\n        renderGraph: RenderGraph,\r\n        resGraph: ResourceGraph,\r\n        layoutGraph: LayoutGraphData,\r\n    ) {\r\n        this._pipeline = pipeline;\r\n        this._resourceGraph = resGraph;\r\n        this._layoutGraph = layoutGraph;\r\n        context.set(this._pipeline, this._resourceGraph, renderGraph, this._layoutGraph);\r\n        this._visitor = new ResourceManagerVisitor(context);\r\n    }\r\n    compile (rg: RenderGraph): void {\r\n        context.set(this._pipeline, this._resourceGraph, rg, this._layoutGraph);\r\n        context.pipeline.resourceUses.length = 0;\r\n        this._visitor.colorMap.colors.length = context.resourceGraph.nv();\r\n        depthFirstSearch(this._resourceGraph, this._visitor, this._visitor.colorMap);\r\n    }\r\n}\r\nconst context = new CompilerContext();\r\nexport class ResourceManagerVisitor extends DefaultVisitor {\r\n    private _colorMap: VectorGraphColorMap;\r\n    private _resourceGraph: ResourceGraph;\r\n    private _resVisitor: ResourceVisitor;\r\n    constructor (context: CompilerContext) {\r\n        super();\r\n        this._colorMap = new VectorGraphColorMap(context.resourceGraph.nv());\r\n        this._resourceGraph = context.resourceGraph;\r\n        this._resVisitor = new ResourceVisitor(context);\r\n    }\r\n    get colorMap (): VectorGraphColorMap { return this._colorMap; }\r\n    discoverVertex (u: number, gv: ResourceGraph): void {\r\n        const traits = this._resourceGraph.getTraits(u);\r\n        if (traits.residency === ResourceResidency.MANAGED\r\n                || traits.residency === ResourceResidency.MEMORYLESS) {\r\n            return;\r\n        }\r\n        this._resVisitor.resID = u;\r\n        this._resourceGraph.visitVertex(this._resVisitor, u);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { OutputArchive, InputArchive } from './archive';\r\n\r\nexport class BinaryOutputArchive implements OutputArchive {\r\n    constructor () {\r\n        this.capacity = 4096;\r\n        this.buffer = new Uint8Array(this.capacity);\r\n        this.dataView = new DataView(this.buffer.buffer);\r\n    }\r\n    b (value: boolean): void {\r\n        const newSize = this.size + 1;\r\n        if (newSize > this.capacity) {\r\n            this.reserve(newSize);\r\n        }\r\n        this.dataView.setUint8(this.size, value ? 1 : 0);\r\n        this.size = newSize;\r\n    }\r\n    n (value: number): void {\r\n        const newSize = this.size + 8;\r\n        if (newSize > this.capacity) {\r\n            this.reserve(newSize);\r\n        }\r\n        this.dataView.setFloat64(this.size, value, true);\r\n        this.size = newSize;\r\n    }\r\n    s (value: string): void {\r\n        this.n(value.length);\r\n        const newSize = this.size + value.length;\r\n        if (newSize > this.capacity) {\r\n            this.reserve(newSize);\r\n        }\r\n        for (let i = 0; i < value.length; i++) {\r\n            this.dataView.setUint8(this.size + i, value.charCodeAt(i));\r\n        }\r\n        this.size = newSize;\r\n    }\r\n    reserve (requiredSize: number): void {\r\n        const newCapacity = Math.max(requiredSize, this.capacity * 2);\r\n        const prevBuffer = this.buffer;\r\n        this.buffer = new Uint8Array(newCapacity);\r\n        this.buffer.set(prevBuffer);\r\n        this.dataView = new DataView(this.buffer.buffer);\r\n        this.capacity = newCapacity;\r\n    }\r\n    get data (): ArrayBuffer {\r\n        return this.buffer.buffer.slice(0, this.size);\r\n    }\r\n    capacity = 0;\r\n    size = 0;\r\n    buffer: Uint8Array;\r\n    dataView: DataView;\r\n}\r\n\r\nexport class BinaryInputArchive implements InputArchive {\r\n    constructor (data: ArrayBuffer, byteOffset?: number) {\r\n        this.dataView = new DataView(data, byteOffset);\r\n    }\r\n    b (): boolean {\r\n        return this.dataView.getUint8(this.offset++) !== 0;\r\n    }\r\n    n (): number {\r\n        const value = this.dataView.getFloat64(this.offset, true);\r\n        this.offset += 8;\r\n        return value;\r\n    }\r\n    s (): string {\r\n        const length = this.n();\r\n        // we only support ascii string now, so we can use String.fromCharCode\r\n        // see https://stackoverflow.com/questions/67057689/typscript-type-uint8array-is-missing-the-following-properties-from-type-numb\r\n        // answer on stackoverflow might be wrong.\r\n        // [[wrong]] const str =  String.fromCharCode.apply(null, [...new Uint8Array(this.dataView.buffer, this.offset, length)]);\r\n        const str =  String.fromCharCode.apply(null, Array.from(new Uint8Array(this.dataView.buffer, this.offset, length)));\r\n        this.offset += length;\r\n        return str;\r\n    }\r\n    offset = 0;\r\n    dataView: DataView;\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n * The following section is auto-generated.\r\n * ========================= !DO NOT CHANGE THE FOLLOWING SECTION MANUALLY! =========================\r\n */\r\n/* eslint-disable max-len */\r\nimport type { Attribute, ShaderInfo } from '../../gfx';\r\nimport type { ProgramProxy } from './private';\r\nimport type { IProgramInfo } from '../../render-scene/core/program-lib';\r\n\r\nexport class ProgramInfo {\r\n    constructor (\r\n        programInfo: IProgramInfo,\r\n        shaderInfo: ShaderInfo,\r\n        attributes: Attribute[],\r\n        blockSizes: number[],\r\n        handleMap: Record<string, number>,\r\n    ) {\r\n        this.programInfo = programInfo;\r\n        this.shaderInfo = shaderInfo;\r\n        this.attributes = attributes;\r\n        this.blockSizes = blockSizes;\r\n        this.handleMap = handleMap;\r\n    }\r\n    declare readonly programInfo: IProgramInfo;\r\n    declare readonly shaderInfo: ShaderInfo;\r\n    declare readonly attributes: Attribute[];\r\n    declare readonly blockSizes: number[];\r\n    declare readonly handleMap: Record<string, number>;\r\n}\r\n\r\nexport class ProgramGroup {\r\n    readonly programInfos: Map<string, ProgramInfo> = new Map<string, ProgramInfo>();\r\n    readonly programProxies: Map<string, ProgramProxy> = new Map<string, ProgramProxy>();\r\n}\r\n","/* eslint-disable no-console */\r\n/****************************************************************************\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n****************************************************************************/\r\n\r\n/* eslint-disable max-len */\r\nimport { EffectAsset } from '../../asset/assets';\r\nimport { assert, error, errorID } from '../../core/platform/debug';\r\nimport { Attribute, DESCRIPTOR_BUFFER_TYPE, DESCRIPTOR_SAMPLER_TYPE, DescriptorSetInfo, DescriptorSetLayout, DescriptorSetLayoutInfo, DescriptorType, Device, deviceManager, MemoryAccessBit, PipelineLayout, PipelineLayoutInfo, PipelineState, Shader, ShaderInfo, ShaderStage, ShaderStageFlagBit, Type, Uniform, UniformBlock, UniformInputAttachment, UniformSampler, UniformSamplerTexture, UniformStorageBuffer, UniformStorageImage, UniformTexture } from '../../gfx';\r\nimport { getDeviceShaderVersion, MacroRecord } from '../../render-scene';\r\nimport { IProgramInfo } from '../../render-scene/core/program-lib';\r\nimport { genHandles, getActiveAttributes, getCombinationDefines, getShaderInstanceName, getSize, getVariantKey, populateMacros, prepareDefines } from '../../render-scene/core/program-utils';\r\nimport { IDescriptorSetLayoutInfo, localDescriptorSetLayout, UBOSkinning } from '../define';\r\nimport {\r\n    DescriptorBlockData, DescriptorData, DescriptorSetData, DescriptorSetLayoutData,\r\n    DescriptorTypeOrder,\r\n    LayoutGraphData, LayoutGraphDataValue, PipelineLayoutData,\r\n    RenderPhaseData, ShaderProgramData,\r\n} from './layout-graph';\r\nimport { ENABLE_SUBPASS, generateConstantMacros, getCustomPassID, getCustomPhaseID, getCustomSubpassID, getDescriptorName, getDescriptorNameID, getDescriptorSetLayout, getDescriptorTypeOrder, getEmptyDescriptorSetLayout, getEmptyPipelineLayout, getOrCreateDescriptorID, getOrCreateDescriptorSetLayout, getProgramID, initializeDescriptorSetLayoutInfo, INVALID_ID, makeDescriptorSetLayoutData, populatePipelineLayoutInfo } from './layout-graph-utils';\r\nimport { PipelineRuntime } from './pipeline';\r\nimport { ProgramLibrary, ProgramProxy } from './private';\r\nimport { UpdateFrequency } from './types';\r\nimport { ProgramGroup, ProgramInfo } from './web-types';\r\n\r\nconst _setIndex = [2, 1, 3, 0];\r\n\r\n// make IProgramInfo from IShaderInfo\r\nexport function makeProgramInfo (effectName: string, shader: EffectAsset.IShaderInfo): IProgramInfo {\r\n    const programInfo = { ...shader } as IProgramInfo;\r\n    programInfo.effectName = effectName;\r\n\r\n    populateMacros(programInfo);\r\n\r\n    return programInfo;\r\n}\r\n\r\nfunction findBinding (shaderInfo: ShaderInfo, name: string): { set: number, binding: number } {\r\n    for (const v of shaderInfo.blocks) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    for (const v of shaderInfo.buffers) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    for (const v of shaderInfo.samplerTextures) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    for (const v of shaderInfo.samplers) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    for (const v of shaderInfo.textures) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    for (const v of shaderInfo.images) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    for (const v of shaderInfo.subpassInputs) {\r\n        if (v.name === name) {\r\n            return { set: v.set, binding: v.binding };\r\n        }\r\n    }\r\n    // eslint-disable-next-line no-console\r\n    throw error('binding not found in shaderInfo!');\r\n}\r\n\r\nfunction overwriteShaderSourceBinding (shaderInfo: ShaderInfo, source: string): string {\r\n    let code = source;\r\n    const samplerExp = /layout\\s*\\(([^)])+\\)\\s+uniform\\s+(\\b\\w+\\b\\s+)?sampler(\\w+)\\s+(\\b\\w+\\b)/g;\r\n    let samplerIter = samplerExp.exec(code);\r\n    while (samplerIter) {\r\n        const name = samplerIter[4];\r\n        const { set, binding } = findBinding(shaderInfo, name);\r\n        const precStr = samplerIter[2] ? samplerIter[2] : '';\r\n        const replaceStr = `layout(set = ${set}, binding = ${binding}) uniform ${precStr} sampler${samplerIter[3]} ${samplerIter[4]}`;\r\n        code = code.replace(samplerIter[0], replaceStr);\r\n        samplerIter = samplerExp.exec(code);\r\n    }\r\n    const blockExp = /layout\\s*\\(([^)]+)\\)\\s*(readonly|writeonly)?\\s*\\b((uniform\\s*|buffer\\s*|image2D\\s*){1,2})\\b\\s*(\\b\\w+\\b)\\s*[{;]/g;\r\n    let blockIter = blockExp.exec(code);\r\n    while (blockIter) {\r\n        const name = blockIter[5];\r\n        const { set, binding } = findBinding(shaderInfo, name);\r\n        const accessStr = blockIter[2] ? blockIter[2] : '';\r\n        let endStr = ' {';\r\n        if (blockIter[3].includes('image')) {\r\n            endStr = `;`;\r\n        }\r\n        let desc = blockIter[1];\r\n        desc = desc.replace(/set\\s*=\\s*\\d+/g, `set = ${set}`);\r\n        desc = desc.replace(/binding\\s*=\\s*\\d+/g, `binding = ${binding}`);\r\n        const replaceStr = `layout(${desc}) ${accessStr} ${blockIter[3]} ${blockIter[5]}${endStr}`;\r\n        code = code.replace(blockIter[0], replaceStr);\r\n        blockIter = blockExp.exec(code);\r\n    }\r\n    return code;\r\n}\r\n\r\nfunction overwriteShaderProgramBinding (shaderInfo: ShaderInfo, programInfo: IProgramInfo): void {\r\n    const version = getDeviceShaderVersion(deviceManager.gfxDevice);\r\n    if (version !== 'glsl4') {\r\n        return;\r\n    }\r\n    if (programInfo.glsl4.vert) {\r\n        programInfo.glsl4.vert = overwriteShaderSourceBinding(shaderInfo, programInfo.glsl4.vert);\r\n    }\r\n    if (programInfo.glsl4.frag) {\r\n        programInfo.glsl4.frag = overwriteShaderSourceBinding(shaderInfo, programInfo.glsl4.frag);\r\n    } if (programInfo.glsl4.compute) {\r\n        programInfo.glsl4.compute = overwriteShaderSourceBinding(shaderInfo, programInfo.glsl4.compute);\r\n    }\r\n}\r\n\r\n// overwrite IProgramInfo using gfx.ShaderInfo\r\nexport function overwriteProgramBlockInfo (shaderInfo: ShaderInfo, programInfo: IProgramInfo): void {\r\n    overwriteShaderProgramBinding(shaderInfo, programInfo);\r\n    const set = _setIndex[UpdateFrequency.PER_BATCH];\r\n    for (const block of programInfo.blocks) {\r\n        let found = false;\r\n        for (const src of shaderInfo.blocks) {\r\n            if (src.set !== set) {\r\n                continue;\r\n            }\r\n            if (src.name === block.name) {\r\n                block.binding = src.binding;\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            error(`Block ${block.name} not found in shader ${shaderInfo.name}`);\r\n        }\r\n    }\r\n}\r\n\r\n// add descriptor to size-reserved descriptor set\r\nfunction populateGroupedShaderInfo (\r\n    layout: DescriptorSetLayoutData,\r\n    descriptorInfo: EffectAsset.IDescriptorInfo,\r\n    set: number,\r\n    shaderInfo: ShaderInfo,\r\n    blockSizes: number[],\r\n): void {\r\n    for (const descriptorBlock of layout.descriptorBlocks) {\r\n        const visibility = descriptorBlock.visibility;\r\n        let binding = descriptorBlock.offset;\r\n\r\n        switch (descriptorBlock.type) {\r\n        case DescriptorTypeOrder.UNIFORM_BUFFER:\r\n            for (const block of descriptorInfo.blocks) {\r\n                if (block.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                blockSizes.push(getSize(block.members));\r\n                shaderInfo.blocks.push(\r\n                    new UniformBlock(\r\n                        set,\r\n                        binding,\r\n                        block.name,\r\n                        block.members.map((m): Uniform => new Uniform(m.name, m.type, m.count)),\r\n                        1,\r\n                    ), // count is always 1 for UniformBlock\r\n                );\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER:\r\n            // not implemented yet\r\n            break;\r\n        case DescriptorTypeOrder.SAMPLER_TEXTURE:\r\n            for (const tex of descriptorInfo.samplerTextures) {\r\n                if (tex.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                shaderInfo.samplerTextures.push(new UniformSamplerTexture(set, binding, tex.name, tex.type, tex.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.SAMPLER:\r\n            for (const sampler of descriptorInfo.samplers) {\r\n                if (sampler.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                shaderInfo.samplers.push(new UniformSampler(set, binding, sampler.name, sampler.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.TEXTURE:\r\n            for (const texture of descriptorInfo.textures) {\r\n                if (texture.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                shaderInfo.textures.push(new UniformTexture(set, binding, texture.name, texture.type, texture.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.STORAGE_BUFFER:\r\n            for (const buffer of descriptorInfo.buffers) {\r\n                if (buffer.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                shaderInfo.buffers.push(new UniformStorageBuffer(set, binding, buffer.name, 1, buffer.memoryAccess)); // effect compiler guarantees buffer count = 1\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.DYNAMIC_STORAGE_BUFFER:\r\n            // not implemented yet\r\n            break;\r\n        case DescriptorTypeOrder.STORAGE_IMAGE:\r\n            for (const image of descriptorInfo.images) {\r\n                if (image.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                shaderInfo.images.push(new UniformStorageImage(set, binding, image.name, image.type, image.count, image.memoryAccess));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.INPUT_ATTACHMENT:\r\n            for (const subpassInput of descriptorInfo.subpassInputs) {\r\n                if (subpassInput.stageFlags !== visibility) {\r\n                    continue;\r\n                }\r\n                shaderInfo.subpassInputs.push(new UniformInputAttachment(set, subpassInput.binding, subpassInput.name, subpassInput.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        default:\r\n        }\r\n    }\r\n}\r\n\r\n// add merged descriptor to gfx.ShaderInfo\r\nfunction populateMergedShaderInfo (\r\n    valueNames: string[],\r\n    layout: DescriptorSetLayoutData,\r\n    set: number,\r\n    shaderInfo: ShaderInfo,\r\n    blockSizes: number[],\r\n): void {\r\n    for (const descriptorBlock of layout.descriptorBlocks) {\r\n        let binding = descriptorBlock.offset;\r\n        switch (descriptorBlock.type) {\r\n        case DescriptorTypeOrder.UNIFORM_BUFFER:\r\n            for (const block of descriptorBlock.descriptors) {\r\n                const uniformBlock = layout.uniformBlocks.get(block.descriptorID);\r\n                if (uniformBlock === undefined) {\r\n                    error(`Failed to find uniform block ${block.descriptorID} in layout`);\r\n                    continue;\r\n                }\r\n                blockSizes.push(getSize(uniformBlock.members));\r\n                shaderInfo.blocks.push(\r\n                    new UniformBlock(\r\n                        set,\r\n                        binding,\r\n                        valueNames[block.descriptorID],\r\n                        uniformBlock.members.map((m): Uniform => new Uniform(m.name, m.type, m.count)),\r\n                        1,\r\n                    ), // count is always 1 for UniformBlock\r\n                );\r\n                ++binding;\r\n            }\r\n            if (binding !== descriptorBlock.offset + descriptorBlock.capacity) {\r\n                error(`Uniform buffer binding mismatch for set ${set}`);\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER:\r\n            // not implemented yet\r\n            break;\r\n        case DescriptorTypeOrder.SAMPLER_TEXTURE:\r\n            for (const tex of descriptorBlock.descriptors) {\r\n                shaderInfo.samplerTextures.push(new UniformSamplerTexture(set, binding, valueNames[tex.descriptorID], tex.type, tex.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.SAMPLER:\r\n            for (const sampler of descriptorBlock.descriptors) {\r\n                shaderInfo.samplers.push(new UniformSampler(set, binding, valueNames[sampler.descriptorID], sampler.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.TEXTURE:\r\n            for (const texture of descriptorBlock.descriptors) {\r\n                shaderInfo.textures.push(new UniformTexture(set, binding, valueNames[texture.descriptorID], texture.type, texture.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.STORAGE_BUFFER:\r\n            for (const buffer of descriptorBlock.descriptors) {\r\n                shaderInfo.buffers.push(new UniformStorageBuffer(\r\n                    set,\r\n                    binding,\r\n                    valueNames[buffer.descriptorID],\r\n                    1,\r\n                    MemoryAccessBit.READ_WRITE/*buffer.memoryAccess*/,\r\n                )); // effect compiler guarantees buffer count = 1\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.DYNAMIC_STORAGE_BUFFER:\r\n            // not implemented yet\r\n            break;\r\n        case DescriptorTypeOrder.STORAGE_IMAGE:\r\n            for (const image of descriptorBlock.descriptors) {\r\n                shaderInfo.images.push(new UniformStorageImage(\r\n                    set,\r\n                    binding,\r\n                    valueNames[image.descriptorID],\r\n                    image.type,\r\n                    image.count,\r\n                    MemoryAccessBit.READ_WRITE/*image.memoryAccess*/,\r\n                ));\r\n                ++binding;\r\n            }\r\n            break;\r\n        case DescriptorTypeOrder.INPUT_ATTACHMENT:\r\n            for (const subpassInput of descriptorBlock.descriptors) {\r\n                shaderInfo.subpassInputs.push(new UniformInputAttachment(set, binding, valueNames[subpassInput.descriptorID], subpassInput.count));\r\n                ++binding;\r\n            }\r\n            break;\r\n        default:\r\n        }\r\n    }\r\n}\r\n\r\n// add descriptor from effect to gfx.ShaderInfo\r\nfunction populateShaderInfo (\r\n    descriptorInfo: EffectAsset.IDescriptorInfo,\r\n    set: number,\r\n    shaderInfo: ShaderInfo,\r\n    blockSizes: number[],\r\n): void {\r\n    for (let i = 0; i < descriptorInfo.blocks.length; i++) {\r\n        const block = descriptorInfo.blocks[i];\r\n        blockSizes.push(getSize(block.members));\r\n        shaderInfo.blocks.push(new UniformBlock(\r\n            set,\r\n            block.binding,\r\n            block.name,\r\n            block.members.map((m): Uniform => new Uniform(m.name, m.type, m.count)),\r\n            1,\r\n        )); // effect compiler guarantees block count = 1\r\n    }\r\n    for (let i = 0; i < descriptorInfo.samplerTextures.length; i++) {\r\n        const samplerTexture = descriptorInfo.samplerTextures[i];\r\n        shaderInfo.samplerTextures.push(new UniformSamplerTexture(set, samplerTexture.binding, samplerTexture.name, samplerTexture.type, samplerTexture.count));\r\n    }\r\n    for (let i = 0; i < descriptorInfo.samplers.length; i++) {\r\n        const sampler = descriptorInfo.samplers[i];\r\n        shaderInfo.samplers.push(new UniformSampler(set, sampler.binding, sampler.name, sampler.count));\r\n    }\r\n    for (let i = 0; i < descriptorInfo.textures.length; i++) {\r\n        const texture = descriptorInfo.textures[i];\r\n        shaderInfo.textures.push(new UniformTexture(set, texture.binding, texture.name, texture.type, texture.count));\r\n    }\r\n    for (let i = 0; i < descriptorInfo.buffers.length; i++) {\r\n        const buffer = descriptorInfo.buffers[i];\r\n        shaderInfo.buffers.push(new UniformStorageBuffer(set, buffer.binding, buffer.name, 1, buffer.memoryAccess)); // effect compiler guarantees buffer count = 1\r\n    }\r\n    for (let i = 0; i < descriptorInfo.images.length; i++) {\r\n        const image = descriptorInfo.images[i];\r\n        shaderInfo.images.push(new UniformStorageImage(set, image.binding, image.name, image.type, image.count, image.memoryAccess));\r\n    }\r\n    for (let i = 0; i < descriptorInfo.subpassInputs.length; i++) {\r\n        const subpassInput = descriptorInfo.subpassInputs[i];\r\n        shaderInfo.subpassInputs.push(new UniformInputAttachment(set, subpassInput.binding, subpassInput.name, subpassInput.count));\r\n    }\r\n}\r\n\r\n// add fixed local descriptors to gfx.ShaderInfo\r\nfunction populateLocalShaderInfo (\r\n    target: EffectAsset.IDescriptorInfo,\r\n    source: IDescriptorSetLayoutInfo,\r\n    shaderInfo: ShaderInfo,\r\n    blockSizes: number[],\r\n): void {\r\n    const set = _setIndex[UpdateFrequency.PER_INSTANCE];\r\n    for (let i = 0; i < target.blocks.length; i++) {\r\n        const block = target.blocks[i];\r\n        const info = source.layouts[block.name] as UniformBlock | undefined;\r\n        const binding = info && source.bindings.find((bd): boolean => bd.binding === info.binding);\r\n        if (!info || !binding || !(binding.descriptorType & DESCRIPTOR_BUFFER_TYPE)) {\r\n            console.warn(`builtin UBO '${block.name}' not available!`);\r\n            continue;\r\n        }\r\n        blockSizes.push(getSize(block.members));\r\n        shaderInfo.blocks.push(new UniformBlock(\r\n            set,\r\n            binding.binding,\r\n            block.name,\r\n            block.members.map((m): Uniform => new Uniform(m.name, m.type, m.count)),\r\n            1,\r\n        )); // effect compiler guarantees block count = 1\r\n    }\r\n    for (let i = 0; i < target.samplerTextures.length; i++) {\r\n        const samplerTexture = target.samplerTextures[i];\r\n        const info = source.layouts[samplerTexture.name] as UniformSamplerTexture;\r\n        const binding = info && source.bindings.find((bd): boolean => bd.binding === info.binding);\r\n        if (!info || !binding || !(binding.descriptorType & DESCRIPTOR_SAMPLER_TYPE)) {\r\n            console.warn(`builtin samplerTexture '${samplerTexture.name}' not available!`);\r\n            continue;\r\n        }\r\n        shaderInfo.samplerTextures.push(new UniformSamplerTexture(set, binding.binding, samplerTexture.name, samplerTexture.type, samplerTexture.count));\r\n    }\r\n}\r\n\r\nfunction getIDescriptorSetLayoutInfoUniformBlockCapacity (info: IDescriptorSetLayoutInfo): number {\r\n    let capacity = 0;\r\n    for (const binding of info.bindings) {\r\n        if (binding.descriptorType === DescriptorType.UNIFORM_BUFFER\r\n            || binding.descriptorType === DescriptorType.DYNAMIC_UNIFORM_BUFFER) {\r\n            capacity += binding.count;\r\n        }\r\n    }\r\n    return capacity;\r\n}\r\n\r\nfunction getIDescriptorSetLayoutInfoSamplerTextureCapacity (info: IDescriptorSetLayoutInfo): number {\r\n    let capacity = 0;\r\n    for (const binding of info.bindings) {\r\n        if (binding.descriptorType !== DescriptorType.UNIFORM_BUFFER\r\n            && binding.descriptorType !== DescriptorType.DYNAMIC_UNIFORM_BUFFER) {\r\n            capacity += binding.count;\r\n        }\r\n    }\r\n    return capacity;\r\n}\r\n\r\nfunction setFlattenedUniformBlockBinding (\r\n    setOffsets: number[],\r\n    descriptors: UniformBlock[],\r\n): void {\r\n    for (const d of descriptors) {\r\n        d.flattened = setOffsets[d.set] + d.binding;\r\n    }\r\n}\r\n\r\nfunction setFlattenedSamplerTextureBinding (\r\n    setOffsets: number[],\r\n    uniformBlockCapacities: number[],\r\n    descriptors: UniformSamplerTexture[]\r\n    | UniformSampler[]\r\n    | UniformTexture[]\r\n    | UniformStorageBuffer[]\r\n    | UniformStorageImage[]\r\n    | UniformInputAttachment[],\r\n): void {\r\n    for (const d of descriptors) {\r\n        d.flattened = setOffsets[d.set] + d.binding - uniformBlockCapacities[d.set];\r\n    }\r\n}\r\n\r\nfunction calculateFlattenedBinding (\r\n    descriptorSets: (DescriptorSetLayoutData | null)[],\r\n    fixedInstanceDescriptorSetLayout: IDescriptorSetLayoutInfo | null,\r\n    shaderInfo: ShaderInfo,\r\n): void {\r\n    // Descriptors of UniformBlock starts from 0, and Descriptors of SamplerTexture starts from the end of UniformBlock.\r\n    const uniformBlockCapacities = new Array<number>(4);\r\n    {\r\n        const passCapacity = descriptorSets[UpdateFrequency.PER_PASS]?.uniformBlockCapacity || 0;\r\n        const phaseCapacity = descriptorSets[UpdateFrequency.PER_PHASE]?.uniformBlockCapacity || 0;\r\n        const batchCapacity = descriptorSets[UpdateFrequency.PER_BATCH]?.uniformBlockCapacity || 0; // dynamic size\r\n        const instanceCapacity = fixedInstanceDescriptorSetLayout\r\n            ? getIDescriptorSetLayoutInfoUniformBlockCapacity(fixedInstanceDescriptorSetLayout)\r\n            : (descriptorSets[UpdateFrequency.PER_INSTANCE]?.uniformBlockCapacity || 0);\r\n\r\n        // update uniform block capacities\r\n        uniformBlockCapacities[_setIndex[UpdateFrequency.PER_PASS]] = passCapacity;\r\n        uniformBlockCapacities[_setIndex[UpdateFrequency.PER_PHASE]] = phaseCapacity;\r\n        uniformBlockCapacities[_setIndex[UpdateFrequency.PER_BATCH]] = batchCapacity;\r\n        uniformBlockCapacities[_setIndex[UpdateFrequency.PER_INSTANCE]] = instanceCapacity;\r\n\r\n        // calculate uniform block offsets\r\n        const passOffset = 0;\r\n        const phaseOffset = passOffset + passCapacity;\r\n        const instanceOffset = phaseOffset + phaseCapacity;\r\n        const batchOffset = instanceOffset + instanceCapacity;\r\n\r\n        // save uniform block offsets by set index\r\n        const uniformBlockOffsets = new Array<number>(4);\r\n        uniformBlockOffsets[_setIndex[UpdateFrequency.PER_PASS]] = passOffset;\r\n        uniformBlockOffsets[_setIndex[UpdateFrequency.PER_PHASE]] = phaseOffset;\r\n        uniformBlockOffsets[_setIndex[UpdateFrequency.PER_BATCH]] = batchOffset;\r\n        uniformBlockOffsets[_setIndex[UpdateFrequency.PER_INSTANCE]] = instanceOffset;\r\n\r\n        // update flattened uniform block binding\r\n        setFlattenedUniformBlockBinding(uniformBlockOffsets, shaderInfo.blocks);\r\n    }\r\n    {\r\n        // calculate sampler texture capacities\r\n        const passCapacity = descriptorSets[UpdateFrequency.PER_PASS]?.samplerTextureCapacity || 0;\r\n        const phaseCapacity = descriptorSets[UpdateFrequency.PER_PHASE]?.samplerTextureCapacity || 0;\r\n        // const batchCapacity = descriptorSets[UpdateFrequency.PER_BATCH]?.capacity || 0; // dynamic size\r\n        const instanceCapacity = fixedInstanceDescriptorSetLayout\r\n            ? getIDescriptorSetLayoutInfoSamplerTextureCapacity(fixedInstanceDescriptorSetLayout)\r\n            : (descriptorSets[UpdateFrequency.PER_INSTANCE]?.samplerTextureCapacity || 0);\r\n\r\n        // calculate sampler texture offsets\r\n        const passOffset = 0;\r\n        const phaseOffset = passOffset + passCapacity;\r\n        const instanceOffset = phaseOffset + phaseCapacity;\r\n        const batchOffset = instanceOffset + instanceCapacity;\r\n\r\n        // save sampler texture offsets by set index\r\n        const samplerTextureOffsets = new Array<number>(4);\r\n        samplerTextureOffsets[_setIndex[UpdateFrequency.PER_PASS]] = passOffset;\r\n        samplerTextureOffsets[_setIndex[UpdateFrequency.PER_PHASE]] = phaseOffset;\r\n        samplerTextureOffsets[_setIndex[UpdateFrequency.PER_BATCH]] = batchOffset;\r\n        samplerTextureOffsets[_setIndex[UpdateFrequency.PER_INSTANCE]] = instanceOffset;\r\n\r\n        // update flattened sampler texture binding\r\n        setFlattenedSamplerTextureBinding(samplerTextureOffsets, uniformBlockCapacities, shaderInfo.samplerTextures);\r\n    }\r\n}\r\n\r\n// make gfx.ShaderInfo\r\nexport function makeShaderInfo (\r\n    lg: LayoutGraphData,\r\n    passLayouts: PipelineLayoutData,\r\n    phaseLayouts: PipelineLayoutData,\r\n    srcShaderInfo: EffectAsset.IShaderInfo,\r\n    programData: ShaderProgramData | null,\r\n    fixedLocal: boolean,\r\n): [ShaderInfo, Array<number>] {\r\n    const descriptorSets: Array<DescriptorSetLayoutData | null> = [null, null, null, null];\r\n    let fixedInstanceDescriptorSetLayout: IDescriptorSetLayoutInfo | null = null;\r\n    const shaderInfo = new ShaderInfo();\r\n    const blockSizes: number[] = [];\r\n    { // pass\r\n        const passLayout = passLayouts.getSet(UpdateFrequency.PER_PASS);\r\n        if (passLayout) {\r\n            descriptorSets[UpdateFrequency.PER_PASS] = passLayout.descriptorSetLayoutData;\r\n            populateMergedShaderInfo(\r\n                lg.valueNames,\r\n                passLayout.descriptorSetLayoutData,\r\n                _setIndex[UpdateFrequency.PER_PASS],\r\n                shaderInfo,\r\n                blockSizes,\r\n            );\r\n        }\r\n    }\r\n    { // phase\r\n        const phaseLayout = phaseLayouts.getSet(UpdateFrequency.PER_PHASE);\r\n        if (phaseLayout) {\r\n            descriptorSets[UpdateFrequency.PER_PHASE] = phaseLayout.descriptorSetLayoutData;\r\n            populateMergedShaderInfo(\r\n                lg.valueNames,\r\n                phaseLayout.descriptorSetLayoutData,\r\n                _setIndex[UpdateFrequency.PER_PHASE],\r\n                shaderInfo,\r\n                blockSizes,\r\n            );\r\n        }\r\n    }\r\n    { // batch\r\n        const batchInfo = srcShaderInfo.descriptors[UpdateFrequency.PER_BATCH];\r\n        if (programData) {\r\n            const perBatch = programData.layout.getSet(UpdateFrequency.PER_BATCH);\r\n            if (perBatch) {\r\n                descriptorSets[UpdateFrequency.PER_BATCH] = perBatch.descriptorSetLayoutData;\r\n                populateMergedShaderInfo(\r\n                    lg.valueNames,\r\n                    perBatch.descriptorSetLayoutData,\r\n                    _setIndex[UpdateFrequency.PER_BATCH],\r\n                    shaderInfo,\r\n                    blockSizes,\r\n                );\r\n            }\r\n        } else {\r\n            const batchLayout = phaseLayouts.getSet(UpdateFrequency.PER_BATCH);\r\n            if (batchLayout) {\r\n                descriptorSets[UpdateFrequency.PER_BATCH] = batchLayout.descriptorSetLayoutData;\r\n                populateGroupedShaderInfo(\r\n                    batchLayout.descriptorSetLayoutData,\r\n                    batchInfo,\r\n\r\n                    _setIndex[UpdateFrequency.PER_BATCH],\r\n                    shaderInfo,\r\n\r\n                    blockSizes,\r\n                );\r\n            }\r\n        }\r\n    }\r\n    { // instance\r\n        const instanceInfo = srcShaderInfo.descriptors[UpdateFrequency.PER_INSTANCE];\r\n        if (programData) {\r\n            if (fixedLocal) {\r\n                fixedInstanceDescriptorSetLayout = localDescriptorSetLayout;\r\n                populateLocalShaderInfo(instanceInfo, localDescriptorSetLayout, shaderInfo, blockSizes);\r\n            } else {\r\n                const perInstance = programData.layout.getSet(UpdateFrequency.PER_INSTANCE);\r\n                if (perInstance) {\r\n                    descriptorSets[UpdateFrequency.PER_INSTANCE] = perInstance.descriptorSetLayoutData;\r\n                    populateMergedShaderInfo(\r\n                        lg.valueNames,\r\n                        perInstance.descriptorSetLayoutData,\r\n                        _setIndex[UpdateFrequency.PER_INSTANCE],\r\n                        shaderInfo,\r\n                        blockSizes,\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            const instanceLayout = phaseLayouts.getSet(UpdateFrequency.PER_INSTANCE);\r\n            if (instanceLayout) {\r\n                descriptorSets[UpdateFrequency.PER_INSTANCE] = instanceLayout.descriptorSetLayoutData;\r\n                populateGroupedShaderInfo(\r\n                    instanceLayout.descriptorSetLayoutData,\r\n                    instanceInfo,\r\n\r\n                    _setIndex[UpdateFrequency.PER_INSTANCE],\r\n                    shaderInfo,\r\n\r\n                    blockSizes,\r\n                );\r\n            }\r\n        }\r\n    }\r\n    calculateFlattenedBinding(descriptorSets, fixedInstanceDescriptorSetLayout, shaderInfo);\r\n    shaderInfo.stages.push(new ShaderStage(ShaderStageFlagBit.VERTEX, ''));\r\n    shaderInfo.stages.push(new ShaderStage(ShaderStageFlagBit.FRAGMENT, ''));\r\n    return [shaderInfo, blockSizes];\r\n}\r\n\r\nexport function getGLSLSource (info: IProgramInfo, version: string): { vert: string, frag: string, compute?: string }  {\r\n    if (version === 'glsl1') return info.glsl1;\r\n    if (version === 'glsl3') return info.glsl3;\r\n    if (version === 'glsl4') return info.glsl4;\r\n    return { vert: '', frag: '' };\r\n}\r\n\r\nexport class WebProgramProxy implements ProgramProxy {\r\n    constructor (shader: Shader, pipelineStateIn: PipelineState | null = null) {\r\n        this.shader = shader;\r\n        this.pipelineState = pipelineStateIn;\r\n    }\r\n    get name (): string {\r\n        return this.shader.name;\r\n    }\r\n    readonly shader: Shader;\r\n    pipelineState: PipelineState | null = null;\r\n}\r\n\r\n// find name and type from local descriptor set info\r\nfunction getDescriptorNameAndType (source: IDescriptorSetLayoutInfo, binding: number): [string, Type] {\r\n    for (const name in source.layouts) {\r\n        const v = source.layouts[name];\r\n        if (v.binding === binding) {\r\n            assert(v.name === name);\r\n            let type = Type.UNKNOWN;\r\n            if (v instanceof UniformSamplerTexture) {\r\n                type = v.type;\r\n            } else if (v instanceof UniformStorageImage) {\r\n                type = v.type;\r\n            }\r\n            return [v.name, type];\r\n        }\r\n    }\r\n    error('descriptor not found');\r\n    return ['', Type.UNKNOWN];\r\n}\r\n\r\n// make DescriptorSetLayoutData from local descriptor set info\r\nexport function makeLocalDescriptorSetLayoutData (\r\n    lg: LayoutGraphData,\r\n    source: IDescriptorSetLayoutInfo,\r\n): DescriptorSetLayoutData {\r\n    const data = new DescriptorSetLayoutData();\r\n    for (const b of source.bindings) {\r\n        const [name, type] = getDescriptorNameAndType(source, b.binding);\r\n        const nameID = getOrCreateDescriptorID(lg, name);\r\n        const order = getDescriptorTypeOrder(b.descriptorType);\r\n        const block = new DescriptorBlockData(\r\n            order,\r\n            b.stageFlags,\r\n            b.count,\r\n            b.access,\r\n            b.viewDimension,\r\n            b.sampleType,\r\n            b.format,\r\n        );\r\n        block.offset = b.binding;\r\n        block.descriptors.push(new DescriptorData(nameID, type, b.count));\r\n        data.descriptorBlocks.push(block);\r\n        const binding = data.bindingMap.get(nameID);\r\n        if (binding !== undefined) {\r\n            error(`duplicate descriptor name '${name}'`);\r\n        }\r\n        data.bindingMap.set(nameID, b.binding);\r\n        const v = source.layouts[name];\r\n        if (v instanceof UniformBlock) {\r\n            data.uniformBlocks.set(nameID, v);\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n// make descriptor sets for ShaderProgramData (PerBatch, PerInstance)\r\nexport function buildProgramData (\r\n    programName: string,\r\n    srcShaderInfo: EffectAsset.IShaderInfo,\r\n    lg: LayoutGraphData,\r\n    phase: RenderPhaseData,\r\n    programData: ShaderProgramData,\r\n    fixedLocal: boolean,\r\n): void {\r\n    const programSets = programData.layout.getSets();\r\n    {\r\n        const perBatch = makeDescriptorSetLayoutData(\r\n            lg,\r\n            UpdateFrequency.PER_BATCH,\r\n            _setIndex[UpdateFrequency.PER_BATCH],\r\n            srcShaderInfo.descriptors[UpdateFrequency.PER_BATCH],\r\n        );\r\n        const setData = new DescriptorSetData(perBatch);\r\n        initializeDescriptorSetLayoutInfo(\r\n            setData.descriptorSetLayoutData,\r\n            setData.descriptorSetLayoutInfo,\r\n        );\r\n        programSets.set(UpdateFrequency.PER_BATCH, setData);\r\n    }\r\n    if (fixedLocal) {\r\n        const perInstance = makeLocalDescriptorSetLayoutData(lg, localDescriptorSetLayout);\r\n        const setData = new DescriptorSetData(perInstance);\r\n        initializeDescriptorSetLayoutInfo(\r\n            setData.descriptorSetLayoutData,\r\n            setData.descriptorSetLayoutInfo,\r\n        );\r\n        if (localDescriptorSetLayout.bindings.length !== setData.descriptorSetLayoutInfo.bindings.length) {\r\n            error('local descriptor set layout inconsistent');\r\n        } else {\r\n            for (let k = 0; k !== localDescriptorSetLayout.bindings.length; ++k) {\r\n                const b = localDescriptorSetLayout.bindings[k];\r\n                const b2 = setData.descriptorSetLayoutInfo.bindings[k];\r\n                if (b.binding !== b2.binding\r\n                    || b.descriptorType !== b2.descriptorType\r\n                    || b.count !== b2.count\r\n                    || b.stageFlags !== b2.stageFlags) {\r\n                    error('local descriptor set layout inconsistent');\r\n                }\r\n            }\r\n        }\r\n        programSets.set(UpdateFrequency.PER_INSTANCE, setData);\r\n    } else {\r\n        const perInstance = makeDescriptorSetLayoutData(\r\n            lg,\r\n            UpdateFrequency.PER_INSTANCE,\r\n            _setIndex[UpdateFrequency.PER_INSTANCE],\r\n            srcShaderInfo.descriptors[UpdateFrequency.PER_INSTANCE],\r\n        );\r\n        const setData = new DescriptorSetData(perInstance);\r\n        initializeDescriptorSetLayoutInfo(\r\n            setData.descriptorSetLayoutData,\r\n            setData.descriptorSetLayoutInfo,\r\n        );\r\n        programSets.set(UpdateFrequency.PER_INSTANCE, setData);\r\n    }\r\n    const shaderID = phase.shaderPrograms.length;\r\n    phase.shaderIndex.set(programName, shaderID);\r\n    phase.shaderPrograms.push(programData);\r\n}\r\n\r\n// get or create PerProgram gfx.DescriptorSetLayout\r\nexport function getOrCreateProgramDescriptorSetLayout (\r\n    device: Device,\r\n    lg: LayoutGraphData,\r\n    phaseID: number,\r\n    programName: string,\r\n    rate: UpdateFrequency,\r\n): DescriptorSetLayout {\r\n    assert(rate < UpdateFrequency.PER_PHASE);\r\n    const phase = lg.j<RenderPhaseData>(phaseID);\r\n    const programID = phase.shaderIndex.get(programName);\r\n    if (programID === undefined) {\r\n        return getEmptyDescriptorSetLayout();\r\n    }\r\n    const programData = phase.shaderPrograms[programID];\r\n    const layout = programData.layout.getSet(rate);\r\n    if (layout === undefined) {\r\n        return getEmptyDescriptorSetLayout();\r\n    }\r\n    if (layout.descriptorSetLayout) {\r\n        return layout.descriptorSetLayout;\r\n    }\r\n    layout.descriptorSetLayout = device.createDescriptorSetLayout(layout.descriptorSetLayoutInfo);\r\n\r\n    return layout.descriptorSetLayout;\r\n}\r\n\r\n// get PerProgram gfx.DescriptorSetLayout\r\nexport function getProgramDescriptorSetLayout (\r\n    device: Device,\r\n    lg: LayoutGraphData,\r\n    phaseID: number,\r\n    programName: string,\r\n    rate: UpdateFrequency,\r\n): DescriptorSetLayout | null {\r\n    assert(rate < UpdateFrequency.PER_PHASE);\r\n    const phase = lg.j<RenderPhaseData>(phaseID);\r\n    const programID = phase.shaderIndex.get(programName);\r\n    if (programID === undefined) {\r\n        return null;\r\n    }\r\n    const programData = phase.shaderPrograms[programID];\r\n    const layout = programData.layout.getSet(rate);\r\n    if (layout === undefined) {\r\n        return null;\r\n    }\r\n    if (layout.descriptorSetLayout) {\r\n        return layout.descriptorSetLayout;\r\n    }\r\n    layout.descriptorSetLayout = device.createDescriptorSetLayout(layout.descriptorSetLayoutInfo);\r\n\r\n    return layout.descriptorSetLayout;\r\n}\r\n\r\n// find shader program in LayoutGraphData\r\nexport function getEffectShader (\r\n    lg: LayoutGraphData,\r\n    effect: EffectAsset,\r\n    pass: EffectAsset.IPassInfo,\r\n): [number, number, number, EffectAsset.IShaderInfo | null, number] {\r\n    const programName = pass.program;\r\n    const passID = getCustomPassID(lg, pass.pass);\r\n    if (passID === INVALID_ID) {\r\n        error(`Invalid render pass, program: ${programName}`);\r\n        return [INVALID_ID, INVALID_ID, INVALID_ID, null, INVALID_ID];\r\n    }\r\n\r\n    const enableSubpass = pass.subpass && pass.subpass !== '' && ENABLE_SUBPASS;\r\n    const subpassID = enableSubpass ? getCustomSubpassID(lg, passID, pass.subpass!) : INVALID_ID;\r\n    if (enableSubpass && subpassID === INVALID_ID) {\r\n        error(`Invalid render subpass, program: ${programName}`);\r\n        return [INVALID_ID, INVALID_ID, INVALID_ID, null, INVALID_ID];\r\n    }\r\n\r\n    const phaseID = getCustomPhaseID(lg, subpassID === INVALID_ID ? passID : subpassID, pass.phase);\r\n    if (phaseID === INVALID_ID) {\r\n        error(`Invalid render phase, program: ${programName}`);\r\n        return [INVALID_ID, INVALID_ID, INVALID_ID, null, INVALID_ID];\r\n    }\r\n    let srcShaderInfo: EffectAsset.IShaderInfo | null = null;\r\n    let shaderID = INVALID_ID;\r\n    for (let i = 0; i < effect.shaders.length; ++i) {\r\n        const shaderInfo = effect.shaders[i];\r\n        if (shaderInfo.name === programName) {\r\n            srcShaderInfo = shaderInfo;\r\n            shaderID = i;\r\n            break;\r\n        }\r\n    }\r\n    return [passID, subpassID, phaseID, srcShaderInfo, shaderID];\r\n}\r\n\r\n// valid IShaderInfo is compatible\r\nexport function validateShaderInfo (srcShaderInfo: EffectAsset.IShaderInfo): number {\r\n    // source shader info\r\n    if (srcShaderInfo.descriptors === undefined) {\r\n        error(`No descriptors in shader: ${srcShaderInfo.name}, please reimport ALL effects`);\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport class WebProgramLibrary implements ProgramLibrary {\r\n    constructor (lg: LayoutGraphData) {\r\n        this.layoutGraph = lg;\r\n        for (const v of lg.v()) {\r\n            if (lg.h(LayoutGraphDataValue.RenderPhase, v)) {\r\n                this.phases.set(v, new ProgramGroup());\r\n            }\r\n        }\r\n    }\r\n    init (deviceIn: Device): void {\r\n        if (this.device === deviceIn) {\r\n            return;\r\n        }\r\n        this.device = deviceIn;\r\n\r\n        // update ubo\r\n        // tips: for compatibility with old version, when maxVertexUniformVectors is 128, maxJoints = 30\r\n        let maxJoints: number = Math.floor((this.device.capabilities.maxVertexUniformVectors - 38) / 3);\r\n        maxJoints = maxJoints < 256 ? maxJoints : 256;\r\n        UBOSkinning.initLayout(maxJoints);\r\n\r\n        // init layout graph\r\n        const lg = this.layoutGraph;\r\n        for (const v of lg.v()) {\r\n            const layout: PipelineLayoutData = lg.getLayout(v);\r\n            const sets = layout.getSets();\r\n            for (const [update, set] of sets) {\r\n                initializeDescriptorSetLayoutInfo(set.descriptorSetLayoutData, set.descriptorSetLayoutInfo);\r\n                set.descriptorSetLayout = this.device.createDescriptorSetLayout(set.descriptorSetLayoutInfo);\r\n                assert(!!set.descriptorSetLayout);\r\n                set.descriptorSet = this.device.createDescriptorSet(new DescriptorSetInfo(set.descriptorSetLayout));\r\n                assert(!!set.descriptorSet);\r\n            }\r\n        }\r\n\r\n        for (const v of lg.v()) {\r\n            if (!lg.h(LayoutGraphDataValue.RenderPhase, v)) {\r\n                continue;\r\n            }\r\n            const phaseID = v;\r\n            const subpassOrPassID = lg.getParent(phaseID);\r\n            const passLayout = lg.getLayout(subpassOrPassID);\r\n            const phaseLayout = lg.getLayout(phaseID);\r\n            const info = new PipelineLayoutInfo();\r\n            populatePipelineLayoutInfo(passLayout, UpdateFrequency.PER_PASS, info);\r\n            populatePipelineLayoutInfo(phaseLayout, UpdateFrequency.PER_PHASE, info);\r\n            populatePipelineLayoutInfo(phaseLayout, UpdateFrequency.PER_BATCH, info);\r\n            populatePipelineLayoutInfo(phaseLayout, UpdateFrequency.PER_INSTANCE, info);\r\n            const phase = lg.j<RenderPhaseData>(phaseID);\r\n            phase.pipelineLayout = this.device.createPipelineLayout(info);\r\n        }\r\n\r\n        // init local descriptor set\r\n        {\r\n            const localSetLayout = localDescriptorSetLayout;\r\n            this.localLayoutData = makeLocalDescriptorSetLayoutData(lg, localSetLayout);\r\n            const info = new DescriptorSetLayoutInfo();\r\n            initializeDescriptorSetLayoutInfo(this.localLayoutData, info);\r\n            this.localDescriptorSetLayout = this.device.createDescriptorSetLayout(info);\r\n            assert(!!this.localDescriptorSetLayout);\r\n\r\n            let numUniformBuffers = 0;\r\n            for (const block of this.localLayoutData.descriptorBlocks) {\r\n                if (block.type !== DescriptorTypeOrder.UNIFORM_BUFFER\r\n                && block.type !== DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER) {\r\n                    continue;\r\n                }\r\n                for (const d of block.descriptors) {\r\n                    numUniformBuffers += d.count;\r\n                }\r\n            }\r\n            assert(numUniformBuffers === 7); // 7 is currently max uniform binding\r\n        }\r\n\r\n        // generate constant macros string\r\n        generateConstantMacros(this.device, this.layoutGraph.constantMacros);\r\n    }\r\n    // add effect to database\r\n    addEffect (effect: EffectAsset): void {\r\n        const lg = this.layoutGraph;\r\n        for (const tech of effect.techniques) {\r\n            for (const pass of tech.passes) {\r\n                const programName = pass.program;\r\n                const [passID, subpassID, phaseID, srcShaderInfo] = getEffectShader(lg, effect, pass);\r\n                if (srcShaderInfo === null || validateShaderInfo(srcShaderInfo)) {\r\n                    error(`program: ${programName} not found`);\r\n                    continue;\r\n                }\r\n                assert(passID !== INVALID_ID && phaseID !== INVALID_ID);\r\n                const subpassOrPassID = subpassID === INVALID_ID ? passID : subpassID;\r\n                const passLayout = lg.getLayout(subpassOrPassID);\r\n                const phaseLayout = lg.getLayout(phaseID);\r\n\r\n                // programs\r\n                let group = this.phases.get(phaseID);\r\n                if (group === undefined) {\r\n                    group = new ProgramGroup();\r\n                    this.phases.set(phaseID, group);\r\n                }\r\n                const phasePrograms = group.programInfos;\r\n\r\n                // build program\r\n                const programInfo = makeProgramInfo(effect.name, srcShaderInfo);\r\n\r\n                // collect program descriptors\r\n                let programData: ShaderProgramData | null = null;\r\n                if (!this.mergeHighFrequency) {\r\n                    const phase = lg.j<RenderPhaseData>(phaseID);\r\n                    programData = new ShaderProgramData();\r\n                    buildProgramData(\r\n                        programName,\r\n                        srcShaderInfo,\r\n                        lg,\r\n                        phase,\r\n                        programData,\r\n                        this.fixedLocal,\r\n                    );\r\n                }\r\n\r\n                // shaderInfo and blockSizes\r\n                const [shaderInfo, blockSizes] = makeShaderInfo(\r\n                    lg,\r\n                    passLayout,\r\n                    phaseLayout,\r\n                    srcShaderInfo,\r\n                    programData,\r\n                    this.fixedLocal,\r\n                );\r\n\r\n                // overwrite programInfo\r\n                overwriteProgramBlockInfo(shaderInfo, programInfo);\r\n\r\n                // handle map\r\n                const handleMap = genHandles(shaderInfo);\r\n                // attributes\r\n                const attributes: Attribute[] = [];\r\n                programInfo.attributes.forEach((attr) => {\r\n                    attributes.push(new Attribute(attr.name, attr.format, attr.isNormalized, 0, attr.isInstanced, attr.location));\r\n                });\r\n                // create programInfo\r\n                const info = new ProgramInfo(programInfo, shaderInfo, attributes, blockSizes, handleMap);\r\n                phasePrograms.set(srcShaderInfo.name, info);\r\n            }\r\n        }\r\n    }\r\n    // precompile effect\r\n    precompileEffect (device: Device, effect: EffectAsset): void {\r\n        const lg = this.layoutGraph;\r\n        for (const tech of effect.techniques) {\r\n            for (const pass of tech.passes) {\r\n                const programName = pass.program;\r\n                const [passID, subpassID, phaseID, srcShaderInfo, shaderID] = getEffectShader(lg, effect, pass);\r\n                if (srcShaderInfo === null || validateShaderInfo(srcShaderInfo)) {\r\n                    error(`program: ${programName} not valid`);\r\n                    continue;\r\n                }\r\n                assert(passID !== INVALID_ID && phaseID !== INVALID_ID && shaderID !== INVALID_ID);\r\n                const combination = effect.combinations[shaderID];\r\n                if (!combination) {\r\n                    continue;\r\n                }\r\n                const defines = getCombinationDefines(combination);\r\n                defines.forEach(\r\n                    (defines) => this.getProgramVariant(device, phaseID, programName, defines),\r\n                );\r\n            }\r\n        }\r\n    }\r\n    // get IProgramInfo\r\n    getProgramInfo (phaseID: number, programName: string): IProgramInfo {\r\n        assert(phaseID !== INVALID_ID);\r\n        const group = this.phases.get(phaseID)!;\r\n        const info = group.programInfos.get(programName)!;\r\n        return info.programInfo;\r\n    }\r\n\r\n    // get gfx.ShaderInfo\r\n    getShaderInfo (phaseID: number, programName: string): ShaderInfo {\r\n        assert(phaseID !== INVALID_ID);\r\n        const group = this.phases.get(phaseID)!;\r\n        const info = group.programInfos.get(programName)!;\r\n        return info.shaderInfo;\r\n    }\r\n    // get shader key\r\n    getKey (phaseID: number, programName: string, defines: MacroRecord): string {\r\n        assert(phaseID !== INVALID_ID);\r\n        // get phase\r\n        const group = this.phases.get(phaseID);\r\n        if (group === undefined) {\r\n            error(`Invalid render phase, program: ${programName}`);\r\n            return '';\r\n        }\r\n        // get info\r\n        const info = group.programInfos.get(programName);\r\n        if (info === undefined) {\r\n            error(`Invalid program, program: ${programName}`);\r\n            return '';\r\n        }\r\n        return getVariantKey(info.programInfo, defines);\r\n    }\r\n    // get program variant\r\n    getProgramVariant (device: Device, phaseID: number, name: string, defines: MacroRecord, key: string | null = null): ProgramProxy | null {\r\n        Object.assign(defines, this.pipeline?.macros);\r\n        assert(phaseID !== INVALID_ID);\r\n        // get phase\r\n        const group = this.phases.get(phaseID);\r\n        if (group === undefined) {\r\n            error(`Invalid render phase, program: ${name}`);\r\n            return null;\r\n        }\r\n        // get info\r\n        const info = group.programInfos.get(name);\r\n        if (info === undefined) {\r\n            error(`Invalid program, program: ${name}`);\r\n            return null;\r\n        }\r\n        const programInfo = info.programInfo;\r\n        if (key === null) {\r\n            key = getVariantKey(programInfo, defines);\r\n        }\r\n\r\n        // try get program\r\n        const programHosts = group.programProxies;\r\n        const programHost = programHosts.get(key);\r\n        if (programHost !== undefined) {\r\n            return programHost;\r\n        }\r\n\r\n        // prepare variant\r\n        const macroArray = prepareDefines(defines, programInfo.defines);\r\n        const prefix = this.layoutGraph.constantMacros + programInfo.constantMacros\r\n            + macroArray.reduce((acc, cur): string => `${acc}#define ${cur.name} ${cur.value}\\n`, '');\r\n\r\n        let src = programInfo.glsl3;\r\n        const deviceShaderVersion = getDeviceShaderVersion(device);\r\n        if (deviceShaderVersion) {\r\n            src = programInfo[deviceShaderVersion];\r\n        } else {\r\n            errorID(16346);\r\n        }\r\n\r\n        // prepare shader info\r\n        const shaderInfo = info.shaderInfo;\r\n        if (src.compute) {\r\n            shaderInfo.stages[0].source = prefix + src.compute;\r\n            shaderInfo.stages[0].stage = ShaderStageFlagBit.COMPUTE;\r\n            shaderInfo.stages.length = 1;\r\n        } else {\r\n            shaderInfo.stages[0].source = prefix + src.vert;\r\n            shaderInfo.stages[1].source = prefix + src.frag;\r\n        }\r\n        shaderInfo.attributes = getActiveAttributes(programInfo, info.attributes, defines);\r\n        shaderInfo.name = getShaderInstanceName(name, macroArray);\r\n\r\n        // create shader\r\n        const shader = device.createShader(shaderInfo);\r\n\r\n        // create program host and register\r\n        const host = new WebProgramProxy(shader);\r\n        programHosts.set(key, host);\r\n\r\n        // create\r\n        return host;\r\n    }\r\n    // get material descriptor set layout\r\n    getMaterialDescriptorSetLayout (device: Device, phaseID: number, programName: string): DescriptorSetLayout {\r\n        if (this.mergeHighFrequency) {\r\n            assert(phaseID !== INVALID_ID);\r\n            const subpassOrPassID = this.layoutGraph.getParent(phaseID);\r\n            return getOrCreateDescriptorSetLayout(\r\n                this.layoutGraph,\r\n                subpassOrPassID,\r\n                phaseID,\r\n                UpdateFrequency.PER_BATCH,\r\n            );\r\n        }\r\n        return getOrCreateProgramDescriptorSetLayout(\r\n            device,\r\n            this.layoutGraph,\r\n            phaseID,\r\n            programName,\r\n            UpdateFrequency.PER_BATCH,\r\n        );\r\n    }\r\n    // get local descriptor set layout\r\n    getLocalDescriptorSetLayout (device: Device, phaseID: number, programName: string): DescriptorSetLayout {\r\n        if (this.mergeHighFrequency) {\r\n            assert(phaseID !== INVALID_ID);\r\n            const subpassOrPassID = this.layoutGraph.getParent(phaseID);\r\n            return getOrCreateDescriptorSetLayout(\r\n                this.layoutGraph,\r\n                subpassOrPassID,\r\n                phaseID,\r\n                UpdateFrequency.PER_INSTANCE,\r\n            );\r\n        }\r\n        return getOrCreateProgramDescriptorSetLayout(\r\n            device,\r\n            this.layoutGraph,\r\n            phaseID,\r\n            programName,\r\n            UpdateFrequency.PER_INSTANCE,\r\n        );\r\n    }\r\n    // get related uniform block sizes\r\n    getBlockSizes (phaseID: number, programName: string): number[] {\r\n        assert(phaseID !== INVALID_ID);\r\n        const group = this.phases.get(phaseID);\r\n        if (!group) {\r\n            error(`Invalid render phase, program: ${programName}`);\r\n            return [];\r\n        }\r\n        const info = group.programInfos.get(programName);\r\n        if (!info) {\r\n            error(`Invalid program, program: ${programName}`);\r\n            return [];\r\n        }\r\n        return info.blockSizes;\r\n    }\r\n    // get property handle map\r\n    getHandleMap (phaseID: number, programName: string): Record<string, number> {\r\n        assert(phaseID !== INVALID_ID);\r\n        const group = this.phases.get(phaseID);\r\n        if (!group) {\r\n            error(`Invalid render phase, program: ${programName}`);\r\n            return {};\r\n        }\r\n        const info = group.programInfos.get(programName);\r\n        if (!info) {\r\n            error(`Invalid program, program: ${programName}`);\r\n            return {};\r\n        }\r\n        return info.handleMap;\r\n    }\r\n    // get shader pipeline layout\r\n    getPipelineLayout (device: Device, phaseID: number, programName: string): PipelineLayout {\r\n        if (this.mergeHighFrequency) {\r\n            assert(phaseID !== INVALID_ID);\r\n            const layout = this.layoutGraph.j<RenderPhaseData>(phaseID);\r\n            return layout.pipelineLayout!;\r\n        }\r\n        const lg = this.layoutGraph;\r\n        const phase = lg.j<RenderPhaseData>(phaseID);\r\n        const programID = phase.shaderIndex.get(programName);\r\n        if (programID === undefined) {\r\n            return getEmptyPipelineLayout();\r\n        }\r\n        const programData = phase.shaderPrograms[programID];\r\n        if (programData.pipelineLayout) {\r\n            return programData.pipelineLayout;\r\n        }\r\n\r\n        // get pass\r\n        const subpassOrPassID = lg.getParent(phaseID);\r\n        if (subpassOrPassID === INVALID_ID) {\r\n            return getEmptyPipelineLayout();\r\n        }\r\n\r\n        // craete pipeline layout\r\n        const info = new PipelineLayoutInfo();\r\n        const passSet = getDescriptorSetLayout(\r\n            this.layoutGraph,\r\n            subpassOrPassID,\r\n            phaseID,\r\n            UpdateFrequency.PER_PASS,\r\n        );\r\n        if (passSet) {\r\n            info.setLayouts.push(passSet);\r\n        }\r\n        const phaseSet = getDescriptorSetLayout(\r\n            this.layoutGraph,\r\n            subpassOrPassID,\r\n            phaseID,\r\n            UpdateFrequency.PER_PHASE,\r\n        );\r\n        if (phaseSet) {\r\n            info.setLayouts.push(phaseSet);\r\n        }\r\n        const batchSet = getProgramDescriptorSetLayout(\r\n            device,\r\n            lg,\r\n            phaseID,\r\n            programName,\r\n            UpdateFrequency.PER_BATCH,\r\n        );\r\n        if (batchSet) {\r\n            info.setLayouts.push(batchSet);\r\n        }\r\n        const instanceSet = getProgramDescriptorSetLayout(\r\n            device,\r\n            lg,\r\n            phaseID,\r\n            programName,\r\n            UpdateFrequency.PER_INSTANCE,\r\n        );\r\n        if (instanceSet) {\r\n            info.setLayouts.push(instanceSet);\r\n        }\r\n        programData.pipelineLayout = device.createPipelineLayout(info);\r\n        return programData.pipelineLayout;\r\n    }\r\n    getProgramID (phaseID: number, programName: string): number {\r\n        return getProgramID(this.layoutGraph, phaseID, programName);\r\n    }\r\n    getDescriptorNameID (name: string): number {\r\n        return getDescriptorNameID(this.layoutGraph, name);\r\n    }\r\n    getDescriptorName (nameID: number): string {\r\n        return getDescriptorName(this.layoutGraph, nameID);\r\n    }\r\n    readonly layoutGraph: LayoutGraphData;\r\n    readonly phases: Map<number, ProgramGroup> = new Map<number, ProgramGroup>();\r\n    public mergeHighFrequency: boolean = false;\r\n    public fixedLocal: boolean = true;\r\n    public localLayoutData: DescriptorSetLayoutData = new DescriptorSetLayoutData();\r\n    public localDescriptorSetLayout: DescriptorSetLayout | null = null;\r\n    public pipeline: PipelineRuntime | null = null;\r\n    public device: Device | null = null;\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BasicPipeline, PipelineBuilder } from './pipeline';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport { RenderWindow } from '../../render-scene/core/render-window';\r\nimport { supportsR32FloatTexture } from '../define';\r\nimport { Format } from '../../gfx/base/define';\r\n\r\nexport { packRGBE } from '../../core/math/color';\r\n\r\n//-----------------------------------------------------------------\r\n// Editor preview begin\r\n//-----------------------------------------------------------------\r\nlet editorPipelineSettings: object | null = null;\r\nlet forceResize = false;\r\n\r\nexport function setEditorPipelineSettings (\r\n    settings: object | null,\r\n): void {\r\n    editorPipelineSettings = settings;\r\n    forceResize = true;\r\n}\r\n\r\nexport function getEditorPipelineSettings (): object | null {\r\n    return editorPipelineSettings;\r\n}\r\n\r\n//-----------------------------------------------------------------\r\n// Editor preview end\r\n//-----------------------------------------------------------------\r\n\r\nexport function forceResizeAllWindows (): void {\r\n    forceResize = true;\r\n}\r\n\r\nexport function defaultWindowResize (ppl: BasicPipeline, window: RenderWindow, width: number, height: number): void {\r\n    ppl.addRenderWindow(window.colorName, Format.BGRA8, width, height, window);\r\n    ppl.addDepthStencil(window.depthStencilName, Format.DEPTH_STENCIL, width, height);\r\n    // CSM\r\n    const id = window.renderWindowId;\r\n    const shadowFormat = supportsR32FloatTexture(ppl.device) ? Format.R32F : Format.RGBA8;\r\n    const shadowSize = ppl.pipelineSceneData.shadows.size;\r\n    ppl.addRenderTarget(`ShadowMap${id}`, shadowFormat, shadowSize.x, shadowSize.y);\r\n    ppl.addDepthStencil(`ShadowDepth${id}`, Format.DEPTH_STENCIL, shadowSize.x, shadowSize.y);\r\n}\r\n\r\nconst _resizedWindows: RenderWindow[] = [];\r\n\r\nexport function dispatchResizeEvents (cameras: Camera[], builder: PipelineBuilder, ppl: BasicPipeline): void {\r\n    if (!builder.windowResize) {\r\n        // No game window resize handler defined.\r\n        // Following old prodecure, do nothing\r\n        return;\r\n    }\r\n\r\n    // Resize all windows.\r\n    // Notice: A window might be resized multiple times with different cameras.\r\n    // User should avoid resource collision between different cameras.\r\n    for (const camera of cameras) {\r\n        if (!camera.window.isRenderWindowResized() && !forceResize) {\r\n            continue;\r\n        }\r\n\r\n        const width = Math.max(Math.floor(camera.window.width), 1);\r\n        const height = Math.max(Math.floor(camera.window.height), 1);\r\n\r\n        builder.windowResize(ppl, camera.window, camera, width, height);\r\n\r\n        _resizedWindows.push(camera.window);\r\n    }\r\n\r\n    // Reset resize flags\r\n    for (const window of _resizedWindows) {\r\n        window.setRenderWindowResizeHandled();\r\n    }\r\n\r\n    // Clear resized windows\r\n    _resizedWindows.length = 0;\r\n\r\n    // For editor preview\r\n    forceResize = false;\r\n}\r\n","/*\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport zlib from '../../../external/compression/zlib.min';\r\nimport { BasicPipeline, PipelineBuilder } from './pipeline';\r\nimport { WebPipeline } from './web-pipeline';\r\nimport { macro } from '../../core/platform/macro';\r\nimport { LayoutGraphData, loadLayoutGraphData } from './layout-graph';\r\nimport { BinaryInputArchive } from './binary-archive';\r\nimport { WebProgramLibrary } from './web-program-library';\r\nimport { Device } from '../../gfx';\r\nimport { initializeLayoutGraphData, terminateLayoutGraphData, getCustomPassID, getCustomPhaseID, getCustomSubpassID } from './layout-graph-utils';\r\nimport { ProgramLibrary } from './private';\r\nimport { forceResizeAllWindows } from './framework';\r\n\r\nlet _pipeline: WebPipeline | null = null;\r\n\r\nexport const INVALID_ID = 0xFFFFFFFF;\r\nconst defaultLayoutGraph = new LayoutGraphData();\r\n\r\nconst LAYOUT_HEADER_SIZE = 8;\r\n\r\nexport * from './types';\r\nexport * from './pipeline';\r\nexport * from './archive';\r\nexport * from './framework';\r\n\r\nexport const enableEffectImport = true;\r\nexport const programLib: ProgramLibrary = new WebProgramLibrary(defaultLayoutGraph);\r\n\r\nexport function createCustomPipeline (): BasicPipeline {\r\n    const layoutGraph = defaultLayoutGraph;\r\n\r\n    const ppl = new WebPipeline(layoutGraph);\r\n    const pplName = macro.CUSTOM_PIPELINE_NAME;\r\n    ppl.setCustomPipelineName(pplName);\r\n    (programLib as WebProgramLibrary).pipeline = ppl;\r\n    _pipeline = ppl;\r\n    return ppl;\r\n}\r\n\r\nexport const customPipelineBuilderMap = new Map<string, PipelineBuilder>();\r\n\r\nexport function setCustomPipeline (name: string, builder: PipelineBuilder): void {\r\n    customPipelineBuilderMap.set(name, builder);\r\n    forceResizeAllWindows();\r\n}\r\n\r\nexport function getCustomPipeline (name: string): PipelineBuilder {\r\n    let builder = customPipelineBuilderMap.get(name);\r\n    if (!builder) {\r\n        builder = customPipelineBuilderMap.get('Forward')!;\r\n    }\r\n    return builder;\r\n}\r\n\r\nexport function init (device: Device, arrayBuffer: ArrayBuffer | null): void {\r\n    if (arrayBuffer && arrayBuffer.byteLength >= LAYOUT_HEADER_SIZE) {\r\n        // On bytedance emulator, arrayBuffer might be Uint8Array\r\n        // Here we use uint8Array to erase the difference.\r\n        const uint8Array = new Uint8Array(arrayBuffer);\r\n        const header = new DataView(uint8Array.buffer, uint8Array.byteOffset, LAYOUT_HEADER_SIZE);\r\n        if (header.getUint32(0) === INVALID_ID) {\r\n            // Data is compressed\r\n            const inflator = new zlib.Inflate(new Uint8Array(uint8Array.buffer, uint8Array.byteOffset + LAYOUT_HEADER_SIZE));\r\n            const decompressed = inflator.decompress() as Uint8Array;\r\n            const readBinaryData = new BinaryInputArchive(decompressed.buffer, decompressed.byteOffset);\r\n            loadLayoutGraphData(readBinaryData, defaultLayoutGraph);\r\n        } else {\r\n            // Data is not compressed\r\n            const readBinaryData = new BinaryInputArchive(uint8Array.buffer, uint8Array.byteOffset);\r\n            loadLayoutGraphData(readBinaryData, defaultLayoutGraph);\r\n        }\r\n    }\r\n    initializeLayoutGraphData(device, defaultLayoutGraph);\r\n}\r\n\r\nexport function destroy (): void {\r\n    terminateLayoutGraphData(defaultLayoutGraph);\r\n}\r\n\r\nexport function getPassID (name: string | undefined): number {\r\n    return getCustomPassID(defaultLayoutGraph, name);\r\n}\r\n\r\nexport function getSubpassID (passID: number, name: string): number {\r\n    return getCustomSubpassID(defaultLayoutGraph, passID, name);\r\n}\r\n\r\nexport function getPhaseID (passID: number, name: string | number | undefined): number {\r\n    return getCustomPhaseID(defaultLayoutGraph, passID, name);\r\n}\r\n\r\nexport function completePhaseName (name: string | number | undefined): string {\r\n    if (typeof name === 'number') {\r\n        return name.toString();\r\n    } else if (typeof name === 'string') {\r\n        return name;\r\n    } else {\r\n        return 'default';\r\n    }\r\n}\r\n"],"names":["UpdateFrequency","camera","cameraId","cameraName","ppl","validPunctualLightsCulling","pipeline","shadow","pipelineSceneData","shadows","validPunctualLights","shadowInfo","reset","enabled","type","ShadowType","ShadowMap","shadowEnabled","n","m","maxReceived","length","light","LightType","SPOT","validLights","push","mainLight","scene","mapWidth","size","x","mapHeight","y","mainLightShadowNames","shadowFixedArea","buildShadowPass","csmLevel","csmSupported","i","l","passName","toString","spotLightShadowNames","ResourceResidency","QueueHint","ResourceDimension","ResourceFlags","SceneFlags","ParameterType","CONSTANTS","CBV","UAV","SRV","TABLE","SSV","exports","AccessType","LightingMode","NONE","DEFAULT","CLUSTERED","AttachmentType","RENDER_TARGET","DEPTH_STENCIL","SHADING_RATE","ClearValueType","FLOAT_TYPE","INT_TYPE","LightInfo","level","culledByLight","probe","this","prototype","ResolveFlags","COLOR","DEPTH","STENCIL","ResolvePair","source","target","resolveFlags","mode","mode1","ResolveMode","SAMPLE_ZERO","CopyPair","mipLevels","numSlices","sourceMostDetailedMip","sourceFirstSlice","sourcePlaneSlice","targetMostDetailedMip","targetFirstSlice","targetPlaneSlice","UploadPair","Uint8Array","MovePair","PipelineStatistics","numRenderPasses","numManagedTextures","totalManagedTextures","numUploadBuffers","numUploadBufferViews","numFreeUploadBuffers","numFreeUploadBufferViews","numDescriptorSets","numFreeDescriptorSets","numInstancingBuffers","numInstancingUniformBlocks","createPool","Constructor","RecyclePool","RenderCommonObjectPool","li","rp","cp","up","mp","ps","_proto7","createLightInfo","v","add","createResolvePair","createCopyPair","createUploadPair","createMovePair","createPipelineStatistics","ED","equals","rhs","OutE","_Symbol$iterator","Symbol","iterator","OutEI","_proto5","next","res","done","value","undefined","_Symbol$iterator3","InEI","_Symbol$iterator5","AdjI","graph","_proto9","getPath","g","N","paths","getParent","vertexName","path","findRelative","pseudo","names","split","curr","start","name","locateChild","GraphColor","NoTermination","terminate","getDefaultStartingVertex","VertexInfo","e","iter","depthFirstVisitImpl","u","visitor","color","func","srcE","ei","stack","Array","put","GRAY","discoverVertex","oe","back","pop","finishEdge","ev","examineEdge","vColor","get","WHITE","treeEdge","backEdge","forwardOrCrossEdge","BLACK","finishVertex","depthFirstSearch","startVertex","nv","_step2","_iterator2","_createForOfIteratorHelperLoose","initializeVertex","terminator","_step3","_iterator3","DefaultVisitor","_proto12","ReferenceGraphView","_proto13","edge","reference","parent","child","children","od","numChildren","resetColor","z","w","resetViewport","left","top","width","height","minDepth","maxDepth","ClearValue","RasterView","slotName","accessType","attachmentType","loadOp","storeOp","clearFlags","clearColor","shaderStageFlags","WRITE","LoadOp","LOAD","StoreOp","STORE","ClearFlagBit","ALL","Color","ShaderStageFlagBit","slotName1","slotID","ComputeView","clearValueType","clearValue","READ","plane","ResourceDesc","dimension","BUFFER","alignment","depthOrArraySize","format","Format","UNKNOWN","sampleCount","SampleCount","X1","textureFlags","TextureFlagBit","flags","viewType","TextureType","TEX2D","ResourceTraits","residency","MANAGED","RenderSwapchain","swapchain","isDepthStencil","renderWindow","currentID","numBackBuffers","generation","ResourceStates","states","AccessFlagBit","ManagedBuffer","buffer","fenceValue","PersistentBuffer","ManagedTexture","texture","PersistentTexture","ManagedResource","unused","Subpass","rasterViews","Map","computeViews","resolvePairs","clear","SubpassGraphVertex","o","SubpassGraph","_names","_subpasses","_proto14","_step","_iterator","values","ie","id","d","adj","keys","ne","numEdges","addVertex","subpass","vert","addEdge","getName","setName","getSubpass","RasterSubpass","subpassID","count","quality","viewport","Viewport","showStatistics","ComputeSubpass","RasterPass","attachmentIndexMap","textures","subpassGraph","versionName","version","hashValue","PersistentRenderPassAndFramebuffer","renderPass","framebuffer","clearColors","clearDepth","clearStencil","FormatView","SubresourceView","textureView","indexOrFirstMipLevel","numMipLevels","firstArraySlice","numArraySlices","firstPlane","numPlanes","ResourceGraphVertex","object","t","j","ResourceGraph","_descs","_traits","_states","_samplerInfo","_valueIndex","renderPasses","nextFenceValue","_proto21","_step4","_iterator4","desc","traits","sampler","set","getDesc","getTraits","getStates","getSampler","h","Error","visitVertex","managed","managedBuffer","managedTexture","persistentBuffer","persistentTexture","formatView","subresourceView","_step5","_iterator5","list","addReference","contains","key","has","vertex","find","ComputePass","ResolvePass","CopyPass","copyPairs","uploadPairs","MovePass","movePairs","RaytracePass","ClearView","RenderQueue","hint","phaseID","passLayoutID","RENDER_OPAQUE","SceneData","cullingFlags","shadingLight","Dispatch","material","passID","threadGroupCountX","threadGroupCountY","threadGroupCountZ","Blit","sceneFlags","blitType","models","RenderData","constants","buffers","samplers","custom","RenderGraphValue","RenderGraphVertex","c","p","RenderGraph","_layoutNodes","_data","_valid","index","sortedVertices","globalRenderData","_proto33","_step6","_iterator6","_step7","_iterator7","layout","data","valid","getLayout","setLayout","getData","getValid","setValid","rasterPass","rasterSubpass","computeSubpass","compute","resolve","copy","move","raytrace","queue","blit","dispatch","_step8","_iterator8","PipelineType","SubpassCapabilities","RenderGraphObjectPool","renderCommon","cv","rv","cv1","rd","rt","rs","rs1","mb","pb","mt","pt","mr","s","sg","rs2","cs","prpaf","fv","sv","rg","rp1","cp1","rp2","cv2","rq","sd","b","rd1","rg1","_proto34","createClearValue","createRasterView","createComputeView","createResourceDesc","createResourceTraits","createRenderSwapchain","createResourceStates","createManagedBuffer","createPersistentBuffer","createManagedTexture","createPersistentTexture","createManagedResource","createSubpass","createSubpassGraph","createRasterSubpass","createComputeSubpass","createRasterPass","createPersistentRenderPassAndFramebuffer","createFormatView","createSubresourceView","createResourceGraph","createComputePass","createResolvePass","createCopyPass","createMovePass","createRaytracePass","createClearView","createRenderQueue","createSceneData","createDispatch","createBlit","createRenderData","createRenderGraph","PipelineCapabilities","loadUniform","ar","loadUniformBlock","sz","binding","members","v1","Uniform","loadDescriptorSetLayoutBinding","descriptorType","stageFlags","loadDescriptorSetLayoutInfo","bindings","DescriptorSetLayoutBinding","Layout","isWebGPU","DescriptorData","descriptorID","Type","DescriptorBlockData","visibility","capacity","viewDimension","sampleType","MemoryAccessBit","READ_ONLY","ViewDimension","SampleType","FLOAT","offset","descriptors","DescriptorSetLayoutData","slot","descriptorBlocks","uniformBlocks","bindingMap","uniformBlockCapacity","samplerTextureCapacity","DescriptorSetData","descriptorSetLayoutData","descriptorSetLayout","descriptorSet","descriptorSetLayoutInfo","DescriptorSetLayoutInfo","PipelineLayoutData","descriptorSets","descriptorGroups","getSets","getSet","frequency","ShaderBindingData","descriptorBindings","ShaderLayoutData","layoutData","bindingData","TechniqueData","passes","EffectData","techniques","ShaderProgramData","pipelineLayout","RenderStageData","descriptorVisibility","RenderPhaseData","rootSignature","shaderPrograms","shaderIndex","LayoutGraphDataVertex","LayoutGraphData","_updateFrequencies","_layouts","valueNames","attributeIndex","constantIndex","shaderLayoutIndex","effects","constantMacros","update","getUpdate","setUpdate","renderStage","renderPhase","_step9","_iterator9","_step10","_iterator10","locate","absPath","locateRelative","loadDescriptorData","a","loadDescriptorBlockData","i1","loadDescriptorSetLayoutData","k1","UniformBlock","loadDescriptorSetData","loadPipelineLayoutData","loadShaderBindingData","loadShaderLayoutData","loadTechniqueData","loadEffectData","loadShaderProgramData","loadRenderStageData","loadRenderPhaseData","loadLayoutGraphData","numVertices","VectorGraphColorMap","colors","_proto","getUBOTypeCount","BOOL","INT","UINT","INT2","FLOAT2","UINT2","BOOL2","FLOAT3","BOOL3","UINT3","INT3","BOOL4","FLOAT4","UINT4","INT4","MAT2","MAT2X3","MAT3X2","MAT2X4","MAT4X2","MAT3","MAT3X4","MAT4X3","MAT4","AntiAliasing","shadowPass","_rangedDirLightBoundingBox","AABB","_tmpBoundingBox","sceneData","_sphere","geometry","create","spotLights","disableLightmap","node","globals","baked","position","range","sphereFrustum","frustum","sphereLights","pointLights","rangedDirLights","transform","getWorldMatrix","aabbFrustum","getLoadOpOfClearFlag","clearFlag","attachment","CLEAR","SkyBoxFlagValue","VALUE","getRenderArea","out","Rect","vp","DIRECTIONAL","CSMLevel","LEVEL_1","screenSpaceSignY","cclegacy","director","root","device","capabilities","Math","floor","fboW","fboH","area","shadowMapName","containsResource","supportsR32FloatTexture","R32F","RGBA8","addRenderTarget","addDepthStencil","updateRenderTarget","updateDepthStencil","addRenderPass","setViewport","DISCARD","addQueue","addScene","SHADOW_CASTER","OPAQUE_OBJECT","MASK","useLightFrustum","buildReflectionProbePass","faceIdx","renderArea","probeCamera","probePassRTName","probePassDSName","addRenderWindow","EXTERNAL","updateRenderWindow","probePass","passBuilder","lightInfo","addSceneOfCamera","REFLECTION_PROBE","updateCameraUBO","ShadowInfo","setter","skybox","setMat4","matView","worldMatrix","matProj","matProjInv","matViewProj","matViewProjInv","setVec4","Vec4","getCombineSignY","surfaceTransform","cos","toRadian","getRotationAngle","sin","shadingScale","exposure","isHDR","Camera","standardExposureValue","bindDescValue","Buffer","bindBuffer","Texture","bindTexture","Sampler","bindSampler","bindGlobalDesc","getDescBinding","descId","descData","block","DescBuffManager","bufferSize","numBuffers","currBuffIdx","currUniform","_root","Float32Array","bufferInfo","BufferInfo","BufferUsageBit","UNIFORM","TRANSFER_DST","MemoryUsageBit","HOST","DEVICE","createBuffer","_proto2","getCurrentBuffer","getTotalFrames","updateData","vals","updateBuffer","bindId","setData","buffsMap","currBindBuffs","layouts","getDescriptorSetDataFromLayout","layoutName","descLayout","webPip","stageId","layoutGraph","PER_PASS","updateGlobalDescBinding","sceneId","idxRD","updatePerPassUBO","getUniformBlock","lg","nodeId","nameID","getUniformOffset","uniform","uniformBlock","currCount","uniformBlockMap","ConstantBlockInfo","blockId","constantBlockMap","copyToConstantBuffer","val","isImparity","min","addConstantBuffer","currBlock","fill","updateGlobalDescBuffer","descKey","currDescBuff","updateConstantBlock","constantBuff","descriptorSetData","getBuffer","updateDefaultConstantBlock","user","_loop","_step8$value","constantBlock","_step13","currMemKey","from","_ref6","_iterator13","_step13$value2","_step9$value2","tex","getTexture","gpuTexture","gpuTextureView","_step10$value2","_step11","_iterator11","_step11$value2","_step12","_iterator12","_step12$value2","hashCombineKey","hashCombineStr","str","hash","charCodeAt","bool","SetLightUBO","bHDR","vec4Array","luminanceHDR","luminanceLDR","SPHERE","sphereLight","spotLight","POINT","pointLight","RANGED_DIRECTIONAL","rangedDirLight","illuminanceHDR","illuminanceLDR","UBOForwardLightEnum","LIGHT_POS_OFFSET","LIGHT_SIZE_RANGE_ANGLE_OFFSET","LIGHT_COLOR_OFFSET","useColorTemperature","tempRGB","colorTemperatureRGB","spotAngle","LIGHT_DIR_OFFSET","direction","LIGHT_BOUNDING_SIZE_VS_OFFSET","angleAttenuationStrength","right","scale","genHashValue","pass","_step14","hashCode","_iterator14","_step14$value2","raster","_step15","_iterator15","_step15$value2","computes","_step16","_iterator16","_uboVec","_uboVec3","Vec3","_uboCol","_matView","Mat4","_mulMatView","setTextureUBOView","cfg","reflectionMap","getGFXTexture","getSamplerInfo","setTexture","setSampler","envmap","builtinResMgr","diffuseMap","hasSampler","defaultSampler","hasTexture","defaultShadowTexture","setCameraUBOValues","_skybox$envmap","cameraUsage","shadowEnable","r","illuminance","ambient","skyColor","skyIllum","groundAlbedo","mipmapLevel","fog","colorTempRGB","colorArray","fogStart","fogEnd","fogDensity","fogTop","fogRange","fogAtten","nearClip","farClip","getClipSpaceMinz","window","DrawInstance","subModel","priority","depth","shaderID","passIndex","instancePool","CC_USE_RGBE_OUTPUT","getPassIndexFromLayout","phaseLayoutId","k","ProbeHelperQueue","probeMap","defaultId","rendering","getPhaseID","getPassID","applyMacro","patches","concat","onMacroPatchesStateChanged","removeMacro","filter","patch","addToProbeQueue","model","probeLayoutId","subModels","blendState","targets","blend","passIdx","bUseReflectPass","setShadowUBOLightView","Planar","csmLayers","packing","cap","matShadowView","matShadowProj","matShadowViewProj","near","far","levelCount","specialLayer","shadowNear","shadowFar","shadowCameraFar","shadowNormalBias","layer","layers","splitCameraNear","splitCameraFar","m10","m14","m11","m15","m00","m05","shadowSaturation","shadowPcf","shadowBias","invert","perspective","angle","clipSpaceMinZ","clipSpaceSignY","matShadowInvProj","clone","multiply","shadowColor","setColor","getPCFRadius","shadowMapSize","PCFType","HARD","SOFT","SOFT_2X","SOFT_4X","setShadowUBOView","getScene","renderScene","layerThreshold","m04","m08","m01","m09","m02","m06","csmAtlas","csmTransitionRange","shadowDistance","normalize","normal","distance","planeBias","setMathColor","WebSetter","_lg","_vertID","_currBlock","_currStage","_currFrequency","_currCount","_currConstant","_proto3","mat","idx","info","getConstantInfo","toArray","dataArr","constantID","setQuaternion","quat","Quat","currIdx","CoreColor","vec","setVec2","Vec2","setFloat","setArrayBuffer","arrayBuffer","setBuffer","num","setReadWriteBuffer","setReadWriteTexture","getParentLayout","parId","renderGraph","getCurrentLayout","setBuiltinCameraConstants","setBuiltinDirectionalLightFrustumConstants","setBuiltinSpotLightFrustumConstants","setBuiltinDirectionalLightConstants","setBuiltinSphereLightConstants","finalColor","luminance","setBuiltinSpotLightConstants","setBuiltinPointLightConstants","setBuiltinRangedDirectionalLightConstants","setCustomBehavior","_createClass","RenderDrawQueue","instances","_proto4","empty","subModelIdx","passPriority","modelPriority","shaderId","shaders","typedID","instance","sortOpaqueOrCutout","sort","lhs","sortTransparent","recordCommandBuffer","cmdBuffer","ds","dynamicOffsets","inputAssembler","shader","pso","PipelineStateManager","getOrCreatePipelineState","bindPipelineState","bindDescriptorSet","SetIndex","MATERIAL","GLOBAL","LOCAL","bindInputAssembler","draw","RenderInstancingQueue","passInstances","instanceBuffers","instanceBufferID","InstancedBuffer","instanceBuffer","merge","forEach","instancingCompareFn","uploadBuffers","entries","_step4$value2","bufferID","hasPendingModels","renderQueue","drawPass","lastPSO","deviceManager","gfxDevice","ia","RenderQueueQuery","frustumCulledResultID","lightBoundsCulledResultID","renderQueueTargetIn","renderQueueTarget","culledSourceIn","recordCommand","_renderPass","localDesc","_ia","probeQueue","opaqueQueue","transparentQueue","opaqueInstancingQueue","transparentInstancingQueue","lightByteOffset","recordCommands","offsets","OPAQUE","BLEND","INVALID_ID","getGfxDescriptorType","DescriptorType","UNIFORM_BUFFER","DYNAMIC_UNIFORM_BUFFER","SAMPLER_TEXTURE","SAMPLER","TEXTURE","STORAGE_BUFFER","DYNAMIC_STORAGE_BUFFER","STORAGE_IMAGE","INPUT_ATTACHMENT","error","getDescriptorTypeOrder","getCustomPassID","getCustomSubpassID","getCustomPhaseID","subpassOrPassID","_emptyDescriptorSetLayout","_emptyPipelineLayout","DEFAULT_UNIFORM_COUNTS","LIGHTS_PER_PASS","getUniformBlockSize","blockMembers","prevSize","GetTypeSize","UBOSkinning","LAYOUT","assert","SIZE","sortDescriptorBlocks","lhsIndex","JSON","parse","rhsIndex","updateFrequency","parameterType","sortDescriptorGroupBlocks","getOrCreateDescriptorID","newID","createDescriptorInfo","access","immutableSamplers","createDescriptorSetLayout","createGfxDescriptorSetsAndPipelines","createDescriptorSet","DescriptorSetInfo","getDescriptorBlockData","map","stringify","newBlock","getDescriptorGroupBlockData","getViewDimension","SAMPLER1D","TEXTURE1D","IMAGE1D","TEX1D","SAMPLER2D","TEXTURE2D","IMAGE2D","SAMPLER2D_ARRAY","TEXTURE2D_ARRAY","IMAGE2D_ARRAY","TEX2D_ARRAY","SAMPLER_CUBE","TEXTURE_CUBE","IMAGE_CUBE","TEXCUBE","SAMPLER3D","TEXTURE3D","IMAGE3D","TEX3D","makeDescriptorSetLayoutData","rate","blocks","cb","samplerTextures","samplerTexture","images","image","subpassInputs","subpassInput","flattenedBlocks","_step2$value2","ub","initializeDescriptorSetLayoutInfo","populatePipelineLayoutInfo","setLayouts","initializeLayoutGraphData","gfxAPI","API","WEBGPU","createPipelineLayout","PipelineLayoutInfo","sets","_step6$value2","warn","passLayout","phaseLayout","PER_PHASE","PER_BATCH","PER_INSTANCE","terminateLayoutGraphData","_step8$value2","destroy","getEmptyDescriptorSetLayout","getEmptyPipelineLayout","getOrCreateDescriptorSetLayout","getDescriptorSetLayout","getProgramID","programName","programID","getDescriptorNameID","getDescriptorName","CullingPools","frustumCullingKeyRecycle","FrustumCullingKey","frustumCullingsRecycle","FrustumCulling","lightBoundsCullingRecycle","LightBoundsCulling","lightBoundsCullingResultRecycle","LightBoundsCullingResult","lightBoundsCullingKeyRecycle","LightBoundsCullingKey","renderQueueRecycle","renderQueueQueryRecycle","REFLECTION_PROBE_DEFAULT_MASK","Layers","makeMaskExclude","BitMask","UI_2D","UI_3D","GIZMOS","EDITOR","SCENE_GIZMO","PROFILER","objIdMap","WeakMap","cullingKeys","objectCount","objectID","claze","computeCullingKey","castShadows","refId","lightLevel","reflectProbe","shadeLight","pSceneData","frustumCullingID","resultKeyIndex","resultIndex","makeRenderQueueKey","queueLayoutID","extractRenderQueueKey","parseInt","isNodeVisible","isModelVisible","visFlags","isVisible","isReflectProbeMask","transWorldBounds","isFrustumVisible","castShadow","modelWorldBounds","worldBounds","matLight","intersect","sceneCulling","camOrLightFrustum","lAABB","rAABB","skyboxModel","camSkyboxFlag","isCulledByLod","wBounds","probeType","ProbeType","CUBE","boundingBox","aabbWithAABB","_tempVec3","computeSortingDepth","subtract","center","worldPosition","dot","forward","addRenderObject","isDrawOpaqueOrMask","isDrawBlend","isDrawProbe","subModelCount","passCount","includes","is_blend","batchingScheme","BatchingSchemes","INSTANCING","context","rangedDirLightBoundingBox","lightAABB","SceneCulling","frustumCullings","frustumCullingResults","lightBoundsCullings","lightBoundsCullingResults","renderQueueIndex","renderQueues","renderQueueQueryIndex","cullingPools","numFrustumCulling","numLightBoundsCulling","numRenderQueues","enableLightCulling","kFilterMask","kDrawMask","kAllMask","_proto6","resetPool","buildRenderQueues","pplSceneData","collectCullingQueries","batchFrustumCulling","batchLightBoundsCulling","fillRenderQueues","getOrCreateLightBoundsCulling","_sceneData$shadingLig","queries","cullingQuery","cullNum","lightBoundsCullingID","cullingKey","getOrCreateFrustumCulling","getOrCreateRenderQueue","renderQueueKey","renderQueueID","targetID","queueID","renderQueueQuery","uploadInstancing","_getPhaseIdFromScene","renderQueueId","getBuiltinShadowFrustum","validFrustum","_step3$value2","frustomCulledResultID","executeSphereLightCulling","frustumCullingResult","lightBoundsCullingResult","aabb","modelBounds","executeSpotLightCulling","lightFrustum","executePointLightCulling","executeRangedDirectionalLightCulling","cullingID","_getModelsByCullingResults","_extractRenderQueueKe2","phaseLayoutID","isDrawShadowCaster","sourceModels","LightResource","cpuBuffer","programLibrary","elementSize","maxNumLights","resized","lightBuffer","firstLightBufferView","lights","lightIndex","init","programLib","deviceIn","instanceLayout","localLayoutData","attrID","uboOffsetAlignment","BufferViewInfo","BYTES_PER_ELEMENT","buildLights","addLight","query","tryUpdateRenderSceneLocalDescriptorSet","_step16$value2","_step17","_iterator17","_step18","_iterator18","prev","existingLightID","resize","prevCpuBuffer","lightID","buildLightBuffer","ResourceVisitor","resName","resourceUses","checkTexture","dTex","deviceTextures","_context$resourceGrap","resourceGraph","descWidth","descHeight","checkDimensions","actualWidth","actualHeight","createDeviceTex","_dTex","DeviceTexture","checkBuffer","dBuf","deviceBuffers","resID","createDeviceBuf","_dBuf","DeviceBuffer","DeviceResource","_name","_DeviceResource","_this","call","_texture","_swapchain","_framebuffer","_desc","_trait","resGraph","verID","Framebuffer","createTextureFromDesc","_inheritsLoose","usageFlags","COLOR_ATTACHMENT","TextureUsageBit","DEPTH_STENCIL_ATTACHMENT","SAMPLED","STORAGE","TRANSFER_SRC","reduce","acc","_ref","flag","bit","createTexture","TextureInfo","release","_this$framebuffer","_this$texture","isShadowMap","pipelinePool","renderGraphPool","_DeviceResource2","_this2","_buffer","calculateBufferUsage","INDIRECT","_ref2","usage","_this$_buffer","_vec4Array","BlitDesc","_isUpdate","_isGatherLight","_blit","_screenQuad","_stageDesc","_lightVolumeBuffer","_lightMeterScale","_lightBufferData","_createQuadInputAssembler","pipelineIAData","createScreenQuad","_gatherVolumeLights","_this3","cmdBuff","commandBuffer","maxLights","UBODeferredLight","elementLen","fieldLen","Sphere","processLight","isSpot","VOLUMETRIC_LIGHTING","createStageDescriptor","stageDescs","localSetLayout","lightVolumeBuffer","deferredLitsBufView","lightBufferData","UBOForwardLight","BINDING","UBOLocal","emptyLocalUBO","DeviceComputeQueue","_devicePass","_hint","_phaseID","_renderPhase","_descSetData","_layoutID","_isUpdateUBO","_isUploadInstance","_isUploadBatched","_queueId","preRecord","postRecord","devicePass","queueHint","queueId","record","COUNT","DeviceRenderQueue","_renderScenes","_graphQueue","_viewport","_scissor","_blitDesc","createBlitDesc","setScene","sceneID","deviceScene","pools","addDeviceScene","_this$_blitDesc","RenderPassLayoutInfo","layoutId","vertId","input","_resID","_stage","_layout","_inputName","_descriptorSet","layoutDesc","deviceTex","gfxTex","deviceBuf","gfxBuf","samplerInfo","descriptorName","bindDescriptor","COMPUTE_SHADER_WRITE","COMPUTE_SHADER_READ_OTHER","profilerViewport","renderPassArea","resourceVisitor","DeviceRenderPass","rasterID","_clearColor","_deviceQueues","_clearDepth","_clearStencil","_passID","_rasterID","_rasterPass","_layoutName","_idxOfRenderData","depAtt","DepthStencilAttachment","colorTexs","depthTex","_step5$value2","rasterV","resTex","resId","resFbo","visitResource","colAtt","ColorAttachment","description","barrier","getGeneralBarrier","GeneralBarrierInfo","COLOR_ATTACHMENT_WRITE","currCol","depthStoreOp","stencilStoreOp","depthLoadOp","stencilLoadOp","DEPTH_STENCIL_ATTACHMENT_WRITE","depthStencilTexture","colorAttachment","currTex","renderPassInfo","RenderPassInfo","colorAttachments","depthStencilAttachment","createRenderPass","_createFramebuffer","colorTexture","_proto8","addIdxOfRD","passDescriptorSet","_applyRenderLayout","stageName","getGlobalDescData","_applyViewport","beginPass","colorTextures","beginRenderPass","endPass","endRenderPass","_processRenderLayout","renderLayout","processRenderLayout","fbo","cols","createFramebuffer","FramebufferInfo","resetResource","_currFramebuffer$dept","_currFramebuffer$widt","_currFramebuffer$heig","_currFramebuffer$need","colTextures","currFramebuffer","currFBDepthTex","depTexture","currentWidth","currentHeight","resDesc","isInsideTexDestroy","some","colTex","getTextureHandle","needRebuild","ComputePassInfo","_id","_pass","applyInfo","DeviceComputePass","passInfo","_computeInfo","_proto10","sceneViewport","DeviceRenderScene","_currentQueue","_scene","_camera","_sceneData","_sceneID","_proto11","blitDesc","lightResource","culling","_record3D","passId","_recordUI","batches","batch","visible","_showProfiler","rect","profiler","passShowStatistics","profilerDesc","profilerDescriptorSet","submodel","setScissor","_recordBlit","getShaderVariant","screenIa","screenQuad","quadIA","stageDesc","_updateGlobal","indexOfRD","_updateRenderData","_context$passDescript","isUpdateUBO","rasterId","passRenderData","queueRenderData","sceneRenderData","queueViewport","scissor","_geometryRenderer","rqQuery","graphSceneData","isProbe","GEOMETRY","geometryRenderer","render","ExecutorPools","deviceQueuePool","computeQueuePool","passPool","deviceScenePool","addDeviceQueue","addComputeQueue","quadRect","BlitInfo","_pipelineIAData","_context","_width","_height","_deferredLitsBufView","_localUBO","_stageDescs","vb","_genQuadVertexData","SurfaceTransform","IDENTITY","quadVB","_createLightVolumes","UBOLocalEnum","totalSize","ceil","minX","maxX","minY","maxY","_ref3","vbData","fillVertices","x1","y1","u1","x2","y2","u2","v2","x3","y3","u3","v3","x4","y4","u4","v4","ROTATE_90","ROTATE_180","ROTATE_270","inputAssemblerData","PipelineInputAssemblerData","vbStride","vbSize","VERTEX","ibStride","Uint16Array","ibSize","quadIB","INDEX","indices","attributes","Attribute","RG32F","createInputAssembler","InputAssemblerInfo","ExecutorContext","devicePasses","cullCamera","legacyCC","Executor","_visitor","_proto15","_removeDeviceResource","deletes","deviceTexs","trait","_i","_deletes","deletesBuff","deviceBuffs","_i2","_deletesBuff","execute","begin","RenderVisitor","graphView","colorMap","end","submit","_step17$value2","_step18$value2","BaseRenderVisitor","dispatchID","currPass","currQueue","_proto16","_isRasterPass","isComputePass","isDispatch","_isQueue","_isScene","_isBlit","applyID","PreRenderVisitor","_BaseRenderVisitor","_proto17","passHash","computeInfo","_step19","_iterator19","upload","resBuffers","gfxBuffer","byteLength","deviceQueue","layoutID","_value$material","psoInfo","PipelineStateInfo","bindPoint","PipelineBindPoint","COMPUTE","createPipelineState","gx","gy","gz","DispatchInfo","PostRenderVisitor","_BaseRenderVisitor2","_proto18","_DefaultVisitor","_this4","_preVisitor","_postVisitor","_graphView","_colorMap","_proto19","gv","readViews","PassVisitor","_currPass","_resVisitor","_isCopyPass","_isCompute","_isDispatch","_isShadowMap","_getSceneData","_useResourceInfo","resContext","resourceContext","useContext","rasters","_step$value2","PERSISTENT","ResourceUseContext","_fetchValidPass","outputId","outputName","validPass","readName","vertID","rasterName","computeName","cViews","resUseContext","currUseComputes","pair","PassManagerVisitor","_passVisitor","_resId","_passManagerVis","dependency","CompilerContext","Compiler","_resourceGraph","_pipeline","_layoutGraph","ResourceManagerVisitor","compile","_DefaultVisitor2","MEMORYLESS","_samplerPointInfo","SamplerInfo","Filter","Address","CLAMP","PipelinePool","renderData","computePass","sceneBuilder","WebSceneBuilder","renderPassBuilder","WebRenderPassBuilder","getPipelineSceneData","computeQueueBuilder","WebComputeQueueBuilder","renderQueueBuilder","WebRenderQueueBuilder","renderSubpassBuilder","WebRenderSubpassBuilder","computePassBuilder","WebComputePassBuilder","renderCommonObjectPool","createColor","createSamplerInfo","minFilter","magFilter","mipFilter","addressU","addressV","addressW","maxAnisotropy","cmpFunc","LINEAR","WRAP","ComparisonFunc","ALWAYS","getTextureType","arraySize","TEX1D_ARRAY","getResourceDimension","emptyMaterial","Material","emptyRenderData","_WebSetter","_renderGraph","optCamera","NON_BUILTIN","_WebSetter2","_queue","lightTarget","CullingFlags","DEBUG","passOrSubpassId","UI","addProfiler","addFullscreenQuad","addCameraQuad","addDraw3D","addDraw2D","blitID","clearRenderTarget","clearView","currViewport","addCustomCommand","_WebSetter3","_subpass","setCustomShaderStages","depthSlotName","stencilSlotName","stencil","addTexture","addStorageBuffer","addStorageImage","queueBuilder","enable","_WebSetter4","_this5","setVersion","view","resolveRenderTarget","resolveDepthStencil","_addComputeResource","_this$_pass$computeVi","addRenderSubpass","result","RENDER_TRANSPARENT","_WebSetter5","_this6","addDispatch","_WebSetter6","_this7","addMaterialTexture","_this$_pass$computeVi2","WebMovePassBuilder","addPair","WebCopyPassBuilder","WebPipeline","_WebSetter7","_this8","globalDSManager","_usesDeferredPipeline","_copyPassMat","_device","_defaultSampler","_profilerDescriptorSet","_macros","_pipelineSceneData","PipelineSceneData","_constantMacros","_lightingMode","_profiler","_cameras","_resourceUses","_compiler","_executor","_customPipelineName","_globalDescSetData","_combineSignY","addCustomBuffer","addCustomTexture","tryAddRenderWindowDepthStencil","depthStencilName","addDepthStencilImpl","BACKBUFFER","samples","updateStorageBuffer","updateDepthStencilImpl","updateStorageTexture","updateShadingRateTexture","addBuffer","updateResource","addExternalTexture","updateExternalTexture","textureType","updateTexture","addResource","addResolvePass","addComputePass","addUploadPass","addCopyPass","targetName","tarVerId","currRaster","_generateConstantMacros","getFormatFeatures","RGBA32F","FormatFeatureBit","SAMPLED_TEXTURE","maxVertexUniformVectors","maxFragmentUniformVectors","hasFeature","Feature","INPUT_ATTACHMENT_BENEFIT","systemInfo","os","OS","ANDROID","isBrowser","macro","ENABLE_WEBGL_HIGHP_STRUCT_VALUES","JOINT_UNIFORM_CAPACITY","setCustomPipelineName","getGlobalDescriptorSetData","_initCombineSignY","_compileMaterial","initialize","effectName","tryCompile","activate","setMacroBool","ENABLE_FLOAT_OUTPUT","supportsRGBA16HalfFloatTexture","isFloat","setMacroInt","isLinear","WEBGL","CSM_UNIFORM_VECTORS","GLOBAL_UNIFORM_VECTORS","usesDeferredPipeline","_this$_pipelineSceneD","getMacroString","getMacroInt","getMacroBool","verId","setMacroString","onGlobalPipelineStateChanged","builder","getCustomPipeline","CUSTOM_PIPELINE_NAME","forceResizeAllWindows","beginSetup","endSetup","sc","addStorageTexture","addShadingRateTexture","R8UI","beginFrame","buildRenderPipeline","endFrame","_this$renderGraph","_applySize","cameras","_this9","newWidth","newHeight","max","decideProfilerCamera","addBuiltinReflectionProbePass","reflectionProbeManager","internal","probes","getProbes","needRender","PLANAR","realtimePlanarTexture","addRenderPassImpl","_updateRasterPassConstants","addMultisampleRenderPass","shaderName","freq","shadingWidth","shadingHeight","cumulativeTime","frameTime","debugView","debugPackVec","singleMode","DebugViewCompositeType","DIRECT_DIFFUSE","MAX_BIT_COUNT","isCompositeModeEnabled","pow","lightingWithAlbedo","csmLayerColoration","BASIC","getDefaultShadowTexture","MAX_BLOOM_FILTER_PASS_NUM","BinaryOutputArchive","dataView","DataView","newSize","reserve","setUint8","setFloat64","requiredSize","newCapacity","prevBuffer","slice","BinaryInputArchive","byteOffset","getUint8","getFloat64","String","fromCharCode","apply","ProgramInfo","programInfo","shaderInfo","blockSizes","handleMap","ProgramGroup","programInfos","programProxies","_setIndex","makeProgramInfo","populateMacros","findBinding","overwriteShaderSourceBinding","code","samplerExp","samplerIter","exec","_findBinding2","replaceStr","replace","blockExp","blockIter","_findBinding4","accessStr","endStr","overwriteShaderProgramBinding","getDeviceShaderVersion","glsl4","frag","overwriteProgramBlockInfo","found","src","populateGroupedShaderInfo","descriptorInfo","descriptorBlock","getSize","UniformSamplerTexture","UniformSampler","UniformTexture","UniformStorageBuffer","memoryAccess","UniformStorageImage","UniformInputAttachment","populateMergedShaderInfo","_step20","_iterator20","_step21","_iterator21","_step22","_iterator22","_step23","_iterator23","READ_WRITE","_step24","_iterator24","_step25","_iterator25","populateLocalShaderInfo","bd","DESCRIPTOR_BUFFER_TYPE","console","_loop2","DESCRIPTOR_SAMPLER_TYPE","getIDescriptorSetLayoutInfoUniformBlockCapacity","_step26","_iterator26","getIDescriptorSetLayoutInfoSamplerTextureCapacity","_step27","_iterator27","setFlattenedUniformBlockBinding","setOffsets","_step28","_iterator28","flattened","setFlattenedSamplerTextureBinding","uniformBlockCapacities","_step29","_iterator29","calculateFlattenedBinding","fixedInstanceDescriptorSetLayout","_descriptorSets$Updat","_descriptorSets$Updat2","_descriptorSets$Updat3","_descriptorSets$Updat4","passCapacity","phaseCapacity","batchCapacity","instanceCapacity","phaseOffset","instanceOffset","batchOffset","uniformBlockOffsets","_descriptorSets$Updat5","_descriptorSets$Updat6","_descriptorSets$Updat7","samplerTextureOffsets","makeShaderInfo","passLayouts","phaseLayouts","srcShaderInfo","programData","fixedLocal","ShaderInfo","batchInfo","perBatch","batchLayout","instanceInfo","localDescriptorSetLayout","perInstance","stages","ShaderStage","FRAGMENT","WebProgramProxy","pipelineStateIn","pipelineState","getDescriptorNameAndType","makeLocalDescriptorSetLayoutData","_step30","_iterator30","_getDescriptorNameAnd2","order","buildProgramData","phase","programSets","b2","getOrCreateProgramDescriptorSetLayout","getProgramDescriptorSetLayout","getEffectShader","effect","program","enableSubpass","validateShaderInfo","WebProgramLibrary","phases","mergeHighFrequency","_step31","_iterator31","maxJoints","initLayout","_step32","_iterator32","_step36","_iterator36","_step36$value2","_step33","_iterator33","_step34","numUniformBuffers","_iterator34","_step35","_iterator35","addEffect","_step37","_iterator37","_step38","tech","_loop3","_getEffectShader","group","phasePrograms","_makeShaderInfo","genHandles","attr","isNormalized","isInstanced","location","_iterator38","precompileEffect","_step39","_iterator39","_step40","_loop4","_getEffectShader2","combination","combinations","getCombinationDefines","defines","getProgramVariant","_iterator40","getProgramInfo","getShaderInfo","getKey","getVariantKey","_this$pipeline","Object","assign","macros","programHosts","programHost","macroArray","prepareDefines","prefix","cur","glsl3","deviceShaderVersion","errorID","stage","getActiveAttributes","getShaderInstanceName","createShader","host","getMaterialDescriptorSetLayout","getLocalDescriptorSetLayout","getBlockSizes","getHandleMap","getPipelineLayout","passSet","phaseSet","batchSet","instanceSet","editorPipelineSettings","forceResize","_resizedWindows","defaultLayoutGraph","customPipelineBuilderMap","setCustomPipeline","SYNC","ASYNC","pplName","colorName","BGRA8","renderWindowId","shadowFormat","shadowSize","windowResize","isRenderWindowResized","setRenderWindowResizeHandled","uint8Array","getUint32","decompressed","zlib","Inflate","decompress","settings"],"mappings":"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"}