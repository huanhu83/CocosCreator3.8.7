{"version":3,"file":"legacy-pipeline.js","sources":["../../../cocos/rendering/scene-culling.ts","../../../cocos/rendering/global-descriptor-set-manager.ts","../../../cocos/rendering/pipeline-ubo.ts","../../../cocos/rendering/render-stage.ts","../../../cocos/rendering/render-flow.ts","../../../cocos/rendering/render-pipeline.ts","../../../cocos/rendering/enum.ts","../../../cocos/rendering/pipeline-serialization.ts","../../../cocos/rendering/deprecated.ts","../../../cocos/rendering/render-queue.ts","../../../cocos/rendering/render-instanced-queue.ts","../../../cocos/rendering/render-additive-light-queue.ts","../../../cocos/rendering/planar-shadow-queue.ts","../../../cocos/rendering/ui-phase.ts","../../../cocos/rendering/forward/forward-stage.ts","../../../cocos/rendering/forward/forward-flow.ts","../../../cocos/rendering/render-shadow-map-batched-queue.ts","../../../cocos/rendering/shadow/shadow-stage.ts","../../../cocos/rendering/shadow/shadow-flow.ts","../../../cocos/rendering/render-reflection-probe-queue.ts","../../../cocos/rendering/reflection-probe/reflection-probe-stage.ts","../../../cocos/rendering/reflection-probe/reflection-probe-flow.ts","../../../cocos/rendering/forward/forward-pipeline.ts","../../../cocos/rendering/deferred/deferred-pipeline-scene-data.ts","../../../cocos/rendering/deferred/gbuffer-stage.ts","../../../cocos/rendering/deferred/lighting-stage.ts","../../../cocos/rendering/deferred/postprocess-stage.ts","../../../cocos/rendering/deferred/bloom-stage.ts","../../../cocos/rendering/deferred/main-flow.ts","../../../cocos/rendering/deferred/deferred-pipeline.ts","../../../exports/legacy-pipeline.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { Camera, CameraUsage, SkyBoxFlagValue } from '../render-scene/scene/camera';\r\nimport { Vec3, Pool, geometry, cclegacy, warnID } from '../core';\r\nimport { PipelineUBO } from './pipeline-ubo';\r\nimport { IRenderObject, UBOShadowEnum } from './define';\r\nimport { ShadowType, CSMOptimizationMode } from '../render-scene/scene/shadows';\r\nimport { PipelineSceneData } from './pipeline-scene-data';\r\nimport { ShadowLayerVolume } from './shadow/csm-layers';\r\nimport { AABB } from '../core/geometry';\r\n\r\nconst _tempVec3 = new Vec3();\r\nconst _sphere = geometry.Sphere.create(0, 0, 0, 1);\r\nconst _rangedDirLightBoundingBox = new AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\r\nconst _tmpBoundingBox = new AABB();\r\n\r\nconst roPool = new Pool<IRenderObject>((): IRenderObject => ({ model: null!, depth: 0 }), 128);\r\n\r\nfunction getRenderObject (model: Model, camera: Camera): IRenderObject {\r\n    let depth = 0;\r\n    if (model.node) {\r\n        Vec3.subtract(_tempVec3, model.worldBounds ? model.worldBounds.center : model.node.worldPosition, camera.position);\r\n        depth = Vec3.dot(_tempVec3, camera.forward);\r\n    }\r\n    const ro = roPool.alloc();\r\n    ro.model = model;\r\n    ro.depth = depth;\r\n    return ro;\r\n}\r\n\r\nexport function validPunctualLightsCulling (sceneData: PipelineSceneData, camera: Camera): void {\r\n    const validPunctualLights = sceneData.validPunctualLights;\r\n    validPunctualLights.length = 0;\r\n\r\n    const { spotLights } = camera.scene!;\r\n    const disableLightmap = camera.node.scene.globals.disableLightmap;\r\n    for (let i = 0; i < spotLights.length; i++) {\r\n        const light = spotLights[i];\r\n        if (light.baked && !disableLightmap) {\r\n            continue;\r\n        }\r\n\r\n        geometry.Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n        if (geometry.intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n\r\n    const { sphereLights } = camera.scene!;\r\n    for (let i = 0; i < sphereLights.length; i++) {\r\n        const light = sphereLights[i];\r\n        if (light.baked && !disableLightmap) {\r\n            continue;\r\n        }\r\n        geometry.Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n        if (geometry.intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n\r\n    const { pointLights } = camera.scene!;\r\n    for (let i = 0; i < pointLights.length; i++) {\r\n        const light = pointLights[i];\r\n        if (light.baked) {\r\n            continue;\r\n        }\r\n        geometry.Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n        if (geometry.intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n\r\n    const { rangedDirLights } = camera.scene!;\r\n    for (let i = 0; i < rangedDirLights.length; i++) {\r\n        const light = rangedDirLights[i];\r\n        AABB.transform(_tmpBoundingBox, _rangedDirLightBoundingBox, light.node!.getWorldMatrix());\r\n        if (geometry.intersect.aabbFrustum(_tmpBoundingBox, camera.frustum)) {\r\n            validPunctualLights.push(light);\r\n        }\r\n    }\r\n    // in jsb, std::vector is not synchronized, so we need to assign it manually\r\n    sceneData.validPunctualLights = validPunctualLights;\r\n}\r\n\r\nexport function shadowCulling (camera: Camera, sceneData: PipelineSceneData, layer: ShadowLayerVolume): void {\r\n    const scene = camera.scene!;\r\n    const mainLight = scene.mainLight!;\r\n    const csmLayers = sceneData.csmLayers;\r\n    const csmLayerObjects = csmLayers.layerObjects;\r\n    const dirLightFrustum = layer.validFrustum;\r\n    const dirShadowObjects = layer.shadowObjects;\r\n    dirShadowObjects.length = 0;\r\n    const visibility = camera.visibility;\r\n\r\n    for (let i = csmLayerObjects.length - 1; i >= 0; i--) {\r\n        const obj = csmLayerObjects.array[i];\r\n        if (!obj) {\r\n            csmLayerObjects.fastRemove(i);\r\n            continue;\r\n        }\r\n        const model = obj.model;\r\n        if (!model || !model.enabled || !model.node) {\r\n            csmLayerObjects.fastRemove(i);\r\n            continue;\r\n        }\r\n        if (((visibility & model.node.layer) !== model.node.layer) && (!(visibility & model.visFlags))) {\r\n            csmLayerObjects.fastRemove(i);\r\n            continue;\r\n        }\r\n        if (!model.worldBounds || !model.castShadow) {\r\n            csmLayerObjects.fastRemove(i);\r\n            continue;\r\n        }\r\n        const accurate = geometry.intersect.aabbFrustum(model.worldBounds, dirLightFrustum);\r\n        if (!accurate) {\r\n            continue;\r\n        }\r\n        dirShadowObjects.push(obj);\r\n        if (layer.level < mainLight.csmLevel) {\r\n            if (mainLight.csmOptimizationMode === CSMOptimizationMode.RemoveDuplicates\r\n                    && geometry.intersect.aabbFrustumCompletelyInside(model.worldBounds, dirLightFrustum)) {\r\n                csmLayerObjects.fastRemove(i);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function sceneCulling (sceneData: PipelineSceneData, pipelineUBO: PipelineUBO, camera: Camera): void {\r\n    const scene = camera.scene!;\r\n    const mainLight = scene.mainLight;\r\n    const shadows = sceneData.shadows;\r\n    const skybox = sceneData.skybox;\r\n    const csmLayers = sceneData.csmLayers;\r\n\r\n    const renderObjects = sceneData.renderObjects;\r\n    roPool.freeArray(renderObjects); renderObjects.length = 0;\r\n\r\n    const castShadowObjects = csmLayers.castShadowObjects;\r\n    castShadowObjects.length = 0;\r\n    const csmLayerObjects = csmLayers.layerObjects;\r\n    csmLayerObjects.clear();\r\n\r\n    if (shadows.enabled) {\r\n        pipelineUBO.updateShadowUBORange(UBOShadowEnum.SHADOW_COLOR_OFFSET, shadows.shadowColor);\r\n        if (shadows.type === ShadowType.ShadowMap) {\r\n            // update CSM layers\r\n            if (mainLight && mainLight.node) {\r\n                csmLayers.update(sceneData, camera);\r\n            }\r\n        }\r\n    }\r\n\r\n    if ((camera.clearFlag & SkyBoxFlagValue.VALUE)) {\r\n        if (skybox.enabled && skybox.model) {\r\n            renderObjects.push(getRenderObject(skybox.model, camera));\r\n        } else if (camera.cameraUsage !== CameraUsage.EDITOR && camera.cameraUsage !== CameraUsage.SCENE_VIEW) {\r\n            warnID(15100, camera.name!);\r\n        }\r\n    }\r\n\r\n    const models = scene.models;\r\n    const visibility = camera.visibility;\r\n\r\n    function enqueueRenderObject (model: Model): void {\r\n        // filter model by view visibility\r\n        if (model.enabled) {\r\n            if (scene.isCulledByLod(camera, model)) {\r\n                return;\r\n            }\r\n\r\n            if (model.castShadow) {\r\n                castShadowObjects.push(getRenderObject(model, camera));\r\n                csmLayerObjects.push(getRenderObject(model, camera));\r\n            }\r\n\r\n            if (model.node && ((visibility & model.node.layer) === model.node.layer)\r\n                 || (visibility & model.visFlags)) {\r\n                // frustum culling\r\n                if (model.worldBounds && !geometry.intersect.aabbFrustum(model.worldBounds, camera.frustum)) {\r\n                    return;\r\n                }\r\n\r\n                renderObjects.push(getRenderObject(model, camera));\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < models.length; i++) {\r\n        enqueueRenderObject(models[i]);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Device, BufferUsageBit, MemoryUsageBit, BufferInfo, Filter, Address, Sampler, DescriptorSet,\r\n    DescriptorSetInfo, Buffer, Texture, DescriptorSetLayoutInfo, DescriptorSetLayout, SamplerInfo } from '../gfx';\r\nimport { Light } from '../render-scene/scene/light';\r\nimport { UBOShadow, globalDescriptorSetLayout, PipelineGlobalBindings, UBOShadowEnum } from './define';\r\n\r\nconst _samplerLinearInfo = new SamplerInfo(\r\n    Filter.LINEAR,\r\n    Filter.LINEAR,\r\n    Filter.NONE,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n\r\nconst _samplerPointInfo = new SamplerInfo(\r\n    Filter.POINT,\r\n    Filter.POINT,\r\n    Filter.NONE,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n    Address.CLAMP,\r\n);\r\n\r\nexport class GlobalDSManager {\r\n    private declare _device: Device;\r\n    private _descriptorSetMap: Map<Light, DescriptorSet> = new Map();\r\n    private declare _globalDescriptorSet: DescriptorSet;\r\n    private declare _descriptorSetLayout: DescriptorSetLayout;\r\n    private declare _linearSampler: Sampler;\r\n    private declare _pointSampler: Sampler;\r\n\r\n    get descriptorSetMap (): Map<Light, DescriptorSet> {\r\n        return this._descriptorSetMap;\r\n    }\r\n\r\n    // TODO: Future extensions of PCSS require search depth to compute the penumbra, which requires linear sampling\r\n    get linearSampler (): Sampler {\r\n        return this._linearSampler;\r\n    }\r\n\r\n    // TODO: For the use of hard and soft, point sampling is required\r\n    get pointSampler (): Sampler {\r\n        return this._pointSampler;\r\n    }\r\n\r\n    get descriptorSetLayout (): DescriptorSetLayout {\r\n        return this._descriptorSetLayout;\r\n    }\r\n\r\n    // apply layoutGraph descriptorSet\r\n    set globalDescriptorSet (val: DescriptorSet) {\r\n        this._globalDescriptorSet = val;\r\n    }\r\n\r\n    get globalDescriptorSet (): DescriptorSet {\r\n        return this._globalDescriptorSet;\r\n    }\r\n\r\n    constructor (device: Device) {\r\n        this._device = device;\r\n\r\n        this._linearSampler = this._device.getSampler(_samplerLinearInfo);\r\n        this._pointSampler = this._device.getSampler(_samplerPointInfo);\r\n\r\n        const layoutInfo = new DescriptorSetLayoutInfo(globalDescriptorSetLayout.bindings);\r\n        this._descriptorSetLayout = this._device.createDescriptorSetLayout(layoutInfo);\r\n\r\n        this._globalDescriptorSet = this._device.createDescriptorSet(new DescriptorSetInfo(this._descriptorSetLayout));\r\n    }\r\n\r\n    regenLayout (): void {\r\n        const layoutInfo = new DescriptorSetLayoutInfo(globalDescriptorSetLayout.bindings);\r\n        this._descriptorSetLayout = this._device.createDescriptorSetLayout(layoutInfo);\r\n\r\n        this._globalDescriptorSet = this._device.createDescriptorSet(new DescriptorSetInfo(this._descriptorSetLayout));\r\n    }\r\n\r\n    /**\r\n     * @en Bind buffer for all descriptorSets, so that all created descriptorSet buffer are consistent\r\n     * @zh 为所有的 descriptorSet 绑定 buffer，使得所有已创建的 descriptorSet buffer 保持一致\r\n     * @param binding The target binding.\r\n     * @param buffer The buffer to be bound.\r\n     */\r\n    public bindBuffer (binding: number, buffer: Buffer): void {\r\n        this._globalDescriptorSet.bindBuffer(binding, buffer);\r\n        const it = this._descriptorSetMap.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            const descriptorSet = res.value;\r\n            descriptorSet.bindBuffer(binding, buffer);\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Bind sampler for all descriptorSets, so that all created descriptorSet sampler are consistent\r\n     * @zh 为所有的 descriptorSet 绑定 sampler，使得所有已创建的 descriptorSet sampler 保持一致\r\n     * @param binding The target binding.\r\n     * @param sampler The sampler to be bound.\r\n     */\r\n    public bindSampler (binding: number, sampler: Sampler): void {\r\n        this._globalDescriptorSet.bindSampler(binding, sampler);\r\n        const it = this._descriptorSetMap.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            const descriptorSet = res.value;\r\n            descriptorSet.bindSampler(binding, sampler);\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Bind texture for all descriptorSets, so that all created descriptorSet texture are consistent\r\n     * @zh 为所有的 descriptorSet 绑定 texture，使得所有已创建的 descriptorSet texture 保持一致\r\n     * @param binding The target binding.\r\n     * @param texture The texture to be bound.\r\n     */\r\n    public bindTexture (binding: number, texture: Texture): void {\r\n        this._globalDescriptorSet.bindTexture(binding, texture);\r\n        const it = this._descriptorSetMap.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            const descriptorSet = res.value;\r\n            descriptorSet.bindTexture(binding, texture);\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Update all descriptorSet\r\n     * @zh 更新所有的 descriptorSet\r\n     */\r\n    public update (): void {\r\n        this._globalDescriptorSet.update();\r\n        const it = this._descriptorSetMap.values();\r\n        let res = it.next();\r\n        while (!res.done) {\r\n            const descriptorSet = res.value;\r\n            descriptorSet.update();\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The layout of all created descriptorSets in buffer, sampler, and texture (except shadow) is consistent with the globalDescriptorSet\r\n     * @zh 所有创建出来的 descriptorSet 在 buffer、 sampler、 texture（shadow 除外）的布局与 globalDescriptorSet 保持一致\r\n     * @param idx Specify index creation\r\n     * @return descriptorSet\r\n     */\r\n    public getOrCreateDescriptorSet (light: Light): DescriptorSet | undefined {\r\n        const device = this._device;\r\n\r\n        // The global descriptorSet is managed by the pipeline and binds the buffer\r\n        if (!this._descriptorSetMap.has(light)) {\r\n            const globalDescriptorSet = this._globalDescriptorSet;\r\n            const descriptorSet = device.createDescriptorSet(new DescriptorSetInfo(this._descriptorSetLayout));\r\n            this._descriptorSetMap.set(light, descriptorSet);\r\n\r\n            // Create & Sync ALL UBO Buffer, Texture, Sampler\r\n            for (let i = PipelineGlobalBindings.UBO_GLOBAL; i < PipelineGlobalBindings.COUNT; i++) {\r\n                descriptorSet.bindBuffer(i, globalDescriptorSet.getBuffer(i));\r\n                descriptorSet.bindSampler(i, globalDescriptorSet.getSampler(i));\r\n                descriptorSet.bindTexture(i, globalDescriptorSet.getTexture(i));\r\n            }\r\n\r\n            const shadowUBO = device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n                UBOShadowEnum.SIZE,\r\n                UBOShadowEnum.SIZE,\r\n            ));\r\n            descriptorSet.bindBuffer(UBOShadow.BINDING, shadowUBO);\r\n\r\n            descriptorSet.update();\r\n        }\r\n\r\n        return this._descriptorSetMap.get(light);\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._descriptorSetLayout.destroy();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { UBOGlobal, UBOShadow, UBOCamera, UBOCameraEnum, UNIFORM_SHADOWMAP_BINDING,\r\n    supportsR32FloatTexture, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, UBOCSM, isEnableEffect,\r\n    getDefaultShadowTexture,\r\n    UBOShadowEnum,\r\n    UBOGlobalEnum,\r\n    UBOCSMEnum } from './define';\r\nimport { Device, BufferInfo, BufferUsageBit, MemoryUsageBit, DescriptorSet } from '../gfx';\r\nimport { Camera } from '../render-scene/scene/camera';\r\nimport { Mat4, Vec3, Vec4, Color, toRadian, cclegacy } from '../core';\r\nimport { PipelineRuntime } from './custom/pipeline';\r\nimport { CSMLevel, PCFType, Shadows, ShadowType } from '../render-scene/scene/shadows';\r\nimport { Light, LightType } from '../render-scene/scene/light';\r\nimport { DirectionalLight, SpotLight } from '../render-scene/scene';\r\nimport { RenderWindow } from '../render-scene/core/render-window';\r\nimport { DebugViewCompositeType } from './debug-view';\r\nimport type { Root } from '../root';\r\n\r\nconst _matShadowView = new Mat4();\r\nconst _matShadowProj = new Mat4();\r\nconst _matShadowViewProj = new Mat4();\r\nconst _vec4ShadowInfo = new Vec4();\r\nconst _lightDir = new Vec4(0.0, 0.0, 1.0, 0.0);\r\nconst _tempVec3 = new Vec3();\r\n\r\nconst mat4ToArray = Mat4.toArray;\r\nconst vec4ToArray = Vec4.toArray;\r\nconst colorToArray = Color.toArray;\r\n\r\nexport class PipelineUBO {\r\n    public static updateGlobalUBOView (window: RenderWindow, bufferView: Float32Array): void {\r\n        const director = cclegacy.director;\r\n        const root = director.root as Root;\r\n        const fv = bufferView;\r\n\r\n        const shadingWidth = Math.floor(window.width);\r\n        const shadingHeight = Math.floor(window.height);\r\n\r\n        // update UBOGlobal\r\n        fv[UBOGlobalEnum.TIME_OFFSET] = root.cumulativeTime;\r\n        fv[UBOGlobalEnum.TIME_OFFSET + 1] = root.frameTime;\r\n        fv[UBOGlobalEnum.TIME_OFFSET + 2] = director.getTotalFrames();\r\n        fv[UBOGlobalEnum.TIME_OFFSET + 3] = root.cumulativeTime - Math.floor(root.frameTime);\r\n\r\n        fv[UBOGlobalEnum.SCREEN_SIZE_OFFSET] = shadingWidth;\r\n        fv[UBOGlobalEnum.SCREEN_SIZE_OFFSET + 1] = shadingHeight;\r\n        fv[UBOGlobalEnum.SCREEN_SIZE_OFFSET + 2] = 1.0 / shadingWidth;\r\n        fv[UBOGlobalEnum.SCREEN_SIZE_OFFSET + 3] = 1.0 / shadingHeight;\r\n\r\n        fv[UBOGlobalEnum.NATIVE_SIZE_OFFSET] = shadingWidth;\r\n        fv[UBOGlobalEnum.NATIVE_SIZE_OFFSET + 1] = shadingHeight;\r\n        fv[UBOGlobalEnum.NATIVE_SIZE_OFFSET + 2] = 1.0 / fv[UBOGlobalEnum.NATIVE_SIZE_OFFSET];\r\n        fv[UBOGlobalEnum.NATIVE_SIZE_OFFSET + 3] = 1.0 / fv[UBOGlobalEnum.NATIVE_SIZE_OFFSET + 1];\r\n\r\n        if (cclegacy.internal.reflectionProbeManager) {\r\n            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\r\n            fv[UBOGlobalEnum.PROBE_INFO_OFFSET] = cclegacy.internal.reflectionProbeManager.getMaxProbeId() + 1;\r\n        }\r\n\r\n        const debugView = root.debugView;\r\n        for (let i = 0; i <= 3; i++) {\r\n            fv[UBOGlobalEnum.DEBUG_VIEW_MODE_OFFSET + i] = 0.0;\r\n        }\r\n        if (debugView.isEnabled()) {\r\n            fv[UBOGlobalEnum.DEBUG_VIEW_MODE_OFFSET] = debugView.singleMode as number;\r\n\r\n            for (let i = DebugViewCompositeType.DIRECT_DIFFUSE as number; i < (DebugViewCompositeType.MAX_BIT_COUNT as unknown as number); i++) {\r\n                const offset = i >> 3;\r\n                const bit = i % 8;\r\n                fv[UBOGlobalEnum.DEBUG_VIEW_MODE_OFFSET + 1 + offset] += (debugView.isCompositeModeEnabled(i) ? 1.0 : 0.0) * (10.0 ** bit);\r\n            }\r\n\r\n            fv[UBOGlobalEnum.DEBUG_VIEW_MODE_OFFSET + 3] += (debugView.lightingWithAlbedo ? 1.0 : 0.0) * (10.0 ** 6.0);\r\n            fv[UBOGlobalEnum.DEBUG_VIEW_MODE_OFFSET + 3] += (debugView.csmLayerColoration ? 1.0 : 0.0) * (10.0 ** 7.0);\r\n        }\r\n    }\r\n\r\n    public static updateCameraUBOView (\r\n        pipeline: PipelineRuntime,\r\n        bufferView: Float32Array,\r\n        camera: Camera,\r\n    ): void {\r\n        const scene = camera.scene ? camera.scene : cclegacy.director.getScene().renderScene;\r\n        const mainLight = scene.mainLight as DirectionalLight;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        const ambient = sceneData.ambient;\r\n        const skybox = sceneData.skybox;\r\n        const fog = sceneData.fog;\r\n        const shadowInfo = sceneData.shadows;\r\n        const cv = bufferView;\r\n        const exposure = camera.exposure;\r\n        const isHDR = sceneData.isHDR;\r\n\r\n        // update camera ubo\r\n        cv[UBOCameraEnum.SCREEN_SCALE_OFFSET] = sceneData.shadingScale;\r\n        cv[UBOCameraEnum.SCREEN_SCALE_OFFSET + 1] = sceneData.shadingScale;\r\n        cv[UBOCameraEnum.SCREEN_SCALE_OFFSET + 2] = 1.0 / cv[UBOCameraEnum.SCREEN_SCALE_OFFSET];\r\n        cv[UBOCameraEnum.SCREEN_SCALE_OFFSET + 3] = 1.0 / cv[UBOCameraEnum.SCREEN_SCALE_OFFSET + 1];\r\n\r\n        cv[UBOCameraEnum.EXPOSURE_OFFSET] = exposure;\r\n        cv[UBOCameraEnum.EXPOSURE_OFFSET + 1] = 1.0 / exposure;\r\n        cv[UBOCameraEnum.EXPOSURE_OFFSET + 2] = isHDR ? 1.0 : 0.0;\r\n        cv[UBOCameraEnum.EXPOSURE_OFFSET + 3] = 1.0 / Camera.standardExposureValue;\r\n\r\n        if (mainLight) {\r\n            const shadowEnable = (mainLight.shadowEnabled && shadowInfo.type === ShadowType.ShadowMap) ? 1.0 : 0.0;\r\n            const mainLightDir = mainLight.direction;\r\n            _lightDir.set(mainLightDir.x, mainLightDir.y, mainLightDir.z, shadowEnable);\r\n            vec4ToArray(cv, _lightDir, UBOCameraEnum.MAIN_LIT_DIR_OFFSET);\r\n            Vec3.toArray(cv, mainLight.color, UBOCameraEnum.MAIN_LIT_COLOR_OFFSET);\r\n            if (mainLight.useColorTemperature) {\r\n                const colorTempRGB = mainLight.colorTemperatureRGB;\r\n                cv[UBOCameraEnum.MAIN_LIT_COLOR_OFFSET] *= colorTempRGB.x;\r\n                cv[UBOCameraEnum.MAIN_LIT_COLOR_OFFSET + 1] *= colorTempRGB.y;\r\n                cv[UBOCameraEnum.MAIN_LIT_COLOR_OFFSET + 2] *= colorTempRGB.z;\r\n            }\r\n\r\n            if (isHDR) {\r\n                cv[UBOCameraEnum.MAIN_LIT_COLOR_OFFSET + 3] = mainLight.illuminance * exposure;\r\n            } else {\r\n                cv[UBOCameraEnum.MAIN_LIT_COLOR_OFFSET + 3] = mainLight.illuminance;\r\n            }\r\n        } else {\r\n            _lightDir.set(0, 0, 1, 0);\r\n            vec4ToArray(cv, _lightDir, UBOCameraEnum.MAIN_LIT_DIR_OFFSET);\r\n            vec4ToArray(cv, Vec4.ZERO, UBOCameraEnum.MAIN_LIT_COLOR_OFFSET);\r\n        }\r\n\r\n        const skyColor = ambient.skyColor;\r\n        if (isHDR) {\r\n            skyColor.w = ambient.skyIllum * exposure;\r\n        } else {\r\n            skyColor.w = ambient.skyIllum;\r\n        }\r\n        cv[UBOCameraEnum.AMBIENT_SKY_OFFSET + 0] = skyColor.x;\r\n        cv[UBOCameraEnum.AMBIENT_SKY_OFFSET + 1] = skyColor.y;\r\n        cv[UBOCameraEnum.AMBIENT_SKY_OFFSET + 2] = skyColor.z;\r\n        cv[UBOCameraEnum.AMBIENT_SKY_OFFSET + 3] = skyColor.w;\r\n        cv[UBOCameraEnum.AMBIENT_GROUND_OFFSET + 0] = ambient.groundAlbedo.x;\r\n        cv[UBOCameraEnum.AMBIENT_GROUND_OFFSET + 1] = ambient.groundAlbedo.y;\r\n        cv[UBOCameraEnum.AMBIENT_GROUND_OFFSET + 2] = ambient.groundAlbedo.z;\r\n        cv[UBOCameraEnum.AMBIENT_GROUND_OFFSET + 3] = skybox.envmap ? skybox.envmap?.mipmapLevel : 1.0;\r\n\r\n        mat4ToArray(cv, camera.matView, UBOCameraEnum.MAT_VIEW_OFFSET);\r\n        mat4ToArray(cv, camera.node.worldMatrix, UBOCameraEnum.MAT_VIEW_INV_OFFSET);\r\n        Vec3.toArray(cv, camera.position, UBOCameraEnum.CAMERA_POS_OFFSET);\r\n\r\n        mat4ToArray(cv, camera.matProj, UBOCameraEnum.MAT_PROJ_OFFSET);\r\n        mat4ToArray(cv, camera.matProjInv, UBOCameraEnum.MAT_PROJ_INV_OFFSET);\r\n        mat4ToArray(cv, camera.matViewProj, UBOCameraEnum.MAT_VIEW_PROJ_OFFSET);\r\n        mat4ToArray(cv, camera.matViewProjInv, UBOCameraEnum.MAT_VIEW_PROJ_INV_OFFSET);\r\n        cv[UBOCameraEnum.CAMERA_POS_OFFSET + 3] = this.getCombineSignY();\r\n\r\n        cv[UBOCameraEnum.SURFACE_TRANSFORM_OFFSET] = camera.surfaceTransform;\r\n        cv[UBOCameraEnum.SURFACE_TRANSFORM_OFFSET + 1] = camera.cameraUsage;\r\n        cv[UBOCameraEnum.SURFACE_TRANSFORM_OFFSET + 2] = Math.cos(toRadian(sceneData.skybox.getRotationAngle()));\r\n        cv[UBOCameraEnum.SURFACE_TRANSFORM_OFFSET + 3] = Math.sin(toRadian(sceneData.skybox.getRotationAngle()));\r\n\r\n        const colorTempRGB = fog.colorArray;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_COLOR_OFFSET] = colorTempRGB.x;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_COLOR_OFFSET + 1] = colorTempRGB.y;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_COLOR_OFFSET + 2] = colorTempRGB.z;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_COLOR_OFFSET + 3] = colorTempRGB.z;\r\n\r\n        cv[UBOCameraEnum.GLOBAL_FOG_BASE_OFFSET] = fog.fogStart;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_BASE_OFFSET + 1] = fog.fogEnd;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_BASE_OFFSET + 2] = fog.fogDensity;\r\n\r\n        cv[UBOCameraEnum.GLOBAL_FOG_ADD_OFFSET] = fog.fogTop;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_ADD_OFFSET + 1] = fog.fogRange;\r\n        cv[UBOCameraEnum.GLOBAL_FOG_ADD_OFFSET + 2] = fog.fogAtten;\r\n\r\n        cv[UBOCameraEnum.NEAR_FAR_OFFSET] = camera.nearClip;\r\n        cv[UBOCameraEnum.NEAR_FAR_OFFSET + 1] = camera.farClip;\r\n        cv[UBOCameraEnum.NEAR_FAR_OFFSET + 2] = camera.getClipSpaceMinz();\r\n\r\n        cv[UBOCameraEnum.VIEW_PORT_OFFSET] = sceneData.shadingScale * camera.window.width * camera.viewport.x;\r\n        cv[UBOCameraEnum.VIEW_PORT_OFFSET + 1] = sceneData.shadingScale * camera.window.height * camera.viewport.y;\r\n        cv[UBOCameraEnum.VIEW_PORT_OFFSET + 2] = sceneData.shadingScale * camera.window.width * camera.viewport.z;\r\n        cv[UBOCameraEnum.VIEW_PORT_OFFSET + 3] = sceneData.shadingScale * camera.window.height * camera.viewport.w;\r\n    }\r\n\r\n    public static getPCFRadius (shadowInfo: Shadows, mainLight: DirectionalLight): number {\r\n        const shadowMapSize = shadowInfo.size.x;\r\n        switch (mainLight.shadowPcf) {\r\n        case PCFType.HARD:\r\n            return 0.0;\r\n        case PCFType.SOFT:\r\n            return 1.0  / (shadowMapSize * 0.5);\r\n        case PCFType.SOFT_2X:\r\n            return 2.0  / (shadowMapSize * 0.5);\r\n        case PCFType.SOFT_4X:\r\n            return 3.0  / (shadowMapSize * 0.5);\r\n        default:\r\n        }\r\n        return 0.0;\r\n    }\r\n\r\n    public static updatePlanarNormalAndDistance (shadowInfo: Shadows, shadowUBO: Float32Array): void {\r\n        Vec3.normalize(_tempVec3, shadowInfo.normal);\r\n        shadowUBO[UBOShadowEnum.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 0] = _tempVec3.x;\r\n        shadowUBO[UBOShadowEnum.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 1] = _tempVec3.y;\r\n        shadowUBO[UBOShadowEnum.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 2] = _tempVec3.z;\r\n        shadowUBO[UBOShadowEnum.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 3] = -shadowInfo.distance;\r\n    }\r\n\r\n    public static updateShadowUBOView (\r\n        pipeline: PipelineRuntime,\r\n        shadowBufferView: Float32Array,\r\n        csmBufferView: Float32Array,\r\n        camera: Camera,\r\n    ): void {\r\n        const device = pipeline.device;\r\n        const mainLight = camera.scene!.mainLight;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        const shadowInfo = sceneData.shadows;\r\n        const csmLayers = sceneData.csmLayers;\r\n        const sv = shadowBufferView;\r\n        const cv = csmBufferView;\r\n        const csmSupported = sceneData.csmSupported;\r\n        const packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;\r\n\r\n        if (mainLight && shadowInfo.enabled) {\r\n            if (shadowInfo.type === ShadowType.ShadowMap) {\r\n                if (mainLight.shadowEnabled) {\r\n                    if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !csmSupported) {\r\n                        const matShadowView = csmLayers.specialLayer.matShadowView;\r\n                        const matShadowProj = csmLayers.specialLayer.matShadowProj;\r\n                        const matShadowViewProj = csmLayers.specialLayer.matShadowViewProj;\r\n                        let near = 0.1;\r\n                        let far = 0;\r\n                        let levelCount = 0;\r\n                        if (mainLight.shadowFixedArea) {\r\n                            near = mainLight.shadowNear;\r\n                            far = mainLight.shadowFar;\r\n                            levelCount = 0;\r\n                        } else {\r\n                            far = csmLayers.specialLayer.shadowCameraFar;\r\n                            levelCount = 1;\r\n                        }\r\n\r\n                        mat4ToArray(sv, matShadowView, UBOShadowEnum.MAT_LIGHT_VIEW_OFFSET);\r\n\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowProj.m10;\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowProj.m14;\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowProj.m11;\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowProj.m15;\r\n\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 0] = matShadowProj.m00;\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 1] = matShadowProj.m05;\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 2] = 1.0 / matShadowProj.m00;\r\n                        sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 3] = 1.0 / matShadowProj.m05;\r\n\r\n                        mat4ToArray(sv, matShadowViewProj, UBOShadowEnum.MAT_LIGHT_VIEW_PROJ_OFFSET);\r\n\r\n                        _vec4ShadowInfo.set(near, far, 0, 1.0 - mainLight.shadowSaturation);\r\n                        vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);\r\n\r\n                        _vec4ShadowInfo.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, levelCount);\r\n                        vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);\r\n                    } else {\r\n                        const layerThreshold = this.getPCFRadius(shadowInfo, mainLight);\r\n                        for (let i = 0; i < mainLight.csmLevel; i++) {\r\n                            const layer = csmLayers.layers[i];\r\n                            const matShadowView = layer.matShadowView;\r\n                            _vec4ShadowInfo.set(matShadowView.m00, matShadowView.m04, matShadowView.m08, layerThreshold);\r\n                            vec4ToArray(cv, _vec4ShadowInfo, UBOCSMEnum.CSM_VIEW_DIR_0_OFFSET + 4 * i);\r\n                            _vec4ShadowInfo.set(matShadowView.m01, matShadowView.m05, matShadowView.m09, layer.splitCameraNear);\r\n                            vec4ToArray(cv, _vec4ShadowInfo, UBOCSMEnum.CSM_VIEW_DIR_1_OFFSET + 4 * i);\r\n                            _vec4ShadowInfo.set(matShadowView.m02, matShadowView.m06, matShadowView.m10, layer.splitCameraFar);\r\n                            vec4ToArray(cv, _vec4ShadowInfo, UBOCSMEnum.CSM_VIEW_DIR_2_OFFSET + 4 * i);\r\n\r\n                            const csmAtlas = layer.csmAtlas;\r\n                            vec4ToArray(cv, csmAtlas, UBOCSMEnum.CSM_ATLAS_OFFSET + 4 * i);\r\n\r\n                            const matShadowViewProj = layer.matShadowViewProj;\r\n                            mat4ToArray(cv, matShadowViewProj, UBOCSMEnum.MAT_CSM_VIEW_PROJ_OFFSET + 16 * i);\r\n\r\n                            const matShadowProj = layer.matShadowProj;\r\n                            cv[UBOCSMEnum.CSM_PROJ_DEPTH_INFO_OFFSET + 0 + 4 * i] = matShadowProj.m10;\r\n                            cv[UBOCSMEnum.CSM_PROJ_DEPTH_INFO_OFFSET + 1 + 4 * i] = matShadowProj.m14;\r\n                            cv[UBOCSMEnum.CSM_PROJ_DEPTH_INFO_OFFSET + 2 + 4 * i] = matShadowProj.m11;\r\n                            cv[UBOCSMEnum.CSM_PROJ_DEPTH_INFO_OFFSET + 3 + 4 * i] = matShadowProj.m15;\r\n\r\n                            cv[UBOCSMEnum.CSM_PROJ_INFO_OFFSET + 0 + 4 * i] = matShadowProj.m00;\r\n                            cv[UBOCSMEnum.CSM_PROJ_INFO_OFFSET + 1 + 4 * i] = matShadowProj.m05;\r\n                            cv[UBOCSMEnum.CSM_PROJ_INFO_OFFSET + 2 + 4 * i] = 1.0 / matShadowProj.m00;\r\n                            cv[UBOCSMEnum.CSM_PROJ_INFO_OFFSET + 3 + 4 * i] = 1.0 / matShadowProj.m05;\r\n                        }\r\n                        _vec4ShadowInfo.set(mainLight.csmTransitionRange, 0, 0, 0);\r\n                        vec4ToArray(cv, _vec4ShadowInfo, UBOCSMEnum.CSM_SPLITS_INFO_OFFSET);\r\n\r\n                        _vec4ShadowInfo.set(0.1, mainLight.shadowDistance, 0, 1.0 - mainLight.shadowSaturation);\r\n                        vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);\r\n\r\n                        _vec4ShadowInfo.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, mainLight.csmLevel);\r\n                        vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);\r\n                    }\r\n                    _vec4ShadowInfo.set(shadowInfo.size.x, shadowInfo.size.y, mainLight.shadowPcf, mainLight.shadowBias);\r\n                    vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);\r\n                }\r\n            } else {\r\n                PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, sv);\r\n                _vec4ShadowInfo.set(0, 0, 0, shadowInfo.planeBias);\r\n                vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);\r\n            }\r\n\r\n            colorToArray(sv, shadowInfo.shadowColor, UBOShadowEnum.SHADOW_COLOR_OFFSET);\r\n        }\r\n    }\r\n\r\n    public static updateShadowUBOLightView (pipeline: PipelineRuntime, shadowBufferView: Float32Array, light: Light, level: number): void {\r\n        const device = pipeline.device;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        const shadowInfo = sceneData.shadows;\r\n        const csmLayers = sceneData.csmLayers;\r\n        const sv = shadowBufferView;\r\n        const packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;\r\n        const cap = pipeline.device.capabilities;\r\n        const csmSupported = sceneData.csmSupported;\r\n\r\n        switch (light.type) {\r\n        case LightType.DIRECTIONAL: {\r\n            const mainLight = light as DirectionalLight;\r\n            if (shadowInfo.enabled && mainLight && mainLight.shadowEnabled) {\r\n                if (shadowInfo.type === ShadowType.ShadowMap) {\r\n                    let near = 0.1;\r\n                    let far = 0;\r\n                    let matShadowView: Mat4;\r\n                    let matShadowProj: Mat4;\r\n                    let matShadowViewProj: Mat4;\r\n                    let levelCount = 0;\r\n                    if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !csmSupported) {\r\n                        matShadowView = csmLayers.specialLayer.matShadowView;\r\n                        matShadowProj = csmLayers.specialLayer.matShadowProj;\r\n                        matShadowViewProj = csmLayers.specialLayer.matShadowViewProj;\r\n                        if (mainLight.shadowFixedArea) {\r\n                            near = mainLight.shadowNear;\r\n                            far = mainLight.shadowFar;\r\n                            levelCount = 0;\r\n                        } else {\r\n                            near = 0.1;\r\n                            far = csmLayers.specialLayer.shadowCameraFar;\r\n                            levelCount = 1;\r\n                        }\r\n                        _vec4ShadowInfo.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, 0);\r\n                        vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);\r\n                    } else {\r\n                        const layer = csmLayers.layers[level];\r\n                        matShadowView = layer.matShadowView;\r\n                        matShadowProj = layer.matShadowProj;\r\n                        matShadowViewProj = layer.matShadowViewProj;\r\n\r\n                        near = layer.splitCameraNear;\r\n                        far = layer.splitCameraFar;\r\n                        levelCount = mainLight.csmLevel;\r\n                    }\r\n\r\n                    mat4ToArray(sv, matShadowView, UBOShadowEnum.MAT_LIGHT_VIEW_OFFSET);\r\n\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowProj.m10;\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowProj.m14;\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowProj.m11;\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowProj.m15;\r\n\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 0] = matShadowProj.m00;\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 1] = matShadowProj.m05;\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 2] = 1.0 / matShadowProj.m00;\r\n                    sv[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 3] = 1.0 / matShadowProj.m05;\r\n\r\n                    mat4ToArray(sv, matShadowViewProj, UBOShadowEnum.MAT_LIGHT_VIEW_PROJ_OFFSET);\r\n\r\n                    _vec4ShadowInfo.set(near, far, 0, 1.0 - mainLight.shadowSaturation);\r\n                    vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);\r\n\r\n                    _vec4ShadowInfo.set(LightType.DIRECTIONAL, packing, mainLight.shadowNormalBias, levelCount);\r\n                    vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);\r\n\r\n                    _vec4ShadowInfo.set(shadowInfo.size.x, shadowInfo.size.y, mainLight.shadowPcf, mainLight.shadowBias);\r\n                    vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        case LightType.SPOT: {\r\n            const spotLight = light as SpotLight;\r\n            if (shadowInfo.enabled && spotLight && spotLight.shadowEnabled) {\r\n                Mat4.invert(_matShadowView, (light as any).node.getWorldMatrix());\r\n                mat4ToArray(sv, _matShadowView, UBOShadowEnum.MAT_LIGHT_VIEW_OFFSET);\r\n\r\n                Mat4.perspective(\r\n                    _matShadowProj,\r\n                    spotLight.angle,\r\n                    1.0,\r\n                    0.001,\r\n                    spotLight.range,\r\n                    true,\r\n                    cap.clipSpaceMinZ,\r\n                    cap.clipSpaceSignY,\r\n                    0,\r\n                );\r\n\r\n                Mat4.multiply(_matShadowViewProj, _matShadowProj, _matShadowView);\r\n                mat4ToArray(sv, _matShadowViewProj, UBOShadowEnum.MAT_LIGHT_VIEW_PROJ_OFFSET);\r\n\r\n                _vec4ShadowInfo.set(0.01, (light as SpotLight).range, 0.0, 0.0);\r\n                vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);\r\n\r\n                _vec4ShadowInfo.set(shadowInfo.size.x, shadowInfo.size.y, spotLight.shadowPcf, spotLight.shadowBias);\r\n                vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);\r\n\r\n                _vec4ShadowInfo.set(LightType.SPOT, packing, spotLight.shadowNormalBias, 0.0);\r\n                vec4ToArray(sv, _vec4ShadowInfo, UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n        }\r\n\r\n        colorToArray(sv, shadowInfo.shadowColor, UBOShadowEnum.SHADOW_COLOR_OFFSET);\r\n    }\r\n\r\n    protected _globalUBO = new Float32Array(UBOGlobalEnum.COUNT);\r\n    protected _cameraUBO = new Float32Array(UBOCameraEnum.COUNT);\r\n    protected _shadowUBO = new Float32Array(UBOShadowEnum.COUNT);\r\n    protected _csmUBO = new Float32Array(UBOCSMEnum.COUNT);\r\n    static _combineSignY = 0;\r\n    protected declare _device: Device;\r\n    protected declare _pipeline: PipelineRuntime;\r\n\r\n    /**\r\n     *|combinedSignY|clipSpaceSignY|screenSpaceSignY| Backends   |\r\n     *|    :--:     |    :--:      |      :--:      |   :--:     |\r\n     *|      0      |      -1      |      -1        |  Vulkan    |\r\n     *|      1      |       1      |      -1        |Metal/WebGPU|\r\n     *|      2      |      -1      |       1        |            |\r\n     *|      3      |       1      |       1        |  GL-like   |\r\n     */\r\n    public static getCombineSignY (): number {\r\n        return PipelineUBO._combineSignY;\r\n    }\r\n\r\n    private _initCombineSignY (): void {\r\n        const device = this._device;\r\n        PipelineUBO._combineSignY = (device.capabilities.screenSpaceSignY * 0.5 + 0.5) << 1 | (device.capabilities.clipSpaceSignY * 0.5 + 0.5);\r\n    }\r\n\r\n    public activate (device: Device, pipeline: PipelineRuntime): void {\r\n        this._device = device;\r\n        this._pipeline = pipeline;\r\n        const ds = this._pipeline.descriptorSet;\r\n        if (isEnableEffect()) {\r\n            return;\r\n        }\r\n        this._initCombineSignY();\r\n\r\n        const globalUBO = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            UBOGlobalEnum.SIZE,\r\n            UBOGlobalEnum.SIZE,\r\n        ));\r\n        ds.bindBuffer(UBOGlobal.BINDING, globalUBO);\r\n\r\n        const cameraUBO = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            UBOCameraEnum.SIZE,\r\n            UBOCameraEnum.SIZE,\r\n        ));\r\n        ds.bindBuffer(UBOCamera.BINDING, cameraUBO);\r\n        const shadowUBO = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            UBOShadowEnum.SIZE,\r\n            UBOShadowEnum.SIZE,\r\n        ));\r\n        ds.bindBuffer(UBOShadow.BINDING, shadowUBO);\r\n        const csmUBO = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            UBOCSMEnum.SIZE,\r\n            UBOCSMEnum.SIZE,\r\n        ));\r\n        ds.bindBuffer(UBOCSM.BINDING, csmUBO);\r\n    }\r\n\r\n    /**\r\n     * @en Update all UBOs\r\n     * @zh 更新全部 UBO。\r\n     */\r\n    public updateGlobalUBO (window: RenderWindow): void {\r\n        const globalDSManager = this._pipeline.globalDSManager;\r\n        const ds = this._pipeline.descriptorSet;\r\n        const cmdBuffer = this._pipeline.commandBuffers;\r\n        ds.update();\r\n        PipelineUBO.updateGlobalUBOView(window, this._globalUBO);\r\n        cmdBuffer[0].updateBuffer(ds.getBuffer(UBOGlobal.BINDING), this._globalUBO);\r\n\r\n        globalDSManager.bindBuffer(UBOGlobal.BINDING, ds.getBuffer(UBOGlobal.BINDING));\r\n        globalDSManager.update();\r\n    }\r\n\r\n    public updateCameraUBO (camera: Camera): void {\r\n        const globalDSManager = this._pipeline.globalDSManager;\r\n        const ds = this._pipeline.descriptorSet;\r\n        const cmdBuffer = this._pipeline.commandBuffers;\r\n        PipelineUBO.updateCameraUBOView(this._pipeline, this._cameraUBO, camera);\r\n        cmdBuffer[0].updateBuffer(ds.getBuffer(UBOCamera.BINDING), this._cameraUBO);\r\n\r\n        globalDSManager.bindBuffer(UBOCamera.BINDING, ds.getBuffer(UBOCamera.BINDING));\r\n        globalDSManager.update();\r\n    }\r\n\r\n    public updateShadowUBO (camera: Camera): void {\r\n        const sceneData = this._pipeline.pipelineSceneData;\r\n        const shadowInfo = sceneData.shadows;\r\n        if (!shadowInfo.enabled) return;\r\n\r\n        const globalDSManager = this._pipeline.globalDSManager;\r\n        const ds = this._pipeline.descriptorSet;\r\n        const cmdBuffer = this._pipeline.commandBuffers;\r\n        const shadowFrameBufferMap = sceneData.shadowFrameBufferMap;\r\n        const mainLight = camera.scene!.mainLight;\r\n        if (mainLight && shadowFrameBufferMap.has(mainLight)) {\r\n            globalDSManager.bindTexture(UNIFORM_SHADOWMAP_BINDING, shadowFrameBufferMap.get(mainLight)!.colorTextures[0]!);\r\n        }\r\n        PipelineUBO.updateShadowUBOView(this._pipeline, this._shadowUBO, this._csmUBO, camera);\r\n        globalDSManager.update();\r\n        cmdBuffer[0].updateBuffer(ds.getBuffer(UBOShadow.BINDING), this._shadowUBO);\r\n        cmdBuffer[0].updateBuffer(ds.getBuffer(UBOCSM.BINDING), this._csmUBO);\r\n    }\r\n\r\n    public updateShadowUBOLight (globalDS: DescriptorSet, light: Light, level = 0): void {\r\n        PipelineUBO.updateShadowUBOLightView(this._pipeline, this._shadowUBO, light, level);\r\n        globalDS.bindTexture(UNIFORM_SHADOWMAP_BINDING, getDefaultShadowTexture(this._pipeline.device));\r\n        globalDS.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, getDefaultShadowTexture(this._pipeline.device));\r\n        globalDS.update();\r\n        this._pipeline.commandBuffers[0].updateBuffer(globalDS.getBuffer(UBOShadow.BINDING), this._shadowUBO);\r\n    }\r\n\r\n    public updateShadowUBORange (offset: number, data: Mat4 | Color): void {\r\n        if (data instanceof Mat4) {\r\n            mat4ToArray(this._shadowUBO, data, offset);\r\n        } else if (data instanceof Color) {\r\n            colorToArray(this._shadowUBO, data, offset);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public destroy (): void {}\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, displayOrder, serializable } from 'cc.decorator';\r\nimport { cclegacy } from '../core';\r\nimport { RenderPipeline } from './render-pipeline';\r\nimport { RenderFlow } from './render-flow';\r\nimport { RenderQueueDesc } from './pipeline-serialization';\r\nimport { Camera } from '../render-scene/scene';\r\n\r\n/**\r\n * @en The render stage information descriptor\r\n * @zh 渲染阶段描述信息。\r\n */\r\nexport interface IRenderStageInfo {\r\n    name: string;\r\n    priority: number;\r\n    tag?: number;\r\n    renderQueues?: RenderQueueDesc[];\r\n}\r\n\r\n/**\r\n * @en The render stage actually renders render objects to the output window or other GFX [[gfx.Framebuffer]].\r\n * Typically, a render stage collects render objects it's responsible for, clear the camera,\r\n * record and execute command buffer, and at last present the render result.\r\n * @zh 渲染阶段是实质上的渲染执行者，它负责收集渲染数据并执行渲染将渲染结果输出到屏幕或其他 GFX [[gfx.Framebuffer]] 中。\r\n * 典型的渲染阶段会收集它所管理的渲染对象，按照 [[Camera]] 的清除标记进行清屏，记录并执行渲染指令缓存，并最终呈现渲染结果。\r\n */\r\n@ccclass('RenderStage')\r\nexport abstract class RenderStage {\r\n    /**\r\n     * @en Name of the current stage\r\n     * @zh 当前渲染阶段的名字。\r\n     */\r\n    public get name (): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * @en Priority of the current stage\r\n     * @zh 当前渲染阶段的优先级。\r\n     */\r\n    public get priority (): number {\r\n        return this._priority;\r\n    }\r\n\r\n    /**\r\n     * @en Tag of the current stage\r\n     * @zh 当前渲染阶段的标签。\r\n     */\r\n    public get tag (): number {\r\n        return this._tag;\r\n    }\r\n\r\n    /**\r\n     * @en Name\r\n     * @zh 名称。\r\n     */\r\n    @displayOrder(0)\r\n    @serializable\r\n    protected _name = '';\r\n\r\n    /**\r\n     * @en Priority\r\n     * @zh 优先级。\r\n     */\r\n    @displayOrder(1)\r\n    @serializable\r\n    protected _priority = 0;\r\n\r\n    /**\r\n     * @en Whether to enable\r\n     * @zh 是否启用。\r\n     */\r\n    protected _enabled = true;\r\n    public set enabled (val: boolean) {\r\n        this._enabled = val;\r\n    }\r\n    public get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * @en Type\r\n     * @zh 类型。\r\n     */\r\n    @displayOrder(2)\r\n    @serializable\r\n    protected _tag = 0;\r\n\r\n    protected _pipeline!: RenderPipeline;\r\n    protected _flow!: RenderFlow;\r\n\r\n    /**\r\n     * @en The initialization process, user shouldn't use it in most case, only useful when need to generate render pipeline programmatically.\r\n     * @zh 初始化函数，正常情况下不会用到，仅用于程序化生成渲染管线的情况。\r\n     * @param info The render stage information\r\n     */\r\n    public initialize (info: IRenderStageInfo): boolean {\r\n        this._name = info.name;\r\n        this._priority = info.priority;\r\n        if (info.tag) { this._tag = info.tag; }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Activate the current render stage in the given render flow\r\n     * @zh 为指定的渲染流程开启当前渲染阶段\r\n     * @param flow The render flow to activate this render stage\r\n     */\r\n    public activate (pipeline: RenderPipeline, flow: RenderFlow): void {\r\n        this._pipeline = pipeline;\r\n        this._flow = flow;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy function\r\n     * @zh 销毁函数。\r\n     */\r\n    public abstract destroy (): void;\r\n\r\n    /**\r\n     * @en Render function\r\n     * @zh 渲染函数。\r\n     * @param view The render view\r\n     */\r\n    public abstract render (camera: Camera): void;\r\n}\r\n\r\ncclegacy.RenderStage = RenderStage;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, displayOrder, serializable, type } from 'cc.decorator';\r\nimport { RenderStage } from './render-stage';\r\nimport { RenderPipeline } from './render-pipeline';\r\nimport { cclegacy } from '../core';\r\nimport { Camera } from '../render-scene/scene';\r\n\r\n/**\r\n * @en Render flow information descriptor\r\n * @zh 渲染流程描述信息。\r\n */\r\nexport interface IRenderFlowInfo {\r\n    name: string;\r\n    priority: number;\r\n    stages: RenderStage[];\r\n    tag?: number;\r\n}\r\n\r\n/**\r\n * @en Render flow is a sub process of the [[RenderPipeline]], it dispatch the render task to all the [[RenderStage]]s.\r\n * @zh 渲染流程是渲染管线（[[RenderPipeline]]）的一个子过程，它将渲染任务派发到它的所有渲染阶段（[[RenderStage]]）中执行。\r\n */\r\n@ccclass('RenderFlow')\r\nexport abstract class RenderFlow {\r\n    /**\r\n     * @en The name of the render flow\r\n     * @zh 渲染流程的名字\r\n     */\r\n    public get name (): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * @en Priority of the current flow\r\n     * @zh 当前渲染流程的优先级。\r\n     */\r\n    public get priority (): number {\r\n        return this._priority;\r\n    }\r\n\r\n    /**\r\n     * @en Tag of the current flow\r\n     * @zh 当前渲染流程的标签。\r\n     */\r\n    public get tag (): number {\r\n        return this._tag;\r\n    }\r\n\r\n    /**\r\n     * @en The stages of flow.\r\n     * @zh 渲染流程 stage 列表。\r\n     * @readonly\r\n     */\r\n    public get stages (): RenderStage[] {\r\n        return this._stages;\r\n    }\r\n\r\n    @displayOrder(0)\r\n    @serializable\r\n    protected _name = '';\r\n\r\n    @displayOrder(1)\r\n    @serializable\r\n    protected _priority = 0;\r\n\r\n    @displayOrder(2)\r\n    @serializable\r\n    protected _tag = 0;\r\n\r\n    @displayOrder(3)\r\n    @type([RenderStage])\r\n    @serializable\r\n    protected _stages: RenderStage[] = [];\r\n    protected _pipeline!: RenderPipeline;\r\n\r\n    /**\r\n     * @en Get pipeline\r\n     * @zh 获取pipeline\r\n     */\r\n    public get pipeline (): RenderPipeline {\r\n        return this._pipeline;\r\n    }\r\n\r\n    /**\r\n     * @en The initialization process, user shouldn't use it in most case, only useful when need to generate render pipeline programmatically.\r\n     * @zh 初始化函数，正常情况下不会用到，仅用于程序化生成渲染管线的情况。\r\n     * @param info The render flow information\r\n     */\r\n    public initialize (info: IRenderFlowInfo): boolean {\r\n        this._name = info.name;\r\n        this._priority = info.priority;\r\n        this._stages = info.stages;\r\n        if (info.tag) { this._tag = info.tag; }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Activate the current render flow in the given pipeline\r\n     * @zh 为指定的渲染管线开启当前渲染流程\r\n     * @param pipeline The render pipeline to activate this render flow\r\n     */\r\n    public activate (pipeline: RenderPipeline): void {\r\n        this._pipeline = pipeline;\r\n        this._stages.sort((a, b) => a.priority - b.priority);\r\n\r\n        for (let i = 0, len = this._stages.length; i < len; i++) {\r\n            this._stages[i].activate(pipeline, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Render function, it basically run all render stages in sequence for the given view.\r\n     * @zh 渲染函数，对指定的渲染视图按顺序执行所有渲染阶段。\r\n     * @param view Render view。\r\n     */\r\n    public render (camera: Camera): void {\r\n        for (let i = 0, len = this._stages.length; i < len; i++) {\r\n            if (this._stages[i].enabled) this._stages[i].render(camera);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Destroy function.\r\n     * @zh 销毁函数。\r\n     */\r\n    public destroy (): void {\r\n        for (let i = 0, len = this._stages.length; i < len; i++) {\r\n            this._stages[i].destroy();\r\n        }\r\n\r\n        this._stages.length = 0;\r\n    }\r\n}\r\n\r\ncclegacy.RenderFlow = RenderFlow;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, displayOrder, serializable, type } from 'cc.decorator';\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { sceneCulling, validPunctualLightsCulling } from './scene-culling';\r\nimport { Asset } from '../asset/assets/asset';\r\nimport { AccessFlagBit, Attribute, Buffer, BufferInfo, BufferUsageBit, ClearFlagBit, ClearFlags, ColorAttachment, CommandBuffer,\r\n    DepthStencilAttachment, DescriptorSet, Device, Feature, Format, FormatFeatureBit, Framebuffer, FramebufferInfo, InputAssembler,\r\n    InputAssemblerInfo, LoadOp, MemoryUsageBit, Rect, RenderPass, RenderPassInfo, Sampler, StoreOp, SurfaceTransform, Swapchain,\r\n    Texture, TextureInfo, TextureType, TextureUsageBit, Viewport, GeneralBarrierInfo, deviceManager, DescriptorSetLayout,\r\n} from '../gfx';\r\nimport { MacroRecord } from '../render-scene/core/pass-utils';\r\nimport { RenderWindow } from '../render-scene/core/render-window';\r\nimport { Camera, SkyBoxFlagValue } from '../render-scene/scene/camera';\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { GlobalDSManager } from './global-descriptor-set-manager';\r\nimport { GeometryRenderer } from './geometry-renderer';\r\nimport { PipelineSceneData } from './pipeline-scene-data';\r\nimport { PipelineUBO } from './pipeline-ubo';\r\nimport { RenderFlow } from './render-flow';\r\nimport { IPipelineEvent, PipelineEventCallback, PipelineEventProcessor, PipelineEventType } from './pipeline-event';\r\nimport { decideProfilerCamera } from './pipeline-funcs';\r\nimport { OS } from '../../pal/system-info/enum-type';\r\nimport { macro, murmurhash2_32_gc, cclegacy } from '../core';\r\nimport { UBOSkinning } from './define';\r\nimport { PipelineInputAssemblerData } from './render-types';\r\nimport { PipelineRuntime } from './custom/pipeline';\r\n\r\n/**\r\n * @en Render pipeline information descriptor\r\n * @zh 渲染管线描述信息。\r\n */\r\nexport interface IRenderPipelineInfo {\r\n    flows: RenderFlow[];\r\n    tag?: number;\r\n}\r\n\r\nexport const MAX_BLOOM_FILTER_PASS_NUM = 6;\r\n\r\nconst tmpRect = new Rect();\r\nconst tmpViewport = new Viewport();\r\n\r\nexport class BloomRenderData {\r\n    renderPass: RenderPass = null!;\r\n\r\n    sampler: Sampler = null!;\r\n\r\n    prefiterTex: Texture = null!;\r\n    downsampleTexs: Texture[] = [];\r\n    upsampleTexs: Texture[] = [];\r\n    combineTex: Texture = null!;\r\n\r\n    prefilterFramebuffer: Framebuffer = null!;\r\n    downsampleFramebuffers: Framebuffer[] = [];\r\n    upsampleFramebuffers: Framebuffer[] = [];\r\n    combineFramebuffer: Framebuffer = null!;\r\n}\r\n\r\nexport class PipelineRenderData {\r\n    outputFrameBuffer: Framebuffer = null!;\r\n    outputRenderTargets: Texture[] = [];\r\n    outputDepth: Texture = null!;\r\n    sampler: Sampler = null!;\r\n\r\n    bloom: BloomRenderData | null = null;\r\n}\r\n\r\nfunction hashFrameBuffer (fbo: Framebuffer): number {\r\n    let hash = 666;\r\n    for (const color of fbo.colorTextures) {\r\n        const info = color?.info;\r\n        const hashStr = `${info!.type}_${info!.usage}_${info!.format}_${info!.width}_${info!.height}_${info!.flags}_\r\n            ${info!.layerCount}_${info!.levelCount}_${info!.samples}_${info!.depth}_${info!.externalRes}`;\r\n        hash = murmurhash2_32_gc(hashStr, hash);\r\n    }\r\n\r\n    if (fbo.depthStencilTexture) {\r\n        const info = fbo.depthStencilTexture.info;\r\n        const hashStr = `${info.type}_${info.usage}_${info.format}_${info.width}_${info.height}_${info.flags}_\r\n            ${info.layerCount}_${info.levelCount}_${info.samples}_${info.depth}_${info.externalRes}`;\r\n        hash = murmurhash2_32_gc(hashStr, hash);\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\n/**\r\n * @en Render pipeline describes how we handle the rendering process for all render objects in the related render scene root.\r\n * It contains some general pipeline configurations, necessary rendering resources and some [[RenderFlow]]s.\r\n * The rendering process function [[render]] is invoked by [[Root]] for all [[Camera]]s.\r\n * @zh 渲染管线对象决定了引擎对相关渲染场景下的所有渲染对象实施的完整渲染流程。\r\n * 这个类主要包含一些通用的管线配置，必要的渲染资源和一些 [[RenderFlow]]。\r\n * 渲染流程函数 [[render]] 会由 [[Root]] 发起调用并对所有 [[Camera]] 执行预设的渲染流程。\r\n */\r\n@ccclass('cc.RenderPipeline')\r\nexport abstract class RenderPipeline extends Asset implements IPipelineEvent, PipelineRuntime {\r\n    /**\r\n     * @en The tag of pipeline.\r\n     * @zh 管线的标签。\r\n     * @readonly\r\n     */\r\n    get tag (): number {\r\n        return this._tag;\r\n    }\r\n\r\n    /**\r\n     * @en The flows of pipeline.\r\n     * @zh 管线的渲染流程列表。\r\n     * @readonly\r\n     */\r\n    get flows (): RenderFlow[] {\r\n        return this._flows;\r\n    }\r\n\r\n    /**\r\n     * @en Tag\r\n     * @zh 标签\r\n     * @readonly\r\n     */\r\n    @displayOrder(0)\r\n    @serializable\r\n    protected _tag = 0;\r\n\r\n    /**\r\n     * @en Flows\r\n     * @zh 渲染流程列表\r\n     * @readonly\r\n     */\r\n    @displayOrder(1)\r\n    @type([RenderFlow])\r\n    @serializable\r\n    protected _flows: RenderFlow[] = [];\r\n\r\n    protected _quadIB: Buffer | null = null;\r\n    protected _quadVBOnscreen: Buffer | null = null;\r\n    protected _quadVBOffscreen: Buffer | null = null;\r\n    protected _quadIAOnscreen: InputAssembler | null = null;\r\n    protected _quadIAOffscreen: InputAssembler | null = null;\r\n    protected _eventProcessor: PipelineEventProcessor = new PipelineEventProcessor();\r\n\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 四边形输入汇集器。\r\n     */\r\n    public get quadIAOnscreen (): InputAssembler {\r\n        return this._quadIAOnscreen!;\r\n    }\r\n\r\n    public get quadIAOffscreen (): InputAssembler {\r\n        return this._quadIAOffscreen!;\r\n    }\r\n\r\n    public getPipelineRenderData (): PipelineRenderData {\r\n        return this._pipelineRenderData!;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Constant macro string, static throughout the whole runtime.\r\n     * Used to pass device-specific parameters to shader.\r\n     * @zh 常量宏定义字符串，运行时全程不会改变，用于给 shader 传一些只和平台相关的参数。\r\n     * @readonly\r\n     */\r\n    get constantMacros (): string {\r\n        return this._constantMacros;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The current global-scoped shader macros.\r\n     * Used to control effects like IBL, fog, etc.\r\n     * @zh 当前的全局宏定义，用于控制如 IBL、雾效等模块。\r\n     * @readonly\r\n     */\r\n    get macros (): MacroRecord {\r\n        return this._macros;\r\n    }\r\n\r\n    get device (): Device {\r\n        return this._device;\r\n    }\r\n\r\n    get globalDSManager (): GlobalDSManager {\r\n        return this._globalDSManager;\r\n    }\r\n\r\n    get descriptorSetLayout (): DescriptorSetLayout {\r\n        return this._globalDSManager.descriptorSetLayout;\r\n    }\r\n\r\n    get descriptorSet (): DescriptorSet {\r\n        return this._descriptorSet;\r\n    }\r\n\r\n    get commandBuffers (): CommandBuffer[] {\r\n        return this._commandBuffers;\r\n    }\r\n\r\n    get pipelineUBO (): PipelineUBO {\r\n        return this._pipelineUBO;\r\n    }\r\n\r\n    get pipelineSceneData (): PipelineSceneData {\r\n        return this._pipelineSceneData;\r\n    }\r\n\r\n    set profiler (value) {\r\n        this._profiler = value;\r\n    }\r\n\r\n    get profiler (): Model | null {\r\n        return this._profiler;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.6, please use camera.geometryRenderer instead.\r\n     */\r\n    get geometryRenderer (): GeometryRenderer | null {\r\n        return this._geometryRenderer;\r\n    }\r\n\r\n    set clusterEnabled (value) {\r\n        this._clusterEnabled = value;\r\n    }\r\n\r\n    get clusterEnabled (): boolean {\r\n        return this._clusterEnabled;\r\n    }\r\n\r\n    set bloomEnabled (value) {\r\n        this._bloomEnabled = value;\r\n    }\r\n\r\n    get bloomEnabled (): boolean {\r\n        return this._bloomEnabled;\r\n    }\r\n\r\n    protected _device!: Device;\r\n    protected _globalDSManager!: GlobalDSManager;\r\n    protected _descriptorSet!: DescriptorSet;\r\n    protected _commandBuffers: CommandBuffer[] = [];\r\n    protected _pipelineUBO = new PipelineUBO();\r\n    protected _macros: MacroRecord = {};\r\n    protected _constantMacros = '';\r\n    protected _profiler: Model | null = null;\r\n    protected _geometryRenderer: GeometryRenderer | null = null;\r\n    protected declare _pipelineSceneData: PipelineSceneData;\r\n    protected _pipelineRenderData: PipelineRenderData | null = null;\r\n    protected _renderPasses = new Map<number, RenderPass>();\r\n    protected _width = 0;\r\n    protected _height = 0;\r\n    protected _lastUsedRenderArea: Rect = new Rect();\r\n    protected _clusterEnabled = false;\r\n    protected _bloomEnabled = false;\r\n\r\n    /**\r\n     * @en The initialization process, user shouldn't use it in most case, only useful when need to generate render pipeline programmatically.\r\n     * @zh 初始化函数，正常情况下不会用到，仅用于程序化生成渲染管线的情况。\r\n     * @param info The render pipeline information\r\n     */\r\n    public initialize (info: IRenderPipelineInfo): boolean {\r\n        this._flows = info.flows;\r\n        if (info.tag) { this._tag = info.tag; }\r\n        return true;\r\n    }\r\n\r\n    public createRenderPass (clearFlags: ClearFlags, colorFmt: Format, depthFmt: Format): RenderPass {\r\n        const device = this._device;\r\n        const colorAttachment = new ColorAttachment();\r\n        const depthStencilAttachment = new DepthStencilAttachment();\r\n        colorAttachment.format = colorFmt;\r\n        depthStencilAttachment.format = depthFmt;\r\n        depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;\r\n        depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;\r\n\r\n        if (!(clearFlags & ClearFlagBit.COLOR)) {\r\n            if (clearFlags & SkyBoxFlagValue.VALUE) {\r\n                colorAttachment.loadOp = LoadOp.CLEAR;\r\n            } else {\r\n                colorAttachment.loadOp = LoadOp.LOAD;\r\n                colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n                    AccessFlagBit.COLOR_ATTACHMENT_WRITE,\r\n                    AccessFlagBit.COLOR_ATTACHMENT_WRITE,\r\n                ));\r\n            }\r\n        }\r\n\r\n        if ((clearFlags & ClearFlagBit.DEPTH_STENCIL) !== ClearFlagBit.DEPTH_STENCIL) {\r\n            if (!(clearFlags & ClearFlagBit.DEPTH)) depthStencilAttachment.depthLoadOp = LoadOp.LOAD;\r\n            if (!(clearFlags & ClearFlagBit.STENCIL)) depthStencilAttachment.stencilLoadOp = LoadOp.LOAD;\r\n        }\r\n        depthStencilAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n            AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE,\r\n            AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE,\r\n        ));\r\n\r\n        const renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);\r\n\r\n        return device.createRenderPass(renderPassInfo);\r\n    }\r\n\r\n    public getRenderPass (clearFlags: ClearFlags, fbo: Framebuffer): RenderPass {\r\n        const fbHash = hashFrameBuffer(fbo);\r\n        const hash = murmurhash2_32_gc(`${fbHash}_${clearFlags}`, 666);\r\n        let renderPass = this._renderPasses.get(hash);\r\n        if (renderPass) { return renderPass; }\r\n        renderPass = this.createRenderPass(clearFlags, fbo.colorTextures[0]!.format, fbo.depthStencilTexture!.format);\r\n        this._renderPasses.set(hash, renderPass);\r\n        return renderPass;\r\n    }\r\n\r\n    public newFramebufferByRatio (dyingFramebuffer: Framebuffer): Framebuffer {\r\n        const sceneData = this.pipelineSceneData;\r\n        const width = this._width * sceneData.shadingScale;\r\n        const height = this._height * sceneData.shadingScale;\r\n        const colorTexArr: Texture[] = dyingFramebuffer.colorTextures as Texture[];\r\n        for (let i = 0; i < colorTexArr.length; i++) {\r\n            colorTexArr[i]!.resize(width, height);\r\n        }\r\n        if (dyingFramebuffer.depthStencilTexture) {\r\n            dyingFramebuffer.depthStencilTexture.resize(width, height);\r\n        }\r\n        // move\r\n        const newFramebuffer = this._device.createFramebuffer(new FramebufferInfo(\r\n            dyingFramebuffer.renderPass,\r\n            colorTexArr,\r\n            dyingFramebuffer.depthStencilTexture,\r\n        ));\r\n        dyingFramebuffer.destroy();\r\n        return newFramebuffer;\r\n    }\r\n\r\n    /**\r\n     * @en generate renderArea by camera\r\n     * @zh 生成renderArea\r\n     * @param camera the camera\r\n     * @returns\r\n     */\r\n    public generateRenderArea (camera: Camera, out: Rect): void {\r\n        const vp = camera.viewport;\r\n        const w = camera.window.width;\r\n        const h = camera.window.height;\r\n        out.x = vp.x * w;\r\n        out.y = vp.y * h;\r\n        out.width = vp.width * w;\r\n        out.height = vp.height * h;\r\n    }\r\n\r\n    public generateViewport (camera: Camera, out?: Viewport): Viewport {\r\n        this.generateRenderArea(camera, tmpRect);\r\n        if (!out) out = tmpViewport;\r\n        const shadingScale = this.pipelineSceneData.shadingScale;\r\n        out.left = tmpRect.x * shadingScale;\r\n        out.top = tmpRect.y * shadingScale;\r\n        out.width = tmpRect.width * shadingScale;\r\n        out.height = tmpRect.height * shadingScale;\r\n        return out;\r\n    }\r\n\r\n    public generateScissor (camera: Camera, out?: Rect): Rect {\r\n        if (!out) out = tmpRect;\r\n        this.generateRenderArea(camera, out);\r\n        const shadingScale = this.pipelineSceneData.shadingScale;\r\n        out.x *= shadingScale;\r\n        out.y *= shadingScale;\r\n        out.width *= shadingScale;\r\n        out.height *= shadingScale;\r\n        return out;\r\n    }\r\n\r\n    public get shadingScale (): number {\r\n        return this._pipelineSceneData.shadingScale;\r\n    }\r\n\r\n    public set shadingScale (val: number) {\r\n        if (this._pipelineSceneData.shadingScale !== val) {\r\n            this._pipelineSceneData.shadingScale = val;\r\n            this.emit(PipelineEventType.ATTACHMENT_SCALE_CAHNGED, val);\r\n        }\r\n    }\r\n\r\n    public getMacroString (name: string): string {\r\n        const str = this._macros[name];\r\n        if (str === undefined) {\r\n            return '';\r\n        }\r\n        return str as string;\r\n    }\r\n\r\n    public getMacroInt (name: string): number {\r\n        const value = this._macros[name];\r\n        if (value === undefined) {\r\n            return 0;\r\n        }\r\n        return value as number;\r\n    }\r\n\r\n    public getMacroBool (name: string): boolean {\r\n        const value = this._macros[name];\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n        return value as boolean;\r\n    }\r\n\r\n    public setMacroString (name: string, value: string): void {\r\n        this._macros[name] = value;\r\n    }\r\n\r\n    public setMacroInt (name: string, value: number): void {\r\n        this._macros[name] = value;\r\n    }\r\n\r\n    public setMacroBool (name: string, value: boolean): void {\r\n        this._macros[name] = value;\r\n    }\r\n\r\n    /**\r\n     * @en Activate the render pipeline after loaded, it mainly activate the flows\r\n     * @zh 当渲染管线资源加载完成后，启用管线，主要是启用管线内的 flow\r\n     * TODO: remove swapchain dependency at this stage\r\n     * after deferred pipeline can handle multiple swapchains\r\n     */\r\n    public activate (swapchain: Swapchain): boolean {\r\n        this._device = deviceManager.gfxDevice;\r\n        this._generateConstantMacros();\r\n        this._globalDSManager = new GlobalDSManager(this._device);\r\n        this._descriptorSet = this._globalDSManager.globalDescriptorSet;\r\n        this._pipelineUBO.activate(this._device, this);\r\n        // update global defines in advance here for deferred pipeline may tryCompile shaders.\r\n        this._macros.CC_USE_HDR = this._pipelineSceneData.isHDR;\r\n        this._macros.CC_USE_DEBUG_VIEW = 0;\r\n        this._generateConstantMacros();\r\n        this._pipelineSceneData.activate(this._device);\r\n\r\n        for (let i = 0; i < this._flows.length; i++) {\r\n            this._flows[i].activate(this);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _ensureEnoughSize (cameras: Camera[]): void {}\r\n\r\n    /**\r\n     * @en Render function, it basically run the render process of all flows in sequence for the given view.\r\n     * @zh 渲染函数，对指定的渲染视图按顺序执行所有渲染流程。\r\n     * @param view Render view。\r\n     */\r\n    public render (cameras: Camera[]): void {\r\n        if (cameras.length === 0) {\r\n            return;\r\n        }\r\n        this.updateGeometryRenderer(cameras); // for capability\r\n        this._commandBuffers[0].begin();\r\n        this.emit(PipelineEventType.RENDER_FRAME_BEGIN, cameras);\r\n        this._ensureEnoughSize(cameras);\r\n        decideProfilerCamera(cameras);\r\n\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const camera = cameras[i];\r\n            if (camera.scene) {\r\n                this.emit(PipelineEventType.RENDER_CAMERA_BEGIN, camera);\r\n                validPunctualLightsCulling(this.pipelineSceneData, camera);\r\n                sceneCulling(this.pipelineSceneData, this.pipelineUBO, camera);\r\n                this._pipelineUBO.updateGlobalUBO(camera.window);\r\n                this._pipelineUBO.updateCameraUBO(camera);\r\n                for (let j = 0; j < this._flows.length; j++) {\r\n                    this._flows[j].render(camera);\r\n                }\r\n                this.emit(PipelineEventType.RENDER_CAMERA_END, camera);\r\n            }\r\n        }\r\n        this.emit(PipelineEventType.RENDER_FRAME_END, cameras);\r\n        this._commandBuffers[0].end();\r\n        this._device.queue.submit(this._commandBuffers);\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 销毁四边形输入汇集器。\r\n     */\r\n    protected _destroyQuadInputAssembler (): void {\r\n        if (this._quadIB) {\r\n            this._quadIB.destroy();\r\n            this._quadIB = null;\r\n        }\r\n\r\n        if (this._quadVBOnscreen) {\r\n            this._quadVBOnscreen.destroy();\r\n            this._quadVBOnscreen = null;\r\n        }\r\n\r\n        if (this._quadVBOffscreen) {\r\n            this._quadVBOffscreen.destroy();\r\n            this._quadVBOffscreen = null;\r\n        }\r\n\r\n        if (this._quadIAOnscreen) {\r\n            this._quadIAOnscreen.destroy();\r\n            this._quadIAOnscreen = null;\r\n        }\r\n\r\n        if (this._quadIAOffscreen) {\r\n            this._quadIAOffscreen.destroy();\r\n            this._quadIAOffscreen = null;\r\n        }\r\n    }\r\n\r\n    protected _destroyBloomData (): void {\r\n        const bloom = this._pipelineRenderData!.bloom;\r\n        if (bloom === null) return;\r\n\r\n        if (bloom.prefiterTex) bloom.prefiterTex.destroy();\r\n        if (bloom.prefilterFramebuffer) bloom.prefilterFramebuffer.destroy();\r\n\r\n        for (let i = 0; i < bloom.downsampleTexs.length; ++i) {\r\n            bloom.downsampleTexs[i].destroy();\r\n            bloom.downsampleFramebuffers[i].destroy();\r\n        }\r\n        bloom.downsampleTexs.length = 0;\r\n        bloom.downsampleFramebuffers.length = 0;\r\n\r\n        for (let i = 0; i < bloom.upsampleTexs.length; ++i) {\r\n            bloom.upsampleTexs[i].destroy();\r\n            bloom.upsampleFramebuffers[i].destroy();\r\n        }\r\n        bloom.upsampleTexs.length = 0;\r\n        bloom.upsampleFramebuffers.length = 0;\r\n\r\n        if (bloom.combineTex) bloom.combineTex.destroy();\r\n        if (bloom.combineFramebuffer) bloom.combineFramebuffer.destroy();\r\n\r\n        bloom.renderPass?.destroy();\r\n\r\n        this._pipelineRenderData!.bloom = null;\r\n    }\r\n\r\n    private _genQuadVertexData (surfaceTransform: SurfaceTransform, renderArea: Rect): Float32Array {\r\n        const vbData = new Float32Array(4 * 4);\r\n\r\n        const minX = renderArea.x / this._width;\r\n        const maxX = (renderArea.x + renderArea.width) / this._width;\r\n        let minY = renderArea.y / this._height;\r\n        let maxY = (renderArea.y + renderArea.height) / this._height;\r\n        if (this.device.capabilities.screenSpaceSignY > 0) {\r\n            const temp = maxY;\r\n            maxY       = minY;\r\n            minY       = temp;\r\n        }\r\n        let n = 0;\r\n        switch (surfaceTransform) {\r\n        case (SurfaceTransform.IDENTITY):\r\n            n = 0;\r\n            vbData[n++] = -1.0; vbData[n++] = -1.0; vbData[n++] = minX; vbData[n++] = maxY;\r\n            vbData[n++] = 1.0; vbData[n++] = -1.0; vbData[n++] = maxX; vbData[n++] = maxY;\r\n            vbData[n++] = -1.0; vbData[n++] = 1.0; vbData[n++] = minX; vbData[n++] = minY;\r\n            vbData[n++] = 1.0; vbData[n++] = 1.0; vbData[n++] = maxX; vbData[n++] = minY;\r\n            break;\r\n        case (SurfaceTransform.ROTATE_90):\r\n            n = 0;\r\n            vbData[n++] = -1.0; vbData[n++] = -1.0; vbData[n++] = maxX; vbData[n++] = maxY;\r\n            vbData[n++] = 1.0; vbData[n++] = -1.0; vbData[n++] = maxX; vbData[n++] = minY;\r\n            vbData[n++] = -1.0; vbData[n++] = 1.0; vbData[n++] = minX; vbData[n++] = maxY;\r\n            vbData[n++] = 1.0; vbData[n++] = 1.0; vbData[n++] = minX; vbData[n++] = minY;\r\n            break;\r\n        case (SurfaceTransform.ROTATE_180):\r\n            n = 0;\r\n            vbData[n++] = -1.0; vbData[n++] = -1.0; vbData[n++] = minX; vbData[n++] = minY;\r\n            vbData[n++] = 1.0; vbData[n++] = -1.0; vbData[n++] = maxX; vbData[n++] = minY;\r\n            vbData[n++] = -1.0; vbData[n++] = 1.0; vbData[n++] = minX; vbData[n++] = maxY;\r\n            vbData[n++] = 1.0; vbData[n++] = 1.0; vbData[n++] = maxX; vbData[n++] = maxY;\r\n            break;\r\n        case (SurfaceTransform.ROTATE_270):\r\n            n = 0;\r\n            vbData[n++] = -1.0; vbData[n++] = -1.0; vbData[n++] = minX; vbData[n++] = minY;\r\n            vbData[n++] = 1.0; vbData[n++] = -1.0; vbData[n++] = minX; vbData[n++] = maxY;\r\n            vbData[n++] = -1.0; vbData[n++] = 1.0; vbData[n++] = maxX; vbData[n++] = minY;\r\n            vbData[n++] = 1.0; vbData[n++] = 1.0; vbData[n++] = maxX; vbData[n++] = maxY;\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n\r\n        return vbData;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * 创建四边形输入汇集器。\r\n     */\r\n    protected _createQuadInputAssembler (): PipelineInputAssemblerData {\r\n        // create vertex buffer\r\n        const inputAssemblerData = new PipelineInputAssemblerData();\r\n\r\n        const vbStride = Float32Array.BYTES_PER_ELEMENT * 4;\r\n        const vbSize = vbStride * 4;\r\n\r\n        const quadVB = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE | MemoryUsageBit.HOST,\r\n            vbSize,\r\n            vbStride,\r\n        ));\r\n\r\n        if (!quadVB) {\r\n            return inputAssemblerData;\r\n        }\r\n\r\n        // create index buffer\r\n        const ibStride = Uint8Array.BYTES_PER_ELEMENT;\r\n        const ibSize = ibStride * 6;\r\n\r\n        const quadIB = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            ibSize,\r\n            ibStride,\r\n        ));\r\n\r\n        if (!quadIB) {\r\n            return inputAssemblerData;\r\n        }\r\n\r\n        const indices = new Uint8Array(6);\r\n        indices[0] = 0; indices[1] = 1; indices[2] = 2;\r\n        indices[3] = 1; indices[4] = 3; indices[5] = 2;\r\n\r\n        quadIB.update(indices);\r\n\r\n        // create input assembler\r\n\r\n        const attributes = new Array<Attribute>(2);\r\n        attributes[0] = new Attribute('a_position', Format.RG32F);\r\n        attributes[1] = new Attribute('a_texCoord', Format.RG32F);\r\n\r\n        const quadIA = this._device.createInputAssembler(new InputAssemblerInfo(\r\n            attributes,\r\n            [quadVB],\r\n            quadIB,\r\n        ));\r\n\r\n        inputAssemblerData.quadIB = quadIB;\r\n        inputAssemblerData.quadVB = quadVB;\r\n        inputAssemblerData.quadIA = quadIA;\r\n        return inputAssemblerData;\r\n    }\r\n\r\n    public updateQuadVertexData (renderArea: Rect, window: RenderWindow): void {\r\n        const cachedArea = this._lastUsedRenderArea;\r\n        if (cachedArea.x === renderArea.x\r\n            && cachedArea.y === renderArea.y\r\n            && cachedArea.width === renderArea.width\r\n            && cachedArea.height === renderArea.height) {\r\n            return;\r\n        }\r\n\r\n        const offData = this._genQuadVertexData(SurfaceTransform.IDENTITY, renderArea);\r\n        this._quadVBOffscreen!.update(offData);\r\n        const onData = this._genQuadVertexData(window.swapchain && window.swapchain.surfaceTransform || SurfaceTransform.IDENTITY, renderArea);\r\n        this._quadVBOnscreen!.update(onData);\r\n\r\n        cachedArea.copy(renderArea);\r\n    }\r\n\r\n    /**\r\n     * @en Internal destroy function\r\n     * @zh 内部销毁函数。\r\n     */\r\n    public destroy (): boolean {\r\n        for (let i = 0; i < this._flows.length; i++) {\r\n            this._flows[i].destroy();\r\n        }\r\n        this._flows.length = 0;\r\n\r\n        if (this._descriptorSet) {\r\n            this._descriptorSet.destroy();\r\n        }\r\n\r\n        this._globalDSManager?.destroy();\r\n\r\n        for (let i = 0; i < this._commandBuffers.length; i++) {\r\n            this._commandBuffers[i].destroy();\r\n        }\r\n        this._commandBuffers.length = 0;\r\n        this._pipelineUBO.destroy();\r\n        this._pipelineSceneData?.destroy();\r\n\r\n        return super.destroy();\r\n    }\r\n\r\n    public onGlobalPipelineStateChanged (): void {\r\n        // do nothing\r\n    }\r\n\r\n    protected _generateConstantMacros (): void {\r\n        let str = '';\r\n        str += `#define CC_DEVICE_SUPPORT_FLOAT_TEXTURE ${this.device.getFormatFeatures(Format.RGBA32F)\r\n            & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE) ? 1 : 0}\\n`;\r\n        str += `#define CC_ENABLE_CLUSTERED_LIGHT_CULLING ${this._clusterEnabled ? 1 : 0}\\n`;\r\n        str += `#define CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS ${this.device.capabilities.maxVertexUniformVectors}\\n`;\r\n        str += `#define CC_DEVICE_MAX_FRAGMENT_UNIFORM_VECTORS ${this.device.capabilities.maxFragmentUniformVectors}\\n`;\r\n        str += `#define CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT ${this.device.hasFeature(Feature.INPUT_ATTACHMENT_BENEFIT) ? 1 : 0}\\n`;\r\n        str += `#define CC_PLATFORM_ANDROID_AND_WEBGL ${systemInfo.os === OS.ANDROID && systemInfo.isBrowser ? 1 : 0}\\n`;\r\n        str += `#define CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES ${macro.ENABLE_WEBGL_HIGHP_STRUCT_VALUES ? 1 : 0}\\n`;\r\n\r\n        const jointUniformCapacity = UBOSkinning.JOINT_UNIFORM_CAPACITY;\r\n        str += `#define CC_JOINT_UNIFORM_CAPACITY ${jointUniformCapacity}\\n`;\r\n\r\n        this._constantMacros = str;\r\n    }\r\n\r\n    protected updateGeometryRenderer (cameras: Camera[]): void {\r\n        if (this._geometryRenderer) {\r\n            return;\r\n        }\r\n\r\n        // Query the first camera rendering to swapchain.\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const camera = cameras[i];\r\n            if (camera && camera.window && camera.window.swapchain) {\r\n                camera.initGeometryRenderer();\r\n                this._geometryRenderer = camera.geometryRenderer;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public generateBloomRenderData (): void {\r\n        if (this._pipelineRenderData!.bloom != null) return;\r\n\r\n        const bloom = this._pipelineRenderData!.bloom = new BloomRenderData();\r\n        const device = this.device;\r\n\r\n        // create renderPass\r\n        const colorAttachment = new ColorAttachment();\r\n        colorAttachment.format = Format.RGBA8;\r\n        colorAttachment.loadOp = LoadOp.CLEAR;\r\n        colorAttachment.storeOp = StoreOp.STORE;\r\n        colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n            AccessFlagBit.NONE,\r\n            AccessFlagBit.COLOR_ATTACHMENT_WRITE,\r\n        ));\r\n        bloom.renderPass = device.createRenderPass(new RenderPassInfo([colorAttachment]));\r\n\r\n        let curWidth = this._width;\r\n        let curHeight = this._height;\r\n\r\n        // prefilter\r\n        bloom.prefiterTex = device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n            Format.RGBA8,\r\n            curWidth >> 1,\r\n            curHeight >> 1,\r\n        ));\r\n        bloom.prefilterFramebuffer = device.createFramebuffer(new FramebufferInfo(\r\n            bloom.renderPass,\r\n            [bloom.prefiterTex],\r\n        ));\r\n\r\n        // downsample & upsample\r\n        curWidth >>= 1;\r\n        curHeight >>= 1;\r\n        for (let i = 0; i < MAX_BLOOM_FILTER_PASS_NUM; ++i) {\r\n            bloom.downsampleTexs.push(device.createTexture(new TextureInfo(\r\n                TextureType.TEX2D,\r\n                TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n                Format.RGBA8,\r\n                curWidth >> 1,\r\n                curHeight >> 1,\r\n            )));\r\n            bloom.downsampleFramebuffers[i] = device.createFramebuffer(new FramebufferInfo(\r\n                bloom.renderPass,\r\n                [bloom.downsampleTexs[i]],\r\n            ));\r\n\r\n            bloom.upsampleTexs.push(device.createTexture(new TextureInfo(\r\n                TextureType.TEX2D,\r\n                TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n                Format.RGBA8,\r\n                curWidth,\r\n                curHeight,\r\n            )));\r\n            bloom.upsampleFramebuffers[i] = device.createFramebuffer(new FramebufferInfo(\r\n                bloom.renderPass,\r\n                [bloom.upsampleTexs[i]],\r\n            ));\r\n\r\n            curWidth >>= 1;\r\n            curHeight >>= 1;\r\n        }\r\n\r\n        // combine\r\n        bloom.combineTex = device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n            Format.RGBA8,\r\n            this._width,\r\n            this._height,\r\n        ));\r\n        bloom.combineFramebuffer = device.createFramebuffer(new FramebufferInfo(\r\n            bloom.renderPass,\r\n            [bloom.combineTex],\r\n        ));\r\n\r\n        // sampler\r\n        bloom.sampler = this.globalDSManager.linearSampler;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Register an callback of the pipeline event type on the RenderPipeline.\r\n     * @zh\r\n     * 在渲染管线中注册管线事件类型的回调。\r\n     */\r\n    public on<TFunction extends PipelineEventCallback> (type: PipelineEventType, callback: TFunction, target?: any, once?: boolean): typeof callback {\r\n        return this._eventProcessor.on(type, callback, target, once);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Register an callback of the pipeline event type on the RenderPipeline,\r\n     * the callback will remove itself after the first time it is triggered.\r\n     * @zh\r\n     * 在渲染管线中注册管线事件类型的回调, 回调后会在第一时间删除自身。\r\n     */\r\n    public once<TFunction extends PipelineEventCallback> (type: PipelineEventType, callback: TFunction, target?: any): typeof callback {\r\n        return this._eventProcessor.once(type, callback, target);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Removes the listeners previously registered with the same type, callback, target and or useCapture,\r\n     * if only type is passed as parameter, all listeners registered with that type will be removed.\r\n     * @zh\r\n     * 删除之前用同类型、回调、目标或 useCapture 注册的事件监听器，如果只传递 type，将会删除 type 类型的所有事件监听器。\r\n     */\r\n    public off<TFunction extends PipelineEventCallback> (type: PipelineEventType, callback?: TFunction, target?: any): void {\r\n        this._eventProcessor.off(type, callback, target);\r\n    }\r\n\r\n    /**\r\n     * @zh 派发一个指定事件，并传递需要的参数\r\n     * @en Trigger an event directly with the event name and necessary arguments.\r\n     * @param type - event type\r\n     * @param args - Arguments when the event triggered\r\n     */\r\n    public emit (type: PipelineEventType, arg0?: any, arg1?: any, arg2?: any, arg3?: any, arg4?: any): void {\r\n        this._eventProcessor.emit(type, arg0, arg1, arg2, arg3, arg4);\r\n    }\r\n\r\n    /**\r\n     * @en Removes all callbacks previously registered with the same target (passed as parameter).\r\n     * This is not for removing all listeners in the current event target,\r\n     * and this is not for removing all listeners the target parameter have registered.\r\n     * It's only for removing all listeners (callback and target couple) registered on the current event target by the target parameter.\r\n     * @zh 在当前 EventTarget 上删除指定目标（target 参数）注册的所有事件监听器。\r\n     * 这个函数无法删除当前 EventTarget 的所有事件监听器，也无法删除 target 参数所注册的所有事件监听器。\r\n     * 这个函数只能删除 target 参数在当前 EventTarget 上注册的所有事件监听器。\r\n     * @param typeOrTarget - The target to be searched for all related listeners\r\n     */\r\n    public targetOff (typeOrTarget: any): void {\r\n        this._eventProcessor.targetOff(typeOrTarget);\r\n    }\r\n\r\n    /**\r\n     * @zh 移除在特定事件类型中注册的所有回调或在某个目标中注册的所有回调。\r\n     * @en Removes all callbacks registered in a certain event type or all callbacks registered with a certain target\r\n     * @param typeOrTarget - The event type or target with which the listeners will be removed\r\n     */\r\n    public removeAll (typeOrTarget: any): void {\r\n        this._eventProcessor.removeAll(typeOrTarget);\r\n    }\r\n\r\n    /**\r\n     * @zh 检查指定事件是否已注册回调。\r\n     * @en Checks whether there is correspond event listener registered on the given event.\r\n     * @param type - Event type.\r\n     * @param callback - Callback function when event triggered.\r\n     * @param target - Callback callee.\r\n     */\r\n    public hasEventListener (type: PipelineEventType, callback?: PipelineEventCallback, target?: any): boolean {\r\n        return this._eventProcessor.hasEventListener(type, callback, target);\r\n    }\r\n}\r\n\r\n// Do not delete, for the class detection of editor\r\ncclegacy.RenderPipeline = RenderPipeline;\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport enum CommonStagePriority {\r\n    BLOOM = 18,\r\n    POST_PROCESS = 19,\r\n    UI = 20\r\n}\r\n\r\n/**\r\n * @zh 前向阶段优先级。\r\n * @en The priority of stage in forward rendering\r\n */\r\nexport enum ForwardStagePriority {\r\n    AR = 5,\r\n    FORWARD = 10,\r\n}\r\n\r\n/**\r\n * @zh 前向渲染流程优先级。\r\n * @en The priority of flows in forward rendering\r\n */\r\nexport enum ForwardFlowPriority {\r\n    SHADOW = 0,\r\n    FORWARD = 1,\r\n    UI = 10,\r\n}\r\n\r\n/**\r\n * @zh 延迟阶段优先级。\r\n * @en The priority of stage in forward rendering\r\n */\r\nexport enum DeferredStagePriority {\r\n    GBUFFER = 10,\r\n    LIGHTING = 15,\r\n    TRANSPARENT = 18\r\n}\r\n\r\n/**\r\n * @zh 延迟渲染流程优先级。\r\n * @en The priority of flows in forward rendering\r\n */\r\nexport enum DeferredFlowPriority {\r\n    SHADOW = 0,\r\n    MAIN = 1,\r\n    UI = 10,\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, type, serializable, editable } from 'cc.decorator';\r\nimport { CCString, ccenum } from '../core';\r\nimport { AccessFlagBit, Format, LoadOp, StoreOp, TextureType, TextureUsageBit } from '../gfx';\r\nimport { RenderTexture } from '../asset/assets/render-texture';\r\nimport { Material } from '../asset/assets/material';\r\n\r\nccenum(TextureType);\r\nccenum(TextureUsageBit);\r\nccenum(StoreOp);\r\nccenum(LoadOp);\r\nccenum(AccessFlagBit);\r\nccenum(Format);\r\n\r\n/**\r\n * @en The tag of the render flow, including SCENE, POSTPROCESS and UI.\r\n * @zh 渲染流程的标签，包含：常规场景（SCENE），后处理（POSTPROCESS），UI 界面（UI）\r\n */\r\nexport enum RenderFlowTag {\r\n    SCENE,\r\n    POSTPROCESS,\r\n    UI,\r\n}\r\n\r\nccenum(RenderFlowTag);\r\n\r\n@ccclass('RenderTextureDesc')\r\nexport class RenderTextureDesc {\r\n    @serializable\r\n    @editable\r\n    public name = '';\r\n    @type(TextureType)\r\n    public type: TextureType = TextureType.TEX2D;\r\n    @type(TextureUsageBit)\r\n    public usage: TextureUsageBit = TextureUsageBit.COLOR_ATTACHMENT;\r\n    @type(Format)\r\n    public format: Format = Format.UNKNOWN;\r\n    @serializable\r\n    @editable\r\n    public width = -1;\r\n    @serializable\r\n    @editable\r\n    public height = -1;\r\n}\r\n\r\n@ccclass('RenderTextureConfig')\r\nexport class RenderTextureConfig {\r\n    @serializable\r\n    @editable\r\n    public name = '';\r\n    @type(RenderTexture)\r\n    public texture: RenderTexture | null = null;\r\n}\r\n\r\n@ccclass('MaterialConfig')\r\nexport class MaterialConfig {\r\n    @serializable\r\n    @editable\r\n    public name = '';\r\n    @type(Material)\r\n    public material: Material | null = null;\r\n}\r\n\r\n@ccclass('FrameBufferDesc')\r\nexport class FrameBufferDesc {\r\n    @serializable\r\n    @editable\r\n    public name = '';\r\n    @serializable\r\n    @editable\r\n    public renderPass = 0;\r\n    @type([CCString])\r\n    public colorTextures: string[] = [];\r\n    @serializable\r\n    @editable\r\n    public depthStencilTexture = '';\r\n    @type(RenderTexture)\r\n    public texture: RenderTexture | null = null;\r\n}\r\n\r\n@ccclass('ColorDesc')\r\nexport class ColorDesc {\r\n    @type(Format)\r\n    public format: Format = Format.UNKNOWN;\r\n    @type(LoadOp)\r\n    public loadOp: LoadOp = LoadOp.CLEAR;\r\n    @type(StoreOp)\r\n    public storeOp: StoreOp = StoreOp.STORE;\r\n    @serializable\r\n    @editable\r\n    public sampleCount = 1;\r\n    @type(AccessFlagBit)\r\n    public beginAccesses: AccessFlagBit = AccessFlagBit.NONE;\r\n    @type(AccessFlagBit)\r\n    public endAccesses: AccessFlagBit = AccessFlagBit.COLOR_ATTACHMENT_WRITE;\r\n}\r\n\r\n@ccclass('DepthStencilDesc')\r\nexport class DepthStencilDesc {\r\n    @type(Format)\r\n    public format: Format = Format.UNKNOWN;\r\n    @type(LoadOp)\r\n    public depthLoadOp: LoadOp = LoadOp.CLEAR;\r\n    @type(StoreOp)\r\n    public depthStoreOp: StoreOp = StoreOp.STORE;\r\n    @type(LoadOp)\r\n    public stencilLoadOp: LoadOp = LoadOp.CLEAR;\r\n    @type(StoreOp)\r\n    public stencilStoreOp: StoreOp = StoreOp.STORE;\r\n    @serializable\r\n    @editable\r\n    public sampleCount = 1;\r\n    @type(AccessFlagBit)\r\n    public beginAccesses: AccessFlagBit = AccessFlagBit.NONE;\r\n    @type(AccessFlagBit)\r\n    public endAccesses: AccessFlagBit = AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE;\r\n}\r\n\r\n@ccclass('RenderPassDesc')\r\nexport class RenderPassDesc {\r\n    @serializable\r\n    @editable\r\n    public index = -1;\r\n    @type([ColorDesc])\r\n    public colorAttachments = [];\r\n    @type(DepthStencilDesc)\r\n    public depthStencilAttachment: DepthStencilDesc = new DepthStencilDesc();\r\n}\r\n\r\nexport enum RenderQueueSortMode {\r\n    FRONT_TO_BACK,\r\n    BACK_TO_FRONT,\r\n}\r\n\r\nccenum(RenderQueueSortMode);\r\n\r\n/**\r\n * @en The render queue descriptor\r\n * @zh 渲染队列描述信息\r\n */\r\n@ccclass('RenderQueueDesc')\r\nexport class RenderQueueDesc {\r\n    /**\r\n     * @en Whether the render queue is a transparent queue\r\n     * @zh 当前队列是否是半透明队列\r\n     */\r\n    @serializable\r\n    @editable\r\n    public isTransparent = false;\r\n\r\n    /**\r\n     * @en The sort mode of the render queue\r\n     * @zh 渲染队列的排序模式\r\n     */\r\n    @type(RenderQueueSortMode)\r\n    public sortMode: RenderQueueSortMode = RenderQueueSortMode.FRONT_TO_BACK;\r\n\r\n    /**\r\n     * @en The stages using this queue\r\n     * @zh 使用当前渲染队列的阶段列表\r\n     */\r\n    @type([CCString])\r\n    public stages: string[] = [];\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { markAsWarning } from '../core';\r\nimport { RenderPipeline } from './render-pipeline';\r\n\r\n// deprecate RenderPipeline API\r\nmarkAsWarning(RenderPipeline.prototype, 'RenderPipeline.prototype', [\r\n    {\r\n        name: 'geometryRenderer',\r\n        suggest: 'please use camera.geometryRenderer instead.',\r\n    },\r\n]);\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { RecyclePool, CachedArray } from '../core';\r\nimport { getPassPool, IRenderObject, IRenderPass, IRenderQueueDesc, SetIndex } from './define';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { RenderPass, Device, CommandBuffer } from '../gfx';\r\nimport { RenderQueueDesc, RenderQueueSortMode } from './pipeline-serialization';\r\nimport { getPhaseID } from './pass-phase';\r\n\r\n/**\r\n * @en Comparison sorting function. Opaque objects are sorted by priority -> depth front to back -> shader ID.\r\n * @zh 比较排序函数。不透明对象按优先级 -> 深度由前向后 -> Shader ID 顺序排序。\r\n */\r\nexport function opaqueCompareFn (a: IRenderPass, b: IRenderPass): number {\r\n    return (a.hash - b.hash) || (a.depth - b.depth) || (a.shaderId - b.shaderId);\r\n}\r\n\r\n/**\r\n * @en Comparison sorting function. Transparent objects are sorted by priority -> depth back to front -> shader ID.\r\n * @zh 比较排序函数。半透明对象按优先级 -> 深度由后向前 -> Shader ID 顺序排序。\r\n */\r\nexport function transparentCompareFn (a: IRenderPass, b: IRenderPass): number {\r\n    return (a.priority - b.priority) || (a.hash - b.hash) || (b.depth - a.depth) || (a.shaderId - b.shaderId);\r\n}\r\n\r\n/**\r\n * @en The render queue. It manages a GFX [[RenderPass]] queue which will be executed by the [[RenderStage]].\r\n * @zh 渲染队列。它管理一个 GFX [[RenderPass]] 队列，队列中的渲染过程会被 [[RenderStage]] 所执行。\r\n */\r\nexport class RenderQueue {\r\n    /**\r\n     * @en A cached array of render passes\r\n     * @zh 基于缓存数组的渲染过程队列。\r\n     */\r\n    public declare queue: CachedArray<IRenderPass>;\r\n\r\n    private declare _passDesc: IRenderQueueDesc;\r\n    private declare _passPool: RecyclePool<IRenderPass>;\r\n\r\n    /**\r\n     * @en Construct a RenderQueue with render queue descriptor\r\n     * @zh 利用渲染队列描述来构造一个 RenderQueue。\r\n     * @param desc Render queue descriptor\r\n     */\r\n    constructor (desc: IRenderQueueDesc) {\r\n        this._passDesc = desc;\r\n        this._passPool = getPassPool();\r\n        this.queue = new CachedArray(64, this._passDesc.sortFunc);\r\n    }\r\n\r\n    /**\r\n     * @en Clear the render queue\r\n     * @zh 清空渲染队列。\r\n     */\r\n    public clear (): void {\r\n        this.queue.clear();\r\n        this._passPool.reset();\r\n    }\r\n\r\n    /**\r\n     * @en Insert a render pass into the queue\r\n     * @zh 插入渲染过程。\r\n     * @param renderObj The render object of the pass\r\n     * @param modelIdx The model id\r\n     * @param passIdx The pass id\r\n     * @returns Whether the new render pass is successfully added\r\n     */\r\n    public insertRenderPass (renderObj: IRenderObject, subModelIdx: number, passIdx: number): boolean {\r\n        const subModel = renderObj.model.subModels[subModelIdx];\r\n        const pass = subModel.passes[passIdx];\r\n        const shader = subModel.shaders[passIdx];\r\n        const isTransparent = pass.blendState.targets[0].blend;\r\n        if (isTransparent !== this._passDesc.isTransparent || !(pass.phase & this._passDesc.phases)) {\r\n            return false;\r\n        }\r\n        const hash = (0 << 30) | (pass.priority as number) << 16 | (subModel.priority as number) << 8 | passIdx;\r\n        const rp = this._passPool.add();\r\n        rp.priority = renderObj.model.priority;\r\n        rp.hash = hash;\r\n        rp.depth = renderObj.depth || 0;\r\n        rp.shaderId = shader.typedID;\r\n        rp.subModel = subModel;\r\n        rp.passIdx = passIdx;\r\n        this.queue.push(rp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Sort the current queue\r\n     * @zh 排序渲染队列。\r\n     */\r\n    public sort (): void {\r\n        this.queue.sort();\r\n    }\r\n\r\n    public recordCommandBuffer (device: Device, renderPass: RenderPass, cmdBuff: CommandBuffer): void {\r\n        for (let i = 0; i < this.queue.length; ++i) {\r\n            const { subModel, passIdx } = this.queue.array[i];\r\n            const { inputAssembler } = subModel;\r\n            const pass = subModel.passes[passIdx];\r\n            const shader = subModel.shaders[passIdx];\r\n            const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);\r\n            cmdBuff.bindInputAssembler(inputAssembler);\r\n            cmdBuff.draw(inputAssembler);\r\n        }\r\n    }\r\n}\r\n\r\nexport function convertRenderQueue (desc: RenderQueueDesc): RenderQueue {\r\n    let phase = 0;\r\n    for (let j = 0; j < desc.stages.length; j++) {\r\n        phase |= getPhaseID(desc.stages[j]);\r\n    }\r\n    let sortFunc: (a: IRenderPass, b: IRenderPass) => number = opaqueCompareFn;\r\n    switch (desc.sortMode) {\r\n    case RenderQueueSortMode.BACK_TO_FRONT:\r\n        sortFunc = transparentCompareFn;\r\n        break;\r\n    case RenderQueueSortMode.FRONT_TO_BACK:\r\n        sortFunc = opaqueCompareFn;\r\n        break;\r\n    default:\r\n        break;\r\n    }\r\n\r\n    return new RenderQueue({\r\n        isTransparent: desc.isTransparent,\r\n        phases: phase,\r\n        sortFunc,\r\n    });\r\n}\r\n\r\n/**\r\n * @en Clear the given render queue\r\n * @zh 清空指定的渲染队列\r\n * @param rq The render queue\r\n */\r\nexport function renderQueueClearFunc (rq: RenderQueue): void {\r\n    rq.clear();\r\n}\r\n\r\n/**\r\n * @en Sort the given render queue\r\n * @zh 对指定的渲染队列执行排序\r\n * @param rq The render queue\r\n */\r\nexport function renderQueueSortFunc (rq: RenderQueue): void {\r\n    rq.sort();\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { InstancedBuffer, instancingCompareFn } from './instanced-buffer';\r\nimport { Device, RenderPass, PipelineState, CommandBuffer, DescriptorSet } from '../gfx';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { SetIndex } from './define';\r\n\r\n/**\r\n * @en Render queue for instanced batching\r\n * @zh 渲染合批队列。\r\n */\r\nexport class RenderInstancedQueue {\r\n    /**\r\n     * @en A set of instanced buffer\r\n     * @zh Instance 合批缓存集合。\r\n     */\r\n    public queue = new Set<InstancedBuffer>();\r\n\r\n    private _renderQueue: InstancedBuffer[] = [];\r\n\r\n    /**\r\n     * @en Clear the render queue\r\n     * @zh 清空渲染队列。\r\n     */\r\n    public clear (): void {\r\n        const it = this.queue.values(); let res = it.next();\r\n        while (!res.done) {\r\n            res.value.clear();\r\n            res = it.next();\r\n        }\r\n        this._renderQueue.length = 0;\r\n        this.queue.clear();\r\n    }\r\n\r\n    public sort (): void {\r\n        const sortedArray = Array.from(this.queue).sort(instancingCompareFn);\r\n        sortedArray.forEach((item) => {\r\n            if (!item.pass.blendState.targets[0]?.blend) {\r\n                this._renderQueue.push(item);\r\n            }\r\n        });\r\n        sortedArray.forEach((item) => {\r\n            if (item.pass.blendState.targets[0]?.blend) {\r\n                this._renderQueue.push(item);\r\n            }\r\n        });\r\n    }\r\n\r\n    public uploadBuffers (cmdBuff: CommandBuffer): void {\r\n        const it = this.queue.values(); let res = it.next();\r\n        while (!res.done) {\r\n            if (res.value.hasPendingModels) res.value.uploadBuffers(cmdBuff);\r\n            res = it.next();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Record command buffer for the current queue\r\n     * @zh 记录命令缓冲。\r\n     * @param cmdBuff The command buffer to store the result\r\n     */\r\n    public recordCommandBuffer (\r\n        device: Device,\r\n        renderPass: RenderPass,\r\n        cmdBuff: CommandBuffer,\r\n        descriptorSet: DescriptorSet | null = null,\r\n        dynamicOffsets?: Readonly<number[]>,\r\n    ): void {\r\n        const it = this._renderQueue.length === 0 ? this.queue.values() : this._renderQueue[Symbol.iterator]();\r\n        let res = it.next();\r\n\r\n        while (!res.done) {\r\n            const { instances, pass, hasPendingModels } = res.value;\r\n            if (hasPendingModels) {\r\n                cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n                let lastPSO: PipelineState | null = null;\r\n                for (let b = 0; b < instances.length; ++b) {\r\n                    const instance = instances[b];\r\n                    if (!instance.count) { continue; }\r\n                    const shader = instance.shader;\r\n                    const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader!, renderPass, instance.ia);\r\n                    if (lastPSO !== pso) {\r\n                        cmdBuff.bindPipelineState(pso);\r\n                        lastPSO = pso;\r\n                    }\r\n                    if (descriptorSet) cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, descriptorSet);\r\n                    if (dynamicOffsets) {\r\n                        cmdBuff.bindDescriptorSet(SetIndex.LOCAL, instance.descriptorSet, dynamicOffsets);\r\n                    } else {\r\n                        cmdBuff.bindDescriptorSet(SetIndex.LOCAL, instance.descriptorSet, res.value.dynamicOffsets);\r\n                    }\r\n                    cmdBuff.bindInputAssembler(instance.ia);\r\n                    cmdBuff.draw(instance.ia);\r\n                }\r\n            }\r\n            res = it.next();\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BatchingSchemes, Pass } from '../render-scene/core/pass';\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { Vec3, nextPow2, Mat4, Color, Pool, geometry, cclegacy } from '../core';\r\nimport { Device, RenderPass, Buffer, BufferUsageBit, MemoryUsageBit,\r\n    BufferInfo, BufferViewInfo, CommandBuffer, deviceManager } from '../gfx';\r\nimport { RenderInstancedQueue } from './render-instanced-queue';\r\nimport { SphereLight } from '../render-scene/scene/sphere-light';\r\nimport { SpotLight } from '../render-scene/scene/spot-light';\r\nimport { PointLight } from '../render-scene/scene/point-light';\r\nimport { RangedDirectionalLight } from '../render-scene/scene/ranged-directional-light';\r\nimport { SubModel } from '../render-scene/scene/submodel';\r\nimport { getPhaseID } from './pass-phase';\r\nimport { Light, LightType } from '../render-scene/scene/light';\r\nimport { SetIndex, UBOShadow, UNIFORM_SHADOWMAP_BINDING,\r\n    UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, supportsR32FloatTexture, isEnableEffect,\r\n    UBOShadowEnum,\r\n    UBOForwardLightEnum,\r\n    UBOForwardLight } from './define';\r\nimport { Camera } from '../render-scene/scene/camera';\r\nimport { ShadowType } from '../render-scene/scene/shadows';\r\nimport { GlobalDSManager } from './global-descriptor-set-manager';\r\nimport { PipelineUBO } from './pipeline-ubo';\r\nimport { PipelineRuntime } from './custom/pipeline';\r\nimport { AABB } from '../core/geometry';\r\n\r\ninterface IAdditiveLightPass {\r\n    subModel: SubModel;\r\n    passIdx: number;\r\n    dynamicOffsets: number[];\r\n    lights: Light[];\r\n}\r\n\r\nconst _lightPassPool = new Pool<IAdditiveLightPass>(() => ({ subModel: null!, passIdx: -1, dynamicOffsets: [], lights: [] }), 16);\r\n\r\nconst _v3 = new Vec3();\r\nconst _vec4Array = new Float32Array(4);\r\nconst _dynamicOffsets: number[] = [];\r\nconst _lightIndices: number[] = [];\r\nconst _matShadowView = new Mat4();\r\nconst _matShadowViewProj = new Mat4();\r\nconst _rangedDirLightBoundingBox = new AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\r\nconst _tmpBoundingBox = new AABB();\r\n\r\nfunction cullSphereLight (light: SphereLight, model: Model): boolean {\r\n    return !!(model.worldBounds && !geometry.intersect.aabbWithAABB(model.worldBounds, light.aabb));\r\n}\r\n\r\nfunction cullSpotLight (light: SpotLight, model: Model): boolean {\r\n    return !!(model.worldBounds\r\n        && (!geometry.intersect.aabbWithAABB(model.worldBounds, light.aabb) || !geometry.intersect.aabbFrustum(model.worldBounds, light.frustum)));\r\n}\r\n\r\nfunction cullPointLight (light: PointLight, model: Model): boolean {\r\n    return !!(model.worldBounds && !geometry.intersect.aabbWithAABB(model.worldBounds, light.aabb));\r\n}\r\n\r\nfunction cullRangedDirLight (light: RangedDirectionalLight, model: Model): boolean {\r\n    AABB.transform(_tmpBoundingBox, _rangedDirLightBoundingBox, light.node!.getWorldMatrix());\r\n    return !!(model.worldBounds\r\n        && (!geometry.intersect.aabbWithAABB(model.worldBounds, _tmpBoundingBox)));\r\n}\r\n\r\nconst phaseName = 'forward-add';\r\nlet _phaseID = getPhaseID(phaseName);\r\nconst _lightPassIndices: number[] = [];\r\nfunction getLightPassIndices (subModels: SubModel[], lightPassIndices: number[], passLayout = 'default'): boolean {\r\n    const r = cclegacy.rendering;\r\n    if (isEnableEffect()) {\r\n        _phaseID = r.getPhaseID(r.getPassID(passLayout), phaseName);\r\n    }\r\n    lightPassIndices.length = 0;\r\n    let hasValidLightPass = false;\r\n    for (let j = 0; j < subModels.length; j++) {\r\n        const { passes } = subModels[j];\r\n        let lightPassIndex = -1;\r\n        for (let k = 0; k < passes.length; k++) {\r\n            if (((!r || !r.enableEffectImport) && passes[k].phase === _phaseID)\r\n            || (isEnableEffect() && passes[k].phaseID === _phaseID)) {\r\n                lightPassIndex = k;\r\n                hasValidLightPass = true;\r\n                break;\r\n            }\r\n        }\r\n        lightPassIndices.push(lightPassIndex);\r\n    }\r\n    return hasValidLightPass;\r\n}\r\n\r\n/**\r\n * @zh 叠加光照队列。\r\n */\r\nexport class RenderAdditiveLightQueue {\r\n    private declare _pipeline: PipelineRuntime;\r\n    private declare _device: Device;\r\n    private _lightPasses: IAdditiveLightPass[] = [];\r\n    private _instancedLightPassPool = _lightPassPool.alloc();\r\n    private _shadowUBO = new Float32Array(UBOShadowEnum.COUNT);\r\n    private _lightBufferCount = 16;\r\n    private declare _lightBufferStride: number;\r\n    private declare _lightBufferElementCount: number;\r\n    private declare _lightBuffer: Buffer;\r\n    private declare _firstLightBufferView: Buffer;\r\n    private declare _lightBufferData: Float32Array;\r\n    private _instancedQueues: RenderInstancedQueue[] = [];\r\n    private _lightMeterScale = 10000.0;\r\n\r\n    constructor (pipeline: PipelineRuntime) {\r\n        this._pipeline = pipeline;\r\n        this._device = pipeline.device;\r\n\r\n        const alignment = this._device.capabilities.uboOffsetAlignment;\r\n        this._lightBufferStride = Math.ceil(UBOForwardLightEnum.SIZE / alignment) * alignment;\r\n        this._lightBufferElementCount = this._lightBufferStride / Float32Array.BYTES_PER_ELEMENT;\r\n\r\n        this._lightBuffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            this._lightBufferStride * this._lightBufferCount,\r\n            this._lightBufferStride,\r\n        ));\r\n\r\n        this._firstLightBufferView = this._device.createBuffer(new BufferViewInfo(this._lightBuffer, 0, UBOForwardLightEnum.SIZE));\r\n\r\n        this._lightBufferData = new Float32Array(this._lightBufferElementCount * this._lightBufferCount);\r\n    }\r\n\r\n    public clear (): void {\r\n        this._instancedQueues.forEach((instancedQueue) => {\r\n            instancedQueue.clear();\r\n        });\r\n        this._instancedQueues.length = 0;\r\n\r\n        for (let i = 0; i < this._lightPasses.length; i++) {\r\n            const lp = this._lightPasses[i];\r\n            lp.dynamicOffsets.length = 0;\r\n            lp.lights.length = 0;\r\n        }\r\n        _lightPassPool.freeArray(this._lightPasses);\r\n        this._lightPasses.length = 0;\r\n\r\n        this._instancedLightPassPool.dynamicOffsets.length = 0;\r\n        this._instancedLightPassPool.lights.length = 0;\r\n    }\r\n\r\n    public destroy (): void {\r\n        const descriptorSetMap = this._pipeline.globalDSManager.descriptorSetMap;\r\n        const keys = descriptorSetMap.keys;\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const key = keys[i] as Light;\r\n            const descriptorSet = descriptorSetMap.get(key)!;\r\n            if (descriptorSet) {\r\n                descriptorSet.getBuffer(UBOShadow.BINDING).destroy();\r\n                descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();\r\n                descriptorSet.getTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING).destroy();\r\n                descriptorSet.destroy();\r\n            }\r\n            descriptorSetMap.delete(key);\r\n        }\r\n    }\r\n\r\n    private _bindForwardAddLight (validPunctualLights: Light[], passLayout = 'default'): void {\r\n        const renderObjects = this._pipeline.pipelineSceneData.renderObjects;\r\n        for (let i = 0; i < renderObjects.length; i++) {\r\n            const ro = renderObjects[i];\r\n            const { model } = ro;\r\n            const { subModels } = model;\r\n            if (!getLightPassIndices(subModels, _lightPassIndices, passLayout)) { continue; }\r\n\r\n            _lightIndices.length = 0;\r\n\r\n            this._lightCulling(model, validPunctualLights);\r\n\r\n            if (!_lightIndices.length && validPunctualLights.length > 0) { continue; }\r\n\r\n            for (let j = 0; j < subModels.length; j++) {\r\n                const lightPassIdx = _lightPassIndices[j];\r\n                if (lightPassIdx < 0) { continue; }\r\n                const subModel = subModels[j];\r\n                const pass = subModel.passes[lightPassIdx];\r\n                // object has translucent base pass, prohibiting forward-add pass for multi light sources lighting\r\n                const isTransparent = subModel.passes[0].blendState.targets[0].blend;\r\n                if (isTransparent) {\r\n                    continue;\r\n                }\r\n                subModel.descriptorSet.bindBuffer(UBOForwardLight.BINDING, this._firstLightBufferView);\r\n                subModel.descriptorSet.update();\r\n\r\n                this._addRenderQueue(pass, subModel, model, lightPassIdx);\r\n            }\r\n        }\r\n    }\r\n\r\n    public gatherLightPasses (camera: Camera, cmdBuff: CommandBuffer, passLayout = 'default'): void {\r\n        this.clear();\r\n\r\n        const validPunctualLights = this._pipeline.pipelineSceneData.validPunctualLights;\r\n        if (!validPunctualLights.length) {\r\n            this._bindForwardAddLight(validPunctualLights, passLayout);\r\n            return;\r\n        }\r\n\r\n        this._updateUBOs(camera, cmdBuff);\r\n        this._updateLightDescriptorSet(camera, cmdBuff);\r\n        this._bindForwardAddLight(validPunctualLights, passLayout);\r\n        // only for instanced and batched, no light culling applied\r\n        for (let l = 0; l < validPunctualLights.length; l++) {\r\n            const light = validPunctualLights[l];\r\n            this._instancedLightPassPool.lights.push(light);\r\n            this._instancedLightPassPool.dynamicOffsets.push(this._lightBufferStride * l);\r\n        }\r\n\r\n        this._instancedQueues.forEach((instancedQueue) => {\r\n            instancedQueue.uploadBuffers(cmdBuff);\r\n        });\r\n    }\r\n\r\n    public recordCommandBuffer (device: Device, renderPass: RenderPass, cmdBuff: CommandBuffer): void {\r\n        const globalDSManager: GlobalDSManager = this._pipeline.globalDSManager;\r\n        for (let j = 0; j < this._instancedQueues.length; ++j) {\r\n            const light = this._instancedLightPassPool.lights[j];\r\n            _dynamicOffsets[0] = this._instancedLightPassPool.dynamicOffsets[j];\r\n            const descriptorSet = globalDSManager.getOrCreateDescriptorSet(light);\r\n            this._instancedQueues[j].recordCommandBuffer(device, renderPass, cmdBuff, descriptorSet, _dynamicOffsets);\r\n        }\r\n\r\n        for (let i = 0; i < this._lightPasses.length; i++) {\r\n            const { subModel, passIdx, dynamicOffsets, lights } = this._lightPasses[i];\r\n            const pass = subModel.passes[passIdx];\r\n            const shader = subModel.shaders[passIdx];\r\n            const ia = subModel.inputAssembler;\r\n            const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);\r\n            const matDS = pass.descriptorSet;\r\n            const localDS = subModel.descriptorSet;\r\n\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, matDS);\r\n            cmdBuff.bindInputAssembler(ia);\r\n\r\n            for (let j = 0; j < dynamicOffsets.length; ++j) {\r\n                const light = lights[j];\r\n                const descriptorSet = globalDSManager.getOrCreateDescriptorSet(light)!;\r\n                _dynamicOffsets[0] = dynamicOffsets[j];\r\n                cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, descriptorSet);\r\n                cmdBuff.bindDescriptorSet(SetIndex.LOCAL, localDS, _dynamicOffsets);\r\n                cmdBuff.draw(ia);\r\n            }\r\n        }\r\n    }\r\n\r\n    // light culling\r\n    protected _lightCulling (model: Model, validPunctualLights: Light[]): void {\r\n        let isCulled = false;\r\n        for (let l = 0; l < validPunctualLights.length; l++) {\r\n            const light = validPunctualLights[l];\r\n            switch (light.type) {\r\n            case LightType.SPHERE:\r\n                isCulled = cullSphereLight(light as SphereLight, model);\r\n                break;\r\n            case LightType.SPOT:\r\n                isCulled = cullSpotLight(light as SpotLight, model);\r\n                break;\r\n            case LightType.POINT:\r\n                isCulled = cullPointLight(light as PointLight, model);\r\n                break;\r\n            case LightType.RANGED_DIRECTIONAL:\r\n                isCulled = cullRangedDirLight(light as RangedDirectionalLight, model);\r\n                break;\r\n            default:\r\n            }\r\n            if (!isCulled) {\r\n                _lightIndices.push(l);\r\n            }\r\n        }\r\n    }\r\n\r\n    // add renderQueue\r\n    protected _addRenderQueue (pass: Pass, subModel: SubModel, model: Model, lightPassIdx: number): void {\r\n        const validPunctualLights = this._pipeline.pipelineSceneData.validPunctualLights;\r\n        const { batchingScheme } = pass;\r\n\r\n        let lp: IAdditiveLightPass | null = null;\r\n        if (batchingScheme === BatchingSchemes.NONE) {\r\n            lp = _lightPassPool.alloc();\r\n            lp.subModel = subModel;\r\n            lp.passIdx = lightPassIdx;\r\n        }\r\n\r\n        for (let l = 0; l < _lightIndices.length; l++) {\r\n            const lightIdx = _lightIndices[l];\r\n            const light = validPunctualLights[lightIdx];\r\n            const visibility = light.visibility;\r\n            if (((visibility & model.node.layer) === model.node.layer)) {\r\n                switch (batchingScheme) {\r\n                case BatchingSchemes.INSTANCING: {\r\n                    const buffer = pass.getInstancedBuffer(l);\r\n                    buffer.merge(subModel, lightPassIdx);\r\n                    buffer.dynamicOffsets[0] = this._lightBufferStride;\r\n                    if (!this._instancedQueues[l]) { this._instancedQueues[l] = new RenderInstancedQueue(); }\r\n                    this._instancedQueues[l].queue.add(buffer);\r\n                } break;\r\n                default:\r\n                    lp!.lights.push(light);\r\n                    lp!.dynamicOffsets.push(this._lightBufferStride * lightIdx);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (batchingScheme === BatchingSchemes.NONE) {\r\n            this._lightPasses.push(lp!);\r\n        }\r\n    }\r\n\r\n    // update light DescriptorSet\r\n    protected _updateLightDescriptorSet (camera: Camera, cmdBuff: CommandBuffer): void {\r\n        const device = this._pipeline.device;\r\n        const sceneData = this._pipeline.pipelineSceneData;\r\n        const shadowInfo = sceneData.shadows;\r\n        const shadowFrameBufferMap = sceneData.shadowFrameBufferMap;\r\n        const mainLight = camera.scene!.mainLight;\r\n        const packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;\r\n        const globalDSManager: GlobalDSManager = this._pipeline.globalDSManager;\r\n        const validPunctualLights = sceneData.validPunctualLights;\r\n        const cap = this._pipeline.device.capabilities;\r\n\r\n        for (let i = 0; i < validPunctualLights.length; i++) {\r\n            const light = validPunctualLights[i];\r\n            const descriptorSet = globalDSManager.getOrCreateDescriptorSet(light);\r\n            if (!descriptorSet) { continue; }\r\n            let matShadowProj: Mat4;\r\n            let matShadowInvProj: Mat4;\r\n            switch (light.type) {\r\n            case LightType.SPHERE: {\r\n                // planar PROJ\r\n                if (mainLight) {\r\n                    PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, this._shadowUBO);\r\n                }\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 0] = shadowInfo.size.x;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 1] = shadowInfo.size.y;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 2] = 1.0;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 3] = 0.0;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 0] = LightType.SPHERE;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 1] = packing;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 2] = 0.0;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 3] = 0.0;\r\n\r\n                // Reserve sphere light shadow interface\r\n                Color.toArray(this._shadowUBO, shadowInfo.shadowColor, UBOShadowEnum.SHADOW_COLOR_OFFSET);\r\n                break;\r\n            }\r\n            case LightType.SPOT: {\r\n                const spotLight = light as SpotLight;\r\n\r\n                // planar PROJ\r\n                if (mainLight) {\r\n                    PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, this._shadowUBO);\r\n                }\r\n\r\n                // light view\r\n                Mat4.invert(_matShadowView, (light as SpotLight).node!.getWorldMatrix());\r\n\r\n                // light proj\r\n                Mat4.perspective(\r\n                    _matShadowViewProj,\r\n                    (light as SpotLight).angle,\r\n                    1.0,\r\n                    0.001,\r\n                    (light as SpotLight).range,\r\n                    true,\r\n                    cap.clipSpaceMinZ,\r\n                    cap.clipSpaceSignY,\r\n                    0,\r\n                );\r\n                matShadowProj = _matShadowViewProj.clone();\r\n                matShadowInvProj = _matShadowViewProj.clone().invert();\r\n\r\n                // light viewProj\r\n                Mat4.multiply(_matShadowViewProj, _matShadowViewProj, _matShadowView);\r\n\r\n                Mat4.toArray(this._shadowUBO, _matShadowView, UBOShadowEnum.MAT_LIGHT_VIEW_OFFSET);\r\n                Mat4.toArray(this._shadowUBO, _matShadowViewProj, UBOShadowEnum.MAT_LIGHT_VIEW_PROJ_OFFSET);\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 0] = 0.01;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 1] = (light as SpotLight).range;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 2] = 0.0;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 3] = 0.0;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 0] = shadowInfo.size.x;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 1] = shadowInfo.size.y;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 2] = spotLight.shadowPcf;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 3] = spotLight.shadowBias;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 0] = LightType.SPOT;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 1] = packing;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 2] = spotLight.shadowNormalBias;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 3] = 0.0;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowProj.m10;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowProj.m14;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowProj.m11;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowProj.m15;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowInvProj.m10;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowInvProj.m14;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowInvProj.m11;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowInvProj.m15;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 0] = matShadowProj.m00;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 1] = matShadowProj.m05;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 2] = 1.0 / matShadowProj.m00;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET + 3] = 1.0 / matShadowProj.m05;\r\n\r\n                Color.toArray(this._shadowUBO, shadowInfo.shadowColor, UBOShadowEnum.SHADOW_COLOR_OFFSET);\r\n\r\n                // Spot light sampler binding\r\n                if (shadowFrameBufferMap.has(light)) {\r\n                    const texture = shadowFrameBufferMap.get(light)?.colorTextures[0];\r\n                    if (texture) {\r\n                        globalDSManager.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, texture);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case LightType.POINT: {\r\n                // planar PROJ\r\n                if (mainLight) {\r\n                    PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, this._shadowUBO);\r\n                }\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 0] = shadowInfo.size.x;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 1] = shadowInfo.size.y;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 2] = 1.0;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 3] = 0.0;\r\n\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 0] = LightType.POINT;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 1] = packing;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 2] = 0.0;\r\n                this._shadowUBO[UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 3] = 0.0;\r\n\r\n                // Reserve point light shadow interface\r\n                Color.toArray(this._shadowUBO, shadowInfo.shadowColor, UBOShadowEnum.SHADOW_COLOR_OFFSET);\r\n                break;\r\n            }\r\n            default:\r\n            }\r\n            globalDSManager.update();\r\n            cmdBuff.updateBuffer(descriptorSet.getBuffer(UBOShadow.BINDING)!, this._shadowUBO);\r\n        }\r\n    }\r\n\r\n    protected _updateUBOs (camera: Camera, cmdBuff: CommandBuffer): void {\r\n        const { exposure } = camera;\r\n        const sceneData = this._pipeline.pipelineSceneData;\r\n        const isHDR = sceneData.isHDR;\r\n        const shadowInfo = sceneData.shadows;\r\n        const validPunctualLights = sceneData.validPunctualLights;\r\n\r\n        if (validPunctualLights.length > this._lightBufferCount) {\r\n            this._firstLightBufferView.destroy();\r\n\r\n            this._lightBufferCount = nextPow2(validPunctualLights.length);\r\n            this._lightBuffer.resize(this._lightBufferStride * this._lightBufferCount);\r\n            this._lightBufferData = new Float32Array(this._lightBufferElementCount * this._lightBufferCount);\r\n\r\n            this._firstLightBufferView = deviceManager.gfxDevice.createBuffer(new BufferViewInfo(this._lightBuffer, 0, UBOForwardLightEnum.SIZE));\r\n        }\r\n\r\n        for (let l = 0, offset = 0; l < validPunctualLights.length; l++, offset += this._lightBufferElementCount) {\r\n            const light = validPunctualLights[l];\r\n\r\n            switch (light.type) {\r\n            case LightType.SPHERE:\r\n                // UBOForwardLight\r\n                Vec3.toArray(_vec4Array, (light as SphereLight).position);\r\n                _vec4Array[3] = LightType.SPHERE;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_POS_OFFSET);\r\n\r\n                _vec4Array[0] = (light as SphereLight).size;\r\n                _vec4Array[1] = (light as SphereLight).range;\r\n                _vec4Array[2] = 0.0;\r\n                _vec4Array[3] = 0.0;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n                if (isHDR) {\r\n                    _vec4Array[3] = (light as SphereLight).luminance * exposure * this._lightMeterScale;\r\n                } else {\r\n                    _vec4Array[3] = (light as SphereLight).luminance;\r\n                }\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_COLOR_OFFSET);\r\n                break;\r\n            case LightType.SPOT:\r\n                // UBOForwardLight\r\n                Vec3.toArray(_vec4Array, (light as SpotLight).position);\r\n                _vec4Array[3] = LightType.SPOT;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_POS_OFFSET);\r\n\r\n                _vec4Array[0] = (light as SpotLight).size;\r\n                _vec4Array[1] = (light as SpotLight).range;\r\n                _vec4Array[2] = (light as SpotLight).spotAngle;\r\n                _vec4Array[3] = (shadowInfo.enabled && (light as SpotLight).shadowEnabled && shadowInfo.type === ShadowType.ShadowMap) ? 1 : 0;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET);\r\n\r\n                Vec3.toArray(_vec4Array, (light as SpotLight).direction);\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n                if (isHDR) {\r\n                    _vec4Array[3] = (light as SpotLight).luminance * exposure * this._lightMeterScale;\r\n                } else {\r\n                    _vec4Array[3] = (light as SpotLight).luminance;\r\n                }\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_COLOR_OFFSET);\r\n\r\n                // cc_lightBoundingSizeVS, light angle attenuation strength\r\n                _vec4Array[0] = 0;\r\n                _vec4Array[1] = 0;\r\n                _vec4Array[2] = 0;\r\n                _vec4Array[3] = (light as SpotLight).angleAttenuationStrength;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET);\r\n                break;\r\n            case LightType.POINT:\r\n                // UBOForwardLight\r\n                Vec3.toArray(_vec4Array, (light as PointLight).position);\r\n                _vec4Array[3] = LightType.POINT;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_POS_OFFSET);\r\n\r\n                _vec4Array[0] = 0.0;\r\n                _vec4Array[1] = (light as PointLight).range;\r\n                _vec4Array[2] = 0.0;\r\n                _vec4Array[3] = 0.0;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n                if (isHDR) {\r\n                    _vec4Array[3] = (light as PointLight).luminance * exposure * this._lightMeterScale;\r\n                } else {\r\n                    _vec4Array[3] = (light as PointLight).luminance;\r\n                }\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_COLOR_OFFSET);\r\n                break;\r\n            case LightType.RANGED_DIRECTIONAL:\r\n                // UBOForwardLight\r\n                Vec3.toArray(_vec4Array, (light as RangedDirectionalLight).position);\r\n                _vec4Array[3] = LightType.RANGED_DIRECTIONAL;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_POS_OFFSET);\r\n\r\n                Vec3.toArray(_vec4Array, (light as RangedDirectionalLight).right);\r\n                _vec4Array[3] = 0;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET);\r\n\r\n                Vec3.toArray(_vec4Array, (light as RangedDirectionalLight).direction);\r\n                _vec4Array[3] = 0;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_DIR_OFFSET);\r\n\r\n                // eslint-disable-next-line no-case-declarations\r\n                const scale = (light as RangedDirectionalLight).scale;\r\n                _v3.set(scale.x * 0.5, scale.y * 0.5, scale.z * 0.5);\r\n                Vec3.toArray(_vec4Array, _v3);\r\n                _vec4Array[3] = 0;\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n                if (isHDR) {\r\n                    _vec4Array[3] = (light as RangedDirectionalLight).illuminance * exposure;\r\n                } else {\r\n                    _vec4Array[3] = (light as RangedDirectionalLight).illuminance;\r\n                }\r\n                this._lightBufferData.set(_vec4Array, offset + UBOForwardLightEnum.LIGHT_COLOR_OFFSET);\r\n                break;\r\n            default:\r\n            }\r\n        }\r\n\r\n        cmdBuff.updateBuffer(this._lightBuffer, this._lightBufferData);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { cclegacy, geometry } from '../core';\r\nimport { isEnableEffect, SetIndex } from './define';\r\nimport { CommandBuffer, Device, RenderPass, Shader } from '../gfx';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { Model, Camera, SubModel } from '../render-scene/scene';\r\nimport { RenderInstancedQueue } from './render-instanced-queue';\r\nimport { ShadowType } from '../render-scene/scene/shadows';\r\nimport { Layers } from '../scene-graph/layers';\r\nimport { PipelineRuntime } from './custom/pipeline';\r\nimport { BatchingSchemes, Pass } from '../render-scene/core/pass';\r\nimport { getPhaseID } from './pass-phase';\r\n\r\nconst _ab = new geometry.AABB();\r\nlet _phaseID = getPhaseID('planar-shadow');\r\nfunction getPlanarShadowPassIndex (subModel: SubModel): number {\r\n    const passes = subModel.passes;\r\n    const r = cclegacy.rendering;\r\n    if (isEnableEffect()) _phaseID = r.getPhaseID(r.getPassID('default'), 'planar-shadow');\r\n    for (let k = 0; k < passes.length; k++) {\r\n        if (((!r || !r.enableEffectImport) && passes[k].phase === _phaseID)\r\n        || (isEnableEffect() && passes[k].phaseID === _phaseID)) {\r\n            return k;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport class PlanarShadowQueue {\r\n    private _subModelArray: SubModel[] = [];\r\n    private _shaderArray: Shader[] = [];\r\n    private _passArray: Pass[] = [];\r\n    private _castModels: Model[] = [];\r\n    private _instancedQueue = new RenderInstancedQueue();\r\n    private _pipeline: PipelineRuntime;\r\n\r\n    constructor (pipeline: PipelineRuntime) {\r\n        this._pipeline = pipeline;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * clear planar-shadow queue\r\n     * @zh\r\n     * 清除 planar-shadow 渲染队列数据\r\n     */\r\n    public clear (): void {\r\n        this._subModelArray.length = 0;\r\n        this._shaderArray.length = 0;\r\n        this._passArray.length = 0;\r\n        this._instancedQueue.clear();\r\n        this._castModels.length = 0;\r\n    }\r\n\r\n    public gatherShadowPasses (camera: Camera, cmdBuff: CommandBuffer): void {\r\n        this.clear();\r\n        const pipelineSceneData = this._pipeline.pipelineSceneData;\r\n        const shadows = pipelineSceneData.shadows;\r\n        if (!shadows.enabled || shadows.type !== ShadowType.Planar || shadows.normal.length() < 0.000001) { return; }\r\n\r\n        const scene = camera.scene!;\r\n        const frustum = camera.frustum;\r\n        const shadowVisible =  (camera.visibility & Layers.BitMask.DEFAULT) !== 0;\r\n        if (!scene.mainLight || !shadowVisible) { return; }\r\n\r\n        const models = scene.models;\r\n        const visibility = camera.visibility;\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (scene.isCulledByLod(camera, model)) {\r\n                continue;\r\n            }\r\n            if (model.enabled && model.node && model.castShadow\r\n                && (model.node && ((visibility & model.node.layer) === model.node.layer))) {\r\n                this._castModels.push(model);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this._castModels.length; i++) {\r\n            const model = this._castModels[i];\r\n            if (model.worldBounds) {\r\n                geometry.AABB.transform(_ab, model.worldBounds, shadows.matLight);\r\n                if (!geometry.intersect.aabbFrustum(_ab, frustum)) { continue; }\r\n            }\r\n\r\n            const subModels = model.subModels;\r\n            for (let j = 0; j < subModels.length; j++) {\r\n                const subModel = subModels[j];\r\n                const shadowPassIdx = getPlanarShadowPassIndex(subModel);\r\n                if (shadowPassIdx < 0) {\r\n                    this._subModelArray.push(subModel);\r\n                    const planarShader = shadows.getPlanarShader(subModel.patches);\r\n                    if (!planarShader) { continue; }\r\n                    this._shaderArray.push(planarShader);\r\n                    this._passArray.push(shadows.material.passes[0]);\r\n                    continue;\r\n                }\r\n\r\n                const pass = subModel.passes[shadowPassIdx];\r\n                const batchingScheme = pass.batchingScheme;\r\n                if (batchingScheme === BatchingSchemes.INSTANCING) {\r\n                    const buffer = pass.getInstancedBuffer();\r\n                    buffer.merge(subModel, shadowPassIdx);\r\n                    this._instancedQueue.queue.add(buffer);\r\n                } else {\r\n                    const shader = subModel.shaders[shadowPassIdx];\r\n                    this._subModelArray.push(subModel);\r\n                    if (shader) this._shaderArray.push(shader);\r\n                    this._passArray.push(pass);\r\n                }\r\n            }\r\n        }\r\n        this._instancedQueue.uploadBuffers(cmdBuff);\r\n    }\r\n\r\n    public recordCommandBuffer (device: Device, renderPass: RenderPass, cmdBuff: CommandBuffer): void {\r\n        const shadows = this._pipeline.pipelineSceneData.shadows;\r\n\r\n        if (!shadows.enabled || shadows.type !== ShadowType.Planar) { return; }\r\n        this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        for (let i = 0; i < this._subModelArray.length; ++i) {\r\n            const subModel = this._subModelArray[i];\r\n            const shader = this._shaderArray[i];\r\n            const pass = this._passArray[i];\r\n            const ia = subModel.inputAssembler;\r\n            const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);\r\n            const descriptorSet = pass.descriptorSet;\r\n\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, descriptorSet);\r\n            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);\r\n            cmdBuff.bindInputAssembler(ia);\r\n            cmdBuff.draw(ia);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2018-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { RenderPass } from '../gfx';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { isEnableEffect, SetIndex } from './define';\r\nimport { Camera } from '../render-scene/scene/camera';\r\nimport { RenderPipeline } from './render-pipeline';\r\nimport { getPhaseID } from './pass-phase';\r\nimport { cclegacy } from '../core';\r\n\r\nexport class UIPhase {\r\n    private _phaseID = getPhaseID('default');\r\n    private declare _pipeline: RenderPipeline;\r\n    constructor () {\r\n        const r = cclegacy.rendering;\r\n        if (isEnableEffect()) this._phaseID = r.getPhaseID(r.getPassID('default'), 'default');\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline): void {\r\n        this._pipeline = pipeline;\r\n    }\r\n\r\n    public render (camera: Camera, renderPass: RenderPass): void {\r\n        const pipeline = this._pipeline;\r\n        const device = pipeline.device;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const scene = camera.scene!;\r\n        const batches = scene.batches;\r\n        for (let i = 0; i < batches.length; i++) {\r\n            const batch = batches[i];\r\n            let visible = false;\r\n            if (camera.visibility & batch.visFlags) {\r\n                visible = true;\r\n            }\r\n\r\n            if (!visible) continue;\r\n            // shaders.length always equals actual used passes.length\r\n            const count = batch.shaders.length;\r\n            for (let j = 0; j < count; j++) {\r\n                const pass = batch.passes[j];\r\n                if (pass.phase !== this._phaseID) continue;\r\n                if (pass.passID !== 0xFFFFFFFF) continue;\r\n                const shader = batch.shaders[j];\r\n                const inputAssembler = batch.inputAssembler!;\r\n                const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);\r\n                cmdBuff.bindPipelineState(pso);\r\n                cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n                const ds = batch.descriptorSet!;\r\n                cmdBuff.bindDescriptorSet(SetIndex.LOCAL, ds);\r\n                cmdBuff.bindInputAssembler(inputAssembler);\r\n                cmdBuff.draw(inputAssembler);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { SetIndex } from '../define';\r\nimport { getPhaseID } from '../pass-phase';\r\nimport { renderQueueClearFunc, RenderQueue, convertRenderQueue, renderQueueSortFunc } from '../render-queue';\r\nimport { ClearFlagBit, Color, Rect } from '../../gfx';\r\nimport { RenderInstancedQueue } from '../render-instanced-queue';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { ForwardStagePriority } from '../enum';\r\nimport { RenderAdditiveLightQueue } from '../render-additive-light-queue';\r\nimport { BatchingSchemes } from '../../render-scene/core/pass';\r\nimport { ForwardFlow } from './forward-flow';\r\nimport { ForwardPipeline } from './forward-pipeline';\r\nimport { RenderQueueDesc, RenderQueueSortMode } from '../pipeline-serialization';\r\nimport { PlanarShadowQueue } from '../planar-shadow-queue';\r\nimport { UIPhase } from '../ui-phase';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { renderProfiler } from '../pipeline-funcs';\r\n\r\nconst colors: Color[] = [new Color(0, 0, 0, 1)];\r\n\r\n/**\r\n * @en The forward render stage\r\n * @zh 前向渲染阶段。\r\n */\r\n@ccclass('ForwardStage')\r\nexport class ForwardStage extends RenderStage {\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'ForwardStage',\r\n        priority: ForwardStagePriority.FORWARD,\r\n        tag: 0,\r\n        renderQueues: [\r\n            {\r\n                isTransparent: false,\r\n                sortMode: RenderQueueSortMode.FRONT_TO_BACK,\r\n                stages: ['default'],\r\n            },\r\n            {\r\n                isTransparent: true,\r\n                sortMode: RenderQueueSortMode.BACK_TO_FRONT,\r\n                stages: ['default', 'planarShadow'],\r\n            },\r\n        ],\r\n    };\r\n\r\n    @type([RenderQueueDesc])\r\n    @serializable\r\n    @displayOrder(2)\r\n    protected renderQueues: RenderQueueDesc[] = [];\r\n    protected _renderQueues: RenderQueue[] = [];\r\n\r\n    private _renderArea = new Rect();\r\n    private _instancedQueue: RenderInstancedQueue = new RenderInstancedQueue();\r\n    private _phaseID = getPhaseID('default');\r\n    private _clearFlag = 0xffffffff;\r\n    private declare _additiveLightQueue: RenderAdditiveLightQueue;\r\n    private declare _planarQueue: PlanarShadowQueue;\r\n    private _uiPhase: UIPhase = new UIPhase();\r\n\r\n    additiveInstanceQueues: RenderInstancedQueue[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public addRenderInstancedQueue (queue: RenderInstancedQueue): void {\r\n        if (this.additiveInstanceQueues.includes(queue)) {\r\n            return;\r\n        }\r\n        this.additiveInstanceQueues.push(queue);\r\n    }\r\n\r\n    public removeRenderInstancedQueue (queue: RenderInstancedQueue): void {\r\n        const index = this.additiveInstanceQueues.indexOf(queue);\r\n        if (index > -1) {\r\n            this.additiveInstanceQueues.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    public initialize (info: IRenderStageInfo): boolean {\r\n        super.initialize(info);\r\n        if (info.renderQueues) {\r\n            this.renderQueues = info.renderQueues;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: ForwardPipeline, flow: ForwardFlow): void {\r\n        super.activate(pipeline, flow);\r\n        for (let i = 0; i < this.renderQueues.length; i++) {\r\n            this._renderQueues[i] = convertRenderQueue(this.renderQueues[i]);\r\n        }\r\n\r\n        this._additiveLightQueue = new RenderAdditiveLightQueue(this._pipeline as ForwardPipeline);\r\n        this._planarQueue = new PlanarShadowQueue(this._pipeline);\r\n        this._uiPhase.activate(pipeline);\r\n    }\r\n\r\n    public destroy (): void {\r\n        // do nothing\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline as ForwardPipeline;\r\n        const device = pipeline.device;\r\n        this._instancedQueue.clear();\r\n\r\n        this._renderQueues.forEach(renderQueueClearFunc);\r\n\r\n        const renderObjects = pipeline.pipelineSceneData.renderObjects;\r\n        let m = 0; let p = 0; let k = 0;\r\n        for (let i = 0; i < renderObjects.length; ++i) {\r\n            const ro = renderObjects[i];\r\n            const subModels = ro.model.subModels;\r\n            for (m = 0; m < subModels.length; ++m) {\r\n                const subModel = subModels[m];\r\n                const passes = subModel.passes;\r\n                for (p = 0; p < passes.length; ++p) {\r\n                    const pass = passes[p];\r\n                    if (pass.phase !== this._phaseID) continue;\r\n                    if (pass.passID !== 0xFFFFFFFF) continue;\r\n                    const batchingScheme = pass.batchingScheme;\r\n                    if (batchingScheme === BatchingSchemes.INSTANCING) {\r\n                        const instancedBuffer = pass.getInstancedBuffer();\r\n                        instancedBuffer.merge(subModel, p);\r\n                        this._instancedQueue.queue.add(instancedBuffer);\r\n                    } else {\r\n                        for (k = 0; k < this._renderQueues.length; k++) {\r\n                            this._renderQueues[k].insertRenderPass(ro, m, p);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._instancedQueue.sort();\r\n        this._renderQueues.forEach(renderQueueSortFunc);\r\n\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        pipeline.pipelineUBO.updateShadowUBO(camera);\r\n\r\n        for (let i = 0; i < this.additiveInstanceQueues.length; i++) {\r\n            this.additiveInstanceQueues[i].uploadBuffers(cmdBuff);\r\n        }\r\n\r\n        this._instancedQueue.uploadBuffers(cmdBuff);\r\n        this._additiveLightQueue.gatherLightPasses(camera, cmdBuff);\r\n        this._planarQueue.gatherShadowPasses(camera, cmdBuff);\r\n\r\n        if (camera.clearFlag & ClearFlagBit.COLOR) {\r\n            colors[0].x = camera.clearColor.x;\r\n            colors[0].y = camera.clearColor.y;\r\n            colors[0].z = camera.clearColor.z;\r\n            colors[0].w = camera.clearColor.w;\r\n        }\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n\r\n        const framebuffer = camera.window.framebuffer;\r\n        const renderPass = pipeline.getRenderPass(camera.clearFlag & this._clearFlag, framebuffer);\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            framebuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n        this._renderQueues[0].recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        for (let i = 0; i < this.additiveInstanceQueues.length; i++) {\r\n            this.additiveInstanceQueues[i].recordCommandBuffer(device, renderPass, cmdBuff);\r\n        }\r\n\r\n        this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        this._additiveLightQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n        this._planarQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n        this._renderQueues[1].recordCommandBuffer(device, renderPass, cmdBuff);\r\n        camera.geometryRenderer?.render(renderPass, cmdBuff, pipeline.pipelineSceneData);\r\n        this._uiPhase.render(camera, renderPass);\r\n        renderProfiler(device, renderPass, cmdBuff, pipeline.profiler, camera);\r\n        cmdBuff.endRenderPass();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { PIPELINE_FLOW_FORWARD } from '../define';\r\nimport { IRenderFlowInfo, RenderFlow } from '../render-flow';\r\nimport { ForwardFlowPriority } from '../enum';\r\nimport { ForwardStage } from './forward-stage';\r\nimport { RenderPipeline } from '../render-pipeline';\r\nimport { Camera } from '../../render-scene/scene';\r\n\r\n/**\r\n * @en The forward flow in forward render pipeline\r\n * @zh 前向渲染流程。\r\n */\r\n@ccclass('ForwardFlow')\r\nexport class ForwardFlow extends RenderFlow {\r\n    /**\r\n     * @en The shared initialization information of forward render flow\r\n     * @zh 共享的前向渲染流程初始化参数\r\n     */\r\n    public static initInfo: IRenderFlowInfo = {\r\n        name: PIPELINE_FLOW_FORWARD,\r\n        priority: ForwardFlowPriority.FORWARD,\r\n        stages: [],\r\n    };\r\n\r\n    public initialize (info: IRenderFlowInfo): boolean {\r\n        super.initialize(info);\r\n        if (this._stages.length === 0) {\r\n            const forwardStage = new ForwardStage();\r\n            forwardStage.initialize(ForwardStage.initInfo);\r\n            this._stages.push(forwardStage);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline): void {\r\n        super.activate(pipeline);\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        super.render(camera);\r\n    }\r\n\r\n    public destroy (): void {\r\n        super.destroy();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { SubModel } from '../render-scene/scene/submodel';\r\nimport { isEnableEffect, SetIndex } from './define';\r\nimport { Device, RenderPass, Shader, CommandBuffer } from '../gfx';\r\nimport { getPhaseID } from './pass-phase';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { Pass, BatchingSchemes } from '../render-scene/core/pass';\r\nimport { RenderInstancedQueue } from './render-instanced-queue';\r\nimport { ShadowType } from '../render-scene/scene/shadows';\r\nimport { Light, LightType } from '../render-scene/scene/light';\r\nimport { cclegacy, geometry } from '../core';\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { Camera, DirectionalLight, SpotLight } from '../render-scene/scene';\r\nimport { shadowCulling } from './scene-culling';\r\nimport { PipelineRuntime } from './custom/pipeline';\r\nimport type { ShadowLayerVolume } from './shadow/csm-layers';\r\n\r\nlet _phaseID = getPhaseID('shadow-caster');\r\nfunction getShadowPassIndex (subModel: SubModel): number {\r\n    const passes = subModel.passes;\r\n    const r = cclegacy.rendering;\r\n    if (isEnableEffect()) _phaseID = r.getPhaseID(r.getPassID('default'), 'shadow-caster');\r\n    for (let k = 0; k < passes.length; k++) {\r\n        if (((!r || !r.enableEffectImport) && passes[k].phase === _phaseID)\r\n        || (isEnableEffect() && passes[k].phaseID === _phaseID)) {\r\n            return k;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\n/**\r\n * @zh\r\n * 阴影渲染队列\r\n */\r\nexport class RenderShadowMapBatchedQueue {\r\n    private declare _pipeline: PipelineRuntime;\r\n    private _subModelsArray: SubModel[] = [];\r\n    private _passArray: Pass[] = [];\r\n    private _shaderArray: Shader[] = [];\r\n    private _instancedQueue: RenderInstancedQueue = new RenderInstancedQueue();\r\n\r\n    public constructor (pipeline: PipelineRuntime) {\r\n        this._pipeline = pipeline;\r\n    }\r\n\r\n    public gatherLightPasses (camera: Camera, light: Light, cmdBuff: CommandBuffer, level = 0): void {\r\n        this.clear();\r\n\r\n        const sceneData = this._pipeline.pipelineSceneData;\r\n        const shadowInfo = sceneData.shadows;\r\n        if (light && shadowInfo.enabled && shadowInfo.type === ShadowType.ShadowMap) {\r\n            switch (light.type) {\r\n            case LightType.DIRECTIONAL:\r\n                // eslint-disable-next-line no-case-declarations\r\n                const dirLight = light as DirectionalLight;\r\n                if (dirLight.shadowEnabled) {\r\n                    const csmLayers = sceneData.csmLayers;\r\n                    let layer: ShadowLayerVolume;\r\n                    if (dirLight.shadowFixedArea) {\r\n                        layer = csmLayers.specialLayer;\r\n                    } else {\r\n                        layer = csmLayers.layers[level];\r\n                    }\r\n                    shadowCulling(camera, sceneData, layer);\r\n                    const dirShadowObjects = layer.shadowObjects;\r\n                    for (let i = 0; i < dirShadowObjects.length; i++) {\r\n                        const ro = dirShadowObjects[i];\r\n                        const model = ro.model;\r\n                        this.add(model, level);\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case LightType.SPOT:\r\n                // eslint-disable-next-line no-case-declarations\r\n                const spotLight = light as SpotLight;\r\n                if (spotLight.shadowEnabled) {\r\n                    const visibility = spotLight.visibility;\r\n                    const castShadowObjects = sceneData.csmLayers.castShadowObjects;\r\n                    for (let i = 0; i < castShadowObjects.length; i++) {\r\n                        const ro = castShadowObjects[i];\r\n                        const model = ro.model;\r\n                        if (model.worldBounds) {\r\n                            if (((visibility & model.node.layer) !== model.node.layer)\r\n                            || !geometry.intersect.aabbFrustum(model.worldBounds, spotLight.frustum)) { continue; }\r\n                        }\r\n\r\n                        this.add(model, level);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n            }\r\n\r\n            this._instancedQueue.uploadBuffers(cmdBuff);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * clear light-Batched-Queue\r\n     */\r\n    public clear (): void {\r\n        this._subModelsArray.length = 0;\r\n        this._shaderArray.length = 0;\r\n        this._passArray.length = 0;\r\n        this._instancedQueue.clear();\r\n    }\r\n\r\n    public add (model: Model, level: number): void {\r\n        const subModels = model.subModels;\r\n        for (let j = 0; j < subModels.length; j++) {\r\n            const subModel = subModels[j];\r\n            const shadowPassIdx = getShadowPassIndex(subModel);\r\n            if (shadowPassIdx < 0) { continue; }\r\n            const pass = subModel.passes[shadowPassIdx];\r\n            const batchingScheme = pass.batchingScheme;\r\n\r\n            if (batchingScheme === BatchingSchemes.INSTANCING) {            // instancing\r\n                const buffer = pass.getInstancedBuffer(level);\r\n                buffer.merge(subModel, shadowPassIdx);\r\n                this._instancedQueue.queue.add(buffer);\r\n            } else {\r\n                const shader = subModel.shaders[shadowPassIdx];\r\n                this._subModelsArray.push(subModel);\r\n                if (shader) this._shaderArray.push(shader);\r\n                this._passArray.push(pass);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * record CommandBuffer\r\n     */\r\n    public recordCommandBuffer (device: Device, renderPass: RenderPass, cmdBuff: CommandBuffer): void {\r\n        this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        for (let i = 0; i < this._subModelsArray.length; ++i) {\r\n            const subModel = this._subModelsArray[i];\r\n            const shader = this._shaderArray[i];\r\n            const pass = this._passArray[i];\r\n            const ia = subModel.inputAssembler;\r\n            const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);\r\n            const descriptorSet = pass.descriptorSet;\r\n\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, descriptorSet);\r\n            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);\r\n            cmdBuff.bindInputAssembler(ia);\r\n            cmdBuff.draw(ia);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { Color, Rect, Framebuffer, DescriptorSet } from '../../gfx';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { ForwardStagePriority } from '../enum';\r\nimport { RenderShadowMapBatchedQueue } from '../render-shadow-map-batched-queue';\r\nimport { ForwardPipeline } from '../forward/forward-pipeline';\r\nimport { SetIndex } from '../define';\r\nimport { Light, LightType } from '../../render-scene/scene/light';\r\nimport { ShadowFlow } from './shadow-flow';\r\nimport { DirectionalLight } from '../../render-scene/scene/directional-light';\r\nimport { CSMLevel } from '../../render-scene/scene/shadows';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\n\r\nconst colors: Color[] = [new Color(1, 1, 1, 1)];\r\n\r\n/**\r\n * @en Shadow map render stage\r\n * @zh 阴影渲染阶段。\r\n */\r\n@ccclass('ShadowStage')\r\nexport class ShadowStage extends RenderStage {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @en A common initialization info for shadow map render stage\r\n     * @zh 一个通用的 ShadowStage 的初始化信息对象\r\n     */\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'ShadowStage',\r\n        priority: ForwardStagePriority.FORWARD,\r\n        tag: 0,\r\n    };\r\n\r\n    /**\r\n     * @en Sets the render shadow map info\r\n     * @zh 设置阴影渲染信息\r\n     * @param light\r\n     * @param shadowFrameBuffer\r\n     * @param level 层级\r\n     */\r\n    public setUsage (globalDS: DescriptorSet, light: Light, shadowFrameBuffer: Framebuffer, level = 0): void {\r\n        this._globalDS = globalDS;\r\n        this._light = light;\r\n        this._shadowFrameBuffer = shadowFrameBuffer;\r\n        this._level = level;\r\n    }\r\n\r\n    private _additiveShadowQueue!: RenderShadowMapBatchedQueue;\r\n    private _shadowFrameBuffer: Framebuffer | null = null;\r\n    private _renderArea = new Rect();\r\n    private _light: Light | null = null;\r\n    private _globalDS: DescriptorSet | null = null;\r\n    private _level = 0;\r\n    private _isShadowMapCleared = false;\r\n\r\n    public destroy (): void {\r\n        this._shadowFrameBuffer = null;\r\n        this._globalDS = null;\r\n        this._light = null;\r\n\r\n        this._additiveShadowQueue?.clear();\r\n    }\r\n\r\n    public clearFramebuffer (camera: Camera): void {\r\n        if (!this._light || !this._shadowFrameBuffer || this._isShadowMapCleared) { return; }\r\n\r\n        colors[0].w = camera.clearColor.w;\r\n        const pipeline = this._pipeline as ForwardPipeline;\r\n        const pipelineSceneData = pipeline.pipelineSceneData;\r\n        const shadingScale = pipelineSceneData.shadingScale;\r\n        const shadowInfo = pipelineSceneData.shadows;\r\n        const vp = camera.viewport;\r\n        const shadowMapSize = shadowInfo.size;\r\n        this._renderArea.x = vp.x * shadowMapSize.x;\r\n        this._renderArea.y = vp.y * shadowMapSize.y;\r\n        this._renderArea.width =  vp.width * shadowMapSize.x * shadingScale;\r\n        this._renderArea.height = vp.height * shadowMapSize.y * shadingScale;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const renderPass = this._shadowFrameBuffer.renderPass;\r\n\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            this._shadowFrameBuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.endRenderPass();\r\n        this._isShadowMapCleared = true;\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline;\r\n        const pipelineSceneData = pipeline.pipelineSceneData;\r\n        const shadowInfo = pipelineSceneData.shadows;\r\n        const descriptorSet = this._globalDS!;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const level = this._level;\r\n        const device = pipeline.device;\r\n\r\n        if (!this._light || !this._shadowFrameBuffer) { return; }\r\n        this._pipeline.pipelineUBO.updateShadowUBOLight(descriptorSet, this._light, level);\r\n        this._additiveShadowQueue.gatherLightPasses(camera, this._light, cmdBuff, level);\r\n\r\n        const shadowMapSize = shadowInfo.size;\r\n        switch (this._light.type) {\r\n        case LightType.DIRECTIONAL: {\r\n            const mainLight = this._light as DirectionalLight;\r\n            if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !pipelineSceneData.csmSupported) {\r\n                this._renderArea.x = 0;\r\n                this._renderArea.y = 0;\r\n                this._renderArea.width = shadowMapSize.x;\r\n                this._renderArea.height = shadowMapSize.y;\r\n            } else {\r\n                const screenSpaceSignY = device.capabilities.screenSpaceSignY;\r\n                this._renderArea.x = level % 2 * 0.5 * shadowMapSize.x;\r\n                if (screenSpaceSignY > 0.0) {\r\n                    this._renderArea.y = (1 - Math.floor(level / 2)) * 0.5 * shadowMapSize.y;\r\n                } else {\r\n                    this._renderArea.y = Math.floor(level / 2) * 0.5 * shadowMapSize.y;\r\n                }\r\n                this._renderArea.width = 0.5 * shadowMapSize.x;\r\n                this._renderArea.height = 0.5 * shadowMapSize.y;\r\n            }\r\n            break;\r\n        }\r\n        case LightType.SPOT: {\r\n            this._renderArea.x = 0;\r\n            this._renderArea.y = 0;\r\n            this._renderArea.width = shadowMapSize.x;\r\n            this._renderArea.height = shadowMapSize.y;\r\n            break;\r\n        }\r\n        default:\r\n        }\r\n\r\n        const renderPass = this._shadowFrameBuffer.renderPass;\r\n\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            this._shadowFrameBuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, descriptorSet);\r\n\r\n        this._additiveShadowQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        cmdBuff.endRenderPass();\r\n        this._isShadowMapCleared = false;\r\n    }\r\n\r\n    public activate (pipeline: ForwardPipeline, flow: ShadowFlow): void {\r\n        super.activate(pipeline, flow);\r\n        this._additiveShadowQueue = new RenderShadowMapBatchedQueue(pipeline);\r\n        this._isShadowMapCleared = false;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { PIPELINE_FLOW_SHADOW, supportsR32FloatTexture, UBOCameraEnum, UBOCSMEnum, UBOGlobalEnum, UBOShadowEnum } from '../define';\r\nimport { IRenderFlowInfo, RenderFlow } from '../render-flow';\r\nimport { ForwardFlowPriority } from '../enum';\r\nimport { ShadowStage } from './shadow-stage';\r\nimport { RenderPass, LoadOp, StoreOp,\r\n    Format, Texture, TextureType, TextureUsageBit, ColorAttachment,\r\n    DepthStencilAttachment, RenderPassInfo, TextureInfo, FramebufferInfo, Swapchain,\r\n    Framebuffer, DescriptorSet, API } from '../../gfx';\r\nimport { RenderFlowTag } from '../pipeline-serialization';\r\nimport { ForwardPipeline } from '../forward/forward-pipeline';\r\nimport { RenderPipeline } from '../render-pipeline';\r\nimport { PCFType, ShadowType } from '../../render-scene/scene/shadows';\r\nimport { Light, LightType } from '../../render-scene/scene/light';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { SpotLight } from '../../render-scene/scene/spot-light';\r\n\r\nconst _validLights: Light[] = [];\r\n\r\n/**\r\n * @en Shadow map render flow\r\n * @zh 阴影贴图绘制流程\r\n */\r\n@ccclass('ShadowFlow')\r\nexport class ShadowFlow extends RenderFlow {\r\n    /**\r\n     * @en A common initialization info for shadow map render flow\r\n     * @zh 一个通用的 ShadowFlow 的初始化信息对象\r\n     */\r\n    public static initInfo: IRenderFlowInfo = {\r\n        name: PIPELINE_FLOW_SHADOW,\r\n        priority: ForwardFlowPriority.SHADOW,\r\n        tag: RenderFlowTag.SCENE,\r\n        stages: [],\r\n    };\r\n\r\n    private _shadowRenderPass: RenderPass | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: IRenderFlowInfo): boolean {\r\n        super.initialize(info);\r\n        if (this._stages.length === 0) {\r\n            // add shadowMap-stages\r\n            const shadowMapStage = new ShadowStage();\r\n            shadowMapStage.initialize(ShadowStage.initInfo);\r\n            this._stages.push(shadowMapStage);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline): void {\r\n        super.activate(pipeline);\r\n\r\n        // 0: SHADOWMAP_FLOAT, 1: SHADOWMAP_RGBE.\r\n        const isRGBE = supportsR32FloatTexture(pipeline.device) ? 0 : 1;\r\n        pipeline.macros.CC_SHADOWMAP_FORMAT = isRGBE;\r\n\r\n        // 0: SHADOWMAP_LINER_DEPTH_OFF, 1: SHADOWMAP_LINER_DEPTH_ON.\r\n        const isLinear = pipeline.device.gfxAPI === API.WEBGL ? 1 : 0;\r\n        pipeline.macros.CC_SHADOWMAP_USE_LINEAR_DEPTH = isLinear;\r\n\r\n        // 0: UNIFORM_VECTORS_LESS_EQUAL_64, 1: UNIFORM_VECTORS_GREATER_EQUAL_125.\r\n        pipeline.pipelineSceneData.csmSupported = pipeline.device.capabilities.maxFragmentUniformVectors\r\n            >= (UBOGlobalEnum.COUNT + UBOCameraEnum.COUNT + UBOShadowEnum.COUNT + UBOCSMEnum.COUNT) / 4;\r\n        pipeline.macros.CC_SUPPORT_CASCADED_SHADOW_MAP = pipeline.pipelineSceneData.csmSupported;\r\n\r\n        // 0: CC_SHADOW_NONE, 1: CC_SHADOW_PLANAR, 2: CC_SHADOW_MAP\r\n        pipeline.macros.CC_SHADOW_TYPE = 0;\r\n\r\n        // 0: PCFType.HARD, 1: PCFType.SOFT, 2: PCFType.SOFT_2X, 3: PCFType.SOFT_4X\r\n        pipeline.macros.CC_DIR_SHADOW_PCF_TYPE = PCFType.HARD;\r\n\r\n        // 0: CC_DIR_LIGHT_SHADOW_NONE, 1: CC_DIR_LIGHT_SHADOW_UNIFORM, 2: CC_DIR_LIGHT_SHADOW_CASCADED, 3: CC_DIR_LIGHT_SHADOW_VARIANCE\r\n        pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 0;\r\n\r\n        // 0: CC_CASCADED_LAYERS_TRANSITION_OFF, 1: CC_CASCADED_LAYERS_TRANSITION_ON\r\n        pipeline.macros.CC_CASCADED_LAYERS_TRANSITION = 0;\r\n\r\n        pipeline.onGlobalPipelineStateChanged();\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline as ForwardPipeline;\r\n        const shadowInfo = pipeline.pipelineSceneData.shadows;\r\n        const csmLayers = pipeline.pipelineSceneData.csmLayers;\r\n        const shadowFrameBufferMap = pipeline.pipelineSceneData.shadowFrameBufferMap;\r\n        const castShadowObjects = csmLayers.castShadowObjects;\r\n        const validPunctualLights = this._pipeline.pipelineSceneData.validPunctualLights;\r\n        if (!shadowInfo.enabled || shadowInfo.type !== ShadowType.ShadowMap) { return; }\r\n\r\n        let n = 0;\r\n        let m = 0;\r\n        for (;n < shadowInfo.maxReceived && m < validPunctualLights.length;) {\r\n            const light = validPunctualLights[m];\r\n            if (light.type === LightType.SPOT) {\r\n                const spotLight = light as SpotLight;\r\n                if (spotLight.shadowEnabled) {\r\n                    _validLights.push(light);\r\n                    n++;\r\n                }\r\n            }\r\n            m++;\r\n        }\r\n\r\n        if (castShadowObjects.length === 0) {\r\n            this.clearShadowMap(_validLights, camera);\r\n            return;\r\n        }\r\n\r\n        if (shadowInfo.shadowMapDirty) { this.resizeShadowMap(); }\r\n\r\n        const { mainLight } = camera.scene!;\r\n        if (mainLight && mainLight.shadowEnabled) {\r\n            const globalDS = pipeline.descriptorSet;\r\n            if (!shadowFrameBufferMap.has(mainLight)) {\r\n                this._initShadowFrameBuffer(pipeline, mainLight, camera.window.swapchain);\r\n            }\r\n\r\n            const shadowFrameBuffer = shadowFrameBufferMap.get(mainLight);\r\n            if (mainLight.shadowFixedArea) {\r\n                this._renderStage(camera, mainLight, shadowFrameBuffer!, globalDS);\r\n            } else {\r\n                const csmLevel = pipeline.pipelineSceneData.csmSupported ? mainLight.csmLevel : 1;\r\n                for (let i = 0; i < csmLevel; i++) {\r\n                    this._renderStage(camera, mainLight, shadowFrameBuffer!, globalDS, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let l = 0; l < _validLights.length; l++) {\r\n            const light = _validLights[l];\r\n            const ds = pipeline.globalDSManager.getOrCreateDescriptorSet(light)!;\r\n\r\n            if (!shadowFrameBufferMap.has(light)) {\r\n                this._initShadowFrameBuffer(pipeline, light, camera.window.swapchain);\r\n            }\r\n\r\n            const shadowFrameBuffer = shadowFrameBufferMap.get(light);\r\n            this._renderStage(camera, light, shadowFrameBuffer!, ds);\r\n        }\r\n\r\n        _validLights.length = 0;\r\n    }\r\n\r\n    public destroy (): void {\r\n        super.destroy();\r\n        if (this._pipeline) {\r\n            const shadowFrameBufferMap = this._pipeline.pipelineSceneData.shadowFrameBufferMap;\r\n            const shadowFrameBuffers = Array.from(shadowFrameBufferMap.values());\r\n            for (let i = 0; i < shadowFrameBuffers.length; i++) {\r\n                const frameBuffer = shadowFrameBuffers[i];\r\n\r\n                if (!frameBuffer) { continue; }\r\n                const renderTargets = frameBuffer.colorTextures;\r\n                for (let j = 0; j < renderTargets.length; j++) {\r\n                    const renderTarget = renderTargets[j];\r\n                    if (renderTarget) { renderTarget.destroy(); }\r\n                }\r\n                renderTargets.length = 0;\r\n\r\n                const depth = frameBuffer.depthStencilTexture;\r\n                if (depth) { depth.destroy(); }\r\n\r\n                frameBuffer.destroy();\r\n            }\r\n\r\n            shadowFrameBufferMap.clear();\r\n        }\r\n\r\n        if (this._shadowRenderPass) { this._shadowRenderPass.destroy(); }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _initShadowFrameBuffer  (pipeline: RenderPipeline, light: Light, swapchain: Swapchain): void {\r\n        const { device } = pipeline;\r\n        const shadows = pipeline.pipelineSceneData.shadows;\r\n        const shadowMapSize = shadows.size;\r\n        const shadowFrameBufferMap = pipeline.pipelineSceneData.shadowFrameBufferMap;\r\n        const format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;\r\n\r\n        if (!this._shadowRenderPass) {\r\n            const colorAttachment = new ColorAttachment();\r\n            colorAttachment.format = format;\r\n            colorAttachment.loadOp = LoadOp.CLEAR; // should clear color attachment\r\n            colorAttachment.storeOp = StoreOp.STORE;\r\n            colorAttachment.sampleCount = 1;\r\n\r\n            const depthStencilAttachment = new DepthStencilAttachment();\r\n            depthStencilAttachment.format = Format.DEPTH_STENCIL;\r\n            depthStencilAttachment.depthLoadOp = LoadOp.CLEAR;\r\n            depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;\r\n            depthStencilAttachment.stencilLoadOp = LoadOp.CLEAR;\r\n            depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;\r\n            depthStencilAttachment.sampleCount = 1;\r\n\r\n            const renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);\r\n            this._shadowRenderPass = device.createRenderPass(renderPassInfo);\r\n        }\r\n\r\n        const shadowRenderTargets: Texture[] = [];\r\n        shadowRenderTargets.push(device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n            format,\r\n            shadowMapSize.x,\r\n            shadowMapSize.y,\r\n        )));\r\n\r\n        const depth = device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.DEPTH_STENCIL_ATTACHMENT,\r\n            Format.DEPTH_STENCIL,\r\n            shadowMapSize.x,\r\n            shadowMapSize.y,\r\n        ));\r\n\r\n        const shadowFrameBuffer = device.createFramebuffer(new FramebufferInfo(\r\n            this._shadowRenderPass,\r\n            shadowRenderTargets,\r\n            depth,\r\n        ));\r\n\r\n        // Cache frameBuffer\r\n        shadowFrameBufferMap.set(light, shadowFrameBuffer);\r\n    }\r\n\r\n    private _renderStage (camera: Camera, light: Light, shadowFrameBuffer: Framebuffer, globalDS: DescriptorSet, level = 0): void {\r\n        for (let i = 0; i < this._stages.length; i++) {\r\n            const shadowStage = this._stages[i] as ShadowStage;\r\n            shadowStage.setUsage(globalDS, light, shadowFrameBuffer, level);\r\n            shadowStage.render(camera);\r\n        }\r\n    }\r\n\r\n    private clearShadowMap (validLights: Light[], camera: Camera): void {\r\n        const pipeline = this._pipeline;\r\n        const scene = pipeline.pipelineSceneData;\r\n\r\n        const { mainLight } = camera.scene!;\r\n        if (mainLight) {\r\n            const globalDS = this._pipeline.descriptorSet;\r\n            if (!scene.shadowFrameBufferMap.has(mainLight)) {\r\n                this._initShadowFrameBuffer(this._pipeline, mainLight, camera.window.swapchain);\r\n            }\r\n\r\n            const shadowFrameBuffer = scene.shadowFrameBufferMap.get(mainLight);\r\n            for (let i = 0; i < this._stages.length; i++) {\r\n                const shadowStage = this._stages[i] as ShadowStage;\r\n                shadowStage.setUsage(globalDS, mainLight, shadowFrameBuffer!);\r\n                shadowStage.clearFramebuffer(camera);\r\n            }\r\n        }\r\n\r\n        for (let l = 0; l < validLights.length; l++) {\r\n            const light = validLights[l];\r\n            const ds = pipeline.globalDSManager.getOrCreateDescriptorSet(light)!;\r\n            if (!scene.shadowFrameBufferMap.has(light)) {\r\n                this._initShadowFrameBuffer(this._pipeline, light, camera.window.swapchain);\r\n            }\r\n\r\n            const shadowFrameBuffer = scene.shadowFrameBufferMap.get(light);\r\n            for (let i = 0; i < this._stages.length; i++) {\r\n                const shadowStage = this._stages[i] as ShadowStage;\r\n                shadowStage.setUsage(ds, light, shadowFrameBuffer!);\r\n                shadowStage.clearFramebuffer(camera);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resizeShadowMap (): void {\r\n        const shadows = this._pipeline.pipelineSceneData.shadows;\r\n        const shadowMapSize = shadows.size;\r\n        const pipeline = this._pipeline;\r\n        const device = pipeline.device;\r\n        const shadowFrameBufferMap = pipeline.pipelineSceneData.shadowFrameBufferMap;\r\n        const format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;\r\n\r\n        for (const key of shadowFrameBufferMap.keys()) {\r\n            const frameBuffer = shadowFrameBufferMap.get(key);\r\n            if (!frameBuffer) {\r\n                continue;\r\n            }\r\n\r\n            const renderTargets: Texture[] = [];\r\n            renderTargets.push(pipeline.device.createTexture(new TextureInfo(\r\n                TextureType.TEX2D,\r\n                TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n                format,\r\n                shadowMapSize.x,\r\n                shadowMapSize.y,\r\n            )));\r\n\r\n            const depth = frameBuffer.depthStencilTexture;\r\n            if (depth) { depth.resize(shadowMapSize.x, shadowMapSize.y); }\r\n\r\n            const shadowRenderPass = frameBuffer.renderPass;\r\n            frameBuffer.destroy();\r\n            const newFrameBuffer = device.createFramebuffer(new FramebufferInfo(\r\n                shadowRenderPass,\r\n                renderTargets,\r\n                depth,\r\n            ));\r\n            shadowFrameBufferMap.set(key, newFrameBuffer);\r\n        }\r\n\r\n        shadows.shadowMapDirty = false;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { SubModel } from '../render-scene/scene/submodel';\r\nimport { isEnableEffect, SetIndex } from './define';\r\nimport { Device, RenderPass, Shader, CommandBuffer } from '../gfx';\r\nimport { getPhaseID } from './pass-phase';\r\nimport { PipelineStateManager } from './pipeline-state-manager';\r\nimport { Pass, BatchingSchemes, IMacroPatch } from '../render-scene/core/pass';\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { ProbeType, ReflectionProbe } from '../render-scene/scene/reflection-probe';\r\nimport { Camera, SkyBoxFlagValue } from '../render-scene/scene/camera';\r\nimport { PipelineRuntime } from './custom/pipeline';\r\nimport { RenderInstancedQueue } from './render-instanced-queue';\r\nimport { cclegacy, geometry } from '../core';\r\n\r\nconst CC_USE_RGBE_OUTPUT = 'CC_USE_RGBE_OUTPUT';\r\nlet _phaseID = getPhaseID('default');\r\nlet _phaseReflectMapID = getPhaseID('reflect-map');\r\nfunction getPassIndex (subModel: SubModel): number {\r\n    const passes = subModel.passes;\r\n    const r = cclegacy.rendering;\r\n    if (isEnableEffect()) _phaseID = r.getPhaseID(r.getPassID('default'), 'default');\r\n    for (let k = 0; k < passes.length; k++) {\r\n        if (((!r || !r.enableEffectImport) && passes[k].phase === _phaseID) || (isEnableEffect() && passes[k].phaseID === _phaseID)) {\r\n            return k;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction getReflectMapPassIndex (subModel: SubModel): number {\r\n    const passes = subModel.passes;\r\n    const r = cclegacy.rendering;\r\n    if (isEnableEffect()) _phaseReflectMapID = r.getPhaseID(r.getPassID('default'), 'reflect-map');\r\n    for (let k = 0; k < passes.length; k++) {\r\n        if (((!r || !r.enableEffectImport) && passes[k].phase === _phaseReflectMapID)\r\n        || (isEnableEffect() && passes[k].phaseID === _phaseReflectMapID)) {\r\n            return k;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\n/**\r\n * @zh\r\n * 反射探针渲染队列\r\n */\r\nexport class RenderReflectionProbeQueue {\r\n    private declare _pipeline: PipelineRuntime;\r\n    private _subModelsArray: SubModel[] = [];\r\n    private _passArray: Pass[] = [];\r\n    private _shaderArray: Shader[] = [];\r\n    private _rgbeSubModelsArray: SubModel[] = [];\r\n    private _instancedQueue: RenderInstancedQueue = new RenderInstancedQueue();\r\n    private _patches: IMacroPatch[] = [];\r\n\r\n    public constructor (pipeline: PipelineRuntime) {\r\n        this._pipeline = pipeline;\r\n    }\r\n    public gatherRenderObjects (probe: ReflectionProbe, camera: Camera, cmdBuff: CommandBuffer): void {\r\n        this.clear();\r\n        const scene = camera.scene!;\r\n        const sceneData = this._pipeline.pipelineSceneData;\r\n        const skybox = sceneData.skybox;\r\n\r\n        if (skybox.enabled && skybox.model && (probe.camera.clearFlag & SkyBoxFlagValue.VALUE)) {\r\n            this.add(skybox.model);\r\n        }\r\n\r\n        const models = scene.models;\r\n        const visibility = probe.visibility;\r\n\r\n        for (let i = 0; i < models.length; i++) {\r\n            const model = models[i];\r\n            if (!model.node || scene.isCulledByLod(camera, model)) {\r\n                continue;\r\n            }\r\n            if (((visibility & model.node.layer) !== model.node.layer) && (!(visibility & model.visFlags))) {\r\n                continue;\r\n            }\r\n            if (model.enabled && model.worldBounds && model.bakeToReflectionProbe) {\r\n                if (probe.probeType === ProbeType.CUBE) {\r\n                    if (geometry.intersect.aabbWithAABB(model.worldBounds, probe.boundingBox!)) {\r\n                        this.add(model);\r\n                    }\r\n                } else if (geometry.intersect.aabbFrustum(model.worldBounds, probe.camera.frustum)) {\r\n                    this.add(model);\r\n                }\r\n            }\r\n        }\r\n        this._instancedQueue.uploadBuffers(cmdBuff);\r\n    }\r\n\r\n    public clear (): void {\r\n        this._subModelsArray.length = 0;\r\n        this._shaderArray.length = 0;\r\n        this._passArray.length = 0;\r\n        this._instancedQueue.clear();\r\n        this._rgbeSubModelsArray.length = 0;\r\n    }\r\n\r\n    public add (model: Model): void {\r\n        const subModels = model.subModels;\r\n        for (let j = 0; j < subModels.length; j++) {\r\n            const subModel = subModels[j];\r\n\r\n            //Filter transparent objects\r\n            const isTransparent = subModel.passes[0].blendState.targets[0].blend;\r\n            if (isTransparent) {\r\n                continue;\r\n            }\r\n\r\n            let passIdx = getReflectMapPassIndex(subModel);\r\n            let bUseReflectPass = true;\r\n            if (passIdx < 0) {\r\n                passIdx = getPassIndex(subModel);\r\n                bUseReflectPass = false;\r\n            }\r\n            if (passIdx < 0) { continue; }\r\n\r\n            const pass = subModel.passes[passIdx];\r\n            const batchingScheme = pass.batchingScheme;\r\n\r\n            if (!bUseReflectPass) {\r\n                this._patches = [];\r\n                this._patches = this._patches.concat(subModel.patches!);\r\n                const useRGBEPatchs: IMacroPatch[] = [\r\n                    { name: CC_USE_RGBE_OUTPUT, value: true },\r\n                ];\r\n                this._patches = this._patches.concat(useRGBEPatchs);\r\n                subModel.onMacroPatchesStateChanged(this._patches);\r\n                this._rgbeSubModelsArray.push(subModel);\r\n            }\r\n\r\n            if (batchingScheme === BatchingSchemes.INSTANCING) {            // instancing\r\n                const buffer = pass.getInstancedBuffer();\r\n                buffer.merge(subModel, passIdx);\r\n                this._instancedQueue.queue.add(buffer);\r\n            } else {\r\n                const shader = subModel.shaders[passIdx];\r\n                this._subModelsArray.push(subModel);\r\n                if (shader) this._shaderArray.push(shader);\r\n                this._passArray.push(pass);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * record CommandBuffer\r\n     */\r\n    public recordCommandBuffer (device: Device, renderPass: RenderPass, cmdBuff: CommandBuffer): void {\r\n        this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        for (let i = 0; i < this._subModelsArray.length; ++i) {\r\n            const subModel = this._subModelsArray[i];\r\n            const shader = this._shaderArray[i];\r\n            const pass = this._passArray[i];\r\n            const ia = subModel.inputAssembler;\r\n            const pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);\r\n            const descriptorSet = pass.descriptorSet;\r\n\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, descriptorSet);\r\n            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);\r\n            cmdBuff.bindInputAssembler(ia);\r\n            cmdBuff.draw(ia);\r\n        }\r\n        this.resetRGBEMacro();\r\n        this._instancedQueue.clear();\r\n    }\r\n    public resetRGBEMacro (): void {\r\n        for (let i = 0; i < this._rgbeSubModelsArray.length; i++) {\r\n            this._patches = [];\r\n            const subModel = this._rgbeSubModelsArray[i];\r\n            // eslint-disable-next-line prefer-const\r\n            this._patches = this._patches.concat(subModel.patches!);\r\n            if (!this._patches) continue;\r\n            for (let j = 0; j < this._patches.length; j++) {\r\n                const patch = this._patches[j];\r\n                if (patch.name === CC_USE_RGBE_OUTPUT) {\r\n                    this._patches.splice(j, 1);\r\n                    break;\r\n                }\r\n            }\r\n            subModel.onMacroPatchesStateChanged(this._patches);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { Color, Rect, Framebuffer, ClearFlagBit } from '../../gfx';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { ForwardStagePriority } from '../enum';\r\nimport { ForwardPipeline } from '../forward/forward-pipeline';\r\nimport { SetIndex } from '../define';\r\nimport { ReflectionProbeFlow } from './reflection-probe-flow';\r\nimport { Camera, ReflectionProbe } from '../../render-scene/scene';\r\nimport { RenderReflectionProbeQueue } from '../render-reflection-probe-queue';\r\nimport { Vec3 } from '../../core';\r\nimport { packRGBE } from '../../core/math/color';\r\n\r\nconst colors: Color[] = [new Color(1, 1, 1, 1)];\r\n\r\n/**\r\n * @en reflection probe render stage\r\n * @zh 反射探针渲染阶段。\r\n */\r\n@ccclass('ReflectionProbeStage')\r\nexport class ReflectionProbeStage extends RenderStage {\r\n    /**\r\n     * @en A common initialization info for reflection probe render stage\r\n     * @zh 一个通用的 reflection probe stage 的初始化信息对象\r\n     */\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'ReflectionProbeStage',\r\n        priority: ForwardStagePriority.FORWARD,\r\n        tag: 0,\r\n    };\r\n\r\n    private _frameBuffer: Framebuffer | null = null;\r\n    private _renderArea = new Rect();\r\n    private _probe: ReflectionProbe | null = null;\r\n    private _probeRenderQueue!: RenderReflectionProbeQueue;\r\n    private _rgbeColor = new Vec3();\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @en Sets the probe info\r\n     * @zh 设置probe信息\r\n     * @param probe\r\n     * @param frameBuffer\r\n     */\r\n    public setUsageInfo (probe: ReflectionProbe, frameBuffer: Framebuffer): void {\r\n        this._probe = probe;\r\n        this._frameBuffer = frameBuffer;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._frameBuffer = null;\r\n        this._probeRenderQueue?.clear();\r\n    }\r\n\r\n    public clearFramebuffer (camera: Camera): void {\r\n        if (!this._frameBuffer) { return; }\r\n\r\n        colors[0].w = camera.clearColor.w;\r\n        const pipeline = this._pipeline as ForwardPipeline;\r\n        const pipelineSceneData = pipeline.pipelineSceneData;\r\n        const shadingScale = pipelineSceneData.shadingScale;\r\n        const vp = camera.viewport;\r\n        const size = this._probe!.resolution;\r\n        this._renderArea.x = vp.x * size;\r\n        this._renderArea.y = vp.y * size;\r\n        this._renderArea.width = vp.width * size * shadingScale;\r\n        this._renderArea.height = vp.height * size * shadingScale;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const renderPass = this._frameBuffer.renderPass;\r\n\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            this._frameBuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.endRenderPass();\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        this._probeRenderQueue.gatherRenderObjects(this._probe!, camera, cmdBuff);\r\n        pipeline.pipelineUBO.updateCameraUBO(this._probe!.camera);\r\n\r\n        this._renderArea.x = 0;\r\n        this._renderArea.y = 0;\r\n        this._renderArea.width = this._probe!.renderArea().x;\r\n        this._renderArea.height = this._probe!.renderArea().y;\r\n\r\n        const renderPass = this._frameBuffer!.renderPass;\r\n\r\n        if (this._probe!.camera.clearFlag & ClearFlagBit.COLOR) {\r\n            this._rgbeColor.x = this._probe!.camera.clearColor.x;\r\n            this._rgbeColor.y = this._probe!.camera.clearColor.y;\r\n            this._rgbeColor.z = this._probe!.camera.clearColor.z;\r\n            const rgbe = packRGBE(this._rgbeColor);\r\n            colors[0].x = rgbe.x;\r\n            colors[0].y = rgbe.y;\r\n            colors[0].z = rgbe.z;\r\n            colors[0].w = rgbe.w;\r\n        }\r\n        const device = pipeline.device;\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            this._frameBuffer!,\r\n            this._renderArea,\r\n            colors,\r\n            this._probe!.camera.clearDepth,\r\n            this._probe!.camera.clearStencil,\r\n        );\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n\r\n        this._probeRenderQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n        cmdBuff.endRenderPass();\r\n\r\n        pipeline.pipelineUBO.updateCameraUBO(camera);\r\n    }\r\n\r\n    public activate (pipeline: ForwardPipeline, flow: ReflectionProbeFlow): void {\r\n        super.activate(pipeline, flow);\r\n        this._probeRenderQueue = new RenderReflectionProbeQueue(pipeline);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { EDITOR } from 'internal:constants';\r\nimport { ccclass } from 'cc.decorator';\r\nimport { IRenderFlowInfo, RenderFlow } from '../render-flow';\r\nimport { ReflectionProbeStage } from './reflection-probe-stage';\r\nimport { RenderFlowTag } from '../pipeline-serialization';\r\nimport { RenderPipeline } from '../render-pipeline';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport { ProbeType, ReflectionProbe } from '../../render-scene/scene/reflection-probe';\r\nimport { cclegacy } from '../../core';\r\n\r\n/**\r\n * @en reflection probe render flow\r\n * @zh 反射探针rendertexture绘制流程\r\n */\r\n@ccclass('ReflectionProbeFlow')\r\nexport class ReflectionProbeFlow extends RenderFlow {\r\n    public static initInfo: IRenderFlowInfo = {\r\n        name: 'PIPELINE_FLOW_RELECTION_PROBE',\r\n        priority: 0,\r\n        tag: RenderFlowTag.SCENE,\r\n        stages: [],\r\n    };\r\n\r\n    public initialize (info: IRenderFlowInfo): boolean {\r\n        super.initialize(info);\r\n        if (this._stages.length === 0) {\r\n            const probeStage = new ReflectionProbeStage();\r\n            probeStage.initialize(ReflectionProbeStage.initInfo);\r\n            this._stages.push(probeStage);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline): void {\r\n        super.activate(pipeline);\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        if (!cclegacy.internal.reflectionProbeManager) {\r\n            return;\r\n        }\r\n        const probes = cclegacy.internal.reflectionProbeManager.getProbes() as ReflectionProbe[];\r\n        for (let i = 0; i < probes.length; i++) {\r\n            if (probes[i].needRender) {\r\n                if (EDITOR || probes[i].probeType === ProbeType.PLANAR) {\r\n                    this._renderStage(camera, probes[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        super.destroy();\r\n    }\r\n    private _renderStage (camera: Camera, probe: ReflectionProbe): void {\r\n        for (let i = 0; i < this._stages.length; i++) {\r\n            const probeStage = this._stages[i] as ReflectionProbeStage;\r\n            if (probe.probeType === ProbeType.PLANAR) {\r\n                cclegacy.internal.reflectionProbeManager.updatePlanarMap(probe, null);\r\n                probeStage.setUsageInfo(probe, probe.realtimePlanarTexture!.window!.framebuffer);\r\n                probeStage.render(camera);\r\n                cclegacy.internal.reflectionProbeManager.updatePlanarMap(probe, probe.realtimePlanarTexture!.getGFXTexture());\r\n            } else {\r\n                for (let faceIdx = 0; faceIdx < 6; faceIdx++) {\r\n                    const renderTexture = probe.bakedCubeTextures[faceIdx];\r\n                    if (!renderTexture) return;\r\n                    //update camera dirction\r\n                    probe.updateCameraDir(faceIdx);\r\n                    probeStage.setUsageInfo(probe, renderTexture.window!.framebuffer);\r\n                    probeStage.render(camera);\r\n                }\r\n                probe.needRender = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { EDITOR } from 'internal:constants';\r\nimport { RenderPipeline, IRenderPipelineInfo } from '../render-pipeline';\r\nimport { ForwardFlow } from './forward-flow';\r\nimport { RenderTextureConfig } from '../pipeline-serialization';\r\nimport { ShadowFlow } from '../shadow/shadow-flow';\r\nimport { UBOGlobal, UBOShadow, UBOCamera, UNIFORM_SHADOWMAP_BINDING,\r\n    UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, getDefaultShadowTexture } from '../define';\r\nimport { Swapchain, RenderPass } from '../../gfx';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { errorID, log } from '../../core/platform/debug';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { ReflectionProbeFlow } from '../reflection-probe/reflection-probe-flow';\r\n\r\nconst PIPELINE_TYPE = 0;\r\n\r\nexport function createDefaultPipeline (): ForwardPipeline {\r\n    const rppl = new ForwardPipeline();\r\n    rppl.initialize({ flows: [] });\r\n    return rppl;\r\n}\r\n\r\n/**\r\n * @en The forward render pipeline\r\n * @zh 前向渲染管线。\r\n */\r\n@ccclass('ForwardPipeline')\r\nexport class ForwardPipeline extends RenderPipeline {\r\n    @type([RenderTextureConfig])\r\n    @serializable\r\n    @displayOrder(2)\r\n    protected renderTextures: RenderTextureConfig[] = [];\r\n\r\n    protected _postRenderPass: RenderPass | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public get postRenderPass (): RenderPass | null {\r\n        return this._postRenderPass;\r\n    }\r\n\r\n    public initialize (info: IRenderPipelineInfo): boolean {\r\n        super.initialize(info);\r\n\r\n        if (this._flows.length === 0) {\r\n            const shadowFlow = new ShadowFlow();\r\n            shadowFlow.initialize(ShadowFlow.initInfo);\r\n            this._flows.push(shadowFlow);\r\n\r\n            const reflectionFlow = new ReflectionProbeFlow();\r\n            reflectionFlow.initialize(ReflectionProbeFlow.initInfo);\r\n            this._flows.push(reflectionFlow);\r\n\r\n            const forwardFlow = new ForwardFlow();\r\n            forwardFlow.initialize(ForwardFlow.initInfo);\r\n            this._flows.push(forwardFlow);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public activate (swapchain: Swapchain): boolean {\r\n        if (EDITOR) { log('Forward render pipeline initialized.'); }\r\n\r\n        this._macros = { CC_PIPELINE_TYPE: PIPELINE_TYPE };\r\n        this._pipelineSceneData = new PipelineSceneData();\r\n\r\n        if (!super.activate(swapchain)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._activeRenderer(swapchain)) {\r\n            errorID(2402);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected _ensureEnoughSize (cameras: Camera[]): void {\r\n        let newWidth = this._width;\r\n        let newHeight = this._height;\r\n        for (let i = 0; i < cameras.length; ++i) {\r\n            const window = cameras[i].window;\r\n            newWidth = Math.max(window.width, newWidth);\r\n            newHeight = Math.max(window.height, newHeight);\r\n        }\r\n        if (newWidth !== this._width || newHeight !== this._height) {\r\n            this._width = newWidth;\r\n            this._height = newHeight;\r\n        }\r\n    }\r\n\r\n    public destroy (): boolean {\r\n        this._destroyUBOs();\r\n        this._destroyQuadInputAssembler();\r\n        const rpIter = this._renderPasses.values();\r\n        let rpRes = rpIter.next();\r\n        while (!rpRes.done) {\r\n            rpRes.value.destroy();\r\n            rpRes = rpIter.next();\r\n        }\r\n\r\n        this._commandBuffers.length = 0;\r\n\r\n        return super.destroy();\r\n    }\r\n\r\n    private _activeRenderer (swapchain: Swapchain): boolean {\r\n        const device = this.device;\r\n\r\n        this._commandBuffers.push(device.commandBuffer);\r\n        const descriptorSet = this._descriptorSet;\r\n        const shadowMapSampler = this.globalDSManager.pointSampler;\r\n        descriptorSet.bindSampler(UNIFORM_SHADOWMAP_BINDING, shadowMapSampler);\r\n        descriptorSet.bindTexture(UNIFORM_SHADOWMAP_BINDING, getDefaultShadowTexture(this.device));\r\n        descriptorSet.bindSampler(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, shadowMapSampler);\r\n        descriptorSet.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, getDefaultShadowTexture(this.device));\r\n\r\n        descriptorSet.update();\r\n\r\n        return true;\r\n    }\r\n\r\n    private _destroyUBOs (): void {\r\n        const descriptorSet = this._descriptorSet;\r\n        if (descriptorSet) {\r\n            descriptorSet.getBuffer(UBOGlobal.BINDING).destroy();\r\n            descriptorSet.getBuffer(UBOShadow.BINDING).destroy();\r\n            descriptorSet.getBuffer(UBOCamera.BINDING).destroy();\r\n\r\n            descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();\r\n            descriptorSet.getTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING).destroy();\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Device } from '../../gfx';\r\nimport { MAX_BLOOM_FILTER_PASS_NUM } from '../render-pipeline';\r\nimport { Material } from '../../asset/assets';\r\nimport { PipelineSceneData } from '../pipeline-scene-data';\r\nimport { macro } from '../../core/platform/macro';\r\nimport { legacyCC } from '../../core/global-exports';\r\n\r\n// Anti-aliasing type, other types will be gradually added in the future\r\nexport enum DeferredAntiAliasing {\r\n    NONE,\r\n    FXAA,\r\n}\r\nexport const BLOOM_PREFILTERPASS_INDEX = 0;\r\nexport const BLOOM_DOWNSAMPLEPASS_INDEX = 1;\r\nexport const BLOOM_UPSAMPLEPASS_INDEX = BLOOM_DOWNSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM;\r\nexport const BLOOM_COMBINEPASS_INDEX = BLOOM_UPSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM;\r\nexport class DeferredPipelineSceneData extends PipelineSceneData {\r\n    protected _antiAliasing: DeferredAntiAliasing = DeferredAntiAliasing.NONE;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n    set antiAliasing (value: DeferredAntiAliasing) {\r\n        this._antiAliasing = value;\r\n        if (this._postprocessMaterial) {\r\n            const defines = this._postprocessMaterial.passes[0].defines;\r\n            Object.assign(defines, { ANTIALIAS_TYPE: value });\r\n            const renderMat = new Material();\r\n            renderMat.initialize({\r\n                effectAsset: this._postprocessMaterial.effectAsset,\r\n                defines,\r\n            });\r\n            for (let i = 0; i < renderMat.passes.length; ++i) {\r\n                renderMat.passes[i].tryCompile();\r\n            }\r\n            this._postprocessMaterial = renderMat;\r\n        }\r\n    }\r\n\r\n    get antiAliasing (): DeferredAntiAliasing {\r\n        return this._antiAliasing;\r\n    }\r\n\r\n    public get bloomMaterial (): Material {\r\n        return this._bloomMaterial;\r\n    }\r\n\r\n    public set bloomMaterial (mat: Material) {\r\n        if (this._bloomMaterial === mat || !mat) return;\r\n        this._bloomMaterial = mat;\r\n        this.updatePipelinePassInfo();\r\n    }\r\n    protected declare _bloomMaterial: Material;\r\n\r\n    public get postprocessMaterial (): Material {\r\n        return this._postprocessMaterial;\r\n    }\r\n\r\n    public set postprocessMaterial (mat: Material) {\r\n        if (this._postprocessMaterial === mat || !mat) return;\r\n        this._postprocessMaterial = mat;\r\n        this.updatePipelinePassInfo();\r\n    }\r\n    protected declare _postprocessMaterial: Material;\r\n\r\n    public updatePipelineSceneData (): void {\r\n        this.updatePipelinePassInfo();\r\n    }\r\n\r\n    private updateBloomPass (): void {\r\n        if (!this._bloomMaterial) return;\r\n\r\n        const prefilterPass = this._bloomMaterial.passes[BLOOM_PREFILTERPASS_INDEX];\r\n        prefilterPass.beginChangeStatesSilently();\r\n        prefilterPass.tryCompile();\r\n        prefilterPass.endChangeStatesSilently();\r\n\r\n        for (let i = 0; i < MAX_BLOOM_FILTER_PASS_NUM; ++i) {\r\n            const downsamplePass = this._bloomMaterial.passes[BLOOM_DOWNSAMPLEPASS_INDEX + i];\r\n            downsamplePass.beginChangeStatesSilently();\r\n            downsamplePass.tryCompile();\r\n            downsamplePass.endChangeStatesSilently();\r\n\r\n            const upsamplePass = this._bloomMaterial.passes[BLOOM_UPSAMPLEPASS_INDEX + i];\r\n            upsamplePass.beginChangeStatesSilently();\r\n            upsamplePass.tryCompile();\r\n            upsamplePass.endChangeStatesSilently();\r\n        }\r\n\r\n        const combinePass = this._bloomMaterial.passes[BLOOM_COMBINEPASS_INDEX];\r\n        combinePass.beginChangeStatesSilently();\r\n        combinePass.tryCompile();\r\n        combinePass.endChangeStatesSilently();\r\n    }\r\n\r\n    private updatePostProcessPass (): void {\r\n        if (!this.postprocessMaterial) return;\r\n\r\n        const passPost = this.postprocessMaterial.passes[0];\r\n        passPost.beginChangeStatesSilently();\r\n        passPost.tryCompile();\r\n        passPost.endChangeStatesSilently();\r\n    }\r\n\r\n    public initPipelinePassInfo (): void {\r\n        // builtin deferred material\r\n        const deferredMat = new Material();\r\n        deferredMat._uuid = 'builtin-deferred-material';\r\n        deferredMat.initialize({ effectName: 'pipeline/deferred-lighting' });\r\n        for (let i = 0; i < deferredMat.passes.length; ++i) {\r\n            deferredMat.passes[i].tryCompile();\r\n        }\r\n        this._deferredLightingMaterial = deferredMat;\r\n        const bloomMat = new Material();\r\n        bloomMat._uuid = 'builtin-bloom-material';\r\n        bloomMat.initialize({ effectName: 'pipeline/bloom' });\r\n        for (let i = 0; i < bloomMat.passes.length; ++i) {\r\n            bloomMat.passes[i].tryCompile();\r\n        }\r\n        this._bloomMaterial = bloomMat;\r\n\r\n        const postMat = new Material();\r\n        postMat._uuid = 'builtin-post-process-material';\r\n        postMat.initialize({\r\n            effectName: 'pipeline/post-process',\r\n            defines: {\r\n                // Anti-aliasing type, currently only fxaa, so 1 means fxaa\r\n                ANTIALIAS_TYPE: this._antiAliasing,\r\n            },\r\n        });\r\n        for (let i = 0; i < postMat.passes.length; ++i) {\r\n            postMat.passes[i].tryCompile();\r\n        }\r\n        this._postprocessMaterial = postMat;\r\n\r\n        this.updatePipelinePassInfo();\r\n    }\r\n\r\n    public get deferredLightingMaterial (): Material {\r\n        return this._deferredLightingMaterial;\r\n    }\r\n\r\n    public set deferredLightingMaterial (mat: Material) {\r\n        if (this._deferredLightingMaterial === mat || !mat) return;\r\n        this._deferredLightingMaterial = mat;\r\n        this.updatePipelinePassInfo();\r\n    }\r\n\r\n    protected declare _deferredLightingMaterial: Material;\r\n    protected declare _deferredPostMaterial: Material;\r\n\r\n    protected updatePipelinePassInfo (): void {\r\n        this.updateBloomPass();\r\n        this.updatePostProcessPass();\r\n        this.updateDeferredPassInfo();\r\n    }\r\n\r\n    public activate (device: Device): boolean {\r\n        super.activate(device);\r\n        this.initPipelinePassInfo();\r\n        return true;\r\n    }\r\n\r\n    private updateDeferredPassInfo (): void {\r\n        this.updateDeferredLightPass();\r\n    }\r\n\r\n    private updateDeferredLightPass (): void {\r\n        if (!this._deferredLightingMaterial) return;\r\n\r\n        // It's temporary solution for main light shadowmap\r\n        legacyCC.director.root.pipeline.macros.CC_RECEIVE_SHADOW = 1;\r\n\r\n        const passLit = this._deferredLightingMaterial.passes[0];\r\n        passLit.beginChangeStatesSilently();\r\n        passLit.tryCompile();\r\n        passLit.endChangeStatesSilently();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @category pipeline\r\n */\r\n\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { SetIndex } from '../define';\r\nimport { getPhaseID } from '../pass-phase';\r\nimport { renderQueueClearFunc, RenderQueue, convertRenderQueue, renderQueueSortFunc } from '../render-queue';\r\nimport { ClearFlagBit, Color, Rect } from '../../gfx';\r\nimport { SRGBToLinear } from '../pipeline-funcs';\r\nimport { RenderInstancedQueue } from '../render-instanced-queue';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { DeferredStagePriority } from '../enum';\r\nimport { BatchingSchemes } from '../../render-scene/core/pass';\r\nimport { DeferredPipeline } from './deferred-pipeline';\r\nimport { RenderQueueDesc, RenderQueueSortMode } from '../pipeline-serialization';\r\nimport { MainFlow } from './main-flow';\r\n\r\nconst colors: Color[] = [new Color(0, 0, 0, 0), new Color(0, 0, 0, 0), new Color(0, 0, 0, 0)];\r\n\r\n/**\r\n * @en The gbuffer render stage\r\n * @zh 前向渲染阶段。\r\n */\r\n@ccclass('GbufferStage')\r\nexport class GbufferStage extends RenderStage {\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'GbufferStage',\r\n        priority: DeferredStagePriority.GBUFFER,\r\n        tag: 0,\r\n        renderQueues: [\r\n            {\r\n                isTransparent: false,\r\n                sortMode: RenderQueueSortMode.FRONT_TO_BACK,\r\n                stages: ['default'],\r\n            },\r\n            {\r\n                isTransparent: true,\r\n                sortMode: RenderQueueSortMode.BACK_TO_FRONT,\r\n                stages: ['default'],\r\n            },\r\n        ],\r\n    };\r\n\r\n    @type([RenderQueueDesc])\r\n    @serializable\r\n    @displayOrder(2)\r\n    protected renderQueues: RenderQueueDesc[] = [];\r\n    protected _renderQueues: RenderQueue[] = [];\r\n\r\n    private _renderArea = new Rect();\r\n    private _instancedQueue: RenderInstancedQueue = new RenderInstancedQueue();\r\n    private _phaseID = getPhaseID('default');\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: IRenderStageInfo): boolean {\r\n        super.initialize(info);\r\n        if (info.renderQueues) {\r\n            this.renderQueues = info.renderQueues;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: DeferredPipeline, flow: MainFlow): void {\r\n        super.activate(pipeline, flow);\r\n        for (let i = 0; i < this.renderQueues.length; i++) {\r\n            this._renderQueues[i] = convertRenderQueue(this.renderQueues[i]);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        this._instancedQueue.clear();\r\n        const pipeline = this._pipeline as DeferredPipeline;\r\n        const device = pipeline.device;\r\n        this._renderQueues.forEach(renderQueueClearFunc);\r\n\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n        pipeline.updateQuadVertexData(this._renderArea, camera.window);\r\n\r\n        const renderObjects = pipeline.pipelineSceneData.renderObjects;\r\n\r\n        let m = 0; let p = 0; let k = 0;\r\n        for (let i = 0; i < renderObjects.length; ++i) {\r\n            const ro = renderObjects[i];\r\n            const subModels = ro.model.subModels;\r\n            for (m = 0; m < subModels.length; ++m) {\r\n                const subModel = subModels[m];\r\n                const passes = subModel.passes;\r\n                for (p = 0; p < passes.length; ++p) {\r\n                    const pass = passes[p];\r\n                    if (pass.phase !== this._phaseID) continue;\r\n                    const batchingScheme = pass.batchingScheme;\r\n                    if (batchingScheme === BatchingSchemes.INSTANCING) {\r\n                        const instancedBuffer = pass.getInstancedBuffer();\r\n                        instancedBuffer.merge(subModel, p);\r\n                        this._instancedQueue.queue.add(instancedBuffer);\r\n                    } else {\r\n                        for (k = 0; k < this._renderQueues.length; k++) {\r\n                            this._renderQueues[k].insertRenderPass(ro, m, p);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._renderQueues.forEach(renderQueueSortFunc);\r\n\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n\r\n        this._instancedQueue.uploadBuffers(cmdBuff);\r\n\r\n        if (camera.clearFlag & ClearFlagBit.COLOR) {\r\n            if (pipeline.pipelineSceneData.isHDR) {\r\n                SRGBToLinear(colors[0], camera.clearColor);\r\n            } else {\r\n                colors[0].x = camera.clearColor.x;\r\n                colors[0].y = camera.clearColor.y;\r\n                colors[0].z = camera.clearColor.z;\r\n            }\r\n        }\r\n\r\n        colors[0].w = camera.clearColor.w;\r\n\r\n        const deferredData = pipeline.getPipelineRenderData();\r\n        const framebuffer = deferredData.gbufferFrameBuffer;\r\n        const renderPass = framebuffer.renderPass;\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            framebuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.setScissor(pipeline.generateScissor(camera));\r\n        cmdBuff.setViewport(pipeline.generateViewport(camera));\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n\r\n        for (let i = 0; i < this.renderQueues.length; i++) {\r\n            this._renderQueues[i].recordCommandBuffer(device, renderPass, cmdBuff);\r\n        }\r\n        this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n\r\n        cmdBuff.endRenderPass();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @category pipeline\r\n */\r\n\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport { LightType } from '../../render-scene/scene/light';\r\nimport { UBODeferredLight, SetIndex, UBOForwardLight, UBOLocal, UBOLocalEnum } from '../define';\r\nimport { getPhaseID } from '../pass-phase';\r\nimport { Color, Rect, Buffer, BufferUsageBit, MemoryUsageBit, BufferInfo, BufferViewInfo, DescriptorSet,\r\n    DescriptorSetLayout, DescriptorSetInfo, PipelineState, ClearFlagBit } from '../../gfx';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { DeferredStagePriority } from '../enum';\r\nimport { MainFlow } from './main-flow';\r\nimport { DeferredPipeline } from './deferred-pipeline';\r\nimport { PlanarShadowQueue } from '../planar-shadow-queue';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { PipelineStateManager } from '../pipeline-state-manager';\r\nimport { intersect, Sphere } from '../../core/geometry';\r\nimport { Vec3, Vec4 } from '../../core/math';\r\nimport { DeferredPipelineSceneData } from './deferred-pipeline-scene-data';\r\nimport { renderQueueClearFunc, RenderQueue, convertRenderQueue, renderQueueSortFunc } from '../render-queue';\r\nimport { RenderQueueDesc } from '../pipeline-serialization';\r\nimport { UIPhase } from '../ui-phase';\r\nimport { Pass } from '../../render-scene/core/pass';\r\nimport { AABB } from '../../core/geometry/aabb';\r\nimport { geometry } from '../../core';\r\n\r\nconst _v3 = new Vec3();\r\nconst _rangedDirLightBoundingBox = new AABB(0.0, 0.0, 0.0, 0.5, 0.5, 0.5);\r\nconst _tmpBoundingBox = new AABB();\r\nconst colors: Color[] = [new Color(0, 0, 0, 1)];\r\n\r\n/**\r\n * @en The lighting render stage\r\n * @zh 前向渲染阶段。\r\n */\r\n@ccclass('LightingStage')\r\nexport class LightingStage extends RenderStage {\r\n    private _deferredLitsBufs: Buffer = null!;\r\n    private _maxDeferredLights = UBODeferredLight.LIGHTS_PER_PASS;\r\n    private _lightBufferData: Float32Array = null!;\r\n    private _lightMeterScale = 10000.0;\r\n    private _descriptorSet: DescriptorSet = null!;\r\n    private _renderArea = new Rect();\r\n    private _planarQueue: PlanarShadowQueue = null!;\r\n    private _uiPhase: UIPhase = new UIPhase();\r\n\r\n    @type(Material)\r\n    @serializable\r\n    @displayOrder(3)\r\n    private _deferredMaterial: Material | null = null;\r\n\r\n    @type([RenderQueueDesc])\r\n    @serializable\r\n    @displayOrder(2)\r\n    private renderQueues: RenderQueueDesc[] = [];\r\n    private _phaseID = getPhaseID('default');\r\n    private _renderQueues: RenderQueue[] = [];\r\n\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'LightingStage',\r\n        priority: DeferredStagePriority.LIGHTING,\r\n        tag: 0,\r\n    };\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: IRenderStageInfo): boolean {\r\n        super.initialize(info);\r\n        return true;\r\n    }\r\n    public gatherLights (camera: Camera): void {\r\n        const pipeline = this._pipeline as DeferredPipeline;\r\n        const isHDR = pipeline.pipelineSceneData.isHDR;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n\r\n        const sphereLights = camera.scene!.sphereLights;\r\n        const spotLights = camera.scene!.spotLights;\r\n        const pointLights = camera.scene!.pointLights;\r\n        const rangedDirLights = camera.scene!.rangedDirLights;\r\n        const _sphere = Sphere.create(0, 0, 0, 1);\r\n        const _vec4Array = new Float32Array(4);\r\n        const exposure = camera.exposure;\r\n\r\n        let idx = 0;\r\n        const elementLen = Vec4.length; // sizeof(vec4) / sizeof(float32)\r\n        const fieldLen = elementLen * this._maxDeferredLights;\r\n\r\n        for (let i = 0; i < sphereLights.length && idx < this._maxDeferredLights; i++, ++idx) {\r\n            const light = sphereLights[i];\r\n            Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n                // cc_lightPos\r\n                Vec3.toArray(_vec4Array, light.position);\r\n                _vec4Array[3] = LightType.SPHERE;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n\r\n                if (isHDR) {\r\n                    _vec4Array[3] = light.luminance * exposure * this._lightMeterScale;\r\n                } else {\r\n                    _vec4Array[3] = light.luminance;\r\n                }\r\n\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);\r\n\r\n                // cc_lightSizeRangeAngle\r\n                _vec4Array[0] = light.size;\r\n                _vec4Array[1] = light.range;\r\n                _vec4Array[2] = 0.0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < spotLights.length && idx < this._maxDeferredLights; i++, ++idx) {\r\n            const light = spotLights[i];\r\n            Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n                // cc_lightPos\r\n                Vec3.toArray(_vec4Array, light.position);\r\n                _vec4Array[3] = LightType.SPOT;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 0);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n                if (isHDR) {\r\n                    _vec4Array[3] = light.luminance * exposure * this._lightMeterScale;\r\n                } else {\r\n                    _vec4Array[3] = light.luminance;\r\n                }\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);\r\n\r\n                // cc_lightSizeRangeAngle\r\n                _vec4Array[0] = light.size;\r\n                _vec4Array[1] = light.range;\r\n                _vec4Array[2] = light.spotAngle;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);\r\n\r\n                // cc_lightDir\r\n                Vec3.toArray(_vec4Array, light.direction);\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 3);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < pointLights.length && idx < this._maxDeferredLights; i++, ++idx) {\r\n            const light = pointLights[i];\r\n            Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);\r\n            if (intersect.sphereFrustum(_sphere, camera.frustum)) {\r\n                // cc_lightPos\r\n                Vec3.toArray(_vec4Array, light.position);\r\n                _vec4Array[3] = LightType.POINT;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n\r\n                if (isHDR) {\r\n                    _vec4Array[3] = light.luminance * exposure * this._lightMeterScale;\r\n                } else {\r\n                    _vec4Array[3] = light.luminance;\r\n                }\r\n\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);\r\n\r\n                // cc_lightSizeRangeAngle\r\n                _vec4Array[0] = 0.0;\r\n                _vec4Array[1] = light.range;\r\n                _vec4Array[2] = 0.0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < rangedDirLights.length && idx < this._maxDeferredLights; i++, ++idx) {\r\n            const light = rangedDirLights[i];\r\n            AABB.transform(_tmpBoundingBox, _rangedDirLightBoundingBox, light.node!.getWorldMatrix());\r\n            if (geometry.intersect.aabbFrustum(_tmpBoundingBox, camera.frustum)) {\r\n                // UBOForwardLight\r\n                Vec3.toArray(_vec4Array, light.position);\r\n                _vec4Array[3] = LightType.RANGED_DIRECTIONAL;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen);\r\n\r\n                // cc_lightColor\r\n                Vec3.toArray(_vec4Array, light.color);\r\n                if (light.useColorTemperature) {\r\n                    const finalColor = light.finalColor;\r\n                    _vec4Array[0] = finalColor.x;\r\n                    _vec4Array[1] = finalColor.y;\r\n                    _vec4Array[2] = finalColor.z;\r\n                }\r\n                if (isHDR) {\r\n                    _vec4Array[3] = light.illuminance * exposure;\r\n                } else {\r\n                    _vec4Array[3] = light.illuminance;\r\n                }\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);\r\n\r\n                Vec3.toArray(_vec4Array, light.right);\r\n                _vec4Array[3] = 0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);\r\n\r\n                Vec3.toArray(_vec4Array, light.direction);\r\n                _vec4Array[3] = 0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 3);\r\n\r\n                // eslint-disable-next-line no-case-declarations\r\n                const scale = light.scale;\r\n                _v3.set(scale.x * 0.5, scale.y * 0.5, scale.z * 0.5);\r\n                Vec3.toArray(_vec4Array, _v3);\r\n                _vec4Array[3] = 0;\r\n                this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 4);\r\n            }\r\n        }\r\n\r\n        // the count of lights is set to cc_lightDir[0].w\r\n        const offset = fieldLen * 3 + 3;\r\n        this._lightBufferData.set([idx], offset);\r\n\r\n        cmdBuff.updateBuffer(this._deferredLitsBufs, this._lightBufferData);\r\n    }\r\n\r\n    protected _createStageDescriptor (pass: Pass): void {\r\n        const device = this._pipeline.device;\r\n        let totalSize = Float32Array.BYTES_PER_ELEMENT * 4 * 4 * this._maxDeferredLights;\r\n        totalSize = Math.ceil(totalSize / device.capabilities.uboOffsetAlignment) * device.capabilities.uboOffsetAlignment;\r\n\r\n        this._deferredLitsBufs = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            totalSize,\r\n            device.capabilities.uboOffsetAlignment,\r\n        ));\r\n\r\n        const deferredLitsBufView = device.createBuffer(new BufferViewInfo(this._deferredLitsBufs, 0, totalSize));\r\n        this._lightBufferData = new Float32Array(totalSize / Float32Array.BYTES_PER_ELEMENT);\r\n\r\n        this._descriptorSet = device.createDescriptorSet(new DescriptorSetInfo(pass.localSetLayout));\r\n        this._descriptorSet.bindBuffer(UBOForwardLight.BINDING, deferredLitsBufView);\r\n\r\n        const _localUBO = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            UBOLocalEnum.SIZE,\r\n            UBOLocalEnum.SIZE,\r\n        ));\r\n        this._descriptorSet.bindBuffer(UBOLocalEnum.BINDING, _localUBO);\r\n    }\r\n\r\n    public activate (pipeline: DeferredPipeline, flow: MainFlow): void {\r\n        super.activate(pipeline, flow);\r\n        this._uiPhase.activate(pipeline);\r\n\r\n        // activate queue\r\n        for (let i = 0; i < this.renderQueues.length; i++) {\r\n            this._renderQueues[i] = convertRenderQueue(this.renderQueues[i]);\r\n        }\r\n\r\n        this._planarQueue = new PlanarShadowQueue(this._pipeline as DeferredPipeline);\r\n\r\n        if (this._deferredMaterial) { (pipeline.pipelineSceneData as DeferredPipelineSceneData).deferredLightingMaterial = this._deferredMaterial; }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._deferredLitsBufs?.destroy();\r\n        this._deferredLitsBufs = null!;\r\n        this._descriptorSet = null!;\r\n    }\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline as DeferredPipeline;\r\n        const device = pipeline.device;\r\n\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        const renderObjects = sceneData.renderObjects;\r\n\r\n        this._planarQueue.gatherShadowPasses(camera, cmdBuff);\r\n\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n        // Lighting\r\n        const deferredData = pipeline.getPipelineRenderData();\r\n        const lightingMat = (sceneData as DeferredPipelineSceneData).deferredLightingMaterial;\r\n        const pass = lightingMat.passes[0];\r\n        const shader = pass.getShaderVariant();\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            pass.descriptorSet.bindTexture(i, deferredData.gbufferRenderTargets[i]);\r\n            pass.descriptorSet.bindSampler(i, deferredData.sampler);\r\n        }\r\n        pass.descriptorSet.bindTexture(3, deferredData.outputDepth);\r\n        pass.descriptorSet.bindSampler(3, deferredData.sampler);\r\n        pass.descriptorSet.update();\r\n        if (!this._descriptorSet) {\r\n            this._createStageDescriptor(pass);\r\n        }\r\n        // light信息\r\n        this.gatherLights(camera);\r\n\r\n        if (camera.clearFlag & ClearFlagBit.COLOR) {\r\n            colors[0].x = camera.clearColor.x;\r\n            colors[0].y = camera.clearColor.y;\r\n            colors[0].z = camera.clearColor.z;\r\n        }\r\n\r\n        colors[0].w = 0;\r\n\r\n        const framebuffer = deferredData.outputFrameBuffer;\r\n        const renderPass = framebuffer.renderPass;\r\n\r\n        pipeline.pipelineUBO.updateShadowUBO(camera);\r\n\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            framebuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.setScissor(pipeline.generateScissor(camera));\r\n        cmdBuff.setViewport(pipeline.generateViewport(camera));\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n\r\n        const inputAssembler = pipeline.quadIAOffscreen;\r\n        let pso: PipelineState|null = null;\r\n        if (pass != null && shader != null && inputAssembler != null) {\r\n            pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);\r\n        }\r\n\r\n        if (pso != null) {\r\n            this._descriptorSet.update();\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, this._descriptorSet);\r\n            cmdBuff.bindInputAssembler(inputAssembler);\r\n            cmdBuff.draw(inputAssembler);\r\n        }\r\n\r\n        // Transparent\r\n        this._renderQueues.forEach(renderQueueClearFunc);\r\n\r\n        let m = 0; let p = 0; let k = 0;\r\n        for (let i = 0; i < renderObjects.length; ++i) {\r\n            const ro = renderObjects[i];\r\n            const subModels = ro.model.subModels;\r\n            for (m = 0; m < subModels.length; ++m) {\r\n                const subModel = subModels[m];\r\n                const passes = subModel.passes;\r\n                for (p = 0; p < passes.length; ++p) {\r\n                    const pass = passes[p];\r\n                    if (pass.phase !== this._phaseID) continue;\r\n                    for (k = 0; k < this._renderQueues.length; k++) {\r\n                        this._renderQueues[k].insertRenderPass(ro, m, p);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (renderObjects.length > 0) {\r\n            this._renderQueues.forEach(renderQueueSortFunc);\r\n            for (let i = 0; i < this._renderQueues.length; i++) {\r\n                this._renderQueues[i].recordCommandBuffer(device, renderPass, cmdBuff);\r\n            }\r\n\r\n            // planarQueue\r\n            this._planarQueue.recordCommandBuffer(device, renderPass, cmdBuff);\r\n        }\r\n        camera.geometryRenderer?.render(renderPass, cmdBuff, pipeline.pipelineSceneData);\r\n        this._uiPhase.render(camera, renderPass);\r\n        cmdBuff.endRenderPass();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @category pipeline\r\n */\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { SetIndex, UBOLocalEnum } from '../define';\r\nimport { Color, Rect, PipelineState, ClearFlagBit, DescriptorSetInfo, BufferInfo, BufferUsageBit, MemoryUsageBit, DescriptorSet, Buffer } from '../../gfx';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { CommonStagePriority } from '../enum';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { PipelineStateManager } from '../pipeline-state-manager';\r\nimport { RenderQueueDesc } from '../pipeline-serialization';\r\nimport { renderProfiler } from '../pipeline-funcs';\r\nimport { RenderPipeline } from '../render-pipeline';\r\nimport { RenderFlow } from '../render-flow';\r\nimport { UIPhase } from '../ui-phase';\r\nimport { DeferredPipelineSceneData } from './deferred-pipeline-scene-data';\r\n\r\nconst colors: Color[] = [new Color(0, 0, 0, 1)];\r\n\r\n/**\r\n  * @en The postprocess render stage\r\n  * @zh 后处理渲染阶段。\r\n  */\r\n@ccclass('PostProcessStage')\r\nexport class PostProcessStage extends RenderStage {\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'PostProcessStage',\r\n        priority: CommonStagePriority.POST_PROCESS,\r\n        tag: 0,\r\n    };\r\n\r\n    @type(Material)\r\n    @serializable\r\n    @displayOrder(3)\r\n    private _postProcessMaterial: Material | null = null;\r\n\r\n    @type([RenderQueueDesc])\r\n    @serializable\r\n    @displayOrder(2)\r\n    private renderQueues: RenderQueueDesc[] = [];\r\n\r\n    private _renderArea = new Rect();\r\n    private declare _uiPhase: UIPhase;\r\n    private _stageDesc: DescriptorSet | null = null;\r\n    private _localUBO: Buffer | null = null;\r\n    constructor () {\r\n        super();\r\n        this._uiPhase = new UIPhase();\r\n    }\r\n\r\n    public initialize (info: IRenderStageInfo): boolean {\r\n        super.initialize(info);\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline, flow: RenderFlow): void {\r\n        super.activate(pipeline, flow);\r\n        if (this._postProcessMaterial) { (pipeline.pipelineSceneData as DeferredPipelineSceneData).postprocessMaterial = this._postProcessMaterial; }\r\n        this._uiPhase.activate(pipeline);\r\n    }\r\n\r\n    public destroy (): void {\r\n    }\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline;\r\n        const device = pipeline.device;\r\n        const sceneData = pipeline.pipelineSceneData;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        pipeline.pipelineUBO.updateCameraUBO(camera);\r\n\r\n        const vp = camera.viewport;\r\n        this._renderArea.x = vp.x * camera.window.width;\r\n        this._renderArea.y = vp.y * camera.window.height;\r\n        this._renderArea.width = vp.width * camera.window.width;\r\n        this._renderArea.height = vp.height * camera.window.height;\r\n        const renderData = pipeline.getPipelineRenderData();\r\n        const framebuffer = camera.window.framebuffer;\r\n        const renderPass = pipeline.getRenderPass(camera.clearFlag, framebuffer);\r\n\r\n        if (camera.clearFlag & ClearFlagBit.COLOR) {\r\n            colors[0].x = camera.clearColor.x;\r\n            colors[0].y = camera.clearColor.y;\r\n            colors[0].z = camera.clearColor.z;\r\n        }\r\n\r\n        colors[0].w = camera.clearColor.w;\r\n\r\n        cmdBuff.beginRenderPass(\r\n            renderPass,\r\n            framebuffer,\r\n            this._renderArea,\r\n            colors,\r\n            camera.clearDepth,\r\n            camera.clearStencil,\r\n        );\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n        // Postprocess\r\n        const builtinPostProcess = (sceneData as DeferredPipelineSceneData).postprocessMaterial;\r\n        const pass = builtinPostProcess.passes[0];\r\n        const shader = pass.getShaderVariant();\r\n\r\n        if (pipeline.bloomEnabled) {\r\n            pass.descriptorSet.bindTexture(0, renderData.bloom!.combineTex);\r\n        } else {\r\n            pass.descriptorSet.bindTexture(0, renderData.outputRenderTargets[0]);\r\n        }\r\n        pass.descriptorSet.bindSampler(0, renderData.sampler);\r\n        pass.descriptorSet.update();\r\n\r\n        const inputAssembler = camera.window.swapchain ? pipeline.quadIAOnscreen : pipeline.quadIAOffscreen;\r\n        let pso: PipelineState | null = null;\r\n        if (pass != null && shader != null && inputAssembler != null) {\r\n            pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);\r\n        }\r\n\r\n        const renderObjects = pipeline.pipelineSceneData.renderObjects;\r\n        if (pso != null && renderObjects.length > 0) {\r\n            if (!this._stageDesc) {\r\n                this._stageDesc = device.createDescriptorSet(new DescriptorSetInfo(pass.localSetLayout));\r\n                this._localUBO = device.createBuffer(new BufferInfo(\r\n                    BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                    MemoryUsageBit.DEVICE,\r\n                    UBOLocalEnum.SIZE,\r\n                    UBOLocalEnum.SIZE,\r\n                ));\r\n                this._stageDesc.bindBuffer(UBOLocalEnum.BINDING, this._localUBO);\r\n            }\r\n            this._stageDesc.update();\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, this._stageDesc);\r\n            cmdBuff.bindInputAssembler(inputAssembler);\r\n            cmdBuff.draw(inputAssembler);\r\n        }\r\n        this._uiPhase.render(camera, renderPass);\r\n        renderProfiler(device, renderPass, cmdBuff, pipeline.profiler, camera);\r\n\r\n        cmdBuff.endRenderPass();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @category pipeline\r\n */\r\n\r\nimport { ccclass, displayOrder, serializable, type } from 'cc.decorator';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { SetIndex } from '../define';\r\nimport { RenderFlow } from '../render-flow';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { BufferInfo, BufferUsageBit, ClearFlagBit, Color, MemoryUsageBit, PipelineState, Rect, Buffer } from '../../gfx';\r\nimport { PipelineStateManager } from '../pipeline-state-manager';\r\nimport { IRenderStageInfo, RenderStage } from '../render-stage';\r\nimport { CommonStagePriority } from '../enum';\r\nimport { MAX_BLOOM_FILTER_PASS_NUM, RenderPipeline } from '../render-pipeline';\r\nimport { BLOOM_COMBINEPASS_INDEX, BLOOM_DOWNSAMPLEPASS_INDEX, BLOOM_PREFILTERPASS_INDEX,\r\n    BLOOM_UPSAMPLEPASS_INDEX,\r\n    DeferredPipelineSceneData } from './deferred-pipeline-scene-data';\r\n\r\nconst colors: Color[] = [new Color(0, 0, 0, 1)];\r\n\r\n/**\r\n * @en The uniform buffer object for bloom\r\n * @zh Bloom UBO。\r\n */\r\nclass UBOBloom {\r\n    public static readonly TEXTURE_SIZE_OFFSET = 0;\r\n    public static readonly COUNT = UBOBloom.TEXTURE_SIZE_OFFSET + 4;\r\n    public static readonly SIZE = UBOBloom.COUNT * 4;\r\n}\r\n\r\n/**\r\n * @en The bloom post-process stage\r\n * @zh Bloom 后处理阶段。\r\n */\r\n@ccclass('BloomStage')\r\nexport class BloomStage extends RenderStage {\r\n    public static initInfo: IRenderStageInfo = {\r\n        name: 'BloomStage',\r\n        priority: CommonStagePriority.BLOOM,\r\n        tag: 0,\r\n    };\r\n    public threshold = 1.0;\r\n    public intensity = 0.8;\r\n    public iterations = 2;\r\n\r\n    @type(Material)\r\n    @serializable\r\n    @displayOrder(3)\r\n    private _bloomMaterial: Material | null = null;\r\n\r\n    private _renderArea = new Rect();\r\n    private _bloomUBO: Buffer[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: IRenderStageInfo): boolean {\r\n        super.initialize(info);\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline, flow: RenderFlow): void {\r\n        super.activate(pipeline, flow);\r\n\r\n        if (this._bloomMaterial) { (pipeline.pipelineSceneData as DeferredPipelineSceneData).bloomMaterial = this._bloomMaterial; }\r\n    }\r\n\r\n    public destroy (): void {\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        const pipeline = this._pipeline;\r\n        pipeline.generateBloomRenderData();\r\n        if (!camera.window?.swapchain && !pipeline.macros.CC_PIPELINE_TYPE) {\r\n            return;\r\n        }\r\n        if (!pipeline.bloomEnabled || pipeline.pipelineSceneData.renderObjects.length === 0) return;\r\n\r\n        if (this._bloomUBO.length === 0) {\r\n            const passNumber = MAX_BLOOM_FILTER_PASS_NUM * 2 + 2;\r\n            for (let i = 0; i < passNumber; ++i) {\r\n                this._bloomUBO[i] = pipeline.device.createBuffer(new BufferInfo(\r\n                    BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n                    MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n                    UBOBloom.SIZE,\r\n                    UBOBloom.SIZE,\r\n                ));\r\n            }\r\n        }\r\n\r\n        if (camera.clearFlag & ClearFlagBit.COLOR) {\r\n            colors[0].x = camera.clearColor.x;\r\n            colors[0].y = camera.clearColor.y;\r\n            colors[0].z = camera.clearColor.z;\r\n        }\r\n        colors[0].w = camera.clearColor.w;\r\n\r\n        this._prefilterPass(camera, pipeline);\r\n        this._downsamplePass(camera, pipeline);\r\n        this._upsamplePass(camera, pipeline);\r\n        this._combinePass(camera, pipeline);\r\n    }\r\n\r\n    private _prefilterPass (camera: Camera, pipeline: RenderPipeline): void {\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n        this._renderArea.width >>= 1;\r\n        this._renderArea.height >>= 1;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n\r\n        const sceneData = pipeline.pipelineSceneData as DeferredPipelineSceneData;\r\n        const builtinBloomProcess = sceneData.bloomMaterial;\r\n        const pass = builtinBloomProcess.passes[BLOOM_PREFILTERPASS_INDEX];\r\n        const renderData = pipeline.getPipelineRenderData();\r\n        const bloomData = renderData.bloom!;\r\n        const textureSize = new Float32Array(UBOBloom.COUNT);\r\n        textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 2] = this.threshold;\r\n        cmdBuff.updateBuffer(this._bloomUBO[0], textureSize);\r\n\r\n        cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.prefilterFramebuffer, this._renderArea, colors, 0, 0);\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n\r\n        pass.descriptorSet.bindBuffer(0, this._bloomUBO[0]);\r\n        pass.descriptorSet.bindTexture(1, renderData.outputRenderTargets[0]);\r\n        pass.descriptorSet.bindSampler(1, bloomData.sampler);\r\n        pass.descriptorSet.update();\r\n        cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n\r\n        const inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;\r\n        let pso: PipelineState | null = null;\r\n\r\n        const shader = pass.getShaderVariant();\r\n        if (pass != null && shader != null && inputAssembler != null) {\r\n            pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);\r\n        }\r\n\r\n        if (pso != null) {\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindInputAssembler(inputAssembler);\r\n            cmdBuff.draw(inputAssembler);\r\n        }\r\n\r\n        cmdBuff.endRenderPass();\r\n    }\r\n\r\n    private _downsamplePass (camera: Camera, pipeline: RenderPipeline): void {\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n        this._renderArea.width >>= 1;\r\n        this._renderArea.height >>= 1;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const sceneData = pipeline.pipelineSceneData as DeferredPipelineSceneData;\r\n        const builtinBloomProcess = sceneData.bloomMaterial;\r\n        const bloomData = pipeline.getPipelineRenderData().bloom!;\r\n        const textureSize = new Float32Array(UBOBloom.COUNT);\r\n\r\n        for (let i = 0; i < this.iterations; ++i) {\r\n            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 0] = this._renderArea.width;\r\n            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 1] = this._renderArea.height;\r\n            cmdBuff.updateBuffer(this._bloomUBO[i + 1], textureSize);\r\n\r\n            this._renderArea.width >>= 1;\r\n            this._renderArea.height >>= 1;\r\n            cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.downsampleFramebuffers[i]!, this._renderArea, colors, 0, 0);\r\n            const pass = builtinBloomProcess.passes[BLOOM_DOWNSAMPLEPASS_INDEX + i];\r\n            const shader = pass.getShaderVariant();\r\n            pass.descriptorSet.bindBuffer(0, this._bloomUBO[i + 1]);\r\n\r\n            if (i === 0) {\r\n                pass.descriptorSet.bindTexture(1, bloomData.prefiterTex);\r\n            } else {\r\n                pass.descriptorSet.bindTexture(1, bloomData.downsampleTexs[i - 1]);\r\n            }\r\n            pass.descriptorSet.bindSampler(1, bloomData.sampler);\r\n            pass.descriptorSet.update();\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n\r\n            const inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;\r\n            let pso: PipelineState | null = null;\r\n\r\n            if (pass != null && shader != null && inputAssembler != null) {\r\n                pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);\r\n            }\r\n\r\n            if (pso != null) {\r\n                cmdBuff.bindPipelineState(pso);\r\n                cmdBuff.bindInputAssembler(inputAssembler);\r\n                cmdBuff.draw(inputAssembler);\r\n            }\r\n\r\n            cmdBuff.endRenderPass();\r\n        }\r\n    }\r\n\r\n    private _upsamplePass (camera: Camera, pipeline: RenderPipeline): void {\r\n        const bloomData = pipeline.getPipelineRenderData().bloom!;\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n        this._renderArea.width >>= this.iterations + 1;\r\n        this._renderArea.height >>= this.iterations + 1;\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const sceneData = pipeline.pipelineSceneData  as DeferredPipelineSceneData;\r\n        const builtinBloomProcess = sceneData.bloomMaterial;\r\n        const textureSize = new Float32Array(UBOBloom.COUNT);\r\n\r\n        for (let i = 0; i < this.iterations; ++i) {\r\n            const index = i + MAX_BLOOM_FILTER_PASS_NUM + 1;\r\n            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 0] = this._renderArea.width;\r\n            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 1] = this._renderArea.height;\r\n            cmdBuff.updateBuffer(this._bloomUBO[index], textureSize);\r\n\r\n            this._renderArea.width <<= 1;\r\n            this._renderArea.height <<= 1;\r\n            cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.upsampleFramebuffers[this.iterations - 1 - i], this._renderArea, colors, 0, 0);\r\n            const pass = builtinBloomProcess.passes[BLOOM_UPSAMPLEPASS_INDEX + i];\r\n            const shader = pass.getShaderVariant();\r\n            pass.descriptorSet.bindBuffer(0, this._bloomUBO[index]);\r\n\r\n            if (i === 0) {\r\n                pass.descriptorSet.bindTexture(1, bloomData.downsampleTexs[this.iterations - 1]);\r\n            } else {\r\n                pass.descriptorSet.bindTexture(1, bloomData.upsampleTexs[this.iterations - i]);\r\n            }\r\n            pass.descriptorSet.bindSampler(1, bloomData.sampler);\r\n            pass.descriptorSet.update();\r\n            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n\r\n            const inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;\r\n            let pso: PipelineState | null = null;\r\n\r\n            if (pass != null && shader != null && inputAssembler != null) {\r\n                pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);\r\n            }\r\n\r\n            if (pso != null) {\r\n                cmdBuff.bindPipelineState(pso);\r\n                cmdBuff.bindInputAssembler(inputAssembler);\r\n                cmdBuff.draw(inputAssembler);\r\n            }\r\n\r\n            cmdBuff.endRenderPass();\r\n        }\r\n    }\r\n\r\n    private _combinePass (camera: Camera, pipeline: RenderPipeline): void {\r\n        pipeline.generateRenderArea(camera, this._renderArea);\r\n\r\n        const cmdBuff = pipeline.commandBuffers[0];\r\n        const sceneData = pipeline.pipelineSceneData as DeferredPipelineSceneData;\r\n        const builtinBloomProcess = sceneData.bloomMaterial;\r\n        const deferredData = pipeline.getPipelineRenderData();\r\n        const bloomData = deferredData.bloom!;\r\n        const uboIndex = MAX_BLOOM_FILTER_PASS_NUM * 2 + 1;\r\n        const textureSize = new Float32Array(UBOBloom.COUNT);\r\n        textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 3] = this.intensity;\r\n        cmdBuff.updateBuffer(this._bloomUBO[uboIndex], textureSize);\r\n\r\n        cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.combineFramebuffer, this._renderArea, colors, 0, 0);\r\n        cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);\r\n        const pass = builtinBloomProcess.passes[BLOOM_COMBINEPASS_INDEX];\r\n        pass.descriptorSet.bindBuffer(0, this._bloomUBO[uboIndex]);\r\n        pass.descriptorSet.bindTexture(1, deferredData.outputRenderTargets[0]!);\r\n        pass.descriptorSet.bindTexture(2, bloomData.upsampleTexs[0]);\r\n        pass.descriptorSet.bindSampler(1, bloomData.sampler);\r\n        pass.descriptorSet.bindSampler(2, bloomData.sampler);\r\n        pass.descriptorSet.update();\r\n        cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);\r\n\r\n        const inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;\r\n        let pso: PipelineState | null = null;\r\n\r\n        const shader = pass.getShaderVariant();\r\n        if (pass != null && shader != null && inputAssembler != null) {\r\n            pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);\r\n        }\r\n\r\n        if (pso != null) {\r\n            cmdBuff.bindPipelineState(pso);\r\n            cmdBuff.bindInputAssembler(inputAssembler);\r\n            cmdBuff.draw(inputAssembler);\r\n        }\r\n\r\n        cmdBuff.endRenderPass();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @category pipeline.deferred\r\n */\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { PIPELINE_FLOW_MAIN } from '../define';\r\nimport { IRenderFlowInfo, RenderFlow } from '../render-flow';\r\nimport { DeferredFlowPriority } from '../enum';\r\nimport { GbufferStage } from './gbuffer-stage';\r\nimport { LightingStage } from './lighting-stage';\r\nimport { PostProcessStage } from './postprocess-stage';\r\nimport { RenderPipeline } from '../render-pipeline';\r\nimport { BloomStage } from './bloom-stage';\r\n\r\n/**\r\n * @en The main flow in deferred render pipeline\r\n * @zh 延迟渲染流程。\r\n */\r\n@ccclass('MainFlow')\r\nexport class MainFlow extends RenderFlow {\r\n    /**\r\n     * @en The shared initialization information of main render flow\r\n     * @zh 共享的延迟渲染流程初始化参数\r\n     */\r\n    public static initInfo: IRenderFlowInfo = {\r\n        name: PIPELINE_FLOW_MAIN,\r\n        priority: DeferredFlowPriority.MAIN,\r\n        stages: [],\r\n    };\r\n\r\n    public initialize (info: IRenderFlowInfo): boolean {\r\n        super.initialize(info);\r\n        if (this._stages.length === 0) {\r\n            const gbufferStage = new GbufferStage();\r\n            gbufferStage.initialize(GbufferStage.initInfo);\r\n            this._stages.push(gbufferStage);\r\n            const lightingStage = new LightingStage();\r\n            lightingStage.initialize(LightingStage.initInfo);\r\n            this._stages.push(lightingStage);\r\n            const bloomStage = new BloomStage();\r\n            bloomStage.initialize(BloomStage.initInfo);\r\n            this._stages.push(bloomStage);\r\n            const postProcessStage = new PostProcessStage();\r\n            postProcessStage.initialize(PostProcessStage.initInfo);\r\n            this._stages.push(postProcessStage);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public activate (pipeline: RenderPipeline): void {\r\n        super.activate(pipeline);\r\n    }\r\n\r\n    public render (camera: Camera): void {\r\n        super.render(camera);\r\n    }\r\n\r\n    public destroy (): void {\r\n        super.destroy();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) Huawei Technologies Co., Ltd. 2020-2021.\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @category pipeline\r\n */\r\n\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { EDITOR } from 'internal:constants';\r\nimport { builtinResMgr } from '../../asset/asset-manager/builtin-res-mgr';\r\nimport { Texture2D } from '../../asset/assets/texture-2d';\r\nimport { PipelineInputAssemblerData } from '../render-types';\r\nimport { RenderPipeline, IRenderPipelineInfo, PipelineRenderData } from '../render-pipeline';\r\nimport { MainFlow } from './main-flow';\r\nimport { RenderTextureConfig } from '../pipeline-serialization';\r\nimport { ShadowFlow } from '../shadow/shadow-flow';\r\nimport { Format, StoreOp,\r\n    ColorAttachment, DepthStencilAttachment, RenderPass, LoadOp,\r\n    RenderPassInfo, Texture, AccessFlagBit, Framebuffer,\r\n    TextureInfo, TextureType, TextureUsageBit, FramebufferInfo, Swapchain, GeneralBarrierInfo } from '../../gfx';\r\nimport { UBOGlobal, UBOCamera, UBOShadow, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING } from '../define';\r\nimport { Camera } from '../../render-scene/scene';\r\nimport { errorID, log } from '../../core/platform/debug';\r\nimport { DeferredPipelineSceneData } from './deferred-pipeline-scene-data';\r\nimport { PipelineEventType } from '../pipeline-event';\r\n\r\nconst PIPELINE_TYPE = 1;\r\n\r\nexport class DeferredRenderData extends PipelineRenderData {\r\n    gbufferFrameBuffer: Framebuffer = null!;\r\n    gbufferRenderTargets: Texture[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\n/**\r\n * @en The deferred render pipeline\r\n * @zh 延迟渲染管线。\r\n */\r\n@ccclass('DeferredPipeline')\r\nexport class DeferredPipeline extends RenderPipeline {\r\n    private _gbufferRenderPass: RenderPass | null = null;\r\n    private _lightingRenderPass: RenderPass | null = null;\r\n\r\n    @type([RenderTextureConfig])\r\n    @serializable\r\n    @displayOrder(2)\r\n    protected renderTextures: RenderTextureConfig[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public initialize (info: IRenderPipelineInfo): boolean {\r\n        super.initialize(info);\r\n\r\n        if (this._flows.length === 0) {\r\n            const shadowFlow = new ShadowFlow();\r\n            shadowFlow.initialize(ShadowFlow.initInfo);\r\n            this._flows.push(shadowFlow);\r\n\r\n            const mainFlow = new MainFlow();\r\n            mainFlow.initialize(MainFlow.initInfo);\r\n            this._flows.push(mainFlow);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public activate (swapchain: Swapchain): boolean {\r\n        if (EDITOR) {\r\n            log('Deferred render pipeline initialized. '\r\n                + 'Note that non-transparent materials with no lighting will not be rendered, such as builtin-unlit.');\r\n        }\r\n\r\n        this._macros = { CC_PIPELINE_TYPE: PIPELINE_TYPE };\r\n        this._pipelineSceneData = new DeferredPipelineSceneData();\r\n\r\n        if (!super.activate(swapchain)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._activeRenderer(swapchain)) {\r\n            errorID(2402);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public destroy (): boolean {\r\n        this._destroyUBOs();\r\n        this._destroyQuadInputAssembler();\r\n        this._destroyDeferredData();\r\n\r\n        const rpIter = this._renderPasses.values();\r\n        let rpRes = rpIter.next();\r\n        while (!rpRes.done) {\r\n            rpRes.value.destroy();\r\n            rpRes = rpIter.next();\r\n        }\r\n\r\n        this._commandBuffers.length = 0;\r\n\r\n        return super.destroy();\r\n    }\r\n\r\n    public onGlobalPipelineStateChanged (): void {\r\n        (this.pipelineSceneData as DeferredPipelineSceneData).updatePipelineSceneData();\r\n    }\r\n\r\n    public getPipelineRenderData (): DeferredRenderData {\r\n        if (!this._pipelineRenderData) {\r\n            this._generateDeferredRenderData();\r\n        }\r\n\r\n        return this._pipelineRenderData as DeferredRenderData;\r\n    }\r\n\r\n    private _activeRenderer (swapchain: Swapchain): boolean {\r\n        const device = this.device;\r\n\r\n        this._commandBuffers.push(device.commandBuffer);\r\n\r\n        const sampler = this.globalDSManager.pointSampler;\r\n        this._descriptorSet.bindSampler(UNIFORM_SHADOWMAP_BINDING, sampler);\r\n        this._descriptorSet.bindTexture(UNIFORM_SHADOWMAP_BINDING, builtinResMgr.get<Texture2D>('default-texture').getGFXTexture()!);\r\n        this._descriptorSet.bindSampler(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, sampler);\r\n        this._descriptorSet.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, builtinResMgr.get<Texture2D>('default-texture').getGFXTexture()!);\r\n        this._descriptorSet.update();\r\n\r\n        let inputAssemblerDataOffscreen = new PipelineInputAssemblerData();\r\n        inputAssemblerDataOffscreen = this._createQuadInputAssembler();\r\n        if (!inputAssemblerDataOffscreen.quadIB || !inputAssemblerDataOffscreen.quadVB || !inputAssemblerDataOffscreen.quadIA) {\r\n            return false;\r\n        }\r\n        this._quadIB = inputAssemblerDataOffscreen.quadIB;\r\n        this._quadVBOffscreen = inputAssemblerDataOffscreen.quadVB;\r\n        this._quadIAOffscreen = inputAssemblerDataOffscreen.quadIA;\r\n\r\n        const inputAssemblerDataOnscreen = this._createQuadInputAssembler();\r\n        if (!inputAssemblerDataOnscreen.quadIB || !inputAssemblerDataOnscreen.quadVB || !inputAssemblerDataOnscreen.quadIA) {\r\n            return false;\r\n        }\r\n        this._quadVBOnscreen = inputAssemblerDataOnscreen.quadVB;\r\n        this._quadIAOnscreen = inputAssemblerDataOnscreen.quadIA;\r\n\r\n        if (!this._gbufferRenderPass) {\r\n            const colorAttachment0 = new ColorAttachment();\r\n            colorAttachment0.format = Format.RGBA16F;\r\n            colorAttachment0.loadOp = LoadOp.CLEAR; // should clear color attachment\r\n            colorAttachment0.storeOp = StoreOp.STORE;\r\n\r\n            const colorAttachment1 = new ColorAttachment();\r\n            colorAttachment1.format = Format.RGBA16F;\r\n            colorAttachment1.loadOp = LoadOp.CLEAR; // should clear color attachment\r\n            colorAttachment1.storeOp = StoreOp.STORE;\r\n\r\n            const colorAttachment2 = new ColorAttachment();\r\n            colorAttachment2.format = Format.RGBA16F;\r\n            colorAttachment2.loadOp = LoadOp.CLEAR; // should clear color attachment\r\n            colorAttachment2.storeOp = StoreOp.STORE;\r\n\r\n            const depthStencilAttachment = new DepthStencilAttachment();\r\n            depthStencilAttachment.format = Format.DEPTH_STENCIL;\r\n            depthStencilAttachment.depthLoadOp = LoadOp.CLEAR;\r\n            depthStencilAttachment.depthStoreOp = StoreOp.STORE;\r\n            depthStencilAttachment.stencilLoadOp = LoadOp.CLEAR;\r\n            depthStencilAttachment.stencilStoreOp = StoreOp.STORE;\r\n            const renderPassInfo = new RenderPassInfo(\r\n                [colorAttachment0, colorAttachment1, colorAttachment2],\r\n                depthStencilAttachment,\r\n            );\r\n            this._gbufferRenderPass = device.createRenderPass(renderPassInfo);\r\n        }\r\n\r\n        if (!this._lightingRenderPass) {\r\n            const colorAttachment = new ColorAttachment();\r\n            colorAttachment.format = Format.RGBA8;\r\n            colorAttachment.loadOp = LoadOp.CLEAR; // should clear color attachment\r\n            colorAttachment.storeOp = StoreOp.STORE;\r\n            colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n                AccessFlagBit.NONE,\r\n                AccessFlagBit.COLOR_ATTACHMENT_WRITE,\r\n            ));\r\n\r\n            const depthStencilAttachment = new DepthStencilAttachment();\r\n            depthStencilAttachment.format = Format.DEPTH_STENCIL;\r\n            depthStencilAttachment.depthLoadOp = LoadOp.LOAD;\r\n            depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;\r\n            depthStencilAttachment.stencilLoadOp = LoadOp.LOAD;\r\n            depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;\r\n            colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(\r\n                AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE,\r\n                AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE,\r\n            ));\r\n\r\n            const renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);\r\n            this._lightingRenderPass = device.createRenderPass(renderPassInfo);\r\n        }\r\n\r\n        this._width = swapchain.width;\r\n        this._height = swapchain.height;\r\n        this._generateDeferredRenderData();\r\n\r\n        return true;\r\n    }\r\n\r\n    private _destroyUBOs (): void {\r\n        if (this._descriptorSet) {\r\n            this._descriptorSet.getBuffer(UBOGlobal.BINDING).destroy();\r\n            this._descriptorSet.getBuffer(UBOShadow.BINDING).destroy();\r\n            this._descriptorSet.getBuffer(UBOCamera.BINDING).destroy();\r\n            this._descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();\r\n            this._descriptorSet.getTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING).destroy();\r\n        }\r\n    }\r\n\r\n    private _destroyDeferredData (): void {\r\n        const deferredData = this._pipelineRenderData as DeferredRenderData;\r\n        if (deferredData) {\r\n            if (deferredData.gbufferFrameBuffer) deferredData.gbufferFrameBuffer.destroy();\r\n            if (deferredData.outputFrameBuffer) deferredData.outputFrameBuffer.destroy();\r\n            if (deferredData.outputDepth) deferredData.outputDepth.destroy();\r\n\r\n            for (let i = 0; i < deferredData.gbufferRenderTargets.length; i++) {\r\n                deferredData.gbufferRenderTargets[i].destroy();\r\n            }\r\n            deferredData.gbufferRenderTargets.length = 0;\r\n\r\n            for (let i = 0; i < deferredData.outputRenderTargets.length; i++) {\r\n                deferredData.outputRenderTargets[i].destroy();\r\n            }\r\n            deferredData.outputRenderTargets.length = 0;\r\n\r\n            this._destroyBloomData();\r\n        }\r\n\r\n        this._pipelineRenderData = null;\r\n    }\r\n\r\n    protected _ensureEnoughSize (cameras: Camera[]): void {\r\n        let newWidth = this._width;\r\n        let newHeight = this._height;\r\n        for (let i = 0; i < cameras.length; ++i) {\r\n            const window = cameras[i].window;\r\n            newWidth = Math.max(window.width, newWidth);\r\n            newHeight = Math.max(window.height, newHeight);\r\n        }\r\n        if (newWidth !== this._width || newHeight !== this._height) {\r\n            this._width = newWidth;\r\n            this._height = newHeight;\r\n            this._destroyDeferredData();\r\n            this._generateDeferredRenderData();\r\n        }\r\n    }\r\n\r\n    private _generateDeferredRenderData (): void {\r\n        const device = this.device;\r\n\r\n        const data: DeferredRenderData = this._pipelineRenderData = new DeferredRenderData();\r\n        const sceneData = this.pipelineSceneData;\r\n        for (let i = 0; i < 3; ++i) {\r\n            data.gbufferRenderTargets.push(device.createTexture(new TextureInfo(\r\n                TextureType.TEX2D,\r\n                TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n                Format.RGBA16F, // normals need more precision\r\n                this._width * sceneData.shadingScale,\r\n                this._height * sceneData.shadingScale,\r\n            )));\r\n        }\r\n        data.outputDepth = device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.DEPTH_STENCIL_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n            Format.DEPTH_STENCIL,\r\n            this._width * sceneData.shadingScale,\r\n            this._height * sceneData.shadingScale,\r\n        ));\r\n\r\n        data.gbufferFrameBuffer = device.createFramebuffer(new FramebufferInfo(\r\n            this._gbufferRenderPass!,\r\n            data.gbufferRenderTargets,\r\n            data.outputDepth,\r\n        ));\r\n        data.outputRenderTargets.push(device.createTexture(new TextureInfo(\r\n            TextureType.TEX2D,\r\n            TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED,\r\n            Format.RGBA16F,\r\n            this._width * sceneData.shadingScale,\r\n            this._height * sceneData.shadingScale,\r\n        )));\r\n\r\n        data.outputFrameBuffer = device.createFramebuffer(new FramebufferInfo(\r\n            this._lightingRenderPass!,\r\n            data.outputRenderTargets,\r\n            null,\r\n        ));\r\n\r\n        data.sampler = this.globalDSManager.pointSampler;\r\n\r\n        // Listens when the attachment texture is scaled\r\n        this.on(PipelineEventType.ATTACHMENT_SCALE_CAHNGED, (val: number): void => {\r\n            data.sampler = val < 1 ? this.globalDSManager.pointSampler : this.globalDSManager.linearSampler;\r\n            data.gbufferFrameBuffer = this.newFramebufferByRatio(data.gbufferFrameBuffer);\r\n            data.gbufferFrameBuffer = this.newFramebufferByRatio(data.outputFrameBuffer);\r\n        });\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2021-2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { legacyCC } from '../cocos/core/global-exports';\r\nimport * as legacy_rendering from '../cocos/rendering/legacy';\r\n\r\nexport * from '../cocos/rendering/legacy';\r\n\r\nlegacyCC.legacy_rendering = legacy_rendering;\r\n"],"names":["_tempVec3","Vec3","_sphere","geometry","create","_rangedDirLightBoundingBox","AABB","_tmpBoundingBox","roPool","Pool","model","depth","getRenderObject","camera","node","subtract","worldBounds","center","worldPosition","position","dot","forward","ro","alloc","validPunctualLightsCulling","sceneData","validPunctualLights","length","spotLights","scene","disableLightmap","globals","i","light","baked","set","x","y","z","range","sphereFrustum","frustum","push","sphereLights","pointLights","rangedDirLights","transform","getWorldMatrix","aabbFrustum","shadowCulling","layer","mainLight","csmLayerObjects","csmLayers","layerObjects","dirLightFrustum","validFrustum","dirShadowObjects","shadowObjects","visibility","obj","array","enabled","visFlags","castShadow","level","csmLevel","csmOptimizationMode","CSMOptimizationMode","RemoveDuplicates","aabbFrustumCompletelyInside","fastRemove","sceneCulling","pipelineUBO","shadows","skybox","renderObjects","freeArray","castShadowObjects","clear","updateShadowUBORange","UBOShadowEnum","SHADOW_COLOR_OFFSET","shadowColor","type","ShadowType","ShadowMap","update","clearFlag","SkyBoxFlagValue","VALUE","cameraUsage","CameraUsage","EDITOR","SCENE_VIEW","warnID","name","models","enqueueRenderObject","isCulledByLod","_samplerLinearInfo","SamplerInfo","Filter","LINEAR","NONE","Address","CLAMP","_samplerPointInfo","POINT","GlobalDSManager","device","this","_descriptorSetMap","Map","_device","_linearSampler","getSampler","_pointSampler","layoutInfo","DescriptorSetLayoutInfo","globalDescriptorSetLayout","bindings","_descriptorSetLayout","createDescriptorSetLayout","_globalDescriptorSet","createDescriptorSet","DescriptorSetInfo","_proto","prototype","regenLayout","bindBuffer","binding","buffer","it","values","res","next","done","value","bindSampler","sampler","bindTexture","texture","getOrCreateDescriptorSet","has","globalDescriptorSet","descriptorSet","PipelineGlobalBindings","UBO_GLOBAL","COUNT","getBuffer","getTexture","shadowUBO","createBuffer","BufferInfo","BufferUsageBit","UNIFORM","TRANSFER_DST","MemoryUsageBit","HOST","DEVICE","SIZE","UBOShadow","BINDING","get","destroy","_createClass","key","val","_matShadowView","Mat4","_matShadowProj","_matShadowViewProj","_vec4ShadowInfo","Vec4","_lightDir","mat4ToArray","toArray","vec4ToArray","colorToArray","Color","PipelineUBO","_globalUBO","Float32Array","UBOGlobalEnum","_cameraUBO","UBOCameraEnum","_shadowUBO","_csmUBO","UBOCSMEnum","updateGlobalUBOView","window","bufferView","director","cclegacy","root","fv","shadingWidth","Math","floor","width","shadingHeight","height","TIME_OFFSET","cumulativeTime","frameTime","getTotalFrames","SCREEN_SIZE_OFFSET","NATIVE_SIZE_OFFSET","internal","reflectionProbeManager","PROBE_INFO_OFFSET","getMaxProbeId","debugView","DEBUG_VIEW_MODE_OFFSET","isEnabled","singleMode","DebugViewCompositeType","DIRECT_DIFFUSE","MAX_BIT_COUNT","offset","bit","isCompositeModeEnabled","pow","lightingWithAlbedo","csmLayerColoration","updateCameraUBOView","pipeline","_skybox$envmap","getScene","renderScene","pipelineSceneData","ambient","fog","shadowInfo","cv","exposure","isHDR","SCREEN_SCALE_OFFSET","shadingScale","EXPOSURE_OFFSET","Camera","standardExposureValue","shadowEnable","shadowEnabled","mainLightDir","direction","MAIN_LIT_DIR_OFFSET","color","MAIN_LIT_COLOR_OFFSET","useColorTemperature","colorTempRGB","colorTemperatureRGB","illuminance","ZERO","skyColor","w","skyIllum","AMBIENT_SKY_OFFSET","AMBIENT_GROUND_OFFSET","groundAlbedo","envmap","mipmapLevel","matView","MAT_VIEW_OFFSET","worldMatrix","MAT_VIEW_INV_OFFSET","CAMERA_POS_OFFSET","matProj","MAT_PROJ_OFFSET","matProjInv","MAT_PROJ_INV_OFFSET","matViewProj","MAT_VIEW_PROJ_OFFSET","matViewProjInv","MAT_VIEW_PROJ_INV_OFFSET","getCombineSignY","SURFACE_TRANSFORM_OFFSET","surfaceTransform","cos","toRadian","getRotationAngle","sin","colorArray","GLOBAL_FOG_COLOR_OFFSET","GLOBAL_FOG_BASE_OFFSET","fogStart","fogEnd","fogDensity","GLOBAL_FOG_ADD_OFFSET","fogTop","fogRange","fogAtten","NEAR_FAR_OFFSET","nearClip","farClip","getClipSpaceMinz","VIEW_PORT_OFFSET","viewport","getPCFRadius","shadowMapSize","size","shadowPcf","PCFType","HARD","SOFT","SOFT_2X","SOFT_4X","updatePlanarNormalAndDistance","normalize","normal","PLANAR_NORMAL_DISTANCE_INFO_OFFSET","distance","updateShadowUBOView","shadowBufferView","csmBufferView","sv","csmSupported","packing","supportsR32FloatTexture","shadowFixedArea","CSMLevel","LEVEL_1","matShadowView","specialLayer","matShadowProj","matShadowViewProj","near","far","levelCount","shadowNear","shadowFar","shadowCameraFar","MAT_LIGHT_VIEW_OFFSET","SHADOW_PROJ_DEPTH_INFO_OFFSET","m10","m14","m11","m15","SHADOW_PROJ_INFO_OFFSET","m00","m05","MAT_LIGHT_VIEW_PROJ_OFFSET","shadowSaturation","SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET","LightType","DIRECTIONAL","shadowNormalBias","SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET","layerThreshold","layers","m04","m08","CSM_VIEW_DIR_0_OFFSET","m01","m09","splitCameraNear","CSM_VIEW_DIR_1_OFFSET","m02","m06","splitCameraFar","CSM_VIEW_DIR_2_OFFSET","csmAtlas","CSM_ATLAS_OFFSET","MAT_CSM_VIEW_PROJ_OFFSET","CSM_PROJ_DEPTH_INFO_OFFSET","CSM_PROJ_INFO_OFFSET","csmTransitionRange","CSM_SPLITS_INFO_OFFSET","shadowDistance","shadowBias","SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET","planeBias","updateShadowUBOLightView","cap","capabilities","SPOT","spotLight","invert","perspective","angle","clipSpaceMinZ","clipSpaceSignY","multiply","_combineSignY","_initCombineSignY","screenSpaceSignY","activate","_pipeline","ds","isEnableEffect","globalUBO","UBOGlobal","cameraUBO","UBOCamera","csmUBO","UBOCSM","updateGlobalUBO","globalDSManager","cmdBuffer","commandBuffers","updateBuffer","updateCameraUBO","updateShadowUBO","shadowFrameBufferMap","UNIFORM_SHADOWMAP_BINDING","colorTextures","updateShadowUBOLight","globalDS","getDefaultShadowTexture","UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING","data","RenderStage","exports","ccclass","_dec","_class2","_name","_initializer","_priority","_initializer2","_enabled","_tag","_initializer3","_flow","initialize","info","priority","tag","flow","_applyDecoratedInitializer","serializable","_class","RenderFlow","_stages","_initializer4","stages","sort","a","b","len","render","_dec2","tmpRect","Rect","tmpViewport","Viewport","BloomRenderData","renderPass","prefiterTex","downsampleTexs","upsampleTexs","combineTex","prefilterFramebuffer","downsampleFramebuffers","upsampleFramebuffers","combineFramebuffer","hashFrameBuffer","fbo","_step","hash","_iterator","hashStr","usage","format","flags","layerCount","samples","externalRes","murmurhash2_32_gc","depthStencilTexture","RenderPipeline","CommonStagePriority","ForwardStagePriority","ForwardFlowPriority","DeferredStagePriority","DeferredFlowPriority","RenderFlowTag","_class4","_Asset","_this","call","_flows","_quadIB","_quadVBOnscreen","_quadVBOffscreen","_quadIAOnscreen","_quadIAOffscreen","_eventProcessor","PipelineEventProcessor","_globalDSManager","_descriptorSet","_commandBuffers","_pipelineUBO","_macros","_constantMacros","_profiler","_geometryRenderer","_pipelineRenderData","_renderPasses","_width","_height","_lastUsedRenderArea","_clusterEnabled","_bloomEnabled","_inheritsLoose","getPipelineRenderData","flows","createRenderPass","clearFlags","colorFmt","depthFmt","colorAttachment","ColorAttachment","depthStencilAttachment","DepthStencilAttachment","stencilStoreOp","StoreOp","DISCARD","depthStoreOp","ClearFlagBit","COLOR","loadOp","LoadOp","CLEAR","LOAD","barrier","getGeneralBarrier","GeneralBarrierInfo","AccessFlagBit","COLOR_ATTACHMENT_WRITE","DEPTH_STENCIL","DEPTH","depthLoadOp","STENCIL","stencilLoadOp","DEPTH_STENCIL_ATTACHMENT_WRITE","renderPassInfo","RenderPassInfo","getRenderPass","fbHash","newFramebufferByRatio","dyingFramebuffer","colorTexArr","resize","newFramebuffer","createFramebuffer","FramebufferInfo","generateRenderArea","out","vp","h","generateViewport","left","top","generateScissor","getMacroString","str","undefined","getMacroInt","getMacroBool","setMacroString","setMacroInt","setMacroBool","deviceManager","gfxDevice","_generateConstantMacros","CC_USE_HDR","_pipelineSceneData","CC_USE_DEBUG_VIEW","_ensureEnoughSize","cameras","updateGeometryRenderer","begin","emit","PipelineEventType","RENDER_FRAME_BEGIN","decideProfilerCamera","RENDER_CAMERA_BEGIN","j","RENDER_CAMERA_END","RENDER_FRAME_END","end","queue","submit","_destroyQuadInputAssembler","_destroyBloomData","_bloom$renderPass","bloom","_genQuadVertexData","renderArea","vbData","minX","maxX","minY","maxY","temp","n","SurfaceTransform","IDENTITY","ROTATE_90","ROTATE_180","ROTATE_270","_createQuadInputAssembler","inputAssemblerData","PipelineInputAssemblerData","vbStride","BYTES_PER_ELEMENT","vbSize","quadVB","VERTEX","ibStride","Uint8Array","ibSize","quadIB","INDEX","indices","attributes","Array","Attribute","Format","RG32F","quadIA","createInputAssembler","InputAssemblerInfo","updateQuadVertexData","cachedArea","offData","onData","swapchain","copy","_this$_globalDSManage","_this$_pipelineSceneD","onGlobalPipelineStateChanged","getFormatFeatures","RGBA32F","FormatFeatureBit","RENDER_TARGET","SAMPLED_TEXTURE","maxVertexUniformVectors","maxFragmentUniformVectors","hasFeature","Feature","INPUT_ATTACHMENT_BENEFIT","systemInfo","os","OS","ANDROID","isBrowser","macro","ENABLE_WEBGL_HIGHP_STRUCT_VALUES","UBOSkinning","JOINT_UNIFORM_CAPACITY","initGeometryRenderer","geometryRenderer","generateBloomRenderData","RGBA8","storeOp","STORE","curWidth","curHeight","createTexture","TextureInfo","TextureType","TEX2D","TextureUsageBit","COLOR_ATTACHMENT","SAMPLED","linearSampler","on","callback","target","once","off","arg0","arg1","arg2","arg3","arg4","targetOff","typeOrTarget","removeAll","hasEventListener","descriptorSetLayout","ATTACHMENT_SCALE_CAHNGED","Asset","_class3","markAsWarning","suggest","ccenum","_initializer5","_initializer6","_dec3","_dec4","UNKNOWN","RenderTextureConfig","RenderTexture","_dec5","_class5","_initializer7","_initializer8","_dec6","Material","_dec7","_class8","_initializer9","material","_initializer10","_dec8","CCString","_dec9","_class11","_initializer11","_initializer12","_initializer13","_initializer14","_initializer15","_dec10","_dec11","RenderQueueSortMode","ColorDesc","_dec12","_dec14","_dec15","_dec17","_class14","_initializer16","_initializer17","_initializer18","sampleCount","_initializer19","beginAccesses","_initializer20","endAccesses","_initializer21","_dec13","_dec16","_class13","DepthStencilDesc","_dec21","_dec22","_dec18","_class17","_initializer22","_initializer23","_initializer24","_initializer25","_initializer26","_initializer27","_initializer28","_initializer29","_dec19","_dec20","_dec23","_dec24","_dec25","_class16","_dec26","_class20","index","_initializer30","colorAttachments","_initializer31","_initializer32","_dec27","_dec28","RenderQueueDesc","_dec29","_class23","isTransparent","_initializer33","sortMode","_initializer34","_initializer35","_dec30","FRONT_TO_BACK","_dec31","_class22","opaqueCompareFn","shaderId","transparentCompareFn","RenderQueue","desc","_passDesc","_passPool","getPassPool","CachedArray","sortFunc","reset","insertRenderPass","renderObj","subModelIdx","passIdx","subModel","subModels","pass","passes","shader","shaders","blendState","targets","blend","phase","phases","rp","add","typedID","recordCommandBuffer","cmdBuff","_this$queue$array$i2","inputAssembler","pso","PipelineStateManager","getOrCreatePipelineState","bindPipelineState","bindDescriptorSet","SetIndex","MATERIAL","LOCAL","bindInputAssembler","draw","convertRenderQueue","getPhaseID","BACK_TO_FRONT","renderQueueClearFunc","rq","renderQueueSortFunc","RenderInstancedQueue","Set","_renderQueue","sortedArray","from","instancingCompareFn","forEach","item","_item$pass$blendState","_item$pass$blendState2","uploadBuffers","hasPendingModels","dynamicOffsets","Symbol","iterator","instances","lastPSO","instance","count","ia","GLOBAL","_lightPassPool","lights","_v3","_vec4Array","_dynamicOffsets","_lightIndices","cullSphereLight","aabbWithAABB","aabb","cullSpotLight","cullPointLight","cullRangedDirLight","phaseName","_phaseID","_lightPassIndices","getLightPassIndices","lightPassIndices","passLayout","r","rendering","getPassID","hasValidLightPass","lightPassIndex","k","enableEffectImport","phaseID","RenderAdditiveLightQueue","_lightPasses","_instancedLightPassPool","_lightBufferCount","_instancedQueues","_lightMeterScale","alignment","uboOffsetAlignment","_lightBufferStride","ceil","UBOForwardLightEnum","_lightBufferElementCount","_lightBuffer","_firstLightBufferView","BufferViewInfo","_lightBufferData","instancedQueue","lp","descriptorSetMap","keys","_bindForwardAddLight","_lightCulling","lightPassIdx","UBOForwardLight","_addRenderQueue","gatherLightPasses","_updateUBOs","_updateLightDescriptorSet","l","_this$_lightPasses$i2","matDS","localDS","isCulled","SPHERE","RANGED_DIRECTIONAL","batchingScheme","BatchingSchemes","lightIdx","INSTANCING","getInstancedBuffer","merge","matShadowInvProj","clone","SHADOW_INV_PROJ_DEPTH_INFO_OFFSET","_shadowFrameBufferMap","nextPow2","LIGHT_POS_OFFSET","LIGHT_SIZE_RANGE_ANGLE_OFFSET","finalColor","luminance","LIGHT_COLOR_OFFSET","spotAngle","LIGHT_DIR_OFFSET","angleAttenuationStrength","LIGHT_BOUNDING_SIZE_VS_OFFSET","right","scale","_ab","getPlanarShadowPassIndex","PlanarShadowQueue","_subModelArray","_shaderArray","_passArray","_castModels","_instancedQueue","gatherShadowPasses","Planar","shadowVisible","Layers","BitMask","DEFAULT","matLight","shadowPassIdx","planarShader","getPlanarShader","patches","UIPhase","batches","batch","visible","passID","colors","ForwardStage","_RenderStage","renderQueues","_renderQueues","_renderArea","_clearFlag","_uiPhase","additiveInstanceQueues","addRenderInstancedQueue","includes","removeRenderInstancedQueue","indexOf","splice","_additiveLightQueue","_planarQueue","_camera$geometryRende","m","p","instancedBuffer","clearColor","framebuffer","beginRenderPass","clearDepth","clearStencil","renderProfiler","profiler","endRenderPass","initInfo","FORWARD","ForwardFlow","_RenderFlow","apply","arguments","forwardStage","PIPELINE_FLOW_FORWARD","getShadowPassIndex","RenderShadowMapBatchedQueue","_subModelsArray","dirLight","ShadowStage","_additiveShadowQueue","_shadowFrameBuffer","_light","_globalDS","_level","_isShadowMapCleared","setUsage","shadowFrameBuffer","_this$_additiveShadow","clearFramebuffer","_validLights","ShadowFlow","_shadowRenderPass","shadowMapStage","isRGBE","macros","CC_SHADOWMAP_FORMAT","isLinear","gfxAPI","API","WEBGL","CC_SHADOWMAP_USE_LINEAR_DEPTH","CC_SUPPORT_CASCADED_SHADOW_MAP","CC_SHADOW_TYPE","CC_DIR_SHADOW_PCF_TYPE","CC_DIR_LIGHT_SHADOW_TYPE","CC_CASCADED_LAYERS_TRANSITION","maxReceived","shadowMapDirty","resizeShadowMap","_initShadowFrameBuffer","_renderStage","clearShadowMap","shadowFrameBuffers","frameBuffer","renderTargets","renderTarget","R32F","shadowRenderTargets","DEPTH_STENCIL_ATTACHMENT","shadowStage","validLights","_createForOfIteratorHelperLoose","shadowRenderPass","newFrameBuffer","PIPELINE_FLOW_SHADOW","SHADOW","SCENE","CC_USE_RGBE_OUTPUT","_phaseReflectMapID","getPassIndex","getReflectMapPassIndex","RenderReflectionProbeQueue","_rgbeSubModelsArray","_patches","gatherRenderObjects","probe","bakeToReflectionProbe","probeType","ProbeType","CUBE","boundingBox","bUseReflectPass","concat","useRGBEPatchs","onMacroPatchesStateChanged","resetRGBEMacro","ReflectionProbeStage","_frameBuffer","_probe","_probeRenderQueue","_rgbeColor","setUsageInfo","_this$_probeRenderQue","resolution","rgbe","packRGBE","ReflectionProbeFlow","probeStage","probes","getProbes","needRender","PLANAR","updatePlanarMap","realtimePlanarTexture","getGFXTexture","faceIdx","renderTexture","bakedCubeTextures","updateCameraDir","createDefaultPipeline","rppl","ForwardPipeline","DeferredAntiAliasing","_RenderPipeline","renderTextures","_postRenderPass","shadowFlow","reflectionFlow","forwardFlow","CC_PIPELINE_TYPE","PipelineSceneData","_activeRenderer","errorID","newWidth","newHeight","max","_destroyUBOs","rpIter","rpRes","commandBuffer","shadowMapSampler","pointSampler","GbufferStage","SRGBToLinear","gbufferFrameBuffer","setScissor","setViewport","GBUFFER","LightingStage","_deferredLitsBufs","_maxDeferredLights","UBODeferredLight","LIGHTS_PER_PASS","_deferredMaterial","gatherLights","Sphere","idx","elementLen","fieldLen","intersect","_createStageDescriptor","totalSize","deferredLitsBufView","localSetLayout","_localUBO","UBOLocalEnum","deferredLightingMaterial","_this$_deferredLitsBu","deferredData","getShaderVariant","gbufferRenderTargets","outputDepth","outputFrameBuffer","quadIAOffscreen","LIGHTING","PostProcessStage","_postProcessMaterial","_stageDesc","postprocessMaterial","renderData","bloomEnabled","outputRenderTargets","quadIAOnscreen","POST_PROCESS","DeferredPipelineSceneData","_PipelineSceneData","_antiAliasing","updatePipelineSceneData","updatePipelinePassInfo","updateBloomPass","_bloomMaterial","prefilterPass","beginChangeStatesSilently","tryCompile","endChangeStatesSilently","downsamplePass","upsamplePass","BLOOM_DOWNSAMPLEPASS_INDEX","combinePass","BLOOM_UPSAMPLEPASS_INDEX","updatePostProcessPass","passPost","initPipelinePassInfo","deferredMat","_uuid","effectName","_deferredLightingMaterial","bloomMat","postMat","defines","ANTIALIAS_TYPE","_postprocessMaterial","updateDeferredPassInfo","updateDeferredLightPass","legacyCC","CC_RECEIVE_SHADOW","passLit","Object","assign","renderMat","effectAsset","mat","UBOBloom","TEXTURE_SIZE_OFFSET","BloomStage","threshold","intensity","iterations","_bloomUBO","bloomMaterial","_camera$window","MAX_BLOOM_FILTER_PASS_NUM","_prefilterPass","_downsamplePass","_upsamplePass","_combinePass","bloomData","textureSize","builtinBloomProcess","BLOOM","MainFlow","gbufferStage","lightingStage","bloomStage","postProcessStage","PIPELINE_FLOW_MAIN","MAIN","DeferredRenderData","_PipelineRenderData","DeferredPipeline","_this2","_gbufferRenderPass","_lightingRenderPass","mainFlow","_destroyDeferredData","_generateDeferredRenderData","builtinResMgr","inputAssemblerDataOffscreen","inputAssemblerDataOnscreen","colorAttachment0","RGBA16F","colorAttachment1","colorAttachment2","_this3","legacy_rendering"],"mappings":"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"}