{"version":3,"file":"light-probe.js","sources":["../../../cocos/gi/light-probe/auto-placement.ts","../../../cocos/gi/light-probe/delaunay.ts","../../../cocos/gi/light-probe/sh.ts","../../../cocos/gi/light-probe/polynomial-solver.ts","../../../cocos/gi/light-probe/light-probe.ts","../../../cocos/gi/light-probe/light-probe-group.ts"],"sourcesContent":["/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, Enum } from '../../core';\r\n\r\nexport const PlaceMethod = Enum({\r\n    UNIFORM: 0,\r\n    ADAPTIVE: 1,\r\n});\r\n\r\nexport interface PlacementInfo {\r\n    method: number;\r\n    nProbesX: number;\r\n    nProbesY: number;\r\n    nProbesZ: number;\r\n    minPos: Vec3;\r\n    maxPos: Vec3;\r\n}\r\n\r\nexport class AutoPlacement {\r\n    public static generate (info: PlacementInfo): Vec3[] {\r\n        switch (info.method) {\r\n        case PlaceMethod.UNIFORM:\r\n            return this.doGenerateUniform(info);\r\n        case PlaceMethod.ADAPTIVE:\r\n            return this.doGenerateAdaptive(info);\r\n        default:\r\n            return [];\r\n        }\r\n    }\r\n\r\n    private static doGenerateUniform (info: PlacementInfo): Vec3[] {\r\n        if (info.nProbesX < 2 || info.nProbesY < 2 || info.nProbesZ < 2) {\r\n            return [];\r\n        }\r\n\r\n        const probes: Vec3[] = [];\r\n        const position = new Vec3(0.0, 0.0, 0.0);\r\n        const gridSize = new Vec3(\r\n            (info.maxPos.x - info.minPos.x) / (info.nProbesX - 1),\r\n            (info.maxPos.y - info.minPos.y) / (info.nProbesY - 1),\r\n            (info.maxPos.z - info.minPos.z) / (info.nProbesZ - 1),\r\n        );\r\n\r\n        for (let x = 0; x < info.nProbesX; x++) {\r\n            position.x = x * gridSize.x + info.minPos.x;\r\n\r\n            for (let y = 0; y < info.nProbesY; y++) {\r\n                position.y = y * gridSize.y + info.minPos.y;\r\n\r\n                for (let z = 0; z < info.nProbesZ; z++) {\r\n                    position.z = z * gridSize.z + info.minPos.z;\r\n                    probes.push(new Vec3(position));\r\n                }\r\n            }\r\n        }\r\n\r\n        return probes;\r\n    }\r\n\r\n    private static doGenerateAdaptive (info: PlacementInfo): Vec3[] {\r\n        // TODO\r\n        return this.doGenerateUniform(info);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { Mat3, EPSILON, Vec3, _decorator } from '../../core';\r\n\r\nconst { ccclass, serializable } = _decorator;\r\n\r\nconst _mat = new Mat3();\r\nconst _n = new Vec3(0.0, 0.0, 0.0);\r\n\r\nconst _a = new Vec3(0.0, 0.0, 0.0);\r\nconst _ap = new Vec3(0.0, 0.0, 0.0);\r\nconst _b = new Vec3(0.0, 0.0, 0.0);\r\nconst _bp = new Vec3(0.0, 0.0, 0.0);\r\nconst _p2 = new Vec3(0.0, 0.0, 0.0);\r\nconst _cp = new Vec3(0.0, 0.0, 0.0);\r\n\r\n@ccclass('cc.Vertex')\r\nexport class Vertex {\r\n    @serializable\r\n    public position = new Vec3(0, 0, 0);\r\n    @serializable\r\n    public normal = new Vec3(0, 0, 0);\r\n    @serializable\r\n    public coefficients: Vec3[] = [];\r\n\r\n    public constructor (pos: Vec3) {\r\n        this.position.set(pos);\r\n    }\r\n}\r\n\r\nclass Edge {\r\n    @serializable\r\n    public tetrahedron = -1;    // tetrahedron index this edge belongs to\r\n    @serializable\r\n    public index = -1;          // index in triangle's three edges of an outer cell\r\n    @serializable\r\n    public vertex0 = -1;\r\n    @serializable\r\n    public vertex1 = -1;\r\n\r\n    public constructor (tet: number, i: number, v0: number, v1: number) {\r\n        this.tetrahedron = tet;\r\n        this.index = i;\r\n\r\n        if (v0 < v1) {\r\n            this.vertex0 = v0;\r\n            this.vertex1 = v1;\r\n        } else {\r\n            this.vertex0 = v1;\r\n            this.vertex1 = v0;\r\n        }\r\n    }\r\n\r\n    public set (tet: number, i: number, v0: number, v1: number): void {\r\n        this.tetrahedron = tet;\r\n        this.index = i;\r\n\r\n        if (v0 < v1) {\r\n            this.vertex0 = v0;\r\n            this.vertex1 = v1;\r\n        } else {\r\n            this.vertex0 = v1;\r\n            this.vertex1 = v0;\r\n        }\r\n    }\r\n\r\n    public isSame (other: Edge): boolean {\r\n        return (this.vertex0 === other.vertex0 && this.vertex1 === other.vertex1);\r\n    }\r\n}\r\n\r\nclass Triangle {\r\n    @serializable\r\n    public invalid = false;\r\n    @serializable\r\n    public isOuterFace = true;\r\n    @serializable\r\n    public tetrahedron = -1;    // tetrahedron index this triangle belongs to\r\n    @serializable\r\n    public index = -1;          // index in tetrahedron's four triangles\r\n    @serializable\r\n    public vertex0 = -1;\r\n    @serializable\r\n    public vertex1 = -1;\r\n    @serializable\r\n    public vertex2 = -1;\r\n    @serializable\r\n    public vertex3 = -1;        // tetrahedron's last vertex index used to compute normal direction\r\n\r\n    public constructor (tet: number, i: number, v0: number, v1: number, v2: number, v3: number) {\r\n        this.tetrahedron = tet;\r\n        this.index = i;\r\n        this.vertex3 = v3;\r\n\r\n        if (v0 < v1 && v0 < v2) {\r\n            this.vertex0 = v0;\r\n            if (v1 < v2) {\r\n                this.vertex1 = v1;\r\n                this.vertex2 = v2;\r\n            } else {\r\n                this.vertex1 = v2;\r\n                this.vertex2 = v1;\r\n            }\r\n        } else if (v1 < v0 && v1 < v2) {\r\n            this.vertex0 = v1;\r\n            if (v0 < v2) {\r\n                this.vertex1 = v0;\r\n                this.vertex2 = v2;\r\n            } else {\r\n                this.vertex1 = v2;\r\n                this.vertex2 = v0;\r\n            }\r\n        } else {\r\n            this.vertex0 = v2;\r\n            if (v0 < v1) {\r\n                this.vertex1 = v0;\r\n                this.vertex2 = v1;\r\n            } else {\r\n                this.vertex1 = v1;\r\n                this.vertex2 = v0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public set (tet: number, i: number, v0: number, v1: number, v2: number, v3: number): void {\r\n        this.invalid = false;\r\n        this.isOuterFace = true;\r\n\r\n        this.tetrahedron = tet;\r\n        this.index = i;\r\n        this.vertex3 = v3;\r\n\r\n        if (v0 < v1 && v0 < v2) {\r\n            this.vertex0 = v0;\r\n            if (v1 < v2) {\r\n                this.vertex1 = v1;\r\n                this.vertex2 = v2;\r\n            } else {\r\n                this.vertex1 = v2;\r\n                this.vertex2 = v1;\r\n            }\r\n        } else if (v1 < v0 && v1 < v2) {\r\n            this.vertex0 = v1;\r\n            if (v0 < v2) {\r\n                this.vertex1 = v0;\r\n                this.vertex2 = v2;\r\n            } else {\r\n                this.vertex1 = v2;\r\n                this.vertex2 = v0;\r\n            }\r\n        } else {\r\n            this.vertex0 = v2;\r\n            if (v0 < v1) {\r\n                this.vertex1 = v0;\r\n                this.vertex2 = v1;\r\n            } else {\r\n                this.vertex1 = v1;\r\n                this.vertex2 = v0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isSame (other: Triangle): boolean {\r\n        return (this.vertex0 === other.vertex0 && this.vertex1 === other.vertex1 && this.vertex2 === other.vertex2);\r\n    }\r\n}\r\n\r\n@ccclass('cc.CircumSphere')\r\nexport class CircumSphere {\r\n    @serializable\r\n    public center = new Vec3(0, 0, 0);\r\n    @serializable\r\n    public radiusSquared = 0.0;\r\n\r\n    public init (p0: Vec3, p1: Vec3, p2: Vec3, p3: Vec3): void {\r\n        // calculate circumsphere of 4 points in R^3 space.\r\n        _mat.set(\r\n            p1.x - p0.x, p1.y - p0.y, p1.z - p0.z,\r\n            p2.x - p0.x, p2.y - p0.y, p2.z - p0.z,\r\n            p3.x - p0.x, p3.y - p0.y, p3.z - p0.z,\r\n        );\r\n        _mat.invert();\r\n        _mat.transpose();\r\n\r\n        _n.set(\r\n            ((p1.x + p0.x) * (p1.x - p0.x) + (p1.y + p0.y) * (p1.y - p0.y) + (p1.z + p0.z) * (p1.z - p0.z)) * 0.5,\r\n            ((p2.x + p0.x) * (p2.x - p0.x) + (p2.y + p0.y) * (p2.y - p0.y) + (p2.z + p0.z) * (p2.z - p0.z)) * 0.5,\r\n            ((p3.x + p0.x) * (p3.x - p0.x) + (p3.y + p0.y) * (p3.y - p0.y) + (p3.z + p0.z) * (p3.z - p0.z)) * 0.5,\r\n        );\r\n\r\n        Vec3.transformMat3(this.center, _n, _mat);\r\n        this.radiusSquared = Vec3.squaredDistance(p0, this.center);\r\n    }\r\n}\r\n\r\n/**\r\n * inner tetrahedron or outer cell structure\r\n */\r\n\r\n@ccclass('cc.Tetrahedron')\r\nexport class Tetrahedron {\r\n    @serializable\r\n    public invalid = false;\r\n    @serializable\r\n    public vertex0 = -1;\r\n    @serializable\r\n    public vertex1 = -1;\r\n    @serializable\r\n    public vertex2 = -1;\r\n    @serializable\r\n    public vertex3 = -1;     // -1 means outer cell, otherwise inner tetrahedron\r\n    @serializable\r\n    public neighbours: number[] = [-1, -1, -1, -1];\r\n\r\n    @serializable\r\n    public matrix = new Mat3();\r\n    @serializable\r\n    public offset = new Vec3(0.0, 0.0, 0.0); // only valid in outer cell\r\n    @serializable\r\n    public sphere = new CircumSphere(); // only valid in inner tetrahedron\r\n\r\n    // inner tetrahedron or outer cell constructor\r\n    public constructor (delaunay: Delaunay, v0: number, v1: number, v2: number, v3 = -1) {\r\n        this.vertex0 = v0;\r\n        this.vertex1 = v1;\r\n        this.vertex2 = v2;\r\n        this.vertex3 = v3;\r\n\r\n        // inner tetrahedron\r\n        if (v3 >= 0) {\r\n            const probes = delaunay._probes;\r\n            const p0 = probes[this.vertex0].position;\r\n            const p1 = probes[this.vertex1].position;\r\n            const p2 = probes[this.vertex2].position;\r\n            const p3 = probes[this.vertex3].position;\r\n            this.sphere.init(p0, p1, p2, p3);\r\n        }\r\n    }\r\n\r\n    public isInCircumSphere (point: Vec3): boolean {\r\n        return Vec3.squaredDistance(point, this.sphere.center) < this.sphere.radiusSquared - EPSILON;\r\n    }\r\n\r\n    public contain (vertexIndex: number): boolean {\r\n        return (this.vertex0 === vertexIndex || this.vertex1 === vertexIndex\r\n            || this.vertex2 === vertexIndex || this.vertex3 === vertexIndex);\r\n    }\r\n\r\n    public isInnerTetrahedron (): boolean {\r\n        return this.vertex3 >= 0;\r\n    }\r\n\r\n    public isOuterCell (): boolean {\r\n        return this.vertex3 < 0;    // -1 or -2\r\n    }\r\n}\r\n\r\nexport class Delaunay {\r\n    public _probes: Vertex[] = [];\r\n    private _tetrahedrons: Tetrahedron[] = [];\r\n\r\n    private _triangles: Triangle[] = [];\r\n    private _edges: Edge[] = [];\r\n\r\n    public constructor (probes: Vertex[]) {\r\n        this._probes = probes;\r\n    }\r\n\r\n    public build (): Tetrahedron[] {\r\n        this.reset();\r\n        this.tetrahedralize();\r\n        this.computeAdjacency();\r\n        this.computeMatrices();\r\n\r\n        return this._tetrahedrons;\r\n    }\r\n\r\n    private reset (): void {\r\n        this._tetrahedrons.length = 0;\r\n        this._triangles.length = 0;\r\n        this._edges.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Bowyer-Watson algorithm\r\n     */\r\n    private tetrahedralize (): void {\r\n        // get probe count first\r\n        const probeCount = this._probes.length;\r\n\r\n        // init a super tetrahedron containing all probes\r\n        const center = this.initTetrahedron();\r\n\r\n        for (let i = 0; i < probeCount; i++) {\r\n            this.addProbe(i);\r\n        }\r\n\r\n        // remove all tetrahedrons which contain the super tetrahedron's vertices\r\n        this._tetrahedrons = this._tetrahedrons.filter((tetrahedron): boolean => {\r\n            const vertexIndex = probeCount;\r\n            const isSuperTetrahedron = (\r\n                tetrahedron.contain(vertexIndex)\r\n                || tetrahedron.contain(vertexIndex + 1)\r\n                || tetrahedron.contain(vertexIndex + 2)\r\n                || tetrahedron.contain(vertexIndex + 3));\r\n\r\n            return !isSuperTetrahedron;\r\n        });\r\n\r\n        // remove all additional points in the super tetrahedron\r\n        this._probes.length = probeCount;\r\n\r\n        this.reorder(center);\r\n    }\r\n\r\n    private initTetrahedron (): Vec3 {\r\n        const minPos = new Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        const maxPos = new Vec3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\r\n\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            const position = this._probes[i].position;\r\n            minPos.x = Math.min(minPos.x, position.x);\r\n            maxPos.x = Math.max(maxPos.x, position.x);\r\n\r\n            minPos.y = Math.min(minPos.y, position.y);\r\n            maxPos.y = Math.max(maxPos.y, position.y);\r\n\r\n            minPos.z = Math.min(minPos.z, position.z);\r\n            maxPos.z = Math.max(maxPos.z, position.z);\r\n        }\r\n\r\n        const center = new Vec3(0.0, 0.0, 0.0);\r\n        Vec3.add(center, minPos, maxPos);\r\n        Vec3.multiplyScalar(center, center, 0.5);\r\n\r\n        const extent = new Vec3(0.0, 0.0, 0.0);\r\n        Vec3.subtract(extent, maxPos, minPos);\r\n        const offset = Math.max(extent.x, extent.y, extent.z) * 10.0;\r\n\r\n        const p0 = new Vec3(center.x, center.y + offset, center.z);\r\n        const p1 = new Vec3(center.x - offset, center.y - offset, center.z - offset);\r\n        const p2 = new Vec3(center.x - offset, center.y - offset, center.z + offset);\r\n        const p3 = new Vec3(center.x + offset, center.y - offset, center.z);\r\n\r\n        const index = this._probes.length;\r\n        this._probes.push(new Vertex(p0));\r\n        this._probes.push(new Vertex(p1));\r\n        this._probes.push(new Vertex(p2));\r\n        this._probes.push(new Vertex(p3));\r\n\r\n        this._tetrahedrons.push(new Tetrahedron(this, index, index + 1, index + 2, index + 3));\r\n\r\n        return center;\r\n    }\r\n\r\n    private addTriangle (index: number, tet: number, i: number, v0: number, v1: number, v2: number, v3: number): void {\r\n        if (index < this._triangles.length) {\r\n            this._triangles[index].set(tet, i, v0, v1, v2, v3);\r\n        } else {\r\n            this._triangles.push(new Triangle(tet, i, v0, v1, v2, v3));\r\n        }\r\n    }\r\n\r\n    private addEdge (index: number, tet: number, i: number, v0: number, v1: number): void {\r\n        if (index < this._edges.length) {\r\n            this._edges[index].set(tet, i, v0, v1);\r\n        } else {\r\n            this._edges.push(new Edge(tet, i, v0, v1));\r\n        }\r\n    }\r\n\r\n    private addProbe (vertexIndex: number): void {\r\n        const probe = this._probes[vertexIndex];\r\n        const position = probe.position;\r\n\r\n        let triangleIndex = 0;\r\n        for (let i = 0; i < this._tetrahedrons.length; i++) {\r\n            const tetrahedron = this._tetrahedrons[i];\r\n            if (tetrahedron.isInCircumSphere(position)) {\r\n                tetrahedron.invalid = true;\r\n\r\n                this.addTriangle(triangleIndex, i, 0, tetrahedron.vertex1, tetrahedron.vertex3, tetrahedron.vertex2, tetrahedron.vertex0);\r\n                this.addTriangle(triangleIndex + 1, i, 1, tetrahedron.vertex0, tetrahedron.vertex2, tetrahedron.vertex3, tetrahedron.vertex1);\r\n                this.addTriangle(triangleIndex + 2, i, 2, tetrahedron.vertex0, tetrahedron.vertex3, tetrahedron.vertex1, tetrahedron.vertex2);\r\n                this.addTriangle(triangleIndex + 3, i, 3, tetrahedron.vertex0, tetrahedron.vertex1, tetrahedron.vertex2, tetrahedron.vertex3);\r\n                triangleIndex += 4;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < triangleIndex; i++) {\r\n            if (this._triangles[i].invalid) {\r\n                continue;\r\n            }\r\n\r\n            for (let k = i + 1; k < triangleIndex; k++) {\r\n                if (this._triangles[i].isSame(this._triangles[k])) {\r\n                    this._triangles[i].invalid = true;\r\n                    this._triangles[k].invalid = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove containing tetrahedron\r\n        this._tetrahedrons = this._tetrahedrons.filter((tetrahedron): boolean => !tetrahedron.invalid);\r\n\r\n        for (let i = 0; i < triangleIndex; i++) {\r\n            const triangle = this._triangles[i];\r\n            if (!triangle.invalid) {\r\n                this._tetrahedrons.push(new Tetrahedron(this, triangle.vertex0, triangle.vertex1, triangle.vertex2, vertexIndex));\r\n            }\r\n        }\r\n    }\r\n\r\n    private reorder (center: Vec3): void {\r\n        // The tetrahedron in the middle is placed at the front of the vector\r\n        this._tetrahedrons.sort((a, b): number => Vec3.squaredDistance(a.sphere.center, center) - Vec3.squaredDistance(b.sphere.center, center));\r\n    }\r\n\r\n    private computeAdjacency (): void {\r\n        const normal = new Vec3(0.0, 0.0, 0.0);\r\n        const edge1 = new Vec3(0.0, 0.0, 0.0);\r\n        const edge2 = new Vec3(0.0, 0.0, 0.0);\r\n        const edge3 = new Vec3(0.0, 0.0, 0.0);\r\n\r\n        const tetrahedronCount = this._tetrahedrons.length;\r\n\r\n        let triangleIndex = 0;\r\n        for (let i = 0; i < this._tetrahedrons.length; i++) {\r\n            const tetrahedron = this._tetrahedrons[i];\r\n\r\n            this.addTriangle(triangleIndex, i, 0, tetrahedron.vertex1, tetrahedron.vertex3, tetrahedron.vertex2, tetrahedron.vertex0);\r\n            this.addTriangle(triangleIndex + 1, i, 1, tetrahedron.vertex0, tetrahedron.vertex2, tetrahedron.vertex3, tetrahedron.vertex1);\r\n            this.addTriangle(triangleIndex + 2, i, 2, tetrahedron.vertex0, tetrahedron.vertex3, tetrahedron.vertex1, tetrahedron.vertex2);\r\n            this.addTriangle(triangleIndex + 3, i, 3, tetrahedron.vertex0, tetrahedron.vertex1, tetrahedron.vertex2, tetrahedron.vertex3);\r\n            triangleIndex += 4;\r\n        }\r\n\r\n        for (let i = 0; i < triangleIndex; i++) {\r\n            if (!this._triangles[i].isOuterFace) {\r\n                continue;\r\n            }\r\n\r\n            for (let k = i + 1; k < triangleIndex; k++) {\r\n                if (this._triangles[i].isSame(this._triangles[k])) {\r\n                    // update adjacency between tetrahedrons\r\n                    this._tetrahedrons[this._triangles[i].tetrahedron].neighbours[this._triangles[i].index] = this._triangles[k].tetrahedron;\r\n                    this._tetrahedrons[this._triangles[k].tetrahedron].neighbours[this._triangles[k].index] = this._triangles[i].tetrahedron;\r\n                    this._triangles[i].isOuterFace = false;\r\n                    this._triangles[k].isOuterFace = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (this._triangles[i].isOuterFace) {\r\n                const probe0 = this._probes[this._triangles[i].vertex0];\r\n                const probe1 = this._probes[this._triangles[i].vertex1];\r\n                const probe2 = this._probes[this._triangles[i].vertex2];\r\n                const probe3 = this._probes[this._triangles[i].vertex3];\r\n\r\n                Vec3.subtract(edge1, probe1.position, probe0.position);\r\n                Vec3.subtract(edge2, probe2.position, probe0.position);\r\n                Vec3.cross(normal, edge1, edge2);\r\n\r\n                Vec3.subtract(edge3, probe3.position, probe0.position);\r\n                const negative = Vec3.dot(normal, edge3);\r\n                if (negative > 0.0) {\r\n                    Vec3.negate(normal, normal);\r\n                }\r\n\r\n                // accumulate weighted normal\r\n                Vec3.add(probe0.normal, probe0.normal, normal);\r\n                Vec3.add(probe1.normal, probe1.normal, normal);\r\n                Vec3.add(probe2.normal, probe2.normal, normal);\r\n\r\n                // create an outer cell with normal facing out\r\n                const v0 = this._triangles[i].vertex0;\r\n                const v1 = negative > 0.0 ? this._triangles[i].vertex2 : this._triangles[i].vertex1;\r\n                const v2 = negative > 0.0 ? this._triangles[i].vertex1 : this._triangles[i].vertex2;\r\n                const tetrahedron = new Tetrahedron(this, v0, v1, v2);\r\n\r\n                // update adjacency between tetrahedron and outer cell\r\n                tetrahedron.neighbours[3] = this._triangles[i].tetrahedron;\r\n                this._tetrahedrons[this._triangles[i].tetrahedron].neighbours[this._triangles[i].index] = this._tetrahedrons.length;\r\n                this._tetrahedrons.push(tetrahedron);\r\n            }\r\n        }\r\n\r\n        // start from outer cell index\r\n        let edgeIndex = 0;\r\n        for (let i = tetrahedronCount; i < this._tetrahedrons.length; i++) {\r\n            const tetrahedron = this._tetrahedrons[i];\r\n\r\n            this.addEdge(edgeIndex, i, 0, tetrahedron.vertex1, tetrahedron.vertex2);\r\n            this.addEdge(edgeIndex + 1, i, 1, tetrahedron.vertex2, tetrahedron.vertex0);\r\n            this.addEdge(edgeIndex + 2, i, 2, tetrahedron.vertex0, tetrahedron.vertex1);\r\n            edgeIndex += 3;\r\n        }\r\n\r\n        for (let i = 0; i < edgeIndex; i++) {\r\n            for (let k = i + 1; k < edgeIndex; k++) {\r\n                if (this._edges[i].isSame(this._edges[k])) {\r\n                    // update adjacency between outer cells\r\n                    this._tetrahedrons[this._edges[i].tetrahedron].neighbours[this._edges[i].index] = this._edges[k].tetrahedron;\r\n                    this._tetrahedrons[this._edges[k].tetrahedron].neighbours[this._edges[k].index] = this._edges[i].tetrahedron;\r\n                }\r\n            }\r\n        }\r\n\r\n        // normalize all convex hull probes' normal\r\n        for (let i = 0; i < this._probes.length; i++) {\r\n            this._probes[i].normal.normalize();\r\n        }\r\n    }\r\n\r\n    private computeMatrices (): void {\r\n        for (let i = 0; i < this._tetrahedrons.length; i++) {\r\n            const tetrahedron = this._tetrahedrons[i];\r\n\r\n            if (tetrahedron.vertex3 >= 0) {\r\n                this.computeTetrahedronMatrix(tetrahedron);\r\n            } else {\r\n                this.computeOuterCellMatrix(tetrahedron);\r\n            }\r\n        }\r\n    }\r\n\r\n    private computeTetrahedronMatrix (tetrahedron: Tetrahedron): void {\r\n        const p0 = this._probes[tetrahedron.vertex0].position;\r\n        const p1 = this._probes[tetrahedron.vertex1].position;\r\n        const p2 = this._probes[tetrahedron.vertex2].position;\r\n        const p3 = this._probes[tetrahedron.vertex3].position;\r\n\r\n        tetrahedron.matrix.set(\r\n            p0.x - p3.x, p1.x - p3.x, p2.x - p3.x,\r\n            p0.y - p3.y, p1.y - p3.y, p2.y - p3.y,\r\n            p0.z - p3.z, p1.z - p3.z, p2.z - p3.z,\r\n        );\r\n        tetrahedron.matrix.invert();\r\n        tetrahedron.matrix.transpose();\r\n    }\r\n\r\n    private computeOuterCellMatrix (tetrahedron: Tetrahedron): void {\r\n        const v: Vec3[] = [];\r\n        const p: Vec3[] = [];\r\n\r\n        v[0] = this._probes[tetrahedron.vertex0].normal;\r\n        v[1] = this._probes[tetrahedron.vertex1].normal;\r\n        v[2] = this._probes[tetrahedron.vertex2].normal;\r\n\r\n        p[0] = this._probes[tetrahedron.vertex0].position;\r\n        p[1] = this._probes[tetrahedron.vertex1].position;\r\n        p[2] = this._probes[tetrahedron.vertex2].position;\r\n\r\n        Vec3.subtract(_a, p[0], p[2]);\r\n        Vec3.subtract(_ap, v[0], v[2]);\r\n        Vec3.subtract(_b, p[1], p[2]);\r\n        Vec3.subtract(_bp, v[1], v[2]);\r\n        _p2.set(p[2]);\r\n        Vec3.negate(_cp, v[2]);\r\n\r\n        const m: number[] = [];\r\n\r\n        m[0] = _ap.y * _bp.z - _ap.z * _bp.y;\r\n        m[3] = -_ap.x * _bp.z + _ap.z * _bp.x;\r\n        m[6] = _ap.x * _bp.y - _ap.y * _bp.x;\r\n        m[9] = _a.x * _bp.y * _cp.z\r\n                - _a.y * _bp.x * _cp.z\r\n                + _ap.x * _b.y * _cp.z\r\n                - _ap.y * _b.x * _cp.z\r\n                + _a.z * _bp.x * _cp.y\r\n                - _a.z * _bp.y * _cp.x\r\n                + _ap.z * _b.x * _cp.y\r\n                - _ap.z * _b.y * _cp.x\r\n                - _a.x * _bp.z * _cp.y\r\n                + _a.y * _bp.z * _cp.x\r\n                - _ap.x * _b.z * _cp.y\r\n                + _ap.y * _b.z * _cp.x;\r\n        m[9] -= _p2.x * m[0] + _p2.y * m[3] + _p2.z * m[6];\r\n\r\n        m[1] = _ap.y * _b.z + _a.y * _bp.z - _ap.z * _b.y - _a.z * _bp.y;\r\n        m[4] = -_a.x * _bp.z - _ap.x * _b.z + _a.z * _bp.x + _ap.z * _b.x;\r\n        m[7] = _a.x * _bp.y - _a.y * _bp.x + _ap.x * _b.y - _ap.y * _b.x;\r\n        m[10] = _a.x * _b.y * _cp.z\r\n                - _a.y * _b.x * _cp.z\r\n                - _a.x * _b.z * _cp.y\r\n                + _a.y * _b.z * _cp.x\r\n                + _a.z * _b.x * _cp.y\r\n                - _a.z * _b.y * _cp.x;\r\n        m[10] -= _p2.x * m[1] + _p2.y * m[4] + _p2.z * m[7];\r\n\r\n        m[2] = -_a.z * _b.y + _a.y * _b.z;\r\n        m[5] = -_a.x * _b.z + _a.z * _b.x;\r\n        m[8] = _a.x * _b.y - _a.y * _b.x;\r\n        m[11] = 0.0;\r\n        m[11] -= _p2.x * m[2] + _p2.y * m[5] + _p2.z * m[8];\r\n\r\n        // coefficient of t^3\r\n        const c = _ap.x * _bp.y * _cp.z\r\n                - _ap.y * _bp.x * _cp.z\r\n                + _ap.z * _bp.x * _cp.y\r\n                - _ap.z * _bp.y * _cp.x\r\n                + _ap.y * _bp.z * _cp.x\r\n                - _ap.x * _bp.z * _cp.y;\r\n\r\n        if (Math.abs(c) > EPSILON) {\r\n            // t^3 + p * t^2 + q * t + r = 0\r\n            for (let k = 0; k < 12; k++) {\r\n                m[k] /= c;\r\n            }\r\n        } else {\r\n            // set last vertex index of outer cell to -2\r\n            // p * t^2 + q * t + r = 0\r\n            tetrahedron.vertex3 = -2;\r\n        }\r\n\r\n        // transpose the matrix\r\n        tetrahedron.matrix.set(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8]);\r\n\r\n        // last column of mat3x4\r\n        tetrahedron.offset.set(m[9], m[10], m[11]);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec4, Vec3, cclegacy, assertIsTrue } from '../../core';\r\n\r\nconst SH_BASIS_COUNT = 9;\r\n\r\nexport class LightProbeSampler {\r\n    /**\r\n     *  generate one sample from sphere uniformly\r\n     */\r\n    public static uniformSampleSphere (u1: number, u2: number): Vec3 {\r\n        const z = 1.0 - 2.0 * u1;\r\n        const r = Math.sqrt(Math.max(0.0, 1.0 - z * z));\r\n        const phi = 2.0 * Math.PI * u2;\r\n\r\n        const x = r * Math.cos(phi);\r\n        const y = r * Math.sin(phi);\r\n\r\n        return new Vec3(x, y, z);\r\n    }\r\n\r\n    /**\r\n     *  generate ucount1 * ucount2 samples from sphere uniformly\r\n     */\r\n    public static uniformSampleSphereAll (sampleCount: number): Vec3[] {\r\n        assertIsTrue(sampleCount > 0);\r\n\r\n        const uCount1 = Math.floor(Math.sqrt(sampleCount));\r\n        const uCount2 = uCount1;\r\n\r\n        const samples: Vec3[] = [];\r\n        const uDelta1 = 1.0 / uCount1;\r\n        const uDelta2 = 1.0 / uCount2;\r\n\r\n        for (let i = 0; i < uCount1; i++) {\r\n            const u1 = (i + 0.5) * uDelta1;\r\n\r\n            for (let j = 0; j < uCount2; j++) {\r\n                const u2 = (j + 0.5) * uDelta2;\r\n                const sample = this.uniformSampleSphere(u1, u2);\r\n                samples.push(sample);\r\n            }\r\n        }\r\n\r\n        return samples;\r\n    }\r\n\r\n    /**\r\n     *  probability density function of uniform distribution on spherical surface\r\n     */\r\n    public static uniformSpherePdf (): number { return 1.0 / (4.0 * Math.PI); }\r\n}\r\n\r\n/**\r\n * Spherical Harmonics utility class\r\n */\r\nexport class SH {\r\n    private static LMAX = 2;\r\n\r\n    private static basisFunctions: { (v: Vec3): number }[] =    [\r\n        (v: Vec3): number => 0.282095,                              // 0.5 * Math.sqrt(1.0 / Math.PI)\r\n        (v: Vec3): number => 0.488603 * v.y,                        // 0.5 * Math.sqrt(3.0 / Math.PI) * v.y\r\n        (v: Vec3): number => 0.488603 * v.z,                        // 0.5 * Math.sqrt(3.0 / Math.PI) * v.z\r\n        (v: Vec3): number => 0.488603 * v.x,                        // 0.5 * Math.sqrt(3.0 / Math.PI) * v.x\r\n        (v: Vec3): number => 1.09255 * v.y * v.x,                   // 0.5 * Math.sqrt(15.0 / Math.PI) * v.y * v.x\r\n        (v: Vec3): number => 1.09255 * v.y * v.z,                   // 0.5 * Math.sqrt(15.0 / Math.PI) * v.y * v.z\r\n        (v: Vec3): number => 0.946175 * (v.z * v.z - 1.0 / 3.0),    // 0.75 * Math.sqrt(5.0 / Math.PI) * (v.z * v.z - 1.0 / 3.0)\r\n        (v: Vec3): number => 1.09255 * v.z * v.x,                   // 0.5 * Math.sqrt(15.0 / Math.PI) * v.z * v.x\r\n        (v: Vec3): number => 0.546274 * (v.x * v.x - v.y * v.y),    // 0.25 * Math.sqrt(15.0 / Math.PI) * (v.x * v.x - v.y * v.y)\r\n    ];\r\n\r\n    private static basisOverPI: number[] =    [\r\n        0.0897936,  // 0.282095 / Math.PI\r\n        0.155527,   // 0.488603 / Math.PI\r\n        0.155527,   // 0.488603 / Math.PI\r\n        0.155527,   // 0.488603 / Math.PI\r\n        0.347769,   // 1.09255 / Math.PI\r\n        0.347769,   // 1.09255 / Math.PI\r\n        0.301177,   // 0.946175 / Math.PI\r\n        0.347769,   // 1.09255 / Math.PI\r\n        0.173884,   // 0.546274 / Math.PI\r\n    ];\r\n\r\n    /**\r\n     * update ubo data by coefficients\r\n     */\r\n    public static updateUBOData (data: Float32Array, offset: number, coefficients: Vec3[]): void {\r\n        // cc_sh_linear_const_r\r\n        data[offset++] = coefficients[3].x * this.basisOverPI[3];\r\n        data[offset++] = coefficients[1].x * this.basisOverPI[1];\r\n        data[offset++] = coefficients[2].x * this.basisOverPI[2];\r\n        data[offset++] = coefficients[0].x * this.basisOverPI[0] - coefficients[6].x * this.basisOverPI[6] / 3.0;\r\n\r\n        // cc_sh_linear_const_g\r\n        data[offset++] = coefficients[3].y * this.basisOverPI[3];\r\n        data[offset++] = coefficients[1].y * this.basisOverPI[1];\r\n        data[offset++] = coefficients[2].y * this.basisOverPI[2];\r\n        data[offset++] = coefficients[0].y * this.basisOverPI[0] - coefficients[6].y * this.basisOverPI[6] / 3.0;\r\n\r\n        // cc_sh_linear_const_b\r\n        data[offset++] = coefficients[3].z * this.basisOverPI[3];\r\n        data[offset++] = coefficients[1].z * this.basisOverPI[1];\r\n        data[offset++] = coefficients[2].z * this.basisOverPI[2];\r\n        data[offset++] = coefficients[0].z * this.basisOverPI[0] - coefficients[6].z * this.basisOverPI[6] / 3.0;\r\n\r\n        // cc_sh_quadratic_r\r\n        data[offset++] = coefficients[4].x * this.basisOverPI[4];\r\n        data[offset++] = coefficients[5].x * this.basisOverPI[5];\r\n        data[offset++] = coefficients[6].x * this.basisOverPI[6];\r\n        data[offset++] = coefficients[7].x * this.basisOverPI[7];\r\n\r\n        // cc_sh_quadratic_g\r\n        data[offset++] = coefficients[4].y * this.basisOverPI[4];\r\n        data[offset++] = coefficients[5].y * this.basisOverPI[5];\r\n        data[offset++] = coefficients[6].y * this.basisOverPI[6];\r\n        data[offset++] = coefficients[7].y * this.basisOverPI[7];\r\n\r\n        // cc_sh_quadratic_b\r\n        data[offset++] = coefficients[4].z * this.basisOverPI[4];\r\n        data[offset++] = coefficients[5].z * this.basisOverPI[5];\r\n        data[offset++] = coefficients[6].z * this.basisOverPI[6];\r\n        data[offset++] = coefficients[7].z * this.basisOverPI[7];\r\n\r\n        // cc_sh_quadratic_a\r\n        data[offset++] = coefficients[8].x * this.basisOverPI[8];\r\n        data[offset++] = coefficients[8].y * this.basisOverPI[8];\r\n        data[offset++] = coefficients[8].z * this.basisOverPI[8];\r\n        data[offset++] = 0.0;\r\n    }\r\n\r\n    /**\r\n     * recreate a function from sh coefficients, which is same as SHEvaluate in shader\r\n     */\r\n    public static shaderEvaluate (normal: Vec3, coefficients: Vec3[]): Vec3 {\r\n        const linearConstR = new Vec4(\r\n            coefficients[3].x * this.basisOverPI[3],\r\n            coefficients[1].x * this.basisOverPI[1],\r\n            coefficients[2].x * this.basisOverPI[2],\r\n            coefficients[0].x * this.basisOverPI[0] - coefficients[6].x * this.basisOverPI[6] / 3.0,\r\n        );\r\n\r\n        const linearConstG = new Vec4(\r\n            coefficients[3].y * this.basisOverPI[3],\r\n            coefficients[1].y * this.basisOverPI[1],\r\n            coefficients[2].y * this.basisOverPI[2],\r\n            coefficients[0].y * this.basisOverPI[0] - coefficients[6].y * this.basisOverPI[6] / 3.0,\r\n        );\r\n\r\n        const linearConstB = new Vec4(\r\n            coefficients[3].z * this.basisOverPI[3],\r\n            coefficients[1].z * this.basisOverPI[1],\r\n            coefficients[2].z * this.basisOverPI[2],\r\n            coefficients[0].z * this.basisOverPI[0] - coefficients[6].z * this.basisOverPI[6] / 3.0,\r\n        );\r\n\r\n        const quadraticR = new Vec4(\r\n            coefficients[4].x * this.basisOverPI[4],\r\n            coefficients[5].x * this.basisOverPI[5],\r\n            coefficients[6].x * this.basisOverPI[6],\r\n            coefficients[7].x * this.basisOverPI[7],\r\n        );\r\n\r\n        const quadraticG = new Vec4(\r\n            coefficients[4].y * this.basisOverPI[4],\r\n            coefficients[5].y * this.basisOverPI[5],\r\n            coefficients[6].y * this.basisOverPI[6],\r\n            coefficients[7].y * this.basisOverPI[7],\r\n        );\r\n\r\n        const quadraticB = new Vec4(\r\n            coefficients[4].z * this.basisOverPI[4],\r\n            coefficients[5].z * this.basisOverPI[5],\r\n            coefficients[6].z * this.basisOverPI[6],\r\n            coefficients[7].z * this.basisOverPI[7],\r\n        );\r\n\r\n        const quadraticA = new Vec3(\r\n            coefficients[8].x * this.basisOverPI[8],\r\n            coefficients[8].y * this.basisOverPI[8],\r\n            coefficients[8].z * this.basisOverPI[8],\r\n        );\r\n\r\n        const result = new Vec3(0.0, 0.0, 0.0);\r\n        const normal4 = new Vec4(normal.x, normal.y, normal.z, 1.0);\r\n\r\n        // calculate linear and const terms\r\n        result.x = Vec4.dot(linearConstR, normal4);\r\n        result.y = Vec4.dot(linearConstG, normal4);\r\n        result.z = Vec4.dot(linearConstB, normal4);\r\n\r\n        // calculate quadratic terms\r\n        const n14 = new Vec4(normal.x * normal.y, normal.y * normal.z, normal.z * normal.z, normal.z * normal.x);\r\n        const n5 = normal.x * normal.x - normal.y * normal.y;\r\n\r\n        result.x += Vec4.dot(quadraticR, n14);\r\n        result.y += Vec4.dot(quadraticG, n14);\r\n        result.z += Vec4.dot(quadraticB, n14);\r\n        Vec3.scaleAndAdd(result, result, quadraticA, n5);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * recreate a function from sh coefficients\r\n     */\r\n    public static evaluate (sample: Vec3, coefficients: Vec3[]): Vec3 {\r\n        const result = new Vec3(0.0, 0.0, 0.0);\r\n\r\n        const size = coefficients.length;\r\n        for (let i = 0; i < size; i++) {\r\n            const c = coefficients[i];\r\n            Vec3.scaleAndAdd(result, result, c, this.evaluateBasis(i, sample));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * project a function to sh coefficients\r\n     */\r\n    public static project (samples: Vec3[], values: Vec3[]): Vec3[] {\r\n        assertIsTrue(samples.length > 0 && samples.length === values.length);\r\n\r\n        // integral using Monte Carlo method\r\n        const basisCount = this.getBasisCount();\r\n        const sampleCount = samples.length;\r\n        const scale = 1.0 / (LightProbeSampler.uniformSpherePdf() * sampleCount);\r\n\r\n        const coefficients: Vec3[] = [];\r\n\r\n        for (let i = 0; i < basisCount; i++) {\r\n            const coefficient = new Vec3(0.0, 0.0, 0.0);\r\n\r\n            for (let k = 0; k < sampleCount; k++) {\r\n                Vec3.scaleAndAdd(coefficient, coefficient, values[k], this.evaluateBasis(i, samples[k]));\r\n            }\r\n\r\n            Vec3.multiplyScalar(coefficient, coefficient, scale);\r\n            coefficients.push(coefficient);\r\n        }\r\n\r\n        return coefficients;\r\n    }\r\n\r\n    /**\r\n     * calculate irradiance's sh coefficients from radiance's sh coefficients directly\r\n     */\r\n    public static convolveCosine (radianceCoefficients: Vec3[]): Vec3[] {\r\n        const cosTheta: number[] = [0.8862268925, 1.0233267546, 0.4954159260];\r\n        const irradianceCoefficients: Vec3[] = [];\r\n\r\n        for (let l = 0; l <= this.LMAX; l++) {\r\n            for (let m = -l; m <= l; m++) {\r\n                const i = this.toIndex(l, m);\r\n\r\n                const coefficient = new Vec3(0.0, 0.0, 0.0);\r\n                Vec3.multiplyScalar(coefficient, radianceCoefficients[i], this.lambda(l) * cosTheta[l]);\r\n                irradianceCoefficients.push(coefficient);\r\n            }\r\n        }\r\n\r\n        return irradianceCoefficients;\r\n    }\r\n\r\n    /**\r\n     * return basis function count\r\n     */\r\n    public static getBasisCount (): number {\r\n        return SH_BASIS_COUNT;\r\n    }\r\n\r\n    /**\r\n     * evaluate from a basis function\r\n     */\r\n    public static evaluateBasis (index: number, sample: Vec3): number {\r\n        assertIsTrue(index < this.getBasisCount());\r\n        const func = this.basisFunctions[index];\r\n\r\n        return func(sample);\r\n    }\r\n\r\n    public static reduceRinging (coefficients: Vec3[], lambda: number): void {\r\n        if (lambda === 0.0) {\r\n            return;\r\n        }\r\n\r\n        for (let l = 0; l <= this.LMAX; ++l) {\r\n            const scale = 1.0 / (1.0 + lambda * l * l * (l + 1) * (l + 1));\r\n            for (let m = -l; m <= l; ++m) {\r\n                const i = this.toIndex(l, m);\r\n                Vec3.multiplyScalar(coefficients[i], coefficients[i], scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static lambda (l: number): number {\r\n        return Math.sqrt((4.0 * Math.PI) / (2.0 * l + 1.0));\r\n    }\r\n\r\n    private static toIndex (l: number, m: number): number {\r\n        return l * l + l + m;\r\n    }\r\n}\r\ncclegacy.internal.SH = SH;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport class PolynomialSolver {\r\n    /**\r\n     * solve quadratic equation: b * t^2 + c * t + d = 0\r\n     * return the unique real positive root\r\n     */\r\n    public static getQuadraticUniqueRoot (b: number, c: number, d: number): number {\r\n        // quadratic case\r\n        if (b !== 0.0) {\r\n            // the discriminant should be 0\r\n            return -c / (2.0 * b);\r\n        }\r\n\r\n        // linear case\r\n        if (c !== 0.0) {\r\n            return -d / c;\r\n        }\r\n\r\n        // never reach here\r\n        return 0.0;\r\n    }\r\n\r\n    /**\r\n     * solve cubic equation: t^3 + b * t^2 + c * t + d = 0\r\n     * return the unique real positive root\r\n     */\r\n    public static getCubicUniqueRoot (b: number, c: number, d: number): number {\r\n        const roots: number[] = [];\r\n\r\n        // let x = y - b / 3, convert equation to: y^3 + 3 * p * y + 2 * q = 0\r\n        // where p = c / 3 - b^2 / 9, q = d / 2 + b^3 / 27 - b * c / 6\r\n        const offset = -b / 3.0;\r\n        const p = c / 3.0 - (b * b) / 9.0;\r\n        const q = d / 2.0 + (b * b * b) / 27.0 - (b * c) / 6.0;\r\n        const delta = p * p * p + q * q; // discriminant\r\n\r\n        if (delta > 0.0) {\r\n            // only one real root\r\n            const sqrtDelta = Math.sqrt(delta);\r\n            roots.push(Math.cbrt(-q + sqrtDelta) + Math.cbrt(-q - sqrtDelta));\r\n        } else if (delta < 0.0) {\r\n            // three different real roots\r\n            const angle = Math.acos(-q * Math.sqrt(-p) / (p * p)) / 3.0;\r\n            roots.push(2.0 * Math.sqrt(-p) * Math.cos(angle));\r\n            roots.push(2.0 * Math.sqrt(-p) * Math.cos(angle + 2.0 * Math.PI / 3.0));\r\n            roots.push(2.0 * Math.sqrt(-p) * Math.cos(angle + 4.0 * Math.PI / 3.0));\r\n        } else if (q === 0.0) {\r\n            // three real roots, at least two equal roots\r\n            roots.push(0.0);\r\n        } else {\r\n            // three real roots, at least two equal roots\r\n            const root = Math.cbrt(q);\r\n            roots.push(root);\r\n            roots.push(-2.0 * root);\r\n        }\r\n\r\n        // return the unique positive root\r\n        for (let i = 0; i < roots.length; i++) {\r\n            if (roots[i] + offset >= 0.0) {\r\n                return roots[i] + offset;\r\n            }\r\n        }\r\n\r\n        // never reach here\r\n        return 0.0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable, type } from 'cc.decorator';\r\nimport { Vertex, Tetrahedron, Delaunay } from './delaunay';\r\nimport { PolynomialSolver } from './polynomial-solver';\r\nimport { LightProbeInfo } from '../../scene-graph/scene-globals';\r\nimport { Vec3, Vec4, cclegacy, EPSILON } from '../../core';\r\nimport { SH } from './sh';\r\n\r\nconst _v1 = new Vec3(0.0, 0.0, 0.0);\r\nconst _v2 = new Vec3(0.0, 0.0, 0.0);\r\nconst _normal = new Vec3(0.0, 0.0, 0.0);\r\nconst _edgeP0 = new Vec3(0.0, 0.0, 0.0);\r\nconst _edgeP1 = new Vec3(0.0, 0.0, 0.0);\r\nconst _edgeP2 = new Vec3(0.0, 0.0, 0.0);\r\nconst _crossP12 = new Vec3(0.0, 0.0, 0.0);\r\nconst _crossP20 = new Vec3(0.0, 0.0, 0.0);\r\n\r\nconst _normal2 = new Vec3(0.0, 0.0, 0.0);\r\nconst _edge1 = new Vec3(0.0, 0.0, 0.0);\r\nconst _edge2 = new Vec3(0.0, 0.0, 0.0);\r\nconst _v = new Vec3(0.0, 0.0, 0.0);\r\nconst _vp0 = new Vec3(0.0, 0.0, 0.0);\r\nconst _vp1 = new Vec3(0.0, 0.0, 0.0);\r\nconst _vp2 = new Vec3(0.0, 0.0, 0.0);\r\n\r\n@ccclass('cc.LightProbesData')\r\nexport class LightProbesData {\r\n    public get probes (): Vertex[] {\r\n        return this._probes;\r\n    }\r\n\r\n    public get tetrahedrons (): Tetrahedron[] {\r\n        return this._tetrahedrons;\r\n    }\r\n\r\n    public empty (): boolean {\r\n        return this._probes.length === 0 || this._tetrahedrons.length === 0;\r\n    }\r\n\r\n    public reset (): void {\r\n        this._probes.length = 0;\r\n        this._tetrahedrons.length = 0;\r\n    }\r\n\r\n    public updateProbes (points: Vec3[]): void {\r\n        this._probes.length = points.length;\r\n\r\n        const pointCount = this._probes.length;\r\n        for (let i = 0; i < pointCount; i++) {\r\n            let probe = this._probes[i];\r\n            if (!probe) {\r\n                probe = new Vertex(points[i]);\r\n                for (let j = 0; j < SH.getBasisCount(); j++) {\r\n                    probe.coefficients[j] = Vec3.ZERO;\r\n                }\r\n                this._probes[i] = probe;\r\n            } else {\r\n                probe.position.set(points[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateTetrahedrons (): void {\r\n        const delaunay = new Delaunay(this._probes);\r\n        this._tetrahedrons = delaunay.build();\r\n    }\r\n\r\n    public getInterpolationSHCoefficients (tetIndex: number, weights: Vec4, coefficients: Vec3[]): boolean {\r\n        if (!this.hasCoefficients()) {\r\n            return false;\r\n        }\r\n\r\n        const length = SH.getBasisCount();\r\n        const tetrahedron = this._tetrahedrons[tetIndex];\r\n        const c0 = this._probes[tetrahedron.vertex0].coefficients;\r\n        const c1 = this._probes[tetrahedron.vertex1].coefficients;\r\n        const c2 = this._probes[tetrahedron.vertex2].coefficients;\r\n\r\n        if (tetrahedron.vertex3 >= 0) {\r\n            const c3 = this._probes[tetrahedron.vertex3].coefficients;\r\n\r\n            for (let i = 0; i < length; i++) {\r\n                coefficients[i] = new Vec3(0.0, 0.0, 0.0);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c0[i], weights.x);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c1[i], weights.y);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c2[i], weights.z);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c3[i], weights.w);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < length; i++) {\r\n                coefficients[i] = new Vec3(0.0, 0.0, 0.0);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c0[i], weights.x);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c1[i], weights.y);\r\n                Vec3.scaleAndAdd(coefficients[i], coefficients[i], c2[i], weights.z);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getInterpolationWeights (position: Vec3, tetIndex: number, weights: Vec4): number {\r\n        const tetrahedronCount = this._tetrahedrons.length;\r\n        if (tetIndex < 0 || tetIndex >= tetrahedronCount) {\r\n            tetIndex = 0;\r\n        }\r\n\r\n        let lastIndex = -1;\r\n        let nextIndex = -1;\r\n\r\n        for (let i = 0; i < tetrahedronCount; i++) {\r\n            const tetrahedron = this._tetrahedrons[tetIndex];\r\n            this.getBarycentricCoord(position, tetrahedron, weights);\r\n            if (weights.x >= 0.0 && weights.y >= 0.0 && weights.z >= 0.0 && weights.w >= 0.0) {\r\n                break;\r\n            }\r\n\r\n            if (weights.x < weights.y && weights.x < weights.z && weights.x < weights.w) {\r\n                nextIndex = tetrahedron.neighbours[0];\r\n            } else if (weights.y < weights.z && weights.y < weights.w) {\r\n                nextIndex = tetrahedron.neighbours[1];\r\n            } else if (weights.z < weights.w) {\r\n                nextIndex = tetrahedron.neighbours[2];\r\n            } else {\r\n                nextIndex = tetrahedron.neighbours[3];\r\n            }\r\n\r\n            // return directly due to numerical precision error\r\n            if (lastIndex === nextIndex) {\r\n                break;\r\n            }\r\n\r\n            lastIndex = tetIndex;\r\n            tetIndex = nextIndex;\r\n        }\r\n\r\n        return tetIndex;\r\n    }\r\n\r\n    public hasCoefficients (): boolean {\r\n        return !this.empty() && this._probes[0].coefficients.length !== 0;\r\n    }\r\n\r\n    private static getTriangleBarycentricCoord (p0: Vec3, p1: Vec3, p2: Vec3, position: Vec3): Vec3 {\r\n        Vec3.subtract(_v1, p1, p0);\r\n        Vec3.subtract(_v2, p2, p0);\r\n        Vec3.cross(_normal, _v1, _v2);\r\n\r\n        if (_normal.lengthSqr() <= EPSILON) {\r\n            return new Vec3(0.0, 0.0, 0.0);\r\n        }\r\n\r\n        const n = _normal.clone();\r\n        n.normalize();\r\n        const area012Inv = 1.0 / n.dot(_normal);\r\n\r\n        Vec3.subtract(_edgeP0, p0, position);\r\n        Vec3.subtract(_edgeP1, p1, position);\r\n        Vec3.subtract(_edgeP2, p2, position);\r\n\r\n        Vec3.cross(_crossP12, _edgeP1, _edgeP2);\r\n        const areaP12 = n.dot(_crossP12);\r\n        const alpha = areaP12 * area012Inv;\r\n\r\n        Vec3.cross(_crossP20, _edgeP2, _edgeP0);\r\n        const areaP20 = n.dot(_crossP20);\r\n        const beta = areaP20 * area012Inv;\r\n\r\n        return new Vec3(alpha, beta, 1.0 - alpha - beta);\r\n    }\r\n\r\n    private getBarycentricCoord (position: Vec3, tetrahedron: Tetrahedron, weights: Vec4): void {\r\n        if (tetrahedron.vertex3 >= 0) {\r\n            this.getTetrahedronBarycentricCoord(position, tetrahedron, weights);\r\n        } else {\r\n            this.getOuterCellBarycentricCoord(position, tetrahedron, weights);\r\n        }\r\n    }\r\n\r\n    private getTetrahedronBarycentricCoord (position: Vec3, tetrahedron: Tetrahedron, weights: Vec4): void {\r\n        const result = new Vec3(0.0, 0.0, 0.0);\r\n        Vec3.subtract(result, position, this._probes[tetrahedron.vertex3].position);\r\n        Vec3.transformMat3(result, result, tetrahedron.matrix);\r\n\r\n        weights.set(result.x, result.y, result.z, 1.0 - result.x - result.y - result.z);\r\n    }\r\n\r\n    private getOuterCellBarycentricCoord (position: Vec3, tetrahedron: Tetrahedron, weights: Vec4): void {\r\n        const p0 = this._probes[tetrahedron.vertex0].position;\r\n        const p1 = this._probes[tetrahedron.vertex1].position;\r\n        const p2 = this._probes[tetrahedron.vertex2].position;\r\n\r\n        Vec3.subtract(_edge1, p1, p0);\r\n        Vec3.subtract(_edge2, p2, p0);\r\n        Vec3.cross(_normal2, _edge1, _edge2);\r\n        Vec3.subtract(_v, position, p0);\r\n\r\n        let t = Vec3.dot(_v, _normal2);\r\n        if (t < 0.0) {\r\n            // test tetrahedron in next iterator\r\n            weights.set(0.0, 0.0, 0.0, -1.0);\r\n            return;\r\n        }\r\n\r\n        const coefficients = new Vec3(0.0, 0.0, 0.0);\r\n        Vec3.transformMat3(coefficients, position, tetrahedron.matrix);\r\n        Vec3.add(coefficients, coefficients, tetrahedron.offset);\r\n\r\n        if (tetrahedron.vertex3 === -1) {\r\n            t = PolynomialSolver.getCubicUniqueRoot(coefficients.x, coefficients.y, coefficients.z);\r\n        } else {\r\n            t = PolynomialSolver.getQuadraticUniqueRoot(coefficients.x, coefficients.y, coefficients.z);\r\n        }\r\n\r\n        Vec3.scaleAndAdd(_vp0, p0, this._probes[tetrahedron.vertex0].normal, t);\r\n        Vec3.scaleAndAdd(_vp1, p1, this._probes[tetrahedron.vertex1].normal, t);\r\n        Vec3.scaleAndAdd(_vp2, p2, this._probes[tetrahedron.vertex2].normal, t);\r\n        const result = LightProbesData.getTriangleBarycentricCoord(_vp0, _vp1, _vp2, position);\r\n\r\n        weights.set(result.x, result.y, result.z, 0.0);\r\n    }\r\n\r\n    @serializable\r\n    @type([Vertex])\r\n    private _probes: Vertex[] = [];\r\n    @serializable\r\n    @type([Tetrahedron])\r\n    private _tetrahedrons: Tetrahedron[] = [];\r\n}\r\ncclegacy.internal.LightProbesData = LightProbesData;\r\n\r\n/**\r\n * @en light probe data\r\n * @zh 光照探针数据\r\n */\r\nexport class LightProbes {\r\n    /**\r\n     * @en GI multiplier\r\n     * @zh GI乘数\r\n     */\r\n    set giScale (val: number) {\r\n        this._giScale = val;\r\n    }\r\n    get giScale (): number {\r\n        return this._giScale;\r\n    }\r\n\r\n    /**\r\n      * @en GI sample counts\r\n      * @zh GI 采样数量\r\n      */\r\n    set giSamples (val: number) {\r\n        this._giSamples = val;\r\n    }\r\n    get giSamples (): number {\r\n        return this._giSamples;\r\n    }\r\n\r\n    /**\r\n      * @en light bounces\r\n      * @zh 光照反弹次数\r\n      */\r\n    set bounces (val: number) {\r\n        this._bounces = val;\r\n    }\r\n    get bounces (): number {\r\n        return this._bounces;\r\n    }\r\n\r\n    /**\r\n     * @en Reduce ringing of light probe\r\n     * @zh 减少光照探针的振铃效果\r\n     */\r\n    set reduceRinging (val: number) {\r\n        this._reduceRinging = val;\r\n    }\r\n    get reduceRinging (): number {\r\n        return this._reduceRinging;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to show light probe\r\n     * @zh 是否显示光照探针\r\n     */\r\n    set showProbe (val: boolean) {\r\n        this._showProbe = val;\r\n    }\r\n    get showProbe (): boolean {\r\n        return this._showProbe;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to show light probe's connection\r\n     * @zh 是否显示光照探针连线\r\n     */\r\n    set showWireframe (val: boolean) {\r\n        this._showWireframe = val;\r\n    }\r\n    get showWireframe (): boolean {\r\n        return this._showWireframe;\r\n    }\r\n\r\n    /**\r\n     * @en Whether to show light probe's convex\r\n     * @zh 是否显示光照探针凸包\r\n     */\r\n    set showConvex (val: boolean) {\r\n        this._showConvex = val;\r\n    }\r\n    get showConvex (): boolean {\r\n        return this._showConvex;\r\n    }\r\n\r\n    /**\r\n     * @en light probe's vertex and tetrahedron data\r\n     * @zh 光照探针顶点及四面体数据\r\n     */\r\n    set data (val: LightProbesData | null) {\r\n        this._data = val;\r\n    }\r\n    get data (): LightProbesData | null {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n     * @en The value of all light probe sphere display size\r\n     * @zh 光照探针全局显示大小\r\n     */\r\n    set lightProbeSphereVolume (val: number) {\r\n        this._lightProbeSphereVolume = val;\r\n    }\r\n    get lightProbeSphereVolume (): number {\r\n        return this._lightProbeSphereVolume;\r\n    }\r\n\r\n    protected _giScale = 1.0;\r\n    protected _giSamples = 1024;\r\n    protected _bounces = 2;\r\n    protected _reduceRinging = 0.0;\r\n    protected _showProbe = true;\r\n    protected _showWireframe = true;\r\n    protected _showConvex = false;\r\n    protected _data: LightProbesData | null = null;\r\n    protected _lightProbeSphereVolume = 1.0;\r\n\r\n    public initialize (info: LightProbeInfo): void {\r\n        this._giScale = info.giScale;\r\n        this._giSamples = info.giSamples;\r\n        this._bounces = info.bounces;\r\n        this._reduceRinging = info.reduceRinging;\r\n        this._showProbe = info.showProbe;\r\n        this._showWireframe = info.showWireframe;\r\n        this._showConvex = info.showConvex;\r\n        this._data = info.data;\r\n        this._lightProbeSphereVolume = info.lightProbeSphereVolume;\r\n    }\r\n\r\n    public empty (): boolean {\r\n        if (!this._data) {\r\n            return true;\r\n        }\r\n\r\n        return this._data.empty();\r\n    }\r\n}\r\ncclegacy.internal.LightProbes = LightProbes;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass,\r\n    disallowMultiple,\r\n    displayName,\r\n    editable,\r\n    executeInEditMode,\r\n    help,\r\n    menu,\r\n    range,\r\n    serializable,\r\n    tooltip,\r\n    type,\r\n    visible,\r\n} from 'cc.decorator';\r\nimport { EDITOR } from 'internal:constants';\r\nimport { NodeEventType } from '../../scene-graph/node-event';\r\nimport { Component } from '../../scene-graph/component';\r\nimport { Vec3, CCInteger } from '../../core';\r\nimport { AutoPlacement, PlaceMethod } from './auto-placement';\r\n\r\n/**\r\n * @en The light probe group component.\r\n * @zh 光照探针组组件。\r\n */\r\n@ccclass('cc.LightProbeGroup')\r\n@help('i18n:cc.LightProbeGroup')\r\n@menu('Rendering/LightProbeGroup')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class LightProbeGroup extends Component {\r\n    @serializable\r\n    protected _probes: Vec3[] = [];\r\n\r\n    @serializable\r\n    protected _method = PlaceMethod.UNIFORM;\r\n\r\n    @serializable\r\n    protected _minPos = new Vec3(-5, -5, -5);\r\n\r\n    @serializable\r\n    protected _maxPos = new Vec3(5, 5, 5);\r\n\r\n    @serializable\r\n    protected _nProbesX = 3;\r\n\r\n    @serializable\r\n    protected _nProbesY = 3;\r\n\r\n    @serializable\r\n    protected _nProbesZ = 3;\r\n\r\n    @editable\r\n    @type([Vec3])\r\n    @visible(false)\r\n    get probes (): Vec3[] {\r\n        return this._probes;\r\n    }\r\n    set probes (val: Vec3[]) {\r\n        this._probes = val;\r\n    }\r\n\r\n    @editable\r\n    @type(PlaceMethod)\r\n    @tooltip('i18n:light_probe_group.method')\r\n    @displayName('Generating Method')\r\n    get method (): number {\r\n        return this._method;\r\n    }\r\n    // Support this feature later.\r\n    // set method (val) {\r\n    //     this._method = val;\r\n    // }\r\n\r\n    /**\r\n     * @en Minimum position of the light probe group\r\n     * @zh 光照探针组包围盒最小值\r\n     */\r\n    @editable\r\n    @tooltip('i18n:light_probe_group.minPos')\r\n    @displayName('Generating Min Pos')\r\n    get minPos (): Vec3 {\r\n        return this._minPos;\r\n    }\r\n    set minPos (val: Vec3) {\r\n        this._minPos = val;\r\n    }\r\n\r\n    /**\r\n     * @en Maximum position of the light probe group\r\n     * @zh 光照探针组包围盒最大值\r\n     */\r\n    @editable\r\n    @tooltip('i18n:light_probe_group.maxPos')\r\n    @displayName('Generating Max Pos')\r\n    get maxPos (): Vec3 {\r\n        return this._maxPos;\r\n    }\r\n    set maxPos (val: Vec3) {\r\n        this._maxPos = val;\r\n    }\r\n\r\n    @editable\r\n    @range([2, 65535, 1])\r\n    @type(CCInteger)\r\n    @tooltip('i18n:light_probe_group.nProbesX')\r\n    @displayName('Number Of Probes X')\r\n    get nProbesX (): number {\r\n        return this._nProbesX;\r\n    }\r\n    set nProbesX (val: number) {\r\n        this._nProbesX = val;\r\n    }\r\n\r\n    @editable\r\n    @range([2, 65535, 1])\r\n    @type(CCInteger)\r\n    @tooltip('i18n:light_probe_group.nProbesY')\r\n    @displayName('Number Of Probes Y')\r\n    get nProbesY (): number {\r\n        return this._nProbesY;\r\n    }\r\n    set nProbesY (val: number) {\r\n        this._nProbesY = val;\r\n    }\r\n\r\n    @editable\r\n    @range([2, 65535, 1])\r\n    @type(CCInteger)\r\n    @tooltip('i18n:light_probe_group.nProbesZ')\r\n    @displayName('Number Of Probes Z')\r\n    get nProbesZ (): number {\r\n        return this._nProbesZ;\r\n    }\r\n    set nProbesZ (val: number) {\r\n        this._nProbesZ = val;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        if (!EDITOR) {\r\n            return;\r\n        }\r\n\r\n        if (!this.node) {\r\n            return;\r\n        }\r\n        const lightProbeInfo = this.node.scene.globals.lightProbeInfo;\r\n        const changed = lightProbeInfo.addNode(this.node);\r\n        if (changed) {\r\n            lightProbeInfo.syncData(this.node, this.probes);\r\n            lightProbeInfo.update(true);\r\n        }\r\n    }\r\n\r\n    public onEnable (): void {\r\n        if (!EDITOR) {\r\n            return;\r\n        }\r\n\r\n        if (!this.node) {\r\n            return;\r\n        }\r\n\r\n        const changed = this.node.scene.globals.lightProbeInfo.addNode(this.node);\r\n        if (changed) {\r\n            this.onProbeChanged();\r\n        }\r\n    }\r\n\r\n    public onDisable (): void {\r\n        if (!EDITOR) {\r\n            return;\r\n        }\r\n\r\n        if (!this.node) {\r\n            return;\r\n        }\r\n\r\n        const changed = this.node.scene.globals.lightProbeInfo.removeNode(this.node);\r\n        if (changed) {\r\n            this.onProbeChanged();\r\n        }\r\n    }\r\n\r\n    public generateLightProbes (): void {\r\n        if (!this.node) {\r\n            return;\r\n        }\r\n\r\n        this._probes = AutoPlacement.generate({\r\n            method: this._method,\r\n            nProbesX: this._nProbesX,\r\n            nProbesY: this._nProbesY,\r\n            nProbesZ: this._nProbesZ,\r\n            minPos: this._minPos,\r\n            maxPos: this._maxPos,\r\n        });\r\n\r\n        this.onProbeChanged();\r\n    }\r\n\r\n    public onProbeChanged (updateTet = true, emitEvent = true): void {\r\n        const lightProbeInfo = this.node.scene.globals.lightProbeInfo;\r\n        lightProbeInfo.syncData(this.node, this.probes);\r\n        lightProbeInfo.update(updateTet);\r\n\r\n        if (emitEvent) {\r\n            this.node.emit(NodeEventType.LIGHT_PROBE_CHANGED);\r\n        }\r\n    }\r\n}\r\n"],"names":["PlaceMethod","Enum","UNIFORM","ADAPTIVE","AutoPlacement","generate","info","method","this","doGenerateUniform","doGenerateAdaptive","nProbesX","nProbesY","nProbesZ","probes","position","Vec3","gridSize","maxPos","x","minPos","y","z","push","ccclass","_decorator","serializable","_mat","Mat3","_n","_a","_ap","_b","_bp","_p2","_cp","Vertex","_dec","_class2","pos","_initializer","normal","_initializer2","coefficients","_initializer3","set","_applyDecoratedInitializer","prototype","_class","Edge","_class4","tet","i","v0","v1","tetrahedron","_initializer4","index","_initializer5","vertex0","_initializer6","vertex1","_initializer7","_proto","isSame","other","Triangle","_class6","v2","v3","invalid","_initializer8","isOuterFace","_initializer9","_initializer10","_initializer11","_initializer12","_initializer13","vertex2","_initializer14","vertex3","_initializer15","_proto2","CircumSphere","exports","_dec2","_class9","center","_initializer16","radiusSquared","_initializer17","init","p0","p1","p2","p3","invert","transpose","transformMat3","squaredDistance","_class8","Tetrahedron","_dec3","_class12","delaunay","_initializer18","_initializer19","_initializer20","_initializer21","_initializer22","neighbours","_initializer23","matrix","_initializer24","offset","_initializer25","sphere","_initializer26","_probes","_proto4","isInCircumSphere","point","EPSILON","contain","vertexIndex","isInnerTetrahedron","isOuterCell","_class11","Delaunay","_tetrahedrons","_triangles","_edges","_proto5","build","reset","tetrahedralize","computeAdjacency","computeMatrices","length","probeCount","initTetrahedron","addProbe","filter","reorder","Number","MAX_VALUE","MIN_VALUE","Math","min","max","add","multiplyScalar","extent","subtract","addTriangle","addEdge","triangleIndex","k","triangle","sort","a","b","edge1","edge2","edge3","tetrahedronCount","probe0","probe1","probe2","probe3","cross","negative","dot","negate","edgeIndex","normalize","computeTetrahedronMatrix","computeOuterCellMatrix","v","p","m","c","abs","LightProbeSampler","uniformSampleSphere","u1","u2","r","sqrt","phi","PI","cos","sin","uniformSampleSphereAll","sampleCount","assertIsTrue","uCount1","floor","uCount2","samples","uDelta1","uDelta2","j","sample","uniformSpherePdf","SH","updateUBOData","data","basisOverPI","shaderEvaluate","linearConstR","Vec4","linearConstG","linearConstB","quadraticR","quadraticG","quadraticB","quadraticA","result","normal4","n14","n5","scaleAndAdd","evaluate","size","evaluateBasis","project","values","basisCount","getBasisCount","scale","coefficient","convolveCosine","radianceCoefficients","cosTheta","irradianceCoefficients","l","LMAX","toIndex","lambda","func","basisFunctions","reduceRinging","cclegacy","internal","PolynomialSolver","getQuadraticUniqueRoot","d","getCubicUniqueRoot","roots","q","delta","sqrtDelta","cbrt","angle","acos","root","_v1","_v2","_normal","_edgeP0","_edgeP1","_edgeP2","_crossP12","_crossP20","_normal2","_edge1","_edge2","_v","_vp0","_vp1","_vp2","LightProbesData","type","empty","updateProbes","points","pointCount","probe","ZERO","updateTetrahedrons","getInterpolationSHCoefficients","tetIndex","weights","hasCoefficients","c0","c1","c2","c3","w","getInterpolationWeights","lastIndex","nextIndex","getBarycentricCoord","getTriangleBarycentricCoord","lengthSqr","n","clone","area012Inv","alpha","beta","getTetrahedronBarycentricCoord","getOuterCellBarycentricCoord","t","_createClass","key","get","LightProbes","_giScale","_giSamples","_bounces","_reduceRinging","_showProbe","_showWireframe","_showConvex","_data","_lightProbeSphereVolume","initialize","giScale","giSamples","bounces","showProbe","showWireframe","showConvex","lightProbeSphereVolume","val","_dec4","CCInteger","disallowMultiple","_Component","LightProbeGroup","_this","_len","arguments","args","Array","_key","call","apply","concat","_method","_minPos","_maxPos","_nProbesX","_nProbesY","_nProbesZ","_inheritsLoose","onLoad","onEnable","onDisable","generateLightProbes","node","onProbeChanged","updateTet","emitEvent","lightProbeInfo","scene","globals","syncData","update","emit","NodeEventType","LIGHT_PROBE_CHANGED","Component","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor","_dec5","_dec6"],"mappings":"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"}