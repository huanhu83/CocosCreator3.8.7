{"version":3,"file":"node-event-BDYemSfE.js","sources":["../../../cocos/core/utils/path.ts","../../../cocos/asset/asset-manager/cache.ts","../../../cocos/asset/asset-manager/pipeline.ts","../../../cocos/asset/asset-manager/shared.ts","../../../cocos/asset/asset-manager/task.ts","../../../cocos/core/utils/decode-uuid.ts","../../../cocos/asset/asset-manager/helper.ts","../../../cocos/asset/assets/asset.ts","../../../cocos/asset/assets/scripts.ts","../../../cocos/scene-graph/component-event-handler.ts","../../../cocos/scene-graph/node-event.ts","../../../cocos/scene-graph/component.ts"],"sourcesContent":["/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { systemInfo } from 'pal/system-info';\r\nimport { OS } from '../../../pal/system-info/enum-type';\r\n\r\nconst EXTNAME_RE = /(\\.[^./?\\\\]*)(\\?.*)?$/;\r\nconst DIRNAME_RE = /((.*)(\\/|\\\\|\\\\\\\\))?(.*?\\..*$)?/;\r\nconst NORMALIZE_RE = /[^./]+\\/\\.\\.\\//;\r\n\r\n/**\r\n * @en Joins strings to be a path.\r\n * @zh 拼接字符串为路径。\r\n * @param segments @en Strings to be joined. @zh 被拼接的字符串数组。\r\n * @returns @en The final path. @zh 拼接后的路径。\r\n * @example {@link cocos/core/utils/CCPath/join.js}\r\n */\r\nexport function join (...segments: string[]): string {\r\n    let result = '';\r\n    segments.forEach((segment) => {\r\n        result = (result + (result === '' ? '' : '/') + segment).replace(/(\\/|\\\\\\\\)$/, '');\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * @en Gets the extension name of a path including '.', like '.png'.\r\n * @zh 返回 Path 的扩展名，包括 '.'，例如 '.png'。\r\n * @param path @en A file path. @zh 文件路径。\r\n * @returns @en The extension name. @zh 扩展名。\r\n * @example {@link cocos/core/utils/CCPath/extname.js}\r\n */\r\nexport function extname (path: string): string {\r\n    const temp = EXTNAME_RE.exec(path);\r\n    return temp ? temp[1] : '';\r\n}\r\n\r\n/**\r\n * @en Gets the main name of a file name, exclude extension name.\r\n * @zh 获取文件名的主名称。\r\n * @deprecated\r\n */\r\nexport function mainFileName (fileName: string): string {\r\n    if (fileName) {\r\n        const idx = fileName.lastIndexOf('.');\r\n        if (idx !== -1) {\r\n            return fileName.substring(0, idx);\r\n        }\r\n    }\r\n    return fileName;\r\n}\r\n\r\n/**\r\n * @en Gets the file name of a file path, exclude extension name and directory name.\r\n * @zh 获取文件路径的文件名，不包含扩展名和目录名。\r\n * @param path @en A file path. @zh 文件路径。\r\n * @param extName @en File extension name. @zh 文件扩展名。\r\n * @returns @en The file name. @zh 文件名。\r\n * @example {@link cocos/core/utils/CCPath/basename.js}\r\n */\r\nexport function basename (path: string, extName?: string): string {\r\n    const index = path.indexOf('?');\r\n    if (index > 0) {\r\n        path = path.substring(0, index);\r\n    }\r\n    const reg = /(\\/|\\\\)([^/\\\\]+)$/g;\r\n    const result = reg.exec(path.replace(/(\\/|\\\\)$/, ''));\r\n    if (!result) {\r\n        return path;\r\n    }\r\n    const baseName = result[2];\r\n    if (extName && path.substring(path.length - extName.length).toLowerCase() === extName.toLowerCase()) {\r\n        return baseName.substring(0, baseName.length - extName.length);\r\n    }\r\n    return baseName;\r\n}\r\n\r\n/**\r\n * @en Gets directory name of a file path.\r\n * @zh 获取文件路径的目录名。\r\n * @param path @en A file path. @zh 文件路径。\r\n * @returns @en Directory name. @zh 文件目录名。\r\n * @example {@link cocos/core/utils/CCPath/dirname.js}\r\n */\r\nexport function dirname (path: string): string {\r\n    const temp = DIRNAME_RE.exec(path);\r\n    return temp ? temp[2] : '';\r\n}\r\n\r\n/**\r\n * @en Changes file extension name.\r\n * @zh 更改文件的扩展名。\r\n * @param path @en A file path. @zh 文件路径。\r\n * @param extName @en New file extension name. @zh 新文件扩展名。\r\n * @returns @en New file path. @zh 新的文件路径。\r\n * @example {@link cocos/core/utils/CCPath/changeExtname.js}\r\n */\r\nexport function changeExtname (path: string, extName?: string): string {\r\n    extName = extName || '';\r\n    let index = path.indexOf('?');\r\n    let tempStr = '';\r\n    if (index > 0) {\r\n        tempStr = path.substring(index);\r\n        path = path.substring(0, index);\r\n    }\r\n    index = path.lastIndexOf('.');\r\n    if (index < 0) {\r\n        return path + extName + tempStr;\r\n    }\r\n    return path.substring(0, index) + extName + tempStr;\r\n}\r\n\r\n/**\r\n * @en Changes file name of a file path.\r\n * @zh 更改文件路径的文件名。\r\n * @param path @en A file path. @zh 文件路径。\r\n * @param newBaseName @en New file name. @zh 新文件名。\r\n * @param keepExt @en Whether to keep extension name. @zh 是否保留扩展名。\r\n * @returns @en New file path. @zh 新文件路径。\r\n * @example {@link cocos/core/utils/CCPath/changeBasename.js}\r\n */\r\nexport function changeBasename (path: string, newBaseName: string, keepExt?: boolean): string {\r\n    if (newBaseName.indexOf('.') === 0) {\r\n        return changeExtname(path, newBaseName);\r\n    }\r\n    let index = path.indexOf('?');\r\n    let tempStr = '';\r\n    const ext = keepExt ? extname(path) : '';\r\n    if (index > 0) {\r\n        tempStr = path.substring(index);\r\n        path = path.substring(0, index);\r\n    }\r\n    index = path.lastIndexOf('/');\r\n    index = index <= 0 ? 0 : index + 1;\r\n    return path.substring(0, index) + newBaseName + ext + tempStr;\r\n}\r\n\r\n// todo make public after verification\r\nexport function _normalize (url): any {\r\n    let oldUrl = url = String(url);\r\n\r\n    // removing all ../\r\n    do {\r\n        oldUrl = url;\r\n        url = url.replace(NORMALIZE_RE, '');\r\n    } while (oldUrl.length !== url.length);\r\n    return url;\r\n}\r\n\r\n/**\r\n * @en Removes the last path separator('/' or '\\') of a path if exist.\r\n * @zh 如果存在的话，删除文件路径的最后一个分隔符（'/' 或者 '\\'）。\r\n * @param path @en A file path to modify. @zh 要修改的文件路径。\r\n * @returns @en A new file path without last file separator.\r\n * @zh 路径最后分隔符的新路径。\r\n */\r\nexport function stripSep (path: string): string {\r\n    return path.replace(/[/\\\\]$/, '');\r\n}\r\n\r\n/**\r\n * @en Gets file separator for different platforms. It is `/` on unix like platforms,\r\n * and `\\` on windows.\r\n * @zh 获取不同平台的文件分割符。类 unix 系统是 `/`，windows 系统是 `\\`。\r\n * @returns @en File separator. @zh 文件分割符。\r\n */\r\nexport function getSeperator (): string {\r\n    return systemInfo.os === OS.WINDOWS ? '\\\\' : '/';\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { js } from '../../core';\r\n\r\n/**\r\n * @zh 缓存结构的接口定义，可以用于保存数据。\r\n * @en Interface definition of a cache structure that can be used to save data.\r\n */\r\nexport interface ICache<T> {\r\n    /**\r\n     * @en\r\n     * Adds a Key-Value pair to cache.\r\n     *\r\n     * @zh\r\n     * 增加键值对到缓存中。\r\n     *\r\n     * @param key @en The key. @zh 要增加的键值对中的键。\r\n     * @param val @en The value. @zh 要增加的键值对中的值。\r\n     * @returns @en The value. @zh 新增的键值对中的值。\r\n     */\r\n    add (key: string, val: T): T;\r\n    /**\r\n     * @en\r\n     * Gets the cached content by key.\r\n     *\r\n     * @zh\r\n     * 通过 key 获取对应的 value。\r\n     *\r\n     * @param key @en The key. @zh 要查询的键。\r\n     * @returns @en The corresponding content. @zh 对应键值对中的值。\r\n     */\r\n    get (key: string): T | undefined | null;\r\n    /**\r\n     * @en\r\n     * Checks whether or not content exists by key.\r\n     *\r\n     * @zh\r\n     * 通过 Key 判断是否存在对应的内容。\r\n     *\r\n     * @param key @en The key. @zh 要查询的键。\r\n     * @returns @en True indicates that content of the key exists. @zh 返回 True 则表明该值存在。\r\n     */\r\n    has (key: string): boolean;\r\n    /**\r\n     * @en\r\n     * Removes the cached content by key.\r\n     *\r\n     * @zh\r\n     * 通过 Key 移除对应的内容。\r\n     *\r\n     * @param key @en The key. @zh 要移除的键值对中的键。\r\n     * @returns @en The removed content. @zh 移出的键值对中的值。\r\n     */\r\n    remove (key: string): T | undefined | null;\r\n\r\n    /**\r\n     * @en\r\n     * Clear all contents.\r\n     *\r\n     * @zh\r\n     * 清除所有内容。\r\n     */\r\n    clear (): void;\r\n\r\n    /**\r\n     *\r\n     * @en\r\n     * Enumerates all contents and invokes function.\r\n     *\r\n     * @zh\r\n     * 枚举所有内容并执行方法。\r\n     *\r\n     * @param func @en Function to be invoked. @zh 待执行的方法。\r\n     * @param func.val @en The value. @zh 传入的键值对中的值。\r\n     * @param func.key @en The corresponding key. @zh 传入的键值对中的键。\r\n     */\r\n    forEach (func: (val: T, key: string) => void): void;\r\n    /**\r\n     * @en\r\n     * Enumerates all content to find one element which can fulfill condition.\r\n     *\r\n     * @zh\r\n     * 枚举所有内容，找到一个可以满足条件的元素。\r\n     *\r\n     * @param predicate @en The condition function. @zh 条件方法。\r\n     * @returns @en The first content that meets this condition. @zh 第一个符合该条件的内容。\r\n     */\r\n    find (predicate: (val: T, key: string) => boolean): T | null;\r\n    /**\r\n     * @en\r\n     * The count of cached content.\r\n     *\r\n     * @zh\r\n     * 缓存数量。\r\n     */\r\n    readonly count: number;\r\n\r\n    /**\r\n     * @en\r\n     * Destroy this cache。\r\n     *\r\n     * @zh\r\n     * 销毁这个 cache.\r\n     */\r\n    destroy (): void;\r\n}\r\n\r\n/**\r\n * @en\r\n * A data structure used to cache certain content.\r\n *\r\n * @zh\r\n * 用于缓存某些内容的数据结构。\r\n *\r\n */\r\nexport default class Cache<T = any> implements ICache<T> {\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public get map (): Record<string, T> | null {\r\n        return this._map;\r\n    }\r\n    protected _map: Record<string, T> | null = null;\r\n    protected _count = 0;\r\n\r\n    /**\r\n     * @en\r\n     * Creates a Cache.\r\n     *\r\n     * @zh\r\n     * 创建一个 Cache。\r\n     *\r\n     * @param map @en An object used to initialize. @zh 用于初始化此缓存的对象。\r\n     *\r\n     */\r\n    constructor (map?: Record<string, T>) {\r\n        if (map) {\r\n            this._map = map;\r\n            this._count = Object.keys(map).length;\r\n        } else {\r\n            this._map = js.createMap(true);\r\n            this._count = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Adds a Key-Value pair to cache.\r\n     *\r\n     * @zh\r\n     * 增加键值对到缓存中。\r\n     *\r\n     * @param key @en The key. @zh 要增加的键值对中的键。\r\n     * @param val @en The value. @zh 要增加的键值对中的值。\r\n     * @returns @en The value. @zh 新增的键值对中的值。\r\n     *\r\n     * @example\r\n     * var cache = new Cache();\r\n     * cache.add('test', null);\r\n     *\r\n     */\r\n    public add (key: string, val: T): T {\r\n        if (!(key in this._map!)) {\r\n            this._count++;\r\n        }\r\n        return this._map![key] = val;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the cached content by key.\r\n     *\r\n     * @zh\r\n     * 通过 key 获取对应的 value。\r\n     *\r\n     * @param key @en The key. @zh 要查询的键。\r\n     * @returns @en The corresponding content. @zh 对应键值对中的值。\r\n     *\r\n     * @example\r\n     * let cache = new Cache();\r\n     * let test = cache.get('test');\r\n     *\r\n     */\r\n    public get (key: string): T | undefined | null {\r\n        return this._map![key];\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Checks whether or not content exists by key.\r\n     *\r\n     * @zh\r\n     * 通过 Key 判断是否存在对应的内容。\r\n     *\r\n     * @param key @en The key. @zh 要查询的键。\r\n     * @returns @en True indicates that content of the key exists. @zh 返回 True 则表明该值存在。\r\n     *\r\n     * @example\r\n     * var cache = new Cache();\r\n     * var exist = cache.has('test');\r\n     *\r\n     */\r\n    public has (key: string): boolean {\r\n        return key in this._map!;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Removes the cached content by key.\r\n     *\r\n     * @zh\r\n     * 通过 Key 移除对应的内容。\r\n     *\r\n     * @param key @en The key. @zh 要移除的键值对中的键。\r\n     * @returns @en The removed content. @zh 移出的键值对中的值。\r\n     *\r\n     * @example\r\n     * var cache = new Cache();\r\n     * var content = cache.remove('test');\r\n     *\r\n     */\r\n    public remove (key: string): T | undefined | null {\r\n        const out = this._map![key];\r\n        if (key in this._map!) {\r\n            delete this._map![key];\r\n            this._count--;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Clear all content.\r\n     *\r\n     * @zh\r\n     * 清除所有内容。\r\n     *\r\n     * @example\r\n     * var cache = new Cache();\r\n     * cache.clear();\r\n     *\r\n     */\r\n    public clear (): void {\r\n        if (this._count !== 0) {\r\n            this._map = js.createMap(true);\r\n            this._count = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Enumerates all content and invokes function.\r\n     *\r\n     * @zh\r\n     * 枚举所有内容并执行方法。\r\n     *\r\n     * @param func @en Function to be invoked. @zh 待执行的方法。\r\n     * @param func.val @en The value. @zh 传入的键值对中的值。\r\n     * @param func.key @en The corresponding key. @zh 传入的键值对中的键。\r\n     *\r\n     * @example\r\n     * var cache = new Cache();\r\n     * cache.forEach((val, key) => console.log(key));\r\n     *\r\n     */\r\n    public forEach (func: (val: T, key: string) => void): void {\r\n        for (const key in this._map) {\r\n            func(this._map[key], key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Enumerate all content to find one element which can fulfill condition.\r\n     *\r\n     * @zh\r\n     * 枚举所有内容，找到一个可以满足条件的元素。\r\n     *\r\n     * @param predicate @en The condition function. @zh 条件方法。\r\n     * @returns @en The first content that meets this condition. @zh 第一个符合该条件的内容。\r\n     *\r\n     * @example\r\n     * var cache = new Cache();\r\n     * var val = cache.find((val, key) => key === 'test');\r\n     *\r\n     */\r\n    public find (predicate: (val: T, key: string) => boolean): T | null {\r\n        for (const key in this._map) {\r\n            if (predicate(this._map[key], key)) {\r\n                return this._map[key];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The count of cached content.\r\n     *\r\n     * @zh\r\n     * 缓存数量。\r\n     *\r\n     */\r\n    get count (): number {\r\n        return this._count;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Destroy this cache.\r\n     *\r\n     * @zh\r\n     * 销毁这个 cache。\r\n     *\r\n     */\r\n    public destroy (): void {\r\n        this._map = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { warnID } from '../../core';\r\nimport Task from './task';\r\n\r\n/**\r\n * @en\r\n * The loading pipeline can complete the loading task by executing a series of phases. [[AssetManager]] uses it to load all assets.\r\n *\r\n * @zh\r\n * 加载管线能通过执行一系列阶段来完成加载任务。[[AssetManager]] 使用其来加载所有资源。\r\n *\r\n */\r\nexport class Pipeline {\r\n    private static _pipelineId = 0;\r\n\r\n    /**\r\n     * @en\r\n     * The unique id of this pipeline.\r\n     *\r\n     * @zh\r\n     * 管线的唯一 id。\r\n     *\r\n     */\r\n    public id: number = Pipeline._pipelineId++;\r\n\r\n    /**\r\n     * @en\r\n     * The name of this pipeline.\r\n     *\r\n     * @zh\r\n     * 此管线的名称。\r\n     *\r\n     */\r\n    public name = '';\r\n\r\n    /**\r\n     * @en\r\n     * All pipes of this pipeline.\r\n     *\r\n     * @zh\r\n     * 此管线的所有管道。\r\n     *\r\n     */\r\n    public pipes: Array<((task: Task, done: ((err?: Error | null) => void)) => void) | ((task: Task) => Error | void)> = [];\r\n\r\n    /**\r\n     * @en\r\n     * Creates a new pipeline.\r\n     *\r\n     * @zh\r\n     * 创建一个管线。\r\n     *\r\n     * @param name - @en The name of pipeline. @zh 管线的名称。\r\n     * @param funcs\r\n     * @en The array of pipes to create pipeline, every pipe must be function which take two parameters,\r\n     * the first is a `Task` flowed in pipeline, the second is complete callback.\r\n     * @zh 用于创建管线的管道数组，每个管道必须是一个接受两个参数的方法，第一个参数为任务 [[Task]], 第二个参数为完成回调。\r\n     *\r\n     * @example\r\n     * const pipeline = new Pipeline('download', [\r\n     * (task, done) => {\r\n     *      const url = task.input;\r\n     *      assetManager.downloader.downloadFile(url, null, null, (err, result) => {\r\n     *          task.output = result;\r\n     *          done(err);\r\n     *      });\r\n     * },\r\n     * (task, done) => {\r\n     *      const text = task.input;\r\n     *      const json = JSON.stringify(text);\r\n     *      task.output = json;\r\n     *      done();\r\n     * }\r\n     * ]);\r\n     *\r\n     */\r\n    constructor (name: string, funcs: Array<((task: Task, done: ((err?: Error | null) => void)) => void) | ((task: Task) => Error | void)>) {\r\n        this.name = name;\r\n        for (let i = 0, l = funcs.length; i < l; i++) {\r\n            this.pipes.push(funcs[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Inserts a new pipe to pipeline at specific point .\r\n     *\r\n     * @zh\r\n     * 在某个特定的点为管线插入一个新的 pipe。\r\n     *\r\n     * @param func @en The new pipe to be inserted. @zh 待插入的管道。\r\n     * @param func.task @en The task handled with pipeline will be transferred to this function. @zh 正在被此管线处理的任务。\r\n     * @param func.done\r\n     * @en Callback you need to invoke manually when this pipe is finished. if the pipeline is synchronous, callback is unnecessary.\r\n     * @zh 当这个管道完成时，你需要手动调用回调。如果管道是同步的，回调就没有必要。\r\n     * @param index @en The specific point you want to insert at. @zh 要插入进的位置。\r\n     * @return @en Returns the Pipeline itself, which can be used to make chain calls. @zh 返回 Pipeline 本身，可以用于做链式调用。\r\n     *\r\n     * @example\r\n     * var pipeline = new Pipeline('test', []);\r\n     * pipeline.insert((task, done) => {\r\n     *      // do something\r\n     *      done();\r\n     * }, 0);\r\n     *\r\n     */\r\n    public insert (func: ((task: Task, done: ((err?: Error | null) => void)) => void) | ((task: Task) => Error | void), index: number): Pipeline {\r\n        if (index > this.pipes.length) {\r\n            warnID(4921);\r\n            return this;\r\n        }\r\n\r\n        this.pipes.splice(index, 0, func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Appends a new pipe to the pipeline.\r\n     *\r\n     * @zh\r\n     * 添加一个管道到管线中。\r\n     *\r\n     * @param func @en The new pipe to be appended. @zh 要追加的新管道。\r\n     * @param func.task\r\n     * @en The task handled with pipeline will be transferred to this function.\r\n     * @zh 正在被此管线处理的任务。\r\n     * @param func.done\r\n     * @en Callback you need to invoke manually when this pipe is finished. if the pipeline is synchronous, callback is unnecessary.\r\n     * @zh 当这个管道完成时，你需要手动调用回调。如果管道是同步的，回调就没有必要。\r\n     * @return @en Returns the Pipeline itself, which can be used to make chain calls. @zh 返回 Pipeline 本身，可以用于做链式调用。\r\n     *\r\n     * @example\r\n     * var pipeline = new Pipeline('test', []);\r\n     * pipeline.append((task, done) => {\r\n     *      // do something\r\n     *      done();\r\n     * });\r\n     *\r\n     */\r\n    public append (func: ((task: Task, done: ((err?: Error | null) => void)) => void) | ((task: Task) => Error | void)): Pipeline {\r\n        this.pipes.push(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Removes pipe which at specific point.\r\n     *\r\n     * @zh\r\n     * 移除特定位置的管道。\r\n     *\r\n     * @param index @en The specific point. @zh 指定位置的索引。\r\n     * @return @en Returns the Pipeline itself, which can be used to make chain calls. @zh 返回 Pipeline 本身，可以用于做链式调用。\r\n     *\r\n     * @example\r\n     * var pipeline = new Pipeline('test', (task, done) => {\r\n     *      // do something\r\n     *      done();\r\n     * });\r\n     * pipeline.remove(0);\r\n     *\r\n     */\r\n    public remove (index: number): Pipeline {\r\n        this.pipes.splice(index, 1);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Executes task synchronously.\r\n     *\r\n     * @zh\r\n     * 同步执行任务。\r\n     *\r\n     * @param task @en The task will be executed. @zh 要执行的任务。\r\n     * @returns @en The execution result. @zh 执行结果。\r\n     *\r\n     * @example\r\n     * var pipeline = new Pipeline('sync', [(task) => {\r\n     *      let input = task.input;\r\n     *      task.output = doSomething(task.input);\r\n     * }]);\r\n     *\r\n     * var task = new Task({input: 'test'});\r\n     * console.log(pipeline.sync(task));\r\n     *\r\n     */\r\n    public sync (task: Task): any {\r\n        const pipes = this.pipes;\r\n        if (pipes.length === 0) { return null; }\r\n        task.isFinished = false;\r\n        for (let i = 0, l = pipes.length; i < l;) {\r\n            const pipe = pipes[i] as ((task: Task) => Error | void);\r\n            const result = pipe(task);\r\n            if (result) {\r\n                task.isFinished = true;\r\n                return result;\r\n            }\r\n            i++;\r\n            if (i !== l) {\r\n                task.input = task.output;\r\n                task.output = null;\r\n            }\r\n        }\r\n        task.isFinished = true;\r\n        return task.output as unknown;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Executes task asynchronously.\r\n     *\r\n     * @zh\r\n     * 异步执行任务。\r\n     *\r\n     * @param task @en The task will be executed. @zh 待执行的任务。\r\n     *\r\n     * @example\r\n     * var pipeline = new Pipeline('sync', [(task, done) => {\r\n     *      let input = task.input;\r\n     *      task.output = doSomething(task.input);\r\n     *      done();\r\n     * }]);\r\n     * var task = new Task({input: 'test', onComplete: (err, result) => console.log(result)});\r\n     * pipeline.async(task);\r\n     *\r\n     */\r\n    public async (task: Task): void {\r\n        const pipes = this.pipes;\r\n        if (pipes.length === 0) { return; }\r\n        task.isFinished = false;\r\n        this._flow(0, task);\r\n    }\r\n\r\n    private _flow (index: number, task: Task): void {\r\n        const pipe = this.pipes[index];\r\n        pipe(task, (result) => {\r\n            if (result) {\r\n                task.isFinished = true;\r\n                task.dispatch('complete', result);\r\n            } else {\r\n                index++;\r\n                if (index < this.pipes.length) {\r\n                    // move output to input\r\n                    task.input = task.output;\r\n                    task.output = null;\r\n                    this._flow(index, task);\r\n                } else {\r\n                    task.isFinished = true;\r\n                    task.dispatch('complete', result, task.output);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR } from 'internal:constants';\r\nimport { Asset } from '../assets/asset';\r\nimport Bundle from './bundle';\r\nimport Cache from './cache';\r\nimport { Pipeline } from './pipeline';\r\nimport WeakCache from './weak-cache';\r\n\r\nexport const assets = EDITOR ? new WeakCache<Asset>() : new Cache<Asset>();\r\nexport const files = new Cache();\r\nexport const parsed = new Cache();\r\nexport const bundles = new Cache<Bundle>();\r\nexport const pipeline = new Pipeline('normal load', []);\r\nexport const fetchPipeline = new Pipeline('fetch', []);\r\nexport const transformPipeline = new Pipeline('transform url', []);\r\nexport const references = EDITOR ? new Cache<any[]>() : null;\r\nexport const assetsOverrideMap = new Map<string, string>();\r\n\r\nexport enum RequestType {\r\n\r\n    UUID = 'uuid',\r\n\r\n    PATH = 'path',\r\n\r\n    DIR = 'dir',\r\n\r\n    URL = 'url',\r\n\r\n    SCENE = 'scene',\r\n}\r\n\r\nexport interface IRequest extends Record<string, any> {\r\n    uuid?: string;\r\n    url?: string;\r\n    path?: string;\r\n    dir?: string;\r\n    scene?: string;\r\n}\r\n\r\nexport const presets: Record<string, Record<string, any>> = {\r\n\r\n    default: {\r\n        priority: 0,\r\n    },\r\n\r\n    preload: {\r\n        maxConcurrency: 6,\r\n        maxRequestsPerFrame: 2,\r\n        priority: -1,\r\n    },\r\n\r\n    scene: {\r\n        maxConcurrency: 20,\r\n        maxRequestsPerFrame: 20,\r\n        priority: 1,\r\n    },\r\n\r\n    bundle: {\r\n        maxConcurrency: 20,\r\n        maxRequestsPerFrame: 20,\r\n        priority: 2,\r\n    },\r\n\r\n    remote: {\r\n        maxRetryCount: 4,\r\n    },\r\n};\r\n\r\n/**\r\n * @en\r\n * The builtin bundles\r\n *\r\n * @zh\r\n * 内置 bundle\r\n *\r\n */\r\nexport enum BuiltinBundleName {\r\n    /**\r\n     * @en\r\n     * The builtin bundle of default asset\r\n     *\r\n     * @zh\r\n     * 内置 bundle, 对应默认资源\r\n     */\r\n    INTERNAL = 'internal',\r\n\r\n    /**\r\n     * @en\r\n     * The builtin bundle corresponds to 'assets/resources'.\r\n     *\r\n     * @zh\r\n     * 内置 bundle, 对应 'assets/resources' 目录\r\n     *\r\n     */\r\n    RESOURCES = 'resources',\r\n\r\n    /**\r\n     * @en\r\n     * The builtin bundle\r\n     *\r\n     * @zh\r\n     * 内置 bundle\r\n     *\r\n     */\r\n    MAIN = 'main',\r\n\r\n    /**\r\n     * @en\r\n     * The builtin bundle, exists when Start Scene asset bundle is checked on the project building panel\r\n     *\r\n     * @zh\r\n     * 内置 bundle, 如果构建面板开启了首场景分包，则会有 START_SCENE bundle\r\n     *\r\n     */\r\n    START_SCENE = 'start-scene',\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport interface ITaskOption {\r\n    onComplete?: ((err: Error | null | undefined, data: any) => void) | null;\r\n    onProgress?: ((...args: any[]) => void) | null;\r\n    onError?: ((...args: any[]) => void) | null;\r\n    input: any;\r\n    progress?: any;\r\n    options?: Record<string, any> | null;\r\n}\r\n\r\n/**\r\n * @en\r\n * Tasks are the smallest unit of data running in the pipeline, You can create a task and pass in the input information,\r\n * and then get the output of that task after it has been executed in the pipeline to use.\r\n *\r\n * @zh\r\n * 任务是在管线中运行的最小数据单位，你可以创建一个任务并传入输入信息，在经过管线执行后获取该任务的输出来使用。\r\n *\r\n */\r\nexport default class Task {\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public static MAX_DEAD_NUM = 500;\r\n\r\n    /**\r\n     * @en\r\n     * Create a new task from pool.\r\n     *\r\n     * @zh\r\n     * 从对象池中创建 task。\r\n     *\r\n     * @param options @en Some optional parameters. @zh 一些可选参数。\r\n     * @param options.onComplete\r\n     * @en Callback when the task complete, if the pipeline is synchronous, onComplete is unnecessary.\r\n     * @zh 任务完成后的回调，如果流水线是同步的，onComplete 是不必要的。\r\n     * @param options.onProgress\r\n     * @en Continuously callback when the task is running, if the pipeline is synchronous, onProgress is unnecessary.\r\n     * @zh 在任务运行时持续回调，如果管道是同步的，onProgress 是不必要的。\r\n     * @param options.onError\r\n     * @en Callback when something goes wrong, if the pipeline is synchronous, onError is unnecessary.\r\n     * @zh 出错时的回调，如果流水线是同步的，onError 是不必要的。\r\n     * @param options.input @en Something will be handled with pipeline. @zh 需要被此管道处理的任务数据。\r\n     * @param options.progress @en Progress information. @zh 进度信息。\r\n     * @param options.options @en Custom parameters. @zh 自定义参数。\r\n     * @returns @en return a newly created task. @zh 返回一个新创建的任务。\r\n     *\r\n     */\r\n    public static create (options: ITaskOption): Task {\r\n        let out: Task;\r\n        if (Task._deadPool.length !== 0) {\r\n            out = Task._deadPool.pop() as Task;\r\n            out.set(options);\r\n        } else {\r\n            out = new Task(options);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    private static _taskId = 0;\r\n    private static _deadPool: Task[] = [];\r\n\r\n    /**\r\n     * @en\r\n     * The id of task.\r\n     *\r\n     * @zh\r\n     * 任务 id。\r\n     *\r\n     */\r\n    public id: number = Task._taskId++;\r\n\r\n    /**\r\n     * @en\r\n     * The callback when task is completed.\r\n     *\r\n     * @zh\r\n     * 完成回调。\r\n     *\r\n     */\r\n    public onComplete: ((err: Error | null | undefined, data: any) => void) | null = null;\r\n\r\n    /**\r\n     * @en\r\n     * The callback of progression.\r\n     *\r\n     * @zh\r\n     * 进度回调。\r\n     *\r\n     */\r\n    public onProgress: ((...args: any[]) => void) | null = null;\r\n\r\n    /**\r\n     * @en\r\n     * The callback when something goes wrong.\r\n     *\r\n     * @zh\r\n     * 错误回调。\r\n     *\r\n     */\r\n    public onError: ((...args: any[]) => void) | null = null;\r\n\r\n    /**\r\n     * @en\r\n     * The source data of task.\r\n     *\r\n     * @zh\r\n     * 任务的源数据。\r\n     *\r\n     */\r\n    public source: any = null;\r\n\r\n    /**\r\n     * @en\r\n     * The output of task.\r\n     *\r\n     * @zh\r\n     * 任务的输出。\r\n     */\r\n    public output: any = null;\r\n\r\n    /**\r\n     * @en\r\n     * The input of task.\r\n     *\r\n     * @zh\r\n     * 任务的输入。\r\n     *\r\n     */\r\n    public input: any = null;\r\n\r\n    /**\r\n     * @en\r\n     * The progression of task.\r\n     *\r\n     * @zh\r\n     * 任务的进度。\r\n     *\r\n     */\r\n    public progress: any = null;\r\n\r\n    /**\r\n     * @en\r\n     * Custom options.\r\n     *\r\n     * @zh\r\n     * 自定义参数。\r\n     *\r\n     */\r\n    public options: Record<string, any> | null = null;\r\n\r\n    /**\r\n     * @deprecated Typo. Since v3.7, please use [[Task.isFinished]] instead.\r\n     */\r\n    public get isFinish (): boolean {\r\n        return this.isFinished;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Typo. Since v3.7, please use [[Task.isFinished]] instead.\r\n     */\r\n    public set isFinish (val: boolean) {\r\n        this.isFinished = val;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether or not this task is completed.\r\n     *\r\n     * @zh\r\n     * 此任务是否已经完成。\r\n     *\r\n     */\r\n    public isFinished = true;\r\n\r\n    /**\r\n     * @en\r\n     * Create a new Task.\r\n     *\r\n     * @zh\r\n     * 创建一个任务。\r\n     *\r\n     * @param options @en Some optional parameters. @zh 一些可选参数。\r\n     * @param options.onComplete\r\n     * @en Callback when the task complete, if the pipeline is synchronous, onComplete is unnecessary.\r\n     * @zh 任务完成后的回调，如果流水线是同步的，onComplete 是不必要的。\r\n     * @param options.onProgress\r\n     * @en Continuously callback when the task is running, if the pipeline is synchronous, onProgress is unnecessary.\r\n     * @zh 在任务运行时持续回调，如果管道是同步的，onProgress 是不必要的。\r\n     * @param options.onError\r\n     * @en Callback when something goes wrong, if the pipeline is synchronous, onError is unnecessary.\r\n     * @zh 出错时的回调，如果流水线是同步的，onError 是不必要的。\r\n     * @param options.input @en Something will be handled with pipeline. @zh 需要被此管道处理的任务数据。\r\n     * @param options.progress @en Progress information. @zh 进度信息。\r\n     * @param options.options @en Custom parameters. @zh 自定义参数。\r\n     * @returns @en return a newly created task. @zh 返回一个新创建的任务。\r\n     */\r\n    public constructor (options?: ITaskOption) {\r\n        this.set(options);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Set parameters of this task.\r\n     *\r\n     * @zh\r\n     * 设置任务的参数。\r\n     *\r\n     * @param options @en Some optional parameters. @zh 一些可选参数。\r\n     * @param options.onComplete\r\n     * @en Callback when the task complete, if the pipeline is synchronous, onComplete is unnecessary.\r\n     * @zh 任务完成后的回调，如果流水线是同步的，onComplete 是不必要的。\r\n     * @param options.onProgress\r\n     * @en Continuously callback when the task is running, if the pipeline is synchronous, onProgress is unnecessary.\r\n     * @zh 在任务运行时持续回调，如果管道是同步的，onProgress 是不必要的。\r\n     * @param options.onError\r\n     * @en Callback when something goes wrong, if the pipeline is synchronous, onError is unnecessary.\r\n     * @zh 出错时的回调，如果流水线是同步的，onError 是不必要的。\r\n     * @param options.input @en Something will be handled with pipeline. @zh 需要被此管道处理的任务数据。\r\n     * @param options.progress @en Progress information. @zh 进度信息。\r\n     * @param options.options @en Custom parameters. @zh 自定义参数。\r\n     * @returns @en return a newly created task. @zh 返回一个新创建的任务。\r\n     *\r\n     * @example\r\n     * const task = new Task();\r\n     * task.set({input: ['test'], onComplete: (err, result) => console.log(err), onProgress: (finish, total) => console.log(finish / total)});\r\n     *\r\n     */\r\n    public set (options: ITaskOption = Object.create(null)): void {\r\n        this.onComplete = options.onComplete || null;\r\n        this.onProgress = options.onProgress || null;\r\n        this.onError = options.onError || null;\r\n        this.source = this.input = options.input;\r\n        this.output = null;\r\n        this.progress = options.progress;\r\n        // custom data\r\n        this.options = options.options || Object.create(null);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Dispatch event with any parameter.\r\n     *\r\n     * @zh\r\n     * 分发事件，可以传递任意参数。\r\n     *\r\n     * @param event @en The event name. @zh 事件名称。\r\n     * @param param1 @en The parameter 1. @zh 参数 1。\r\n     * @param param2 @en The parameter 2. @zh 参数 2。\r\n     * @param param3 @en The parameter 3. @zh 参数 3。\r\n     * @param param4 @en The parameter 4. @zh 参数 4。\r\n     *\r\n     * @example\r\n     * const task = Task.create();\r\n     * task.onComplete = (msg) => console.log(msg);\r\n     * task.dispatch('complete', 'hello world');\r\n     *\r\n     */\r\n    public dispatch (event: string, param1?: any, param2?: any, param3?: any, param4?: any): void {\r\n        switch (event) {\r\n        case 'complete':\r\n            if (this.onComplete) {\r\n                this.onComplete(param1, param2);\r\n            }\r\n            break;\r\n        case 'progress':\r\n            if (this.onProgress) {\r\n                this.onProgress(param1, param2, param3, param4);\r\n            }\r\n            break;\r\n        case 'error':\r\n            if (this.onError) {\r\n                this.onError(param1, param2, param3, param4);\r\n            }\r\n            break;\r\n        default: {\r\n            const str = `on${event[0].toUpperCase()}${event.substring(1)}`;\r\n            if (typeof this[str] === 'function') {\r\n                this[str](param1, param2, param3, param4);\r\n            }\r\n            break;\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Recycle this task to be reused.\r\n     *\r\n     * @zh\r\n     * 回收 task 用于复用。\r\n     *\r\n     */\r\n    public recycle (): void {\r\n        if (Task._deadPool.length === Task.MAX_DEAD_NUM) { return; }\r\n        this.onComplete = null;\r\n        this.onProgress = null;\r\n        this.onError = null;\r\n        this.source = this.output = this.input = null;\r\n        this.progress = null;\r\n        this.options = null;\r\n        Task._deadPool.push(this);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { TEST } from 'internal:constants';\r\nimport { BASE64_VALUES } from './misc';\r\nimport { legacyCC } from '../global-exports';\r\n\r\nconst separator = '@';\r\n\r\nconst HexChars = '0123456789abcdef'.split('');\r\n\r\nconst _t = ['', '', '', ''];\r\nconst UuidTemplate = _t.concat(_t, '-', _t, '-', _t, '-', _t, '-', _t, _t, _t);\r\nconst Indices = UuidTemplate.map((x, i): number => (x === '-' ? NaN : i)).filter(Number.isFinite);\r\n\r\n/**\r\n * @en\r\n * Decode base64-compressed uuid.\r\n *\r\n * @zh\r\n * 解码用 base64 压缩过的 uuid。\r\n *\r\n * @param  base64 @en Base-64 compressed uuid. @zh 用 base-64 压缩过的 uuid。\r\n * @returns @en Original uuid. @zh 未压缩过的 uuid。\r\n *\r\n * @example\r\n * ```ts\r\n * const uuid = 'fcmR3XADNLgJ1ByKhqcC5Z';\r\n * const originalUuid = decodeUuid(uuid); // fc991dd7-0033-4b80-9d41-c8a86a702e59\r\n * ```\r\n */\r\nexport default function decodeUuid (base64: string): string {\r\n    const strs = base64.split(separator);\r\n    const uuid = strs[0];\r\n    if (uuid.length !== 22) {\r\n        return base64;\r\n    }\r\n    UuidTemplate[0] = base64[0];\r\n    UuidTemplate[1] = base64[1];\r\n    for (let i = 2, j = 2; i < 22; i += 2) {\r\n        const lhs = BASE64_VALUES[base64.charCodeAt(i)];\r\n        const rhs = BASE64_VALUES[base64.charCodeAt(i + 1)];\r\n        UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];\r\n        UuidTemplate[Indices[j++]] = HexChars[((lhs & 3) << 2) | rhs >> 4];\r\n        UuidTemplate[Indices[j++]] = HexChars[rhs & 0xF];\r\n    }\r\n    return base64.replace(uuid, UuidTemplate.join(''));\r\n}\r\n\r\nif (TEST) {\r\n    legacyCC._Test.decodeUuid = decodeUuid;\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { cclegacy, error } from '../../core';\r\nimport RequestItem from './request-item';\r\nimport { bundles, transformPipeline } from './shared';\r\nimport Task from './task';\r\n\r\nconst _uuidRegex = /.*[/\\\\][0-9a-fA-F]{2}[/\\\\]([0-9a-fA-F-@]{8,}).*/;\r\n\r\nexport { default as decodeUuid } from '../../core/utils/decode-uuid';\r\n\r\n/**\r\n * @en\r\n * Extracts uuid from url.\r\n *\r\n * @zh\r\n * 从 url 中提取 uuid。\r\n *\r\n * @param url @en The url to be converted. @zh 待转换的 url。\r\n * @returns @en The uuid extracted from url. @zh url 转换为的 uuid。\r\n *\r\n * @example\r\n * var url = 'res/import/fc/fc991dd7-0033-4b80-9d41-c8a86a702e59.json';\r\n * var uuid = getUuidFromURL(url); // fc991dd7-0033-4b80-9d41-c8a86a702e59\r\n */\r\nexport function getUuidFromURL (url: string): string {\r\n    const matches = _uuidRegex.exec(url);\r\n    if (matches) {\r\n        return matches[1];\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * @en\r\n * Transforms uuid to url.\r\n *\r\n * @zh\r\n * 转换 uuid 为 url。\r\n *\r\n * @param uuid @en The uuid of asset. @zh 资源的 uuid。\r\n * @param options @en Some optional parameters. @zh 一些可选参数。\r\n * @param options.isNative @en Indicates whether the path you want is a native resource path. @zh 需要转换的路径是否是原生资源路径。\r\n * @param options.nativeExt @en Extension of the native resource path, it is required when isNative is true. @zh 原生资源路径的扩展名，如果 `isNative` 为 true，则需要。\r\n * @returns @en The url converted from uuid. @zh 从 uuid 转换而来的 url.\r\n *\r\n * @example\r\n * // json path, 'assets/main/import/fc/fc991dd7-0033-4b80-9d41-c8a86a702e59.json';\r\n * var url = getUrlWithUuid('fcmR3XADNLgJ1ByKhqcC5Z', {isNative: false});\r\n *\r\n * // png path, 'assets/main/native/fc/fc991dd7-0033-4b80-9d41-c8a86a702e59.png';\r\n * var url = getUrlWithUuid('fcmR3XADNLgJ1ByKhqcC5Z', {isNative: true, nativeExt: '.png'});\r\n *\r\n */\r\nexport function getUrlWithUuid (uuid: string, options?: { [k: string]: any, isNative: boolean, nativeExt?: string } | null): string {\r\n    options = options || Object.create(null);\r\n\r\n    options!.__isNative__ = options!.isNative;\r\n    if (options!.nativeExt) {\r\n        options!.ext = options!.nativeExt;\r\n    }\r\n    const bundle = bundles.find((b): boolean => !!b.getAssetInfo(uuid));\r\n    if (bundle) {\r\n        options!.bundle = bundle.name;\r\n    }\r\n\r\n    return transform(uuid, options) as string;\r\n}\r\n\r\n/**\r\n * @en\r\n * Checks if the type of asset is scene.\r\n *\r\n * @zh\r\n * 检查资源类型是否是场景。\r\n *\r\n * @param asset @en The asset to be checked. @zh 待检查的资源。\r\n * @returns @en Whether or not the asset is a SceneAsset. @zh 此资源是否是场景资源。\r\n *\r\n */\r\nexport function isScene (asset): boolean {\r\n    return !!asset && (asset instanceof cclegacy.SceneAsset || asset instanceof cclegacy.Scene);\r\n}\r\n\r\n/**\r\n * @en\r\n * Normalizes url, strip './' and '/'.\r\n *\r\n * @zh\r\n * 标准化 url ，去除 './' 和 '/'。\r\n *\r\n * @param url @en The url to be normalized. @zh 待标准化的 url。\r\n * @returns @en The normalized url. @zh 标准化后的 url。\r\n */\r\nexport function normalize (url: string): string {\r\n    if (url) {\r\n        if (url.charCodeAt(0) === 46 && url.charCodeAt(1) === 47) {\r\n            // strip './'\r\n            url = url.slice(2);\r\n        } else if (url.charCodeAt(0) === 47) {\r\n            // strip '/'\r\n            url = url.slice(1);\r\n        }\r\n    }\r\n    return url;\r\n}\r\n\r\nexport function transform (input: string | string[] | Record<string, any> | Array<Record<string, any>>, options?: Record<string, any> | null): string | string[] {\r\n    const subTask = Task.create({ input, options });\r\n    const urls: string[] = [];\r\n    try {\r\n        const result: RequestItem[] = transformPipeline.sync(subTask);\r\n        for (const requestItem of result) {\r\n            const url = requestItem.url;\r\n            requestItem.recycle();\r\n            urls.push(url);\r\n        }\r\n    } catch (e) {\r\n        for (const item of subTask.output) {\r\n            item.recycle();\r\n        }\r\n        error((e as Error).message, (e as Error).stack);\r\n    }\r\n    subTask.recycle();\r\n    return urls.length > 1 ? urls : urls[0];\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR, PREVIEW } from 'internal:constants';\r\nimport { _decorator, Eventify, path, debug, getError, CCObject, cclegacy } from '../../core';\r\nimport { getUrlWithUuid } from '../asset-manager/helper';\r\nimport { Node } from '../../scene-graph';\r\nimport type { AssetManager } from '../asset-manager';\r\n\r\nconst { ccclass, serializable, property } = _decorator;\r\n\r\n/**\r\n * @en\r\n * Base class for handling assets used in Creator.<br/>\r\n *\r\n * You may want to override:<br/>\r\n * - createNode<br/>\r\n * - getset functions of _nativeAsset<br/>\r\n * - `Object._serialize`<br/>\r\n * - `Object._deserialize`<br/>\r\n * @zh\r\n * Creator 中的资源基类。<br/>\r\n *\r\n * 您可能需要重写：<br/>\r\n * - createNode <br/>\r\n * - _nativeAsset 的 getset 方法<br/>\r\n * - `Object._serialize`<br/>\r\n * - `Object._deserialize`<br/>\r\n *\r\n * @class Asset\r\n * @extends CCObject\r\n */\r\n@ccclass('cc.Asset')\r\nexport class Asset extends Eventify(CCObject) {\r\n    /**\r\n     * 应 AssetDB 要求提供这个方法。\r\n     * @internal\r\n     * @method deserialize\r\n     * @param {String} data\r\n     * @return {Asset}\r\n     */\r\n    public static deserialize (data): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return cclegacy.deserialize(data);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether the asset is loaded or not\r\n     * @zh\r\n     * 该资源是否已经成功加载。\r\n     *\r\n     * @deprecated since v3.3\r\n     */\r\n    public loaded = true;\r\n\r\n    /**\r\n     * @en\r\n     * The UUID of this asset.\r\n     *\r\n     * @zh\r\n     * 资源的 UUID。\r\n     *\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future, please use [[Asset.uuid]] instead.\r\n     */\r\n    public declare _uuid: string;\r\n\r\n    /**\r\n     * @en\r\n     * Indicates whether this asset is a default asset.\r\n     *\r\n     * @zh\r\n     * 表明此资源是否是默认资源。\r\n     *\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public declare isDefault: boolean;\r\n\r\n    /**\r\n     * @en\r\n     * Serializable url for native asset. For internal usage.\r\n     * @zh\r\n     * 用于本机资产的可序列化URL。供内部使用。\r\n     * @default \"\"\r\n     *\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _native = '';\r\n\r\n    /**\r\n     * @en\r\n     * Path to native dependency.\r\n     * @zh\r\n     * 原生依赖的路径。\r\n     *\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _nativeUrl = '';\r\n\r\n    private _file: any = null;\r\n    private _ref = 0;\r\n\r\n    /**\r\n     * @en\r\n     * Returns the url of this asset's native object, will return an empty string if this asset does not have any native dependency.\r\n     * @zh\r\n     * 返回该资源对应的目标平台资源的 URL，如果此资源没有原生依赖将返回一个空字符串。\r\n     * @readOnly\r\n     */\r\n    get nativeUrl (): string {\r\n        if (!this._nativeUrl) {\r\n            if (!this._native) return '';\r\n            const name = this._native;\r\n            if (name.charCodeAt(0) === 47) {    // '/'\r\n                // remove library tag\r\n                // not imported in library, just created on-the-fly\r\n                return name.slice(1);\r\n            }\r\n            if (name.charCodeAt(0) === 46) {  // '.'\r\n                // imported in dir where json exist\r\n                this._nativeUrl = getUrlWithUuid(this._uuid, { nativeExt: name, isNative: true });\r\n            } else {\r\n                // imported in an independent dir\r\n                this._nativeUrl = getUrlWithUuid(this._uuid, { __nativeName__: name, nativeExt: path.extname(name), isNative: true });\r\n            }\r\n        }\r\n        return this._nativeUrl;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The UUID of this asset.\r\n     *\r\n     * @zh\r\n     * 资源的 UUID。\r\n     */\r\n    get uuid (): string {\r\n        return this._uuid;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future, please use `nativeAsset` instead.\r\n     */\r\n    @property\r\n    get _nativeAsset (): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this._file;\r\n    }\r\n    set _nativeAsset (obj) {\r\n        this._file = obj;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The underlying native asset of this asset if one is available.<br>\r\n     * This property can be used to access additional details or functionality related to the asset.<br>\r\n     * This property will be initialized by the loader if `_native` is available.\r\n     * @zh\r\n     * 此资源的基础资源（如果有）。 此属性可用于访问与资源相关的其他详细信息或功能。<br>\r\n     * 如果`_native`可用，则此属性将由加载器初始化。\r\n     */\r\n    public get nativeAsset (): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this._file;\r\n    }\r\n\r\n    constructor (name?: string) {\r\n        super(name);\r\n\r\n        Object.defineProperty(this, '_uuid', {\r\n            value: '',\r\n            writable: true,\r\n            // enumerable is false by default, to avoid uuid being assigned to empty string during destroy\r\n        });\r\n\r\n        if (EDITOR || PREVIEW) {\r\n            Object.defineProperty(this, 'isDefault', {\r\n                value: false,\r\n                writable: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Returns the string representation of the object.<br>\r\n     * The `Asset` object overrides the `toString()` method of the `Object` object.<br>\r\n     * JavaScript calls the toString() method automatically<br>\r\n     * when an asset is to be represented as a text value or when a texture is referred to in a string concatenation.<br>\r\n     * <br>\r\n     * For assets of the native type, it will return `this.nativeUrl`.<br>\r\n     * Otherwise, an empty string is returned.<br>\r\n     * This method may be overwritten by subclasses.\r\n     * @zh\r\n     * 返回对象的字符串表示形式。<br>\r\n     * `Asset` 对象将会重写 `Object` 对象的 `toString()` 方法。<br>\r\n     * 当资源要表示为文本值时或在字符串连接时引用时，<br>\r\n     * JavaScript 会自动调用 toString() 方法。<br>\r\n     * <br>\r\n     * 对于原始类型的资源，它将返回`this.nativeUrl`。<br>\r\n     * 否则，返回空字符串。<br>\r\n     * 子类可能会覆盖此方法。\r\n     * @method toString\r\n     * @returns @en String representation of this asset. @zh 此资源的字符串表示。\r\n     */\r\n    public toString (): string {\r\n        return this.nativeUrl;\r\n    }\r\n\r\n    /**\r\n     * 应 AssetDB 要求提供这个方法。\r\n     * 返回一个序列化后的对象\r\n     *\r\n     * @method serialize\r\n     * @returns {String}\r\n     * @private\r\n     */\r\n    public serialize (): void { }\r\n\r\n    /**\r\n     * @en\r\n     * Set native file name for this asset.\r\n     * @zh\r\n     * 为此资源设置原始文件名。\r\n     * @seealso nativeUrl\r\n     *\r\n     * @param filename\r\n     * @param inLibrary\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _setRawAsset (filename: string, inLibrary = true): void {\r\n        if (inLibrary !== false) {\r\n            this._native = filename || '';\r\n        } else {\r\n            this._native = `/${filename}`;  // simply use '/' to tag location where is not in the library\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Create a new node using this asset in the scene.<br/>\r\n     * If this type of asset don't have its corresponding node type, this method should be null.\r\n     * @zh\r\n     * 使用该资源在场景中创建一个新节点。<br/>\r\n     * 如果这类资源没有相应的节点类型，该方法应该是空的。\r\n     */\r\n    public createNode? (callback: CreateNodeCallback): void;\r\n\r\n    /**\r\n     * @en\r\n     * Get native dependency information.\r\n     *\r\n     * @zh\r\n     * 获取原生依赖信息。\r\n     *\r\n     * @returns @en The native dependency information. @zh 原生依赖信息。\r\n     *\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public get _nativeDep (): {\r\n        __isNative__: boolean;\r\n        uuid: string;\r\n        ext: string;\r\n    } | undefined {\r\n        if (this._native) {\r\n            return { __isNative__: true, uuid: this._uuid, ext: this._native };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Current reference count to this asset.\r\n     *\r\n     * @zh\r\n     * 当前该资源被引用的数量。\r\n     */\r\n    public get refCount (): number {\r\n        return this._ref;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Increase the reference count. This will prevent assets from being automatically recycled.\r\n     * When you no longer need to hold the asset, you need to using [[decRef]] to decrease the refCount.\r\n     *\r\n     * @zh\r\n     * 增加资源的引用。这将阻止资源被自动释放。当你不再需要持有该资源时，你需要调用 [[decRef]] 来减少引用计数。\r\n     *\r\n     * @returns @en The asset itself. @zh 此资源本身。\r\n     *\r\n     */\r\n    public addRef (): Asset {\r\n        this._ref++;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Decrease the reference count and it will be auto released when refCount equals 0.\r\n     *\r\n     * @zh\r\n     * 减少资源的引用，如果引用数量为 0，则将自动释放该资源。\r\n     *\r\n     * @return @en The asset itself. @zh 此资源本身。\r\n     *\r\n     */\r\n    public decRef (autoRelease = true): Asset {\r\n        if (this._ref > 0) {\r\n            this._ref--;\r\n        }\r\n        if (autoRelease) {\r\n            (cclegacy.assetManager as AssetManager).getReleaseManager().tryRelease(this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * A callback after the asset is loaded that you can use to initialize the asset's internal data.\r\n     *\r\n     * @zh\r\n     * 资源加载后的回调，你可以用于初始化资源的内部数据。\r\n     *\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public onLoaded (): void {}\r\n\r\n    /**\r\n     * @en\r\n     * Initializes default asset.\r\n     *\r\n     * @zh\r\n     * 初始化为默认资源。\r\n     *\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public initDefault (uuid?: string): void {\r\n        if (uuid) { this._uuid = uuid; }\r\n        this.isDefault = true;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Used to verify this asset is an available asset.\r\n     *\r\n     * @zh\r\n     * 用于验证此资源是否为可用资源。\r\n     *\r\n     * @returns @zh 是否是可用资源。@en Whether this asset is available or not.\r\n     * @deprecated Since v3.7, this is an internal engine interface and you should not call this interface under any circumstances.\r\n     */\r\n    public validate (): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Destroy this asset and its internal data.\r\n     *\r\n     * @zh\r\n     * 销毁此资源以及其内部数据。\r\n     */\r\n    public destroy (): boolean {\r\n        debug(getError(12101, this._uuid));\r\n        return super.destroy();\r\n    }\r\n}\r\n\r\n/**\r\n * @param error - null or the error info\r\n * @param node - the created node or null\r\n */\r\ntype CreateNodeCallback = (error: Error | null, node: Node) => void;\r\n\r\nAsset.prototype.createNode = null!;\r\n\r\ncclegacy.Asset = Asset;\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { Asset } from './asset';\r\nimport { cclegacy } from '../../core';\r\n\r\n/**\r\n * @en The script asset base class\r\n * @zh 脚本资源基类。\r\n */\r\n@ccclass('cc.Script')\r\nexport class Script extends Asset {\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n}\r\ncclegacy._Script = Script;\r\n\r\n/**\r\n * @en JavaScript asset.\r\n * @zh JavaScript 脚本资源。\r\n */\r\n@ccclass('cc.JavaScript')\r\nexport class JavaScript extends Script {\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n}\r\ncclegacy._JavaScript = JavaScript;\r\n\r\n/**\r\n * @en TypeScript asset\r\n * @zh TypeScript 脚本资源。\r\n */\r\n@ccclass('cc.TypeScript')\r\nexport class TypeScript extends Script {\r\n    constructor (name?: string) {\r\n        super(name);\r\n    }\r\n}\r\ncclegacy._TypeScript = TypeScript;\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable, editable, tooltip } from 'cc.decorator';\r\nimport type { Node } from './node';\r\nimport { legacyCC } from '../core/global-exports';\r\n\r\n/**\r\n * @en\r\n * The EventHandler class sets the event callback in the scene.\r\n * This class allows the user to set the callback target node, target component name, component method name, and call the target method through the `emit` method.\r\n * @zh\r\n * “EventHandler” 类用来设置场景中的事件回调，该类允许用户设置回调目标节点，目标组件名，组件方法名，并可通过 emit 方法调用目标函数。\r\n *\r\n * @example\r\n * ```ts\r\n * // Let's say we have a MainMenu component on newTarget\r\n * // file: MainMenu.ts\r\n * @ccclass('MainMenu')\r\n * export class MainMenu extends Component {\r\n *     // sender: the node MainMenu.ts belongs to\r\n *     // eventType: CustomEventData\r\n *     onClick (sender, eventType) {\r\n *         cc.log('click');\r\n *     }\r\n * }\r\n *\r\n * import { Component } from 'cc';\r\n * const eventHandler = new Component.EventHandler();\r\n * eventHandler.target = newTarget;\r\n * eventHandler.component = \"MainMenu\";\r\n * eventHandler.handler = \"OnClick\";\r\n * eventHandler.customEventData = \"my data\";\r\n * ```\r\n */\r\n@ccclass('cc.ClickEvent')\r\nexport class EventHandler {\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get _componentName (): any {\r\n        this._genCompIdIfNeeded();\r\n\r\n        return this._compId2Name(this._componentId);\r\n    }\r\n    set _componentName (value) {\r\n        this._componentId = this._compName2Id(value);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Dispatching component events.\r\n     * @zh\r\n     * 组件事件派发。\r\n     *\r\n     * @param events - The event list to be emitted\r\n     * @param args - The callback arguments\r\n     */\r\n    public static emitEvents (events: EventHandler[], ...args: any[]): void {\r\n        for (let i = 0, l = events.length; i < l; i++) {\r\n            const event = events[i];\r\n            if (!(event instanceof EventHandler)) {\r\n                continue;\r\n            }\r\n\r\n            event.emit(args);\r\n        }\r\n    }\r\n    /**\r\n     * @en\r\n     * The node that contains target component\r\n     * @zh\r\n     * 事件响应组件和函数所在节点\r\n     */\r\n    // @type(Node) should be removed for avoid circle reference error\r\n    // the type definition of it deal with in the file './component-event-handler.schema.ts'\r\n    @serializable\r\n    @tooltip('i18n:button.click_event.target')\r\n    public target: Node | null = null;\r\n    /**\r\n     * @en\r\n     * The name of the component(script) that contains target callback, such as the name 'MainMenu' of the script in the example\r\n     * @zh\r\n     * 事件响应函数所在组件名（脚本名）, 比如例子中的脚本名 'MainMenu'\r\n     */\r\n    // only for deserializing old project component field\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:button.click_event.component')\r\n    public component = '';\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _componentId = '';\r\n\r\n    /**\r\n     * @en\r\n     * Event handler, such as the callback function name 'onClick' in the example\r\n     * @zh\r\n     * 响应事件函数名，比如例子中的 'onClick' 方法名\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:button.click_event.handler')\r\n    public handler = '';\r\n\r\n    /**\r\n     * @en\r\n     * Custom Event Data\r\n     * @zh\r\n     * 自定义事件数据\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:button.click_event.customEventData')\r\n    public customEventData = '';\r\n\r\n    /**\r\n     * @en Trigger the target callback with given arguments\r\n     * @zh 触发目标组件上的指定 handler 函数，可以选择传递参数。\r\n     * @param params - The arguments for invoking the callback\r\n     * @example\r\n     * ```ts\r\n     * import { Component } from 'cc';\r\n     * const eventHandler = new Component.EventHandler();\r\n     * eventHandler.target = newTarget;\r\n     * eventHandler.component = \"MainMenu\";\r\n     * eventHandler.handler = \"OnClick\"\r\n     * eventHandler.emit([\"param1\", \"param2\", ....]);\r\n     * ```\r\n     */\r\n    public emit (params: any[]): void {\r\n        const target = this.target;\r\n        if (!legacyCC.isValid(target)) { return; }\r\n\r\n        this._genCompIdIfNeeded();\r\n        const compType = legacyCC.js.getClassById(this._componentId);\r\n\r\n        const comp = target!.getComponent(compType);\r\n        if (!legacyCC.isValid(comp)) { return; }\r\n\r\n        const handler = comp![this.handler];\r\n        if (typeof (handler) !== 'function') { return; }\r\n\r\n        if (this.customEventData != null && this.customEventData !== '') {\r\n            params = params.slice();\r\n            params.push(this.customEventData);\r\n        }\r\n\r\n        handler.apply(comp, params);\r\n    }\r\n\r\n    private _compName2Id (compName): any {\r\n        const comp = legacyCC.js.getClassByName(compName);\r\n        return legacyCC.js.getClassId(comp);\r\n    }\r\n\r\n    private _compId2Name (compId): any {\r\n        const comp = legacyCC.js.getClassById(compId);\r\n        return legacyCC.js.getClassName(comp);\r\n    }\r\n\r\n    // to be deprecated in the future\r\n    private _genCompIdIfNeeded (): void {\r\n        if (!this._componentId) {\r\n            this._componentName = this.component;\r\n            this.component = '';\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * @en All event types which [[Node]] could emit\r\n * @zh 所有 [[Node]] 可能派发的事件类型\r\n */\r\nexport enum NodeEventType {\r\n    /**\r\n     * @en\r\n     * The event type for touch start event\r\n     *\r\n     * @zh\r\n     * 手指开始触摸事件。\r\n     */\r\n    TOUCH_START = 'touch-start',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for touch move event\r\n     *\r\n     * @zh\r\n     * 当手指在屏幕上移动时。\r\n     */\r\n    TOUCH_MOVE = 'touch-move',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for touch end event\r\n     *\r\n     * @zh\r\n     * 手指结束触摸事件。\r\n     */\r\n    TOUCH_END = 'touch-end',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for touch end event\r\n     *\r\n     * @zh\r\n     * 当手指在目标节点区域外离开屏幕时。\r\n     */\r\n    TOUCH_CANCEL = 'touch-cancel',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for mouse down events\r\n     *\r\n     * @zh\r\n     * 当鼠标按下时触发一次。\r\n     */\r\n    MOUSE_DOWN = 'mouse-down',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for mouse move events\r\n     *\r\n     * @zh\r\n     * 当鼠标在目标节点在目标节点区域中移动时，不论是否按下。\r\n     */\r\n    MOUSE_MOVE = 'mouse-move',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for mouse up events\r\n     *\r\n     * @zh\r\n     * 当鼠标从按下状态松开时触发一次。\r\n     */\r\n    MOUSE_UP = 'mouse-up',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for mouse wheel events\r\n     *\r\n     * @zh 手指开始触摸事件\r\n     */\r\n    MOUSE_WHEEL = 'mouse-wheel',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for mouse leave target events\r\n     *\r\n     * @zh\r\n     * 当鼠标移入目标节点区域时，不论是否按下.\r\n     */\r\n    MOUSE_ENTER = 'mouse-enter',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for mouse leave target events\r\n     *\r\n     * @zh\r\n     * 当鼠标移出目标节点区域时，不论是否按下。\r\n     */\r\n    MOUSE_LEAVE = 'mouse-leave',\r\n\r\n    /**\r\n     * @en The event type for press the key down event, the event will be continuously dispatched in the key pressed state\r\n     * @zh 当按下按键时触发的事件, 该事件在按下状态会持续派发\r\n     * @deprecated since v3.3, please use SystemEvent.EventType.KEY_DOWN instead\r\n     */\r\n    KEY_DOWN = 'keydown',\r\n\r\n    /**\r\n     * @en The event type for press the key up event\r\n     * @zh 当松开按键时触发的事件\r\n     * @deprecated since v3.3, please use SystemEvent.EventType.KEY_UP instead\r\n     */\r\n    KEY_UP = 'keyup',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for press the devicemotion event\r\n     *\r\n     * @zh\r\n     * 重力感应\r\n     *\r\n     * @deprecated since v3.3, please use SystemEvent.EventType.DEVICEMOTION instead\r\n     */\r\n    DEVICEMOTION = 'devicemotion',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for position, rotation, scale changed.Use the type parameter as `Node.TransformBit` to check which part is changed\r\n     *\r\n     * @zh\r\n     * 节点改变位置、旋转或缩放事件。如果具体需要判断是哪一个事件，可通过判断回调的第一个参数类型是 `Node.TransformBit` 中的哪一个来获取\r\n     * @example\r\n     * ```\r\n     * this.node.on(Node.EventType.TRANSFORM_CHANGED, (type)=>{\r\n     *  if (type & Node.TransformBit.POSITION) {\r\n     *       //...\r\n     *   }\r\n     * }, this);\r\n     * ```\r\n     */\r\n    TRANSFORM_CHANGED = 'transform-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event occur when mobility changed.\r\n     * @zh\r\n     * 当可移动性改变时触发的事件\r\n     */\r\n    MOBILITY_CHANGED = 'mobility-changed',\r\n\r\n    /**\r\n     * @en The event type for notifying the host scene has been changed for a persist node.\r\n     * @zh 当场景常驻节点的场景发生改变时触发的事件，一般在切换场景过程中触发。\r\n     */\r\n    SCENE_CHANGED_FOR_PERSISTS = 'scene-changed-for-persists',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for size change events.\r\n     * Performance note, this event will be triggered every time corresponding properties being changed,\r\n     * if the event callback have heavy logic it may have great performance impact, try to avoid such scenario.\r\n     *\r\n     * @zh\r\n     * 当节点尺寸改变时触发的事件。\r\n     * 性能警告：这个事件会在每次对应的属性被修改时触发，如果事件回调损耗较高，有可能对性能有很大的负面影响，请尽量避免这种情况。\r\n     */\r\n    SIZE_CHANGED = 'size-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for anchor point change events.\r\n     * Performance note, this event will be triggered every time corresponding properties being changed,\r\n     * if the event callback have heavy logic it may have great performance impact, try to avoid such scenario.\r\n     *\r\n     * @zh\r\n     * 当节点的 UITransform 锚点改变时触发的事件。\r\n     * 性能警告：这个事件会在每次对应的属性被修改时触发，如果事件回调损耗较高，有可能对性能有很大的负面影响，请尽量避免这种情况。\r\n     */\r\n    ANCHOR_CHANGED = 'anchor-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for color change events.\r\n     * Performance note, this event will be triggered every time corresponding properties being changed,\r\n     * if the event callback have heavy logic it may have great performance impact, try to avoid such scenario.\r\n     *\r\n     * @zh\r\n     * 当节点的 UI 渲染组件颜色属性改变时触发的事件。\r\n     * 性能警告：这个事件会在每次对应的属性被修改时触发，如果事件回调损耗较高，有可能对性能有很大的负面影响，请尽量避免这种情况。\r\n     */\r\n    COLOR_CHANGED = 'color-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for adding a new child node to the target node.\r\n     *\r\n     * @zh\r\n     * 给目标节点添加子节点时触发的事件。\r\n     */\r\n    CHILD_ADDED = 'child-added',\r\n\r\n    /**\r\n     * @en\r\n     * The event type for removing a child node from the target node.\r\n     *\r\n     * @zh\r\n     * 给目标节点移除子节点时触发的事件。\r\n     */\r\n    CHILD_REMOVED = 'child-removed',\r\n\r\n    /**\r\n     * @en The event type for changing the parent of the target node\r\n     * @zh 目标节点的父节点改变时触发的事件。\r\n     */\r\n    PARENT_CHANGED = 'parent-changed',\r\n\r\n    /**\r\n     * @en The event type for destroying the target node\r\n     * @zh 目标节点被销毁时触发的事件。\r\n     */\r\n    NODE_DESTROYED = 'node-destroyed',\r\n\r\n    /**\r\n     * @en The event type for node layer change events.\r\n     * @zh 节点 layer 改变时触发的事件。\r\n     */\r\n    LAYER_CHANGED = 'layer-changed',\r\n\r\n    /**\r\n     * @en This event indicates that the order of child nodes has been changed.\r\n     * @zh 该事件表示子节点的排序发生了改变。\r\n     * @deprecated since v3.8.2 @en Please use `CHILDREN_ORDER_CHANGED`. @zh 请使用 `CHILDREN_ORDER_CHANGED`。\r\n     */\r\n    SIBLING_ORDER_CHANGED = 'sibling-order-changed',\r\n\r\n    /**\r\n     * @en This event indicates that the order of child nodes has been changed.\r\n     * @zh 该事件表示子节点的排序发生了改变。\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\r\n    CHILDREN_ORDER_CHANGED = 'sibling-order-changed',\r\n\r\n    /**\r\n     * @en\r\n     * Note: This event is only emitted from the top most node whose active value did changed,\r\n     * not including its child nodes.\r\n     * @zh\r\n     * 注意：此节点激活时，此事件仅从最顶部的节点发出。\r\n     */\r\n    ACTIVE_IN_HIERARCHY_CHANGED = 'active-in-hierarchy-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event occur when node add a new component.\r\n     * @zh\r\n     * 当节点上增加组件时触发的事件\r\n     */\r\n    COMPONENT_ADDED = 'component-added',\r\n\r\n    /**\r\n     * @en\r\n     * The event occur when node remove a component.\r\n     * @zh\r\n     * 当节点上移除组件时触发的事件\r\n     */\r\n    COMPONENT_REMOVED = 'component-removed',\r\n\r\n    /**\r\n     * @en\r\n     * The event occur when light probe changed in light probe group.\r\n     * @zh\r\n     * 当光照探针组组件的探针改变时触发的事件\r\n     */\r\n    LIGHT_PROBE_CHANGED = 'light-probe-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event occur after light probe's baking data is changed\r\n     * @zh\r\n     * 当光照探针烘焙数据修改后触发的事件\r\n     */\r\n    LIGHT_PROBE_BAKING_CHANGED = 'light-probe-baking-changed',\r\n\r\n    /**\r\n     * @en\r\n     * The event is fired if the active state is changed.\r\n     * @zh\r\n     * 当激活状态改变时将触发的事件。\r\n     */\r\n    ACTIVE_CHANGED = 'active-changed',\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayName, type, serializable, disallowAnimation } from 'cc.decorator';\r\nimport { EDITOR, TEST } from 'internal:constants';\r\nimport { Script } from '../asset/assets/scripts';\r\nimport { CCObject, CCObjectFlags } from '../core/data/object';\r\nimport { IDGenerator } from '../core/utils/id-generator';\r\nimport { getClassName, value } from '../core/utils/js';\r\nimport { RenderScene } from '../render-scene/core/render-scene';\r\nimport { Rect } from '../core/math';\r\nimport * as RF from '../core/data/utils/requiring-frame';\r\nimport { Node } from './node';\r\nimport { legacyCC } from '../core/global-exports';\r\nimport { errorID, warnID, assertID } from '../core/platform/debug';\r\nimport { CompPrefabInfo } from './prefab/prefab-info';\r\nimport { EventHandler } from './component-event-handler';\r\n\r\nconst idGenerator = new IDGenerator('Comp');\r\nconst IsOnLoadCalled = CCObjectFlags.IsOnLoadCalled;\r\n\r\nconst NullNode = null as unknown as Node;\r\n\r\n/**\r\n * @en\r\n * Base class for everything attached to Node(Entity).<br/>\r\n * <br/>\r\n * NOTE: Not allowed to use construction parameters for Component's subclasses,\r\n *       because Component is created by the engine.\r\n * @zh\r\n * 所有附加到节点的基类。<br/>\r\n * <br/>\r\n * 注意：不允许使用组件的子类构造参数，因为组件是由引擎创建的。\r\n */\r\n@ccclass('cc.Component')\r\nclass Component extends CCObject {\r\n    public static EventHandler = EventHandler;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public static _executionOrder: number = 0;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public static _requireComponent: Constructor<Component> | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    get name (): string {\r\n        if (this._name) {\r\n            return this._name;\r\n        }\r\n        let className = getClassName(this);\r\n        const trimLeft = className.lastIndexOf('.');\r\n        if (trimLeft >= 0) {\r\n            className = className.slice(trimLeft + 1);\r\n        }\r\n\r\n        if (this.node) {\r\n            return `${this.node.name}<${className}>`;\r\n        } else {\r\n            return className;\r\n        }\r\n    }\r\n    set name (value) {\r\n        this._name = value;\r\n    }\r\n\r\n    /**\r\n     * @en The uuid for editor.\r\n     * @zh 组件的 uuid，用于编辑器。\r\n     * @readOnly\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * log(comp.uuid);\r\n     * ```\r\n     */\r\n    get uuid (): string {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @displayName('Script')\r\n    @type(Script)\r\n    @tooltip('i18n:INSPECTOR.component.script')\r\n    @disallowAnimation\r\n    get __scriptAsset (): null { return null; }\r\n\r\n    /**\r\n     * @en Indicates whether this component is enabled or not.\r\n     * @zh 表示该组件自身是否启用。\r\n     * @default true\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * comp.enabled = true;\r\n     * log(comp.enabled);\r\n     * ```\r\n     */\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n    set enabled (value) {\r\n        if (this._enabled !== value) {\r\n            this._enabled = value;\r\n            if (this.node.activeInHierarchy) {\r\n                const compScheduler = legacyCC.director._compScheduler;\r\n                if (value) {\r\n                    compScheduler.enableComp(this);\r\n                } else {\r\n                    compScheduler.disableComp(this);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether this component is enabled and its node is also active in the hierarchy.\r\n     * @zh 表示该组件是否被启用并且所在的节点也处于激活状态。\r\n     * @readOnly\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * log(comp.enabledInHierarchy);\r\n     * ```\r\n     */\r\n    get enabledInHierarchy (): boolean {\r\n        return this._enabled && this.node && this.node.activeInHierarchy;\r\n    }\r\n\r\n    /**\r\n     * @en Returns a value which used to indicate the onLoad get called or not.\r\n     * @zh 返回一个值用来判断 onLoad 是否被调用过，不等于 0 时调用过，等于 0 时未调用。\r\n     * @readOnly\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * log(this._isOnLoadCalled > 0);\r\n     * ```\r\n     *\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get _isOnLoadCalled (): number {\r\n        return this._objFlags & IsOnLoadCalled;\r\n    }\r\n\r\n    public static system = null;\r\n\r\n    /**\r\n     * @en The node this component is attached to. A component is always attached to a node.\r\n     * @zh 该组件被附加到的节点。组件总会附加到一个节点。\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * log(comp.node);\r\n     * ```\r\n     */\r\n    @serializable\r\n    public node: Node = NullNode;\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _enabled = true;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    @serializable\r\n    public __prefab: CompPrefabInfo | null = null;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _sceneGetter: null | (() => RenderScene) = null;\r\n\r\n    /**\r\n     * For internal usage.\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _id: string = idGenerator.getNewId();\r\n\r\n    // private __scriptUuid = '';\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _getRenderScene (): RenderScene {\r\n        if (this._sceneGetter) {\r\n            return this._sceneGetter();\r\n        }\r\n        return this.node.scene.renderScene!;\r\n    }\r\n\r\n    // PUBLIC\r\n\r\n    /**\r\n     * @en Adds a component class to the node. You can also add component to node by passing in the name of the script.\r\n     * @zh 向节点添加一个指定类型的组件类，你还可以通过传入脚本的名称来添加组件。\r\n     * @param classConstructor The class of component to be retrieved or to be created\r\n     * @example\r\n     * ```ts\r\n     * import { Sprite } from 'cc';\r\n     * const sprite = node.addComponent(Sprite);\r\n     * ```\r\n     */\r\n    public addComponent<T extends Component> (classConstructor: Constructor<T>): T | null;\r\n\r\n    /**\r\n     * @en Adds a component class to the node. You can also add component to node by passing in the name of the script.\r\n     * @zh 向节点添加一个指定类型的组件类，你还可以通过传入脚本的名称来添加组件。\r\n     * @param className A string for the class name of the component\r\n     * @example\r\n     * ```ts\r\n     * const test = node.addComponent(\"Test\");\r\n     * ```\r\n     */\r\n    public addComponent (className: string): Component | null;\r\n\r\n    public addComponent (typeOrClassName: any): Component {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return this.node.addComponent(typeOrClassName);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Returns the component of supplied type if the node has one attached, null if it doesn't.<br/>\r\n     * You can also get component in the node by passing in the name of the script.\r\n     * @zh\r\n     * 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。<br/>\r\n     * 传入参数也可以是脚本的名称。\r\n     * @param classConstructor The class of component to be retrieved or to be created\r\n     * @example\r\n     * ```ts\r\n     * import { Sprite } from 'cc';\r\n     * // get sprite component.\r\n     * var sprite = node.getComponent(Sprite);\r\n     * ```\r\n     */\r\n    public getComponent<T extends Component> (classConstructor: Constructor<T> | AbstractedConstructor<T>): T | null;\r\n\r\n    /**\r\n     * @en\r\n     * Returns the component of supplied type if the node has one attached, null if it doesn't.<br/>\r\n     * You can also get component in the node by passing in the name of the script.\r\n     * @zh\r\n     * 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。<br/>\r\n     * 传入参数也可以是脚本的名称。\r\n     * @param className A string for the class name of the component\r\n     * @example\r\n     * ```ts\r\n     * // get custom test calss.\r\n     * var test = node.getComponent(\"Test\");\r\n     * ```\r\n     */\r\n    public getComponent (className: string): Component | null;\r\n\r\n    public getComponent (typeOrClassName: any): Component | null {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return this.node.getComponent(typeOrClassName);\r\n    }\r\n\r\n    /**\r\n     * @en Returns all components of supplied type in the node.\r\n     * @zh 返回节点上指定类型的所有组件。\r\n     * @param classConstructor The class of components to be retrieved\r\n     * @example\r\n     * ```ts\r\n     * import { Sprite } from 'cc';\r\n     * const sprites = node.getComponents(Sprite);\r\n     * ```\r\n     */\r\n    public getComponents<T extends Component> (classConstructor: Constructor<T> | AbstractedConstructor<T>): T[];\r\n\r\n    /**\r\n     * @en Returns all components of supplied type in the node.\r\n     * @zh 返回节点上指定类型的所有组件。\r\n     * @param className A string for the class name of the components\r\n     * @example\r\n     * ```ts\r\n     * const tests = node.getComponents(\"Test\");\r\n     * ```\r\n     */\r\n    public getComponents (className: string): Component[];\r\n\r\n    public getComponents (typeOrClassName: any): Component[] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return this.node.getComponents(typeOrClassName);\r\n    }\r\n\r\n    /**\r\n     * @en Returns the component of supplied type in any of its children using depth first search.\r\n     * @zh 递归查找所有子节点中第一个匹配指定类型的组件。\r\n     * @param classConstructor The class of component to be retrieved\r\n     * @example\r\n     * ```ts\r\n     * import { Sprite } from 'cc';\r\n     * const sprite = node.getComponentInChildren(Sprite);\r\n     * ```\r\n     */\r\n    public getComponentInChildren<T extends Component> (classConstructor: Constructor<T> | AbstractedConstructor<T>): T | null;\r\n\r\n    /**\r\n     * @en Returns the component of supplied type in any of its children using depth first search.\r\n     * @zh 递归查找所有子节点中第一个匹配指定类型的组件。\r\n     * @param className A string for the class name of the component\r\n     * @example\r\n     * ```ts\r\n     * var Test = node.getComponentInChildren(\"Test\");\r\n     * ```\r\n     */\r\n    public getComponentInChildren (className: string): Component | null;\r\n\r\n    public getComponentInChildren (typeOrClassName: any): Component | null {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return this.node.getComponentInChildren(typeOrClassName);\r\n    }\r\n\r\n    /**\r\n     * @en Returns all components of supplied type in self or any of its children.\r\n     * @zh 递归查找自身或所有子节点中指定类型的组件。\r\n     * @param classConstructor The class of components to be retrieved\r\n     * @example\r\n     * ```ts\r\n     * import { Sprite } from 'cc';\r\n     * const sprites = node.getComponentsInChildren(Sprite);\r\n     * ```\r\n     */\r\n    public getComponentsInChildren<T extends Component> (classConstructor: Constructor<T> | AbstractedConstructor<T>): T[];\r\n\r\n    /**\r\n     * @en Returns all components of supplied type in self or any of its children.\r\n     * @zh 递归查找自身或所有子节点中指定类型的组件。\r\n     * @param className A string for the class name of the components\r\n     * @example\r\n     * ```ts\r\n     * const tests = node.getComponentsInChildren(\"Test\");\r\n     * ```\r\n     */\r\n    public getComponentsInChildren (className: string): Component[];\r\n\r\n    public getComponentsInChildren (typeOrClassName: any): Component[] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        return this.node.getComponentsInChildren(typeOrClassName);\r\n    }\r\n\r\n    // OVERRIDE\r\n\r\n    public destroy (): boolean {\r\n        if (EDITOR) {\r\n            // TODO: `_getDependComponent` is an injected method.\r\n            // issue: https://github.com/cocos/cocos-engine/issues/14643\r\n            const depend = (this.node as any)._getDependComponent(this);\r\n            if (depend.length > 0) {\r\n                errorID(\r\n                    3626,\r\n                    getClassName(this),\r\n                    getClassName(depend[0]),\r\n                );\r\n                return false;\r\n            }\r\n        }\r\n        if (super.destroy()) {\r\n            if (this._enabled && this.node.activeInHierarchy) {\r\n                legacyCC.director._compScheduler.disableComp(this);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _onPreDestroy (): void {\r\n        // Schedules\r\n        this.unscheduleAllCallbacks();\r\n\r\n        // onDestroy\r\n        legacyCC.director._nodeActivator.destroyComp(this);\r\n\r\n        // do remove component\r\n        this.node._removeComponent(this);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _instantiate (cloned?: Component): Component | undefined {\r\n        if (!cloned) {\r\n            cloned = legacyCC.instantiate._clone(this, this);\r\n        }\r\n\r\n        if (cloned) {\r\n            cloned.node = NullNode;\r\n        }\r\n\r\n        return cloned;\r\n    }\r\n\r\n    // Scheduler\r\n\r\n    /**\r\n     * @en\r\n     * Use Scheduler system to schedule a custom task.<br/>\r\n     * If the task is already scheduled, then the interval parameter will be updated without scheduling it again.\r\n     * @zh\r\n     * 使用定时器系统调度一个自定义的回调任务。<br/>\r\n     * 如果回调任务已调度，那么将不会重复调度它，只会更新时间间隔参数。\r\n     * @param callback  The callback function of the task\r\n     * @param interval  The time interval between each invocation\r\n     * @param repeat    The repeat count of this task, the task will be invoked (repeat + 1) times, use [[macro.REPEAT_FOREVER]] to repeat a task forever\r\n     * @param delay     The delay time for the first invocation, Unit: s\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * this.schedule((dt) => void log(`time: ${dt}`), 1);\r\n     * ```\r\n     */\r\n    public schedule (callback, interval = 0, repeat: number = legacyCC.macro.REPEAT_FOREVER, delay = 0): void {\r\n        assertID(Boolean(callback), 1619);\r\n\r\n        interval = interval || 0;\r\n        assertID(interval >= 0, 1620);\r\n\r\n        repeat = Number.isNaN(repeat) ? legacyCC.macro.REPEAT_FOREVER : repeat;\r\n        delay = delay || 0;\r\n\r\n        const scheduler = legacyCC.director.getScheduler();\r\n\r\n        // should not use enabledInHierarchy to judge whether paused,\r\n        // because enabledInHierarchy is assigned after onEnable.\r\n        // Actually, if not yet scheduled, resumeTarget/pauseTarget has no effect on component,\r\n        // therefore there is no way to guarantee the paused state other than isTargetPaused.\r\n        const paused = scheduler.isTargetPaused(this);\r\n\r\n        scheduler.schedule(callback, this, interval, repeat, delay, paused);\r\n    }\r\n\r\n    /**\r\n     * @en Use Scheduler system to schedule a task that runs only once, with a delay of 0 or larger.\r\n     * @zh 使用定时器系统调度一个只运行一次的回调任务，可以指定 0 让回调函数在下一帧立即执行或者在一定的延时之后执行。\r\n     * @method scheduleOnce\r\n     * @see [[schedule]]\r\n     * @param callback  The callback function of the task\r\n     * @param delay  The delay time for the first invocation, Unit: s\r\n     * @example\r\n     * ```ts\r\n     * import { log } from 'cc';\r\n     * this.scheduleOnce((dt) => void log(`time: ${dt}`), 2);\r\n     * ```\r\n     */\r\n    public scheduleOnce (callback, delay = 0): void {\r\n        this.schedule(callback, 0, 0, delay);\r\n    }\r\n\r\n    /**\r\n     * @en Un-schedules a custom task.\r\n     * @zh 取消调度一个自定义的回调任务。\r\n     * @param callback_fn  The callback function of the task\r\n     * @example\r\n     * ```ts\r\n     * this.unschedule(_callback);\r\n     * ```\r\n     */\r\n    public unschedule (callback_fn): void {\r\n        if (!callback_fn) {\r\n            return;\r\n        }\r\n\r\n        legacyCC.director.getScheduler().unschedule(callback_fn, this);\r\n    }\r\n\r\n    /**\r\n     * @en unschedule all scheduled tasks.\r\n     * @zh 取消调度所有已调度的回调函数。\r\n     * @example\r\n     * ```ts\r\n     * this.unscheduleAllCallbacks();\r\n     * ```\r\n     */\r\n    public unscheduleAllCallbacks (): void {\r\n        legacyCC.director.getScheduler().unscheduleAllForTarget(this);\r\n    }\r\n\r\n    // LIFECYCLE METHODS\r\n\r\n    // Cocos Creator provides lifecycle methods that you can specify to hook into this process.\r\n    // We provide Pre methods, which are called right before something happens, and Post methods which are called right after something happens.\r\n\r\n    /**\r\n     * @en Update is called every frame, if the Component is enabled.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.<br/>\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh 如果该组件启用，则每帧调用 update。<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     * @param dt - the delta time in seconds it took to complete the last frame\r\n     */\r\n    protected update? (dt: number): void;\r\n\r\n    /**\r\n     * @engineInternal `update` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalUpdate (): ((dt: number) => void) | undefined {\r\n        return this.update;\r\n    }\r\n\r\n    /**\r\n     * @en LateUpdate is called every frame, if the Component is enabled.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.<br/>\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh 如果该组件启用，则每帧调用 LateUpdate。<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     * @param dt - the delta time in seconds it took to complete the last frame\r\n     */\r\n    protected lateUpdate? (dt: number): void;\r\n\r\n    /**\r\n     * @engineInternal `lateUpdate` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalLateUpdate (): ((dt: number) => void) | undefined {\r\n        return this.lateUpdate;\r\n    }\r\n\r\n    /**\r\n     * @en `__preload` is called before every onLoad.<br/>\r\n     * It is used to initialize the builtin components internally,<br/>\r\n     * to avoid checking whether onLoad is called before every public method calls.<br/>\r\n     * This method should be removed if script priority is supported.\r\n     * @zh `__preload` 在每次onLoad之前调用。<br/>\r\n     * 它用于在内部初始化内置组件，<br/>\r\n     * 以避免在每次公有方法调用之前检查是否调用了onLoad。<br/>\r\n     * 如果支持脚本优先级，则应删除此方法。\r\n     * @private\r\n     */\r\n    protected __preload? (): void;\r\n\r\n    /**\r\n     * @engineInternal `__preload` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalPreload (): (() => void) | undefined {\r\n        return this.__preload;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * When attaching to an active node or its node first activated.<br/>\r\n     * onLoad is always called before any start functions, this allows you to order initialization of scripts.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.<br/>\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh\r\n     * 当附加到一个激活的节点上或者其节点第一次激活时候调用。onLoad 总是会在任何 start 方法调用前执行，这能用于安排脚本的初始化顺序。<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     */\r\n    protected onLoad? (): void;\r\n\r\n    /**\r\n     * @engineInternal `onLoad` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalOnLoad (): (() => void) | undefined {\r\n        return this.onLoad;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Called before all scripts' update if the Component is enabled the first time.<br/>\r\n     * Usually used to initialize some logic which need to be called after all components' `onload` methods called.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.<br/>\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh\r\n     * 如果该组件第一次启用，则在所有组件的 update 之前调用。通常用于需要在所有组件的 onLoad 初始化完毕后执行的逻辑。<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     */\r\n    protected start? (): void;\r\n\r\n    /**\r\n     * @engineInternal `start` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalStart (): (() => void) | undefined {\r\n        return this.start;\r\n    }\r\n\r\n    /**\r\n     * @en Called when this component becomes enabled and its node is active.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh 当该组件被启用，并且它的节点也激活时。<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     */\r\n    protected onEnable? (): void;\r\n\r\n    /**\r\n     * @engineInternal `onEnable` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalOnEnable (): (() => void) | undefined {\r\n        return this.onEnable;\r\n    }\r\n\r\n    /**\r\n     * @en Called when this component becomes disabled or its node becomes inactive.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh 当该组件被禁用或节点变为无效时调用。<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     */\r\n    protected onDisable? (): void;\r\n\r\n    /**\r\n     * @engineInternal `onDisable` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalOnDisable (): (() => void) | undefined {\r\n        return this.onDisable;\r\n    }\r\n\r\n    /**\r\n     * @en Called when this component will be destroyed.<br/>\r\n     * This is a lifecycle method. It may not be implemented in the super class.<br/>\r\n     * You can only call its super class method inside it. It should not be called manually elsewhere.\r\n     * @zh 当该组件被销毁时调用<br/>\r\n     * 该方法为生命周期方法，父类未必会有实现。并且你只能在该方法内部调用父类的实现，不可在其它地方直接调用该方法。\r\n     */\r\n    protected onDestroy? (): void;\r\n\r\n    /**\r\n     * @engineInternal `onDestroy` is a protected property, we provide this public property for engine internal usage.\r\n     */\r\n    public get internalOnDestroy (): (() => void) | undefined {\r\n        return this.onDestroy;\r\n    }\r\n\r\n    public onFocusInEditor? (): void;\r\n\r\n    public onLostFocusInEditor? (): void;\r\n\r\n    /**\r\n     * @en Called to initialize the component or node’s properties when adding the component the first time or when the Reset command is used.\r\n     * This function is only called in editor.<br/>\r\n     * @zh 用来初始化组件或节点的一些属性，当该组件被第一次添加到节点上或用户点击了它的 Reset 菜单时调用。这个回调只会在编辑器下调用。\r\n     */\r\n    public resetInEditor? (didResetToDefault?: boolean): void;\r\n\r\n    // VIRTUAL\r\n\r\n    /**\r\n     * @en\r\n     * If the component's bounding box is different from the node's, you can implement this method to supply\r\n     * a custom axis aligned bounding box (AABB), so the editor's scene view can perform hit test properly.\r\n     * @zh\r\n     * 如果组件的包围盒与节点不同，您可以实现该方法以提供自定义的轴向对齐的包围盒（AABB），\r\n     * 以便编辑器的场景视图可以正确地执行点选测试。\r\n     * @param out_rect - The rect to store the result bounding rect\r\n     * @private\r\n     */\r\n    protected _getLocalBounds? (out_rect: Rect): void;\r\n\r\n    /**\r\n     * @en\r\n     * onRestore is called after the user clicks the Reset item in the Inspector's context menu or performs\r\n     * an undo operation on this component.<br/>\r\n     * <br/>\r\n     * If the component contains the \"internal state\", short for \"temporary member variables which not included<br/>\r\n     * in its CCClass properties\", then you may need to implement this function.<br/>\r\n     * <br/>\r\n     * The editor will call the getset accessors of your component to record/restore the component's state<br/>\r\n     * for undo/redo operation. However, in extreme cases, it may not works well. Then you should implement<br/>\r\n     * this function to manually synchronize your component's \"internal states\" with its public properties.<br/>\r\n     * Once you implement this function, all the getset accessors of your component will not be called when<br/>\r\n     * the user performs an undo/redo operation. Which means that only the properties with default value<br/>\r\n     * will be recorded or restored by editor.<br/>\r\n     * <br/>\r\n     * Similarly, the editor may failed to reset your component correctly in extreme cases. Then if you need<br/>\r\n     * to support the reset menu, you should manually synchronize your component's \"internal states\" with its<br/>\r\n     * properties in this function. Once you implement this function, all the getset accessors of your component<br/>\r\n     * will not be called during reset operation. Which means that only the properties with default value<br/>\r\n     * will be reset by editor.\r\n     *\r\n     * This function is only called in editor mode.\r\n     * @zh\r\n     * onRestore 是用户在检查器菜单点击 Reset 时，对此组件执行撤消操作后调用的。<br/>\r\n     * <br/>\r\n     * 如果组件包含了“内部状态”（不在 CCClass 属性中定义的临时成员变量），那么你可能需要实现该方法。<br/>\r\n     * <br/>\r\n     * 编辑器执行撤销/重做操作时，将调用组件的 get set 来录制和还原组件的状态。\r\n     * 然而，在极端的情况下，它可能无法良好运作。<br/>\r\n     * 那么你就应该实现这个方法，手动根据组件的属性同步“内部状态”。\r\n     * 一旦你实现这个方法，当用户撤销或重做时，组件的所有 get set 都不会再被调用。\r\n     * 这意味着仅仅指定了默认值的属性将被编辑器记录和还原。<br/>\r\n     * <br/>\r\n     * 同样的，编辑可能无法在极端情况下正确地重置您的组件。<br/>\r\n     * 于是如果你需要支持组件重置菜单，你需要在该方法中手工同步组件属性到“内部状态”。<br/>\r\n     * 一旦你实现这个方法，组件的所有 get set 都不会在重置操作时被调用。\r\n     * 这意味着仅仅指定了默认值的属性将被编辑器重置。\r\n     * <br/>\r\n     * 此方法仅在编辑器下会被调用。\r\n     */\r\n    protected onRestore? (): void;\r\n}\r\n\r\n// NOTE: these are all injected properties\r\nif (EDITOR || TEST) {\r\n    // INHERITABLE STATIC MEMBERS\r\n    (Component as any)._executeInEditMode = false;\r\n    (Component as any)._playOnFocus = false;\r\n    (Component as any)._disallowMultiple = null;\r\n    (Component as any)._help = '';\r\n\r\n    // NON-INHERITED STATIC MEMBERS\r\n    // (TypeScript 2.3 will still inherit them, so always check hasOwnProperty before using)\r\n\r\n    value(Component, '_inspector', '', true);\r\n    value(Component, '_icon', '', true);\r\n\r\n    // COMPONENT HELPERS\r\n\r\n    // TODO Keep temporarily, compatible with old version\r\n    legacyCC._componentMenuItems = [];\r\n}\r\n\r\n// we make this non-enumerable, to prevent inherited by sub classes.\r\nvalue(Component, '_registerEditorProps', (cls, props): void => {\r\n    let reqComp = props.requireComponent;\r\n    if (reqComp) {\r\n        if (Array.isArray(reqComp)) {\r\n            reqComp = reqComp.filter(Boolean);\r\n        }\r\n        cls._requireComponent = reqComp;\r\n    }\r\n    const order = props.executionOrder;\r\n    if (order && typeof order === 'number') {\r\n        cls._executionOrder = order;\r\n    }\r\n    if (EDITOR || TEST) {\r\n        const name = getClassName(cls);\r\n        for (const key in props) {\r\n            const val = props[key];\r\n            switch (key) {\r\n            case 'executeInEditMode':\r\n                cls._executeInEditMode = !!val;\r\n                break;\r\n\r\n            case 'playOnFocus':\r\n                if (val) {\r\n                    const willExecuteInEditMode = ('executeInEditMode' in props) ? props.executeInEditMode : cls._executeInEditMode;\r\n                    if (willExecuteInEditMode) {\r\n                        cls._playOnFocus = true;\r\n                    } else {\r\n                        warnID(3601, name);\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case 'inspector':\r\n                value(cls as Record<string | number, any>, '_inspector', val, true);\r\n                break;\r\n\r\n            case 'icon':\r\n                value(cls as Record<string | number, any>, '_icon', val, true);\r\n                break;\r\n\r\n            case 'menu':\r\n            {\r\n                const frame = RF.peek();\r\n                let menu = val;\r\n                if (frame && !menu.includes('/')) {\r\n                    menu = `i18n:menu.custom_script/${menu}`;\r\n                }\r\n\r\n                if (EDITOR) {\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                    EditorExtends.Component.removeMenu(cls);\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                    EditorExtends.Component.addMenu(cls, menu, props.menuPriority);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 'disallowMultiple':\r\n                cls._disallowMultiple = cls;\r\n                break;\r\n\r\n            case 'requireComponent':\r\n            case 'executionOrder':\r\n                // skip here\r\n                break;\r\n\r\n            case 'help':\r\n                cls._help = val;\r\n                break;\r\n\r\n            default:\r\n                warnID(3602, key, name);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nlegacyCC.Component = Component;\r\nexport { Component };\r\n"],"names":["EXTNAME_RE","DIRNAME_RE","NORMALIZE_RE","join","result","_len","arguments","length","segments","Array","_key","forEach","segment","replace","extname","path","temp","exec","mainFileName","fileName","idx","lastIndexOf","substring","basename","extName","index","indexOf","baseName","toLowerCase","dirname","changeExtname","tempStr","changeBasename","newBaseName","keepExt","ext","_normalize","url","oldUrl","String","stripSep","getSeperator","systemInfo","os","OS","WINDOWS","Cache","map","this","_map","_count","Object","keys","js","_proto","prototype","add","key","val","get","has","remove","out","clear","func","find","predicate","destroy","_createClass","Pipeline","name","funcs","id","_pipelineId","pipes","i","l","push","insert","warnID","splice","append","sync","task","isFinished","pipe","input","output","async","_flow","_this","dispatch","exports","assets","RequestType","BuiltinBundleName","bundles","transformPipeline","Map","default","priority","preload","maxConcurrency","maxRequestsPerFrame","scene","bundle","remote","maxRetryCount","Task","options","_taskId","onComplete","onProgress","onError","source","progress","set","create","_deadPool","pop","event","param1","param2","param3","param4","str","toUpperCase","recycle","MAX_DEAD_NUM","separator","HexChars","split","_t","UuidTemplate","concat","Indices","x","NaN","filter","Number","isFinite","decodeUuid","base64","uuid","j","lhs","BASE64_VALUES","charCodeAt","rhs","_uuidRegex","getUuidFromURL","matches","getUrlWithUuid","__isNative__","isNative","nativeExt","b","getAssetInfo","transform","isScene","asset","cclegacy","SceneAsset","Scene","normalize","slice","subTask","urls","_step","_iterator","_createForOfIteratorHelperLoose","done","requestItem","value","e","_step2","_iterator2","error","message","stack","serializable","_decorator","property","Asset","_dec","_class2","_Eventify","call","loaded","_native","_initializer","_nativeUrl","_file","_ref","defineProperty","_assertThisInitialized","writable","_inheritsLoose","deserialize","data","toString","nativeUrl","serialize","_setRawAsset","filename","inLibrary","addRef","decRef","autoRelease","assetManager","getReleaseManager","tryRelease","onLoaded","initDefault","_uuid","isDefault","validate","debug","getError","__nativeName__","obj","Eventify","CCObject","_applyDecoratedDescriptor","getOwnPropertyDescriptor","_class","createNode","Script","ccclass","_Asset","_Script","JavaScript","_dec2","_JavaScript","TypeScript","_dec3","_class3","_Script2","_TypeScript","NodeEventType","EventHandler","target","component","_initializer2","_componentId","_initializer3","handler","_initializer4","customEventData","_initializer5","emitEvents","events","args","emit","params","legacyCC","isValid","_genCompIdIfNeeded","compType","getClassById","comp","getComponent","apply","_compName2Id","compName","getClassByName","getClassId","_compId2Name","compId","getClassName","_componentName","_applyDecoratedInitializer","idGenerator","IDGenerator","IsOnLoadCalled","CCObjectFlags","Component","type","_CCObject","node","_enabled","__prefab","_sceneGetter","_id","getNewId","_getRenderScene","renderScene","addComponent","typeOrClassName","getComponents","getComponentInChildren","getComponentsInChildren","activeInHierarchy","director","_compScheduler","disableComp","_onPreDestroy","unscheduleAllCallbacks","_nodeActivator","destroyComp","_removeComponent","_instantiate","cloned","instantiate","_clone","schedule","callback","interval","repeat","delay","macro","REPEAT_FOREVER","assertID","Boolean","isNaN","scheduler","getScheduler","paused","isTargetPaused","scheduleOnce","unschedule","callback_fn","unscheduleAllForTarget","_name","className","trimLeft","compScheduler","enableComp","_objFlags","update","lateUpdate","__preload","onLoad","start","onEnable","onDisable","onDestroy","_executionOrder","_requireComponent","system","cls","props","reqComp","requireComponent","isArray","order","executionOrder"],"mappings":"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"}