{"version":3,"file":"particle-2d.js","sources":["../../../cocos/particle-2d/define.ts","../../../cocos/particle-2d/particle-simulator-2d.ts","../../../cocos/particle-2d/particle-asset.ts","../../../cocos/particle-2d/png-reader.ts","../../../cocos/particle-2d/particle-system-2d.ts","../../../cocos/particle-2d/tiff-reader.ts","../../../cocos/particle-2d/motion-streak-2d.ts","../../../cocos/particle-2d/motion-streak-2d-assembler.ts","../../../cocos/particle-2d/particle-system-2d-assembler.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Enum } from '../core';\r\n\r\n/**\r\n * @en The Particle emitter lives forever.\r\n * @zh 表示发射器永久存在\r\n * @static\r\n * @readonly\r\n */\r\nexport const DURATION_INFINITY = -1;\r\n\r\n/**\r\n * @en The starting size of the particle is equal to the ending size.\r\n * @zh 表示粒子的起始大小等于结束大小。\r\n * @static\r\n * @readonly\r\n */\r\nexport const START_SIZE_EQUAL_TO_END_SIZE = -1;\r\n\r\n/**\r\n * @en The starting radius of the particle is equal to the ending radius.\r\n * @zh 表示粒子的起始半径等于结束半径。\r\n * @static\r\n * @readonly\r\n */\r\nexport const START_RADIUS_EQUAL_TO_END_RADIUS = -1;\r\n\r\n/**\r\n * @en Enum for emitter modes\r\n * @zh 发射模式\r\n * @enum ParticleSystem.EmitterMode\r\n */\r\nexport const EmitterMode = Enum({\r\n    /**\r\n     * @en Uses gravity, speed, radial and tangential acceleration.\r\n     * @zh 重力模式，模拟重力，可让粒子围绕一个中心点移近或移远。\r\n     */\r\n    GRAVITY: 0,\r\n    /**\r\n     * @en Uses radius movement + rotation.\r\n     * @zh 半径模式，可以使粒子以圆圈方式旋转，它也可以创造螺旋效果让粒子急速前进或后退。\r\n     */\r\n    RADIUS: 1,\r\n});\r\n\r\n/**\r\n * @en Enum for particles movement type.\r\n * @zh 粒子位置类型\r\n * @enum ParticleSystem.PositionType\r\n */\r\nexport const PositionType = Enum({\r\n    /**\r\n     * @en\r\n     * Living particles are attached to the world and are unaffected by emitter repositioning.\r\n     * @zh\r\n     * 自由模式，相对于世界坐标，不会随粒子节点移动而移动。（可产生火焰、蒸汽等效果）\r\n     */\r\n    FREE: 0,\r\n\r\n    /**\r\n     * @en\r\n     * In the relative mode, the particle will move with the parent node, but not with the node where the particle is.\r\n     * For example, the coffee in the cup is steaming. Then the steam moves (forward) with the train, rather than moves with the cup.\r\n     * @zh\r\n     * 相对模式，粒子会跟随父节点移动，但不跟随粒子所在节点移动，例如在一列行进火车中，杯中的咖啡飘起雾气，\r\n     * 杯子移动，雾气整体并不会随着杯子移动，但从火车整体的角度来看，雾气整体会随着火车移动。\r\n     */\r\n    RELATIVE: 1,\r\n\r\n    /**\r\n     * @en\r\n     * Living particles are attached to the emitter and are translated along with it.\r\n     * @zh\r\n     * 整组模式，粒子跟随发射器移动。（不会发生拖尾）\r\n     */\r\n    GROUPED: 2,\r\n});\r\n","/*\r\n Copyright (c) 2018-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec2, Color, js, random, IColorLike, Vec4, clamp, toRadian, toDegree } from '../core';\r\nimport { vfmtPosUvColor, getComponentPerVertex } from '../2d/renderer/vertex-format';\r\nimport { PositionType, EmitterMode, START_SIZE_EQUAL_TO_END_SIZE, START_RADIUS_EQUAL_TO_END_RADIUS } from './define';\r\nimport type { ParticleSystem2D } from './particle-system-2d';\r\nimport type { MeshRenderData } from '../2d/renderer/render-data';\r\nimport type { Particle2DAssembler } from './particle-system-2d-assembler';\r\n\r\nconst _pos = new Vec2();\r\nconst _tpa = new Vec2();\r\nconst _tpb = new Vec2();\r\nconst _tpc = new Vec2();\r\nconst _col = new Vec4();\r\n\r\nconst formatBytes = getComponentPerVertex(vfmtPosUvColor);\r\n\r\n// In the Free mode to get emit real rotation in the world coordinate.\r\nfunction getWorldRotation (node): number {\r\n    let rotation = 0;\r\n    let tempNode = node;\r\n    while (tempNode) {\r\n        rotation += tempNode.eulerAngles.z;\r\n        tempNode = tempNode.parent;\r\n    }\r\n    return rotation;\r\n}\r\n\r\nclass Particle {\r\n    public pos = new Vec2(0, 0);\r\n    public startPos = new Vec2(0, 0);\r\n    public color = new Color(0, 0, 0, 255);\r\n    public deltaColor = { r: 0, g: 0, b: 0, a: 255 };\r\n    public size = 0;\r\n    public deltaSize = 0;\r\n    public rotation = 0;\r\n    public deltaRotation = 0;\r\n    public timeToLive = 0;\r\n    public drawPos = new Vec2(0, 0);\r\n    public aspectRatio = 1;\r\n    // Mode A\r\n    public dir = new Vec2(0, 0);\r\n    public radialAccel = 0;\r\n    public tangentialAccel = 0;\r\n    // Mode B\r\n    public angle = 0;\r\n    public degreesPerSecond = 0;\r\n    public radius = 0;\r\n    public deltaRadius = 0;\r\n}\r\n\r\nclass ParticlePool extends js.Pool<Particle> {\r\n    public get (): Particle {\r\n        return this._get() || new Particle();\r\n    }\r\n}\r\n\r\nconst pool = new ParticlePool((par: Particle): void => {\r\n    par.pos.set(Vec2.ZERO);\r\n    par.startPos.set(Vec2.ZERO);\r\n    par.color.set(0, 0, 0, 255);\r\n    par.deltaColor.r = par.deltaColor.g = par.deltaColor.b = 0;\r\n    par.deltaColor.a = 255;\r\n    par.size = 0;\r\n    par.deltaSize = 0;\r\n    par.rotation = 0;\r\n    par.deltaRotation = 0;\r\n    par.timeToLive = 0;\r\n    par.drawPos.set(Vec2.ZERO);\r\n    par.aspectRatio = 1;\r\n    // Mode A\r\n    par.dir.set(Vec2.ZERO);\r\n    par.radialAccel = 0;\r\n    par.tangentialAccel = 0;\r\n    // Mode B\r\n    par.angle = 0;\r\n    par.degreesPerSecond = 0;\r\n    par.radius = 0;\r\n    par.deltaRadius = 0;\r\n}, 1024);\r\n\r\nexport class Simulator {\r\n    public particles: Particle[] = [];\r\n    public active = false;\r\n    public uvFilled = 0;\r\n    public finished = false;\r\n    public renderData: MeshRenderData | null = null;\r\n    private readyToPlay = true;\r\n    private elapsed = 0;\r\n    private emitCounter = 0;\r\n    private _worldRotation = 0;\r\n    private declare sys: ParticleSystem2D;\r\n\r\n    constructor (system) {\r\n        this.sys = system;\r\n        this.particles = [];\r\n        this.active = false;\r\n        this.readyToPlay = true;\r\n        this.finished = false;\r\n        this.elapsed = 0;\r\n        this.emitCounter = 0;\r\n        this.uvFilled = 0;\r\n        this._worldRotation = 0;\r\n    }\r\n\r\n    public stop (): void {\r\n        this.active = false;\r\n        this.readyToPlay = false;\r\n        this.elapsed = this.sys.duration;\r\n        this.emitCounter = 0;\r\n    }\r\n\r\n    public reset (): void {\r\n        this.active = true;\r\n        this.readyToPlay = true;\r\n        this.elapsed = 0;\r\n        this.emitCounter = 0;\r\n        this.finished = false;\r\n        const particles = this.particles;\r\n        for (let id = 0; id < particles.length; ++id) pool.put(particles[id]);\r\n        particles.length = 0;\r\n        if (this.renderData) this.renderData.resize(0, 0);\r\n    }\r\n\r\n    public emitParticle (pos): void {\r\n        const psys = this.sys;\r\n        const particle = pool.get();\r\n        this.particles.push(particle);\r\n\r\n        // Init particle\r\n        // timeToLive\r\n        // no negative life. prevent division by 0\r\n        particle.timeToLive = psys.life + psys.lifeVar * (random() - 0.5) * 2;\r\n        const timeToLive = particle.timeToLive = Math.max(0, particle.timeToLive);\r\n\r\n        // position\r\n        particle.pos.x = psys.sourcePos.x + psys.posVar.x * (random() - 0.5) * 2;\r\n        particle.pos.y = psys.sourcePos.y + psys.posVar.y * (random() - 0.5) * 2;\r\n\r\n        // Color\r\n        let sr = 0;\r\n        let sg = 0;\r\n        let sb = 0;\r\n        let sa = 0;\r\n        const startColor = psys.startColor;\r\n        const startColorVar = psys.startColorVar;\r\n        const endColor = psys.endColor;\r\n        const endColorVar = psys.endColorVar;\r\n\r\n        particle.color.r = sr = clamp(startColor.r + startColorVar.r * (random() - 0.5) * 2, 0, 255);\r\n        particle.color.g = sg = clamp(startColor.g + startColorVar.g * (random() - 0.5) * 2, 0, 255);\r\n        particle.color.b = sb = clamp(startColor.b + startColorVar.b * (random() - 0.5) * 2, 0, 255);\r\n        particle.color.a = sa = clamp(startColor.a + startColorVar.a * (random() - 0.5) * 2, 0, 255);\r\n        particle.deltaColor.r = (clamp(endColor.r + endColorVar.r * (random() - 0.5) * 2, 0, 255) - sr) / timeToLive;\r\n        particle.deltaColor.g = (clamp(endColor.g + endColorVar.g * (random() - 0.5) * 2, 0, 255) - sg) / timeToLive;\r\n        particle.deltaColor.b = (clamp(endColor.b + endColorVar.b * (random() - 0.5) * 2, 0, 255) - sb) / timeToLive;\r\n        particle.deltaColor.a = (clamp(endColor.a + endColorVar.a * (random() - 0.5) * 2, 0, 255) - sa) / timeToLive;\r\n\r\n        // size\r\n        let startS = psys.startSize + psys.startSizeVar * (random() - 0.5) * 2;\r\n        startS = Math.max(0, startS); // No negative value\r\n        particle.size = startS;\r\n        if (psys.endSize === START_SIZE_EQUAL_TO_END_SIZE) {\r\n            particle.deltaSize = 0;\r\n        } else {\r\n            let endS = psys.endSize + psys.endSizeVar * (random() - 0.5) * 2;\r\n            endS = Math.max(0, endS); // No negative values\r\n            particle.deltaSize = (endS - startS) / timeToLive;\r\n        }\r\n\r\n        // rotation\r\n        const startA = psys.startSpin + psys.startSpinVar * (random() - 0.5) * 2;\r\n        const endA = psys.endSpin + psys.endSpinVar * (random() - 0.5) * 2;\r\n        particle.rotation = startA;\r\n        particle.deltaRotation = (endA - startA) / timeToLive;\r\n\r\n        // position\r\n        particle.startPos.x = pos.x;\r\n        particle.startPos.y = pos.y;\r\n\r\n        // aspect ratio\r\n        particle.aspectRatio = psys.aspectRatio || 1;\r\n\r\n        // direction\r\n        const a = toRadian(psys.angle + this._worldRotation + psys.angleVar * (random() - 0.5) * 2);\r\n        // Mode Gravity: A\r\n        if (psys.emitterMode === EmitterMode.GRAVITY) {\r\n            const s = psys.speed + psys.speedVar * (random() - 0.5) * 2;\r\n            // direction\r\n            particle.dir.x = Math.cos(a);\r\n            particle.dir.y = Math.sin(a);\r\n            particle.dir.multiplyScalar(s);\r\n            // radial accel\r\n            particle.radialAccel = psys.radialAccel + psys.radialAccelVar * (random() - 0.5) * 2;\r\n            // tangential accel\r\n            particle.tangentialAccel = psys.tangentialAccel + psys.tangentialAccelVar * (random() - 0.5) * 2;\r\n            // rotation is dir\r\n            if (psys.rotationIsDir) {\r\n                particle.rotation = -toDegree(Math.atan2(particle.dir.y, particle.dir.x));\r\n            }\r\n        } else {\r\n            // Mode Radius: B\r\n            // Set the default diameter of the particle from the source position\r\n            const startRadius = psys.startRadius + psys.startRadiusVar * (random() - 0.5) * 2;\r\n            const endRadius = psys.endRadius + psys.endRadiusVar * (random() - 0.5) * 2;\r\n            particle.radius = startRadius;\r\n            particle.deltaRadius = (psys.endRadius === START_RADIUS_EQUAL_TO_END_RADIUS) ? 0 : (endRadius - startRadius) / timeToLive;\r\n            particle.angle = a;\r\n            particle.degreesPerSecond = toRadian(psys.rotatePerS + psys.rotatePerSVar * (random() - 0.5) * 2);\r\n        }\r\n    }\r\n\r\n    public updateUVs (force?: boolean): void {\r\n        const renderData = this.renderData;\r\n        if (renderData && this.sys._renderSpriteFrame) {\r\n            const vbuf = renderData.vData;\r\n            const uv = this.sys._renderSpriteFrame.uv;\r\n\r\n            const start = force ? 0 : this.uvFilled;\r\n            const particleCount = this.particles.length;\r\n            for (let i = start; i < particleCount; i++) {\r\n                const offset = i * formatBytes * 4;\r\n                vbuf[offset + 3] = uv[0];\r\n                vbuf[offset + 4] = uv[1];\r\n                vbuf[offset + 12] = uv[2];\r\n                vbuf[offset + 13] = uv[3];\r\n                vbuf[offset + 21] = uv[4];\r\n                vbuf[offset + 22] = uv[5];\r\n                vbuf[offset + 30] = uv[6];\r\n                vbuf[offset + 31] = uv[7];\r\n            }\r\n            this.uvFilled = particleCount;\r\n        }\r\n    }\r\n\r\n    public updateParticleBuffer (particle, pos, buffer, offset: number): void {\r\n        const vbuf = buffer.vData;\r\n        // const uintbuf = buffer._uintVData;\r\n\r\n        const x: number = pos.x;\r\n        const y: number = pos.y;\r\n        let width = particle.size;\r\n        let height = width;\r\n        const aspectRatio = particle.aspectRatio;\r\n        if (aspectRatio > 1) {\r\n            height = width / aspectRatio;\r\n        } else {\r\n            width = height * aspectRatio;\r\n        }\r\n        const halfWidth = width / 2;\r\n        const halfHeight = height / 2;\r\n        // pos\r\n        if (particle.rotation) {\r\n            const x1 = -halfWidth;\r\n            const y1 = -halfHeight;\r\n            const x2 = halfWidth;\r\n            const y2 = halfHeight;\r\n            const rad = -toRadian(particle.rotation as number);\r\n            const cr = Math.cos(rad);\r\n            const sr = Math.sin(rad);\r\n            // bl\r\n            vbuf[offset] = x1 * cr - y1 * sr + x;\r\n            vbuf[offset + 1] = x1 * sr + y1 * cr + y;\r\n            vbuf[offset + 2] = 0;\r\n            // br\r\n            vbuf[offset + 9] = x2 * cr - y1 * sr + x;\r\n            vbuf[offset + 10] = x2 * sr + y1 * cr + y;\r\n            vbuf[offset + 11] = 0;\r\n            // tl\r\n            vbuf[offset + 18] = x1 * cr - y2 * sr + x;\r\n            vbuf[offset + 19] = x1 * sr + y2 * cr + y;\r\n            vbuf[offset + 20] = 0;\r\n            // tr\r\n            vbuf[offset + 27] = x2 * cr - y2 * sr + x;\r\n            vbuf[offset + 28] = x2 * sr + y2 * cr + y;\r\n            vbuf[offset + 29] = 0;\r\n        } else {\r\n            // bl\r\n            vbuf[offset] = x - halfWidth;\r\n            vbuf[offset + 1] = y - halfHeight;\r\n            vbuf[offset + 2] = 0;\r\n            // br\r\n            vbuf[offset + 9] = x + halfWidth;\r\n            vbuf[offset + 10] = y - halfHeight;\r\n            vbuf[offset + 11] = 0;\r\n            // tl\r\n            vbuf[offset + 18] = x - halfWidth;\r\n            vbuf[offset + 19] = y + halfHeight;\r\n            vbuf[offset + 20] = 0;\r\n            // tr\r\n            vbuf[offset + 27] = x + halfWidth;\r\n            vbuf[offset + 28] = y + halfHeight;\r\n            vbuf[offset + 29] = 0;\r\n        }\r\n\r\n        // normalize\r\n        const pcol = particle.color as IColorLike;\r\n        _col.x = pcol.r / 255;\r\n        _col.y = pcol.g / 255;\r\n        _col.z = pcol.b / 255;\r\n        _col.w = pcol.a / 255;\r\n\r\n        // color\r\n        Vec4.toArray(vbuf, _col, offset + 5);\r\n        Vec4.toArray(vbuf, _col, offset + 14);\r\n        Vec4.toArray(vbuf, _col, offset + 23);\r\n        Vec4.toArray(vbuf, _col, offset + 32);\r\n    }\r\n\r\n    public step (dt: number): void {\r\n        const assembler = this.sys.assembler as Particle2DAssembler;\r\n        const psys = this.sys;\r\n        const node = psys.node;\r\n        const particles = this.particles;\r\n        dt = dt > assembler.maxParticleDeltaTime ? assembler.maxParticleDeltaTime : dt;\r\n        // Calculate pos\r\n        node.updateWorldTransform();\r\n        if (psys.positionType === PositionType.FREE) {\r\n            this._worldRotation = getWorldRotation(node);\r\n            const m =  node.worldMatrix;\r\n            _pos.x = m.m12;\r\n            _pos.y = m.m13;\r\n        } else if (psys.positionType === PositionType.RELATIVE) {\r\n            this._worldRotation = node.eulerAngles.z;\r\n            _pos.x = node.position.x;\r\n            _pos.y = node.position.y;\r\n        } else {\r\n            this._worldRotation = 0;\r\n        }\r\n\r\n        // Emission\r\n        if (this.active && psys.emissionRate) {\r\n            const rate = 1.0 / psys.emissionRate;\r\n            // issue #1201, prevent bursts of particles, due to too high emitCounter\r\n            if (particles.length < psys.totalParticles) this.emitCounter += dt;\r\n\r\n            while ((particles.length < psys.totalParticles) && (this.emitCounter > rate)) {\r\n                this.emitParticle(_pos);\r\n                this.emitCounter -= rate;\r\n            }\r\n\r\n            this.elapsed += dt;\r\n            if (psys.duration !== -1 && psys.duration < this.elapsed) {\r\n                psys.stopSystem();\r\n            }\r\n        }\r\n\r\n        // Request buffer for particles\r\n        const renderData = this.renderData;\r\n        if (!renderData) return;\r\n        const particleCount = particles.length;\r\n        renderData.reset();\r\n        this.requestData(particleCount * 4, particleCount * 6);\r\n\r\n        // Fill up uvs\r\n        if (particleCount > this.uvFilled) {\r\n            this.updateUVs();\r\n        }\r\n\r\n        // Used to reduce memory allocation / creation within the loop\r\n        let particleIdx = 0;\r\n        while (particleIdx < particles.length) {\r\n            // Reset temporary vectors\r\n            _tpa.x = _tpa.y = _tpb.x = _tpb.y = _tpc.x = _tpc.y = 0;\r\n\r\n            const particle = particles[particleIdx];\r\n\r\n            // life\r\n            particle.timeToLive -= dt;\r\n            if (particle.timeToLive > 0) {\r\n                // Mode A: gravity, direction, tangential accel & radial accel\r\n                if (psys.emitterMode === EmitterMode.GRAVITY) {\r\n                    const tmp = _tpc;\r\n                    const radial = _tpa;\r\n                    const tangential = _tpb;\r\n\r\n                    // radial acceleration\r\n                    if (particle.pos.x || particle.pos.y) {\r\n                        radial.set(particle.pos);\r\n                        radial.normalize();\r\n                    }\r\n                    tangential.set(radial);\r\n                    radial.multiplyScalar(particle.radialAccel);\r\n\r\n                    // tangential acceleration\r\n                    const newy = tangential.x;\r\n                    tangential.x = -tangential.y;\r\n                    tangential.y = newy;\r\n\r\n                    tangential.multiplyScalar(particle.tangentialAccel);\r\n\r\n                    tmp.set(radial);\r\n                    tmp.add(tangential);\r\n                    tmp.add(psys.gravity);\r\n                    tmp.multiplyScalar(dt);\r\n                    particle.dir.add(tmp);\r\n\r\n                    tmp.set(particle.dir);\r\n                    tmp.multiplyScalar(dt);\r\n                    particle.pos.add(tmp);\r\n                } else {\r\n                    // Mode B: radius movement\r\n                    // Update the angle and radius of the particle.\r\n                    particle.angle += particle.degreesPerSecond * dt;\r\n                    particle.radius += particle.deltaRadius * dt;\r\n\r\n                    particle.pos.x = -Math.cos(particle.angle) * particle.radius;\r\n                    particle.pos.y = -Math.sin(particle.angle) * particle.radius;\r\n                }\r\n\r\n                // color\r\n                particle.color.r += particle.deltaColor.r * dt;\r\n                particle.color.g += particle.deltaColor.g * dt;\r\n                particle.color.b += particle.deltaColor.b * dt;\r\n                particle.color.a += particle.deltaColor.a * dt;\r\n\r\n                // size\r\n                particle.size += particle.deltaSize * dt;\r\n                if (particle.size < 0) {\r\n                    particle.size = 0;\r\n                }\r\n\r\n                // angle\r\n                particle.rotation += particle.deltaRotation * dt;\r\n\r\n                // update values in quad buffer\r\n                const newPos = _tpa;\r\n                newPos.set(particle.pos);\r\n                if (psys.positionType !== PositionType.GROUPED) {\r\n                    newPos.add(particle.startPos);\r\n                }\r\n\r\n                const offset = formatBytes * particleIdx * 4;\r\n                this.updateParticleBuffer(particle, newPos, renderData, offset);\r\n\r\n                // update particle counter\r\n                ++particleIdx;\r\n            } else {\r\n                // life < 0\r\n                const deadParticle = particles[particleIdx];\r\n                if (particleIdx !== particles.length - 1) {\r\n                    particles[particleIdx] = particles[particles.length - 1];\r\n                }\r\n                pool.put(deadParticle);\r\n                particles.length--;\r\n                renderData.resize(renderData.vertexCount - 4, renderData.indexCount - 6);\r\n            }\r\n        }\r\n\r\n        renderData.material = this.sys.getRenderMaterial(0); // hack\r\n        renderData.frame = this.sys._renderSpriteFrame; // hack\r\n        renderData.setRenderDrawInfoAttributes();\r\n\r\n        if (particles.length === 0 && !this.active && !this.readyToPlay) {\r\n            this.finished = true;\r\n            psys._finishedSimulation();\r\n        }\r\n    }\r\n\r\n    requestData (vertexCount: number, indexCount: number): void {\r\n        if (!this.renderData) return;\r\n        let offset = this.renderData.indexCount;\r\n        this.renderData.request(vertexCount, indexCount);\r\n        const count = this.renderData.indexCount / 6;\r\n        const buffer = this.renderData.iData;\r\n        for (let i = offset; i < count; i++) {\r\n            const vId = i * 4;\r\n            buffer[offset++] = vId;\r\n            buffer[offset++] = vId + 1;\r\n            buffer[offset++] = vId + 2;\r\n            buffer[offset++] = vId + 1;\r\n            buffer[offset++] = vId + 3;\r\n            buffer[offset++] = vId + 2;\r\n        }\r\n    }\r\n\r\n    public initDrawInfo (): void {\r\n        this.renderData?.setRenderDrawInfoAttributes();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Asset } from '../asset/assets/asset';\r\nimport type { SpriteFrame } from '../2d/assets/sprite-frame';\r\nimport { cclegacy, _decorator } from '../core';\r\n\r\nconst { ccclass, serializable, editable } = _decorator;\r\n\r\n/**\r\n * @en Class for 2D particle asset handling.\r\n * @zh 2D 粒子资产\r\n * @class ParticleAsset\r\n * @extends Asset\r\n */\r\n@ccclass('cc.ParticleAsset')\r\nexport class ParticleAsset extends Asset {\r\n    @serializable\r\n    @editable\r\n    public spriteFrame: SpriteFrame | null = null;\r\n}\r\n\r\ncclegacy.ParticleAsset = ParticleAsset;\r\n","/*\r\n Copyright (c) 2011 Devon Govett\r\n Copyright (c) 2008-2010 Ricardo Quesada\r\n Copyright (c) 2011-2012 cocos2d-x.org\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos2d-x.org\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { getError } from '../core';\r\nimport  zlib  from '../../external/compression/zlib.min';\r\n\r\ninterface PNGAnimationFrame {\r\n    width: number;\r\n    height: number;\r\n    xOffset: number;\r\n    yOffset: number;\r\n    delay: number;\r\n    disposeOp: number;\r\n    blendOp: number;\r\n    data: number[];\r\n}\r\n\r\ninterface PNGTransparency {\r\n    indexed?: number[];\r\n    rgb?: number[];\r\n    grayscale?: number;\r\n}\r\n\r\n/**\r\n * A png file reader\r\n * @name PNGReader\r\n * @mangle\r\n */\r\nexport class PNGReader {\r\n    private declare data: Uint8Array | number[];\r\n    private pos = 8;\r\n    private palette: ArrayLike<number> = [];\r\n    private imgData: Uint8Array | number[] = [];\r\n    private transparency: PNGTransparency = {\r\n        indexed: [],\r\n        rgb: [],\r\n        grayscale: 0,\r\n    };\r\n    private declare animation: {\r\n        numFrames: number;\r\n        numPlays: number;\r\n        frames: PNGAnimationFrame[],\r\n    };\r\n    private text = {};\r\n    private width = 0;\r\n    private height = 0;\r\n    private bits = 0;\r\n    private colorType = 0;\r\n    private compressionMethod = 0;\r\n    private filterMethod = 0;\r\n    private interlaceMethod = 0;\r\n    private colors: number | undefined = 0;\r\n    private hasAlphaChannel = false;\r\n    private pixelBitlength = 0;\r\n    private declare colorSpace: string | undefined;\r\n    private _decodedPalette: Uint8Array | null = null;\r\n\r\n    constructor (data: number[]) {\r\n        const thisData = this.data = data;\r\n\r\n        let frame: PNGAnimationFrame | undefined;\r\n        let chunkSize = 0;\r\n\r\n        while (true) {\r\n            chunkSize = this.readUInt32();\r\n            const section: string = (((): string[] => {\r\n                const results: string[] = [];\r\n                for (let _i = 0; _i < 4; ++_i) {\r\n                    results.push(String.fromCharCode(thisData[this.pos++]));\r\n                }\r\n                return results;\r\n            }).call(this)).join('');\r\n\r\n            switch (section) {\r\n            case 'IHDR':\r\n            {\r\n                this.width = this.readUInt32();\r\n                this.height = this.readUInt32();\r\n                this.bits = thisData[this.pos++];\r\n                this.colorType = thisData[this.pos++];\r\n                this.compressionMethod = thisData[this.pos++];\r\n                this.filterMethod = thisData[this.pos++];\r\n                this.interlaceMethod = thisData[this.pos++];\r\n                break;\r\n            }\r\n            case 'acTL':\r\n                this.animation = {\r\n                    numFrames: this.readUInt32(),\r\n                    numPlays: this.readUInt32() || Infinity,\r\n                    frames: [],\r\n                };\r\n                break;\r\n            case 'PLTE':\r\n                this.palette = this.read(chunkSize);\r\n                break;\r\n            case 'fcTL':\r\n            {\r\n                if (frame) {\r\n                    this.animation.frames.push(frame);\r\n                }\r\n                this.pos += 4;\r\n                frame = {\r\n                    width: this.readUInt32(),\r\n                    height: this.readUInt32(),\r\n                    xOffset: this.readUInt32(),\r\n                    yOffset: this.readUInt32(),\r\n                    delay: 0,\r\n                    disposeOp: 0,\r\n                    blendOp: 0,\r\n                    data: [],\r\n                };\r\n                const delayNum = this.readUInt16();\r\n                const delayDen = this.readUInt16() || 100;\r\n                frame.delay = 1000 * delayNum / delayDen;\r\n                frame.disposeOp = thisData[this.pos++];\r\n                frame.blendOp = thisData[this.pos++];\r\n                break;\r\n            }\r\n            case 'IDAT':\r\n            case 'fdAT':\r\n            {\r\n                if (section === 'fdAT') {\r\n                    this.pos += 4;\r\n                    chunkSize -= 4;\r\n                }\r\n                // FIXME(cjh): Remove 'as number[]' since this.imgData is possible to be Uint8Array\r\n                data = (frame != null ? frame.data : undefined) || this.imgData as number[];\r\n                for (let _i = 0; chunkSize >= 0 ? _i < chunkSize : _i > chunkSize; chunkSize >= 0 ? ++_i : --_i) {\r\n                    data.push(thisData[this.pos++]);\r\n                }\r\n                break;\r\n            }\r\n            case 'tRNS':\r\n                this.transparency = {};\r\n                switch (this.colorType) {\r\n                case 3:\r\n                {\r\n                    this.transparency.indexed = this.read(chunkSize);\r\n                    const ccshort = 255 - this.transparency.indexed.length;\r\n                    if (ccshort > 0) {\r\n                        for (let _j = 0; ccshort >= 0 ? _j < ccshort : _j > ccshort; ccshort >= 0 ? ++_j : --_j) {\r\n                            this.transparency.indexed.push(255);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case 0:\r\n                    this.transparency.grayscale = this.read(chunkSize)[0];\r\n                    break;\r\n                case 2:\r\n                    this.transparency.rgb = this.read(chunkSize);\r\n                    break;\r\n                default:\r\n                    break;\r\n                }\r\n                break;\r\n            case 'tEXt':\r\n            {\r\n                const text = this.read(chunkSize);\r\n                const index = text.indexOf(0);\r\n                const key = String.fromCharCode.apply(String, text.slice(0, index));\r\n                this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\r\n                break;\r\n            }\r\n            case 'IEND':\r\n            {\r\n                if (frame) {\r\n                    this.animation.frames.push(frame);\r\n                }\r\n                this.colors = ((): number | undefined => {\r\n                    switch (this.colorType) {\r\n                    case 0:\r\n                    case 3:\r\n                    case 4:\r\n                        return 1;\r\n                    case 2:\r\n                    case 6:\r\n                        return 3;\r\n                    default:\r\n                        return undefined;\r\n                    }\r\n                }).call(this);\r\n                const _ref = this.colorType;\r\n                this.hasAlphaChannel = _ref === 4 || _ref === 6;\r\n                const colors = this.colors! + (this.hasAlphaChannel ? 1 : 0);\r\n                this.pixelBitlength = this.bits * colors;\r\n                this.colorSpace = ((): string | undefined => {\r\n                    switch (this.colors) {\r\n                    case 1:\r\n                        return 'DeviceGray';\r\n                    case 3:\r\n                        return 'DeviceRGB';\r\n                    default:\r\n                        return undefined;\r\n                    }\r\n                }).call(this);\r\n                if (!(this.imgData instanceof Uint8Array)) {\r\n                    this.imgData = new Uint8Array(this.imgData);\r\n                }\r\n                return;\r\n            }\r\n            default:\r\n                this.pos += chunkSize;\r\n            }\r\n            this.pos += 4;\r\n            if (this.pos > thisData.length) {\r\n                throw new Error(getError(6017));\r\n            }\r\n        }\r\n    }\r\n\r\n    public read (bytes: number): number[] {\r\n        let i = 0;\r\n        let _i = 0;\r\n        const _results: number[] = [];\r\n        for (i = _i = 0; bytes >= 0 ? _i < bytes : _i > bytes; i = bytes >= 0 ? ++_i : --_i) {\r\n            _results.push(this.data[this.pos++]);\r\n        }\r\n        return _results;\r\n    }\r\n\r\n    public readUInt32 (): number {\r\n        const data = this.data;\r\n        const b1 = data[this.pos++] << 24;\r\n        const b2 = data[this.pos++] << 16;\r\n        const b3 = data[this.pos++] << 8;\r\n        const b4 = data[this.pos++];\r\n        return b1 | b2 | b3 | b4;\r\n    }\r\n\r\n    public readUInt16 (): number {\r\n        const b1 = this.data[this.pos++] << 8;\r\n        const b2 = this.data[this.pos++];\r\n        return b1 | b2;\r\n    }\r\n\r\n    public decodePixels (data: Uint8Array | number[] | null): Uint8Array {\r\n        if (data == null) {\r\n            data = this.imgData;\r\n        }\r\n        if (data.length === 0) {\r\n            return new Uint8Array(0);\r\n        }\r\n        const inflate = new zlib.Inflate(data, { index: 0, verify: false });\r\n        data = inflate.decompress() as Uint8Array;\r\n        const pixelBytes = this.pixelBitlength / 8;\r\n        const scanlineLength = pixelBytes * this.width;\r\n        const pixels = new Uint8Array(scanlineLength * this.height);\r\n        const length = data.length;\r\n        let row = 0;\r\n        let pos = 0;\r\n        let c = 0;\r\n        let ccbyte = 0;\r\n        let col = 0;\r\n        let i = 0;\r\n        let _i = 0;\r\n        let _j = 0;\r\n        let _k = 0;\r\n        let _l = 0;\r\n        let _m = 0;\r\n        let left = 0;\r\n        let p = 0;\r\n        let pa = 0;\r\n        let paeth = 0;\r\n        let pb = 0;\r\n        let pc = 0;\r\n        let upper = 0;\r\n        let upperLeft = 0;\r\n        while (pos < length) {\r\n            switch (data[pos++]) {\r\n            case 0:\r\n                for (i = _i = 0; _i < scanlineLength; i = _i += 1) {\r\n                    pixels[c++] = data[pos++];\r\n                }\r\n                break;\r\n            case 1:\r\n                for (i = _j = 0; _j < scanlineLength; i = _j += 1) {\r\n                    ccbyte = data[pos++];\r\n                    left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\r\n                    pixels[c++] = (ccbyte + left) % 256;\r\n                }\r\n                break;\r\n            case 2:\r\n                for (i = _k = 0; _k < scanlineLength; i = _k += 1) {\r\n                    ccbyte = data[pos++];\r\n                    col = (i - (i % pixelBytes)) / pixelBytes;\r\n                    upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\r\n                    pixels[c++] = (upper + ccbyte) % 256;\r\n                }\r\n                break;\r\n            case 3:\r\n                for (i = _l = 0; _l < scanlineLength; i = _l += 1) {\r\n                    ccbyte = data[pos++];\r\n                    col = (i - (i % pixelBytes)) / pixelBytes;\r\n                    left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\r\n                    upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\r\n                    pixels[c++] = (ccbyte + Math.floor((left + upper) / 2)) % 256;\r\n                }\r\n                break;\r\n            case 4:\r\n                for (i = _m = 0; _m < scanlineLength; i = _m += 1) {\r\n                    ccbyte = data[pos++];\r\n                    col = (i - (i % pixelBytes)) / pixelBytes;\r\n                    left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\r\n                    if (row === 0) {\r\n                        upper = upperLeft = 0;\r\n                    } else {\r\n                        upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + (i % pixelBytes)];\r\n                        upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + (i % pixelBytes)];\r\n                    }\r\n                    p = left + upper - upperLeft;\r\n                    pa = Math.abs(p - left);\r\n                    pb = Math.abs(p - upper);\r\n                    pc = Math.abs(p - upperLeft);\r\n                    if (pa <= pb && pa <= pc) {\r\n                        paeth = left;\r\n                    } else if (pb <= pc) {\r\n                        paeth = upper;\r\n                    } else {\r\n                        paeth = upperLeft;\r\n                    }\r\n                    pixels[c++] = (ccbyte + paeth) % 256;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(getError(6018, data[pos - 1]));\r\n            }\r\n            row++;\r\n        }\r\n        return pixels;\r\n    }\r\n\r\n    public copyToImageData (imageData: ImageData, pixels: Uint8Array): void {\r\n        let alpha = this.hasAlphaChannel;\r\n        let palette: Uint8Array | undefined;\r\n        let colors = this.colors;\r\n        if (this.palette.length) {\r\n            palette = this._decodedPalette != null ? this._decodedPalette : this._decodedPalette = this.decodePalette();\r\n            colors = 4;\r\n            alpha = true;\r\n        }\r\n        const data = imageData.data || imageData;\r\n        const length = data.length;\r\n        const input = palette || pixels;\r\n        let i = 0; let j = 0; let k = 0; let v = 0;\r\n        if (colors === 1) {\r\n            while (i < length) {\r\n                k = palette ? pixels[i / 4] * 4 : j;\r\n                v = input[k++];\r\n                data[i++] = v;\r\n                data[i++] = v;\r\n                data[i++] = v;\r\n                data[i++] = alpha ? input[k++] : 255;\r\n                j = k;\r\n            }\r\n        } else {\r\n            while (i < length) {\r\n                k = palette ? pixels[i / 4] * 4 : j;\r\n                data[i++] = input[k++];\r\n                data[i++] = input[k++];\r\n                data[i++] = input[k++];\r\n                data[i++] = alpha ? input[k++] : 255;\r\n                j = k;\r\n            }\r\n        }\r\n    }\r\n\r\n    decodePalette (): Uint8Array {\r\n        const palette = this.palette;\r\n        const transparency = this.transparency.indexed || [];\r\n        const ret = new Uint8Array((transparency.length || 0) + palette.length);\r\n        let pos = 0;\r\n        let c = 0;\r\n        let _ref1 = 0;\r\n        for (let i = 0, _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {\r\n            ret[pos++] = palette[i];\r\n            ret[pos++] = palette[i + 1];\r\n            ret[pos++] = palette[i + 2];\r\n            _ref1 = transparency[c++];\r\n            ret[pos++] = _ref1 != null ? _ref1 : 255;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    render (canvas: HTMLCanvasElement): void {\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) return;\r\n        const data = ctx.createImageData(this.width, this.height);\r\n        this.copyToImageData(data, this.decodePixels(null));\r\n        ctx.putImageData(data, 0, 0);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass, editable, type, displayOrder, menu,\r\n    executeInEditMode, serializable, playOnFocus, tooltip, visible, formerlySerializedAs, override,\r\n} from 'cc.decorator';\r\nimport { EDITOR, EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { UIRenderer } from '../2d/framework/ui-renderer';\r\nimport { Color, Vec2, warnID, errorID, error, path } from '../core';\r\nimport { Simulator } from './particle-simulator-2d';\r\nimport { SpriteFrame } from '../2d/assets/sprite-frame';\r\nimport { ImageAsset } from '../asset/assets/image-asset';\r\nimport { ParticleAsset } from './particle-asset';\r\nimport { BlendFactor } from '../gfx';\r\nimport { PNGReader } from './png-reader';\r\nimport { tiffReader } from './tiff-reader';\r\nimport codec from '../../external/compression/ZipUtils';\r\nimport type { IBatcher } from '../2d/renderer/i-batcher';\r\nimport { assetManager, builtinResMgr } from '../asset/asset-manager';\r\nimport { PositionType, EmitterMode, DURATION_INFINITY, START_RADIUS_EQUAL_TO_END_RADIUS, START_SIZE_EQUAL_TO_END_SIZE } from './define';\r\nimport { ccwindow } from '../core/global-exports';\r\nimport type { IAssembler, MeshRenderData } from '../2d';\r\nimport type { TextureBase } from '../asset/assets/texture-base';\r\n\r\n/**\r\n * Image formats\r\n * @enum macro.ImageFormat\r\n */\r\nexport enum ImageFormat {\r\n    /**\r\n     * @en Image Format:JPG\r\n     * @zh 图片格式:JPG\r\n     */\r\n    JPG,\r\n    /**\r\n     * @en Image Format:PNG\r\n     * @zh 图片格式:PNG\r\n     */\r\n    PNG,\r\n    /**\r\n     * @en Image Format:TIFF\r\n     * @zh 图片格式:TIFF\r\n     */\r\n    TIFF,\r\n    /**\r\n     * @en Image Format:WEBP\r\n     * @zh 图片格式:WEBP\r\n     */\r\n    WEBP,\r\n    /**\r\n     * @en Image Format:PVR\r\n     * @zh 图片格式:PVR\r\n     */\r\n    PVR,\r\n    /**\r\n     * @en Image Format:ETC\r\n     * @zh 图片格式:ETC\r\n     */\r\n    ETC,\r\n    /**\r\n     * @en Image Format:S3TC\r\n     * @zh 图片格式:S3TC\r\n     */\r\n    S3TC,\r\n    /**\r\n     * @en Image Format:ATITC\r\n     * @zh 图片格式:ATITC\r\n     */\r\n    ATITC,\r\n    /**\r\n     * @en Image Format:TGA\r\n     * @zh 图片格式:TGA\r\n     */\r\n    TGA,\r\n    /**\r\n     * @en Image Format:RAWDATA\r\n     * @zh 图片格式:RAWDATA\r\n     */\r\n    RAWDATA,\r\n    /**\r\n     * @en Image Format:UNKNOWN\r\n     * @zh 图片格式:UNKNOWN\r\n     */\r\n    UNKNOWN,\r\n}\r\n\r\nexport function getImageFormatByData (imgData): ImageFormat {\r\n    // if it is a png file buffer.\r\n    if (imgData.length > 8 && imgData[0] === 0x89\r\n        && imgData[1] === 0x50\r\n        && imgData[2] === 0x4E\r\n        && imgData[3] === 0x47\r\n        && imgData[4] === 0x0D\r\n        && imgData[5] === 0x0A\r\n        && imgData[6] === 0x1A\r\n        && imgData[7] === 0x0A) {\r\n        return ImageFormat.PNG;\r\n    }\r\n\r\n    // if it is a tiff file buffer.\r\n    if (imgData.length > 2 && ((imgData[0] === 0x49 && imgData[1] === 0x49)\r\n        || (imgData[0] === 0x4d && imgData[1] === 0x4d)\r\n        || (imgData[0] === 0xff && imgData[1] === 0xd8))) {\r\n        return ImageFormat.TIFF;\r\n    }\r\n    return ImageFormat.UNKNOWN;\r\n}\r\n\r\nfunction getParticleComponents (node): ParticleSystem2D[] {\r\n    const parent = node.parent;\r\n    const comp = node.getComponent(ParticleSystem2D);\r\n    if (!parent || !comp) {\r\n        return node.getComponentsInChildren(ParticleSystem2D) as ParticleSystem2D[];\r\n    }\r\n    return getParticleComponents(parent);\r\n}\r\n\r\nconst wrapParseInt: (str: string | number) => number = parseInt as any;\r\nconst wrapParseFloat: (str: string | number) => number = parseFloat as any;\r\n\r\n/**\r\n * @en Particle System base class.\r\n * cocos2d also supports particles generated by Particle Designer (http://particledesigner.71squared.com/).\r\n * 'Radius Mode' in Particle Designer uses a fixed emit rate of 30 hz. Since that can't be guarateed in cocos2d,\r\n * cocos2d uses a another approach, but the results are almost identical.\r\n * cocos2d supports all the variables used by Particle Designer plus a bit more:\r\n *  - spinning particles (supported when using ParticleSystem)\r\n *  - tangential acceleration (Gravity mode)\r\n *  - radial acceleration (Gravity mode)\r\n *  - radius direction (Radius mode) (Particle Designer supports outwards to inwards direction only)\r\n * It is possible to customize any of the above mentioned properties in runtime. Example:\r\n * emitter.radialAccel = 15;\r\n * emitter.startSpin = 0;\r\n *\r\n * @zh 2D 粒子基础类型\r\n * cocos2d 同样支 Particle Designer (http://particledesigner.71squared.com/) 生成的粒子\r\n * 粒子设计器中的 半径模式 使用 30 hz 的固定发射率。由于 cocos2d 无法保证，\r\n * cocos2d 使用了另一种方法，但结果几乎相同。\r\n * cocos2d 支持 Particle Designer 使用的所有变量，还有：\r\n * -旋转粒子（使用粒子系统时支持）\r\n * -切向加速度（重力模式）\r\n * -径向加速度（重力模式）\r\n * -半径方向（半径模式）（Particle Designer 仅支持向外到向内的方向）\r\n * 可以在运行时自定义上述任何属性。例如：\r\n * emitter.radialAccel = 15;\r\n * emitter.startSpin = 0;\r\n *\r\n */\r\n@ccclass('cc.ParticleSystem2D')\r\n@menu('Effects/ParticleSystem2D')\r\n@playOnFocus\r\n@executeInEditMode\r\nexport class ParticleSystem2D extends UIRenderer {\r\n    static EmitterMode = EmitterMode;\r\n    static PositionType = PositionType;\r\n    static readonly DURATION_INFINITY = DURATION_INFINITY;\r\n    static readonly START_SIZE_EQUAL_TO_END_SIZE = START_SIZE_EQUAL_TO_END_SIZE;\r\n    static readonly START_RADIUS_EQUAL_TO_END_RADIUS = START_RADIUS_EQUAL_TO_END_RADIUS;\r\n\r\n    /**\r\n     * @en If set custom to true, then use custom properties instead of read particle file.\r\n     * @zh 是否自定义粒子属性。\r\n     */\r\n    @editable\r\n    @displayOrder(6)\r\n    @tooltip('i18n:particle_system.custom')\r\n    public get custom (): boolean {\r\n        return this._custom;\r\n    }\r\n    public set custom (value) {\r\n        if (EDITOR_NOT_IN_PREVIEW && !value && !this._file) {\r\n            warnID(6000);\r\n            return;\r\n        }\r\n        if (this._custom !== value) {\r\n            this._custom = value;\r\n            this._applyFile();\r\n            this._updateMaterial();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The plist file.\r\n     * @zh plist 格式的粒子配置文件。\r\n     */\r\n    @type(ParticleAsset)\r\n    @displayOrder(5)\r\n    @tooltip('i18n:particle_system.file')\r\n    public get file (): ParticleAsset | null {\r\n        return this._file;\r\n    }\r\n\r\n    public set file (value) {\r\n        if (this._file !== value) {\r\n            this._file = value;\r\n            if (value) {\r\n                this._applyFile();\r\n            } else {\r\n                this.custom = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en SpriteFrame used for particles display\r\n     * @zh 用于粒子呈现的 SpriteFrame\r\n     */\r\n    @type(SpriteFrame)\r\n    @tooltip('i18n:particle_system.spriteFrame')\r\n    public get spriteFrame (): SpriteFrame | null {\r\n        return this._spriteFrame;\r\n    }\r\n\r\n    public set spriteFrame (value: SpriteFrame | null) {\r\n        const lastSprite = this._renderSpriteFrame;\r\n        if (lastSprite === value) {\r\n            return;\r\n        }\r\n        this._renderSpriteFrame = value;\r\n\r\n        if (!value || value._uuid) {\r\n            this._spriteFrame = value;\r\n        }\r\n\r\n        this._applySpriteFrame();\r\n\r\n        if (EDITOR) {\r\n            this.node.emit('spriteframe-changed', this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Current quantity of particles that are being simulated.\r\n     * @zh 当前播放的粒子数量。\r\n     * @readonly\r\n     */\r\n    public get particleCount (): number {\r\n        return this._simulator.particles.length;\r\n    }\r\n\r\n    /**\r\n     * @en Maximum particles of the system.\r\n     * @zh 粒子最大数量。\r\n     */\r\n    @editable\r\n    @tooltip('i18n:particle_system.totalParticles')\r\n    public get totalParticles (): number {\r\n        return this._totalParticles;\r\n    }\r\n    public set totalParticles (value: number) {\r\n        if (this._totalParticles === value) return;\r\n        this._totalParticles = value;\r\n    }\r\n\r\n    /**\r\n     * @en How many seconds the emitter wil run. -1 means 'forever'.\r\n     * @zh 发射器生存时间，单位秒，-1表示持续发射。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.duration')\r\n    public duration = -1;\r\n\r\n    /**\r\n     * @en Emission rate of the particles.\r\n     * @zh 每秒发射的粒子数目。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.emissionRate')\r\n    public emissionRate = 10;\r\n\r\n    /**\r\n     * @en Life of each particle setter.\r\n     * @zh 粒子的运行时间。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.life')\r\n    public life = 1;\r\n\r\n    /**\r\n     * @en Variation of life.\r\n     * @zh 粒子的运行时间变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.lifeVar')\r\n    public lifeVar = 0;\r\n\r\n    /**\r\n     * @en Start color of each particle.\r\n     * @zh 粒子初始颜色。\r\n     */\r\n    @editable\r\n    @tooltip('i18n:particle_system.startColor')\r\n    public get startColor (): Color {\r\n        return this._startColor;\r\n    }\r\n\r\n    public set startColor (val) {\r\n        this._startColor.r = val.r;\r\n        this._startColor.g = val.g;\r\n        this._startColor.b = val.b;\r\n        this._startColor.a = val.a;\r\n    }\r\n\r\n    /**\r\n     * @en Variation of the start color.\r\n     * @zh 粒子初始颜色变化范围。\r\n     */\r\n    @editable\r\n    @tooltip('i18n:particle_system.startColorVar')\r\n    public get startColorVar (): Color {\r\n        return this._startColorVar;\r\n    }\r\n\r\n    public set startColorVar (val: Color) {\r\n        this._startColorVar.r = val.r;\r\n        this._startColorVar.g = val.g;\r\n        this._startColorVar.b = val.b;\r\n        this._startColorVar.a = val.a;\r\n    }\r\n\r\n    @override\r\n    @visible((): boolean => false)\r\n    set color (value) {\r\n    }\r\n\r\n    get color (): Readonly<Color> {\r\n        return this._color;\r\n    }\r\n\r\n    /**\r\n     * @en Ending color of each particle.\r\n     * @zh 粒子结束颜色。\r\n     */\r\n    @editable\r\n    @tooltip('i18n:particle_system.endColor')\r\n    public get endColor (): Color {\r\n        return this._endColor;\r\n    }\r\n\r\n    public set endColor (val) {\r\n        this._endColor.r = val.r;\r\n        this._endColor.g = val.g;\r\n        this._endColor.b = val.b;\r\n        this._endColor.a = val.a;\r\n    }\r\n\r\n    /**\r\n     * @en Variation of the end color.\r\n     * @zh 粒子结束颜色变化范围。\r\n     */\r\n    @editable\r\n    @tooltip('i18n:particle_system.endColorVar')\r\n    public get endColorVar (): Color {\r\n        return this._endColorVar;\r\n    }\r\n\r\n    public set endColorVar (val) {\r\n        this._endColorVar.r = val.r;\r\n        this._endColorVar.g = val.g;\r\n        this._endColorVar.b = val.b;\r\n        this._endColorVar.a = val.a;\r\n    }\r\n\r\n    /**\r\n     * @en Angle of each particle setter.\r\n     * @zh 粒子角度。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.angle')\r\n    public angle = 90;\r\n\r\n    /**\r\n     * @en Variation of angle of each particle setter.\r\n     * @zh 粒子角度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.angleVar')\r\n    public angleVar = 20;\r\n\r\n    /**\r\n     * @en Start size in pixels of each particle.\r\n     * @zh 粒子的初始大小。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.startSize')\r\n    public startSize = 50;\r\n\r\n    /**\r\n     * @en Variation of start size in pixels.\r\n     * @zh 粒子初始大小的变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.startSizeVar')\r\n    public startSizeVar = 0;\r\n\r\n    /**\r\n     * @en End size in pixels of each particle.\r\n     * @zh 粒子结束时的大小。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.endSize')\r\n    public endSize = 0;\r\n\r\n    /**\r\n     * @en Variation of end size in pixels.\r\n     * @zh 粒子结束大小的变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.endSizeVar')\r\n    public endSizeVar = 0;\r\n\r\n    /**\r\n     * @en Start angle of each particle.\r\n     * @zh 粒子开始自旋角度。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.startSpin')\r\n    public startSpin = 0;\r\n\r\n    /**\r\n     * @en Variation of start angle.\r\n     * @zh 粒子开始自旋角度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.startSpinVar')\r\n    public startSpinVar = 0;\r\n\r\n    /**\r\n     * @en End angle of each particle.\r\n     * @zh 粒子结束自旋角度。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.endSpin')\r\n    public endSpin = 0;\r\n\r\n    /**\r\n     * @en Variation of end angle.\r\n     * @zh 粒子结束自旋角度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.endSpinVar')\r\n    public endSpinVar = 0;\r\n\r\n    /**\r\n     * @en Source position of the emitter.\r\n     * @zh 发射器位置。\r\n     */\r\n    @serializable\r\n    public sourcePos = Vec2.ZERO.clone();\r\n\r\n    /**\r\n     * @en Variation of source position.\r\n     * @zh 发射器位置的变化范围。（横向和纵向）\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.posVar')\r\n    public posVar = Vec2.ZERO.clone();\r\n\r\n    /**\r\n     * @en Particles movement type.\r\n     * @zh 粒子位置类型。\r\n     */\r\n    @type(PositionType)\r\n    @tooltip('i18n:particle_system.positionType')\r\n    public get positionType (): number {\r\n        return this._positionType;\r\n    }\r\n\r\n    public set positionType (val) {\r\n        this._positionType = val;\r\n        this._updateMaterial();\r\n        this._updatePositionType();\r\n    }\r\n\r\n    /**\r\n     * @en Preview particle system effect.\r\n     * @ch 查看粒子效果\r\n     */\r\n    @editable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:particle_system.preview')\r\n    public get preview (): boolean {\r\n        return this._preview;\r\n    }\r\n\r\n    public set preview (val: boolean) {\r\n        if (val) { this._startPreview(); } else { this._stopPreview(); }\r\n        this._preview = val;\r\n    }\r\n\r\n    /**\r\n     * @en Particles emitter modes.\r\n     * @zh 发射器类型。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @type(EmitterMode)\r\n    @tooltip('i18n:particle_system.emitterMode')\r\n    public emitterMode = EmitterMode.GRAVITY;\r\n\r\n    // GRAVITY MODE\r\n\r\n    /**\r\n     * @en Gravity of the emitter.\r\n     * @zh 重力。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.gravity')\r\n    public gravity = Vec2.ZERO.clone();\r\n\r\n    /**\r\n     * @en Speed of the emitter.\r\n     * @zh 速度。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.speed')\r\n    public speed = 180;\r\n\r\n    /**\r\n     * @en Variation of the speed.\r\n     * @zh 速度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.speedVar')\r\n    public speedVar = 50;\r\n\r\n    /**\r\n     * @en Tangential acceleration of each particle. Only available in 'Gravity' mode.\r\n     * @zh 每个粒子的切向加速度，即垂直于重力方向的加速度，只有在重力模式下可用。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.tangentialAccel')\r\n    public tangentialAccel = 80;\r\n\r\n    /**\r\n     * @en Variation of the tangential acceleration.\r\n     * @zh 每个粒子的切向加速度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.tangentialAccelVar')\r\n    public tangentialAccelVar = 0;\r\n\r\n    /**\r\n     * @en Acceleration of each particle. Only available in 'Gravity' mode.\r\n     * @zh 粒子径向加速度，即平行于重力方向的加速度，只有在重力模式下可用。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.radialAccel')\r\n    public radialAccel = 0;\r\n\r\n    /**\r\n     * @en Variation of the radial acceleration.\r\n     * @zh 粒子径向加速度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.radialAccelVar')\r\n    public radialAccelVar = 0;\r\n\r\n    /**\r\n     * @en Indicate whether the rotation of each particle equals to its direction. Only available in 'Gravity' mode.\r\n     * @zh 每个粒子的旋转是否等于其方向，只有在重力模式下可用。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.rotationIsDir')\r\n    public rotationIsDir = false;\r\n\r\n    // RADIUS MODE\r\n\r\n    /**\r\n     * @en Starting radius of the particles. Only available in 'Radius' mode.\r\n     * @zh 初始半径，表示粒子出生时相对发射器的距离，只有在半径模式下可用。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.startRadius')\r\n    public startRadius = 0;\r\n\r\n    /**\r\n     * @en Variation of the starting radius.\r\n     * @zh 初始半径变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.startRadiusVar')\r\n    public startRadiusVar = 0;\r\n\r\n    /**\r\n     * @en Ending radius of the particles. Only available in 'Radius' mode.\r\n     * @zh 结束半径，只有在半径模式下可用。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.endRadius')\r\n    public endRadius = 0;\r\n\r\n    /**\r\n     * @en Variation of the ending radius.\r\n     * @zh 结束半径变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.endRadiusVar')\r\n    public endRadiusVar = 0;\r\n\r\n    /**\r\n     * @en Number of degrees to rotate a particle around the source pos per second. Only available in 'Radius' mode.\r\n     * @zh 粒子每秒围绕起始点的旋转角度，只有在半径模式下可用。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.rotatePerS')\r\n    public rotatePerS = 0;\r\n\r\n    /**\r\n     * @en Variation of the degrees to rotate a particle around the source pos per second.\r\n     * @zh 粒子每秒围绕起始点的旋转角度变化范围。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @tooltip('i18n:particle_system.rotatePerSVar')\r\n    public rotatePerSVar = 0;\r\n\r\n    /**\r\n     * @en Indicate whether the system simulation have stopped.\r\n     * @zh 指示粒子播放是否完毕。\r\n     */\r\n    public get stopped (): boolean {\r\n        return this._stopped;\r\n    }\r\n\r\n    /**\r\n     * @en Indicate whether the particle system is activated.\r\n     * @zh 是否激活粒子。\r\n     * @readonly\r\n     */\r\n    public get active (): boolean {\r\n        return this._simulator.active;\r\n    }\r\n\r\n    public get assembler (): IAssembler | null {\r\n        return this._assembler;\r\n    }\r\n    public aspectRatio = 1;\r\n    /**\r\n     * The temporary SpriteFrame object used for the renderer. Because there is no corresponding asset, it can't be serialized.\r\n     * @internal since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public declare _renderSpriteFrame: SpriteFrame | null;\r\n    /**\r\n     * @internal since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public declare _simulator: Simulator;\r\n\r\n    /**\r\n     * @en If set to true, the particle system will automatically start playing on onLoad.\r\n     * @zh 如果设置为 true 运行时会自动发射粒子。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @displayOrder(3)\r\n    @tooltip('i18n:particle_system.playOnLoad')\r\n    public playOnLoad = true;\r\n\r\n    /**\r\n     * @en Indicate whether the owner node will be auto-removed when it has no particles left.\r\n     * @zh 粒子播放完毕后自动销毁所在的节点。\r\n     */\r\n    @serializable\r\n    @editable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:particle_system.autoRemoveOnFinish')\r\n    public autoRemoveOnFinish = false;\r\n\r\n    /**\r\n     * @en Play particle in edit mode.\r\n     * @zh 在编辑器模式下预览粒子，启用后选中粒子时，粒子将自动播放。\r\n     */\r\n    @formerlySerializedAs('preview')\r\n    private _preview = true;\r\n    @serializable\r\n    private _custom = false;\r\n    @serializable\r\n    private _file: ParticleAsset | null = null;\r\n    @serializable\r\n    private _spriteFrame: SpriteFrame | null = null;\r\n    @serializable\r\n    private _totalParticles = 150;\r\n    @serializable\r\n    private _startColor: Color = new Color(255, 255, 255, 255);\r\n    @serializable\r\n    private _startColorVar: Color = new Color(0, 0, 0, 0);\r\n    @serializable\r\n    private _endColor: Color = new Color(255, 255, 255, 0);\r\n    @serializable\r\n    private _endColorVar: Color = new Color(0, 0, 0, 0);\r\n    @serializable\r\n    private _positionType = PositionType.FREE;\r\n\r\n    private _stopped = true;\r\n    private declare _previewTimer: number | null;\r\n    private declare _focused: boolean;\r\n    private declare _plistFile: string;\r\n    private _useFile: boolean;\r\n\r\n    constructor () {\r\n        super();\r\n        this.initProperties();\r\n        this._useFile = false;\r\n    }\r\n\r\n    public onEnable (): void {\r\n        super.onEnable();\r\n        this._updateMaterial();\r\n        this._updatePositionType();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        super.onDestroy();\r\n\r\n        if (this.autoRemoveOnFinish) {\r\n            this.autoRemoveOnFinish = false;    // already removed\r\n        }\r\n\r\n        // reset uv data so next time simulator will refill buffer uv info when exit edit mode from prefab.\r\n        this._simulator.uvFilled = 0;\r\n\r\n        this.destroyRenderData();\r\n    }\r\n\r\n    private initProperties (): void {\r\n        this._previewTimer = null;\r\n        this._focused = false;\r\n        this.aspectRatio = 1;\r\n        this._simulator = new Simulator(this);\r\n    }\r\n\r\n    public onFocusInEditor (): void {\r\n        this._focused = true;\r\n        const components = getParticleComponents(this.node);\r\n        for (let i = 0; i < components.length; ++i) {\r\n            components[i]._startPreview();\r\n        }\r\n    }\r\n\r\n    public onLostFocusInEditor (): void {\r\n        this._focused = false;\r\n        const components = getParticleComponents(this.node);\r\n        for (let i = 0; i < components.length; ++i) {\r\n            components[i]._stopPreview();\r\n        }\r\n    }\r\n\r\n    private _startPreview (): void {\r\n        if (this._preview) {\r\n            this.resetSystem();\r\n        }\r\n    }\r\n\r\n    private _stopPreview (): void {\r\n        if (this._preview) {\r\n            this.resetSystem();\r\n            this.stopSystem();\r\n        }\r\n        if (this._previewTimer) {\r\n            clearInterval(this._previewTimer);\r\n        }\r\n    }\r\n\r\n    public __preload (): void {\r\n        super.__preload();\r\n\r\n        if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {\r\n            this._applySpriteFrame();\r\n        } else if (this._file) {\r\n            if (this._custom) {\r\n                const missCustomTexture = !this._getTexture();\r\n                if (missCustomTexture) {\r\n                    this._applyFile();\r\n                }\r\n            } else {\r\n                this._applyFile();\r\n            }\r\n        }\r\n\r\n        // auto play\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            if (this.playOnLoad) {\r\n                this.resetSystem();\r\n            }\r\n        }\r\n    }\r\n\r\n    public override destroyRenderData (): void {\r\n        if (this._simulator.renderData) {\r\n            const assembler = this._assembler;\r\n            if (assembler && assembler.removeData) {\r\n                assembler.removeData(this._simulator.renderData);\r\n            }\r\n            this._simulator.renderData = null;\r\n        }\r\n        super.destroyRenderData();\r\n    }\r\n\r\n    protected override _flushAssembler (): void {\r\n        const assembler = ParticleSystem2D.Assembler.getAssembler(this);\r\n\r\n        if (this._assembler !== assembler) {\r\n            this._assembler = assembler;\r\n        }\r\n        if (this._assembler && this._assembler.createData) {\r\n            const simulator = this._simulator;\r\n            let renderData = simulator.renderData;\r\n            if (!renderData) {\r\n                renderData = simulator.renderData = this._assembler.createData(this) as MeshRenderData;\r\n                simulator.uvFilled = 0;\r\n                renderData.particleInitRenderDrawInfo(this.renderEntity); // Make sure renderEntity and renderData are both from simulator.\r\n                simulator.initDrawInfo();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected override lateUpdate (dt: number): void {\r\n        if (!this._simulator.finished) {\r\n            this._simulator.step(dt);\r\n        }\r\n    }\r\n\r\n    // APIS\r\n\r\n    /**\r\n     * @en Add a particle to the emitter.\r\n     * @zh 添加一个粒子到发射器中。\r\n     * @return {Boolean}\r\n     */\r\n    public addParticle (): void {\r\n        // Not implemented\r\n    }\r\n\r\n    /**\r\n     * @en Stop emitting particles. Running particles will continue to run until they die.\r\n     * @zh 停止发射器发射粒子，发射出去的粒子将继续运行，直至粒子生命结束。\r\n     * @example\r\n     * // stop particle system.\r\n     * myParticleSystem.stopSystem();\r\n     */\r\n    public stopSystem (): void {\r\n        this._stopped = true;\r\n        this._simulator.stop();\r\n    }\r\n\r\n    /**\r\n     * @en Kill all living particles.\r\n     * @zh 杀死所有存在的粒子，然后重新启动粒子发射器。\r\n     * @example\r\n     * // play particle system.\r\n     * myParticleSystem.resetSystem();\r\n     */\r\n    public resetSystem (): void {\r\n        this._stopped = false;\r\n        this._simulator.reset();\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    /**\r\n     * @en Whether or not the system is full.\r\n     * @zh 发射器中粒子是否大于等于设置的总粒子数量。\r\n     * @return {Boolean}\r\n     */\r\n    public isFull (): boolean {\r\n        return (this.particleCount >= this.totalParticles);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _applyFile (): void {\r\n        const file = this._file;\r\n        if (file) {\r\n            if (!file) {\r\n                errorID(6029);\r\n                return;\r\n            }\r\n            if (!this.isValid) {\r\n                return;\r\n            }\r\n            this._plistFile = file.nativeUrl;\r\n            if (!this._custom) {\r\n                const isDiffFrame = this._spriteFrame !== file.spriteFrame;\r\n                if (isDiffFrame) this.spriteFrame = file.spriteFrame;\r\n                this._initWithDictionary(file._nativeAsset as Record<string, number>);\r\n            }\r\n\r\n            if (!this._spriteFrame) {\r\n                if (file.spriteFrame) {\r\n                    this.spriteFrame = file.spriteFrame;\r\n                } else if (this._custom) {\r\n                    this._initTextureWithDictionary(file._nativeAsset);\r\n                }\r\n            } else if (!this._renderSpriteFrame && this._spriteFrame) {\r\n                this._applySpriteFrame();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _initTextureWithDictionary (dict: any): boolean {\r\n        if (dict.spriteFrameUuid) {\r\n            const spriteFrameUuid: string = dict.spriteFrameUuid;\r\n            assetManager.loadAny(spriteFrameUuid, (err: Error, spriteFrame: SpriteFrame): void => {\r\n                if (!this.isValid) return;\r\n                if (err) {\r\n                    dict.spriteFrameUuid = undefined;\r\n                    this._initTextureWithDictionary(dict);\r\n                    error(err);\r\n                } else {\r\n                    this.spriteFrame = spriteFrame;\r\n                }\r\n            });\r\n        } else {\r\n            // texture\r\n            const imgPath = path.changeBasename(this._plistFile, dict.textureFileName as string || '');\r\n            if (dict.textureFileName) {\r\n                // Try to get the texture from the cache\r\n                assetManager.loadRemote<ImageAsset>(imgPath, (err: Error | null, imageAsset: ImageAsset): void => {\r\n                    if (!this.isValid) return;\r\n                    if (err) {\r\n                        dict.textureFileName = undefined;\r\n                        this._initTextureWithDictionary(dict);\r\n                        error(err);\r\n                    } else {\r\n                        // eslint-disable-next-line no-lonely-if\r\n                        if (imageAsset) {\r\n                            this.spriteFrame = SpriteFrame.createWithImage(imageAsset);\r\n                        } else {\r\n                            this.spriteFrame = SpriteFrame.createWithImage(builtinResMgr.get<ImageAsset>('white-texture'));\r\n                        }\r\n                    }\r\n                });\r\n            } else if (dict.textureImageData) {\r\n                const textureData: string = dict.textureImageData;\r\n\r\n                if (textureData && textureData.length > 0) {\r\n                    let imgPathName = imgPath;\r\n                    if (this.file) {\r\n                        imgPathName += `-${this.file.uuid}`;\r\n                    }\r\n                    let imageAsset = assetManager.assets.get(imgPathName) as ImageAsset;\r\n\r\n                    if (!imageAsset) {\r\n                        const buffer = codec.unzipBase64AsArray(textureData, 1);\r\n                        if (!buffer) {\r\n                            warnID(6030, this._file!.name);\r\n                            return false;\r\n                        }\r\n\r\n                        const imageFormat = getImageFormatByData(buffer);\r\n                        if (imageFormat !== ImageFormat.TIFF && imageFormat !== ImageFormat.PNG) {\r\n                            warnID(6031, this._file!.name);\r\n                            return false;\r\n                        }\r\n\r\n                        const canvasObj = ccwindow.document.createElement('canvas');\r\n                        if (imageFormat === ImageFormat.PNG) {\r\n                            const myPngObj = new PNGReader(buffer);\r\n                            myPngObj.render(canvasObj);\r\n                        } else {\r\n                            tiffReader.parseTIFF(buffer, canvasObj);\r\n                            tiffReader.reset(); // Reset the tiff reader to avoid memory cached in it.\r\n                        }\r\n                        imageAsset = new ImageAsset(canvasObj);\r\n                        assetManager.assets.add(imgPathName, imageAsset);\r\n                    }\r\n\r\n                    if (!imageAsset) {\r\n                        warnID(6032, this._file!.name);\r\n                    }\r\n                    // TODO: Use cc.assetManager to load asynchronously the SpriteFrame object, avoid using textureUtil\r\n                    if (imageAsset) {\r\n                        this.spriteFrame = SpriteFrame.createWithImage(imageAsset);\r\n                    } else {\r\n                        this.spriteFrame = SpriteFrame.createWithImage(builtinResMgr.get<ImageAsset>('white-texture'));\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _initWithDictionary (dict: Record<string, number>): boolean {\r\n        this._useFile = true;\r\n        this.totalParticles = wrapParseInt(dict.maxParticles || 0);\r\n\r\n        // life span\r\n        this.life = wrapParseFloat(dict.particleLifespan || 0);\r\n        this.lifeVar = wrapParseFloat(dict.particleLifespanVariance || 0);\r\n\r\n        // emission Rate\r\n        const _tempEmissionRate = dict.emissionRate;\r\n        if (_tempEmissionRate) {\r\n            this.emissionRate = _tempEmissionRate;\r\n        } else {\r\n            this.emissionRate = Math.min(this.totalParticles / this.life, Number.MAX_VALUE);\r\n        }\r\n\r\n        // duration\r\n        this.duration = wrapParseFloat(dict.duration || 0);\r\n\r\n        // blend function // remove when component remove blend function\r\n        this._srcBlendFactor = wrapParseInt(dict.blendFuncSource || BlendFactor.SRC_ALPHA);\r\n        this._dstBlendFactor = wrapParseInt(dict.blendFuncDestination || BlendFactor.ONE_MINUS_SRC_ALPHA);\r\n\r\n        // color\r\n        const locStartColor = this._startColor;\r\n        locStartColor.r = wrapParseFloat(dict.startColorRed || 0) * 255;\r\n        locStartColor.g = wrapParseFloat(dict.startColorGreen || 0) * 255;\r\n        locStartColor.b = wrapParseFloat(dict.startColorBlue || 0) * 255;\r\n        locStartColor.a = wrapParseFloat(dict.startColorAlpha || 0) * 255;\r\n\r\n        const locStartColorVar = this._startColorVar;\r\n        locStartColorVar.r = wrapParseFloat(dict.startColorVarianceRed || 0) * 255;\r\n        locStartColorVar.g = wrapParseFloat(dict.startColorVarianceGreen || 0) * 255;\r\n        locStartColorVar.b = wrapParseFloat(dict.startColorVarianceBlue || 0) * 255;\r\n        locStartColorVar.a = wrapParseFloat(dict.startColorVarianceAlpha || 0) * 255;\r\n\r\n        const locEndColor = this._endColor;\r\n        locEndColor.r = wrapParseFloat(dict.finishColorRed || 0) * 255;\r\n        locEndColor.g = wrapParseFloat(dict.finishColorGreen || 0) * 255;\r\n        locEndColor.b = wrapParseFloat(dict.finishColorBlue || 0) * 255;\r\n        locEndColor.a = wrapParseFloat(dict.finishColorAlpha || 0) * 255;\r\n\r\n        const locEndColorVar = this._endColorVar;\r\n        locEndColorVar.r = wrapParseFloat(dict.finishColorVarianceRed || 0) * 255;\r\n        locEndColorVar.g = wrapParseFloat(dict.finishColorVarianceGreen || 0) * 255;\r\n        locEndColorVar.b = wrapParseFloat(dict.finishColorVarianceBlue || 0) * 255;\r\n        locEndColorVar.a = wrapParseFloat(dict.finishColorVarianceAlpha || 0) * 255;\r\n\r\n        // particle size\r\n        this.startSize = wrapParseFloat(dict.startParticleSize || 0);\r\n        this.startSizeVar = wrapParseFloat(dict.startParticleSizeVariance || 0);\r\n        this.endSize = wrapParseFloat(dict.finishParticleSize || 0);\r\n        this.endSizeVar = wrapParseFloat(dict.finishParticleSizeVariance || 0);\r\n\r\n        // position\r\n        // Make empty positionType value and old version compatible\r\n        this.positionType = wrapParseFloat(dict.positionType !== undefined ? dict.positionType : PositionType.FREE);\r\n        // for\r\n        this.sourcePos.set(0, 0);\r\n        this.posVar.set(wrapParseFloat(dict.sourcePositionVariancex || 0), wrapParseFloat(dict.sourcePositionVariancey || 0));\r\n        // angle\r\n        this.angle = wrapParseFloat(dict.angle || 0);\r\n        this.angleVar = wrapParseFloat(dict.angleVariance || 0);\r\n\r\n        // Spinning\r\n        this.startSpin = wrapParseFloat(dict.rotationStart || 0);\r\n        this.startSpinVar = wrapParseFloat(dict.rotationStartVariance || 0);\r\n        this.endSpin = wrapParseFloat(dict.rotationEnd || 0);\r\n        this.endSpinVar = wrapParseFloat(dict.rotationEndVariance || 0);\r\n\r\n        this.emitterMode = wrapParseInt(dict.emitterType || EmitterMode.GRAVITY);\r\n\r\n        // Mode A: Gravity + tangential accel + radial accel\r\n        if (this.emitterMode === EmitterMode.GRAVITY) {\r\n            // gravity\r\n            this.gravity.set(wrapParseFloat(dict.gravityx || 0), wrapParseFloat(dict.gravityy || 0));\r\n            // speed\r\n            this.speed = wrapParseFloat(dict.speed || 0);\r\n            this.speedVar = wrapParseFloat(dict.speedVariance || 0);\r\n\r\n            // radial acceleration\r\n            this.radialAccel = wrapParseFloat(dict.radialAcceleration || 0);\r\n            this.radialAccelVar = wrapParseFloat(dict.radialAccelVariance || 0);\r\n\r\n            // tangential acceleration\r\n            this.tangentialAccel = wrapParseFloat(dict.tangentialAcceleration || 0);\r\n            this.tangentialAccelVar = wrapParseFloat(dict.tangentialAccelVariance || 0);\r\n\r\n            // rotation is dir\r\n            let locRotationIsDir = dict.rotationIsDir || '';\r\n            if (locRotationIsDir !== null) {\r\n                locRotationIsDir = locRotationIsDir.toString().toLowerCase();\r\n                this.rotationIsDir = (locRotationIsDir === 'true' || locRotationIsDir === '1');\r\n            } else {\r\n                this.rotationIsDir = false;\r\n            }\r\n        } else if (this.emitterMode === EmitterMode.RADIUS) {\r\n            // or Mode B: radius movement\r\n            this.startRadius = wrapParseFloat(dict.maxRadius || 0);\r\n            this.startRadiusVar = wrapParseFloat(dict.maxRadiusVariance || 0);\r\n            this.endRadius = wrapParseFloat(dict.minRadius || 0);\r\n            this.endRadiusVar = wrapParseFloat(dict.minRadiusVariance || 0);\r\n            this.rotatePerS = wrapParseFloat(dict.rotatePerSecond || 0);\r\n            this.rotatePerSVar = wrapParseFloat(dict.rotatePerSecondVariance || 0);\r\n        } else {\r\n            warnID(6009);\r\n            return false;\r\n        }\r\n\r\n        this._initTextureWithDictionary(dict);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _syncAspect (): void {\r\n        if (this._renderSpriteFrame) {\r\n            const frameRect = this._renderSpriteFrame.rect;\r\n            this.aspectRatio = frameRect.width / frameRect.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _applySpriteFrame (): void {\r\n        this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;\r\n        if (this._renderSpriteFrame) {\r\n            if (this._renderSpriteFrame.texture) {\r\n                if (this._simulator) {\r\n                    this._simulator.updateUVs(true);\r\n                }\r\n                this._syncAspect();\r\n                this._updateMaterial();\r\n                this._stopped = false;\r\n                this._markForUpdateRenderData();\r\n            }\r\n        } else {\r\n            this.resetSystem();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _getTexture (): TextureBase | null {\r\n        return (this._renderSpriteFrame && this._renderSpriteFrame.texture);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _updateMaterial (): void {\r\n        if (this._customMaterial) {\r\n            this.setSharedMaterial(this._customMaterial, 0);\r\n            const target = this.getRenderMaterial(0)!.passes[0].blendState.targets[0];\r\n            this._dstBlendFactor = target.blendDst;\r\n            this._srcBlendFactor = target.blendSrc;\r\n        }\r\n        const mat = this.getMaterialInstance(0);\r\n        if (mat) mat.recompileShaders({ USE_LOCAL: this._positionType !== PositionType.FREE });\r\n        if (mat && mat.passes.length > 0) {\r\n            this._updateBlendFunc();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _finishedSimulation (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (this._preview && this._focused && !this.active /* && !cc.engine.isPlaying */) {\r\n                this.resetSystem();\r\n            }\r\n            return;\r\n        }\r\n        this.resetSystem();\r\n        this.stopSystem();\r\n        this._markForUpdateRenderData();\r\n        if (this.autoRemoveOnFinish && this._stopped) {\r\n            this.node.destroy();\r\n        }\r\n    }\r\n\r\n    protected _canRender (): boolean {\r\n        return super._canRender() && !this._stopped && this._renderSpriteFrame !== null && this._renderSpriteFrame !== undefined;\r\n    }\r\n\r\n    protected _render (render: IBatcher): void {\r\n        if (this._positionType === PositionType.RELATIVE) {\r\n            render.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, this.node.parent);\r\n        } else if (this.positionType === PositionType.GROUPED) {\r\n            render.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, this.node);\r\n        } else {\r\n            render.commitComp(this, this._simulator.renderData, this._renderSpriteFrame, this._assembler, null);\r\n        }\r\n    }\r\n\r\n    protected _updatePositionType (): void {\r\n        if (this._positionType === PositionType.RELATIVE) {\r\n            this._renderEntity.setRenderTransform(this.node.parent);\r\n            this._renderEntity.setUseLocal(true);\r\n        } else if (this.positionType === PositionType.GROUPED) {\r\n            this._renderEntity.setRenderTransform(this.node);\r\n            this._renderEntity.setUseLocal(true);\r\n        } else {\r\n            this._renderEntity.setRenderTransform(null);\r\n            this._renderEntity.setUseLocal(false);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2011 Gordon P. Hemsley\r\n http://gphemsley.org/\r\n\r\n Copyright (c) 2008-2010 Ricardo Quesada\r\n Copyright (c) 2011-2012 cocos2d-x.org\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { getError, logID } from '../core';\r\nimport { ccwindow } from '../core/global-exports';\r\n\r\ninterface IFile {\r\n    type: string;\r\n    values: number[] | string[];\r\n}\r\n\r\ninterface ISampleProperty {\r\n    bitsPerSample: number;\r\n    hasBytesPerSample: boolean;\r\n    bytesPerSample: number | undefined;\r\n}\r\n\r\n/**\r\n * cc.tiffReader is a singleton object, it's a tiff file reader, it can parse byte array to draw into a canvas\r\n * @class\r\n * @name tiffReader\r\n * @mangle\r\n */\r\nexport class TiffReader {\r\n    private _littleEndian = false;\r\n    private _tiffData: number[] = [];\r\n    private _fileDirectories: Record<FieldTagNamesValue, IFile>[] = [];\r\n    private _canvas: HTMLCanvasElement | null = null;\r\n\r\n    constructor () {\r\n    }\r\n\r\n    public getUint8 (offset: number): number {\r\n        return this._tiffData[offset];\r\n    }\r\n\r\n    public getUint16 (offset: number): number {\r\n        if (this._littleEndian) return (this._tiffData[offset + 1] << 8) | (this._tiffData[offset]);\r\n        else return (this._tiffData[offset] << 8) | (this._tiffData[offset + 1]);\r\n    }\r\n\r\n    public getUint32 (offset: number): number {\r\n        const a = this._tiffData;\r\n        if (this._littleEndian) return (a[offset + 3] << 24) | (a[offset + 2] << 16) | (a[offset + 1] << 8) | (a[offset]);\r\n        else return (a[offset] << 24) | (a[offset + 1] << 16) | (a[offset + 2] << 8) | (a[offset + 3]);\r\n    }\r\n\r\n    public checkLittleEndian (): boolean {\r\n        const BOM = this.getUint16(0);\r\n\r\n        if (BOM === 0x4949) {\r\n            this._littleEndian = true;\r\n        } else if (BOM === 0x4D4D) {\r\n            this._littleEndian = false;\r\n        } else {\r\n            // eslint-disable-next-line no-console\r\n            console.log(BOM);\r\n            throw TypeError(getError(6019));\r\n        }\r\n\r\n        return this._littleEndian;\r\n    }\r\n\r\n    public hasTowel (): boolean {\r\n        // Check for towel.\r\n        if (this.getUint16(2) !== 42) {\r\n            throw RangeError(getError(6020));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public getFieldTypeName (fieldType: FieldTypeNamesKey): FieldTypeNamesValue | null {\r\n        const typeNames = fieldTypeNames;\r\n        if (fieldType in typeNames) {\r\n            return typeNames[fieldType];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getFieldTagName (fieldTag: FieldTagNamesKey): FieldTagNamesValue {\r\n        const tagNames = fieldTagNames;\r\n\r\n        if (fieldTag in tagNames) {\r\n            return tagNames[fieldTag];\r\n        } else {\r\n            logID(6021, fieldTag);\r\n            return `Tag${fieldTag}` as FieldTagNamesValue;\r\n        }\r\n    }\r\n\r\n    public getFieldTypeLength (fieldTypeName: FieldTypeNamesValue): number {\r\n        if (['BYTE', 'ASCII', 'SBYTE', 'UNDEFINED'].indexOf(fieldTypeName) !== -1) {\r\n            return 1;\r\n        } else if (['SHORT', 'SSHORT'].indexOf(fieldTypeName) !== -1) {\r\n            return 2;\r\n        } else if (['LONG', 'SLONG', 'FLOAT'].indexOf(fieldTypeName) !== -1) {\r\n            return 4;\r\n        } else if (['RATIONAL', 'SRATIONAL', 'DOUBLE'].indexOf(fieldTypeName) !== -1) {\r\n            return 8;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public getFieldValues (\r\n        fieldTagName: FieldTagNamesValue,\r\n        fieldTypeName: FieldTypeNamesValue,\r\n        typeCount: number,\r\n        valueOffset: number,\r\n    ): string[] | number[] {\r\n        const fieldValues: number[] = [];\r\n        const fieldTypeLength = this.getFieldTypeLength(fieldTypeName);\r\n        const fieldValueSize = fieldTypeLength * typeCount;\r\n\r\n        if (fieldValueSize <= 4) {\r\n            // The value is stored at the big end of the valueOffset.\r\n            if (this._littleEndian === false) fieldValues.push(valueOffset >>> ((4 - fieldTypeLength) * 8));\r\n            else fieldValues.push(valueOffset);\r\n        } else {\r\n            for (let i = 0; i < typeCount; i++) {\r\n                const indexOffset = fieldTypeLength * i;\r\n                if (fieldTypeLength >= 8) {\r\n                    if (['RATIONAL', 'SRATIONAL'].indexOf(fieldTypeName) !== -1) {\r\n                        // Numerator\r\n                        fieldValues.push(this.getUint32(valueOffset + indexOffset));\r\n                        // Denominator\r\n                        fieldValues.push(this.getUint32(valueOffset + indexOffset + 4));\r\n                    } else {\r\n                        logID(8000);\r\n                    }\r\n                } else {\r\n                    fieldValues.push(this.getBytes(fieldTypeLength, valueOffset + indexOffset));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fieldTypeName === 'ASCII') {\r\n            fieldValues.forEach((e, i, a): void => {\r\n                (a as unknown as string[])[i] = String.fromCharCode(e);\r\n            });\r\n        }\r\n        return fieldValues;\r\n    }\r\n\r\n    public getBytes (numBytes: number, offset: number): number {\r\n        if (numBytes <= 0) {\r\n            logID(8001);\r\n        } else if (numBytes <= 1) {\r\n            return this.getUint8(offset);\r\n        } else if (numBytes <= 2) {\r\n            return this.getUint16(offset);\r\n        } else if (numBytes <= 3) {\r\n            return this.getUint32(offset) >>> 8;\r\n        } else if (numBytes <= 4) {\r\n            return this.getUint32(offset);\r\n        } else {\r\n            logID(8002);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    getBits (numBits: number, byteOffset: number, bitOffset: number): {\r\n        bits: number;\r\n        byteOffset: number;\r\n        bitOffset: number;\r\n    } {\r\n        bitOffset = bitOffset || 0;\r\n        const extraBytes = Math.floor(bitOffset / 8);\r\n        const newByteOffset = byteOffset + extraBytes;\r\n        const totalBits = bitOffset + numBits;\r\n        const shiftRight = 32 - numBits;\r\n        let shiftLeft = 0;\r\n        let rawBits = 0;\r\n\r\n        if (totalBits <= 0) {\r\n            logID(6023);\r\n        } else if (totalBits <= 8) {\r\n            shiftLeft = 24 + bitOffset;\r\n            rawBits = this.getUint8(newByteOffset);\r\n        } else if (totalBits <= 16) {\r\n            shiftLeft = 16 + bitOffset;\r\n            rawBits = this.getUint16(newByteOffset);\r\n        } else if (totalBits <= 32) {\r\n            shiftLeft = bitOffset;\r\n            rawBits = this.getUint32(newByteOffset);\r\n        } else {\r\n            logID(6022);\r\n        }\r\n\r\n        return {\r\n            bits: ((rawBits << shiftLeft) >>> shiftRight),\r\n            byteOffset: newByteOffset + Math.floor(totalBits / 8),\r\n            bitOffset: totalBits % 8,\r\n        };\r\n    }\r\n\r\n    parseFileDirectory (offset: number): void {\r\n        const numDirEntries = this.getUint16(offset);\r\n        const tiffFields = {} as Record<FieldTagNamesValue, IFile>;\r\n        let i = 0;\r\n        let entryCount = 0;\r\n\r\n        for (i = offset + 2, entryCount = 0; entryCount < numDirEntries; i += 12, entryCount++) {\r\n            const fieldTag = this.getUint16(i);\r\n            const fieldType = this.getUint16(i + 2);\r\n            const typeCount = this.getUint32(i + 4);\r\n            const valueOffset = this.getUint32(i + 8);\r\n\r\n            const fieldTagName = this.getFieldTagName(fieldTag as FieldTagNamesKey);\r\n            const fieldTypeName = this.getFieldTypeName(fieldType as FieldTypeNamesKey);\r\n            const fieldValues = this.getFieldValues(fieldTagName, fieldTypeName as FieldTypeNamesValue, typeCount, valueOffset);\r\n\r\n            tiffFields[fieldTagName] = { type: fieldTypeName!, values: fieldValues };\r\n        }\r\n\r\n        this._fileDirectories.push(tiffFields);\r\n\r\n        const nextIFDByteOffset = this.getUint32(i);\r\n        if (nextIFDByteOffset !== 0x00000000) {\r\n            this.parseFileDirectory(nextIFDByteOffset);\r\n        }\r\n    }\r\n\r\n    clampColorSample (colorSample: number, bitsPerSample: number): number {\r\n        const multiplier = 2 ** (8 - bitsPerSample);\r\n\r\n        return Math.floor((colorSample * multiplier) + (multiplier - 1));\r\n    }\r\n\r\n    reset (): void {\r\n        this._littleEndian = false;\r\n        this._tiffData = [];\r\n        this._fileDirectories = [];\r\n        this._canvas = null;\r\n    }\r\n\r\n    parseTIFF (tiffData: number[], canvas: HTMLCanvasElement): void {\r\n        canvas = canvas || ccwindow.document.createElement('canvas');\r\n\r\n        this._tiffData = tiffData;\r\n        this._canvas = canvas;\r\n\r\n        this.checkLittleEndian();\r\n\r\n        if (!this.hasTowel()) {\r\n            return;\r\n        }\r\n\r\n        const firstIFDByteOffset = this.getUint32(4);\r\n\r\n        this._fileDirectories.length = 0;\r\n        this.parseFileDirectory(firstIFDByteOffset);\r\n\r\n        const fileDirectory = this._fileDirectories[0];\r\n\r\n        const imageWidth = fileDirectory.ImageWidth.values[0] as number;\r\n        const imageLength = fileDirectory.ImageLength.values[0] as number;\r\n\r\n        this._canvas.width = imageWidth;\r\n        this._canvas.height = imageLength;\r\n\r\n        const strips: Array<Array<Array<number>>> = [];\r\n\r\n        const compression = (fileDirectory.Compression) ? fileDirectory.Compression.values[0] as number : 1;\r\n\r\n        const samplesPerPixel = fileDirectory.SamplesPerPixel.values[0] as number;\r\n\r\n        const sampleProperties: ISampleProperty[] = [];\r\n\r\n        let bitsPerPixel = 0;\r\n        let hasBytesPerPixel = false;\r\n\r\n        fileDirectory.BitsPerSample.values.forEach((bitsPerSample, i, bitsPerSampleValues): void => {\r\n            sampleProperties[i] = {\r\n                bitsPerSample,\r\n                hasBytesPerSample: false,\r\n                bytesPerSample: undefined,\r\n            };\r\n\r\n            if ((bitsPerSample % 8) === 0) {\r\n                sampleProperties[i].hasBytesPerSample = true;\r\n                sampleProperties[i].bytesPerSample = bitsPerSample / 8;\r\n            }\r\n\r\n            bitsPerPixel += bitsPerSample;\r\n        }, this);\r\n\r\n        let bytesPerPixel = 0;\r\n        if ((bitsPerPixel % 8) === 0) {\r\n            hasBytesPerPixel = true;\r\n            bytesPerPixel = bitsPerPixel / 8;\r\n        }\r\n\r\n        const stripOffsetValues = fileDirectory.StripOffsets.values as number[];\r\n        const numStripOffsetValues = stripOffsetValues.length;\r\n\r\n        let stripByteCountValues: number[];\r\n        // StripByteCounts is supposed to be required, but see if we can recover anyway.\r\n        if (fileDirectory.StripByteCounts) {\r\n            stripByteCountValues = fileDirectory.StripByteCounts.values as number[];\r\n        } else {\r\n            logID(8003);\r\n            // Infer StripByteCounts, if possible.\r\n            if (numStripOffsetValues === 1) {\r\n                stripByteCountValues = [Math.ceil((imageWidth * imageLength * bitsPerPixel) / 8)];\r\n            } else {\r\n                throw Error(getError(6024));\r\n            }\r\n        }\r\n        let blockLength = 1;\r\n        let iterations = 1;\r\n        // Loop through strips and decompress as necessary.\r\n        for (let i = 0; i < numStripOffsetValues; i++) {\r\n            const stripOffset = stripOffsetValues[i];\r\n            strips[i] = [];\r\n\r\n            const stripByteCount = stripByteCountValues[i];\r\n            // Loop through pixels.\r\n            for (let byteOffset = 0, bitOffset = 0, jIncrement = 1, getHeader = true,\r\n                pixel: number[] = [], numBytes = 0, sample = 0, currentSample = 0;\r\n                byteOffset < stripByteCount; byteOffset += jIncrement) {\r\n                // Decompress strip.\r\n                switch (compression) {\r\n                // Uncompressed\r\n                case 1:\r\n                    pixel = [];\r\n                    // Loop through samples (sub-pixels).\r\n                    for (let m = 0; m < samplesPerPixel; m++) {\r\n                        const s = sampleProperties[m];\r\n                        if (s.hasBytesPerSample) {\r\n                            // XXX: This is wrong!\r\n                            const sampleOffset = s.bytesPerSample! * m;\r\n                            pixel.push(this.getBytes(s.bytesPerSample!, stripOffset + byteOffset + sampleOffset));\r\n                        } else {\r\n                            const sampleInfo = this.getBits(s.bitsPerSample, stripOffset + byteOffset, bitOffset);\r\n                            pixel.push(sampleInfo.bits);\r\n                            byteOffset = sampleInfo.byteOffset - stripOffset;\r\n                            bitOffset = sampleInfo.bitOffset;\r\n\r\n                            throw RangeError(getError(6025));\r\n                        }\r\n                    }\r\n\r\n                    strips[i].push(pixel);\r\n\r\n                    if (hasBytesPerPixel) {\r\n                        jIncrement = bytesPerPixel;\r\n                    } else {\r\n                        jIncrement = 0;\r\n                        throw RangeError(getError(6026));\r\n                    }\r\n                    break;\r\n\r\n                    // CITT Group 3 1-Dimensional Modified Huffman run-length encoding\r\n                case 2:\r\n                    // XXX: Use PDF.js code?\r\n                    break;\r\n\r\n                    // Group 3 Fax\r\n                case 3:\r\n                    // XXX: Use PDF.js code?\r\n                    break;\r\n\r\n                    // Group 4 Fax\r\n                case 4:\r\n                    // XXX: Use PDF.js code?\r\n                    break;\r\n\r\n                    // LZW\r\n                case 5:\r\n                    // XXX: Use PDF.js code?\r\n                    break;\r\n\r\n                    // Old-style JPEG (TIFF 6.0)\r\n                case 6:\r\n                    // XXX: Use PDF.js code?\r\n                    break;\r\n\r\n                    // New-style JPEG (TIFF Specification Supplement 2)\r\n                case 7:\r\n                    // XXX: Use PDF.js code?\r\n                    break;\r\n\r\n                    // PackBits\r\n                case 32773:\r\n                    // Are we ready for a new block?\r\n                    if (getHeader) {\r\n                        getHeader = false;\r\n                        // The header byte is signed.\r\n                        const header = this.getUint8(stripOffset + byteOffset);\r\n\r\n                        if ((header >= 0) && (header <= 127)) { // Normal pixels.\r\n                            blockLength = header + 1;\r\n                        } else if ((header >= -127) && (header <= -1)) { // Collapsed pixels.\r\n                            iterations = -header + 1;\r\n                        } else /* if (header === -128) */ { // Placeholder byte?\r\n                            getHeader = true;\r\n                        }\r\n                    } else {\r\n                        const currentByte = this.getUint8(stripOffset + byteOffset);\r\n\r\n                        // Duplicate bytes, if necessary.\r\n                        for (let m = 0; m < iterations; m++) {\r\n                            const s: any = sampleProperties[sample];\r\n                            if (s.hasBytesPerSample) {\r\n                                // We're reading one byte at a time, so we need to handle multi-byte samples.\r\n                                currentSample = (currentSample << (8 * numBytes)) | currentByte;\r\n                                numBytes++;\r\n\r\n                                // Is our sample complete?\r\n                                if (numBytes === s.bytesPerSample) {\r\n                                    pixel.push(currentSample);\r\n                                    currentSample = numBytes = 0;\r\n                                    sample++;\r\n                                }\r\n                            } else {\r\n                                throw RangeError(getError(6025));\r\n                            }\r\n\r\n                            // Is our pixel complete?\r\n                            if (sample === samplesPerPixel) {\r\n                                strips[i].push(pixel);\r\n                                pixel = [];\r\n                                sample = 0;\r\n                            }\r\n                        }\r\n\r\n                        blockLength--;\r\n\r\n                        // Is our block complete?\r\n                        if (blockLength === 0) {\r\n                            getHeader = true;\r\n                        }\r\n                    }\r\n\r\n                    jIncrement = 1;\r\n                    break;\r\n\r\n                    // Unknown compression algorithm\r\n                default:\r\n                    // Do not attempt to parse the image data.\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const ctx = this._canvas.getContext('2d');\r\n        if (!ctx) return;\r\n\r\n        // Set a default fill style.\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0)';\r\n\r\n        // If RowsPerStrip is missing, the whole image is in one strip.\r\n        const rowsPerStrip = fileDirectory.RowsPerStrip ? fileDirectory.RowsPerStrip.values[0] as number : imageLength;\r\n\r\n        const numStrips = strips.length;\r\n\r\n        const imageLengthModRowsPerStrip = imageLength % rowsPerStrip;\r\n        const rowsInLastStrip = (imageLengthModRowsPerStrip === 0) ? rowsPerStrip : imageLengthModRowsPerStrip;\r\n\r\n        let numRowsInStrip = rowsPerStrip;\r\n        let numRowsInPreviousStrip = 0;\r\n\r\n        const photometricInterpretation = fileDirectory.PhotometricInterpretation.values[0] as number;\r\n\r\n        let extraSamplesValues: number[] = [];\r\n        let numExtraSamples = 0;\r\n\r\n        if (fileDirectory.ExtraSamples) {\r\n            extraSamplesValues = fileDirectory.ExtraSamples.values as number[];\r\n            numExtraSamples = extraSamplesValues.length;\r\n        }\r\n\r\n        let colorMapValues: number[] = [];\r\n        let colorMapSampleSize = 0;\r\n        if (fileDirectory.ColorMap) {\r\n            colorMapValues = fileDirectory.ColorMap.values as number[];\r\n            colorMapSampleSize = 2 ** sampleProperties[0].bitsPerSample;\r\n        }\r\n\r\n        // Loop through the strips in the image.\r\n        for (let i = 0; i < numStrips; i++) {\r\n            // The last strip may be short.\r\n            if ((i + 1) === numStrips) {\r\n                numRowsInStrip = rowsInLastStrip;\r\n            }\r\n\r\n            const numPixels = strips[i].length;\r\n            const yPadding = numRowsInPreviousStrip * i;\r\n\r\n            // Loop through the rows in the strip.\r\n            for (let y = 0, j = 0; y < numRowsInStrip && j < numPixels; y++) {\r\n                // Loop through the pixels in the row.\r\n                for (let x = 0; x < imageWidth; x++, j++) {\r\n                    const pixelSamples: number[] = strips[i][j];\r\n\r\n                    let red = 0;\r\n                    let green = 0;\r\n                    let blue = 0;\r\n                    let opacity = 1.0;\r\n\r\n                    if (numExtraSamples > 0) {\r\n                        for (let k = 0; k < numExtraSamples; k++) {\r\n                            if (extraSamplesValues[k] === 1 || extraSamplesValues[k] === 2) {\r\n                                // Clamp opacity to the range [0,1].\r\n                                opacity = pixelSamples[3 + k] / 256;\r\n\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    switch (photometricInterpretation) {\r\n                    // Bilevel or Grayscale\r\n                    // WhiteIsZero\r\n                    case 0:\r\n                    {\r\n                        let invertValue = 0;\r\n                        if (sampleProperties[0].hasBytesPerSample) {\r\n                            invertValue = 0x10 ** (sampleProperties[0].bytesPerSample! * 2);\r\n                        }\r\n\r\n                        // Invert samples.\r\n                        pixelSamples.forEach((sample, index, samples): void => {\r\n                            samples[index] = invertValue - sample;\r\n                        });\r\n                    }\r\n                    // Bilevel or Grayscale\r\n                    // BlackIsZero\r\n                    //\r\n                    // FIXME(cjh): ESLint error: 'case' statement requires a 'break' statement.\r\n                    // But I don't know whether it was supposed to be a 'break' statement here.\r\n                    // For now, I'll just leave it as it is and disable the ESLint error.\r\n                    // eslint-disable-next-line no-fallthrough\r\n                    case 1:\r\n                    {\r\n                        red = green = blue = this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);\r\n                        break;\r\n                    }\r\n                    // RGB Full Color\r\n                    case 2:\r\n                        red = this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);\r\n                        green = this.clampColorSample(pixelSamples[1], sampleProperties[1].bitsPerSample);\r\n                        blue = this.clampColorSample(pixelSamples[2], sampleProperties[2].bitsPerSample);\r\n                        break;\r\n\r\n                        // RGB Color Palette\r\n                    case 3:\r\n                    {\r\n                        if (colorMapValues === undefined) {\r\n                            throw Error(getError(6027));\r\n                        }\r\n\r\n                        const colorMapIndex = pixelSamples[0];\r\n\r\n                        red = this.clampColorSample(colorMapValues[colorMapIndex], 16);\r\n                        green = this.clampColorSample(colorMapValues[colorMapSampleSize + colorMapIndex], 16);\r\n                        blue = this.clampColorSample(colorMapValues[(2 * colorMapSampleSize) + colorMapIndex], 16);\r\n                        break;\r\n                    }\r\n                    // Unknown Photometric Interpretation\r\n                    default:\r\n                        throw RangeError(getError(6028, photometricInterpretation));\r\n                    }\r\n\r\n                    ctx.fillStyle = `rgba(${red}, ${green}, ${blue}, ${opacity})`;\r\n                    ctx.fillRect(x, yPadding + y, 1, 1);\r\n                }\r\n            }\r\n\r\n            numRowsInPreviousStrip = numRowsInStrip;\r\n        }\r\n    }\r\n\r\n    // See: http://www.digitizationguidelines.gov/guidelines/TIFF_Metadata_Final.pdf\r\n    // See: http://www.digitalpreservation.gov/formats/content/tiff_tags.shtml\r\n}\r\n\r\nconst fieldTagNames = {\r\n    // TIFF Baseline\r\n    0x013B: 'Artist',\r\n    0x0102: 'BitsPerSample',\r\n    0x0109: 'CellLength',\r\n    0x0108: 'CellWidth',\r\n    0x0140: 'ColorMap',\r\n    0x0103: 'Compression',\r\n    0x8298: 'Copyright',\r\n    0x0132: 'DateTime',\r\n    0x0152: 'ExtraSamples',\r\n    0x010A: 'FillOrder',\r\n    0x0121: 'FreeByteCounts',\r\n    0x0120: 'FreeOffsets',\r\n    0x0123: 'GrayResponseCurve',\r\n    0x0122: 'GrayResponseUnit',\r\n    0x013C: 'HostComputer',\r\n    0x010E: 'ImageDescription',\r\n    0x0101: 'ImageLength',\r\n    0x0100: 'ImageWidth',\r\n    0x010F: 'Make',\r\n    0x0119: 'MaxSampleValue',\r\n    0x0118: 'MinSampleValue',\r\n    0x0110: 'Model',\r\n    0x00FE: 'NewSubfileType',\r\n    0x0112: 'Orientation',\r\n    0x0106: 'PhotometricInterpretation',\r\n    0x011C: 'PlanarConfiguration',\r\n    0x0128: 'ResolutionUnit',\r\n    0x0116: 'RowsPerStrip',\r\n    0x0115: 'SamplesPerPixel',\r\n    0x0131: 'Software',\r\n    0x0117: 'StripByteCounts',\r\n    0x0111: 'StripOffsets',\r\n    0x00FF: 'SubfileType',\r\n    0x0107: 'Threshholding',\r\n    0x011A: 'XResolution',\r\n    0x011B: 'YResolution',\r\n\r\n    // TIFF Extended\r\n    0x0146: 'BadFaxLines',\r\n    0x0147: 'CleanFaxData',\r\n    0x0157: 'ClipPath',\r\n    0x0148: 'ConsecutiveBadFaxLines',\r\n    0x01B1: 'Decode',\r\n    0x01B2: 'DefaultImageColor',\r\n    0x010D: 'DocumentName',\r\n    0x0150: 'DotRange',\r\n    0x0141: 'HalftoneHints',\r\n    0x015A: 'Indexed',\r\n    0x015B: 'JPEGTables',\r\n    0x011D: 'PageName',\r\n    0x0129: 'PageNumber',\r\n    0x013D: 'Predictor',\r\n    0x013F: 'PrimaryChromaticities',\r\n    0x0214: 'ReferenceBlackWhite',\r\n    0x0153: 'SampleFormat',\r\n    0x022F: 'StripRowCounts',\r\n    0x014A: 'SubIFDs',\r\n    0x0124: 'T4Options',\r\n    0x0125: 'T6Options',\r\n    0x0145: 'TileByteCounts',\r\n    0x0143: 'TileLength',\r\n    0x0144: 'TileOffsets',\r\n    0x0142: 'TileWidth',\r\n    0x012D: 'TransferFunction',\r\n    0x013E: 'WhitePoint',\r\n    0x0158: 'XClipPathUnits',\r\n    0x011E: 'XPosition',\r\n    0x0211: 'YCbCrCoefficients',\r\n    0x0213: 'YCbCrPositioning',\r\n    0x0212: 'YCbCrSubSampling',\r\n    0x0159: 'YClipPathUnits',\r\n    0x011F: 'YPosition',\r\n\r\n    // EXIF\r\n    0x9202: 'ApertureValue',\r\n    0xA001: 'ColorSpace',\r\n    0x9004: 'DateTimeDigitized',\r\n    0x9003: 'DateTimeOriginal',\r\n    0x8769: 'Exif IFD',\r\n    0x9000: 'ExifVersion',\r\n    0x829A: 'ExposureTime',\r\n    0xA300: 'FileSource',\r\n    0x9209: 'Flash',\r\n    0xA000: 'FlashpixVersion',\r\n    0x829D: 'FNumber',\r\n    0xA420: 'ImageUniqueID',\r\n    0x9208: 'LightSource',\r\n    0x927C: 'MakerNote',\r\n    0x9201: 'ShutterSpeedValue',\r\n    0x9286: 'UserComment',\r\n\r\n    // IPTC\r\n    0x83BB: 'IPTC',\r\n\r\n    // ICC\r\n    0x8773: 'ICC Profile',\r\n\r\n    // XMP\r\n    0x02BC: 'XMP',\r\n\r\n    // GDAL\r\n    0xA480: 'GDAL_METADATA',\r\n    0xA481: 'GDAL_NODATA',\r\n\r\n    // Photoshop\r\n    0x8649: 'Photoshop',\r\n} as const;\r\n\r\ntype FieldTagNamesKey = keyof typeof fieldTagNames;\r\ntype FieldTagNamesValue = typeof fieldTagNames[FieldTagNamesKey];\r\n\r\nconst fieldTypeNames = {\r\n    0x0001: 'BYTE',\r\n    0x0002: 'ASCII',\r\n    0x0003: 'SHORT',\r\n    0x0004: 'LONG',\r\n    0x0005: 'RATIONAL',\r\n    0x0006: 'SBYTE',\r\n    0x0007: 'UNDEFINED',\r\n    0x0008: 'SSHORT',\r\n    0x0009: 'SLONG',\r\n    0x000A: 'SRATIONAL',\r\n    0x000B: 'FLOAT',\r\n    0x000C: 'DOUBLE',\r\n} as const;\r\n\r\ntype FieldTypeNamesKey = keyof typeof fieldTypeNames;\r\ntype FieldTypeNamesValue = typeof fieldTypeNames[FieldTypeNamesKey];\r\n\r\nexport const tiffReader = new TiffReader();\r\n","/*\r\n Copyright (c) 2013-2016 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, executeInEditMode, serializable, playOnFocus, menu, help, editable, type } from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW, JSB } from 'internal:constants';\r\nimport { UIRenderer } from '../2d/framework';\r\nimport { Texture2D } from '../asset/assets/texture-2d';\r\nimport type { IBatcher } from '../2d/renderer/i-batcher';\r\nimport { Vec2 } from '../core';\r\nimport type { RenderData } from '../2d/renderer/render-data';\r\nimport { RenderEntityFillColorType } from '../2d/renderer/render-entity';\r\n\r\nexport class Point {\r\n    public point = new Vec2();\r\n    public dir = new Vec2();\r\n    public distance = 0;\r\n    public time = 0;\r\n\r\n    constructor (point?: Vec2, dir?: Vec2) {\r\n        if (point) this.point.set(point);\r\n        if (dir) this.dir.set(dir);\r\n    }\r\n\r\n    public setPoint (x: number, y: number): void {\r\n        this.point.x = x;\r\n        this.point.y = y;\r\n    }\r\n\r\n    public setDir (x: number, y: number): void {\r\n        this.dir.x = x;\r\n        this.dir.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * @en\r\n * cc.MotionStreak manages a Ribbon based on it's motion in absolute space.                 <br/>\r\n * You construct it with a fadeTime, minimum segment size, texture path, texture            <br/>\r\n * length and color. The fadeTime controls how long it takes each vertex in                 <br/>\r\n * the streak to fade out, the minimum segment size it how many pixels the                  <br/>\r\n * streak will move before adding a new ribbon segment, and the texture                     <br/>\r\n * length is the how many pixels the texture is stretched across. The texture               <br/>\r\n * is vertically aligned along the streak segment.\r\n * @zh 运动轨迹，用于游戏对象的运动轨迹上实现拖尾渐隐效果。\r\n */\r\n@ccclass('cc.MotionStreak')\r\n@executeInEditMode\r\n@playOnFocus\r\n@menu('Effects/MotionStreak')\r\n@help('i18n:COMPONENT.help_url.motionStreak')\r\nexport class MotionStreak extends UIRenderer {\r\n    public static Point = Point;\r\n\r\n    constructor () {\r\n        super();\r\n        this.setFillColorType(RenderEntityFillColorType.VERTEX);\r\n    }\r\n\r\n    /**\r\n     * @en Preview the trailing effect in editor mode.\r\n     * @zh 在编辑器模式下预览拖尾效果。\r\n     */\r\n    @editable\r\n    public get preview (): boolean {\r\n        return this._preview;\r\n    }\r\n\r\n    public set preview (val: boolean) {\r\n        this._preview = val;\r\n        this.reset();\r\n    }\r\n    /**\r\n     * @en The fade time to fade.\r\n     * @zh 拖尾的渐隐时间，以秒为单位。\r\n     * @example\r\n     * motionStreak.fadeTime = 3;\r\n     */\r\n    @editable\r\n    public get fadeTime (): number {\r\n        return this._fadeTime;\r\n    }\r\n\r\n    public set fadeTime (val) {\r\n        this._fadeTime = val;\r\n        this.reset();\r\n    }\r\n    /**\r\n     * @en The minimum segment size.\r\n     * @zh 拖尾之间最小距离。\r\n     * @example\r\n     * motionStreak.minSeg = 3;\r\n     */\r\n    @editable\r\n    public get minSeg (): number {\r\n        return this._minSeg;\r\n    }\r\n    public set minSeg (val) {\r\n        this._minSeg = val;\r\n    }\r\n    /**\r\n     * @en The stroke's width.\r\n     * @zh 拖尾的宽度。\r\n     * @example\r\n     * motionStreak.stroke = 64;\r\n     */\r\n    @editable\r\n    public get stroke (): number {\r\n        return this._stroke;\r\n    }\r\n    public set stroke (val) {\r\n        this._stroke = val;\r\n    }\r\n\r\n    /**\r\n     * @en The texture of the MotionStreak.\r\n     * @zh 拖尾的贴图。\r\n     * @example\r\n     * motionStreak.texture = newTexture;\r\n     */\r\n    @type(Texture2D)\r\n    public get texture (): Texture2D | null {\r\n        return this._texture;\r\n    }\r\n\r\n    public set texture (val) {\r\n        if (this._texture === val) return;\r\n\r\n        this._texture = val;\r\n    }\r\n    /**\r\n     * @en The fast Mode.\r\n     * @zh 是否启用了快速模式。当启用快速模式，新的点会被更快地添加，但精度较低。\r\n     * @example\r\n     * motionStreak.fastMode = true;\r\n     */\r\n    @editable\r\n    public get fastMode (): boolean {\r\n        return this._fastMode;\r\n    }\r\n    public set fastMode (val: boolean) {\r\n        this._fastMode = val;\r\n    }\r\n\r\n    public get points (): Point[] {\r\n        return this._points;\r\n    }\r\n\r\n    @serializable\r\n    private _preview = false;\r\n    @serializable\r\n    private _fadeTime = 1;\r\n    @serializable\r\n    private _minSeg = 1;\r\n    @serializable\r\n    private _stroke = 64;\r\n    @serializable\r\n    private _texture: Texture2D | null  = null;\r\n    @serializable\r\n    private _fastMode = false;\r\n    private _points: Point[] = [];\r\n\r\n    public onEnable (): void {\r\n        super.onEnable();\r\n        this.reset();\r\n    }\r\n\r\n    protected _flushAssembler (): void {\r\n        const assembler = MotionStreak.Assembler.getAssembler(this);\r\n\r\n        if (this._assembler !== assembler) {\r\n            this._assembler = assembler;\r\n        }\r\n\r\n        if (!this._renderData) {\r\n            if (this._assembler && this._assembler.createData) {\r\n                this._renderData = this._assembler.createData(this) as RenderData;\r\n                this._renderData.material = this.material;\r\n                if (JSB) {\r\n                    this._renderData.renderDrawInfo.setVertexPositionInWorld(true);\r\n                }\r\n                this._updateColor();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onFocusInEditor (): void {\r\n        if (this._preview) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public onLostFocusInEditor (): void {\r\n        if (this._preview) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Remove all living segments of the ribbon.\r\n     * @zh 删除当前所有的拖尾片段。\r\n     * @example\r\n     * // Remove all living segments of the ribbon.\r\n     * myMotionStreak.reset();\r\n     */\r\n    public reset (): void {\r\n        this._points.length = 0;\r\n        if (this._renderData) this._renderData.clear();\r\n    }\r\n\r\n    public lateUpdate (dt: number): void {\r\n        if (EDITOR_NOT_IN_PREVIEW && !this._preview) return;\r\n        if (this._assembler && this._assembler.update) {\r\n            this._assembler.update(this, dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _render (render: IBatcher): void {\r\n        render.commitComp(this, this._renderData, this._texture, this._assembler, null);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2018 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport type { IAssembler, IAssemblerManager } from '../2d/renderer/base';\r\nimport { MotionStreak, Point } from './motion-streak-2d';\r\nimport { Vec2, Color } from '../core';\r\nimport type { IBatcher } from '../2d/renderer/i-batcher';\r\nimport type { RenderData } from '../2d/renderer/render-data';\r\n\r\nconst _normal = new Vec2();\r\nconst _vec2 = new Vec2();\r\nlet QUAD_INDICES: Uint16Array | null = null;\r\n\r\nfunction normal (out: Vec2, dir: Vec2): Vec2 {\r\n    // get perpendicular\r\n    out.x = -dir.y;\r\n    out.y = dir.x;\r\n    return out;\r\n}\r\n\r\nclass MotionStreakAssembler implements IAssembler {\r\n    createData (comp: MotionStreak): RenderData {\r\n        const renderData = comp.requestRenderData();\r\n        renderData.dataLength = 4;\r\n        renderData.resize(16, (16 - 2) * 3);\r\n        return renderData;\r\n    }\r\n\r\n    update (comp: MotionStreak, dt: number): void {\r\n        const stroke = comp.stroke / 2;\r\n\r\n        const node = comp.node;\r\n        const matrix = node.worldMatrix;\r\n        const tx = matrix.m12;\r\n        const ty = matrix.m13;\r\n\r\n        const points = comp.points;\r\n\r\n        let cur: Point | undefined;\r\n        if (points.length > 1) {\r\n            const point = points[0];\r\n            const difx = point.point.x - tx;\r\n            const dify = point.point.y - ty;\r\n            if ((difx * difx + dify * dify) < comp.minSeg) {\r\n                cur = point;\r\n            }\r\n        }\r\n\r\n        if (!cur) {\r\n            cur = new Point();\r\n            points.unshift(cur);\r\n        }\r\n\r\n        cur.setPoint(tx, ty);\r\n        cur.time = comp.fadeTime + dt;\r\n\r\n        let vertexCount = 0;\r\n        let indexCount = 0;\r\n        const renderData = comp.renderData;\r\n        if (points.length < 2 || !renderData) {\r\n            return;\r\n        }\r\n\r\n        this.updateRenderDataCache(comp, renderData);\r\n        const color = comp.color;\r\n        const cr = color.r;\r\n        const cg = color.g;\r\n        const cb = color.b;\r\n\r\n        const ca = node._uiProps.opacity * color.a;\r\n\r\n        const prev = points[1];\r\n        prev.distance = Vec2.subtract(_vec2, cur.point, prev.point).length();\r\n        _vec2.normalize();\r\n        prev.setDir(_vec2.x, _vec2.y);\r\n        cur.setDir(_vec2.x, _vec2.y);\r\n\r\n        renderData.dataLength = points.length * 2;\r\n\r\n        const data = renderData.data;\r\n        const fadeTime = comp.fadeTime;\r\n        let findLast = false;\r\n        for (let i = points.length - 1; i >= 0; i--) {\r\n            const p = points[i];\r\n            const point = p.point;\r\n            const dir = p.dir;\r\n            p.time -= dt;\r\n\r\n            if (p.time < 0) {\r\n                points.splice(i, 1);\r\n                continue;\r\n            }\r\n\r\n            const progress = p.time / fadeTime;\r\n\r\n            const next = points[i - 1];\r\n            if (!findLast) {\r\n                if (!next) {\r\n                    points.splice(i, 1);\r\n                    continue;\r\n                }\r\n\r\n                point.x = next.point.x - dir.x * progress;\r\n                point.y = next.point.y - dir.y * progress;\r\n            }\r\n            findLast = true;\r\n\r\n            normal(_normal, dir);\r\n\r\n            const da = progress * ca;\r\n\r\n            let offset = vertexCount;\r\n\r\n            data[offset].x = point.x + _normal.x * stroke;\r\n            data[offset].y = point.y + _normal.y * stroke;\r\n            data[offset].u = 1;\r\n            data[offset].v = progress;\r\n            data[offset].color.set(cr, cg, cb, da);\r\n\r\n            offset += 1;\r\n\r\n            data[offset].x = point.x - _normal.x * stroke;\r\n            data[offset].y = point.y - _normal.y * stroke;\r\n            data[offset].u = 0;\r\n            data[offset].v = progress;\r\n            data[offset].color.set(cr, cg, cb, da);\r\n\r\n            vertexCount += 2;\r\n        }\r\n\r\n        indexCount = vertexCount <= 2 ? 0 : (vertexCount - 2) * 3;\r\n\r\n        renderData.resize(vertexCount, indexCount); // resize\r\n\r\n        if (JSB) {\r\n            const indexCount = renderData.indexCount;\r\n            this.createQuadIndices(comp, indexCount);\r\n            renderData.chunk.setIndexBuffer(QUAD_INDICES!);\r\n\r\n            //  Fill all dataList to vData\r\n            this.updateWorldVertexAllData(comp);\r\n\r\n            renderData.updateRenderData(comp, comp.texture!);\r\n            comp._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    private updateWorldVertexAllData (comp: MotionStreak): void {\r\n        if (!JSB) return;\r\n        const renderData = comp.renderData;\r\n        if (!renderData) return;\r\n        const stride = renderData.floatStride;\r\n        const dataList = renderData.data;\r\n        const vData = renderData.chunk.vb;\r\n        const vertexCount = renderData.vertexCount;\r\n        for (let i  = 0; i < vertexCount; i++) {\r\n            const offset = i * stride;\r\n            vData[offset + 0] = dataList[i].x;\r\n            vData[offset + 1] = dataList[i].y;\r\n            vData[offset + 2] = dataList[i].z;\r\n            vData[offset + 3] = dataList[i].u;\r\n            vData[offset + 4] = dataList[i].v;\r\n            Color.toArray(vData, dataList[i].color, offset + 5);\r\n        }\r\n    }\r\n\r\n    private createQuadIndices (comp: MotionStreak, indexCount: number): void {\r\n        if (!JSB) return;\r\n        const renderData = comp.renderData;\r\n        if (!renderData) return;\r\n        const chunk = renderData.chunk;\r\n        const vid = 0;\r\n        const meshBuffer = chunk.meshBuffer;\r\n        let indexOffset = meshBuffer.indexOffset;\r\n        QUAD_INDICES = null;\r\n        QUAD_INDICES = new Uint16Array(indexCount);\r\n        for (let i = 0, l = indexCount; i < l; i += 2) {\r\n            const start = vid + i;\r\n            QUAD_INDICES[indexOffset++] = start;\r\n            QUAD_INDICES[indexOffset++] = start + 2;\r\n            QUAD_INDICES[indexOffset++] = start + 1;\r\n            QUAD_INDICES[indexOffset++] = start + 1;\r\n            QUAD_INDICES[indexOffset++] = start + 2;\r\n            QUAD_INDICES[indexOffset++] = start + 3;\r\n        }\r\n    }\r\n\r\n    private updateRenderDataCache (comp: MotionStreak, renderData: RenderData): void {\r\n        if (renderData.passDirty) {\r\n            renderData.updatePass(comp);\r\n        }\r\n        if (renderData.nodeDirty) {\r\n            renderData.updateNode(comp);\r\n        }\r\n        if (renderData.textureDirty && comp.texture) {\r\n            renderData.updateTexture(comp.texture);\r\n            renderData.material = comp.getRenderMaterial(0);\r\n        }\r\n        if (renderData.hashDirty) {\r\n            renderData.updateHash();\r\n        }\r\n    }\r\n\r\n    fillBuffers (comp: MotionStreak, renderer: IBatcher): void {\r\n        const renderData = comp.renderData;\r\n        if (!renderData) return;\r\n        const chunk = renderData.chunk;\r\n        const dataList = renderData.data;\r\n\r\n        const vertexCount = renderData.vertexCount;\r\n        const indexCount = renderData.indexCount;\r\n\r\n        const vData = chunk.vb;\r\n        let vertexOffset = 0;\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const vert = dataList[i];\r\n            vData[vertexOffset++] = vert.x;\r\n            vData[vertexOffset++] = vert.y;\r\n            vData[vertexOffset++] = vert.z;\r\n            vData[vertexOffset++] = vert.u;\r\n            vData[vertexOffset++] = vert.v;\r\n            Color.toArray(vData, vert.color, vertexOffset);\r\n            vertexOffset += 4;\r\n        }\r\n\r\n        // fill index data\r\n        const bid = chunk.bufferId;\r\n        const vid = chunk.vertexOffset;\r\n        const meshBuffer = chunk.meshBuffer;\r\n        const ib = chunk.meshBuffer.iData;\r\n        let indexOffset = meshBuffer.indexOffset;\r\n        for (let i = 0, l = indexCount; i < l; i += 2) {\r\n            const start = vid + i;\r\n            ib[indexOffset++] = start;\r\n            ib[indexOffset++] = start + 2;\r\n            ib[indexOffset++] = start + 1;\r\n            ib[indexOffset++] = start + 1;\r\n            ib[indexOffset++] = start + 2;\r\n            ib[indexOffset++] = start + 3;\r\n        }\r\n\r\n        meshBuffer.indexOffset += renderData.indexCount;\r\n        meshBuffer.setDirty();\r\n    }\r\n}\r\n\r\nconst motionStreakAssembler = new MotionStreakAssembler();\r\n\r\nexport const MotionStreakAssemblerManager: IAssemblerManager = {\r\n    getAssembler (comp: MotionStreak): IAssembler {\r\n        return motionStreakAssembler;\r\n    },\r\n};\r\n\r\nMotionStreak.Assembler = MotionStreakAssemblerManager;\r\n","/*\r\n Copyright (c) 2017-2018 Chukong Technologies Inc.\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport type { IAssembler, IAssemblerManager } from '../2d/renderer/base';\r\nimport { ParticleSystem2D } from './particle-system-2d';\r\nimport { MeshRenderData } from '../2d/renderer/render-data';\r\nimport { cclegacy } from '../core';\r\n\r\nexport class Particle2DAssembler implements IAssembler {\r\n    maxParticleDeltaTime = 0;\r\n\r\n    createData (comp: ParticleSystem2D): MeshRenderData {\r\n        return MeshRenderData.add();\r\n    }\r\n\r\n    removeData (data: MeshRenderData): void {\r\n        MeshRenderData.remove(data);\r\n    }\r\n}\r\n\r\nexport const particle2DAssembler = new Particle2DAssembler();\r\n\r\nexport const ParticleSystem2DAssembler: IAssemblerManager = {\r\n    getAssembler (comp: ParticleSystem2D): IAssembler {\r\n        if (!particle2DAssembler.maxParticleDeltaTime) {\r\n            particle2DAssembler.maxParticleDeltaTime = cclegacy.game.frameTime / 1000 * 2;\r\n        }\r\n        return particle2DAssembler;\r\n    },\r\n};\r\n\r\nParticleSystem2D.Assembler = ParticleSystem2DAssembler;\r\n"],"names":["EmitterMode","Enum","GRAVITY","RADIUS","PositionType","FREE","RELATIVE","GROUPED","_pos","Vec2","_tpa","_tpb","_tpc","_col","Vec4","formatBytes","getComponentPerVertex","vfmtPosUvColor","getWorldRotation","node","rotation","tempNode","eulerAngles","z","parent","Particle","this","pos","startPos","color","Color","deltaColor","r","g","b","a","size","deltaSize","deltaRotation","timeToLive","drawPos","aspectRatio","dir","radialAccel","tangentialAccel","angle","degreesPerSecond","radius","deltaRadius","ParticlePool","_js$Pool","apply","arguments","_inheritsLoose","prototype","get","_get","js","pool","par","set","ZERO","Simulator","system","particles","active","uvFilled","finished","renderData","readyToPlay","elapsed","emitCounter","_worldRotation","sys","_proto2","stop","duration","reset","id","length","put","resize","emitParticle","psys","particle","push","life","lifeVar","random","Math","max","x","sourcePos","posVar","y","sr","sg","sb","sa","startColor","startColorVar","endColor","endColorVar","clamp","startS","startSize","startSizeVar","endSize","endS","endSizeVar","startA","startSpin","startSpinVar","endA","endSpin","endSpinVar","toRadian","angleVar","emitterMode","s","speed","speedVar","cos","sin","multiplyScalar","radialAccelVar","tangentialAccelVar","rotationIsDir","toDegree","atan2","startRadius","startRadiusVar","endRadius","endRadiusVar","rotatePerS","rotatePerSVar","updateUVs","force","_renderSpriteFrame","vbuf","vData","uv","start","particleCount","i","offset","updateParticleBuffer","buffer","width","height","halfWidth","halfHeight","x1","y1","x2","y2","rad","cr","pcol","w","toArray","step","dt","assembler","maxParticleDeltaTime","updateWorldTransform","positionType","m","worldMatrix","m12","m13","position","emissionRate","rate","totalParticles","stopSystem","requestData","particleIdx","tmp","radial","tangential","normalize","newy","add","gravity","newPos","deadParticle","vertexCount","indexCount","material","getRenderMaterial","frame","setRenderDrawInfoAttributes","_finishedSimulation","request","count","iData","vId","initDrawInfo","_this$renderData","serializable","_decorator","ParticleAsset","exports","_dec","_class2","_Asset","_this","_len","args","Array","_key","call","concat","spriteFrame","_initializer","Asset","_class","cclegacy","ImageFormat","PNGReader","data","palette","imgData","transparency","indexed","rgb","grayscale","text","bits","colorType","compressionMethod","filterMethod","interlaceMethod","colors","hasAlphaChannel","pixelBitlength","_decodedPalette","thisData","chunkSize","readUInt32","section","results","_i","String","fromCharCode","join","animation","numFrames","numPlays","Infinity","frames","read","xOffset","yOffset","delay","disposeOp","blendOp","delayNum","readUInt16","delayDen","undefined","ccshort","_j","index","indexOf","key","slice","_ref","colorSpace","Uint8Array","Error","getError","_proto","bytes","_results","decodePixels","zlib","Inflate","verify","decompress","pixelBytes","scanlineLength","pixels","row","c","ccbyte","col","_k","_l","_m","left","p","pa","paeth","pb","pc","upper","upperLeft","floor","abs","copyToImageData","imageData","alpha","decodePalette","input","j","k","v","ret","_ref1","render","canvas","ctx","getContext","createImageData","putImageData","TiffReader","_littleEndian","_tiffData","_fileDirectories","_canvas","getUint8","getUint16","getUint32","checkLittleEndian","BOM","console","log","TypeError","hasTowel","RangeError","getFieldTypeName","fieldType","fieldTypeNames","getFieldTagName","fieldTag","fieldTagNames","logID","getFieldTypeLength","fieldTypeName","getFieldValues","fieldTagName","typeCount","valueOffset","fieldValues","fieldTypeLength","indexOffset","getBytes","forEach","e","numBytes","getBits","numBits","byteOffset","bitOffset","newByteOffset","totalBits","shiftRight","shiftLeft","rawBits","parseFileDirectory","numDirEntries","tiffFields","entryCount","type","values","nextIFDByteOffset","clampColorSample","colorSample","bitsPerSample","multiplier","pow","parseTIFF","tiffData","ccwindow","document","createElement","firstIFDByteOffset","fileDirectory","imageWidth","ImageWidth","imageLength","ImageLength","strips","compression","Compression","samplesPerPixel","SamplesPerPixel","sampleProperties","bitsPerPixel","hasBytesPerPixel","BitsPerSample","hasBytesPerSample","bytesPerSample","bytesPerPixel","stripByteCountValues","stripOffsetValues","StripOffsets","numStripOffsetValues","StripByteCounts","ceil","blockLength","iterations","stripOffset","stripByteCount","jIncrement","getHeader","pixel","sample","currentSample","sampleInfo","sampleOffset","header","currentByte","fillStyle","rowsPerStrip","RowsPerStrip","numStrips","imageLengthModRowsPerStrip","rowsInLastStrip","numRowsInStrip","numRowsInPreviousStrip","photometricInterpretation","PhotometricInterpretation","extraSamplesValues","numExtraSamples","ExtraSamples","colorMapValues","colorMapSampleSize","ColorMap","numPixels","yPadding","_loop","pixelSamples","red","green","blue","opacity","invertValue","samples","colorMapIndex","fillRect","tiffReader","getParticleComponents","comp","getComponent","ParticleSystem2D","getComponentsInChildren","wrapParseInt","parseInt","wrapParseFloat","parseFloat","ccclass","_dec3","SpriteFrame","_dec4","_dec6","formerlySerializedAs","_class3","_UIRenderer","_initializer2","_initializer3","_initializer4","_initializer5","_initializer6","_initializer7","_initializer8","_initializer9","_initializer10","_initializer11","_initializer12","_initializer13","_initializer14","_initializer15","_initializer16","_initializer17","_initializer18","_initializer19","_initializer20","_initializer21","_initializer22","_initializer23","_initializer24","_initializer25","_initializer26","_initializer27","_initializer28","_initializer29","_initializer30","_initializer31","playOnLoad","_initializer32","autoRemoveOnFinish","_initializer33","_preview","_initializer34","_custom","_initializer35","_file","_initializer36","_spriteFrame","_initializer37","_totalParticles","_initializer38","_startColor","_initializer39","_startColorVar","_initializer40","_endColor","_initializer41","_endColorVar","_initializer42","_positionType","_initializer43","_stopped","_useFile","initProperties","onEnable","_updateMaterial","_updatePositionType","onDestroy","_simulator","destroyRenderData","_previewTimer","_focused","onFocusInEditor","components","_startPreview","onLostFocusInEditor","_stopPreview","resetSystem","clearInterval","__preload","_applySpriteFrame","_getTexture","_applyFile","_assembler","removeData","_flushAssembler","Assembler","getAssembler","createData","simulator","particleInitRenderDrawInfo","renderEntity","lateUpdate","addParticle","_markForUpdateRenderData","isFull","file","errorID","isValid","_plistFile","nativeUrl","_initWithDictionary","_nativeAsset","_initTextureWithDictionary","dict","_this2","spriteFrameUuid","assetManager","loadAny","err","error","imgPath","path","textureFileName","loadRemote","imageAsset","createWithImage","builtinResMgr","textureImageData","textureData","imgPathName","uuid","assets","codec","unzipBase64AsArray","warnID","name","imageFormat","PNG","TIFF","UNKNOWN","canvasObj","ImageAsset","maxParticles","particleLifespan","particleLifespanVariance","_tempEmissionRate","min","Number","MAX_VALUE","_srcBlendFactor","blendFuncSource","BlendFactor","SRC_ALPHA","_dstBlendFactor","blendFuncDestination","ONE_MINUS_SRC_ALPHA","locStartColor","startColorRed","startColorGreen","startColorBlue","startColorAlpha","locStartColorVar","startColorVarianceRed","startColorVarianceGreen","startColorVarianceBlue","startColorVarianceAlpha","locEndColor","finishColorRed","finishColorGreen","finishColorBlue","finishColorAlpha","locEndColorVar","finishColorVarianceRed","finishColorVarianceGreen","finishColorVarianceBlue","finishColorVarianceAlpha","startParticleSize","startParticleSizeVariance","finishParticleSize","finishParticleSizeVariance","sourcePositionVariancex","sourcePositionVariancey","angleVariance","rotationStart","rotationStartVariance","rotationEnd","rotationEndVariance","emitterType","gravityx","gravityy","speedVariance","radialAcceleration","radialAccelVariance","tangentialAcceleration","tangentialAccelVariance","locRotationIsDir","toString","toLowerCase","maxRadius","maxRadiusVariance","minRadius","minRadiusVariance","rotatePerSecond","rotatePerSecondVariance","_syncAspect","frameRect","rect","texture","_customMaterial","setSharedMaterial","target","passes","blendState","targets","blendDst","blendSrc","mat","getMaterialInstance","recompileShaders","USE_LOCAL","_updateBlendFunc","destroy","_canRender","_render","commitComp","_renderEntity","setRenderTransform","setUseLocal","_createClass","value","custom","_uuid","val","_color","UIRenderer","DURATION_INFINITY","START_SIZE_EQUAL_TO_END_SIZE","START_RADIUS_EQUAL_TO_END_RADIUS","_applyDecoratedDescriptor","_dec2","Object","getOwnPropertyDescriptor","_applyDecoratedInitializer","override","clone","_dec5","Point","point","distance","time","setPoint","setDir","MotionStreak","Texture2D","_class4","_fadeTime","_minSeg","_stroke","_texture","_fastMode","_points","setFillColorType","RenderEntityFillColorType","VERTEX","_renderData","_updateColor","clear","update","_normal","_vec2","normal","out","motionStreakAssembler","MotionStreakAssembler","requestRenderData","dataLength","cur","stroke","matrix","tx","ty","points","difx","dify","minSeg","unshift","fadeTime","updateRenderDataCache","cg","cb","ca","_uiProps","prev","subtract","findLast","splice","progress","next","da","u","updateWorldVertexAllData","createQuadIndices","passDirty","updatePass","nodeDirty","updateNode","textureDirty","updateTexture","hashDirty","updateHash","fillBuffers","chunk","dataList","vb","vertexOffset","vert","bufferId","vid","meshBuffer","ib","l","setDirty","MotionStreakAssemblerManager","particle2DAssembler","Particle2DAssembler","MeshRenderData","remove","ParticleSystem2DAssembler","game","frameTime"],"mappings":"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"}