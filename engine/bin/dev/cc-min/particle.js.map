{"version":3,"file":"particle.js","sources":["../../../cocos/particle/billboard.ts","../../../cocos/particle/models/line-model.ts","../../../cocos/particle/animator/curve-range.ts","../../../cocos/particle/animator/gradient-range.ts","../../../cocos/particle/line.ts","../../../cocos/particle/particle.ts","../../../cocos/particle/enum.ts","../../../cocos/particle/particle-general-function.ts","../../../cocos/particle/animator/color-overtime.ts","../../../cocos/particle/animator/force-overtime.ts","../../../cocos/particle/animator/limit-velocity-overtime.ts","../../../cocos/particle/animator/rotation-overtime.ts","../../../cocos/particle/animator/size-overtime.ts","../../../cocos/particle/animator/texture-animation.ts","../../../cocos/particle/animator/velocity-overtime.ts","../../../cocos/particle/burst.ts","../../../cocos/particle/emitter/shape-module.ts","../../../cocos/particle/models/particle-batch-model.ts","../../../cocos/particle/renderer/particle-system-renderer-base.ts","../../../cocos/particle/noise.ts","../../../cocos/particle/renderer/particle-system-renderer-cpu.ts","../../../cocos/particle/renderer/particle-system-renderer-gpu.ts","../../../cocos/particle/renderer/particle-system-renderer-data.ts","../../../cocos/particle/renderer/trail.ts","../../../cocos/particle/particle-culler.ts","../../../cocos/particle/animator/noise-module.ts","../../../cocos/particle/particle-system.ts","../../../cocos/particle/particle-utils.ts","../../../cocos/particle/deprecated.ts","../../../cocos/particle/index.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, help, executeInEditMode, menu, tooltip, type, serializable } from 'cc.decorator';\r\nimport { builtinResMgr } from '../asset/asset-manager';\r\nimport { createMesh } from '../3d/misc';\r\nimport { Mesh } from '../3d/assets';\r\nimport { Material, Texture2D } from '../asset/assets';\r\nimport { Component } from '../scene-graph/component';\r\nimport { Attribute, AttributeName, Format, PrimitiveMode } from '../gfx';\r\nimport { Color, toDegree, toRadian, Vec4, cclegacy } from '../core';\r\nimport { scene } from '../render-scene';\r\nimport type { Director } from '../game/director';\r\n\r\n@ccclass('cc.Billboard')\r\n@help('i18n:cc.Billboard')\r\n@menu('Effects/Billboard')\r\n@executeInEditMode\r\nexport class Billboard extends Component {\r\n    @type(Texture2D)\r\n    private _texture: Texture2D | null = null;\r\n\r\n    /**\r\n     * @zh Billboard纹理。\r\n     */\r\n    @type(Texture2D)\r\n    @tooltip('i18n:billboard.texture')\r\n    get texture (): Texture2D | null {\r\n        return this._texture;\r\n    }\r\n\r\n    set texture (val) {\r\n        this._texture = val;\r\n        this.updateTexture();\r\n    }\r\n\r\n    private updateTexture (): void {\r\n        if (this._material) {\r\n            this._material.setProperty('mainTexture', this._texture);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _height = 0;\r\n\r\n    /**\r\n     * @zh 高度。\r\n     */\r\n    @tooltip('i18n:billboard.height')\r\n    get height (): number {\r\n        return this._height;\r\n    }\r\n\r\n    set height (val) {\r\n        this._height = val;\r\n        this.updateHeight();\r\n    }\r\n\r\n    private updateHeight (): void {\r\n        if (this._material) {\r\n            this._uniform.y = this._height;\r\n            this._material.setProperty('cc_size_rotation', this._uniform);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _width = 0;\r\n\r\n    /**\r\n     * @zh 宽度。\r\n     */\r\n    @tooltip('i18n:billboard.width')\r\n    public get width (): number {\r\n        return this._width;\r\n    }\r\n\r\n    public set width (val) {\r\n        this._width = val;\r\n        this.updateWidth();\r\n    }\r\n\r\n    private updateWidth (): void {\r\n        if (this._material) {\r\n            this._uniform.x = this._width;\r\n            this._material.setProperty('cc_size_rotation', this._uniform);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _rotation = 0;\r\n\r\n    /**\r\n     * @zh billboard绕中心点旋转的角度\r\n     */\r\n    @tooltip('i18n:billboard.rotation')\r\n    public get rotation (): number {\r\n        return Math.round(toDegree(this._rotation) * 100) / 100;\r\n    }\r\n\r\n    public set rotation (val) {\r\n        this._rotation = toRadian(val);\r\n        this.updateRotation();\r\n    }\r\n\r\n    private updateRotation (): void {\r\n        if (this._material) {\r\n            this._uniform.z = this._rotation;\r\n            this._material.setProperty('cc_size_rotation', this._uniform);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _techIndex = 0;\r\n\r\n    @tooltip('i18n:billboard.technique')\r\n    public get technique (): number {\r\n        return this._techIndex;\r\n    }\r\n\r\n    public set technique (val: number) {\r\n        // clamp technique index\r\n        val = Math.floor(val);\r\n        const techs = this._material?.effectAsset?.techniques;\r\n        if (techs && val >= techs.length) {\r\n            val = techs.length - 1;\r\n        }\r\n        if (val < 0) {\r\n            val = 0;\r\n        }\r\n        // set technique index\r\n        this._techIndex = val;\r\n        // recreate model\r\n        this.updateTechnique();\r\n    }\r\n\r\n    private updateTechnique (): void {\r\n        if (this._model && this._mesh && this._material && this._material.technique !== this._techIndex) {\r\n            // destroy model\r\n            this.detachFromScene();\r\n            this._model.destroy();\r\n            this._model = null;\r\n            this._material.destroy();\r\n            this._material = null;\r\n            this._mesh.destroy();\r\n            this._mesh = null;\r\n            // recreate model\r\n            this.createModel();\r\n            // set properties\r\n            this.updateWidth();\r\n            this.updateHeight();\r\n            this.updateRotation();\r\n            this.updateTexture();\r\n            // enable/disable model\r\n            if (this.enabled) {\r\n                this.attachToScene();\r\n                this._model!.enabled = true;\r\n            } else {\r\n                this._model!.enabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _model: scene.Model | null = null;\r\n\r\n    private _mesh: Mesh | null = null;\r\n\r\n    private _material: Material | null = null;\r\n\r\n    private _uniform = new Vec4(1, 1, 0, 0);\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public onLoad (): void {\r\n        this.createModel();\r\n    }\r\n\r\n    public onEnable (): void {\r\n        this.attachToScene();\r\n        this._model!.enabled = true;\r\n        this.updateWidth();\r\n        this.updateHeight();\r\n        this.updateRotation();\r\n        this.updateTexture();\r\n        this.updateTechnique();\r\n    }\r\n\r\n    public onDisable (): void {\r\n        this.detachFromScene();\r\n    }\r\n\r\n    private attachToScene (): void {\r\n        if (this._model && this.node && this.node.scene) {\r\n            if (this._model.scene) {\r\n                this.detachFromScene();\r\n            }\r\n            this._getRenderScene().addModel(this._model);\r\n        }\r\n    }\r\n\r\n    private detachFromScene (): void {\r\n        if (this._model && this._model.scene) {\r\n            this._model.scene.removeModel(this._model);\r\n        }\r\n    }\r\n\r\n    private createModel (): void {\r\n        this._mesh = createMesh({\r\n            primitiveMode: PrimitiveMode.TRIANGLE_LIST,\r\n            positions: [0, 0, 0,\r\n                0, 0, 0,\r\n                0, 0, 0,\r\n                0, 0, 0],\r\n            uvs: [0, 0,\r\n                1, 0,\r\n                0, 1,\r\n                1, 1],\r\n            colors: [\r\n                Color.WHITE.r, Color.WHITE.g, Color.WHITE.b, Color.WHITE.a,\r\n                Color.WHITE.r, Color.WHITE.g, Color.WHITE.b, Color.WHITE.a,\r\n                Color.WHITE.r, Color.WHITE.g, Color.WHITE.b, Color.WHITE.a,\r\n                Color.WHITE.r, Color.WHITE.g, Color.WHITE.b, Color.WHITE.a],\r\n            attributes: [\r\n                new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F),\r\n                new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F),\r\n                new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8UI, true),\r\n            ],\r\n            indices: [0, 1, 2, 1, 2, 3],\r\n        }, undefined, { calculateBounds: false });\r\n        const model = this._model = (cclegacy.director as Director).root!.createModel(scene.Model);\r\n        model.node = model.transform = this.node;\r\n        if (this._material == null) {\r\n            this._material = new Material();\r\n            this._material.copy(\r\n                builtinResMgr.get<Material>('default-billboard-material'),\r\n                { technique: this._techIndex },\r\n            );\r\n        }\r\n        model.initSubModel(0, this._mesh.renderingSubMeshes[0], this._material);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { RenderingSubMesh } from '../../asset/assets/rendering-sub-mesh';\r\nimport { DRAW_INFO_SIZE, Buffer, Attribute, BufferInfo, DrawInfo,\r\n    AttributeName, BufferUsageBit, Format, FormatInfos, MemoryUsageBit, PrimitiveMode } from '../../gfx';\r\nimport { Color, Vec3 } from '../../core';\r\nimport { scene } from '../../render-scene';\r\nimport CurveRange from '../animator/curve-range';\r\nimport GradientRange from '../animator/gradient-range';\r\nimport { Material } from '../../asset/assets';\r\n\r\nconst _vertex_attrs = [\r\n    new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), // xyz:position\r\n    new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGBA32F), // x:index y:size zw:texcoord\r\n    new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), // xyz:velocity\r\n    new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true),\r\n] as (Attribute & { offset: number })[];\r\n\r\nconst _temp_v1 = new Vec3();\r\nconst _temp_v2 = new Vec3();\r\n\r\nexport class LineModel extends scene.Model {\r\n    private _capacity: number;\r\n    private _vertSize = 0;\r\n    private _vBuffer: ArrayBuffer | null = null;\r\n    private _vertAttrsFloatCount = 0;\r\n    private _vdataF32: Float32Array | null = null;\r\n    private _vdataUint32: Uint32Array | null = null;\r\n    private _subMeshData: RenderingSubMesh | null = null;\r\n    private _vertCount = 0;\r\n    private _indexCount = 0;\r\n    private _material: Material | null = null;\r\n    private _iaVertCount = 0;\r\n    private _iaIndexCount = 0;\r\n\r\n    constructor () {\r\n        super();\r\n        if (JSB) {\r\n            (this as any)._registerListeners();\r\n        }\r\n        this.type = scene.ModelType.LINE;\r\n        this._capacity = 100;\r\n    }\r\n\r\n    public setCapacity (capacity: number): void {\r\n        this._capacity = capacity;\r\n        this.createBuffer();\r\n    }\r\n\r\n    public createBuffer (): void {\r\n        this._vertSize = 0;\r\n        for (const a of _vertex_attrs) {\r\n            a.offset = this._vertSize;\r\n            this._vertSize += FormatInfos[a.format].size;\r\n        }\r\n        this._vertAttrsFloatCount = this._vertSize / 4; // number of float\r\n        this._vBuffer = this.createSubMeshData();\r\n        this._vdataF32 = new Float32Array(this._vBuffer);\r\n        this._vdataUint32 = new Uint32Array(this._vBuffer);\r\n    }\r\n\r\n    public updateMaterial (mat: Material): void {\r\n        this._material = mat;\r\n        super.setSubModelMaterial(0, mat);\r\n    }\r\n\r\n    private createSubMeshData (): ArrayBuffer {\r\n        if (this._subMeshData) {\r\n            this.destroySubMeshData();\r\n        }\r\n        this._vertCount = 2;\r\n        this._indexCount = 6;\r\n        const vertexBuffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            this._vertSize * this._capacity * this._vertCount,\r\n            this._vertSize,\r\n        ));\r\n        const vBuffer: ArrayBuffer = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);\r\n        vertexBuffer.update(vBuffer);\r\n\r\n        const indices: Uint16Array = new Uint16Array((this._capacity - 1) * this._indexCount);\r\n        let dst = 0;\r\n        for (let i = 0; i < this._capacity - 1; ++i) {\r\n            const baseIdx = 2 * i;\r\n            indices[dst++] = baseIdx;\r\n            indices[dst++] = baseIdx + 1;\r\n            indices[dst++] = baseIdx + 2;\r\n            indices[dst++] = baseIdx + 3;\r\n            indices[dst++] = baseIdx + 2;\r\n            indices[dst++] = baseIdx + 1;\r\n        }\r\n\r\n        const indexBuffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            (this._capacity - 1) * this._indexCount * Uint16Array.BYTES_PER_ELEMENT,\r\n            Uint16Array.BYTES_PER_ELEMENT,\r\n        ));\r\n\r\n        indexBuffer.update(indices);\r\n\r\n        this._iaVertCount = this._capacity * this._vertCount;\r\n        this._iaIndexCount = (this._capacity - 1) * this._indexCount;\r\n\r\n        this._subMeshData = new RenderingSubMesh([vertexBuffer], _vertex_attrs, PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n        this.initSubModel(0, this._subMeshData, this._material!);\r\n        return vBuffer;\r\n    }\r\n\r\n    public addLineVertexData (positions: Vec3[], width: CurveRange, color: GradientRange): void {\r\n        if (positions.length > 1) {\r\n            let offset = 0;\r\n            Vec3.subtract(_temp_v1, positions[1], positions[0]);\r\n            this._vdataF32![offset++] = positions[0].x;\r\n            this._vdataF32![offset++] = positions[0].y;\r\n            this._vdataF32![offset++] = positions[0].z;\r\n            this._vdataF32![offset++] = 0;\r\n            this._vdataF32![offset++] = width.evaluate(0, 1)!;\r\n            this._vdataF32![offset++] = 0;\r\n            this._vdataF32![offset++] = 0;\r\n            this._vdataF32![offset++] = _temp_v1.x;\r\n            this._vdataF32![offset++] = _temp_v1.y;\r\n            this._vdataF32![offset++] = _temp_v1.z;\r\n            this._vdataUint32![offset++] = Color.toUint32(color.evaluate(0, 1));\r\n            this._vdataF32![offset++] = positions[0].x;\r\n            this._vdataF32![offset++] = positions[0].y;\r\n            this._vdataF32![offset++] = positions[0].z;\r\n            this._vdataF32![offset++] = 1;\r\n            this._vdataF32![offset++] = width.evaluate(0, 1)!;\r\n            this._vdataF32![offset++] = 0;\r\n            this._vdataF32![offset++] = 1;\r\n            this._vdataF32![offset++] = _temp_v1.x;\r\n            this._vdataF32![offset++] = _temp_v1.y;\r\n            this._vdataF32![offset++] = _temp_v1.z;\r\n            this._vdataUint32![offset++] = Color.toUint32(color.evaluate(0, 1));\r\n            for (let i = 1; i < positions.length - 1; i++) {\r\n                Vec3.subtract(_temp_v1, positions[i - 1], positions[i]);\r\n                Vec3.subtract(_temp_v2, positions[i + 1], positions[i]);\r\n                Vec3.subtract(_temp_v2, _temp_v2, _temp_v1);\r\n                const seg = i / positions.length;\r\n                this._vdataF32![offset++] = positions[i].x;\r\n                this._vdataF32![offset++] = positions[i].y;\r\n                this._vdataF32![offset++] = positions[i].z;\r\n                this._vdataF32![offset++] = 0;\r\n                this._vdataF32![offset++] = width.evaluate(seg, 1)!;\r\n                this._vdataF32![offset++] = seg;\r\n                this._vdataF32![offset++] = 0;\r\n                this._vdataF32![offset++] = _temp_v2.x;\r\n                this._vdataF32![offset++] = _temp_v2.y;\r\n                this._vdataF32![offset++] = _temp_v2.z;\r\n                this._vdataUint32![offset++] = Color.toUint32(color.evaluate(seg, 1));\r\n                this._vdataF32![offset++] = positions[i].x;\r\n                this._vdataF32![offset++] = positions[i].y;\r\n                this._vdataF32![offset++] = positions[i].z;\r\n                this._vdataF32![offset++] = 1;\r\n                this._vdataF32![offset++] = width.evaluate(seg, 1)!;\r\n                this._vdataF32![offset++] = seg;\r\n                this._vdataF32![offset++] = 1;\r\n                this._vdataF32![offset++] = _temp_v2.x;\r\n                this._vdataF32![offset++] = _temp_v2.y;\r\n                this._vdataF32![offset++] = _temp_v2.z;\r\n                this._vdataUint32![offset++] = Color.toUint32(color.evaluate(seg, 1));\r\n            }\r\n            Vec3.subtract(_temp_v1, positions[positions.length - 1], positions[positions.length - 2]);\r\n            this._vdataF32![offset++] = positions[positions.length - 1].x;\r\n            this._vdataF32![offset++] = positions[positions.length - 1].y;\r\n            this._vdataF32![offset++] = positions[positions.length - 1].z;\r\n            this._vdataF32![offset++] = 0;\r\n            this._vdataF32![offset++] = width.evaluate(1, 1)!;\r\n            this._vdataF32![offset++] = 1;\r\n            this._vdataF32![offset++] = 0;\r\n            this._vdataF32![offset++] = _temp_v1.x;\r\n            this._vdataF32![offset++] = _temp_v1.y;\r\n            this._vdataF32![offset++] = _temp_v1.z;\r\n            this._vdataUint32![offset++] = Color.toUint32(color.evaluate(1, 1));\r\n            this._vdataF32![offset++] = positions[positions.length - 1].x;\r\n            this._vdataF32![offset++] = positions[positions.length - 1].y;\r\n            this._vdataF32![offset++] = positions[positions.length - 1].z;\r\n            this._vdataF32![offset++] = 1;\r\n            this._vdataF32![offset++] = width.evaluate(1, 1)!;\r\n            this._vdataF32![offset++] = 1;\r\n            this._vdataF32![offset++] = 1;\r\n            this._vdataF32![offset++] = _temp_v1.x;\r\n            this._vdataF32![offset++] = _temp_v1.y;\r\n            this._vdataF32![offset++] = _temp_v1.z;\r\n            this._vdataUint32![offset++] = Color.toUint32(color.evaluate(1, 1));\r\n        }\r\n        this.updateIA(Math.max(0, positions.length - 1));\r\n    }\r\n\r\n    public updateIA (count: number): void {\r\n        const ia = this._subModels[0].inputAssembler;\r\n        ia.vertexBuffers[0].update(this._vdataF32!);\r\n        ia.firstIndex = 0;\r\n        ia.indexCount = this._indexCount * count;\r\n        ia.vertexCount = this._iaVertCount;\r\n    }\r\n\r\n    private destroySubMeshData (): void {\r\n        if (this._subMeshData) {\r\n            this._subMeshData.destroy();\r\n            this._subMeshData = null;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass } from 'cc.decorator';\r\nimport { EDITOR } from 'internal:constants';\r\nimport { lerp, RealCurve, CCClass, geometry, Enum, approx, EPSILON } from '../../core';\r\nimport { PixelFormat, TextureFilter, WrapMode } from '../../asset/assets/asset-enum';\r\nimport { Texture2D, ImageAsset } from '../../asset/assets';\r\nimport { setPropertyEnumType } from '../../core/internal-index';\r\n\r\nconst setClassAttr = CCClass.Attr.setClassAttr;\r\n\r\nconst SerializableTable = [\r\n    ['mode', 'constant', 'multiplier'],\r\n    ['mode', 'spline', 'multiplier'],\r\n    ['mode', 'splineMin', 'splineMax', 'multiplier'],\r\n    ['mode', 'constantMin', 'constantMax', 'multiplier'],\r\n] as const;\r\n\r\n/**\r\n * @en\r\n * This curve has 4 modes:\r\n * Constant means this curve only have the constant value all the time.\r\n * Tow Constants means this curve value will generated by the interpolation of these 2 constant values.\r\n * Curve means the curve value will generated by one RealCurve.\r\n * A RealCurve has many key frames, so the value will be generated by interpolation of key frames.\r\n * Two Curves has two RealCurve, so the value is generated by the interpolation of these 2 curves.\r\n * @zh\r\n * 曲线控件包含四种模式：\r\n * 常值，表示曲线的值从头到尾都是一个常量。\r\n * 双常值，表示曲线的值是从两个常量进行插值。\r\n * 曲线，包含一个 RealCurve 曲线值，从 RealCurve 取得关键帧进行插值得到。\r\n * 双曲线，包含两个 RealCurve 曲线，首先对每个曲线进行关键帧插值计算，然后再对算出的两个曲线值进行插值得到最终的数值。\r\n */\r\nexport const Mode = Enum({\r\n    Constant: 0,\r\n    Curve: 1,\r\n    TwoCurves: 2,\r\n    TwoConstants: 3,\r\n});\r\n// TODO: can not remove ccclass for now, we need ccclass specified deserialization to handle deserialization of RealCurve\r\n\r\n/**\r\n * @en\r\n * CurveRange is a data structure which contains some constants or curves.\r\n * Calculate the value by its mode and particle system will use it to change particle attribute associated with it.\r\n * Refer [[CurveRange.Mode]] to see the detail of calculation mode.\r\n * @zh\r\n * CurveRange 是一类数据结构，其包含了多个常数值或曲线值，计算时其将根据计算模式计算最终值，粒子系统使用此数据结构对所有的粒子的属性进行修改。\r\n * 详细的计算模式请参考 [[CurveRange.Mode]] 的解释。\r\n */\r\n@ccclass('cc.CurveRange')\r\nexport default class CurveRange  {\r\n    /**\r\n     * @en The curve mode. See [[Mode]].\r\n     * @zh 曲线类型 [[Mode]]。\r\n     */\r\n    public static Mode = Mode;\r\n\r\n    /**\r\n     * @en Spline will create a RealCurve when mode is curve. The mode of curve range, see [[Mode]].\r\n     * A RealCurve will be created for each spline(SplineMin & SplineMax) when mode is TwoCurves.\r\n     * @zh 当mode为Curve时，spline创建1个RealCurve，当mode为TwoCurves时，splineMax创建1个RealCurve,splineMin创建一个RealCurve。\r\n     */\r\n    set mode (mode: number) {\r\n        this._mode = mode;\r\n        switch (mode) {\r\n        case Mode.Constant:\r\n            break;\r\n        case Mode.TwoConstants:\r\n            break;\r\n        case Mode.Curve:\r\n            if (!this.spline) this.spline = geometry.constructLegacyCurveAndConvert();\r\n            break;\r\n        case Mode.TwoCurves:\r\n            if (!this.splineMax) this.splineMax = geometry.constructLegacyCurveAndConvert();\r\n            if (!this.splineMin) this.splineMin = geometry.constructLegacyCurveAndConvert();\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    get mode (): number {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * @en The spline used when mode is Mode.Curve.\r\n     * @zh 当 mode 为Curve时，使用的曲线。\r\n     */\r\n    public declare spline: RealCurve;\r\n\r\n    /**\r\n     * @en The min spline when mode is Mode.TwoCurves.\r\n     * @zh 当 mode 为TwoCurves时，使用的曲线下限。\r\n     */\r\n    public declare splineMin: RealCurve;\r\n\r\n    /**\r\n     * @en Max spline when mode is TwoCurves.\r\n     * @zh 当 mode 为TwoCurves时，使用的曲线上限。\r\n     */\r\n    public declare splineMax: RealCurve;\r\n\r\n    /**\r\n     * @en Gets/Sets the curve when use curve mode.\r\n     * @zh 当 mode 为 Curve 时，使用的曲线。\r\n     * @deprecated Since V3.3. Use `spline` instead.\r\n     */\r\n    get curve (): geometry.AnimationCurve {\r\n        return this._curve ??= new geometry.AnimationCurve(this.spline);\r\n    }\r\n\r\n    set curve (value) {\r\n        this._curve = value;\r\n        this.spline = value._internalCurve;\r\n    }\r\n\r\n    /**\r\n     * @en Get/Set min curve when use TwoCurves mode.\r\n     * @zh 当 mode 为 TwoCurves 时，使用的曲线下限。\r\n     * @deprecated Since V3.3. Use `splineMin` instead.\r\n     */\r\n    get curveMin (): geometry.AnimationCurve {\r\n        return this._curveMin ??= new geometry.AnimationCurve(this.splineMin);\r\n    }\r\n\r\n    set curveMin (value) {\r\n        this._curveMin = value;\r\n        this.splineMin = value._internalCurve;\r\n    }\r\n\r\n    /**\r\n     * @en Gets/Sets max curve when use TwoCurves mode.\r\n     * @zh 当 mode 为 TwoCurves 时，使用的曲线上限。\r\n     * @deprecated Since V3.3. Use `splineMax` instead.\r\n     */\r\n    get curveMax (): geometry.AnimationCurve {\r\n        return this._curveMax ??= new geometry.AnimationCurve(this.splineMax);\r\n    }\r\n\r\n    set curveMax (value) {\r\n        this._curveMax = value;\r\n        this.splineMax = value._internalCurve;\r\n    }\r\n\r\n    /**\r\n     * @en Constant value when use constant mode.\r\n     * @zh 当 mode 为 Constant 时，曲线的值。\r\n     */\r\n    public constant = 0;\r\n\r\n    /**\r\n     * @en Constant min value when use TwoConstants mode.\r\n     * @zh 当 mode 为 TwoConstants 时，曲线的下限。\r\n     */\r\n    public constantMin = 0;\r\n\r\n    /**\r\n     * @en Constant max value when use TwoConstants mode.\r\n     * @zh 当 mode 为 TwoConstants 时，曲线的上限。\r\n     */\r\n    public constantMax = 0;\r\n\r\n    /**\r\n     * @en Mulitplier used to evaluate spline.\r\n     * @zh 应用于曲线插值的系数。\r\n     */\r\n    public multiplier = 1;\r\n\r\n    /**\r\n     * @en Curve mode to use.\r\n     * @zh 曲线类型 [[Mode]]。\r\n     */\r\n    private _mode = Mode.Constant;\r\n\r\n    constructor () {\r\n        /* Only create RealCurves in Editor, in order to show the Splines in Editor,\r\n        in RunTime the RealCurves will only be created when it is in Curve mode*/\r\n        if (EDITOR) {\r\n            this.spline = geometry.constructLegacyCurveAndConvert();\r\n            this.splineMin = geometry.constructLegacyCurveAndConvert();\r\n            this.splineMax = geometry.constructLegacyCurveAndConvert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Calculate curve value.\r\n     * @zh 计算曲线数值。\r\n     * @param time @en Normalized time to interpolate. @zh 用于插值的归一化时间。\r\n     * @param rndRatio @en Interpolation ratio when mode is TwoCurves or TwoConstants.\r\n     *                     Particle attribute will pass in a random number to get a random result.\r\n     *                 @zh 当模式为双曲线或双常数时，使用的插值比例，通常粒子系统会传入一个随机数以获得一个随机结果。\r\n     * @returns @en Curve value. @zh 曲线的值。\r\n     */\r\n    public evaluate (time: number, rndRatio: number): number {\r\n        switch (this._mode) {\r\n        default:\r\n        case Mode.Constant:\r\n            return this.constant;\r\n        case Mode.Curve:\r\n            return this.spline.evaluate(time) * this.multiplier;\r\n        case Mode.TwoCurves:\r\n            return lerp(this.splineMin.evaluate(time), this.splineMax.evaluate(time), rndRatio) * this.multiplier;\r\n        case Mode.TwoConstants:\r\n            return lerp(this.constantMin, this.constantMax, rndRatio);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Gets the max value this curve can reach.\r\n     * @zh 获得曲线能达到的最大值。\r\n     * @returns @en Max value of this curve @zh 曲线能达到的最大值\r\n     */\r\n    public getMax (): number {\r\n        switch (this._mode) {\r\n        default:\r\n        case Mode.Constant:\r\n            return this.constant;\r\n        case Mode.Curve:\r\n            return this.multiplier;\r\n        case Mode.TwoConstants:\r\n            return this.constantMax;\r\n        case Mode.TwoCurves:\r\n            return this.multiplier;\r\n        }\r\n    }\r\n\r\n    public isZero (): boolean {\r\n        switch (this._mode) {\r\n        default:\r\n        case Mode.Constant:\r\n            return approx(this.constant, 0.0, EPSILON);\r\n        case Mode.Curve:\r\n            return approx(this.multiplier, 0.0, EPSILON);\r\n        case Mode.TwoConstants:\r\n            return approx(Math.max(Math.abs(this.constantMax), Math.abs(this.constantMin)), 0.0, EPSILON);\r\n        case Mode.TwoCurves:\r\n            return approx(this.multiplier, 0.0, EPSILON);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _onBeforeSerialize (\r\n        props,\r\n    ): readonly ['mode', 'constant', 'multiplier']\r\n        | readonly ['mode', 'spline', 'multiplier']\r\n        | readonly ['mode', 'splineMin', 'splineMax', 'multiplier']\r\n        | readonly ['mode', 'constantMin', 'constantMax', 'multiplier'] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return SerializableTable[this._mode];\r\n    }\r\n\r\n    private declare _curve: geometry.AnimationCurve | undefined;\r\n    private declare _curveMin: geometry.AnimationCurve | undefined;\r\n    private declare _curveMax: geometry.AnimationCurve | undefined;\r\n}\r\n\r\nCCClass.fastDefine('cc.CurveRange', CurveRange, {\r\n    multiplier: 1,\r\n    constantMax: 0,\r\n    constantMin: 0,\r\n    constant: 0,\r\n    mode: Mode.Constant,\r\n    splineMax: Object.freeze(geometry.constructLegacyCurveAndConvert()),\r\n    splineMin: Object.freeze(geometry.constructLegacyCurveAndConvert()),\r\n    spline: Object.freeze(geometry.constructLegacyCurveAndConvert()),\r\n});\r\n\r\nsetClassAttr(CurveRange, 'multiplier', 'visible', true);\r\nsetClassAttr(CurveRange, 'constantMax', 'visible', true);\r\nsetClassAttr(CurveRange, 'constantMin', 'visible', true);\r\nsetClassAttr(CurveRange, 'constant', 'visible', true);\r\nsetPropertyEnumType(CurveRange, 'mode', Mode);\r\nsetClassAttr(CurveRange, 'mode', 'visible', true);\r\nsetClassAttr(CurveRange, 'splineMax', 'type', 'Object');\r\nsetClassAttr(CurveRange, 'splineMax', 'ctor', RealCurve);\r\nsetClassAttr(CurveRange, 'splineMax', 'visible', true);\r\nsetClassAttr(CurveRange, 'splineMin', 'type', 'Object');\r\nsetClassAttr(CurveRange, 'splineMin', 'ctor', RealCurve);\r\nsetClassAttr(CurveRange, 'splineMin', 'visible', true);\r\nsetClassAttr(CurveRange, 'spline', 'type', 'Object');\r\nsetClassAttr(CurveRange, 'spline', 'ctor', RealCurve);\r\nsetClassAttr(CurveRange, 'spline', 'visible', true);\r\n\r\nfunction evaluateCurve (cr: CurveRange, time: number, index: number): number {\r\n    switch (cr.mode) {\r\n    case Mode.Constant:\r\n        return cr.constant;\r\n    case Mode.Curve:\r\n        return cr.spline.evaluate(time) * cr.multiplier;\r\n    case Mode.TwoCurves:\r\n        return index === 0 ? cr.splineMin.evaluate(time) * cr.multiplier : cr.splineMax.evaluate(time) * cr.multiplier;\r\n    case Mode.TwoConstants:\r\n        return index === 0 ? cr.constantMin : cr.constantMax;\r\n    default:\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction evaluateHeight (cr: CurveRange): number {\r\n    switch (cr.mode) {\r\n    case Mode.TwoConstants:\r\n        return 2;\r\n    case Mode.TwoCurves:\r\n        return 2;\r\n    default:\r\n        return 1;\r\n    }\r\n}\r\n\r\nfunction packTexture (data, width, height): Texture2D {\r\n    const image = new ImageAsset({\r\n        width,\r\n        height,\r\n        _data: data,\r\n        _compressed: false,\r\n        format: PixelFormat.RGBA32F,\r\n    });\r\n\r\n    const texture = new Texture2D();\r\n    texture.setFilters(TextureFilter.NEAREST, TextureFilter.NEAREST);\r\n    texture.setMipFilter(TextureFilter.NONE);\r\n    texture.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);\r\n    texture.image = image;\r\n\r\n    return texture;\r\n}\r\n\r\nfunction updateTexture (\r\n    tex: Texture2D | null,\r\n    data: Parameters<Texture2D['uploadData']>[0],\r\n    width: number,\r\n    height: number,\r\n): Texture2D {\r\n    if (tex === null || width !== tex.width || height !== tex.height) {\r\n        if (tex) {\r\n            tex.destroy();\r\n        }\r\n        tex = packTexture(data, width, height);\r\n    } else {\r\n        tex.uploadData(data);\r\n    }\r\n    return tex;\r\n}\r\n\r\nexport function packCurveRangeZ (\r\n    tex: Texture2D | null,\r\n    data: Float32Array | null,\r\n    samples: number,\r\n    cr: CurveRange,\r\n    discrete?: boolean,\r\n): { texture: Texture2D; texdata: Float32Array; } {\r\n    const height = evaluateHeight(cr);\r\n    const len = samples * height * 4;\r\n    if (data === null || data.length !== len) {\r\n        data = new Float32Array(samples * height * 4);\r\n    }\r\n    const interval = 1.0 / (samples - 1);\r\n    let sum = 0;\r\n    let average = 0;\r\n    let offset = 0;\r\n\r\n    for (let h = 0; h < height; h++) {\r\n        sum = 0;\r\n        for (let j = 0; j < samples; j++) {\r\n            const value = evaluateCurve(cr, interval * j, h);\r\n            if (discrete) {\r\n                average = value;\r\n            } else {\r\n                sum += value;\r\n                average = sum / (j + 1);\r\n            }\r\n            data[offset + 2] = value;\r\n            offset += 4;\r\n        }\r\n    }\r\n    return { texture: updateTexture(tex, data, samples, height), texdata: data };\r\n}\r\nexport function packCurveRangeN (\r\n    tex: Texture2D | null,\r\n    data: Float32Array | null,\r\n    samples: number,\r\n    cr: CurveRange,\r\n    discrete?: boolean,\r\n): { texture: Texture2D; texdata: Float32Array; } {\r\n    const height = evaluateHeight(cr);\r\n    const len = samples * height * 4;\r\n    if (data === null || data.length !== len) {\r\n        data = new Float32Array(samples * height * 4);\r\n    }\r\n    const interval = 1.0 / (samples - 1);\r\n    let sum = 0;\r\n    let average = 0;\r\n    let offset = 0;\r\n    for (let h = 0; h < height; h++) {\r\n        sum = 0;\r\n        for (let j = 0; j < samples; j++) {\r\n            const value = evaluateCurve(cr, interval * j, h);\r\n            if (discrete) {\r\n                average = value;\r\n            } else {\r\n                sum += value;\r\n                average = sum / (j + 1);\r\n            }\r\n            data[offset] = average;\r\n            data[offset + 1] = average;\r\n            data[offset + 2] = average;\r\n            offset += 4;\r\n        }\r\n    }\r\n    return { texture: updateTexture(tex, data, samples, height), texdata: data };\r\n}\r\n\r\nexport function packCurveRangeXY (\r\n    tex: Texture2D | null,\r\n    data: Float32Array | null,\r\n    samples: number,\r\n    x: CurveRange,\r\n    y: CurveRange,\r\n    discrete?: boolean,\r\n): { texture: Texture2D; texdata: Float32Array; } {\r\n    const height = Math.max(evaluateHeight(x), evaluateHeight(y));\r\n    const len = samples * height * 4;\r\n    if (data === null || data.length !== len) {\r\n        data = new Float32Array(samples * height * 4);\r\n    }\r\n    const curves: CurveRange[] = [x, y];\r\n    const interval = 1.0 / (samples - 1);\r\n\r\n    for (let h = 0; h < height; h++) {\r\n        for (let i = 0; i < 2; i++) {\r\n            const cr = curves[i];\r\n            let sum = 0;\r\n            let average = 0;\r\n            for (let j = 0; j < samples; j++) {\r\n                const value = evaluateCurve(cr, interval * j, h);\r\n                if (discrete) {\r\n                    average = value;\r\n                } else {\r\n                    sum += value;\r\n                    average = sum / (j + 1);\r\n                }\r\n                data[((h * samples) + j) * 4 + i] = average;\r\n            }\r\n        }\r\n    }\r\n    return { texture: updateTexture(tex, data, samples, height), texdata: data };\r\n}\r\n\r\nexport function packCurveRangeXYZ (\r\n    tex: Texture2D | null,\r\n    data: Float32Array | null,\r\n    samples: number,\r\n    x: CurveRange,\r\n    y: CurveRange,\r\n    z: CurveRange,\r\n    discrete?: boolean,\r\n): { texture: Texture2D; texdata: Float32Array; } {\r\n    const height = Math.max(evaluateHeight(x), evaluateHeight(y), evaluateHeight(z));\r\n    const len = samples * height * 4;\r\n    if (data === null || data.length !== len) {\r\n        data = new Float32Array(samples * height * 4);\r\n    }\r\n    const curves: CurveRange[] = [x, y, z];\r\n    const interval = 1.0 / (samples - 1);\r\n\r\n    for (let h = 0; h < height; h++) {\r\n        for (let i = 0; i < 3; i++) {\r\n            const cr = curves[i];\r\n            let sum = 0;\r\n            let average = 0;\r\n            for (let j = 0; j < samples; j++) {\r\n                const value = evaluateCurve(cr, interval * j, h);\r\n                if (discrete) {\r\n                    average = value;\r\n                } else {\r\n                    sum += value;\r\n                    average = sum / (j + 1);\r\n                }\r\n                data[((h * samples) + j) * 4 + i] = average;\r\n            }\r\n        }\r\n    }\r\n    return { texture: updateTexture(tex, data, samples, height), texdata: data };\r\n}\r\n\r\nexport function packCurveRangeXYZW (\r\n    tex: Texture2D | null,\r\n    data: Float32Array | null,\r\n    samples: number,\r\n    x: CurveRange,\r\n    y: CurveRange,\r\n    z: CurveRange,\r\n    w: CurveRange,\r\n    discrete?: boolean,\r\n): { texture: Texture2D; texdata: Float32Array; } {\r\n    const height = Math.max(evaluateHeight(x), evaluateHeight(y), evaluateHeight(z), evaluateHeight(w));\r\n    const len = samples * height * 4;\r\n    if (data === null || data.length !== len) {\r\n        data = new Float32Array(samples * height * 4);\r\n    }\r\n    const curves: CurveRange[] = [x, y, z, w];\r\n    const interval = 1.0 / (samples - 1);\r\n\r\n    for (let h = 0; h < height; h++) {\r\n        for (let i = 0; i < 4; i++) {\r\n            const cr = curves[i];\r\n            let sum = 0;\r\n            let average = 0;\r\n            for (let j = 0; j < samples; j++) {\r\n                const value = evaluateCurve(cr, interval * j, h);\r\n                if (discrete) {\r\n                    average = value;\r\n                } else {\r\n                    sum += value;\r\n                    average = sum / (j + 1);\r\n                }\r\n                data[((h * samples) + j) * 4 + i] = average;\r\n            }\r\n        }\r\n    }\r\n    return { texture: updateTexture(tex, data, samples, height), texdata: data };\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, type, serializable, editable } from 'cc.decorator';\r\nimport { EDITOR, EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Color, Enum, Gradient, AlphaKey, ColorKey } from '../../core';\r\nimport { Texture2D } from '../../asset/assets';\r\nimport { PixelFormat, TextureFilter, WrapMode } from '../../asset/assets/asset-enum';\r\n\r\nconst SerializableTable = EDITOR && [\r\n    ['_mode', 'color'],\r\n    ['_mode', 'gradient'],\r\n    ['_mode', 'colorMin', 'colorMax'],\r\n    ['_mode', 'gradientMin', 'gradientMax'],\r\n    ['_mode', 'gradient'],\r\n];\r\n\r\n/**\r\n * @en\r\n * Gradinet is a component to calculate color value. It contains 5 modes:\r\n * Color is just the color value all the time.\r\n * Two Colors has 2 color values to interpolate the color value.\r\n * Gradient value is generated by many color keys interpolation.\r\n * Two Gradients has 2 gradients. The value is calculated by interpolation of the 2 gradients value.\r\n * Random Color has one gradient. The value is get from color keys of the gradient randomly.\r\n * @zh\r\n * 渐变曲线是用来计算颜色值的控件，它包含五种模式：\r\n * 单色从头到尾只返回一种颜色值。\r\n * 双色包含两个颜色值，返回两种颜色之间的插值。\r\n * 渐变曲线包含许多颜色帧，返回颜色帧之间的插值。\r\n * 双渐变曲线包含两个渐变曲线，对两个渐变曲线返回的颜色值再进行插值。\r\n * 随机颜色包含一个颜色曲线，从曲线中随机获取颜色值。\r\n */\r\nconst Mode = Enum({\r\n    Color: 0,\r\n    Gradient: 1,\r\n    TwoColors: 2,\r\n    TwoGradients: 3,\r\n    RandomColor: 4,\r\n});\r\n\r\nconst tempColor = new Color();\r\nconst tempColor2 = new Color();\r\n\r\n/**\r\n * @en\r\n * GradientRange is a data structure which contains some constant colors or gradients.\r\n * Calculate the color by its mode and particle system will use it to change particle attribute associated with it.\r\n * Refer [[GradientRange.Mode]] to see the detail of calculation mode.\r\n * @zh\r\n * GradientRange 是一类数据结构，其包含了多个常数颜色或渐变色，计算时其将根据计算模式计算最终颜色，粒子系统使用此数据结构对所有的粒子的属性进行修改。\r\n * 详细的计算模式请参考 [[GradientRange.Mode]] 的解释。\r\n */\r\n@ccclass('cc.GradientRange')\r\nexport default class GradientRange {\r\n    /**\r\n     * @en Gets/Sets color gradient mode to use. See [[Mode]].\r\n     * @zh 使用的渐变色类型 参考 [[Mode]]。\r\n     */\r\n    @type(Mode)\r\n    get mode (): number {\r\n        return this._mode;\r\n    }\r\n\r\n    set mode (m) {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (m === Mode.RandomColor) {\r\n                if (this.gradient.colorKeys.length === 0) {\r\n                    this.gradient.colorKeys.push(new ColorKey());\r\n                }\r\n                if (this.gradient.alphaKeys.length === 0) {\r\n                    this.gradient.alphaKeys.push(new AlphaKey());\r\n                }\r\n            }\r\n        }\r\n        this._mode = m;\r\n    }\r\n\r\n    /**\r\n     * @en The gradient mode. See [[Mode]].\r\n     * @zh 渐变色类型 参考 [[Mode]]。\r\n     */\r\n    public static Mode = Mode;\r\n\r\n    /**\r\n     * @en Color value when use color mode.\r\n     * @zh 当 mode 为 Color 时的颜色。\r\n     */\r\n    @serializable\r\n    @editable\r\n    public color = Color.WHITE.clone();\r\n\r\n    /**\r\n     * @en Min color value when use TwoColors mode.\r\n     * @zh 当 mode 为 TwoColors 时的颜色下限。\r\n     */\r\n    @serializable\r\n    @editable\r\n    public colorMin = Color.WHITE.clone();\r\n\r\n    /**\r\n     * @en Max color value when use TwoColors mode.\r\n     * @zh 当 mode 为 TwoColors 时的颜色上限。\r\n     */\r\n    @serializable\r\n    @editable\r\n    public colorMax = Color.WHITE.clone();\r\n\r\n    /**\r\n     * @en Gradient value when use gradient mode.\r\n     * @zh 当 mode 为 Gradient 时的颜色渐变。\r\n     */\r\n    @type(Gradient)\r\n    public gradient = new Gradient();\r\n\r\n    /**\r\n     * @en Gradient min value when use TwoGradients.\r\n     * @zh 当mode为TwoGradients时的颜色渐变下限。\r\n     */\r\n    @type(Gradient)\r\n    public gradientMin = new Gradient();\r\n\r\n    /**\r\n     * @en Gradient max value when use TwoGradients.\r\n     * @zh 当 mode 为 TwoGradients 时的颜色渐变上限。\r\n     */\r\n    @type(Gradient)\r\n    public gradientMax = new Gradient();\r\n\r\n    @type(Mode)\r\n    private _mode = Mode.Color;\r\n\r\n    private _color = Color.WHITE.clone();\r\n\r\n    /**\r\n     * @en Calculate gradient value.\r\n     * @zh 计算颜色渐变曲线数值。\r\n     * @param time @en Normalized time to interpolate. @zh 用于插值的归一化时间。\r\n     * @param rndRatio @en Interpolation ratio when mode is TwoColors or TwoGradients.\r\n     *                     Particle attribute will pass in a random number to get a random result.\r\n     *                 @zh 当模式为双色或双渐变色时，使用的插值比例，通常粒子系统会传入一个随机数以获得一个随机结果。\r\n     * @returns @en Gradient value. @zh 颜色渐变曲线的值。\r\n     */\r\n    public evaluate (time: number, rndRatio: number): Color {\r\n        switch (this._mode) {\r\n        case Mode.Color:\r\n            return this.color;\r\n        case Mode.TwoColors:\r\n            Color.lerp(this._color, this.colorMin, this.colorMax, rndRatio);\r\n            return this._color;\r\n        case Mode.RandomColor:\r\n            return this.gradient.getRandomColor(this._color);\r\n        case Mode.Gradient:\r\n            return this.gradient.evaluateFast(this._color, time);\r\n        case Mode.TwoGradients:\r\n            Color.lerp(this._color, this.gradientMin.evaluateFast(tempColor, time), this.gradientMax.evaluateFast(tempColor2, time), rndRatio);\r\n            return this._color;\r\n        default:\r\n            return this.color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _onBeforeSerialize (props: any): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return SerializableTable[this._mode];\r\n    }\r\n}\r\n\r\nfunction evaluateGradient (gr: GradientRange, time: number, index: number): Color {\r\n    switch (gr.mode) {\r\n    case Mode.Color:\r\n        return gr.color;\r\n    case Mode.TwoColors:\r\n        return index === 0 ? gr.colorMin : gr.colorMax;\r\n    case Mode.RandomColor:\r\n        return gr.gradient.getRandomColor(tempColor);\r\n    case Mode.Gradient:\r\n        return gr.gradient.evaluateFast(tempColor, time);\r\n    case Mode.TwoGradients:\r\n        return index === 0 ? gr.gradientMin.evaluateFast(tempColor, time) : gr.gradientMax.evaluateFast(tempColor, time);\r\n    default:\r\n        return gr.color;\r\n    }\r\n}\r\nfunction evaluateHeight (gr: GradientRange): number {\r\n    switch (gr.mode) {\r\n    case Mode.TwoColors:\r\n        return 2;\r\n    case Mode.TwoGradients:\r\n        return 2;\r\n    default:\r\n        return 1;\r\n    }\r\n}\r\nexport function packGradientRange (\r\n    tex: Texture2D | null,\r\n    data: Uint8Array | null,\r\n    samples: number,\r\n    gr: GradientRange,\r\n): { texture: Texture2D; texdata: Uint8Array; } {\r\n    const height = evaluateHeight(gr);\r\n    const len = samples * height * 4;\r\n    if (data === null || data.length !== len) {\r\n        data = new Uint8Array(samples * height * 4);\r\n    }\r\n    const interval = 1.0 / (samples - 1);\r\n    let offset = 0;\r\n\r\n    for (let h = 0; h < height; h++) {\r\n        for (let j = 0; j < samples; j++) {\r\n            const color = evaluateGradient(gr, interval * j, h);\r\n            data[offset] = color.r;\r\n            data[offset + 1] = color.g;\r\n            data[offset + 2] = color.b;\r\n            data[offset + 3] = color.a;\r\n            offset += 4;\r\n        }\r\n    }\r\n\r\n    if (tex === null || samples !== tex.width || height !== tex.height) {\r\n        if (tex) {\r\n            tex.destroy();\r\n        }\r\n        tex = new Texture2D();\r\n        tex.create(samples, height, PixelFormat.RGBA8888);\r\n        tex.setFilters(TextureFilter.LINEAR, TextureFilter.LINEAR);\r\n        tex.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);\r\n    }\r\n    tex.uploadData(data);\r\n\r\n    return { texture: tex, texdata: data };\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, help, executeInEditMode, menu, tooltip, displayOrder, type, serializable,\r\n    range, visible, override, displayName } from 'cc.decorator';\r\nimport { Material, Texture2D } from '../asset/assets';\r\nimport { Vec3, cclegacy, Vec4, Vec2, CCBoolean } from '../core';\r\nimport { LineModel } from './models/line-model';\r\nimport { builtinResMgr } from '../asset/asset-manager';\r\nimport CurveRange from './animator/curve-range';\r\nimport GradientRange from './animator/gradient-range';\r\nimport { ModelRenderer } from '../misc';\r\n\r\nconst CC_USE_WORLD_SPACE = 'CC_USE_WORLD_SPACE';\r\nconst CC_USE_WORLD_SCALE = 'CC_USE_WORLD_SCALE';\r\nconst define = { CC_USE_WORLD_SPACE: false, CC_USE_WORLD_SCALE: true };\r\n\r\n@ccclass('cc.Line')\r\n@help('i18n:cc.Line')\r\n@menu('Effects/Line')\r\n@executeInEditMode\r\nexport class Line extends ModelRenderer {\r\n    @type(Texture2D)\r\n    private _texture = null;\r\n\r\n    /**\r\n     * @zh 显示的纹理。\r\n     * @en Texture used.\r\n     */\r\n    @type(Texture2D)\r\n    @displayOrder(0)\r\n    @tooltip('i18n:line.texture')\r\n    get texture (): null {\r\n        return this._texture;\r\n    }\r\n\r\n    set texture (val) {\r\n        this._texture = val;\r\n        if (this.material) {\r\n            this.material.setProperty('mainTexture', val);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _material: Material | null = null;\r\n\r\n    @type(Material)\r\n    @displayOrder(1)\r\n    @tooltip('i18n:line.material')\r\n    @displayName('Material')\r\n    get lineMaterial (): Material | null {\r\n        return this.getSharedMaterial(0);\r\n    }\r\n\r\n    set lineMaterial (val) {\r\n        this.setSharedMaterial(val, 0);\r\n    }\r\n\r\n    @override\r\n    @visible(false)\r\n    @serializable\r\n    get sharedMaterials (): (Material | null)[] {\r\n        return super.sharedMaterials;\r\n    }\r\n\r\n    set sharedMaterials (val) {\r\n        super.sharedMaterials = val;\r\n    }\r\n\r\n    @serializable\r\n    private _worldSpace = false;\r\n\r\n    /**\r\n     * @zh positions是否为世界空间坐标。\r\n     * @en Whether positions are world space coordinates.\r\n     */\r\n    @displayOrder(1)\r\n    @tooltip('i18n:line.worldSpace')\r\n    get worldSpace (): boolean {\r\n        return this._worldSpace;\r\n    }\r\n\r\n    set worldSpace (val) {\r\n        this._worldSpace = val;\r\n        const matIns = this.getMaterialInstance(0);\r\n        if (matIns) {\r\n            define[CC_USE_WORLD_SPACE] = this.worldSpace;\r\n            matIns.recompileShaders(define);\r\n            if (this._models[0]) {\r\n                this._models[0].setSubModelMaterial(0, matIns);\r\n            }\r\n        }\r\n    }\r\n\r\n    @type([Vec3])\r\n    private _positions: Vec3[] = [];\r\n\r\n    /**\r\n     * @en Inflection point positions of each polyline.\r\n     * @zh 每段折线的拐点坐标。\r\n     */\r\n    @type([Vec3])\r\n    @displayOrder(2)\r\n    @tooltip('i18n:line.positions')\r\n    get positions (): Vec3[] {\r\n        return this._positions;\r\n    }\r\n\r\n    set positions (val) {\r\n        this._positions = val;\r\n        if (this._models[0]) {\r\n            const lineModel = this._models[0] as LineModel;\r\n            lineModel.addLineVertexData(this._positions, this.width, this.color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 线段的宽度。\r\n     * @en Width of this line.\r\n     */\r\n    @type(CurveRange)\r\n    @range([0, 1])\r\n    @displayOrder(3)\r\n    @tooltip('i18n:line.width')\r\n    get width (): CurveRange {\r\n        return this._width;\r\n    }\r\n\r\n    set width (val) {\r\n        this._width = val;\r\n        if (this._models[0]) {\r\n            const lineModel = this._models[0] as LineModel;\r\n            lineModel.addLineVertexData(this._positions, this._width, this._color);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _width = new CurveRange();\r\n\r\n    /**\r\n     * @zh 线段颜色。\r\n     * @en Color of this line.\r\n     */\r\n    @type(GradientRange)\r\n    @displayOrder(6)\r\n    @tooltip('i18n:line.color')\r\n    get color (): GradientRange {\r\n        return this._color;\r\n    }\r\n\r\n    set color (val) {\r\n        this._color = val;\r\n        if (this._models[0]) {\r\n            const lineModel = this._models[0] as LineModel;\r\n            lineModel.addLineVertexData(this._positions, this._width, this._color);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _color = new GradientRange();\r\n\r\n    @serializable\r\n    private _tile = new Vec2(1, 1);\r\n\r\n    private _tile_offset: Vec4 = new Vec4();\r\n\r\n    /**\r\n     * @zh 图块数。\r\n     * @en Texture tile count.\r\n     */\r\n    @type(Vec2)\r\n    @displayOrder(4)\r\n    @tooltip('i18n:line.tile')\r\n    get tile (): Vec2 {\r\n        return this._tile;\r\n    }\r\n\r\n    set tile (val) {\r\n        this._tile.set(val);\r\n        if (this.material) {\r\n            this._tile_offset.x = this._tile.x;\r\n            this._tile_offset.y = this._tile.y;\r\n            this.material.setProperty('mainTiling_Offset', this._tile_offset);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _offset = new Vec2(0, 0);\r\n\r\n    @type(Vec2)\r\n    @displayOrder(5)\r\n    @tooltip('i18n:line.offset')\r\n    get offset (): Vec2 {\r\n        return this._offset;\r\n    }\r\n\r\n    set offset (val) {\r\n        this._offset.set(val);\r\n        if (this.material) {\r\n            this._tile_offset.z = this._offset.x;\r\n            this._tile_offset.w = this._offset.y;\r\n            this.material.setProperty('mainTiling_Offset', this._tile_offset);\r\n        }\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    public onLoad (): void {\r\n        const model = cclegacy.director.root.createModel(LineModel) as LineModel;\r\n        if (this._models.length === 0) {\r\n            this._models.push(model);\r\n        } else {\r\n            this._models[0] = model;\r\n        }\r\n        model.node = model.transform = this.node;\r\n        if (this._material) {\r\n            this.lineMaterial = this._material;\r\n            this._material = null;\r\n        }\r\n        if (this.lineMaterial === null) {\r\n            const mat = builtinResMgr.get<Material>('default-trail-material');\r\n            this.material = mat;\r\n        }\r\n        const matIns = this.getMaterialInstance(0);\r\n        if (matIns) {\r\n            define[CC_USE_WORLD_SPACE] = this.worldSpace;\r\n            matIns.recompileShaders(define);\r\n            model.updateMaterial(matIns);\r\n        }\r\n        model.setCapacity(100);\r\n    }\r\n\r\n    public onEnable (): void {\r\n        super.onEnable();\r\n        if (this._models.length === 0 || !this._models[0]) {\r\n            return;\r\n        }\r\n        this._attachToScene();\r\n        this.texture = this._texture;\r\n        this.tile = this._tile;\r\n        this.offset = this._offset;\r\n        const lineModel = this._models[0] as LineModel;\r\n        lineModel.addLineVertexData(this._positions, this.width, this.color);\r\n    }\r\n\r\n    public onDisable (): void {\r\n        if (this._models.length > 0 && this._models[0]) {\r\n            this._detachFromScene();\r\n        }\r\n    }\r\n\r\n    protected _attachToScene (): void {\r\n        super._attachToScene();\r\n        if (this._models.length > 0 && this._models[0] && this.node && this.node.scene) {\r\n            const lineModel = this._models[0];\r\n            if (lineModel.scene) {\r\n                this._detachFromScene();\r\n            }\r\n            this._getRenderScene().addModel(lineModel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public _detachFromScene (): void {\r\n        super._detachFromScene();\r\n        if (this._models.length > 0 && this._models[0]) {\r\n            const lineModel = this._models[0];\r\n            if (lineModel.scene) {\r\n                lineModel.scene.removeModel(lineModel);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _onMaterialModified (index: number, material: Material | null): void {\r\n        super._onMaterialModified(index, material);\r\n        const matIns = this.getMaterialInstance(0);\r\n        if (matIns) {\r\n            define[CC_USE_WORLD_SPACE] = this.worldSpace;\r\n            matIns.recompileShaders(define);\r\n            if (this._models[0]) {\r\n                const lineModel = this._models[0] as LineModel;\r\n                lineModel.updateMaterial(matIns);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Color, Vec3, Mat4, Quat } from '../core';\r\nimport { ParticleSystem } from './particle-system';\r\nimport { ParticleSystemRendererBase } from './renderer/particle-system-renderer-base';\r\n\r\nexport class Particle {\r\n    public static INDENTIFY_NEG_QUAT = 10;\r\n    public static R2D = 180.0 / Math.PI;\r\n\r\n    public particleSystem: ParticleSystem;\r\n    public position: Vec3;\r\n    public velocity: Vec3;\r\n    public animatedVelocity: Vec3;\r\n    public ultimateVelocity: Vec3;\r\n    public angularVelocity: Vec3;\r\n    public axisOfRotation: Vec3;\r\n    public rotation: Vec3;\r\n    public startEuler: Vec3;\r\n    public startRotation: Quat;\r\n    public startRotated: boolean;\r\n    public deltaQuat: Quat;\r\n    public deltaMat: Mat4;\r\n    public localMat: Mat4;\r\n    public startSize: Vec3;\r\n    public size: Vec3;\r\n    public startColor: Color;\r\n    public color: Color;\r\n    public randomSeed: number; // uint\r\n    public remainingLifetime: number;\r\n    public loopCount: number;\r\n    public lastLoop: number;\r\n    public trailDelay: number;\r\n    public startLifetime: number;\r\n    public emitAccumulator0: number;\r\n    public emitAccumulator1: number;\r\n    public frameIndex: number;\r\n    public startRow: number;\r\n\r\n    constructor (particleSystem: any) {\r\n        this.particleSystem = particleSystem;\r\n        this.position = new Vec3(0, 0, 0);\r\n        this.velocity = new Vec3(0, 0, 0);\r\n        this.animatedVelocity = new Vec3(0, 0, 0);\r\n        this.ultimateVelocity = new Vec3(0, 0, 0);\r\n        this.angularVelocity = new Vec3(0, 0, 0);\r\n        this.axisOfRotation = new Vec3(0, 0, 0);\r\n        this.rotation = new Vec3(0, 0, 0);\r\n        this.startEuler = new Vec3(0, 0, 0);\r\n        this.startRotation = new Quat();\r\n        this.startRotated = false;\r\n        this.deltaQuat = new Quat();\r\n        this.deltaMat = new Mat4();\r\n        this.localMat = new Mat4();\r\n        this.startSize = new Vec3(0, 0, 0);\r\n        this.size = new Vec3(0, 0, 0);\r\n        this.startColor = Color.WHITE.clone();\r\n        this.color = Color.WHITE.clone();\r\n        this.randomSeed = 0; // uint\r\n        this.remainingLifetime = 0.0;\r\n        this.loopCount = 0;\r\n        this.lastLoop = 0;\r\n        this.trailDelay = 0;\r\n        this.startLifetime = 0.0;\r\n        this.emitAccumulator0 = 0.0;\r\n        this.emitAccumulator1 = 0.0;\r\n        this.frameIndex = 0.0;\r\n        this.startRow = 0;\r\n    }\r\n\r\n    public reset (): void {\r\n        this.rotation.set(0, 0, 0);\r\n        this.startEuler.set(0, 0, 0);\r\n        this.startRotation.set(0, 0, 0, 1);\r\n        this.startRotated = false;\r\n        this.deltaQuat.set(0, 0, 0, 1);\r\n        this.deltaMat.identity();\r\n        this.localMat.identity();\r\n    }\r\n}\r\n\r\nexport const PARTICLE_MODULE_NAME = {\r\n    COLOR: 'colorModule',\r\n    FORCE: 'forceModule',\r\n    LIMIT: 'limitModule',\r\n    ROTATION: 'rotationModule',\r\n    SIZE: 'sizeModule',\r\n    VELOCITY: 'velocityModule',\r\n    TEXTURE: 'textureModule',\r\n    NOISE: 'noiseModule',\r\n};\r\n\r\nexport const PARTICLE_MODULE_ORDER = [\r\n    'sizeModule',\r\n    'colorModule',\r\n    'forceModule',\r\n    'velocityModule',\r\n    'limitModule',\r\n    'rotationModule',\r\n    'textureModule',\r\n    'noiseModule',\r\n];\r\n\r\nexport const PARTICLE_MODULE_PROPERTY = [\r\n    '_colorOverLifetimeModule',\r\n    '_shapeModule',\r\n    '_sizeOvertimeModule',\r\n    '_velocityOvertimeModule',\r\n    '_forceOvertimeModule',\r\n    '_limitVelocityOvertimeModule',\r\n    '_rotationOvertimeModule',\r\n    '_textureAnimationModule',\r\n    '_noiseModule',\r\n    '_trailModule',\r\n];\r\n\r\nexport interface IParticleModule {\r\n    target: ParticleSystemRendererBase | null;\r\n    needUpdate: boolean;\r\n    needAnimate: boolean;\r\n    name: string;\r\n    bindTarget (target: any): void;\r\n    update (space: number, trans: Mat4): void;\r\n    animate (p: Particle, dt?: number): void;\r\n    get enable (): boolean;\r\n    set enable (val: boolean);\r\n}\r\n\r\nexport abstract class ParticleModuleBase implements IParticleModule {\r\n    public abstract get enable(): boolean;\r\n    public abstract set enable(val: boolean);\r\n\r\n    public target: ParticleSystemRendererBase | null = null;\r\n    public needUpdate = false;\r\n    public needAnimate = true;\r\n\r\n    public bindTarget (target: ParticleSystemRendererBase): void {\r\n        this.target = target;\r\n    }\r\n\r\n    public update (space: number, trans: Mat4): void {}\r\n    public abstract name: string;\r\n    public abstract animate (p: Particle, dt?: number): void;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Enum } from '../core';\r\n\r\nexport enum ParticleSpace {\r\n    World = 0,\r\n    Local = 1,\r\n    Custom = 2,\r\n}\r\nEnum(ParticleSpace);\r\n\r\n/**\r\n * @en Particle emitter culling mode\r\n * @zh 粒子的剔除模式。\r\n * @enum ParticleSystem.CullingMode\r\n */\r\nexport enum ParticleCullingMode {\r\n    Pause = 0,\r\n    PauseAndCatchup = 1,\r\n    AlwaysSimulate = 2,\r\n}\r\nEnum(ParticleCullingMode);\r\n\r\n/**\r\n * @en Particle emitter alignment space\r\n * @zh 粒子的对齐模式。\r\n * @enum ParticleSystemRenderer.AlignmentSpace\r\n */\r\nexport enum ParticleAlignmentSpace {\r\n    World = 0,\r\n    Local = 1,\r\n    View = 2,\r\n}\r\nEnum(ParticleAlignmentSpace);\r\n\r\n/**\r\n * 粒子的生成模式。\r\n * @enum ParticleSystemRenderer.RenderMode\r\n */\r\nexport enum ParticleRenderMode {\r\n\r\n    /**\r\n     * 粒子始终面向摄像机。\r\n     */\r\n    Billboard = 0,\r\n\r\n    /**\r\n     * 粒子始终面向摄像机但会根据参数进行拉伸。\r\n     */\r\n    StrecthedBillboard = 1,\r\n\r\n    /**\r\n     * 粒子始终与 XZ 平面平行。\r\n     */\r\n    HorizontalBillboard = 2,\r\n\r\n    /**\r\n     * 粒子始终与 Y 轴平行且朝向摄像机。\r\n     */\r\n    VerticalBillboard = 3,\r\n\r\n    /**\r\n     * 粒子保持模型本身状态。\r\n     */\r\n    Mesh = 4,\r\n}\r\nEnum(ParticleRenderMode);\r\n\r\n/**\r\n * 粒子发射器类型。\r\n * @enum shapeModule.ShapeType\r\n */\r\nexport enum ParticleShapeType {\r\n    /**\r\n     * 立方体类型粒子发射器。\r\n     */\r\n    Box = 0,\r\n\r\n    /**\r\n     * 圆形粒子发射器。\r\n     */\r\n    Circle = 1,\r\n\r\n    /**\r\n     * 圆锥体粒子发射器。\r\n     */\r\n    Cone = 2,\r\n\r\n    /**\r\n     * 球体粒子发射器。\r\n     */\r\n    Sphere = 3,\r\n\r\n    /**\r\n     * 半球体粒子发射器。\r\n     */\r\n    Hemisphere = 4,\r\n}\r\nEnum(ParticleShapeType);\r\n\r\n/**\r\n * 粒子从发射器的哪个部位发射。\r\n * @enum shapeModule.EmitLocation\r\n */\r\nexport enum ParticleEmitLocation {\r\n    /**\r\n     * 基础位置发射（仅对 Circle 类型及 Cone 类型的粒子发射器适用）。\r\n     */\r\n    Base = 0,\r\n\r\n    /**\r\n     * 边框位置发射（仅对 Box 类型及 Circle 类型的粒子发射器适用）。\r\n     */\r\n    Edge = 1,\r\n\r\n    /**\r\n     * 表面位置发射（对所有类型的粒子发射器都适用）。\r\n     */\r\n    Shell = 2,\r\n\r\n    /**\r\n     * 内部位置发射（对所有类型的粒子发射器都适用）。\r\n     */\r\n    Volume = 3,\r\n}\r\nEnum(ParticleEmitLocation);\r\n\r\n/**\r\n * 粒子在扇形区域的发射方式。\r\n * @enum shapeModule.ArcMode\r\n */\r\nexport enum ParticleArcMode {\r\n    /**\r\n     * 随机位置发射。\r\n     */\r\n    Random = 0,\r\n\r\n    /**\r\n     * 沿某一方向循环发射，每次循环方向相同。\r\n     */\r\n    Loop = 1,\r\n\r\n    /**\r\n     * 循环发射，每次循环方向相反。\r\n     */\r\n    PingPong = 2,\r\n}\r\nEnum(ParticleArcMode);\r\n\r\n/**\r\n * 选择如何为粒子系统生成轨迹。\r\n * @enum trailModule.TrailMode\r\n */\r\nexport enum ParticleTrailMode {\r\n    /**\r\n     * 粒子模式<bg>。\r\n     * 创建一种效果，其中每个粒子在其路径中留下固定的轨迹。\r\n     */\r\n    Particles = 0,\r\n\r\n    /**\r\n     * 带模式<bg>。\r\n     * 根据其生命周期创建连接每个粒子的轨迹带。\r\n     */\r\n    // Ribbon = 1,\r\n}\r\nEnum(ParticleTrailMode);\r\n\r\n/**\r\n * 纹理填充模式。\r\n * @enum trailModule.TextureMode\r\n */\r\nexport enum ParticleTextureMode {\r\n    /**\r\n     * 拉伸填充纹理。\r\n     */\r\n    Stretch = 0,\r\n\r\n    /**\r\n     * 重复填充纹理。\r\n     */\r\n    // Repeat = 1,\r\n}\r\nEnum(ParticleTextureMode);\r\n\r\nexport enum ParticleModuleRandSeed {\r\n    LIMIT = 23541,\r\n    SIZE = 39825,\r\n    TEXTURE = 90794,\r\n    COLOR = 91041,\r\n    FORCE = 212165,\r\n    ROTATION = 125292,\r\n    VELOCITY_X = 197866,\r\n    VELOCITY_Y = 156497,\r\n    VELOCITY_Z = 984136,\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4, Quat, random, randomRange, randomRangeInt, Vec2, Vec3, bits } from '../core/math';\r\nimport CurveRange from './animator/curve-range';\r\nimport GradientRange from './animator/gradient-range';\r\nimport { ParticleSpace } from './enum';\r\n\r\nexport const particleEmitZAxis = new Vec3(0, 0, -1);\r\n\r\nexport function calculateTransform (systemSpace: number, moduleSpace: number, worldTransform: Mat4, outQuat: Quat): boolean {\r\n    if (moduleSpace !== systemSpace) {\r\n        if (systemSpace === ParticleSpace.World) {\r\n            Mat4.getRotation(outQuat, worldTransform);\r\n        } else {\r\n            Mat4.invert(worldTransform, worldTransform);\r\n            Mat4.getRotation(outQuat, worldTransform);\r\n        }\r\n        return true;\r\n    } else {\r\n        Quat.set(outQuat, 0, 0, 0, 1);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function fixedAngleUnitVector2 (out: Vec2 | Vec3, theta: number): void {\r\n    Vec2.set(out, Math.cos(theta), Math.sin(theta));\r\n}\r\n\r\nexport function randomUnitVector2 (out: Vec2 | Vec3): void {\r\n    const a = randomRange(0, 2 * Math.PI);\r\n    const x = Math.cos(a);\r\n    const y = Math.sin(a);\r\n    Vec2.set(out, x, y);\r\n}\r\n\r\nexport function randomUnitVector (out: Vec3): void {\r\n    const z = randomRange(-1, 1);\r\n    const a = randomRange(0, 2 * Math.PI);\r\n    const r = Math.sqrt(1 - z * z);\r\n    const x = r * Math.cos(a);\r\n    const y = r * Math.sin(a);\r\n    Vec3.set(out, x, y, z);\r\n}\r\n\r\nexport function randomPointInUnitSphere (out: Vec3): void {\r\n    randomUnitVector(out);\r\n    Vec3.multiplyScalar(out, out, random());\r\n}\r\n\r\nexport function randomPointBetweenSphere (out: Vec3, minRadius: number, maxRadius: number): void {\r\n    randomUnitVector(out);\r\n    Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * random());\r\n}\r\n\r\nexport function randomPointInUnitCircle (out: Vec3): void {\r\n    randomUnitVector2(out);\r\n    out.z = 0;\r\n    Vec3.multiplyScalar(out, out, random());\r\n}\r\n\r\nexport function randomPointBetweenCircle (out: Vec3, minRadius: number, maxRadius: number): void {\r\n    randomUnitVector2(out);\r\n    out.z = 0;\r\n    Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * random());\r\n}\r\n\r\nexport function randomPointBetweenCircleAtFixedAngle (out: Vec3, minRadius: number, maxRadius: number, theta: number): void {\r\n    fixedAngleUnitVector2(out, theta);\r\n    out.z = 0;\r\n    Vec3.multiplyScalar(out, out, minRadius + (maxRadius - minRadius) * random());\r\n}\r\n\r\nexport function randomPointInCube (out: Vec3, extents: Vec3): void {\r\n    Vec3.set(\r\n        out,\r\n        randomRange(-extents.x, extents.x),\r\n        randomRange(-extents.y, extents.y),\r\n        randomRange(-extents.z, extents.z),\r\n    );\r\n}\r\n\r\nexport function randomPointBetweenCube (out: Vec3, minBox: Vec3, maxBox: Vec3): void {\r\n    const subscript: ['x', 'y', 'z'] = ['x', 'y', 'z'];\r\n    const edge = randomRangeInt(0, 3);\r\n    for (let i = 0; i < 3; i++) {\r\n        if (i === edge) {\r\n            out[subscript[i]] = randomRange(-maxBox[subscript[i]], maxBox[subscript[i]]);\r\n            continue;\r\n        }\r\n        const x = random() * 2 - 1;\r\n        if (x < 0) {\r\n            out[subscript[i]] = -minBox[subscript[i]] + x * (maxBox[subscript[i]] - minBox[subscript[i]]);\r\n        } else {\r\n            out[subscript[i]] = minBox[subscript[i]] + x * (maxBox[subscript[i]] - minBox[subscript[i]]);\r\n        }\r\n    }\r\n}\r\n\r\n// Fisher–Yates shuffle\r\nexport function randomSortArray (arr: number[]): void {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const transpose = i + randomRangeInt(0, arr.length - i);\r\n        const val = arr[transpose];\r\n        arr[transpose] = arr[i];\r\n        arr[i] = val;\r\n    }\r\n}\r\n\r\nexport function randomSign (): number {\r\n    let sgn = randomRange(-1, 1);\r\n    if (sgn === 0) {\r\n        sgn++;\r\n    }\r\n    return bits.sign(sgn);\r\n}\r\n\r\n/**\r\n * @en judge if the CurveRange use TwoCurves or TwoConstants\r\n * @zh 判断粒子的CurveRange是否使用了 TwoCurves 或者 TwoConstants\r\n */\r\nexport function isCurveTwoValues (curve: CurveRange): boolean {\r\n    const Mode = CurveRange.Mode;\r\n    switch (curve.mode) {\r\n    case Mode.TwoCurves:\r\n    case Mode.TwoConstants:\r\n        return true;\r\n    default:\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * @en judge if the GradientRange TwoValues use TwoGradients or TwoColors\r\n * @zh 判断粒子的 GradientRange 是否使用了 TwoGradients 或者 TwoColors\r\n */\r\nexport function isGradientTwoValues (color: GradientRange): boolean {\r\n    const Mode = GradientRange.Mode;\r\n    switch (color.mode) {\r\n    case Mode.TwoGradients:\r\n    case Mode.TwoColors:\r\n        return true;\r\n    default:\r\n        return false;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, displayOrder, type, serializable } from 'cc.decorator';\r\nimport { pseudoRandom } from '../../core';\r\nimport { Particle, PARTICLE_MODULE_NAME, ParticleModuleBase } from '../particle';\r\nimport GradientRange from './gradient-range';\r\nimport { ParticleModuleRandSeed } from '../enum';\r\nimport { isGradientTwoValues } from '../particle-general-function';\r\n\r\nconst COLOR_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.COLOR;\r\n\r\n/**\r\n * @en\r\n * This module will modify particle color over life time. You can set the color gradient to see how it changes.\r\n * @zh\r\n * 本模块用于在粒子生命周期内对颜色进行改变，可以修改模块下的颜色渐变条来查看粒子颜色渐变效果。\r\n */\r\n@ccclass('cc.ColorOvertimeModule')\r\nexport default class ColorOvertimeModule extends ParticleModuleBase {\r\n    constructor () {\r\n        super();\r\n    }\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable or disable this module.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val: boolean) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    /**\r\n     * @en Change color over life time. Evaluate by key interpolation.\r\n     * @zh 颜色随时间变化的参数，各个 key 之间线性插值变化。\r\n     */\r\n    @type(GradientRange)\r\n    @serializable\r\n    @displayOrder(1)\r\n    public color = new GradientRange();\r\n    public name = PARTICLE_MODULE_NAME.COLOR;\r\n\r\n    /**\r\n     * @en Apply color animation to particle.\r\n     * @zh 作用颜色变换到粒子上。\r\n     * @param particle @en Particle to animate. @zh 模块需要更新的粒子。\r\n     * @internal\r\n     */\r\n    public animate (particle: Particle): void {\r\n        particle.color.set(particle.startColor);\r\n        const rand = isGradientTwoValues(this.color) ? pseudoRandom(particle.randomSeed + COLOR_OVERTIME_RAND_OFFSET) : 0;\r\n        particle.color.multiply(this.color.evaluate(1.0 - particle.remainingLifetime / particle.startLifetime, rand));\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, range, type, serializable } from 'cc.decorator';\r\nimport { Mat4, pseudoRandom, Quat, Vec3 } from '../../core';\r\nimport { ParticleSpace, ParticleModuleRandSeed } from '../enum';\r\nimport { calculateTransform, isCurveTwoValues } from '../particle-general-function';\r\nimport CurveRange from './curve-range';\r\n\r\nimport { Particle, ParticleModuleBase, PARTICLE_MODULE_NAME } from '../particle';\r\n\r\nconst FORCE_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.FORCE;\r\n\r\nconst _temp_v3 = new Vec3();\r\n\r\n/**\r\n * @en\r\n * This module will apply force to particle over life time.\r\n * Force on every axis is curve so you can modify these curves to see how it animate.\r\n * @zh\r\n * 本模块用于在粒子生命周期内对粒子施加外力。\r\n * 每个轴上的受力大小都是可以用曲线来进行编辑，修改曲线就能够看到粒子受力变化的效果了。\r\n */\r\n@ccclass('cc.ForceOvertimeModule')\r\nexport default class ForceOvertimeModule extends ParticleModuleBase {\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    /**\r\n     * @en Force on the X axis.\r\n     * @zh X 轴方向上的加速度分量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:forceOvertimeModule.x')\r\n    public x = new CurveRange();\r\n\r\n    /**\r\n     * @en Force on the Y axis.\r\n     * @zh Y 轴方向上的加速度分量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(3)\r\n    @tooltip('i18n:forceOvertimeModule.y')\r\n    public y = new CurveRange();\r\n\r\n    /**\r\n     * @en Force on the Z axis.\r\n     * @zh Z 轴方向上的加速度分量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:forceOvertimeModule.z')\r\n    public z = new CurveRange();\r\n\r\n    /**\r\n     * @en Force calculation coordinate. See [[Space]].\r\n     * @zh 加速度计算时采用的坐标系 [[Space]]。\r\n     */\r\n    @type(ParticleSpace)\r\n    @serializable\r\n    @displayOrder(1)\r\n    @tooltip('i18n:forceOvertimeModule.space')\r\n    public space = ParticleSpace.Local;\r\n\r\n    // TODO:currently not supported\r\n    public randomized = false;\r\n\r\n    private rotation: Quat;\r\n    private needTransform: boolean;\r\n    public name = PARTICLE_MODULE_NAME.FORCE;\r\n\r\n    constructor () {\r\n        super();\r\n        this.rotation = new Quat();\r\n        this.needTransform = false;\r\n        this.needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en Update force module calculate transform.\r\n     * @zh 更新模块，计算坐标变换。\r\n     * @param space @en Force module update space. @zh 模块更新空间。\r\n     * @param worldTransform @en Particle system world transform. @zh 粒子系统的世界变换矩阵。\r\n     * @internal\r\n     */\r\n    public update (space: number, worldTransform: Mat4): void {\r\n        this.needTransform = calculateTransform(space, this.space, worldTransform, this.rotation);\r\n    }\r\n\r\n    /**\r\n     * @en Apply force to particle.\r\n     * @zh 作用力到粒子上。\r\n     * @param p @en Particle to animate. @zh 模块需要更新的粒子。\r\n     * @param dt @en Update interval time. @zh 粒子系统更新的间隔时间。\r\n     * @internal\r\n     */\r\n    public animate (p: Particle, dt: number): void {\r\n        const normalizedTime = 1 - p.remainingLifetime / p.startLifetime;\r\n        const randX = isCurveTwoValues(this.x) ? pseudoRandom(p.randomSeed + FORCE_OVERTIME_RAND_OFFSET) : 0;\r\n        const randY = isCurveTwoValues(this.y) ? pseudoRandom(p.randomSeed + FORCE_OVERTIME_RAND_OFFSET) : 0;\r\n        const randZ = isCurveTwoValues(this.z) ? pseudoRandom(p.randomSeed + FORCE_OVERTIME_RAND_OFFSET) : 0;\r\n\r\n        const force = Vec3.set(\r\n            _temp_v3,\r\n            this.x.evaluate(normalizedTime, randX)!,\r\n            this.y.evaluate(normalizedTime, randY)!,\r\n            this.z.evaluate(normalizedTime, randZ)!,\r\n        );\r\n        if (this.needTransform) {\r\n            Vec3.transformQuat(force, force, this.rotation);\r\n        }\r\n        Vec3.scaleAndAdd(p.velocity, p.velocity, force, dt);\r\n        Vec3.copy(p.ultimateVelocity, p.velocity);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, range, type, serializable, visible } from 'cc.decorator';\r\nimport { lerp, pseudoRandom, Vec3, Mat4, Quat } from '../../core';\r\nimport { ParticleSpace, ParticleModuleRandSeed } from '../enum';\r\nimport { Particle, ParticleModuleBase, PARTICLE_MODULE_NAME } from '../particle';\r\nimport CurveRange from './curve-range';\r\nimport { calculateTransform, isCurveTwoValues } from '../particle-general-function';\r\n\r\nconst LIMIT_VELOCITY_RAND_OFFSET = ParticleModuleRandSeed.LIMIT;\r\n\r\nconst _temp_v3 = new Vec3();\r\nconst _temp_v3_1 = new Vec3();\r\n\r\n/**\r\n * @en\r\n * This module will damping particle velocity to the limit value over life time.\r\n * Open the separateAxes option you can damping the particle velocity on XYZ axis\r\n * Limit value on every axis is curve so you can modify these curves to see how it animate.\r\n * @zh\r\n * 本模块用于在粒子生命周期内对速度进行衰减，速度每次衰减比例为 dampen 持续衰减到极限速度。\r\n * 打开 separateAxes 就能够修改粒子在三个轴方向的极限速度大小。\r\n * 每个轴上的粒子极限速度大小都是可以用曲线来进行编辑，修改曲线就能够看到粒子大小变化的效果了。\r\n */\r\n@ccclass('cc.LimitVelocityOvertimeModule')\r\nexport default class LimitVelocityOvertimeModule extends ParticleModuleBase {\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    /**\r\n     * @en Limit velocity on X axis.\r\n     * @zh X 轴方向上的速度下限。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.limitX')\r\n    @visible(function (this: LimitVelocityOvertimeModule): boolean {\r\n        return this.separateAxes;\r\n    })\r\n    public limitX = new CurveRange();\r\n\r\n    /**\r\n     * @en Limit velocity on Y axis.\r\n     * @zh Y 轴方向上的速度下限。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(5)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.limitY')\r\n    @visible(function (this: LimitVelocityOvertimeModule): boolean {\r\n        return this.separateAxes;\r\n    })\r\n    public limitY = new CurveRange();\r\n\r\n    /**\r\n     * @en Limit velocity on Z axis.\r\n     * @zh Z 轴方向上的速度下限。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(6)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.limitZ')\r\n    @visible(function (this: LimitVelocityOvertimeModule): boolean {\r\n        return this.separateAxes;\r\n    })\r\n    public limitZ = new CurveRange();\r\n\r\n    /**\r\n     * @en Velocity limit.\r\n     * @zh 速度下限。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(3)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.limit')\r\n    @visible(function (this: LimitVelocityOvertimeModule): boolean {\r\n        return !this.separateAxes;\r\n    })\r\n    public limit = new CurveRange();\r\n\r\n    /**\r\n     * @en Dampen velocity percent every time.\r\n     * @zh 速度每次衰减的比例。\r\n     */\r\n    @serializable\r\n    @displayOrder(7)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.dampen')\r\n    public dampen = 3;\r\n\r\n    /**\r\n     * @en Limit velocity on separate axis.\r\n     * @zh 是否三个轴分开限制。\r\n     */\r\n    @serializable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.separateAxes')\r\n    public separateAxes = false;\r\n\r\n    /**\r\n     * @en Space used to calculate limit velocity.\r\n     * @zh 计算速度下限时采用的坐标系 [[Space]]。\r\n     */\r\n    @type(ParticleSpace)\r\n    @serializable\r\n    @displayOrder(1)\r\n    @tooltip('i18n:limitVelocityOvertimeModule.space')\r\n    public space = ParticleSpace.Local;\r\n\r\n    // TODO:functions related to drag are temporarily not supported\r\n    public drag = null;\r\n    public multiplyDragByParticleSize = false;\r\n    public multiplyDragByParticleVelocity = false;\r\n    public name = PARTICLE_MODULE_NAME.LIMIT;\r\n    private rotation: Quat;\r\n    private needTransform: boolean;\r\n\r\n    constructor () {\r\n        super();\r\n        this.rotation = new Quat();\r\n        this.needTransform = false;\r\n        this.needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en Update limit velocity module calculate transform.\r\n     * @zh 更新模块，计算坐标变换。\r\n     * @param space @en Limit velocity module update space @zh 模块更新空间\r\n     * @param worldTransform @en Particle system world transform @zh 粒子系统的世界变换矩阵\r\n     * @internal\r\n     */\r\n    public update (space: number, worldTransform: Mat4): void {\r\n        this.needTransform = calculateTransform(space, this.space, worldTransform, this.rotation);\r\n    }\r\n\r\n    /**\r\n     * @en Apply limit velocity to particle.\r\n     * @zh 作用速度衰减到粒子上。\r\n     * @param p @en Particle to animate @zh 模块需要更新的粒子\r\n     * @param dt @en Update interval time @zh 粒子系统更新的间隔时间\r\n     * @internal\r\n     */\r\n    public animate (p: Particle, dt: number): void {\r\n        const normalizedTime = 1 - p.remainingLifetime / p.startLifetime;\r\n        const dampedVel = _temp_v3;\r\n        if (this.separateAxes) {\r\n            const randX = isCurveTwoValues(this.limitX) ? pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET) : 0;\r\n            const randY = isCurveTwoValues(this.limitY) ? pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET) : 0;\r\n            const randZ = isCurveTwoValues(this.limitZ) ? pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET) : 0;\r\n            Vec3.set(\r\n                _temp_v3_1,\r\n                this.limitX.evaluate(normalizedTime, randX)!,\r\n                this.limitY.evaluate(normalizedTime, randY)!,\r\n                this.limitZ.evaluate(normalizedTime, randZ)!,\r\n            );\r\n            if (this.needTransform) {\r\n                Vec3.transformQuat(_temp_v3_1, _temp_v3_1, this.rotation);\r\n            }\r\n            Vec3.set(\r\n                dampedVel,\r\n                dampenBeyondLimit(p.ultimateVelocity.x, _temp_v3_1.x, this.dampen),\r\n                dampenBeyondLimit(p.ultimateVelocity.y, _temp_v3_1.y, this.dampen),\r\n                dampenBeyondLimit(p.ultimateVelocity.z, _temp_v3_1.z, this.dampen),\r\n            );\r\n        } else {\r\n            Vec3.normalize(dampedVel, p.ultimateVelocity);\r\n            const rand = isCurveTwoValues(this.limit) ? pseudoRandom(p.randomSeed + LIMIT_VELOCITY_RAND_OFFSET) : 0;\r\n            Vec3.multiplyScalar(\r\n                dampedVel,\r\n                dampedVel,\r\n                dampenBeyondLimit(p.ultimateVelocity.length(), this.limit.evaluate(normalizedTime, rand)!, this.dampen),\r\n            );\r\n        }\r\n        Vec3.copy(p.ultimateVelocity, dampedVel);\r\n        Vec3.copy(p.velocity, p.ultimateVelocity);\r\n    }\r\n}\r\n\r\nfunction dampenBeyondLimit (vel: number, limit: number, dampen: number): number {\r\n    const sgn = Math.sign(vel);\r\n    let abs = Math.abs(vel);\r\n    if (abs > limit) {\r\n        const absToGive = abs - abs * dampen;\r\n        if (absToGive > limit) {\r\n            abs = absToGive;\r\n        } else {\r\n            abs = limit;\r\n        }\r\n    }\r\n    return abs * sgn;\r\n}\r\n","/* eslint-disable max-len */\r\n/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, range, type, radian, serializable, visible } from 'cc.decorator';\r\nimport { Mat4, pseudoRandom, Quat, Vec3 } from '../../core';\r\nimport { Particle, ParticleModuleBase, PARTICLE_MODULE_NAME } from '../particle';\r\nimport CurveRange from './curve-range';\r\nimport { ParticleModuleRandSeed, ParticleRenderMode } from '../enum';\r\nimport { isCurveTwoValues } from '../particle-general-function';\r\n\r\nconst ROTATION_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.ROTATION;\r\n\r\n/**\r\n * @en\r\n * This module will apply rotation to particle over life time.\r\n * Open the separateAxes option you can change the rotation on XYZ axis\r\n * Rotation on every axis is curve so you can modify these curves to see how it animate.\r\n * @zh\r\n * 本模块用于在粒子生命周期内对粒子施加旋转角速度。\r\n * 打开 separateAxes 就能够修改粒子在三个轴方向的旋转角速度大小。\r\n * 每个轴上的旋转角速度都是可以用曲线来进行编辑，修改曲线就能够看到粒子受力变化的效果了。\r\n */\r\n@ccclass('cc.RotationOvertimeModule')\r\nexport default class RotationOvertimeModule extends ParticleModuleBase {\r\n    constructor () {\r\n        super();\r\n    }\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    @serializable\r\n    private _separateAxes = false;\r\n\r\n    /**\r\n     * @en Rotation around separate axis.\r\n     * @zh 是否三个轴分开设定旋转。\r\n     */\r\n    @displayOrder(1)\r\n    @tooltip('i18n:rotationOvertimeModule.separateAxes')\r\n    get separateAxes (): boolean {\r\n        return this._separateAxes;\r\n    }\r\n\r\n    set separateAxes (val) {\r\n        this._separateAxes = val;\r\n    }\r\n\r\n    /**\r\n     * @en Angle around X axis.\r\n     * @zh 绕 X 轴设定旋转。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @radian\r\n    @displayOrder(2)\r\n    @tooltip('i18n:rotationOvertimeModule.x')\r\n    @visible(function (this: RotationOvertimeModule): boolean { return this.separateAxes; })\r\n    public x = new CurveRange();\r\n\r\n    /**\r\n     * @en Angle around Y axis.\r\n     * @zh 绕 Y 轴设定旋转。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @radian\r\n    @displayOrder(3)\r\n    @tooltip('i18n:rotationOvertimeModule.y')\r\n    @visible(function (this: RotationOvertimeModule): boolean { return this.separateAxes; })\r\n    public y = new CurveRange();\r\n\r\n    /**\r\n     * @en Angle around Z axis.\r\n     * @zh 绕 Z 轴设定旋转。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @radian\r\n    @displayOrder(4)\r\n    @tooltip('i18n:rotationOvertimeModule.z')\r\n    public z = new CurveRange();\r\n\r\n    public name = PARTICLE_MODULE_NAME.ROTATION;\r\n\r\n    private _startMat: Mat4 = new Mat4();\r\n    private _matRot: Mat4 = new Mat4();\r\n    private _quatRot: Quat = new Quat();\r\n    private _otherEuler: Vec3 = new Vec3();\r\n\r\n    private _processRotation (p: Particle, r2d: number): void {\r\n        // Same as the particle-vs-legacy.chunk glsl statemants\r\n        const renderMode = p.particleSystem.processor.getInfo().renderMode;\r\n        if (renderMode !== ParticleRenderMode.Mesh) {\r\n            if (renderMode === ParticleRenderMode.StrecthedBillboard) {\r\n                this._quatRot.set(0, 0, 0, 1);\r\n            }\r\n        }\r\n\r\n        Quat.normalize(this._quatRot, this._quatRot);\r\n        if (this._quatRot.w < 0.0) { // Use vec3 to save quat so we need identify negative w\r\n            this._quatRot.x += Particle.INDENTIFY_NEG_QUAT; // Indentify negative w & revert the quat in shader\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Apply rotation to particle.\r\n     * @zh 作用旋转到粒子上。\r\n     * @param p @en Particle to animate @zh 模块需要更新的粒子\r\n     * @param dt @en Update interval time @zh 粒子系统更新的间隔时间\r\n     * @internal\r\n     */\r\n    public animate (p: Particle, dt: number): void {\r\n        const normalizedTime = 1 - p.remainingLifetime / p.startLifetime;\r\n        const randZ = isCurveTwoValues(this.z) ? pseudoRandom(p.randomSeed + ROTATION_OVERTIME_RAND_OFFSET) : 0;\r\n        const renderMode = p.particleSystem.processor.getInfo().renderMode;\r\n\r\n        if ((!this._separateAxes) || (renderMode === ParticleRenderMode.VerticalBillboard || renderMode === ParticleRenderMode.HorizontalBillboard)) {\r\n            Quat.fromEuler(p.deltaQuat, 0, 0, this.z.evaluate(normalizedTime, randZ)! * dt * Particle.R2D);\r\n        } else {\r\n            const randX = isCurveTwoValues(this.x) ? pseudoRandom(p.randomSeed + ROTATION_OVERTIME_RAND_OFFSET) : 0;\r\n            const randY = isCurveTwoValues(this.y) ? pseudoRandom(p.randomSeed + ROTATION_OVERTIME_RAND_OFFSET) : 0;\r\n            Quat.fromEuler(p.deltaQuat, this.x.evaluate(normalizedTime, randX)! * dt * Particle.R2D, this.y.evaluate(normalizedTime, randY)! * dt * Particle.R2D, this.z.evaluate(normalizedTime, randZ)! * dt * Particle.R2D);\r\n        }\r\n\r\n        // Rotation-overtime combine with start rotation, after that we get quat from the mat\r\n        p.deltaMat = Mat4.fromQuat(p.deltaMat, p.deltaQuat);\r\n        p.localMat = p.localMat.multiply(p.deltaMat); // accumulate rotation\r\n\r\n        if (!p.startRotated) {\r\n            if (renderMode !== ParticleRenderMode.Mesh) {\r\n                if (renderMode === ParticleRenderMode.StrecthedBillboard) {\r\n                    p.startEuler.set(0, 0, 0);\r\n                } else if (renderMode !== ParticleRenderMode.Billboard) {\r\n                    p.startEuler.set(0, 0, p.startEuler.z);\r\n                }\r\n            }\r\n            Quat.fromEuler(p.startRotation, p.startEuler.x * Particle.R2D, p.startEuler.y * Particle.R2D, p.startEuler.z * Particle.R2D);\r\n            p.startRotated = true;\r\n        }\r\n\r\n        this._startMat = Mat4.fromQuat(this._startMat, p.startRotation);\r\n        this._matRot = this._startMat.multiply(p.localMat);\r\n\r\n        Mat4.getRotation(this._quatRot, this._matRot);\r\n        this._processRotation(p, Particle.R2D);\r\n        p.rotation.set(this._quatRot.x, this._quatRot.y, this._quatRot.z);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, type, serializable, range, visible } from 'cc.decorator';\r\nimport { pseudoRandom, Vec3 } from '../../core';\r\nimport { Particle, ParticleModuleBase, PARTICLE_MODULE_NAME } from '../particle';\r\nimport CurveRange from './curve-range';\r\nimport { ParticleModuleRandSeed } from '../enum';\r\nimport { isCurveTwoValues } from '../particle-general-function';\r\n\r\nconst SIZE_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.SIZE;\r\n\r\n/**\r\n * @en\r\n * This module will modify particle size over life time.\r\n * Open the separateAxes option you can change the particle size on XYZ axis (Size on Z axis is invalid for billboard particle)\r\n * Size on every axis is curve so you can modify these curves to see how it animate.\r\n * @zh\r\n * 本模块用于在粒子生命周期内对大小进行改变。\r\n * 打开 separateAxes 就能够修改粒子在三个轴方向的大小（z轴大小对公告板粒子无效）\r\n * 每个轴上的粒子大小都是可以用曲线来进行编辑，修改曲线就能够看到粒子大小变化的效果了。\r\n */\r\n@ccclass('cc.SizeOvertimeModule')\r\nexport default class SizeOvertimeModule extends ParticleModuleBase {\r\n    constructor () {\r\n        super();\r\n    }\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    /**\r\n     * @en Different size on separate axis.\r\n     * @zh 决定是否在每个轴上独立控制粒子大小。\r\n     */\r\n    @serializable\r\n    @displayOrder(1)\r\n    @tooltip('i18n:sizeOvertimeModule.separateAxes')\r\n    public separateAxes = false;\r\n\r\n    /**\r\n     * @en Curve to modify particle size.\r\n     * @zh 定义一条曲线来决定粒子在其生命周期中的大小变化。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(2)\r\n    @tooltip('i18n:sizeOvertimeModule.size')\r\n    @visible(function (this: SizeOvertimeModule): boolean { return !this.separateAxes; })\r\n    public size = new CurveRange();\r\n\r\n    /**\r\n     * @en Curve to modify particle size on X axis.\r\n     * @zh 定义一条曲线来决定粒子在其生命周期中 X 轴方向上的大小变化。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(3)\r\n    @tooltip('i18n:sizeOvertimeModule.x')\r\n    @visible(function (this: SizeOvertimeModule): boolean { return this.separateAxes; })\r\n    public x = new CurveRange();\r\n\r\n    /**\r\n     * @en Curve to modify particle size on Y axis.\r\n     * @zh 定义一条曲线来决定粒子在其生命周期中 Y 轴方向上的大小变化。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(4)\r\n    @tooltip('i18n:sizeOvertimeModule.y')\r\n    @visible(function (this: SizeOvertimeModule): boolean { return this.separateAxes; })\r\n    public y = new CurveRange();\r\n\r\n    /**\r\n     * @en Curve to modify particle size on Z axis.\r\n     * @zh 定义一条曲线来决定粒子在其生命周期中 Z 轴方向上的大小变化。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(5)\r\n    @tooltip('i18n:sizeOvertimeModule.z')\r\n    @visible(function (this: SizeOvertimeModule): boolean { return this.separateAxes; })\r\n    public z = new CurveRange();\r\n\r\n    public name = PARTICLE_MODULE_NAME.SIZE;\r\n\r\n    /**\r\n     * @en Apply size animation to particle.\r\n     * @zh 应用大小变换到粒子上。\r\n     * @param particle @en Particle to animate @zh 模块需要更新的粒子\r\n     * @param dt @en Update interval time @zh 粒子系统更新的间隔时间\r\n     * @internal\r\n     */\r\n    public animate (particle: Particle, dt: number): void {\r\n        if (!this.separateAxes) {\r\n            const rand = isCurveTwoValues(this.size) ? pseudoRandom(particle.randomSeed + SIZE_OVERTIME_RAND_OFFSET) : 0;\r\n            Vec3.multiplyScalar(\r\n                particle.size,\r\n                particle.startSize,\r\n                this.size.evaluate(1 - particle.remainingLifetime / particle.startLifetime, rand)!,\r\n            );\r\n        } else {\r\n            const currLifetime = 1 - particle.remainingLifetime / particle.startLifetime;\r\n            const randX = isCurveTwoValues(this.x) ? pseudoRandom(particle.randomSeed + SIZE_OVERTIME_RAND_OFFSET) : 0;\r\n            const randY = isCurveTwoValues(this.y) ? pseudoRandom(particle.randomSeed + SIZE_OVERTIME_RAND_OFFSET) : 0;\r\n            const randZ = isCurveTwoValues(this.z) ? pseudoRandom(particle.randomSeed + SIZE_OVERTIME_RAND_OFFSET) : 0;\r\n            particle.size.x = particle.startSize.x * this.x.evaluate(currLifetime, randX)!;\r\n            particle.size.y = particle.startSize.y * this.y.evaluate(currLifetime, randY)!;\r\n            particle.size.z = particle.startSize.z * this.z.evaluate(currLifetime, randZ)!;\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, type, formerlySerializedAs, serializable, range } from 'cc.decorator';\r\nimport { lerp, pseudoRandom, repeat, Enum, random, error } from '../../core';\r\nimport { Particle, ParticleModuleBase, PARTICLE_MODULE_NAME } from '../particle';\r\nimport CurveRange from './curve-range';\r\nimport { ParticleModuleRandSeed } from '../enum';\r\nimport { isCurveTwoValues } from '../particle-general-function';\r\n\r\nconst TEXTURE_ANIMATION_RAND_OFFSET = ParticleModuleRandSeed.TEXTURE;\r\n\r\n/**\r\n * @en Texture animation type.\r\n * @zh 粒子贴图动画类型。\r\n * @enum textureAnimationModule.Mode\r\n */\r\nconst Mode = Enum({\r\n    /**\r\n     * 网格类型。\r\n     */\r\n    Grid: 0,\r\n\r\n    /**\r\n     * 精灵类型（暂未支持）。\r\n     */\r\n    // Sprites: 1,\r\n});\r\n\r\n/**\r\n * @en Mode to play texture animation.\r\n * @zh 贴图动画的播放方式。\r\n * @enum textureAnimationModule.Animation\r\n */\r\nconst Animation = Enum({\r\n    /**\r\n     * @en Play whole sheet of texture.\r\n     * @zh 播放贴图中的所有帧。\r\n     */\r\n    WholeSheet: 0,\r\n\r\n    /**\r\n     * @en Play just one row of texture.\r\n     * @zh 播放贴图中的其中一行动画。\r\n     */\r\n    SingleRow: 1,\r\n});\r\n\r\n/**\r\n * @en\r\n * Use this module to play frame animation of the particle texture.\r\n * @zh\r\n * 这个模块用于播放粒子纹理带的纹理帧动画。\r\n */\r\n@ccclass('cc.TextureAnimationModule')\r\nexport default class TextureAnimationModule extends ParticleModuleBase {\r\n    constructor () {\r\n        super();\r\n    }\r\n    @serializable\r\n    private _enable = false;\r\n\r\n    @formerlySerializedAs('numTilesX')\r\n    private _numTilesX = 0;\r\n\r\n    @formerlySerializedAs('numTilesY')\r\n    private _numTilesY = 0;\r\n\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.updateMaterialParams();\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    @type(Mode)\r\n    private _mode = Mode.Grid;\r\n\r\n    /**\r\n     * @en Set texture animation [[Mode]] (only support Grid mode).\r\n     * @zh 设定粒子贴图动画的类型（暂只支持 Grid 模式）[[Mode]]。\r\n     */\r\n    @type(Mode)\r\n    @displayOrder(1)\r\n    @tooltip('i18n:textureAnimationModule.mode')\r\n    get mode (): number {\r\n        return this._mode;\r\n    }\r\n\r\n    set mode (val) {\r\n        if (val !== Mode.Grid) {\r\n            error('particle texture animation\\'s sprites is not supported!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Tile count on X axis.\r\n     * @zh X 方向动画帧数。\r\n     */\r\n    @displayOrder(2)\r\n    @tooltip('i18n:textureAnimationModule.numTilesX')\r\n    get numTilesX (): number {\r\n        return this._numTilesX;\r\n    }\r\n\r\n    set numTilesX (val) {\r\n        if (this._numTilesX !== val) {\r\n            this._numTilesX = val;\r\n            this.target!.updateMaterialParams();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Tile count on Y axis.\r\n     * @zh Y 方向动画帧数。\r\n     */\r\n    @displayOrder(3)\r\n    @tooltip('i18n:textureAnimationModule.numTilesY')\r\n    get numTilesY (): number {\r\n        return this._numTilesY;\r\n    }\r\n\r\n    set numTilesY (val) {\r\n        if (this._numTilesY !== val) {\r\n            this._numTilesY = val;\r\n            this.target!.updateMaterialParams();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Texture animation type. See [[Animation]].\r\n     * @zh 动画播放方式 [[Animation]]。\r\n     */\r\n    @type(Animation)\r\n    @serializable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:textureAnimationModule.animation')\r\n    public animation = Animation.WholeSheet;\r\n\r\n    /**\r\n     * @en Curve to control texture animation speed.\r\n     * @zh 一个周期内动画播放的帧与时间变化曲线。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(7)\r\n    @tooltip('i18n:textureAnimationModule.frameOverTime')\r\n    public frameOverTime = new CurveRange();\r\n\r\n    /**\r\n     * @en Texture animation frame start to play.\r\n     * @zh 从第几帧开始播放，时间为整个粒子系统的生命周期。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(8)\r\n    @tooltip('i18n:textureAnimationModule.startFrame')\r\n    public startFrame = new CurveRange();\r\n\r\n    /**\r\n     * @en Animation cycle count per particle life.\r\n     * @zh 一个生命周期内播放循环的次数。\r\n     */\r\n    @serializable\r\n    @displayOrder(9)\r\n    @tooltip('i18n:textureAnimationModule.cycleCount')\r\n    public cycleCount = 0;\r\n\r\n    @serializable\r\n    private _flipU = 0;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    get flipU (): number {\r\n        return this._flipU;\r\n    }\r\n\r\n    set flipU (val) {\r\n        error('particle texture animation\\'s flipU is not supported!');\r\n    }\r\n\r\n    @serializable\r\n    private _flipV = 0;\r\n\r\n    get flipV (): number {\r\n        return this._flipV;\r\n    }\r\n\r\n    set flipV (val) {\r\n        error('particle texture animation\\'s flipV is not supported!');\r\n    }\r\n\r\n    @serializable\r\n    private _uvChannelMask = -1;\r\n\r\n    get uvChannelMask (): number {\r\n        return this._uvChannelMask;\r\n    }\r\n\r\n    set uvChannelMask (val) {\r\n        error('particle texture animation\\'s uvChannelMask is not supported!');\r\n    }\r\n\r\n    /**\r\n     * @en Get random row from texture to generate animation.<br>\r\n     * This option is available when [[Animation]] type is SingleRow.\r\n     * @zh 随机从动画贴图中选择一行以生成动画。<br>\r\n     * 此选项仅在动画播放方式为 SingleRow 时生效。\r\n     */\r\n    @serializable\r\n    @displayOrder(5)\r\n    @tooltip('i18n:textureAnimationModule.randomRow')\r\n    public randomRow = false;\r\n\r\n    /**\r\n     * @en Generate animation from specific row in texture.<br>\r\n     * This option is available when [[Animation]] type is SingleRow and randomRow option is disabled.\r\n     * @zh 从动画贴图中选择特定行以生成动画。<br>\r\n     * 此选项仅在动画播放方式为 SingleRow 时且禁用 randomRow 时可用。\r\n     */\r\n    @serializable\r\n    @displayOrder(6)\r\n    @tooltip('i18n:textureAnimationModule.rowIndex')\r\n    public rowIndex = 0;\r\n\r\n    public name = PARTICLE_MODULE_NAME.TEXTURE;\r\n\r\n    /**\r\n     * @en Init start row to particle.\r\n     * @zh 给粒子创建初始行属性。\r\n     * @param p @en Particle to set start row. @zh 设置初始行属性的粒子。\r\n     * @internal\r\n     */\r\n    public init (p: Particle): void {\r\n        p.startRow = Math.floor(random() * this.numTilesY);\r\n    }\r\n\r\n    /**\r\n     * @en Apply texture animation to particle.\r\n     * @zh 应用贴图动画到粒子。\r\n     * @param p @en Particle to animate. @zh 模块需要更新的粒子。\r\n     * @param dt @en Update interval time. @zh 粒子系统更新的间隔时间。\r\n     * @internal\r\n     */\r\n    public animate (p: Particle, dt: number): void {\r\n        const normalizedTime = 1 - p.remainingLifetime / p.startLifetime;\r\n        const randStart = isCurveTwoValues(this.startFrame) ? pseudoRandom(p.randomSeed + TEXTURE_ANIMATION_RAND_OFFSET) : 0;\r\n        const randFrame = isCurveTwoValues(this.frameOverTime) ? pseudoRandom(p.randomSeed + TEXTURE_ANIMATION_RAND_OFFSET) : 0;\r\n        const startFrame = this.startFrame.evaluate(normalizedTime, randStart)! / (this.numTilesX * this.numTilesY);\r\n        if (this.animation === Animation.WholeSheet) {\r\n            p.frameIndex = repeat(this.cycleCount * (this.frameOverTime.evaluate(normalizedTime, randFrame)! + startFrame), 1);\r\n        } else if (this.animation === Animation.SingleRow) {\r\n            const rowLength = 1 / this.numTilesY;\r\n            if (this.randomRow) {\r\n                const f = repeat(this.cycleCount * (this.frameOverTime.evaluate(normalizedTime, randFrame)! + startFrame), 1);\r\n                const from = p.startRow * rowLength;\r\n                const to = from + rowLength;\r\n                p.frameIndex = lerp(from, to, f);\r\n            } else {\r\n                const from = this.rowIndex * rowLength;\r\n                const to = from + rowLength;\r\n                p.frameIndex = lerp(from, to, repeat(this.cycleCount * (this.frameOverTime.evaluate(normalizedTime, randFrame)! + startFrame), 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public scaleNumTilesXY (scale: number): void {\r\n        this._numTilesX *= scale;\r\n        this._numTilesY *= scale;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, range, type, serializable } from 'cc.decorator';\r\nimport { Mat4, pseudoRandom, Quat, Vec3 } from '../../core';\r\nimport { ParticleSpace, ParticleModuleRandSeed } from '../enum';\r\nimport { Particle, ParticleModuleBase, PARTICLE_MODULE_NAME } from '../particle';\r\nimport { calculateTransform, isCurveTwoValues } from '../particle-general-function';\r\nimport CurveRange from './curve-range';\r\n\r\nconst VELOCITY_X_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.VELOCITY_X;\r\nconst VELOCITY_Y_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.VELOCITY_Y;\r\nconst VELOCITY_Z_OVERTIME_RAND_OFFSET = ParticleModuleRandSeed.VELOCITY_Z;\r\n\r\nconst _temp_v3 = new Vec3();\r\n\r\n/**\r\n * @en\r\n * This module will modify particle velocity over life time.\r\n * Open the separateAxes option you can change the velocity on XYZ axis.\r\n * Velocity on every axis is curve so you can modify these curves to see how it animate.\r\n * @zh\r\n * 本模块用于在粒子生命周期内改变粒子的速度。\r\n * 打开 separateAxes 就能够修改粒子在三个轴方向的速度大小。\r\n * 每个轴上的速度大小都是可以用曲线来进行编辑，修改曲线就能够看到粒子速度变化的效果了。\r\n */\r\n@ccclass('cc.VelocityOvertimeModule')\r\nexport default class VelocityOvertimeModule extends ParticleModuleBase {\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    /**\r\n     * @en Velocity on X axis.\r\n     * @zh X 轴方向上的速度分量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:velocityOvertimeModule.x')\r\n    public x = new CurveRange();\r\n\r\n    /**\r\n     * @en Velocity on Y axis.\r\n     * @zh Y 轴方向上的速度分量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(3)\r\n    @tooltip('i18n:velocityOvertimeModule.y')\r\n    public y = new CurveRange();\r\n\r\n    /**\r\n     * @en Velocity on Z axis.\r\n     * @zh Z 轴方向上的速度分量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:velocityOvertimeModule.z')\r\n    public z = new CurveRange();\r\n\r\n    /**\r\n     * @en Speed modifier (available for CPU particle).\r\n     * @zh 速度修正系数（只支持 CPU 粒子）。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(5)\r\n    @tooltip('i18n:velocityOvertimeModule.speedModifier')\r\n    public speedModifier = new CurveRange();\r\n\r\n    /**\r\n     * @en Velocity [[Space]] used to calculate particle velocity.\r\n     * @zh 速度计算时采用的坐标系[[Space]]。\r\n     */\r\n    @type(ParticleSpace)\r\n    @serializable\r\n    @displayOrder(1)\r\n    @tooltip('i18n:velocityOvertimeModule.space')\r\n    public space = ParticleSpace.Local;\r\n\r\n    private rotation: Quat;\r\n    private needTransform: boolean;\r\n    public name = PARTICLE_MODULE_NAME.VELOCITY;\r\n\r\n    constructor () {\r\n        super();\r\n        this.rotation = new Quat();\r\n        this.speedModifier.constant = 1;\r\n        this.needTransform = false;\r\n        this.needUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * @en Update velocity overtime module calculate transform.\r\n     * @zh 更新模块，计算坐标变换。\r\n     * @param space @en Velocity overtime module update space @zh 模块更新空间\r\n     * @param worldTransform @en Particle system world transform @zh 粒子系统的世界变换矩阵\r\n     * @internal\r\n     */\r\n    public update (space: number, worldTransform: Mat4): void {\r\n        this.needTransform = calculateTransform(space, this.space, worldTransform, this.rotation);\r\n    }\r\n\r\n    /**\r\n     * @en Apply velocity animation to particle.\r\n     * @zh 作用速度变换到粒子上。\r\n     * @param p @en Particle to animate @zh 模块需要更新的粒子\r\n     * @param dt @en Update interval time @zh 粒子系统更新的间隔时间\r\n     * @internal\r\n     */\r\n    public animate (p: Particle, dt: number): void {\r\n        const normalizedTime = 1 - p.remainingLifetime / p.startLifetime;\r\n        const randX = isCurveTwoValues(this.x) ? pseudoRandom(p.randomSeed ^ VELOCITY_X_OVERTIME_RAND_OFFSET) : 0;\r\n        const randY = isCurveTwoValues(this.y) ? pseudoRandom(p.randomSeed ^ VELOCITY_Y_OVERTIME_RAND_OFFSET) : 0;\r\n        const randZ = isCurveTwoValues(this.z) ? pseudoRandom(p.randomSeed ^ VELOCITY_Z_OVERTIME_RAND_OFFSET) : 0;\r\n        const randSpeed = isCurveTwoValues(this.speedModifier) ? pseudoRandom(p.randomSeed + VELOCITY_X_OVERTIME_RAND_OFFSET) : 0;\r\n\r\n        const vel = Vec3.set(\r\n            _temp_v3,\r\n            this.x.evaluate(normalizedTime, randX)!,\r\n            this.y.evaluate(normalizedTime, randY)!,\r\n            this.z.evaluate(normalizedTime, randZ)!,\r\n        );\r\n        if (this.needTransform) {\r\n            Vec3.transformQuat(vel, vel, this.rotation);\r\n        }\r\n        Vec3.add(p.animatedVelocity, p.animatedVelocity, vel);\r\n        Vec3.add(p.ultimateVelocity, p.velocity, p.animatedVelocity);\r\n        Vec3.multiplyScalar(\r\n            p.ultimateVelocity,\r\n            p.ultimateVelocity,\r\n            this.speedModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, randSpeed)!,\r\n        );\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, type, serializable, editable, range } from 'cc.decorator';\r\nimport { repeat } from '../core/math';\r\nimport CurveRange from './animator/curve-range';\r\nimport type { ParticleSystem } from './particle-system';\r\n\r\n/**\r\n * @en\r\n * A burst is a particle emission event, where a number of particles are all emitted at the same time\r\n * @zh\r\n * Burst 是粒子的一种发射事件，触发时很多粒子将会同时喷出\r\n */\r\n@ccclass('cc.Burst')\r\nexport default class Burst {\r\n    @serializable\r\n    private _time = 0;\r\n\r\n    /**\r\n     *  @en The time from particle system start until this burst triggered.\r\n     *  @zh 粒子系统开始运行到触发此次 Brust 的时间。\r\n     */\r\n    @editable\r\n    get time (): number {\r\n        return this._time;\r\n    }\r\n\r\n    set time (val) {\r\n        this._time = val;\r\n        this._curTime = val;\r\n    }\r\n\r\n    @serializable\r\n    private _repeatCount = 1;\r\n\r\n    /**\r\n     * @en Burst trigger count.\r\n     * @zh Burst 的触发次数。\r\n     */\r\n    @editable\r\n    get repeatCount (): number {\r\n        return this._repeatCount;\r\n    }\r\n\r\n    set repeatCount (val) {\r\n        this._repeatCount = val;\r\n        this._remainingCount = val;\r\n    }\r\n\r\n    /**\r\n     * @en Trigger interval count.\r\n     * @zh 每次触发的间隔时间。\r\n     */\r\n    @serializable\r\n    @editable\r\n    public repeatInterval = 1;\r\n\r\n    /**\r\n     * @en Burst particle count.\r\n     * @zh 发射的粒子的数量。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY, 1])\r\n    public count: CurveRange = new CurveRange();\r\n\r\n    private _remainingCount = 0;\r\n    private _curTime = 0.0;\r\n\r\n    constructor () {\r\n    }\r\n\r\n    /**\r\n     * @en Update burst trigger\r\n     * @zh 更新触发事件\r\n     * @param psys @en Particle system to burst. @zh 要触发的粒子系统。\r\n     * @param dt @en Update interval time. @zh 粒子系统更新的间隔时间。\r\n     * @internal\r\n     */\r\n    public update (psys: ParticleSystem, dt: number): void {\r\n        if (this._remainingCount === 0) {\r\n            this._remainingCount = this._repeatCount;\r\n            this._curTime = this._time;\r\n        }\r\n        if (this._remainingCount > 0) {\r\n            let preFrameTime = repeat(psys.time - psys.startDelay.evaluate(0, 1), psys.duration) - dt;\r\n            preFrameTime = (preFrameTime > 0.0) ? preFrameTime : 0.0;\r\n            const curFrameTime = repeat(psys.time - psys.startDelay.evaluate(0, 1), psys.duration);\r\n            if (this._curTime >= preFrameTime && this._curTime < curFrameTime) {\r\n                psys.emit(this.count.evaluate(this._curTime / psys.duration, 1), dt - (curFrameTime - this._curTime));\r\n                this._curTime += this.repeatInterval;\r\n                --this._remainingCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Reset remaining burst count and burst time to zero.\r\n     * @zh 重置触发时间和留存的触发次数为零。\r\n     */\r\n    public reset (): void {\r\n        this._remainingCount = 0;\r\n        this._curTime = 0.0;\r\n    }\r\n\r\n    /**\r\n     * @en Get the max particle count this burst trigger.\r\n     * @zh 获取最大的触发粒子数量。\r\n     * @param psys @en Particle system to burst. @zh 要触发的粒子系统。\r\n     * @returns @en burst max particle count. @zh 一次最多触发的粒子个数。\r\n     */\r\n    public getMaxCount (psys: ParticleSystem): number {\r\n        return this.count.getMax() * Math.min(Math.ceil(psys.duration / this.repeatInterval), this.repeatCount);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, type, formerlySerializedAs, serializable, visible, range } from 'cc.decorator';\r\nimport { Mat4, Quat, Vec2, Vec3, clamp, pingPong, random, randomRange, repeat, toDegree, toRadian, warn } from '../../core';\r\n\r\nimport CurveRange from '../animator/curve-range';\r\nimport { ParticleArcMode, ParticleEmitLocation, ParticleShapeType } from '../enum';\r\nimport { fixedAngleUnitVector2, particleEmitZAxis, randomPointBetweenCircleAtFixedAngle, randomPointBetweenSphere,\r\n    randomPointInCube, randomSign, randomSortArray, randomUnitVector } from '../particle-general-function';\r\nimport { ParticleSystem } from '../particle-system';\r\nimport type { Particle } from '../particle';\r\n\r\nconst _intermediVec = new Vec3(0, 0, 0);\r\nconst _intermediArr: [number, number, number] = [0, 0, 0];\r\nconst _unitBoxExtent = new Vec3(0.5, 0.5, 0.5);\r\nfunction getShapeTypeEnumName (enumValue: number): keyof typeof ParticleShapeType {\r\n    let enumName = '';\r\n    for (const key in ParticleShapeType) {\r\n        const value = ParticleShapeType[key];\r\n        if (typeof value === 'number' && value === enumValue) {\r\n            enumName = key;\r\n            break;\r\n        }\r\n    }\r\n    return enumName as keyof typeof ParticleShapeType;\r\n}\r\n\r\n/**\r\n * @en\r\n * This module defines the the volume or surface from which particles can be emitted, and the direction of the start velocity.\r\n * The Shape property defines the shape of the emission volume, and the rest of the module properties vary depending on the Shape you choose.\r\n * All shapes have properties that define their dimensions, such as the Radius property.\r\n * To edit these, drag the handles on the wireframe emitter shape in the Scene view.\r\n * The choice of shape affects the region from which particles can be emitted, but also the initial direction of the particles.\r\n * @zh\r\n * 本模块定义一个发射体或发射面，粒子将会从它进行发射，并且定义了粒子发射的初始方向和初始速度。\r\n * 形状属性定义粒子系统的发射体，剩下的属性依赖于选择的形状。\r\n * 所有形状都具有定义其大小的属性，例如 Radius 属性。要编辑这些属性，请在视图中拖动线框发射器形状上的控制柄。\r\n * 形状的选择会影响可发射粒子的区域，但也会影响粒子的初始方向。\r\n */\r\n@ccclass('cc.ShapeModule')\r\nexport default class ShapeModule {\r\n    /**\r\n     * @en Emitter position.\r\n     * @zh 粒子发射器位置。\r\n     */\r\n    @displayOrder(13)\r\n    @tooltip('i18n:shapeModule.position')\r\n    get position (): Vec3 {\r\n        return this._position;\r\n    }\r\n    set position (val) {\r\n        this._position = val;\r\n        this.constructMat();\r\n    }\r\n\r\n    /**\r\n     * @en Emitter rotation.\r\n     * @zh 粒子发射器旋转角度。\r\n     */\r\n    @displayOrder(14)\r\n    @tooltip('i18n:shapeModule.rotation')\r\n    get rotation (): Vec3 {\r\n        return this._rotation;\r\n    }\r\n    set rotation (val) {\r\n        this._rotation = val;\r\n        this.constructMat();\r\n    }\r\n\r\n    /**\r\n     * @en Emitter size scale.\r\n     * @zh 粒子发射器缩放比例。\r\n     */\r\n    @displayOrder(15)\r\n    @tooltip('i18n:shapeModule.scale')\r\n    get scale (): Vec3 {\r\n        return this._scale;\r\n    }\r\n    set scale (val) {\r\n        this._scale = val;\r\n        this.constructMat();\r\n    }\r\n\r\n    /**\r\n     * @en Particles will be emitted in an arc if shape is Cone or Circle.\r\n     * @zh 粒子发射器在一个扇形范围内发射。\r\n     */\r\n    @displayOrder(6)\r\n    @tooltip('i18n:shapeModule.arc')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Cone', 'Circle'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    get arc (): number {\r\n        return toDegree(this._arc);\r\n    }\r\n\r\n    set arc (val) {\r\n        this._arc = toRadian(val);\r\n    }\r\n\r\n    /**\r\n     * @en The angle of the Cone.<bg>\r\n     * Define how the cone opening and closing.\r\n     * @zh 圆锥的轴与母线的夹角<bg>。\r\n     * 决定圆锥发射器的开合程度。\r\n     */\r\n    @displayOrder(5)\r\n    @tooltip('i18n:shapeModule.angle')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Cone'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    get angle (): number {\r\n        return Math.round(toDegree(this._angle) * 100) / 100;\r\n    }\r\n\r\n    set angle (val) {\r\n        this._angle = toRadian(val);\r\n    }\r\n\r\n    @serializable\r\n    private _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        this._enable = val;\r\n    }\r\n\r\n    /**\r\n     * @en Emitter [[ShapeType]].\r\n     * @zh 粒子发射器类型 [[ShapeType]]。\r\n     *\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @type(ParticleShapeType)\r\n    @formerlySerializedAs('shapeType')\r\n    @displayOrder(1)\r\n    public _shapeType = ParticleShapeType.Cone;\r\n\r\n    @type(ParticleShapeType)\r\n    @tooltip('i18n:shapeModule.shapeType')\r\n    public get shapeType (): number {\r\n        return this._shapeType;\r\n    }\r\n\r\n    public set shapeType (val) {\r\n        this._shapeType = val;\r\n        switch (this._shapeType) {\r\n        case ParticleShapeType.Box:\r\n            if (this.emitFrom === ParticleEmitLocation.Base) {\r\n                this.emitFrom = ParticleEmitLocation.Volume;\r\n            }\r\n            break;\r\n        case ParticleShapeType.Cone:\r\n            if (this.emitFrom === ParticleEmitLocation.Edge) {\r\n                this.emitFrom = ParticleEmitLocation.Base;\r\n            }\r\n            break;\r\n        case ParticleShapeType.Sphere:\r\n        case ParticleShapeType.Hemisphere:\r\n            if (this.emitFrom === ParticleEmitLocation.Base || this.emitFrom === ParticleEmitLocation.Edge) {\r\n                this.emitFrom = ParticleEmitLocation.Volume;\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Particles emitted from which part of the shape [[EmitLocation]] (Box Cone Sphere Hemisphere).\r\n     * @zh 粒子从发射器哪个部位发射 [[EmitLocation]]。\r\n     */\r\n    @type(ParticleEmitLocation)\r\n    @serializable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:shapeModule.emitFrom')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Box', 'Cone', 'Sphere', 'Hemisphere'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public emitFrom = ParticleEmitLocation.Volume;\r\n\r\n    /**\r\n     * @en Align particle with particle direction.\r\n     * @zh 根据粒子的初始方向决定粒子的移动方向。\r\n     */\r\n    @serializable\r\n    @displayOrder(16)\r\n    @tooltip('i18n:shapeModule.alignToDirection')\r\n    public alignToDirection = false;\r\n\r\n    /**\r\n     * @en Particle direction random amount.\r\n     * @zh 粒子生成方向随机设定。\r\n     */\r\n    @serializable\r\n    @displayOrder(17)\r\n    @tooltip('i18n:shapeModule.randomDirectionAmount')\r\n    public randomDirectionAmount = 0;\r\n\r\n    /**\r\n     * @en Blend particle directions towards a spherical direction, where they travel outwards from the center of their transform.\r\n     * @zh 表示当前发射方向与当前位置到结点中心连线方向的插值。\r\n     */\r\n    @serializable\r\n    @displayOrder(18)\r\n    @tooltip('i18n:shapeModule.sphericalDirectionAmount')\r\n    public sphericalDirectionAmount = 0;\r\n\r\n    /**\r\n     * @en Particle position random amount.\r\n     * @zh 粒子生成位置随机设定（设定此值为非 0 会使粒子生成位置超出生成器大小范围）。\r\n     */\r\n    @serializable\r\n    @displayOrder(19)\r\n    @tooltip('i18n:shapeModule.randomPositionAmount')\r\n    public randomPositionAmount = 0;\r\n\r\n    /**\r\n     * @en Emition radius (available for Circle Cone Sphere Hemisphere).\r\n     * @zh 粒子发射器半径。\r\n     */\r\n    @serializable\r\n    @displayOrder(3)\r\n    @tooltip('i18n:shapeModule.radius')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Circle', 'Cone', 'Sphere', 'Hemisphere'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public radius = 1;\r\n\r\n    /**\r\n     * @en Emit position in shape (available for Circle Cone Sphere Hemisphere): <bg>\r\n     * - 0 Emit from surface;\r\n     * - 1 Emit from volume center;\r\n     * - 0 to 1 Emit within surface and volume center.\r\n     * @zh 粒子发射器发射位置（对 Box 类型的发射器无效）：<bg>\r\n     * - 0 表示从表面发射；\r\n     * - 1 表示从中心发射；\r\n     * - 0 ~ 1 之间表示在中心到表面之间发射。\r\n     */\r\n    @serializable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:shapeModule.radiusThickness')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Circle', 'Cone', 'Sphere', 'Hemisphere'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public radiusThickness = 1;\r\n\r\n    /**\r\n     * @en Arc mode for Cone and Circle shape.\r\n     * @zh 粒子在扇形范围内的发射方式 [[ArcMode]]。\r\n     */\r\n    @type(ParticleArcMode)\r\n    @serializable\r\n    @displayOrder(7)\r\n    @tooltip('i18n:shapeModule.arcMode')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Cone', 'Circle'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public arcMode = ParticleArcMode.Random;\r\n\r\n    /**\r\n     * @en Control arc spread for Cone and circle shape.\r\n     * @zh 控制可能产生粒子的弧周围的离散间隔。\r\n     */\r\n    @visible(function noArc (this: ShapeModule) { return this.arcMode !== ParticleArcMode.Random; }) // Bug fix: Hide this input when arcMode is random\r\n    @serializable\r\n    @displayOrder(9)\r\n    @tooltip('i18n:shapeModule.arcSpread')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Cone', 'Circle'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public arcSpread = 0;\r\n\r\n    /**\r\n     * @en Emit speed around arc (available for Cone and Circle).\r\n     * @zh 粒子沿圆周发射的速度。\r\n     */\r\n    @type(CurveRange)\r\n    @visible(function noArc (this: ShapeModule) { return this.arcMode !== ParticleArcMode.Random; }) // Bug fix: Hide this input when arcMode is random\r\n    @range([0, 1])\r\n    @serializable\r\n    @displayOrder(10)\r\n    @tooltip('i18n:shapeModule.arcSpeed')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Cone', 'Circle'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public arcSpeed = new CurveRange();\r\n\r\n    /**\r\n     * @en The length from Cone bottom to top.\r\n     * @zh 圆锥顶部截面距离底部的轴长<bg>。\r\n     * 决定圆锥发射器的高度。\r\n     */\r\n    @serializable\r\n    @displayOrder(11)\r\n    @tooltip('i18n:shapeModule.length')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Cone'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public length = 5;\r\n\r\n    /**\r\n     * @en Shape thickness for box shape.\r\n     * @zh 粒子发射器发射位置（针对 Box 类型的粒子发射器）。\r\n     */\r\n    @serializable\r\n    @displayOrder(12)\r\n    @tooltip('i18n:shapeModule.boxThickness')\r\n    @visible(function (this: ShapeModule) {\r\n        const subset: Array<keyof typeof ParticleShapeType> = ['Box'];\r\n        const enumName = getShapeTypeEnumName(this.shapeType);\r\n        return subset.includes(enumName);\r\n    })\r\n    public boxThickness = new Vec3(0, 0, 0);\r\n\r\n    @serializable\r\n    private _position = new Vec3(0, 0, 0);\r\n\r\n    @serializable\r\n    private _rotation = new Vec3(0, 0, 0);\r\n\r\n    @serializable\r\n    private _scale = new Vec3(1, 1, 1);\r\n\r\n    @serializable\r\n    private _arc = toRadian(360);\r\n\r\n    @serializable\r\n    private _angle = toRadian(25);\r\n\r\n    private mat = new Mat4();\r\n    private quat: Quat = new Quat();\r\n    private particleSystem: ParticleSystem | null = null;\r\n    private lastTime = 0;\r\n    private totalAngle = 0;\r\n\r\n    constructor () {}\r\n\r\n    /**\r\n     * @en Apply particle system to this shape and create shape transform matrix.\r\n     * @zh 把发射形状应用到粒子系统，并且创建发射形状变换矩阵。\r\n     * @param ps @en Emit shape applied to which Particle system. @zh 使用发射形状的粒子系统。\r\n     * @internal\r\n     */\r\n    public onInit (ps: ParticleSystem): void {\r\n        this.particleSystem = ps;\r\n        this.constructMat();\r\n        this.lastTime = this.particleSystem.time;\r\n    }\r\n\r\n    /**\r\n     * @en Emit particle by this shape.\r\n     * @zh 通过这个形状发射粒子。\r\n     * @param p @en Particle emitted. @zh 发射出来的粒子。\r\n     * @internal\r\n     */\r\n    public emit (p: Particle): void {\r\n        switch (this.shapeType) {\r\n        case ParticleShapeType.Box:\r\n            boxEmit(this.emitFrom, this.boxThickness, p.position, p.velocity);\r\n            break;\r\n        case ParticleShapeType.Circle:\r\n            circleEmit(this.radius, this.radiusThickness, this.generateArcAngle(), p.position, p.velocity);\r\n            break;\r\n        case ParticleShapeType.Cone:\r\n            coneEmit(this.emitFrom, this.radius, this.radiusThickness, this.generateArcAngle(), this._angle, this.length, p.position, p.velocity);\r\n            break;\r\n        case ParticleShapeType.Sphere:\r\n            sphereEmit(this.emitFrom, this.radius, this.radiusThickness, p.position, p.velocity);\r\n            break;\r\n        case ParticleShapeType.Hemisphere:\r\n            hemisphereEmit(this.emitFrom, this.radius, this.radiusThickness, p.position, p.velocity);\r\n            break;\r\n        default:\r\n            warn(`${this.shapeType} shapeType is not supported by ShapeModule.`);\r\n        }\r\n        if (this.randomPositionAmount > 0) {\r\n            p.position.x += randomRange(-this.randomPositionAmount, this.randomPositionAmount);\r\n            p.position.y += randomRange(-this.randomPositionAmount, this.randomPositionAmount);\r\n            p.position.z += randomRange(-this.randomPositionAmount, this.randomPositionAmount);\r\n        }\r\n        Vec3.transformQuat(p.velocity, p.velocity, this.quat);\r\n        Vec3.transformMat4(p.position, p.position, this.mat);\r\n        if (this.sphericalDirectionAmount > 0) {\r\n            const sphericalVel = Vec3.normalize(_intermediVec, p.position);\r\n            Vec3.lerp(p.velocity, p.velocity, sphericalVel, this.sphericalDirectionAmount);\r\n        }\r\n        this.lastTime = this.particleSystem!.time;\r\n    }\r\n\r\n    private constructMat (): void {\r\n        Quat.fromEuler(this.quat, this._rotation.x, this._rotation.y, this._rotation.z);\r\n        Mat4.fromRTS(this.mat, this.quat, this._position, this._scale);\r\n    }\r\n\r\n    private generateArcAngle (): number {\r\n        if (this.arcMode === ParticleArcMode.Random) {\r\n            return randomRange(0, this._arc);\r\n        }\r\n        let angle = this.totalAngle + 2 * Math.PI * this.arcSpeed.evaluate(this.particleSystem!.time, 1)! * (this.particleSystem!.time - this.lastTime);\r\n        this.totalAngle = angle;\r\n        if (this.arcSpread !== 0) {\r\n            angle = Math.floor(angle / (this._arc * this.arcSpread)) * this._arc * this.arcSpread;\r\n        }\r\n        switch (this.arcMode) {\r\n        case ParticleArcMode.Loop:\r\n            return repeat(angle, this._arc);\r\n        case ParticleArcMode.PingPong:\r\n            return pingPong(angle, this._arc);\r\n        default:\r\n            return repeat(angle, this._arc);\r\n        }\r\n    }\r\n}\r\n\r\nfunction sphereEmit (emitFrom: number, radius: number, radiusThickness: number, pos: Vec3, dir: Vec3): void {\r\n    switch (emitFrom) {\r\n    case ParticleEmitLocation.Volume:\r\n        randomPointBetweenSphere(pos, radius * (1 - radiusThickness), radius);\r\n        Vec3.normalize(dir, pos);\r\n        break;\r\n    case ParticleEmitLocation.Shell:\r\n        randomUnitVector(pos);\r\n        Vec3.multiplyScalar(pos, pos, radius);\r\n        Vec3.normalize(dir, pos);\r\n        break;\r\n    default:\r\n        warn(`${emitFrom} is not supported for sphere emitter.`);\r\n    }\r\n}\r\n\r\nfunction hemisphereEmit (emitFrom: number, radius: number, radiusThickness: number, pos: Vec3, dir: Vec3): void {\r\n    switch (emitFrom) {\r\n    case ParticleEmitLocation.Volume:\r\n        randomPointBetweenSphere(pos, radius * (1 - radiusThickness), radius);\r\n        if (pos.z > 0) {\r\n            pos.z *= -1;\r\n        }\r\n        Vec3.normalize(dir, pos);\r\n        break;\r\n    case ParticleEmitLocation.Shell:\r\n        randomUnitVector(pos);\r\n        Vec3.multiplyScalar(pos, pos, radius);\r\n        if (pos.z > 0) {\r\n            pos.z *= -1;\r\n        }\r\n        Vec3.normalize(dir, pos);\r\n        break;\r\n    default:\r\n        warn(`${emitFrom} is not supported for hemisphere emitter.`);\r\n    }\r\n}\r\n\r\nfunction coneEmit (\r\n    emitFrom: number,\r\n    radius: number,\r\n    radiusThickness: number,\r\n    theta: number,\r\n    angle: number,\r\n    length: number,\r\n    pos: Vec3,\r\n    dir: Vec3,\r\n): void {\r\n    switch (emitFrom) {\r\n    case ParticleEmitLocation.Base:\r\n        randomPointBetweenCircleAtFixedAngle(pos, radius * (1 - radiusThickness), radius, theta);\r\n        Vec2.multiplyScalar(dir, pos, Math.sin(angle));\r\n        dir.z = -Math.cos(angle) * radius;\r\n        Vec3.normalize(dir, dir);\r\n        pos.z = 0;\r\n        break;\r\n    case ParticleEmitLocation.Shell:\r\n        fixedAngleUnitVector2(pos, theta);\r\n        Vec2.multiplyScalar(dir, pos, Math.sin(angle));\r\n        dir.z = -Math.cos(angle);\r\n        Vec3.normalize(dir, dir);\r\n        Vec2.multiplyScalar(pos, pos, radius);\r\n        pos.z = 0;\r\n        break;\r\n    case ParticleEmitLocation.Volume:\r\n        randomPointBetweenCircleAtFixedAngle(pos, radius * (1 - radiusThickness), radius, theta);\r\n        Vec2.multiplyScalar(dir, pos, Math.sin(angle));\r\n        dir.z = -Math.cos(angle) * radius;\r\n        Vec3.normalize(dir, dir);\r\n        pos.z = 0;\r\n        Vec3.add(pos, pos, Vec3.multiplyScalar(_intermediVec, dir, length * random() / -dir.z));\r\n        break;\r\n    default:\r\n        warn(`${emitFrom} is not supported for cone emitter.`);\r\n    }\r\n}\r\n\r\nfunction boxEmit (emitFrom: number, boxThickness: Vec3, pos: Vec3, dir: Vec3): void {\r\n    switch (emitFrom) {\r\n    case ParticleEmitLocation.Volume:\r\n        randomPointInCube(pos, _unitBoxExtent);\r\n        // randomPointBetweenCube(pos, vec3.multiply(_intermediVec, _unitBoxExtent, boxThickness), _unitBoxExtent);\r\n        break;\r\n    case ParticleEmitLocation.Shell:\r\n        _intermediArr[0] = randomRange(-0.5, 0.5);\r\n        _intermediArr[1] = randomRange(-0.5, 0.5);\r\n        _intermediArr[2] = randomSign() * 0.5;\r\n        randomSortArray(_intermediArr);\r\n        applyBoxThickness(_intermediArr, boxThickness);\r\n        Vec3.set(pos, _intermediArr[0], _intermediArr[1], _intermediArr[2]);\r\n        break;\r\n    case ParticleEmitLocation.Edge:\r\n        _intermediArr[0] = randomRange(-0.5, 0.5);\r\n        _intermediArr[1] = randomSign() * 0.5;\r\n        _intermediArr[2] = randomSign() * 0.5;\r\n        randomSortArray(_intermediArr);\r\n        applyBoxThickness(_intermediArr, boxThickness);\r\n        Vec3.set(pos, _intermediArr[0], _intermediArr[1], _intermediArr[2]);\r\n        break;\r\n    default:\r\n        warn(`${emitFrom} is not supported for box emitter.`);\r\n    }\r\n    Vec3.copy(dir, particleEmitZAxis);\r\n}\r\n\r\nfunction circleEmit (radius: number, radiusThickness: number, theta: number, pos: Vec3, dir: Vec3): void {\r\n    randomPointBetweenCircleAtFixedAngle(pos, radius * (1 - radiusThickness), radius, theta);\r\n    Vec3.normalize(dir, pos);\r\n}\r\n\r\nfunction applyBoxThickness (pos: [number, number, number], thickness: Vec3): void {\r\n    if (thickness.x > 0) {\r\n        pos[0] += 0.5 * randomRange(-thickness.x, thickness.x);\r\n        pos[0] = clamp(pos[0], -0.5, 0.5);\r\n    }\r\n    if (thickness.y > 0) {\r\n        pos[1] += 0.5 * randomRange(-thickness.y, thickness.y);\r\n        pos[1] = clamp(pos[1], -0.5, 0.5);\r\n    }\r\n    if (thickness.z > 0) {\r\n        pos[2] += 0.5 * randomRange(-thickness.z, thickness.z);\r\n        pos[2] = clamp(pos[2], -0.5, 0.5);\r\n    }\r\n}\r\n","/* eslint-disable max-len */\r\n/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { Mesh } from '../../3d/assets/mesh';\r\nimport { AttributeName, BufferUsageBit, FormatInfos, MemoryUsageBit, PrimitiveMode,\r\n    Attribute, Buffer, BufferInfo, Feature, deviceManager } from '../../gfx';\r\nimport { Color } from '../../core';\r\nimport { scene } from '../../render-scene';\r\nimport { Particle } from '../particle';\r\nimport { Material, RenderingSubMesh } from '../../asset/assets';\r\nimport type { PVData } from '../renderer/particle-system-renderer-cpu';\r\n\r\nconst _uvs = [\r\n    0, 0, // bottom-left\r\n    1, 0, // bottom-right\r\n    0, 1, // top-left\r\n    1, 1, // top-right\r\n];\r\n\r\nconst _uvs_ins = [\r\n    0, 0, 0, // bottom-left\r\n    1, 0, 0, // bottom-right\r\n    0, 1, 0, // top-left\r\n    1, 1, 0, // top-right\r\n];\r\n\r\nexport default class ParticleBatchModel extends scene.Model {\r\n    private _capacity: number;\r\n    private _bufferSize: number;\r\n    private _vertAttrs: (Attribute & { offset: number })[] | null;\r\n    private _vertAttribSize: number;\r\n    private _vBuffer: ArrayBuffer | null;\r\n    private _vertAttrsFloatCount: number;\r\n    private _vdataF32: Float32Array | null;\r\n    private _vdataUint32: Uint32Array | null;\r\n    private _subMeshData: RenderingSubMesh | null;\r\n    private _mesh: Mesh | null;\r\n    private _vertCount = 0;\r\n    private _indexCount = 0;\r\n    private _startTimeOffset = 0;\r\n    private _lifeTimeOffset = 0;\r\n    private _material: Material | null = null;\r\n\r\n    private _vertAttribSizeStatic: number;\r\n    private _vertStaticAttrsFloatCount: number;\r\n    private _insBuffers: Buffer[];\r\n    private _insIndices: Buffer | null;\r\n    private _useInstance: boolean;\r\n\r\n    private _iaVertCount = 0;\r\n    private _iaIndexCount = 0;\r\n\r\n    constructor () {\r\n        super();\r\n        if (JSB) {\r\n            (this as any)._registerListeners();\r\n        }\r\n\r\n        this.type = scene.ModelType.PARTICLE_BATCH;\r\n        this._capacity = 0;\r\n        this._bufferSize = 16;\r\n        this._vertAttrs = null;\r\n\r\n        this._vertAttribSize = 0;\r\n        this._vBuffer = null;\r\n        this._vertAttrsFloatCount = 0;\r\n        this._vdataF32 = null;\r\n        this._vdataUint32 = null;\r\n\r\n        this._vertAttribSizeStatic = 0;\r\n        this._vertStaticAttrsFloatCount = 0;\r\n        this._insBuffers = [];\r\n        this._insIndices = null;\r\n        if (!deviceManager.gfxDevice.hasFeature(Feature.INSTANCED_ARRAYS)) {\r\n            this._useInstance = false;\r\n        } else {\r\n            this._useInstance = true;\r\n        }\r\n\r\n        this._subMeshData = null;\r\n        this._mesh = null;\r\n    }\r\n\r\n    public setCapacity (capacity: number): void {\r\n        const capChanged = this._capacity !== capacity;\r\n        this._capacity = capacity;\r\n        this._bufferSize = Math.max(this._capacity, 16);\r\n        if (this._subMeshData && capChanged) {\r\n            this.rebuild();\r\n        }\r\n    }\r\n\r\n    public setVertexAttributes (mesh: Mesh | null, attrs: Attribute[]): void {\r\n        if (!this._useInstance) {\r\n            if (this._mesh === mesh && this._vertAttrs === attrs) {\r\n                return;\r\n            }\r\n            this._mesh = mesh;\r\n            this._vertAttrs = attrs as (Attribute & { offset: number })[];\r\n            this._vertAttribSize = 0;\r\n            for (const a of this._vertAttrs) {\r\n                a.offset = this._vertAttribSize;\r\n                this._vertAttribSize += FormatInfos[a.format].size;\r\n            }\r\n            this._vertAttrsFloatCount = this._vertAttribSize / 4; // number of float\r\n            // rebuid\r\n            this.rebuild();\r\n        } else {\r\n            this.setVertexAttributesIns(mesh, attrs);\r\n        }\r\n    }\r\n\r\n    private setVertexAttributesIns (mesh: Mesh | null, attrs: Attribute[]): void {\r\n        if (this._mesh === mesh && this._vertAttrs === attrs) {\r\n            return;\r\n        }\r\n        this._mesh = mesh;\r\n        this._vertAttrs = attrs as (Attribute & { offset: number })[];\r\n        this._vertAttribSize = 0;\r\n        this._vertAttribSizeStatic = 0;\r\n        for (const a of this._vertAttrs) {\r\n            if (a.stream === 0) {\r\n                a.offset = this._vertAttribSize;\r\n                this._vertAttribSize += FormatInfos[a.format].size;\r\n            } else if (a.stream === 1) {\r\n                a.offset = this._vertAttribSizeStatic;\r\n                this._vertAttribSizeStatic += FormatInfos[a.format].size;\r\n            }\r\n        }\r\n        this._vertAttrsFloatCount = this._vertAttribSize / 4; // number of float\r\n        this._vertStaticAttrsFloatCount = this._vertAttribSizeStatic / 4;\r\n        // rebuid\r\n        this.rebuild();\r\n    }\r\n\r\n    private createSubMeshData (): ArrayBuffer {\r\n        this.destroySubMeshData();\r\n        this._vertCount = 4;\r\n        this._indexCount = 6;\r\n        if (this._mesh) {\r\n            this._vertCount = this._mesh.struct.vertexBundles[this._mesh.struct.primitives[0].vertexBundelIndices[0]].view.count;\r\n            this._indexCount = this._mesh.struct.primitives[0].indexView!.count;\r\n        }\r\n\r\n        const vertexBuffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            this._vertAttribSize * this._bufferSize * this._vertCount,\r\n            this._vertAttribSize,\r\n        ));\r\n        const vBuffer: ArrayBuffer = new ArrayBuffer(this._vertAttribSize * this._bufferSize * this._vertCount);\r\n        if (this._mesh && this._capacity > 0) {\r\n            let vOffset = (this._vertAttrs![this._vertAttrs!.findIndex((val): boolean => val.name === AttributeName.ATTR_TEX_COORD as string)]).offset;\r\n            this._mesh.copyAttribute(0, AttributeName.ATTR_TEX_COORD, vBuffer, this._vertAttribSize, vOffset);  // copy mesh uv to ATTR_TEX_COORD\r\n            let vIdx = this._vertAttrs!.findIndex((val): boolean => val.name === AttributeName.ATTR_TEX_COORD3 as string);\r\n            vOffset = (this._vertAttrs![vIdx++]).offset;\r\n            this._mesh.copyAttribute(0, AttributeName.ATTR_POSITION, vBuffer, this._vertAttribSize, vOffset);  // copy mesh position to ATTR_TEX_COORD3\r\n            vOffset = (this._vertAttrs![vIdx++]).offset;\r\n            this._mesh.copyAttribute(0, AttributeName.ATTR_NORMAL, vBuffer, this._vertAttribSize, vOffset);  // copy mesh normal to ATTR_NORMAL\r\n            vOffset = (this._vertAttrs![vIdx++]).offset;\r\n            if (!this._mesh.copyAttribute(0, AttributeName.ATTR_COLOR, vBuffer, this._vertAttribSize, vOffset)) {  // copy mesh color to ATTR_COLOR1\r\n                const vb = new Uint32Array(vBuffer);\r\n                for (let iVertex = 0; iVertex < this._vertCount; ++iVertex) {\r\n                    vb[iVertex * this._vertAttrsFloatCount + vOffset / 4] = Color.toUint32(Color.WHITE);\r\n                }\r\n            }\r\n            const vbFloatArray = new Float32Array(vBuffer);\r\n            for (let i = 1; i < this._capacity; i++) {\r\n                vbFloatArray.copyWithin(i * this._vertAttribSize * this._vertCount / 4, 0, this._vertAttribSize * this._vertCount / 4);\r\n            }\r\n        }\r\n        vertexBuffer.update(vBuffer);\r\n\r\n        const indices: Uint16Array = new Uint16Array(this._bufferSize * this._indexCount);\r\n        if (this._mesh && this._capacity > 0) {\r\n            this._mesh.copyIndices(0, indices);\r\n            for (let i = 1; i < this._capacity; i++) {\r\n                for (let j = 0; j < this._indexCount; j++) {\r\n                    indices[i * this._indexCount + j] = indices[j] + i * this._vertCount;\r\n                }\r\n            }\r\n        } else {\r\n            let dst = 0;\r\n            for (let i = 0; i < this._capacity; ++i) {\r\n                const baseIdx = 4 * i;\r\n                indices[dst++] = baseIdx;\r\n                indices[dst++] = baseIdx + 1;\r\n                indices[dst++] = baseIdx + 2;\r\n                indices[dst++] = baseIdx + 3;\r\n                indices[dst++] = baseIdx + 2;\r\n                indices[dst++] = baseIdx + 1;\r\n            }\r\n        }\r\n\r\n        const indexBuffer: Buffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            this._bufferSize * this._indexCount * Uint16Array.BYTES_PER_ELEMENT,\r\n            Uint16Array.BYTES_PER_ELEMENT,\r\n        ));\r\n\r\n        indexBuffer.update(indices);\r\n\r\n        this._iaVertCount = this._capacity * this._vertCount;\r\n        this._iaIndexCount = this._capacity * this._indexCount;\r\n\r\n        this._subMeshData = new RenderingSubMesh([vertexBuffer], this._vertAttrs!, PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n        this.initSubModel(0, this._subMeshData, this._material!);\r\n        return vBuffer;\r\n    }\r\n\r\n    private createSubMeshDataInsDynamic (): ArrayBuffer {\r\n        this._insBuffers.length = 0;\r\n        this.destroySubMeshData();\r\n\r\n        const vertexBuffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            this._vertAttribSize * this._bufferSize,\r\n            this._vertAttribSize,\r\n        ));\r\n\r\n        const vBuffer: ArrayBuffer = new ArrayBuffer(this._vertAttribSize * this._bufferSize);\r\n        vertexBuffer.update(vBuffer);\r\n\r\n        this._insBuffers.push(vertexBuffer);\r\n\r\n        return vBuffer;\r\n    }\r\n\r\n    private createSubMeshDataInsStatic (): void {\r\n        this._vertCount = 4;\r\n        this._indexCount = 6;\r\n        if (this._mesh) {\r\n            this._vertCount = this._mesh.struct.vertexBundles[this._mesh.struct.primitives[0].vertexBundelIndices[0]].view.count;\r\n            this._indexCount = this._mesh.struct.primitives[0].indexView!.count;\r\n        }\r\n\r\n        const vertexBuffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            this._vertAttribSizeStatic * this._vertCount,\r\n            this._vertAttribSizeStatic,\r\n        ));\r\n\r\n        const vBuffer: ArrayBuffer = new ArrayBuffer(this._vertAttribSizeStatic * this._vertCount);\r\n        if (this._mesh) {\r\n            let vIdx = this._vertAttrs!.findIndex((val): boolean => val.name === AttributeName.ATTR_TEX_COORD as string); // find ATTR_TEX_COORD index\r\n            let vOffset = (this._vertAttrs![vIdx]).offset; // find ATTR_TEX_COORD offset\r\n            this._mesh.copyAttribute(0, AttributeName.ATTR_TEX_COORD, vBuffer, this._vertAttribSizeStatic, vOffset);  // copy mesh uv to ATTR_TEX_COORD\r\n            vIdx = this._vertAttrs!.findIndex((val): boolean => val.name === AttributeName.ATTR_TEX_COORD3 as string); // find ATTR_TEX_COORD3 index\r\n            vOffset = (this._vertAttrs![vIdx++]).offset; // find ATTR_TEX_COORD3 offset\r\n            this._mesh.copyAttribute(0, AttributeName.ATTR_POSITION, vBuffer, this._vertAttribSizeStatic, vOffset);  // copy mesh position to ATTR_TEX_COORD3\r\n            vOffset = (this._vertAttrs![vIdx++]).offset;\r\n            this._mesh.copyAttribute(0, AttributeName.ATTR_NORMAL, vBuffer, this._vertAttribSizeStatic, vOffset);  // copy mesh normal to ATTR_NORMAL\r\n            vOffset = (this._vertAttrs![vIdx++]).offset;\r\n            if (!this._mesh.copyAttribute(0, AttributeName.ATTR_COLOR, vBuffer, this._vertAttribSizeStatic, vOffset)) {  // copy mesh color to ATTR_COLOR1\r\n                const vb = new Uint32Array(vBuffer);\r\n                for (let iVertex = 0; iVertex < this._vertCount; ++iVertex) {\r\n                    vb[iVertex * this._vertStaticAttrsFloatCount + vOffset / 4] = Color.toUint32(Color.WHITE);\r\n                }\r\n            }\r\n        } else {\r\n            const vbFloatArray = new Float32Array(vBuffer);\r\n            for (let i = 0; i < _uvs_ins.length; ++i) {\r\n                vbFloatArray[i] = _uvs_ins[i];\r\n            }\r\n        }\r\n        vertexBuffer.update(vBuffer);\r\n\r\n        const indices: Uint16Array = new Uint16Array(this._indexCount);\r\n        if (this._mesh) {\r\n            this._mesh.copyIndices(0, indices);\r\n        } else {\r\n            indices[0] = 0;\r\n            indices[1] = 1;\r\n            indices[2] = 2;\r\n            indices[3] = 3;\r\n            indices[4] = 2;\r\n            indices[5] = 1;\r\n        }\r\n\r\n        const indexBuffer: Buffer = this._device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.DEVICE,\r\n            this._indexCount * Uint16Array.BYTES_PER_ELEMENT,\r\n            Uint16Array.BYTES_PER_ELEMENT,\r\n        ));\r\n\r\n        indexBuffer.update(indices);\r\n        this._insIndices = indexBuffer;\r\n\r\n        this._iaVertCount = this._vertCount;\r\n        this._iaIndexCount = this._indexCount;\r\n\r\n        this._insBuffers.push(vertexBuffer);\r\n    }\r\n\r\n    private createInsSubmesh (): void {\r\n        this._subMeshData = new RenderingSubMesh(this._insBuffers, this._vertAttrs!, PrimitiveMode.TRIANGLE_LIST, this._insIndices);\r\n        this.initSubModel(0, this._subMeshData, this._material!);\r\n    }\r\n\r\n    public updateMaterial (mat: Material): void {\r\n        this._material = mat;\r\n        this.setSubModelMaterial(0, mat);\r\n    }\r\n\r\n    public addParticleVertexData (index: number, pvdata: PVData): void {\r\n        if (!this._useInstance) {\r\n            if (!this._mesh) {\r\n                let offset: number = index * this._vertAttrsFloatCount;\r\n                this._vdataF32![offset++] = pvdata.position.x; // position\r\n                this._vdataF32![offset++] = pvdata.position.y;\r\n                this._vdataF32![offset++] = pvdata.position.z;\r\n                this._vdataF32![offset++] = pvdata.texcoord.x; // uv\r\n                this._vdataF32![offset++] = pvdata.texcoord.y;\r\n                this._vdataF32![offset++] = pvdata.texcoord.z; // frame idx\r\n                this._vdataF32![offset++] = pvdata.size.x; // size\r\n                this._vdataF32![offset++] = pvdata.size.y;\r\n                this._vdataF32![offset++] = pvdata.size.z;\r\n                this._vdataF32![offset++] = pvdata.rotation.x; // rotation\r\n                this._vdataF32![offset++] = pvdata.rotation.y;\r\n                this._vdataF32![offset++] = pvdata.rotation.z;\r\n                this._vdataUint32![offset++] = pvdata.color; // color\r\n                if (pvdata.velocity) {\r\n                    this._vdataF32![offset++] = pvdata.velocity.x; // velocity\r\n                    this._vdataF32![offset++] = pvdata.velocity.y;\r\n                    this._vdataF32![offset++] = pvdata.velocity.z;\r\n                }\r\n            } else {\r\n                for (let i = 0; i < this._vertCount; i++) {\r\n                    let offset: number = (index * this._vertCount + i) * this._vertAttrsFloatCount;\r\n                    this._vdataF32![offset++] = pvdata.position.x; // position\r\n                    this._vdataF32![offset++] = pvdata.position.y;\r\n                    this._vdataF32![offset++] = pvdata.position.z;\r\n                    offset += 2;\r\n                    // this._vdataF32![offset++] = index;\r\n                    // this._vdataF32![offset++] = pvdata.texcoord.y;\r\n                    this._vdataF32![offset++] = pvdata.texcoord.z; // frame idx\r\n                    this._vdataF32![offset++] = pvdata.size.x; // size\r\n                    this._vdataF32![offset++] = pvdata.size.y;\r\n                    this._vdataF32![offset++] = pvdata.size.z;\r\n                    this._vdataF32![offset++] = pvdata.rotation.x; // rotation\r\n                    this._vdataF32![offset++] = pvdata.rotation.y;\r\n                    this._vdataF32![offset++] = pvdata.rotation.z;\r\n                    this._vdataUint32![offset++] = pvdata.color; // color\r\n                }\r\n            }\r\n        } else {\r\n            this.addParticleVertexDataIns(index, pvdata);\r\n        }\r\n    }\r\n\r\n    private addParticleVertexDataIns (index: number, pvdata: PVData): void {\r\n        let offset: number = index * this._vertAttrsFloatCount;\r\n        if (!this._mesh) {\r\n            this._vdataF32![offset++] = pvdata.position.x; // position\r\n            this._vdataF32![offset++] = pvdata.position.y;\r\n            this._vdataF32![offset++] = pvdata.position.z;\r\n            this._vdataF32![offset++] = pvdata.texcoord.z; // frame idx\r\n\r\n            this._vdataF32![offset++] = pvdata.size.x; // size\r\n            this._vdataF32![offset++] = pvdata.size.y;\r\n            this._vdataF32![offset++] = pvdata.size.z;\r\n\r\n            this._vdataF32![offset++] = pvdata.rotation.x; // rotation\r\n            this._vdataF32![offset++] = pvdata.rotation.y;\r\n            this._vdataF32![offset++] = pvdata.rotation.z;\r\n\r\n            this._vdataUint32![offset++] = pvdata.color; // color\r\n            if (pvdata.velocity) {\r\n                this._vdataF32![offset++] = pvdata.velocity.x; // velocity\r\n                this._vdataF32![offset++] = pvdata.velocity.y;\r\n                this._vdataF32![offset++] = pvdata.velocity.z;\r\n            }\r\n        } else {\r\n            this._vdataF32![offset++] = pvdata.position.x; // position\r\n            this._vdataF32![offset++] = pvdata.position.y;\r\n            this._vdataF32![offset++] = pvdata.position.z;\r\n            this._vdataF32![offset++] = pvdata.texcoord.z; // frame idx\r\n\r\n            this._vdataF32![offset++] = pvdata.size.x; // size\r\n            this._vdataF32![offset++] = pvdata.size.y;\r\n            this._vdataF32![offset++] = pvdata.size.z;\r\n\r\n            this._vdataF32![offset++] = pvdata.rotation.x; // rotation\r\n            this._vdataF32![offset++] = pvdata.rotation.y;\r\n            this._vdataF32![offset++] = pvdata.rotation.z;\r\n\r\n            this._vdataUint32![offset++] = pvdata.color; // color\r\n        }\r\n    }\r\n\r\n    public addGPUParticleVertexData (p: Particle, num: number, time: number): void {\r\n        if (!this._useInstance) {\r\n            let offset = num * this._vertAttrsFloatCount * this._vertCount;\r\n            for (let i = 0; i < this._vertCount; i++) {\r\n                let idx = offset;\r\n                this._vdataF32![idx++] = p.position.x;\r\n                this._vdataF32![idx++] = p.position.y;\r\n                this._vdataF32![idx++] = p.position.z;\r\n                this._vdataF32![idx++] = time;\r\n\r\n                this._vdataF32![idx++] = p.startSize.x;\r\n                this._vdataF32![idx++] = p.startSize.y;\r\n                this._vdataF32![idx++] = p.startSize.z;\r\n                this._vdataF32![idx++] = _uvs[2 * i];\r\n\r\n                this._vdataF32![idx++] = p.rotation.x;\r\n                this._vdataF32![idx++] = p.rotation.y;\r\n                this._vdataF32![idx++] = p.rotation.z;\r\n                this._vdataF32![idx++] = _uvs[2 * i + 1];\r\n\r\n                this._vdataF32![idx++] = p.startColor.r / 255.0;\r\n                this._vdataF32![idx++] = p.startColor.g / 255.0;\r\n                this._vdataF32![idx++] = p.startColor.b / 255.0;\r\n                this._vdataF32![idx++] = p.startColor.a / 255.0;\r\n\r\n                this._vdataF32![idx++] = p.velocity.x;\r\n                this._vdataF32![idx++] = p.velocity.y;\r\n                this._vdataF32![idx++] = p.velocity.z;\r\n                this._vdataF32![idx++] = p.startLifetime;\r\n\r\n                this._vdataF32![idx++] = p.randomSeed;\r\n\r\n                offset += this._vertAttrsFloatCount;\r\n            }\r\n        } else {\r\n            this.addGPUParticleVertexDataIns(p, num, time);\r\n        }\r\n    }\r\n\r\n    private addGPUParticleVertexDataIns (p: Particle, num: number, time: number): void {\r\n        let offset = num * this._vertAttrsFloatCount;\r\n        let idx = offset;\r\n        this._vdataF32![idx++] = p.position.x;\r\n        this._vdataF32![idx++] = p.position.y;\r\n        this._vdataF32![idx++] = p.position.z;\r\n        this._vdataF32![idx++] = time;\r\n\r\n        this._vdataF32![idx++] = p.startSize.x;\r\n        this._vdataF32![idx++] = p.startSize.y;\r\n        this._vdataF32![idx++] = p.startSize.z;\r\n        this._vdataF32![idx++] = p.frameIndex;\r\n\r\n        this._vdataF32![idx++] = p.rotation.x;\r\n        this._vdataF32![idx++] = p.rotation.y;\r\n        this._vdataF32![idx++] = p.rotation.z;\r\n\r\n        this._vdataF32![idx++] = p.startColor.r / 255.0;\r\n        this._vdataF32![idx++] = p.startColor.g / 255.0;\r\n        this._vdataF32![idx++] = p.startColor.b / 255.0;\r\n        this._vdataF32![idx++] = p.startColor.a / 255.0;\r\n\r\n        this._vdataF32![idx++] = p.velocity.x;\r\n        this._vdataF32![idx++] = p.velocity.y;\r\n        this._vdataF32![idx++] = p.velocity.z;\r\n        this._vdataF32![idx++] = p.startLifetime;\r\n\r\n        this._vdataF32![idx++] = p.randomSeed;\r\n\r\n        offset += this._vertAttrsFloatCount;\r\n    }\r\n\r\n    public updateGPUParticles (num: number, time: number, dt: number): number {\r\n        if (!this._useInstance) {\r\n            const pSize = this._vertAttrsFloatCount * this._vertCount;\r\n            let pBaseIndex = 0;\r\n            let startTime = 0;\r\n            let lifeTime = 0;\r\n            let lastBaseIndex = 0;\r\n            let interval = 0;\r\n            for (let i = 0; i < num; ++i) {\r\n                pBaseIndex = i * pSize;\r\n                startTime = this._vdataF32![pBaseIndex + this._startTimeOffset];\r\n                lifeTime = this._vdataF32![pBaseIndex + this._lifeTimeOffset];\r\n                interval = time - startTime;\r\n                if (lifeTime - interval < dt) {\r\n                    lastBaseIndex = --num * pSize;\r\n                    this._vdataF32!.copyWithin(pBaseIndex, lastBaseIndex, lastBaseIndex + pSize);\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            return num;\r\n        } else {\r\n            return this.updateGPUParticlesIns(num, time, dt);\r\n        }\r\n    }\r\n\r\n    private updateGPUParticlesIns (num: number, time: number, dt: number): number {\r\n        const pSize = this._vertAttrsFloatCount;\r\n        let pBaseIndex = 0;\r\n        let startTime = 0;\r\n        let lifeTime = 0;\r\n        let lastBaseIndex = 0;\r\n        let interval = 0;\r\n        for (let i = 0; i < num; ++i) {\r\n            pBaseIndex = i * pSize;\r\n            startTime = this._vdataF32![pBaseIndex + this._startTimeOffset];\r\n            lifeTime = this._vdataF32![pBaseIndex + this._lifeTimeOffset];\r\n            interval = time - startTime;\r\n            if (lifeTime - interval < dt) {\r\n                lastBaseIndex = --num * pSize;\r\n                this._vdataF32!.copyWithin(pBaseIndex, lastBaseIndex, lastBaseIndex + pSize);\r\n                i--;\r\n            }\r\n        }\r\n\r\n        return num;\r\n    }\r\n\r\n    public constructAttributeIndex (): void {\r\n        if (!this._vertAttrs) {\r\n            return;\r\n        }\r\n        let vIdx = this._vertAttrs.findIndex((val): boolean => val.name === 'a_position_starttime');\r\n        let vOffset = (this._vertAttrs[vIdx]).offset;\r\n        this._startTimeOffset = vOffset / 4 + 3;\r\n        vIdx = this._vertAttrs.findIndex((val): boolean => val.name === 'a_dir_life');\r\n        vOffset = (this._vertAttrs[vIdx]).offset;\r\n        this._lifeTimeOffset = vOffset / 4 + 3;\r\n    }\r\n\r\n    public updateIA (count: number): void {\r\n        if (!this._useInstance) {\r\n            if (count <= 0) {\r\n                return;\r\n            }\r\n            const ia = this._subModels[0].inputAssembler;\r\n            ia.vertexBuffers[0].update(this._vdataF32!);\r\n            ia.firstIndex = 0;\r\n            ia.indexCount = this._indexCount * count;\r\n            ia.vertexCount = this._iaVertCount;\r\n        } else {\r\n            this.updateIAIns(count);\r\n        }\r\n    }\r\n\r\n    private updateIAIns (count: number): void {\r\n        if (count <= 0) {\r\n            return;\r\n        }\r\n        const ia = this._subModels[0].inputAssembler;\r\n        ia.vertexBuffers[0].update(this._vdataF32!); // update dynamic buffer\r\n        ia.instanceCount = count;\r\n        ia.firstIndex = 0;\r\n        ia.indexCount = this._indexCount;\r\n        ia.instanceCount = count;\r\n        ia.vertexCount = this._iaVertCount;\r\n    }\r\n\r\n    public clear (): void {\r\n        if (!this._useInstance) {\r\n            this._subModels[0].inputAssembler.indexCount = 0;\r\n        } else {\r\n            this.clearIns();\r\n        }\r\n    }\r\n\r\n    private clearIns (): void {\r\n        this._subModels[0].inputAssembler.instanceCount = 0;\r\n    }\r\n\r\n    public destroy (): void {\r\n        super.destroy();\r\n        this.doDestroy();\r\n    }\r\n\r\n    public doDestroy (): void {\r\n        this._vBuffer = null;\r\n        this._vdataF32 = null;\r\n        this._vdataUint32 = null;\r\n\r\n        this._insBuffers = [];\r\n        this._insIndices = null;\r\n\r\n        this._vertAttrs = null;\r\n        this._material = null;\r\n        this._mesh = null;\r\n        this.destroySubMeshData();\r\n    }\r\n\r\n    private rebuild (): void {\r\n        if (!this._useInstance) {\r\n            this._vBuffer = this.createSubMeshData();\r\n            this._vdataF32 = new Float32Array(this._vBuffer);\r\n            this._vdataUint32 = new Uint32Array(this._vBuffer);\r\n        } else {\r\n            this.rebuildIns();\r\n        }\r\n    }\r\n\r\n    private rebuildIns (): void {\r\n        this._vBuffer = this.createSubMeshDataInsDynamic();\r\n        this._vdataF32 = new Float32Array(this._vBuffer);\r\n        this._vdataUint32 = new Uint32Array(this._vBuffer);\r\n\r\n        this.createSubMeshDataInsStatic();\r\n\r\n        this.createInsSubmesh();\r\n    }\r\n\r\n    private destroySubMeshData (): void {\r\n        if (this._subMeshData) {\r\n            this._subMeshData.destroy();\r\n            this._subMeshData = null;\r\n        }\r\n    }\r\n\r\n    public set useInstance (value: boolean) {\r\n        if (this._useInstance !== value) {\r\n            this._useInstance = value;\r\n        }\r\n    }\r\n\r\n    public get useInstance (): boolean {\r\n        return this._useInstance;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Attribute, deviceManager, Feature } from '../../gfx';\r\nimport ParticleBatchModel from '../models/particle-batch-model';\r\nimport ParticleSystemRenderer from './particle-system-renderer-data';\r\nimport { Material } from '../../asset/assets';\r\nimport { Particle, IParticleModule } from '../particle';\r\nimport { ParticleRenderMode } from '../enum';\r\nimport { cclegacy } from '../../core';\r\nimport { Pass } from '../../render-scene';\r\nimport type { ParticleSystem } from '../particle-system';\r\nimport type { Root } from '../../root';\r\n\r\nexport abstract class ParticleSystemRendererBase {\r\n    protected _particleSystem: ParticleSystem | null = null;\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public get model (): ParticleBatchModel | null {\r\n        return this._model;\r\n    }\r\n    protected _model: ParticleBatchModel | null = null;\r\n    protected _renderInfo: ParticleSystemRenderer | null = null;\r\n    protected _vertAttrs: Attribute[] = [];\r\n    protected _useInstance: boolean;\r\n\r\n    constructor (info: ParticleSystemRenderer) {\r\n        this._renderInfo = info;\r\n        if (!deviceManager.gfxDevice.hasFeature(Feature.INSTANCED_ARRAYS)) {\r\n            this._useInstance = false;\r\n        } else {\r\n            this._useInstance = true;\r\n        }\r\n    }\r\n\r\n    public getUseInstance (): boolean {\r\n        return this._useInstance;\r\n    }\r\n\r\n    public getInfo (): ParticleSystemRenderer {\r\n        return this._renderInfo!;\r\n    }\r\n\r\n    public onInit (ps: ParticleSystem): void {\r\n        this._particleSystem = ps;\r\n    }\r\n\r\n    public onEnable (): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n        this.attachToScene();\r\n        const model = this._model;\r\n        if (model) {\r\n            model.node = model.transform = this._particleSystem.node;\r\n        }\r\n    }\r\n\r\n    public onDisable (): void {\r\n        this.detachFromScene();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        if (this._model) {\r\n            (cclegacy.director.root as Root).destroyModel(this._model);\r\n            this._model = null;\r\n        }\r\n    }\r\n\r\n    public attachToScene (): void {\r\n        if (this._model) {\r\n            if (this._model.scene) {\r\n                this.detachFromScene();\r\n            }\r\n            this._particleSystem?._getRenderScene().addModel(this._model);\r\n        }\r\n    }\r\n\r\n    public detachFromScene (): void {\r\n        if (this._model && this._model.scene) {\r\n            this._model.scene.removeModel(this._model);\r\n        }\r\n    }\r\n\r\n    public setVertexAttributes (): void {\r\n        if (this._model) {\r\n            this.updateVertexAttrib();\r\n            this._model.setVertexAttributes(this._renderInfo!.renderMode === ParticleRenderMode.Mesh ? this._renderInfo!.mesh : null, this._vertAttrs);\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        if (this._model) this._model.enabled = false;\r\n    }\r\n\r\n    public getModel (): ParticleBatchModel | null {\r\n        return this._model;\r\n    }\r\n\r\n    protected _initModel (): void {\r\n        if (!this._model && this._particleSystem) {\r\n            this._model = cclegacy.director.root.createModel(ParticleBatchModel);\r\n            this._model!.setCapacity(this._particleSystem.capacity);\r\n            this._model!.visFlags = this._particleSystem.visibility;\r\n        }\r\n    }\r\n\r\n    public updateTrailMaterial (): void {}\r\n    public getDefaultTrailMaterial (): Material | null { return null; }\r\n    public abstract getParticleCount (): number;\r\n    public abstract getFreeParticle (): Particle | null;\r\n    public abstract onMaterialModified (index: number, material: Material): void;\r\n    public abstract onRebuildPSO (index: number, material: Material): void;\r\n    public abstract updateVertexAttrib (): void;\r\n    public abstract updateRenderMode (): void;\r\n    public abstract updateMaterialParams (): void;\r\n    public abstract setNewParticle (p: Particle): void;\r\n    public abstract getDefaultMaterial(): Material | null;\r\n    public abstract updateRotation (pass: Pass | null): void;\r\n    public abstract updateScale (pass: Pass | null): void;\r\n    public abstract updateParticles (dt: number): number;\r\n    public abstract updateRenderData (): void;\r\n    public abstract enableModule (name: string, val: boolean, pm: IParticleModule): void;\r\n    public abstract beforeRender (): void;\r\n    public abstract setUseInstance (value: boolean): void;\r\n    public abstract getNoisePreview (out: number[], width: number, height: number): void;\r\n    public abstract updateAlignSpace (space: number): void;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec2, Vec3 } from '../core/math';\r\n\r\n/**\r\n * @en Noise generation class.\r\n * @zh 此类生成噪声纹理。\r\n */\r\nexport class ParticleNoise {\r\n    private permutation: number[] = [151, 160, 137, 91, 90, 15,\r\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,\r\n    ];\r\n\r\n    constructor (permutation?: number[]) {\r\n        if (permutation) {\r\n            this.permutation = permutation;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Noise generation function.\r\n     * @zh 噪声生成函数。\r\n     * @param x @en Relative X coordinate. @zh 纹理坐标在 X 轴的偏移量。\r\n     * @param y @en Relative Y coordinate. @zh 纹理坐标在 Y 轴的偏移量。\r\n     * @param z @en Relative Z coordinate. @zh 纹理坐标在 Z 轴的偏移量。\r\n     * @param min @en Min pixel value. @zh 像素最小值。\r\n     * @param max @en Max pixel value. @zh 像素最大值。\r\n     * @returns @en Texture pixel generated. @zh 返回生成的噪声纹理值。\r\n     */\r\n    public noise (x: number, y: number, z: number, min = 0, max = 1): number {\r\n        const p: number[] = new Array(512);\r\n        for (let i = 0; i < 256; i++) { p[256 + i] = p[i] = this.permutation[i]; }\r\n\r\n        const X = Math.floor(x) & 255; // FIND UNIT CUBE THAT\r\n        const Y = Math.floor(y) & 255; // CONTAINS POINT.\r\n        const Z = Math.floor(z) & 255;\r\n        x -= Math.floor(x); // FIND RELATIVE X,Y,Z\r\n        y -= Math.floor(y); // OF POINT IN CUBE.\r\n        z -= Math.floor(z);\r\n        const u = this.fade(x); // COMPUTE FADE CURVES\r\n        const v = this.fade(y); // FOR EACH OF X,Y,Z.\r\n        const w = this.fade(z);\r\n        const A = p[X] + Y;\r\n        const AA = p[A] + Z;\r\n        const AB = p[A + 1] + Z; // HASH COORDINATES OF\r\n        const B = p[X + 1] + Y;\r\n        const BA = p[B] + Z;\r\n        const BB = p[B + 1] + Z; // THE 8 CUBE CORNERS,\r\n\r\n        // The perlin noise value 0 -> 1\r\n        const val = this.scale(this.lerp(\r\n            w,\r\n            this.lerp(\r\n                v,\r\n                this.lerp(\r\n                    u,\r\n                    this.grad(p[AA], x, y, z), // AND ADD\r\n                    this.grad(p[BA], x - 1, y, z),\r\n                ), // BLENDED\r\n                this.lerp(\r\n                    u,\r\n                    this.grad(p[AB], x, y - 1, z), // RESULTS\r\n                    this.grad(p[BB], x - 1, y - 1, z),\r\n                ),\r\n            ), // FROM  8\r\n            this.lerp(\r\n                v,\r\n                this.lerp(\r\n                    u,\r\n                    this.grad(p[AA + 1], x, y, z - 1), // CORNERS\r\n                    this.grad(p[BA + 1], x - 1, y, z - 1),\r\n                ), // OF CUBE\r\n                this.lerp(\r\n                    u,\r\n                    this.grad(p[AB + 1], x, y - 1, z - 1),\r\n                    this.grad(p[BB + 1], x - 1, y - 1, z - 1),\r\n                ),\r\n            ),\r\n        ));\r\n\r\n        return min + val * (max - min);\r\n    }\r\n    private fade (t: number): number {\r\n        return t * t * t * (t * (t * 6 - 15) + 10);\r\n    }\r\n    private lerp (t: number, a: number, b: number): number {\r\n        return a + t * (b - a);\r\n    }\r\n    private grad (hash: number, x: number, y: number, z: number): number {\r\n        const h = hash & 15; // CONVERT LO 4 BITS OF HASH CODE\r\n        const u = h < 8 ? x : y; // INTO 12 this.gradIENT DIRECTIONS.\r\n        const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\r\n        return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\r\n    }\r\n    private scale (n: number): number {\r\n        return (1 + n) / 2;\r\n    }\r\n\r\n    private accSpeed: Vec3 = new Vec3();\r\n    private noiseSpeed: Vec3 = new Vec3();\r\n    private noiseFrequency = 0.0;\r\n    private noiseAbs: Vec3 = new Vec3();\r\n    private noiseAmplitude: Vec3 = new Vec3();\r\n    private octaves: Vec3 = new Vec3();\r\n    private dt = 0.0;\r\n    private point: Vec3 = new Vec3();\r\n    private result: Vec3 = new Vec3();\r\n    private mixOut: Vec2 = new Vec2();\r\n\r\n    /**\r\n     * @en Set texture rolling speed.\r\n     * @zh 设置纹理滚动速度。\r\n     * @param x @en X axis roll speed. @zh X 轴滚动速度。\r\n     * @param y @en Y axis roll speed. @zh Y 轴滚动速度。\r\n     * @param z @en Z axis roll speed. @zh Z 轴滚动速度。\r\n     */\r\n    public setSpeed (x: number, y: number, z: number): void {\r\n        this.noiseSpeed.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * @en Set noise frequency.\r\n     * @zh 设置生成的噪声频率。\r\n     * @param f @en Noise texture frequency. @zh 噪声频率。\r\n     */\r\n    public setFrequency (f: number): void {\r\n        this.noiseFrequency = f;\r\n    }\r\n\r\n    /**\r\n     * @zh 将最终噪声值重新映射到不同的范围。\r\n     * @en The curve that describes how the final noise values are transformed.\r\n     * @param x @en X value transformed. @zh X 轴上噪声值的偏移。\r\n     * @param y @en Y value transformed. @zh Y 轴上噪声值的偏移。\r\n     * @param z @en Z value transformed. @zh Z 轴上噪声值的偏移。\r\n     * @deprecated since v3.6.0\r\n     */\r\n    public setAbs (x: number, y: number, z: number): void {\r\n        this.noiseAbs.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * @en Set noise amplititude.\r\n     * @zh 设置噪声强度。\r\n     * @param x @en Noise amplititude on X axis. @zh X 轴上的噪声强度。\r\n     * @param y @en Noise amplititude on Y axis. @zh Y 轴上的噪声强度。\r\n     * @param z @en Noise amplititude on Z axis. @zh Z 轴上的噪声强度。\r\n     */\r\n    public setAmplititude (x: number, y: number, z: number): void {\r\n        this.noiseAmplitude.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * @en Specify how many layers of overlapping noise are combined to produce the final noise values.\r\n     * @zh 指定组合多少层重叠噪声来产生最终噪声值。\r\n     * @param x @en Layer count. @zh 噪声层数。\r\n     * @param y @en For each additional noise layer, reduce the strength by this proportion. @zh 每一层的噪声强度衰减比例。\r\n     * @param z @en For each additional noise layer, adjust the frequency by this multiplier. @zh 对于每个附加的噪声层，按此乘数调整频率。\r\n     */\r\n    public setOctaves (x: number, y: number, z: number): void {\r\n        this.octaves.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * @en Set update interval time.\r\n     * @zh 设置更新间隔时间。\r\n     * @param t @en Update interval time. @zh 更新的间隔时间。\r\n     */\r\n    public setTime (t: number): void {\r\n        this.dt = t;\r\n    }\r\n\r\n    /**\r\n     * @en Set noise texture sample point.\r\n     * @zh 设置噪声纹理的采样点。\r\n     * @param p @en Sample point of noise texture. @zh 噪声纹理采样点。\r\n     */\r\n    public setSamplePoint (p: Vec3): void {\r\n        this.point.set(p);\r\n    }\r\n\r\n    /**\r\n     * @en Get the sample pixel.\r\n     * @zh 获取采样的像素。\r\n     * @returns @en The sample result. @zh 纹理采样结果。\r\n     */\r\n    public getResult (): Vec3 {\r\n        return this.result;\r\n    }\r\n\r\n    private getNoise (sx: number, sy: number, sz: number, time: number, offset: Vec3, noiseFrequency: number, octaves: Vec3): number {\r\n        let frequency = noiseFrequency;\r\n        let sum = 0.0;\r\n        sum += this.noise(sx * frequency, sy * frequency, sz * frequency, -1.0, 1.0);\r\n        if (octaves.x === 1) {\r\n            return sum;\r\n        }\r\n\r\n        let amplitude = 1.0;\r\n        let range = 1.0;\r\n        for (let i = 1; i < octaves.x; ++i) {\r\n            amplitude *= octaves.y;\r\n            frequency *= octaves.z;\r\n            range += amplitude;\r\n\r\n            sum += this.noise(sx * frequency, sy * frequency, sz * frequency, -1.0, 1.0) * amplitude;\r\n        }\r\n        return sum / range;\r\n    }\r\n\r\n    private getNoiseMix (out: Vec2, point: Vec3, time: number, offSpeed: Vec3, noiseFrequency: number, octaves: Vec3): void {\r\n        out.x = this.getNoise(point.x, point.y, point.z, time, offSpeed, noiseFrequency, octaves);\r\n        out.y = this.getNoise(point.y, point.z, point.x, time, offSpeed, noiseFrequency, octaves);\r\n    }\r\n\r\n    /**\r\n     * @en Sample pixel from noise texture.\r\n     * @zh 从噪声纹理采样像素。\r\n     */\r\n    public getNoiseParticle (): void {\r\n        this.accSpeed.set(this.noiseSpeed.x * this.dt, this.noiseSpeed.y * this.dt, this.noiseSpeed.z * this.dt);\r\n\r\n        const axisOffset = 1000.0;\r\n        // eslint-disable-next-line max-len\r\n        const sampX = this.getNoise(this.point.z + this.accSpeed.x, this.point.y, this.point.x, this.dt, this.accSpeed, this.noiseFrequency, this.octaves);\r\n        // eslint-disable-next-line max-len\r\n        const sampY = this.getNoise(this.point.x + axisOffset, this.point.z + this.accSpeed.y, this.point.y, this.dt, this.accSpeed, this.noiseFrequency, this.octaves);\r\n        // eslint-disable-next-line max-len\r\n        const sampZ = this.getNoise(this.point.y, this.point.x + axisOffset, this.point.z + this.accSpeed.z, this.dt, this.accSpeed, this.noiseFrequency, this.octaves);\r\n\r\n        this.result.set(sampX * this.noiseAmplitude.x, sampY * this.noiseAmplitude.y, sampZ * this.noiseAmplitude.z);\r\n    }\r\n\r\n    /**\r\n     * @en Generate noise texture preview.\r\n     * @zh 生成噪声纹理的预览。\r\n     * @param out @en Noise pixel array. @zh 噪声像素 RGB 数组。\r\n     * @param width @en Texture width. @zh 纹理宽度。\r\n     * @param height @en Texture height. @zh 纹理高度。\r\n     */\r\n    public getPreview (out: number[], width: number, height: number): void {\r\n        for (let h = 0; h < height; ++h) {\r\n            for (let w = 0; w < width; ++w) {\r\n                const sampx = (w - width * 0.5) / width + this.noiseSpeed.x * this.dt;\r\n                const sampy = (h - height * 0.5) / height + this.noiseSpeed.y * this.dt;\r\n                const pix = this.getNoise(sampx, sampy, 0.0, this.dt, this.accSpeed, this.noiseFrequency, this.octaves);\r\n                out[h * width + w] = (pix + 1.0) * 0.5;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { builtinResMgr } from '../../asset/asset-manager';\r\nimport { Material, Texture2D } from '../../asset/assets';\r\nimport { AttributeName, Format, Attribute, FormatInfos } from '../../gfx';\r\nimport { Mat4, Vec2, Vec3, Vec4, pseudoRandom, Quat, EPSILON, approx, RecyclePool, warn, Color, v3 } from '../../core';\r\nimport { MaterialInstance, IMaterialInstanceInfo } from '../../render-scene/core/material-instance';\r\nimport { MacroRecord } from '../../render-scene/core/pass-utils';\r\nimport { ParticleAlignmentSpace, ParticleRenderMode, ParticleSpace } from '../enum';\r\nimport { Particle, IParticleModule, PARTICLE_MODULE_ORDER, PARTICLE_MODULE_NAME } from '../particle';\r\nimport { ParticleSystemRendererBase } from './particle-system-renderer-base';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport { Pass } from '../../render-scene';\r\nimport { ParticleNoise } from '../noise';\r\nimport { NoiseModule } from '../animator/noise-module';\r\nimport { isCurveTwoValues } from '../particle-general-function';\r\nimport type { ParticleSystem } from '../particle-system';\r\nimport type ParticleSystemRenderer from './particle-system-renderer-data';\r\n\r\nconst _tempNodeScale = new Vec4();\r\nconst _tempAttribUV = v3();\r\nconst _tempWorldTrans = new Mat4();\r\nconst _tempParentInverse = new Mat4();\r\nconst _node_rot = new Quat();\r\n\r\nconst _animModule = [\r\n    '_colorOverLifetimeModule',\r\n    '_sizeOvertimeModule',\r\n    '_velocityOvertimeModule',\r\n    '_forceOvertimeModule',\r\n    '_limitVelocityOvertimeModule',\r\n    '_rotationOvertimeModule',\r\n    '_textureAnimationModule',\r\n    '_noiseModule',\r\n];\r\n\r\nconst _uvs = [\r\n    0, 0, // bottom-left\r\n    1, 0, // bottom-right\r\n    0, 1, // top-left\r\n    1, 1, // top-right\r\n];\r\n\r\nconst CC_USE_WORLD_SPACE = 'CC_USE_WORLD_SPACE';\r\nconst CC_USE_EMBEDDED_ALPHA = 'CC_USE_EMBEDDED_ALPHA';\r\n\r\nconst CC_RENDER_MODE = 'CC_RENDER_MODE';\r\nconst ROTATION_OVER_TIME_MODULE_ENABLE = 'ROTATION_OVER_TIME_MODULE_ENABLE';\r\nconst INSTANCE_PARTICLE = 'CC_INSTANCE_PARTICLE';\r\nconst RENDER_MODE_BILLBOARD = 0;\r\nconst RENDER_MODE_STRETCHED_BILLBOARD = 1;\r\nconst RENDER_MODE_HORIZONTAL_BILLBOARD = 2;\r\nconst RENDER_MODE_VERTICAL_BILLBOARD = 3;\r\nconst RENDER_MODE_MESH = 4;\r\n\r\nconst ATTR_POSITION = AttributeName.ATTR_POSITION;\r\nconst ATTR_NORMAL = AttributeName.ATTR_NORMAL;\r\nconst ATTR_COLOR = AttributeName.ATTR_COLOR;\r\nconst ATTR_COLOR1 = AttributeName.ATTR_COLOR1;\r\nconst ATTR_TEX_COORD = AttributeName.ATTR_TEX_COORD;\r\nconst ATTR_TEX_COORD1 = AttributeName.ATTR_TEX_COORD1;\r\nconst ATTR_TEX_COORD2 = AttributeName.ATTR_TEX_COORD2;\r\nconst ATTR_TEX_COORD3 = AttributeName.ATTR_TEX_COORD3;\r\nconst ATTR_TEX_COORD4 = AttributeName.ATTR_TEX_COORD4;\r\n\r\nfunction createAttribute (name: AttributeName, format: Format, isNormalized = false, stream = 0, isInstanced = false, location = 0): Attribute {\r\n    return new Attribute(name, format, isNormalized, stream, isInstanced, location);\r\n}\r\n\r\nconst _vertex_attrs = [\r\n    createAttribute(ATTR_POSITION, Format.RGB32F),       // position\r\n    createAttribute(ATTR_TEX_COORD, Format.RGB32F),      // uv,frame idx\r\n    createAttribute(ATTR_TEX_COORD1, Format.RGB32F),     // size\r\n    createAttribute(ATTR_TEX_COORD2, Format.RGB32F),     // rotation\r\n    createAttribute(ATTR_COLOR, Format.RGBA8, true),     // color\r\n];\r\n\r\nconst _vertex_attrs_stretch = [\r\n    createAttribute(ATTR_POSITION, Format.RGB32F),       // position\r\n    createAttribute(ATTR_TEX_COORD, Format.RGB32F),      // uv,frame idx\r\n    createAttribute(ATTR_TEX_COORD1, Format.RGB32F),     // size\r\n    createAttribute(ATTR_TEX_COORD2, Format.RGB32F),     // rotation\r\n    createAttribute(ATTR_COLOR, Format.RGBA8, true),     // color\r\n    createAttribute(ATTR_COLOR1, Format.RGB32F),         // particle velocity\r\n];\r\n\r\nconst _vertex_attrs_mesh = [\r\n    createAttribute(ATTR_POSITION, Format.RGB32F),       // particle position\r\n    createAttribute(ATTR_TEX_COORD, Format.RGB32F),      // uv,frame idx\r\n    createAttribute(ATTR_TEX_COORD1, Format.RGB32F),     // size\r\n    createAttribute(ATTR_TEX_COORD2, Format.RGB32F),     // rotation\r\n    createAttribute(ATTR_COLOR, Format.RGBA8, true),     // particle color\r\n    createAttribute(ATTR_TEX_COORD3, Format.RGB32F),     // mesh position\r\n    createAttribute(ATTR_NORMAL, Format.RGB32F),         // mesh normal\r\n    createAttribute(ATTR_COLOR1, Format.RGBA8, true),    // mesh color\r\n];\r\n\r\nconst _vertex_attrs_ins = [\r\n    createAttribute(ATTR_TEX_COORD4, Format.RGBA32F, false, 0, true),    // position,frame idx\r\n    createAttribute(ATTR_TEX_COORD1, Format.RGB32F, false, 0, true),     // size\r\n    createAttribute(ATTR_TEX_COORD2, Format.RGB32F, false, 0, true),     // rotation\r\n    createAttribute(ATTR_COLOR, Format.RGBA8, true, 0, true),            // color\r\n    createAttribute(ATTR_TEX_COORD, Format.RGB32F, false, 1),            // uv\r\n];\r\n\r\nconst _vertex_attrs_stretch_ins = [\r\n    createAttribute(ATTR_TEX_COORD4, Format.RGBA32F, false, 0, true),    // position,frame idx\r\n    createAttribute(ATTR_TEX_COORD1, Format.RGB32F, false, 0, true),     // size\r\n    createAttribute(ATTR_TEX_COORD2, Format.RGB32F, false, 0, true),     // rotation\r\n    createAttribute(ATTR_COLOR, Format.RGBA8, true, 0, true),            // color\r\n    createAttribute(ATTR_COLOR1, Format.RGB32F, false, 0, true),         // particle velocity\r\n    createAttribute(ATTR_TEX_COORD, Format.RGB32F, false, 1),            // uv\r\n];\r\n\r\nconst _vertex_attrs_mesh_ins = [\r\n    createAttribute(ATTR_TEX_COORD4, Format.RGBA32F, false, 0, true),    // particle position,frame idx\r\n    createAttribute(ATTR_TEX_COORD1, Format.RGB32F, false, 0, true),     // size\r\n    createAttribute(ATTR_TEX_COORD2, Format.RGB32F, false, 0, true),     // rotation\r\n    createAttribute(ATTR_COLOR, Format.RGBA8, true, 0, true),            // particle color\r\n    createAttribute(ATTR_TEX_COORD, Format.RGB32F, false, 1),            // mesh uv\r\n    createAttribute(ATTR_TEX_COORD3, Format.RGB32F, false, 1),           // mesh position\r\n    createAttribute(ATTR_NORMAL, Format.RGB32F, false, 1),               // mesh normal\r\n    createAttribute(ATTR_COLOR1, Format.RGBA8, true, 1),                 // mesh color\r\n];\r\n\r\nconst _matInsInfo: IMaterialInstanceInfo = {\r\n    parent: null!,\r\n    owner: null!,\r\n    subModelIdx: 0,\r\n};\r\n\r\nexport class PVData {\r\n    public position: Vec3;\r\n    public texcoord: Vec3;\r\n    public size: Vec3;\r\n    public rotation: Vec3;\r\n    public color: number;\r\n    public velocity: Vec3 | null;\r\n\r\n    constructor () {\r\n        this.position = v3();\r\n        this.texcoord = v3();\r\n        this.size = v3();\r\n        this.rotation = v3();\r\n        this.color = 0;\r\n        this.velocity = null;\r\n    }\r\n}\r\n\r\nexport default class ParticleSystemRendererCPU extends ParticleSystemRendererBase {\r\n    private _defines: MacroRecord;\r\n    private _trailDefines: MacroRecord;\r\n    private _frameTile_velLenScale: Vec4;\r\n    private _tmp_velLenScale: Vec4;\r\n    private _defaultMat: Material | null = null;\r\n    private _node_scale: Vec3;\r\n    private _particleVertexData: PVData;\r\n    private _particles: RecyclePool<Particle> | null = null;\r\n    private _defaultTrailMat: Material | null = null;\r\n    private _updateList: Map<string, IParticleModule> = new Map<string, IParticleModule>();\r\n    private _animateList: Map<string, IParticleModule> = new Map<string, IParticleModule>();\r\n    private _runAnimateList: IParticleModule[] = [];\r\n    private _fillDataFunc: ((p: Particle, idx: number, fi: number) => void) | null = null;\r\n    private _uScaleHandle = 0;\r\n    private _uLenHandle = 0;\r\n    private _uNodeRotHandle = 0;\r\n    private _alignSpace = ParticleAlignmentSpace.View;\r\n    private _inited = false;\r\n    private _localMat: Mat4 = new Mat4();\r\n    private _gravity: Vec4 = new Vec4();\r\n\r\n    constructor (info: ParticleSystemRenderer) {\r\n        super(info);\r\n\r\n        this._model = null;\r\n\r\n        this._frameTile_velLenScale = new Vec4(1, 1, 0, 0);\r\n        this._tmp_velLenScale = this._frameTile_velLenScale.clone();\r\n        this._node_scale = v3();\r\n        this._particleVertexData = new PVData();\r\n        this._defines = {\r\n            CC_USE_WORLD_SPACE: true,\r\n            CC_USE_BILLBOARD: true,\r\n            CC_USE_STRETCHED_BILLBOARD: false,\r\n            CC_USE_HORIZONTAL_BILLBOARD: false,\r\n            CC_USE_VERTICAL_BILLBOARD: false,\r\n        };\r\n        this._trailDefines = {\r\n            CC_USE_WORLD_SPACE: true,\r\n            // CC_DRAW_WIRE_FRAME: true,   // <wireframe debug>\r\n        };\r\n    }\r\n\r\n    public onInit (ps: ParticleSystem): void {\r\n        super.onInit(ps);\r\n\r\n        this._particles = new RecyclePool((): Particle => new Particle(this), 16);\r\n        this._setVertexAttrib();\r\n        this._setFillFunc();\r\n        this._initModuleList();\r\n        this._initModel();\r\n        this.updateMaterialParams();\r\n        this.updateTrailMaterial();\r\n        this.setVertexAttributes();\r\n        this._inited = true;\r\n    }\r\n\r\n    public clear (): void {\r\n        super.clear();\r\n        this._particles!.reset();\r\n        if (this._particleSystem && this._particleSystem._trailModule) {\r\n            this._particleSystem._trailModule.clear();\r\n        }\r\n        this.updateRenderData();\r\n        this._model!.enabled = false;\r\n    }\r\n\r\n    public updateRenderMode (): void {\r\n        this._setVertexAttrib();\r\n        this._setFillFunc();\r\n        this.updateMaterialParams();\r\n        this.setVertexAttributes();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        this._particles?.destroy();\r\n        super.onDestroy();\r\n    }\r\n\r\n    public getFreeParticle (): Particle | null {\r\n        if (this._particleSystem && this._particles!.length >= this._particleSystem.capacity) {\r\n            return null;\r\n        }\r\n        return this._particles!.add();\r\n    }\r\n\r\n    public getDefaultTrailMaterial (): Material | null {\r\n        return this._defaultTrailMat;\r\n    }\r\n\r\n    public setNewParticle (p: Particle): void {\r\n    }\r\n\r\n    private _initModuleList (): void {\r\n        _animModule.forEach((val: string): void => {\r\n            if (!this._particleSystem) {\r\n                return;\r\n            }\r\n            const pm = this._particleSystem[val] as IParticleModule;\r\n            if (pm && pm.enable) {\r\n                if (pm.needUpdate) {\r\n                    this._updateList.set(pm.name, pm);\r\n                }\r\n\r\n                if (pm.needAnimate) {\r\n                    this._animateList.set(pm.name, pm);\r\n                }\r\n            }\r\n        });\r\n\r\n        // reorder\r\n        this._runAnimateList.length = 0;\r\n        for (let i = 0, len = PARTICLE_MODULE_ORDER.length; i < len; i++) {\r\n            const p = this._animateList.get(PARTICLE_MODULE_ORDER[i]);\r\n            if (p) {\r\n                this._runAnimateList.push(p);\r\n            }\r\n        }\r\n    }\r\n\r\n    public enableModule (name: string, val: boolean, pm: IParticleModule): void {\r\n        if (val) {\r\n            if (pm.needUpdate) {\r\n                this._updateList.set(pm.name, pm);\r\n            }\r\n\r\n            if (pm.needAnimate) {\r\n                this._animateList.set(pm.name, pm);\r\n            }\r\n        } else {\r\n            this._animateList.delete(name);\r\n            this._updateList.delete(name);\r\n        }\r\n        // reorder\r\n        this._runAnimateList.length = 0;\r\n        for (let i = 0, len = PARTICLE_MODULE_ORDER.length; i < len; i++) {\r\n            const p = this._animateList.get(PARTICLE_MODULE_ORDER[i]);\r\n            if (p) {\r\n                this._runAnimateList.push(p);\r\n            }\r\n        }\r\n\r\n        this.updateMaterialParams();\r\n    }\r\n\r\n    public updateAlignSpace (space: number): void {\r\n        this._alignSpace = space;\r\n    }\r\n\r\n    public getDefaultMaterial (): Material | null {\r\n        return this._defaultMat;\r\n    }\r\n\r\n    public updateRotation (pass: Pass | null): void {\r\n        if (pass) {\r\n            this.doUpdateRotation(pass);\r\n        }\r\n    }\r\n\r\n    private doUpdateRotation (pass: Pass): void {\r\n        const mode = this._renderInfo!.renderMode;\r\n        if (mode !== ParticleRenderMode.Mesh && this._alignSpace === ParticleAlignmentSpace.View) {\r\n            return;\r\n        }\r\n\r\n        if (this._alignSpace === ParticleAlignmentSpace.Local) {\r\n            this._particleSystem?.node.getRotation(_node_rot);\r\n        } else if (this._alignSpace === ParticleAlignmentSpace.World) {\r\n            this._particleSystem?.node.getWorldRotation(_node_rot);\r\n        } else if (this._alignSpace === ParticleAlignmentSpace.View) {\r\n            // Quat.fromEuler(_node_rot, 0.0, 0.0, 0.0);\r\n            _node_rot.set(0.0, 0.0, 0.0, 1.0);\r\n            const cameraLst: Camera[] | undefined = this._particleSystem?.node.scene.renderScene?.cameras;\r\n            if (cameraLst !== undefined) {\r\n                for (let i = 0; i < cameraLst?.length; ++i) {\r\n                    const camera: Camera = cameraLst[i];\r\n                    // eslint-disable-next-line max-len\r\n                    const checkCamera: boolean = !EDITOR_NOT_IN_PREVIEW ? (camera.visibility & this._particleSystem!.node.layer) === this._particleSystem!.node.layer : camera.name === 'Editor Camera';\r\n                    if (checkCamera) {\r\n                        Quat.fromViewUp(_node_rot, camera.forward);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            _node_rot.set(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n        pass.setUniform(this._uNodeRotHandle, _node_rot);\r\n    }\r\n\r\n    public updateScale (pass: Pass | null): void {\r\n        if (pass) {\r\n            this.doUpdateScale(pass);\r\n        }\r\n    }\r\n\r\n    private doUpdateScale (pass): void {\r\n        const nodeScale = this._node_scale;\r\n        switch (this._particleSystem?.scaleSpace) {\r\n        case ParticleSpace.Local:\r\n            this._particleSystem?.node.getScale(nodeScale);\r\n            break;\r\n        case ParticleSpace.World:\r\n            this._particleSystem?.node.getWorldScale(nodeScale);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n        // NOTE: the `_node_scale` should be a Vec3, but we implement `scale` uniform property as a Vec4,\r\n        // here we pass a temperate Vec4 object to prevent creating Vec4 object every time we set uniform.\r\n        pass.setUniform(this._uScaleHandle, _tempNodeScale.set(nodeScale.x, nodeScale.y, nodeScale.z));\r\n    }\r\n\r\n    private noise: ParticleNoise = new ParticleNoise();\r\n\r\n    public updateParticles (dt: number): number {\r\n        const ps = this._particleSystem;\r\n        if (!ps) {\r\n            return this._particles!.length;\r\n        }\r\n        ps.node.getWorldMatrix(_tempWorldTrans);\r\n        const mat: Material | null = ps.getMaterialInstance(0) || this._defaultMat;\r\n        const pass = mat!.passes[0];\r\n        this.doUpdateScale(pass);\r\n        this.doUpdateRotation(pass);\r\n\r\n        this._updateList.forEach((value: IParticleModule, key: string): void => {\r\n            // TODO(cjh): Bug here? _updateList is a Map, the old code uses `this._updateList['some_key'] = some_value;`\r\n            // to do the assignment which forEach will not take care of it.\r\n            // In order not to change the behavior in this PR ( https://github.com/cocos/cocos-engine/pull/17289 )\r\n            // We commented the update the particle module temporarily.\r\n            // value.update(ps.simulationSpace, _tempWorldTrans);\r\n        });\r\n\r\n        const trailModule = ps._trailModule;\r\n        const trailEnable = trailModule && trailModule.enable;\r\n        if (trailEnable) {\r\n            trailModule.update();\r\n        }\r\n\r\n        const useGravity = !ps.gravityModifier.isZero();\r\n        if (useGravity) {\r\n            if (ps.simulationSpace === ParticleSpace.Local) {\r\n                const r: Quat = ps.node.getRotation();\r\n                Mat4.fromQuat(this._localMat, r);\r\n                this._localMat.transpose(); // just consider rotation, use transpose as invert\r\n            }\r\n\r\n            if (ps.node.parent) {\r\n                const r: Quat = ps.node.parent.worldRotation;\r\n                Mat4.fromQuat(_tempParentInverse, r);\r\n                _tempParentInverse.transpose();\r\n            }\r\n        }\r\n\r\n        for (let i = this._particles!.length - 1; i >= 0; i--) {\r\n            const p = this._particles!.data[i];\r\n            p.remainingLifetime -= dt;\r\n            Vec3.set(p.animatedVelocity, 0, 0, 0);\r\n\r\n            if (p.remainingLifetime < 0.0) {\r\n                if (trailEnable) {\r\n                    trailModule.removeParticle(p);\r\n                }\r\n                this._particles!.removeAt(i);\r\n                continue;\r\n            }\r\n\r\n            // apply gravity when both the mode is not Constant and the value is not 0.\r\n            if (useGravity) {\r\n                const rand = isCurveTwoValues(ps.gravityModifier) ? pseudoRandom(p.randomSeed) : 0;\r\n                if (ps.simulationSpace === ParticleSpace.Local) {\r\n                    const time = 1 - p.remainingLifetime / p.startLifetime;\r\n                    const gravityFactor = -ps.gravityModifier.evaluate(time, rand)! * 9.8 * dt;\r\n                    this._gravity.x = 0.0;\r\n                    this._gravity.y = gravityFactor;\r\n                    this._gravity.z = 0.0;\r\n                    this._gravity.w = 1.0;\r\n                    if (!approx(gravityFactor, 0.0, EPSILON)) {\r\n                        if (ps.node.parent) {\r\n                            this._gravity = this._gravity.transformMat4(_tempParentInverse);\r\n                        }\r\n                        this._gravity = this._gravity.transformMat4(this._localMat);\r\n\r\n                        p.velocity.x += this._gravity.x;\r\n                        p.velocity.y += this._gravity.y;\r\n                        p.velocity.z += this._gravity.z;\r\n                    }\r\n                } else {\r\n                    // apply gravity.\r\n                    p.velocity.y -= ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, rand)! * 9.8 * dt;\r\n                }\r\n            }\r\n            Vec3.copy(p.ultimateVelocity, p.velocity);\r\n\r\n            this._runAnimateList.forEach((value): void => {\r\n                value.animate(p, dt);\r\n            });\r\n\r\n            Vec3.scaleAndAdd(p.position, p.position, p.ultimateVelocity, dt); // apply velocity.\r\n            if (trailEnable) {\r\n                trailModule.animate(p, dt);\r\n            }\r\n        }\r\n\r\n        this._model!.enabled = this._particles!.length > 0;\r\n        return this._particles!.length;\r\n    }\r\n\r\n    public getNoisePreview (out: number[], width: number, height: number): void {\r\n        this._runAnimateList.forEach((value): void => {\r\n            if (value.name === PARTICLE_MODULE_NAME.NOISE) {\r\n                const m = value as NoiseModule;\r\n                m.getNoisePreview(out, this._particleSystem!, width, height);\r\n            }\r\n        });\r\n    }\r\n\r\n    // internal function\r\n    public updateRenderData (): void {\r\n        // update vertex buffer\r\n        let idx = 0;\r\n        for (let i = 0; i < this._particles!.length; ++i) {\r\n            const p = this._particles!.data[i];\r\n            let fi = 0;\r\n            const textureModule = this._particleSystem!._textureAnimationModule;\r\n            if (textureModule && textureModule.enable) {\r\n                fi = p.frameIndex;\r\n            }\r\n            idx = i * 4;\r\n            this._fillDataFunc!(p, idx, fi);\r\n        }\r\n    }\r\n\r\n    public beforeRender (): void {\r\n        // because we use index buffer, per particle index count = 6.\r\n        this._model!.updateIA(this._particles!.length);\r\n    }\r\n\r\n    public getParticleCount (): number {\r\n        return this._particles!.length;\r\n    }\r\n\r\n    public onMaterialModified (index: number, material: Material): void {\r\n        if (!this._inited) {\r\n            return;\r\n        }\r\n\r\n        if (index === 0) {\r\n            this.updateMaterialParams();\r\n        } else {\r\n            this.updateTrailMaterial();\r\n        }\r\n    }\r\n\r\n    public onRebuildPSO (index: number, material: Material): void {\r\n        if (this._model && index === 0) {\r\n            this._model.setSubModelMaterial(0, material);\r\n        }\r\n        const trailModule = this._particleSystem!._trailModule;\r\n        const trailModel = trailModule?.getModel();\r\n        if (trailModel && index === 1) {\r\n            trailModel.setSubModelMaterial(0, material);\r\n        }\r\n    }\r\n\r\n    private _setFillFunc (): void {\r\n        if (this._renderInfo!.renderMode === ParticleRenderMode.Mesh) {\r\n            this._fillDataFunc = this._fillMeshData;\r\n        } else if (this._renderInfo!.renderMode === ParticleRenderMode.StrecthedBillboard) {\r\n            this._fillDataFunc = this._fillStrecthedData;\r\n        } else {\r\n            this._fillDataFunc = this._fillNormalData;\r\n        }\r\n    }\r\n\r\n    private _fillMeshData (p: Particle, idx: number, fi: number): void {\r\n        const particleVertexData = this._particleVertexData;\r\n        const i = idx / 4;\r\n        Vec3.copy(particleVertexData.position, p.position);\r\n        _tempAttribUV.z = fi;\r\n        Vec3.copy(particleVertexData.texcoord, _tempAttribUV);\r\n        Vec3.copy(particleVertexData.size, p.size);\r\n        Vec3.copy(particleVertexData.rotation, p.rotation);\r\n        particleVertexData.color = Color.toUint32(p.color);\r\n        this._model!.addParticleVertexData(i, particleVertexData);\r\n    }\r\n\r\n    private _fillStrecthedData (p: Particle, idx: number, fi: number): void {\r\n        const particleVertexData = this._particleVertexData;\r\n        if (!this._useInstance) {\r\n            for (let j = 0; j < 4; ++j) { // four verts per particle.\r\n                Vec3.copy(particleVertexData.position, p.position);\r\n                _tempAttribUV.x = _uvs[2 * j];\r\n                _tempAttribUV.y = _uvs[2 * j + 1];\r\n                _tempAttribUV.z = fi;\r\n                Vec3.copy(particleVertexData.texcoord, _tempAttribUV);\r\n                Vec3.copy(particleVertexData.size, p.size);\r\n                Vec3.copy(particleVertexData.rotation, p.rotation);\r\n                particleVertexData.color = Color.toUint32(p.color);\r\n                particleVertexData.velocity = p.ultimateVelocity;\r\n                this._model!.addParticleVertexData(idx++, particleVertexData);\r\n            }\r\n        } else {\r\n            this._fillStrecthedDataIns(p, idx, fi);\r\n        }\r\n    }\r\n\r\n    private _fillStrecthedDataIns (p: Particle, idx: number, fi: number): void {\r\n        const particleVertexData = this._particleVertexData;\r\n        const i = idx / 4;\r\n        Vec3.copy(particleVertexData.position, p.position);\r\n        _tempAttribUV.z = fi;\r\n        Vec3.copy(particleVertexData.texcoord, _tempAttribUV);\r\n        Vec3.copy(particleVertexData.size, p.size);\r\n        Vec3.copy(particleVertexData.rotation, p.rotation);\r\n        particleVertexData.color = Color.toUint32(p.color);\r\n        particleVertexData.velocity = p.ultimateVelocity;\r\n        this._model!.addParticleVertexData(i, particleVertexData);\r\n    }\r\n\r\n    private _fillNormalData (p: Particle, idx: number, fi: number): void {\r\n        const particleVertexData = this._particleVertexData;\r\n        if (!this._useInstance) {\r\n            for (let j = 0; j < 4; ++j) { // four verts per particle.\r\n                Vec3.copy(particleVertexData.position, p.position);\r\n                _tempAttribUV.x = _uvs[2 * j];\r\n                _tempAttribUV.y = _uvs[2 * j + 1];\r\n                _tempAttribUV.z = fi;\r\n                Vec3.copy(particleVertexData.texcoord, _tempAttribUV);\r\n                Vec3.copy(particleVertexData.size, p.size);\r\n                Vec3.copy(particleVertexData.rotation, p.rotation);\r\n                this._particleVertexData.color = Color.toUint32(p.color);\r\n                this._model!.addParticleVertexData(idx++, particleVertexData);\r\n            }\r\n        } else {\r\n            this._fillNormalDataIns(p, idx, fi);\r\n        }\r\n    }\r\n\r\n    private _fillNormalDataIns (p: Particle, idx: number, fi: number): void {\r\n        const particleVertexData = this._particleVertexData;\r\n        const i = idx / 4;\r\n        Vec3.copy(particleVertexData.position, p.position);\r\n        _tempAttribUV.z = fi;\r\n        Vec3.copy(particleVertexData.texcoord, _tempAttribUV);\r\n        Vec3.copy(particleVertexData.size, p.size);\r\n        Vec3.copy(particleVertexData.rotation, p.rotation);\r\n        this._particleVertexData.color = Color.toUint32(p.color);\r\n        this._model!.addParticleVertexData(i, particleVertexData);\r\n    }\r\n\r\n    public updateVertexAttrib (): void {\r\n        if (this._renderInfo!.renderMode !== ParticleRenderMode.Mesh) {\r\n            return;\r\n        }\r\n        if (this._renderInfo!.mesh) {\r\n            const format = this._renderInfo!.mesh.readAttributeFormat(0, AttributeName.ATTR_COLOR);\r\n            if (format) {\r\n                let type = Format.RGBA8;\r\n                for (let i = 0; i < FormatInfos.length; ++i) {\r\n                    if (FormatInfos[i].name === format.name) {\r\n                        type = i;\r\n                        break;\r\n                    }\r\n                }\r\n                this._vertAttrs[7] = createAttribute(ATTR_COLOR1, type, true, !this._useInstance ? 0 : 1);\r\n            } else { // mesh without vertex color\r\n                const type = Format.RGBA8;\r\n                this._vertAttrs[7] = createAttribute(ATTR_COLOR1, type, true, !this._useInstance ? 0 : 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setVertexAttrib (): void {\r\n        if (!this._useInstance) {\r\n            switch (this._renderInfo!.renderMode) {\r\n            case ParticleRenderMode.StrecthedBillboard:\r\n                this._vertAttrs = _vertex_attrs_stretch.slice();\r\n                break;\r\n            case ParticleRenderMode.Mesh:\r\n                this._vertAttrs = _vertex_attrs_mesh.slice();\r\n                break;\r\n            default:\r\n                this._vertAttrs = _vertex_attrs.slice();\r\n            }\r\n        } else {\r\n            this._setVertexAttribIns();\r\n        }\r\n    }\r\n\r\n    private _setVertexAttribIns (): void {\r\n        switch (this._renderInfo!.renderMode) {\r\n        case ParticleRenderMode.StrecthedBillboard:\r\n            this._vertAttrs = _vertex_attrs_stretch_ins.slice();\r\n            break;\r\n        case ParticleRenderMode.Mesh:\r\n            this._vertAttrs = _vertex_attrs_mesh_ins.slice();\r\n            break;\r\n        default:\r\n            this._vertAttrs = _vertex_attrs_ins.slice();\r\n        }\r\n    }\r\n\r\n    public updateMaterialParams (): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n\r\n        const ps = this._particleSystem;\r\n        const shareMaterial = ps.sharedMaterial;\r\n        if (shareMaterial != null) {\r\n            this._renderInfo!.mainTexture = shareMaterial.getProperty('mainTexture', 0) as Texture2D;\r\n        }\r\n\r\n        if (ps.sharedMaterial == null && this._defaultMat == null) {\r\n            _matInsInfo.parent = builtinResMgr.get<Material>('default-particle-material');\r\n            _matInsInfo.owner = this._particleSystem;\r\n            _matInsInfo.subModelIdx = 0;\r\n            this._defaultMat = new MaterialInstance(_matInsInfo);\r\n            _matInsInfo.parent = null!;\r\n            _matInsInfo.owner = null!;\r\n            _matInsInfo.subModelIdx = 0;\r\n            if (this._renderInfo!.mainTexture !== null) {\r\n                this._defaultMat.setProperty('mainTexture', this._renderInfo!.mainTexture);\r\n            }\r\n        }\r\n        const mat: Material = ps.getMaterialInstance(0) || this._defaultMat!;\r\n        if (ps.simulationSpace === ParticleSpace.World) {\r\n            this._defines[CC_USE_WORLD_SPACE] = true;\r\n        } else {\r\n            this._defines[CC_USE_WORLD_SPACE] = false;\r\n        }\r\n\r\n        const pass = mat.passes[0];\r\n        this._uScaleHandle = pass.getHandle('scale');\r\n        this._uLenHandle = pass.getHandle('frameTile_velLenScale');\r\n        this._uNodeRotHandle = pass.getHandle('nodeRotation');\r\n\r\n        const renderMode = this._renderInfo!.renderMode;\r\n        const vlenScale = this._frameTile_velLenScale;\r\n        if (renderMode === ParticleRenderMode.Billboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_BILLBOARD;\r\n        } else if (renderMode === ParticleRenderMode.StrecthedBillboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_STRETCHED_BILLBOARD;\r\n            vlenScale.z = this._renderInfo!.velocityScale;\r\n            vlenScale.w = this._renderInfo!.lengthScale;\r\n        } else if (renderMode === ParticleRenderMode.HorizontalBillboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_HORIZONTAL_BILLBOARD;\r\n        } else if (renderMode === ParticleRenderMode.VerticalBillboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_VERTICAL_BILLBOARD;\r\n        } else if (renderMode === ParticleRenderMode.Mesh) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_MESH;\r\n        } else {\r\n            warn(`particle system renderMode ${renderMode} not support.`);\r\n        }\r\n        const textureModule = ps._textureAnimationModule;\r\n        if (textureModule && textureModule.enable) {\r\n            const texture = mat.getProperty('mainTexture', 0) as Texture2D | null;\r\n            if (texture && texture.isAlphaAtlas) {\r\n                textureModule.scaleNumTilesXY(2);\r\n                this._defines[CC_USE_EMBEDDED_ALPHA] = true;\r\n            }\r\n            Vec4.copy(this._tmp_velLenScale, vlenScale); // fix textureModule switch bug\r\n            Vec2.set(this._tmp_velLenScale, textureModule.numTilesX, textureModule.numTilesY);\r\n            pass.setUniform(this._uLenHandle, this._tmp_velLenScale);\r\n        } else {\r\n            pass.setUniform(this._uLenHandle, vlenScale);\r\n        }\r\n\r\n        let enable = false;\r\n        const roationModule = this._particleSystem._rotationOvertimeModule;\r\n        enable = roationModule ? roationModule.enable : false;\r\n        this._defines[ROTATION_OVER_TIME_MODULE_ENABLE] = enable;\r\n        this._defines[INSTANCE_PARTICLE] = this._useInstance;\r\n\r\n        mat.recompileShaders(this._defines);\r\n        if (this._model) {\r\n            this._model.updateMaterial(mat);\r\n        }\r\n    }\r\n\r\n    public updateTrailMaterial (): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n        const ps = this._particleSystem;\r\n        const trailModule = ps._trailModule;\r\n        if (trailModule && trailModule.enable) {\r\n            if (ps.simulationSpace === ParticleSpace.World || trailModule.space === ParticleSpace.World) {\r\n                this._trailDefines[CC_USE_WORLD_SPACE] = true;\r\n            } else {\r\n                this._trailDefines[CC_USE_WORLD_SPACE] = false;\r\n            }\r\n            let mat: Material | null = ps.getMaterialInstance(1);\r\n            if (mat === null && this._defaultTrailMat === null) {\r\n                _matInsInfo.parent = builtinResMgr.get<Material>('default-trail-material');\r\n                _matInsInfo.owner = this._particleSystem;\r\n                _matInsInfo.subModelIdx = 1;\r\n                this._defaultTrailMat = new MaterialInstance(_matInsInfo);\r\n                _matInsInfo.parent = null!;\r\n                _matInsInfo.owner = null!;\r\n                _matInsInfo.subModelIdx = 0;\r\n            }\r\n            mat = mat || this._defaultTrailMat!;\r\n            const texture = mat.getProperty('mainTexture', 0) as Texture2D | null;\r\n            if (texture && texture.isAlphaAtlas) {\r\n                this._trailDefines[CC_USE_EMBEDDED_ALPHA] = true;\r\n            }\r\n            mat.recompileShaders(this._trailDefines);\r\n            trailModule.updateMaterial();\r\n        }\r\n    }\r\n\r\n    public setUseInstance (value: boolean): void {\r\n        if (this._useInstance === value) {\r\n            return;\r\n        }\r\n        this._useInstance = value;\r\n        if (this._model) {\r\n            this._model.useInstance = value;\r\n            this._model.doDestroy();\r\n        }\r\n        this.updateRenderMode();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { builtinResMgr } from '../../asset/asset-manager';\r\nimport { Material, Texture2D } from '../../asset/assets';\r\nimport { AttributeName, Format, Attribute, API, deviceManager, FormatInfos } from '../../gfx';\r\nimport { Mat4, Vec2, Vec4, Quat, Vec3, warn } from '../../core';\r\nimport { MaterialInstance, IMaterialInstanceInfo } from '../../render-scene/core/material-instance';\r\nimport { getBindingFromHandle, MacroRecord } from '../../render-scene/core/pass-utils';\r\nimport { ParticleAlignmentSpace, ParticleRenderMode, ParticleSpace } from '../enum';\r\nimport { Particle, IParticleModule } from '../particle';\r\nimport { packGradientRange } from '../animator/gradient-range';\r\nimport { Pass } from '../../render-scene/core/pass';\r\nimport { packCurveRangeXYZ, packCurveRangeZ, packCurveRangeXYZW, packCurveRangeN, packCurveRangeXY } from '../animator/curve-range';\r\nimport { ParticleSystemRendererBase } from './particle-system-renderer-base';\r\nimport { Camera } from '../../render-scene/scene/camera';\r\nimport type { ParticleSystem } from '../particle-system';\r\nimport type ParticleSystemRenderer from './particle-system-renderer-data';\r\n\r\nconst _tempNodeScale = new Vec4();\r\nconst _tempWorldTrans = new Mat4();\r\nconst _tempVec4 = new Vec4();\r\nconst _world_rot = new Quat();\r\nconst _node_rot = new Quat();\r\nconst _node_euler = new Vec3();\r\n\r\nconst _sample_num = 32;\r\nconst _sample_interval = 1.0 / _sample_num;\r\n\r\nconst CC_USE_WORLD_SPACE = 'CC_USE_WORLD_SPACE';\r\nconst CC_USE_EMBEDDED_ALPHA = 'CC_USE_EMBEDDED_ALPHA';\r\n\r\nconst CC_RENDER_MODE = 'CC_RENDER_MODE';\r\nconst RENDER_MODE_BILLBOARD = 0;\r\nconst RENDER_MODE_STRETCHED_BILLBOARD = 1;\r\nconst RENDER_MODE_HORIZONTAL_BILLBOARD = 2;\r\nconst RENDER_MODE_VERTICAL_BILLBOARD = 3;\r\nconst RENDER_MODE_MESH = 4;\r\n\r\nconst COLOR_OVER_TIME_MODULE_ENABLE = 'COLOR_OVER_TIME_MODULE_ENABLE';\r\nconst ROTATION_OVER_TIME_MODULE_ENABLE = 'ROTATION_OVER_TIME_MODULE_ENABLE';\r\nconst SIZE_OVER_TIME_MODULE_ENABLE = 'SIZE_OVER_TIME_MODULE_ENABLE';\r\nconst VELOCITY_OVER_TIME_MODULE_ENABLE = 'VELOCITY_OVER_TIME_MODULE_ENABLE';\r\nconst FORCE_OVER_TIME_MODULE_ENABLE = 'FORCE_OVER_TIME_MODULE_ENABLE';\r\nconst TEXTURE_ANIMATION_MODULE_ENABLE = 'TEXTURE_ANIMATION_MODULE_ENABLE';\r\nconst USE_VK_SHADER = 'USE_VK_SHADER';\r\nconst INSTANCE_PARTICLE = 'CC_INSTANCE_PARTICLE';\r\n\r\nconst _vert_attr_name = {\r\n    POSITION_STARTTIME: 'a_position_starttime',\r\n    VERT_SIZE_UV: 'a_size_uv',\r\n    VERT_ROTATION_UV: 'a_rotation_uv',\r\n    COLOR: 'a_color',\r\n    DIR_LIFE: 'a_dir_life',\r\n    RANDOM_SEED: 'a_rndSeed',\r\n    VERT_SIZE_FID: 'a_size_fid',\r\n    VERT_ROTATION: 'a_rotation',\r\n    VERT_UV: 'a_uv',\r\n};\r\n\r\nconst _gpu_vert_attr = [\r\n    new Attribute(_vert_attr_name.POSITION_STARTTIME, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.VERT_SIZE_UV, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.VERT_ROTATION_UV, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.COLOR, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.DIR_LIFE, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.RANDOM_SEED, Format.R32F),\r\n];\r\n\r\nconst _gpu_vert_attr_mesh = [\r\n    new Attribute(_vert_attr_name.POSITION_STARTTIME, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.VERT_SIZE_UV, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.VERT_ROTATION_UV, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.COLOR, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.DIR_LIFE, Format.RGBA32F),\r\n    new Attribute(_vert_attr_name.RANDOM_SEED, Format.R32F),\r\n    new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGB32F),      // uv,frame idx\r\n    new Attribute(AttributeName.ATTR_TEX_COORD3, Format.RGB32F),     // mesh position\r\n    new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F),         // mesh normal\r\n    new Attribute(AttributeName.ATTR_COLOR1, Format.RGBA8, true),    // mesh color\r\n];\r\n\r\nconst _gpu_vert_attr_ins = [\r\n    new Attribute(_vert_attr_name.POSITION_STARTTIME, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.VERT_SIZE_FID, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.VERT_ROTATION, Format.RGB32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.COLOR, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.DIR_LIFE, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.RANDOM_SEED, Format.R32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.VERT_UV, Format.RGB32F, false, 1),\r\n];\r\n\r\nconst _gpu_vert_attr_mesh_ins = [\r\n    new Attribute(_vert_attr_name.POSITION_STARTTIME, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.VERT_SIZE_FID, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.VERT_ROTATION, Format.RGB32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.COLOR, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.DIR_LIFE, Format.RGBA32F, false, 0, true),\r\n    new Attribute(_vert_attr_name.RANDOM_SEED, Format.R32F, false, 0, true),\r\n    new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGB32F, false, 1),      // mesh uv\r\n    new Attribute(AttributeName.ATTR_TEX_COORD3, Format.RGB32F, false, 1),     // mesh position\r\n    new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F, false, 1),         // mesh normal\r\n    new Attribute(AttributeName.ATTR_COLOR1, Format.RGBA8, true, 1),           // mesh color\r\n];\r\n\r\nconst _matInsInfo: IMaterialInstanceInfo = {\r\n    parent: null!,\r\n    owner: null!,\r\n    subModelIdx: 0,\r\n};\r\n\r\nexport default class ParticleSystemRendererGPU extends ParticleSystemRendererBase {\r\n    private _defines: MacroRecord;\r\n    private _frameTile_velLenScale: Vec4;\r\n    private _unifrom_velLenScale: Vec4;\r\n    private _tmp_velLenScale: Vec4;\r\n    private _node_scale: Vec3;\r\n    protected _vertAttrs: Attribute[] = [];\r\n    protected _defaultMat: Material | null = null;\r\n    private _particleNum = 0;\r\n    private _tempParticle: Particle | null = null;\r\n    private _colorTexture: Texture2D | null = null;\r\n    private _forceTexture: Texture2D | null = null;\r\n    private _velocityTexture: Texture2D | null = null;\r\n    private _rotationTexture: Texture2D | null = null;\r\n    private _sizeTexture: Texture2D | null = null;\r\n    private _animTexture: Texture2D | null = null;\r\n    private _colorData: Uint8Array | null = null;\r\n    private _forceData: Float32Array | null = null;\r\n    private _velocityData: Float32Array | null = null;\r\n    private _rotationData: Float32Array | null = null;\r\n    private _sizeData: Float32Array | null = null;\r\n    private _animData: Float32Array | null = null;\r\n    private _uTimeHandle = 0;\r\n    private _uRotHandle = 0;\r\n    private _uNodeRotHandle = 0;\r\n    private _alignSpace = ParticleAlignmentSpace.View;\r\n    private _inited = false;\r\n\r\n    constructor (info: ParticleSystemRenderer) {\r\n        super(info);\r\n\r\n        this._frameTile_velLenScale = new Vec4(1, 1, 0, 0);\r\n        this._unifrom_velLenScale = this._frameTile_velLenScale.clone();\r\n        this._tmp_velLenScale = this._frameTile_velLenScale.clone();\r\n        this._node_scale = new Vec3();\r\n        this._defines = {\r\n            CC_USE_WORLD_SPACE: true,\r\n            CC_USE_BILLBOARD: true,\r\n            CC_USE_STRETCHED_BILLBOARD: false,\r\n            CC_USE_HORIZONTAL_BILLBOARD: false,\r\n            CC_USE_VERTICAL_BILLBOARD: false,\r\n            COLOR_OVER_TIME_MODULE_ENABLE: false,\r\n        };\r\n\r\n        this._tempParticle = new Particle(null);\r\n        this._particleNum = 0;\r\n    }\r\n\r\n    public onInit (ps: ParticleSystem): void {\r\n        super.onInit(ps);\r\n        this._setVertexAttrib();\r\n        this._initModel();\r\n        this.updateMaterialParams();\r\n        this.setVertexAttributes();\r\n        this._inited = true;\r\n    }\r\n\r\n    public updateRenderMode (): void {\r\n        this._setVertexAttrib();\r\n        this.updateMaterialParams();\r\n        this.setVertexAttributes();\r\n    }\r\n\r\n    public setVertexAttributes (): void {\r\n        super.setVertexAttributes();\r\n        this._model!.constructAttributeIndex();\r\n    }\r\n\r\n    public clear (): void {\r\n        super.clear();\r\n        this._particleNum = 0;\r\n        this.updateRenderData();\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        super.onDestroy();\r\n        if (this._forceTexture) this._forceTexture.destroy();\r\n        if (this._velocityTexture) this._velocityTexture.destroy();\r\n        if (this._colorTexture) this._colorTexture.destroy();\r\n        if (this._sizeTexture) this._sizeTexture.destroy();\r\n        if (this._rotationTexture) this._rotationTexture.destroy();\r\n        if (this._animTexture) this._animTexture.destroy();\r\n        this._forceData = null;\r\n        this._velocityData = null;\r\n        this._colorData = null;\r\n        this._sizeData = null;\r\n        this._rotationData = null;\r\n        this._animData = null;\r\n    }\r\n\r\n    public enableModule (name: string, val: boolean, pm: IParticleModule): void {\r\n        const mat: Material | null = this._particleSystem?.getMaterialInstance(0) || this._defaultMat;\r\n        if (!mat) {\r\n            return;\r\n        }\r\n        this.initShaderUniform(mat);\r\n        mat.recompileShaders(this._defines);\r\n        if (this._model) {\r\n            this._model.setSubModelMaterial(0, mat);\r\n        }\r\n    }\r\n\r\n    public getFreeParticle (): Particle | null {\r\n        if (this._particleSystem && this._particleNum >= this._particleSystem?.capacity) {\r\n            return null;\r\n        }\r\n\r\n        return this._tempParticle;\r\n    }\r\n\r\n    public setNewParticle (p: Particle): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n        this._model!.addGPUParticleVertexData(p, this._particleNum, this._particleSystem.time);\r\n        this._particleNum++;\r\n    }\r\n\r\n    public getDefaultMaterial (): Material | null {\r\n        return this._defaultMat;\r\n    }\r\n\r\n    public updateRotation (pass: Pass | null): void {\r\n        if (pass) {\r\n            this.doUpdateRotation(pass);\r\n        }\r\n    }\r\n\r\n    private doUpdateRotation (pass): void {\r\n        const mode = this._renderInfo!.renderMode;\r\n        if (mode !== ParticleRenderMode.Mesh && this._alignSpace === ParticleAlignmentSpace.View) {\r\n            return;\r\n        }\r\n\r\n        if (this._alignSpace === ParticleAlignmentSpace.Local) {\r\n            this._particleSystem?.node.getRotation(_node_rot);\r\n        } else if (this._alignSpace === ParticleAlignmentSpace.World) {\r\n            this._particleSystem?.node.getWorldRotation(_node_rot);\r\n        } else if (this._alignSpace === ParticleAlignmentSpace.View) {\r\n            // Quat.fromEuler(_node_rot, 0.0, 0.0, 0.0);\r\n            _node_rot.set(0.0, 0.0, 0.0, 1.0);\r\n            const cameraLst: Camera[] | undefined = this._particleSystem?.node.scene.renderScene?.cameras;\r\n            if (cameraLst !== undefined && this._particleSystem) {\r\n                for (let i = 0; i < cameraLst?.length; ++i) {\r\n                    const camera: Camera = cameraLst[i];\r\n                    // eslint-disable-next-line max-len\r\n                    const checkCamera: boolean = !EDITOR_NOT_IN_PREVIEW ? (camera.visibility & this._particleSystem.node.layer) === this._particleSystem.node.layer : camera.name === 'Editor Camera';\r\n                    if (checkCamera) {\r\n                        Quat.fromViewUp(_node_rot, camera.forward);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            _node_rot.set(0.0, 0.0, 0.0, 1.0);\r\n        }\r\n        pass.setUniform(this._uNodeRotHandle, _node_rot);\r\n    }\r\n\r\n    public updateScale (pass: Pass | null): void {\r\n        if (pass) {\r\n            this.doUpdateScale(pass);\r\n        }\r\n    }\r\n\r\n    private doUpdateScale (pass): void {\r\n        const nodeScale = this._node_scale;\r\n        switch (this._particleSystem?.scaleSpace) {\r\n        case ParticleSpace.Local:\r\n            this._particleSystem.node.getScale(nodeScale);\r\n            break;\r\n        case ParticleSpace.World:\r\n            this._particleSystem.node.getWorldScale(nodeScale);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n        // NOTE: the `_node_scale` should be a Vec3, but we implement `scale` uniform property as a Vec4,\r\n        // here we pass a temperate Vec4 object to prevent creating Vec4 object every time we set uniform.\r\n        pass.setUniform(pass.getHandle('scale'), _tempNodeScale.set(nodeScale.x, nodeScale.y, nodeScale.z));\r\n    }\r\n\r\n    public updateParticles (dt: number): number {\r\n        if (!this._particleSystem) {\r\n            return this._particleNum;\r\n        }\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            const mat: Material | null = this._particleSystem.getMaterialInstance(0) || this._defaultMat;\r\n\r\n            this._particleSystem.node.getWorldMatrix(_tempWorldTrans);\r\n            switch (this._particleSystem.scaleSpace) {\r\n            case ParticleSpace.Local:\r\n                this._particleSystem.node.getScale(this._node_scale);\r\n                break;\r\n            case ParticleSpace.World:\r\n                this._particleSystem.node.getWorldScale(this._node_scale);\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n\r\n            this.initShaderUniform(mat!);\r\n        }\r\n        this._particleNum = this._model!.updateGPUParticles(this._particleNum, this._particleSystem.time, dt);\r\n        this.updateShaderUniform(dt);\r\n        this._model!.enabled = this._particleNum > 0;\r\n        return this._particleNum;\r\n    }\r\n\r\n    // internal function\r\n    public updateRenderData (): void {\r\n    }\r\n\r\n    public beforeRender (): void {\r\n        // update vertex buffer\r\n        this._model!.updateIA(this._particleNum);\r\n    }\r\n\r\n    public updateAlignSpace (space: number): void {\r\n        this._alignSpace = space;\r\n    }\r\n\r\n    public updateShaderUniform (dt: number): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n        const mat: Material | null = this._particleSystem.getMaterialInstance(0) || this._defaultMat;\r\n        if (!mat) {\r\n            return;\r\n        }\r\n\r\n        const pass = mat.passes[0];\r\n        _tempVec4.x = this._particleSystem.time;\r\n        _tempVec4.y = dt;\r\n        pass.setUniform(this._uTimeHandle, _tempVec4);\r\n\r\n        this._particleSystem.node.getWorldRotation(_world_rot);\r\n        pass.setUniform(this._uRotHandle, _world_rot);\r\n\r\n        this.doUpdateRotation(pass);\r\n    }\r\n\r\n    public initShaderUniform (mat: Material): void {\r\n        const pass = mat.passes[0];\r\n\r\n        this._uTimeHandle = pass.getHandle('u_timeDelta');\r\n        this._uRotHandle = pass.getHandle('u_worldRot');\r\n        this._uNodeRotHandle = pass.getHandle('nodeRotation');\r\n\r\n        this.doUpdateScale(pass);\r\n        pass.setUniform(pass.getHandle('frameTile_velLenScale'), this._unifrom_velLenScale);\r\n        _tempVec4.x = _sample_num;\r\n        _tempVec4.y = _sample_interval;\r\n        pass.setUniform(pass.getHandle('u_sampleInfo'), _tempVec4);\r\n\r\n        let enable = false;\r\n        // force\r\n        const forceModule = this._particleSystem?._forceOvertimeModule;\r\n        enable = forceModule ? forceModule.enable : false;\r\n        this._defines[FORCE_OVER_TIME_MODULE_ENABLE] = enable;\r\n        if (enable) {\r\n            const packed = packCurveRangeXYZ(this._forceTexture, this._forceData, _sample_num, forceModule!.x, forceModule!.y, forceModule!.z);\r\n            this._forceTexture = packed.texture;\r\n            this._forceData = packed.texdata;\r\n            const handle = pass.getHandle('force_over_time_tex0');\r\n            const binding = getBindingFromHandle(handle);\r\n            pass.bindSampler(binding, this._forceTexture.getGFXSampler()!);\r\n            pass.bindTexture(binding, this._forceTexture.getGFXTexture()!);\r\n            const spaceHandle = pass.getHandle('u_force_space');\r\n            pass.setUniform(spaceHandle, forceModule!.space);\r\n            const modeHandle = pass.getHandle('u_force_mode');\r\n            pass.setUniform(modeHandle, this._forceTexture.height);\r\n        }\r\n\r\n        // velocity\r\n        const velocityModule = this._particleSystem?._velocityOvertimeModule;\r\n        enable = velocityModule ? velocityModule.enable : false;\r\n        this._defines[VELOCITY_OVER_TIME_MODULE_ENABLE] = enable;\r\n        if (enable) {\r\n            const packed = packCurveRangeXYZW(\r\n                this._velocityTexture,\r\n                this._velocityData,\r\n                _sample_num,\r\n                velocityModule!.x,\r\n                velocityModule!.y,\r\n                velocityModule!.z,\r\n                velocityModule!.speedModifier,\r\n            );\r\n            this._velocityTexture = packed.texture;\r\n            this._velocityData = packed.texdata;\r\n            const handle = pass.getHandle('velocity_over_time_tex0');\r\n            const binding = getBindingFromHandle(handle);\r\n            pass.bindSampler(binding, this._velocityTexture.getGFXSampler()!);\r\n            pass.bindTexture(binding, this._velocityTexture.getGFXTexture()!);\r\n            const spaceHandle = pass.getHandle('u_velocity_space');\r\n            pass.setUniform(spaceHandle, velocityModule!.space);\r\n            const modeHandle = pass.getHandle('u_velocity_mode');\r\n            pass.setUniform(modeHandle, this._velocityTexture.height);\r\n        }\r\n\r\n        // color module\r\n        const colorModule = this._particleSystem?._colorOverLifetimeModule;\r\n        enable = colorModule ? colorModule.enable : false;\r\n        this._defines[COLOR_OVER_TIME_MODULE_ENABLE] = enable;\r\n        if (enable) {\r\n            const packed = packGradientRange(this._colorTexture, this._colorData, _sample_num, colorModule!.color);\r\n            this._colorTexture = packed.texture;\r\n            this._colorData = packed.texdata;\r\n            const handle = pass.getHandle('color_over_time_tex0');\r\n            const binding = getBindingFromHandle(handle);\r\n            pass.bindSampler(binding, this._colorTexture.getGFXSampler()!);\r\n            pass.bindTexture(binding, this._colorTexture.getGFXTexture()!);\r\n            const modeHandle = pass.getHandle('u_color_mode');\r\n            pass.setUniform(modeHandle, this._colorTexture.height);\r\n        }\r\n\r\n        // rotation module\r\n        const roationModule = this._particleSystem?._rotationOvertimeModule;\r\n        enable = roationModule ? roationModule.enable : false;\r\n        this._defines[ROTATION_OVER_TIME_MODULE_ENABLE] = enable;\r\n        if (enable) {\r\n            let packed;\r\n            if (roationModule!.separateAxes) {\r\n                // eslint-disable-next-line max-len\r\n                packed = packCurveRangeXYZ(this._rotationTexture, this._rotationData, _sample_num, roationModule!.x, roationModule!.y, roationModule!.z);\r\n            } else {\r\n                packed = packCurveRangeZ(this._rotationTexture, this._rotationData, _sample_num, roationModule!.z);\r\n            }\r\n            this._rotationTexture = packed.texture;\r\n            this._rotationData = packed.texdata;\r\n            if (this._rotationTexture) {\r\n                const handle = pass.getHandle('rotation_over_time_tex0');\r\n                const binding = getBindingFromHandle(handle);\r\n                pass.bindSampler(binding, this._rotationTexture.getGFXSampler()!);\r\n                pass.bindTexture(binding, this._rotationTexture.getGFXTexture()!);\r\n                const modeHandle = pass.getHandle('u_rotation_mode');\r\n                pass.setUniform(modeHandle, this._rotationTexture.height);\r\n            }\r\n        }\r\n\r\n        // size module\r\n        const sizeModule = this._particleSystem?._sizeOvertimeModule;\r\n        enable = sizeModule ? sizeModule.enable : false;\r\n        this._defines[SIZE_OVER_TIME_MODULE_ENABLE] = enable;\r\n        if (enable) {\r\n            let packed;\r\n            if (sizeModule!.separateAxes) {\r\n                packed = packCurveRangeXYZ(this._sizeTexture, this._sizeData, _sample_num, sizeModule!.x, sizeModule!.y, sizeModule!.z, true);\r\n            } else {\r\n                packed = packCurveRangeN(this._sizeTexture, this._sizeData, _sample_num, sizeModule!.size, true);\r\n            }\r\n            this._sizeTexture = packed.texture;\r\n            this._sizeData = packed.texdata;\r\n            if (this._sizeTexture) {\r\n                const handle = pass.getHandle('size_over_time_tex0');\r\n                const binding = getBindingFromHandle(handle);\r\n                pass.bindSampler(binding, this._sizeTexture.getGFXSampler()!);\r\n                pass.bindTexture(binding, this._sizeTexture.getGFXTexture()!);\r\n                const modeHandle = pass.getHandle('u_size_mode');\r\n                pass.setUniform(modeHandle, this._sizeTexture.height);\r\n            }\r\n        }\r\n\r\n        // texture module\r\n        const textureModule = this._particleSystem?._textureAnimationModule;\r\n        enable = textureModule ? textureModule.enable : false;\r\n        this._defines[TEXTURE_ANIMATION_MODULE_ENABLE] = enable;\r\n        if (enable) {\r\n            // eslint-disable-next-line max-len\r\n            const packed = packCurveRangeXY(this._animTexture, this._animData, _sample_num, textureModule!.startFrame, textureModule!.frameOverTime, true);\r\n            this._animTexture = packed.texture;\r\n            this._animData = packed.texdata;\r\n            const handle = pass.getHandle('texture_animation_tex0');\r\n            const binding = getBindingFromHandle(handle);\r\n            pass.bindSampler(binding, this._animTexture.getGFXSampler()!);\r\n            pass.bindTexture(binding, this._animTexture.getGFXTexture()!);\r\n            const infoHandle = pass.getHandle('u_anim_info');\r\n            _tempVec4.x = this._animTexture.height;\r\n            _tempVec4.y = textureModule!.numTilesX * textureModule!.numTilesY;\r\n            _tempVec4.z = textureModule!.cycleCount;\r\n            pass.setUniform(infoHandle, _tempVec4);\r\n        }\r\n\r\n        this._defines[USE_VK_SHADER] = deviceManager.gfxDevice.gfxAPI === API.VULKAN;\r\n        this._defines[INSTANCE_PARTICLE] = this._useInstance;\r\n    }\r\n\r\n    public getParticleCount (): number {\r\n        return this._particleNum;\r\n    }\r\n\r\n    public onMaterialModified (index: number, material: Material): void {\r\n        if (!this._inited) {\r\n            return;\r\n        }\r\n        this.updateMaterialParams();\r\n    }\r\n\r\n    public onRebuildPSO (index: number, material: Material): void {\r\n        if (this._model && index === 0) {\r\n            this._model.setSubModelMaterial(0, material);\r\n        }\r\n    }\r\n\r\n    public updateVertexAttrib (): void {\r\n        if (this._renderInfo!.renderMode !== ParticleRenderMode.Mesh) {\r\n            return;\r\n        }\r\n        if (this._renderInfo!.mesh) {\r\n            const format = this._renderInfo!.mesh.readAttributeFormat(0, AttributeName.ATTR_COLOR);\r\n            if (format) {\r\n                let type = Format.RGBA8;\r\n                for (let i = 0; i < FormatInfos.length; ++i) {\r\n                    if (FormatInfos[i].name === format.name) {\r\n                        type = i;\r\n                        break;\r\n                    }\r\n                }\r\n                this._vertAttrs[9] = new Attribute(AttributeName.ATTR_COLOR1, type, true, !this._useInstance ? 0 : 1);\r\n            } else { // mesh without vertex color\r\n                const type = Format.RGBA8;\r\n                this._vertAttrs[9] = new Attribute(AttributeName.ATTR_COLOR1, type, true, !this._useInstance ? 0 : 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setVertexAttrib (): void {\r\n        if (!this._useInstance) {\r\n            switch (this._renderInfo!.renderMode) {\r\n            case ParticleRenderMode.StrecthedBillboard:\r\n                this._vertAttrs = _gpu_vert_attr.slice();\r\n                break;\r\n            case ParticleRenderMode.Mesh:\r\n                this._vertAttrs = _gpu_vert_attr_mesh.slice();\r\n                break;\r\n            default:\r\n                this._vertAttrs = _gpu_vert_attr.slice();\r\n            }\r\n        } else {\r\n            this._setVertexAttribIns();\r\n        }\r\n    }\r\n\r\n    private _setVertexAttribIns (): void {\r\n        switch (this._renderInfo!.renderMode) {\r\n        case ParticleRenderMode.StrecthedBillboard:\r\n            this._vertAttrs = _gpu_vert_attr_ins.slice();\r\n            break;\r\n        case ParticleRenderMode.Mesh:\r\n            this._vertAttrs = _gpu_vert_attr_mesh_ins.slice();\r\n            break;\r\n        default:\r\n            this._vertAttrs = _gpu_vert_attr_ins.slice();\r\n        }\r\n    }\r\n\r\n    public updateMaterialParams (): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n        const ps = this._particleSystem;\r\n        const shareMaterial = ps.sharedMaterial;\r\n        if (shareMaterial !== null) {\r\n            this._renderInfo!.mainTexture = shareMaterial.getProperty('mainTexture', 0) as Texture2D;\r\n        }\r\n\r\n        if (ps.sharedMaterial == null && this._defaultMat == null) {\r\n            _matInsInfo.parent = builtinResMgr.get<Material>('default-particle-gpu-material');\r\n            _matInsInfo.owner = ps;\r\n            _matInsInfo.subModelIdx = 0;\r\n            this._defaultMat = new MaterialInstance(_matInsInfo);\r\n            _matInsInfo.parent = null!;\r\n            _matInsInfo.owner = null!;\r\n            _matInsInfo.subModelIdx = 0;\r\n            if (this._renderInfo!.mainTexture !== null) {\r\n                this._defaultMat.setProperty('mainTexture', this._renderInfo!.mainTexture);\r\n            }\r\n        }\r\n        const mat: Material | null = ps.getMaterialInstance(0) || this._defaultMat!;\r\n\r\n        ps.node.getWorldMatrix(_tempWorldTrans);\r\n\r\n        if (ps.simulationSpace === ParticleSpace.World) {\r\n            this._defines[CC_USE_WORLD_SPACE] = true;\r\n        } else {\r\n            this._defines[CC_USE_WORLD_SPACE] = false;\r\n        }\r\n        const renderMode = this._renderInfo!.renderMode;\r\n        if (renderMode === ParticleRenderMode.Billboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_BILLBOARD;\r\n        } else if (renderMode === ParticleRenderMode.StrecthedBillboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_STRETCHED_BILLBOARD;\r\n            this._frameTile_velLenScale.z = this._renderInfo!.velocityScale;\r\n            this._frameTile_velLenScale.w = this._renderInfo!.lengthScale;\r\n        } else if (renderMode === ParticleRenderMode.HorizontalBillboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_HORIZONTAL_BILLBOARD;\r\n        } else if (renderMode === ParticleRenderMode.VerticalBillboard) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_VERTICAL_BILLBOARD;\r\n        } else if (renderMode === ParticleRenderMode.Mesh) {\r\n            this._defines[CC_RENDER_MODE] = RENDER_MODE_MESH;\r\n        } else {\r\n            warn(`particle system renderMode ${renderMode} not support.`);\r\n        }\r\n        const textureModule = ps._textureAnimationModule;\r\n        if (textureModule && textureModule.enable) {\r\n            const texture = mat.getProperty('mainTexture', 0) as Texture2D | null;\r\n            if (texture && texture.isAlphaAtlas) {\r\n                textureModule.scaleNumTilesXY(2);\r\n                this._defines[CC_USE_EMBEDDED_ALPHA] = true;\r\n            }\r\n            Vec2.set(this._frameTile_velLenScale, textureModule.numTilesX, textureModule.numTilesY);\r\n            Vec4.copy(this._unifrom_velLenScale, this._frameTile_velLenScale);\r\n        } else {\r\n            this._tmp_velLenScale.z = this._frameTile_velLenScale.z;\r\n            this._tmp_velLenScale.w = this._frameTile_velLenScale.w;\r\n            Vec4.copy(this._unifrom_velLenScale, this._tmp_velLenScale);\r\n        }\r\n\r\n        this.initShaderUniform(mat);\r\n\r\n        mat.recompileShaders(this._defines);\r\n\r\n        if (this._model) {\r\n            this._model.updateMaterial(mat);\r\n        }\r\n    }\r\n\r\n    public setUseInstance (value: boolean): void {\r\n        if (this._useInstance === value) {\r\n            return;\r\n        }\r\n        this._useInstance = value;\r\n        if (this._model) {\r\n            this._model.useInstance = value;\r\n            this._model.doDestroy();\r\n        }\r\n        this.updateRenderMode();\r\n    }\r\n\r\n    public getNoisePreview (out: number[], width: number, height: number): void {\r\n\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, type, serializable, disallowAnimation, visible } from 'cc.decorator';\r\nimport { Mesh } from '../../3d';\r\nimport { Material, Texture2D } from '../../asset/assets';\r\nimport { ParticleAlignmentSpace, ParticleRenderMode } from '../enum';\r\nimport ParticleSystemRendererCPU from './particle-system-renderer-cpu';\r\nimport ParticleSystemRendererGPU from './particle-system-renderer-gpu';\r\nimport { director } from '../../game/director';\r\nimport { Device, Format, FormatFeatureBit } from '../../gfx';\r\nimport { errorID, warnID, cclegacy } from '../../core';\r\n\r\nimport type { ParticleSystem } from '../particle-system';\r\n\r\nfunction isSupportGPUParticle (): boolean {\r\n    const device: Device = director.root!.device;\r\n    if (device.capabilities.maxVertexTextureUnits >= 8 && (device.getFormatFeatures(Format.RGBA32F)\r\n        & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE))) {\r\n        return true;\r\n    }\r\n\r\n    cclegacy.warn('Maybe the device has restrictions on vertex textures or does not support float textures.');\r\n    return false;\r\n}\r\n\r\n@ccclass('cc.ParticleSystemRenderer')\r\nexport default class ParticleSystemRenderer {\r\n    /**\r\n     * @zh 设定粒子生成模式。\r\n     */\r\n    @type(ParticleRenderMode)\r\n    @displayOrder(0)\r\n    @tooltip('i18n:particleSystemRenderer.renderMode')\r\n    public get renderMode (): number {\r\n        return this._renderMode;\r\n    }\r\n\r\n    public set renderMode (val) {\r\n        if (this._renderMode === val) {\r\n            return;\r\n        }\r\n        this._renderMode = val;\r\n        if (this._particleSystem) {\r\n            this._particleSystem.processor.updateRenderMode();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 在粒子生成方式为 StrecthedBillboard 时,对粒子在运动方向上按速度大小进行拉伸。\r\n     */\r\n    @displayOrder(1)\r\n    @tooltip('i18n:particleSystemRenderer.velocityScale')\r\n    public get velocityScale (): number {\r\n        return this._velocityScale;\r\n    }\r\n\r\n    public set velocityScale (val) {\r\n        this._velocityScale = val;\r\n        if (this._particleSystem) {\r\n            this._particleSystem.processor.updateMaterialParams();\r\n        }\r\n        // this._updateModel();\r\n    }\r\n\r\n    /**\r\n     * @zh 在粒子生成方式为 StrecthedBillboard 时,对粒子在运动方向上按粒子大小进行拉伸。\r\n     */\r\n    @displayOrder(2)\r\n    @tooltip('i18n:particleSystemRenderer.lengthScale')\r\n    public get lengthScale (): number {\r\n        return this._lengthScale;\r\n    }\r\n\r\n    public set lengthScale (val) {\r\n        this._lengthScale = val;\r\n        if (this._particleSystem) {\r\n            this._particleSystem.processor.updateMaterialParams();\r\n        }\r\n        // this._updateModel();\r\n    }\r\n\r\n    @type(ParticleRenderMode)\r\n    @serializable\r\n    private _renderMode = ParticleRenderMode.Billboard;\r\n\r\n    @serializable\r\n    private _velocityScale = 1;\r\n\r\n    @serializable\r\n    private _lengthScale = 1;\r\n\r\n    @serializable\r\n    private _mesh: Mesh | null = null;\r\n\r\n    /**\r\n     * @zh 粒子发射的模型。\r\n     */\r\n    @type(Mesh)\r\n    @displayOrder(7)\r\n    @tooltip('i18n:particleSystemRenderer.mesh')\r\n    public get mesh (): Mesh | null {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh (val) {\r\n        this._mesh = val;\r\n        if (this._particleSystem) {\r\n            this._particleSystem.processor.setVertexAttributes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 粒子使用的材质。\r\n     */\r\n    @type(Material)\r\n    @displayOrder(8)\r\n    @disallowAnimation\r\n    @visible(false)\r\n    @tooltip('i18n:particleSystemRenderer.particleMaterial')\r\n    public get particleMaterial (): Material | null {\r\n        if (!this._particleSystem) {\r\n            return null;\r\n        }\r\n        return this._particleSystem.getSharedMaterial(0) as Material;\r\n    }\r\n\r\n    public set particleMaterial (val: Material | null) {\r\n        if (this._particleSystem) {\r\n            this._particleSystem.setSharedMaterial(val, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en particle cpu material\r\n     * @zh 粒子使用的cpu材质。\r\n     */\r\n    @type(Material)\r\n    @displayOrder(8)\r\n    @disallowAnimation\r\n    public get cpuMaterial (): Material | null {\r\n        return this._cpuMaterial;\r\n    }\r\n\r\n    public set cpuMaterial (val: Material | null) {\r\n        if (val) {\r\n            const effectName = val.effectName;\r\n            if (effectName.indexOf('particle') === -1 || effectName.indexOf('particle-gpu') !== -1) {\r\n                warnID(6035);\r\n                return;\r\n            }\r\n        }\r\n        this._cpuMaterial = val;\r\n        this.particleMaterial = this._cpuMaterial;\r\n    }\r\n\r\n    @serializable\r\n    private _cpuMaterial: Material | null = null;\r\n\r\n    /**\r\n     * @en particle gpu material\r\n     * @zh 粒子使用的gpu材质。\r\n     */\r\n    @type(Material)\r\n    @displayOrder(8)\r\n    @disallowAnimation\r\n    public get gpuMaterial (): Material | null {\r\n        return this._gpuMaterial;\r\n    }\r\n\r\n    public set gpuMaterial (val: Material | null) {\r\n        if (val) {\r\n            const effectName = val.effectName;\r\n            if (effectName.indexOf('particle-gpu') === -1) {\r\n                warnID(6035);\r\n                return;\r\n            }\r\n        }\r\n        this._gpuMaterial = val;\r\n        this.particleMaterial = this._gpuMaterial;\r\n    }\r\n\r\n    @serializable\r\n    private _gpuMaterial: Material | null = null;\r\n\r\n    /**\r\n     * @en particle trail material\r\n     * @zh 拖尾使用的材质。\r\n     */\r\n    @type(Material)\r\n    @displayOrder(9)\r\n    @disallowAnimation\r\n    @tooltip('i18n:particleSystemRenderer.trailMaterial')\r\n    public get trailMaterial (): Material | null {\r\n        if (!this._particleSystem) {\r\n            return null;\r\n        }\r\n        return this._particleSystem.getSharedMaterial(1) as Material;\r\n    }\r\n\r\n    public set trailMaterial (val: Material | null) {\r\n        if (this._particleSystem) {\r\n            this._particleSystem.setSharedMaterial(val, 1);\r\n        }\r\n    }\r\n\r\n    @serializable\r\n    private _mainTexture: Texture2D | null = null;\r\n\r\n    public get mainTexture (): Texture2D | null {\r\n        return this._mainTexture;\r\n    }\r\n\r\n    public set mainTexture (val) {\r\n        this._mainTexture = val;\r\n    }\r\n\r\n    @serializable\r\n    private _useGPU = false;\r\n\r\n    @displayOrder(10)\r\n    @tooltip('i18n:particleSystemRenderer.useGPU')\r\n    public get useGPU (): boolean {\r\n        return this._useGPU;\r\n    }\r\n\r\n    public set useGPU (val) {\r\n        if (this._useGPU === val) {\r\n            return;\r\n        }\r\n\r\n        if (!isSupportGPUParticle()) {\r\n            this._useGPU = false;\r\n        } else {\r\n            this._useGPU = val;\r\n        }\r\n\r\n        this._switchProcessor();\r\n    }\r\n\r\n    /**\r\n     * @en Particle alignment space option. Includes world, local and view.\r\n     * @zh 粒子对齐空间选择。包括世界空间，局部空间和视角空间。\r\n     */\r\n    @type(ParticleAlignmentSpace)\r\n    @displayOrder(10)\r\n    @tooltip('i18n:particle_system.alignSpace')\r\n    public get alignSpace (): number {\r\n        return this._alignSpace;\r\n    }\r\n\r\n    public set alignSpace (val: number) {\r\n        this._alignSpace = val;\r\n        this._particleSystem.processor.updateAlignSpace(this._alignSpace);\r\n    }\r\n\r\n    @serializable\r\n    private _alignSpace = ParticleAlignmentSpace.View;\r\n\r\n    public static AlignmentSpace = ParticleAlignmentSpace;\r\n\r\n    private _particleSystem: ParticleSystem = null!;\r\n\r\n    create (ps: ParticleSystem): void {\r\n        // if particle system is null we run the old routine\r\n        // else if particle system is not null we do nothing\r\n        if (this._particleSystem === null) {\r\n            this._particleSystem = ps;\r\n        } else if (this._particleSystem !== ps) {\r\n            errorID(6033);\r\n        }\r\n    }\r\n\r\n    onInit (ps: ParticleSystem): void {\r\n        this.create(ps);\r\n        const useGPU = this._useGPU && isSupportGPUParticle();\r\n        if (!this._particleSystem.processor) {\r\n            this._particleSystem.processor = useGPU ? new ParticleSystemRendererGPU(this) : new ParticleSystemRendererCPU(this);\r\n            this._particleSystem.processor.updateAlignSpace(this.alignSpace);\r\n            this._particleSystem.processor.onInit(ps);\r\n        } else {\r\n            errorID(6034);\r\n        }\r\n        if (!useGPU) {\r\n            if (this.particleMaterial && this.particleMaterial.effectName.indexOf('particle-gpu') !== -1) {\r\n                this.particleMaterial = null;\r\n                warnID(6035);\r\n            }\r\n            this.cpuMaterial = this.particleMaterial;\r\n        } else {\r\n            this.gpuMaterial = this.particleMaterial;\r\n        }\r\n    }\r\n\r\n    private _switchProcessor (): void {\r\n        if (!this._particleSystem) {\r\n            return;\r\n        }\r\n        if (this._particleSystem.processor) {\r\n            this._particleSystem.processor.detachFromScene();\r\n            this._particleSystem.processor.clear();\r\n            this._particleSystem.processor = null!;\r\n        }\r\n        const useGPU = this._useGPU && isSupportGPUParticle();\r\n        this.particleMaterial = useGPU ? this.gpuMaterial : this.cpuMaterial;\r\n        this._particleSystem.processor = useGPU ? new ParticleSystemRendererGPU(this) : new ParticleSystemRendererCPU(this);\r\n        this._particleSystem.processor.updateAlignSpace(this.alignSpace);\r\n        this._particleSystem.processor.onInit(this._particleSystem);\r\n        this._particleSystem.processor.onEnable();\r\n        (this._particleSystem as any).bindModule();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, tooltip, displayOrder, type, serializable, range } from 'cc.decorator';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { RenderingSubMesh } from '../../asset/assets/rendering-sub-mesh';\r\nimport { director } from '../../game/director';\r\nimport { AttributeName, BufferUsageBit, Format, FormatInfos, MemoryUsageBit, PrimitiveMode,\r\n    Device, Attribute, BufferInfo } from '../../gfx';\r\nimport { Color, Mat4, Quat, toRadian, Vec3, Pool, warnID, cclegacy } from '../../core';\r\nimport { scene } from '../../render-scene';\r\nimport CurveRange from '../animator/curve-range';\r\nimport GradientRange from '../animator/gradient-range';\r\nimport { ParticleSpace, ParticleTextureMode, ParticleTrailMode } from '../enum';\r\nimport { Particle } from '../particle';\r\nimport { TransformBit } from '../../scene-graph/node-enum';\r\nimport type { ParticleSystem } from '../particle-system';\r\nimport type { Root } from '../../root';\r\n\r\nconst PRE_TRIANGLE_INDEX = 1;\r\nconst NEXT_TRIANGLE_INDEX = 1 << 2;\r\nconst DIRECTION_THRESHOLD = Math.cos(toRadian(100));\r\n\r\nconst _temp_trailEle = { position: new Vec3(), velocity: new Vec3() } as ITrailElement;\r\nconst _temp_quat = new Quat();\r\nconst _temp_vec3 = new Vec3();\r\nconst _temp_vec3_1 = new Vec3();\r\nconst _temp_color = new Color();\r\n\r\n// const barycentric = [1, 0, 0, 0, 1, 0, 0, 0, 1]; // <wireframe debug>\r\n\r\n// let _bcIdx = 0; // <wireframe debug>\r\n\r\ninterface ITrailElement {\r\n    position: Vec3;\r\n    lifetime: number;\r\n    width: number;\r\n    velocity: Vec3;\r\n    direction: number; // if one element's direction differs from the previous one,it means the trail's direction reverse.\r\n    color: Color;\r\n}\r\n\r\n// the valid element is in [start,end) range.if start equals -1,it represents the array is empty.\r\nclass TrailSegment {\r\n    public start: number;\r\n    public end: number;\r\n    public trailElements: ITrailElement[];\r\n\r\n    constructor (maxTrailElementNum: number) {\r\n        this.start = -1;\r\n        this.end = -1;\r\n        this.trailElements = [];\r\n        while (maxTrailElementNum--) {\r\n            this.trailElements.push({\r\n                position: new Vec3(),\r\n                lifetime: 0,\r\n                width: 0,\r\n                velocity: new Vec3(),\r\n                direction: 0,\r\n                color: new Color(),\r\n            });\r\n        }\r\n    }\r\n\r\n    public getElement (idx: number): ITrailElement | null {\r\n        if (this.start === -1) {\r\n            return null;\r\n        }\r\n        if (idx < 0) {\r\n            idx = (idx + this.trailElements.length) % this.trailElements.length;\r\n        }\r\n        if (idx >= this.trailElements.length) {\r\n            idx %= this.trailElements.length;\r\n        }\r\n        return this.trailElements[idx];\r\n    }\r\n\r\n    public addElement (): ITrailElement | null {\r\n        if (this.trailElements.length === 0) {\r\n            return null;\r\n        }\r\n        if (this.start === -1) {\r\n            this.start = 0;\r\n            this.end = 1;\r\n            return this.trailElements[0];\r\n        }\r\n        if (this.start === this.end) {\r\n            this.trailElements.splice(this.end, 0, {\r\n                position: new Vec3(),\r\n                lifetime: 0,\r\n                width: 0,\r\n                velocity: new Vec3(),\r\n                direction: 0,\r\n                color: new Color(),\r\n            });\r\n            this.start++;\r\n            this.start %= this.trailElements.length;\r\n        }\r\n        const newEleLoc = this.end++;\r\n        this.end %= this.trailElements.length;\r\n        return this.trailElements[newEleLoc];\r\n    }\r\n\r\n    public iterateElement (\r\n        target: TrailModule,\r\n        f: (target: TrailModule, e: ITrailElement, p: Particle, dt: number) => boolean,\r\n        p: Particle,\r\n        dt: number,\r\n    ): void {\r\n        const end = this.start >= this.end ? this.end + this.trailElements.length : this.end;\r\n        for (let i = this.start; i < end; i++) {\r\n            if (f(target, this.trailElements[i % this.trailElements.length], p, dt)) {\r\n                this.start++;\r\n                this.start %= this.trailElements.length;\r\n            }\r\n        }\r\n        if (this.start === end) {\r\n            this.start = -1;\r\n            this.end = -1;\r\n        }\r\n    }\r\n\r\n    public count (): number {\r\n        if (this.start < this.end) {\r\n            return this.end - this.start;\r\n        } else {\r\n            return this.trailElements.length + this.end - this.start;\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        this.start = -1;\r\n        this.end = -1;\r\n    }\r\n\r\n    // <debug>\r\n    // public _print () {\r\n    //     let msg = String();\r\n    //     this.iterateElement(this, (target: object, e: ITrailElement, p: Particle, dt: number) => {\r\n    //         msg += 'pos:' + e.position.toString() + ' lifetime:' + e.lifetime + ' dir:' + e.direction +\r\n    //                ' velocity:' + e.velocity.toString() + '\\n';\r\n    //         return false;\r\n    //     }, null, 0);\r\n    //     console.log(msg);\r\n    // }\r\n}\r\n\r\n@ccclass('cc.TrailModule')\r\nexport default class TrailModule {\r\n    /**\r\n     * 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (val === this._enable && this._trailModel) {\r\n            return;\r\n        }\r\n        if (val && !this._enable) {\r\n            this._enable = val;\r\n            if (this._particleSystem!.processor) this._particleSystem!.processor.updateTrailMaterial();\r\n        }\r\n        if (val && !this._trailModel) {\r\n            this._createModel();\r\n            this.rebuild();\r\n        }\r\n        this._enable = val;\r\n        if (this._trailModel) {\r\n            this._trailModel.enabled = val;\r\n        }\r\n\r\n        if (val) this.onEnable();\r\n        else this.onDisable();\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _enable = false;\r\n\r\n    /**\r\n     * 设定粒子生成轨迹的方式。\r\n     */\r\n    @type(ParticleTrailMode)\r\n    @serializable\r\n    @displayOrder(1)\r\n    @tooltip('i18n:trailSegment.mode')\r\n    public mode = ParticleTrailMode.Particles;\r\n\r\n    /**\r\n     * 轨迹存在的生命周期。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(3)\r\n    @tooltip('i18n:trailSegment.lifeTime')\r\n    public lifeTime = new CurveRange();\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _minParticleDistance = 0.1;\r\n\r\n    /**\r\n     * 每个轨迹粒子之间的最小间距。\r\n     */\r\n    @displayOrder(5)\r\n    @tooltip('i18n:trailSegment.minParticleDistance')\r\n    public get minParticleDistance (): number {\r\n        return this._minParticleDistance;\r\n    }\r\n\r\n    public set minParticleDistance (val) {\r\n        this._minParticleDistance = val;\r\n        this._minSquaredDistance = val * val;\r\n    }\r\n\r\n    @type(ParticleSpace)\r\n    @displayOrder(6)\r\n    @tooltip('i18n:trailSegment.space')\r\n    public get space (): number {\r\n        return this._space;\r\n    }\r\n\r\n    public set space (val) {\r\n        this._space = val;\r\n        const ps = this._particleSystem;\r\n        if (ps && ps.processor) {\r\n            ps.processor.updateTrailMaterial();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 粒子本身是否存在。\r\n     */\r\n    @serializable\r\n    public existWithParticles = true;\r\n\r\n    /**\r\n     * 设定纹理填充方式。\r\n     */\r\n    @type(ParticleTextureMode)\r\n    @serializable\r\n    @displayOrder(8)\r\n    @tooltip('i18n:trailSegment.textureMode')\r\n    public textureMode = ParticleTextureMode.Stretch;\r\n\r\n    @serializable\r\n    @displayOrder(9)\r\n    @tooltip('i18n:trailSegment.widthFromParticle')\r\n    public widthFromParticle = true;\r\n\r\n    /**\r\n     * 控制轨迹长度的曲线。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(10)\r\n    @tooltip('i18n:trailSegment.widthRatio')\r\n    public widthRatio = new CurveRange();\r\n\r\n    @serializable\r\n    @displayOrder(11)\r\n    @tooltip('i18n:trailSegment.colorFromParticle')\r\n    public colorFromParticle = false;\r\n\r\n    @type(GradientRange)\r\n    @serializable\r\n    @displayOrder(12)\r\n    @tooltip('i18n:trailSegment.colorOverTrail')\r\n    public colorOverTrail = new GradientRange();\r\n\r\n    @type(GradientRange)\r\n    @serializable\r\n    @displayOrder(13)\r\n    @tooltip('i18n:trailSegment.colorOvertime')\r\n    public colorOvertime = new GradientRange();\r\n\r\n    /**\r\n     * @en Get trail model\r\n     * @zh 获取拖尾模型\r\n     * @return Model of this trail and type is scene.Model\r\n     */\r\n    public getModel (): scene.Model | null {\r\n        return this._trailModel;\r\n    }\r\n\r\n    /**\r\n     * 轨迹设定时的坐标系。\r\n     */\r\n    @type(ParticleSpace)\r\n    private _space = ParticleSpace.World;\r\n\r\n    @serializable\r\n    private _particleSystem: ParticleSystem | null = null;\r\n\r\n    private _minSquaredDistance = 0;\r\n    private _vertSize: number;\r\n    private _trailNum = 0;\r\n    private _trailLifetime = 0;\r\n    private vbOffset = 0;\r\n    private ibOffset = 0;\r\n    private _trailSegments: Pool<TrailSegment> | null = null;\r\n    private _particleTrail: Map<Particle, TrailSegment>;\r\n    private _trailModel: scene.Model | null = null;\r\n    private _subMeshData: RenderingSubMesh | null = null;\r\n    private _vertAttrs: Attribute[];\r\n    private _vbF32: Float32Array | null = null;\r\n    private _vbUint32: Uint32Array | null = null;\r\n    private _iBuffer: Uint16Array | null = null;\r\n    private _needTransform = false;\r\n    private _material: Material | null = null;\r\n    private _psTransform = new Mat4();\r\n    private _iaVertCount = 0;\r\n    private _iaIndexCount = 0;\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public get inited (): boolean {\r\n        return this._inited;\r\n    }\r\n    private declare _inited: boolean;\r\n\r\n    constructor () {\r\n        this._vertAttrs = [\r\n            new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F),   // xyz:position\r\n            new Attribute(AttributeName.ATTR_TEX_COORD, Format.RGBA32F), // x:index y:size zw:texcoord\r\n            // new Attribute(AttributeName.ATTR_TEX_COORD2, Format.RGB32F), // <wireframe debug>\r\n            new Attribute(AttributeName.ATTR_TEX_COORD1, Format.RGB32F), // xyz:velocity\r\n            new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true),\r\n        ];\r\n        this._vertSize = this._vertAttrs.reduce((size, attr) => size + FormatInfos[attr.format].size, 0);\r\n\r\n        this._particleTrail = new Map<Particle, TrailSegment>();\r\n        this._inited = false;\r\n    }\r\n\r\n    public onInit (ps: ParticleSystem): void {\r\n        this._particleSystem = ps;\r\n        this.minParticleDistance = this._minParticleDistance;\r\n        let burstCount = 0;\r\n        const psTime = ps.startLifetime.getMax();\r\n        const psRate = ps.rateOverTime.getMax();\r\n        const duration = ps.duration;\r\n        for (let i = 0, len = ps.bursts.length; i < len; i++) {\r\n            const b = ps.bursts[i];\r\n            burstCount += b.getMaxCount(ps) * Math.ceil(psTime / duration);\r\n        }\r\n        if (this.lifeTime.getMax() < 1.0) {\r\n            warnID(6036);\r\n        }\r\n        this._trailNum = Math.ceil(psTime * Math.ceil(this.lifeTime.getMax()) * 60 * (psRate * duration + burstCount));\r\n        this._trailSegments = new Pool(\r\n            (): TrailSegment => new TrailSegment(10),\r\n            Math.ceil(psRate * duration),\r\n            (obj: TrailSegment): void => { obj.trailElements.length = 0; },\r\n        );\r\n        if (this._enable) {\r\n            this.enable = this._enable;\r\n        }\r\n        this._inited = true;\r\n    }\r\n\r\n    public onEnable (): void {\r\n        this._attachToScene();\r\n    }\r\n\r\n    public onDisable (): void {\r\n        this._particleTrail.clear();\r\n        this._detachFromScene();\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _attachToScene (): void {\r\n        if (this._trailModel) {\r\n            if (this._trailModel.scene) {\r\n                this._detachFromScene();\r\n            }\r\n            this._particleSystem!._getRenderScene().addModel(this._trailModel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _detachFromScene (): void {\r\n        if (this._trailModel && this._trailModel.scene) {\r\n            this._trailModel.scene.removeModel(this._trailModel);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.destroySubMeshData();\r\n        if (this._trailModel) {\r\n            director.root!.destroyModel(this._trailModel);\r\n            this._trailModel = null;\r\n        }\r\n        if (this._trailSegments) {\r\n            this._trailSegments.destroy();\r\n            this._trailSegments = null;\r\n        }\r\n    }\r\n\r\n    public play (): void {\r\n        if (this._trailModel && this._enable) {\r\n            this._trailModel.enabled = true;\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        if (this.enable) {\r\n            const trailIter = this._particleTrail.values();\r\n            let trail = trailIter.next();\r\n            while (!trail.done) {\r\n                trail.value.clear();\r\n                trail = trailIter.next();\r\n            }\r\n            this._particleTrail.clear();\r\n            this.updateRenderData();\r\n            if (this._trailModel) this._trailModel.enabled = false;\r\n        }\r\n    }\r\n\r\n    public updateMaterial (): void {\r\n        if (this._particleSystem) {\r\n            this._material = this._particleSystem.getMaterialInstance(1)\r\n                || this._particleSystem.processor.getDefaultTrailMaterial();\r\n            if (this._trailModel) {\r\n                this._trailModel.setSubModelMaterial(0, this._material!);\r\n            }\r\n        }\r\n    }\r\n\r\n    public update (): void {\r\n        this._trailLifetime = this.lifeTime.evaluate(this._particleSystem!.time, 1)!;\r\n        if (this.space === ParticleSpace.World && this._particleSystem!.simulationSpace === ParticleSpace.Local) {\r\n            this._needTransform = true;\r\n            this._particleSystem!.node.getWorldMatrix(this._psTransform);\r\n            this._particleSystem!.node.getWorldRotation(_temp_quat);\r\n        } else {\r\n            this._needTransform = false;\r\n        }\r\n    }\r\n\r\n    public animate (p: Particle, scaledDt: number): void {\r\n        if (!this._trailSegments) {\r\n            return;\r\n        }\r\n\r\n        if (p.loopCount > p.lastLoop) {\r\n            if (p.trailDelay > 1) {\r\n                p.lastLoop = p.loopCount;\r\n                p.trailDelay = 0;\r\n            } else {\r\n                p.trailDelay++;\r\n            }\r\n            return;\r\n        }\r\n\r\n        let trail = this._particleTrail.get(p);\r\n        if (!trail) {\r\n            trail = this._trailSegments.alloc();\r\n            this._particleTrail.set(p, trail);\r\n            // Avoid position and trail are one frame apart at the end of the particle animation.\r\n            return;\r\n        }\r\n        let lastSeg = trail.getElement(trail.end - 1);\r\n        if (this._needTransform) {\r\n            Vec3.transformMat4(_temp_vec3, p.position, this._psTransform);\r\n        } else {\r\n            Vec3.copy(_temp_vec3, p.position);\r\n        }\r\n        if (lastSeg) {\r\n            trail.iterateElement(this, this._updateTrailElement, p, scaledDt);\r\n            if (Vec3.squaredDistance(lastSeg.position, _temp_vec3) < this._minSquaredDistance) {\r\n                return;\r\n            }\r\n        }\r\n        lastSeg = trail.addElement();\r\n        if (!lastSeg) {\r\n            return;\r\n        }\r\n\r\n        Vec3.copy(lastSeg.position, _temp_vec3);\r\n        lastSeg.lifetime = 0;\r\n        if (this.widthFromParticle) {\r\n            lastSeg.width = p.size.x * this.widthRatio.evaluate(0, 1)!;\r\n        } else {\r\n            lastSeg.width = this.widthRatio.evaluate(0, 1)!;\r\n        }\r\n\r\n        const trailNum = trail.count();\r\n        if (trailNum === 2) {\r\n            const lastSecondTrail = trail.getElement(trail.end - 2)!;\r\n            Vec3.subtract(lastSecondTrail.velocity, lastSeg.position, lastSecondTrail.position);\r\n        } else if (trailNum > 2) {\r\n            const lastSecondTrail = trail.getElement(trail.end - 2)!;\r\n            const lastThirdTrail = trail.getElement(trail.end - 3)!;\r\n            Vec3.subtract(_temp_vec3, lastThirdTrail.position, lastSecondTrail.position);\r\n            Vec3.subtract(_temp_vec3_1, lastSeg.position, lastSecondTrail.position);\r\n            Vec3.subtract(lastSecondTrail.velocity, _temp_vec3_1, _temp_vec3);\r\n            if (Vec3.equals(Vec3.ZERO, lastSecondTrail.velocity)) {\r\n                Vec3.copy(lastSecondTrail.velocity, _temp_vec3);\r\n            }\r\n            Vec3.normalize(lastSecondTrail.velocity, lastSecondTrail.velocity);\r\n            this._checkDirectionReverse(lastSecondTrail, lastThirdTrail);\r\n        }\r\n        if (this.colorFromParticle) {\r\n            lastSeg.color.set(p.color);\r\n        } else {\r\n            lastSeg.color.set(this.colorOvertime.evaluate(0, 1));\r\n        }\r\n    }\r\n\r\n    public removeParticle (p: Particle): void {\r\n        const trail = this._particleTrail.get(p);\r\n        if (trail && this._trailSegments) {\r\n            trail.clear();\r\n            this._trailSegments.free(trail);\r\n            this._particleTrail.delete(p);\r\n        }\r\n    }\r\n\r\n    public updateRenderData (): void {\r\n        this.vbOffset = 0;\r\n        this.ibOffset = 0;\r\n        for (const p of this._particleTrail.keys()) {\r\n            const trailSeg = this._particleTrail.get(p)!;\r\n            if (trailSeg.start === -1) {\r\n                continue;\r\n            }\r\n            const indexOffset = this.vbOffset * 4 / this._vertSize;\r\n            const end = trailSeg.start >= trailSeg.end ? trailSeg.end + trailSeg.trailElements.length : trailSeg.end;\r\n            const trailNum = end - trailSeg.start;\r\n            // const lastSegRatio = vec3.distance(trailSeg.getTailElement()!.position, p.position) / this._minParticleDistance;\r\n            const textCoordSeg = 1 / (trailNum /* - 1 + lastSegRatio */);\r\n            const startSegEle = trailSeg.trailElements[trailSeg.start];\r\n            this._fillVertexBuffer(startSegEle, this.colorOverTrail.evaluate(1, 1), indexOffset, 1, 0, NEXT_TRIANGLE_INDEX);\r\n            for (let i = trailSeg.start + 1; i < end; i++) {\r\n                const segEle = trailSeg.trailElements[i % trailSeg.trailElements.length];\r\n                const j = i - trailSeg.start;\r\n                this._fillVertexBuffer(\r\n                    segEle,\r\n                    this.colorOverTrail.evaluate(1 - j / trailNum, 1),\r\n                    indexOffset,\r\n                    1 - j * textCoordSeg,\r\n                    j,\r\n                    PRE_TRIANGLE_INDEX | NEXT_TRIANGLE_INDEX,\r\n                );\r\n            }\r\n            if (this._needTransform) {\r\n                Vec3.transformMat4(_temp_trailEle.position, p.position, this._psTransform);\r\n            } else {\r\n                Vec3.copy(_temp_trailEle.position, p.position);\r\n            }\r\n\r\n            // refresh particle node position to update emit position\r\n            const trailModel = this._trailModel;\r\n            if (trailModel) {\r\n                trailModel.node.invalidateChildren(TransformBit.POSITION);\r\n            }\r\n\r\n            if (trailNum === 1 || trailNum === 2) {\r\n                const lastSecondTrail = trailSeg.getElement(trailSeg.end - 1)!;\r\n                Vec3.subtract(lastSecondTrail.velocity, _temp_trailEle.position, lastSecondTrail.position);\r\n                const vbF32 = this._vbF32!;\r\n                const vbOffset = this.vbOffset;\r\n                const vertSizeDiv4 = this._vertSize / 4;\r\n                const lastSecondTrailVelocity = lastSecondTrail.velocity;\r\n                vbF32[vbOffset - vertSizeDiv4 - 4] = lastSecondTrailVelocity.x;\r\n                vbF32[vbOffset - vertSizeDiv4 - 3] = lastSecondTrailVelocity.y;\r\n                vbF32[vbOffset - vertSizeDiv4 - 2] = lastSecondTrailVelocity.z;\r\n                vbF32[vbOffset - 4] = lastSecondTrailVelocity.x;\r\n                vbF32[vbOffset - 3] = lastSecondTrailVelocity.y;\r\n                vbF32[vbOffset - 2] = lastSecondTrailVelocity.z;\r\n                Vec3.subtract(_temp_trailEle.velocity, _temp_trailEle.position, lastSecondTrail.position);\r\n                this._checkDirectionReverse(_temp_trailEle, lastSecondTrail);\r\n            } else if (trailNum > 2) {\r\n                const lastSecondTrail = trailSeg.getElement(trailSeg.end - 1)!;\r\n                const lastThirdTrail = trailSeg.getElement(trailSeg.end - 2)!;\r\n                Vec3.subtract(_temp_vec3, lastThirdTrail.position, lastSecondTrail.position);\r\n                Vec3.subtract(_temp_vec3_1, _temp_trailEle.position, lastSecondTrail.position);\r\n                Vec3.normalize(_temp_vec3, _temp_vec3);\r\n                Vec3.normalize(_temp_vec3_1, _temp_vec3_1);\r\n                Vec3.subtract(lastSecondTrail.velocity, _temp_vec3_1, _temp_vec3);\r\n                Vec3.normalize(lastSecondTrail.velocity, lastSecondTrail.velocity);\r\n                this._checkDirectionReverse(lastSecondTrail, lastThirdTrail);\r\n                // refresh last trail segment data\r\n                this.vbOffset -= this._vertSize / 4 * 2;\r\n                this.ibOffset -= 6;\r\n                // _bcIdx = (_bcIdx - 6 + 9) % 9;  // <wireframe debug>\r\n                this._fillVertexBuffer(\r\n                    lastSecondTrail,\r\n                    this.colorOverTrail.evaluate(textCoordSeg, 1),\r\n                    indexOffset,\r\n                    textCoordSeg,\r\n                    trailNum - 1,\r\n                    PRE_TRIANGLE_INDEX | NEXT_TRIANGLE_INDEX,\r\n                );\r\n                Vec3.subtract(_temp_trailEle.velocity, _temp_trailEle.position, lastSecondTrail.position);\r\n                Vec3.normalize(_temp_trailEle.velocity, _temp_trailEle.velocity);\r\n                this._checkDirectionReverse(_temp_trailEle, lastSecondTrail);\r\n            }\r\n            if (this.widthFromParticle) {\r\n                _temp_trailEle.width = p.size.x * this.widthRatio.evaluate(0, 1)!;\r\n            } else {\r\n                _temp_trailEle.width = this.widthRatio.evaluate(0, 1)!;\r\n            }\r\n            _temp_trailEle.color = p.color;\r\n\r\n            if (Vec3.equals(_temp_trailEle.velocity, Vec3.ZERO)) {\r\n                this.ibOffset -= 3;\r\n            } else {\r\n                this._fillVertexBuffer(_temp_trailEle, this.colorOverTrail.evaluate(0, 1), indexOffset, 0, trailNum, PRE_TRIANGLE_INDEX);\r\n            }\r\n        }\r\n        if (this._trailModel) {\r\n            this._trailModel.enabled = this.ibOffset > 0;\r\n        }\r\n    }\r\n\r\n    public updateIA (count: number): void {\r\n        const subModels = this._trailModel && this._trailModel.subModels;\r\n        if (subModels && subModels.length > 0) {\r\n            const subModel = subModels[0];\r\n            subModel.inputAssembler.vertexBuffers[0].update(this._vbF32!);\r\n            subModel.inputAssembler.indexBuffer!.update(this._iBuffer!);\r\n            subModel.inputAssembler.firstIndex = 0;\r\n            subModel.inputAssembler.indexCount = count;\r\n            subModel.inputAssembler.vertexCount = this._iaVertCount;\r\n        }\r\n    }\r\n\r\n    public beforeRender (): void {\r\n        this.updateIA(this.ibOffset);\r\n    }\r\n\r\n    private _createModel (): void {\r\n        if (this._trailModel) {\r\n            return;\r\n        }\r\n\r\n        this._trailModel = (cclegacy.director.root as Root).createModel(scene.Model);\r\n    }\r\n\r\n    private rebuild (): void {\r\n        const self = this;\r\n        const device: Device = director.root!.device;\r\n        const vertexBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            self._vertSize * (self._trailNum + 1) * 2,\r\n            self._vertSize,\r\n        ));\r\n        const vBuffer: ArrayBuffer = new ArrayBuffer(self._vertSize * (self._trailNum + 1) * 2);\r\n        self._vbF32 = new Float32Array(vBuffer);\r\n        self._vbUint32 = new Uint32Array(vBuffer);\r\n        vertexBuffer.update(vBuffer);\r\n\r\n        const indexBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            Math.max(1, self._trailNum) * 6 * Uint16Array.BYTES_PER_ELEMENT,\r\n            Uint16Array.BYTES_PER_ELEMENT,\r\n        ));\r\n        self._iBuffer = new Uint16Array(Math.max(1, self._trailNum) * 6);\r\n        indexBuffer.update(self._iBuffer);\r\n\r\n        self._iaVertCount = (self._trailNum + 1) * 2;\r\n        self._iaIndexCount = self._trailNum * 6;\r\n\r\n        self._subMeshData = new RenderingSubMesh([vertexBuffer], self._vertAttrs, PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n\r\n        const trailModel = self._trailModel;\r\n        if (trailModel && self._material) {\r\n            trailModel.node = trailModel.transform = self._particleSystem!.node;\r\n            trailModel.visFlags = self._particleSystem!.visibility;\r\n            trailModel.initSubModel(0, self._subMeshData, self._material);\r\n            trailModel.enabled = true;\r\n        }\r\n    }\r\n\r\n    private _updateTrailElement (module: TrailModule, trailEle: ITrailElement, p: Particle, dt: number): boolean {\r\n        trailEle.lifetime += dt;\r\n        if (module.colorFromParticle) {\r\n            trailEle.color.set(p.color);\r\n            trailEle.color.multiply(module.colorOvertime.evaluate(1.0 - p.remainingLifetime / p.startLifetime, 1));\r\n        } else {\r\n            trailEle.color.set(module.colorOvertime.evaluate(1.0 - p.remainingLifetime / p.startLifetime, 1));\r\n        }\r\n        if (module.widthFromParticle) {\r\n            trailEle.width = p.size.x * module.widthRatio.evaluate(trailEle.lifetime / module._trailLifetime, 1)!;\r\n        } else {\r\n            trailEle.width = module.widthRatio.evaluate(trailEle.lifetime / module._trailLifetime, 1)!;\r\n        }\r\n        return trailEle.lifetime > module._trailLifetime;\r\n    }\r\n\r\n    private _fillVertexBuffer (\r\n        trailSeg: ITrailElement,\r\n        colorModifer: Color,\r\n        indexOffset: number,\r\n        xTexCoord: number,\r\n        trailEleIdx: number,\r\n        indexSet: number,\r\n    ): void {\r\n        this._vbF32![this.vbOffset++] = trailSeg.position.x;\r\n        this._vbF32![this.vbOffset++] = trailSeg.position.y;\r\n        this._vbF32![this.vbOffset++] = trailSeg.position.z;\r\n        this._vbF32![this.vbOffset++] = trailSeg.direction;\r\n        this._vbF32![this.vbOffset++] = trailSeg.width;\r\n        this._vbF32![this.vbOffset++] = xTexCoord;\r\n        this._vbF32![this.vbOffset++] = 0;\r\n        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];  // <wireframe debug>\r\n        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];\r\n        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];\r\n        // _bcIdx %= 9;\r\n        this._vbF32![this.vbOffset++] = trailSeg.velocity.x;\r\n        this._vbF32![this.vbOffset++] = trailSeg.velocity.y;\r\n        this._vbF32![this.vbOffset++] = trailSeg.velocity.z;\r\n        _temp_color.set(trailSeg.color);\r\n        _temp_color.multiply(colorModifer);\r\n        this._vbUint32![this.vbOffset++] = Color.toUint32(_temp_color);\r\n        this._vbF32![this.vbOffset++] = trailSeg.position.x;\r\n        this._vbF32![this.vbOffset++] = trailSeg.position.y;\r\n        this._vbF32![this.vbOffset++] = trailSeg.position.z;\r\n        this._vbF32![this.vbOffset++] = 1 - trailSeg.direction;\r\n        this._vbF32![this.vbOffset++] = trailSeg.width;\r\n        this._vbF32![this.vbOffset++] = xTexCoord;\r\n        this._vbF32![this.vbOffset++] = 1;\r\n        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];  // <wireframe debug>\r\n        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];\r\n        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];\r\n        // _bcIdx %= 9;\r\n        this._vbF32![this.vbOffset++] = trailSeg.velocity.x;\r\n        this._vbF32![this.vbOffset++] = trailSeg.velocity.y;\r\n        this._vbF32![this.vbOffset++] = trailSeg.velocity.z;\r\n        this._vbUint32![this.vbOffset++] = Color.toUint32(_temp_color);\r\n        if (indexSet & PRE_TRIANGLE_INDEX) {\r\n            this._iBuffer![this.ibOffset++] = indexOffset + 2 * trailEleIdx;\r\n            this._iBuffer![this.ibOffset++] = indexOffset + 2 * trailEleIdx - 1;\r\n            this._iBuffer![this.ibOffset++] = indexOffset + 2 * trailEleIdx + 1;\r\n        }\r\n        if (indexSet & NEXT_TRIANGLE_INDEX) {\r\n            this._iBuffer![this.ibOffset++] = indexOffset + 2 * trailEleIdx;\r\n            this._iBuffer![this.ibOffset++] = indexOffset + 2 * trailEleIdx + 1;\r\n            this._iBuffer![this.ibOffset++] = indexOffset + 2 * trailEleIdx + 2;\r\n        }\r\n    }\r\n\r\n    private _checkDirectionReverse (currElement: ITrailElement, prevElement: ITrailElement): void {\r\n        if (Vec3.dot(currElement.velocity, prevElement.velocity) < DIRECTION_THRESHOLD) {\r\n            currElement.direction = 1 - prevElement.direction;\r\n        } else {\r\n            currElement.direction = prevElement.direction;\r\n        }\r\n    }\r\n\r\n    private destroySubMeshData (): void {\r\n        if (this._subMeshData) {\r\n            this._subMeshData.destroy();\r\n            this._subMeshData = null;\r\n        }\r\n    }\r\n\r\n    // <debug use>\r\n    // private _printVB() {\r\n    //     let log = new String();\r\n    //     for (let i = 0; i < this.vbOffset; i++) {\r\n    //         log += 'pos:' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + ',' +\r\n    //                this._vbF32![i++].toFixed(2) + ' dir:' + this._vbF32![i++].toFixed(0) + ' ';\r\n    //         i += 6;\r\n    //         log += 'vel:' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + '\\n';\r\n    //     }\r\n    //     if (log.length > 0) {\r\n    //         console.log(log);\r\n    //     }\r\n    // }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IParticleModule, Particle, PARTICLE_MODULE_ORDER } from './particle';\r\nimport { Node } from '../scene-graph/node';\r\nimport { TransformBit } from '../scene-graph/node-enum';\r\nimport { ParticleRenderMode, ParticleSpace } from './enum';\r\nimport { approx, EPSILON, Mat4, pseudoRandom, Quat, randomRangeInt, Vec3, Vec4, geometry, bits } from '../core';\r\nimport { isCurveTwoValues, particleEmitZAxis } from './particle-general-function';\r\nimport { ParticleSystemRendererBase } from './renderer/particle-system-renderer-base';\r\nimport { Mesh } from '../3d';\r\nimport type { ParticleSystem } from './particle-system';\r\nimport { Mode } from './animator/curve-range';\r\n\r\nconst _nodeMat = new Mat4();\r\nconst _nodeParentInv = new Mat4();\r\nconst _nodeRol = new Quat();\r\nconst _nodeScale = new Vec3();\r\n\r\nconst _animModule = [\r\n    '_colorOverLifetimeModule',\r\n    '_sizeOvertimeModule',\r\n    '_velocityOvertimeModule',\r\n    '_forceOvertimeModule',\r\n    '_limitVelocityOvertimeModule',\r\n    '_rotationOvertimeModule',\r\n    '_textureAnimationModule',\r\n];\r\n\r\nexport class ParticleCuller {\r\n    private _particleSystem: ParticleSystem;\r\n    private _processor: ParticleSystemRendererBase;\r\n    private _node: Node;\r\n    private _particlesAll: Particle[];\r\n    private _updateList: Map<string, IParticleModule> = new Map<string, IParticleModule>();\r\n    private _animateList: Map<string, IParticleModule> = new Map<string, IParticleModule>();\r\n    private _runAnimateList: IParticleModule[] = [];\r\n    private _localMat: Mat4 = new Mat4();\r\n    private _gravity: Vec4 = new Vec4();\r\n\r\n    public minPos: Vec3 = new Vec3();\r\n    public maxPos: Vec3 = new Vec3();\r\n\r\n    private _nodePos: Vec3 = new Vec3();\r\n    private _nodeSize: Vec3 = new Vec3();\r\n\r\n    constructor (ps: ParticleSystem) {\r\n        this._particleSystem = ps;\r\n        this._processor = this._particleSystem.processor;\r\n        this._node = ps.node;\r\n        this._particlesAll = [];\r\n        this._initModuleList();\r\n    }\r\n\r\n    private _updateBoundingNode (): void {\r\n        this._nodeSize.set(this.maxPos.x - this.minPos.x, this.maxPos.y - this.minPos.y, this.maxPos.z - this.minPos.z);\r\n        this._nodePos.set(this.minPos.x + this._nodeSize.x * 0.5, this.minPos.y + this._nodeSize.y * 0.5, this.minPos.z + this._nodeSize.z * 0.5);\r\n    }\r\n\r\n    public setBoundingBoxSize (halfExt: Vec3): void {\r\n        this.maxPos.x = this._nodePos.x + halfExt.x;\r\n        this.maxPos.y = this._nodePos.y + halfExt.y;\r\n        this.maxPos.z = this._nodePos.z + halfExt.z;\r\n        this.minPos.x = this._nodePos.x - halfExt.x;\r\n        this.minPos.y = this._nodePos.y - halfExt.y;\r\n        this.minPos.z = this._nodePos.z - halfExt.z;\r\n        this._updateBoundingNode();\r\n    }\r\n\r\n    public setBoundingBoxCenter (px: number, py: number, pz: number): void {\r\n        this.maxPos.x = px + this._nodeSize.x * 0.5;\r\n        this.maxPos.y = py + this._nodeSize.y * 0.5;\r\n        this.maxPos.z = pz + this._nodeSize.z * 0.5;\r\n        this.minPos.x = px - this._nodeSize.x * 0.5;\r\n        this.minPos.y = py - this._nodeSize.y * 0.5;\r\n        this.minPos.z = pz - this._nodeSize.z * 0.5;\r\n        this._updateBoundingNode();\r\n    }\r\n\r\n    private _initModuleList (): void {\r\n        _animModule.forEach((val: string): void => {\r\n            const pm = this._particleSystem[val] as IParticleModule;\r\n            if (pm && pm.enable) {\r\n                if (pm.needUpdate) {\r\n                    this._updateList.set(pm.name, pm);\r\n                }\r\n\r\n                if (pm.needAnimate) {\r\n                    this._animateList.set(pm.name, pm);\r\n                }\r\n            }\r\n        });\r\n\r\n        // reorder\r\n        this._runAnimateList.length = 0;\r\n        for (let i = 0, len = PARTICLE_MODULE_ORDER.length; i < len; i++) {\r\n            const p = this._animateList.get(PARTICLE_MODULE_ORDER[i]);\r\n            if (p) {\r\n                this._runAnimateList.push(p);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emit (count: number, dt: number, particleLst: Particle[]): void {\r\n        const ps = this._particleSystem;\r\n        const node = this._node;\r\n        const loopDelta = (ps.time % ps.duration) / ps.duration; // loop delta value\r\n\r\n        node.invalidateChildren(TransformBit.POSITION);\r\n        if (ps.simulationSpace === ParticleSpace.World) {\r\n            node.getWorldMatrix(_nodeMat);\r\n            node.getWorldRotation(_nodeRol);\r\n        }\r\n\r\n        for (let i = 0; i < count; ++i) {\r\n            const particle: Particle = new Particle(ps);\r\n            particle.particleSystem = ps;\r\n            particle.reset();\r\n\r\n            const rand = pseudoRandom(randomRangeInt(0, bits.INT_MAX));\r\n\r\n            if (ps._shapeModule && ps._shapeModule.enable) {\r\n                ps._shapeModule.emit(particle);\r\n            } else {\r\n                Vec3.set(particle.position, 0, 0, 0);\r\n                Vec3.copy(particle.velocity, particleEmitZAxis);\r\n            }\r\n\r\n            if (ps._textureAnimationModule && ps._textureAnimationModule.enable) {\r\n                ps._textureAnimationModule.init(particle);\r\n            }\r\n\r\n            const curveStartSpeed = ps.startSpeed.evaluate(loopDelta, rand)!;\r\n            Vec3.multiplyScalar(particle.velocity, particle.velocity, curveStartSpeed);\r\n\r\n            if (ps.simulationSpace === ParticleSpace.World) {\r\n                Vec3.transformMat4(particle.position, particle.position, _nodeMat);\r\n                Vec3.transformQuat(particle.velocity, particle.velocity, _nodeRol);\r\n            }\r\n\r\n            Vec3.copy(particle.ultimateVelocity, particle.velocity);\r\n\r\n            // apply startRotation.\r\n            Vec3.set(particle.rotation, 0, 0, 0);\r\n\r\n            // apply startSize.\r\n            if (ps.startSize3D) {\r\n                Vec3.set(\r\n                    particle.startSize,\r\n                    ps.startSizeX.evaluate(loopDelta, rand)!,\r\n                    ps.startSizeY.evaluate(loopDelta, rand)!,\r\n                    ps.startSizeZ.evaluate(loopDelta, rand)!,\r\n                );\r\n            } else {\r\n                Vec3.set(particle.startSize, ps.startSizeX.evaluate(loopDelta, rand)!, 1, 1);\r\n                particle.startSize.y = particle.startSize.x;\r\n            }\r\n            Vec3.copy(particle.size, particle.startSize);\r\n\r\n            // apply startLifetime.\r\n            particle.startLifetime = ps.startLifetime.evaluate(loopDelta, rand)! + dt;\r\n            particle.remainingLifetime = particle.startLifetime;\r\n\r\n            particleLst.push(particle);\r\n        }\r\n    }\r\n\r\n    private _updateParticles (dt: number, particleLst: Particle[]): void {\r\n        const ps = this._particleSystem;\r\n        ps.node.getWorldMatrix(_nodeMat);\r\n\r\n        switch (ps.scaleSpace) {\r\n        case ParticleSpace.Local:\r\n            ps.node.getScale(_nodeScale);\r\n            break;\r\n        case ParticleSpace.World:\r\n            ps.node.getWorldScale(_nodeScale);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n\r\n        this._updateList.forEach((value: IParticleModule, key: string): void => {\r\n            // TODO(cjh): Bug here? _updateList is a Map, the old code uses `this._updateList['some_key'] = some_value;`\r\n            // to do the assignment which forEach will not take care of it.\r\n            // In order not to change the behavior in this PR ( https://github.com/cocos/cocos-engine/pull/17289 )\r\n            // We commented the update the particle module temporarily.\r\n            // value.update(ps.simulationSpace, _node_mat);\r\n        });\r\n\r\n        if (ps.simulationSpace === ParticleSpace.Local) {\r\n            const r: Quat = ps.node.getRotation();\r\n            Mat4.fromQuat(this._localMat, r);\r\n            this._localMat.transpose(); // just consider rotation, use transpose as invert\r\n        }\r\n\r\n        if (ps.node.parent) {\r\n            ps.node.parent.getWorldMatrix(_nodeParentInv);\r\n            _nodeParentInv.invert();\r\n        }\r\n\r\n        for (let i = 0; i < particleLst.length; ++i) {\r\n            const p: Particle = particleLst[i];\r\n            p.remainingLifetime -= dt;\r\n            Vec3.set(p.animatedVelocity, 0, 0, 0);\r\n\r\n            // apply gravity when both the mode is not Constant and the value is not 0.\r\n            const useGravity = (ps.gravityModifier.mode !== Mode.Constant || ps.gravityModifier.constant !== 0);\r\n            if (useGravity) {\r\n                const rand = isCurveTwoValues(ps.gravityModifier) ? pseudoRandom(p.randomSeed) : 0;\r\n                if (ps.simulationSpace === ParticleSpace.Local) {\r\n                    const gravityFactor = -ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, rand)! * 9.8 * dt;\r\n                    this._gravity.x = 0.0;\r\n                    this._gravity.y = gravityFactor;\r\n                    this._gravity.z = 0.0;\r\n                    this._gravity.w = 1.0;\r\n                    if (!approx(gravityFactor, 0.0, EPSILON)) {\r\n                        if (ps.node.parent) {\r\n                            this._gravity = this._gravity.transformMat4(_nodeParentInv);\r\n                        }\r\n                        this._gravity = this._gravity.transformMat4(this._localMat);\r\n\r\n                        p.velocity.x += this._gravity.x;\r\n                        p.velocity.y += this._gravity.y;\r\n                        p.velocity.z += this._gravity.z;\r\n                    }\r\n                } else {\r\n                // apply gravity.\r\n                    p.velocity.y -= ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, rand)! * 9.8 * dt;\r\n                }\r\n            }\r\n\r\n            Vec3.copy(p.ultimateVelocity, p.velocity);\r\n\r\n            this._runAnimateList.forEach((value: IParticleModule): void => {\r\n                value.animate(p, dt);\r\n            });\r\n\r\n            Vec3.scaleAndAdd(p.position, p.position, p.ultimateVelocity, dt); // apply velocity.\r\n        }\r\n    }\r\n\r\n    private _calculateBounding (isInit: boolean): void {\r\n        const size: Vec3 = new Vec3();\r\n        const position: Vec3 = new Vec3();\r\n        const subPos: Vec3 = new Vec3();\r\n        const addPos: Vec3 = new Vec3();\r\n\r\n        const meshSize: Vec3 = new Vec3(1.0, 1.0, 1.0);\r\n        if (this._processor.getInfo()!.renderMode === ParticleRenderMode.Mesh) {\r\n            const mesh: Mesh | null = this._processor.getInfo().mesh;\r\n            if (mesh && mesh.struct.minPosition && mesh.struct.maxPosition) {\r\n                const meshAABB: geometry.AABB = new geometry.AABB();\r\n                geometry.AABB.fromPoints(meshAABB, mesh.struct.minPosition, mesh.struct.maxPosition);\r\n                const meshMax = Math.max(meshAABB.halfExtents.x, meshAABB.halfExtents.y, meshAABB.halfExtents.z);\r\n                meshSize.set(meshMax, meshMax, meshMax);\r\n            }\r\n        }\r\n\r\n        const worldMat = this._particleSystem.node.worldMatrix;\r\n        for (let i = 0; i < this._particlesAll.length; ++i) {\r\n            const p: Particle = this._particlesAll[i];\r\n            Vec3.multiply(size, _nodeScale, p.size);\r\n            Vec3.multiply(size, size, meshSize);\r\n            position.set(p.position);\r\n            if (this._particleSystem.simulationSpace !== ParticleSpace.World) {\r\n                Vec3.transformMat4(position, position, worldMat);\r\n            }\r\n            if (isInit && i === 0) {\r\n                Vec3.subtract(this.minPos, position, size);\r\n                Vec3.add(this.maxPos, position, size);\r\n            } else {\r\n                Vec3.subtract(subPos, position, size);\r\n                Vec3.add(addPos, position, size);\r\n                Vec3.min(this.minPos, this.minPos, subPos);\r\n                Vec3.max(this.maxPos, this.maxPos, addPos);\r\n            }\r\n        }\r\n    }\r\n\r\n    public calculatePositions (): void {\r\n        this._emit(this._particleSystem.capacity, 0, this._particlesAll);\r\n        const rand = isCurveTwoValues(this._particleSystem.startLifetime) ? pseudoRandom(randomRangeInt(0, bits.INT_MAX)) : 0;\r\n        this._updateParticles(0, this._particlesAll);\r\n        this._calculateBounding(true);\r\n        this._updateParticles(this._particleSystem.startLifetime.evaluate(0, rand), this._particlesAll);\r\n        this._calculateBounding(false);\r\n        this._updateBoundingNode();\r\n    }\r\n\r\n    public clear (): void {\r\n        this._particlesAll.length = 0;\r\n    }\r\n\r\n    public destroy (): void {\r\n\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CCFloat, CCInteger, _decorator, Vec3, random } from '../../core';\r\nimport { ParticleNoise } from '../noise';\r\nimport { Particle, PARTICLE_MODULE_NAME, ParticleModuleBase } from '../particle';\r\nimport type { ParticleSystem } from '../particle-system';\r\n\r\nconst { ccclass, serializable, displayOrder, type, range, slide, visible } = _decorator;\r\n\r\n/**\r\n * @en\r\n * Adding noise to your particles is a simple and effective way to create interesting patterns and effects.\r\n * @zh\r\n * 为粒子添加噪声是创建有趣方案和效果的简单有效方法。\r\n */\r\n@ccclass('cc.NoiseModule')\r\nexport class NoiseModule extends ParticleModuleBase {\r\n    constructor () {\r\n        super();\r\n    }\r\n    @serializable\r\n    _enable = false;\r\n    /**\r\n     * @en Enable this module or not.\r\n     * @zh 是否启用。\r\n     */\r\n    @displayOrder(0)\r\n    public get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n\r\n    public set enable (val) {\r\n        if (this._enable === val) return;\r\n        this._enable = val;\r\n        if (!this.target) return;\r\n        this.target.enableModule(this.name, val, this);\r\n    }\r\n\r\n    /**\r\n     * @en Strength on X axis.\r\n     * @zh X 轴上的强度大小。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100])\r\n    @displayOrder(16)\r\n    @slide\r\n    get strengthX (): number {\r\n        return this._strengthX;\r\n    }\r\n    set strengthX (value: number) {\r\n        this._strengthX = value;\r\n    }\r\n    @serializable\r\n    private _strengthX = 10;\r\n\r\n    /**\r\n     * @en Strength on Y axis.\r\n     * @zh Y 轴上的强度大小。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100])\r\n    @displayOrder(16)\r\n    @slide\r\n    get strengthY (): number {\r\n        return this._strengthY;\r\n    }\r\n    set strengthY (value: number) {\r\n        this._strengthY = value;\r\n    }\r\n    @serializable\r\n    private _strengthY = 10;\r\n\r\n    /**\r\n     * @en Strength on Z axis.\r\n     * @zh Z 轴上的强度大小。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100])\r\n    @displayOrder(16)\r\n    @slide\r\n    get strengthZ (): number {\r\n        return this._strengthZ;\r\n    }\r\n    set strengthZ (value: number) {\r\n        this._strengthZ = value;\r\n    }\r\n    @serializable\r\n    private _strengthZ = 10;\r\n\r\n    /**\r\n     * @en Noise texture roll speed on X axis.\r\n     * @zh X 轴上的噪声图滚动速度。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100])\r\n    @slide\r\n    @displayOrder(16)\r\n    get noiseSpeedX (): number {\r\n        return this._noiseSpeedX;\r\n    }\r\n    set noiseSpeedX (value: number) {\r\n        this._noiseSpeedX = value;\r\n    }\r\n    @serializable\r\n    private _noiseSpeedX = 0;\r\n\r\n    /**\r\n     * @en Noise texture roll speed on Y axis.\r\n     * @zh Y 轴上的噪声图滚动速度。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100])\r\n    @displayOrder(16)\r\n    @slide\r\n    get noiseSpeedY (): number {\r\n        return this._noiseSpeedY;\r\n    }\r\n    set noiseSpeedY (value: number) {\r\n        this._noiseSpeedY = value;\r\n    }\r\n    @serializable\r\n    private _noiseSpeedY = 0;\r\n\r\n    /**\r\n     * @en Noise texture roll speed on Z axis.\r\n     * @zh Z 轴上的噪声图滚动速度。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100])\r\n    @displayOrder(16)\r\n    @slide\r\n    get noiseSpeedZ (): number {\r\n        return this._noiseSpeedZ;\r\n    }\r\n    set noiseSpeedZ (value: number) {\r\n        this._noiseSpeedZ = value;\r\n    }\r\n    @serializable\r\n    private _noiseSpeedZ = 0;\r\n\r\n    /**\r\n     * @en Noise frequency.\r\n     * @zh 噪声图频率。\r\n     */\r\n    @type(CCFloat)\r\n    @range([0, 100, 0.1])\r\n    @displayOrder(16)\r\n    @slide\r\n    get noiseFrequency (): number {\r\n        return this._noiseFrequency;\r\n    }\r\n    set noiseFrequency (value: number) {\r\n        this._noiseFrequency = value;\r\n    }\r\n    @serializable\r\n    private _noiseFrequency = 1;\r\n\r\n    /**\r\n     * @en Remap the final noise X axis values into a different range.\r\n     * @zh 噪声值映射到 X 轴的不同范围。\r\n     */\r\n    @visible(false)\r\n    @type(CCFloat)\r\n    @range([0, 1, 0.1])\r\n    @displayOrder(16)\r\n    @slide\r\n    get remapX (): number {\r\n        return this._remapX;\r\n    }\r\n    set remapX (value: number) {\r\n        this._remapX = value;\r\n    }\r\n    @serializable\r\n    private _remapX = 0;\r\n\r\n    /**\r\n     * @en Remap the final noise Y axis values into a different range.\r\n     * @zh 噪声值映射到 Y 轴的不同范围。\r\n     */\r\n    @visible(false)\r\n    @type(CCFloat)\r\n    @range([0, 1, 0.1])\r\n    @displayOrder(16)\r\n    @slide\r\n    get remapY (): number {\r\n        return this._remapY;\r\n    }\r\n    set remapY (value: number) {\r\n        this._remapY = value;\r\n    }\r\n    @serializable\r\n    private _remapY = 0;\r\n\r\n    /**\r\n     * @en Remap the final noise Z axis values into a different range.\r\n     * @zh 噪声值映射到 Z 轴的不同范围。\r\n     */\r\n    @visible(false)\r\n    @type(CCFloat)\r\n    @range([0, 1, 0.1])\r\n    @displayOrder(16)\r\n    @slide\r\n    get remapZ (): number {\r\n        return this._remapZ;\r\n    }\r\n    set remapZ (value: number) {\r\n        this._remapZ = value;\r\n    }\r\n    @serializable\r\n    private _remapZ = 0;\r\n\r\n    /**\r\n     * @en Specify how many layers of overlapping noise are combined to produce the final noise values.\r\n     * @zh 指定组合多少层重叠噪声来产生最终噪声值。\r\n     */\r\n    @type(CCInteger)\r\n    @range([1, 4, 1])\r\n    @displayOrder(16)\r\n    @slide\r\n    get octaves (): number {\r\n        return this._octaves;\r\n    }\r\n    set octaves (value: number) {\r\n        this._octaves = value;\r\n    }\r\n    @serializable\r\n    private _octaves = 1;\r\n\r\n    /**\r\n     * @en For each additional noise layer, reduce the strength by this proportion.\r\n     * @zh 对于每个附加的噪声层，按此比例降低强度。\r\n     */\r\n    // eslint-disable-next-line func-names\r\n    @visible(function (this: NoiseModule) { return this._octaves > 1; })\r\n    @type(CCFloat)\r\n    @range([0, 1, 0.1])\r\n    @displayOrder(16)\r\n    get octaveMultiplier (): number {\r\n        return this._octaveMultiplier;\r\n    }\r\n    set octaveMultiplier (value: number) {\r\n        this._octaveMultiplier = value;\r\n    }\r\n    @serializable\r\n    private _octaveMultiplier = 0.5;\r\n\r\n    /**\r\n     * @en For each additional noise layer, adjust the frequency by this multiplier.\r\n     * @zh 对于每个附加的噪声层，按此乘数调整频率。\r\n     */\r\n    // eslint-disable-next-line func-names\r\n    @visible(function (this: NoiseModule) { return this._octaves > 1; })\r\n    @type(CCFloat)\r\n    @range([1, 4, 0.1])\r\n    @displayOrder(16)\r\n    get octaveScale (): number {\r\n        return this._octaveScale;\r\n    }\r\n    set octaveScale (value: number) {\r\n        this._octaveScale = value;\r\n    }\r\n    @serializable\r\n    private _octaveScale = 2;\r\n\r\n    public name = PARTICLE_MODULE_NAME.NOISE;\r\n\r\n    private noise: ParticleNoise = new ParticleNoise();\r\n\r\n    private samplePosition: Vec3 = new Vec3();\r\n\r\n    /**\r\n     * @en Apply noise effect to particle.\r\n     * @zh 作用噪声效果到粒子上。\r\n     * @param particle @en Particle to animate @zh 模块需要更新的粒子\r\n     * @param dt @en Update interval time @zh 粒子系统更新的间隔时间\r\n     * @internal\r\n     */\r\n    public animate (particle: Particle, dt: number): void {\r\n        this.noise.setTime(particle.particleSystem.time);\r\n        this.noise.setSpeed(this.noiseSpeedX, this.noiseSpeedY, this.noiseSpeedZ);\r\n        this.noise.setFrequency(this.noiseFrequency);\r\n        this.noise.setAbs(this.remapX, this.remapY, this.remapZ);\r\n        this.noise.setAmplititude(this.strengthX, this.strengthY, this.strengthZ);\r\n        this.noise.setOctaves(this.octaves, this.octaveMultiplier, this.octaveScale);\r\n\r\n        this.samplePosition.set(particle.position);\r\n        this.samplePosition.add3f(random() * 1.0, random() * 1.0, random() * 1.0);\r\n        this.noise.setSamplePoint(this.samplePosition);\r\n        this.noise.getNoiseParticle();\r\n\r\n        const noisePosition: Vec3 = this.noise.getResult();\r\n        noisePosition.multiply3f(random(), random(), random());\r\n        Vec3.add(particle.position, particle.position, noisePosition.multiplyScalar(dt));\r\n    }\r\n\r\n    /**\r\n     * @en Gets the preview of noise texture.\r\n     * @zh 获取噪声图预览。\r\n     * @param out @en Noise texture pixels array @zh 噪声图像素数组\r\n     * @param ps @en Particle system @zh 噪声图作用的粒子系统\r\n     * @param width @en Texture width @zh 噪声图宽度\r\n     * @param height @en Texture height @zh 噪声图高度\r\n     */\r\n    public getNoisePreview (out: number[], ps: ParticleSystem, width: number, height: number): void {\r\n        this.noise.setTime(ps.time);\r\n        this.noise.setSpeed(this.noiseSpeedX, this.noiseSpeedY, this.noiseSpeedZ);\r\n        this.noise.setFrequency(this.noiseFrequency);\r\n        this.noise.setAbs(this.remapX, this.remapY, this.remapZ);\r\n        this.noise.setAmplititude(this.strengthX, this.strengthY, this.strengthZ);\r\n        this.noise.setOctaves(this.octaves, this.octaveMultiplier, this.octaveScale);\r\n        this.noise.getNoiseParticle();\r\n\r\n        this.noise.getPreview(out, width, height);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n// eslint-disable-next-line max-len\r\nimport { ccclass, help, executeInEditMode, executionOrder, menu, tooltip, displayOrder, type, range, displayName, formerlySerializedAs, override, radian, serializable, visible } from 'cc.decorator';\r\nimport { EDITOR, EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Renderer } from '../misc/renderer';\r\nimport { ModelRenderer } from '../misc/model-renderer';\r\nimport { Material } from '../asset/assets/material';\r\nimport { Mat4, pseudoRandom, Quat, randomRangeInt, Vec2, Vec3, CCBoolean, CCFloat, bits, geometry, cclegacy, warn } from '../core';\r\nimport { scene } from '../render-scene';\r\nimport ColorOverLifetimeModule from './animator/color-overtime';\r\nimport CurveRange, { Mode } from './animator/curve-range';\r\nimport ForceOvertimeModule from './animator/force-overtime';\r\nimport GradientRange from './animator/gradient-range';\r\nimport LimitVelocityOvertimeModule from './animator/limit-velocity-overtime';\r\nimport RotationOvertimeModule from './animator/rotation-overtime';\r\nimport SizeOvertimeModule from './animator/size-overtime';\r\nimport TextureAnimationModule from './animator/texture-animation';\r\nimport VelocityOvertimeModule from './animator/velocity-overtime';\r\nimport Burst from './burst';\r\nimport ShapeModule from './emitter/shape-module';\r\nimport { ParticleCullingMode, ParticleSpace } from './enum';\r\nimport { particleEmitZAxis } from './particle-general-function';\r\nimport ParticleSystemRenderer from './renderer/particle-system-renderer-data';\r\nimport TrailModule from './renderer/trail';\r\nimport { ParticleSystemRendererBase } from './renderer/particle-system-renderer-base';\r\nimport { PARTICLE_MODULE_PROPERTY } from './particle';\r\nimport { TransformBit } from '../scene-graph/node-enum';\r\nimport { Camera } from '../render-scene/scene';\r\nimport { ParticleCuller } from './particle-culler';\r\nimport { NoiseModule } from './animator/noise-module';\r\nimport { director, DirectorEvent } from '../game/director';\r\n\r\nconst _world_mat = new Mat4();\r\nconst _world_rol = new Quat();\r\n\r\nconst superMaterials = Object.getOwnPropertyDescriptor(Renderer.prototype, 'sharedMaterials')!;\r\n\r\n/**\r\n * @en\r\n * Particle system component, which can make many effects such as smoke and fire.\r\n * Include some interesting modules and components such as Velocity Overtime, Force Overtime, Trail and Noise.\r\n * You can open these modules to see how the particles animate.\r\n * @zh\r\n * 粒子系统能够用来制作许多特效，例如 烟雾和火焰。\r\n * 包含一些有趣的模块，例如 速度模块，受力模块，拖尾模块和噪声模块。\r\n * 打开这些模块可以看到粒子如何进行变化。\r\n */\r\n@ccclass('cc.ParticleSystem')\r\n@help('i18n:cc.ParticleSystem')\r\n@menu('Effects/ParticleSystem')\r\n@executionOrder(99)\r\n@executeInEditMode\r\nexport class ParticleSystem extends ModelRenderer {\r\n    /**\r\n     * @en Maximum particle capacity to generate.\r\n     * @zh 粒子系统能生成的最大粒子数量。\r\n     */\r\n    @range([0, Number.POSITIVE_INFINITY, 1])\r\n    @displayOrder(1)\r\n    @tooltip('i18n:particle_system.capacity')\r\n    public get capacity (): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    public set capacity (val: number) {\r\n        this._capacity = Math.floor(val > 0 ? val : 0);\r\n        if (this.processor && this.processor.model) {\r\n            this.processor.model.setCapacity(this._capacity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The initial color of the particle.\r\n     * @zh 粒子初始颜色。\r\n     */\r\n    @type(GradientRange)\r\n    @serializable\r\n    @displayOrder(8)\r\n    @tooltip('i18n:particle_system.startColor')\r\n    public startColor = new GradientRange();\r\n\r\n    /**\r\n     * @en The space of particle scaling.\r\n     * @zh 计算粒子缩放的空间。\r\n     */\r\n    @type(ParticleSpace)\r\n    @serializable\r\n    @displayOrder(9)\r\n    @tooltip('i18n:particle_system.scaleSpace')\r\n    public scaleSpace = ParticleSpace.Local;\r\n\r\n    /**\r\n     * @en Whether to modify particle size on XYZ axis.\r\n     * @zh 是否需要修改粒子在三个轴上的大小。\r\n     */\r\n    @serializable\r\n    @displayOrder(10)\r\n    @tooltip('i18n:particle_system.startSize3D')\r\n    public startSize3D = false;\r\n\r\n    /**\r\n     * @en The initial X size of the particle.\r\n     * @zh 粒子初始x轴方向大小。\r\n     */\r\n    @formerlySerializedAs('startSize')\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @type(CurveRange)\r\n    @displayOrder(10)\r\n    @tooltip('i18n:particle_system.startSizeX')\r\n    public startSizeX = new CurveRange();\r\n\r\n    /**\r\n     * @en The initial Y size of the particle.\r\n     * @zh 粒子初始y轴方向大小。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(10)\r\n    @tooltip('i18n:particle_system.startSizeY')\r\n    @visible(function (this: ParticleSystem): boolean { return this.startSize3D; })\r\n    public startSizeY = new CurveRange();\r\n\r\n    /**\r\n     * @en The initial Z size of the particle.\r\n     * @zh 粒子初始z轴方向大小。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(10)\r\n    @tooltip('i18n:particle_system.startSizeZ')\r\n    @visible(function (this: ParticleSystem): boolean { return this.startSize3D; })\r\n    public startSizeZ = new CurveRange();\r\n\r\n    /**\r\n     * @en The initial velocity of the particle.\r\n     * @zh 粒子初始速度。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(11)\r\n    @tooltip('i18n:particle_system.startSpeed')\r\n    public startSpeed = new CurveRange();\r\n\r\n    /**\r\n     * @en Whether to modify particle rotation on XYZ axis.\r\n     * @zh 是否需要修改粒子在三个轴上的旋转。\r\n     */\r\n    @serializable\r\n    @displayOrder(12)\r\n    @tooltip('i18n:particle_system.startRotation3D')\r\n    public startRotation3D = false;\r\n\r\n    /**\r\n     * @en The initial rotation angle of the particle on X axis.\r\n     * @zh 粒子初始x轴旋转角度。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @radian\r\n    @displayOrder(12)\r\n    @tooltip('i18n:particle_system.startRotationX')\r\n    @visible(function (this: ParticleSystem): boolean { return this.startRotation3D; })\r\n    public startRotationX = new CurveRange();\r\n\r\n    /**\r\n     * @en The initial rotation angle of the particle on Y axis.\r\n     * @zh 粒子初始y轴旋转角度。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @radian\r\n    @displayOrder(12)\r\n    @tooltip('i18n:particle_system.startRotationY')\r\n    @visible(function (this: ParticleSystem): boolean { return this.startRotation3D; })\r\n    public startRotationY = new CurveRange();\r\n\r\n    /**\r\n     * @en The initial rotation angle of the particle on Z axis.\r\n     * @zh 粒子初始z轴旋转角度。\r\n     */\r\n    @type(CurveRange)\r\n    @formerlySerializedAs('startRotation')\r\n    @radian\r\n    @displayOrder(12)\r\n    @tooltip('i18n:particle_system.startRotationZ')\r\n    public startRotationZ = new CurveRange();\r\n\r\n    /**\r\n     * @en The time delay to start emission after the particle system starts running.\r\n     * @zh 粒子系统开始运行后，延迟粒子发射的时间。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(6)\r\n    @tooltip('i18n:particle_system.startDelay')\r\n    public startDelay = new CurveRange();\r\n\r\n    /**\r\n     * @en Particle life time.\r\n     * @zh 粒子生命周期。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(7)\r\n    @tooltip('i18n:particle_system.startLifetime')\r\n    public startLifetime = new CurveRange();\r\n\r\n    /**\r\n     * @en Particle system duration time.\r\n     * @zh 粒子系统运行时间。\r\n     */\r\n    @serializable\r\n    @displayOrder(0)\r\n    @tooltip('i18n:particle_system.duration')\r\n    public duration = 5.0;\r\n\r\n    /**\r\n     * @en Whether the particle system is looping.\r\n     * @zh 粒子系统是否循环播放。\r\n     */\r\n    @serializable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:particle_system.loop')\r\n    public loop = true;\r\n\r\n    /**\r\n     * @en Play one round before start this particle system.\r\n     * @zh 选中之后，粒子系统会以已播放完一轮之后的状态开始播放（仅当循环播放启用时有效）。\r\n     */\r\n    @displayOrder(3)\r\n    @tooltip('i18n:particle_system.prewarm')\r\n    get prewarm (): boolean {\r\n        return this._prewarm;\r\n    }\r\n\r\n    set prewarm (val) {\r\n        if (val === true && this.loop === false) {\r\n            // console.warn('prewarm only works if loop is also enabled.');\r\n        }\r\n        this._prewarm = val;\r\n    }\r\n\r\n    /**\r\n     * @en The simulation space of the particle system, it could be world, local or custom.\r\n     * @zh 选择粒子系统所在的坐标系[[Space]]。<br>\r\n     */\r\n    @type(ParticleSpace)\r\n    @serializable\r\n    @displayOrder(4)\r\n    @tooltip('i18n:particle_system.simulationSpace')\r\n    get simulationSpace (): number {\r\n        return this._simulationSpace;\r\n    }\r\n\r\n    set simulationSpace (val) {\r\n        if (val !== this._simulationSpace) {\r\n            this._simulationSpace = val;\r\n            if (this.processor) {\r\n                this.processor.updateMaterialParams();\r\n                this.processor.updateTrailMaterial();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The simulation speed of the particle system.\r\n     * @zh 控制整个粒子系统的更新速度。\r\n     */\r\n    @serializable\r\n    @displayOrder(5)\r\n    @tooltip('i18n:particle_system.simulationSpeed')\r\n    public simulationSpeed = 1.0;\r\n\r\n    /**\r\n     * @en Automatically start playing after particle system initialized.\r\n     * @zh 粒子系统加载后是否自动开始播放。\r\n     */\r\n    @serializable\r\n    @displayOrder(2)\r\n    @tooltip('i18n:particle_system.playOnAwake')\r\n    public playOnAwake = true;\r\n\r\n    /**\r\n     * @en The gravity of the particle system.\r\n     * @zh 粒子受重力影响的重力系数。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @displayOrder(13)\r\n    @tooltip('i18n:particle_system.gravityModifier')\r\n    public gravityModifier = new CurveRange();\r\n\r\n    // emission module\r\n    /**\r\n     * @en The value curve of emission rate over time.\r\n     * @zh 随时间推移发射的粒子数的变化曲线。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(14)\r\n    @tooltip('i18n:particle_system.rateOverTime')\r\n    public rateOverTime = new CurveRange();\r\n\r\n    /**\r\n     * @en The value curve of emission rate over distance.\r\n     * @zh 每移动单位距离发射的粒子数的变化曲线。\r\n     */\r\n    @type(CurveRange)\r\n    @serializable\r\n    @range([0, Number.POSITIVE_INFINITY])\r\n    @displayOrder(15)\r\n    @tooltip('i18n:particle_system.rateOverDistance')\r\n    public rateOverDistance = new CurveRange();\r\n\r\n    /**\r\n     * @en Burst triggers of the particle system.\r\n     * @zh 设定在指定时间发射指定数量的粒子的 burst 的数量。\r\n     */\r\n    @type([Burst])\r\n    @serializable\r\n    @displayOrder(16)\r\n    @tooltip('i18n:particle_system.bursts')\r\n    public bursts: Burst[] = [];\r\n\r\n    /**\r\n     * @en Enable particle culling switch. Open it to enable particle culling.\r\n     * If enabled will generate emitter bounding box and emitters outside the frustum will be culled.\r\n     * @zh 粒子剔除开关，如果打开将会生成一个发射器包围盒，包围盒在相机外发射器将被剔除。\r\n     */\r\n    @type(CCBoolean)\r\n    @displayOrder(27)\r\n    @tooltip('i18n:particle_system.renderCulling')\r\n    set renderCulling (value: boolean) {\r\n        this._renderCulling = value;\r\n        if (value) {\r\n            if (!this._boundingBox) {\r\n                this._boundingBox = new geometry.AABB();\r\n                this._calculateBounding(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    get renderCulling (): boolean {\r\n        return this._renderCulling;\r\n    }\r\n\r\n    @serializable\r\n    private _renderCulling = false;\r\n\r\n    /**\r\n     * @en Particle culling mode option. Includes pause, pause and catchup, always simulate.\r\n     * @zh 粒子剔除模式选择。包括暂停模拟，暂停以后快进继续以及不间断模拟。\r\n     */\r\n    @type(ParticleCullingMode)\r\n    @displayOrder(17)\r\n    @tooltip('i18n:particle_system.cullingMode')\r\n    get cullingMode (): number {\r\n        return this._cullingMode;\r\n    }\r\n\r\n    set cullingMode (value: number) {\r\n        this._cullingMode = value;\r\n    }\r\n\r\n    @serializable\r\n    _cullingMode = ParticleCullingMode.Pause;\r\n\r\n    /**\r\n     * @en Emitter culling mode.\r\n     * @zh 发射器的各种剔除模式。\r\n     */\r\n    public static CullingMode = ParticleCullingMode;\r\n\r\n    /**\r\n     * @en Particle bounding box half width.\r\n     * @zh 粒子包围盒半宽。\r\n     */\r\n    @type(CCFloat)\r\n    @displayOrder(17)\r\n    @tooltip('i18n:particle_system.aabbHalfX')\r\n    get aabbHalfX (): number {\r\n        const res = this.getBoundingX();\r\n        if (res) {\r\n            return res;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    set aabbHalfX (value: number) {\r\n        this.setBoundingX(value);\r\n    }\r\n\r\n    @serializable\r\n    private _aabbHalfX = 0;\r\n\r\n    /**\r\n     * @en Particle bounding box half height.\r\n     * @zh 粒子包围盒半高。\r\n     */\r\n    @type(CCFloat)\r\n    @displayOrder(17)\r\n    @tooltip('i18n:particle_system.aabbHalfY')\r\n    get aabbHalfY (): number {\r\n        const res = this.getBoundingY();\r\n        if (res) {\r\n            return res;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    set aabbHalfY (value: number) {\r\n        this.setBoundingY(value);\r\n    }\r\n\r\n    @serializable\r\n    private _aabbHalfY = 0;\r\n\r\n    /**\r\n     * @en Particle bounding box half depth.\r\n     * @zh 粒子包围盒半深。\r\n     */\r\n    @type(CCFloat)\r\n    @displayOrder(17)\r\n    @tooltip('i18n:particle_system.aabbHalfZ')\r\n    get aabbHalfZ (): number {\r\n        const res = this.getBoundingZ();\r\n        if (res) {\r\n            return res;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    set aabbHalfZ (value: number) {\r\n        this.setBoundingZ(value);\r\n    }\r\n\r\n    @serializable\r\n    private _aabbHalfZ = 0;\r\n\r\n    /**\r\n     * @en Culling module data before serialize.\r\n     * @zh 序列化之前剔除不需要的模块数据。\r\n     */\r\n    @displayOrder(28)\r\n    @tooltip('i18n:particle_system.dataCulling')\r\n    get dataCulling (): boolean {\r\n        return this._dataCulling;\r\n    }\r\n\r\n    set dataCulling (value: boolean) {\r\n        this._dataCulling = value;\r\n    }\r\n\r\n    @serializable\r\n    @formerlySerializedAs('enableCulling')\r\n    private _dataCulling = false;\r\n\r\n    @override\r\n    @visible(false)\r\n    @serializable\r\n    @displayName('Materials')\r\n    get sharedMaterials (): any {\r\n        // if we don't create an array copy, the editor will modify the original array directly.\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return superMaterials.get!.call(this);\r\n    }\r\n\r\n    set sharedMaterials (val) {\r\n        // TODO: can we assert that superMaterials.set is defined ?\r\n        superMaterials.set!.call(this, val);\r\n    }\r\n\r\n    // color over lifetime module\r\n    @type(ColorOverLifetimeModule)\r\n    _colorOverLifetimeModule: ColorOverLifetimeModule | null = null;\r\n    /**\r\n     * @en The module controlling particle's color over life time.\r\n     * @zh 颜色控制模块。\r\n     */\r\n    @type(ColorOverLifetimeModule)\r\n    @displayOrder(23)\r\n    @tooltip('i18n:particle_system.colorOverLifetimeModule')\r\n    public get colorOverLifetimeModule (): ColorOverLifetimeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._colorOverLifetimeModule) {\r\n                this._colorOverLifetimeModule = new ColorOverLifetimeModule();\r\n                this._colorOverLifetimeModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._colorOverLifetimeModule;\r\n    }\r\n\r\n    public set colorOverLifetimeModule (val) {\r\n        if (!val) return;\r\n        this._colorOverLifetimeModule = val;\r\n    }\r\n\r\n    // shape module\r\n    @type(ShapeModule)\r\n    _shapeModule: ShapeModule | null = null;\r\n    /**\r\n     * @en The module controlling emitter's shape.\r\n     * @zh 粒子发射器模块。\r\n     */\r\n    @type(ShapeModule)\r\n    @displayOrder(17)\r\n    @tooltip('i18n:particle_system.shapeModule')\r\n    public get shapeModule (): ShapeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._shapeModule) {\r\n                this._shapeModule = new ShapeModule();\r\n                this._shapeModule.onInit(this);\r\n            }\r\n        }\r\n        return this._shapeModule;\r\n    }\r\n\r\n    public set shapeModule (val) {\r\n        if (!val) return;\r\n        this._shapeModule = val;\r\n    }\r\n\r\n    // size over lifetime module\r\n    @type(SizeOvertimeModule)\r\n    _sizeOvertimeModule: SizeOvertimeModule | null = null;\r\n    /**\r\n     * @en The module controlling particle's size over time.\r\n     * @zh 粒子大小模块。\r\n     */\r\n    @type(SizeOvertimeModule)\r\n    @displayOrder(21)\r\n    @tooltip('i18n:particle_system.sizeOvertimeModule')\r\n    public get sizeOvertimeModule (): SizeOvertimeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._sizeOvertimeModule) {\r\n                this._sizeOvertimeModule = new SizeOvertimeModule();\r\n                this._sizeOvertimeModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._sizeOvertimeModule;\r\n    }\r\n\r\n    public set sizeOvertimeModule (val) {\r\n        if (!val) return;\r\n        this._sizeOvertimeModule = val;\r\n    }\r\n\r\n    // velocity overtime module\r\n    @type(VelocityOvertimeModule)\r\n    _velocityOvertimeModule: VelocityOvertimeModule | null = null;\r\n    /**\r\n     * @en The module controlling particle's velocity over time.\r\n     * @zh 粒子速度模块。\r\n     */\r\n    @type(VelocityOvertimeModule)\r\n    @displayOrder(18)\r\n    @tooltip('i18n:particle_system.velocityOvertimeModule')\r\n    public get velocityOvertimeModule (): VelocityOvertimeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._velocityOvertimeModule) {\r\n                this._velocityOvertimeModule = new VelocityOvertimeModule();\r\n                this._velocityOvertimeModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._velocityOvertimeModule;\r\n    }\r\n\r\n    public set velocityOvertimeModule (val) {\r\n        if (!val) return;\r\n        this._velocityOvertimeModule = val;\r\n    }\r\n\r\n    // force overTime module\r\n    @type(ForceOvertimeModule)\r\n    _forceOvertimeModule: ForceOvertimeModule | null = null;\r\n    /**\r\n     * @en The module controlling the force applied to particles over time.\r\n     * @zh 粒子加速度模块。\r\n     */\r\n    @type(ForceOvertimeModule)\r\n    @displayOrder(19)\r\n    @tooltip('i18n:particle_system.forceOvertimeModule')\r\n    public get forceOvertimeModule (): ForceOvertimeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._forceOvertimeModule) {\r\n                this._forceOvertimeModule = new ForceOvertimeModule();\r\n                this._forceOvertimeModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._forceOvertimeModule;\r\n    }\r\n\r\n    public set forceOvertimeModule (val) {\r\n        if (!val) return;\r\n        this._forceOvertimeModule = val;\r\n    }\r\n\r\n    // limit velocity overtime module\r\n    @type(LimitVelocityOvertimeModule)\r\n    _limitVelocityOvertimeModule: LimitVelocityOvertimeModule | null = null;\r\n\r\n    /**\r\n     * @en The module which limits the velocity applied to particles over time, only supported in CPU particle system.\r\n     * @zh 粒子限制速度模块（只支持 CPU 粒子）。\r\n     */\r\n    @type(LimitVelocityOvertimeModule)\r\n    @displayOrder(20)\r\n    @tooltip('i18n:particle_system.limitVelocityOvertimeModule')\r\n    public get limitVelocityOvertimeModule (): LimitVelocityOvertimeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._limitVelocityOvertimeModule) {\r\n                this._limitVelocityOvertimeModule = new LimitVelocityOvertimeModule();\r\n                this._limitVelocityOvertimeModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._limitVelocityOvertimeModule;\r\n    }\r\n\r\n    public set limitVelocityOvertimeModule (val) {\r\n        if (!val) return;\r\n        this._limitVelocityOvertimeModule = val;\r\n    }\r\n\r\n    // rotation overtime module\r\n    @type(RotationOvertimeModule)\r\n    _rotationOvertimeModule: RotationOvertimeModule | null = null;\r\n    /**\r\n     * @en The module controlling the rotation of particles over time.\r\n     * @zh 粒子旋转模块。\r\n     */\r\n    @type(RotationOvertimeModule)\r\n    @displayOrder(22)\r\n    @tooltip('i18n:particle_system.rotationOvertimeModule')\r\n    public get rotationOvertimeModule (): RotationOvertimeModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._rotationOvertimeModule) {\r\n                this._rotationOvertimeModule = new RotationOvertimeModule();\r\n                this._rotationOvertimeModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._rotationOvertimeModule;\r\n    }\r\n\r\n    public set rotationOvertimeModule (val) {\r\n        if (!val) return;\r\n        this._rotationOvertimeModule = val;\r\n    }\r\n\r\n    // texture animation module\r\n    @type(TextureAnimationModule)\r\n    _textureAnimationModule: TextureAnimationModule | null = null;\r\n    /**\r\n     * @en The module controlling the texture animation of particles.\r\n     * @zh 贴图动画模块。\r\n     */\r\n    @type(TextureAnimationModule)\r\n    @displayOrder(24)\r\n    @tooltip('i18n:particle_system.textureAnimationModule')\r\n    public get textureAnimationModule (): TextureAnimationModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._textureAnimationModule) {\r\n                this._textureAnimationModule = new TextureAnimationModule();\r\n                this._textureAnimationModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._textureAnimationModule;\r\n    }\r\n\r\n    public set textureAnimationModule (val) {\r\n        if (!val) return;\r\n        this._textureAnimationModule = val;\r\n    }\r\n\r\n    // noise module\r\n    /**\r\n     * @en Noise module which can add some interesting effects.\r\n     * @zh 噪声模块能够增加许多有趣的特效。\r\n     */\r\n    @type(NoiseModule)\r\n    private _noiseModule: NoiseModule | null = null;\r\n    /**\r\n     * @en The module controlling noise map applied to the particles, only supported in CPU particle system.\r\n     * @zh 噪声动画模块，仅支持 CPU 粒子。\r\n     */\r\n    @type(NoiseModule)\r\n    @displayOrder(24)\r\n    @tooltip('i18n:particle_system.noiseModule')\r\n    public get noiseModule (): NoiseModule | null {\r\n        if (EDITOR) {\r\n            if (!this._noiseModule) {\r\n                this._noiseModule = new NoiseModule();\r\n                this._noiseModule.bindTarget(this.processor);\r\n            }\r\n        }\r\n        return this._noiseModule;\r\n    }\r\n\r\n    public set noiseModule (val) {\r\n        if (!val) return;\r\n        this._noiseModule = val;\r\n    }\r\n\r\n    // trail module\r\n    @type(TrailModule)\r\n    _trailModule: TrailModule | null = null;\r\n    /**\r\n     * @en The module controlling the trail module.\r\n     * @zh 粒子轨迹模块。\r\n     */\r\n    @type(TrailModule)\r\n    @displayOrder(25)\r\n    @tooltip('i18n:particle_system.trailModule')\r\n    public get trailModule (): TrailModule | null {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            if (!this._trailModule) {\r\n                this._trailModule = new TrailModule();\r\n            }\r\n        }\r\n        return this._trailModule;\r\n    }\r\n\r\n    public set trailModule (val) {\r\n        if (!val) return;\r\n        this._trailModule = val;\r\n    }\r\n\r\n    // particle system renderer\r\n    /**\r\n     * @en Particle system renderer (CPU or GPU).\r\n     * @zh 粒子系统渲染器（CPU 还是 GPU）。\r\n     */\r\n    @type(ParticleSystemRenderer)\r\n    @serializable\r\n    @displayOrder(26)\r\n    @tooltip('i18n:particle_system.renderer')\r\n    public renderer: ParticleSystemRenderer = new ParticleSystemRenderer();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private declare _isPlaying: boolean;\r\n    private declare _isPaused: boolean;\r\n    private declare _isStopped: boolean;\r\n    private declare _isEmitting: boolean;\r\n    private declare _needToRestart: boolean;\r\n    private declare _needRefresh: boolean;\r\n\r\n    private declare _time: number;  // playback position in seconds.\r\n    private declare _emitRateTimeCounter: number;\r\n    private declare _emitRateDistanceCounter: number;\r\n    private declare _oldWPos: Vec3;\r\n    private declare _curWPos: Vec3;\r\n\r\n    private declare _boundingBox: geometry.AABB | null;\r\n    private declare _culler: ParticleCuller | null;\r\n    private declare _oldPos: Vec3 | null;\r\n    private declare _curPos: Vec3 | null;\r\n    private declare _isCulled: boolean;\r\n    private declare _isSimulating: boolean;\r\n\r\n    private declare _customData1: Vec2;\r\n    private declare _customData2: Vec2;\r\n\r\n    private declare _subEmitters: any[]; // array of { emitter: ParticleSystem, type: 'birth', 'collision' or 'death'}\r\n\r\n    private declare _needAttach: boolean;\r\n\r\n    @serializable\r\n    private _prewarm = false;\r\n\r\n    @serializable\r\n    private _capacity = 100;\r\n\r\n    @serializable\r\n    private _simulationSpace = ParticleSpace.Local;\r\n\r\n    /**\r\n     * @en Particle update processor (update every particle).\r\n     * @zh 粒子更新器（负责更新每个粒子）。\r\n     */\r\n    public processor: ParticleSystemRendererBase = null!;\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        const self = this;\r\n\r\n        self.rateOverTime.constant = 10;\r\n        self.startLifetime.constant = 5;\r\n        self.startSizeX.constant = 1;\r\n        self.startSpeed.constant = 5;\r\n\r\n        // internal status\r\n        self._isPlaying = false;\r\n        self._isPaused = false;\r\n        self._isStopped = true;\r\n        self._isEmitting = false;\r\n        self._needToRestart = false;\r\n        self._needRefresh = true;\r\n        self._needAttach = false;\r\n\r\n        self._time = 0.0;  // playback position in seconds.\r\n        self._emitRateTimeCounter = 0.0;\r\n        self._emitRateDistanceCounter = 0.0;\r\n        self._oldWPos = new Vec3();\r\n        self._curWPos = new Vec3();\r\n\r\n        self._boundingBox = null;\r\n        self._culler = null;\r\n        self._oldPos = null;\r\n        self._curPos = null;\r\n        self._isCulled = false;\r\n        self._isSimulating = true;\r\n\r\n        self._customData1 = new Vec2();\r\n        self._customData2 = new Vec2();\r\n\r\n        self._subEmitters = []; // array of { emitter: ParticleSystem, type: 'birth', 'collision' or 'death'}\r\n    }\r\n\r\n    public onFocusInEditor (): void {\r\n        this.renderer.create(this);\r\n    }\r\n\r\n    public onLoad (): void {\r\n        // HACK, TODO\r\n        this.renderer.onInit(this);\r\n        if (this._shapeModule) this._shapeModule.onInit(this);\r\n        if (this._trailModule && !this.renderer.useGPU && this._trailModule.enable) {\r\n            this._trailModule.onInit(this);\r\n        }\r\n        this.bindModule();\r\n        this._resetPosition();\r\n\r\n        // this._system.add(this);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _onMaterialModified (index: number, material: Material): void {\r\n        if (this.processor !== null) {\r\n            this.processor.onMaterialModified(index, material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public override _onRebuildPSO (index: number, material: Material): void {\r\n        this.processor.onRebuildPSO(index, material);\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _collectModels (): scene.Model[] {\r\n        this._models.length = 0;\r\n        this._models.push(this.processor.model!);\r\n        if (this._trailModule && this._trailModule.enable && this._trailModule.getModel()) {\r\n            this._models.push(this._trailModule.getModel()!);\r\n        }\r\n        return this._models;\r\n    }\r\n\r\n    protected _attachToScene (): void {\r\n        this.processor.attachToScene();\r\n        if (this._trailModule && this._trailModule.enable) {\r\n            this._trailModule._attachToScene();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _detachFromScene (): void {\r\n        this.processor.detachFromScene();\r\n        if (this._trailModule && this._trailModule.enable) {\r\n            this._trailModule._detachFromScene();\r\n        }\r\n        if (this._boundingBox) {\r\n            this._boundingBox = null;\r\n        }\r\n        if (this._culler) {\r\n            this._culler.clear();\r\n            this._culler.destroy();\r\n            this._culler = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Bind module to particle processor.\r\n     * @zh 把模块绑定到粒子更新函数上。\r\n     */\r\n    private bindModule (): void {\r\n        if (this._colorOverLifetimeModule) this._colorOverLifetimeModule.bindTarget(this.processor);\r\n        if (this._sizeOvertimeModule) this._sizeOvertimeModule.bindTarget(this.processor);\r\n        if (this._rotationOvertimeModule) this._rotationOvertimeModule.bindTarget(this.processor);\r\n        if (this._forceOvertimeModule) this._forceOvertimeModule.bindTarget(this.processor);\r\n        if (this._limitVelocityOvertimeModule) this._limitVelocityOvertimeModule.bindTarget(this.processor);\r\n        if (this._velocityOvertimeModule) this._velocityOvertimeModule.bindTarget(this.processor);\r\n        if (this._textureAnimationModule) this._textureAnimationModule.bindTarget(this.processor);\r\n        if (this._noiseModule) this._noiseModule.bindTarget(this.processor);\r\n    }\r\n\r\n    // TODO: Fast forward current particle system by simulating particles over given period of time, then pause it.\r\n    // simulate(time, withChildren, restart, fixedTimeStep) {\r\n\r\n    // }\r\n\r\n    /**\r\n     * @en Play particle system.\r\n     * @zh 播放粒子效果。\r\n     */\r\n    public play (): void {\r\n        if (this._needToRestart) {\r\n            this.reset();\r\n            this._needToRestart = false;\r\n        }\r\n\r\n        if (this._isPaused) {\r\n            this._isPaused = false;\r\n        }\r\n        if (this._isStopped) {\r\n            this._isStopped = false;\r\n        }\r\n\r\n        this._isPlaying = true;\r\n        this._isEmitting = true;\r\n\r\n        this._resetPosition();\r\n\r\n        // prewarm\r\n        if (this._prewarm) {\r\n            this._prewarmSystem();\r\n        }\r\n\r\n        if (this._trailModule) {\r\n            this._trailModule.play();\r\n        }\r\n\r\n        if (this.processor) {\r\n            const model = this.processor.getModel();\r\n            if (model) {\r\n                model.enabled = this.enabledInHierarchy;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Pause particle system.\r\n     * @zh 暂停播放粒子效果。\r\n     */\r\n    public pause (): void {\r\n        if (this._isStopped) {\r\n            warn('pause(): particle system is already stopped.');\r\n            return;\r\n        }\r\n        if (this._isPlaying) {\r\n            this._isPlaying = false;\r\n        }\r\n\r\n        this._isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * @zh 停止发射粒子。\r\n     * @en Stop emitting particles.\r\n     */\r\n    public stopEmitting (): void {\r\n        this._isEmitting = false;\r\n        this._needToRestart = true;\r\n    }\r\n\r\n    /**\r\n     * @en Stop particle system.\r\n     * @zh 停止播放粒子。\r\n     */\r\n    public stop (): void {\r\n        if (this._isPlaying || this._isPaused) {\r\n            this.clear();\r\n        }\r\n        if (this._isPlaying) {\r\n            this._isPlaying = false;\r\n        }\r\n        if (this._isPaused) {\r\n            this._isPaused = false;\r\n        }\r\n        if (this._isEmitting) {\r\n            this._isEmitting = false;\r\n        }\r\n\r\n        this._isStopped = true;\r\n\r\n        // if stop emit modify the refresh flag to true\r\n        this._needRefresh = true;\r\n\r\n        this.reset();\r\n    }\r\n\r\n    private reset (): void {\r\n        this._time = 0.0;\r\n        this._emitRateTimeCounter = 0.0;\r\n        this._emitRateDistanceCounter = 0.0;\r\n        this._resetPosition();\r\n\r\n        this.bursts.forEach((burst) => {\r\n            burst.reset();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @en remove all particles from current particle system.\r\n     * @zh 将所有粒子从粒子系统中清除。\r\n     */\r\n    public clear (): void {\r\n        if (this.enabledInHierarchy) {\r\n            this.processor.clear();\r\n            if (this._trailModule) this._trailModule.clear();\r\n        }\r\n        this._calculateBounding(false);\r\n    }\r\n\r\n    /**\r\n     * @en Get current particle capacity.\r\n     * @zh 获取当前粒子数量。\r\n     */\r\n    public getParticleCount (): number {\r\n        if (this.processor) {\r\n            return this.processor.getParticleCount();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setCustomData1 (x: number, y: number): void {\r\n        Vec2.set(this._customData1, x, y);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public setCustomData2 (x: number, y: number): void {\r\n        Vec2.set(this._customData2, x, y);\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        this.stop();\r\n        if (this.processor.getModel()?.scene) {\r\n            this.processor.detachFromScene();\r\n            if (this._trailModule && this._trailModule.enable) {\r\n                this._trailModule._detachFromScene();\r\n            }\r\n        }\r\n        director.off(DirectorEvent.BEFORE_COMMIT, this.beforeRender, this);\r\n        // this._system.remove(this);\r\n        this.processor.onDestroy();\r\n        if (this._trailModule) this._trailModule.destroy();\r\n        if (this._culler) {\r\n            this._culler.clear();\r\n            this._culler.destroy();\r\n            this._culler = null;\r\n        }\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        super.onEnable();\r\n        director.on(DirectorEvent.BEFORE_COMMIT, this.beforeRender, this);\r\n        if (this.playOnAwake && !EDITOR_NOT_IN_PREVIEW) {\r\n            this.play();\r\n        }\r\n        this.processor.onEnable();\r\n        if (this._trailModule) this._trailModule.onEnable();\r\n    }\r\n    protected onDisable (): void {\r\n        director.off(DirectorEvent.BEFORE_COMMIT, this.beforeRender, this);\r\n        this.processor.onDisable();\r\n        if (this._trailModule) this._trailModule.onDisable();\r\n        if (this._boundingBox) {\r\n            this._boundingBox = null;\r\n        }\r\n        this._oldPos = null;\r\n        if (this._culler) {\r\n            this._culler.clear();\r\n            this._culler.destroy();\r\n            this._culler = null;\r\n        }\r\n    }\r\n\r\n    private _calculateBounding (forceRefresh: boolean): void {\r\n        const self = this;\r\n        if (self._boundingBox) {\r\n            if (!self._culler) {\r\n                self._culler = new ParticleCuller(self);\r\n            }\r\n            self._culler.calculatePositions();\r\n            geometry.AABB.fromPoints(self._boundingBox, self._culler.minPos, self._culler.maxPos);\r\n            if (forceRefresh) {\r\n                self.aabbHalfX = self._boundingBox.halfExtents.x;\r\n                self.aabbHalfY = self._boundingBox.halfExtents.y;\r\n                self.aabbHalfZ = self._boundingBox.halfExtents.z;\r\n            } else {\r\n                if (self.aabbHalfX) {\r\n                    self.setBoundingX(self.aabbHalfX);\r\n                } else {\r\n                    self.aabbHalfX = self._boundingBox.halfExtents.x;\r\n                }\r\n\r\n                if (self.aabbHalfY) {\r\n                    self.setBoundingY(self.aabbHalfY);\r\n                } else {\r\n                    self.aabbHalfY = self._boundingBox.halfExtents.y;\r\n                }\r\n\r\n                if (self.aabbHalfZ) {\r\n                    self.setBoundingZ(self.aabbHalfZ);\r\n                } else {\r\n                    self.aabbHalfZ = self._boundingBox.halfExtents.z;\r\n                }\r\n            }\r\n            self._culler.clear();\r\n        }\r\n    }\r\n\r\n    protected update (dt: number): void {\r\n        const self = this;\r\n        const thisProcessor = self.processor;\r\n        const thisTrailModule = self.trailModule;\r\n        const scaledDeltaTime = dt * self.simulationSpeed;\r\n\r\n        if (!self.renderCulling) {\r\n            if (self._boundingBox) {\r\n                self._boundingBox = null;\r\n            }\r\n            if (self._culler) {\r\n                self._culler.clear();\r\n                self._culler.destroy();\r\n                self._culler = null;\r\n            }\r\n            self._isSimulating = true;\r\n        } else {\r\n            if (!self._boundingBox) {\r\n                self._boundingBox = new geometry.AABB();\r\n                self._calculateBounding(false);\r\n            }\r\n\r\n            if (!self._curPos) {\r\n                self._curPos = new Vec3();\r\n            }\r\n            self.node.getWorldPosition(self._curPos);\r\n            if (!self._oldPos) {\r\n                self._oldPos = new Vec3();\r\n                self._oldPos.set(self._curPos);\r\n            }\r\n            const thisCurPos = self._curPos;\r\n            const thisOldPos = self._oldPos;\r\n\r\n            if (!thisCurPos.equals(thisOldPos) && self._boundingBox && self._culler) {\r\n                const dx = thisCurPos.x - thisOldPos.x;\r\n                const dy = thisCurPos.y - thisOldPos.y;\r\n                const dz = thisCurPos.z - thisOldPos.z;\r\n                const center = self._boundingBox.center;\r\n                center.x += dx;\r\n                center.y += dy;\r\n                center.z += dz;\r\n                self._culler.setBoundingBoxCenter(center.x, center.y, center.z);\r\n                thisOldPos.set(thisCurPos);\r\n            }\r\n\r\n            const renderScene = self.node.scene.renderScene;\r\n            const cameraLst: Camera[] | undefined = renderScene ? renderScene.cameras : undefined;\r\n            let culled = true;\r\n            if (cameraLst !== undefined && self._boundingBox) {\r\n                for (let i = 0; i < cameraLst.length; ++i) {\r\n                    const camera: Camera = cameraLst[i];\r\n                    const visibility = camera.visibility;\r\n                    if ((visibility & self.node.layer) === self.node.layer) {\r\n                        if (EDITOR_NOT_IN_PREVIEW) {\r\n                            if (camera.name === 'Editor Camera' && geometry.intersect.aabbFrustum(self._boundingBox, camera.frustum)) {\r\n                                culled = false;\r\n                                break;\r\n                            }\r\n                        } else if (geometry.intersect.aabbFrustum(self._boundingBox, camera.frustum)) {\r\n                            culled = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (culled) {\r\n                if (self._cullingMode !== ParticleCullingMode.AlwaysSimulate) {\r\n                    self._isSimulating = false;\r\n                }\r\n                if (!self._isCulled) {\r\n                    thisProcessor.detachFromScene();\r\n                    self._isCulled = true;\r\n                }\r\n                if (thisTrailModule && thisTrailModule.enable) {\r\n                    thisTrailModule._detachFromScene();\r\n                }\r\n                if (self._cullingMode === ParticleCullingMode.PauseAndCatchup) {\r\n                    self._time += scaledDeltaTime;\r\n                }\r\n                if (self._cullingMode !== ParticleCullingMode.AlwaysSimulate) {\r\n                    return;\r\n                }\r\n            } else {\r\n                if (self._isCulled) {\r\n                    self._attachToScene();\r\n                    self._isCulled = false;\r\n                }\r\n                if (!self._isSimulating) {\r\n                    self._isSimulating = true;\r\n                }\r\n            }\r\n\r\n            if (!self._isSimulating) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (self._isPlaying) {\r\n            self._time += scaledDeltaTime;\r\n\r\n            // Execute emission\r\n            self._emit(scaledDeltaTime);\r\n\r\n            // simulation, update particles.\r\n            if (thisProcessor.updateParticles(scaledDeltaTime) === 0 && !self._isEmitting) {\r\n                self.stop();\r\n            }\r\n        } else {\r\n            const mat: Material | null = self.getMaterialInstance(0) || thisProcessor.getDefaultMaterial();\r\n            const pass = mat!.passes[0];\r\n            thisProcessor.updateRotation(pass);\r\n            thisProcessor.updateScale(pass);\r\n        }\r\n\r\n        if (self._needAttach) { // Check whether this particle model should be reattached\r\n            if (self.getParticleCount() > 0) {\r\n                if (!self._isCulled) {\r\n                    if (!thisProcessor.getModel()?.scene) {\r\n                        thisProcessor.attachToScene();\r\n                    }\r\n                    if (thisTrailModule && thisTrailModule.enable) {\r\n                        if (!thisTrailModule.getModel()?.scene) {\r\n                            thisTrailModule._attachToScene();\r\n                        }\r\n                    }\r\n                    self._needAttach = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!self.renderer.useGPU && thisTrailModule && thisTrailModule.enable) {\r\n            if (!thisTrailModule.inited) {\r\n                thisTrailModule.clear();\r\n                thisTrailModule.destroy();\r\n                thisTrailModule.onInit(this);\r\n                // Rebuild trail buffer\r\n                thisTrailModule.enable = false;\r\n                thisTrailModule.enable = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected beforeRender (): void {\r\n        const self = this;\r\n        const thisProcessor = self.processor;\r\n        const thisTrailModule = self.trailModule;\r\n        if (self.getParticleCount() <= 0) {\r\n            if (thisProcessor.getModel()?.scene) {\r\n                thisProcessor.detachFromScene();\r\n                if (thisTrailModule && thisTrailModule.enable) {\r\n                    thisTrailModule._detachFromScene();\r\n                }\r\n                self._needAttach = false;\r\n            }\r\n        } else if (!thisProcessor.getModel()?.scene) {\r\n            self._needAttach = true;\r\n        }\r\n\r\n        if (!self._isPlaying) return;\r\n\r\n        // update render data\r\n        thisProcessor.updateRenderData();\r\n        thisProcessor.beforeRender();\r\n        // update trail\r\n        if (thisTrailModule && thisTrailModule.enable) {\r\n            thisTrailModule.updateRenderData();\r\n            thisTrailModule.beforeRender();\r\n        }\r\n    }\r\n\r\n    protected _onVisibilityChange (val: number): void {\r\n        if (this.processor.model) {\r\n            this.processor.model.visFlags = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * emit is used in burst.ts, so it should be public and marked as engine internal.\r\n     */\r\n    public emit (count: number, dt: number): void {\r\n        const self = this;\r\n        const node = self.node;\r\n        const loopDelta = (self._time % self.duration) / self.duration; // loop delta value\r\n\r\n        // refresh particle node position to update emit position\r\n        if (self._needRefresh) {\r\n            // this.node.setPosition(this.node.getPosition());\r\n            node.invalidateChildren(TransformBit.POSITION);\r\n\r\n            self._needRefresh = false;\r\n        }\r\n\r\n        if (self._simulationSpace === ParticleSpace.World) {\r\n            node.getWorldMatrix(_world_mat);\r\n            node.getWorldRotation(_world_rol);\r\n        }\r\n\r\n        for (let i = 0; i < count; ++i) {\r\n            const particle = self.processor.getFreeParticle();\r\n            if (particle === null) {\r\n                return;\r\n            }\r\n            particle.particleSystem = self;\r\n            particle.reset();\r\n\r\n            const rand = pseudoRandom(randomRangeInt(0, bits.INT_MAX));\r\n\r\n            if (self._shapeModule && self._shapeModule.enable) {\r\n                self._shapeModule.emit(particle);\r\n            } else {\r\n                Vec3.set(particle.position, 0, 0, 0);\r\n                Vec3.copy(particle.velocity, particleEmitZAxis);\r\n            }\r\n\r\n            if (self._textureAnimationModule && self._textureAnimationModule.enable) {\r\n                self._textureAnimationModule.init(particle);\r\n            }\r\n\r\n            const curveStartSpeed = self.startSpeed.evaluate(loopDelta, rand)!;\r\n            Vec3.multiplyScalar(particle.velocity, particle.velocity, curveStartSpeed);\r\n\r\n            if (self._simulationSpace === ParticleSpace.World) {\r\n                Vec3.transformMat4(particle.position, particle.position, _world_mat);\r\n                Vec3.transformQuat(particle.velocity, particle.velocity, _world_rol);\r\n            }\r\n\r\n            Vec3.copy(particle.ultimateVelocity, particle.velocity);\r\n            // apply startRotation.\r\n            if (self.startRotation3D) {\r\n                // eslint-disable-next-line max-len\r\n                particle.startEuler.set(self.startRotationX.evaluate(loopDelta, rand), self.startRotationY.evaluate(loopDelta, rand), self.startRotationZ.evaluate(loopDelta, rand));\r\n            } else {\r\n                particle.startEuler.set(0, 0, self.startRotationZ.evaluate(loopDelta, rand));\r\n            }\r\n            particle.rotation.set(particle.startEuler);\r\n\r\n            // apply startSize.\r\n            if (self.startSize3D) {\r\n                Vec3.set(\r\n                    particle.startSize,\r\n                    self.startSizeX.evaluate(loopDelta, rand)!,\r\n                    self.startSizeY.evaluate(loopDelta, rand)!,\r\n                    self.startSizeZ.evaluate(loopDelta, rand)!,\r\n                );\r\n            } else {\r\n                Vec3.set(particle.startSize, self.startSizeX.evaluate(loopDelta, rand)!, 1, 1);\r\n                particle.startSize.y = particle.startSize.x;\r\n            }\r\n            Vec3.copy(particle.size, particle.startSize);\r\n\r\n            // apply startColor.\r\n            particle.startColor.set(self.startColor.evaluate(loopDelta, rand));\r\n            particle.color.set(particle.startColor);\r\n\r\n            // apply startLifetime.\r\n            particle.startLifetime = self.startLifetime.evaluate(loopDelta, rand)! + dt;\r\n            particle.remainingLifetime = particle.startLifetime;\r\n\r\n            particle.randomSeed = randomRangeInt(0, 233280);\r\n            particle.loopCount++;\r\n\r\n            self.processor.setNewParticle(particle);\r\n        } // end of particles forLoop.\r\n    }\r\n\r\n    // initialize particle system as though it had already completed a full cycle.\r\n    private _prewarmSystem (): void {\r\n        this.startDelay.mode = Mode.Constant; // clear startDelay.\r\n        this.startDelay.constant = 0;\r\n        const dt = 1.0; // should use varying value?\r\n        const cnt = this.duration / dt;\r\n\r\n        for (let i = 0; i < cnt; ++i) {\r\n            this._time += dt;\r\n            this._emit(dt);\r\n            this.processor.updateParticles(dt);\r\n        }\r\n    }\r\n\r\n    // internal function\r\n    private _emit (dt: number): void {\r\n        const self = this;\r\n        // emit particles.\r\n        const startDelay = self.startDelay.evaluate(0, 1)!;\r\n        if (self._time > startDelay) {\r\n            if (self._time > (self.duration + startDelay)) {\r\n                // self._time = startDelay; // delay will not be applied from the second loop.(Unity)\r\n                // self._emitRateTimeCounter = 0.0;\r\n                // self._emitRateDistanceCounter = 0.0;\r\n                if (!self.loop) {\r\n                    self._isEmitting = false;\r\n                }\r\n            }\r\n\r\n            if (!self._isEmitting) return;\r\n\r\n            // emit by rateOverTime\r\n            self._emitRateTimeCounter += self.rateOverTime.evaluate(self._time / self.duration, 1)! * dt;\r\n            if (self._emitRateTimeCounter > 1) {\r\n                const emitNum = Math.floor(self._emitRateTimeCounter);\r\n                self._emitRateTimeCounter -= emitNum;\r\n                self.emit(emitNum, dt);\r\n            }\r\n\r\n            // emit by rateOverDistance\r\n            const rateOverDistance = self.rateOverDistance.evaluate(self._time / self.duration, 1)!;\r\n            if (rateOverDistance > 0) {\r\n                Vec3.copy(self._oldWPos, self._curWPos);\r\n                self.node.getWorldPosition(self._curWPos);\r\n                const distance = Vec3.distance(self._curWPos, self._oldWPos);\r\n                self._emitRateDistanceCounter += distance * rateOverDistance;\r\n            }\r\n\r\n            if (self._emitRateDistanceCounter > 1) {\r\n                const emitNum = Math.floor(self._emitRateDistanceCounter);\r\n                self._emitRateDistanceCounter -= emitNum;\r\n                self.emit(emitNum, dt);\r\n            }\r\n\r\n            // bursts\r\n            for (const burst of self.bursts) {\r\n                burst.update(self, dt);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resetPosition (): void {\r\n        this.node.getWorldPosition(this._oldWPos);\r\n        Vec3.copy(this._curWPos, this._oldWPos);\r\n    }\r\n\r\n    private addSubEmitter (subEmitter): void {\r\n        this._subEmitters.push(subEmitter);\r\n    }\r\n\r\n    private removeSubEmitter (idx: number): void {\r\n        this._subEmitters.splice(this._subEmitters.indexOf(idx), 1);\r\n    }\r\n\r\n    private addBurst (burst: Burst): void {\r\n        this.bursts.push(burst);\r\n    }\r\n\r\n    private removeBurst (burst: Burst): void {\r\n        const i = this.bursts.indexOf(burst);\r\n        if (i > -1) {\r\n            this.bursts.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    private getBoundingX (): number {\r\n        return this._aabbHalfX;\r\n    }\r\n\r\n    private getBoundingY (): number {\r\n        return this._aabbHalfY;\r\n    }\r\n\r\n    private getBoundingZ (): number {\r\n        return this._aabbHalfZ;\r\n    }\r\n\r\n    private setBoundingX (value: number): void {\r\n        if (this._boundingBox && this._culler) {\r\n            this._boundingBox.halfExtents.x = value;\r\n            this._culler.setBoundingBoxSize(this._boundingBox.halfExtents);\r\n            this._aabbHalfX = value;\r\n        }\r\n    }\r\n\r\n    private setBoundingY (value: number): void {\r\n        if (this._boundingBox && this._culler) {\r\n            this._boundingBox.halfExtents.y = value;\r\n            this._culler.setBoundingBoxSize(this._boundingBox.halfExtents);\r\n            this._aabbHalfY = value;\r\n        }\r\n    }\r\n\r\n    private setBoundingZ (value: number): void {\r\n        if (this._boundingBox && this._culler) {\r\n            this._boundingBox.halfExtents.z = value;\r\n            this._culler.setBoundingBoxSize(this._boundingBox.halfExtents);\r\n            this._aabbHalfZ = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    get isPlaying (): boolean {\r\n        return this._isPlaying;\r\n    }\r\n\r\n    /**\r\n     * @en Query particle system is paused or not.\r\n     * @zh 获取粒子系统当前是否已经暂停运行。\r\n     */\r\n    get isPaused (): boolean {\r\n        return this._isPaused;\r\n    }\r\n\r\n    /**\r\n     * @en Query particle system is stopped or not.\r\n     * @zh 获取粒子系统当前是否已经停止。\r\n     */\r\n    get isStopped (): boolean {\r\n        return this._isStopped;\r\n    }\r\n\r\n    /**\r\n     * @en Query particle system is emitting or not.\r\n     * @zh 获取粒子系统当前是否还在发射。\r\n     */\r\n    get isEmitting (): boolean {\r\n        return this._isEmitting;\r\n    }\r\n\r\n    /**\r\n     * @en Query particle system simulation time.\r\n     * @zh 获取粒子系统运行时间。\r\n     */\r\n    get time (): number {\r\n        return this._time;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _onBeforeSerialize (props): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.dataCulling ? props.filter((p: string): any => !PARTICLE_MODULE_PROPERTY.includes(p) || (this[p] && this[p].enable)) : props;\r\n    }\r\n\r\n    /**\r\n     * @en Gets the preview of noise texture.\r\n     * @zh 获取噪声图预览。\r\n     * @param width @en Noise texture width @zh 噪声图宽度\r\n     * @param height @en Noise texture height @zh 噪声图高度\r\n     * @returns @en Noise texture RGB pixel array @zh 噪声图 RGB 纹理数组\r\n     */\r\n    public getNoisePreview (width: number, height: number): number[] {\r\n        const out: number[] = [];\r\n        if (this.processor) {\r\n            this.processor.getNoisePreview(out, width, height);\r\n        }\r\n        return out;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { instantiate } from '../serialization';\r\nimport { CCObject, Pool } from '../core';\r\nimport { director, DirectorEvent } from '../game/director';\r\nimport { Node } from '../scene-graph';\r\nimport { ParticleSystem } from './particle-system';\r\n\r\n/**\r\n * @en Contains some util functions for particle system. Such as create and destroy particle system.\r\n * @zh 该类包含一些粒子系统的工具函数，例如创建和销毁粒子系统。\r\n */\r\nexport class ParticleUtils {\r\n    /**\r\n     * @en Instantiate particle system from prefab.\r\n     * @zh 从 prefab 实例化粒子系统。\r\n     */\r\n    public static instantiate (prefab: any): CCObject {\r\n        if (!this.registeredSceneEvent) {\r\n            director.on(DirectorEvent.BEFORE_SCENE_LAUNCH, this.onSceneUnload, this);\r\n            this.registeredSceneEvent = true;\r\n        }\r\n        const uuid = prefab._uuid as string;\r\n        if (!this.particleSystemPool.has(uuid)) {\r\n            const ps = new Pool<CCObject>(\r\n                (): CCObject => instantiate(prefab as CCObject) || new Node(),\r\n                1,\r\n                (prefab): boolean => prefab.destroy(),\r\n            );\r\n            this.particleSystemPool.set(uuid, ps);\r\n        }\r\n        return this.particleSystemPool.get(uuid)!.alloc();\r\n    }\r\n\r\n    /**\r\n     * @en Destroy particle system prefab.\r\n     * @zh 销毁创建出来的粒子系统prefab。\r\n     * @param prefab @en Particle system prefab to destroy. @zh 要销毁的粒子系统prefab。\r\n     */\r\n    public static destroy (prefab: Node): void {\r\n        const uuid = prefab.prefab?.asset?.uuid;\r\n        if (uuid && this.particleSystemPool.has(uuid)) {\r\n            this.stop(prefab);\r\n            this.particleSystemPool.get(uuid)!.free(prefab);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Play particle system.\r\n     * @zh 播放粒子系统。\r\n     * @param rootNode @en Root node contains the particle system. @zh 包含粒子系统的根节点。\r\n     */\r\n    public static play (rootNode: Node): void {\r\n        for (const ps of rootNode.getComponentsInChildren(ParticleSystem)) {\r\n            ps.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Stop particle system.\r\n     * @zh 停止播放粒子系统。\r\n     * @param rootNode @en Root node contains the particle system. @zh 包含粒子系统的根节点。\r\n     */\r\n    public static stop (rootNode: Node): void {\r\n        for (const ps of rootNode.getComponentsInChildren(ParticleSystem)) {\r\n            ps.stop();\r\n        }\r\n    }\r\n\r\n    private static particleSystemPool: Map<string, Pool<CCObject>> = new Map<string, Pool<CCObject>>();\r\n    private static registeredSceneEvent = false;\r\n\r\n    private static onSceneUnload (): void {\r\n        this.particleSystemPool.forEach((value): void => value.destroy());\r\n        this.particleSystemPool.clear();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { removeProperty, replaceProperty, js, cclegacy } from '../core';\r\nimport Burst from './burst';\r\nimport { ParticleSystem } from './particle-system';\r\nimport { Billboard } from './billboard';\r\nimport { Line } from './line';\r\n\r\nremoveProperty(Burst.prototype, 'Burst.prototype', [\r\n    {\r\n        name: 'minCount',\r\n    },\r\n    {\r\n        name: 'maxCount',\r\n    },\r\n]);\r\n\r\nreplaceProperty(ParticleSystem.prototype, 'ParticleSystem.prototype', [\r\n    {\r\n        name: 'enableCulling',\r\n        newName: 'dataCulling',\r\n    },\r\n]);\r\n\r\n/**\r\n * Alias of [[ParticleSystem]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { ParticleSystem as ParticleSystemComponent };\r\ncclegacy.ParticleSystemComponent = ParticleSystem;\r\njs.setClassAlias(ParticleSystem, 'cc.ParticleSystemComponent');\r\n/**\r\n * Alias of [[Billboard]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { Billboard as BillboardComponent };\r\ncclegacy.BillboardComponent = Billboard;\r\njs.setClassAlias(Billboard, 'cc.BillboardComponent');\r\n/**\r\n * Alias of [[Line]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { Line as LineComponent };\r\ncclegacy.LineComponent = Line;\r\njs.setClassAlias(Line, 'cc.LineComponent');\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Billboard } from './billboard';\r\nimport { Line } from './line';\r\nimport { ParticleSystem } from './particle-system';\r\nimport { ParticleUtils } from './particle-utils';\r\nimport CurveRange from './animator/curve-range';\r\nimport { cclegacy } from '../core';\r\nimport GradientRange from './animator/gradient-range';\r\nimport Burst from './burst';\r\n\r\nexport {\r\n    Billboard,\r\n    Line,\r\n    ParticleSystem,\r\n    ParticleUtils,\r\n    CurveRange,\r\n    GradientRange,\r\n    Burst,\r\n};\r\n\r\nexport * from './deprecated';\r\n\r\ncclegacy.ParticleUtils = ParticleUtils;\r\n"],"names":["Billboard","_dec","ccclass","_dec2","type","Texture2D","_dec3","_class2","_Component","_inheritsLoose","_proto","prototype","_this","call","this","_texture","_initializer","_height","_initializer2","_width","_initializer3","_rotation","_initializer4","_techIndex","_initializer5","_model","_mesh","_material","_uniform","Vec4","updateTexture","setProperty","updateHeight","y","updateWidth","x","updateRotation","z","updateTechnique","technique","detachFromScene","destroy","createModel","enabled","attachToScene","onLoad","onEnable","onDisable","node","scene","_getRenderScene","addModel","removeModel","createMesh","primitiveMode","PrimitiveMode","TRIANGLE_LIST","positions","uvs","colors","Color","WHITE","r","g","b","a","attributes","Attribute","AttributeName","ATTR_POSITION","Format","RGB32F","ATTR_TEX_COORD","RG32F","ATTR_COLOR","RGBA8UI","indices","undefined","calculateBounds","model","cclegacy","director","root","transform","Material","copy","builtinResMgr","get","initSubModel","renderingSubMeshes","_createClass","key","set","val","Math","round","toDegree","toRadian","_this$_material","_this$_material$effec","floor","techs","effectAsset","techniques","length","Component","_applyDecoratedInitializer","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor","serializable","_class","exports","BillboardComponent","_vertex_attrs","RGBA32F","ATTR_TEX_COORD1","RGBA8","_temp_v1","Vec3","_temp_v2","LineModel","_scene$Model","_capacity","_vertSize","_vBuffer","_vertAttrsFloatCount","_vdataF32","_vdataUint32","_subMeshData","_vertCount","_indexCount","_iaVertCount","_iaIndexCount","LINE","setCapacity","capacity","createBuffer","_step","_iterator","_createForOfIteratorHelperLoose","done","value","offset","FormatInfos","format","size","createSubMeshData","Float32Array","Uint32Array","updateMaterial","mat","setSubModelMaterial","destroySubMeshData","vertexBuffer","_device","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","DEVICE","vBuffer","ArrayBuffer","update","Uint16Array","dst","i","baseIdx","indexBuffer","INDEX","BYTES_PER_ELEMENT","RenderingSubMesh","addLineVertexData","width","color","subtract","evaluate","toUint32","seg","updateIA","max","count","ia","_subModels","inputAssembler","vertexBuffers","firstIndex","indexCount","vertexCount","setClassAttr","CCClass","Attr","SerializableTable","Mode","Enum","Constant","Curve","TwoCurves","TwoConstants","CurveRange","constant","constantMin","constantMax","multiplier","_mode","time","rndRatio","spline","lerp","splineMin","splineMax","getMax","isZero","approx","EPSILON","abs","_onBeforeSerialize","mode","geometry","_this$_curve","_curve","_internalCurve","_this$_curveMin","_curveMin","_this$_curveMax","_curveMax","evaluateCurve","cr","index","evaluateHeight","packTexture","data","height","image","ImageAsset","_data","_compressed","PixelFormat","texture","setFilters","TextureFilter","NEAREST","setMipFilter","NONE","setWrapMode","WrapMode","CLAMP_TO_EDGE","tex","uploadData","packCurveRangeZ","samples","len","interval","h","j","texdata","packCurveRangeN","average","packCurveRangeXY","curves","packCurveRangeXYZ","discrete","sum","packCurveRangeXYZW","w","fastDefine","freeze","setPropertyEnumType","RealCurve","EDITOR","Gradient","TwoColors","TwoGradients","RandomColor","tempColor","tempColor2","GradientRange","_dec4","_dec6","_class3","colorMin","colorMax","gradient","gradientMin","gradientMax","_initializer6","_initializer7","_color","clone","getRandomColor","evaluateFast","m","_dec5","evaluateGradient","gr","packGradientRange","Uint8Array","create","RGBA8888","LINEAR","CC_USE_WORLD_SPACE","define","CC_USE_WORLD_SCALE","Line","_dec8","_dec9","Vec2","_ModelRenderer","_worldSpace","_positions","_tile","_tile_offset","_offset","_initializer8","_models","push","lineMaterial","material","matIns","getMaterialInstance","worldSpace","recompileShaders","_attachToScene","tile","_detachFromScene","lineModel","_onMaterialModified","getSharedMaterial","setSharedMaterial","sharedMaterials","ModelRenderer","override","_dec7","_dec10","LineComponent","Particle","particleSystem","position","velocity","animatedVelocity","ultimateVelocity","angularVelocity","axisOfRotation","rotation","startEuler","startRotation","startRotated","deltaQuat","deltaMat","localMat","startSize","startColor","randomSeed","remainingLifetime","loopCount","lastLoop","trailDelay","startLifetime","emitAccumulator0","emitAccumulator1","frameIndex","startRow","Quat","Mat4","reset","identity","INDENTIFY_NEG_QUAT","R2D","PI","ParticleSpace","ParticleCullingMode","ParticleAlignmentSpace","ParticleRenderMode","ParticleShapeType","ParticleEmitLocation","ParticleArcMode","ParticleTrailMode","ParticleTextureMode","ParticleModuleRandSeed","PARTICLE_MODULE_NAME","PARTICLE_MODULE_ORDER","PARTICLE_MODULE_PROPERTY","ParticleModuleBase","target","needUpdate","needAnimate","name","_proto2","bindTarget","particleEmitZAxis","calculateTransform","systemSpace","moduleSpace","worldTransform","outQuat","World","invert","getRotation","fixedAngleUnitVector2","out","theta","cos","sin","randomUnitVector","randomRange","sqrt","randomPointBetweenSphere","minRadius","maxRadius","multiplyScalar","random","randomPointBetweenCircleAtFixedAngle","randomSortArray","arr","transpose","randomRangeInt","randomSign","sgn","bits","isCurveTwoValues","curve","isGradientTwoValues","COLOR_OVERTIME_RAND_OFFSET","COLOR","ColorOvertimeModule","_ParticleModuleBase","_enable","animate","particle","rand","pseudoRandom","multiply","enableModule","FORCE_OVERTIME_RAND_OFFSET","FORCE","_temp_v3","ForceOvertimeModule","space","randomized","needTransform","p","dt","normalizedTime","randX","randY","randZ","force","transformQuat","scaleAndAdd","Local","LIMIT_VELOCITY_RAND_OFFSET","LIMIT","_temp_v3_1","LimitVelocityOvertimeModule","limitX","limitY","limitZ","limit","dampen","separateAxes","drag","multiplyDragByParticleSize","multiplyDragByParticleVelocity","dampedVel","dampenBeyondLimit","normalize","vel","sign","absToGive","ROTATION_OVERTIME_RAND_OFFSET","ROTATION","RotationOvertimeModule","_separateAxes","_startMat","_matRot","_quatRot","_otherEuler","_processRotation","renderMode","processor","getInfo","Mesh","StrecthedBillboard","VerticalBillboard","HorizontalBillboard","fromEuler","fromQuat","SIZE_OVERTIME_RAND_OFFSET","SIZE","SizeOvertimeModule","currLifetime","TEXTURE_ANIMATION_RAND_OFFSET","TEXTURE","Grid","Animation","WholeSheet","SingleRow","TextureAnimationModule","formerlySerializedAs","_numTilesX","_numTilesY","animation","frameOverTime","startFrame","cycleCount","_flipU","_initializer9","_flipV","_initializer10","_uvChannelMask","_initializer11","randomRow","_initializer12","rowIndex","_initializer13","init","numTilesY","randStart","randFrame","numTilesX","repeat","rowLength","f","from","to","scaleNumTilesXY","scale","updateMaterialParams","error","VELOCITY_X_OVERTIME_RAND_OFFSET","VELOCITY_X","VELOCITY_Y_OVERTIME_RAND_OFFSET","VELOCITY_Y","VELOCITY_Z_OVERTIME_RAND_OFFSET","VELOCITY_Z","VelocityOvertimeModule","speedModifier","randSpeed","add","Burst","_time","_repeatCount","repeatInterval","_remainingCount","_curTime","psys","preFrameTime","startDelay","duration","curFrameTime","emit","getMaxCount","min","ceil","repeatCount","_intermediVec","_intermediArr","_unitBoxExtent","ShapeModule","_shapeType","emitFrom","alignToDirection","randomDirectionAmount","sphericalDirectionAmount","randomPositionAmount","radius","radiusThickness","arcMode","arcSpread","arcSpeed","boxThickness","_initializer14","_position","_initializer15","_initializer16","_scale","_initializer17","_arc","_initializer18","_angle","_initializer19","quat","lastTime","totalAngle","onInit","ps","constructMat","shapeType","Box","boxEmit","Circle","generateArcAngle","pos","dir","Cone","coneEmit","Sphere","sphereEmit","Hemisphere","hemisphereEmit","warn","transformMat4","sphericalVel","fromRTS","Random","angle","Loop","PingPong","pingPong","Base","Volume","Edge","Shell","extents","applyBoxThickness","thickness","clamp","_uvs","_uvs_ins","ParticleBatchModel","_bufferSize","_vertAttrs","_vertAttribSize","_startTimeOffset","_lifeTimeOffset","_vertAttribSizeStatic","_vertStaticAttrsFloatCount","_insBuffers","_insIndices","_useInstance","PARTICLE_BATCH","deviceManager","gfxDevice","hasFeature","Feature","INSTANCED_ARRAYS","capChanged","rebuild","setVertexAttributes","mesh","attrs","setVertexAttributesIns","_step2","_iterator2","stream","struct","vertexBundles","primitives","vertexBundelIndices","view","indexView","HOST","vOffset","findIndex","copyAttribute","vIdx","ATTR_TEX_COORD3","ATTR_NORMAL","vb","iVertex","vbFloatArray","copyWithin","copyIndices","createSubMeshDataInsDynamic","createSubMeshDataInsStatic","createInsSubmesh","addParticleVertexData","pvdata","addParticleVertexDataIns","texcoord","addGPUParticleVertexData","num","addGPUParticleVertexDataIns","idx","updateGPUParticles","updateGPUParticlesIns","pSize","pBaseIndex","startTime","lastBaseIndex","constructAttributeIndex","updateIAIns","instanceCount","clear","clearIns","doDestroy","rebuildIns","ParticleSystemRendererBase","info","_particleSystem","_renderInfo","getUseInstance","onDestroy","destroyModel","_this$_particleSystem","updateVertexAttrib","getModel","_initModel","visFlags","visibility","updateTrailMaterial","getDefaultTrailMaterial","ParticleNoise","permutation","accSpeed","noiseSpeed","noiseFrequency","noiseAbs","noiseAmplitude","octaves","point","result","mixOut","noise","Array","X","Y","Z","u","fade","v","A","AA","AB","B","BA","BB","grad","t","hash","n","setSpeed","setFrequency","setAbs","setAmplititude","setOctaves","setTime","setSamplePoint","getResult","getNoise","sx","sy","sz","frequency","amplitude","range","getNoiseMix","offSpeed","getNoiseParticle","sampX","sampY","sampZ","getPreview","sampx","sampy","pix","_tempNodeScale","_tempAttribUV","v3","_tempWorldTrans","_tempParentInverse","_node_rot","_animModule","CC_USE_EMBEDDED_ALPHA","CC_RENDER_MODE","ATTR_COLOR1","ATTR_TEX_COORD2","ATTR_TEX_COORD4","createAttribute","isNormalized","isInstanced","location","_vertex_attrs_stretch","_vertex_attrs_mesh","_vertex_attrs_ins","_vertex_attrs_stretch_ins","_vertex_attrs_mesh_ins","_matInsInfo","parent","owner","subModelIdx","PVData","ParticleSystemRendererCPU","_ParticleSystemRender","_defines","_trailDefines","_frameTile_velLenScale","_tmp_velLenScale","_defaultMat","_node_scale","_particleVertexData","_particles","_defaultTrailMat","_updateList","Map","_animateList","_runAnimateList","_fillDataFunc","_uScaleHandle","_uLenHandle","_uNodeRotHandle","_alignSpace","View","_inited","_localMat","_gravity","CC_USE_BILLBOARD","CC_USE_STRETCHED_BILLBOARD","CC_USE_HORIZONTAL_BILLBOARD","CC_USE_VERTICAL_BILLBOARD","_this2","RecyclePool","_setVertexAttrib","_setFillFunc","_initModuleList","_trailModule","updateRenderData","updateRenderMode","_this$_particles","getFreeParticle","setNewParticle","_this3","forEach","pm","enable","updateAlignSpace","getDefaultMaterial","pass","doUpdateRotation","_this$_particleSystem2","getWorldRotation","_this$_particleSystem3","_this$_particleSystem4","cameraLst","renderScene","cameras","camera","layer","fromViewUp","forward","setUniform","updateScale","doUpdateScale","_this$_particleSystem5","_this$_particleSystem6","_this$_particleSystem7","nodeScale","scaleSpace","getScale","getWorldScale","updateParticles","_this4","getWorldMatrix","passes","trailModule","trailEnable","useGravity","gravityModifier","simulationSpace","worldRotation","_loop","removeParticle","removeAt","gravityFactor","getNoisePreview","_this5","fi","textureModule","_textureAnimationModule","beforeRender","getParticleCount","onMaterialModified","onRebuildPSO","trailModel","_fillMeshData","_fillStrecthedData","_fillNormalData","particleVertexData","_fillStrecthedDataIns","_fillNormalDataIns","readAttributeFormat","_setVertexAttribIns","slice","shareMaterial","sharedMaterial","mainTexture","getProperty","MaterialInstance","getHandle","vlenScale","velocityScale","lengthScale","isAlphaAtlas","roationModule","_rotationOvertimeModule","setUseInstance","useInstance","_tempVec4","_world_rot","_sample_num","_vert_attr_name","_gpu_vert_attr","R32F","_gpu_vert_attr_mesh","_gpu_vert_attr_ins","_gpu_vert_attr_mesh_ins","ParticleSystemRendererGPU","_unifrom_velLenScale","_particleNum","_tempParticle","_colorTexture","_forceTexture","_velocityTexture","_rotationTexture","_sizeTexture","_animTexture","_colorData","_forceData","_velocityData","_rotationData","_sizeData","_animData","_uTimeHandle","_uRotHandle","COLOR_OVER_TIME_MODULE_ENABLE","initShaderUniform","updateShaderUniform","_this$_particleSystem8","_this$_particleSystem9","_this$_particleSystem10","_this$_particleSystem11","_this$_particleSystem12","_this$_particleSystem13","forceModule","_forceOvertimeModule","packed","handle","binding","getBindingFromHandle","bindSampler","getGFXSampler","bindTexture","getGFXTexture","spaceHandle","modeHandle","velocityModule","_velocityOvertimeModule","colorModule","_colorOverLifetimeModule","sizeModule","_sizeOvertimeModule","infoHandle","gfxAPI","API","VULKAN","isSupportGPUParticle","device","capabilities","maxVertexTextureUnits","getFormatFeatures","FormatFeatureBit","RENDER_TARGET","SAMPLED_TEXTURE","ParticleSystemRenderer","_renderMode","_velocityScale","_lengthScale","_cpuMaterial","_gpuMaterial","_mainTexture","_useGPU","errorID","useGPU","alignSpace","gpuMaterial","particleMaterial","effectName","indexOf","warnID","cpuMaterial","_switchProcessor","bindModule","AlignmentSpace","DIRECTION_THRESHOLD","_temp_trailEle","_temp_quat","_temp_vec3","_temp_vec3_1","_temp_color","TrailSegment","maxTrailElementNum","start","end","trailElements","lifetime","direction","getElement","addElement","splice","newEleLoc","iterateElement","TrailModule","lifeTime","_minParticleDistance","existWithParticles","textureMode","widthFromParticle","widthRatio","colorFromParticle","colorOverTrail","colorOvertime","_space","_minSquaredDistance","_trailNum","_trailLifetime","vbOffset","ibOffset","_trailSegments","_particleTrail","_trailModel","_vbF32","_vbUint32","_iBuffer","_needTransform","_psTransform","reduce","attr","minParticleDistance","burstCount","psTime","psRate","rateOverTime","bursts","Pool","obj","play","trailIter","values","trail","next","scaledDt","alloc","lastSeg","_updateTrailElement","squaredDistance","trailNum","lastSecondTrail","lastThirdTrail","equals","ZERO","_checkDirectionReverse","free","keys","trailSeg","indexOffset","textCoordSeg","startSegEle","_fillVertexBuffer","segEle","PRE_TRIANGLE_INDEX","invalidateChildren","TransformBit","POSITION","vbF32","vertSizeDiv4","lastSecondTrailVelocity","subModels","subModel","_createModel","self","module","trailEle","colorModifer","xTexCoord","trailEleIdx","indexSet","currElement","prevElement","dot","Particles","Stretch","_nodeMat","_nodeParentInv","_nodeRol","_nodeScale","ParticleCuller","_processor","_node","_particlesAll","minPos","maxPos","_nodePos","_nodeSize","_updateBoundingNode","setBoundingBoxSize","halfExt","setBoundingBoxCenter","px","py","pz","_emit","particleLst","loopDelta","_shapeModule","curveStartSpeed","startSpeed","startSize3D","startSizeX","startSizeY","startSizeZ","_updateParticles","_calculateBounding","isInit","subPos","addPos","meshSize","minPosition","maxPosition","meshAABB","fromPoints","meshMax","halfExtents","worldMat","worldMatrix","calculatePositions","_decorator","NoiseModule","CCFloat","_dec12","CCInteger","_dec13","_dec14","_strengthX","_strengthY","_strengthZ","_noiseSpeedX","_noiseSpeedY","_noiseSpeedZ","_noiseFrequency","_remapX","_remapY","_remapZ","_octaves","_octaveMultiplier","_octaveScale","samplePosition","noiseSpeedX","noiseSpeedY","noiseSpeedZ","remapX","remapY","remapZ","strengthX","strengthY","strengthZ","octaveMultiplier","octaveScale","add3f","noisePosition","multiply3f","_dec11","_world_mat","_world_rol","superMaterials","Renderer","ParticleSystem","executionOrder","_dec17","_dec20","CCBoolean","_dec23","_dec26","ColorOverLifetimeModule","_dec29","_dec32","_dec35","_dec38","_dec41","_dec44","_dec46","startRotation3D","startRotationX","startRotationY","startRotationZ","loop","simulationSpeed","playOnAwake","rateOverDistance","_initializer20","_initializer21","_renderCulling","_initializer22","_cullingMode","_initializer23","_aabbHalfX","_initializer24","_aabbHalfY","_initializer25","_aabbHalfZ","_initializer26","_dataCulling","_initializer27","_initializer28","_initializer29","_initializer30","_initializer31","_initializer32","_limitVelocityOvertimeModule","_initializer33","_initializer34","_initializer35","_noiseModule","_initializer36","_initializer37","renderer","_initializer38","_prewarm","_initializer39","_initializer40","_simulationSpace","_initializer41","_assertThisInitialized","_isPlaying","_isPaused","_isStopped","_isEmitting","_needToRestart","_needRefresh","_needAttach","_emitRateTimeCounter","_emitRateDistanceCounter","_oldWPos","_curWPos","_boundingBox","_culler","_oldPos","_curPos","_isCulled","_isSimulating","_customData1","_customData2","_subEmitters","onFocusInEditor","_resetPosition","_onRebuildPSO","_collectModels","_prewarmSystem","enabledInHierarchy","pause","stopEmitting","stop","burst","setCustomData1","setCustomData2","_this$processor$getMo","off","DirectorEvent","BEFORE_COMMIT","on","EDITOR_NOT_IN_PREVIEW","forceRefresh","aabbHalfX","aabbHalfY","aabbHalfZ","setBoundingX","setBoundingY","setBoundingZ","_thisProcessor$getMod","_thisTrailModule$getM","thisProcessor","thisTrailModule","scaledDeltaTime","renderCulling","getWorldPosition","thisCurPos","thisOldPos","dx","dy","dz","center","culled","aabbFrustum","frustum","AlwaysSimulate","PauseAndCatchup","inited","_thisProcessor$getMod3","_thisProcessor$getMod2","_onVisibilityChange","cnt","emitNum","distance","addSubEmitter","subEmitter","removeSubEmitter","addBurst","removeBurst","getBoundingX","getBoundingY","getBoundingZ","props","dataCulling","filter","includes","CullingMode","_dec15","_dec18","_dec19","_dec21","_dec22","Pause","_dec24","_dec25","_dec27","_dec28","_dec30","_dec31","_dec33","_dec34","_dec36","_dec37","_dec39","_dec40","_dec42","_dec43","_dec45","_dec47","ParticleSystemComponent","ParticleUtils","instantiate","prefab","registeredSceneEvent","BEFORE_SCENE_LAUNCH","onSceneUnload","uuid","_uuid","particleSystemPool","has","Node","_prefab$prefab","_prefab$prefab$asset","asset","rootNode","getComponentsInChildren","removeProperty","replaceProperty","newName","js"],"mappings":"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"}