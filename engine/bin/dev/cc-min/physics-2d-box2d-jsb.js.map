{"version":3,"file":"physics-2d-box2d-jsb.js","sources":["../../../cocos/physics-2d/box2d-jsb/empty-for-editor.ts","../../../cocos/physics-2d/box2d-jsb/platform/physics-contact-listener.ts","../../../cocos/physics-2d/box2d-jsb/platform/physics-aabb-query-callback.ts","../../../cocos/physics-2d/box2d-jsb/platform/physics-ray-cast-callback.ts","../../../cocos/physics-2d/box2d-jsb/physics-contact.ts","../../../cocos/physics-2d/box2d-jsb/platform/physics-debug-draw.ts","../../../cocos/physics-2d/box2d-jsb/physics-world.ts","../../../cocos/physics-2d/box2d-jsb/rigid-body.ts","../../../cocos/physics-2d/box2d-jsb/shapes/shape-2d.ts","../../../cocos/physics-2d/box2d-jsb/shapes/box-shape-2d.ts","../../../cocos/physics-2d/box2d-jsb/shapes/circle-shape-2d.ts","../../../cocos/physics-2d/box2d-jsb/shapes/polygon-shape-2d.ts","../../../cocos/physics-2d/box2d-jsb/joints/joint-2d.ts","../../../cocos/physics-2d/box2d-jsb/joints/mouse-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/distance-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/spring-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/relative-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/slider-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/fixed-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/wheel-joint.ts","../../../cocos/physics-2d/box2d-jsb/joints/hinge-joint.ts","../../../cocos/physics-2d/box2d-jsb/instantiate.ts"],"sourcesContent":["/*\r\n Copyright (c) 2025 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nexport const b2EmptyInstance = {\r\n    ContactListener: class {},\r\n    QueryCallback: class {},\r\n    Draw: class {},\r\n    Vec2: class {},\r\n    RayCastCallback: class {},\r\n    BodyDef: class {},\r\n    AABB: class {},\r\n    Filter: class {},\r\n    Transform: class {},\r\n    Color: class {},\r\n};\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { js } from '../../../core';\r\nimport { b2EmptyInstance } from '../empty-for-editor';\r\n\r\nif (!JSB) {\r\n    (globalThis as any).b2jsb = b2EmptyInstance;\r\n}\r\n\r\nexport class PhysicsContactListener extends b2jsb.ContactListener {\r\n    _contactFixtures: b2jsb.Fixture[] = [];\r\n\r\n    _BeginContact: any = null;\r\n    _EndContact: any = null;\r\n    _PreSolve: any = null;\r\n    _PostSolve: any = null;\r\n\r\n    setBeginContact (cb): void {\r\n        this._BeginContact = cb;\r\n    }\r\n\r\n    setEndContact (cb): void {\r\n        this._EndContact = cb;\r\n    }\r\n\r\n    setPreSolve (cb): void {\r\n        this._PreSolve = cb;\r\n    }\r\n\r\n    setPostSolve (cb): void {\r\n        this._PostSolve = cb;\r\n    }\r\n\r\n    BeginContact (contact: b2jsb.Contact): void {\r\n        if (!this._BeginContact) return;\r\n\r\n        const fixtureA = contact.GetFixtureA();\r\n        const fixtureB = contact.GetFixtureB();\r\n        const fixtures = this._contactFixtures;\r\n\r\n        (contact as any)._shouldReport = false;\r\n\r\n        if (fixtures.indexOf(fixtureA) !== -1 || fixtures.indexOf(fixtureB) !== -1) {\r\n            (contact as any)._shouldReport = true; // for quick check whether this contact should report\r\n            this._BeginContact(contact);\r\n        }\r\n    }\r\n\r\n    EndContact (contact: b2jsb.Contact): void {\r\n        if (this._EndContact && (contact as any)._shouldReport) {\r\n            (contact as any)._shouldReport = false;\r\n            this._EndContact(contact);\r\n        }\r\n    }\r\n\r\n    PreSolve (contact: b2jsb.Contact, oldManifold: b2jsb.Manifold): void {\r\n        if (this._PreSolve && (contact as any)._shouldReport) {\r\n            this._PreSolve(contact, oldManifold);\r\n        }\r\n    }\r\n\r\n    PostSolve (contact: b2jsb.Contact, impulse: b2jsb.ContactImpulse): void {\r\n        if (this._PostSolve && (contact as any)._shouldReport) {\r\n            this._PostSolve(contact, impulse);\r\n        }\r\n    }\r\n\r\n    registerContactFixture (fixture): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n        this._contactFixtures.push(fixture);\r\n    }\r\n\r\n    unregisterContactFixture (fixture): void {\r\n        js.array.remove(this._contactFixtures, fixture);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { JSB } from 'internal:constants';\r\nimport { Vec2 } from '../../../core';\r\nimport { b2EmptyInstance } from '../empty-for-editor';\r\n\r\nif (!JSB) {\r\n    (globalThis as any).b2jsb = b2EmptyInstance;\r\n}\r\n\r\nexport class PhysicsAABBQueryCallback extends b2jsb.QueryCallback {\r\n    private _point = new b2jsb.Vec2();\r\n    private _isPoint = false;\r\n    private _fixtures: b2jsb.Fixture[] = [];\r\n\r\n    init (point?: Vec2): void {\r\n        this.initWithThis(this);\r\n        if (point) {\r\n            this._isPoint = true;\r\n            this._point.x = point.x;\r\n            this._point.y = point.y;\r\n        } else {\r\n            this._isPoint = false;\r\n        }\r\n\r\n        this._fixtures.length = 0;\r\n    }\r\n\r\n    ReportFixture (fixture: b2jsb.Fixture): boolean {\r\n        if (this._isPoint) {\r\n            if (fixture.TestPoint(this._point)) {\r\n                this._fixtures.push(fixture);\r\n            }\r\n        } else {\r\n            this._fixtures.push(fixture);\r\n        }\r\n\r\n        // True to continue the query, false to terminate the query.\r\n        return true;\r\n    }\r\n\r\n    getFixture (): any {\r\n        return this._fixtures[0];\r\n    }\r\n\r\n    getFixtures (): any[] {\r\n        return this._fixtures;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\r\n/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { JSB } from 'internal:constants';\r\nimport { Vec2 } from '../../../core';\r\nimport { ERaycast2DType } from '../../framework';\r\nimport { b2EmptyInstance } from '../empty-for-editor';\r\n\r\nif (!JSB) {\r\n    (globalThis as any).b2jsb = b2EmptyInstance;\r\n}\r\nexport class PhysicsRayCastCallback extends b2jsb.RayCastCallback {\r\n    _type = ERaycast2DType.Closest;\r\n    _fixtures: b2jsb.Fixture[] = [];\r\n    _points: Vec2[] = [];\r\n    _normals: Vec2[] = [];\r\n    _fractions: number[] = [];\r\n\r\n    _mask = 0xffffffff;\r\n\r\n    init (type: ERaycast2DType, mask: number): void {\r\n        super.initWithThis(this);\r\n        this._type = type;\r\n        this._mask = mask;\r\n        this._fixtures.length = 0;\r\n        this._points.length = 0;\r\n        this._normals.length = 0;\r\n        this._fractions.length = 0;\r\n    }\r\n\r\n    ReportFixture (fixture: b2jsb.Fixture, point, normal, fraction): any {\r\n        if ((fixture.GetFilterData().categoryBits & this._mask) === 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (this._type === ERaycast2DType.Closest) {\r\n            this._fixtures[0] = fixture;\r\n            this._points[0] = new Vec2(point.x, point.y);\r\n            this._normals[0] = new Vec2(normal.x, normal.y);\r\n            this._fractions[0] = fraction;\r\n            return fraction;\r\n        }\r\n\r\n        this._fixtures.push(fixture);\r\n        this._points.push(new Vec2(point.x, point.y));\r\n        this._normals.push(new Vec2(normal.x, normal.y));\r\n        this._fractions.push(fraction);\r\n\r\n        if (this._type === ERaycast2DType.Any) {\r\n            return 0;\r\n        } else if (this._type >= ERaycast2DType.All) {\r\n            return 1;\r\n        }\r\n\r\n        return fraction;\r\n    }\r\n\r\n    getFixtures (): any[] {\r\n        return this._fixtures;\r\n    }\r\n\r\n    getPoints (): Vec2[] {\r\n        return this._points;\r\n    }\r\n\r\n    getNormals (): Vec2[] {\r\n        return this._normals;\r\n    }\r\n\r\n    getFractions (): number[] {\r\n        return this._fractions;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { Vec2 } from '../../core';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../framework/physics-types';\r\nimport { Collider2D, Contact2DType, PhysicsSystem2D } from '../framework';\r\nimport { b2Shape2D } from './shapes/shape-2d';\r\nimport { IPhysics2DContact, IPhysics2DImpulse, IPhysics2DManifoldPoint, IPhysics2DWorldManifold } from '../spec/i-physics-contact';\r\n\r\nexport type b2ContactExtends = b2jsb.Contact & {\r\n    m_userData: any\r\n}\r\n\r\nconst pools: PhysicsContact[] = [];\r\n\r\n// temp world manifold\r\nconst pointCache = [new Vec2(), new Vec2()];\r\n\r\n// const b2worldmanifold = new b2jsb.WorldManifold();\r\n\r\nconst b2worldmanifold = {\r\n    ///< world vector pointing from A to B\r\n    normal: { x: 0, y: 0 },\r\n    points: [{ x: 0, y: 0 }, { x: 0, y: 0 }],\r\n    //b2_maxManifoldPoints];///< world contact point (point of intersection)\r\n    separations: [0, 0],\r\n    //[b2_maxManifoldPoints];///< a negative value indicates overlap, in meters\r\n};\r\n\r\nconst worldmanifold: IPhysics2DWorldManifold = {\r\n    points: [] as Vec2[],\r\n    separations: [] as number[],\r\n    normal: new Vec2(),\r\n};\r\n\r\nclass ManifoldPoint implements IPhysics2DManifoldPoint {\r\n    localPoint = new Vec2();\r\n    normalImpulse = 0;\r\n    tangentImpulse = 0;\r\n}\r\n\r\nconst manifoldPointCache = [new ManifoldPoint(), new ManifoldPoint()];\r\n\r\nconst manifold = {\r\n    type: 0,\r\n    localPoint: new Vec2(),\r\n    localNormal: new Vec2(),\r\n    points: [] as ManifoldPoint[],\r\n};\r\n\r\nconst impulse: IPhysics2DImpulse = {\r\n    normalImpulses: [] as number[],\r\n    tangentImpulses: [] as number[],\r\n};\r\n\r\nexport class PhysicsContact implements IPhysics2DContact {\r\n    static get (b2contact: b2ContactExtends): PhysicsContact {\r\n        let c = pools.pop();\r\n\r\n        if (!c) {\r\n            c = new PhysicsContact();\r\n        }\r\n\r\n        c.init(b2contact);\r\n        return c;\r\n    }\r\n\r\n    static put (b2contact: b2ContactExtends): void {\r\n        const c: PhysicsContact = b2contact.m_userData as PhysicsContact;\r\n        if (!c) return;\r\n\r\n        pools.push(c);\r\n        c.reset();\r\n    }\r\n\r\n    colliderA: Collider2D | null = null;\r\n    colliderB: Collider2D | null = null;\r\n\r\n    disabled = false;\r\n    disabledOnce = false;\r\n\r\n    private _impulse: b2jsb.ContactImpulse = null!;\r\n    private _inverted = false;\r\n    private _b2contact: b2ContactExtends = null!;\r\n\r\n    _setImpulse (impulse: b2jsb.ContactImpulse | null): void {\r\n        this._impulse = impulse!;\r\n    }\r\n\r\n    init (b2contact: b2ContactExtends): void {\r\n        this.colliderA = (b2contact.GetFixtureA().m_userData as b2Shape2D).collider;\r\n        this.colliderB = (b2contact.GetFixtureB().m_userData as b2Shape2D).collider;\r\n        this.disabled = false;\r\n        this.disabledOnce = false;\r\n        this._impulse = null!;\r\n\r\n        this._inverted = false;\r\n\r\n        this._b2contact = b2contact;\r\n        b2contact.m_userData = this;\r\n    }\r\n\r\n    reset (): void {\r\n        this.setTangentSpeed(0);\r\n        this.resetFriction();\r\n        this.resetRestitution();\r\n\r\n        this.colliderA = null;\r\n        this.colliderB = null;\r\n        this.disabled = false;\r\n        this._impulse = null!;\r\n\r\n        this._b2contact.m_userData = null;\r\n        this._b2contact = null!;\r\n    }\r\n\r\n    getWorldManifold (): IPhysics2DWorldManifold {\r\n        const points = worldmanifold.points;\r\n        const separations = worldmanifold.separations;\r\n        const normal = worldmanifold.normal;\r\n\r\n        this._b2contact.GetWorldManifold(b2worldmanifold);\r\n        const b2points = b2worldmanifold.points;\r\n        const b2separations = b2worldmanifold.separations;\r\n\r\n        const count = this._b2contact.GetManifold().pointCount;\r\n        points.length = separations.length = count;\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const p = pointCache[i];\r\n            p.x = b2points[i].x * PHYSICS_2D_PTM_RATIO;\r\n            p.y = b2points[i].y * PHYSICS_2D_PTM_RATIO;\r\n\r\n            points[i] = p;\r\n            separations[i] = b2separations[i] * PHYSICS_2D_PTM_RATIO;\r\n        }\r\n\r\n        normal.x = b2worldmanifold.normal.x;\r\n        normal.y = b2worldmanifold.normal.y;\r\n\r\n        if (this._inverted) {\r\n            normal.x *= -1;\r\n            normal.y *= -1;\r\n        }\r\n\r\n        return worldmanifold;\r\n    }\r\n\r\n    getManifold (): { type: number; localPoint: Vec2; localNormal: Vec2; points: ManifoldPoint[]; } {\r\n        const points = manifold.points;\r\n        const localNormal = manifold.localNormal;\r\n        const localPoint = manifold.localPoint;\r\n\r\n        const b2manifold = this._b2contact.GetManifold();\r\n        const b2points = b2manifold.points;\r\n        const count = points.length = b2manifold.pointCount;\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const p = manifoldPointCache[i];\r\n            const b2p = b2points[i];\r\n            p.localPoint.x = b2p.localPoint.x * PHYSICS_2D_PTM_RATIO;\r\n            p.localPoint.y = b2p.localPoint.y * PHYSICS_2D_PTM_RATIO;\r\n            p.normalImpulse = b2p.normalImpulse * PHYSICS_2D_PTM_RATIO;\r\n            p.tangentImpulse = b2p.tangentImpulse;\r\n\r\n            points[i] = p;\r\n        }\r\n\r\n        localPoint.x = b2manifold.localPoint.x * PHYSICS_2D_PTM_RATIO;\r\n        localPoint.y = b2manifold.localPoint.y * PHYSICS_2D_PTM_RATIO;\r\n        localNormal.x = b2manifold.localNormal.x;\r\n        localNormal.y = b2manifold.localNormal.y;\r\n        manifold.type = b2manifold.type;\r\n\r\n        if (this._inverted) {\r\n            localNormal.x *= -1;\r\n            localNormal.y *= -1;\r\n        }\r\n\r\n        return manifold;\r\n    }\r\n\r\n    getImpulse (): IPhysics2DImpulse | null {\r\n        const b2impulse = this._impulse;\r\n        if (!b2impulse) return null;\r\n\r\n        const normalImpulses = impulse.normalImpulses;\r\n        const tangentImpulses = impulse.tangentImpulses;\r\n        const count = b2impulse.count;\r\n        for (let i = 0; i < count; i++) {\r\n            normalImpulses[i] = b2impulse.normalImpulses[i] * PHYSICS_2D_PTM_RATIO;\r\n            tangentImpulses[i] = b2impulse.tangentImpulses[i];\r\n        }\r\n\r\n        tangentImpulses.length = normalImpulses.length = count;\r\n\r\n        return impulse;\r\n    }\r\n\r\n    emit (contactType: string): void {\r\n        const colliderA = this.colliderA;\r\n        const colliderB = this.colliderB;\r\n\r\n        const hasListenerA = colliderA?.body?.enabledContactListener;\r\n        const hasListenerB = colliderB?.body?.enabledContactListener;\r\n\r\n        if (hasListenerA) {\r\n            colliderA.emit(contactType, colliderA, colliderB, this);\r\n        }\r\n\r\n        if (hasListenerB) {\r\n            colliderB.emit(contactType, colliderB, colliderA, this);\r\n        }\r\n\r\n        if (hasListenerA || hasListenerB) {\r\n            PhysicsSystem2D.instance.emit(contactType, colliderA, colliderB, this);\r\n        }\r\n\r\n        if (this.disabled || this.disabledOnce) {\r\n            this.setEnabled(false);\r\n            this.disabledOnce = false;\r\n        }\r\n    }\r\n\r\n    setEnabled (value): void {\r\n        this._b2contact.SetEnabled(value);\r\n    }\r\n\r\n    isTouching (): boolean {\r\n        return this._b2contact.IsTouching();\r\n    }\r\n\r\n    setTangentSpeed (value): void {\r\n        this._b2contact.SetTangentSpeed(value);\r\n    }\r\n\r\n    getTangentSpeed (): number {\r\n        return this._b2contact.GetTangentSpeed();\r\n    }\r\n\r\n    setFriction (value): void {\r\n        this._b2contact.SetFriction(value);\r\n    }\r\n\r\n    getFriction (): number {\r\n        return this._b2contact.GetFriction();\r\n    }\r\n\r\n    resetFriction (): void {\r\n        return this._b2contact.ResetFriction();\r\n    }\r\n\r\n    setRestitution (value): void {\r\n        this._b2contact.SetRestitution(value);\r\n    }\r\n\r\n    getRestitution (): number {\r\n        return this._b2contact.GetRestitution();\r\n    }\r\n\r\n    resetRestitution (): void {\r\n        return this._b2contact.ResetRestitution();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { JSB } from 'internal:constants';\r\nimport { Color, Vec2 } from '../../../core';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework';\r\nimport type { Graphics } from '../../../2d/components/graphics';\r\nimport { b2EmptyInstance } from '../empty-for-editor';\r\n\r\nif (!JSB) {\r\n    (globalThis as any).b2jsb = b2EmptyInstance;\r\n}\r\n\r\nconst _tmp_vec2 = new b2jsb.Vec2();\r\nconst _tmp_color = new Color();\r\n\r\nconst GREEN_COLOR = Color.GREEN;\r\nconst RED_COLOR = Color.RED;\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\nb2jsb.Transform.MulXV = function (T, v, out): any {\r\n    const T_q_c = T.q.c; const T_q_s = T.q.s;\r\n    const v_x = v.x; const v_y = v.y;\r\n    out.x = (T_q_c * v_x - T_q_s * v_y) + T.p.x;\r\n    out.y = (T_q_s * v_x + T_q_c * v_y) + T.p.y;\r\n    return out;\r\n};\r\nexport class PhysicsDebugDraw extends b2jsb.Draw {\r\n    _drawer: Graphics | null = null;\r\n\r\n    _xf = new b2jsb.Transform();\r\n    _dxf = new b2jsb.Transform();\r\n\r\n    constructor (drawer: Graphics) {\r\n        super();\r\n        this._drawer = drawer;\r\n    }\r\n\r\n    _DrawPolygon (vertices, vertexCount): void {\r\n        const drawer = this._drawer!;\r\n\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            b2jsb.Transform.MulXV(this._xf, vertices[i] as Vec2, _tmp_vec2);\r\n            const x = _tmp_vec2.x * PHYSICS_2D_PTM_RATIO;\r\n            const y = _tmp_vec2.y * PHYSICS_2D_PTM_RATIO;\r\n            if (i === 0) drawer.moveTo(x, y);\r\n            else {\r\n                drawer.lineTo(x, y);\r\n            }\r\n        }\r\n\r\n        drawer.close();\r\n    }\r\n\r\n    DrawPolygon (vertices, vertexCount, color): void {\r\n        this._applyStrokeColor(color);\r\n        this._DrawPolygon(vertices, vertexCount);\r\n        this._drawer!.stroke();\r\n    }\r\n\r\n    DrawSolidPolygon (vertices, vertexCount, color): void {\r\n        this._applyFillColor(color);\r\n        this._DrawPolygon(vertices, vertexCount);\r\n        this._drawer!.fill();\r\n        this._drawer!.stroke();\r\n    }\r\n\r\n    _DrawCircle (center: b2jsb.Vec2, radius: number): void {\r\n        b2jsb.Transform.MulXV(this._xf, center, _tmp_vec2);\r\n        //scale?\r\n        this._drawer!.circle((_tmp_vec2.x) * PHYSICS_2D_PTM_RATIO, (_tmp_vec2.y) * PHYSICS_2D_PTM_RATIO, radius * PHYSICS_2D_PTM_RATIO);\r\n    }\r\n\r\n    DrawCircle (center: b2jsb.Vec2, radius: number, color): void {\r\n        this._applyStrokeColor(color);\r\n        this._DrawCircle(center, radius);\r\n        this._drawer!.stroke();\r\n    }\r\n\r\n    DrawSolidCircle (center: b2jsb.Vec2, radius: number, axis, color): void {\r\n        this._applyFillColor(color);\r\n        this._DrawCircle(center, radius);\r\n        this._drawer!.fill();\r\n    }\r\n\r\n    DrawSegment (p1: b2jsb.Vec2, p2: b2jsb.Vec2, color): void {\r\n        const drawer = this._drawer!;\r\n\r\n        if (p1.x === p2.x && p1.y === p2.y) {\r\n            this._applyFillColor(color);\r\n            this._DrawCircle(p1, 2 / PHYSICS_2D_PTM_RATIO);\r\n            drawer.fill();\r\n            return;\r\n        }\r\n        this._applyStrokeColor(color);\r\n\r\n        b2jsb.Transform.MulXV(this._xf, p1, _tmp_vec2);\r\n        drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n        b2jsb.Transform.MulXV(this._xf, p2, _tmp_vec2);\r\n        drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n        drawer.stroke();\r\n    }\r\n\r\n    DrawTransform (xf: b2jsb.Transform): void {\r\n        const drawer = this._drawer!;\r\n\r\n        drawer.strokeColor = RED_COLOR;\r\n\r\n        _tmp_vec2.x = _tmp_vec2.y = 0;\r\n        b2jsb.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);\r\n        drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        _tmp_vec2.x = 1; _tmp_vec2.y = 0;\r\n        b2jsb.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);\r\n        drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        drawer.stroke();\r\n\r\n        drawer.strokeColor = GREEN_COLOR;\r\n\r\n        _tmp_vec2.x = _tmp_vec2.y = 0;\r\n        b2jsb.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);\r\n        drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        _tmp_vec2.x = 0; _tmp_vec2.y = 1;\r\n        b2jsb.Transform.MulXV(xf, _tmp_vec2, _tmp_vec2);\r\n        drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        drawer.stroke();\r\n    }\r\n\r\n    DrawPoint (center, radius, color): void {\r\n        //empty\r\n    }\r\n\r\n    DrawParticles (): void {\r\n        //empty\r\n    }\r\n\r\n    _applyStrokeColor (color): void {\r\n        this._drawer!.strokeColor = _tmp_color.set(\r\n            color.r * 255,\r\n            color.g * 255,\r\n            color.b * 255,\r\n            150,\r\n        );\r\n    }\r\n\r\n    _applyFillColor (color): void {\r\n        this._drawer!.fillColor = _tmp_color.set(\r\n            color.r * 255,\r\n            color.g * 255,\r\n            color.b * 255,\r\n            150,\r\n        );\r\n    }\r\n\r\n    PushTransform (xf): void {\r\n        this._xf = xf;\r\n    }\r\n\r\n    PopTransform (): void {\r\n        this._xf = this._dxf;\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n/* eslint-disable @typescript-eslint/no-unsafe-argument */\r\n/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { EDITOR_NOT_IN_PREVIEW, JSB, TEST } from 'internal:constants';\r\n\r\nimport { IPhysicsWorld } from '../spec/i-physics-world';\r\nimport { IVec2Like, Vec3, Quat, Vec2, toDegree, Rect, CCObject, js, errorID } from '../../core';\r\nimport { PHYSICS_2D_PTM_RATIO, ERaycast2DType, ERigidBody2DType } from '../framework/physics-types';\r\n// import { Canvas } from '../../2d/framework';\r\nimport type { Graphics } from '../../2d/components/graphics';\r\n\r\nimport { b2RigidBody2D } from './rigid-body';\r\nimport { PhysicsContactListener } from './platform/physics-contact-listener';\r\nimport { PhysicsAABBQueryCallback } from './platform/physics-aabb-query-callback';\r\nimport { PhysicsRayCastCallback } from './platform/physics-ray-cast-callback';\r\nimport { PhysicsContact, b2ContactExtends } from './physics-contact';\r\nimport { Contact2DType, Collider2D, RaycastResult2D } from '../framework';\r\nimport { b2Shape2D } from './shapes/shape-2d';\r\nimport { PhysicsDebugDraw } from './platform/physics-debug-draw';\r\nimport { Node, find, Layers } from '../../scene-graph';\r\nimport { director } from '../../game';\r\nimport { b2EmptyInstance } from './empty-for-editor';\r\n\r\nlet _tempFloatArray: Float32Array;\r\n\r\nif (!JSB) {\r\n    (globalThis as any).b2jsb = b2EmptyInstance;\r\n} else {\r\n    //@ts-ignore\r\n    _tempFloatArray = new Float32Array(jsb.createExternalArrayBuffer(5 * 4)); // 5 floats is enough for box2d jsb.\r\n    //@ts-ignore\r\n    b2jsb._tempFloatArray = _tempFloatArray; // For other ts file in box2d-jsb module to access this arraybuffer.\r\n    b2jsb._setTempFloatArray(_tempFloatArray.buffer);\r\n}\r\n\r\nconst tempVec3 = new Vec3();\r\nconst tempVec2_1 = new Vec2();\r\nconst tempVec2_2 = new Vec2();\r\n\r\nconst temoBodyDef = new b2jsb.BodyDef();\r\nconst tempB2AABB = new b2jsb.AABB();\r\n\r\nconst testResults: Collider2D[] = [];\r\n\r\n// namespace b2 {\r\n/// Color for debug drawing. Each value has the range [0,1].\r\nclass Color {\r\n    constructor (rIn?: number, gIn?: number, bIn?: number, aIn?: number) {\r\n        this.r = rIn ?? 0;\r\n        this.g = gIn ?? 0;\r\n        this.b = bIn ?? 0;\r\n        this.a = aIn ?? 1.0;\r\n    }\r\n\r\n    Set (rIn?: number, gIn?: number, bIn?: number, aIn?: number): void {\r\n        this.r = rIn ?? 0;\r\n        this.g = gIn ?? 0;\r\n        this.b = bIn ?? 0;\r\n        this.a = aIn ?? 1.0;\r\n    }\r\n\r\n    declare r: number;\r\n    declare g: number;\r\n    declare b: number;\r\n    declare a: number;\r\n}\r\n\r\n// }\r\nb2jsb.Color = Color;\r\n\r\nexport class b2PhysicsWorld implements IPhysicsWorld {\r\n    protected _world: b2jsb.World;\r\n    protected _bodies: b2RigidBody2D[] = [];\r\n    protected _animatedBodies: b2RigidBody2D[] = [];\r\n    protected _rotationAxis: Vec3 = new Vec3();\r\n    protected _physicsGroundBody: b2jsb.Body;\r\n\r\n    protected _contactListener: PhysicsContactListener;\r\n    protected _aabbQueryCallback: PhysicsAABBQueryCallback;\r\n    protected _raycastQueryCallback: PhysicsRayCastCallback;\r\n\r\n    get impl (): b2jsb.World {\r\n        return this._world;\r\n    }\r\n\r\n    get groundBodyImpl (): b2jsb.Body {\r\n        return this._physicsGroundBody;\r\n    }\r\n\r\n    constructor () {\r\n        this._world = new b2jsb.World(new b2jsb.Vec2(0, -10));\r\n        const tempBodyDef = new b2jsb.BodyDef();\r\n        //tempBodyDef.position.Set(480 / PHYSICS_2D_PTM_RATIO, 320 / PHYSICS_2D_PTM_RATIO);//temporary\r\n        this._physicsGroundBody = this._world.CreateBody(tempBodyDef);\r\n        const listener = new PhysicsContactListener();\r\n        listener.initWithThis(listener);\r\n        listener.setBeginContact(this._onBeginContact);\r\n        listener.setEndContact(this._onEndContact);\r\n        listener.setPreSolve(this._onPreSolve);\r\n        listener.setPostSolve(this._onPostSolve);\r\n        this._world.SetContactListener(listener);\r\n\r\n        this._contactListener = listener;\r\n\r\n        this._aabbQueryCallback = new PhysicsAABBQueryCallback();\r\n        this._raycastQueryCallback = new PhysicsRayCastCallback();\r\n    }\r\n\r\n    _debugGraphics: Graphics | null = null;\r\n    _b2DebugDrawer: b2jsb.Draw | null = null;\r\n\r\n    _debugDrawFlags = 0;\r\n    get debugDrawFlags (): number {\r\n        return this._debugDrawFlags;\r\n    }\r\n    set debugDrawFlags (v) {\r\n        if (EDITOR_NOT_IN_PREVIEW) return;\r\n\r\n        if (!v) {\r\n            if (this._debugGraphics) {\r\n                this._debugGraphics.node.parent = null;\r\n            }\r\n        }\r\n\r\n        this._debugDrawFlags = v;\r\n    }\r\n\r\n    _checkDebugDrawValid (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) return;\r\n        if (!this._debugGraphics || !this._debugGraphics.isValid) {\r\n            let canvas = find('Canvas');\r\n            if (!canvas) {\r\n                const scene = director.getScene();\r\n                if (!scene) {\r\n                    return;\r\n                }\r\n\r\n                canvas = new Node('Canvas');\r\n                canvas.addComponent('cc.Canvas');\r\n                canvas.parent = scene;\r\n            }\r\n\r\n            let node: Node | null = new Node('PHYSICS_2D_DEBUG_DRAW');\r\n            // node.zIndex = cc.macro.MAX_ZINDEX;\r\n            node.hideFlags |= CCObject.Flags.DontSave;\r\n            node.parent = canvas;\r\n            node.worldPosition = Vec3.ZERO;\r\n            node.layer = Layers.Enum.UI_2D;\r\n\r\n            try {\r\n                this._debugGraphics = node.addComponent<Graphics>('cc.Graphics');\r\n                this._debugGraphics.lineWidth = 3;\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                const debugDraw = new PhysicsDebugDraw(this._debugGraphics);\r\n                debugDraw.initWithThis(debugDraw);\r\n                this._b2DebugDrawer = debugDraw;\r\n                this._world.SetDebugDraw(debugDraw);\r\n                const parent = this._debugGraphics.node.parent!;\r\n                this._debugGraphics.node.setSiblingIndex(parent.children.length - 1);\r\n            } catch (e: any) {\r\n                errorID(4501, e.message as string);\r\n                node.destroy();\r\n                node = null;\r\n            }\r\n        }\r\n\r\n        if (this._b2DebugDrawer) {\r\n            this._b2DebugDrawer.SetFlags(this.debugDrawFlags);\r\n        }\r\n    }\r\n\r\n    setGravity (v: IVec2Like): void {\r\n        this._world.SetGravity(v as b2jsb.Vec2);\r\n    }\r\n\r\n    setAllowSleep (v: boolean): void {\r\n        this._world.SetAllowSleeping(true);\r\n    }\r\n\r\n    step (deltaTime: number, velocityIterations = 10, positionIterations = 10): void {\r\n        const animatedBodies = this._animatedBodies;\r\n        for (let i = 0, l = animatedBodies.length; i < l; i++) {\r\n            animatedBodies[i].animate(deltaTime);\r\n        }\r\n        this._world.Step(deltaTime, velocityIterations, positionIterations);\r\n    }\r\n\r\n    raycast (p1: Vec2, p2: Vec2, type: ERaycast2DType, mask: number): RaycastResult2D[] {\r\n        if (p1.equals(p2)) {\r\n            return [];\r\n        }\r\n\r\n        type = type || ERaycast2DType.Closest;\r\n\r\n        tempVec2_1.x = p1.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = p1.y / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_2.x = p2.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_2.y = p2.y / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const callback = this._raycastQueryCallback;\r\n        callback.init(type, mask);\r\n        this._world.RayCast(callback, tempVec2_1, tempVec2_2);\r\n\r\n        const fixtures = callback.getFixtures() as b2jsb.Fixture[];\r\n        if (fixtures.length > 0) {\r\n            const points = callback.getPoints();\r\n            const normals = callback.getNormals();\r\n            const fractions = callback.getFractions();\r\n\r\n            const results: RaycastResult2D[] = [];\r\n            for (let i = 0, l = fixtures.length; i < l; i++) {\r\n                const fixture = fixtures[i];\r\n                const shape = fixture.m_userData as b2Shape2D;\r\n                const collider = shape.collider;\r\n\r\n                if (type === ERaycast2DType.AllClosest) {\r\n                    let result;\r\n                    for (let j = 0; j < results.length; j++) {\r\n                        if (results[j].collider === collider) {\r\n                            result = results[j];\r\n                        }\r\n                    }\r\n\r\n                    if (result) {\r\n                        if (fractions[i] < result.fraction) {\r\n                            result.fixtureIndex = shape.getFixtureIndex(fixture);\r\n                            result.point.x = points[i].x * PHYSICS_2D_PTM_RATIO;\r\n                            result.point.y = points[i].y * PHYSICS_2D_PTM_RATIO;\r\n                            result.normal.x = normals[i].x;\r\n                            result.normal.y = normals[i].y;\r\n                            result.fraction = fractions[i];\r\n                        }\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                results.push({\r\n                    collider,\r\n                    fixtureIndex: shape.getFixtureIndex(fixture),\r\n                    point: new Vec2(points[i].x * PHYSICS_2D_PTM_RATIO, points[i].y * PHYSICS_2D_PTM_RATIO),\r\n                    normal: new Vec2(normals[i].x, normals[i].y),\r\n                    fraction: fractions[i],\r\n                });\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    syncPhysicsToScene (): void {\r\n        const bodies = this._bodies;\r\n        for (let i = 0, l = bodies.length; i < l; i++) {\r\n            const body = bodies[i];\r\n            const bodyComp = body.rigidBody;\r\n            if (bodyComp.type === ERigidBody2DType.Animated) {\r\n                body.resetVelocity();\r\n                continue;\r\n            }\r\n\r\n            const node = bodyComp.node;\r\n            const b2body = body.impl;\r\n\r\n            // position\r\n            b2body!._GetTransformJSB();\r\n            // The _GetTransformJSB which we bind it manually is for optimizing the communication between JS and CPP.\r\n            // It will fill the _tempFloatArray with the first three elements.\r\n            // _tempFloatArray[0]: position's x\r\n            // _tempFloatArray[1]: position's y\r\n            // _tempFloatArray[2]: angle\r\n            tempVec3.x = _tempFloatArray[0] * PHYSICS_2D_PTM_RATIO;\r\n            tempVec3.y = _tempFloatArray[1] * PHYSICS_2D_PTM_RATIO;\r\n            tempVec3.z = 0;\r\n\r\n            // rotation\r\n            const angle = toDegree(_tempFloatArray[2]);\r\n\r\n            //@ts-ignore\r\n            node.set2DTransform(tempVec3.x, tempVec3.y, angle);\r\n        }\r\n    }\r\n    syncSceneToPhysics (): void {\r\n        const bodies = this._bodies;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            bodies[i].syncSceneToPhysics();\r\n        }\r\n    }\r\n\r\n    addBody (body: b2RigidBody2D): void {\r\n        const bodies = this._bodies;\r\n        if (bodies.includes(body)) {\r\n            return;\r\n        }\r\n\r\n        const bodyDef = temoBodyDef;\r\n\r\n        const comp = body.rigidBody;\r\n\r\n        bodyDef.allowSleep = comp.allowSleep;\r\n        bodyDef.gravityScale = comp.gravityScale;\r\n        bodyDef.linearDamping = comp.linearDamping;\r\n        bodyDef.angularDamping = comp.angularDamping;\r\n\r\n        bodyDef.fixedRotation = comp.fixedRotation;\r\n        bodyDef.bullet = comp.bullet;\r\n\r\n        const node = comp.node;\r\n        const pos = node.worldPosition;\r\n        //@ts-ignore\r\n        bodyDef.position = { x: pos.x / PHYSICS_2D_PTM_RATIO, y: pos.y / PHYSICS_2D_PTM_RATIO };\r\n\r\n        tempVec3.z = Quat.getAxisAngle(this._rotationAxis, node.worldRotation);\r\n        if (this._rotationAxis.z < 0.0) {\r\n            tempVec3.z = Math.PI * 2 - tempVec3.z;\r\n        }\r\n        bodyDef.angle = tempVec3.z;\r\n\r\n        bodyDef.awake = comp.awakeOnLoad;\r\n\r\n        if (comp.type === ERigidBody2DType.Animated) {\r\n            bodyDef.type = ERigidBody2DType.Kinematic as number;\r\n\r\n            this._animatedBodies.push(body);\r\n            const bodyPos = bodyDef.position;\r\n            body._animatedPos.set(bodyPos.x, bodyPos.y);\r\n            body._animatedAngle = bodyDef.angle;\r\n        } else {\r\n            bodyDef.type = comp.type as number;\r\n        }\r\n\r\n        // read private property\r\n        const compPrivate = comp as any;\r\n        const linearVelocity = compPrivate._linearVelocity as Vec2;\r\n        //@ts-ignore\r\n        bodyDef.linearVelocity = { x: linearVelocity.x, y: linearVelocity.y };\r\n\r\n        bodyDef.angularVelocity = compPrivate._angularVelocity;\r\n\r\n        const b2Body = this._world.CreateBody(bodyDef);\r\n        b2Body.m_userData = body;\r\n        body._imp = b2Body;\r\n\r\n        this._bodies.push(body);\r\n    }\r\n\r\n    removeBody (body: b2RigidBody2D): void {\r\n        if (!this._bodies.includes(body)) {\r\n            return;\r\n        }\r\n        if (body.impl) {\r\n            body.impl.m_userData = null;\r\n            this._world.DestroyBody(body.impl);\r\n            body._imp = null;\r\n        }\r\n        js.array.remove(this._bodies, body);\r\n\r\n        const comp = body.rigidBody;\r\n        if (comp.type === ERigidBody2DType.Animated) {\r\n            js.array.remove(this._animatedBodies, body);\r\n        }\r\n    }\r\n\r\n    registerContactFixture (fixture: b2jsb.Fixture): void {\r\n        this._contactListener.registerContactFixture(fixture);\r\n    }\r\n    unregisterContactFixture (fixture: b2jsb.Fixture): void {\r\n        this._contactListener.unregisterContactFixture(fixture);\r\n    }\r\n\r\n    testPoint (point: Vec2): readonly Collider2D[] {\r\n        const x = tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;\r\n        const y = tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const d = 0.2 / PHYSICS_2D_PTM_RATIO;\r\n        tempB2AABB.lowerBound = { x: x - d, y: y - d };\r\n        tempB2AABB.upperBound = { x: x + d, y: y + d };\r\n\r\n        const callback = this._aabbQueryCallback;\r\n        callback.init(tempVec2_1);\r\n        this._world.QueryAABB(callback, tempB2AABB);\r\n\r\n        const fixtures = callback.getFixtures();\r\n        testResults.length = 0;\r\n        for (let i = 0; i < fixtures.length; i++) {\r\n            const collider = (fixtures[i].m_userData as b2Shape2D).collider;\r\n            if (!testResults.includes(collider)) {\r\n                testResults.push(collider);\r\n            }\r\n        }\r\n        return testResults;\r\n    }\r\n\r\n    testAABB (rect: Rect): readonly Collider2D[] {\r\n        tempB2AABB.lowerBound = { x: rect.xMin / PHYSICS_2D_PTM_RATIO, y: rect.yMin / PHYSICS_2D_PTM_RATIO };\r\n        tempB2AABB.upperBound = { x: rect.xMax / PHYSICS_2D_PTM_RATIO, y: rect.yMax / PHYSICS_2D_PTM_RATIO };\r\n\r\n        const callback = this._aabbQueryCallback;\r\n        callback.init();\r\n        this._world.QueryAABB(callback, tempB2AABB);\r\n\r\n        const fixtures = callback.getFixtures();\r\n        testResults.length = 0;\r\n        for (let i = 0; i < fixtures.length; i++) {\r\n            const collider = (fixtures[i].m_userData as b2Shape2D).collider;\r\n            if (!testResults.includes(collider)) {\r\n                testResults.push(collider);\r\n            }\r\n        }\r\n        return testResults;\r\n    }\r\n\r\n    drawDebug (): void {\r\n        if (TEST) return;\r\n        this._checkDebugDrawValid();\r\n\r\n        if (!this._debugGraphics) {\r\n            return;\r\n        }\r\n        this._debugGraphics.clear();\r\n        this._world.DrawDebugData();\r\n    }\r\n\r\n    _onBeginContact (b2contact: b2ContactExtends): void {\r\n        const c = PhysicsContact.get(b2contact);\r\n        c.emit(Contact2DType.BEGIN_CONTACT);\r\n    }\r\n\r\n    _onEndContact (b2contact: b2ContactExtends): void {\r\n        const c = b2contact.m_userData as PhysicsContact;\r\n        if (!c) {\r\n            return;\r\n        }\r\n        c.emit(Contact2DType.END_CONTACT);\r\n\r\n        PhysicsContact.put(b2contact);\r\n    }\r\n\r\n    _onPreSolve (b2contact: b2ContactExtends): void {\r\n        const c = b2contact.m_userData as PhysicsContact;\r\n        if (!c) {\r\n            return;\r\n        }\r\n\r\n        c.emit(Contact2DType.PRE_SOLVE);\r\n    }\r\n\r\n    _onPostSolve (b2contact: b2ContactExtends, impulse: b2jsb.ContactImpulse): void {\r\n        const c: PhysicsContact = b2contact.m_userData as PhysicsContact;\r\n        if (!c) {\r\n            return;\r\n        }\r\n\r\n        // impulse only survive during post sole callback\r\n        c._setImpulse(impulse);\r\n        c.emit(Contact2DType.POST_SOLVE);\r\n        c._setImpulse(null);\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IRigidBody2D } from '../spec/i-rigid-body';\r\nimport { RigidBody2D } from '../framework/components/rigid-body-2d';\r\nimport { PhysicsSystem2D } from '../framework/physics-system';\r\nimport { b2PhysicsWorld } from './physics-world';\r\nimport { Vec2, toRadian, Vec3, Quat, IVec2Like, TWO_PI, HALF_PI } from '../../core';\r\nimport { PHYSICS_2D_PTM_RATIO, ERigidBody2DType } from '../framework/physics-types';\r\n\r\nimport { Node } from '../../scene-graph/node';\r\nimport { Collider2D } from '../framework';\r\n\r\nconst tempVec3 = new Vec3();\r\n\r\nconst tempVec2_1 = { x: 0, y: 0 };\r\n\r\nexport class b2RigidBody2D implements IRigidBody2D {\r\n    get impl (): b2jsb.Body | null {\r\n        return this._body;\r\n    }\r\n    set _imp (v: b2jsb.Body | null) {\r\n        this._body = v;\r\n    }\r\n\r\n    get rigidBody (): RigidBody2D {\r\n        return this._rigidBody;\r\n    }\r\n    get isAwake (): boolean {\r\n        return this._body!.IsAwake();\r\n    }\r\n    get isSleeping (): boolean {\r\n        return !(this._body!.IsAwake());\r\n    }\r\n\r\n    _animatedPos = new Vec2();\r\n    _animatedAngle = 0;\r\n\r\n    private _body: b2jsb.Body | null = null;\r\n    private _rigidBody!: RigidBody2D;\r\n\r\n    private _inited = false;\r\n\r\n    initialize (com: RigidBody2D): void {\r\n        this._rigidBody = com;\r\n\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    onDestroy (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._destroy);\r\n    }\r\n\r\n    onEnable (): void {\r\n        this.setActive(true);\r\n    }\r\n\r\n    onDisable (): void {\r\n        this.setActive(false);\r\n    }\r\n\r\n    nodeTransformChanged (type): void {\r\n        if (PhysicsSystem2D.instance.stepping) {\r\n            return;\r\n        }\r\n\r\n        if (type & Node.TransformBit.SCALE) {\r\n            const colliders = this.rigidBody.getComponents(Collider2D);\r\n            for (let i = 0; i < colliders.length; i++) {\r\n                colliders[i].apply();\r\n            }\r\n        }\r\n\r\n        const bodyType = this._rigidBody.type;\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        let rotation = 0;\r\n        let isPosDirty = false;\r\n        let isRotDirty = false;\r\n\r\n        if (type & Node.TransformBit.POSITION) {\r\n            isPosDirty = true;\r\n            const pos = this._rigidBody.node.worldPosition;\r\n\r\n            tempVec2_1.x = pos.x / PHYSICS_2D_PTM_RATIO;\r\n            tempVec2_1.y = pos.y / PHYSICS_2D_PTM_RATIO;\r\n        }\r\n\r\n        if (type & Node.TransformBit.ROTATION) {\r\n            isRotDirty = true;\r\n            const rot = this._rigidBody.node.worldRotation;\r\n            const euler = tempVec3;\r\n            Quat.toEulerInYXZOrder(euler, rot);\r\n            rotation = toRadian(euler.z);\r\n        }\r\n\r\n        if (isPosDirty || isRotDirty) {\r\n            if (bodyType === ERigidBody2DType.Animated) {\r\n                if (isPosDirty) {\r\n                    this._animatedPos.set(tempVec2_1.x, tempVec2_1.y);\r\n                }\r\n\r\n                if (isRotDirty) {\r\n                    this._animatedAngle = rotation;\r\n                }\r\n            } else {\r\n                const tempFloatArray = b2jsb._tempFloatArray;\r\n                if (isPosDirty && isRotDirty) {\r\n                    tempFloatArray[0] = tempVec2_1.x;\r\n                    tempFloatArray[1] = tempVec2_1.y;\r\n                    tempFloatArray[2] = rotation;\r\n                    b2body._SetTransformJSB();\r\n                } else if (isPosDirty) {\r\n                    tempFloatArray[0] = tempVec2_1.x;\r\n                    tempFloatArray[1] = tempVec2_1.y;\r\n                    b2body._SetPositionJSB();\r\n                } else {\r\n                    tempFloatArray[0] = rotation;\r\n                    b2body._SetAngleJSB();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _init (): void {\r\n        if (this._inited) {\r\n            return;\r\n        }\r\n\r\n        (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).addBody(this);\r\n        this.setActive(false);\r\n\r\n        this._inited = true;\r\n    }\r\n\r\n    _destroy (): void {\r\n        if (!this._inited) return;\r\n\r\n        (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).removeBody(this);\r\n\r\n        this._inited = false;\r\n    }\r\n\r\n    animate (dt: number): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n        const b2Pos = b2body.GetPosition();\r\n\r\n        b2body.SetAwake(true);\r\n\r\n        const timeStep = 1 / dt;\r\n        tempVec2_1.x = (this._animatedPos.x - b2Pos.x) * timeStep;\r\n        tempVec2_1.y = (this._animatedPos.y - b2Pos.y) * timeStep;\r\n        // @ts-ignore\r\n        b2body.SetLinearVelocity(tempVec2_1);\r\n\r\n        //convert b2Rotation to [-PI~PI], which is the same as this._animatedAngle\r\n        let b2Rotation = b2body.GetAngle() % (TWO_PI);\r\n        if (b2Rotation > Math.PI) {\r\n            b2Rotation -= TWO_PI;\r\n        }\r\n\r\n        //calculate angular velocity\r\n        let angularVelocity = (this._animatedAngle - b2Rotation) * timeStep;\r\n        if (this._animatedAngle < -HALF_PI && b2Rotation > HALF_PI) { //ccw, crossing PI\r\n            angularVelocity = (this._animatedAngle + TWO_PI - b2Rotation) * timeStep;\r\n        } if (this._animatedAngle > HALF_PI && b2Rotation < -HALF_PI) { //cw, crossing PI\r\n            angularVelocity = (this._animatedAngle - TWO_PI - b2Rotation) * timeStep;\r\n        }\r\n\r\n        b2body.SetAngularVelocity(angularVelocity);\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        const dirty = this._rigidBody.node.hasChangedFlags;\r\n        if (dirty) { this.nodeTransformChanged(dirty); }\r\n    }\r\n\r\n    syncPositionToPhysics (enableAnimated = false): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        const pos = this._rigidBody.node.worldPosition;\r\n\r\n        const bodyType = this._rigidBody.type;\r\n\r\n        const temp = tempVec2_1;\r\n        temp.x = pos.x / PHYSICS_2D_PTM_RATIO;\r\n        temp.y = pos.y / PHYSICS_2D_PTM_RATIO;\r\n\r\n        if (bodyType === ERigidBody2DType.Animated && enableAnimated) {\r\n            this._animatedPos.set(temp.x, temp.y);\r\n        } else {\r\n            // @ts-ignore\r\n            b2body.SetTransform(temp, b2body.GetAngle());\r\n        }\r\n    }\r\n\r\n    syncRotationToPhysics (enableAnimated = false): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        const rot = this._rigidBody.node.worldRotation;\r\n        const euler = tempVec3;\r\n        Quat.toEulerInYXZOrder(euler, rot);\r\n        const rotation = toRadian(euler.z);\r\n\r\n        const bodyType = this._rigidBody.type;\r\n        if (bodyType === ERigidBody2DType.Animated && enableAnimated) {\r\n            this._animatedAngle = rotation;\r\n        } else {\r\n            b2body.SetTransform(b2body.GetPosition(), rotation);\r\n        }\r\n    }\r\n\r\n    resetVelocity (): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        tempVec2_1.x = 0;\r\n        tempVec2_1.y = 0;\r\n        // @ts-ignore\r\n        b2body.SetLinearVelocity(tempVec2_1);\r\n\r\n        b2body.SetAngularVelocity(0);\r\n    }\r\n\r\n    setType (v: ERigidBody2DType): void {\r\n        this._body!.SetType(v as number);\r\n    }\r\n    setLinearDamping (v: number): void {\r\n        this._body!.SetLinearDamping(v);\r\n    }\r\n    setAngularDamping (v: number): void {\r\n        this._body!.SetAngularDamping(v);\r\n    }\r\n    setGravityScale (v: number): void {\r\n        this._body!.SetGravityScale(v);\r\n    }\r\n    setFixedRotation (v: boolean): void {\r\n        this._body!.SetFixedRotation(v);\r\n    }\r\n    setAllowSleep (v: boolean): void {\r\n        this._body!.SetSleepingAllowed(v);\r\n    }\r\n    isActive (): any {\r\n        return this._body!.IsEnabled();\r\n    }\r\n    setActive (v: boolean): void {\r\n        this._body!.SetEnabled(v);\r\n    }\r\n    wakeUp (): void {\r\n        this._body!.SetAwake(true);\r\n    }\r\n    sleep (): void {\r\n        this._body!.SetAwake(false);\r\n    }\r\n    getMass (): any {\r\n        return this._body!.GetMass();\r\n    }\r\n    setLinearVelocity (v: IVec2Like): void {\r\n        this._body!.SetLinearVelocity(v as b2jsb.Vec2);\r\n    }\r\n    getLinearVelocity<Out extends IVec2Like> (out: Out): Out {\r\n        const velocity = this._body!.GetLinearVelocity();\r\n        out.x = velocity.x;\r\n        out.y = velocity.y;\r\n        return out;\r\n    }\r\n    getLinearVelocityFromWorldPoint<Out extends IVec2Like> (worldPoint: IVec2Like, out: Out): Out {\r\n        tempVec2_1.x = worldPoint.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = worldPoint.y / PHYSICS_2D_PTM_RATIO;\r\n        // @ts-ignore\r\n        const p = this._body!.GetLinearVelocityFromWorldPoint(tempVec2_1);//FIXME(cjh):, out as any);\r\n        out.x = p.x;\r\n        out.y = p.y;\r\n        out.x *= PHYSICS_2D_PTM_RATIO;\r\n        out.y *= PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n    setAngularVelocity (v: number): void {\r\n        this._body!.SetAngularVelocity(v);\r\n    }\r\n    getAngularVelocity (): number {\r\n        return this._body!.GetAngularVelocity();\r\n    }\r\n\r\n    getLocalVector<Out extends IVec2Like> (worldVector: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = worldVector.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = worldVector.y / PHYSICS_2D_PTM_RATIO;\r\n        // @ts-ignore\r\n        const p = this._body!.GetLocalVector(tempVec2_1);//FIXME(cjh), out as any);\r\n        out.x = p.x;\r\n        out.y = p.y;\r\n        out.x *= PHYSICS_2D_PTM_RATIO;\r\n        out.y *= PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n    getWorldVector<Out extends IVec2Like> (localVector: IVec2Like, out: Out): Out {\r\n        tempVec2_1.x = localVector.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = localVector.y / PHYSICS_2D_PTM_RATIO;\r\n        // @ts-ignore\r\n        const p = this._body!.GetWorldVector(tempVec2_1);//FIXME(cjh):, out as any);\r\n        out.x = p.x;\r\n        out.y = p.y;\r\n        out.x *= PHYSICS_2D_PTM_RATIO;\r\n        out.y *= PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getLocalPoint<Out extends IVec2Like> (worldPoint: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = worldPoint.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = worldPoint.y / PHYSICS_2D_PTM_RATIO;\r\n        // @ts-ignore\r\n        const p = this._body!.GetLocalPoint(tempVec2_1);//FIXME(cjh):, out as any);\r\n        out.x = p.x;\r\n        out.y = p.y;\r\n        out.x *= PHYSICS_2D_PTM_RATIO;\r\n        out.y *= PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getWorldPoint<Out extends IVec2Like> (localPoint: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = localPoint.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = localPoint.y / PHYSICS_2D_PTM_RATIO;\r\n        // @ts-ignore\r\n        const p = this._body!.GetWorldPoint(tempVec2_1);//FIXME(cjh):, out as any);\r\n        out.x = p.x;\r\n        out.y = p.y;\r\n        out.x *= PHYSICS_2D_PTM_RATIO;\r\n        out.y *= PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getLocalCenter<Out extends IVec2Like> (out: Out): Out {\r\n        out = out || new Vec2();\r\n        const pos = this._body!.GetLocalCenter();\r\n        out.x = pos.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y = pos.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n    getWorldCenter<Out extends IVec2Like> (out: Out): Out {\r\n        out = out || new Vec2();\r\n        const pos = this._body!.GetWorldCenter();\r\n        out.x = pos.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y = pos.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getInertia (): any {\r\n        return this._body!.GetInertia();\r\n    }\r\n\r\n    applyForce (force: IVec2Like, point: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;\r\n            tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;\r\n            // @ts-ignore\r\n            this._body.ApplyForce(force as b2jsb.Vec2, tempVec2_1, wake);\r\n        }\r\n    }\r\n\r\n    applyForceToCenter (force: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyForceToCenter(force as b2jsb.Vec2, wake);\r\n        }\r\n    }\r\n\r\n    applyTorque (torque: number, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyTorque(torque, wake);\r\n        }\r\n    }\r\n\r\n    applyLinearImpulse (impulse: IVec2Like, point: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;\r\n            tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;\r\n            // @ts-ignore\r\n            this._body.ApplyLinearImpulse(impulse as b2jsb.Vec2, tempVec2_1, wake);\r\n        }\r\n    }\r\n\r\n    applyLinearImpulseToCenter (impulse: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyLinearImpulse(impulse as b2jsb.Vec2, this._body.GetPosition(), wake);\r\n        }\r\n    }\r\n\r\n    applyAngularImpulse (impulse: number, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyAngularImpulse(impulse, wake);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IBaseShape } from '../../spec/i-physics-shape';\r\nimport { Collider2D, PhysicsSystem2D, RigidBody2D, PHYSICS_2D_PTM_RATIO } from '../../../../exports/physics-2d-framework';\r\nimport { Rect, Vec3 } from '../../../core';\r\nimport { b2PhysicsWorld } from '../physics-world';\r\nimport { PhysicsGroup } from '../../../physics/framework/physics-enum';\r\n\r\nconst tempFilter = new b2jsb.Filter();\r\nconst lowerBound = { x: 0, y: 0 };\r\nconst upperBound = { x: 0, y: 0 };\r\n\r\nfunction getFilter (shape: b2Shape2D): any {\r\n    const comp = shape.collider;\r\n    if (comp.body) {\r\n        tempFilter.categoryBits = comp.group === PhysicsGroup.DEFAULT ? comp.body.group : comp.group;\r\n    } else {\r\n        tempFilter.categoryBits = comp.group;\r\n    }\r\n    tempFilter.maskBits = PhysicsSystem2D.instance.collisionMatrix[tempFilter.categoryBits];\r\n    return tempFilter;\r\n}\r\n\r\nexport class b2Shape2D implements IBaseShape {\r\n    protected _shapes: b2jsb.Shape[] = [];\r\n    protected _fixtures: b2jsb.Fixture[] = [];\r\n\r\n    protected _collider: Collider2D | null = null;\r\n    protected _body: b2jsb.Body | null = null;\r\n\r\n    private _inited = false;\r\n\r\n    private _rect = new Rect();\r\n\r\n    get impl (): b2jsb.Shape[] {\r\n        return this._shapes;\r\n    }\r\n\r\n    get collider (): Collider2D {\r\n        return this._collider!;\r\n    }\r\n\r\n    initialize (comp: Collider2D): void {\r\n        this._collider = comp;\r\n    }\r\n\r\n    onLoad (): void {\r\n    }\r\n\r\n    onEnable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    onDisable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._destroy);\r\n    }\r\n\r\n    start (): void {\r\n\r\n    }\r\n\r\n    onGroupChanged (): void {\r\n        const filter = getFilter(this);\r\n        this._fixtures.forEach((f): void => {\r\n            f.SetFilterData(filter);\r\n        });\r\n    }\r\n\r\n    apply (): void {\r\n        this._destroy();\r\n        if (this.collider.enabledInHierarchy) {\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    get worldAABB (): Readonly<Rect> {\r\n        const MAX = 10e6;\r\n\r\n        let minX = MAX; let minY = MAX;\r\n        let maxX = -MAX; let maxY = -MAX;\r\n\r\n        const fixtures = this._fixtures;\r\n        for (let i = 0; i < fixtures.length; i++) {\r\n            const fixture = fixtures[i];\r\n\r\n            const count = fixture.GetShape().GetChildCount();\r\n            for (let j = 0; j < count; j++) {\r\n                const lower = fixture.GetAABB(j).lowerBound;\r\n                lowerBound.x = lower.x;\r\n                lowerBound.y = lower.y;\r\n                const upper = fixture.GetAABB(j).upperBound;\r\n                upperBound.x = upper.x;\r\n                upperBound.y = upper.y;\r\n\r\n                if (fixture.GetShape().m_type === 2) { //b2ShapeType.e_polygonShape\r\n                    const skinWidth = fixture.GetShape().m_radius;\r\n                    lowerBound.x += skinWidth;\r\n                    lowerBound.y += skinWidth;\r\n                    upperBound.x -= skinWidth;\r\n                    upperBound.y -= skinWidth;\r\n                }\r\n                if (lowerBound.x < minX) minX = lowerBound.x;\r\n                if (lowerBound.y < minY) minY = lowerBound.y;\r\n                if (upperBound.x > maxX) maxX = upperBound.x;\r\n                if (upperBound.y > maxY) maxY = upperBound.y;\r\n            }\r\n        }\r\n\r\n        minX *= PHYSICS_2D_PTM_RATIO;\r\n        minY *= PHYSICS_2D_PTM_RATIO;\r\n        maxX *= PHYSICS_2D_PTM_RATIO;\r\n        maxY *= PHYSICS_2D_PTM_RATIO;\r\n\r\n        const r = this._rect;\r\n        r.x = minX;\r\n        r.y = minY;\r\n        r.width = maxX - minX;\r\n        r.height = maxY - minY;\r\n\r\n        return r;\r\n    }\r\n\r\n    getFixtureIndex (fixture: b2jsb.Fixture): number {\r\n        return this._fixtures.indexOf(fixture);\r\n    }\r\n\r\n    //relativePositionX/Y : relative Position from shape to rigid body\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): b2jsb.Shape[] {\r\n        return [];\r\n    }\r\n\r\n    _init (): void {\r\n        if (this._inited) return;\r\n\r\n        const comp = this.collider;\r\n        const scale = comp.node.worldScale;\r\n        // relative Position from shape to rigid body\r\n        let relativePosition = Vec3.ZERO;\r\n        const body = comp.getComponent(RigidBody2D);\r\n\r\n        //if rigid body is not attached to the same node of collider, this b2jsb.shape is attached\r\n        // to the groundRigidBody(pos zero, rot zero)\r\n        if (body && body.impl && body.impl.impl) {\r\n            this._body = body.impl.impl as b2jsb.Body;\r\n        } else {\r\n            this._body = (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).groundBodyImpl;\r\n            relativePosition = comp.node.worldPosition;\r\n        }\r\n\r\n        const shapes = scale.x === 0 && scale.y === 0 ? [] : this._createShapes(scale.x, scale.y, relativePosition.x, relativePosition.y);\r\n\r\n        const filter = getFilter(this);\r\n\r\n        for (let i = 0; i < shapes.length; i++) {\r\n            const shape = shapes[i];\r\n\r\n            const fixDef = new b2jsb.FixtureDef();\r\n\r\n            fixDef.density = comp.density;\r\n            fixDef.isSensor = comp.sensor;\r\n            fixDef.friction = comp.friction;\r\n            fixDef.restitution = comp.restitution;\r\n            fixDef.shape = shape;\r\n            fixDef.filter = filter;\r\n\r\n            const fixture = this._body.CreateFixture(fixDef);\r\n            fixture.m_userData = this;\r\n\r\n            if (body?.enabledContactListener) {\r\n                (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).registerContactFixture(fixture);\r\n            }\r\n\r\n            this._shapes.push(shape);\r\n            this._fixtures.push(fixture);\r\n        }\r\n\r\n        this._inited = true;\r\n    }\r\n\r\n    _destroy (): void {\r\n        if (!this._inited) return;\r\n\r\n        const fixtures = this._fixtures;\r\n        const body = this._body;\r\n\r\n        for (let i = fixtures.length - 1; i >= 0; i--) {\r\n            const fixture = fixtures[i];\r\n            fixture.m_userData = null;\r\n\r\n            (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).unregisterContactFixture(fixture);\r\n\r\n            if (body) {\r\n                body.DestroyFixture(fixture);\r\n            }\r\n        }\r\n\r\n        this._body = null;\r\n\r\n        this._fixtures.length = 0;\r\n        this._shapes.length = 0;\r\n        this._inited = false;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { b2Shape2D } from './shape-2d';\r\nimport { BoxCollider2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { IBoxShape } from '../../spec/i-physics-shape';\r\nimport { Vec2, Rect } from '../../../core';\r\n\r\nconst tempAabb = new Rect();\r\n\r\nexport class b2BoxShape extends b2Shape2D implements IBoxShape {\r\n    _worldPoints: Vec2[] = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];\r\n    get worldPoints (): Readonly<Vec2>[] {\r\n        const aabb = tempAabb;\r\n\r\n        const collider = this.collider as BoxCollider2D;\r\n        const size = collider.size;\r\n        const offset = collider.offset;\r\n\r\n        aabb.x = offset.x - size.width / 2;\r\n        aabb.y = offset.y - size.height / 2;\r\n        aabb.width = size.width;\r\n        aabb.height = size.height;\r\n\r\n        const wps = this._worldPoints;\r\n        const wp0 = wps[0]; const wp1 = wps[1];\r\n        const wp2 = wps[2]; const wp3 = wps[3];\r\n\r\n        aabb.transformMat4ToPoints(collider.node.worldMatrix, wp0, wp1, wp2, wp3);\r\n\r\n        return wps;\r\n    }\r\n\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): any[] {\r\n        scaleX = Math.abs(scaleX);\r\n        scaleY = Math.abs(scaleY);\r\n\r\n        const comp = this.collider as BoxCollider2D;\r\n\r\n        const width = comp.size.width / 2 / PHYSICS_2D_PTM_RATIO * scaleX;\r\n        const height = comp.size.height / 2 / PHYSICS_2D_PTM_RATIO * scaleY;\r\n        const offsetX = (relativePositionX + comp.offset.x * scaleX) / PHYSICS_2D_PTM_RATIO;\r\n        const offsetY = (relativePositionY + comp.offset.y * scaleY) / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const shape = new b2jsb.PolygonShape();\r\n        shape.SetAsBox(width, height, new b2jsb.Vec2(offsetX, offsetY), 0);\r\n\r\n        return [shape];\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { b2Shape2D } from './shape-2d';\r\nimport { CircleCollider2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { ICircleShape } from '../../spec/i-physics-shape';\r\nimport { Vec2 } from '../../../core';\r\n\r\nexport class b2CircleShape extends b2Shape2D implements ICircleShape {\r\n    get worldRadius (): number {\r\n        return (this._shapes[0] as b2jsb.CircleShape).m_radius * PHYSICS_2D_PTM_RATIO;\r\n    }\r\n\r\n    _worldPosition = new Vec2();\r\n    get worldPosition (): Vec2 {\r\n        const p = (this._shapes[0] as b2jsb.CircleShape).m_p;\r\n        return this._worldPosition.set(p.x * PHYSICS_2D_PTM_RATIO, p.y * PHYSICS_2D_PTM_RATIO);\r\n    }\r\n\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): any[] {\r\n        scaleX = Math.abs(scaleX);\r\n        scaleY = Math.abs(scaleY);\r\n\r\n        const comp = this.collider as CircleCollider2D;\r\n\r\n        const offsetX = (relativePositionX + comp.offset.x * scaleX) / PHYSICS_2D_PTM_RATIO;\r\n        const offsetY = (relativePositionY + comp.offset.y * scaleY) / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const shape = new b2jsb.CircleShape();\r\n        shape.m_radius = comp.radius / PHYSICS_2D_PTM_RATIO * scaleX;\r\n        shape.m_p = { x: offsetX, y: offsetY };\r\n\r\n        return [shape];\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { b2Shape2D } from './shape-2d';\r\nimport * as PolygonPartition from '../../framework/utils/polygon-partition';\r\nimport { PolygonCollider2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { IPolygonShape } from '../../spec/i-physics-shape';\r\nimport { Vec2, logID } from '../../../core';\r\n\r\nexport class b2PolygonShape extends b2Shape2D implements IPolygonShape {\r\n    _worldPoints: Vec2[] = [];\r\n    get worldPoints (): Readonly<Vec2>[] {\r\n        const comp = this.collider as PolygonCollider2D;\r\n        const points = comp.points;\r\n        const worldPoints = this._worldPoints;\r\n        const m = comp.node.worldMatrix;\r\n        for (let i = 0; i < points.length; i++) {\r\n            if (!worldPoints[i]) {\r\n                worldPoints[i] = new Vec2();\r\n            }\r\n            Vec2.transformMat4(worldPoints[i], points[i], m);\r\n        }\r\n        worldPoints.length = points.length;\r\n\r\n        return this._worldPoints;\r\n    }\r\n\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): any[] {\r\n        const shapes: b2jsb.PolygonShape[] = [];\r\n\r\n        const comp = this.collider as PolygonCollider2D;\r\n        const points = comp.points;\r\n\r\n        // check if last point equal to first point\r\n        if (points.length > 0 && points[0].equals(points[points.length - 1])) {\r\n            points.length -= 1;\r\n        }\r\n\r\n        const polys = PolygonPartition.ConvexPartition(points);\r\n        if (!polys) {\r\n            logID(16408, comp.node.name);\r\n            return shapes;\r\n        }\r\n\r\n        const offset = comp.offset;\r\n\r\n        for (let i = 0; i < polys.length; i++) {\r\n            const poly = polys[i];\r\n\r\n            let shape: b2jsb.PolygonShape | null = null; let vertices: b2jsb.Vec2[] = [];\r\n            let firstVertice: b2jsb.Vec2 | null = null;\r\n\r\n            for (let j = 0, l = poly.length; j < l; j++) {\r\n                if (!shape) {\r\n                    shape = new b2jsb.PolygonShape();\r\n                }\r\n                const p = poly[j];\r\n                const x = (relativePositionX + (p.x + offset.x) * scaleX) / PHYSICS_2D_PTM_RATIO;\r\n                const y = (relativePositionY + (p.y + offset.y) * scaleY) / PHYSICS_2D_PTM_RATIO;\r\n                const v = new b2jsb.Vec2(x, y);\r\n                vertices.push(v);\r\n\r\n                if (!firstVertice) {\r\n                    firstVertice = v;\r\n                }\r\n\r\n                if (vertices.length === b2jsb.maxPolygonVertices) {\r\n                    shape.Set(vertices, vertices.length);\r\n                    shapes.push(shape);\r\n\r\n                    shape = null;\r\n\r\n                    if (j < l - 1) {\r\n                        vertices = [firstVertice, vertices[vertices.length - 1]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (shape) {\r\n                shape.Set(vertices, vertices.length);\r\n                shapes.push(shape);\r\n            }\r\n        }\r\n\r\n        return shapes;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IJoint2D } from '../../spec/i-physics-joint';\r\nimport { Joint2D, PhysicsSystem2D, RigidBody2D } from '../../framework';\r\nimport { b2PhysicsWorld } from '../physics-world';\r\n\r\nexport class b2Joint implements IJoint2D {\r\n    get impl (): b2jsb.Joint | null {\r\n        return this._b2joint;\r\n    }\r\n    get comp (): Joint2D | null {\r\n        return this._jointComp;\r\n    }\r\n    get body (): RigidBody2D | null {\r\n        return this._body;\r\n    }\r\n\r\n    protected _b2joint: b2jsb.Joint | null = null;\r\n    protected _jointComp: Joint2D | null = null;\r\n    protected _body: RigidBody2D | null = null;\r\n\r\n    private _inited = false;\r\n\r\n    initialize (comp: Joint2D): void {\r\n        this._jointComp = comp;\r\n    }\r\n\r\n    onEnable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    onDisable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._destroy);\r\n    }\r\n\r\n    // need init after body and connected body init\r\n    start (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    apply (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._destroy);\r\n        if (this.comp!.enabledInHierarchy) {\r\n            PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n        }\r\n    }\r\n\r\n    _init (): void {\r\n        if (this._inited) return;\r\n\r\n        const comp = this._jointComp!;\r\n        if (!comp.isValid) {\r\n            return;\r\n        }\r\n\r\n        this._body = comp.getComponent(RigidBody2D);\r\n\r\n        const def = this._createJointDef();\r\n        if (!def) {\r\n            return;\r\n        }\r\n\r\n        def.bodyA = this._body!.impl!.impl;\r\n        const connectedBody = comp.connectedBody;\r\n        //if connected body is set but not active, return\r\n        if (connectedBody && !connectedBody.enabledInHierarchy) {\r\n            return;\r\n        }\r\n\r\n        //if connected body is not set, use scene origin as connected body\r\n        if (!connectedBody) {\r\n            def.bodyB = (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).groundBodyImpl;\r\n        } else {\r\n            def.bodyB = connectedBody.impl!.impl;\r\n        }\r\n\r\n        def.collideConnected = comp.collideConnected;\r\n\r\n        this._b2joint = (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).impl.CreateJoint(def);\r\n\r\n        this._inited = true;\r\n    }\r\n\r\n    _destroy (): void {\r\n        if (!this._inited) return;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        //@ts-ignore\r\n        (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld).impl.DestroyJoint(this._b2joint);\r\n\r\n        this._b2joint = null;\r\n        this._inited = false;\r\n    }\r\n\r\n    _createJointDef (): b2jsb.JointDef | null {\r\n        return null;\r\n    }\r\n\r\n    isValid (): Joint2D | null {\r\n        return this._b2joint && this._body && this._body.impl && this._jointComp;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IMouseJoint } from '../../spec/i-physics-joint';\r\nimport { b2Joint } from './joint-2d';\r\nimport { MouseJoint2D, PhysicsSystem2D, Joint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { IVec2Like, Vec2 } from '../../../core';\r\nimport { Touch } from '../../../input/types';\r\nimport { b2PhysicsWorld } from '../physics-world';\r\nimport { NodeEventType } from '../../../scene-graph/node-event';\r\nimport { find } from '../../../scene-graph';\r\n\r\nconst tempB2Vec2 = new b2jsb.Vec2();\r\n\r\nexport class b2MouseJoint extends b2Joint implements IMouseJoint {\r\n    _touchPoint = new Vec2();\r\n    _isTouched = false;\r\n\r\n    setTarget (v: IVec2Like): void {\r\n        if (this._b2joint) {\r\n            tempB2Vec2.x = v.x / PHYSICS_2D_PTM_RATIO;\r\n            tempB2Vec2.y = v.y / PHYSICS_2D_PTM_RATIO;\r\n            (this._b2joint as b2jsb.MouseJoint).SetTarget(tempB2Vec2);\r\n        }\r\n    }\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MouseJoint).SetDampingRatio(v);\r\n        }\r\n    }\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MouseJoint).SetFrequency(v);\r\n        }\r\n    }\r\n    setMaxForce (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MouseJoint).SetMaxForce(v);\r\n        }\r\n    }\r\n\r\n    override _createJointDef (): any {\r\n        const def = new b2jsb.MouseJointDef();\r\n        const comp = this._jointComp as MouseJoint2D;\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        //@ts-ignore\r\n        def.target = { x: this._touchPoint.x / PHYSICS_2D_PTM_RATIO, y: this._touchPoint.y / PHYSICS_2D_PTM_RATIO };\r\n        def.maxForce = comp.maxForce;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n\r\n    override start (): void {\r\n        // empty implementation to override its parent's start, so don't remove it.\r\n    }\r\n\r\n    override onEnable (): void {\r\n        this._enableTouch(true);\r\n    }\r\n\r\n    override onDisable (): void {\r\n        super.onDisable();\r\n        this._enableTouch(false);\r\n    }\r\n\r\n    private _enableTouch (v: boolean): void {\r\n        const canvas = find('Canvas');\r\n        if (canvas) {\r\n            const cb = v ? canvas.on : canvas.off;\r\n            cb.call(canvas, NodeEventType.TOUCH_START, this.onTouchBegan, this);\r\n            cb.call(canvas, NodeEventType.TOUCH_MOVE, this.onTouchMove, this);\r\n            cb.call(canvas, NodeEventType.TOUCH_END, this.onTouchEnd, this);\r\n            cb.call(canvas, NodeEventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n        }\r\n    }\r\n\r\n    onTouchBegan (event: Touch): void {\r\n        this._isTouched = true;\r\n\r\n        const target = this._touchPoint.set(event.getUILocation());\r\n\r\n        const world = (PhysicsSystem2D.instance.physicsWorld as b2PhysicsWorld);\r\n        const colliders = world.testPoint(target);\r\n        if (colliders.length <= 0) return;\r\n\r\n        const body = colliders[0].body;\r\n        body!.wakeUp();\r\n\r\n        const comp = this._jointComp as MouseJoint2D;\r\n        comp.connectedBody = body;\r\n\r\n        this._init();\r\n\r\n        this.setMaxForce(comp.maxForce * body!.getMass());\r\n        this.setTarget(target);\r\n    }\r\n\r\n    onTouchMove (event: Touch): void {\r\n        this._touchPoint = event.getUILocation();\r\n    }\r\n\r\n    onTouchEnd (event: Touch): void {\r\n        this._destroy();\r\n        this._isTouched = false;\r\n    }\r\n\r\n    update (): void {\r\n        if (!this._isTouched || !this.isValid()) {\r\n            return;\r\n        }\r\n\r\n        this.setTarget(this._touchPoint);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IDistanceJoint } from '../../spec/i-physics-joint';\r\nimport { b2Joint } from './joint-2d';\r\nimport { DistanceJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\n\r\nexport class b2DistanceJoint extends b2Joint implements IDistanceJoint {\r\n    setMaxLength (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.RopeJoint).SetMaxLength(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as DistanceJoint2D;\r\n        const def = new b2jsb.RopeJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.maxLength = comp.maxLength / PHYSICS_2D_PTM_RATIO;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { ISpringJoint } from '../../spec/i-physics-joint';\r\nimport { b2Joint } from './joint-2d';\r\nimport { SpringJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\n\r\nexport class b2SpringJoint extends b2Joint implements ISpringJoint {\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.DistanceJoint).SetDampingRatio(v);\r\n        }\r\n    }\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.DistanceJoint).SetFrequency(v);\r\n        }\r\n    }\r\n    setDistance (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.DistanceJoint).SetLength(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as SpringJoint2D;\r\n        const def = new b2jsb.DistanceJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.length = comp.distance / PHYSICS_2D_PTM_RATIO;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IRelativeJoint } from '../../spec/i-physics-joint';\r\nimport { b2Joint } from './joint-2d';\r\nimport { RelativeJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian, Vec2 } from '../../../core';\r\n\r\nexport class b2RelativeJoint extends b2Joint implements IRelativeJoint {\r\n    setMaxForce (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MotorJoint).SetMaxForce(v);\r\n        }\r\n    }\r\n    setAngularOffset (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MotorJoint).SetAngularOffset(toRadian(v));\r\n        }\r\n    }\r\n    setLinearOffset (v: Vec2): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MotorJoint).SetLinearOffset(new b2jsb.Vec2(v.x / PHYSICS_2D_PTM_RATIO, v.y / PHYSICS_2D_PTM_RATIO));\r\n        }\r\n    }\r\n    setCorrectionFactor (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MotorJoint).m_correctionFactor = v;\r\n        }\r\n    }\r\n    setMaxTorque (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.MotorJoint).SetMaxTorque(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as RelativeJoint2D;\r\n        const def = new b2jsb.MotorJointDef();\r\n        def.linearOffset = { x: comp.linearOffset.x / PHYSICS_2D_PTM_RATIO, y: comp.linearOffset.y / PHYSICS_2D_PTM_RATIO };\r\n        def.angularOffset = toRadian(comp.angularOffset);\r\n        def.maxForce = comp.maxForce;\r\n        def.maxTorque = comp.maxTorque;\r\n        def.correctionFactor = comp.correctionFactor;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { ISliderJoint } from '../../spec/i-physics-joint';\r\nimport { b2Joint } from './joint-2d';\r\nimport { SliderJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian } from '../../../core';\r\n\r\nexport class b2SliderJoint extends b2Joint implements ISliderJoint {\r\n    // limit\r\n    enableLimit (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.PrismaticJoint).EnableLimit(v);\r\n        }\r\n    }\r\n    setLowerLimit (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    setUpperLimit (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    updateLimits (): void {\r\n        if (this._b2joint) {\r\n            const comp = this._jointComp as SliderJoint2D;\r\n            (this._b2joint as b2jsb.PrismaticJoint).SetLimits(comp.lowerLimit / PHYSICS_2D_PTM_RATIO, comp.upperLimit / PHYSICS_2D_PTM_RATIO);\r\n        }\r\n    }\r\n\r\n    // motor\r\n    enableMotor (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.PrismaticJoint).EnableMotor(v);\r\n        }\r\n    }\r\n    setMaxMotorForce (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.PrismaticJoint).SetMaxMotorForce(v);\r\n        }\r\n    }\r\n    setMotorSpeed (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.PrismaticJoint).SetMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as SliderJoint2D;\r\n        const def = new b2jsb.PrismaticJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        const angle = toRadian(comp.angle);\r\n        def.localAxisA = { x: Math.cos(angle), y: Math.sin(angle) };\r\n        def.referenceAngle = 0;\r\n        def.enableLimit = comp.enableLimit;\r\n        def.lowerTranslation = comp.lowerLimit / PHYSICS_2D_PTM_RATIO;\r\n        def.upperTranslation = comp.upperLimit / PHYSICS_2D_PTM_RATIO;\r\n        def.enableMotor = comp.enableMotor;\r\n        def.maxMotorForce = comp.maxMotorForce;\r\n        def.motorSpeed = comp.motorSpeed;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IFixedJoint } from '../../spec/i-physics-joint';\r\nimport { b2Joint } from './joint-2d';\r\nimport { FixedJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\n\r\nexport class b2FixedJoint extends b2Joint implements IFixedJoint {\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WeldJoint).SetFrequency(v);\r\n        }\r\n    }\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WeldJoint).SetDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as FixedJoint2D;\r\n        const def = new b2jsb.WeldJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.referenceAngle = 0;\r\n        def.frequencyHz = comp.frequency;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { IWheelJoint } from '../../spec/i-physics-joint';\r\nimport { WheelJoint2D } from '../../framework';\r\nimport { b2Joint } from './joint-2d';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian } from '../../../core';\r\n\r\nexport class b2WheelJoint extends b2Joint implements IWheelJoint {\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WheelJoint).SetSpringDampingRatio(v);\r\n        }\r\n    }\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WheelJoint).SetSpringFrequencyHz(v);\r\n        }\r\n    }\r\n\r\n    // motor\r\n    enableMotor (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WheelJoint).EnableMotor(v);\r\n        }\r\n    }\r\n    setMaxMotorTorque (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WheelJoint).SetMaxMotorTorque(v);\r\n        }\r\n    }\r\n    setMotorSpeed (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.WheelJoint).SetMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as WheelJoint2D;\r\n        const def = new b2jsb.WheelJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        const angle = toRadian(comp.angle);\r\n        def.localAxisA = { x: Math.cos(angle), y: Math.sin(angle) };\r\n        def.maxMotorTorque = comp.maxMotorTorque;\r\n        def.motorSpeed = toRadian(comp.motorSpeed);\r\n        def.enableMotor = comp.enableMotor;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IHingeJoint } from '../../spec/i-physics-joint';\r\nimport { HingeJoint2D } from '../../framework';\r\nimport { b2Joint } from './joint-2d';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian } from '../../../core';\r\n\r\nexport class b2HingeJoint extends b2Joint implements IHingeJoint {\r\n    enableLimit (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.RevoluteJoint).EnableLimit(v);\r\n        }\r\n    }\r\n    setLowerAngle (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    setUpperAngle (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    updateLimits (): void {\r\n        if (this._b2joint) {\r\n            const comp = this._jointComp as HingeJoint2D;\r\n            (this._b2joint as b2jsb.RevoluteJoint).SetLimits(toRadian(comp.lowerAngle), toRadian(comp.upperAngle));\r\n        }\r\n    }\r\n\r\n    // motor\r\n    enableMotor (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.RevoluteJoint).EnableMotor(v);\r\n        }\r\n    }\r\n    setMaxMotorTorque (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.RevoluteJoint).SetMaxMotorTorque(v);\r\n        }\r\n    }\r\n    setMotorSpeed (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as b2jsb.RevoluteJoint).SetMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as HingeJoint2D;\r\n        const def = new b2jsb.RevoluteJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n\r\n        def.enableMotor = comp.enableMotor;\r\n        def.maxMotorTorque = comp.maxMotorTorque;\r\n        def.motorSpeed = toRadian(comp.motorSpeed);\r\n\r\n        def.enableLimit = comp.enableLimit;\r\n        def.lowerAngle = toRadian(comp.lowerAngle);\r\n        def.upperAngle = toRadian(comp.upperAngle);\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2024 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { selector } from '../framework/physics-selector';\r\nimport { b2PhysicsWorld } from './physics-world';\r\nimport { b2RigidBody2D } from './rigid-body';\r\nimport { b2BoxShape } from './shapes/box-shape-2d';\r\nimport { b2CircleShape } from './shapes/circle-shape-2d';\r\nimport { b2PolygonShape } from './shapes/polygon-shape-2d';\r\nimport { b2MouseJoint } from './joints/mouse-joint';\r\nimport { b2DistanceJoint } from './joints/distance-joint';\r\nimport { b2SpringJoint } from './joints/spring-joint';\r\nimport { b2RelativeJoint } from './joints/relative-joint';\r\nimport { b2SliderJoint } from './joints/slider-joint';\r\nimport { b2FixedJoint } from './joints/fixed-joint';\r\nimport { b2WheelJoint } from './joints/wheel-joint';\r\nimport { b2HingeJoint } from './joints/hinge-joint';\r\n\r\nimport { Game, game } from '../../game';\r\n\r\ngame.once(Game.EVENT_PRE_SUBSYSTEM_INIT, () => {\r\n    selector.register('box2d-jsb', {\r\n        PhysicsWorld: b2PhysicsWorld,\r\n        RigidBody: b2RigidBody2D,\r\n\r\n        BoxShape: b2BoxShape,\r\n        CircleShape: b2CircleShape,\r\n        PolygonShape: b2PolygonShape,\r\n\r\n        MouseJoint: b2MouseJoint,\r\n        DistanceJoint: b2DistanceJoint,\r\n        SpringJoint: b2SpringJoint,\r\n        RelativeJoint: b2RelativeJoint,\r\n        SliderJoint: b2SliderJoint,\r\n        FixedJoint: b2FixedJoint,\r\n        WheelJoint: b2WheelJoint,\r\n        HingeJoint: b2HingeJoint,\r\n    });\r\n});\r\n"],"names":["b2EmptyInstance","ContactListener","QueryCallback","Draw","Vec2","RayCastCallback","BodyDef","AABB","Filter","Transform","Color","globalThis","b2jsb","PhysicsContactListener","_b2jsb$ContactListene","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","_contactFixtures","_BeginContact","_EndContact","_PreSolve","_PostSolve","_inheritsLoose","_proto","prototype","setBeginContact","cb","setEndContact","setPreSolve","setPostSolve","BeginContact","contact","fixtureA","GetFixtureA","fixtureB","GetFixtureB","fixtures","_shouldReport","indexOf","EndContact","PreSolve","oldManifold","PostSolve","impulse","registerContactFixture","fixture","push","unregisterContactFixture","js","PhysicsAABBQueryCallback","_b2jsb$QueryCallback","_point","_isPoint","_fixtures","init","point","initWithThis","x","y","ReportFixture","TestPoint","getFixture","getFixtures","PhysicsRayCastCallback","_b2jsb$RayCastCallbac","_type","ERaycast2DType","Closest","_points","_normals","_fractions","_mask","type","mask","normal","fraction","GetFilterData","categoryBits","Any","All","getPoints","getNormals","getFractions","pools","pointCache","b2worldmanifold","points","separations","worldmanifold","ManifoldPoint","localPoint","normalImpulse","tangentImpulse","manifoldPointCache","manifold","localNormal","normalImpulses","tangentImpulses","PhysicsContact","colliderA","colliderB","disabled","disabledOnce","_impulse","_inverted","_b2contact","get","b2contact","c","pop","put","m_userData","reset","_setImpulse","collider","setTangentSpeed","resetFriction","resetRestitution","getWorldManifold","GetWorldManifold","b2points","b2separations","count","GetManifold","pointCount","i","p","PHYSICS_2D_PTM_RATIO","getManifold","b2manifold","b2p","getImpulse","b2impulse","emit","contactType","_colliderA$body","_colliderB$body","hasListenerA","body","enabledContactListener","hasListenerB","PhysicsSystem2D","instance","setEnabled","value","SetEnabled","isTouching","IsTouching","SetTangentSpeed","getTangentSpeed","GetTangentSpeed","setFriction","SetFriction","getFriction","GetFriction","ResetFriction","setRestitution","SetRestitution","getRestitution","GetRestitution","ResetRestitution","_tmp_vec2","_tmp_color","GREEN_COLOR","GREEN","RED_COLOR","RED","MulXV","T","v","out","T_q_c","q","T_q_s","s","v_x","v_y","_tempFloatArray","PhysicsDebugDraw","_b2jsb$Draw","drawer","_drawer","_xf","_dxf","_DrawPolygon","vertices","vertexCount","moveTo","lineTo","close","DrawPolygon","color","_applyStrokeColor","stroke","DrawSolidPolygon","_applyFillColor","fill","_DrawCircle","center","radius","circle","DrawCircle","DrawSolidCircle","axis","DrawSegment","p1","p2","DrawTransform","xf","strokeColor","DrawPoint","DrawParticles","set","r","g","b","fillColor","PushTransform","PopTransform","tempVec3","Vec3","tempVec2_1","tempVec2_2","temoBodyDef","tempB2AABB","testResults","rIn","gIn","bIn","aIn","a","Set","b2PhysicsWorld","_world","_bodies","_animatedBodies","_rotationAxis","_physicsGroundBody","_contactListener","_aabbQueryCallback","_raycastQueryCallback","_debugGraphics","_b2DebugDrawer","_debugDrawFlags","World","tempBodyDef","CreateBody","listener","_onBeginContact","_onEndContact","_onPreSolve","_onPostSolve","SetContactListener","_proto2","_checkDebugDrawValid","isValid","canvas","find","scene","director","getScene","Node","addComponent","parent","node","hideFlags","CCObject","Flags","DontSave","worldPosition","ZERO","layer","Layers","Enum","UI_2D","lineWidth","debugDraw","SetDebugDraw","setSiblingIndex","children","e","errorID","message","destroy","SetFlags","debugDrawFlags","setGravity","SetGravity","setAllowSleep","SetAllowSleeping","step","deltaTime","velocityIterations","positionIterations","animatedBodies","l","animate","Step","raycast","equals","callback","RayCast","normals","fractions","results","shape","AllClosest","result","j","fixtureIndex","getFixtureIndex","syncPhysicsToScene","bodies","bodyComp","rigidBody","ERigidBody2DType","Animated","impl","_GetTransformJSB","z","angle","toDegree","set2DTransform","resetVelocity","syncSceneToPhysics","addBody","includes","bodyDef","comp","allowSleep","gravityScale","linearDamping","angularDamping","fixedRotation","bullet","pos","position","Quat","getAxisAngle","worldRotation","Math","PI","awake","awakeOnLoad","Kinematic","bodyPos","_animatedPos","_animatedAngle","compPrivate","linearVelocity","_linearVelocity","angularVelocity","_angularVelocity","b2Body","_imp","removeBody","DestroyBody","testPoint","d","lowerBound","upperBound","QueryAABB","testAABB","rect","xMin","yMin","xMax","yMax","drawDebug","clear","DrawDebugData","Contact2DType","BEGIN_CONTACT","END_CONTACT","PRE_SOLVE","POST_SOLVE","_createClass","key","b2RigidBody2D","_body","_rigidBody","_inited","initialize","com","_callAfterStep","_init","onDestroy","_destroy","onEnable","setActive","onDisable","nodeTransformChanged","stepping","TransformBit","SCALE","colliders","getComponents","Collider2D","bodyType","b2body","rotation","isPosDirty","isRotDirty","POSITION","ROTATION","rot","euler","toEulerInYXZOrder","toRadian","tempFloatArray","_SetTransformJSB","_SetPositionJSB","_SetAngleJSB","physicsWorld","dt","b2Pos","GetPosition","SetAwake","timeStep","SetLinearVelocity","b2Rotation","GetAngle","TWO_PI","HALF_PI","SetAngularVelocity","dirty","hasChangedFlags","syncPositionToPhysics","enableAnimated","temp","SetTransform","syncRotationToPhysics","setType","SetType","setLinearDamping","SetLinearDamping","setAngularDamping","SetAngularDamping","setGravityScale","SetGravityScale","setFixedRotation","SetFixedRotation","SetSleepingAllowed","isActive","IsEnabled","wakeUp","sleep","getMass","GetMass","setLinearVelocity","getLinearVelocity","velocity","GetLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","GetLinearVelocityFromWorldPoint","setAngularVelocity","getAngularVelocity","GetAngularVelocity","getLocalVector","worldVector","GetLocalVector","getWorldVector","localVector","GetWorldVector","getLocalPoint","GetLocalPoint","getWorldPoint","GetWorldPoint","getLocalCenter","GetLocalCenter","getWorldCenter","GetWorldCenter","getInertia","GetInertia","applyForce","force","wake","ApplyForce","applyForceToCenter","ApplyForceToCenter","applyTorque","torque","ApplyTorque","applyLinearImpulse","ApplyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","ApplyAngularImpulse","IsAwake","tempFilter","getFilter","group","PhysicsGroup","DEFAULT","maskBits","collisionMatrix","b2Shape2D","_shapes","_collider","_rect","Rect","onLoad","start","onGroupChanged","filter","forEach","f","SetFilterData","enabledInHierarchy","_createShapes","scale","worldScale","relativePosition","getComponent","RigidBody2D","groundBodyImpl","shapes","fixDef","FixtureDef","density","isSensor","sensor","friction","restitution","CreateFixture","DestroyFixture","MAX","minX","minY","maxX","maxY","GetShape","GetChildCount","lower","GetAABB","upper","m_type","skinWidth","m_radius","width","height","tempAabb","b2BoxShape","_b2Shape2D","_worldPoints","scaleX","scaleY","relativePositionX","relativePositionY","abs","size","offsetX","offset","offsetY","PolygonShape","SetAsBox","aabb","wps","wp0","wp1","wp2","wp3","transformMat4ToPoints","worldMatrix","b2CircleShape","_worldPosition","CircleShape","m_p","b2PolygonShape","polys","PolygonPartition","logID","name","poly","firstVertice","maxPolygonVertices","worldPoints","m","transformMat4","b2Joint","_b2joint","_jointComp","def","_createJointDef","bodyA","connectedBody","bodyB","collideConnected","CreateJoint","DestroyJoint","tempB2Vec2","b2MouseJoint","_b2Joint","_touchPoint","_isTouched","setTarget","SetTarget","setDampingRatio","SetDampingRatio","setFrequency","SetFrequency","setMaxForce","SetMaxForce","MouseJointDef","target","maxForce","dampingRatio","frequencyHz","frequency","_enableTouch","on","off","NodeEventType","TOUCH_START","onTouchBegan","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","event","getUILocation","update","b2DistanceJoint","setMaxLength","SetMaxLength","RopeJointDef","localAnchorA","anchor","localAnchorB","connectedAnchor","maxLength","b2SpringJoint","setDistance","SetLength","DistanceJointDef","distance","b2RelativeJoint","setAngularOffset","SetAngularOffset","setLinearOffset","SetLinearOffset","setCorrectionFactor","m_correctionFactor","setMaxTorque","SetMaxTorque","MotorJointDef","linearOffset","angularOffset","maxTorque","correctionFactor","b2SliderJoint","enableLimit","EnableLimit","setLowerLimit","updateLimits","setUpperLimit","SetLimits","lowerLimit","upperLimit","enableMotor","EnableMotor","setMaxMotorForce","SetMaxMotorForce","setMotorSpeed","SetMotorSpeed","PrismaticJointDef","localAxisA","cos","sin","referenceAngle","lowerTranslation","upperTranslation","maxMotorForce","motorSpeed","b2FixedJoint","WeldJointDef","b2WheelJoint","SetSpringDampingRatio","SetSpringFrequencyHz","setMaxMotorTorque","SetMaxMotorTorque","WheelJointDef","maxMotorTorque","b2HingeJoint","setLowerAngle","setUpperAngle","lowerAngle","upperAngle","RevoluteJointDef","game","once","Game","EVENT_PRE_SUBSYSTEM_INIT","selector","register","PhysicsWorld","RigidBody","BoxShape","MouseJoint","DistanceJoint","SpringJoint","RelativeJoint","SliderJoint","FixedJoint","WheelJoint","HingeJoint"],"mappings":"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"}