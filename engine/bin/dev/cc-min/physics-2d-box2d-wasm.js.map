{"version":3,"file":"physics-2d-box2d-wasm.js","sources":["../../../cocos/physics-2d/box2d-wasm/instantiate.ts","../../../cocos/physics-2d/box2d-wasm/instantiated.ts","../../../cocos/physics-2d/box2d-wasm/platform/physics-contact-listener.ts","../../../cocos/physics-2d/box2d-wasm/platform/physics-aabb-query-callback.ts","../../../cocos/physics-2d/box2d-wasm/platform/physics-ray-cast-callback.ts","../../../cocos/physics-2d/box2d-wasm/physics-contact.ts","../../../cocos/physics-2d/box2d-wasm/platform/physics-debug-draw.ts","../../../cocos/physics-2d/box2d-wasm/physics-world.ts","../../../cocos/physics-2d/box2d-wasm/rigid-body.ts","../../../cocos/physics-2d/box2d-wasm/shapes/shape-2d.ts","../../../cocos/physics-2d/box2d-wasm/shapes/box-shape-2d.ts","../../../cocos/physics-2d/box2d-wasm/shapes/circle-shape-2d.ts","../../../cocos/physics-2d/box2d-wasm/shapes/polygon-shape-2d.ts","../../../cocos/physics-2d/box2d-wasm/joints/joint-2d.ts","../../../cocos/physics-2d/box2d-wasm/joints/mouse-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/distance-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/spring-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/relative-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/slider-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/fixed-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/wheel-joint.ts","../../../cocos/physics-2d/box2d-wasm/joints/hinge-joint.ts"],"sourcesContent":["/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD, LOAD_BOX2D_MANUALLY } from 'internal:constants';\r\nimport { selector } from '../framework/physics-selector';\r\nimport { B2PhysicsWorld } from './physics-world';\r\nimport { B2RigidBody2D } from './rigid-body';\r\nimport { B2BoxShape } from './shapes/box-shape-2d';\r\nimport { B2CircleShape } from './shapes/circle-shape-2d';\r\nimport { B2PolygonShape } from './shapes/polygon-shape-2d';\r\nimport { B2MouseJoint } from './joints/mouse-joint';\r\nimport { B2DistanceJoint } from './joints/distance-joint';\r\nimport { B2SpringJoint } from './joints/spring-joint';\r\nimport { B2RelativeJoint } from './joints/relative-joint';\r\nimport { B2SliderJoint } from './joints/slider-joint';\r\nimport { B2FixedJoint } from './joints/fixed-joint';\r\nimport { B2WheelJoint } from './joints/wheel-joint';\r\nimport { B2HingeJoint } from './joints/hinge-joint';\r\n\r\nimport { Game, game } from '../../game';\r\nimport { waitForBox2dWasmInstantiation } from './instantiated';\r\nimport { PhysicsSystem2D } from '../framework';\r\n\r\ngame.once(Game.EVENT_PRE_SUBSYSTEM_INIT, () => {\r\n    selector.register('box2d-wasm', {\r\n        PhysicsWorld: B2PhysicsWorld,\r\n        RigidBody: B2RigidBody2D,\r\n\r\n        BoxShape: B2BoxShape,\r\n        CircleShape: B2CircleShape,\r\n        PolygonShape: B2PolygonShape,\r\n\r\n        MouseJoint: B2MouseJoint,\r\n        DistanceJoint: B2DistanceJoint,\r\n        SpringJoint: B2SpringJoint,\r\n        RelativeJoint: B2RelativeJoint,\r\n        SliderJoint: B2SliderJoint,\r\n        FixedJoint: B2FixedJoint,\r\n        WheelJoint: B2WheelJoint,\r\n        HingeJoint: B2HingeJoint,\r\n    });\r\n});\r\n\r\nlet loadBox2dPromise: Promise<void> | undefined;\r\n\r\nexport function loadWasmModuleBox2D (): Promise<void> {\r\n    if (BUILD && LOAD_BOX2D_MANUALLY) {\r\n        if (loadBox2dPromise) return loadBox2dPromise;\r\n        loadBox2dPromise = Promise.resolve()\r\n            .then(() => waitForBox2dWasmInstantiation())\r\n            .then(() => PhysicsSystem2D.constructAndRegister());\r\n        return loadBox2dPromise;\r\n    } else {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { instantiateWasm, ensureWasmModuleReady } from 'pal/wasm';\r\nimport { BUILD, LOAD_BOX2D_MANUALLY, NATIVE_CODE_BUNDLE_MODE } from 'internal:constants';\r\n\r\nimport { game } from '../../game';\r\nimport { error, sys, IVec2Like, log } from '../../core';\r\nimport { NativeCodeBundleMode } from '../../misc/webassembly-support';\r\n\r\n// eslint-disable-next-line import/no-mutable-exports\r\nexport let B2 = {} as any;\r\n\r\nexport function getImplPtr (wasmObject: any): number {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    if (!wasmObject) return 0;\r\n    return (wasmObject).$$.ptr as number;\r\n}\r\n\r\n// type : Fixture, Body, Contact, Joint, ...\r\nexport const enum B2ObjectType {\r\n    Fixture = 0,\r\n    Body,\r\n    Contact,\r\n    Joint,\r\n}\r\n\r\n/**\r\n* mapping wasm-object-ptr to ts-object\r\n*  B2.Fixture pointer -->B2Shape2D\r\n*  B2.Body pointer --> B2RigidBody2D\r\n*  B2.Contact pointer --> PhysicsContact\r\n*  B2.Joint pointer --> B2Joint\r\n*  ...\r\n*/\r\n//todo: combine WASM_OBJECT_PTR_2_TS_OBJECT and WASM_OBJECT_PTR_2_WASM_OBJECT\r\nconst WASM_OBJECT_PTR_2_TS_OBJECT = new Map<B2ObjectType, Map<number, any>>();\r\n\r\nexport function addImplPtrReference (Type: B2ObjectType, TSObject: any, implPtr: number): void {\r\n    if (implPtr) {\r\n        let map = WASM_OBJECT_PTR_2_TS_OBJECT.get(Type);\r\n        if (!map) {\r\n            map = new Map<number, any>();\r\n            WASM_OBJECT_PTR_2_TS_OBJECT.set(Type, map);\r\n        }\r\n        map.set(implPtr, TSObject);\r\n    }\r\n}\r\n\r\nexport function removeImplPtrReference (Type: B2ObjectType, implPtr: number): void {\r\n    if (implPtr) {\r\n        const map = WASM_OBJECT_PTR_2_TS_OBJECT.get(Type);\r\n        if (map && map.has(implPtr)) {\r\n            map.delete(implPtr);\r\n            if (map.size === 0) {\r\n                WASM_OBJECT_PTR_2_TS_OBJECT.delete(Type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTSObjectFromWASMObjectPtr<T> (Type: B2ObjectType, implPtr: number): T {\r\n    const map = WASM_OBJECT_PTR_2_TS_OBJECT.get(Type);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return map?.get(implPtr);\r\n}\r\n\r\n/**\r\n* mapping wasm-object-ptr to wasm-object\r\n*  B2.Fixture pointer -->B2.Fixture\r\n*  B2.Body pointer --> B2.Body\r\n*  B2.Contact pointer --> B2.Contact\r\n*  B2.Joint pointer --> B2.Joint\r\n*  ...\r\n*/\r\n//todo: combine WASM_OBJECT_PTR_2_TS_OBJECT and WASM_OBJECT_PTR_2_WASM_OBJECT\r\nconst WASM_OBJECT_PTR_2_WASM_OBJECT  = new Map<B2ObjectType, Map<number, any>>();\r\nexport function addImplPtrReferenceWASM (Type: B2ObjectType, WASMObject: any, implPtr: number): void {\r\n    if (implPtr) {\r\n        let map = WASM_OBJECT_PTR_2_WASM_OBJECT.get(Type);\r\n        if (!map) {\r\n            map = new Map<number, any>();\r\n            WASM_OBJECT_PTR_2_WASM_OBJECT.set(Type, map);\r\n        }\r\n        map.set(implPtr, WASMObject);\r\n    }\r\n}\r\n\r\nexport function removeImplPtrReferenceWASM (Type: B2ObjectType, implPtr: number): void {\r\n    if (implPtr) {\r\n        const map = WASM_OBJECT_PTR_2_WASM_OBJECT.get(Type);\r\n        if (map && map.has(implPtr)) {\r\n            map.delete(implPtr);\r\n            if (map.size === 0) {\r\n                WASM_OBJECT_PTR_2_WASM_OBJECT.delete(Type);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getWASMObjectFromWASMObjectPtr<T> (Type: B2ObjectType, implPtr: number): T {\r\n    const map = WASM_OBJECT_PTR_2_WASM_OBJECT.get(Type);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return map?.get(implPtr);\r\n}\r\n\r\n/**\r\n* ts implementation of c++ b2Mul\r\n*/\r\nexport function b2Mul (T: any, v: IVec2Like, out: IVec2Like): void {\r\n    out.x = (T.q.c * v.x - T.q.s * v.y) + T.p.x;\r\n    out.y = (T.q.s * v.x + T.q.c * v.y) + T.p.y;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nfunction initWasm (wasmFactory, wasmUrl: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        const errorMessage = (err: any): string => `[box2d]: box2d wasm lib load failed: ${err}`;\r\n        wasmFactory({\r\n            instantiateWasm (\r\n                importObject: WebAssembly.Imports,\r\n                receiveInstance: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\r\n            ) {\r\n                // NOTE: the Promise return by instantiateWasm hook can't be caught.\r\n                instantiateWasm(wasmUrl, importObject).then((result) => {\r\n                    receiveInstance(result.instance, result.module);\r\n                }).catch((err) => reject(errorMessage(err)));\r\n            },\r\n        }).then((Instance: any) => {\r\n            log('[box2d]:box2d wasm lib loaded.');\r\n            B2 = Instance;\r\n        }).then(resolve).catch((err: any) => reject(errorMessage(err)));\r\n    });\r\n}\r\n\r\nfunction initAsm (asmFactory): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        const errorMessage = (err: any): string => `[box2d]: box2d asm lib load failed: ${err}`;\r\n        asmFactory().then((instance: any) => {\r\n            log('[box2d]:box2d asm lib loaded.');\r\n            B2 = instance;\r\n        }).then(resolve).catch((err: any) => reject(errorMessage(err)));\r\n    });\r\n}\r\n\r\nfunction shouldUseWasmModule (): boolean {\r\n    if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.BOTH as number)) {\r\n        return sys.hasFeature(sys.Feature.WASM);\r\n    } else if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.WASM as number)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function waitForBox2dWasmInstantiation (): Promise<void> {\r\n    const errorReport = (msg: any): void => { error(msg); };\r\n    return ensureWasmModuleReady().then(() => {\r\n        if (shouldUseWasmModule()) {\r\n            return Promise.all([\r\n                import('external:emscripten/box2d/box2d.release.wasm.js'),\r\n                import('external:emscripten/box2d/box2d.release.wasm.wasm'),\r\n            ]).then(([\r\n                { default: wasmFactory },\r\n                { default: wasmUrl },\r\n            ]) => initWasm(wasmFactory, wasmUrl));\r\n        } else {\r\n            return import('external:emscripten/box2d/box2d.release.asm.js').then(\r\n                ({ default: asmFactory }) => initAsm(asmFactory),\r\n            );\r\n        }\r\n    }).catch(errorReport);\r\n}\r\n\r\nif (!BUILD || !LOAD_BOX2D_MANUALLY) {\r\n    game.onPostInfrastructureInitDelegate.add(waitForBox2dWasmInstantiation);\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\ntype BeginContactCallback = (contact: number) => void;\r\ntype EndContactCallback = (contact: number) => void;\r\ntype PreSolveCallback = (contact: number, oldManifold: number) => void;\r\ntype PostSolveCallback = (contact: number, impulse: number) => void;\r\n\r\nexport class PhysicsContactListener {\r\n    static _BeginContact: BeginContactCallback | null = null;\r\n    static _EndContact: EndContactCallback | null = null;\r\n    static _PreSolve: PreSolveCallback | null = null;\r\n    static _PostSolve: PostSolveCallback | null = null;\r\n\r\n    static BeginContact (contact: number): void {\r\n        if (this._BeginContact) {\r\n            this._BeginContact(contact);\r\n        }\r\n    }\r\n\r\n    static EndContact (contact: number): void {\r\n        if (this._EndContact) {\r\n            this._EndContact(contact);\r\n        }\r\n    }\r\n\r\n    static PreSolve (contact: number, oldManifold: number): void {\r\n        if (this._PreSolve) {\r\n            this._PreSolve(contact, oldManifold);\r\n        }\r\n    }\r\n\r\n    static PostSolve (contact: number, impulse: number): void {\r\n        if (this._PostSolve) {\r\n            this._PostSolve(contact, impulse);\r\n        }\r\n    }\r\n\r\n    static callback = {\r\n        BeginContact (contact: number): void {\r\n            PhysicsContactListener.BeginContact(contact);\r\n        },\r\n        EndContact (contact: number): void {\r\n            PhysicsContactListener.EndContact(contact);\r\n        },\r\n        PreSolve (contact: number, oldManifold: number): void {\r\n            PhysicsContactListener.PreSolve(contact, oldManifold);\r\n        },\r\n        PostSolve (contact: number, impulse: number): void {\r\n            PhysicsContactListener.PostSolve(contact, impulse);\r\n        },\r\n    };\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { Vec2 } from '../../../core';\r\n\r\nexport class PhysicsAABBQueryCallback {\r\n    static _point = { x: 0, y: 0 };\r\n    static _isPoint = false;\r\n    static _fixtures: number[] = [];//B2.Fixture ptr\r\n\r\n    static init (point?: Vec2): void {\r\n        if (point) {\r\n            this._isPoint = true;\r\n            this._point.x = point.x;\r\n            this._point.y = point.y;\r\n        } else {\r\n            this._isPoint = false;\r\n        }\r\n\r\n        this._fixtures.length = 0;\r\n    }\r\n\r\n    static ReportFixture (fixture: number): boolean {\r\n        if (this._isPoint) {\r\n            if (B2.FixtureTestPoint(fixture, this._point)) {\r\n                this._fixtures.push(fixture);\r\n            }\r\n        } else {\r\n            this._fixtures.push(fixture);\r\n        }\r\n\r\n        // True to continue the query, false to terminate the query.\r\n        return true;\r\n    }\r\n\r\n    static getFixture (): number {\r\n        return this._fixtures[0];\r\n    }\r\n\r\n    static getFixtures (): number[] {\r\n        return this._fixtures;\r\n    }\r\n\r\n    static callback = {\r\n        ReportFixture (fixture: number): boolean {\r\n            return PhysicsAABBQueryCallback.ReportFixture(fixture);\r\n        },\r\n    };\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { Vec2 } from '../../../core';\r\nimport { ERaycast2DType } from '../../framework';\r\n\r\nexport class PhysicsRayCastCallback {// extends B2.RayCastCallback {\r\n    static _type = ERaycast2DType.Closest;\r\n    static _fixtures: number[] = [];//B2.Fixture ptr\r\n    static _points: Vec2[] = [];\r\n    static _normals: Vec2[] = [];\r\n    static _fractions: number[] = [];\r\n\r\n    static _mask = 0xffffffff;\r\n\r\n    static init (type: ERaycast2DType, mask: number): void {\r\n        PhysicsRayCastCallback._type = type;\r\n        PhysicsRayCastCallback._mask = mask;\r\n        PhysicsRayCastCallback._fixtures.length = 0;\r\n        PhysicsRayCastCallback._points.length = 0;\r\n        PhysicsRayCastCallback._normals.length = 0;\r\n        PhysicsRayCastCallback._fractions.length = 0;\r\n    }\r\n\r\n    static ReportFixture (fixture: number, point: B2.Vec2, normal: B2.Vec2, fraction: number): number {\r\n        if ((B2.FixtureGetFilterData(fixture).categoryBits & PhysicsRayCastCallback._mask) === 0) {\r\n            return -1;\r\n        }\r\n\r\n        if (PhysicsRayCastCallback._type === ERaycast2DType.Closest) {\r\n            PhysicsRayCastCallback._fixtures[0] = fixture;\r\n            PhysicsRayCastCallback._points[0] = point as Vec2;\r\n            PhysicsRayCastCallback._normals[0] = normal as Vec2;\r\n            PhysicsRayCastCallback._fractions[0] = fraction;\r\n            return fraction;\r\n        }\r\n\r\n        PhysicsRayCastCallback._fixtures.push(fixture);\r\n        PhysicsRayCastCallback._points.push(new Vec2(point.x, point.y));\r\n        PhysicsRayCastCallback._normals.push(new Vec2(normal.x, normal.y));\r\n        PhysicsRayCastCallback._fractions.push(fraction);\r\n\r\n        if (PhysicsRayCastCallback._type === ERaycast2DType.Any) {\r\n            return 0;\r\n        } else if (PhysicsRayCastCallback._type >= ERaycast2DType.All) {\r\n            return 1;\r\n        }\r\n\r\n        return fraction;\r\n    }\r\n\r\n    static getFixtures (): number[] {\r\n        return PhysicsRayCastCallback._fixtures;\r\n    }\r\n\r\n    static getPoints (): Vec2[] {\r\n        return PhysicsRayCastCallback._points;\r\n    }\r\n\r\n    static getNormals (): Vec2[] {\r\n        return PhysicsRayCastCallback._normals;\r\n    }\r\n\r\n    static getFractions (): number[] {\r\n        return PhysicsRayCastCallback._fractions;\r\n    }\r\n\r\n    static callback = {\r\n        ReportFixture (fixture: number, point: B2.Vec2, normal: B2.Vec2, fraction: number): any {\r\n            return PhysicsRayCastCallback.ReportFixture(fixture, point, normal, fraction);\r\n        },\r\n    };\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2, B2ObjectType, addImplPtrReference, getTSObjectFromWASMObjectPtr, removeImplPtrReference } from './instantiated';\r\nimport { Vec2 } from '../../core';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../framework/physics-types';\r\nimport { Collider2D, Contact2DType, PhysicsSystem2D } from '../framework';\r\nimport { B2Shape2D } from './shapes/shape-2d';\r\nimport { IPhysics2DContact, IPhysics2DImpulse, IPhysics2DManifoldPoint, IPhysics2DWorldManifold } from '../spec/i-physics-contact';\r\n\r\nconst pools: PhysicsContact[] = [];\r\n\r\n// temp world manifold\r\nconst pointCache = [new Vec2(), new Vec2()];\r\n\r\nconst worldmanifold: IPhysics2DWorldManifold = {\r\n    points: [] as Vec2[],\r\n    separations: [] as number[],\r\n    normal: new Vec2(),\r\n};\r\n\r\nclass ManifoldPoint implements IPhysics2DManifoldPoint {\r\n    localPoint = new Vec2();\r\n    normalImpulse = 0;\r\n    tangentImpulse = 0;\r\n}\r\n\r\nconst manifoldPointCache = [new ManifoldPoint(), new ManifoldPoint()];\r\n\r\nconst manifold = {\r\n    type: 0,\r\n    localPoint: new Vec2(),\r\n    localNormal: new Vec2(),\r\n    points: [] as ManifoldPoint[],\r\n};\r\n\r\nconst impulse: IPhysics2DImpulse = {\r\n    normalImpulses: [] as number[],\r\n    tangentImpulses: [] as number[],\r\n};\r\n\r\n/** @mangle */\r\nexport class PhysicsContact implements IPhysics2DContact {\r\n    static get (b2contact: number): PhysicsContact {\r\n        let c = pools.pop();\r\n\r\n        if (!c) {\r\n            c = new PhysicsContact();\r\n        }\r\n\r\n        c.init(b2contact);\r\n        return c;\r\n    }\r\n\r\n    static put (b2contact: number): void {\r\n        const c = getTSObjectFromWASMObjectPtr<PhysicsContact>(B2ObjectType.Contact, b2contact);\r\n        if (!c) return;\r\n\r\n        pools.push(c);\r\n        c.reset();\r\n    }\r\n\r\n    colliderA: Collider2D | null = null;\r\n    colliderB: Collider2D | null = null;\r\n\r\n    disabled = false;\r\n    disabledOnce = false;\r\n\r\n    private _impulsePtr: number = 0;\r\n    private _inverted = false;\r\n    private _implPtr: number = 0;   //wasm object pointer\r\n    private _b2WorldmanifoldPtr: number = 0; //wasm object pointer\r\n\r\n    _setImpulse (impulse: number): void {\r\n        this._impulsePtr = impulse;\r\n    }\r\n\r\n    init (b2contact: number): void {\r\n        const ab = B2.ContactGetFixture(b2contact) as Vec2;\r\n        this.colliderA = (getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, ab.x)).collider;\r\n        this.colliderB = (getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, ab.y)).collider;\r\n        this.disabled = false;\r\n        this.disabledOnce = false;\r\n        this._impulsePtr = 0;\r\n        this._inverted = false;\r\n\r\n        this._implPtr = b2contact;\r\n        addImplPtrReference(B2ObjectType.Contact, this, this._implPtr);\r\n        this._b2WorldmanifoldPtr = B2.WorldManifoldNew();\r\n    }\r\n\r\n    reset (): void {\r\n        this.setTangentSpeed(0);\r\n        this.resetFriction();\r\n        this.resetRestitution();\r\n\r\n        this.colliderA = null;\r\n        this.colliderB = null;\r\n        this.disabled = false;\r\n        this._impulsePtr = 0;\r\n\r\n        removeImplPtrReference(B2ObjectType.Contact, this._implPtr);\r\n        this._implPtr = 0;\r\n\r\n        B2.WorldManifoldDelete(this._b2WorldmanifoldPtr);\r\n        this._b2WorldmanifoldPtr = 0;\r\n    }\r\n\r\n    getWorldManifold (): IPhysics2DWorldManifold {\r\n        const points = worldmanifold.points;\r\n        const separations = worldmanifold.separations;\r\n        const normal = worldmanifold.normal;\r\n\r\n        B2.ContactGetWorldManifold(this._implPtr, this._b2WorldmanifoldPtr);\r\n        const b2Manifold = B2.ContactGetManifold(this._implPtr);\r\n        const count = B2.ManifoldGetPointCount(b2Manifold);\r\n        points.length = separations.length = count;\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const p = pointCache[i];\r\n            p.x = B2.WorldManifoldGetPointValueX(this._b2WorldmanifoldPtr, i) * PHYSICS_2D_PTM_RATIO;\r\n            p.y = B2.WorldManifoldGetPointValueY(this._b2WorldmanifoldPtr, i) * PHYSICS_2D_PTM_RATIO;\r\n            points[i] = p;\r\n            separations[i] = B2.WorldManifoldGetSeparationValue(this._b2WorldmanifoldPtr, i) * PHYSICS_2D_PTM_RATIO;\r\n        }\r\n\r\n        normal.x = B2.WorldManifoldGetNormalValueX(this._b2WorldmanifoldPtr);\r\n        normal.y = B2.WorldManifoldGetNormalValueY(this._b2WorldmanifoldPtr);\r\n\r\n        if (this._inverted) {\r\n            normal.x *= -1;\r\n            normal.y *= -1;\r\n        }\r\n\r\n        return worldmanifold;\r\n    }\r\n\r\n    getManifold (): { type: number; localPoint: Vec2; localNormal: Vec2; points: ManifoldPoint[]; } {\r\n        const points = manifold.points;\r\n        const localNormal = manifold.localNormal;\r\n        const localPoint = manifold.localPoint;\r\n\r\n        const b2Manifold = B2.ContactGetManifold(this._implPtr);\r\n        const count = points.length = B2.ManifoldGetPointCount(b2Manifold);\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const p = manifoldPointCache[i];\r\n            const b2p = B2.ManifoldGetManifoldPointPtr(b2Manifold, i);//B2.ManifoldPoint\r\n            p.localPoint.x = B2.ManifoldPointGetLocalPointX(b2p) * PHYSICS_2D_PTM_RATIO;\r\n            p.localPoint.y = B2.ManifoldPointGetLocalPointY(b2p) * PHYSICS_2D_PTM_RATIO;\r\n            p.normalImpulse = B2.ManifoldPointGetNormalImpulse(b2p) * PHYSICS_2D_PTM_RATIO;\r\n            p.tangentImpulse = B2.ManifoldPointGetTangentImpulse(b2p); //* PHYSICS_2D_PTM_RATIO;?\r\n            points[i] = p;\r\n        }\r\n\r\n        localPoint.x = B2.ManifoldGetLocalPointValueX(b2Manifold) * PHYSICS_2D_PTM_RATIO;\r\n        localPoint.y = B2.ManifoldGetLocalPointValueY(b2Manifold) * PHYSICS_2D_PTM_RATIO;\r\n        localNormal.x = B2.ManifoldGetLocalNormalValueX(b2Manifold);\r\n        localNormal.y = B2.ManifoldGetLocalNormalValueY(b2Manifold);\r\n        manifold.type = B2.ManifoldGetType(b2Manifold);\r\n\r\n        if (this._inverted) {\r\n            localNormal.x *= -1;\r\n            localNormal.y *= -1;\r\n        }\r\n\r\n        return manifold;\r\n    }\r\n\r\n    getImpulse (): IPhysics2DImpulse | null {\r\n        const b2impulse = this._impulsePtr;\r\n        if (!b2impulse) return null;\r\n\r\n        const normalImpulses = impulse.normalImpulses;\r\n        const tangentImpulses = impulse.tangentImpulses;\r\n        const count = B2.ContactImpulseGetCount(b2impulse);\r\n        for (let i = 0; i < count; i++) {\r\n            normalImpulses[i] = B2.ContactImpulseGetNormalImpulse(b2impulse, i) * PHYSICS_2D_PTM_RATIO;\r\n            tangentImpulses[i] = B2.ContactImpulseGetTangentImpulse(b2impulse, i);\r\n        }\r\n\r\n        tangentImpulses.length = normalImpulses.length = count;\r\n\r\n        return impulse;\r\n    }\r\n\r\n    emit (contactType: string): void {\r\n        const colliderA = this.colliderA;\r\n        const colliderB = this.colliderB;\r\n\r\n        const hasListenerA = colliderA?.body?.enabledContactListener;\r\n        const hasListenerB = colliderB?.body?.enabledContactListener;\r\n\r\n        if (hasListenerA) {\r\n            colliderA.emit(contactType, colliderA, colliderB, this);\r\n        }\r\n\r\n        if (hasListenerB) {\r\n            colliderB.emit(contactType, colliderB, colliderA, this);\r\n        }\r\n\r\n        if (hasListenerA || hasListenerB) {\r\n            PhysicsSystem2D.instance.emit(contactType, colliderA, colliderB, this);\r\n        }\r\n\r\n        if (this.disabled || this.disabledOnce) {\r\n            this.setEnabled(false);\r\n            this.disabledOnce = false;\r\n        }\r\n    }\r\n\r\n    setEnabled (value: boolean): void {\r\n        B2.ContactSetEnabled(this._implPtr, value);\r\n    }\r\n\r\n    isTouching (): boolean {\r\n        return B2.ContactIsTouching(this._implPtr) as boolean;\r\n    }\r\n\r\n    setTangentSpeed (value: number): void {\r\n        B2.ContactSetTangentSpeed(this._implPtr, value);\r\n    }\r\n\r\n    getTangentSpeed (): number {\r\n        return B2.ContactGetTangentSpeed(this._implPtr) as number;\r\n    }\r\n\r\n    setFriction (value: number): void {\r\n        B2.ContactSetFriction(this._implPtr, value);\r\n    }\r\n\r\n    getFriction (): number {\r\n        return B2.ContactGetFriction(this._implPtr) as number;\r\n    }\r\n\r\n    resetFriction (): void {\r\n        B2.ContactResetFriction(this._implPtr);\r\n    }\r\n\r\n    setRestitution (value: number): void {\r\n        B2.ContactSetRestitution(this._implPtr, value);\r\n    }\r\n\r\n    getRestitution (): number {\r\n        return B2.ContactGetRestitution(this._implPtr) as number;\r\n    }\r\n\r\n    resetRestitution (): void {\r\n        B2.ContactResetRestitution(this._implPtr);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2, b2Mul } from '../instantiated';\r\nimport { Color } from '../../../core';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework';\r\nimport type { Graphics } from '../../../2d/components/graphics';\r\n\r\nconst _tmp_vec2 = { x: 0, y: 0 };\r\nconst _tmp_vec3 = { x: 0, y: 0 };\r\nconst _tmp_color = new Color();\r\n\r\nconst GREEN_COLOR = Color.GREEN;\r\nconst RED_COLOR = Color.RED;\r\n\r\nexport class PhysicsDebugDraw {// extends B2.Draw {\r\n    static callback = {\r\n        DrawPolygon (vertices: number, vertexCount: number, color: B2.Color): void {\r\n            PhysicsDebugDraw.DrawPolygon(vertices, vertexCount, color);\r\n        },\r\n        DrawSolidPolygon (vertices: number, vertexCount: number, color: B2.Color): void {\r\n            PhysicsDebugDraw.DrawSolidPolygon(vertices, vertexCount, color);\r\n        },\r\n        DrawCircle (center: B2.Vec2, radius: number, color: B2.Color): void {\r\n            PhysicsDebugDraw.DrawCircle(center, radius, color);\r\n        },\r\n        DrawSolidCircle (center: B2.Vec2, radius: number, axis, color: B2.Color): void {\r\n            PhysicsDebugDraw.DrawSolidCircle(center, radius, axis, color);\r\n        },\r\n        DrawSegment (p1: B2.Vec2, p2: B2.Vec2, color: B2.Color): void {\r\n            PhysicsDebugDraw.DrawSegment(p1, p2, color);\r\n        },\r\n        DrawTransform (xf: B2.Transform): void {\r\n            PhysicsDebugDraw.DrawTransform(xf);\r\n        },\r\n        DrawPoint (center: B2.Vec2, size: number, color: B2.Color): void {\r\n            PhysicsDebugDraw.DrawPoint(center, size, color);\r\n        },\r\n    };\r\n\r\n    static _drawer: Graphics | null = null;\r\n\r\n    static _xf = { p: { x: 0, y: 0 },  q: { s: 0, c: 1 } };//new B2.Transform();\r\n    static _dxf = { p: { x: 0, y: 0 },  q: { s: 0, c: 1 } };//new B2.Transform();\r\n\r\n    static _DrawPolygon (vertices: number, vertexCount: number): void {\r\n        const drawer = PhysicsDebugDraw._drawer!;\r\n        const rawVertexBuffer = B2.HEAPF32.subarray(vertices / 4, vertices / 4 + vertexCount * 2);\r\n\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            _tmp_vec2.x = rawVertexBuffer[i * 2 + 0];\r\n            _tmp_vec2.y = rawVertexBuffer[i * 2 + 1];\r\n            b2Mul(PhysicsDebugDraw._xf, _tmp_vec2, _tmp_vec3);\r\n            const x = _tmp_vec3.x * PHYSICS_2D_PTM_RATIO;\r\n            const y = _tmp_vec3.y * PHYSICS_2D_PTM_RATIO;\r\n            if (i === 0) drawer.moveTo(x, y);\r\n            else {\r\n                drawer.lineTo(x, y);\r\n            }\r\n        }\r\n\r\n        drawer.close();\r\n    }\r\n\r\n    static DrawPolygon (vertices: number, vertexCount: number, color: B2.Color): void {\r\n        PhysicsDebugDraw._applyStrokeColor(color);\r\n        PhysicsDebugDraw._DrawPolygon(vertices, vertexCount);\r\n        PhysicsDebugDraw._drawer!.stroke();\r\n    }\r\n\r\n    static DrawSolidPolygon (vertices: number, vertexCount: number, color: B2.Color): void {\r\n        PhysicsDebugDraw._applyFillColor(color);\r\n        PhysicsDebugDraw._DrawPolygon(vertices, vertexCount);\r\n        PhysicsDebugDraw._drawer!.fill();\r\n        PhysicsDebugDraw._drawer!.stroke();\r\n    }\r\n\r\n    static _DrawCircle (center: B2.Vec2, radius: number): void {\r\n        b2Mul(PhysicsDebugDraw._xf, center, _tmp_vec3);\r\n        //scale?\r\n        PhysicsDebugDraw._drawer!.circle(\r\n            _tmp_vec3.x * PHYSICS_2D_PTM_RATIO,\r\n            _tmp_vec3.y * PHYSICS_2D_PTM_RATIO,\r\n            radius * PHYSICS_2D_PTM_RATIO,\r\n        );\r\n    }\r\n\r\n    static DrawCircle (center: B2.Vec2, radius: number, color: B2.Color): void {\r\n        PhysicsDebugDraw._applyStrokeColor(color);\r\n        PhysicsDebugDraw._DrawCircle(center, radius);\r\n        PhysicsDebugDraw._drawer!.stroke();\r\n    }\r\n\r\n    static DrawSolidCircle (center: B2.Vec2, radius: number, axis, color: B2.Color): void {\r\n        PhysicsDebugDraw._applyFillColor(color);\r\n        PhysicsDebugDraw._DrawCircle(center, radius);\r\n        PhysicsDebugDraw._drawer!.fill();\r\n    }\r\n\r\n    static DrawSegment (p1: B2.Vec2, p2: B2.Vec2, color: B2.Color): void {\r\n        const drawer = PhysicsDebugDraw._drawer!;\r\n\r\n        if (p1.x === p2.x && p1.y === p2.y) {\r\n            PhysicsDebugDraw._applyFillColor(color);\r\n            PhysicsDebugDraw._DrawCircle(p1, 2 / PHYSICS_2D_PTM_RATIO);\r\n            drawer.fill();\r\n            return;\r\n        }\r\n        PhysicsDebugDraw._applyStrokeColor(color);\r\n\r\n        b2Mul(PhysicsDebugDraw._xf, p1, _tmp_vec2);\r\n        drawer.moveTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n        b2Mul(PhysicsDebugDraw._xf, p2, _tmp_vec2);\r\n        drawer.lineTo(_tmp_vec2.x * PHYSICS_2D_PTM_RATIO, _tmp_vec2.y * PHYSICS_2D_PTM_RATIO);\r\n        drawer.stroke();\r\n    }\r\n\r\n    static DrawTransform (xf: B2.Transform): void {\r\n        const drawer = PhysicsDebugDraw._drawer!;\r\n\r\n        drawer.strokeColor = RED_COLOR;\r\n\r\n        _tmp_vec2.x = _tmp_vec2.y = 0;\r\n        b2Mul(xf, _tmp_vec2, _tmp_vec3);\r\n        drawer.moveTo(_tmp_vec3.x * PHYSICS_2D_PTM_RATIO, _tmp_vec3.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        _tmp_vec2.x = 1; _tmp_vec2.y = 0;\r\n        b2Mul(xf, _tmp_vec2, _tmp_vec3);\r\n        drawer.lineTo(_tmp_vec3.x * PHYSICS_2D_PTM_RATIO, _tmp_vec3.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        drawer.stroke();\r\n\r\n        drawer.strokeColor = GREEN_COLOR;\r\n\r\n        _tmp_vec2.x = _tmp_vec2.y = 0;\r\n        b2Mul(xf, _tmp_vec2, _tmp_vec3);\r\n        drawer.moveTo(_tmp_vec3.x * PHYSICS_2D_PTM_RATIO, _tmp_vec3.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        _tmp_vec2.x = 0; _tmp_vec2.y = 1;\r\n        b2Mul(xf, _tmp_vec2, _tmp_vec3);\r\n        drawer.lineTo(_tmp_vec3.x * PHYSICS_2D_PTM_RATIO, _tmp_vec3.y * PHYSICS_2D_PTM_RATIO);\r\n\r\n        drawer.stroke();\r\n    }\r\n\r\n    static DrawPoint (center, size, color): void {\r\n        // TODO\r\n    }\r\n\r\n    static DrawParticles (): void {\r\n        // TODO\r\n    }\r\n\r\n    static _applyStrokeColor (color: B2.Color): void {\r\n        PhysicsDebugDraw._drawer!.strokeColor = _tmp_color.set(\r\n            color.r * 255,\r\n            color.g * 255,\r\n            color.b * 255,\r\n            150,\r\n        );\r\n    }\r\n\r\n    static _applyFillColor (color: B2.Color): void {\r\n        PhysicsDebugDraw._drawer!.fillColor = _tmp_color.set(\r\n            color.r * 255,\r\n            color.g * 255,\r\n            color.b * 255,\r\n            150,\r\n        );\r\n    }\r\n\r\n    PushTransform (xf): void {\r\n        PhysicsDebugDraw._xf = xf;\r\n    }\r\n\r\n    PopTransform (): void {\r\n        PhysicsDebugDraw._xf = PhysicsDebugDraw._dxf;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { B2, getImplPtr, addImplPtrReference, addImplPtrReferenceWASM,\r\n    getTSObjectFromWASMObjectPtr, removeImplPtrReference, removeImplPtrReferenceWASM, B2ObjectType } from './instantiated';\r\nimport { IPhysicsWorld } from '../spec/i-physics-world';\r\nimport { IVec2Like, Vec3, Quat, Vec2, toDegree, Rect, CCObjectFlags, js, errorID } from '../../core';\r\nimport { PHYSICS_2D_PTM_RATIO, ERaycast2DType, ERigidBody2DType } from '../framework/physics-types';\r\nimport { Canvas } from '../../2d/framework';\r\nimport type { Graphics } from '../../2d/components/graphics';\r\n\r\nimport { B2RigidBody2D } from './rigid-body';\r\nimport { PhysicsContactListener } from './platform/physics-contact-listener';\r\nimport { PhysicsAABBQueryCallback } from './platform/physics-aabb-query-callback';\r\nimport { PhysicsRayCastCallback } from './platform/physics-ray-cast-callback';\r\nimport { PhysicsContact } from './physics-contact';\r\nimport { Contact2DType, Collider2D, RaycastResult2D } from '../framework';\r\nimport { B2Shape2D } from './shapes/shape-2d';\r\nimport { PhysicsDebugDraw } from './platform/physics-debug-draw';\r\nimport { Node, find, Layers } from '../../scene-graph';\r\nimport { director } from '../../game';\r\n\r\nconst tempVec3 = new Vec3();\r\nconst tempVec2_1 = new Vec2();\r\nconst tempVec2_2 = new Vec2();\r\n\r\n// const tempB2AABB = null;//new B2.AABB();\r\n\r\nconst testResults: Collider2D[] = [];\r\n\r\n/** @mangle */\r\nexport class B2PhysicsWorld implements IPhysicsWorld {\r\n    protected _world: B2.World;\r\n    protected _bodies: B2RigidBody2D[] = [];\r\n    protected _animatedBodies: B2RigidBody2D[] = [];\r\n    protected _rotationAxis: Vec3 = new Vec3();\r\n    protected _physicsGroundBody: B2.Body;\r\n\r\n    protected _contactListener: B2.ContactListener;\r\n    protected _aabbQueryCallback: B2.QueryCallback;\r\n    protected _raycastQueryCallback: B2.RayCastCallback;\r\n\r\n    private _temoBodyDef: B2.BodyDef;\r\n    private _tempB2AABB: B2.AABB;\r\n    public tempB2FixtureDefPtr: number;\r\n\r\n    get impl (): B2.World {\r\n        return this._world;\r\n    }\r\n\r\n    get groundBodyImpl (): B2.Body {\r\n        return this._physicsGroundBody;\r\n    }\r\n\r\n    constructor () {\r\n        this._world = new B2.World({ x: 0, y: -10 });\r\n        this._physicsGroundBody = this._world.CreateBody(new B2.BodyDef() as B2.BodyDef);\r\n        PhysicsContactListener._BeginContact = this._onBeginContact;\r\n        PhysicsContactListener._EndContact = this._onEndContact;\r\n        PhysicsContactListener._PreSolve = this._onPreSolve;\r\n        PhysicsContactListener._PostSolve = this._onPostSolve;\r\n        this._contactListener = B2.ContactListener.implement(PhysicsContactListener.callback);\r\n        this._world.SetContactListener(this._contactListener);\r\n\r\n        this._aabbQueryCallback = B2.QueryCallback.implement(PhysicsAABBQueryCallback.callback);\r\n        this._raycastQueryCallback = B2.RayCastCallback.implement(PhysicsRayCastCallback.callback);\r\n\r\n        this._temoBodyDef = new B2.BodyDef();\r\n        this._tempB2AABB = new B2.AABB();\r\n        this.tempB2FixtureDefPtr = B2.FixtureDefNew();\r\n    }\r\n\r\n    _debugGraphics: Graphics | null = null;\r\n    _b2DebugDrawer: B2.Draw | null = null;\r\n\r\n    _debugDrawFlags = 0;\r\n    get debugDrawFlags (): number {\r\n        return this._debugDrawFlags;\r\n    }\r\n    set debugDrawFlags (v) {\r\n        if (EDITOR_NOT_IN_PREVIEW) return;\r\n\r\n        if (!v) {\r\n            if (this._debugGraphics) {\r\n                this._debugGraphics.node.parent = null;\r\n            }\r\n        }\r\n\r\n        this._debugDrawFlags = v;\r\n    }\r\n\r\n    _checkDebugDrawValid (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) return;\r\n        if (!this._debugGraphics || !this._debugGraphics.isValid) {\r\n            let canvas = find('Canvas');\r\n            if (!canvas) {\r\n                const scene = director.getScene();\r\n                if (!scene) {\r\n                    return;\r\n                }\r\n\r\n                canvas = new Node('Canvas');\r\n                canvas.addComponent(Canvas);\r\n                canvas.parent = scene;\r\n            }\r\n\r\n            let node: Node | null = new Node('PHYSICS_2D_DEBUG_DRAW');\r\n            // node.zIndex = cc.macro.MAX_ZINDEX;\r\n            node.hideFlags |= CCObjectFlags.DontSave;\r\n            node.parent = canvas;\r\n            node.worldPosition = Vec3.ZERO;\r\n            node.layer = Layers.Enum.UI_2D;\r\n\r\n            try {\r\n                this._debugGraphics = node.addComponent('cc.Graphics') as Graphics;\r\n                this._debugGraphics.lineWidth = 3;\r\n\r\n                PhysicsDebugDraw._drawer = this._debugGraphics;\r\n                const debugDraw = B2.Draw.implement(PhysicsDebugDraw.callback);//new PhysicsDebugDraw();\r\n\r\n                this._b2DebugDrawer = debugDraw;\r\n                this._world.SetDebugDraw(debugDraw as B2.Draw);\r\n            } catch (e: any) {\r\n                errorID(4501, e.message as string);\r\n                node.destroy();\r\n                node = null;\r\n            }\r\n        }\r\n\r\n        if (this._debugGraphics) {\r\n            const parent = this._debugGraphics.node.parent!;\r\n            this._debugGraphics.node.setSiblingIndex(parent.children.length - 1);\r\n        }\r\n\r\n        if (this._b2DebugDrawer) {\r\n            this._b2DebugDrawer.SetFlags(this.debugDrawFlags);\r\n        }\r\n    }\r\n\r\n    setGravity (v: IVec2Like): void {\r\n        this._world.SetGravity(v as B2.Vec2);\r\n    }\r\n\r\n    setAllowSleep (v: boolean): void {\r\n        this._world.SetAllowSleeping(true);\r\n    }\r\n\r\n    step (deltaTime: number, velocityIterations = 10, positionIterations = 10): void {\r\n        const animatedBodies = this._animatedBodies;\r\n        for (let i = 0, l = animatedBodies.length; i < l; i++) {\r\n            animatedBodies[i].animate(deltaTime);\r\n        }\r\n        this._world.Step(deltaTime, velocityIterations, positionIterations);\r\n    }\r\n\r\n    raycast (p1: Vec2, p2: Vec2, type: ERaycast2DType, mask: number): RaycastResult2D[] {\r\n        if (p1.equals(p2)) {\r\n            return [];\r\n        }\r\n\r\n        type = type || ERaycast2DType.Closest;\r\n\r\n        tempVec2_1.x = p1.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = p1.y / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_2.x = p2.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_2.y = p2.y / PHYSICS_2D_PTM_RATIO;\r\n\r\n        PhysicsRayCastCallback.init(type, mask);\r\n        this._world.RayCast(this._raycastQueryCallback, tempVec2_1, tempVec2_2);\r\n\r\n        const fixtures = PhysicsRayCastCallback.getFixtures();\r\n        if (fixtures.length > 0) {\r\n            const points = PhysicsRayCastCallback.getPoints();\r\n            const normals = PhysicsRayCastCallback.getNormals();\r\n            const fractions = PhysicsRayCastCallback.getFractions();\r\n\r\n            const results: RaycastResult2D[] = [];\r\n            for (let i = 0, l = fixtures.length; i < l; i++) {\r\n                const fixture = fixtures[i];\r\n                const shape = getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, fixture);\r\n                const collider = shape.collider;\r\n\r\n                if (type === ERaycast2DType.AllClosest) {\r\n                    let result;\r\n                    for (let j = 0; j < results.length; j++) {\r\n                        if (results[j].collider === collider) {\r\n                            result = results[j];\r\n                        }\r\n                    }\r\n\r\n                    if (result) {\r\n                        if (fractions[i] < result.fraction) {\r\n                            result.fixtureIndex = shape.getFixtureIndex(fixture);\r\n                            result.point.x = points[i].x * PHYSICS_2D_PTM_RATIO;\r\n                            result.point.y = points[i].y * PHYSICS_2D_PTM_RATIO;\r\n                            result.normal.x = normals[i].x;\r\n                            result.normal.y = normals[i].y;\r\n                            result.fraction = fractions[i];\r\n                        }\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                results.push({\r\n                    collider,\r\n                    fixtureIndex: shape.getFixtureIndex(fixture),\r\n                    point: new Vec2(points[i].x * PHYSICS_2D_PTM_RATIO, points[i].y * PHYSICS_2D_PTM_RATIO),\r\n                    normal: new Vec2(normals[i].x, normals[i].y),\r\n                    fraction: fractions[i],\r\n                });\r\n            }\r\n\r\n            return results;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    syncPhysicsToScene (): void {\r\n        const bodies = this._bodies;\r\n        for (let i = 0, l = bodies.length; i < l; i++) {\r\n            const body = bodies[i];\r\n            const bodyComp = body.rigidBody;\r\n            if (bodyComp.type === ERigidBody2DType.Animated) {\r\n                body.resetVelocity();\r\n                continue;\r\n            }\r\n\r\n            const node = bodyComp.node;\r\n            const b2body = body.impl!;\r\n\r\n            // position\r\n            const pos = b2body.GetPosition();\r\n            tempVec3.x = pos.x * PHYSICS_2D_PTM_RATIO;\r\n            tempVec3.y = pos.y * PHYSICS_2D_PTM_RATIO;\r\n            tempVec3.z = 0;\r\n            node.worldPosition = tempVec3;\r\n\r\n            // rotation\r\n            const angle = toDegree(b2body.GetAngle());\r\n            node.setWorldRotationFromEuler(0, 0, angle);\r\n        }\r\n    }\r\n    syncSceneToPhysics (): void {\r\n        const bodies = this._bodies;\r\n        for (let i = 0; i < bodies.length; i++) {\r\n            bodies[i].syncSceneToPhysics();\r\n        }\r\n    }\r\n\r\n    addBody (body: B2RigidBody2D): void {\r\n        const bodies = this._bodies;\r\n        if (bodies.includes(body)) {\r\n            return;\r\n        }\r\n\r\n        const bodyDef = this._temoBodyDef;\r\n\r\n        const comp = body.rigidBody;\r\n\r\n        bodyDef.allowSleep = comp.allowSleep;\r\n        bodyDef.gravityScale = comp.gravityScale;\r\n        bodyDef.linearDamping = comp.linearDamping;\r\n        bodyDef.angularDamping = comp.angularDamping;\r\n\r\n        bodyDef.fixedRotation = comp.fixedRotation;\r\n        bodyDef.bullet = comp.bullet;\r\n\r\n        const node = comp.node;\r\n        const pos = node.worldPosition;\r\n        bodyDef.position = { x: pos.x / PHYSICS_2D_PTM_RATIO, y: pos.y / PHYSICS_2D_PTM_RATIO };\r\n        tempVec3.z = Quat.getAxisAngle(this._rotationAxis, node.worldRotation);\r\n        if (this._rotationAxis.z < 0.0) {\r\n            tempVec3.z = Math.PI * 2 - tempVec3.z;\r\n        }\r\n        bodyDef.angle = tempVec3.z;\r\n\r\n        bodyDef.awake = comp.awakeOnLoad;\r\n\r\n        if (comp.type === ERigidBody2DType.Animated) {\r\n            bodyDef.type = B2.BodyType.b2_kinematicBody;\r\n            this._animatedBodies.push(body);\r\n            body._animatedPos.set(bodyDef.position.x, bodyDef.position.y);\r\n            body._animatedAngle = bodyDef.angle;\r\n        } else {\r\n            switch (comp.type) {\r\n            case ERigidBody2DType.Dynamic:\r\n                bodyDef.type = B2.BodyType.b2_dynamicBody;\r\n                break;\r\n            case ERigidBody2DType.Static:\r\n                bodyDef.type = B2.BodyType.b2_staticBody;\r\n                break;\r\n            case ERigidBody2DType.Kinematic:\r\n                bodyDef.type = B2.BodyType.b2_kinematicBody;\r\n                break;\r\n            default:\r\n                bodyDef.type = B2.BodyType.b2_staticBody;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // read private property\r\n        const compPrivate = comp as any;\r\n        const linearVelocity = compPrivate._linearVelocity;\r\n        bodyDef.linearVelocity = { x: linearVelocity.x, y: linearVelocity.y };\r\n\r\n        bodyDef.angularVelocity = compPrivate._angularVelocity;\r\n\r\n        const b2Body = this._world.CreateBody(bodyDef);\r\n        addImplPtrReference(B2ObjectType.Body, body, getImplPtr(b2Body));\r\n        addImplPtrReferenceWASM(B2ObjectType.Body, b2Body, getImplPtr(b2Body));\r\n        body._imp = b2Body;\r\n\r\n        this._bodies.push(body);\r\n    }\r\n\r\n    removeBody (body: B2RigidBody2D): void {\r\n        if (!this._bodies.includes(body)) {\r\n            return;\r\n        }\r\n        if (body.impl) {\r\n            removeImplPtrReference(B2ObjectType.Body, getImplPtr(body.impl));\r\n            removeImplPtrReferenceWASM(B2ObjectType.Body, getImplPtr(body.impl));\r\n            this._world.DestroyBody(body.impl);\r\n            body._imp = null;\r\n        }\r\n        js.array.remove(this._bodies, body);\r\n\r\n        const comp = body.rigidBody;\r\n        if (comp.type === ERigidBody2DType.Animated) {\r\n            js.array.remove(this._animatedBodies, body);\r\n        }\r\n    }\r\n\r\n    public _updateBodyType (body: B2RigidBody2D): void {\r\n        const animatedBodies = this._animatedBodies;\r\n        const comp = body.rigidBody;\r\n        if (comp.type !== ERigidBody2DType.Animated) {\r\n            js.array.remove(animatedBodies, body);\r\n        } else {\r\n            if (animatedBodies.includes(body)) {\r\n                return;\r\n            }\r\n            animatedBodies.push(body);\r\n        }\r\n    }\r\n\r\n    registerContactFixture (fixture: number): void { //B2.Fixture ptr\r\n        this._contactListener.registerContactFixture(fixture);\r\n    }\r\n    unregisterContactFixture (fixture: number): void { //B2.Fixture ptr\r\n        this._contactListener.unregisterContactFixture(fixture);\r\n    }\r\n\r\n    testPoint (point: Vec2): readonly Collider2D[] {\r\n        const x = tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;\r\n        const y = tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const d = 0.2 / PHYSICS_2D_PTM_RATIO;\r\n        this._tempB2AABB.lowerBound = { x: x - d, y: y - d };\r\n        this._tempB2AABB.upperBound = { x: x + d, y: y + d };\r\n\r\n        const callback = this._aabbQueryCallback;\r\n        PhysicsAABBQueryCallback.init(tempVec2_1);\r\n        this._world.QueryAABB(callback, this._tempB2AABB);\r\n\r\n        const fixtures = PhysicsAABBQueryCallback.getFixtures();\r\n        testResults.length = 0;\r\n        for (let i = 0; i < fixtures.length; i++) {\r\n            const collider = getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, fixtures[i]).collider;\r\n            if (!testResults.includes(collider)) {\r\n                testResults.push(collider);\r\n            }\r\n        }\r\n        return testResults;\r\n    }\r\n\r\n    testAABB (rect: Rect): readonly Collider2D[] {\r\n        this._tempB2AABB.lowerBound = { x: rect.xMin / PHYSICS_2D_PTM_RATIO, y: rect.yMin / PHYSICS_2D_PTM_RATIO };\r\n        this._tempB2AABB.upperBound = { x: rect.xMax / PHYSICS_2D_PTM_RATIO, y: rect.yMax / PHYSICS_2D_PTM_RATIO };\r\n\r\n        const callback = this._aabbQueryCallback;\r\n        PhysicsAABBQueryCallback.init();\r\n        this._world.QueryAABB(callback, this._tempB2AABB);\r\n\r\n        const fixtures = PhysicsAABBQueryCallback.getFixtures();\r\n        testResults.length = 0;\r\n        for (let i = 0; i < fixtures.length; i++) {\r\n            const collider = getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, fixtures[i]).collider;\r\n            if (!testResults.includes(collider)) {\r\n                testResults.push(collider);\r\n            }\r\n        }\r\n        return testResults;\r\n    }\r\n\r\n    drawDebug (): void {\r\n        this._checkDebugDrawValid();\r\n\r\n        if (!this._debugGraphics) {\r\n            return;\r\n        }\r\n        this._debugGraphics.clear();\r\n        this._world.DebugDraw();\r\n    }\r\n\r\n    _onBeginContact (b2contact: number): void {\r\n        const c = PhysicsContact.get(b2contact);\r\n        c.emit(Contact2DType.BEGIN_CONTACT);\r\n    }\r\n\r\n    _onEndContact (b2contact: number): void {\r\n        const c = getTSObjectFromWASMObjectPtr<PhysicsContact>(B2ObjectType.Contact, b2contact);\r\n        if (!c) {\r\n            return;\r\n        }\r\n        c.emit(Contact2DType.END_CONTACT);\r\n\r\n        PhysicsContact.put(b2contact);\r\n    }\r\n\r\n    _onPreSolve (b2contact: number): void {\r\n        const c = getTSObjectFromWASMObjectPtr<PhysicsContact>(B2ObjectType.Contact, b2contact);\r\n        if (!c) {\r\n            return;\r\n        }\r\n\r\n        c.emit(Contact2DType.PRE_SOLVE);\r\n    }\r\n\r\n    _onPostSolve (b2contact: number, impulse: number): void {\r\n        const c = getTSObjectFromWASMObjectPtr<PhysicsContact>(B2ObjectType.Contact, b2contact);\r\n        if (!c) {\r\n            return;\r\n        }\r\n\r\n        // impulse only survive during post sole callback\r\n        c._setImpulse(impulse);\r\n        c.emit(Contact2DType.POST_SOLVE);\r\n        c._setImpulse(0);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG } from 'internal:constants';\r\nimport { B2, B2ObjectType, getTSObjectFromWASMObjectPtr } from './instantiated';\r\nimport { IRigidBody2D } from '../spec/i-rigid-body';\r\nimport { RigidBody2D } from '../framework/components/rigid-body-2d';\r\nimport { PhysicsSystem2D } from '../framework/physics-system';\r\nimport { B2PhysicsWorld } from './physics-world';\r\nimport { Vec2, toRadian, Vec3, Quat, IVec2Like, TWO_PI, HALF_PI, warn } from '../../core';\r\nimport { PHYSICS_2D_PTM_RATIO, ERigidBody2DType } from '../framework/physics-types';\r\n\r\nimport { Node } from '../../scene-graph/node';\r\nimport { Collider2D } from '../framework';\r\nimport { B2Shape2D } from './shapes/shape-2d';\r\nimport { B2Joint } from './joints/joint-2d';\r\n\r\nconst tempVec3 = new Vec3();\r\nconst tempVec2_1 = { x: 0, y: 0 };//new B2.Vec2(0, 0);\r\nconst tempVec2_2 = { x: 0, y: 0 };\r\n\r\n/** @mangle */\r\nexport class B2RigidBody2D implements IRigidBody2D {\r\n    get impl (): B2.Body | null {\r\n        return this._body;\r\n    }\r\n    set _imp (v: B2.Body | null) {\r\n        this._body = v;\r\n    }\r\n\r\n    get rigidBody (): RigidBody2D {\r\n        return this._rigidBody;\r\n    }\r\n    get isAwake (): boolean {\r\n        return this._body!.IsAwake();\r\n    }\r\n    get isSleeping (): boolean {\r\n        return !(this._body!.IsAwake());\r\n    }\r\n\r\n    _animatedPos = new Vec2();\r\n    _animatedAngle = 0;\r\n\r\n    private _body: B2.Body | null = null;\r\n    private _rigidBody!: RigidBody2D;\r\n\r\n    private _inited = false;\r\n\r\n    initialize (com: RigidBody2D): void {\r\n        this._rigidBody = com;\r\n\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    onDestroy (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._destroy);\r\n    }\r\n\r\n    onEnable (): void {\r\n        this.setActive(true);\r\n    }\r\n\r\n    onDisable (): void {\r\n        this.setActive(false);\r\n    }\r\n\r\n    nodeTransformChanged (type): void {\r\n        if (PhysicsSystem2D.instance.stepping) {\r\n            return;\r\n        }\r\n\r\n        if (type & Node.TransformBit.SCALE) {\r\n            const colliders = this.rigidBody.getComponents(Collider2D);\r\n            for (let i = 0; i < colliders.length; i++) {\r\n                colliders[i].apply();\r\n            }\r\n        }\r\n        if (type & Node.TransformBit.POSITION) {\r\n            this.syncPositionToPhysics(true);\r\n        }\r\n        if (type & Node.TransformBit.ROTATION) {\r\n            this.syncRotationToPhysics(true);\r\n        }\r\n    }\r\n\r\n    _init (): void {\r\n        if (this._inited) {\r\n            return;\r\n        }\r\n\r\n        (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).addBody(this);\r\n        this.setActive(false);\r\n\r\n        this._inited = true;\r\n    }\r\n\r\n    _destroy (): void {\r\n        if (!this._inited) return;\r\n\r\n        //collect all fixtures attached to this rigid body and process them\r\n        const fixtureList = this.impl?.GetFixtureList();\r\n        if (fixtureList) {\r\n            let shapeTSObj = getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, fixtureList);\r\n            while (shapeTSObj && shapeTSObj.impl) {\r\n                shapeTSObj.destroy();\r\n                const nextFixture = B2.FixtureGetNext(fixtureList) as number;\r\n                shapeTSObj = getTSObjectFromWASMObjectPtr<B2Shape2D>(B2ObjectType.Fixture, nextFixture);\r\n            }\r\n        }\r\n\r\n        //collect all joints attached to this rigid body and process them\r\n        const jointListPtr = this.impl?.GetJointList();\r\n        if (jointListPtr) {\r\n            let jointWASMPtr = B2.JointEdgeGetJoint(jointListPtr) as number;\r\n            let jointTSObj = getTSObjectFromWASMObjectPtr<B2Joint>(B2ObjectType.Fixture, jointWASMPtr);\r\n            while (jointTSObj) {\r\n                jointTSObj.destroy();\r\n                jointWASMPtr = B2.JointEdgeGetNext(jointListPtr) as number;\r\n                jointTSObj = getTSObjectFromWASMObjectPtr<B2Joint>(B2ObjectType.Fixture, jointWASMPtr);\r\n            }\r\n        }\r\n\r\n        (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).removeBody(this);\r\n\r\n        this._inited = false;\r\n    }\r\n\r\n    animate (dt: number): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n        const b2Pos = b2body.GetPosition();\r\n\r\n        b2body.SetAwake(true);\r\n\r\n        const timeStep = 1 / dt;\r\n        tempVec2_1.x = (this._animatedPos.x - b2Pos.x) * timeStep;\r\n        tempVec2_1.y = (this._animatedPos.y - b2Pos.y) * timeStep;\r\n        b2body.SetLinearVelocity(tempVec2_1);\r\n\r\n        //convert b2Rotation to [-PI~PI], which is the same as this._animatedAngle\r\n        let b2Rotation = b2body.GetAngle() % (TWO_PI);\r\n        if (b2Rotation > Math.PI) {\r\n            b2Rotation -= TWO_PI;\r\n        }\r\n\r\n        //calculate angular velocity\r\n        let angularVelocity = (this._animatedAngle - b2Rotation) * timeStep;\r\n        if (this._animatedAngle < -HALF_PI && b2Rotation > HALF_PI) { //ccw, crossing PI\r\n            angularVelocity = (this._animatedAngle + TWO_PI - b2Rotation) * timeStep;\r\n        } if (this._animatedAngle > HALF_PI && b2Rotation < -HALF_PI) { //cw, crossing PI\r\n            angularVelocity = (this._animatedAngle - TWO_PI - b2Rotation) * timeStep;\r\n        }\r\n\r\n        b2body.SetAngularVelocity(angularVelocity);\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        const dirty = this._rigidBody.node.hasChangedFlags;\r\n        if (dirty) { this.nodeTransformChanged(dirty); }\r\n    }\r\n\r\n    syncPositionToPhysics (enableAnimated = false): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        const pos = this._rigidBody.node.worldPosition;\r\n        tempVec2_2.x = pos.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_2.y = pos.y / PHYSICS_2D_PTM_RATIO;\r\n\r\n        if (this._rigidBody.type === ERigidBody2DType.Animated && enableAnimated) {\r\n            this._animatedPos.set(tempVec2_2.x, tempVec2_2.y);\r\n        } else {\r\n            b2body.SetTransform(tempVec2_2, b2body.GetAngle());\r\n        }\r\n    }\r\n\r\n    syncRotationToPhysics (enableAnimated = false): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        const rot = this._rigidBody.node.worldRotation;\r\n        const euler = tempVec3;\r\n        Quat.toEulerInYXZOrder(euler, rot);\r\n        const rotation = toRadian(euler.z);\r\n\r\n        const bodyType = this._rigidBody.type;\r\n        if (bodyType === ERigidBody2DType.Animated && enableAnimated) {\r\n            this._animatedAngle = rotation;\r\n        } else {\r\n            b2body.SetTransform(b2body.GetPosition(), rotation);\r\n        }\r\n    }\r\n\r\n    resetVelocity (): void {\r\n        const b2body = this._body;\r\n        if (!b2body) return;\r\n\r\n        tempVec2_1.x = 0;\r\n        tempVec2_1.y = 0;\r\n\r\n        b2body.SetLinearVelocity(tempVec2_1);\r\n        b2body.SetAngularVelocity(0);\r\n    }\r\n\r\n    setType (v: ERigidBody2DType): void {\r\n        (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld)._updateBodyType(this);\r\n        if (v === ERigidBody2DType.Dynamic) {\r\n            this._body!.SetType(B2.BodyType.b2_dynamicBody as B2.BodyType);\r\n        } else if (v === ERigidBody2DType.Kinematic) {\r\n            this._body!.SetType(B2.BodyType.b2_kinematicBody as B2.BodyType);\r\n        } else if (v === ERigidBody2DType.Static) {\r\n            this._body!.SetType(B2.BodyType.b2_staticBody as B2.BodyType);\r\n        }\r\n    }\r\n\r\n    setLinearDamping (v: number): void {\r\n        this._body!.SetLinearDamping(v);\r\n    }\r\n    setAngularDamping (v: number): void {\r\n        this._body!.SetAngularDamping(v);\r\n    }\r\n    setGravityScale (v: number): void {\r\n        this._body!.SetGravityScale(v);\r\n    }\r\n    setFixedRotation (v: boolean): void {\r\n        this._body!.SetFixedRotation(v);\r\n    }\r\n    setAllowSleep (v: boolean): void {\r\n        this._body!.SetSleepingAllowed(v);\r\n    }\r\n    isActive (): any {\r\n        return this._body!.IsEnabled();\r\n    }\r\n    setActive (v: boolean): void {\r\n        if (!this._body!.GetWorld().IsLocked()) {\r\n            this._body!.SetEnabled(v);\r\n        } else if (DEBUG) {\r\n            warn('Can not active RigidBody in contract listener.');\r\n        }\r\n    }\r\n    wakeUp (): void {\r\n        this._body!.SetAwake(true);\r\n    }\r\n    sleep (): void {\r\n        this._body!.SetAwake(false);\r\n    }\r\n    getMass (): any {\r\n        return this._body!.GetMass();\r\n    }\r\n    setLinearVelocity (v: IVec2Like): void {\r\n        this._body!.SetLinearVelocity(v as B2.Vec2);\r\n    }\r\n    getLinearVelocity<Out extends IVec2Like> (out: Out): Out {\r\n        const velocity = this._body!.GetLinearVelocity();\r\n        out.x = velocity.x;\r\n        out.y = velocity.y;\r\n        return out;\r\n    }\r\n    getLinearVelocityFromWorldPoint<Out extends IVec2Like> (worldPoint: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = worldPoint.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = worldPoint.y / PHYSICS_2D_PTM_RATIO;\r\n        const temp = this._body!.GetLinearVelocityFromWorldPoint(tempVec2_1);\r\n        out.x =  temp.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y =  temp.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n    setAngularVelocity (v: number): void {\r\n        this._body!.SetAngularVelocity(v);\r\n    }\r\n    getAngularVelocity (): number {\r\n        return this._body!.GetAngularVelocity();\r\n    }\r\n\r\n    getLocalVector<Out extends IVec2Like> (worldVector: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = worldVector.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = worldVector.y / PHYSICS_2D_PTM_RATIO;\r\n        const temp = this._body!.GetLocalVector(tempVec2_1);\r\n        out.x =  temp.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y =  temp.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n    getWorldVector<Out extends IVec2Like> (localVector: IVec2Like, out: Out): Out {\r\n        tempVec2_1.x = localVector.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = localVector.y / PHYSICS_2D_PTM_RATIO;\r\n        const temp = this._body!.GetWorldVector(tempVec2_1);\r\n        out.x =  temp.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y =  temp.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getLocalPoint<Out extends IVec2Like> (worldPoint: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = worldPoint.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = worldPoint.y / PHYSICS_2D_PTM_RATIO;\r\n        const temp = this._body!.GetLocalPoint(tempVec2_1);\r\n        out.x =  temp.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y =  temp.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getWorldPoint<Out extends IVec2Like> (localPoint: IVec2Like, out: Out): Out {\r\n        out = out || new Vec2();\r\n        tempVec2_1.x = localPoint.x / PHYSICS_2D_PTM_RATIO;\r\n        tempVec2_1.y = localPoint.y / PHYSICS_2D_PTM_RATIO;\r\n        const temp = this._body!.GetWorldPoint(tempVec2_1);\r\n        out.x =  temp.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y =  temp.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getLocalCenter<Out extends IVec2Like> (out: Out): Out {\r\n        out = out || new Vec2();\r\n        const pos = this._body!.GetLocalCenter();\r\n        out.x = pos.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y = pos.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n    getWorldCenter<Out extends IVec2Like> (out: Out): Out {\r\n        out = out || new Vec2();\r\n        const pos = this._body!.GetWorldCenter();\r\n        out.x = pos.x * PHYSICS_2D_PTM_RATIO;\r\n        out.y = pos.y * PHYSICS_2D_PTM_RATIO;\r\n        return out;\r\n    }\r\n\r\n    getInertia (): any {\r\n        return this._body!.GetInertia();\r\n    }\r\n\r\n    applyForce (force: IVec2Like, point: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;\r\n            tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;\r\n            this._body.ApplyForce(force as B2.Vec2, tempVec2_1, wake);\r\n        }\r\n    }\r\n\r\n    applyForceToCenter (force: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyForceToCenter(force as B2.Vec2, wake);\r\n        }\r\n    }\r\n\r\n    applyTorque (torque: number, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyTorque(torque, wake);\r\n        }\r\n    }\r\n\r\n    applyLinearImpulse (impulse: IVec2Like, point: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            tempVec2_1.x = point.x / PHYSICS_2D_PTM_RATIO;\r\n            tempVec2_1.y = point.y / PHYSICS_2D_PTM_RATIO;\r\n            this._body.ApplyLinearImpulse(impulse as B2.Vec2, tempVec2_1, wake);\r\n        }\r\n    }\r\n\r\n    applyLinearImpulseToCenter (impulse: IVec2Like, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyLinearImpulse(impulse as B2.Vec2, this._body.GetPosition(), wake);\r\n        }\r\n    }\r\n\r\n    applyAngularImpulse (impulse: number, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.ApplyAngularImpulse(impulse, wake);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2, getImplPtr, addImplPtrReference, addImplPtrReferenceWASM, removeImplPtrReference,\r\n    removeImplPtrReferenceWASM,\r\n    B2ObjectType } from '../instantiated';\r\nimport { IBaseShape } from '../../spec/i-physics-shape';\r\nimport { Collider2D, PhysicsSystem2D, RigidBody2D, PHYSICS_2D_PTM_RATIO } from '../../../../exports/physics-2d-framework';\r\nimport { Rect, Vec3 } from '../../../core';\r\nimport { B2PhysicsWorld } from '../physics-world';\r\nimport { PhysicsGroup } from '../../../physics/framework/physics-enum';\r\n\r\nconst tempFilter = { categoryBits: 0, maskBits: 0, groupIndex: 0 };// new B2.Filter();\r\nconst lowerBound = { x: 0, y: 0 };\r\nconst upperBound = { x: 0, y: 0 };\r\n\r\nfunction getFilter (shape: B2Shape2D): B2.Filter {\r\n    const comp = shape.collider;\r\n    if (comp.body) {\r\n        tempFilter.categoryBits = (comp.group as PhysicsGroup) === PhysicsGroup.DEFAULT ? comp.body.group : comp.group;\r\n    } else {\r\n        tempFilter.categoryBits = comp.group;\r\n    }\r\n    tempFilter.maskBits = PhysicsSystem2D.instance.collisionMatrix[tempFilter.categoryBits];\r\n    return tempFilter;\r\n}\r\n\r\n/** @mangle */\r\nexport class B2Shape2D implements IBaseShape {\r\n    protected _shapes: number[] = [];\r\n    protected _fixtures: number[] = [];//B2.Fixture ptr\r\n\r\n    protected _collider: Collider2D | null = null;\r\n    protected _body: B2.Body | null = null;\r\n\r\n    private _inited = false;\r\n\r\n    private _rect = new Rect();\r\n\r\n    get impl (): number[] {\r\n        return this._shapes;\r\n    }\r\n\r\n    get collider (): Collider2D {\r\n        return this._collider!;\r\n    }\r\n\r\n    initialize (comp: Collider2D): void {\r\n        this._collider = comp;\r\n    }\r\n\r\n    onLoad (): void {\r\n        //empty\r\n    }\r\n\r\n    onEnable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    onDisable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this.destroy);\r\n    }\r\n\r\n    start (): void {\r\n        //empty\r\n    }\r\n\r\n    onGroupChanged (): void {\r\n        const filter = getFilter(this);\r\n        this._fixtures.forEach((f): void => {\r\n            B2.FixtureSetFilterData(f, filter);\r\n        });\r\n    }\r\n\r\n    apply (): void {\r\n        this.destroy();\r\n        if (this.collider.enabledInHierarchy) {\r\n            this._init();\r\n        }\r\n    }\r\n\r\n    get worldAABB (): Readonly<Rect> {\r\n        const MAX = 10e6;\r\n\r\n        let minX = MAX; let minY = MAX;\r\n        let maxX = -MAX; let maxY = -MAX;\r\n\r\n        const fixtures = this._fixtures;\r\n        for (let i = 0; i < fixtures.length; i++) {\r\n            const fixture = fixtures[i];\r\n\r\n            const shape = B2.FixtureGetShape(fixture) as number;\r\n            const count = B2.ShapeGetChildCount(shape);\r\n            for (let j = 0; j < count; j++) {\r\n                const aabb = B2.FixtureGetAABB(fixture, j);\r\n                lowerBound.x = aabb.lowerBound.x;\r\n                lowerBound.y = aabb.lowerBound.y;\r\n                upperBound.x = aabb.upperBound.x;\r\n                upperBound.y = aabb.upperBound.y;\r\n                if (B2.ShapeGetType(shape) === 2) { //b2ShapeType.e_polygonShape\r\n                    const skinWidth = B2.ShapeGetRadius(shape);\r\n                    lowerBound.x += skinWidth;\r\n                    lowerBound.y += skinWidth;\r\n                    upperBound.x += skinWidth;\r\n                    upperBound.y += skinWidth;\r\n                }\r\n                if (lowerBound.x < minX) minX = lowerBound.x;\r\n                if (lowerBound.y < minY) minY = lowerBound.y;\r\n                if (upperBound.x > maxX) maxX = upperBound.x;\r\n                if (upperBound.y > maxY) maxY = upperBound.y;\r\n            }\r\n        }\r\n\r\n        minX *= PHYSICS_2D_PTM_RATIO;\r\n        minY *= PHYSICS_2D_PTM_RATIO;\r\n        maxX *= PHYSICS_2D_PTM_RATIO;\r\n        maxY *= PHYSICS_2D_PTM_RATIO;\r\n\r\n        const r = this._rect;\r\n        r.x = minX;\r\n        r.y = minY;\r\n        r.width = maxX - minX;\r\n        r.height = maxY - minY;\r\n\r\n        return r;\r\n    }\r\n\r\n    getFixtureIndex (fixture: number): number { //B2.Fixture ptr\r\n        return this._fixtures.indexOf(fixture);\r\n    }\r\n\r\n    //relativePositionX/Y : relative Position from shape to rigid body\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): number[] {\r\n        return [];\r\n    }\r\n\r\n    _init (): void {\r\n        if (this._inited) return;\r\n\r\n        const comp = this.collider;\r\n        const scale = comp.node.worldScale;\r\n        // relative Position from shape to rigid body\r\n        let relativePosition = Vec3.ZERO;\r\n        const body = comp.getComponent(RigidBody2D);\r\n\r\n        //if rigid body is not attached to the same node of collider, this b2.shape is attached\r\n        // to the groundRigidBody(pos zero, rot zero)\r\n        if (body && body.impl && body.impl.impl) {\r\n            this._body = body.impl.impl as B2.Body;\r\n        } else {\r\n            this._body = (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).groundBodyImpl;\r\n            relativePosition = comp.node.worldPosition;\r\n        }\r\n\r\n        const shapes = scale.x === 0 && scale.y === 0 ? [] : this._createShapes(scale.x, scale.y, relativePosition.x, relativePosition.y);\r\n\r\n        const filter = getFilter(this);\r\n\r\n        for (let i = 0; i < shapes.length; i++) {\r\n            const shape = shapes[i];\r\n\r\n            const fixDef = (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).tempB2FixtureDefPtr;\r\n            B2.FixtureDefSetAll(\r\n                fixDef,\r\n                shape,\r\n                0,\r\n                comp.friction,\r\n                comp.restitution,\r\n                comp.density,\r\n                comp.sensor,\r\n                filter.categoryBits,\r\n                filter.maskBits,\r\n                filter.groupIndex,\r\n            );\r\n\r\n            const fixture =  B2.BodyCreateFixture(getImplPtr(this._body), fixDef) as number;\r\n            addImplPtrReference(B2ObjectType.Fixture, this, fixture);\r\n            addImplPtrReferenceWASM(B2ObjectType.Fixture, fixture, fixture);\r\n\r\n            if (body?.enabledContactListener) {\r\n                (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).registerContactFixture(fixture);\r\n            }\r\n\r\n            this._shapes.push(shape);\r\n            this._fixtures.push(fixture);\r\n        }\r\n\r\n        this._inited = true;\r\n    }\r\n\r\n    destroy (): void {\r\n        if (!this._inited) return;\r\n\r\n        const fixtures = this._fixtures;\r\n        const body = this._body;\r\n\r\n        for (let i = fixtures.length - 1; i >= 0; i--) {\r\n            const fixture = fixtures[i];\r\n            //fixture.m_userData = null;\r\n            removeImplPtrReference(B2ObjectType.Fixture, fixture);\r\n            removeImplPtrReferenceWASM(B2ObjectType.Fixture, fixture);\r\n\r\n            (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).unregisterContactFixture(fixture);\r\n\r\n            if (body) {\r\n                B2.BodyDestroyFixture(getImplPtr(body), fixture);\r\n            }\r\n        }\r\n\r\n        this._body = null;\r\n\r\n        this._fixtures.length = 0;\r\n        this._shapes.length = 0;\r\n        this._inited = false;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { B2Shape2D } from './shape-2d';\r\nimport { BoxCollider2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { IBoxShape } from '../../spec/i-physics-shape';\r\nimport { Vec2, Rect } from '../../../core';\r\n\r\nconst tempAabb = new Rect();\r\n\r\n/** @mangle */\r\nexport class B2BoxShape extends B2Shape2D implements IBoxShape {\r\n    _worldPoints: Vec2[] = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];\r\n    get worldPoints (): Readonly<Vec2>[] {\r\n        const aabb = tempAabb;\r\n\r\n        const collider = this.collider as BoxCollider2D;\r\n        const size = collider.size;\r\n        const offset = collider.offset;\r\n\r\n        aabb.x = offset.x - size.width / 2;\r\n        aabb.y = offset.y - size.height / 2;\r\n        aabb.width = size.width;\r\n        aabb.height = size.height;\r\n\r\n        const wps = this._worldPoints;\r\n        const wp0 = wps[0]; const wp1 = wps[1];\r\n        const wp2 = wps[2]; const wp3 = wps[3];\r\n\r\n        aabb.transformMat4ToPoints(collider.node.worldMatrix, wp0, wp1, wp2, wp3);\r\n\r\n        return wps;\r\n    }\r\n\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): number[] { //B2.PolygonShape[]\r\n        scaleX = Math.abs(scaleX);\r\n        scaleY = Math.abs(scaleY);\r\n\r\n        const comp = this.collider as BoxCollider2D;\r\n\r\n        const width = comp.size.width / 2 / PHYSICS_2D_PTM_RATIO * scaleX;\r\n        const height = comp.size.height / 2 / PHYSICS_2D_PTM_RATIO * scaleY;\r\n        const offsetX = (relativePositionX + comp.offset.x * scaleX) / PHYSICS_2D_PTM_RATIO;\r\n        const offsetY = (relativePositionY + comp.offset.y * scaleY) / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const shape = B2.PolygonShapeNew() as number;\r\n        B2.PolygonShapeSetAsBoxWithCenterAndAngle(shape, width, height, offsetX, offsetY, 0);\r\n        return [shape];\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { B2Shape2D } from './shape-2d';\r\nimport { CircleCollider2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { ICircleShape } from '../../spec/i-physics-shape';\r\nimport { Vec2 } from '../../../core';\r\n\r\n/** @mangle */\r\nexport class B2CircleShape extends B2Shape2D implements ICircleShape {\r\n    get worldRadius (): number {\r\n        return B2.CircleShapeGetRadius(this._shapes[0]) * PHYSICS_2D_PTM_RATIO;\r\n    }\r\n\r\n    _worldPosition = new Vec2();\r\n    get worldPosition (): Vec2 {\r\n        const p = B2.CircleShapeGetPosition(this._shapes[0]) as B2.Vec2;\r\n        return this._worldPosition.set(p.x * PHYSICS_2D_PTM_RATIO, p.y * PHYSICS_2D_PTM_RATIO);\r\n    }\r\n\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): number[] { //B2.CircleShape[]\r\n        scaleX = Math.abs(scaleX);\r\n        scaleY = Math.abs(scaleY);\r\n\r\n        const comp = this.collider as CircleCollider2D;\r\n\r\n        const offsetX = (relativePositionX + comp.offset.x * scaleX) / PHYSICS_2D_PTM_RATIO;\r\n        const offsetY = (relativePositionY + comp.offset.y * scaleY) / PHYSICS_2D_PTM_RATIO;\r\n\r\n        const shape = B2.CircleShapeNew() as number;\r\n        B2.ShapeSetRadius(shape, comp.radius / PHYSICS_2D_PTM_RATIO * scaleX);\r\n        B2.CircleShapeSetPosition(shape, offsetX, offsetY);\r\n\r\n        return [shape];\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { B2Shape2D } from './shape-2d';\r\nimport * as PolygonPartition from '../../framework/utils/polygon-partition';\r\nimport { PolygonCollider2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { IPolygonShape } from '../../spec/i-physics-shape';\r\nimport { Vec2, warn } from '../../../core';\r\n\r\n/** @mangle */\r\nexport class B2PolygonShape extends B2Shape2D implements IPolygonShape {\r\n    _worldPoints: Vec2[] = [];\r\n    get worldPoints (): Readonly<Vec2>[] {\r\n        const comp = this.collider as PolygonCollider2D;\r\n        const points = comp.points;\r\n        const worldPoints = this._worldPoints;\r\n        const m = comp.node.worldMatrix;\r\n        for (let i = 0; i < points.length; i++) {\r\n            if (!worldPoints[i]) {\r\n                worldPoints[i] = new Vec2();\r\n            }\r\n            Vec2.transformMat4(worldPoints[i], points[i], m);\r\n        }\r\n        worldPoints.length = points.length;\r\n\r\n        return this._worldPoints;\r\n    }\r\n\r\n    _createShapes (scaleX: number, scaleY: number, relativePositionX: number, relativePositionY: number): number[] {\r\n        const shapes: number[] = [];\r\n\r\n        const comp = this.collider as PolygonCollider2D;\r\n        const points = comp.points;\r\n\r\n        // check if last point equal to first point\r\n        if (points.length > 0 && points[0].equals(points[points.length - 1])) {\r\n            points.length -= 1;\r\n        }\r\n\r\n        const polys = PolygonPartition.ConvexPartition(points);\r\n        if (!polys) {\r\n            warn('[Physics2D] b2PolygonShape failed to decompose polygon into convex polygons, node name: ', comp.node.name);\r\n            return shapes;\r\n        }\r\n\r\n        const offset = comp.offset;\r\n\r\n        for (let i = 0; i < polys.length; i++) {\r\n            const poly = polys[i];\r\n\r\n            let shape: number = 0;//B2.PolygonShape ptr\r\n            const vertices = B2.Vec2VectorNew();\r\n            let firstVertice: B2.Vec2 | null = null;\r\n\r\n            for (let j = 0, l = poly.length; j < l; j++) {\r\n                if (!shape) {\r\n                    shape = B2.PolygonShapeNew() as number;\r\n                }\r\n                const p = poly[j];\r\n                const x = (relativePositionX + (p.x + offset.x) * scaleX) / PHYSICS_2D_PTM_RATIO;\r\n                const y = (relativePositionY + (p.y + offset.y) * scaleY) / PHYSICS_2D_PTM_RATIO;\r\n                const v = { x, y };\r\n                B2.Vec2VectorPush(vertices, x, y);\r\n\r\n                if (!firstVertice) {\r\n                    firstVertice = v;\r\n                }\r\n\r\n                if (B2.Vec2VectorSize(vertices) === B2.maxPolygonVertices) {\r\n                    B2.PolygonShapeSet(shape, B2.Vec2VectorGetPtr(vertices), B2.Vec2VectorSize(vertices));\r\n                    shapes.push(shape);\r\n                    shape = 0;\r\n\r\n                    if (j < l - 1) {\r\n                        const temp = B2.Vec2VectorGet(vertices, B2.Vec2VectorSize(vertices) - 1);\r\n                        B2.Vec2VectorResize(vertices, 0, 0, 0);//clear\r\n                        B2.Vec2VectorPush(vertices, firstVertice.x, firstVertice.y);\r\n                        B2.Vec2VectorPush(vertices, temp.x, temp.y);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (shape) {\r\n                B2.PolygonShapeSet(shape, B2.Vec2VectorGetPtr(vertices), B2.Vec2VectorSize(vertices) as number);\r\n                shapes.push(shape);\r\n            }\r\n            B2.Vec2VectorDelete(vertices);\r\n        }\r\n\r\n        return shapes;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2, B2ObjectType, addImplPtrReference, addImplPtrReferenceWASM, getImplPtr, removeImplPtrReference, removeImplPtrReferenceWASM } from '../instantiated';\r\nimport { IJoint2D } from '../../spec/i-physics-joint';\r\nimport { Joint2D, PhysicsSystem2D, RigidBody2D } from '../../framework';\r\nimport { B2PhysicsWorld } from '../physics-world';\r\nimport { warn } from '../../../core';\r\n\r\n/** @mangle */\r\nexport class B2Joint implements IJoint2D {\r\n    get impl (): B2.Joint | null {\r\n        return this._b2joint;\r\n    }\r\n    get comp (): Joint2D | null {\r\n        return this._jointComp;\r\n    }\r\n    get body (): RigidBody2D | null {\r\n        return this._body;\r\n    }\r\n\r\n    protected _b2joint: B2.Joint | null = null;\r\n    protected _jointComp: Joint2D | null = null;\r\n    protected _body: RigidBody2D | null = null;\r\n\r\n    private _inited = false;\r\n\r\n    initialize (comp: Joint2D): void {\r\n        this._jointComp = comp;\r\n    }\r\n\r\n    onEnable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    onDisable (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this.destroy);\r\n    }\r\n\r\n    // need init after body and connected body init\r\n    start (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n    }\r\n\r\n    apply (): void {\r\n        PhysicsSystem2D.instance._callAfterStep(this, this.destroy);\r\n        if (this.comp!.enabledInHierarchy) {\r\n            PhysicsSystem2D.instance._callAfterStep(this, this._init);\r\n        }\r\n    }\r\n\r\n    _init (): void {\r\n        if (this._inited) return;\r\n\r\n        const comp = this._jointComp!;\r\n        if (!comp.isValid) {\r\n            return;\r\n        }\r\n\r\n        this._body = comp.getComponent(RigidBody2D);\r\n        if (!this._body) {\r\n            warn(`Joint2D: Body is not found, can not create joint. Node Name: ${comp.node.name}`);\r\n            return;\r\n        }\r\n\r\n        const def = this._createJointDef();\r\n        if (!def) {\r\n            return;\r\n        }\r\n\r\n        def.SetBodyA(this._body.impl!.impl as B2.Body);\r\n        const connectedBody = comp.connectedBody;\r\n        //if connected body is set but not active, return\r\n        if (connectedBody && !connectedBody.enabledInHierarchy) {\r\n            return;\r\n        }\r\n\r\n        //if connected body is not set, use scene origin as connected body\r\n        if (!connectedBody) {\r\n            def.SetBodyB((PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).groundBodyImpl);\r\n        } else {\r\n            def.SetBodyB(connectedBody.impl!.impl  as B2.Body);\r\n        }\r\n\r\n        def.collideConnected = comp.collideConnected;\r\n\r\n        this._b2joint = (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).impl.CreateJoint(def);\r\n        addImplPtrReference(B2ObjectType.Joint, this, getImplPtr(this._b2joint));\r\n        addImplPtrReferenceWASM(B2ObjectType.Joint, this._b2joint, getImplPtr(this._b2joint));\r\n\r\n        this._inited = true;\r\n    }\r\n\r\n    destroy (): void {\r\n        if (!this._inited) return;\r\n\r\n        removeImplPtrReference(B2ObjectType.Joint, getImplPtr(this._b2joint));\r\n        removeImplPtrReferenceWASM(B2ObjectType.Joint, getImplPtr(this._b2joint));\r\n        (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld).impl.DestroyJoint(this._b2joint!);\r\n\r\n        this._b2joint = null;\r\n        this._inited = false;\r\n    }\r\n\r\n    _createJointDef (): B2.JointDef | null {\r\n        return null;\r\n    }\r\n\r\n    isValid (): Joint2D | null {\r\n        return this._b2joint && this._body && this._body.impl && this._jointComp;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { IMouseJoint } from '../../spec/i-physics-joint';\r\nimport { B2Joint } from './joint-2d';\r\nimport { MouseJoint2D, PhysicsSystem2D, Joint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { IVec2Like, Vec2 } from '../../../core';\r\nimport { Touch } from '../../../input/types';\r\nimport { B2PhysicsWorld } from '../physics-world';\r\nimport { NodeEventType } from '../../../scene-graph/node-event';\r\nimport { find } from '../../../scene-graph';\r\n\r\nconst tempB2Vec2 = { x: 0, y: 0 };//new b2.Vec2();\r\n\r\n/** @mangle */\r\nexport class B2MouseJoint extends B2Joint implements IMouseJoint {\r\n    _touchPoint = new Vec2();\r\n    _isTouched = false;\r\n\r\n    setTarget (v: IVec2Like): void {\r\n        if (this._b2joint) {\r\n            tempB2Vec2.x = v.x / PHYSICS_2D_PTM_RATIO;\r\n            tempB2Vec2.y = v.y / PHYSICS_2D_PTM_RATIO;\r\n            (this._b2joint as B2.MouseJoint).SetTarget(tempB2Vec2);\r\n        }\r\n    }\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MouseJoint).SetFrequency(v);\r\n        }\r\n    }\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MouseJoint).SetDampingRatio(v);\r\n        }\r\n    }\r\n    setMaxForce (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MouseJoint).SetMaxForce(v);\r\n        }\r\n    }\r\n\r\n    override _createJointDef (): any {\r\n        const def = new B2.MouseJointDef();\r\n        const comp = this._jointComp as MouseJoint2D;\r\n        def.target = { x: this._touchPoint.x / PHYSICS_2D_PTM_RATIO, y: this._touchPoint.y / PHYSICS_2D_PTM_RATIO };\r\n        def.maxForce = comp.maxForce;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n\r\n    override start (): void {\r\n        // empty implementation to override its parent's start, so don't remove it.\r\n    }\r\n\r\n    override onEnable (): void {\r\n        this._enableTouch(true);\r\n    }\r\n\r\n    override onDisable (): void {\r\n        super.onDisable();\r\n        this._enableTouch(false);\r\n    }\r\n\r\n    private _enableTouch (v: boolean): void {\r\n        const canvas = find('Canvas');\r\n        if (canvas) {\r\n            const cb = v ? canvas.on : canvas.off;\r\n            cb.call(canvas, NodeEventType.TOUCH_START, this.onTouchBegan, this);\r\n            cb.call(canvas, NodeEventType.TOUCH_MOVE, this.onTouchMove, this);\r\n            cb.call(canvas, NodeEventType.TOUCH_END, this.onTouchEnd, this);\r\n            cb.call(canvas, NodeEventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n        }\r\n    }\r\n\r\n    onTouchBegan (event: Touch): void {\r\n        this._isTouched = true;\r\n\r\n        const target = this._touchPoint.set(event.getUILocation());\r\n\r\n        const world = (PhysicsSystem2D.instance.physicsWorld as B2PhysicsWorld);\r\n        const colliders = world.testPoint(target);\r\n        if (colliders.length <= 0) return;\r\n\r\n        const body = colliders[0].body;\r\n        body!.wakeUp();\r\n\r\n        const comp = this._jointComp as MouseJoint2D;\r\n        comp.connectedBody = body;\r\n\r\n        this._init();\r\n\r\n        this.setMaxForce(comp.maxForce * body!.getMass());\r\n        this.setTarget(target);\r\n    }\r\n\r\n    onTouchMove (event: Touch): void {\r\n        this._touchPoint = event.getUILocation();\r\n    }\r\n\r\n    onTouchEnd (event: Touch): void {\r\n        this.destroy();\r\n        this._isTouched = false;\r\n    }\r\n\r\n    update (): void {\r\n        if (!this._isTouched || !this.isValid()) {\r\n            return;\r\n        }\r\n\r\n        // let camera = cc.Camera.findCamera(this.node);\r\n        // if (camera) {\r\n        //     this.target = camera.getScreenToWorldPoint(this._touchPoint);\r\n        // }\r\n        // else {\r\n        this.setTarget(this._touchPoint);\r\n        // }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { IDistanceJoint } from '../../spec/i-physics-joint';\r\nimport { B2Joint } from './joint-2d';\r\nimport { DistanceJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\n\r\n/** @mangle */\r\nexport class B2DistanceJoint extends B2Joint implements IDistanceJoint {\r\n    setMaxLength (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.RopeJoint).SetMaxLength(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as DistanceJoint2D;\r\n        const def = new B2.RopeJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.maxLength = comp.maxLength / PHYSICS_2D_PTM_RATIO;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { ISpringJoint } from '../../spec/i-physics-joint';\r\nimport { B2Joint } from './joint-2d';\r\nimport { SpringJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\n\r\n/** @mangle */\r\nexport class B2SpringJoint extends B2Joint implements ISpringJoint {\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.DistanceJoint).SetFrequency(v);\r\n        }\r\n    }\r\n\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.DistanceJoint).SetDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    setDistance (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.DistanceJoint).SetLength(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as SpringJoint2D;\r\n        const def = new B2.DistanceJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.length = comp.distance / PHYSICS_2D_PTM_RATIO;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { IRelativeJoint } from '../../spec/i-physics-joint';\r\nimport { B2Joint } from './joint-2d';\r\nimport { RelativeJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { Vec2, toRadian } from '../../../core';\r\n\r\nconst tempB2Vec2 = { x: 0, y: 0 };//new b2.Vec2();\r\n\r\n/** @mangle */\r\nexport class B2RelativeJoint extends B2Joint implements IRelativeJoint {\r\n    setMaxForce (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MotorJoint).SetMaxForce(v);\r\n        }\r\n    }\r\n    setAngularOffset (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MotorJoint).SetAngularOffset(toRadian(v));\r\n        }\r\n    }\r\n    setLinearOffset (v: Vec2): void {\r\n        if (this._b2joint) {\r\n            tempB2Vec2.x = v.x / PHYSICS_2D_PTM_RATIO;\r\n            tempB2Vec2.y = v.y / PHYSICS_2D_PTM_RATIO;\r\n            (this._b2joint as B2.MotorJoint).SetLinearOffset(tempB2Vec2);\r\n        }\r\n    }\r\n    setCorrectionFactor (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MotorJoint).SetCorrectionFactor(v);\r\n        }\r\n    }\r\n    setMaxTorque (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.MotorJoint).SetMaxTorque(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as RelativeJoint2D;\r\n        const def = new B2.MotorJointDef();\r\n        def.linearOffset = { x: comp.linearOffset.x / PHYSICS_2D_PTM_RATIO, y: comp.linearOffset.y / PHYSICS_2D_PTM_RATIO };\r\n        def.angularOffset = toRadian(comp.angularOffset);\r\n        def.maxForce = comp.maxForce;\r\n        def.maxTorque = comp.maxTorque;\r\n        def.correctionFactor = comp.correctionFactor;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { ISliderJoint } from '../../spec/i-physics-joint';\r\nimport { B2Joint } from './joint-2d';\r\nimport { SliderJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian } from '../../../core';\r\n\r\n/** @mangle */\r\nexport class B2SliderJoint extends B2Joint implements ISliderJoint {\r\n    // limit\r\n    enableLimit (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.PrismaticJoint).EnableLimit(v);\r\n        }\r\n    }\r\n    setLowerLimit (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    setUpperLimit (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    updateLimits (): void {\r\n        if (this._b2joint) {\r\n            const comp = this._jointComp as SliderJoint2D;\r\n            (this._b2joint as B2.PrismaticJoint).SetLimits(comp.lowerLimit / PHYSICS_2D_PTM_RATIO, comp.upperLimit / PHYSICS_2D_PTM_RATIO);\r\n        }\r\n    }\r\n\r\n    // motor\r\n    enableMotor (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.PrismaticJoint).EnableMotor(v);\r\n        }\r\n    }\r\n    setMaxMotorForce (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.PrismaticJoint).SetMaxMotorForce(v);\r\n        }\r\n    }\r\n    setMotorSpeed (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.PrismaticJoint).SetMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as SliderJoint2D;\r\n        const def = new B2.PrismaticJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        const angle = toRadian(comp.angle);\r\n        def.localAxisA = { x: Math.cos(angle), y: Math.sin(angle) };\r\n        def.referenceAngle = 0;\r\n        def.enableLimit = comp.enableLimit;\r\n        def.lowerTranslation = comp.lowerLimit / PHYSICS_2D_PTM_RATIO;\r\n        def.upperTranslation = comp.upperLimit / PHYSICS_2D_PTM_RATIO;\r\n        def.enableMotor = comp.enableMotor;\r\n        def.maxMotorForce = comp.maxMotorForce;\r\n        def.motorSpeed = comp.motorSpeed;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { IFixedJoint } from '../../spec/i-physics-joint';\r\nimport { B2Joint } from './joint-2d';\r\nimport { FixedJoint2D } from '../../framework';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\n\r\n/** @mangle */\r\nexport class B2FixedJoint extends B2Joint implements IFixedJoint {\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WeldJoint).SetFrequency(v);\r\n        }\r\n    }\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WeldJoint).SetDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as FixedJoint2D;\r\n        const def = new B2.WeldJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.referenceAngle = 0;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { IWheelJoint } from '../../spec/i-physics-joint';\r\nimport { WheelJoint2D } from '../../framework';\r\nimport { B2Joint } from './joint-2d';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian } from '../../../core';\r\n\r\n/** @mangle */\r\nexport class B2WheelJoint extends B2Joint implements IWheelJoint {\r\n    setFrequency (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WheelJoint as any).SetSpringFrequencyHz(v);\r\n        }\r\n    }\r\n    setDampingRatio (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WheelJoint as any).SetSpringDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    // motor\r\n    enableMotor (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WheelJoint).EnableMotor(v);\r\n        }\r\n    }\r\n    setMaxMotorTorque (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WheelJoint).SetMaxMotorTorque(v);\r\n        }\r\n    }\r\n    setMotorSpeed (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.WheelJoint).SetMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as WheelJoint2D;\r\n        const def = new B2.WheelJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n        const angle = toRadian(comp.angle);\r\n        def.localAxisA = { x: Math.cos(angle), y: Math.sin(angle) };\r\n        def.maxMotorTorque = comp.maxMotorTorque;\r\n        def.motorSpeed = toRadian(comp.motorSpeed);\r\n        def.enableMotor = comp.enableMotor;\r\n        def.dampingRatio = comp.dampingRatio;\r\n        def.frequencyHz = comp.frequency;\r\n        return def;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { B2 } from '../instantiated';\r\nimport { IHingeJoint } from '../../spec/i-physics-joint';\r\nimport { HingeJoint2D } from '../../framework';\r\nimport { B2Joint } from './joint-2d';\r\nimport { PHYSICS_2D_PTM_RATIO } from '../../framework/physics-types';\r\nimport { toRadian } from '../../../core';\r\n\r\n/** @mangle */\r\nexport class B2HingeJoint extends B2Joint implements IHingeJoint {\r\n    enableLimit (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.RevoluteJoint).EnableLimit(v);\r\n        }\r\n    }\r\n    setLowerAngle (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    setUpperAngle (v: number): void {\r\n        this.updateLimits();\r\n    }\r\n    updateLimits (): void {\r\n        if (this._b2joint) {\r\n            const comp = this._jointComp as HingeJoint2D;\r\n            (this._b2joint as B2.RevoluteJoint).SetLimits(toRadian(comp.lowerAngle), toRadian(comp.upperAngle));\r\n        }\r\n    }\r\n\r\n    // motor\r\n    enableMotor (v: boolean): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.RevoluteJoint).EnableMotor(v);\r\n        }\r\n    }\r\n    setMaxMotorTorque (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.RevoluteJoint).SetMaxMotorTorque(v);\r\n        }\r\n    }\r\n    setMotorSpeed (v: number): void {\r\n        if (this._b2joint) {\r\n            (this._b2joint as B2.RevoluteJoint).SetMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    _createJointDef (): any {\r\n        const comp = this._jointComp as HingeJoint2D;\r\n        const def = new B2.RevoluteJointDef();\r\n        def.localAnchorA = { x: comp.anchor.x / PHYSICS_2D_PTM_RATIO, y: comp.anchor.y / PHYSICS_2D_PTM_RATIO };\r\n        def.localAnchorB = { x: comp.connectedAnchor.x / PHYSICS_2D_PTM_RATIO, y: comp.connectedAnchor.y / PHYSICS_2D_PTM_RATIO };\r\n\r\n        def.enableMotor = comp.enableMotor;\r\n        def.maxMotorTorque = comp.maxMotorTorque;\r\n        def.motorSpeed = toRadian(comp.motorSpeed);\r\n\r\n        def.enableLimit = comp.enableLimit;\r\n        def.lowerAngle = toRadian(comp.lowerAngle);\r\n        def.upperAngle = toRadian(comp.upperAngle);\r\n        return def;\r\n    }\r\n}\r\n"],"names":["Promise","resolve","B2","getImplPtr","wasmObject","$$","ptr","WASM_OBJECT_PTR_2_TS_OBJECT","Map","addImplPtrReference","Type","TSObject","implPtr","map","get","set","removeImplPtrReference","has","size","getTSObjectFromWASMObjectPtr","WASM_OBJECT_PTR_2_WASM_OBJECT","addImplPtrReferenceWASM","WASMObject","removeImplPtrReferenceWASM","b2Mul","T","v","out","x","q","c","s","y","p","game","onPostInfrastructureInitDelegate","add","ensureWasmModuleReady","then","sys","hasFeature","Feature","WASM","all","module","import","n","b","_ref","wasmFactory","wasmUrl","reject","errorMessage","err","instantiateWasm","importObject","receiveInstance","result","instance","Instance","log","_ref2","asmFactory","msg","error","PhysicsContactListener","BeginContact","contact","this","_BeginContact","EndContact","_EndContact","PreSolve","oldManifold","_PreSolve","PostSolve","impulse","_PostSolve","_class","callback","PhysicsAABBQueryCallback","init","point","_isPoint","_point","_fixtures","length","ReportFixture","fixture","FixtureTestPoint","push","getFixture","getFixtures","PhysicsRayCastCallback","type","mask","_type","_mask","_points","_normals","_fractions","normal","fraction","FixtureGetFilterData","categoryBits","ERaycast2DType","Closest","Vec2","Any","All","getPoints","getNormals","getFractions","pools","pointCache","worldmanifold","points","separations","ManifoldPoint","localPoint","normalImpulse","tangentImpulse","manifoldPointCache","manifold","localNormal","normalImpulses","tangentImpulses","PhysicsContact","colliderA","colliderB","disabled","disabledOnce","_impulsePtr","_inverted","_implPtr","_b2WorldmanifoldPtr","b2contact","pop","put","reset","_proto","prototype","_setImpulse","ab","ContactGetFixture","collider","WorldManifoldNew","setTangentSpeed","resetFriction","resetRestitution","WorldManifoldDelete","getWorldManifold","ContactGetWorldManifold","b2Manifold","ContactGetManifold","count","ManifoldGetPointCount","i","WorldManifoldGetPointValueX","PHYSICS_2D_PTM_RATIO","WorldManifoldGetPointValueY","WorldManifoldGetSeparationValue","WorldManifoldGetNormalValueX","WorldManifoldGetNormalValueY","getManifold","b2p","ManifoldGetManifoldPointPtr","ManifoldPointGetLocalPointX","ManifoldPointGetLocalPointY","ManifoldPointGetNormalImpulse","ManifoldPointGetTangentImpulse","ManifoldGetLocalPointValueX","ManifoldGetLocalPointValueY","ManifoldGetLocalNormalValueX","ManifoldGetLocalNormalValueY","ManifoldGetType","getImpulse","b2impulse","ContactImpulseGetCount","ContactImpulseGetNormalImpulse","ContactImpulseGetTangentImpulse","emit","contactType","_colliderA$body","_colliderB$body","hasListenerA","body","enabledContactListener","hasListenerB","PhysicsSystem2D","setEnabled","value","ContactSetEnabled","isTouching","ContactIsTouching","ContactSetTangentSpeed","getTangentSpeed","ContactGetTangentSpeed","setFriction","ContactSetFriction","getFriction","ContactGetFriction","ContactResetFriction","setRestitution","ContactSetRestitution","getRestitution","ContactGetRestitution","ContactResetRestitution","_tmp_vec2","_tmp_vec3","_tmp_color","Color","GREEN_COLOR","GREEN","RED_COLOR","RED","PhysicsDebugDraw","_DrawPolygon","vertices","vertexCount","drawer","_drawer","rawVertexBuffer","HEAPF32","subarray","_xf","moveTo","lineTo","close","DrawPolygon","color","_applyStrokeColor","stroke","DrawSolidPolygon","_applyFillColor","fill","_DrawCircle","center","radius","circle","DrawCircle","DrawSolidCircle","axis","DrawSegment","p1","p2","DrawTransform","xf","strokeColor","DrawPoint","DrawParticles","r","g","fillColor","PushTransform","PopTransform","_dxf","tempVec3","Vec3","tempVec2_1","tempVec2_2","testResults","B2PhysicsWorld","_world","_bodies","_animatedBodies","_rotationAxis","_physicsGroundBody","_contactListener","_aabbQueryCallback","_raycastQueryCallback","_temoBodyDef","_tempB2AABB","tempB2FixtureDefPtr","_debugGraphics","_b2DebugDrawer","_debugDrawFlags","World","CreateBody","BodyDef","_onBeginContact","_onEndContact","_onPreSolve","_onPostSolve","ContactListener","implement","SetContactListener","QueryCallback","RayCastCallback","AABB","FixtureDefNew","_checkDebugDrawValid","isValid","canvas","find","scene","director","getScene","Node","addComponent","Canvas","parent","node","hideFlags","CCObjectFlags","DontSave","worldPosition","ZERO","layer","Layers","Enum","UI_2D","lineWidth","debugDraw","Draw","SetDebugDraw","e","errorID","message","destroy","setSiblingIndex","children","SetFlags","debugDrawFlags","setGravity","SetGravity","setAllowSleep","SetAllowSleeping","step","deltaTime","velocityIterations","positionIterations","animatedBodies","l","animate","Step","raycast","equals","RayCast","fixtures","normals","fractions","results","shape","AllClosest","j","fixtureIndex","getFixtureIndex","syncPhysicsToScene","bodies","bodyComp","rigidBody","ERigidBody2DType","Animated","b2body","impl","pos","GetPosition","z","angle","toDegree","GetAngle","setWorldRotationFromEuler","resetVelocity","syncSceneToPhysics","addBody","includes","bodyDef","comp","allowSleep","gravityScale","linearDamping","angularDamping","fixedRotation","bullet","position","Quat","getAxisAngle","worldRotation","Math","PI","awake","awakeOnLoad","BodyType","b2_kinematicBody","_animatedPos","_animatedAngle","Dynamic","b2_dynamicBody","Static","b2_staticBody","Kinematic","compPrivate","linearVelocity","_linearVelocity","angularVelocity","_angularVelocity","b2Body","_imp","removeBody","DestroyBody","js","_updateBodyType","registerContactFixture","unregisterContactFixture","testPoint","d","lowerBound","upperBound","QueryAABB","testAABB","rect","xMin","yMin","xMax","yMax","drawDebug","clear","DebugDraw","Contact2DType","BEGIN_CONTACT","END_CONTACT","PRE_SOLVE","POST_SOLVE","_createClass","key","B2RigidBody2D","_body","_rigidBody","_inited","initialize","com","_callAfterStep","_init","onDestroy","_destroy","onEnable","setActive","onDisable","nodeTransformChanged","stepping","TransformBit","SCALE","colliders","getComponents","Collider2D","apply","POSITION","syncPositionToPhysics","ROTATION","syncRotationToPhysics","physicsWorld","_this$impl","_this$impl2","fixtureList","GetFixtureList","shapeTSObj","FixtureGetNext","jointListPtr","GetJointList","jointWASMPtr","JointEdgeGetJoint","jointTSObj","JointEdgeGetNext","dt","b2Pos","SetAwake","timeStep","SetLinearVelocity","b2Rotation","TWO_PI","HALF_PI","SetAngularVelocity","dirty","hasChangedFlags","enableAnimated","SetTransform","rot","euler","toEulerInYXZOrder","rotation","toRadian","setType","SetType","setLinearDamping","SetLinearDamping","setAngularDamping","SetAngularDamping","setGravityScale","SetGravityScale","setFixedRotation","SetFixedRotation","SetSleepingAllowed","isActive","IsEnabled","GetWorld","IsLocked","warn","SetEnabled","wakeUp","sleep","getMass","GetMass","setLinearVelocity","getLinearVelocity","velocity","GetLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","temp","GetLinearVelocityFromWorldPoint","setAngularVelocity","getAngularVelocity","GetAngularVelocity","getLocalVector","worldVector","GetLocalVector","getWorldVector","localVector","GetWorldVector","getLocalPoint","GetLocalPoint","getWorldPoint","GetWorldPoint","getLocalCenter","GetLocalCenter","getWorldCenter","GetWorldCenter","getInertia","GetInertia","applyForce","force","wake","ApplyForce","applyForceToCenter","ApplyForceToCenter","applyTorque","torque","ApplyTorque","applyLinearImpulse","ApplyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","ApplyAngularImpulse","IsAwake","tempFilter","maskBits","groupIndex","getFilter","group","PhysicsGroup","DEFAULT","collisionMatrix","B2Shape2D","_shapes","_collider","_rect","Rect","onLoad","start","onGroupChanged","filter","forEach","f","FixtureSetFilterData","enabledInHierarchy","indexOf","_createShapes","scale","worldScale","relativePosition","getComponent","RigidBody2D","groundBodyImpl","shapes","fixDef","FixtureDefSetAll","friction","restitution","density","sensor","BodyCreateFixture","BodyDestroyFixture","MAX","minX","minY","maxX","maxY","FixtureGetShape","ShapeGetChildCount","aabb","FixtureGetAABB","ShapeGetType","skinWidth","ShapeGetRadius","width","height","tempAabb","B2BoxShape","_B2Shape2D","_this","_len","arguments","args","Array","_key","call","concat","_worldPoints","_inheritsLoose","scaleX","scaleY","relativePositionX","relativePositionY","abs","offsetX","offset","offsetY","PolygonShapeNew","PolygonShapeSetAsBoxWithCenterAndAngle","wps","wp0","wp1","wp2","wp3","transformMat4ToPoints","worldMatrix","B2CircleShape","_worldPosition","CircleShapeNew","ShapeSetRadius","CircleShapeSetPosition","CircleShapeGetRadius","CircleShapeGetPosition","B2PolygonShape","polys","PolygonPartition","name","poly","Vec2VectorNew","firstVertice","Vec2VectorPush","Vec2VectorSize","maxPolygonVertices","PolygonShapeSet","Vec2VectorGetPtr","Vec2VectorGet","Vec2VectorResize","Vec2VectorDelete","worldPoints","m","transformMat4","B2Joint","_b2joint","_jointComp","def","_createJointDef","SetBodyA","connectedBody","SetBodyB","collideConnected","CreateJoint","DestroyJoint","tempB2Vec2","B2MouseJoint","_B2Joint","_touchPoint","_isTouched","setTarget","SetTarget","setFrequency","SetFrequency","setDampingRatio","SetDampingRatio","setMaxForce","SetMaxForce","MouseJointDef","target","maxForce","dampingRatio","frequencyHz","frequency","_enableTouch","cb","on","off","NodeEventType","TOUCH_START","onTouchBegan","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","event","getUILocation","update","B2DistanceJoint","setMaxLength","SetMaxLength","RopeJointDef","localAnchorA","anchor","localAnchorB","connectedAnchor","maxLength","B2SpringJoint","setDistance","SetLength","DistanceJointDef","distance","B2RelativeJoint","setAngularOffset","SetAngularOffset","setLinearOffset","SetLinearOffset","setCorrectionFactor","SetCorrectionFactor","setMaxTorque","SetMaxTorque","MotorJointDef","linearOffset","angularOffset","maxTorque","correctionFactor","B2SliderJoint","enableLimit","EnableLimit","setLowerLimit","updateLimits","setUpperLimit","SetLimits","lowerLimit","upperLimit","enableMotor","EnableMotor","setMaxMotorForce","SetMaxMotorForce","setMotorSpeed","SetMotorSpeed","PrismaticJointDef","localAxisA","cos","sin","referenceAngle","lowerTranslation","upperTranslation","maxMotorForce","motorSpeed","B2FixedJoint","WeldJointDef","B2WheelJoint","SetSpringFrequencyHz","SetSpringDampingRatio","setMaxMotorTorque","SetMaxMotorTorque","WheelJointDef","maxMotorTorque","B2HingeJoint","setLowerAngle","setUpperAngle","lowerAngle","upperAngle","RevoluteJointDef","once","Game","EVENT_PRE_SUBSYSTEM_INIT","selector","register","PhysicsWorld","RigidBody","BoxShape","CircleShape","PolygonShape","MouseJoint","DistanceJoint","SpringJoint","RelativeJoint","SliderJoint","FixedJoint","WheelJoint","HingeJoint"],"mappings":"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"}