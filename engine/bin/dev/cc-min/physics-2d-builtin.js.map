{"version":3,"file":"physics-2d-builtin.js","sources":["../../../cocos/physics-2d/builtin/shapes/shape-2d.ts","../../../cocos/physics-2d/builtin/shapes/box-shape-2d.ts","../../../cocos/physics-2d/builtin/shapes/circle-shape-2d.ts","../../../cocos/physics-2d/builtin/shapes/polygon-shape-2d.ts","../../../cocos/physics-2d/builtin/builtin-contact.ts","../../../cocos/physics-2d/builtin/builtin-world.ts","../../../cocos/physics-2d/builtin/instantiate.ts"],"sourcesContent":["/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IBaseShape } from '../../spec/i-physics-shape';\r\nimport { Collider2D, PhysicsSystem2D } from '../../../../exports/physics-2d-framework';\r\nimport { Rect, Vec2 } from '../../../core';\r\nimport { BuiltinPhysicsWorld } from '../builtin-world';\r\nimport { BuiltinContact } from '../builtin-contact';\r\n\r\n/** @mangle */\r\nexport class BuiltinShape2D implements IBaseShape {\r\n    protected _collider: Collider2D | null = null;\r\n\r\n    protected _worldAabb = new Rect();\r\n    //contacts contain this Shape\r\n    public _contacts: BuiltinContact[] = [];\r\n\r\n    get impl (): null {\r\n        return null;\r\n    }\r\n\r\n    get collider (): Collider2D {\r\n        return this._collider!;\r\n    }\r\n\r\n    apply (): void {\r\n\r\n    }\r\n\r\n    initialize (comp: Collider2D): void {\r\n        this._collider = comp;\r\n    }\r\n\r\n    onLoad (): void {\r\n    }\r\n\r\n    onEnable (): void {\r\n        (PhysicsSystem2D.instance.physicsWorld as BuiltinPhysicsWorld).addShape(this);\r\n    }\r\n\r\n    onDisable (): void {\r\n        (PhysicsSystem2D.instance.physicsWorld as BuiltinPhysicsWorld).removeShape(this);\r\n    }\r\n\r\n    start (): void {\r\n    }\r\n\r\n    update (): void {\r\n    }\r\n\r\n    get worldAABB (): Readonly<Rect> {\r\n        return this._worldAabb;\r\n    }\r\n\r\n    containsPoint (p: Vec2): boolean {\r\n        if (!this.worldAABB.contains(p)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    intersectsRect (rect: Rect): boolean {\r\n        if (!this.worldAABB.intersects(rect)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onGroupChanged (): void {\r\n        (PhysicsSystem2D.instance.physicsWorld as BuiltinPhysicsWorld).updateShapeGroup(this);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BuiltinShape2D } from './shape-2d';\r\nimport { Vec2, Rect } from '../../../core';\r\nimport { BoxCollider2D } from '../../framework';\r\nimport Intersection2D from '../intersection-2d';\r\n\r\n/** @mangle */\r\nexport class BuiltinBoxShape extends BuiltinShape2D {\r\n    private _worldPoints = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];\r\n    get worldPoints (): Readonly<Vec2[]> {\r\n        return this._worldPoints;\r\n    }\r\n\r\n    update (): void {\r\n        const aabb = this._worldAabb;\r\n\r\n        const collider = this.collider as BoxCollider2D;\r\n        const size = collider.size;\r\n        const offset = collider.offset;\r\n\r\n        aabb.x = offset.x - size.width / 2;\r\n        aabb.y = offset.y - size.height / 2;\r\n        aabb.width = size.width;\r\n        aabb.height = size.height;\r\n\r\n        const wps = this._worldPoints;\r\n        const wp0 = wps[0]; const wp1 = wps[1];\r\n        const wp2 = wps[2]; const wp3 = wps[3];\r\n\r\n        aabb.transformMat4ToPoints(collider.node.worldMatrix, wp0, wp1, wp2, wp3);\r\n\r\n        const minx = Math.min(wp0.x, wp1.x, wp2.x, wp3.x);\r\n        const miny = Math.min(wp0.y, wp1.y, wp2.y, wp3.y);\r\n        const maxx = Math.max(wp0.x, wp1.x, wp2.x, wp3.x);\r\n        const maxy = Math.max(wp0.y, wp1.y, wp2.y, wp3.y);\r\n\r\n        aabb.x = minx;\r\n        aabb.y = miny;\r\n        aabb.width = maxx - minx;\r\n        aabb.height = maxy - miny;\r\n    }\r\n\r\n    containsPoint (p: Vec2): boolean {\r\n        if (!this.worldAABB.contains(p)) {\r\n            return false;\r\n        }\r\n        return Intersection2D.pointInPolygon(p, this.worldPoints);\r\n    }\r\n    intersectsRect (rect: Rect): boolean {\r\n        if (!this.worldAABB.intersects(rect)) {\r\n            return false;\r\n        }\r\n        return Intersection2D.rectPolygon(rect, this.worldPoints);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BuiltinShape2D } from './shape-2d';\r\nimport { Vec2, Mat4, Rect } from '../../../core';\r\nimport { CircleCollider2D } from '../../framework';\r\nimport Intersection2D from '../intersection-2d';\r\n\r\nconst tempVec2 = new Vec2();\r\nconst tempMat4 = new Mat4();\r\n\r\n/** @mangle */\r\nexport class BuiltinCircleShape extends BuiltinShape2D {\r\n    private _worldPosition = new Vec2();\r\n    get worldPosition (): Readonly<Vec2> {\r\n        return this._worldPosition;\r\n    }\r\n\r\n    private _worldRadius = 0;\r\n    get worldRadius (): number {\r\n        return this._worldRadius;\r\n    }\r\n\r\n    update (): void {\r\n        const aabb = this._worldAabb;\r\n\r\n        const collider = this.collider as CircleCollider2D;\r\n        const worldMatrix = collider.node.getWorldMatrix(tempMat4);\r\n\r\n        // calculate world position\r\n        Vec2.transformMat4(tempVec2, collider.offset, worldMatrix);\r\n\r\n        const worldPos = this._worldPosition;\r\n        worldPos.x = tempVec2.x;\r\n        worldPos.y = tempVec2.y;\r\n\r\n        // calculate world radius\r\n        worldMatrix.m12 = worldMatrix.m13 = 0;\r\n\r\n        tempVec2.x = collider.radius;\r\n        tempVec2.y = 0;\r\n\r\n        Vec2.transformMat4(tempVec2, tempVec2, worldMatrix);\r\n        const d = this._worldRadius = tempVec2.length();\r\n\r\n        aabb.x = worldPos.x - d;\r\n        aabb.y = worldPos.y - d;\r\n        aabb.width = d * 2;\r\n        aabb.height = d * 2;\r\n    }\r\n\r\n    containsPoint (p: Vec2): boolean {\r\n        if (!this.worldAABB.contains(p)) {\r\n            return false;\r\n        }\r\n        const dist = Vec2.subtract(tempVec2, p, this.worldPosition).length();\r\n        return dist < this.worldRadius;\r\n    }\r\n    intersectsRect (rect: Rect): boolean {\r\n        if (!this.worldAABB.intersects(rect)) {\r\n            return false;\r\n        }\r\n        return Intersection2D.rectCircle(rect, this.worldPosition, this.worldRadius);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BuiltinShape2D } from './shape-2d';\r\nimport { Vec2, Rect } from '../../../core';\r\nimport { PolygonCollider2D } from '../../framework';\r\nimport Intersection2D from '../intersection-2d';\r\n\r\nconst tempVec2 = new Vec2();\r\n\r\n/** @mangle */\r\nexport class BuiltinPolygonShape extends BuiltinShape2D {\r\n    private _worldPoints: Vec2[] = [];\r\n    get worldPoints (): Readonly<Vec2[]> {\r\n        return this._worldPoints;\r\n    }\r\n\r\n    update (): void {\r\n        const aabb = this._worldAabb;\r\n\r\n        const collider = this.collider as PolygonCollider2D;\r\n        const points = collider.points;\r\n        const offset = collider.offset;\r\n        const worldMatrix = collider.node.worldMatrix;\r\n\r\n        const worldPoints = this._worldPoints;\r\n\r\n        worldPoints.length = points.length;\r\n\r\n        let minx = 1e6; let miny = 1e6; let maxx = -1e6; let maxy = -1e6;\r\n        for (let i = 0, l = points.length; i < l; i++) {\r\n            if (!worldPoints[i]) {\r\n                worldPoints[i] = new Vec2();\r\n            }\r\n\r\n            tempVec2.x = points[i].x + offset.x;\r\n            tempVec2.y = points[i].y + offset.y;\r\n\r\n            Vec2.transformMat4(tempVec2, tempVec2, worldMatrix);\r\n\r\n            const x = tempVec2.x;\r\n            const y = tempVec2.y;\r\n\r\n            worldPoints[i].x = x;\r\n            worldPoints[i].y = y;\r\n\r\n            if (x > maxx) maxx = x;\r\n            if (x < minx) minx = x;\r\n            if (y > maxy) maxy = y;\r\n            if (y < miny) miny = y;\r\n        }\r\n\r\n        aabb.x = minx;\r\n        aabb.y = miny;\r\n        aabb.width = maxx - minx;\r\n        aabb.height = maxy - miny;\r\n    }\r\n\r\n    containsPoint (p: Vec2): boolean {\r\n        if (!this.worldAABB.contains(p)) {\r\n            return false;\r\n        }\r\n        return Intersection2D.pointInPolygon(p, this.worldPoints);\r\n    }\r\n    intersectsRect (rect: Rect): boolean {\r\n        if (!this.worldAABB.intersects(rect)) {\r\n            return false;\r\n        }\r\n        return Intersection2D.rectPolygon(rect, this.worldPoints);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BuiltinShape2D } from './shapes/shape-2d';\r\nimport Intersection2D from './intersection-2d';\r\nimport { BuiltinBoxShape } from './shapes/box-shape-2d';\r\nimport { BuiltinPolygonShape } from './shapes/polygon-shape-2d';\r\nimport { BuiltinCircleShape } from './shapes/circle-shape-2d';\r\nimport { error } from '../../core';\r\nimport { Contact2DType } from '../framework';\r\n\r\n/** @mangle */\r\nexport class BuiltinContact {\r\n    shape1?: BuiltinShape2D;\r\n    shape2?: BuiltinShape2D;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    testFunc?: Function;\r\n    touching = false;\r\n\r\n    type: string = Contact2DType.None;\r\n\r\n    constructor (shape1, shape2) {\r\n        this.shape1 = shape1;\r\n        this.shape2 = shape2;\r\n\r\n        this.touching = false;\r\n\r\n        const isShape1Polygon = (shape1 instanceof BuiltinBoxShape) || (shape1 instanceof BuiltinPolygonShape);\r\n        const isShape2Polygon = (shape2 instanceof BuiltinBoxShape) || (shape2 instanceof BuiltinPolygonShape);\r\n        const isShape1Circle = shape1 instanceof BuiltinCircleShape;\r\n        const isShape2Circle = shape2 instanceof BuiltinCircleShape;\r\n\r\n        if (isShape1Polygon && isShape2Polygon) {\r\n            this.testFunc = Intersection2D.polygonPolygon;\r\n        } else if (isShape1Circle && isShape2Circle) {\r\n            this.testFunc = Intersection2D.circleCircle;\r\n        } else if (isShape1Polygon && isShape2Circle) {\r\n            this.testFunc = Intersection2D.polygonCircle;\r\n        } else if (isShape1Circle && isShape2Polygon) {\r\n            this.testFunc = Intersection2D.polygonCircle;\r\n            this.shape1 = shape2;\r\n            this.shape2 = shape1;\r\n        } else {\r\n            error(`Can not find contact for builtin shape: ${shape1.constructor.name}, ${shape2.constructor.name}`);\r\n        }\r\n    }\r\n\r\n    test (): boolean {\r\n        const s1 = this.shape1!;\r\n        const s2 = this.shape2!;\r\n\r\n        if (!s1.worldAABB.intersects(s2.worldAABB)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.testFunc === Intersection2D.polygonPolygon) {\r\n            return Intersection2D.polygonPolygon((s1 as BuiltinPolygonShape).worldPoints, (s2 as BuiltinPolygonShape).worldPoints);\r\n        } else if (this.testFunc === Intersection2D.circleCircle) {\r\n            return Intersection2D.circleCircle(\r\n                (s1 as BuiltinCircleShape).worldPosition,\r\n                (s1 as BuiltinCircleShape).worldRadius,\r\n                (s2 as BuiltinCircleShape).worldPosition,\r\n                (s2 as BuiltinCircleShape).worldRadius,\r\n            );\r\n        } else if (this.testFunc === Intersection2D.polygonCircle) {\r\n            return Intersection2D.polygonCircle(\r\n                (s1 as BuiltinPolygonShape).worldPoints,\r\n                (s2 as BuiltinCircleShape).worldPosition,\r\n                (s2 as BuiltinCircleShape).worldRadius,\r\n            );\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    updateState (): string {\r\n        const result = this.test();\r\n\r\n        let type = Contact2DType.None;\r\n        if (result && !this.touching) {\r\n            this.touching = true;\r\n            type = Contact2DType.BEGIN_CONTACT;\r\n        } else if (!result && this.touching) {\r\n            this.touching = false;\r\n            type = Contact2DType.END_CONTACT;\r\n        }\r\n\r\n        this.type = type;\r\n        return type;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW, TEST } from 'internal:constants';\r\nimport { IPhysicsWorld } from '../spec/i-physics-world';\r\nimport { CCObjectFlags, Vec3, Color, IVec2Like, Vec2, Rect, js, errorID } from '../../core';\r\nimport { BuiltinShape2D } from './shapes/shape-2d';\r\nimport { BuiltinBoxShape } from './shapes/box-shape-2d';\r\nimport { BuiltinCircleShape } from './shapes/circle-shape-2d';\r\nimport { BuiltinPolygonShape } from './shapes/polygon-shape-2d';\r\nimport { EPhysics2DDrawFlags, Contact2DType, ERaycast2DType, RaycastResult2D } from '../framework/physics-types';\r\nimport { PhysicsSystem2D, Collider2D } from '../framework';\r\nimport { BuiltinContact } from './builtin-contact';\r\nimport { Node, find } from '../../scene-graph';\r\nimport { director } from '../../game';\r\nimport type { Graphics } from '../../2d/components/graphics';\r\n\r\nconst contactResults: BuiltinContact[] = [];\r\nconst testIntersectResults: Collider2D[] = [];\r\n\r\n/** @mangle */\r\nexport class BuiltinPhysicsWorld implements IPhysicsWorld {\r\n    private _contacts: BuiltinContact[] = [];\r\n    private _shapes: BuiltinShape2D[] = [];\r\n    private _debugGraphics: Graphics | null = null;\r\n    private _debugDrawFlags = 0;\r\n\r\n    get debugDrawFlags (): number {\r\n        return this._debugDrawFlags;\r\n    }\r\n    set debugDrawFlags (v) {\r\n        this._debugDrawFlags = v;\r\n    }\r\n\r\n    shouldCollide (c1: BuiltinShape2D, c2: BuiltinShape2D): number | boolean {\r\n        const collider1 = c1.collider; const collider2 = c2.collider;\r\n        const collisionMatrix = PhysicsSystem2D.instance.collisionMatrix;\r\n        return (collider1 !== collider2)\r\n            && (collider1.node !== collider2.node)\r\n            && (collisionMatrix[collider1.group] & collider2.group)\r\n            && (collisionMatrix[collider2.group] & collider1.group);\r\n    }\r\n\r\n    addShape (shape: BuiltinShape2D): void {\r\n        const shapes = this._shapes;\r\n        const index = shapes.indexOf(shape);\r\n        if (index === -1) {\r\n            for (let i = 0, l = shapes.length; i < l; i++) {\r\n                const other = shapes[i];\r\n                if (this.shouldCollide(shape, other)) {\r\n                    const contact = new BuiltinContact(shape, other);\r\n                    this._contacts.push(contact);\r\n                    if (shape._contacts.indexOf(contact) === -1) { shape._contacts.push(contact); }\r\n                    if (other._contacts.indexOf(contact) === -1) { other._contacts.push(contact); }\r\n                }\r\n            }\r\n\r\n            shapes.push(shape);\r\n        }\r\n    }\r\n\r\n    removeShape (shape: BuiltinShape2D): void {\r\n        const shapes = this._shapes;\r\n        const index = shapes.indexOf(shape);\r\n        if (index >= 0) {\r\n            js.array.fastRemoveAt(shapes, index);\r\n            const contacts = this._contacts;\r\n            for (let i = contacts.length - 1; i >= 0; i--) {\r\n                const contact = contacts[i];\r\n                if (contact.shape1 === shape || contact.shape2 === shape) {\r\n                    if (contact.touching) {\r\n                        this._emitCollide(contact, Contact2DType.END_CONTACT);\r\n                    }\r\n\r\n                    js.array.fastRemoveAt(contacts, i);\r\n\r\n                    const other = contact.shape1 === shape ? contact.shape2 : contact.shape1;\r\n                    const contactIndex = other!._contacts.indexOf(contact);\r\n                    if (contactIndex >= 0) {\r\n                        js.array.fastRemoveAt(other!._contacts, contactIndex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        shape._contacts.length = 0;\r\n    }\r\n\r\n    updateShapeGroup (shape: BuiltinShape2D): void {\r\n        this.removeShape(shape);\r\n        if (shape.collider.enabledInHierarchy) {\r\n            this.addShape(shape);\r\n        }\r\n    }\r\n\r\n    step (deltaTime: number, velocityIterations = 10, positionIterations = 10): void {\r\n        // update collider\r\n        const shapes = this._shapes;\r\n        for (let i = 0, l = shapes.length; i < l; i++) {\r\n            shapes[i].update();\r\n        }\r\n\r\n        // do collide\r\n        const contacts = this._contacts;\r\n        contactResults.length = 0;\r\n\r\n        for (let i = 0, l = contacts.length; i < l; i++) {\r\n            const collisionType = contacts[i].updateState();\r\n            if (collisionType === Contact2DType.None) {\r\n                continue;\r\n            }\r\n\r\n            contactResults.push(contacts[i]);\r\n        }\r\n\r\n        // handle collide results, emit message\r\n        for (let i = 0, l = contactResults.length; i < l; i++) {\r\n            const result = contactResults[i];\r\n            this._emitCollide(result);\r\n        }\r\n    }\r\n\r\n    drawDebug (): void {\r\n        if (TEST) return;\r\n\r\n        if (!this._debugDrawFlags) {\r\n            return;\r\n        }\r\n\r\n        this._checkDebugDrawValid();\r\n\r\n        const debugDrawer = this._debugGraphics;\r\n        if (!debugDrawer) {\r\n            return;\r\n        }\r\n        debugDrawer.clear();\r\n        debugDrawer.lineWidth = 3;\r\n\r\n        const shapes = this._shapes;\r\n\r\n        for (let i = 0, l = shapes.length; i < l; i++) {\r\n            const shape = shapes[i];\r\n\r\n            debugDrawer.strokeColor = Color.WHITE;\r\n            if (shape instanceof BuiltinBoxShape || shape instanceof BuiltinPolygonShape) {\r\n                const ps = shape.worldPoints;\r\n                if (ps.length > 0) {\r\n                    debugDrawer.moveTo(ps[0].x, ps[0].y);\r\n                    for (let j = 1; j < ps.length; j++) {\r\n                        debugDrawer.lineTo(ps[j].x, ps[j].y);\r\n                    }\r\n                    debugDrawer.close();\r\n                    debugDrawer.stroke();\r\n                }\r\n            } else if (shape instanceof BuiltinCircleShape) {\r\n                debugDrawer.circle(shape.worldPosition.x, shape.worldPosition.y, shape.worldRadius);\r\n                debugDrawer.stroke();\r\n            }\r\n\r\n            if (this._debugDrawFlags & EPhysics2DDrawFlags.Aabb) {\r\n                const aabb = shape.worldAABB;\r\n\r\n                debugDrawer.strokeColor = Color.BLUE;\r\n\r\n                debugDrawer.moveTo(aabb.xMin, aabb.yMin);\r\n                debugDrawer.lineTo(aabb.xMin, aabb.yMax);\r\n                debugDrawer.lineTo(aabb.xMax, aabb.yMax);\r\n                debugDrawer.lineTo(aabb.xMax, aabb.yMin);\r\n\r\n                debugDrawer.close();\r\n                debugDrawer.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emitCollide (contact: BuiltinContact, collisionType?: string): void {\r\n        collisionType = collisionType || contact.type;\r\n\r\n        const c1 = contact.shape1!.collider;\r\n        const c2 = contact.shape2!.collider;\r\n\r\n        PhysicsSystem2D.instance.emit(collisionType, c1, c2);\r\n        c1.emit(collisionType, c1, c2);\r\n        c2.emit(collisionType, c2, c1);\r\n    }\r\n\r\n    private _checkDebugDrawValid (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) return;\r\n        if (!this._debugGraphics || !this._debugGraphics.isValid) {\r\n            let canvas = find('Canvas');\r\n            if (!canvas) {\r\n                const scene = director.getScene();\r\n                if (!scene) {\r\n                    return;\r\n                }\r\n                canvas = new Node('Canvas');\r\n                canvas.addComponent('cc.Canvas');\r\n                canvas.parent = scene;\r\n            }\r\n\r\n            let node: Node | null = new Node('PHYSICS_2D_DEBUG_DRAW');\r\n            // node.zIndex = cc.macro.MAX_ZINDEX;\r\n            node.hideFlags |= CCObjectFlags.DontSave;\r\n            node.parent = canvas;\r\n            node.worldPosition = Vec3.ZERO;\r\n\r\n            try {\r\n                this._debugGraphics = node.addComponent('cc.Graphics') as Graphics;\r\n                this._debugGraphics.lineWidth = 2;\r\n            } catch (e: any) {\r\n                errorID(4501, e.message as string);\r\n                node.destroy();\r\n                node = null;\r\n            }\r\n        }\r\n\r\n        if (this._debugGraphics) {\r\n            const parent = this._debugGraphics.node.parent!;\r\n            this._debugGraphics.node.setSiblingIndex(parent.children.length - 1);\r\n        }\r\n    }\r\n\r\n    testPoint (p: Vec2): readonly Collider2D[] {\r\n        const shapes = this._shapes;\r\n        testIntersectResults.length = 0;\r\n        for (let i = 0; i < shapes.length; i++) {\r\n            const shape = shapes[i];\r\n            if (!shape.containsPoint(p)) {\r\n                continue;\r\n            }\r\n            testIntersectResults.push(shape.collider);\r\n        }\r\n        return testIntersectResults;\r\n    }\r\n\r\n    testAABB (rect: Rect): readonly Collider2D[] {\r\n        const shapes = this._shapes;\r\n        testIntersectResults.length = 0;\r\n        for (let i = 0; i < shapes.length; i++) {\r\n            const shape = shapes[i];\r\n            if (!shape.intersectsRect(rect)) {\r\n                continue;\r\n            }\r\n            testIntersectResults.push(shape.collider);\r\n        }\r\n        return testIntersectResults;\r\n    }\r\n\r\n    // empty implements\r\n    impl (): any {\r\n        return null;\r\n    }\r\n    setGravity (): void {\r\n        //empty\r\n    }\r\n    setAllowSleep (): void {\r\n        //empty\r\n    }\r\n    syncPhysicsToScene (): void {\r\n        //empty\r\n    }\r\n    syncSceneToPhysics (): void {\r\n        //empty\r\n    }\r\n    raycast (p1: IVec2Like, p2: IVec2Like, type: ERaycast2DType): RaycastResult2D[] {\r\n        return [];\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { selector } from '../framework/physics-selector';\r\nimport { BuiltinPhysicsWorld } from './builtin-world';\r\nimport { BuiltinBoxShape } from './shapes/box-shape-2d';\r\nimport { BuiltinCircleShape } from './shapes/circle-shape-2d';\r\nimport { BuiltinPolygonShape } from './shapes/polygon-shape-2d';\r\n\r\nimport { Game, game } from '../../game';\r\n\r\ngame.once(Game.EVENT_PRE_SUBSYSTEM_INIT, () => {\r\n    selector.register('builtin', {\r\n        PhysicsWorld: BuiltinPhysicsWorld,\r\n        RigidBody: null,\r\n\r\n        BoxShape: BuiltinBoxShape,\r\n        CircleShape: BuiltinCircleShape,\r\n        PolygonShape: BuiltinPolygonShape,\r\n\r\n        MouseJoint: null,\r\n        DistanceJoint: null,\r\n        SpringJoint: null,\r\n        RelativeJoint: null,\r\n        SliderJoint: null,\r\n        FixedJoint: null,\r\n        WheelJoint: null,\r\n        HingeJoint: null,\r\n    });\r\n});\r\n"],"names":["BuiltinShape2D","this","_collider","_worldAabb","Rect","_contacts","_proto","prototype","apply","initialize","comp","onLoad","onEnable","PhysicsSystem2D","instance","physicsWorld","addShape","onDisable","removeShape","start","update","containsPoint","p","worldAABB","contains","intersectsRect","rect","intersects","onGroupChanged","updateShapeGroup","_createClass","key","get","BuiltinBoxShape","_BuiltinShape2D","_this","_len","arguments","length","args","Array","_key","call","concat","_worldPoints","Vec2","_inheritsLoose","aabb","collider","size","offset","x","width","y","height","wps","wp0","wp1","wp2","wp3","transformMat4ToPoints","node","worldMatrix","minx","Math","min","miny","maxx","max","maxy","Intersection2D","pointInPolygon","worldPoints","rectPolygon","tempVec2","tempMat4","Mat4","BuiltinCircleShape","_worldPosition","_worldRadius","getWorldMatrix","transformMat4","worldPos","m12","m13","radius","d","subtract","worldPosition","worldRadius","rectCircle","BuiltinPolygonShape","points","i","l","BuiltinContact","shape1","shape2","testFunc","touching","type","Contact2DType","None","isShape1Polygon","isShape2Polygon","isShape1Circle","isShape2Circle","polygonPolygon","circleCircle","polygonCircle","error","constructor","name","test","s1","s2","updateState","result","BEGIN_CONTACT","END_CONTACT","contactResults","testIntersectResults","BuiltinPhysicsWorld","_shapes","_debugGraphics","_debugDrawFlags","shouldCollide","c1","c2","collider1","collider2","collisionMatrix","group","shape","shapes","indexOf","other","contact","push","index","js","contacts","_emitCollide","contactIndex","enabledInHierarchy","step","drawDebug","_checkDebugDrawValid","debugDrawer","clear","lineWidth","strokeColor","Color","WHITE","ps","moveTo","j","lineTo","close","stroke","circle","EPhysics2DDrawFlags","Aabb","BLUE","xMin","yMin","yMax","xMax","collisionType","emit","isValid","canvas","find","scene","director","getScene","Node","addComponent","parent","hideFlags","CCObjectFlags","DontSave","Vec3","ZERO","e","errorID","message","destroy","setSiblingIndex","children","testPoint","testAABB","impl","setGravity","setAllowSleep","syncPhysicsToScene","syncSceneToPhysics","raycast","set","v","game","once","Game","EVENT_PRE_SUBSYSTEM_INIT","selector","register","PhysicsWorld","RigidBody","BoxShape","CircleShape","PolygonShape","MouseJoint","DistanceJoint","SpringJoint","RelativeJoint","SliderJoint","FixedJoint","WheelJoint","HingeJoint"],"mappings":"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"}