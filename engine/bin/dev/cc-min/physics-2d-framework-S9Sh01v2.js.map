{"version":3,"file":"physics-2d-framework-S9Sh01v2.js","sources":["../../../cocos/physics-2d/framework/utils/polygon-separator.ts","../../../cocos/physics-2d/framework/utils/polygon-partition.ts","../../../cocos/physics-2d/framework/physics-types.ts","../../../cocos/physics-2d/framework/physics-selector.ts","../../../cocos/physics-2d/framework/physics-system.ts","../../../cocos/physics-2d/spec/i-physics-contact.ts","../../../cocos/physics-2d/framework/components/rigid-body-2d.ts","../../../cocos/physics-2d/framework/components/colliders/collider-2d.ts","../../../cocos/physics-2d/framework/components/joints/joint-2d.ts","../../../cocos/physics-2d/framework/components/colliders/box-collider-2d.ts","../../../cocos/physics-2d/framework/components/colliders/circle-collider-2d.ts","../../../cocos/physics-2d/framework/components/colliders/polygon-collider-2d.ts","../../../cocos/physics-2d/framework/components/joints/relative-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/distance-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/spring-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/mouse-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/slider-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/fixed-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/wheel-joint-2d.ts","../../../cocos/physics-2d/framework/components/joints/hinge-joint-2d.ts","../../../cocos/physics-2d/framework/index.ts"],"sourcesContent":["/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec2Like, Vec2 } from '../../../core';\r\n\r\n// http://answers.unity3d.com/questions/977416/2d-polygon-convex-decomposition-code.html\r\n\r\n/// <summary>\r\n/// This class is took from the \"FarseerUnity\" physics engine, which uses Mark Bayazit's decomposition algorithm.\r\n/// I also have to make it work with self-intersecting polygons, so I'll use another different algorithm to decompose a self-intersecting polygon into several simple polygons,\r\n/// and then I would decompose each of them into convex polygons.\r\n/// </summary>\r\n\r\n// From phed rev 36\r\n\r\n/// <summary>\r\n/// Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)\r\n/// For more information about this algorithm, see http://mnbayazit.com/406/bayazit\r\n/// </summary>\r\n\r\nfunction At (i: number, vertices: IVec2Like[]): IVec2Like {\r\n    const s = vertices.length;\r\n    return vertices[i < 0 ? s - (-i % s) : i % s];\r\n}\r\n\r\nfunction Copy (i: number, j: number, vertices: IVec2Like[]): IVec2Like[] {\r\n    const p: IVec2Like[] = [];\r\n    while (j < i) j += vertices.length;\r\n    // p.reserve(j - i + 1);\r\n    for (; i <= j; ++i) {\r\n        p.push(At(i, vertices));\r\n    }\r\n    return p;\r\n}\r\n\r\n/**\r\n* @en\r\n* Decompose the polygon into several smaller non-concave polygon.\r\n* If the polygon is already convex, it will return the original polygon, unless it is over Settings.MaxPolygonVertices.\r\n* Precondition: Counter Clockwise polygon\r\n* @zh\r\n* 使用Mark Bayazit算法将输入多边形拆分成多个凸多边形。如果输入多边形是凸多边形，将返回原多边形。要求输入多边形是逆时针的。\r\n* @param polygon @en one polygon. @zh 一个多边形。\r\n* @return @en polygon array. @zh 多边形数组。\r\n*/\r\nexport function ConvexPartition (vertices: IVec2Like[]): IVec2Like[][] {\r\n    // We force it to CCW as it is a precondition in this algorithm.\r\n    ForceCounterClockWise(vertices);\r\n\r\n    let list: IVec2Like[][] = [];\r\n    let d: number = 0;\r\n    let lowerDist: number = 0;\r\n    let upperDist: number = 0;\r\n    let p: Vec2;\r\n    let lowerInt = new Vec2();\r\n    let upperInt = new Vec2(); // intersection points\r\n    let lowerIndex = 0;\r\n    let upperIndex = 0;\r\n    let lowerPoly: IVec2Like[];\r\n    let upperPoly: IVec2Like[];\r\n\r\n    for (let i = 0; i < vertices.length; ++i) {\r\n        if (Reflex(i, vertices)) {\r\n            lowerDist = upperDist = 10e7; // std::numeric_limits<qreal>::max();\r\n            for (let j = 0; j < vertices.length; ++j) {\r\n                // if line intersects with an edge\r\n                if (Left(At(i - 1, vertices), At(i, vertices), At(j, vertices))\r\n                    && RightOn(At(i - 1, vertices), At(i, vertices), At(j - 1, vertices))) {\r\n                    // find the povar of intersection\r\n                    p = LineIntersect(\r\n                        At(i - 1, vertices),\r\n                        At(i, vertices),\r\n                        At(j, vertices),\r\n                        At(j - 1, vertices),\r\n                    );\r\n                    if (Right(At(i + 1, vertices), At(i, vertices), p)) {\r\n                        // make sure it's inside the poly\r\n                        d = SquareDist(At(i, vertices), p);\r\n                        if (d < lowerDist) {\r\n                            // keep only the closest intersection\r\n                            lowerDist = d;\r\n                            lowerInt = p;\r\n                            lowerIndex = j;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (Left(At(i + 1, vertices), At(i, vertices), At(j + 1, vertices))\r\n                    && RightOn(At(i + 1, vertices), At(i, vertices), At(j, vertices))) {\r\n                    p = LineIntersect(\r\n                        At(i + 1, vertices),\r\n                        At(i, vertices),\r\n                        At(j, vertices),\r\n                        At(j + 1, vertices),\r\n                    );\r\n                    if (Left(At(i - 1, vertices), At(i, vertices), p)) {\r\n                        d = SquareDist(At(i, vertices), p);\r\n                        if (d < upperDist) {\r\n                            upperDist = d;\r\n                            upperIndex = j;\r\n                            upperInt = p;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if there are no vertices to connect to, choose a povar in the middle\r\n            if (lowerIndex == (upperIndex + 1) % vertices.length) {\r\n                const sp = lowerInt.add(upperInt).multiplyScalar(1 / 2);\r\n\r\n                lowerPoly = Copy(i, upperIndex, vertices);\r\n                lowerPoly.push(sp);\r\n                upperPoly = Copy(lowerIndex, i, vertices);\r\n                upperPoly.push(sp);\r\n            } else {\r\n                let highestScore = 0; let bestIndex = lowerIndex;\r\n\r\n                while (upperIndex < lowerIndex) {\r\n                    upperIndex += vertices.length;\r\n                }\r\n\r\n                for (let j = lowerIndex; j <= upperIndex; ++j) {\r\n                    if (CanSee(i, j, vertices)) {\r\n                        let score = 1 / (SquareDist(At(i, vertices), At(j, vertices)) + 1);\r\n                        if (Reflex(j, vertices)) {\r\n                            if (RightOn(At(j - 1, vertices), At(j, vertices), At(i, vertices))\r\n                                && LeftOn(At(j + 1, vertices), At(j, vertices), At(i, vertices))) {\r\n                                score += 3;\r\n                            } else {\r\n                                score += 2;\r\n                            }\r\n                        } else {\r\n                            score += 1;\r\n                        }\r\n\r\n                        if (score > highestScore) {\r\n                            bestIndex = j;\r\n                            highestScore = score;\r\n                        }\r\n                    }\r\n                }\r\n                lowerPoly = Copy(i, bestIndex, vertices);\r\n                upperPoly = Copy(bestIndex, i, vertices);\r\n            }\r\n            list = list.concat(ConvexPartition(lowerPoly));\r\n            list = list.concat(ConvexPartition(upperPoly));\r\n            return list;\r\n        }\r\n    }\r\n\r\n    // polygon is already convex\r\n    list.push(vertices);\r\n\r\n    // Remove empty vertice collections\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        if (list[i].length == 0) list.splice(i, 0);\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\nfunction CanSee (i: number, j: number, vertices: IVec2Like[]): boolean {\r\n    if (Reflex(i, vertices)) {\r\n        if (LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices))\r\n            && RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices))) return false;\r\n    } else if (RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices))\r\n            || LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices))) return false;\r\n    if (Reflex(j, vertices)) {\r\n        if (LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices))\r\n            && RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices))) return false;\r\n    } else if (RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices))\r\n            || LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices))) return false;\r\n\r\n    for (let k = 0; k < vertices.length; ++k) {\r\n        if ((k + 1) % vertices.length == i || k == i || (k + 1) % vertices.length == j || k == j) {\r\n            continue; // ignore incident edges\r\n        }\r\n        const intersectionPoint = new Vec2();\r\n        if (LineIntersect2(At(i, vertices), At(j, vertices), At(k, vertices), At(k + 1, vertices), intersectionPoint)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// precondition: ccw\r\nfunction Reflex (i: number, vertices: IVec2Like[]): boolean {\r\n    return Right(i, vertices);\r\n}\r\n\r\nfunction Right (a: number | IVec2Like, b: IVec2Like | IVec2Like[], c?: IVec2Like): boolean {\r\n    if (typeof c === 'undefined') {\r\n        const i = a as number; const vertices = b as IVec2Like[];\r\n\r\n        a = At(i - 1, vertices);\r\n        b = At(i, vertices);\r\n        c = At(i + 1, vertices);\r\n        if (typeof a === 'undefined') {\r\n            a = b;\r\n        }\r\n        if (typeof c === 'undefined') {\r\n            c = b;\r\n        }\r\n    }\r\n\r\n    return Area(a as IVec2Like, b as IVec2Like, c) < 0;\r\n}\r\n\r\nfunction Left (a: IVec2Like, b: IVec2Like, c: IVec2Like): boolean {\r\n    return Area(a, b, c) > 0;\r\n}\r\n\r\nfunction LeftOn (a: IVec2Like, b: IVec2Like, c: IVec2Like): boolean {\r\n    return Area(a, b, c) >= 0;\r\n}\r\n\r\nfunction RightOn (a: IVec2Like, b: IVec2Like, c: IVec2Like): boolean {\r\n    return Area(a, b, c) <= 0;\r\n}\r\n\r\nfunction SquareDist (a: IVec2Like, b: IVec2Like): number {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n// forces counter clock wise order.\r\nexport function ForceCounterClockWise (vertices: IVec2Like[]): void {\r\n    if (!IsCounterClockWise(vertices)) {\r\n        vertices.reverse();\r\n    }\r\n}\r\n\r\nexport function IsCounterClockWise (vertices: IVec2Like[]): boolean {\r\n    // We just return true for lines\r\n    if (vertices.length < 3) return true;\r\n\r\n    return (GetSignedArea(vertices) > 0);\r\n}\r\n\r\n// gets the signed area.\r\nfunction GetSignedArea (vertices: IVec2Like[]): number {\r\n    let i;\r\n    let area = 0;\r\n\r\n    for (i = 0; i < vertices.length; i++) {\r\n        const j = (i + 1) % vertices.length;\r\n        area += vertices[i].x * vertices[j].y;\r\n        area -= vertices[i].y * vertices[j].x;\r\n    }\r\n    area /= 2;\r\n    return area;\r\n}\r\n\r\n// From Mark Bayazit's convex decomposition algorithm\r\nfunction LineIntersect (p1: IVec2Like, p2: IVec2Like, q1: IVec2Like, q2: IVec2Like): Vec2 {\r\n    const i = new Vec2();\r\n    const a1 = p2.y - p1.y;\r\n    const b1 = p1.x - p2.x;\r\n    const c1 = a1 * p1.x + b1 * p1.y;\r\n    const a2 = q2.y - q1.y;\r\n    const b2 = q1.x - q2.x;\r\n    const c2 = a2 * q1.x + b2 * q1.y;\r\n    const det = a1 * b2 - a2 * b1;\r\n\r\n    if (!FloatEquals(det, 0)) {\r\n        // lines are not parallel\r\n        i.x = (b2 * c1 - b1 * c2) / det;\r\n        i.y = (a1 * c2 - a2 * c1) / det;\r\n    }\r\n    return i;\r\n}\r\n\r\n// from Eric Jordan's convex decomposition library, it checks if the lines a0->a1 and b0->b1 cross.\r\n// if they do, intersectionPovar will be filled with the povar of crossing. Grazing lines should not return true.\r\nfunction LineIntersect2 (a0: IVec2Like, a1: IVec2Like, b0: IVec2Like, b1: IVec2Like, intersectionPoint: IVec2Like): boolean {\r\n    if (a0 == b0 || a0 == b1 || a1 == b0 || a1 == b1) return false;\r\n\r\n    const x1 = a0.x;\r\n    const y1 = a0.y;\r\n    const x2 = a1.x;\r\n    const y2 = a1.y;\r\n    const x3 = b0.x;\r\n    const y3 = b0.y;\r\n    const x4 = b1.x;\r\n    const y4 = b1.y;\r\n\r\n    // AABB early exit\r\n    if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(x3, x4) < Math.min(x1, x2)) return false;\r\n\r\n    if (Math.max(y1, y2) < Math.min(y3, y4) || Math.max(y3, y4) < Math.min(y1, y2)) return false;\r\n\r\n    let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3));\r\n    let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3));\r\n    const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n    if (Math.abs(denom) < 10e-7) {\r\n        // Lines are too close to parallel to call\r\n        return false;\r\n    }\r\n    ua /= denom;\r\n    ub /= denom;\r\n\r\n    if ((ua > 0) && (ua < 1) && (ub > 0) && (ub < 1)) {\r\n        intersectionPoint.x = (x1 + ua * (x2 - x1));\r\n        intersectionPoint.y = (y1 + ua * (y2 - y1));\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction FloatEquals (value1: number, value2: number): boolean {\r\n    return Math.abs(value1 - value2) <= 10e-7;\r\n}\r\n\r\n// returns a positive number if c is to the left of the line going from a to b. Positive number if povar is left, negative if povar is right, and 0 if points are collinear.</returns>\r\nfunction Area (a: IVec2Like, b: IVec2Like, c: IVec2Like): number {\r\n    return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec2Like, logID } from '../../../core';\r\n\r\n//https://github.com/x6ud/poly-partition-js\r\n\r\n/**\r\n* @en\r\n* Decompose the polygon into several convex polygon using Hertel-Mehlhorn algorithm.\r\n* If the polygon is already convex, it will return the original polygon.\r\n* @zh\r\n* 使用Hertel-Mehlhorn算法将输入多边形拆分成多个凸多边形。如果输入多边形是凸多边形，将返回原多边形。\r\n* @param polygon @en one polygon. @zh 一个多边形。\r\n* @return @en polygon array. @zh 多边形数组。\r\n*/\r\nexport function ConvexPartition (polygon: IVec2Like[]): IVec2Like[][] | null {\r\n    // We force it to CCW as it is a precondition in this algorithm.\r\n    ForceCounterClockWise(polygon);\r\n\r\n    //check if the poly is already convex\r\n    let convex = true;\r\n    for (let i = 0, len = polygon.length; i < len; ++i) {\r\n        if (!isConvex(polygon[(i + len - 1) % len], polygon[i], polygon[(i + 1) % len])) {\r\n            convex = false;\r\n            break;\r\n        }\r\n    }\r\n    if (convex) {\r\n        return [polygon];\r\n    }\r\n\r\n    const ret: IVec2Like[][] = [];\r\n    const triangles = Triangulate(polygon);\r\n    if (!triangles) return null;\r\n    for (; triangles.length;) {\r\n        let poly = triangles.splice(0, 1)[0];\r\n        for (let iPoly = 0, polyLen = poly.length; iPoly < polyLen; ++iPoly) {\r\n            const diag1 = poly[iPoly];\r\n            const diag2 = poly[(iPoly + 1) % polyLen];\r\n            // find diagonal\r\n            let tri3: (IVec2Like | null) = null;\r\n            let iTri2 = 0;\r\n            for (; iTri2 < triangles.length; ++iTri2) {\r\n                const triangle = triangles[iTri2] as [IVec2Like, IVec2Like, IVec2Like];\r\n                for (let i = 0; i < 3; ++i) {\r\n                    const tri1 = triangle[i];\r\n                    const tri2 = triangle[(i + 1) % 3];\r\n                    if (equals(diag1, tri2) && equals(diag2, tri1)) {\r\n                        tri3 = triangle[(i + 2) % 3];\r\n                        break;\r\n                    }\r\n                }\r\n                if (tri3) {\r\n                    break;\r\n                }\r\n            }\r\n            if (!tri3) { // not a diagonal\r\n                continue;\r\n            }\r\n            if (area(poly[(iPoly + polyLen - 1) % polyLen], diag1, tri3) > 0) { // neither convex nor on the same line\r\n                continue;\r\n            }\r\n            if (area(tri3, diag2, poly[(iPoly + 2) % polyLen]) > 0) {\r\n                continue;\r\n            }\r\n            // merge triangle\r\n            const newPoly: IVec2Like[] = [];\r\n            for (let i = (iPoly + 1) % polyLen; i !== iPoly; i = (i + 1) % polyLen) {\r\n                newPoly.push(poly[i]);\r\n            }\r\n            newPoly.push(diag1, tri3);\r\n            poly = newPoly;\r\n            polyLen = newPoly.length;\r\n            iPoly = -1;\r\n            triangles.splice(iTri2, 1);\r\n        }\r\n        ret.push(poly);\r\n    }\r\n    return ret;\r\n}\r\n\r\nclass Vertex {\r\n    public isActive = false;\r\n    public isConvex = false;\r\n    public isEar = false;\r\n    public point: IVec2Like| null = null;\r\n    public angleCos = 0;\r\n    public shouldUpdate = false;\r\n    public index = 0;\r\n    public prev: Vertex| null = null;\r\n    public next: Vertex| null = null;\r\n}\r\n\r\n// Signed area.\r\nfunction area (a: IVec2Like, b: IVec2Like, c: IVec2Like): number {\r\n    return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);\r\n}\r\n\r\n// Whether corner of a counterclockwise polygon is convex.\r\nfunction isConvex (p1: IVec2Like, p2: IVec2Like, p3: IVec2Like): boolean {\r\n    return area(p1, p2, p3) < 0;\r\n}\r\n\r\nfunction equals (a: IVec2Like, b: IVec2Like): boolean {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\n\r\nfunction isClockwise (polygon: IVec2Like[]): boolean {\r\n    let sum = 0;\r\n    for (let i = 0, len = polygon.length; i < len; ++i) {\r\n        const p1 = polygon[i];\r\n        const p2 = polygon[(i + 1) % len];\r\n        sum += (p2.x - p1.x) * (p2.y + p1.y);\r\n    }\r\n    return sum > 0;\r\n}\r\n\r\n// Forces counter clock wise order.\r\nfunction ForceCounterClockWise (vertices: IVec2Like[]): void {\r\n    if (isClockwise(vertices)) {\r\n        vertices.reverse();\r\n    }\r\n}\r\n\r\nfunction updateVertex (vertex: Vertex, vertices: Vertex[]): void {\r\n    if (!vertex.shouldUpdate) {\r\n        return;\r\n    }\r\n    vertex.shouldUpdate = false;\r\n    const v1 = vertex.prev!.point!;\r\n    const v2 = vertex.point!;\r\n    const v3 = vertex.next!.point!;\r\n    vertex.isConvex = isConvex(v1, v2, v3);\r\n    let v1x = v1.x - v2.x;\r\n    let v1y = v1.y - v2.y;\r\n    const v1Len = Math.sqrt(v1x * v1x + v1y * v1y);\r\n    v1x /= v1Len;\r\n    v1y /= v1Len;\r\n    let v3x = v3.x - v2.x;\r\n    let v3y = v3.y - v2.y;\r\n    const v3Len = Math.sqrt(v3x * v3x + v3y * v3y);\r\n    v3x /= v3Len;\r\n    v3y /= v3Len;\r\n    vertex.angleCos = v1x * v3x + v1y * v3y;\r\n    if (vertex.isConvex) {\r\n        vertex.isEar = true;\r\n        for (let i = 0, len = vertices.length; i < len; ++i) {\r\n            const curr = vertices[i];\r\n            if (!curr.isActive || curr === vertex) {\r\n                continue;\r\n            }\r\n            const currentPoint = curr.point!;\r\n            if (equals(v1, currentPoint) || equals(v2, currentPoint) || equals(v3, currentPoint)) {\r\n                continue;\r\n            }\r\n            const areaA = area(v1, currentPoint, v2);\r\n            const areaB = area(v2, currentPoint, v3);\r\n            const areaC = area(v3, currentPoint, v1);\r\n            if (areaA > 0 && areaB > 0 && areaC > 0) {\r\n                vertex.isEar = false;\r\n                break;\r\n            }\r\n            if (areaA === 0 && areaB >= 0 && areaC >= 0) {\r\n                if (area(v1, curr.prev!.point!, v2) > 0 || area(v1, curr.next!.point!, v2) > 0) {\r\n                    vertex.isEar = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (areaB === 0 && areaA >= 0 && areaC >= 0) {\r\n                if (area(v2, curr.prev!.point!, v3) > 0 || area(v2, curr.next!.point!, v3) > 0) {\r\n                    vertex.isEar = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (areaC === 0 && areaA >= 0 && areaB >= 0) {\r\n                if (area(v3, curr.prev!.point!, v1) > 0 || area(v3, curr.next!.point!, v1) > 0) {\r\n                    vertex.isEar = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        vertex.isEar = false;\r\n    }\r\n}\r\n\r\nfunction removeCollinearOrDuplicate (start: Vertex): void {\r\n    for (let curr = start, end = start; ;) {\r\n        if (equals(curr.point!, curr.next!.point!)\r\n            || area(curr.prev!.point!, curr.point!, curr.next!.point!) === 0) {\r\n            curr.prev!.next = curr.next;\r\n            curr.next!.prev = curr.prev;\r\n            curr.prev!.shouldUpdate = true;\r\n            curr.next!.shouldUpdate = true;\r\n            if (curr === curr.next) {\r\n                break;\r\n            }\r\n            end = curr.prev!;\r\n            curr = curr.next!;\r\n            continue;\r\n        }\r\n        curr = curr.next!;\r\n        if (curr === end) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// Triangulation by ear clipping.\r\nfunction Triangulate (polygon: IVec2Like[]): IVec2Like[][] | null {\r\n    ForceCounterClockWise(polygon);\r\n\r\n    if (polygon.length < 4) {\r\n        return [polygon];\r\n    }\r\n    const len = polygon.length;\r\n    const vertices: Vertex[] = [];\r\n    const triangles: [IVec2Like, IVec2Like, IVec2Like][] = [];\r\n    // init\r\n    for (let i = 0; i < len; ++i) {\r\n        const v = new Vertex();\r\n        v.isActive = true;\r\n        v.isConvex = false;\r\n        v.isEar = false;\r\n        v.point =  polygon[i];\r\n        v.angleCos = 0;\r\n        v.shouldUpdate = true;\r\n        v.index =  i;\r\n        vertices.push(v);\r\n    }\r\n    for (let i = 0; i < len; ++i) {\r\n        const vertex = vertices[i];\r\n        vertex.prev = vertices[(i + len - 1) % len];\r\n        vertex.next = vertices[(i + 1) % len];\r\n    }\r\n    vertices.forEach((vertex): void => updateVertex(vertex, vertices));\r\n    for (let i = 0; i < len - 3; ++i) {\r\n        let ear: Vertex | undefined;\r\n        // find the most extruded ear\r\n        for (let j = 0; j < len; ++j) {\r\n            const vertex = vertices[j];\r\n            if (!vertex.isActive || !vertex.isEar) {\r\n                continue;\r\n            }\r\n            if (!ear) {\r\n                ear = vertex;\r\n            } else if (vertex.angleCos > ear.angleCos) {\r\n                ear = vertex;\r\n            }\r\n        }\r\n        if (!ear) {\r\n            for (let i_1 = 0; i_1 < len; ++i_1) {\r\n                const vertex = vertices[i_1];\r\n                if (vertex.isActive) {\r\n                    const p1 = vertex.prev!.point!;\r\n                    const p2 = vertex.point!;\r\n                    const p3 = vertex.next!.point!;\r\n                    if (Math.abs(area(p1, p2, p3)) > 1e-5) {\r\n                        logID(9644);\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        triangles.push([ear.prev!.point!, ear.point!, ear.next!.point!]);\r\n        ear.isActive = false;\r\n        ear.prev!.next = ear.next;\r\n        ear.next!.prev = ear.prev;\r\n        ear.prev!.shouldUpdate = true;\r\n        ear.next!.shouldUpdate = true;\r\n        removeCollinearOrDuplicate(ear.next!);\r\n        if (i === len - 4) {\r\n            break;\r\n        }\r\n        for (let i_2 = 0; i_2 < len; ++i_2) {\r\n            updateVertex(vertices[i_2], vertices);\r\n        }\r\n    }\r\n    for (let i = 0; i < len; ++i) {\r\n        const vertex = vertices[i];\r\n        if (vertex.isActive) {\r\n            vertex.prev!.isActive = false;\r\n            vertex.next!.isActive = false;\r\n            const p1 = vertex.prev!.point!;\r\n            const p2 = vertex.point!;\r\n            const p3 = vertex.next!.point!;\r\n            if (Math.abs(area(p1, p2, p3)) > 1e-5) {\r\n                triangles.push([p1, p2, p3]);\r\n            }\r\n        }\r\n    }\r\n    return triangles;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Enum, Vec2 } from '../../core';\r\nimport { Collider2D } from './components/colliders/collider-2d';\r\n\r\nexport enum ERigidBody2DType {\r\n    /**\r\n     * @en\r\n     * zero mass, zero velocity, may be manually moved.\r\n     * @zh\r\n     * 零质量，零速度，可以手动移动。\r\n     */\r\n    Static = 0,\r\n    /**\r\n     * @en\r\n     * zero mass, non-zero velocity set by user.\r\n     * @zh\r\n     * 零质量，可以被设置速度。\r\n     */\r\n    Kinematic = 1,\r\n    /**\r\n     * @en\r\n     * positive mass, non-zero velocity determined by forces.\r\n     * @zh\r\n     * 有质量，可以设置速度，力等。\r\n     */\r\n    Dynamic = 2,\r\n    /**\r\n     * @en\r\n     * An extension of Kinematic type, can be animated by Animation.\r\n     * @zh\r\n     * Kinematic 类型的扩展，可以被动画控制动画效果。\r\n     */\r\n    Animated = 3\r\n}\r\nEnum(ERigidBody2DType);\r\n\r\nexport enum ECollider2DType {\r\n    None,\r\n    BOX,\r\n    CIRCLE,\r\n    POLYGON,\r\n}\r\nEnum(ECollider2DType);\r\n\r\nexport enum EJoint2DType {\r\n    None,\r\n    DISTANCE,\r\n    SPRING,\r\n    WHEEL,\r\n    MOUSE,\r\n    FIXED,\r\n    SLIDER,\r\n    RELATIVE,\r\n    HINGE,\r\n}\r\nEnum(EJoint2DType);\r\n\r\nexport enum PhysicsGroup2D {\r\n    DEFAULT = 1,\r\n}\r\nEnum(PhysicsGroup2D);\r\n\r\n// To keep the compatibility, don't use it internally, otherwise, enum value may be inlined to wrong value.\r\n// Use PhysicsGroup2D instead.\r\nexport const PhysicsGroup = PhysicsGroup2D;\r\n\r\n/**\r\n * @en Enum for ERaycast2DType.\r\n * @zh 射线检测类型。\r\n * @enum ERaycast2DType.\r\n */\r\nexport enum ERaycast2DType {\r\n    /**\r\n     * @en\r\n     * Detects closest collider on the raycast path.\r\n     * @zh\r\n     * 检测射线路径上最近的碰撞体。\r\n     */\r\n    Closest,\r\n    /**\r\n     * @en\r\n     * Detects any collider on the raycast path.\r\n     * Once detects a collider, will stop the searching process.\r\n     * @zh\r\n     * 检测射线路径上任意的碰撞体。\r\n     * 一旦检测到任何碰撞体，将立刻结束检测其他的碰撞体。\r\n     */\r\n    Any,\r\n    /**\r\n     * @en\r\n     * Detects all colliders on the raycast path.\r\n     * One collider may return several collision points(because one collider may have several fixtures,\r\n     * one fixture will return one point, the point may inside collider), AllClosest will return the closest one.\r\n     * @zh\r\n     * 检测射线路径上所有的碰撞体。\r\n     * 同一个碰撞体上有可能会返回多个碰撞点(因为一个碰撞体可能由多个夹具组成，每一个夹具会返回一个碰撞点，碰撞点有可能在碰撞体内部)，AllClosest 删选同一个碰撞体上最近的哪一个碰撞点。\r\n     */\r\n    AllClosest,\r\n\r\n    /**\r\n     * @en\r\n     * Detects all colliders on the raycast path.\r\n     * One collider may return several collision points, All will return all these points.\r\n     * @zh\r\n     * 检测射线路径上所有的碰撞体。\r\n     * 同一个碰撞体上有可能会返回多个碰撞点，All 将返回所有这些碰撞点。\r\n     */\r\n    All\r\n}\r\n\r\nexport const Contact2DType = {\r\n    None: 'none-contact',\r\n    BEGIN_CONTACT: 'begin-contact',\r\n    END_CONTACT: 'end-contact',\r\n    PRE_SOLVE: 'pre-solve',\r\n    POST_SOLVE: 'post-solve',\r\n};\r\n\r\nexport interface RaycastResult2D {\r\n    collider: Collider2D,\r\n    fixtureIndex: number,\r\n    point: Vec2,\r\n    normal: Vec2,\r\n    fraction: number\r\n}\r\n\r\nexport enum EPhysics2DDrawFlags {\r\n    None = 0,\r\n    Shape = 0x0001, /// < draw shapes\r\n    Joint = 0x0002, /// < draw joint connections\r\n    Aabb = 0x0004, /// < draw axis aligned bounding boxes\r\n    Pair = 0x0008, /// < draw broad-phase pairs\r\n    CenterOfMass = 0x0010, /// < draw center of mass frame\r\n    // #if B2_ENABLE_PARTICLE\r\n    Particle = 0x0020, /// < draw particles\r\n    // #endif\r\n    // #if B2_ENABLE_CONTROLLER\r\n    Controller = 0x0040, /// @see b2Controller list\r\n    // #endif\r\n    All = 0x003f,\r\n}\r\n\r\nexport const PHYSICS_2D_PTM_RATIO = 32;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { EDITOR, DEBUG, TEST, EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { IRigidBody2D } from '../spec/i-rigid-body';\r\nimport { IBoxShape, ICircleShape, IPolygonShape, IBaseShape } from '../spec/i-physics-shape';\r\nimport { IPhysicsWorld } from '../spec/i-physics-world';\r\nimport { errorID, log } from '../../core';\r\nimport { ECollider2DType, EJoint2DType  } from './physics-types';\r\nimport { IJoint2D, IDistanceJoint, ISpringJoint, IFixedJoint, IMouseJoint,\r\n    IRelativeJoint, ISliderJoint, IWheelJoint, IHingeJoint } from '../spec/i-physics-joint';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\r\nexport type IPhysicsEngineId = 'builtin' | 'box2d' | 'box2d-wasm'| string;\r\n\r\ninterface IPhysicsWrapperObject {\r\n    PhysicsWorld: any,\r\n    RigidBody?: any,\r\n\r\n    BoxShape?: any,\r\n    CircleShape?: any,\r\n    PolygonShape?: any,\r\n\r\n    DistanceJoint?: any,\r\n    FixedJoint?: any,\r\n    MouseJoint?: any,\r\n    SpringJoint?: any,\r\n    RelativeJoint?: any,\r\n    SliderJoint?: any,\r\n    WheelJoint?: any,\r\n    HingeJoint?: any,\r\n}\r\n\r\ninterface IPhysicsBackend { [key: string]: IPhysicsWrapperObject; }\r\n\r\nexport interface IPhysicsSelector {\r\n    /**\r\n     * @en\r\n     * The id of the physics engine being used by the physics system.\r\n     * @zh\r\n     * 物理系统正在使用的物理引擎的唯一标志。\r\n     */\r\n    readonly id: IPhysicsEngineId,\r\n\r\n    /**\r\n     * @en\r\n     * The wrapper of the physics engine being used by the physics system.\r\n     * @zh\r\n     * 物理系统使用的物理引擎的封装层。\r\n     */\r\n    readonly wrapper: IPhysicsWrapperObject,\r\n\r\n    /**\r\n     * @en\r\n     * All physics engine backends that the physics module has registered.\r\n     * @zh\r\n     * 物理模块已注册的所有物理引擎后端。\r\n     */\r\n    readonly backend: IPhysicsBackend,\r\n\r\n    /**\r\n     * @en\r\n     * An instance of the physical world through which you can access the lowlevel objects.\r\n     * @zh\r\n     * 物理世界实例，通过它可以访问到底层对象。\r\n     */\r\n    readonly physicsWorld: IPhysicsWorld | null;\r\n\r\n    /**\r\n     * @en\r\n     * To register the backend, the system will use the last backend registered before initialization,\r\n     * and the registration after that needs to be switched manually.\r\n     * @zh\r\n     * 注册后端，系统将使用在初始化前注册的最后一个后端，此后注册的需要手动切换。\r\n     */\r\n    register: (id: IPhysicsEngineId, wrapper: IPhysicsWrapperObject) => void,\r\n\r\n    /**\r\n     * @en\r\n     * Switch to the physics backend corresponding to the id in the registry.\r\n     * @zh\r\n     * 切换为注册表里对应 id 的物理后端。\r\n     */\r\n    switchTo: (id: IPhysicsEngineId) => void,\r\n\r\n    // polyfill\r\n    [x: string]: any,\r\n}\r\n\r\nfunction register (id: IPhysicsEngineId, wrapper: IPhysicsWrapperObject): void {\r\n    if (!EDITOR && !TEST) log(`[PHYSICS2D]: register ${id}.`);\r\n    selector.backend[id] = wrapper;\r\n    if (!selector.physicsWorld || selector.id === id) {\r\n        const mutableSelector = selector as Mutable<IPhysicsSelector>;\r\n        mutableSelector.id = id;\r\n        mutableSelector.wrapper = wrapper;\r\n    }\r\n}\r\n\r\nfunction switchTo (id: IPhysicsEngineId): void {\r\n    //if (!selector.runInEditor) return;\r\n    const mutableSelector = selector as Mutable<IPhysicsSelector>;\r\n    if (selector.physicsWorld && id !== selector.id && selector.backend[id] != null) {\r\n        //selector.physicsWorld.destroy();//todo\r\n        if (!TEST) log(`[PHYSICS2D]: switch from ${selector.id} to ${id}.`);\r\n        mutableSelector.id = id;\r\n        mutableSelector.wrapper = selector.backend[id];\r\n        mutableSelector.physicsWorld = createPhysicsWorld();\r\n    } else {\r\n        if (!EDITOR && !TEST) log(`[PHYSICS2D]: using ${mutableSelector.id}.`);\r\n        mutableSelector.physicsWorld = createPhysicsWorld();\r\n    }\r\n}\r\n\r\n/**\r\n * @en\r\n * The physics selector is used to register and switch the physics engine backend.\r\n * @zh\r\n * 物理选择器用于注册和切换物理引擎后端。\r\n */\r\nexport const selector: IPhysicsSelector = {\r\n    id: '',\r\n    switchTo,\r\n    register,\r\n    wrapper: {} as any,\r\n    backend: {} as any,\r\n    physicsWorld: null as any,\r\n\r\n    /// hide for now ///\r\n    runInEditor: !EDITOR,\r\n};\r\n\r\nconst FUNC = (...v: any): any => 0 as any;\r\nconst ENTIRE_WORLD: IPhysicsWorld = {\r\n    impl: null,\r\n    debugDrawFlags: 0,\r\n    setGravity: FUNC,\r\n    setAllowSleep: FUNC,\r\n    step: FUNC,\r\n    syncPhysicsToScene: FUNC,\r\n    syncSceneToPhysics: FUNC,\r\n    raycast: FUNC,\r\n    testPoint: FUNC,\r\n    testAABB: FUNC,\r\n    drawDebug: FUNC,\r\n};\r\n\r\nexport function checkPhysicsModule (obj: any): boolean {\r\n    if (DEBUG && !TEST && !EDITOR_NOT_IN_PREVIEW && obj == null) {\r\n        errorID(9600);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function createPhysicsWorld (): IPhysicsWorld {\r\n    if (DEBUG && checkPhysicsModule(selector.wrapper.PhysicsWorld)) { return ENTIRE_WORLD; }\r\n    return new selector.wrapper.PhysicsWorld();\r\n}\r\n\r\nconst EntireBody: IRigidBody2D = {\r\n    impl: null as any,\r\n    rigidBody: null as any,\r\n    isAwake: false,\r\n    isSleeping: false,\r\n\r\n    initialize: FUNC,\r\n\r\n    setType: FUNC,\r\n\r\n    setLinearDamping: FUNC,\r\n    setAngularDamping: FUNC,\r\n    setGravityScale: FUNC,\r\n    setFixedRotation: FUNC,\r\n    setAllowSleep: FUNC,\r\n\r\n    isActive: FUNC,\r\n    setActive: FUNC,\r\n\r\n    wakeUp: FUNC,\r\n    sleep: FUNC,\r\n\r\n    getMass: FUNC,\r\n    getInertia: FUNC,\r\n\r\n    getLinearVelocity: FUNC,\r\n    setLinearVelocity: FUNC,\r\n    getLinearVelocityFromWorldPoint: FUNC,\r\n    getAngularVelocity: FUNC,\r\n    setAngularVelocity: FUNC,\r\n\r\n    getLocalVector: FUNC,\r\n    getWorldVector: FUNC,\r\n    getLocalPoint: FUNC,\r\n    getWorldPoint: FUNC,\r\n\r\n    getLocalCenter: FUNC,\r\n    getWorldCenter: FUNC,\r\n\r\n    applyForce: FUNC,\r\n    applyForceToCenter: FUNC,\r\n    applyTorque: FUNC,\r\n    applyLinearImpulse: FUNC,\r\n    applyLinearImpulseToCenter: FUNC,\r\n    applyAngularImpulse: FUNC,\r\n\r\n    onEnable: FUNC,\r\n    onDisable: FUNC,\r\n    onDestroy: FUNC,\r\n};\r\n\r\nexport function createRigidBody (): IRigidBody2D {\r\n    const PHYSICS_2D_BUILTIN = selector.id === 'builtin';\r\n\r\n    if (PHYSICS_2D_BUILTIN) {\r\n        return EntireBody;\r\n    } else {\r\n        if (DEBUG && checkPhysicsModule(selector.wrapper.RigidBody)) { return EntireBody; }\r\n        return new selector.wrapper.RigidBody();\r\n    }\r\n}\r\n\r\n// shapes\r\nconst CREATE_COLLIDER_PROXY = { INITED: false };\r\n\r\ninterface IEntireShape extends IBoxShape, ICircleShape, IPolygonShape { }\r\nconst ENTIRE_SHAPE: IEntireShape = {\r\n    impl: null,\r\n    collider: null as unknown as any,\r\n    worldAABB: null as unknown as any,\r\n    worldPoints: null as unknown as any,\r\n    worldPosition: null as unknown as any,\r\n    worldRadius: null as unknown as any,\r\n\r\n    initialize: FUNC,\r\n    apply: FUNC,\r\n\r\n    onLoad: FUNC,\r\n    onEnable: FUNC,\r\n    onDisable: FUNC,\r\n    onDestroy: FUNC,\r\n    onGroupChanged: FUNC,\r\n};\r\n\r\nexport function createShape (type: ECollider2DType): IBaseShape {\r\n    initColliderProxy();\r\n    return CREATE_COLLIDER_PROXY[type]();\r\n}\r\n\r\nfunction initColliderProxy (): void {\r\n    if (CREATE_COLLIDER_PROXY.INITED) return;\r\n    CREATE_COLLIDER_PROXY.INITED = true;\r\n\r\n    CREATE_COLLIDER_PROXY[ECollider2DType.BOX] = function createBoxShape (): IBoxShape {\r\n        if (DEBUG && checkPhysicsModule(selector.wrapper.BoxShape)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.BoxShape();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[ECollider2DType.CIRCLE] = function createCircleShape (): ICircleShape {\r\n        if (DEBUG && checkPhysicsModule(selector.wrapper.CircleShape)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.CircleShape();\r\n    };\r\n\r\n    CREATE_COLLIDER_PROXY[ECollider2DType.POLYGON] = function createPolygonShape (): IPolygonShape {\r\n        if (DEBUG && checkPhysicsModule(selector.wrapper.PolygonShape)) { return ENTIRE_SHAPE; }\r\n        return new selector.wrapper.PolygonShape();\r\n    };\r\n}\r\n\r\n// joints\r\nconst CREATE_JOINT_PROXY = { INITED: false };\r\n\r\ninterface IEntireJoint extends IDistanceJoint, IFixedJoint, IMouseJoint, ISpringJoint, IRelativeJoint, ISliderJoint, IWheelJoint, IHingeJoint { }\r\nconst ENTIRE_JOINT: IEntireJoint = {\r\n    impl: null,\r\n\r\n    initialize: FUNC,\r\n    apply: FUNC,\r\n\r\n    setDampingRatio: FUNC,\r\n    setFrequency: FUNC,\r\n    setMaxForce: FUNC,\r\n    setTarget: FUNC,\r\n    setDistance: FUNC,\r\n    setAngularOffset: FUNC,\r\n    setCorrectionFactor: FUNC,\r\n    setLinearOffset: FUNC,\r\n    setMaxLength: FUNC,\r\n    setMaxTorque: FUNC,\r\n    setLowerLimit: FUNC,\r\n    setUpperLimit: FUNC,\r\n    setMaxMotorForce: FUNC,\r\n    setMaxMotorTorque: FUNC,\r\n    setMotorSpeed: FUNC,\r\n    enableLimit: FUNC,\r\n    enableMotor: FUNC,\r\n    setLowerAngle: FUNC,\r\n    setUpperAngle: FUNC,\r\n};\r\n\r\nexport function createJoint (type: EJoint2DType): IJoint2D {\r\n    initJointProxy();\r\n    return CREATE_JOINT_PROXY[type]();\r\n}\r\n\r\nfunction initJointProxy (): void {\r\n    if (CREATE_JOINT_PROXY.INITED) return;\r\n    CREATE_JOINT_PROXY.INITED = true;\r\n\r\n    const PHYSICS_2D_BUILTIN = selector.id === 'builtin';\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.SPRING] = function createSpringJoint (): ISpringJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.SpringJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.SpringJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.DISTANCE] = function createDistanceJoint (): IDistanceJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.DistanceJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.DistanceJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.FIXED] = function createFixedJoint (): IFixedJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.FixedJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.FixedJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.MOUSE] = function createMouseJoint (): IMouseJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.MouseJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.MouseJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.RELATIVE] = function createRelativeJoint (): IRelativeJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.RelativeJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.RelativeJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.SLIDER] = function createSliderJoint (): ISliderJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.SliderJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.SliderJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.WHEEL] = function createWheelJoint (): IWheelJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.WheelJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.WheelJoint();\r\n        }\r\n    };\r\n\r\n    CREATE_JOINT_PROXY[EJoint2DType.HINGE] = function createHingeJoint (): IHingeJoint {\r\n        if (PHYSICS_2D_BUILTIN) {\r\n            return ENTIRE_JOINT;\r\n        } else {\r\n            if (DEBUG && checkPhysicsModule(selector.wrapper.HingeJoint)) { return ENTIRE_JOINT; }\r\n            return new selector.wrapper.HingeJoint();\r\n        }\r\n    };\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD, EDITOR_NOT_IN_PREVIEW, LOAD_BOX2D_MANUALLY } from 'internal:constants';\r\nimport { System, Vec2, IVec2Like, Rect, Eventify, Enum, settings, cclegacy, SettingsCategory, SystemPriority } from '../../core';\r\nimport { createPhysicsWorld, selector, IPhysicsSelector } from './physics-selector';\r\n\r\nimport { DelayEvent } from './physics-internal-types';\r\nimport { ICollisionMatrix } from '../../physics/framework/physics-config';\r\nimport { CollisionMatrix } from '../../physics/framework/collision-matrix';\r\nimport { ERaycast2DType, RaycastResult2D, PHYSICS_2D_PTM_RATIO, PhysicsGroup2D } from './physics-types';\r\nimport { Collider2D } from './components/colliders/collider-2d';\r\nimport { director, DirectorEvent } from '../../game';\r\nimport type { IPhysicsWorld } from '../spec/i-physics-world';\r\n\r\nlet instance: PhysicsSystem2D | null = null;\r\ncclegacy.internal.PhysicsGroup2D = PhysicsGroup2D;\r\n\r\nexport class PhysicsSystem2D extends Eventify(System) {\r\n    /**\r\n     * @en\r\n     * Gets or sets whether the physical system is enabled, which can be used to pause or continue running the physical system.\r\n     * @zh\r\n     * 获取或设置是否启用物理系统，可以用于暂停或继续运行物理系统。\r\n     */\r\n    get enable (): boolean {\r\n        return this._enable;\r\n    }\r\n    set enable (value: boolean) {\r\n        this._enable = value;\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * Gets or sets whether the physical system allows automatic sleep, which defaults to true.\r\n     * @zh\r\n     * 获取或设置物理系统是否允许自动休眠，默认为 true。\r\n     */\r\n    get allowSleep (): boolean {\r\n        return this._allowSleep;\r\n    }\r\n    set allowSleep (v: boolean) {\r\n        this._allowSleep = v;\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.physicsWorld.setAllowSleep(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the value of gravity in the physical world, which defaults to (0, -10).\r\n     * @zh\r\n     * 获取或设置物理世界的重力数值，默认为 (0, -10)。\r\n     */\r\n    get gravity (): Vec2 {\r\n        return this._gravity;\r\n    }\r\n    set gravity (gravity: Vec2) {\r\n        this._gravity.set(gravity);\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this.physicsWorld.setGravity(new Vec2(gravity.x / PHYSICS_2D_PTM_RATIO, gravity.y / PHYSICS_2D_PTM_RATIO));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the maximum number of simulated substeps per frame.\r\n     * @zh\r\n     * 获取或设置每帧模拟的最大子步数。\r\n     */\r\n    get maxSubSteps (): number {\r\n        return this._maxSubSteps;\r\n    }\r\n\r\n    set maxSubSteps (value: number) {\r\n        this._maxSubSteps = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the fixed delta time consumed by each simulation step.\r\n     * @zh\r\n     * 获取或设置每步模拟消耗的固定时间。\r\n     */\r\n    get fixedTimeStep (): number {\r\n        return this._fixedTimeStep;\r\n    }\r\n\r\n    set fixedTimeStep (value: number) {\r\n        this._fixedTimeStep = value;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Turn on or off the automatic simulation.\r\n     * @zh\r\n     * 获取或设置是否自动模拟。\r\n     */\r\n    get autoSimulation (): boolean {\r\n        return this._autoSimulation;\r\n    }\r\n\r\n    set autoSimulation (value: boolean) {\r\n        this._autoSimulation = value;\r\n    }\r\n\r\n    get debugDrawFlags (): number {\r\n        return this.physicsWorld.debugDrawFlags;\r\n    }\r\n    set debugDrawFlags (v) {\r\n        this.physicsWorld.debugDrawFlags = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The velocity iterations for the velocity constraint solver.\r\n     * @zh\r\n     * 速度更新迭代数。\r\n     */\r\n    public velocityIterations = 10;\r\n    /**\r\n     * @en\r\n     * The position Iterations for the position constraint solver.\r\n     * @zh\r\n     * 位置迭代更新数。\r\n     */\r\n    public positionIterations = 10;\r\n\r\n    /**\r\n     * @en\r\n     * Gets the wrappered object of the physical world through which you can access the actual underlying object.\r\n     * @zh\r\n     * 获取物理世界的封装对象，通过它你可以访问到实际的底层对象。\r\n     */\r\n    public get physicsWorld (): IPhysicsWorld {\r\n        return selector.physicsWorld!;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the ID of the system.\r\n     * @zh\r\n     * 获取此系统的ID。\r\n     */\r\n    static readonly ID = 'PHYSICS_2D';\r\n\r\n    static get PHYSICS_NONE (): boolean {\r\n        return !selector.id;\r\n    }\r\n\r\n    static get PHYSICS_BUILTIN (): boolean {\r\n        return selector.id === 'builtin';\r\n    }\r\n\r\n    static get PHYSICS_BOX2D (): boolean {\r\n        return selector.id === 'box2d';\r\n    }\r\n\r\n    static get PHYSICS_BOX2D_WASM (): boolean {\r\n        return selector.id === 'box2d-wasm';\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the predefined physics groups.\r\n     * @zh\r\n     * 获取预定义的物理分组。\r\n     */\r\n    public static get PhysicsGroup (): typeof PhysicsGroup2D {\r\n        return PhysicsGroup2D;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the physical system instance.\r\n     * @zh\r\n     * 获取物理系统实例。\r\n     */\r\n    static get instance (): PhysicsSystem2D {\r\n        if (!instance) {\r\n            instance = new PhysicsSystem2D();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the collision matrix。\r\n     * @zh\r\n     * 获取碰撞矩阵。\r\n     */\r\n    readonly collisionMatrix: ICollisionMatrix = new CollisionMatrix() as unknown as ICollisionMatrix;\r\n\r\n    private _enable = true;\r\n    private _allowSleep = true;\r\n    private _maxSubSteps = 1;\r\n    private _fixedTimeStep = 1.0 / 60.0;\r\n    private _autoSimulation = true;\r\n    private _accumulator = 0;\r\n    private _steping = false;\r\n    private readonly _gravity = new Vec2(0, -10 * PHYSICS_2D_PTM_RATIO);\r\n\r\n    private _delayEvents: DelayEvent[] = [];\r\n\r\n    get stepping (): boolean {\r\n        return this._steping;\r\n    }\r\n\r\n    private constructor () {\r\n        super();\r\n\r\n        const gravity = settings.querySettings(SettingsCategory.PHYSICS, 'gravity');\r\n        if (gravity) {\r\n            Vec2.copy(this._gravity, gravity as IVec2Like);\r\n            this._gravity.multiplyScalar(PHYSICS_2D_PTM_RATIO);\r\n        }\r\n        this._allowSleep = settings.querySettings<boolean>(SettingsCategory.PHYSICS, 'allowSleep') ?? this._allowSleep;\r\n        this._fixedTimeStep = settings.querySettings<number>(SettingsCategory.PHYSICS, 'fixedTimeStep') ?? this._fixedTimeStep;\r\n        this._maxSubSteps = settings.querySettings<number>(SettingsCategory.PHYSICS, 'maxSubSteps') ?? this._maxSubSteps;\r\n        this._autoSimulation = settings.querySettings<boolean>(SettingsCategory.PHYSICS, 'autoSimulation') ?? this._autoSimulation;\r\n        const collisionMatrix = settings.querySettings(SettingsCategory.PHYSICS, 'collisionMatrix');\r\n        if (collisionMatrix) {\r\n            for (const i in collisionMatrix) {\r\n                const bit = parseInt(i);\r\n                const value = 1 << parseInt(i);\r\n                this.collisionMatrix[`${value}`] = collisionMatrix[bit];\r\n            }\r\n        }\r\n\r\n        const collisionGroups = settings.querySettings<Array<{ name: string, index: number }>>(SettingsCategory.PHYSICS, 'collisionGroups');\r\n        if (collisionGroups) {\r\n            const cg = collisionGroups;\r\n            if (cg instanceof Array) {\r\n                cg.forEach((v): void => { PhysicsGroup2D[v.name] = 1 << v.index; });\r\n                Enum.update(PhysicsGroup2D);\r\n            }\r\n        }\r\n\r\n        const mutableSelector = selector as Mutable<IPhysicsSelector>;\r\n        mutableSelector.physicsWorld = createPhysicsWorld();\r\n\r\n        this.gravity = this._gravity;\r\n        this.allowSleep = this._allowSleep;\r\n    }\r\n\r\n    /**\r\n    * @en\r\n    * Perform a simulation of the physics system, which will now be performed automatically on each frame.\r\n    * @zh\r\n    * 执行一次物理系统的模拟，目前将在每帧自动执行一次。\r\n    * @param deltaTime @en time step. @zh 与上一次执行相差的时间，目前为每帧消耗时间。\r\n    */\r\n    postUpdate (deltaTime: number): void {\r\n        if (!this._enable) {\r\n            return;\r\n        }\r\n        if (!this._autoSimulation) {\r\n            return;\r\n        }\r\n\r\n        director.emit(DirectorEvent.BEFORE_PHYSICS);\r\n\r\n        this.physicsWorld.syncSceneToPhysics();\r\n\r\n        this._steping = true;\r\n\r\n        const fixedTimeStep = this._fixedTimeStep;\r\n        const velocityIterations = this.velocityIterations;\r\n        const positionIterations = this.positionIterations;\r\n\r\n        this._accumulator += deltaTime;\r\n        let substepIndex = 0;\r\n        while (substepIndex++ < this._maxSubSteps && this._accumulator > fixedTimeStep) {\r\n            this.physicsWorld.step(fixedTimeStep, velocityIterations, positionIterations);\r\n            this._accumulator -= fixedTimeStep;\r\n        }\r\n\r\n        const events = this._delayEvents;\r\n        for (let i = 0, l = events.length; i < l; i++) {\r\n            const event = events[i];\r\n            event.func.call(event.target);\r\n        }\r\n        events.length = 0;\r\n\r\n        this.physicsWorld.syncPhysicsToScene();\r\n\r\n        if (this.debugDrawFlags) {\r\n            this.physicsWorld.drawDebug();\r\n        }\r\n\r\n        this._steping = false;\r\n        director.emit(DirectorEvent.AFTER_PHYSICS);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-types\r\n    _callAfterStep (target: object, func: Function): void {\r\n        if (this._steping) {\r\n            this._delayEvents.push({\r\n                target,\r\n                func,\r\n            });\r\n        } else {\r\n            func.call(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Reset the accumulator of time to given value.\r\n     * @zh\r\n     * 重置时间累积总量为给定值。\r\n     */\r\n    resetAccumulator (time = 0): void {\r\n        this._accumulator = time;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Perform simulation steps for the physics world.\r\n     * @zh\r\n     * 执行物理世界的模拟步进。\r\n     * @param fixedTimeStep\r\n     */\r\n    step (fixedTimeStep: number): void {\r\n        this.physicsWorld.step(fixedTimeStep, this.velocityIterations, this.positionIterations);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Raycast the world for all colliders in the path of the ray.\r\n     * The raycast ignores colliders that contain the starting point.\r\n     * @zh\r\n     * 检测哪些碰撞体在给定射线的路径上，射线检测将忽略包含起始点的碰撞体。\r\n     * @method rayCast\r\n     * @param {Vec2} p1 @en start point of the raycast. @zh 射线起点。\r\n     * @param {Vec2} p2 @en end point of the raycast. @zh 射线终点。\r\n     * @param {RayCastType} type - @en optional, default is RayCastType.Closest. @zh 可选，默认是RayCastType.Closest。\r\n     * @param {number} mask - @en optional, default is 0xffffffff. @zh 可选，默认是0xffffffff。\r\n     * @return {[PhysicsRayCastResult]}\r\n     */\r\n    raycast (p1: IVec2Like, p2: IVec2Like, type: ERaycast2DType = ERaycast2DType.Closest, mask = 0xffffffff): readonly Readonly<RaycastResult2D>[] {\r\n        return this.physicsWorld.raycast(p1, p2, type, mask);\r\n    }\r\n\r\n    /**\r\n     * @en Test which colliders contain the point.\r\n     * @zh 检测给定点在哪些碰撞体内。\r\n     */\r\n    testPoint (p: Vec2): readonly Collider2D[] {\r\n        return this.physicsWorld.testPoint(p);\r\n    }\r\n\r\n    /**\r\n     * @en Test which colliders contain the point.\r\n     * @zh 检测给定点在哪些碰撞体内。\r\n     */\r\n    testAABB (rect: Rect): readonly Collider2D[] {\r\n        return this.physicsWorld.testAABB(rect);\r\n    }\r\n    static constructAndRegister (): void {\r\n        director.registerSystem(PhysicsSystem2D.ID, PhysicsSystem2D.instance, SystemPriority.LOW);\r\n    }\r\n}\r\n\r\nif (!BUILD || !LOAD_BOX2D_MANUALLY) {\r\n    director.once(DirectorEvent.INIT, (): void => { PhysicsSystem2D.constructAndRegister(); });\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec2 } from '../../core';\r\nimport { Collider2D } from '../framework/components/colliders/collider-2d';\r\n\r\n/**\r\n * @en\r\n * Contact impulses for reporting.\r\n * @zh\r\n * 用于返回给回调的接触冲量。\r\n */\r\nexport interface IPhysics2DImpulse {\r\n    /**\r\n     * @en\r\n     * Normal impulses.\r\n     * @zh\r\n     * 法线方向的冲量。\r\n     * @property normalImpulses\r\n     */\r\n    normalImpulses: number[],\r\n    /**\r\n     * @en\r\n     * Tangent impulses.\r\n     * @zh\r\n     * 切线方向的冲量。\r\n     * @property tangentImpulses\r\n     */\r\n    tangentImpulses: number[],\r\n}\r\n\r\n/**\r\n * @en\r\n * A world manifold.\r\n * @zh\r\n * 世界坐标系下的流形。\r\n */\r\nexport interface IPhysics2DWorldManifold {\r\n    /**\r\n     * @en\r\n     * world contact point (point of intersection)\r\n     * @zh\r\n     * 碰撞点集合\r\n     */\r\n    points: Vec2[],\r\n\r\n    /**\r\n     * @en\r\n     * a negative value indicates overlap.\r\n     * @zh\r\n     * 一个负数，用于指明重叠的部分。\r\n     */\r\n    separations: number[],\r\n\r\n    /**\r\n     * @en\r\n     * world vector pointing from A to B.\r\n     * @zh\r\n     * 世界坐标系下由 A 指向 B 的向量。\r\n     */\r\n    normal: Vec2,\r\n}\r\n\r\n/**\r\n * @en Manifold Type.\r\n * @zh 流形类型。\r\n */\r\nexport enum Physics2DManifoldType {\r\n    Circles,\r\n    FaceA,\r\n    FaceB\r\n}\r\n\r\n/**\r\n* @en\r\n* A manifold point is a contact point belonging to a contact manifold.\r\n* It holds details related to the geometry and dynamics of the contact points.\r\n* Note: the impulses are used for internal caching and may not\r\n* provide reliable contact forces, especially for high speed collisions.\r\n* @zh\r\n* ManifoldPoint 是接触信息中的接触点信息。它拥有关于几何和接触点的详细信息。\r\n* 注意：信息中的冲量用于系统内部缓存，提供的接触力可能不是很准确，特别是高速移动中的碰撞信息。\r\n*/\r\nexport interface IPhysics2DManifoldPoint {\r\n    /**\r\n    * @en\r\n    * The local point usage depends on the manifold type:\r\n    * - Physics2DManifoldType.Circles: the local center of circleB.\r\n    * - Physics2DManifoldType.FaceA: the local center of circleB or the clip point of polygonB.\r\n    * - Physics2DManifoldType.FaceB: the clip point of polygonA.\r\n    * @zh\r\n    * 本地坐标点的用途取决于 manifold 的类型。\r\n    * - Physics2DManifoldType.Circles: circleB 的本地中心点。\r\n    * - Physics2DManifoldType.FaceA: circleB 的本地中心点 或者是 polygonB 的截取点。\r\n    * - Physics2DManifoldType.FaceB: polygonB 的截取点。\r\n    */\r\n    localPoint: Vec2;\r\n    /**\r\n    * @en\r\n    * Normal impulse.\r\n    * @zh\r\n    * 法线冲量。\r\n    */\r\n    normalImpulse: number;\r\n    /**\r\n    * @en\r\n    * Tangent impulse.\r\n    * @zh\r\n    * 切线冲量。\r\n    */\r\n    tangentImpulse: number;\r\n}\r\n\r\n/**\r\n * @en Manifold.\r\n * @zh 流形。\r\n */\r\nexport interface IPhysics2DManifold {\r\n    /**\r\n     * @en\r\n     * Manifold type.\r\n     * @zh\r\n     * Manifold 类型。\r\n     */\r\n    type: Physics2DManifoldType,\r\n    /**\r\n     * @en\r\n     * The local point usage depends on the manifold type:\r\n     * -Physics2DManifoldType.Circles: the local center of circleA.\r\n     * -Physics2DManifoldType.FaceA: the center of faceA.\r\n     * -Physics2DManifoldType.FaceB: the center of faceB.\r\n     * @zh\r\n     * 用途取决于 manifold 类型\r\n     * -Physics2DManifoldType.Circles: circleA 的本地中心点。\r\n     * -Physics2DManifoldType.FaceA: faceA 的本地中心点。\r\n     * -Physics2DManifoldType.FaceB: faceB 的本地中心点。\r\n     */\r\n    localPoint: Vec2,\r\n    /**\r\n     * @en\r\n     * -Physics2DManifoldType.Circles: not used.\r\n     * -Physics2DManifoldType.FaceA: the normal on polygonA.\r\n     * -Physics2DManifoldType.FaceB: the normal on polygonB.\r\n     * @zh\r\n     * -Physics2DManifoldType.Circles: 没被使用到。\r\n     * -Physics2DManifoldType.FaceA: polygonA 的法向量。\r\n     * -Physics2DManifoldType.FaceB: polygonB 的法向量。\r\n     */\r\n    localNormal: Vec2,\r\n\r\n    /**\r\n     * @en\r\n     * the points of contact.\r\n     * @zh\r\n     * 接触点信息。\r\n     */\r\n    points: IPhysics2DManifoldPoint[],\r\n}\r\n\r\n/**\r\n * @en\r\n * PhysicsContact will be generated during begin and end collision as a parameter of the collision callback.\r\n * Note that contacts will be reused for speed up cpu time, so do not cache anything in the contact.\r\n * @zh\r\n * 物理接触会在开始和结束碰撞之间生成，并作为参数传入到碰撞回调函数中。\r\n * 注意：传入的物理接触会被系统进行重用，所以不要在使用中缓存里面的任何信息。\r\n */\r\nexport interface IPhysics2DContact {\r\n    /**\r\n     * @en\r\n     * One of the collider that collided.\r\n     * @zh\r\n     * 发生碰撞的碰撞体之一。\r\n     */\r\n    colliderA: Collider2D | null;\r\n    /**\r\n     * @en\r\n     * One of the collider that collided.\r\n     * @zh\r\n     * 发生碰撞的碰撞体之一。\r\n     */\r\n    colliderB: Collider2D | null;\r\n    /**\r\n     * @en\r\n     * If set disabled to true, the contact will be ignored until contact end.\r\n     * If you just want to disabled contact for current time step or sub-step, please use disabledOnce.\r\n     * @zh\r\n     * 如果 disabled 被设置为 true，那么直到接触结束此接触都将被忽略。\r\n     * 如果只是希望在当前时间步或子步中忽略此接触，请使用 disabledOnce 。\r\n     */\r\n    disabled: boolean;\r\n    /**\r\n     * @en\r\n     * Disabled contact for current time step or sub-step.\r\n     * @zh\r\n     * 在当前时间步或子步中忽略此接触。\r\n     */\r\n    disabledOnce: boolean;\r\n\r\n    /**\r\n     * @en\r\n     * Get the world manifold.\r\n     * @zh\r\n     * 获取世界坐标系下的碰撞信息。\r\n     */\r\n    getWorldManifold (): IPhysics2DWorldManifold;\r\n\r\n    /**\r\n     * @en\r\n     * Get the manifold.\r\n     * @zh\r\n     * 获取本地（局部）坐标系下的碰撞信息。\r\n     */\r\n    getManifold (): IPhysics2DManifold;\r\n\r\n    /**\r\n     * @en\r\n     * Get the impulses.\r\n     * Note: PhysicsImpulse can only used in onPostSolve callback.\r\n     * @zh\r\n     * 获取冲量信息。\r\n     * 注意：这个信息只有在 onPostSolve 回调中才能获取到。\r\n     */\r\n    getImpulse (): IPhysics2DImpulse | null;\r\n\r\n    /**\r\n     * @en\r\n     * Is this contact touching?\r\n     * @zh\r\n     * 返回碰撞体是否已经接触到。\r\n     */\r\n    isTouching (): boolean;\r\n    /**\r\n     * @en\r\n     * Set the desired tangent speed for a conveyor belt behavior.\r\n     * @zh\r\n     * 为传送带设置期望的切线速度。\r\n     */\r\n    setTangentSpeed (value: number);\r\n    /**\r\n     * @en\r\n     * Get the desired tangent speed.\r\n     * @zh\r\n     * 获取切线速度。\r\n     */\r\n    getTangentSpeed (): number;\r\n\r\n    /**\r\n     * @en\r\n     * Override the default friction mixture. You can call this in onPreSolve callback.\r\n     * @zh\r\n     * 覆盖默认的摩擦力系数。你可以在 onPreSolve 回调中调用此函数。\r\n     */\r\n    setFriction (value: number);\r\n    /**\r\n     * @en\r\n     * Get the friction.\r\n     * @zh\r\n     * 获取当前摩擦力系数。\r\n     */\r\n    getFriction (): number;\r\n    /**\r\n     * @en\r\n     * Override the default restitution mixture. You can call this in onPreSolve callback.\r\n     * @zh\r\n     * 覆盖默认的恢复系数。你可以在 onPreSolve 回调中调用此函数。\r\n     */\r\n    setRestitution (restitution: number);\r\n    /**\r\n     * @en\r\n     * Get the restitution.\r\n     * @zh\r\n     * 获取当前恢复系数。\r\n     */\r\n    getRestitution (): number;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { IRigidBody2D } from '../../spec/i-rigid-body';\r\nimport { _decorator, Vec2, IVec2Like, CCBoolean, CCFloat } from '../../../core';\r\nimport { ERigidBody2DType } from '../physics-types';\r\nimport { createRigidBody } from '../physics-selector';\r\nimport { PhysicsGroup } from '../../../physics/framework/physics-enum';\r\nimport { Component } from '../../../scene-graph';\r\nimport { help, serializable, tooltip } from '../../../core/data/decorators';\r\n\r\nconst { type, menu, ccclass } = _decorator;\r\n\r\n@ccclass('cc.RigidBody2D')\r\n@help('i18n:cc.RigidBody2D')\r\n@menu('Physics2D/RigidBody2D')\r\nexport class RigidBody2D extends Component {\r\n    /**\r\n     * @en\r\n     * Gets or sets the group of the rigid body.\r\n     * @zh\r\n     * 获取或设置分组。\r\n     */\r\n    @type(PhysicsGroup)\r\n    @tooltip('i18n:physics2d.rigidbody.group')\r\n    public get group (): number {\r\n        return this._group;\r\n    }\r\n    public set group (v: number) {\r\n        this._group = v;\r\n    }\r\n\r\n    @serializable\r\n    @tooltip('i18n:physics2d.rigidbody.enabledContactListener')\r\n    enabledContactListener = false;\r\n\r\n    /**\r\n     * @en\r\n     * Is this a fast moving body that should be prevented from tunneling through\r\n     * other moving bodies?\r\n     * Note :\r\n     * - All bodies are prevented from tunneling through kinematic and static bodies. This setting is only considered on dynamic bodies.\r\n     * - You should use this flag sparingly since it increases processing time.\r\n     * @zh\r\n     * 这个刚体是否是一个快速移动的刚体，并且需要禁止穿过其他快速移动的刚体？\r\n     * 需要注意的是 :\r\n     *  - 所有刚体都被禁止从 运动刚体 和 静态刚体 中穿过。此选项只关注于 动态刚体。\r\n     *  - 应该尽量少的使用此选项，因为它会增加程序处理时间。\r\n     */\r\n    @serializable\r\n    @tooltip('i18n:physics2d.rigidbody.bullet')\r\n    bullet = false;\r\n\r\n    /**\r\n     * @en\r\n     * Rigidbody type : Static, Kinematic, Dynamic or Animated.\r\n     * @zh\r\n     * 刚体类型： Static, Kinematic, Dynamic or Animated.\r\n     */\r\n    @type(ERigidBody2DType)\r\n    @tooltip('i18n:physics2d.rigidbody.type')\r\n    get type (): ERigidBody2DType {\r\n        return this._type;\r\n    }\r\n    set type (v: ERigidBody2DType) {\r\n        this._type = v;\r\n        if (this._body) {\r\n            if (v === ERigidBody2DType.Animated) {\r\n                this._body.setType(ERigidBody2DType.Kinematic);\r\n            } else {\r\n                this._body.setType(v);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Set this flag to false if this body should never fall asleep.\r\n     * Note that this increases CPU usage.\r\n     * @zh\r\n     * 如果此刚体永远都不应该进入睡眠，那么设置这个属性为 false。\r\n     * 需要注意这将使 CPU 占用率提高。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.rigidbody.allowSleep')\r\n    get allowSleep (): boolean {\r\n        return this._allowSleep;\r\n    }\r\n    set allowSleep (v: boolean) {\r\n        this._allowSleep = v;\r\n        if (this._body) {\r\n            this._body.setAllowSleep(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Scale the gravity applied to this body.\r\n     * @zh\r\n     * 缩放应用在此刚体上的重力值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.rigidbody.gravityScale')\r\n    get gravityScale (): number {\r\n        return this._gravityScale;\r\n    }\r\n    set gravityScale (v: number) {\r\n        this._gravityScale = v;\r\n        if (this._body) {\r\n            this._body.setGravityScale(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Linear damping is use to reduce the linear velocity.\r\n     * The damping parameter can be larger than 1, but the damping effect becomes sensitive to the\r\n     * time step when the damping parameter is large.\r\n     * @zh\r\n     * Linear damping 用于衰减刚体的线性速度。衰减系数可以大于 1，但是当衰减系数比较大的时候，衰减的效果会变得比较敏感。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.rigidbody.linearDamping')\r\n    get linearDamping (): number {\r\n        return this._linearDamping;\r\n    }\r\n    set linearDamping (v: number) {\r\n        this._linearDamping = v;\r\n        if (this._body) {\r\n            this._body.setLinearDamping(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Angular damping is use to reduce the angular velocity. The damping parameter\r\n     * can be larger than 1 but the damping effect becomes sensitive to the\r\n     * time step when the damping parameter is large.\r\n     * @zh\r\n     * Angular damping 用于衰减刚体的角速度。衰减系数可以大于 1，但是当衰减系数比较大的时候，衰减的效果会变得比较敏感。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.rigidbody.angularDamping')\r\n    get angularDamping (): number {\r\n        return this._angularDamping;\r\n    }\r\n    set angularDamping (v: number) {\r\n        this._angularDamping = v;\r\n        if (this._body) {\r\n            this._body.setAngularDamping(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The linear velocity of the body's origin in world co-ordinates.\r\n     * @zh\r\n     * 刚体在世界坐标下的线性速度。\r\n     */\r\n    @type(Vec2)\r\n    @tooltip('i18n:physics2d.rigidbody.linearVelocity')\r\n    get linearVelocity (): Vec2 {\r\n        if (this._body) {\r\n            this._body.getLinearVelocity(this._linearVelocity);\r\n        }\r\n        return this._linearVelocity;\r\n    }\r\n    set linearVelocity (v: Vec2) {\r\n        this._linearVelocity = v;\r\n        if (this._body) {\r\n            this._body.setLinearVelocity(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The angular velocity of the body in radians/second.\r\n     * @zh\r\n     * 刚体的角速度，单位是 弧度/秒。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.rigidbody.angularVelocity')\r\n    get angularVelocity (): number {\r\n        if (this._body) {\r\n            this._angularVelocity = this._body.getAngularVelocity();\r\n        }\r\n        return this._angularVelocity;\r\n    }\r\n    set angularVelocity (v: number) {\r\n        this._angularVelocity = v;\r\n        if (this._body) {\r\n            this._body.setAngularVelocity(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Should this body be prevented from rotating?\r\n     * @zh\r\n     * 是否禁止此刚体进行旋转。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.rigidbody.fixedRotation')\r\n    get fixedRotation (): boolean {\r\n        return this._fixedRotation;\r\n    }\r\n    set fixedRotation (v: boolean) {\r\n        this._fixedRotation = v;\r\n        if (this._body) {\r\n            this._body.setFixedRotation(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether to wake up this rigid body during initialization.\r\n     * @zh\r\n     * 是否在初始化时唤醒此刚体。\r\n     */\r\n    @serializable\r\n    @tooltip('i18n:physics2d.rigidbody.awakeOnLoad')\r\n    awakeOnLoad = true;\r\n\r\n    // /**\r\n    //  * @en\r\n    //  * Set the active state of the body. An inactive body is not\r\n    //  * simulated and cannot be collided with or woken up.\r\n    //  * If body is active, all fixtures will be added to the\r\n    //  * broad-phase.\r\n    //  * If body is inactive, all fixtures will be removed from\r\n    //  * the broad-phase and all contacts will be destroyed.\r\n    //  * Fixtures on an inactive body are implicitly inactive and will\r\n    //  * not participate in collisions, ray-casts, or queries.\r\n    //  * Joints connected to an inactive body are implicitly inactive.\r\n    //  * @zh\r\n    //  * 设置刚体的激活状态。一个非激活状态下的刚体是不会被模拟和碰撞的，不管它是否处于睡眠状态下。\r\n    //  * 如果刚体处于激活状态下，所有夹具会被添加到 粗测阶段（broad-phase）。\r\n    //  * 如果刚体处于非激活状态下，所有夹具会被从 粗测阶段（broad-phase）中移除。\r\n    //  * 在非激活状态下的夹具不会参与到碰撞，射线，或者查找中\r\n    //  * 链接到非激活状态下刚体的关节也是非激活的。\r\n    //  * @property {Boolean} active\r\n    //  * @default true\r\n    //  */\r\n    // get active () {\r\n    //     if (this._body) {\r\n    //         return this._body.isActive();\r\n    //     }\r\n    //     return false;\r\n    // }\r\n    // set active (v) {\r\n    //     if (this._body) {\r\n    //         this._body.setActive(v);\r\n    //     }\r\n    // }\r\n\r\n    /// RigidBody methods ///\r\n\r\n    /**\r\n     * @en\r\n     * Whether the rigid body is awake.\r\n     * @zh\r\n     * 获取刚体是否正在休眠。\r\n     */\r\n    isAwake (): boolean {\r\n        if (this._body) {\r\n            return this._body.isAwake;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Wake up the rigid body.\r\n     * @zh\r\n     * 唤醒刚体。\r\n     */\r\n    wakeUp (): void {\r\n        if (this._body) {\r\n            this._body.wakeUp();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Dormancy of rigid body.\r\n     * @zh\r\n     * 休眠刚体。\r\n     */\r\n    sleep (): void {\r\n        if (this._body) {\r\n            this._body.sleep();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get total mass of the body.\r\n     * @zh\r\n     * 获取刚体的质量。\r\n     */\r\n    getMass (): number {\r\n        if (this._body) {\r\n            return this._body.getMass();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply a force at a world point. If the force is not\r\n     * applied at the center of mass, it will generate a torque and\r\n     * affect the angular velocity.\r\n     * @zh\r\n     * 施加一个力到刚体上的一个点。如果力没有施加到刚体的质心上，还会产生一个扭矩并且影响到角速度。\r\n     * @param force @en the world force vector. @zh 世界坐标系下的力。\r\n     * @param point @en the world position. @zh 世界坐标系下的力的作用点。\r\n     * @param wake @en also wake up the body. @zh 唤醒刚体。\r\n     */\r\n    applyForce (force: Vec2, point: Vec2, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.applyForce(force, point, wake);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply a force to the center of mass.\r\n     * @zh\r\n     * 施加一个力到刚体上的质心上。\r\n     * @param force @en the world force vector. @zh 世界坐标系下的力。\r\n     * @param wake @en also wake up the body. @zh 唤醒刚体。\r\n     */\r\n    applyForceToCenter (force: Vec2, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.applyForceToCenter(force, wake);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply a torque. This affects the angular velocity.\r\n     * @zh\r\n     * 施加一个扭矩力，将影响刚体的角速度。\r\n     * @param torque @en about the z-axis (out of the screen), usually in N-m. @zh 扭矩 N-m。\r\n     * @param wake @en also wake up the body @zh 唤醒刚体。\r\n     */\r\n    applyTorque (torque: number, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.applyTorque(torque, wake);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply a impulse at a world point, this immediately modifies the velocity.\r\n     * If the impulse is not applied at the center of mass, it will generate a torque and\r\n     * affect the angular velocity.\r\n     * @zh\r\n     * 施加冲量到刚体上的一个点，将立即改变刚体的线性速度。\r\n     * 如果冲量施加到的点不是刚体的质心，那么将产生一个扭矩并影响刚体的角速度。\r\n     * @param impulse @en the world impulse vector, usually in N-seconds or kg-m/s. @zh 冲量 N-seconds 或者 kg-m/s。\r\n     * @param point @en the world position. @zh 世界坐标系下的作用点。\r\n     * @param wake @en also wake up the body. @zh 唤醒刚体。\r\n     */\r\n    applyLinearImpulse (impulse: Vec2, point: Vec2, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.applyLinearImpulse(impulse, point, wake);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply a impulse at the center of mass, this immediately modifies the velocity.\r\n     * @zh\r\n     * 施加冲量到刚体上的质心点，将立即改变刚体的线性速度。\r\n     * @param impulse @en the world impulse vector, usually in N-seconds or kg-m/s. @zh 冲量 N-seconds 或者 kg-m/s。\r\n     * @param wake @en also wake up the body @zh 唤醒刚体。\r\n     */\r\n    applyLinearImpulseToCenter (impulse: Vec2, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.applyLinearImpulseToCenter(impulse, wake);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Apply an angular impulse.\r\n     * @zh\r\n     * 施加一个角冲量。\r\n     * @param impulse @en the angular impulse in units of kg*m*m/s. @zh 角冲量 kg*m*m/s。\r\n     * @param wake @en also wake up the body. @zh 唤醒刚体。\r\n     */\r\n    applyAngularImpulse (impulse: number, wake: boolean): void {\r\n        if (this._body) {\r\n            this._body.applyAngularImpulse(impulse, wake);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the world linear velocity of a world point attached to this body.\r\n     * @zh\r\n     * 获取刚体上指定点的线性速度。\r\n     * @param worldPoint @en a point in world coordinates. @zh 世界坐标系下的点。\r\n     * @param out @en optional, the returned world velocity. @zh 可选，返回的世界坐标系下的速度。\r\n     * @return @en the world linear velocity. @zh 指定点的世界坐标系下的速度。\r\n     */\r\n    getLinearVelocityFromWorldPoint<Out extends IVec2Like> (worldPoint: IVec2Like, out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getLinearVelocityFromWorldPoint(worldPoint, out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Converts a world coordinate point to the given rigid body coordinate.\r\n     * @zh\r\n     * 将一个给定的世界坐标系下的向量转换为刚体本地坐标系下的向量。\r\n     * @param worldVector @en a vector in world coordinates. @zh 世界坐标系下的向量。\r\n     * @param out @en optional, the returned vector in local coordinate. @zh 可选，返回的本地坐标系下的向量。\r\n     * @return @en a vector in local coordinate. @zh 本地坐标系下的向量。\r\n     */\r\n    getLocalVector<Out extends IVec2Like> (worldVector: IVec2Like, out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getLocalVector(worldVector, out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Converts a given vector in this rigid body's local coordinate system to the world coordinate system\r\n     * @zh\r\n     * 将一个给定的刚体本地坐标系下的向量转换为世界坐标系下的向量。\r\n     * @param localVector @en a vector in local coordinates. @zh 本地坐标系下的向量。\r\n     * @param out @en optional, the returned vector in world coordinate. @zh 可选，返回的世界坐标系下的向量。\r\n     * @return @en a vector in world coordinate. @zh 世界坐标系下的向量。\r\n     */\r\n    getWorldVector<Out extends IVec2Like> (localVector: IVec2Like, out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getWorldVector(localVector, out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Converts a given point in the world coordinate system to this rigid body's local coordinate system.\r\n     * @zh\r\n     * 将一个给定的世界坐标系下的点转换为刚体本地坐标系下的点。\r\n     * @param worldPoint @en a point in world coordinates. @zh 世界坐标系下的点。\r\n     * @param out @en optional, the returned point in local coordinate. @zh 可选，返回的本地坐标系下的点。\r\n     * @return @en a point in local coordinate. @zh 本地坐标系下的点。\r\n     */\r\n    getLocalPoint<Out extends IVec2Like> (worldPoint: IVec2Like, out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getLocalPoint(worldPoint, out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Converts a given point in this rigid body's local coordinate system to the world coordinate system.\r\n     * @zh\r\n     * 将一个给定的刚体本地坐标系下的点转换为世界坐标系下的点。\r\n     * @param localPoint @en a point in local coordinate. @zh 本地坐标系下的点。\r\n     * @param out @en optional, the returned point in world coordinate. @zh 可选，返回的世界坐标系下的点。\r\n     * @return @en a point in world coordinate. @zh 世界坐标系下的点。\r\n     */\r\n    getWorldPoint<Out extends IVec2Like> (localPoint: IVec2Like, out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getWorldPoint(localPoint, out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the local position of the center of mass.\r\n     * @zh\r\n     * 获取刚体本地坐标系下的质心。\r\n     */\r\n    getLocalCenter<Out extends IVec2Like> (out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getLocalCenter(out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the world position of the center of mass.\r\n     * @zh\r\n     * 获取刚体世界坐标系下的质心。\r\n     */\r\n    getWorldCenter<Out extends IVec2Like> (out: Out): Out {\r\n        if (this._body) {\r\n            return this._body.getWorldCenter(out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the rotational inertia of the body about the local origin.\r\n     * @zh\r\n     * 获取刚体本地坐标系下原点的旋转惯性。\r\n     */\r\n    getInertia (): number {\r\n        if (this._body) {\r\n            return this._body.getInertia();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// COMPONENT LIFECYCLE ///\r\n    protected onLoad (): void {\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._body = createRigidBody();\r\n            this._body.initialize(this);\r\n        }\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        if (this._body) {\r\n            this._body.onEnable!();\r\n        }\r\n    }\r\n\r\n    protected onDisable (): void {\r\n        if (this._body) {\r\n            this._body.onDisable!();\r\n        }\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        if (this._body) {\r\n            this._body.onDestroy!();\r\n        }\r\n    }\r\n\r\n    private _body: IRigidBody2D | null = null;\r\n    get impl (): IRigidBody2D | null {\r\n        return this._body;\r\n    }\r\n\r\n    @serializable\r\n    private _group = PhysicsGroup.DEFAULT;\r\n\r\n    @serializable\r\n    private _type = ERigidBody2DType.Dynamic;\r\n\r\n    @serializable\r\n    private _allowSleep = true;\r\n\r\n    @serializable\r\n    private _gravityScale = 1;\r\n\r\n    @serializable\r\n    private _linearDamping = 0;\r\n\r\n    @serializable\r\n    private _angularDamping = 0;\r\n\r\n    @serializable\r\n    private _linearVelocity = new Vec2();\r\n\r\n    @serializable\r\n    private _angularVelocity = 0;\r\n\r\n    @serializable\r\n    private _fixedRotation = false;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\n\r\nimport { Vec2, Rect, _decorator, Eventify, tooltip, serializable, CCFloat, CCBoolean } from '../../../../core';\r\nimport { PhysicsGroup } from '../../../../physics/framework/physics-enum';\r\n\r\nimport { RigidBody2D } from '../rigid-body-2d';\r\nimport { createShape } from '../../physics-selector';\r\nimport { ECollider2DType } from '../../physics-types';\r\nimport { IBaseShape } from '../../../spec/i-physics-shape';\r\nimport { Component } from '../../../../scene-graph';\r\n\r\nconst { ccclass, editable, type } = _decorator;\r\n\r\n@ccclass('cc.Collider2D')\r\nexport class Collider2D extends Eventify(Component) {\r\n    @editable\r\n    @tooltip('i18n:physics2d.collider.editing')\r\n    editing = false;\r\n    /**\r\n     * @en Tag. If a node has several collider components, you can judge which type of collider is collided according to the tag.\r\n     * @zh 标签。当一个节点上有多个碰撞组件时，在发生碰撞后，可以使用此标签来判断是节点上的哪个碰撞组件被碰撞了。\r\n     */\r\n    @type(CCFloat)\r\n    @serializable\r\n    @tooltip('i18n:physics2d.collider.tag')\r\n    tag = 0;\r\n\r\n    /**\r\n     * @en\r\n     * Gets or sets the group of the rigid body.\r\n     * @zh\r\n     * 获取或设置分组。\r\n     */\r\n    @type(PhysicsGroup)\r\n    @tooltip('i18n:physics2d.collider.group')\r\n    public get group (): number {\r\n        return this._group;\r\n    }\r\n    public set group (v: number) {\r\n        this._group = v;\r\n        if (this._shape && this._shape.onGroupChanged) {\r\n            this._shape.onGroupChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The density.\r\n     * @zh 密度。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.collider.density')\r\n    get density (): number {\r\n        return this._density;\r\n    }\r\n    set density (v) {\r\n        this._density = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * A sensor collider collects contact information but never generates a collision response\r\n     * @zh\r\n     * 一个传感器类型的碰撞体会产生碰撞回调，但是不会发生物理碰撞效果。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.collider.sensor')\r\n    get sensor (): boolean {\r\n        return this._sensor;\r\n    }\r\n    set sensor (v) {\r\n        this._sensor = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The friction coefficient, usually in the range [0,1].\r\n     * @zh\r\n     * 摩擦系数，取值一般在 [0, 1] 之间。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.collider.friction')\r\n    get friction (): number {\r\n        return this._friction;\r\n    }\r\n    set friction (v) {\r\n        this._friction = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The restitution (elasticity) usually in the range [0,1].\r\n     * @zh\r\n     * 弹性系数，取值一般在 [0, 1]之间。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.collider.restitution')\r\n    get restitution (): number {\r\n        return this._restitution;\r\n    }\r\n    set restitution (v) {\r\n        this._restitution = v;\r\n    }\r\n    /**\r\n     * @en Position offset\r\n     * @zh 位置偏移量\r\n     */\r\n    @type(Vec2)\r\n    @tooltip('i18n:physics2d.collider.offset')\r\n    get offset (): Vec2 {\r\n        return this._offset;\r\n    }\r\n    set offset (v) {\r\n        this._offset = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Physics collider will find the rigidbody component on the node and set to this property.\r\n     * @zh\r\n     * 碰撞体会在初始化时查找节点上是否存在刚体，如果查找成功则赋值到这个属性上。\r\n     */\r\n    get body (): RigidBody2D | null {\r\n        return this._body;\r\n    }\r\n\r\n    get impl (): IBaseShape | null {\r\n        return this._shape;\r\n    }\r\n\r\n    readonly TYPE: ECollider2DType = ECollider2DType.None;\r\n\r\n    /// COMPONENT LIFECYCLE ///\r\n\r\n    protected onLoad (): void {\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._shape = createShape(this.TYPE);\r\n            this._shape.initialize(this);\r\n\r\n            if (this._shape.onLoad) {\r\n                this._shape.onLoad();\r\n            }\r\n\r\n            this._body = this.getComponent(RigidBody2D);\r\n        }\r\n    }\r\n\r\n    protected onEnable (): void {\r\n        if (this._shape) {\r\n            this._shape.onEnable!();\r\n        }\r\n    }\r\n\r\n    protected onDisable (): void {\r\n        if (this._shape && this._shape.onDisable) {\r\n            this._shape.onDisable();\r\n        }\r\n    }\r\n\r\n    protected onDestroy (): void {\r\n        if (this._shape && this._shape.onDestroy) {\r\n            this._shape.onDestroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * If the physics engine is box2d, need to call this function to apply current changes to collider, this will regenerate inner box2d fixtures.\r\n     * @zh\r\n     * 如果物理引擎是 box2d, 需要调用此函数来应用当前 collider 中的修改，调用此函数会重新生成 box2d 的夹具。\r\n     */\r\n    apply (): void {\r\n        if (this._shape && this._shape.apply) {\r\n            this._shape.apply();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get the world aabb of the collider.\r\n     * @zh\r\n     * 获取碰撞体的世界坐标系下的包围盒。\r\n     */\r\n    get worldAABB (): Readonly<Rect> {\r\n        if (this._shape) {\r\n            return this._shape.worldAABB;\r\n        }\r\n\r\n        return new Rect();\r\n    }\r\n\r\n    // protected properties\r\n\r\n    protected _shape: IBaseShape | null = null;\r\n    protected _body: RigidBody2D | null = null;\r\n\r\n    @serializable\r\n    protected _group = PhysicsGroup.DEFAULT;\r\n    @serializable\r\n    protected _density = 1.0;\r\n    @serializable\r\n    protected _sensor = false;\r\n    @serializable\r\n    protected _friction = 0.2;\r\n    @serializable\r\n    protected _restitution = 0;\r\n    @serializable\r\n    protected _offset = new Vec2();\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { Vec2, _decorator, tooltip, serializable } from '../../../../core';\r\nimport { RigidBody2D } from '../rigid-body-2d';\r\nimport { IJoint2D } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { createJoint } from '../../physics-selector';\r\nimport { Component } from '../../../../scene-graph';\r\n\r\nconst { ccclass, type } = _decorator;\r\n\r\n@ccclass('cc.Joint2D')\r\nexport class Joint2D extends Component {\r\n    /**\r\n     * @en\r\n     * The position of Joint2D in the attached rigid body's local space.\r\n     * @zh\r\n     * 在自身刚体的本地空间中，Joint2D的位置。\r\n     */\r\n    @serializable\r\n    @tooltip('i18n:physics2d.joint.anchor')\r\n    anchor = new Vec2();\r\n\r\n    /**\r\n     * @en\r\n     * The position of Joint2D in the connected rigid body's local space.\r\n     * @zh\r\n     * 在连接刚体的本地空间中，Joint2D的位置。\r\n     */\r\n    @serializable\r\n    @tooltip('i18n:physics2d.joint.connectedAnchor')\r\n    connectedAnchor = new Vec2();\r\n\r\n    /**\r\n     * @en\r\n     * whether collision is turned on between two rigid bodies connected by a joint.\r\n     * @zh\r\n     * 关节连接的两刚体之间是否开启碰撞。\r\n     */\r\n    @serializable\r\n    @tooltip('i18n:physics2d.joint.collideConnected')\r\n    collideConnected = false;\r\n\r\n    /**\r\n     * @en\r\n     * The jointed rigid body, null means link to a static rigid body at the world origin.\r\n     * @zh\r\n     * 关节连接的刚体，为空时表示连接到位于世界原点的静态刚体。\r\n     */\r\n    @type(RigidBody2D)\r\n    @serializable\r\n    @tooltip('i18n:physics2d.joint.connectedBody')\r\n    connectedBody: RigidBody2D | null = null;\r\n\r\n    /**\r\n     * @en\r\n     * the Joint2D attached rigid-body.\r\n     * @zh\r\n     * 关节所绑定的刚体组件。\r\n     */\r\n    _body: RigidBody2D | null = null;\r\n    get body (): RigidBody2D | null {\r\n        return this._body;\r\n    }\r\n\r\n    get impl (): IJoint2D | null {\r\n        return this._joint;\r\n    }\r\n\r\n    protected _joint: IJoint2D | null = null;\r\n\r\n    /**\r\n     * @en\r\n     * the type of this joint.\r\n     * @zh\r\n     * 此关节的类型。\r\n     */\r\n    TYPE = EJoint2DType.None;\r\n\r\n    protected override onLoad (): void {\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            this._joint = createJoint(this.TYPE);\r\n            this._joint.initialize(this);\r\n\r\n            this._body = this.getComponent(RigidBody2D);\r\n        }\r\n    }\r\n\r\n    protected override onEnable (): void {\r\n        if (this._joint && this._joint.onEnable) {\r\n            this._joint.onEnable();\r\n        }\r\n    }\r\n\r\n    protected override onDisable (): void {\r\n        if (this._joint && this._joint.onDisable) {\r\n            this._joint.onDisable();\r\n        }\r\n    }\r\n\r\n    protected override start (): void {\r\n        if (this._joint && this._joint.start) {\r\n            this._joint.start();\r\n        }\r\n    }\r\n\r\n    protected override onDestroy (): void {\r\n        if (this._joint && this._joint.onDestroy) {\r\n            this._joint.onDestroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * If the physics engine is box2d, need to call this function to apply current changes to joint, this will regenerate inner box2d joint.\r\n     * @zh\r\n     * 如果物理引擎是 box2d, 需要调用此函数来应用当前 joint 中的修改。\r\n     */\r\n    apply (): void {\r\n        if (this._joint && this._joint.apply) {\r\n            this._joint.apply();\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec2, Size, _decorator } from '../../../../core';\r\nimport { Collider2D } from './collider-2d';\r\nimport { ECollider2DType } from '../../physics-types';\r\nimport { IBoxShape } from '../../../spec/i-physics-shape';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.BoxCollider2D')\r\n@help('i18n:cc.BoxCollider2D')\r\n@menu('Physics2D/Colliders/BoxCollider2D')\r\nexport class BoxCollider2D extends Collider2D {\r\n    @serializable\r\n    private _size = new Size(1, 1);\r\n\r\n    /**\r\n     * @en Box size.\r\n     * @zh 包围盒大小。\r\n     */\r\n    @type(Size)\r\n    @tooltip('i18n:physics2d.collider.size')\r\n    get size (): Size {\r\n        return this._size;\r\n    }\r\n    set size (v) {\r\n        this._size = v;\r\n    }\r\n\r\n    /**\r\n     * @en Get world points.\r\n     * @zh 世界坐标下 BoX 的四个点。\r\n     */\r\n    get worldPoints (): readonly Readonly<Vec2>[] {\r\n        if (this._shape) {\r\n            return (this._shape as IBoxShape).worldPoints;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    readonly TYPE = ECollider2DType.BOX;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CCFloat, Vec2, _decorator } from '../../../../core';\r\nimport { Collider2D } from './collider-2d';\r\nimport { ECollider2DType } from '../../physics-types';\r\nimport { ICircleShape } from '../../../spec/i-physics-shape';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.CircleCollider2D')\r\n@help('i18n:cc.CircleCollider2D')\r\n@menu('Physics2D/Colliders/CircleCollider2D')\r\nexport class CircleCollider2D extends Collider2D {\r\n    @serializable\r\n    private _radius = 1;\r\n\r\n    /**\r\n     * @en Circle radius.\r\n     * @zh 圆形半径。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.collider.radius')\r\n    get radius (): number {\r\n        return this._radius;\r\n    }\r\n    set radius (v) {\r\n        this._radius = v < 0 ? 0 : v;\r\n    }\r\n\r\n    /**\r\n     * @en Get world center of the circle collider.\r\n     * @zh 世界坐标下圆形碰撞体的中心。\r\n     */\r\n    get worldPosition (): Readonly<Vec2> {\r\n        if (this._shape) {\r\n            return (this._shape as ICircleShape).worldPosition;\r\n        }\r\n        return new Vec2();\r\n    }\r\n    /**\r\n     * @en Get world radius of the circle collider.\r\n     * @zh 世界坐标下圆形碰撞体的半径。\r\n     */\r\n    get worldRadius (): number {\r\n        if (this._shape) {\r\n            return (this._shape as ICircleShape).worldRadius;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    readonly TYPE = ECollider2DType.CIRCLE;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { CCFloat, Vec2, _decorator } from '../../../../core';\r\nimport { Collider2D } from './collider-2d';\r\nimport { ECollider2DType } from '../../physics-types';\r\nimport { IPolygonShape } from '../../../spec/i-physics-shape';\r\nimport { displayOrder, help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.PolygonCollider2D')\r\n@help('i18n:cc.PolygonCollider2D')\r\n@menu('Physics2D/Colliders/PolygonCollider2D')\r\nexport class PolygonCollider2D extends Collider2D {\r\n    @type(CCFloat)\r\n    @displayOrder(0)\r\n    @tooltip('i18n:physics2d.collider.threshold')\r\n    threshold = 1;\r\n\r\n    @serializable\r\n    private _points = [new Vec2(-1, -1), new Vec2(1, -1), new Vec2(1, 1), new Vec2(-1, 1)];\r\n\r\n    /**\r\n     * @en Polygon points.\r\n     * @zh 多边形顶点数组。\r\n     */\r\n    @type([Vec2])\r\n    @tooltip('i18n:physics2d.collider.points')\r\n    get points (): Vec2[] {\r\n        return this._points;\r\n    }\r\n    set points (v) {\r\n        this._points = v;\r\n    }\r\n\r\n    /**\r\n     * @en Get world points.\r\n     * @zh 世界坐标下多边形碰撞体的点。\r\n     */\r\n    get worldPoints (): readonly Readonly<Vec2>[] {\r\n        if (this._shape) {\r\n            return (this._shape as IPolygonShape).worldPoints;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    readonly TYPE = ECollider2DType.POLYGON;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { IRelativeJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { Vec3, Vec2, IVec2Like, Quat, _decorator, CCFloat, CCBoolean } from '../../../../core';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst tempVec3_1 = new Vec3();\r\nconst tempVec3_2 = new Vec3();\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.RelativeJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/RelativeJoint2D')\r\nexport class RelativeJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.RELATIVE;\r\n\r\n    /**\r\n     * @en\r\n     * The maximum force can be applied to rigidbody.\r\n     * @zh\r\n     * 可以应用于刚体的最大的力值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxForce')\r\n    get maxForce (): number {\r\n        return this._maxForce;\r\n    }\r\n    set maxForce (v: number) {\r\n        this._maxForce = v;\r\n        if (this._joint) {\r\n            (this._joint as IRelativeJoint).setMaxForce(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The maximum torque can be applied to rigidbody.\r\n     * @zh\r\n     * 可以应用于刚体的最大扭矩值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxTorque')\r\n    get maxTorque (): number {\r\n        return this._maxTorque;\r\n    }\r\n    set maxTorque (v: number) {\r\n        this._maxTorque = v;\r\n        if (this._joint) {\r\n            (this._joint as IRelativeJoint).setMaxTorque(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The position correction factor in the range [0,1].\r\n     * @zh\r\n     * 位置矫正系数，范围为 [0, 1]。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.correctionFactor')\r\n    get correctionFactor (): number {\r\n        return this._correctionFactor;\r\n    }\r\n    set correctionFactor (v: number) {\r\n        this._correctionFactor = v;\r\n        if (this._joint) {\r\n            (this._joint as IRelativeJoint).setCorrectionFactor(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The linear offset from connected rigidbody to rigidbody.\r\n     * @zh\r\n     * 关节另一端的刚体相对于起始端刚体的位置偏移量。\r\n     */\r\n    @type(Vec2)\r\n    @tooltip('i18n:physics2d.joint.linearOffset')\r\n    get linearOffset (): Vec2 {\r\n        if (this._autoCalcOffset) {\r\n            if (this.connectedBody) {\r\n                return Vec2.subtract(\r\n                    this._linearOffset,\r\nthis.connectedBody.node.worldPosition as IVec2Like,\r\nthis.node.worldPosition as IVec2Like,\r\n                ) as Vec2;\r\n            } else { //if connected body is not set, use scene origin as connected body\r\n                return Vec2.subtract(\r\n                    this._linearOffset,\r\n                    new Vec2(0, 0),\r\nthis.node.worldPosition as IVec2Like,\r\n                ) as Vec2;\r\n            }\r\n        }\r\n        return this._linearOffset;\r\n    }\r\n    set linearOffset (v: Vec2) {\r\n        this._linearOffset.set(v);\r\n        if (this._joint) {\r\n            (this._joint as IRelativeJoint).setLinearOffset(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The angular offset from connected rigidbody to rigidbody.\r\n     * @zh\r\n     * 关节另一端的刚体相对于起始端刚体的角度偏移量。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.angularOffset')\r\n    get angularOffset (): number {\r\n        if (this._autoCalcOffset) {\r\n            Quat.toEuler(tempVec3_1, this.node.worldRotation);\r\n            if (this.connectedBody) {\r\n                Quat.toEuler(tempVec3_2, this.connectedBody.node.worldRotation);\r\n            } else { //if connected body is not set, use scene origin as connected body\r\n                Quat.toEuler(tempVec3_2, new Quat());//?\r\n            }\r\n            this._angularOffset = tempVec3_2.z - tempVec3_1.z;\r\n        }\r\n        return this._angularOffset;\r\n    }\r\n    set angularOffset (v: number) {\r\n        this._angularOffset = v;\r\n        if (this._joint) {\r\n            (this._joint as IRelativeJoint).setAngularOffset(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Auto calculate the angularOffset and linearOffset between the connected two rigid bodies.\r\n     * @zh\r\n     * 自动计算关节连接的两个刚体间的 angularOffset 和 linearOffset。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.autoCalcOffset')\r\n    get autoCalcOffset (): boolean {\r\n        return this._autoCalcOffset;\r\n    }\r\n    set autoCalcOffset (v: boolean) {\r\n        this._autoCalcOffset = v;\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _maxForce = 5;\r\n\r\n    @serializable\r\n    private _maxTorque = 0.7;\r\n\r\n    @serializable\r\n    private _correctionFactor = 0.3;\r\n\r\n    @serializable\r\n    private _angularOffset = 0;\r\n\r\n    @serializable\r\n    private _linearOffset = new Vec2();\r\n\r\n    @serializable\r\n    private _autoCalcOffset = true;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { IDistanceJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { CCBoolean, CCFloat, Vec3, _decorator } from '../../../../core';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.DistanceJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/DistanceJoint2D')\r\nexport class DistanceJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.DISTANCE;\r\n\r\n    /**\r\n     * @en\r\n     * The max length.\r\n     * @zh\r\n     * 最大长度。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxLength')\r\n    get maxLength (): number {\r\n        if (this._autoCalcDistance) {\r\n            if (this.connectedBody) {\r\n                return Vec3.distance(this.node.worldPosition, this.connectedBody.node.worldPosition);\r\n            } else { //if connected body is not set, use scene origin as connected body\r\n                return Vec3.len(this.node.worldPosition);\r\n            }\r\n        }\r\n        return this._maxLength;\r\n    }\r\n    set maxLength (v) {\r\n        this._maxLength = v;\r\n        if (this._joint) {\r\n            (this._joint as IDistanceJoint).setMaxLength(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Auto calculate the distance between the connected two rigid bodies.\r\n     * @zh\r\n     * 自动计算关节连接的两个刚体间的距离。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.autoCalcDistance')\r\n    get autoCalcDistance (): boolean {\r\n        return this._autoCalcDistance;\r\n    }\r\n    set autoCalcDistance (v) {\r\n        this._autoCalcDistance = v;\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _maxLength = 5;\r\n\r\n    @serializable\r\n    private _autoCalcDistance = true;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { ISpringJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { CCBoolean, CCFloat, Vec3, _decorator } from '../../../../core';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.SpringJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/SpringJoint2D')\r\nexport class SpringJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.SPRING;\r\n\r\n    /**\r\n     * @en\r\n     * The spring frequency.\r\n     * @zh\r\n     * 弹性系数。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.frequency')\r\n    get frequency (): number {\r\n        return this._frequency;\r\n    }\r\n    set frequency (v) {\r\n        this._frequency = v;\r\n        if (this._joint) {\r\n            (this._joint as ISpringJoint).setFrequency(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The damping ratio.\r\n     * @zh\r\n     * 阻尼，表示关节变形后，恢复到初始状态受到的阻力。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.dampingRatio')\r\n    get dampingRatio (): number {\r\n        return this._dampingRatio;\r\n    }\r\n    set dampingRatio (v) {\r\n        this._dampingRatio = v;\r\n        if (this._joint) {\r\n            (this._joint as ISpringJoint).setDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The distance separating the two ends of the joint.\r\n     * @zh\r\n     * 关节两端的距离。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.distance')\r\n    get distance (): number {\r\n        if (this._autoCalcDistance) {\r\n            if (this.connectedBody) {\r\n                return Vec3.distance(this.node.worldPosition, this.connectedBody.node.worldPosition);\r\n            } else { //if connected body is not set, use scene origin as connected body\r\n                return Vec3.len(this.node.worldPosition);\r\n            }\r\n        }\r\n        return this._distance;\r\n    }\r\n    set distance (v) {\r\n        this._distance = v;\r\n        if (this._joint) {\r\n            (this._joint as ISpringJoint).setDistance(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Auto calculate the distance between the connected two rigid bodies.\r\n     * @zh\r\n     * 自动计算关节连接的两个刚体间的距离。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.autoCalcDistance')\r\n    get autoCalcDistance (): boolean {\r\n        return this._autoCalcDistance;\r\n    }\r\n    set autoCalcDistance (v) {\r\n        this._autoCalcDistance = v;\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _frequency = 5;\r\n\r\n    @serializable\r\n    private _dampingRatio = 0.7;\r\n\r\n    @serializable\r\n    private _distance = 10;\r\n\r\n    @serializable\r\n    private _autoCalcDistance = true;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { IMouseJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { CCFloat, Vec2, _decorator } from '../../../../core';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.MouseJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/MouseJoint2D')\r\nexport class MouseJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.MOUSE;\r\n\r\n    get target (): Vec2 {\r\n        return this._target;\r\n    }\r\n    set target (v) {\r\n        this._target = v;\r\n        if (this._joint) {\r\n            (this._joint as IMouseJoint).setTarget(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The spring frequency.\r\n     * @zh\r\n     * 弹簧系数。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.frequency')\r\n    get frequency (): number {\r\n        return this._frequency;\r\n    }\r\n    set frequency (v: number) {\r\n        this._frequency = v;\r\n        if (this._joint) {\r\n            (this._joint as IMouseJoint).setFrequency(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The damping ratio.\r\n     * @zh\r\n     * 阻尼，表示关节变形后，恢复到初始状态受到的阻力。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.dampingRatio')\r\n    get dampingRatio (): number {\r\n        return this._dampingRatio;\r\n    }\r\n    set dampingRatio (v: number) {\r\n        this._dampingRatio = v;\r\n        if (this._joint) {\r\n            (this._joint as IMouseJoint).setDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The maximum force.\r\n     * @zh\r\n     * 最大阻力值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxForce')\r\n    get maxForce (): number {\r\n        return this._maxForce;\r\n    }\r\n    set maxForce (v: number) {\r\n        this._maxForce = v;\r\n        if (this._joint) {\r\n            (this._joint as IMouseJoint).setMaxForce(v);\r\n        }\r\n    }\r\n\r\n    update (dt: number): void {\r\n        this._joint!.update!(dt);\r\n    }\r\n\r\n    @serializable\r\n    private _maxForce = 1000;\r\n\r\n    @serializable\r\n    private _dampingRatio = 0.7;\r\n\r\n    @serializable\r\n    private _frequency = 5;\r\n\r\n    private _target = new Vec2();\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { ISliderJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { Vec2, IVec2Like, toDegree, _decorator, CCFloat, CCBoolean } from '../../../../core';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst tempVec2 = new Vec2();\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.SliderJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/SliderJoint2D')\r\nexport class SliderJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.SLIDER;\r\n\r\n    /**\r\n     * @en Slide direction.\r\n     * @zh 滑动的方向。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.angle')\r\n    get angle (): number {\r\n        if (this._autoCalcAngle) {\r\n            if (this.connectedBody) {\r\n                Vec2.subtract(tempVec2, this.connectedBody.node.worldPosition as IVec2Like, this.node.worldPosition as IVec2Like);\r\n            } else {\r\n                Vec2.subtract(tempVec2, new Vec2(0, 0), this.node.worldPosition as IVec2Like);\r\n            }\r\n            this._angle = toDegree(Math.atan2(tempVec2.y, tempVec2.x));\r\n        }\r\n        return this._angle;\r\n    }\r\n    set angle (v: number) {\r\n        this._angle = v;\r\n    }\r\n\r\n    /**\r\n     * @en Auto calculate slide direction according to the slide direction.\r\n     * @zh 根据连接的两个刚体自动计算滑动方向。\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.autoCalcAngle')\r\n    get autoCalcAngle (): boolean {\r\n        return this._autoCalcAngle;\r\n    }\r\n    set autoCalcAngle (v: boolean) {\r\n        this._autoCalcAngle = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Enable joint motor?\r\n     * @zh\r\n     * 是否开启关节马达？\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.enableMotor')\r\n    get enableMotor (): boolean {\r\n        return this._enableMotor;\r\n    }\r\n    set enableMotor (v: boolean) {\r\n        this._enableMotor = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The maxium force can be applied to rigidbody to rearch the target motor speed.\r\n     * @zh\r\n     * 可以施加到刚体的最大力。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxMotorForce')\r\n    get maxMotorForce (): number {\r\n        return this._maxMotorForce;\r\n    }\r\n    set maxMotorForce (v: number) {\r\n        this._maxMotorForce = v;\r\n        if (this._joint) {\r\n            (this._joint as ISliderJoint).setMaxMotorForce(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The expected motor speed.\r\n     * @zh\r\n     * 期望的马达速度。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.motorSpeed')\r\n    get motorSpeed (): number {\r\n        return this._motorSpeed;\r\n    }\r\n    set motorSpeed (v: number) {\r\n        this._motorSpeed = v;\r\n        if (this._joint) {\r\n            (this._joint as ISliderJoint).setMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Enable joint distance limit?\r\n     * @zh\r\n     * 是否开启关节的距离限制？\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.enableLimit')\r\n    get enableLimit (): boolean {\r\n        return this._enableLimit;\r\n    }\r\n    set enableLimit (v: boolean) {\r\n        this._enableLimit = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The lower joint limit.\r\n     * @zh\r\n     * 刚体能够移动的最小值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.lowerLimit')\r\n    get lowerLimit (): number {\r\n        return this._lowerLimit;\r\n    }\r\n    set lowerLimit (v: number) {\r\n        this._lowerLimit = v;\r\n        if (this._joint) {\r\n            (this._joint as ISliderJoint).setLowerLimit(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The lower joint limit.\r\n     * @zh\r\n     * 刚体能够移动的最大值。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.upperLimit')\r\n    get upperLimit (): number {\r\n        return this._upperLimit;\r\n    }\r\n    set upperLimit (v: number) {\r\n        this._upperLimit = v;\r\n        if (this._joint) {\r\n            (this._joint as ISliderJoint).setUpperLimit(v);\r\n        }\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _angle = 0;\r\n\r\n    @serializable\r\n    private _autoCalcAngle = true;\r\n\r\n    @serializable\r\n    private _enableMotor = false;\r\n\r\n    @serializable\r\n    private _maxMotorForce = 1000;\r\n\r\n    @serializable\r\n    private _motorSpeed = 1000;\r\n\r\n    @serializable\r\n    private _enableLimit = false;\r\n\r\n    @serializable\r\n    private _lowerLimit = 0;\r\n\r\n    @serializable\r\n    private _upperLimit = 0;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { CCFloat, _decorator } from '../../../../core';\r\nimport { IFixedJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.FixedJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/FixedJoint2D')\r\nexport class FixedJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.FIXED;\r\n\r\n    /**\r\n     * @en\r\n     * The frequency.\r\n     * @zh\r\n     * 弹性系数。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.frequency')\r\n    get frequency (): number {\r\n        return this._frequency;\r\n    }\r\n    set frequency (v: number) {\r\n        this._frequency = v;\r\n        if (this._joint) {\r\n            (this._joint as IFixedJoint).setFrequency(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The damping ratio.\r\n     * @zh\r\n     * 阻尼，表示关节变形后，恢复到初始状态受到的阻力。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.dampingRatio')\r\n    get dampingRatio (): number {\r\n        return this._dampingRatio;\r\n    }\r\n    set dampingRatio (v: number) {\r\n        this._dampingRatio = v;\r\n        if (this._joint) {\r\n            (this._joint as IFixedJoint).setDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _frequency = 0.7;\r\n\r\n    @serializable\r\n    private _dampingRatio = 0.5;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { CCBoolean, CCFloat, _decorator } from '../../../../core';\r\nimport { IWheelJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.WheelJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/WheelJoint2D')\r\nexport class WheelJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.WHEEL;\r\n\r\n    /**\r\n     * @en Wheel susspension direction.\r\n     * @zh 轮子震动方向。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.angle')\r\n    get angle (): number {\r\n        return this._angle;\r\n    }\r\n    set angle (v: number) {\r\n        this._angle = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Enable joint motor?\r\n     * @zh\r\n     * 是否开启关节马达？\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.enableMotor')\r\n    get enableMotor (): boolean {\r\n        return this._enableMotor;\r\n    }\r\n    set enableMotor (v: boolean) {\r\n        this._enableMotor = v;\r\n        if (this._joint) {\r\n            (this._joint as IWheelJoint).enableMotor(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The maxium torque can be applied to rigidbody to rearch the target motor speed.\r\n     * @zh\r\n     * 可以施加到刚体的最大扭矩。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxMotorTorque')\r\n    get maxMotorTorque (): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n    set maxMotorTorque (v: number) {\r\n        this._maxMotorTorque = v;\r\n        if (this._joint) {\r\n            (this._joint as IWheelJoint).setMaxMotorTorque(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The expected motor speed.\r\n     * @zh\r\n     * 期望的马达速度。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.motorSpeed')\r\n    get motorSpeed (): number {\r\n        return this._motorSpeed;\r\n    }\r\n    set motorSpeed (v: number) {\r\n        this._motorSpeed = v;\r\n        if (this._joint) {\r\n            (this._joint as IWheelJoint).setMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The spring frequency.\r\n     * @zh\r\n     * 弹性系数。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.frequency')\r\n    get frequency (): number {\r\n        return this._frequency;\r\n    }\r\n    set frequency (v: number) {\r\n        this._frequency = v;\r\n        if (this._joint) {\r\n            (this._joint as IWheelJoint).setFrequency(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The damping ratio.\r\n     * @zh\r\n     * 阻尼，表示关节变形后，恢复到初始状态受到的阻力。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.dampingRatio')\r\n    get dampingRatio (): number {\r\n        return this._dampingRatio;\r\n    }\r\n    set dampingRatio (v: number) {\r\n        this._dampingRatio = v;\r\n        if (this._joint) {\r\n            (this._joint as IWheelJoint).setDampingRatio(v);\r\n        }\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _angle = 90;\r\n\r\n    @serializable\r\n    private _enableMotor = false;\r\n\r\n    @serializable\r\n    private _maxMotorTorque = 1000;\r\n\r\n    @serializable\r\n    private _motorSpeed = 0;\r\n\r\n    @serializable\r\n    private _frequency = 5;\r\n\r\n    @serializable\r\n    private _dampingRatio = 0.7;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Joint2D } from './joint-2d';\r\nimport { CCBoolean, CCFloat, _decorator } from '../../../../core';\r\nimport { IHingeJoint } from '../../../spec/i-physics-joint';\r\nimport { EJoint2DType } from '../../physics-types';\r\nimport { help, serializable, tooltip, type } from '../../../../core/data/decorators';\r\n\r\nconst { ccclass, menu } = _decorator;\r\n\r\n@ccclass('cc.HingeJoint2D')\r\n@help('i18n:cc.Joint2D')\r\n@menu('Physics2D/Joints/HingeJoint2D')\r\nexport class HingeJoint2D extends Joint2D {\r\n    TYPE = EJoint2DType.HINGE;\r\n\r\n    /**\r\n     * @en\r\n     * Enable joint limit?\r\n     * @zh\r\n     * 是否开启关节的限制？\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.enableLimit')\r\n    get enableLimit (): boolean {\r\n        return this._enableLimit;\r\n    }\r\n    set enableLimit (v: boolean) {\r\n        this._enableLimit = v;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The lower angle.\r\n     * @zh\r\n     * 角度的最低限制。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.lowerAngle')\r\n    get lowerAngle (): number {\r\n        return this._lowerAngle;\r\n    }\r\n    set lowerAngle (v: number) {\r\n        this._lowerAngle = v;\r\n        if (this._joint) {\r\n            (this._joint as IHingeJoint).setLowerAngle(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The upper angle.\r\n     * @zh\r\n     * 角度的最高限制。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.upperAngle')\r\n    get upperAngle (): number {\r\n        return this._upperAngle;\r\n    }\r\n    set upperAngle (v: number) {\r\n        this._upperAngle = v;\r\n        if (this._joint) {\r\n            (this._joint as IHingeJoint).setUpperAngle(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Enable joint motor?\r\n     * @zh\r\n     * 是否开启关节马达？\r\n     */\r\n    @type(CCBoolean)\r\n    @tooltip('i18n:physics2d.joint.enableMotor')\r\n    get enableMotor (): boolean {\r\n        return this._enableMotor;\r\n    }\r\n    set enableMotor (v: boolean) {\r\n        this._enableMotor = v;\r\n        if (this._joint) {\r\n            (this._joint as IHingeJoint).enableMotor(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The maxium torque can be applied to rigidbody to rearch the target motor speed.\r\n     * @zh\r\n     * 可以施加到刚体的最大扭矩。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.maxMotorTorque')\r\n    get maxMotorTorque (): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n    set maxMotorTorque (v: number) {\r\n        this._maxMotorTorque = v;\r\n        if (this._joint) {\r\n            (this._joint as IHingeJoint).setMaxMotorTorque(v);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The expected motor speed.\r\n     * @zh\r\n     * 期望的马达速度。\r\n     */\r\n    @type(CCFloat)\r\n    @tooltip('i18n:physics2d.joint.motorSpeed')\r\n    get motorSpeed (): number {\r\n        return this._motorSpeed;\r\n    }\r\n    set motorSpeed (v: number) {\r\n        this._motorSpeed = v;\r\n        if (this._joint) {\r\n            (this._joint as IHingeJoint).setMotorSpeed(v);\r\n        }\r\n    }\r\n\r\n    /// private properties\r\n\r\n    @serializable\r\n    private _enableLimit = false;\r\n\r\n    @serializable\r\n    private _lowerAngle = 0;\r\n\r\n    @serializable\r\n    private _upperAngle = 0;\r\n\r\n    @serializable\r\n    private _enableMotor = false;\r\n\r\n    @serializable\r\n    private _maxMotorTorque = 1000;\r\n\r\n    @serializable\r\n    private _motorSpeed = 0;\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { cclegacy } from '../../core';\r\n\r\nimport * as PolygonSeparator from './utils/polygon-separator';\r\nimport * as PolygonPartition from './utils/polygon-partition';\r\n\r\nimport { selector } from './physics-selector';\r\n\r\nexport * from './physics-types';\r\n\r\nexport * from './physics-system';\r\n\r\nexport * from '../spec/i-physics-contact';\r\n\r\n// rigid body\r\nexport * from './components/rigid-body-2d';\r\n\r\n// colliders\r\nexport * from './components/colliders/collider-2d';\r\nexport * from './components/colliders/box-collider-2d';\r\nexport * from './components/colliders/circle-collider-2d';\r\nexport * from './components/colliders/polygon-collider-2d';\r\n\r\n// joints\r\nexport * from './components/joints/joint-2d';\r\nexport * from './components/joints/distance-joint-2d';\r\nexport * from './components/joints/spring-joint-2d';\r\nexport * from './components/joints/mouse-joint-2d';\r\nexport * from './components/joints/relative-joint-2d';\r\nexport * from './components/joints/slider-joint-2d';\r\nexport * from './components/joints/fixed-joint-2d';\r\nexport * from './components/joints/wheel-joint-2d';\r\nexport * from './components/joints/hinge-joint-2d';\r\n\r\nexport const Physics2DUtils = {\r\n    PolygonSeparator,\r\n    PolygonPartition,\r\n};\r\n\r\nexport { selector };\r\n\r\ncclegacy.internal.physics2d = {\r\n    selector,\r\n};\r\n"],"names":["At","i","vertices","s","length","Copy","j","p","push","CanSee","Reflex","LeftOn","RightOn","k","intersectionPoint","Vec2","LineIntersect2","Right","a","b","c","Area","Left","SquareDist","dx","x","dy","y","ForceCounterClockWise","IsCounterClockWise","reverse","GetSignedArea","area","LineIntersect","p1","p2","q1","q2","value1","a1","b1","c1","a2","b2","c2","det","Math","abs","a0","b0","x1","y1","x2","y2","x3","y3","x4","y4","max","min","ua","ub","denom","ConvexPartition","lowerPoly","upperPoly","list","d","lowerDist","upperDist","lowerInt","upperInt","lowerIndex","upperIndex","sp","add","multiplyScalar","highestScore","bestIndex","score","concat","splice","polygon","convex","len","isConvex","ret","triangles","Triangulate","poly","iPoly","polyLen","diag1","diag2","tri3","iTri2","triangle","tri1","equals","newPoly","Vertex","this","isActive","isEar","point","angleCos","shouldUpdate","index","prev","next","p3","isClockwise","sum","updateVertex","vertex","v1","v2","v3","v1x","v1y","v1Len","sqrt","v3x","v3y","v3Len","curr","currentPoint","areaA","areaB","areaC","removeCollinearOrDuplicate","start","end","v","forEach","ear","i_1","logID","i_2","ERigidBody2DType","ECollider2DType","EJoint2DType","PhysicsGroup2D","ERaycast2DType","EPhysics2DDrawFlags","exports","Enum","None","BEGIN_CONTACT","END_CONTACT","PRE_SOLVE","POST_SOLVE","PHYSICS_2D_PTM_RATIO","selector","id","switchTo","mutableSelector","physicsWorld","backend","log","wrapper","createPhysicsWorld","register","runInEditor","EDITOR","FUNC","ENTIRE_WORLD","impl","debugDrawFlags","setGravity","setAllowSleep","step","syncPhysicsToScene","syncSceneToPhysics","raycast","testPoint","testAABB","drawDebug","checkPhysicsModule","obj","errorID","PhysicsWorld","EntireBody","rigidBody","isAwake","isSleeping","initialize","setType","setLinearDamping","setAngularDamping","setGravityScale","setFixedRotation","setActive","wakeUp","sleep","getMass","getInertia","getLinearVelocity","setLinearVelocity","getLinearVelocityFromWorldPoint","getAngularVelocity","setAngularVelocity","getLocalVector","getWorldVector","getLocalPoint","getWorldPoint","getLocalCenter","getWorldCenter","applyForce","applyForceToCenter","applyTorque","applyLinearImpulse","applyLinearImpulseToCenter","applyAngularImpulse","onEnable","onDisable","onDestroy","CREATE_COLLIDER_PROXY","INITED","ENTIRE_SHAPE","collider","worldAABB","worldPoints","worldPosition","worldRadius","apply","onLoad","onGroupChanged","createShape","type","BOX","BoxShape","CIRCLE","CircleShape","POLYGON","PolygonShape","CREATE_JOINT_PROXY","ENTIRE_JOINT","setDampingRatio","setFrequency","setMaxForce","setTarget","setDistance","setAngularOffset","setCorrectionFactor","setLinearOffset","setMaxLength","setMaxTorque","setLowerLimit","setUpperLimit","setMaxMotorForce","setMaxMotorTorque","setMotorSpeed","enableLimit","enableMotor","setLowerAngle","setUpperAngle","createJoint","initJointProxy","PHYSICS_2D_BUILTIN","SPRING","SpringJoint","DISTANCE","DistanceJoint","FIXED","FixedJoint","MOUSE","MouseJoint","RELATIVE","RelativeJoint","SLIDER","SliderJoint","WHEEL","WheelJoint","HINGE","HingeJoint","instance","cclegacy","internal","Physics2DManifoldType","PhysicsSystem2D","_Eventify","_settings$querySettin","_settings$querySettin2","_settings$querySettin3","_settings$querySettin4","_this","call","velocityIterations","positionIterations","collisionMatrix","CollisionMatrix","_enable","_allowSleep","_maxSubSteps","_fixedTimeStep","_autoSimulation","_accumulator","_steping","_gravity","_delayEvents","gravity","settings","querySettings","SettingsCategory","PHYSICS","copy","bit","parseInt","value","collisionGroups","Array","name","update","allowSleep","_inheritsLoose","_proto","prototype","postUpdate","deltaTime","director","emit","DirectorEvent","BEFORE_PHYSICS","fixedTimeStep","substepIndex","events","l","event","func","target","AFTER_PHYSICS","_callAfterStep","resetAccumulator","time","mask","Closest","rect","constructAndRegister","registerSystem","ID","SystemPriority","LOW","_createClass","key","get","set","Eventify","System","once","INIT","_decorator","RigidBody2D","_dec2","PhysicsGroup","CCBoolean","CCFloat","_dec","_class2","_Component","_len","arguments","args","_key","enabledContactListener","_initializer","bullet","_initializer2","awakeOnLoad","_initializer3","_body","_group","_initializer4","_type","_initializer5","_initializer6","_gravityScale","_initializer7","_linearDamping","_initializer8","_angularDamping","_initializer9","_linearVelocity","_initializer10","_angularVelocity","_initializer11","_fixedRotation","_initializer12","force","wake","torque","impulse","worldPoint","out","worldVector","localVector","localPoint","RigidBody","Animated","Kinematic","Component","serializable","_applyDecoratedInitializer","_applyDecoratedDescriptor","_dec3","Object","getOwnPropertyDescriptor","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","DEFAULT","Dynamic","_class","Collider2D","ccclass","editing","tag","TYPE","_shape","_density","_sensor","_friction","_restitution","_offset","getComponent","Rect","Size","_Collider2D","BoxCollider2D","_size","CircleCollider2D","_radius","PolygonCollider2D","threshold","_points","Joint2D","anchor","connectedAnchor","collideConnected","connectedBody","_joint","tempVec3_1","_Joint2D","DistanceJoint2D","_maxLength","_autoCalcDistance","Vec3","distance","node","SpringJoint2D","_frequency","_dampingRatio","_distance","MouseJoint2D","_maxForce","_target","dt","tempVec3_2","tempVec2","RelativeJoint2D","_maxTorque","_correctionFactor","_angularOffset","_linearOffset","_autoCalcOffset","subtract","Quat","toEuler","worldRotation","z","SliderJoint2D","_angle","_autoCalcAngle","_enableMotor","_maxMotorForce","_motorSpeed","_enableLimit","_lowerLimit","_upperLimit","toDegree","atan2","FixedJoint2D","WheelJoint2D","_maxMotorTorque","HingeJoint2D","_lowerAngle","_upperAngle","PolygonSeparator","PolygonPartition","physics2d"],"mappings":"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"}