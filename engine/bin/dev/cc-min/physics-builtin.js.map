{"version":3,"file":"physics-builtin.js","sources":["../../../cocos/physics/cocos/object/builtin-object.ts","../../../cocos/physics/cocos/builtin-shared-body.ts","../../../cocos/physics/cocos/builtin-world.ts","../../../cocos/physics/cocos/builtin-rigid-body.ts","../../../cocos/physics/cocos/shapes/builtin-shape.ts","../../../cocos/physics/cocos/shapes/builtin-box-shape.ts","../../../cocos/physics/cocos/shapes/builtin-sphere-shape.ts","../../../cocos/physics/cocos/shapes/builtin-capsule-shape.ts","../../../cocos/physics/cocos/instantiate.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { PhysicsSystem } from '../../framework';\r\n\r\nexport class BuiltinObject {\r\n    public collisionFilterGroup: number = PhysicsSystem.PhysicsGroup.DEFAULT;\r\n\r\n    public collisionFilterMask = -1;\r\n\r\n    /** group */\r\n    public getGroup (): number {\r\n        return this.collisionFilterGroup;\r\n    }\r\n\r\n    public setGroup (v: number): void {\r\n        this.collisionFilterGroup = v;\r\n    }\r\n\r\n    public addGroup (v: number): void {\r\n        this.collisionFilterGroup |= v;\r\n    }\r\n\r\n    public removeGroup (v: number): void {\r\n        this.collisionFilterGroup &= ~v;\r\n    }\r\n\r\n    /** mask */\r\n    public getMask (): number {\r\n        return this.collisionFilterMask;\r\n    }\r\n\r\n    public setMask (v: number): void {\r\n        this.collisionFilterMask = v;\r\n    }\r\n\r\n    public addMask (v: number): void {\r\n        this.collisionFilterMask |= v;\r\n    }\r\n\r\n    public removeMask (v: number): void {\r\n        this.collisionFilterMask &= ~v;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4, Quat, Vec3, js, geometry } from '../../core';\r\nimport { BuiltInWorld } from './builtin-world';\r\nimport { BuiltinObject } from './object/builtin-object';\r\nimport { BuiltinShape } from './shapes/builtin-shape';\r\nimport { Node } from '../../scene-graph';\r\nimport { BuiltinRigidBody } from './builtin-rigid-body';\r\nimport { PhysicsSystem } from '../framework';\r\nimport { PhysicsGroup } from '../framework/physics-enum';\r\n\r\nconst m4_0 = new Mat4();\r\nconst v3_0 = new Vec3();\r\nconst v3_1 = new Vec3();\r\nconst quat_0 = new Quat();\r\n\r\n/**\r\n * Built-in static collider, no physical forces involved\r\n */\r\nexport class BuiltinSharedBody extends BuiltinObject {\r\n    private static readonly sharedBodesMap = new Map<string, BuiltinSharedBody>();\r\n\r\n    static getSharedBody (node: Node, wrappedWorld: BuiltInWorld, wrappedBody?: BuiltinRigidBody): BuiltinSharedBody {\r\n        const key = node.uuid;\r\n        let newSB: BuiltinSharedBody;\r\n        if (BuiltinSharedBody.sharedBodesMap.has(key)) {\r\n            newSB = BuiltinSharedBody.sharedBodesMap.get(key)!;\r\n        } else {\r\n            newSB = new BuiltinSharedBody(node, wrappedWorld);\r\n            const g = PhysicsGroup.DEFAULT;\r\n            const m = PhysicsSystem.instance.collisionMatrix[g];\r\n            newSB.collisionFilterGroup = g;\r\n            newSB.collisionFilterMask = m;\r\n            BuiltinSharedBody.sharedBodesMap.set(node.uuid, newSB);\r\n        }\r\n        if (wrappedBody) {\r\n            newSB.wrappedBody = wrappedBody;\r\n            const g = wrappedBody.rigidBody.group;\r\n            const m = PhysicsSystem.instance.collisionMatrix[g];\r\n            newSB.collisionFilterGroup = g;\r\n            newSB.collisionFilterMask = m;\r\n        }\r\n        return newSB;\r\n    }\r\n\r\n    get id (): number {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * add or remove from world \\\r\n     * add, if enable \\\r\n     * remove, if disable & shapes.length == 0 & wrappedBody disable\r\n     */\r\n    set enabled (v: boolean) {\r\n        if (v) {\r\n            if (this.index < 0) {\r\n                this.index = this.world.bodies.length;\r\n                this.world.addSharedBody(this);\r\n                this.syncInitial();\r\n            }\r\n        } else if (this.index >= 0) {\r\n            const isRemove = (this.shapes.length === 0);\r\n\r\n            if (isRemove) {\r\n                this.index = -1;\r\n                this.world.removeSharedBody(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    set reference (v: boolean) {\r\n        // eslint-disable-next-line no-unused-expressions\r\n        v ? this.ref++ : this.ref--;\r\n        if (this.ref === 0) { this.destroy(); }\r\n    }\r\n\r\n    /** id generator */\r\n    private static idCounter = 0;\r\n    private readonly _id: number;\r\n    private index = -1;\r\n    private ref = 0;\r\n\r\n    readonly node: Node;\r\n    readonly world: BuiltInWorld;\r\n    readonly shapes: BuiltinShape[] = [];\r\n    wrappedBody: BuiltinRigidBody | null = null;\r\n\r\n    private constructor (node: Node, world: BuiltInWorld) {\r\n        super();\r\n        this._id = BuiltinSharedBody.idCounter++;\r\n        this.node = node;\r\n        this.world = world;\r\n    }\r\n\r\n    intersects (body: BuiltinSharedBody): void {\r\n        for (let i = 0; i < this.shapes.length; i++) {\r\n            const shapeA = this.shapes[i];\r\n            for (let j = 0; j < body.shapes.length; j++) {\r\n                const shapeB = body.shapes[j];\r\n                if (shapeA.collider.needTriggerEvent || shapeB.collider.needTriggerEvent) {\r\n                    if (geometry.intersect.resolve(shapeA.worldShape, shapeB.worldShape)) {\r\n                        this.world.shapeArr.push(shapeA);\r\n                        this.world.shapeArr.push(shapeB);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addShape (shape: BuiltinShape): void {\r\n        const i = this.shapes.indexOf(shape);\r\n        if (i < 0) {\r\n            this.shapes.push(shape);\r\n        }\r\n    }\r\n\r\n    removeShape (shape: BuiltinShape): void {\r\n        const i = this.shapes.indexOf(shape);\r\n        if (i >= 0) {\r\n            js.array.fastRemoveAt(this.shapes, i);\r\n        }\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        if (this.node.hasChangedFlags) {\r\n            this.node.getWorldMatrix(m4_0);\r\n            v3_0.set(this.node.worldPosition);\r\n            quat_0.set(this.node.worldRotation);\r\n            v3_1.set(this.node.worldScale);\r\n            for (let i = 0; i < this.shapes.length; i++) {\r\n                this.shapes[i].transform(m4_0, v3_0, quat_0, v3_1);\r\n            }\r\n        }\r\n    }\r\n\r\n    syncInitial (): void {\r\n        this.node.getWorldMatrix(m4_0);\r\n        v3_0.set(this.node.worldPosition);\r\n        quat_0.set(this.node.worldRotation);\r\n        v3_1.set(this.node.worldScale);\r\n        for (let i = 0; i < this.shapes.length; i++) {\r\n            this.shapes[i].transform(m4_0, v3_0, quat_0, v3_1);\r\n        }\r\n    }\r\n\r\n    private destroy (): void {\r\n        BuiltinSharedBody.sharedBodesMap.delete(this.node.uuid);\r\n        (this.node as any) = null;\r\n        (this.world as any) = null;\r\n        (this.shapes as any) = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, RecyclePool, error, js, IVec3Like, geometry, IQuatLike, warnID, Color } from '../../core';\r\nimport { PhysicsRayResult } from '../framework/physics-ray-result';\r\nimport { BuiltinSharedBody } from './builtin-shared-body';\r\nimport { BuiltinShape } from './shapes/builtin-shape';\r\nimport { ArrayCollisionMatrix } from '../utils/array-collision-matrix';\r\nimport { IPhysicsWorld, IRaycastOptions } from '../spec/i-physics-world';\r\nimport { PhysicsMaterial } from '../framework/assets/physics-material';\r\nimport { TriggerEventType } from '../framework/physics-interface';\r\nimport { Collider, EPhysicsDrawFlags } from '../../../exports/physics-framework';\r\nimport { BuiltinRigidBody } from './builtin-rigid-body';\r\nimport { Node } from '../../scene-graph';\r\nimport { GeometryRenderer } from '../../rendering/geometry-renderer';\r\nimport { director } from '../../game';\r\n\r\nconst hitPoint = new Vec3();\r\nconst TriggerEventObject = {\r\n    type: 'onTriggerEnter' as unknown as TriggerEventType,\r\n    selfCollider: null as unknown as Collider,\r\n    otherCollider: null as unknown as Collider,\r\n    impl: {} as any,\r\n};\r\n\r\nconst aabbTemp = new geometry.AABB();\r\nconst AABB_LINE_COUNT = 12;\r\n\r\n/**\r\n * Built-in collision system, intended for use as a\r\n * efficient discrete collision detector,\r\n * not a full physical simulator\r\n */\r\nexport class BuiltInWorld implements IPhysicsWorld {\r\n    sweepBox (\r\n        worldRay: geometry.Ray,\r\n        halfExtent: IVec3Like,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        pool: RecyclePool<PhysicsRayResult>,\r\n        results: PhysicsRayResult[],\r\n    ): boolean {\r\n        warnID(9640);\r\n        return false;\r\n    }\r\n\r\n    sweepBoxClosest (\r\n        worldRay: geometry.Ray,\r\n        halfExtent: IVec3Like,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        result: PhysicsRayResult,\r\n    ): boolean {\r\n        warnID(9640);\r\n        return false;\r\n    }\r\n\r\n    sweepSphere (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        options: IRaycastOptions,\r\n        pool: RecyclePool<PhysicsRayResult>,\r\n        results: PhysicsRayResult[],\r\n    ): boolean {\r\n        warnID(9640);\r\n        return false;\r\n    }\r\n\r\n    sweepSphereClosest (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        options: IRaycastOptions,\r\n        result: PhysicsRayResult,\r\n    ): boolean {\r\n        warnID(9640);\r\n        return false;\r\n    }\r\n\r\n    sweepCapsule (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        height: number,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        pool: RecyclePool<PhysicsRayResult>,\r\n        results: PhysicsRayResult[],\r\n    ): boolean {\r\n        warnID(9640);\r\n        return false;\r\n    }\r\n\r\n    sweepCapsuleClosest (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        height: number,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        result: PhysicsRayResult,\r\n    ): boolean {\r\n        warnID(9640);\r\n        return false;\r\n    }\r\n\r\n    setGravity (v: IVec3Like): void {\r\n        //empty\r\n    }\r\n    setAllowSleep (v: boolean): void {\r\n        //empty\r\n    }\r\n    setDefaultMaterial (v: PhysicsMaterial): void {\r\n        //empty\r\n    }\r\n    get impl (): BuiltInWorld { return this; }\r\n    shapeArr: BuiltinShape[] = [];\r\n    readonly bodies: BuiltinSharedBody[] = [];\r\n\r\n    private _shapeArrPrev: BuiltinShape[] = [];\r\n    private _collisionMatrix: ArrayCollisionMatrix = new ArrayCollisionMatrix();\r\n    private _collisionMatrixPrev: ArrayCollisionMatrix = new ArrayCollisionMatrix();\r\n\r\n    private _debugLineCount = 0;\r\n    private _MAX_DEBUG_LINE_COUNT = 16384;\r\n    private _debugDrawFlags = EPhysicsDrawFlags.NONE;\r\n    private _debugConstraintSize = 0.3;\r\n    private _aabbColor = new Color(0, 255, 255, 255);\r\n    private _wireframeColor = new Color(255, 0, 255, 255);\r\n\r\n    get debugDrawFlags (): EPhysicsDrawFlags {\r\n        return this._debugDrawFlags;\r\n    }\r\n\r\n    set debugDrawFlags (v: EPhysicsDrawFlags) {\r\n        this._debugDrawFlags = v;\r\n    }\r\n\r\n    get debugDrawConstraintSize (): number {\r\n        return this._debugConstraintSize;\r\n    }\r\n\r\n    set debugDrawConstraintSize (v) {\r\n        this._debugConstraintSize = v;\r\n    }\r\n\r\n    destroy (): void {\r\n        if (this.bodies.length) error('You should destroy all physics component first.');\r\n    }\r\n\r\n    step (deltaTime: number): void {\r\n        // store and reset collision array\r\n        const tmp = this._shapeArrPrev;\r\n        this._shapeArrPrev = this.shapeArr;\r\n        this.shapeArr = tmp;\r\n        this.shapeArr.length = 0;\r\n\r\n        // collision detection\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            const bodyA = this.bodies[i];\r\n            for (let j = i + 1; j < this.bodies.length; j++) {\r\n                const bodyB = this.bodies[j];\r\n\r\n                // first, Check collision filter masks\r\n                if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0\r\n                    || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\r\n                    continue;\r\n                }\r\n                bodyA.intersects(bodyB);\r\n            }\r\n        }\r\n\r\n        this._debugDraw();\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            this.bodies[i].syncSceneToPhysics();\r\n        }\r\n    }\r\n\r\n    syncAfterEvents (): void {\r\n        this.syncSceneToPhysics();\r\n    }\r\n\r\n    emitEvents (): void {\r\n        this.emitTriggerEvent();\r\n    }\r\n\r\n    raycastClosest (worldRay: geometry.Ray, options: IRaycastOptions, out: PhysicsRayResult): boolean {\r\n        let tmp_d = Infinity;\r\n        const max_d = options.maxDistance;\r\n        const mask = options.mask;\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            const body = this.bodies[i];\r\n            if (!(body.collisionFilterGroup & mask)) continue;\r\n            for (let i = 0; i < body.shapes.length; i++) {\r\n                const shape = body.shapes[i];\r\n                const distance = geometry.intersect.resolve(worldRay, shape.worldShape);\r\n                if (distance === 0 || distance > max_d) {\r\n                    continue;\r\n                }\r\n                if (tmp_d > distance) {\r\n                    tmp_d = distance;\r\n                    Vec3.normalize(hitPoint, worldRay.d);\r\n                    Vec3.scaleAndAdd(hitPoint, worldRay.o, hitPoint, distance);\r\n                    out._assign(hitPoint, distance, shape.collider, Vec3.ZERO);\r\n                }\r\n            }\r\n        }\r\n\r\n        return !(tmp_d === Infinity);\r\n    }\r\n\r\n    raycast (worldRay: geometry.Ray, options: IRaycastOptions, pool: RecyclePool<PhysicsRayResult>, results: PhysicsRayResult[]): boolean {\r\n        const max_d = options.maxDistance;\r\n        const mask = options.mask;\r\n        for (let i = 0; i < this.bodies.length; i++) {\r\n            const body = this.bodies[i];\r\n            if (!(body.collisionFilterGroup & mask)) continue;\r\n            for (let i = 0; i < body.shapes.length; i++) {\r\n                const shape = body.shapes[i];\r\n                const distance = geometry.intersect.resolve(worldRay, shape.worldShape);\r\n                if (distance === 0 || distance > max_d) {\r\n                    continue;\r\n                } else {\r\n                    const r = pool.add();\r\n                    worldRay.computeHit(hitPoint, distance);\r\n                    r._assign(hitPoint, distance, shape.collider, Vec3.ZERO);\r\n                    results.push(r);\r\n                }\r\n            }\r\n        }\r\n        return results.length > 0;\r\n    }\r\n\r\n    getSharedBody (node: Node, wrappedBody?: BuiltinRigidBody): BuiltinSharedBody {\r\n        return BuiltinSharedBody.getSharedBody(node, this, wrappedBody);\r\n    }\r\n\r\n    addSharedBody (body: BuiltinSharedBody): void {\r\n        const index = this.bodies.indexOf(body);\r\n        if (index < 0) {\r\n            this.bodies.push(body);\r\n        }\r\n    }\r\n\r\n    removeSharedBody (body: BuiltinSharedBody): void {\r\n        const index = this.bodies.indexOf(body);\r\n        if (index >= 0) {\r\n            js.array.fastRemoveAt(this.bodies, index);\r\n        }\r\n    }\r\n\r\n    private emitTriggerEvent (): void {\r\n        let shapeA: BuiltinShape;\r\n        let shapeB: BuiltinShape;\r\n        for (let i = 0; i < this.shapeArr.length; i += 2) {\r\n            shapeA = this.shapeArr[i];\r\n            shapeB = this.shapeArr[i + 1];\r\n\r\n            TriggerEventObject.selfCollider = shapeA.collider;\r\n            TriggerEventObject.otherCollider = shapeB.collider;\r\n\r\n            this._collisionMatrix.set(shapeA.id, shapeB.id, true);\r\n\r\n            if (this._collisionMatrixPrev.get(shapeA.id, shapeB.id)) {\r\n                // emit stay\r\n                TriggerEventObject.type = 'onTriggerStay';\r\n            } else {\r\n                // first trigger, emit enter\r\n                TriggerEventObject.type = 'onTriggerEnter';\r\n            }\r\n\r\n            if (shapeA.collider) {\r\n                shapeA.collider.emit(TriggerEventObject.type, TriggerEventObject);\r\n            }\r\n\r\n            TriggerEventObject.selfCollider = shapeB.collider;\r\n            TriggerEventObject.otherCollider = shapeA.collider;\r\n\r\n            if (shapeB.collider) {\r\n                shapeB.collider.emit(TriggerEventObject.type, TriggerEventObject);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this._shapeArrPrev.length; i += 2) {\r\n            shapeA = this._shapeArrPrev[i];\r\n            shapeB = this._shapeArrPrev[i + 1];\r\n\r\n            if (this._collisionMatrixPrev.get(shapeA.id, shapeB.id)) {\r\n                if (!this._collisionMatrix.get(shapeA.id, shapeB.id)) {\r\n                    // emit exit\r\n                    TriggerEventObject.type = 'onTriggerExit';\r\n                    TriggerEventObject.selfCollider = shapeA.collider;\r\n                    TriggerEventObject.otherCollider = shapeB.collider;\r\n\r\n                    if (shapeA.collider) {\r\n                        shapeA.collider.emit(TriggerEventObject.type, TriggerEventObject);\r\n                    }\r\n\r\n                    TriggerEventObject.selfCollider = shapeB.collider;\r\n                    TriggerEventObject.otherCollider = shapeA.collider;\r\n\r\n                    if (shapeB.collider) {\r\n                        shapeB.collider.emit(TriggerEventObject.type, TriggerEventObject);\r\n                    }\r\n\r\n                    this._collisionMatrix.set(shapeA.id, shapeB.id, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        const temp = this._collisionMatrixPrev.matrix;\r\n        this._collisionMatrixPrev.matrix = this._collisionMatrix.matrix;\r\n        this._collisionMatrix.matrix = temp;\r\n        this._collisionMatrix.reset();\r\n    }\r\n\r\n    private _getDebugRenderer (): GeometryRenderer|null {\r\n        const cameras = director.root!.mainWindow?.cameras;\r\n        if (!cameras) return null;\r\n        if (cameras.length === 0) return null;\r\n        if (!cameras[0]) return null;\r\n        cameras[0].initGeometryRenderer();\r\n\r\n        return cameras[0].geometryRenderer;\r\n    }\r\n\r\n    private _debugDraw (): void {\r\n        const debugRenderer = this._getDebugRenderer();\r\n        if (!debugRenderer) return;\r\n\r\n        this._debugLineCount = 0;\r\n        if (this._debugDrawFlags & EPhysicsDrawFlags.AABB) {\r\n            for (let i = 0; i < this.bodies.length; i++) {\r\n                const body = this.bodies[i];\r\n                for (let j = 0; j < body.shapes.length; j++) {\r\n                    const shape = body.shapes[j];\r\n                    if (this._debugLineCount + AABB_LINE_COUNT < this._MAX_DEBUG_LINE_COUNT) {\r\n                        this._debugLineCount += AABB_LINE_COUNT;\r\n                        shape.getAABB(aabbTemp);\r\n                        debugRenderer.addBoundingBox(aabbTemp, this._aabbColor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IRigidBody } from '../spec/i-rigid-body';\r\nimport { IVec3Like } from '../../core';\r\nimport { RigidBody, PhysicsSystem, ERigidBodyType } from '../framework';\r\nimport { BuiltinSharedBody } from './builtin-shared-body';\r\nimport { BuiltInWorld } from './builtin-world';\r\n\r\nexport class BuiltinRigidBody implements IRigidBody {\r\n    get impl (): BuiltinRigidBody { return this; }\r\n    get isAwake (): boolean { return true; }\r\n    get isSleepy (): boolean { return false; }\r\n    get isSleeping (): boolean { return false; }\r\n\r\n    get rigidBody (): RigidBody { return this._rigidBody; }\r\n    get sharedBody (): BuiltinSharedBody { return this._sharedBody; }\r\n\r\n    private _rigidBody!: RigidBody;\r\n    protected _sharedBody!: BuiltinSharedBody;\r\n\r\n    initialize (com: RigidBody): void {\r\n        this._rigidBody = com;\r\n        this._sharedBody = (PhysicsSystem.instance.physicsWorld as BuiltInWorld).getSharedBody(this._rigidBody.node, this);\r\n        this._sharedBody.reference = true;\r\n    }\r\n\r\n    onEnable (): void {\r\n        this._sharedBody.enabled = true;\r\n    }\r\n\r\n    onDisable (): void {\r\n        this._sharedBody.enabled = false;\r\n    }\r\n\r\n    onDestroy (): void {\r\n        this._sharedBody.reference = false;\r\n        (this._rigidBody as any) = null;\r\n        (this._sharedBody as any) = null;\r\n    }\r\n\r\n    setMass (v: number): void { }\r\n    setType (v: ERigidBodyType): void { }\r\n    setLinearDamping (v: number): void { }\r\n    setAngularDamping (v: number): void { }\r\n    useGravity (v: boolean): void { }\r\n    useCCD (v: boolean): void { }\r\n    isUsingCCD (): boolean { return false; }\r\n    setLinearFactor (v: IVec3Like): void { }\r\n    setAngularFactor (v: IVec3Like): void { }\r\n    setAllowSleep (v: boolean): void { }\r\n    wakeUp (): void { }\r\n    sleep (): void { }\r\n    clearState (): void { }\r\n    clearForces (): void { }\r\n    clearVelocity (): void { }\r\n    setSleepThreshold (v: number): void { }\r\n    getSleepThreshold (): number { return 0; }\r\n    getLinearVelocity (out: IVec3Like): void { }\r\n    setLinearVelocity (value: IVec3Like): void { }\r\n    getAngularVelocity (out: IVec3Like): void { }\r\n    setAngularVelocity (value: IVec3Like): void { }\r\n    applyForce (force: IVec3Like, relativePoint?: IVec3Like): void { }\r\n    applyLocalForce (force: IVec3Like, relativePoint?: IVec3Like): void { }\r\n    applyImpulse (force: IVec3Like, relativePoint?: IVec3Like): void { }\r\n    applyLocalImpulse (force: IVec3Like, relativePoint?: IVec3Like): void { }\r\n    applyTorque (torque: IVec3Like): void { }\r\n    applyLocalTorque (torque: IVec3Like): void { }\r\n\r\n    setGroup (v: number): void {\r\n        this._sharedBody.setGroup(v);\r\n    }\r\n    getGroup (): number {\r\n        return this._sharedBody.getGroup();\r\n    }\r\n    addGroup (v: number): void {\r\n        this._sharedBody.addGroup(v);\r\n    }\r\n    removeGroup (v: number): void {\r\n        this._sharedBody.removeGroup(v);\r\n    }\r\n    setMask (v: number): void {\r\n        this._sharedBody.setMask(v);\r\n    }\r\n    getMask (): number {\r\n        return this._sharedBody.getMask();\r\n    }\r\n    addMask (v: number): void {\r\n        this._sharedBody.addMask(v);\r\n    }\r\n    removeMask (v: number): void {\r\n        this._sharedBody.removeMask(v);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4, Quat, Vec3, IVec3Like, geometry } from '../../../core';\r\nimport { BuiltinSharedBody } from '../builtin-shared-body';\r\nimport { IBuiltinShape } from '../builtin-interface';\r\nimport { Collider, RigidBody, PhysicsMaterial, PhysicsSystem } from '../../../../exports/physics-framework';\r\nimport { IBaseShape } from '../../spec/i-physics-shape';\r\nimport { BuiltInWorld } from '../builtin-world';\r\n\r\nexport class BuiltinShape implements IBaseShape {\r\n    getAABB (v: geometry.AABB): void { }\r\n    getBoundingSphere (v: geometry.Sphere): void { }\r\n    updateEventListener (): void { }\r\n    setMaterial (v: PhysicsMaterial | null): void { }\r\n    setAsTrigger (v: boolean): void { }\r\n    get attachedRigidBody (): RigidBody | null { return null; }\r\n\r\n    setCenter (v: IVec3Like): void {\r\n        Vec3.copy(this._localShape.center, v);\r\n    }\r\n\r\n    get localShape (): IBuiltinShape {\r\n        return this._localShape;\r\n    }\r\n\r\n    get worldShape (): IBuiltinShape {\r\n        return this._worldShape;\r\n    }\r\n\r\n    get impl (): IBuiltinShape {\r\n        return this._worldShape;\r\n    }\r\n\r\n    get sharedBody (): BuiltinSharedBody {\r\n        return this._sharedBody;\r\n    }\r\n\r\n    get collider (): Collider {\r\n        return this._collider;\r\n    }\r\n\r\n    /** id generator */\r\n    private static idCounter = 0;\r\n    readonly id: number = BuiltinShape.idCounter++;\r\n\r\n    protected _sharedBody!: BuiltinSharedBody;\r\n    protected _collider!: Collider;\r\n    protected _localShape!: IBuiltinShape;\r\n    protected _worldShape!: IBuiltinShape;\r\n\r\n    initialize (comp: Collider): void {\r\n        this._collider = comp;\r\n        this._sharedBody = (PhysicsSystem.instance.physicsWorld as BuiltInWorld).getSharedBody(this._collider.node);\r\n        this._sharedBody.reference = true;\r\n    }\r\n\r\n    onLoad (): void {\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    onEnable (): void {\r\n        this._sharedBody.addShape(this);\r\n        this._sharedBody.enabled = true;\r\n    }\r\n\r\n    onDisable (): void {\r\n        this._sharedBody.removeShape(this);\r\n        this._sharedBody.enabled = false;\r\n    }\r\n\r\n    onDestroy (): void {\r\n        this._sharedBody.reference = false;\r\n        (this._collider as any) = null;\r\n        (this._localShape as any) = null;\r\n        (this._worldShape as any) = null;\r\n    }\r\n\r\n    transform (m: Mat4 | Readonly<Mat4>, pos: Vec3 | Readonly<Vec3>, rot: Quat | Readonly<Quat>, scale: Vec3 | Readonly<Vec3>): void {\r\n        this._localShape.transform(m, pos, rot, scale, this._worldShape);\r\n    }\r\n\r\n    /** group */\r\n    public getGroup (): number {\r\n        return this._sharedBody.getGroup();\r\n    }\r\n\r\n    public setGroup (v: number): void {\r\n        this._sharedBody.setGroup(v);\r\n    }\r\n\r\n    public addGroup (v: number): void {\r\n        this._sharedBody.addGroup(v);\r\n    }\r\n\r\n    public removeGroup (v: number): void {\r\n        this._sharedBody.removeGroup(v);\r\n    }\r\n\r\n    /** mask */\r\n    public getMask (): number {\r\n        return this._sharedBody.getMask();\r\n    }\r\n\r\n    public setMask (v: number): void {\r\n        this._sharedBody.setMask(v);\r\n    }\r\n\r\n    public addMask (v: number): void {\r\n        this._sharedBody.addMask(v);\r\n    }\r\n\r\n    public removeMask (v: number): void {\r\n        this._sharedBody.removeMask(v);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, geometry } from '../../../core';\r\nimport { BuiltinShape } from './builtin-shape';\r\nimport { IBoxShape } from '../../spec/i-physics-shape';\r\nimport { BoxCollider } from '../../../../exports/physics-framework';\r\n\r\nconst tempMin = new Vec3();\r\nconst tempMax = new Vec3();\r\n\r\nexport class BuiltinBoxShape extends BuiltinShape implements IBoxShape {\r\n    get localObb (): geometry.OBB {\r\n        return this._localShape as geometry.OBB;\r\n    }\r\n\r\n    get worldObb (): geometry.OBB {\r\n        return this._worldShape as geometry.OBB;\r\n    }\r\n\r\n    get collider (): BoxCollider {\r\n        return this._collider as BoxCollider;\r\n    }\r\n\r\n    constructor () {\r\n        super();\r\n        this._localShape = new geometry.OBB();\r\n        this._worldShape = new geometry.OBB();\r\n    }\r\n\r\n    updateSize (): void {\r\n        Vec3.multiplyScalar(this.localObb.halfExtents, this.collider.size, 0.5);\r\n        Vec3.multiply(this.worldObb.halfExtents, this.localObb.halfExtents, this.collider.node.worldScale);\r\n    }\r\n\r\n    onLoad (): void {\r\n        super.onLoad();\r\n        this.updateSize();\r\n    }\r\n\r\n    getAABB (v: geometry.AABB): void {\r\n        this.worldObb.getBoundary(tempMin, tempMax);\r\n        geometry.AABB.fromPoints(v, tempMin, tempMax);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, geometry } from '../../../core';\r\nimport { BuiltinShape } from './builtin-shape';\r\nimport { ISphereShape } from '../../spec/i-physics-shape';\r\nimport { maxComponent } from '../../utils/util';\r\nimport { SphereCollider } from '../../../../exports/physics-framework';\r\n\r\nconst tempMin = new Vec3();\r\nconst tempMax = new Vec3();\r\nexport class BuiltinSphereShape extends BuiltinShape implements ISphereShape {\r\n    updateRadius (): void {\r\n        this.localSphere.radius = this.collider.radius;\r\n        const s = maxComponent(this.collider.node.worldScale);\r\n        this.worldSphere.radius = this.localSphere.radius * s;\r\n    }\r\n\r\n    get localSphere (): geometry.Sphere {\r\n        return this._localShape as geometry.Sphere;\r\n    }\r\n\r\n    get worldSphere (): geometry.Sphere {\r\n        return this._worldShape as geometry.Sphere;\r\n    }\r\n\r\n    get collider (): SphereCollider {\r\n        return this._collider as SphereCollider;\r\n    }\r\n\r\n    constructor (radius = 0.5) {\r\n        super();\r\n        this._localShape = new geometry.Sphere(0, 0, 0, radius);\r\n        this._worldShape = new geometry.Sphere(0, 0, 0, radius);\r\n    }\r\n\r\n    onLoad (): void {\r\n        super.onLoad();\r\n        this.updateRadius();\r\n    }\r\n\r\n    getAABB (v: geometry.AABB): void {\r\n        this.worldSphere.getBoundary(tempMin, tempMax);\r\n        geometry.AABB.fromPoints(v, tempMin, tempMax);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BuiltinShape } from './builtin-shape';\r\nimport { ICapsuleShape } from '../../spec/i-physics-shape';\r\nimport { Vec3, geometry } from '../../../core';\r\nimport { EAxisDirection, CapsuleCollider } from '../../framework';\r\n\r\nconst temp0 = new Vec3();\r\nconst temp1 = new Vec3();\r\nexport class BuiltinCapsuleShape extends BuiltinShape implements ICapsuleShape {\r\n    get localCapsule (): geometry.Capsule {\r\n        return this._localShape as geometry.Capsule;\r\n    }\r\n\r\n    get worldCapsule (): geometry.Capsule {\r\n        return this._worldShape as geometry.Capsule;\r\n    }\r\n\r\n    get collider (): CapsuleCollider {\r\n        return this._collider as CapsuleCollider;\r\n    }\r\n\r\n    constructor (radius = 0.5, height = 2, direction = EAxisDirection.Y_AXIS) {\r\n        super();\r\n        const halfHeight = (height - radius * 2) / 2;\r\n        const h = halfHeight < 0 ? 0 : halfHeight;\r\n        this._localShape = new geometry.Capsule(radius, h, direction);\r\n        this._worldShape = new geometry.Capsule(radius, h, direction);\r\n    }\r\n\r\n    setRadius (v: number): void {\r\n        this.localCapsule.radius = v;\r\n        this.transform(\r\n            this._sharedBody.node.worldMatrix,\r\n            this._sharedBody.node.worldPosition,\r\n            this._sharedBody.node.worldRotation,\r\n            this._sharedBody.node.worldScale,\r\n        );\r\n    }\r\n\r\n    setCylinderHeight (v: number): void {\r\n        this.localCapsule.halfHeight = v / 2;\r\n        this.localCapsule.updateCache();\r\n\r\n        this.transform(\r\n            this._sharedBody.node.worldMatrix,\r\n            this._sharedBody.node.worldPosition,\r\n            this._sharedBody.node.worldRotation,\r\n            this._sharedBody.node.worldScale,\r\n        );\r\n    }\r\n\r\n    setDirection (v: EAxisDirection): void {\r\n        this.localCapsule.axis = v;\r\n        this.localCapsule.updateCache();\r\n\r\n        this.worldCapsule.axis = v;\r\n        this.worldCapsule.updateCache();\r\n\r\n        this.transform(\r\n            this._sharedBody.node.worldMatrix,\r\n            this._sharedBody.node.worldPosition,\r\n            this._sharedBody.node.worldRotation,\r\n            this._sharedBody.node.worldScale,\r\n        );\r\n    }\r\n\r\n    onLoad (): void {\r\n        super.onLoad();\r\n        this.setRadius(this.collider.radius);\r\n        this.setDirection(this.collider.direction);\r\n    }\r\n\r\n    getAABB (v: geometry.AABB): void {\r\n        //capsule has not implemented getBoundary\r\n        v.center.set(this.worldCapsule.center);\r\n        v.halfExtents.set(0, 0, 0);\r\n        temp0.set(this.worldCapsule.radius, this.worldCapsule.radius, this.worldCapsule.radius);\r\n\r\n        Vec3.add(temp1, this.worldCapsule.ellipseCenter0, temp0);\r\n        v.mergePoint(temp1);\r\n        Vec3.subtract(temp1, this.worldCapsule.ellipseCenter0, temp0);\r\n        v.mergePoint(temp1);\r\n        Vec3.add(temp1, this.worldCapsule.ellipseCenter1, temp0);\r\n        v.mergePoint(temp1);\r\n        Vec3.subtract(temp1, this.worldCapsule.ellipseCenter1, temp0);\r\n        v.mergePoint(temp1);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { selector } from '../framework/physics-selector';\r\nimport { BuiltInWorld } from './builtin-world';\r\nimport { BuiltinRigidBody } from './builtin-rigid-body';\r\nimport { BuiltinBoxShape } from './shapes/builtin-box-shape';\r\nimport { BuiltinSphereShape } from './shapes/builtin-sphere-shape';\r\nimport { BuiltinCapsuleShape } from './shapes/builtin-capsule-shape';\r\nimport { Game, game } from '../../game';\r\n\r\ngame.once(Game.EVENT_PRE_SUBSYSTEM_INIT, () => {\r\n    selector.register('builtin', {\r\n        RigidBody: BuiltinRigidBody,\r\n        BoxShape: BuiltinBoxShape,\r\n        SphereShape: BuiltinSphereShape,\r\n        PhysicsWorld: BuiltInWorld,\r\n        CapsuleShape: BuiltinCapsuleShape,\r\n    });\r\n});\r\n"],"names":["BuiltinObject","this","collisionFilterGroup","PhysicsSystem","PhysicsGroup","DEFAULT","collisionFilterMask","_proto","prototype","getGroup","setGroup","v","addGroup","removeGroup","getMask","setMask","addMask","removeMask","m4_0","Mat4","v3_0","Vec3","v3_1","quat_0","Quat","BuiltinSharedBody","_BuiltinObject","node","world","_this","call","_id","index","ref","shapes","wrappedBody","idCounter","_inheritsLoose","getSharedBody","wrappedWorld","newSB","key","uuid","sharedBodesMap","has","get","g","m","instance","collisionMatrix","set","rigidBody","group","intersects","body","i","length","shapeA","j","shapeB","collider","needTriggerEvent","geometry","resolve","worldShape","shapeArr","push","addShape","shape","indexOf","removeShape","js","syncSceneToPhysics","hasChangedFlags","getWorldMatrix","worldPosition","worldRotation","worldScale","transform","syncInitial","destroy","_createClass","bodies","addSharedBody","removeSharedBody","Map","hitPoint","TriggerEventObject","type","selfCollider","otherCollider","impl","aabbTemp","BuiltInWorld","_shapeArrPrev","_collisionMatrix","ArrayCollisionMatrix","_collisionMatrixPrev","_debugLineCount","_MAX_DEBUG_LINE_COUNT","_debugDrawFlags","EPhysicsDrawFlags","NONE","_debugConstraintSize","_aabbColor","Color","_wireframeColor","sweepBox","warnID","sweepBoxClosest","sweepSphere","sweepSphereClosest","sweepCapsule","sweepCapsuleClosest","setGravity","setAllowSleep","setDefaultMaterial","error","step","tmp","bodyA","bodyB","_debugDraw","syncAfterEvents","emitEvents","emitTriggerEvent","raycastClosest","worldRay","options","out","tmp_d","Infinity","max_d","maxDistance","mask","distance","normalize","d","scaleAndAdd","o","_assign","ZERO","raycast","pool","results","r","add","computeHit","id","emit","temp","matrix","reset","_getDebugRenderer","_mainWindow","cameras","director","root","mainWindow","initGeometryRenderer","geometryRenderer","debugRenderer","AABB","getAABB","addBoundingBox","BuiltinRigidBody","_rigidBody","_sharedBody","initialize","com","physicsWorld","reference","onEnable","enabled","onDisable","onDestroy","setMass","setType","setLinearDamping","setAngularDamping","useGravity","useCCD","isUsingCCD","setLinearFactor","setAngularFactor","wakeUp","sleep","clearState","clearForces","clearVelocity","setSleepThreshold","getSleepThreshold","getLinearVelocity","setLinearVelocity","getAngularVelocity","setAngularVelocity","applyForce","applyLocalForce","applyImpulse","applyLocalImpulse","applyTorque","applyLocalTorque","BuiltinShape","_collider","_localShape","_worldShape","getBoundingSphere","updateEventListener","setMaterial","setAsTrigger","setCenter","copy","center","comp","onLoad","pos","rot","scale","tempMin","tempMax","BuiltinBoxShape","_BuiltinShape","updateSize","multiplyScalar","localObb","halfExtents","size","multiply","worldObb","getBoundary","fromPoints","BuiltinSphereShape","radius","updateRadius","localSphere","s","maxComponent","worldSphere","temp0","temp1","BuiltinCapsuleShape","height","direction","EAxisDirection","Y_AXIS","halfHeight","h","setRadius","localCapsule","worldMatrix","setCylinderHeight","updateCache","setDirection","axis","worldCapsule","ellipseCenter0","mergePoint","subtract","ellipseCenter1","game","once","Game","EVENT_PRE_SUBSYSTEM_INIT","selector","register","RigidBody","BoxShape","SphereShape","PhysicsWorld","CapsuleShape"],"mappings":"09CA0BA,IAAaA,EAAa,WAAA,SAAAA,IAAAC,KACfC,qBAA+BC,EAAcC,aAAaC,QAAOJ,KAEjEK,qBAAuB,CAAC,CAAA,IAAAC,EAAAP,EAAAQ,UAkC9B,OAlC8BD,EAGxBE,SAAP,WACI,OAAOR,KAAKC,oBACf,EAAAK,EAEMG,SAAP,SAAiBC,GACbV,KAAKC,qBAAuBS,CAC/B,EAAAJ,EAEMK,SAAP,SAAiBD,GACbV,KAAKC,sBAAwBS,CAChC,EAAAJ,EAEMM,YAAP,SAAoBF,GAChBV,KAAKC,uBAAyBS,CAClC,EAACJ,EAGMO,QAAP,WACI,OAAOb,KAAKK,mBACf,EAAAC,EAEMQ,QAAP,SAAgBJ,GACZV,KAAKK,oBAAsBK,CAC9B,EAAAJ,EAEMS,QAAP,SAAgBL,GACZV,KAAKK,qBAAuBK,CAC/B,EAAAJ,EAEMU,WAAP,SAAmBN,GACfV,KAAKK,sBAAwBK,CAChC,EAAAX,CAAA,CArCqB,GCOpBkB,EAAO,IAAIC,EACXC,EAAO,IAAIC,EACXC,EAAO,IAAID,EACXE,EAAS,IAAIC,EAKNC,EAAkB,SAAAC,GAqE3B,SAAqBC,EAAAA,EAAYC,GAAmB,IAAAC,EAI7B,OAHnBA,EAAOH,EAAAI,KAAA7B,OAAAA,MAVM8B,SAAG,EAAAF,EACZG,OAAS,EAACH,EACVI,IAAM,EAACJ,EAENF,UAAI,EAAAE,EACJD,WAAK,EAAAC,EACLK,OAAyB,GAAEL,EACpCM,YAAuC,KAInCN,EAAKE,IAAMN,EAAkBW,YAC7BP,EAAKF,KAAOA,EACZE,EAAKD,MAAQA,EAAMC,CACvB,CA1E2BQ,EAAAZ,EAAAC,GAAAD,EAGpBa,cAAP,SAAsBX,EAAYY,EAA4BJ,GAC1D,IACIK,EADEC,EAAMd,EAAKe,KAEjB,GAAIjB,EAAkBkB,eAAeC,IAAIH,GACrCD,EAAQf,EAAkBkB,eAAeE,IAAIJ,OAC1C,CACHD,EAAQ,IAAIf,EAAkBE,EAAMY,GACpC,IAAMO,EAAI1C,EAAaC,QACjB0C,EAAI5C,EAAc6C,SAASC,gBAAgBH,GACjDN,EAAMtC,qBAAuB4C,EAC7BN,EAAMlC,oBAAsByC,EAC5BtB,EAAkBkB,eAAeO,IAAIvB,EAAKe,KAAMF,EACnD,CACD,GAAIL,EAAa,CACbK,EAAML,YAAcA,EACpB,IAAMW,EAAIX,EAAYgB,UAAUC,MAC1BL,EAAI5C,EAAc6C,SAASC,gBAAgBH,GACjDN,EAAMtC,qBAAuB4C,EAC7BN,EAAMlC,oBAAsByC,CAC/B,CACD,OAAOP,CACV,EAkDA,IAAAjC,EAAAkB,EAAAjB,UAlBA,OAkBAD,EAED8C,WAAA,SAAYC,GACR,IAAK,IAAIC,EAAI,EAAGA,EAAItD,KAAKiC,OAAOsB,OAAQD,IAEpC,IADA,IAAME,EAASxD,KAAKiC,OAAOqB,GAClBG,EAAI,EAAGA,EAAIJ,EAAKpB,OAAOsB,OAAQE,IAAK,CACzC,IAAMC,EAASL,EAAKpB,OAAOwB,IACvBD,EAAOG,SAASC,kBAAoBF,EAAOC,SAASC,mBAChDC,EAAmBC,QAAQN,EAAOO,WAAYL,EAAOK,cACrD/D,KAAK2B,MAAMqC,SAASC,KAAKT,GACzBxD,KAAK2B,MAAMqC,SAASC,KAAKP,GAGpC,CAER,EAAApD,EAED4D,SAAA,SAAUC,GACInE,KAAKiC,OAAOmC,QAAQD,GACtB,GACJnE,KAAKiC,OAAOgC,KAAKE,EAExB,EAAA7D,EAED+D,YAAA,SAAaF,GACT,IAAMb,EAAItD,KAAKiC,OAAOmC,QAAQD,GAC1Bb,GAAK,GACLgB,EAAsBtE,KAAKiC,OAAQqB,EAE1C,EAAAhD,EAEDiE,mBAAA,WACI,GAAIvE,KAAK0B,KAAK8C,gBAAiB,CAC3BxE,KAAK0B,KAAK+C,eAAexD,GACzBE,EAAK8B,IAAIjD,KAAK0B,KAAKgD,eACnBpD,EAAO2B,IAAIjD,KAAK0B,KAAKiD,eACrBtD,EAAK4B,IAAIjD,KAAK0B,KAAKkD,YACnB,IAAK,IAAItB,EAAI,EAAGA,EAAItD,KAAKiC,OAAOsB,OAAQD,IACpCtD,KAAKiC,OAAOqB,GAAGuB,UAAU5D,EAAME,EAAMG,EAAQD,EAEpD,CACJ,EAAAf,EAEDwE,YAAA,WACI9E,KAAK0B,KAAK+C,eAAexD,GACzBE,EAAK8B,IAAIjD,KAAK0B,KAAKgD,eACnBpD,EAAO2B,IAAIjD,KAAK0B,KAAKiD,eACrBtD,EAAK4B,IAAIjD,KAAK0B,KAAKkD,YACnB,IAAK,IAAItB,EAAI,EAAGA,EAAItD,KAAKiC,OAAOsB,OAAQD,IACpCtD,KAAKiC,OAAOqB,GAAGuB,UAAU5D,EAAME,EAAMG,EAAQD,EAEpD,EAAAf,EAEOyE,QAAR,WACIvD,EAAkBkB,eAAqB,OAAC1C,KAAK0B,KAAKe,MACjDzC,KAAK0B,KAAe,KACpB1B,KAAK2B,MAAgB,KACrB3B,KAAKiC,OAAiB,IAC1B,EAAA+C,EAAAxD,EAAA,CAAA,CAAAgB,IAAA,KAAAI,IA1GD,WACI,OAAO5C,KAAK8B,GAChB,GAAC,CAAAU,IAAA,UAAAS,IAOD,SAAavC,GACLA,EACIV,KAAK+B,MAAQ,IACb/B,KAAK+B,MAAQ/B,KAAK2B,MAAMsD,OAAO1B,OAC/BvD,KAAK2B,MAAMuD,cAAclF,MACzBA,KAAK8E,eAEF9E,KAAK+B,OAAS,GACoB,IAAvB/B,KAAKiC,OAAOsB,SAG1BvD,KAAK+B,OAAS,EACd/B,KAAK2B,MAAMwD,iBAAiBnF,MAGxC,GAAC,CAAAwC,IAAA,YAAAS,IAED,SAAevC,GAEXA,EAAIV,KAAKgC,MAAQhC,KAAKgC,MACL,IAAbhC,KAAKgC,KAAahC,KAAK+E,SAC/B,KAACvD,CAAA,CAxD0B,CAAQzB,GAA1ByB,EACekB,eAAiB,IAAI0C,IADpC5D,EA2DMW,UAAY,EC9D/B,IAAMkD,EAAW,IAAIjE,EACfkE,EAAqB,CACvBC,KAAM,iBACNC,aAAc,KACdC,cAAe,KACfC,KAAM,CAAA,GAGJC,EAAW,IAAI9B,EAQR+B,EAAa,WAAA,SAAAA,IAAA5F,KAgFtBgE,SAA2B,GAAEhE,KACpBiF,OAA8B,GAAEjF,KAEjC6F,cAAgC,GAAE7F,KAClC8F,iBAAyC,IAAIC,EAAsB/F,KACnEgG,qBAA6C,IAAID,EAAsB/F,KAEvEiG,gBAAkB,EAACjG,KACnBkG,sBAAwB,MAAKlG,KAC7BmG,gBAAkBC,EAAkBC,KAAIrG,KACxCsG,qBAAuB,GAAGtG,KAC1BuG,WAAa,IAAIC,EAAM,EAAG,IAAK,IAAK,KAAIxG,KACxCyG,gBAAkB,IAAID,EAAM,IAAK,EAAG,IAAK,IAAI,CAAA,IAAAlG,EAAAsF,EAAArF,UAgBpD,OAhBoDD,EA3FrDoG,SAAA,WASI,OADAC,EAAO,OACA,CACV,EAAArG,EAEDsG,gBAAA,WAQI,OADAD,EAAO,OACA,CACV,EAAArG,EAEDuG,YAAA,WAQI,OADAF,EAAO,OACA,CACV,EAAArG,EAEDwG,mBAAA,WAOI,OADAH,EAAO,OACA,CACV,EAAArG,EAEDyG,aAAA,WAUI,OADAJ,EAAO,OACA,CACV,EAAArG,EAED0G,oBAAA,WASI,OADAL,EAAO,OACA,CACV,EAAArG,EAED2G,WAAA,WAEC,EAAA3G,EACD4G,cAAA,WAEC,EAAA5G,EACD6G,mBAAA,WAEC,EAAA7G,EAgCDyE,QAAA,WACQ/E,KAAKiF,OAAO1B,QAAQ6D,EAAM,kDACjC,EAAA9G,EAED+G,KAAA,WAEI,IAAMC,EAAMtH,KAAK6F,cACjB7F,KAAK6F,cAAgB7F,KAAKgE,SAC1BhE,KAAKgE,SAAWsD,EAChBtH,KAAKgE,SAAST,OAAS,EAGvB,IAAK,IAAID,EAAI,EAAGA,EAAItD,KAAKiF,OAAO1B,OAAQD,IAEpC,IADA,IAAMiE,EAAQvH,KAAKiF,OAAO3B,GACjBG,EAAIH,EAAI,EAAGG,EAAIzD,KAAKiF,OAAO1B,OAAQE,IAAK,CAC7C,IAAM+D,EAAQxH,KAAKiF,OAAOxB,GAGrB8D,EAAMtH,qBAAuBuH,EAAMnH,qBAChCmH,EAAMvH,qBAAuBsH,EAAMlH,qBAG3CkH,EAAMnE,WAAWoE,EACpB,CAGLxH,KAAKyH,YACR,EAAAnH,EAEDiE,mBAAA,WACI,IAAK,IAAIjB,EAAI,EAAGA,EAAItD,KAAKiF,OAAO1B,OAAQD,IACpCtD,KAAKiF,OAAO3B,GAAGiB,oBAEtB,EAAAjE,EAEDoH,gBAAA,WACI1H,KAAKuE,oBACR,EAAAjE,EAEDqH,WAAA,WACI3H,KAAK4H,kBACR,EAAAtH,EAEDuH,eAAA,SAAgBC,EAAwBC,EAA0BC,GAI9D,IAHA,IAAIC,EAAQC,IACNC,EAAQJ,EAAQK,YAChBC,EAAON,EAAQM,KACZ/E,EAAI,EAAGA,EAAItD,KAAKiF,OAAO1B,OAAQD,IAAK,CACzC,IAAMD,EAAOrD,KAAKiF,OAAO3B,GACzB,GAAMD,EAAKpD,qBAAuBoI,EAClC,IAAK,IAAI/E,EAAI,EAAGA,EAAID,EAAKpB,OAAOsB,OAAQD,IAAK,CACzC,IAAMa,EAAQd,EAAKpB,OAAOqB,GACpBgF,EAAWzE,EAAmBC,QAAQgE,EAAU3D,EAAMJ,YAC3C,IAAbuE,GAAkBA,EAAWH,GAG7BF,EAAQK,IACRL,EAAQK,EACRlH,EAAKmH,UAAUlD,EAAUyC,EAASU,GAClCpH,EAAKqH,YAAYpD,EAAUyC,EAASY,EAAGrD,EAAUiD,GACjDN,EAAIW,QAAQtD,EAAUiD,EAAUnE,EAAMR,SAAUvC,EAAKwH,MAE5D,CACJ,CAED,QAASX,IAAUC,IACtB,EAAA5H,EAEDuI,QAAA,SAASf,EAAwBC,EAA0Be,EAAqCC,GAG5F,IAFA,IAAMZ,EAAQJ,EAAQK,YAChBC,EAAON,EAAQM,KACZ/E,EAAI,EAAGA,EAAItD,KAAKiF,OAAO1B,OAAQD,IAAK,CACzC,IAAMD,EAAOrD,KAAKiF,OAAO3B,GACzB,GAAMD,EAAKpD,qBAAuBoI,EAClC,IAAK,IAAI/E,EAAI,EAAGA,EAAID,EAAKpB,OAAOsB,OAAQD,IAAK,CACzC,IAAMa,EAAQd,EAAKpB,OAAOqB,GACpBgF,EAAWzE,EAAmBC,QAAQgE,EAAU3D,EAAMJ,YAC5D,KAAiB,IAAbuE,GAAkBA,EAAWH,GAAjC,CAGI,IAAMa,EAAIF,EAAKG,MACfnB,EAASoB,WAAW7D,EAAUiD,GAC9BU,EAAEL,QAAQtD,EAAUiD,EAAUnE,EAAMR,SAAUvC,EAAKwH,MACnDG,EAAQ9E,KAAK+E,EAChB,CACJ,CACJ,CACD,OAAOD,EAAQxF,OAAS,CAC3B,EAAAjD,EAED+B,cAAA,SAAeX,EAAYQ,GACvB,OAAOV,EAAkBa,cAAcX,EAAM1B,KAAMkC,EACtD,EAAA5B,EAED4E,cAAA,SAAe7B,GACGrD,KAAKiF,OAAOb,QAAQf,GACtB,GACRrD,KAAKiF,OAAOhB,KAAKZ,EAExB,EAAA/C,EAED6E,iBAAA,SAAkB9B,GACd,IAAMtB,EAAQ/B,KAAKiF,OAAOb,QAAQf,GAC9BtB,GAAS,GACTuC,EAAsBtE,KAAKiF,OAAQlD,EAE1C,EAAAzB,EAEOsH,iBAAR,WAGI,IAFA,IAAIpE,EACAE,EACKJ,EAAI,EAAGA,EAAItD,KAAKgE,SAAST,OAAQD,GAAK,EAC3CE,EAASxD,KAAKgE,SAASV,GACvBI,EAAS1D,KAAKgE,SAASV,EAAI,GAE3BgC,EAAmBE,aAAehC,EAAOG,SACzC2B,EAAmBG,cAAgB/B,EAAOC,SAE1C3D,KAAK8F,iBAAiB7C,IAAIO,EAAO2F,GAAIzF,EAAOyF,IAAI,GAE5CnJ,KAAKgG,qBAAqBpD,IAAIY,EAAO2F,GAAIzF,EAAOyF,IAEhD7D,EAAmBC,KAAO,gBAG1BD,EAAmBC,KAAO,iBAG1B/B,EAAOG,UACPH,EAAOG,SAASyF,KAAK9D,EAAmBC,KAAMD,GAGlDA,EAAmBE,aAAe9B,EAAOC,SACzC2B,EAAmBG,cAAgBjC,EAAOG,SAEtCD,EAAOC,UACPD,EAAOC,SAASyF,KAAK9D,EAAmBC,KAAMD,GAItD,IAAK,IAAIhC,EAAI,EAAGA,EAAItD,KAAK6F,cAActC,OAAQD,GAAK,EAChDE,EAASxD,KAAK6F,cAAcvC,GAC5BI,EAAS1D,KAAK6F,cAAcvC,EAAI,GAE5BtD,KAAKgG,qBAAqBpD,IAAIY,EAAO2F,GAAIzF,EAAOyF,MAC3CnJ,KAAK8F,iBAAiBlD,IAAIY,EAAO2F,GAAIzF,EAAOyF,MAE7C7D,EAAmBC,KAAO,gBAC1BD,EAAmBE,aAAehC,EAAOG,SACzC2B,EAAmBG,cAAgB/B,EAAOC,SAEtCH,EAAOG,UACPH,EAAOG,SAASyF,KAAK9D,EAAmBC,KAAMD,GAGlDA,EAAmBE,aAAe9B,EAAOC,SACzC2B,EAAmBG,cAAgBjC,EAAOG,SAEtCD,EAAOC,UACPD,EAAOC,SAASyF,KAAK9D,EAAmBC,KAAMD,GAGlDtF,KAAK8F,iBAAiB7C,IAAIO,EAAO2F,GAAIzF,EAAOyF,IAAI,KAK5D,IAAME,EAAOrJ,KAAKgG,qBAAqBsD,OACvCtJ,KAAKgG,qBAAqBsD,OAAStJ,KAAK8F,iBAAiBwD,OACzDtJ,KAAK8F,iBAAiBwD,OAASD,EAC/BrJ,KAAK8F,iBAAiByD,OACzB,EAAAjJ,EAEOkJ,kBAAR,WAAmD,IAAAC,EACzCC,EAAU,SAAAC,EAASC,KAAMC,iBAAf,EAAAJ,EAA2BC,QAC3C,OAAKA,EACkB,IAAnBA,EAAQnG,OAAqB,KAC5BmG,EAAQ,IACbA,EAAQ,GAAGI,uBAEJJ,EAAQ,GAAGK,kBAHM,KAFH,IAMxB,EAAAzJ,EAEOmH,WAAR,WACI,IAAMuC,EAAgBhK,KAAKwJ,oBAC3B,GAAKQ,IAELhK,KAAKiG,gBAAkB,EACnBjG,KAAKmG,gBAAkBC,EAAkB6D,MACzC,IAAK,IAAI3G,EAAI,EAAGA,EAAItD,KAAKiF,OAAO1B,OAAQD,IAEpC,IADA,IAAMD,EAAOrD,KAAKiF,OAAO3B,GAChBG,EAAI,EAAGA,EAAIJ,EAAKpB,OAAOsB,OAAQE,IAAK,CACzC,IAAMU,EAAQd,EAAKpB,OAAOwB,GACtBzD,KAAKiG,gBAtTL,GAsTyCjG,KAAKkG,wBAC9ClG,KAAKiG,iBAvTL,GAwTA9B,EAAM+F,QAAQvE,GACdqE,EAAcG,eAAexE,EAAU3F,KAAKuG,YAEnD,CAGZ,EAAAvB,EAAAY,EAAA,CAAA,CAAApD,IAAA,OAAAI,IAxOD,WAA4B,OAAO5C,IAAM,GAAC,CAAAwC,IAAA,iBAAAI,IAe1C,WACI,OAAO5C,KAAKmG,eACf,EAAAlD,IAED,SAAoBvC,GAChBV,KAAKmG,gBAAkBzF,CAC3B,GAAC,CAAA8B,IAAA,0BAAAI,IAED,WACI,OAAO5C,KAAKsG,oBACf,EAAArD,IAED,SAA6BvC,GACzBV,KAAKsG,qBAAuB5F,CAChC,KAACkF,CAAA,CA5GqB,GCxBbwE,EAAiB,WAAA,SAAAA,IAAApK,KASlBqK,gBAAU,EAAArK,KACRsK,iBAAW,CAAA,CAAA,IAAAhK,EAAA8J,EAAA7J,UAH4C,OAG5CD,EAErBiK,WAAA,SAAYC,GACRxK,KAAKqK,WAAaG,EAClBxK,KAAKsK,YAAepK,EAAc6C,SAAS0H,aAA8BpI,cAAcrC,KAAKqK,WAAW3I,KAAM1B,MAC7GA,KAAKsK,YAAYI,WAAY,CAChC,EAAApK,EAEDqK,SAAA,WACI3K,KAAKsK,YAAYM,SAAU,CAC9B,EAAAtK,EAEDuK,UAAA,WACI7K,KAAKsK,YAAYM,SAAU,CAC9B,EAAAtK,EAEDwK,UAAA,WACI9K,KAAKsK,YAAYI,WAAY,EAC5B1K,KAAKqK,WAAqB,KAC1BrK,KAAKsK,YAAsB,IAC/B,EAAAhK,EAEDyK,QAAA,WAA6B,EAAAzK,EAC7B0K,QAAA,WAAqC,EAAA1K,EACrC2K,iBAAA,WAAsC,EAAA3K,EACtC4K,kBAAA,WAAuC,EAAA5K,EACvC6K,WAAA,WAAiC,EAAA7K,EACjC8K,OAAA,WAA6B,EAAA9K,EAC7B+K,WAAA,WAAyB,OAAO,CAAQ,EAAA/K,EACxCgL,gBAAA,WAAwC,EAAAhL,EACxCiL,iBAAA,WAAyC,EAAAjL,EACzC4G,cAAA,WAAoC,EAAA5G,EACpCkL,OAAA,WAAmB,EAAAlL,EACnBmL,MAAA,WAAkB,EAAAnL,EAClBoL,WAAA,WAAuB,EAAApL,EACvBqL,YAAA,WAAwB,EAAArL,EACxBsL,cAAA,WAA0B,EAAAtL,EAC1BuL,kBAAA,WAAuC,EAAAvL,EACvCwL,kBAAA,WAA+B,OAAO,CAAI,EAAAxL,EAC1CyL,kBAAA,WAA4C,EAAAzL,EAC5C0L,kBAAA,WAA8C,EAAA1L,EAC9C2L,mBAAA,WAA6C,EAAA3L,EAC7C4L,mBAAA,WAA+C,EAAA5L,EAC/C6L,WAAA,WAAkE,EAAA7L,EAClE8L,gBAAA,WAAuE,EAAA9L,EACvE+L,aAAA,WAAoE,EAAA/L,EACpEgM,kBAAA,WAAyE,EAAAhM,EACzEiM,YAAA,WAAyC,EAAAjM,EACzCkM,iBAAA,WAA8C,EAAAlM,EAE9CG,SAAA,SAAUC,GACNV,KAAKsK,YAAY7J,SAASC,EAC7B,EAAAJ,EACDE,SAAA,WACI,OAAOR,KAAKsK,YAAY9J,UAC3B,EAAAF,EACDK,SAAA,SAAUD,GACNV,KAAKsK,YAAY3J,SAASD,EAC7B,EAAAJ,EACDM,YAAA,SAAaF,GACTV,KAAKsK,YAAY1J,YAAYF,EAChC,EAAAJ,EACDQ,QAAA,SAASJ,GACLV,KAAKsK,YAAYxJ,QAAQJ,EAC5B,EAAAJ,EACDO,QAAA,WACI,OAAOb,KAAKsK,YAAYzJ,SAC3B,EAAAP,EACDS,QAAA,SAASL,GACLV,KAAKsK,YAAYvJ,QAAQL,EAC5B,EAAAJ,EACDU,WAAA,SAAYN,GACRV,KAAKsK,YAAYtJ,WAAWN,EAC/B,EAAAsE,EAAAoF,EAAA,CAAA,CAAA5H,IAAA,OAAAI,IAlFD,WAAgC,OAAO5C,IAAM,GAAC,CAAAwC,IAAA,UAAAI,IAC9C,WAA0B,OAAO,CAAM,GAAC,CAAAJ,IAAA,WAAAI,IACxC,WAA2B,OAAO,CAAO,GAAC,CAAAJ,IAAA,aAAAI,IAC1C,WAA6B,OAAO,CAAO,GAAC,CAAAJ,IAAA,YAAAI,IAE5C,WAA8B,OAAO5C,KAAKqK,UAAY,GAAC,CAAA7H,IAAA,aAAAI,IACvD,WAAuC,OAAO5C,KAAKsK,WAAa,KAACF,CAAA,CAPvC,GCCjBqC,EAAa,WAAA,SAAAA,IAAAzM,KAkCbmJ,GAAasD,EAAatK,YAAWnC,KAEpCsK,iBAAW,EAAAtK,KACX0M,eAAS,EAAA1M,KACT2M,iBAAW,EAAA3M,KACX4M,iBAAW,CAAA,CAAA,IAAAtM,EAAAmM,EAAAlM,UATpB,OASoBD,EAtCrB4J,QAAA,WAAoC,EAAA5J,EACpCuM,kBAAA,WAAgD,EAAAvM,EAChDwM,oBAAA,WAAgC,EAAAxM,EAChCyM,YAAA,WAAiD,EAAAzM,EACjD0M,aAAA,WAAmC,EAAA1M,EAGnC2M,UAAA,SAAWvM,GACPU,EAAK8L,KAAKlN,KAAK2M,YAAYQ,OAAQzM,EACtC,EAAAJ,EA+BDiK,WAAA,SAAY6C,GACRpN,KAAK0M,UAAYU,EACjBpN,KAAKsK,YAAepK,EAAc6C,SAAS0H,aAA8BpI,cAAcrC,KAAK0M,UAAUhL,MACtG1B,KAAKsK,YAAYI,WAAY,CAChC,EAAApK,EAED+M,OAAA,WACIrN,KAAKiN,UAAUjN,KAAK0M,UAAUS,OACjC,EAAA7M,EAEDqK,SAAA,WACI3K,KAAKsK,YAAYpG,SAASlE,MAC1BA,KAAKsK,YAAYM,SAAU,CAC9B,EAAAtK,EAEDuK,UAAA,WACI7K,KAAKsK,YAAYjG,YAAYrE,MAC7BA,KAAKsK,YAAYM,SAAU,CAC9B,EAAAtK,EAEDwK,UAAA,WACI9K,KAAKsK,YAAYI,WAAY,EAC5B1K,KAAK0M,UAAoB,KACzB1M,KAAK2M,YAAsB,KAC3B3M,KAAK4M,YAAsB,IAC/B,EAAAtM,EAEDuE,UAAA,SAAW/B,EAA0BwK,EAA4BC,EAA4BC,GACzFxN,KAAK2M,YAAY9H,UAAU/B,EAAGwK,EAAKC,EAAKC,EAAOxN,KAAK4M,YACxD,EAACtM,EAGME,SAAP,WACI,OAAOR,KAAKsK,YAAY9J,UAC3B,EAAAF,EAEMG,SAAP,SAAiBC,GACbV,KAAKsK,YAAY7J,SAASC,EAC7B,EAAAJ,EAEMK,SAAP,SAAiBD,GACbV,KAAKsK,YAAY3J,SAASD,EAC7B,EAAAJ,EAEMM,YAAP,SAAoBF,GAChBV,KAAKsK,YAAY1J,YAAYF,EACjC,EAACJ,EAGMO,QAAP,WACI,OAAOb,KAAKsK,YAAYzJ,SAC3B,EAAAP,EAEMQ,QAAP,SAAgBJ,GACZV,KAAKsK,YAAYxJ,QAAQJ,EAC5B,EAAAJ,EAEMS,QAAP,SAAgBL,GACZV,KAAKsK,YAAYvJ,QAAQL,EAC5B,EAAAJ,EAEMU,WAAP,SAAmBN,GACfV,KAAKsK,YAAYtJ,WAAWN,EAC/B,EAAAsE,EAAAyH,EAAA,CAAA,CAAAjK,IAAA,oBAAAI,IAlGD,WAA6C,OAAO,IAAM,GAAC,CAAAJ,IAAA,aAAAI,IAM3D,WACI,OAAO5C,KAAK2M,WAChB,GAAC,CAAAnK,IAAA,aAAAI,IAED,WACI,OAAO5C,KAAK4M,WAChB,GAAC,CAAApK,IAAA,OAAAI,IAED,WACI,OAAO5C,KAAK4M,WAChB,GAAC,CAAApK,IAAA,aAAAI,IAED,WACI,OAAO5C,KAAKsK,WAChB,GAAC,CAAA9H,IAAA,WAAAI,IAED,WACI,OAAO5C,KAAK0M,SAChB,KAACD,CAAA,CA9BqB,GAAbA,EAiCMtK,UAAY,ECnC/B,IAAMsL,EAAU,IAAIrM,EACdsM,EAAU,IAAItM,EAEPuM,EAAgB,SAAAC,GAazB,SAAAD,IAAA,IAAA/L,EAG0C,OAFtCA,EAAOgM,EAAA/L,KAAA7B,OAAAA,MACF2M,YAAc,IAAI9I,EACvBjC,EAAKgL,YAAc,IAAI/I,EAAejC,CAC1C,CAjByBQ,EAAAuL,EAAAC,GAiBxB,IAAAtN,EAAAqN,EAAApN,UANA,OAMAD,EAEDuN,WAAA,WACIzM,EAAK0M,eAAe9N,KAAK+N,SAASC,YAAahO,KAAK2D,SAASsK,KAAM,IACnE7M,EAAK8M,SAASlO,KAAKmO,SAASH,YAAahO,KAAK+N,SAASC,YAAahO,KAAK2D,SAASjC,KAAKkD,WAC1F,EAAAtE,EAED+M,OAAA,WACIO,EAAArN,UAAM8M,OAAMxL,KAAA7B,MACZA,KAAK6N,YACR,EAAAvN,EAED4J,QAAA,SAASxJ,GACLV,KAAKmO,SAASC,YAAYX,EAASC,GACnC7J,EAAcwK,WAAW3N,EAAG+M,EAASC,EACxC,EAAA1I,EAAA2I,EAAA,CAAA,CAAAnL,IAAA,WAAAI,IA/BD,WACI,OAAO5C,KAAK2M,WAChB,GAAC,CAAAnK,IAAA,WAAAI,IAED,WACI,OAAO5C,KAAK4M,WAChB,GAAC,CAAApK,IAAA,WAAAI,IAED,WACI,OAAO5C,KAAK0M,SAChB,KAACiB,CAAA,CAXwB,CAAQlB,GCF/BgB,EAAU,IAAIrM,EACdsM,EAAU,IAAItM,EACPkN,EAAmB,SAAAV,GAAAxL,EAAAkM,EAAAV,GAAA,IAAAtN,EAAAgO,EAAA/N,UAmB5B,SAAA+N,EAAaC,GAAY,IAAA3M,EAGmC,YAHzC,IAAN2M,IAAAA,EAAS,KAClB3M,EAAOgM,EAAA/L,KAAA7B,OAAAA,MACF2M,YAAc,IAAI9I,EAAgB,EAAG,EAAG,EAAG0K,GAChD3M,EAAKgL,YAAc,IAAI/I,EAAgB,EAAG,EAAG,EAAG0K,GAAQ3M,CAC5D,CANC,OAjB2BtB,EAC5BkO,aAAA,WACIxO,KAAKyO,YAAYF,OAASvO,KAAK2D,SAAS4K,OACxC,IAAMG,EAAIC,EAAa3O,KAAK2D,SAASjC,KAAKkD,YAC1C5E,KAAK4O,YAAYL,OAASvO,KAAKyO,YAAYF,OAASG,CACvD,EAkBApO,EAED+M,OAAA,WACIO,EAAArN,UAAM8M,OAAMxL,KAAA7B,MACZA,KAAKwO,cACR,EAAAlO,EAED4J,QAAA,SAASxJ,GACLV,KAAK4O,YAAYR,YAAYX,EAASC,GACtC7J,EAAcwK,WAAW3N,EAAG+M,EAASC,EACxC,EAAA1I,EAAAsJ,EAAA,CAAA,CAAA9L,IAAA,cAAAI,IA1BD,WACI,OAAO5C,KAAK2M,WAChB,GAAC,CAAAnK,IAAA,cAAAI,IAED,WACI,OAAO5C,KAAK4M,WAChB,GAAC,CAAApK,IAAA,WAAAI,IAED,WACI,OAAO5C,KAAK0M,SAChB,KAAC4B,CAAA,CAjB2B,CAAQ7B,GCHlCoC,EAAQ,IAAIzN,EACZ0N,EAAQ,IAAI1N,EACL2N,EAAoB,SAAAnB,GAa7B,SAAAmB,EAAaR,EAAcS,EAAYC,GAAiC,IAAArN,OAArD,IAAN2M,IAAAA,EAAS,SAAW,IAANS,IAAAA,EAAS,QAAY,IAATC,IAAAA,EAAYC,EAAeC,QAE9D,IAAMC,GAAcJ,EAAkB,EAATT,GAAc,EACrCc,EAAID,EAAa,EAAI,EAAIA,EAE+B,OAJ9DxN,EAAOgM,EAAA/L,KAAA7B,OAAAA,MAGF2M,YAAc,IAAI9I,EAAiB0K,EAAQc,EAAGJ,GACnDrN,EAAKgL,YAAc,IAAI/I,EAAiB0K,EAAQc,EAAGJ,GAAWrN,CAClE,CAnB6BQ,EAAA2M,EAAAnB,GAmB5B,IAAAtN,EAAAyO,EAAAxO,UARA,OAQAD,EAEDgP,UAAA,SAAW5O,GACPV,KAAKuP,aAAahB,OAAS7N,EAC3BV,KAAK6E,UACD7E,KAAKsK,YAAY5I,KAAK8N,YACtBxP,KAAKsK,YAAY5I,KAAKgD,cACtB1E,KAAKsK,YAAY5I,KAAKiD,cACtB3E,KAAKsK,YAAY5I,KAAKkD,WAE7B,EAAAtE,EAEDmP,kBAAA,SAAmB/O,GACfV,KAAKuP,aAAaH,WAAa1O,EAAI,EACnCV,KAAKuP,aAAaG,cAElB1P,KAAK6E,UACD7E,KAAKsK,YAAY5I,KAAK8N,YACtBxP,KAAKsK,YAAY5I,KAAKgD,cACtB1E,KAAKsK,YAAY5I,KAAKiD,cACtB3E,KAAKsK,YAAY5I,KAAKkD,WAE7B,EAAAtE,EAEDqP,aAAA,SAAcjP,GACVV,KAAKuP,aAAaK,KAAOlP,EACzBV,KAAKuP,aAAaG,cAElB1P,KAAK6P,aAAaD,KAAOlP,EACzBV,KAAK6P,aAAaH,cAElB1P,KAAK6E,UACD7E,KAAKsK,YAAY5I,KAAK8N,YACtBxP,KAAKsK,YAAY5I,KAAKgD,cACtB1E,KAAKsK,YAAY5I,KAAKiD,cACtB3E,KAAKsK,YAAY5I,KAAKkD,WAE7B,EAAAtE,EAED+M,OAAA,WACIO,EAAArN,UAAM8M,OAAMxL,KAAA7B,MACZA,KAAKsP,UAAUtP,KAAK2D,SAAS4K,QAC7BvO,KAAK2P,aAAa3P,KAAK2D,SAASsL,UACnC,EAAA3O,EAED4J,QAAA,SAASxJ,GAELA,EAAEyM,OAAOlK,IAAIjD,KAAK6P,aAAa1C,QAC/BzM,EAAEsN,YAAY/K,IAAI,EAAG,EAAG,GACxB4L,EAAM5L,IAAIjD,KAAK6P,aAAatB,OAAQvO,KAAK6P,aAAatB,OAAQvO,KAAK6P,aAAatB,QAEhFnN,EAAK6H,IAAI6F,EAAO9O,KAAK6P,aAAaC,eAAgBjB,GAClDnO,EAAEqP,WAAWjB,GACb1N,EAAK4O,SAASlB,EAAO9O,KAAK6P,aAAaC,eAAgBjB,GACvDnO,EAAEqP,WAAWjB,GACb1N,EAAK6H,IAAI6F,EAAO9O,KAAK6P,aAAaI,eAAgBpB,GAClDnO,EAAEqP,WAAWjB,GACb1N,EAAK4O,SAASlB,EAAO9O,KAAK6P,aAAaI,eAAgBpB,GACvDnO,EAAEqP,WAAWjB,EAChB,EAAA9J,EAAA+J,EAAA,CAAA,CAAAvM,IAAA,eAAAI,IA7ED,WACI,OAAO5C,KAAK2M,WAChB,GAAC,CAAAnK,IAAA,eAAAI,IAED,WACI,OAAO5C,KAAK4M,WAChB,GAAC,CAAApK,IAAA,WAAAI,IAED,WACI,OAAO5C,KAAK0M,SAChB,KAACqC,CAAA,CAX4B,CAAQtC,GCCzCyD,EAAKC,KAAKC,EAAKC,0BAA0B,WACrCC,EAASC,SAAS,UAAW,CACzBC,UAAWpG,EACXqG,SAAU9C,EACV+C,YAAapC,EACbqC,aAAc/K,EACdgL,aAAc7B,GAEtB"}