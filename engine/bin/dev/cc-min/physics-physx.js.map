{"version":3,"file":"physics-physx.js","sources":["../../../cocos/physics/physx/instantiate.ts","../../../cocos/physics/physx/physx-instance.ts","../../../cocos/physics/physx/physx-enum.ts","../../../cocos/physics/physx/physx-adapter.ts","../../../cocos/physics/physx/physx-shared-body.ts","../../../cocos/physics/physx/physx-contact-equation.ts","../../../cocos/physics/physx/shapes/physx-shape.ts","../../../cocos/physics/physx/character-controllers/physx-character-controller.ts","../../../cocos/physics/physx/physx-world.ts","../../../cocos/physics/physx/physx-rigid-body.ts","../../../cocos/physics/physx/shapes/physx-sphere-shape.ts","../../../cocos/physics/physx/shapes/physx-box-shape.ts","../../../cocos/physics/physx/shapes/physx-capsule-shape.ts","../../../cocos/physics/physx/shapes/physx-plane-shape.ts","../../../cocos/physics/physx/shapes/physx-trimesh-shape.ts","../../../cocos/physics/physx/shapes/physx-terrain-shape.ts","../../../cocos/physics/physx/shapes/physx-cylinder-shape.ts","../../../cocos/physics/physx/shapes/physx-cone-shape.ts","../../../cocos/physics/physx/joints/physx-joint.ts","../../../cocos/physics/physx/joints/physx-fixed-joint.ts","../../../cocos/physics/physx/joints/physx-spherical-joint.ts","../../../cocos/physics/physx/joints/physx-revolute-joint.ts","../../../cocos/physics/physx/joints/physx-configurable-joint.ts","../../../cocos/physics/physx/character-controllers/physx-box-character-controller.ts","../../../cocos/physics/physx/character-controllers/physx-capsule-character-controller.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD, LOAD_PHYSX_MANUALLY } from 'internal:constants';\r\nimport { selector } from '../framework/physics-selector';\r\n\r\nimport { PhysXWorld } from './physx-world';\r\nimport { PhysXRigidBody } from './physx-rigid-body';\r\n\r\nimport { PhysXSphereShape } from './shapes/physx-sphere-shape';\r\nimport { PhysXBoxShape } from './shapes/physx-box-shape';\r\nimport { PhysXCapsuleShape } from './shapes/physx-capsule-shape';\r\nimport { PhysXPlaneShape } from './shapes/physx-plane-shape';\r\nimport { PhysXTrimeshShape } from './shapes/physx-trimesh-shape';\r\nimport { PhysXTerrainShape } from './shapes/physx-terrain-shape';\r\nimport { PhysXCylinderShape } from './shapes/physx-cylinder-shape';\r\nimport { PhysXConeShape } from './shapes/physx-cone-shape';\r\n\r\nimport { PhysXFixedJoint } from './joints/physx-fixed-joint';\r\nimport { PhysXSphericalJoint } from './joints/physx-spherical-joint';\r\nimport { PhysXRevoluteJoint } from './joints/physx-revolute-joint';\r\nimport { PhysXConfigurableJoint } from './joints/physx-configurable-joint';\r\n\r\nimport { PhysXBoxCharacterController } from './character-controllers/physx-box-character-controller';\r\nimport { PhysXCapsuleCharacterController } from './character-controllers/physx-capsule-character-controller';\r\n\r\nimport { Game, game } from '../../game';\r\nimport { initPhysXLibs } from './physx-adapter';\r\nimport { PhysicsSystem } from '../framework/physics-system';\r\n\r\ngame.once(Game.EVENT_PRE_SUBSYSTEM_INIT, () => {\r\n    selector.register('physx', {\r\n        PhysicsWorld: PhysXWorld,\r\n        RigidBody: PhysXRigidBody,\r\n\r\n        BoxShape: PhysXBoxShape,\r\n        SphereShape: PhysXSphereShape,\r\n        CapsuleShape: PhysXCapsuleShape,\r\n        TrimeshShape: PhysXTrimeshShape,\r\n        CylinderShape: PhysXCylinderShape,\r\n        ConeShape: PhysXConeShape,\r\n        TerrainShape: PhysXTerrainShape,\r\n        PlaneShape: PhysXPlaneShape,\r\n\r\n        PointToPointConstraint: PhysXSphericalJoint,\r\n        HingeConstraint: PhysXRevoluteJoint,\r\n        FixedConstraint: PhysXFixedJoint,\r\n        ConfigurableConstraint: PhysXConfigurableJoint,\r\n\r\n        BoxCharacterController: PhysXBoxCharacterController,\r\n        CapsuleCharacterController: PhysXCapsuleCharacterController,\r\n    });\r\n});\r\n\r\nlet loadPhysXPromise: Promise<void> | undefined;\r\n\r\nexport function loadWasmModulePhysX (): Promise<void> {\r\n    if (BUILD && LOAD_PHYSX_MANUALLY) {\r\n        if (loadPhysXPromise) return loadPhysXPromise;\r\n        loadPhysXPromise = Promise.resolve()\r\n            .then(() => initPhysXLibs())\r\n            .then(() => PhysicsSystem.constructAndRegisterManually());\r\n        return loadPhysXPromise;\r\n    } else {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/**\r\n * Base class for storage static instance object\r\n */\r\nexport class PhysXInstance {\r\n    static foundation: any;\r\n    static physics: any;\r\n    static cooking: any;\r\n    static pvd: any;\r\n    static queryfilterData: any;\r\n    static singleResult: any;\r\n    static mutipleResults: any;\r\n    static simulationCB: any;\r\n    static queryFilterCB: any;\r\n    static mutipleResultSize = 12;\r\n    static singleSweepResult: any;\r\n    static mutipleSweepResults: any;\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable max-len */\r\n/* eslint-disable no-tabs */\r\n\r\n/// enum ///\r\n\r\nexport enum EFilterDataWord3 {\r\n    QUERY_FILTER = 1 << 0,\r\n    QUERY_CHECK_TRIGGER = 1 << 1,\r\n    QUERY_SINGLE_HIT = 1 << 2,\r\n    DETECT_TRIGGER_EVENT = 1 << 3,\r\n    DETECT_CONTACT_EVENT = 1 << 4,\r\n    DETECT_CONTACT_POINT = 1 << 5,\r\n    DETECT_CONTACT_CCD = 1 << 6,\r\n}\r\n\r\nexport enum PxHitFlag {\r\n    ePOSITION\t\t\t\t\t= (1 << 0),\t//! < \"position\" member of #PxQueryHit is valid\r\n    eNORMAL\t\t\t\t\t\t= (1 << 1),\t//! < \"normal\" member of #PxQueryHit is valid\r\n    eUV\t\t\t\t\t\t\t= (1 << 3),\t//! < \"u\" and \"v\" barycentric coordinates of #PxQueryHit are valid. Not applicable to sweep queries.\r\n    eASSUME_NO_INITIAL_OVERLAP\t= (1 << 4),\t//! < Performance hint flag for sweeps when it is known upfront there's no initial overlap.\r\n                                            //! < NOTE: using this flag may cause undefined results if shapes are initially overlapping.\r\n    eMESH_MULTIPLE\t\t\t\t= (1 << 5),\t//! < Report all hits for meshes rather than just the first. Not applicable to sweep queries.\r\n    eMESH_ANY\t\t\t\t\t= (1 << 6),\t//! < Report any first hit for meshes. If neither eMESH_MULTIPLE nor eMESH_ANY is specified,\r\n                                            //! < a single closest hit will be reported for meshes.\r\n    eMESH_BOTH_SIDES\t\t\t= (1 << 7),\t//! < Report hits with back faces of mesh triangles. Also report hits for raycast\r\n                                            //! < originating on mesh surface and facing away from the surface normal. Not applicable to sweep queries.\r\n                                            //! < Please refer to the user guide for heightfield-specific differences.\r\n    ePRECISE_SWEEP\t\t\t\t= (1 << 8),\t//! < Use more accurate but slower narrow phase sweep tests.\r\n                                            //! < May provide better compatibility with PhysX 3.2 sweep behavior.\r\n    eMTD\t\t\t\t\t\t= (1 << 9),\t//! < Report the minimum translation depth, normal and contact point.\r\n    eFACE_INDEX\t\t\t\t\t= (1 << 10),\t//! < \"face index\" member of #PxQueryHit is valid\r\n\r\n    eDEFAULT\t\t\t\t\t= PxHitFlag.ePOSITION | PxHitFlag.eNORMAL | PxHitFlag.eFACE_INDEX,\r\n\r\n    /** \\brief Only this subset of flags can be modified by pre-filter. Other modifications will be discarded. */\r\n    eMODIFIABLE_FLAGS\t\t\t= PxHitFlag.eMESH_MULTIPLE | PxHitFlag.eMESH_BOTH_SIDES | PxHitFlag.eASSUME_NO_INITIAL_OVERLAP | PxHitFlag.ePRECISE_SWEEP\r\n}\r\n\r\nexport enum PxQueryFlag\r\n{\r\n    eSTATIC\t\t\t\t= (1 << 0),\t//! < Traverse static shapes\r\n\r\n    eDYNAMIC\t\t\t= (1 << 1),\t//! < Traverse dynamic shapes\r\n\r\n    ePREFILTER\t\t\t= (1 << 2),\t//! < Run the pre-intersection-test filter (see #PxQueryFilterCallback::preFilter())\r\n\r\n    ePOSTFILTER\t\t\t= (1 << 3),\t//! < Run the post-intersection-test filter (see #PxQueryFilterCallback::postFilter())\r\n\r\n    eANY_HIT\t\t\t= (1 << 4),\t//! < Abort traversal as soon as any hit is found and return it via callback.block.\r\n                                    //! < Helps query performance. Both eTOUCH and eBLOCK hitTypes are considered hits with this flag.\r\n\r\n    eNO_BLOCK\t\t\t= (1 << 5),\t//! < All hits are reported as touching. Overrides eBLOCK returned from user filters with eTOUCH.\r\n                                    //! < This is also an optimization hint that may improve query performance.\r\n\r\n    eRESERVED\t\t\t= (1 << 15)\t//! < Reserved for internal use\r\n}\r\n\r\nexport enum PxPairFlag\r\n{\r\n    /**\r\n    \\brief Process the contacts of this collision pair in the dynamics solver.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n    */\r\n    eSOLVE_CONTACT\t\t\t\t\t\t= (1 << 0),\r\n\r\n    /**\r\n    \\brief Call contact modification callback for this collision pair\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    @see PxContactModifyCallback\r\n    */\r\n    eMODIFY_CONTACTS\t\t\t\t\t= (1 << 1),\r\n\r\n    /**\r\n    \\brief Call contact report callback or trigger callback when this collision pair starts to be in contact.\r\n\r\n    If one of the two collision objects is a trigger shape (see #PxShapeFlag::eTRIGGER_SHAPE)\r\n    then the trigger callback will get called as soon as the other object enters the trigger volume.\r\n    If none of the two collision objects is a trigger shape then the contact report callback will get\r\n    called when the actors of this collision pair start to be in contact.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()\r\n    */\r\n    eNOTIFY_TOUCH_FOUND\t\t\t\t\t= (1 << 2),\r\n\r\n    /**\r\n    \\brief Call contact report callback while this collision pair is in contact\r\n\r\n    If none of the two collision objects is a trigger shape then the contact report callback will get\r\n    called while the actors of this collision pair are in contact.\r\n\r\n    \\note Triggers do not support this event. Persistent trigger contacts need to be tracked separately by observing eNOTIFY_TOUCH_FOUND/eNOTIFY_TOUCH_LOST events.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note No report will get sent if the objects in contact are sleeping.\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    \\note If this flag gets enabled while a pair is in touch already, there will be no eNOTIFY_TOUCH_PERSISTS events until the pair loses and regains touch.\r\n\r\n    @see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()\r\n    */\r\n    eNOTIFY_TOUCH_PERSISTS\t\t\t\t= (1 << 3),\r\n\r\n    /**\r\n    \\brief Call contact report callback or trigger callback when this collision pair stops to be in contact\r\n\r\n    If one of the two collision objects is a trigger shape (see #PxShapeFlag::eTRIGGER_SHAPE)\r\n    then the trigger callback will get called as soon as the other object leaves the trigger volume.\r\n    If none of the two collision objects is a trigger shape then the contact report callback will get\r\n    called when the actors of this collision pair stop to be in contact.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note This event will also get triggered if one of the colliding objects gets deleted.\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()\r\n    */\r\n    eNOTIFY_TOUCH_LOST\t\t\t\t\t= (1 << 4),\r\n\r\n    /**\r\n    \\brief Call contact report callback when this collision pair is in contact during CCD passes.\r\n\r\n    If CCD with multiple passes is enabled, then a fast moving object might bounce on and off the same\r\n    object multiple times. Hence, the same pair might be in contact multiple times during a simulation step.\r\n    This flag will make sure that all the detected collision during CCD will get reported. For performance\r\n    reasons, the system can not always tell whether the contact pair lost touch in one of the previous CCD\r\n    passes and thus can also not always tell whether the contact is new or has persisted. eNOTIFY_TOUCH_CCD\r\n    just reports when the two collision objects were detected as being in contact during a CCD pass.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note Trigger shapes are not supported.\r\n\r\n    \\note Only takes effect if eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()\r\n    */\r\n    eNOTIFY_TOUCH_CCD\t\t\t\t\t= (1 << 5),\r\n\r\n    /**\r\n    \\brief Call contact report callback when the contact force between the actors of this collision pair exceeds one of the actor-defined force thresholds.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact()\r\n    */\r\n    eNOTIFY_THRESHOLD_FORCE_FOUND\t\t= (1 << 6),\r\n\r\n    /**\r\n    \\brief Call contact report callback when the contact force between the actors of this collision pair continues to exceed one of the actor-defined force thresholds.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note If a pair gets re-filtered and this flag has previously been disabled, then the report will not get fired in the same frame even if the force threshold has been reached in the\r\n    previous one (unless #eNOTIFY_THRESHOLD_FORCE_FOUND has been set in the previous frame).\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact()\r\n    */\r\n    eNOTIFY_THRESHOLD_FORCE_PERSISTS\t= (1 << 7),\r\n\r\n    /**\r\n    \\brief Call contact report callback when the contact force between the actors of this collision pair falls below one of the actor-defined force thresholds (includes the case where this collision pair stops being in contact).\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies.\r\n\r\n    \\note If a pair gets re-filtered and this flag has previously been disabled, then the report will not get fired in the same frame even if the force threshold has been reached in the\r\n    previous one (unless #eNOTIFY_THRESHOLD_FORCE_FOUND or #eNOTIFY_THRESHOLD_FORCE_PERSISTS has been set in the previous frame).\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact()\r\n    */\r\n    eNOTIFY_THRESHOLD_FORCE_LOST\t\t= (1 << 8),\r\n\r\n    /**\r\n    \\brief Provide contact points in contact reports for this collision pair.\r\n\r\n    \\note Only takes effect if the colliding actors are rigid bodies and if used in combination with the flags eNOTIFY_TOUCH_... or eNOTIFY_THRESHOLD_FORCE_...\r\n\r\n    \\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised\r\n\r\n    @see PxSimulationEventCallback.onContact() PxContactPair PxContactPair.extractContacts()\r\n    */\r\n    eNOTIFY_CONTACT_POINTS\t\t\t\t= (1 << 9),\r\n\r\n    /**\r\n    \\brief This flag is used to indicate whether this pair generates discrete collision detection contacts.\r\n\r\n    \\note Contacts are only responded to if eSOLVE_CONTACT is enabled.\r\n    */\r\n    eDETECT_DISCRETE_CONTACT\t\t\t= (1 << 10),\r\n\r\n    /**\r\n    \\brief This flag is used to indicate whether this pair generates CCD contacts.\r\n\r\n    \\note The contacts will only be responded to if eSOLVE_CONTACT is enabled on this pair.\r\n    \\note The scene must have PxSceneFlag::eENABLE_CCD enabled to use this feature.\r\n    \\note Non-static bodies of the pair should have PxRigidBodyFlag::eENABLE_CCD specified for this feature to work correctly.\r\n    \\note This flag is not supported with trigger shapes. However, CCD trigger events can be emulated using non-trigger shapes\r\n    and requesting eNOTIFY_TOUCH_FOUND and eNOTIFY_TOUCH_LOST and not raising eSOLVE_CONTACT on the pair.\r\n\r\n    @see PxRigidBodyFlag::eENABLE_CCD\r\n    @see PxSceneFlag::eENABLE_CCD\r\n    */\r\n    eDETECT_CCD_CONTACT\t\t\t\t\t= (1 << 11),\r\n\r\n    /**\r\n    \\brief Provide pre solver velocities in contact reports for this collision pair.\r\n\r\n    If the collision pair has contact reports enabled, the velocities of the rigid bodies before contacts have been solved\r\n    will be provided in the contact report callback unless the pair lost touch in which case no data will be provided.\r\n\r\n    \\note Usually it is not necessary to request these velocities as they will be available by querying the velocity from the provided\r\n    PxRigidActor object directly. However, it might be the case that the velocity of a rigid body gets set while the simulation is running\r\n    in which case the PxRigidActor would return this new velocity in the contact report callback and not the velocity the simulation used.\r\n\r\n    @see PxSimulationEventCallback.onContact(), PxContactPairVelocity, PxContactPairHeader.extraDataStream\r\n    */\r\n    ePRE_SOLVER_VELOCITY\t\t\t\t= (1 << 12),\r\n\r\n    /**\r\n    \\brief Provide post solver velocities in contact reports for this collision pair.\r\n\r\n    If the collision pair has contact reports enabled, the velocities of the rigid bodies after contacts have been solved\r\n    will be provided in the contact report callback unless the pair lost touch in which case no data will be provided.\r\n\r\n    @see PxSimulationEventCallback.onContact(), PxContactPairVelocity, PxContactPairHeader.extraDataStream\r\n    */\r\n    ePOST_SOLVER_VELOCITY\t\t\t\t= (1 << 13),\r\n\r\n    /**\r\n    \\brief Provide rigid body poses in contact reports for this collision pair.\r\n\r\n    If the collision pair has contact reports enabled, the rigid body poses at the contact event will be provided\r\n    in the contact report callback unless the pair lost touch in which case no data will be provided.\r\n\r\n    \\note Usually it is not necessary to request these poses as they will be available by querying the pose from the provided\r\n    PxRigidActor object directly. However, it might be the case that the pose of a rigid body gets set while the simulation is running\r\n    in which case the PxRigidActor would return this new pose in the contact report callback and not the pose the simulation used.\r\n    Another use case is related to CCD with multiple passes enabled, A fast moving object might bounce on and off the same\r\n    object multiple times. This flag can be used to request the rigid body poses at the time of impact for each such collision event.\r\n\r\n    @see PxSimulationEventCallback.onContact(), PxContactPairPose, PxContactPairHeader.extraDataStream\r\n    */\r\n    eCONTACT_EVENT_POSE\t\t\t\t\t= (1 << 14),\r\n\r\n    eNEXT_FREE\t\t\t\t\t\t\t= (1 << 15),        //! < For internal use only.\r\n\r\n    /**\r\n    \\brief Provided default flag to do simple contact processing for this collision pair.\r\n    */\r\n    eCONTACT_DEFAULT\t\t\t\t\t= eSOLVE_CONTACT | eDETECT_DISCRETE_CONTACT,\r\n\r\n    /**\r\n    \\brief Provided default flag to get commonly used trigger behavior for this collision pair.\r\n    */\r\n    eTRIGGER_DEFAULT\t\t\t\t\t= eNOTIFY_TOUCH_FOUND | eNOTIFY_TOUCH_LOST | eDETECT_DISCRETE_CONTACT\r\n}\r\n\r\nexport enum PxContactPairFlag {\r\n    /**\r\n    \\brief The shape with index 0 has been removed from the actor/scene.\r\n    */\r\n    eREMOVED_SHAPE_0\t\t\t\t= (1 << 0),\r\n\r\n    /**\r\n    \\brief The shape with index 1 has been removed from the actor/scene.\r\n    */\r\n    eREMOVED_SHAPE_1\t\t\t\t= (1 << 1),\r\n\r\n    /**\r\n    \\brief First actor pair contact.\r\n\r\n    The provided shape pair marks the first contact between the two actors, no other shape pair has been touching prior to the current simulation frame.\r\n\r\n    \\note: This info is only available if #PxPairFlag::eNOTIFY_TOUCH_FOUND has been declared for the pair.\r\n    */\r\n    eACTOR_PAIR_HAS_FIRST_TOUCH\t\t= (1 << 2),\r\n\r\n    /**\r\n    \\brief All contact between the actor pair was lost.\r\n\r\n    All contact between the two actors has been lost, no shape pairs remain touching after the current simulation frame.\r\n    */\r\n    eACTOR_PAIR_LOST_TOUCH\t\t\t= (1 << 3),\r\n\r\n    /**\r\n    \\brief Internal flag, used by #PxContactPair.extractContacts()\r\n\r\n    The applied contact impulses are provided for every contact point.\r\n    This is the case if #PxPairFlag::eSOLVE_CONTACT has been set for the pair.\r\n    */\r\n    eINTERNAL_HAS_IMPULSES\t\t\t= (1 << 4),\r\n\r\n    /**\r\n    \\brief Internal flag, used by #PxContactPair.extractContacts()\r\n\r\n    The provided contact point information is flipped with regards to the shapes of the contact pair. This mainly concerns the order of the internal triangle indices.\r\n    */\r\n    eINTERNAL_CONTACTS_ARE_FLIPPED\t= (1 << 5)\r\n}\r\n\r\nexport enum PxTriggerPairFlag\r\n{\r\n    eREMOVED_SHAPE_TRIGGER\t\t\t\t\t= (1 << 0),\t\t\t\t\t//! < The trigger shape has been removed from the actor/scene.\r\n    eREMOVED_SHAPE_OTHER\t\t\t\t\t= (1 << 1),\t\t\t\t\t//! < The shape causing the trigger event has been removed from the actor/scene.\r\n    eNEXT_FREE\t\t\t\t\t\t\t\t= (1 << 2)\t\t\t\t\t//! < For internal use only.\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable import/no-mutable-exports */\r\n/* eslint-disable no-console */\r\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n/* eslint-disable no-lonely-if */\r\n/* eslint-disable import/order */\r\n\r\nimport { NativeCodeBundleMode } from '../../misc/webassembly-support';\r\nimport { ensureWasmModuleReady, instantiateWasm } from 'pal/wasm';\r\nimport { EDITOR, TEST, NATIVE_CODE_BUNDLE_MODE, LOAD_PHYSX_MANUALLY, BUILD } from 'internal:constants';\r\nimport { IQuatLike, IVec3Like, Quat, RecyclePool, Vec3, cclegacy, geometry, sys, Color, error, IVec3 } from '../../core';\r\nimport { shrinkPositions } from '../utils/util';\r\nimport { IRaycastOptions } from '../spec/i-physics-world';\r\nimport { IPhysicsConfig, PhysicsRayResult } from '../framework';\r\nimport { PhysXWorld } from './physx-world';\r\nimport { PhysXInstance } from './physx-instance';\r\nimport { PhysXShape } from './shapes/physx-shape';\r\nimport { PxHitFlag, PxQueryFlag, EFilterDataWord3 } from './physx-enum';\r\nimport { Node } from '../../scene-graph';\r\nimport { game } from '../../game';\r\n\r\nexport let PX = {} as any;\r\nconst globalThis = cclegacy._global;\r\n// Use bytedance native or js physics if nativePhysX is not null.\r\nconst USE_EXTERNAL_PHYSX = !!globalThis.PHYSX;\r\n\r\nif (!BUILD || !LOAD_PHYSX_MANUALLY) {\r\n    // Init physx libs when engine init.\r\n    game.onPostInfrastructureInitDelegate.add(initPhysXLibs);\r\n}\r\n\r\nexport function initPhysXLibs (): Promise<void> {\r\n    const errorReport = (msg: any): void => { error(msg); };\r\n    return ensureWasmModuleReady().then(() => {\r\n        if (shouldUseWasmModule()) {\r\n            return Promise.all([\r\n                import('external:emscripten/physx/physx.release.wasm.js'),\r\n                import('external:emscripten/physx/physx.release.wasm.wasm'),\r\n            ]).then(([\r\n                { default: physxWasmFactory },\r\n                { default: physxWasmUrl },\r\n            ]) => initWASM(physxWasmFactory, physxWasmUrl));\r\n        } else {\r\n            return import('external:emscripten/physx/physx.release.asm.js').then(\r\n                ({ default: physxAsmFactory }) => initASM(physxAsmFactory),\r\n            );\r\n        }\r\n    }).catch(errorReport);\r\n}\r\n\r\nfunction initASM (physxAsmFactory): Promise<void> {\r\n    globalThis.PhysX = globalThis.PHYSX ? globalThis.PHYSX : physxAsmFactory;\r\n    if (globalThis.PhysX != null) {\r\n        return globalThis.PhysX().then((Instance: any): void => {\r\n            if (!EDITOR && !TEST) console.debug('[PHYSICS]:', `${USE_EXTERNAL_PHYSX ? 'External' : 'Internal'} PhysX asm libs loaded.`);\r\n            initAdaptWrapper(Instance);\r\n            initConfigAndCacheObject(Instance);\r\n            Object.assign(PX, Instance);\r\n        }, (reason: any): void => { console.error('[PHYSICS]:', `PhysX asm load failed: ${reason}`); });\r\n    } else {\r\n        if (!EDITOR && !TEST) console.error('[PHYSICS]:', 'Failed to load PhysX js libs, package may be not found.');\r\n        return new Promise<void>((resolve, reject): void => {\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n\r\nfunction initWASM (physxWasmFactory, physxWasmUrl: string): Promise<void> {\r\n    globalThis.PhysX = globalThis.PHYSX ? globalThis.PHYSX : physxWasmFactory;\r\n    if (globalThis.PhysX != null) {\r\n        return globalThis.PhysX({\r\n            instantiateWasm (\r\n                importObject: WebAssembly.Imports,\r\n                receiveInstance: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\r\n            ): any {\r\n                return instantiateWasm(physxWasmUrl, importObject).then((result): void => {\r\n                    receiveInstance(result.instance, result.module);\r\n                });\r\n            },\r\n        }).then((Instance: any): void => {\r\n            if (!EDITOR && !TEST) console.debug('[PHYSICS]:', `${USE_EXTERNAL_PHYSX ? 'External' : 'Internal'} PhysX wasm libs loaded.`);\r\n            initAdaptWrapper(Instance);\r\n            initConfigAndCacheObject(Instance);\r\n            PX = Instance;\r\n        }, (reason: any): void => { console.error('[PHYSICS]:', `PhysX wasm load failed: ${reason}`); });\r\n    } else {\r\n        if (!EDITOR && !TEST) console.error('[PHYSICS]:', 'Failed to load PhysX wasm libs, package may be not found.');\r\n        return new Promise<void>((resolve, reject): void => {\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n\r\nfunction shouldUseWasmModule (): boolean {\r\n    if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.BOTH as number)) {\r\n        return sys.hasFeature(sys.Feature.WASM);\r\n    } else if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.WASM as number)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction initConfigAndCacheObject (PX: any): void {\r\n    globalThis.PhysX = PX;\r\n    PX.EPSILON = 1e-3;\r\n    PX.MULTI_THREAD = false;\r\n    PX.SUB_THREAD_COUNT = 1;\r\n    PX.CACHE_MAT = {};\r\n    PX.IMPL_PTR = {};\r\n    PX.MESH_CONVEX = {};\r\n    PX.MESH_STATIC = {};\r\n    PX.TERRAIN_STATIC = {};\r\n}\r\n\r\nfunction initAdaptWrapper (obj: any): void {\r\n    obj.VECTOR_MAT = new obj.PxMaterialVector();\r\n    obj.MeshScale = obj.PxMeshScale;\r\n    obj.ShapeFlag = obj.PxShapeFlag;\r\n    obj.ActorFlag = obj.PxActorFlag;\r\n    obj.ForceMode = obj.PxForceMode;\r\n    obj.CombineMode = obj.PxCombineMode;\r\n    obj.BoxGeometry = obj.PxBoxGeometry;\r\n    obj.QueryHitType = obj.PxQueryHitType;\r\n    obj.RigidBodyFlag = obj.PxRigidBodyFlag;\r\n    obj.PlaneGeometry = obj.PxPlaneGeometry;\r\n    obj.SphereGeometry = obj.PxSphereGeometry;\r\n    obj.CapsuleGeometry = obj.PxCapsuleGeometry;\r\n    obj.ConvexMeshGeometry = obj.PxConvexMeshGeometry;\r\n    obj.D6Motion = obj.PxD6Motion;\r\n    obj.D6Axis = obj.PxD6Axis;\r\n    obj.D6Drive = obj.PxD6Drive;\r\n    obj.D6JointDrive = obj.PxD6JointDrive;\r\n    obj.LinearLimitPair = obj.PxJointLinearLimitPair;\r\n    obj.AngularLimitPair = obj.PxJointAngularLimitPair;\r\n    obj.TriangleMeshGeometry = obj.PxTriangleMeshGeometry;\r\n    obj.RigidDynamicLockFlag = obj.PxRigidDynamicLockFlag;\r\n    obj.TolerancesScale = obj.PxTolerancesScale;\r\n    obj.RevoluteJointFlags = { eLIMIT_ENABLED: 1 << 0, eDRIVE_ENABLED: 1 << 1, eDRIVE_FREESPIN: 1 << 2 };\r\n    obj.JointAngularLimitPair = obj.PxJointAngularLimitPair;\r\n    obj.createRevoluteJoint = (a: any, b: any, c: any, d: any): any => obj.PxRevoluteJointCreate(PX.physics, a, b, c, d);\r\n    obj.createFixedConstraint = (a: any, b: any, c: any, d: any): any => obj.PxFixedJointCreate(PX.physics, a, b, c, d);\r\n    obj.createSphericalJoint = (a: any, b: any, c: any, d: any): any => obj.PxSphericalJointCreate(PX.physics, a, b, c, d);\r\n    obj.createD6Joint = (a: any, b: any, c: any, d: any): any => obj.PxD6JointCreate(PX.physics, a, b, c, d);\r\n}\r\n\r\nconst _v3: IVec3Like = { x: 0, y: 0, z: 0 };\r\nconst _v4: IQuatLike = { x: 0, y: 0, z: 0, w: 1 };\r\nexport const _trans = {\r\n    translation: _v3,\r\n    rotation: _v4,\r\n    p: _v3,\r\n    q: _v4,\r\n};\r\n\r\ntype IPxTransformExt = { [x in keyof typeof _trans]: typeof _trans[x]; } &\r\n{\r\n    setPosition(pos: IVec3Like): void;\r\n    setQuaternion(quat: IQuatLike): void;\r\n};\r\n\r\nexport function getColorPXColor (color: Color, rgba: number): void {\r\n    color.b = ((rgba >> 16) & 0xff);\r\n    color.g = ((rgba >> 8)  & 0xff);\r\n    color.r = ((rgba)     & 0xff);\r\n    color.a = 255;\r\n}\r\n\r\nexport const _pxtrans = _trans as unknown as IPxTransformExt;\r\n\r\nexport function addReference (shape: PhysXShape, impl: any): void {\r\n    if (!impl) return;\r\n    if (impl.$$) PX.IMPL_PTR[impl.$$.ptr] = shape;\r\n}\r\n\r\nexport function removeReference (shape: PhysXShape, impl: any): void {\r\n    if (!impl) return;\r\n    if (impl.$$) {\r\n        PX.IMPL_PTR[impl.$$.ptr] = null;\r\n        delete PX.IMPL_PTR[impl.$$.ptr];\r\n    }\r\n}\r\n\r\nexport function getWrapShape<T> (pxShape: any): T {\r\n    return PX.IMPL_PTR[pxShape.$$.ptr];\r\n}\r\n\r\nexport function getTempTransform (pos: IVec3Like, quat: IQuatLike): any {\r\n    Vec3.copy(_pxtrans.translation, pos);\r\n    Quat.copy(_pxtrans.rotation, quat);\r\n    return _pxtrans;\r\n}\r\n\r\nexport function getJsTransform (pos: IVec3Like, quat: IQuatLike): any {\r\n    Vec3.copy(_trans.p, pos);\r\n    Quat.copy(_trans.q, quat);\r\n    return _trans;\r\n}\r\n\r\nexport function addActorToScene (scene: any, actor: any): void {\r\n    scene.addActor(actor, null);\r\n}\r\n\r\nexport function setJointActors (joint: any, actor0: any, actor1: any): void {\r\n    joint.setActors(actor0, actor1);\r\n}\r\n\r\nexport function setMassAndUpdateInertia (impl: any, mass: number): void {\r\n    impl.setMassAndUpdateInertia(mass);\r\n}\r\n\r\nexport function copyPhysXTransform (node: Node, transform: any): void {\r\n    const wp = node.worldPosition;\r\n    const wr = node.worldRotation;\r\n    const dontUpdate = physXEqualsCocosVec3(transform, wp) && physXEqualsCocosQuat(transform, wr);\r\n    if (dontUpdate) return;\r\n\r\n    node.setWorldPosition(transform.translation as Vec3);\r\n    node.setWorldRotation(transform.rotation as Quat);\r\n}\r\n\r\nexport function physXEqualsCocosVec3 (trans: any, v3: IVec3Like): boolean {\r\n    return Vec3.equals(trans.translation as IVec3Like, v3, PX.EPSILON as number);\r\n}\r\n\r\nexport function physXEqualsCocosQuat (trans: any, q: IQuatLike): boolean {\r\n    return Quat.equals(trans.rotation as IQuatLike, q, PX.EPSILON as number);\r\n}\r\n\r\nexport function applyImpulse (isGlobal: boolean, impl: any, vec: IVec3Like, rp: IVec3Like): void {\r\n    if (isGlobal) {\r\n        impl.applyImpulse(vec, rp);\r\n    }  else {\r\n        impl.applyLocalImpulse(vec, rp);\r\n    }\r\n}\r\n\r\nexport function applyForce (isGlobal: boolean, impl: any, vec: IVec3Like, rp: IVec3Like): void {\r\n    if (isGlobal) {\r\n        impl.applyForce(vec, rp);\r\n    }  else {\r\n        impl.applyLocalForce(vec, rp);\r\n    }\r\n}\r\n\r\nexport function applyTorqueForce (impl: any, vec: IVec3Like): void {\r\n    impl.addTorque(vec);\r\n}\r\n\r\nexport function getShapeFlags (isTrigger: boolean): any {\r\n    const flag = (isTrigger ? PX.PxShapeFlag.eTRIGGER_SHAPE.value : PX.PxShapeFlag.eSIMULATION_SHAPE.value)\r\n        | PX.PxShapeFlag.eSCENE_QUERY_SHAPE.value | PX.PxShapeFlag.eVISUALIZATION.value;\r\n    return new PX.PxShapeFlags(flag);\r\n}\r\n\r\n// eslint-disable-next-line default-param-last\r\nexport function getShapeWorldBounds (shape: any, actor: any, i = 1.01, out: geometry.AABB): void {\r\n    const b3 = shape.getWorldBounds(actor, i);\r\n    geometry.AABB.fromPoints(out, b3.minimum as IVec3, b3.maximum as IVec3);\r\n}\r\n\r\nexport function getShapeMaterials (pxMtl: any): any {\r\n    if (PX.VECTOR_MAT.size() > 0) {\r\n        PX.VECTOR_MAT.set(0, pxMtl);\r\n    } else {\r\n        PX.VECTOR_MAT.push_back(pxMtl);\r\n    }\r\n    return PX.VECTOR_MAT;\r\n}\r\n\r\nexport function createConvexMesh (_buffer: Float32Array | number[], cooking: any, physics: any): any {\r\n    const vertices = shrinkPositions(_buffer);\r\n    const l = vertices.length;\r\n    const vArr = new PX.PxVec3Vector();\r\n    for (let i = 0; i < l; i += 3) {\r\n        vArr.push_back({ x: vertices[i], y: vertices[i + 1], z: vertices[i + 2] });\r\n    }\r\n    const r = cooking.createConvexMesh(vArr, physics);\r\n    vArr.delete();\r\n    return r;\r\n}\r\n\r\n// eTIGHT_BOUNDS = (1<<0) convex\r\n// eDOUBLE_SIDED = (1<<1) trimesh\r\nexport function createMeshGeometryFlags (flags: number, isConvex: boolean): any {\r\n    return isConvex ? new PX.PxConvexMeshGeometryFlags(flags) : new PX.PxMeshGeometryFlags(flags);\r\n}\r\n\r\nexport function createTriangleMesh (vertices: Float32Array | number[], indices: Uint32Array, cooking: any, physics: any): any {\r\n    const l = vertices.length;\r\n    const l2 = indices.length;\r\n    const vArr = new PX.PxVec3Vector();\r\n    for (let i = 0; i < l; i += 3) {\r\n        vArr.push_back({ x: vertices[i], y: vertices[i + 1], z: vertices[i + 2] });\r\n    }\r\n    const iArr = new PX.PxU16Vector();\r\n    for (let i = 0; i < l2; i += 3) {\r\n        iArr.push_back(indices[i]); iArr.push_back(indices[i + 1]); iArr.push_back(indices[i + 2]);\r\n    }\r\n    const r = cooking.createTriMeshExt(vArr, iArr, physics);\r\n    vArr.delete(); iArr.delete();\r\n    return r;\r\n}\r\n\r\nexport function createHeightField (terrain: any, heightScale: number, cooking: any, physics: any): any {\r\n    const sizeI = terrain.getVertexCountI();\r\n    const sizeJ = terrain.getVertexCountJ();\r\n    const samples = new PX.PxHeightFieldSampleVector();\r\n    for (let i = 0; i < sizeI; i++) {\r\n        for (let j = 0; j < sizeJ; j++) {\r\n            const s = new PX.PxHeightFieldSample();\r\n            s.height = terrain.getHeight(i, j) / heightScale;\r\n            samples.push_back(s);\r\n        }\r\n    }\r\n    return cooking.createHeightFieldExt(sizeI, sizeJ, samples, physics);\r\n}\r\n\r\nexport function createHeightFieldGeometry (hf: any, flags: number, hs: number, xs: number, zs: number): any {\r\n    return new PX.PxHeightFieldGeometry(\r\n        hf,\r\n        new PX.PxMeshGeometryFlags(flags),\r\n        hs,\r\n        xs,\r\n        zs,\r\n    );\r\n}\r\n\r\nexport function simulateScene (scene: any, deltaTime: number): void {\r\n    scene.simulate(deltaTime, true);\r\n}\r\n\r\nexport function raycastAll (\r\n    world: PhysXWorld,\r\n    worldRay: geometry.Ray,\r\n    options: IRaycastOptions,\r\n    pool: RecyclePool<PhysicsRayResult>,\r\n    results: PhysicsRayResult[],\r\n): boolean {\r\n    const maxDistance = options.maxDistance;\r\n    const flags = PxHitFlag.ePOSITION | PxHitFlag.eNORMAL;\r\n    const word3 = EFilterDataWord3.QUERY_FILTER | (options.queryTrigger ? 0 : EFilterDataWord3.QUERY_CHECK_TRIGGER);\r\n    const queryFlags = PxQueryFlag.eSTATIC | PxQueryFlag.eDYNAMIC | PxQueryFlag.ePREFILTER | PxQueryFlag.eNO_BLOCK;\r\n    const queryfilterData = PhysXInstance.queryfilterData;\r\n    const queryFilterCB = PhysXInstance.queryFilterCB;\r\n    const mutipleResults = PhysXInstance.mutipleResults;\r\n    const mutipleResultSize = PhysXInstance.mutipleResultSize;\r\n    queryfilterData.setWords(options.mask >>> 0, 0);\r\n    queryfilterData.setWords(word3, 3);\r\n    queryfilterData.setFlags(queryFlags);\r\n    const blocks = mutipleResults;\r\n    const r = world.scene.raycastMultiple(\r\n        worldRay.o,\r\n        worldRay.d,\r\n        maxDistance,\r\n        flags,\r\n        blocks,\r\n        blocks.size(),\r\n        queryfilterData,\r\n        queryFilterCB,\r\n        null,\r\n    );\r\n\r\n    if (r > 0) {\r\n        for (let i = 0; i < r; i++) {\r\n            const block = blocks.get(i);\r\n            const collider = getWrapShape<PhysXShape>(block.getShape()).collider;\r\n            const result = pool.add();\r\n            result._assign(block.position as IVec3Like, block.distance as number, collider, block.normal as IVec3Like);\r\n            results.push(result);\r\n        }\r\n        return true;\r\n    } if (r === -1) {\r\n        // eslint-disable-next-line no-console\r\n        console.error('not enough memory.');\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function raycastClosest (world: PhysXWorld, worldRay: geometry.Ray, options: IRaycastOptions, result: PhysicsRayResult): boolean {\r\n    const maxDistance = options.maxDistance;\r\n    const flags = PxHitFlag.ePOSITION | PxHitFlag.eNORMAL;\r\n    const word3 = EFilterDataWord3.QUERY_FILTER | (options.queryTrigger ? 0 : EFilterDataWord3.QUERY_CHECK_TRIGGER)\r\n        | EFilterDataWord3.QUERY_SINGLE_HIT;\r\n    const queryFlags = PxQueryFlag.eSTATIC | PxQueryFlag.eDYNAMIC | PxQueryFlag.ePREFILTER;\r\n    const queryfilterData = PhysXInstance.queryfilterData;\r\n    const queryFilterCB = PhysXInstance.queryFilterCB;\r\n    queryfilterData.setWords(options.mask >>> 0, 0);\r\n    queryfilterData.setWords(word3, 3);\r\n    queryfilterData.setFlags(queryFlags);\r\n    const block = PhysXInstance.singleResult;\r\n\r\n    const r = world.scene.raycastSingle(\r\n        worldRay.o,\r\n        worldRay.d,\r\n        options.maxDistance,\r\n        flags,\r\n        block,\r\n        queryfilterData,\r\n        queryFilterCB,\r\n        null,\r\n    );\r\n    if (r) {\r\n        const collider = getWrapShape<PhysXShape>(block.getShape()).collider;\r\n        result._assign(block.position as IVec3Like, block.distance as number, collider, block.normal as IVec3Like);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function sweepAll (\r\n    world: PhysXWorld,\r\n    worldRay: geometry.Ray,\r\n    geometry: any,\r\n    geometryRotation: IQuatLike,\r\n    options: IRaycastOptions,\r\n    pool: RecyclePool<PhysicsRayResult>,\r\n    results: PhysicsRayResult[],\r\n): boolean {\r\n    const maxDistance = options.maxDistance;\r\n    const flags = PxHitFlag.ePOSITION | PxHitFlag.eNORMAL;\r\n    const word3 = EFilterDataWord3.QUERY_FILTER | (options.queryTrigger ? 0 : EFilterDataWord3.QUERY_CHECK_TRIGGER);\r\n    const queryFlags = PxQueryFlag.eSTATIC | PxQueryFlag.eDYNAMIC | PxQueryFlag.ePREFILTER | PxQueryFlag.eNO_BLOCK;\r\n    const queryfilterData = PhysXInstance.queryfilterData;\r\n    const queryFilterCB = PhysXInstance.queryFilterCB;//?\r\n    const mutipleResults = PhysXInstance.mutipleSweepResults;\r\n    const mutipleResultSize = PhysXInstance.mutipleResultSize;\r\n\r\n    queryfilterData.setWords(options.mask >>> 0, 0);\r\n    queryfilterData.setWords(word3, 3);\r\n    queryfilterData.setFlags(queryFlags);\r\n    const blocks = mutipleResults;\r\n    const r = world.scene.sweepMultiple(\r\n        geometry,\r\n        getTempTransform(worldRay.o, geometryRotation),\r\n        worldRay.d,\r\n        maxDistance,\r\n        flags,\r\n        blocks,\r\n        blocks.size(),\r\n        queryfilterData,\r\n        queryFilterCB,\r\n        null,\r\n        0,\r\n    );\r\n\r\n    if (r > 0) {\r\n        for (let i = 0; i < r; i++) {\r\n            const block = blocks.get(i);\r\n            const collider = getWrapShape<PhysXShape>(block.getShape()).collider;\r\n            const result = pool.add();\r\n            result._assign(block.position as IVec3Like, block.distance as number, collider, block.normal as IVec3Like);\r\n            results.push(result);\r\n        }\r\n        return true;\r\n    } if (r === -1) {\r\n        // eslint-disable-next-line no-console\r\n        console.error('not enough memory.');\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function sweepClosest (\r\n    world: PhysXWorld,\r\n    worldRay: geometry.Ray,\r\n    geometry: any,\r\n    geometryRotation: IQuatLike,\r\n    options: IRaycastOptions,\r\n    result: PhysicsRayResult,\r\n): boolean {\r\n    const maxDistance = options.maxDistance;\r\n    const flags = PxHitFlag.ePOSITION | PxHitFlag.eNORMAL;\r\n    const word3 = EFilterDataWord3.QUERY_FILTER | (options.queryTrigger ? 0 : EFilterDataWord3.QUERY_CHECK_TRIGGER)\r\n            | EFilterDataWord3.QUERY_SINGLE_HIT;\r\n    const queryFlags = PxQueryFlag.eSTATIC | PxQueryFlag.eDYNAMIC | PxQueryFlag.ePREFILTER;\r\n    const queryfilterData = PhysXInstance.queryfilterData;\r\n    queryfilterData.setWords(options.mask >>> 0, 0);\r\n    queryfilterData.setWords(word3, 3);\r\n    queryfilterData.setFlags(queryFlags);\r\n    const queryFilterCB = PhysXInstance.queryFilterCB;\r\n\r\n    const block = PhysXInstance.singleSweepResult;\r\n    const r = world.scene.sweepSingle(\r\n        geometry,\r\n        getTempTransform(worldRay.o, geometryRotation),\r\n        worldRay.d,\r\n        maxDistance,\r\n        flags,\r\n        block,\r\n        queryfilterData,\r\n        queryFilterCB,\r\n        null,\r\n        0,\r\n    );\r\n    if (r) {\r\n        const collider = getWrapShape<PhysXShape>(block.getShape()).collider;\r\n        result._assign(block.position as IVec3Like, block.distance as number, collider, block.normal as IVec3Like);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function initializeWorld (world: any): void {\r\n    // construct PhysX instance object only once\r\n    if (!PhysXInstance.foundation) {\r\n        const version = PX.PX_PHYSICS_VERSION;\r\n        const allocator = new PX.PxDefaultAllocator();\r\n        const defaultErrorCallback = new PX.PxDefaultErrorCallback();\r\n        const foundation = PhysXInstance.foundation = PX.PxCreateFoundation(version, allocator, defaultErrorCallback);\r\n        PhysXInstance.pvd = null;\r\n        const scale = new PX.PxTolerancesScale();\r\n        PhysXInstance.physics = PX.physics = PX.PxCreatePhysics(version, foundation, scale, false, PhysXInstance.pvd);\r\n        PhysXInstance.cooking = PX.PxCreateCooking(version, foundation, new PX.PxCookingParams(scale));\r\n        PX.PxInitExtensions(PhysXInstance.physics, PhysXInstance.pvd);\r\n        PhysXInstance.singleResult = new PX.PxRaycastHit();\r\n        PhysXInstance.mutipleResults = new PX.PxRaycastHitVector();\r\n        PhysXInstance.mutipleResults.resize(PhysXInstance.mutipleResultSize, PhysXInstance.singleResult);\r\n        PhysXInstance.queryfilterData = new PX.PxQueryFilterData();\r\n        PhysXInstance.simulationCB = PX.PxSimulationEventCallback.implement(world.callback.eventCallback);\r\n        PhysXInstance.queryFilterCB = PX.PxQueryFilterCallback.implement(world.callback.queryCallback);\r\n        PhysXInstance.singleSweepResult = new PX.PxSweepHit();\r\n        PhysXInstance.mutipleSweepResults = new PX.PxSweepHitVector();\r\n        PhysXInstance.mutipleSweepResults.resize(PhysXInstance.mutipleResultSize, PhysXInstance.singleSweepResult);\r\n    }\r\n\r\n    const sceneDesc = PX.getDefaultSceneDesc(PhysXInstance.physics.getTolerancesScale(), 0, PhysXInstance.simulationCB);\r\n    world.scene = PhysXInstance.physics.createScene(sceneDesc);\r\n    world.scene.setVisualizationParameter(PX.PxVisualizationParameter.eSCALE, 1);\r\n    world.controllerManager = PX.PxCreateControllerManager(world.scene, false);\r\n}\r\n\r\n/**\r\n * f32 x3 position.x,position.y,position.z,\r\n * f32 x3 normal.x,normal.y,normal.z,\r\n * f32 x3 impulse.x,impulse.y,impulse.z,\r\n * f32 separation,\r\n * totoal = 40\r\n * ui32 internalFaceIndex0,\r\n * ui32 internalFaceIndex1,\r\n * totoal = 48\r\n */\r\nexport function getContactPosition (pxContactOrOffset: any, out: IVec3Like, buf: any): void {\r\n    Vec3.copy(out, pxContactOrOffset.position);\r\n}\r\n\r\nexport function getContactNormal (pxContactOrOffset: any, out: IVec3Like, buf: any): void {\r\n    Vec3.copy(out, pxContactOrOffset.normal);\r\n}\r\n\r\nexport function getContactDataOrByteOffset (index: number, offset: number): any {\r\n    const gc = PX.getGContacts();\r\n    const data = gc.get(index + offset);\r\n    return data;\r\n}\r\n\r\nexport function syncNoneStaticToSceneIfWaking (actor: any, node: Node): void {\r\n    if (actor.isSleeping()) return;\r\n    copyPhysXTransform(node, actor.getGlobalPose());\r\n}\r\n\r\n/**\r\n * Extension config for bytedance\r\n */\r\ninterface IPhysicsConfigEXT extends IPhysicsConfig {\r\n    physX: { epsilon: number, multiThread: boolean, subThreadCount: number, }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Vec3, js } from '../../core';\r\nimport { PhysXRigidBody } from './physx-rigid-body';\r\nimport { PhysXWorld } from './physx-world';\r\nimport { PhysXInstance } from './physx-instance';\r\nimport { PhysXShape } from './shapes/physx-shape';\r\nimport { TransformBit } from '../../scene-graph/node-enum';\r\nimport {\r\n    addActorToScene, syncNoneStaticToSceneIfWaking, getJsTransform, getTempTransform, physXEqualsCocosQuat,\r\n    physXEqualsCocosVec3, PX, setMassAndUpdateInertia,\r\n} from './physx-adapter';\r\nimport { ERigidBodyType, PhysicsSystem } from '../framework';\r\nimport { PhysXJoint } from './joints/physx-joint';\r\nimport { PhysicsGroup } from '../framework/physics-enum';\r\nimport { Node } from '../../scene-graph';\r\n\r\n/** @mangle */\r\nexport class PhysXSharedBody {\r\n    private static idCounter = 0;\r\n    private static readonly sharedBodesMap = new Map<string, PhysXSharedBody>();\r\n\r\n    static getSharedBody (node: Node, wrappedWorld: PhysXWorld, wrappedBody?: PhysXRigidBody): PhysXSharedBody {\r\n        const key = node.uuid;\r\n        let newSB!: PhysXSharedBody;\r\n        if (PhysXSharedBody.sharedBodesMap.has(key)) {\r\n            newSB = PhysXSharedBody.sharedBodesMap.get(key)!;\r\n        } else {\r\n            newSB = new PhysXSharedBody(node, wrappedWorld);\r\n            newSB.filterData.word0 = PhysicsGroup.DEFAULT;\r\n            newSB.filterData.word1 = PhysicsSystem.instance.collisionMatrix[PhysicsGroup.DEFAULT];\r\n            PhysXSharedBody.sharedBodesMap.set(node.uuid, newSB);\r\n        }\r\n        if (wrappedBody) {\r\n            newSB._wrappedBody = wrappedBody;\r\n            const g = wrappedBody.rigidBody.group;\r\n            const m = PhysicsSystem.instance.collisionMatrix[g];\r\n            newSB.filterData.word0 = g;\r\n            newSB.filterData.word1 = m;\r\n        }\r\n        return newSB;\r\n    }\r\n\r\n    readonly id: number;\r\n    readonly node: Node;\r\n    readonly wrappedWorld: PhysXWorld;\r\n    readonly wrappedShapes: PhysXShape[] = [];\r\n    readonly wrappedJoints0: PhysXJoint[] = [];\r\n    readonly wrappedJoints1: PhysXJoint[] = [];\r\n\r\n    get isStatic (): boolean { return this._isStatic; }\r\n    get isKinematic (): boolean { return this._isKinematic; }\r\n    get isDynamic (): boolean { return !this._isStatic && !this._isKinematic; }\r\n    get wrappedBody (): PhysXRigidBody | null { return this._wrappedBody; }\r\n    get filterData (): any { return this._filterData; }\r\n    get isInScene (): boolean { return this._index !== -1; }\r\n    get impl (): any {\r\n        this._initActor();\r\n        return this.isStatic ? this._staticActor : this._dynamicActor;\r\n    }\r\n\r\n    private _index = -1;\r\n    private _ref = 0;\r\n    private _isStatic = false;\r\n    private _isKinematic = false;\r\n    private _dynamicActor!: PhysX.RigidActor | any;\r\n    private _staticActor!: PhysX.RigidActor | any;\r\n    private _wrappedBody: PhysXRigidBody | null = null;\r\n    private _filterData: any;\r\n\r\n    set reference (v: boolean) {\r\n        this._ref = v ? this._ref + 1 : this._ref - 1;\r\n        if (this._ref === 0) { this.destroy(); }\r\n    }\r\n\r\n    set enabled (v: boolean) {\r\n        if (v) {\r\n            if (this._index < 0) {\r\n                this._index = this.wrappedWorld.wrappedBodies.length;\r\n                this.wrappedWorld.addActor(this);\r\n            }\r\n        } else if (this._index >= 0) {\r\n            const ws = this.wrappedShapes;\r\n            const wb = this.wrappedBody;\r\n            const isRemove = (ws.length === 0 && wb == null)\r\n                || (ws.length === 0 && wb != null && !wb.isEnabled);\r\n\r\n            if (isRemove) {\r\n                this._index = -1;\r\n                this.clearForces();\r\n                this.clearVelocity();\r\n                this.wrappedWorld.removeActor(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor (node: Node, wrappedWorld: PhysXWorld) {\r\n        this.id = PhysXSharedBody.idCounter++;\r\n        this.node = node;\r\n        this.wrappedWorld = wrappedWorld;\r\n        this._filterData = { word0: 1, word1: 1, word2: 1, word3: 0 };\r\n    }\r\n\r\n    private _initActor (): void {\r\n        const st = this._isStatic;\r\n        const wb = this.wrappedBody;\r\n        if (wb) {\r\n            const rb = wb.rigidBody;\r\n            if (rb.type === ERigidBodyType.STATIC) {\r\n                this._isStatic = true;\r\n                this._isKinematic = false;\r\n                this._initStaticActor();\r\n            } else {\r\n                this._isStatic = false;\r\n                this._initDynamicActor();\r\n            }\r\n        } else {\r\n            this._isStatic = true;\r\n            this._isKinematic = false;\r\n            this._initStaticActor();\r\n        }\r\n        if (st !== this._isStatic) { this._switchActor(st); }\r\n    }\r\n\r\n    private _initStaticActor (): void {\r\n        if (this._staticActor) return;\r\n        const t = getTempTransform(this.node.worldPosition, this.node.worldRotation);\r\n        this._staticActor = PhysXInstance.physics.createRigidStatic(t);\r\n        this._staticActor.setActorFlag(PX.ActorFlag.eVISUALIZATION, true);\r\n        if (this._staticActor.$$) PX.IMPL_PTR[this._staticActor.$$.ptr] = this;\r\n    }\r\n\r\n    private _initDynamicActor (): void {\r\n        if (this._dynamicActor) return;\r\n        const t = getTempTransform(this.node.worldPosition, this.node.worldRotation);\r\n        this._dynamicActor = PhysXInstance.physics.createRigidDynamic(t);\r\n        if (this._dynamicActor.$$) PX.IMPL_PTR[this._dynamicActor.$$.ptr] = this;\r\n        const wb = this.wrappedBody;\r\n        if (wb) {\r\n            const rb = wb.rigidBody;\r\n            this._dynamicActor.setMass(rb.mass);\r\n            this._dynamicActor.setActorFlag(PX.ActorFlag.eVISUALIZATION, true);\r\n            this._dynamicActor.setActorFlag(PX.ActorFlag.eDISABLE_GRAVITY, !rb.useGravity);\r\n            this.setLinearDamping(rb.linearDamping);\r\n            this.setAngularDamping(rb.angularDamping);\r\n            this.setRigidBodyFlag(PX.RigidBodyFlag.eKINEMATIC, rb.isKinematic);\r\n            const lf = rb.linearFactor;\r\n            this._dynamicActor.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_LINEAR_X, !lf.x);\r\n            this._dynamicActor.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_LINEAR_Y, !lf.y);\r\n            this._dynamicActor.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_LINEAR_Z, !lf.z);\r\n            const af = rb.angularFactor;\r\n            this._dynamicActor.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_ANGULAR_X, !af.x);\r\n            this._dynamicActor.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_ANGULAR_Y, !af.y);\r\n            this._dynamicActor.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_ANGULAR_Z, !af.z);\r\n        }\r\n    }\r\n\r\n    private _switchActor (isStaticBefore: boolean): void {\r\n        if (!this._staticActor || !this._dynamicActor) return;\r\n        const a0 = isStaticBefore ? this._staticActor : this._dynamicActor;\r\n        const a1 = !isStaticBefore ? this._staticActor : this._dynamicActor;\r\n        if (this._index >= 0) {\r\n            this.wrappedWorld.scene.removeActor(a0, false);\r\n            addActorToScene(this.wrappedWorld.scene, a1);\r\n        }\r\n        for (let i = 0; i < this.wrappedShapes.length; i++) {\r\n            const ws = this.wrappedShapes[i];\r\n            a0.detachShape(ws.impl, false);\r\n            a1.attachShape(ws.impl);\r\n        }\r\n        if (isStaticBefore) {\r\n            const da = this._dynamicActor;\r\n            setMassAndUpdateInertia(da, this._wrappedBody!.rigidBody.mass);\r\n        }\r\n    }\r\n\r\n    addShape (ws: PhysXShape): void {\r\n        const index = this.wrappedShapes.indexOf(ws);\r\n        if (index < 0) {\r\n            ws.setIndex(this.wrappedShapes.length);\r\n            ws.updateFilterData(this._filterData);\r\n            this.impl.attachShape(ws.impl);\r\n            this.wrappedShapes.push(ws);\r\n            if (!ws.collider.isTrigger) {\r\n                if (this.isDynamic) setMassAndUpdateInertia(this.impl, this._wrappedBody!.rigidBody.mass);\r\n            }\r\n        }\r\n    }\r\n\r\n    removeShape (ws: PhysXShape): void {\r\n        const index = this.wrappedShapes.indexOf(ws);\r\n        if (index >= 0) {\r\n            ws.setIndex(-1);\r\n            this.impl.detachShape(ws.impl, true);\r\n            js.array.fastRemoveAt(this.wrappedShapes, index);\r\n            if (!ws.collider.isTrigger) {\r\n                if (this.isDynamic) setMassAndUpdateInertia(this.impl, this._wrappedBody!.rigidBody.mass);\r\n            }\r\n        }\r\n    }\r\n\r\n    addJoint (v: PhysXJoint, type: 0 | 1): void {\r\n        if (type) {\r\n            const i = this.wrappedJoints1.indexOf(v);\r\n            if (i < 0) this.wrappedJoints1.push(v);\r\n        } else {\r\n            const i = this.wrappedJoints0.indexOf(v);\r\n            if (i < 0) this.wrappedJoints0.push(v);\r\n        }\r\n    }\r\n\r\n    removeJoint (v: PhysXJoint, type: 0 | 1): void {\r\n        if (type) {\r\n            const i = this.wrappedJoints1.indexOf(v);\r\n            if (i >= 0) js.array.fastRemoveAt(this.wrappedJoints1, i);\r\n        } else {\r\n            const i = this.wrappedJoints0.indexOf(v);\r\n            if (i >= 0) js.array.fastRemoveAt(this.wrappedJoints0, i);\r\n        }\r\n    }\r\n\r\n    setLinearDamping (linDamp: number): void {\r\n        if (!this._dynamicActor) return;\r\n        const dt = PhysicsSystem.instance.fixedTimeStep;\r\n        this._dynamicActor.setLinearDamping((1 - (1 - linDamp) ** dt) / dt);\r\n    }\r\n\r\n    setAngularDamping (angDamp: number): void {\r\n        if (!this._dynamicActor) return;\r\n        const dt = PhysicsSystem.instance.fixedTimeStep;\r\n        this._dynamicActor.setAngularDamping((1 - (1 - angDamp) ** dt) / dt);\r\n    }\r\n\r\n    setMass (v: number): void {\r\n        if (v <= 0) return;\r\n        if (!this.isDynamic) return;\r\n        setMassAndUpdateInertia(this.impl, v);\r\n    }\r\n\r\n    setType (v: ERigidBodyType): void {\r\n        this._initActor();\r\n        if (this.isStatic) return;\r\n        switch (v) {\r\n        case ERigidBodyType.DYNAMIC:\r\n            this.setRigidBodyFlag(PX.RigidBodyFlag.eKINEMATIC, false);\r\n            break;\r\n        case ERigidBodyType.KINEMATIC:\r\n        default:\r\n            this.setRigidBodyFlag(PX.RigidBodyFlag.eKINEMATIC, true);\r\n            break;\r\n        }\r\n    }\r\n\r\n    setRigidBodyFlag (v: any, b: boolean): void {\r\n        if (v === PX.RigidBodyFlag.eKINEMATIC) this._isKinematic = b;\r\n        this.impl.setRigidBodyFlag(v, b);\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        const node = this.node;\r\n        if (node.hasChangedFlags) {\r\n            if (node.hasChangedFlags & TransformBit.SCALE) this.syncScale();\r\n            if (this._isKinematic) {\r\n                const trans = getTempTransform(node.worldPosition, node.worldRotation);\r\n                this.impl.setKinematicTarget(trans);\r\n            } else {\r\n                const trans = getJsTransform(node.worldPosition, node.worldRotation);\r\n                this.impl.setGlobalPose(trans, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    syncSceneWithCheck (): void {\r\n        const node = this.node;\r\n        if (node.hasChangedFlags) {\r\n            if (node.hasChangedFlags & TransformBit.SCALE) this.syncScale();\r\n            const wp = node.worldPosition;\r\n            const wr = node.worldRotation;\r\n            const pose = this.impl.getGlobalPose();\r\n            const dontUpdate = physXEqualsCocosVec3(pose, wp) && physXEqualsCocosQuat(pose, wr);\r\n            if (!dontUpdate) {\r\n                if (this._isKinematic) {\r\n                    const trans = getTempTransform(node.worldPosition, node.worldRotation);\r\n                    this.impl.setKinematicTarget(trans);\r\n                } else {\r\n                    const trans = getJsTransform(node.worldPosition, node.worldRotation);\r\n                    this.impl.setGlobalPose(trans, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    syncPhysicsToScene (): void {\r\n        if (!this.isDynamic) return;\r\n        syncNoneStaticToSceneIfWaking(this._dynamicActor, this.node);\r\n    }\r\n\r\n    syncScale (): void {\r\n        for (let i = 0; i < this.wrappedShapes.length; i++) {\r\n            this.wrappedShapes[i].updateScale();\r\n        }\r\n        for (let i = 0; i < this.wrappedJoints0.length; i++) {\r\n            this.wrappedJoints0[i].updateScale0();\r\n        }\r\n        for (let i = 0; i < this.wrappedJoints1.length; i++) {\r\n            this.wrappedJoints1[i].updateScale1();\r\n        }\r\n    }\r\n\r\n    setGroup (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word0 = v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    getGroup (): number {\r\n        return this._filterData.word0;\r\n    }\r\n\r\n    addGroup (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word0 |= v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    removeGroup (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word0 &= ~v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    setMask (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word1 = v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    getMask (): number {\r\n        return this._filterData.word1;\r\n    }\r\n\r\n    addMask (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word1 |= v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    removeMask (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word1 &= ~v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    updateFilterData (): void {\r\n        for (let i = 0; i < this.wrappedShapes.length; i++) {\r\n            this.wrappedShapes[i].updateFilterData(this._filterData);\r\n        }\r\n    }\r\n\r\n    clearForces (): void {\r\n        if (this._isStatic || this._isKinematic) return;\r\n        this.impl.clearForce(PX.ForceMode.eFORCE); // this.impl.clearForce(PX.ForceMode.eACCELERATION);\r\n        this.impl.clearForce(PX.ForceMode.eIMPULSE); // this.impl.clearForce(PX.ForceMode.eVELOCITY_CHANGE);\r\n        this.impl.clearTorque(PX.ForceMode.eFORCE);\r\n        this.impl.clearTorque(PX.ForceMode.eIMPULSE);\r\n    }\r\n\r\n    clearVelocity (): void {\r\n        if (this._isStatic || this._isKinematic) return;\r\n        this.impl.setLinearVelocity(Vec3.ZERO, false);\r\n        this.impl.setAngularVelocity(Vec3.ZERO, false);\r\n    }\r\n\r\n    destroy (): void {\r\n        if (this._dynamicActor) {\r\n            if (this._dynamicActor.$$) {\r\n                PX.IMPL_PTR[this._dynamicActor.$$.ptr] = null;\r\n                delete PX.IMPL_PTR[this._dynamicActor.$$.ptr];\r\n            }\r\n            this._dynamicActor.release();\r\n            this._dynamicActor = null;\r\n        }\r\n\r\n        if (this._staticActor) {\r\n            if (this._staticActor.$$) {\r\n                PX.IMPL_PTR[this._staticActor.$$.ptr] = null;\r\n                delete PX.IMPL_PTR[this._staticActor.$$.ptr];\r\n            }\r\n            this._staticActor.release();\r\n            this._staticActor = null;\r\n        }\r\n\r\n        PhysXSharedBody.sharedBodesMap.delete(this.node.uuid);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like, Vec3, Quat } from '../../core';\r\nimport { IContactEquation, ICollisionEvent, Collider } from '../framework';\r\nimport { getContactNormal, getContactPosition } from './physx-adapter';\r\n\r\nconst quat = new Quat();\r\n\r\n/** @mangle */\r\nexport class PhysXContactEquation implements IContactEquation {\r\n    get isBodyA (): boolean {\r\n        return this.colliderA.uuid === this.event.selfCollider.uuid;\r\n    }\r\n\r\n    impl: any = null;\r\n    event: ICollisionEvent;\r\n    colliderA!: Collider;\r\n    colliderB!: Collider;\r\n\r\n    constructor (event: ICollisionEvent) {\r\n        this.event = event;\r\n    }\r\n\r\n    getLocalPointOnA (out: IVec3Like): void {\r\n        getContactPosition(this.impl, out, this.event.impl);\r\n        Vec3.subtract(out, out, this.colliderA.node.worldPosition);\r\n    }\r\n\r\n    getLocalPointOnB (out: IVec3Like): void {\r\n        getContactPosition(this.impl, out, this.event.impl);\r\n        Vec3.subtract(out, out, this.colliderB.node.worldPosition);\r\n    }\r\n\r\n    getWorldPointOnA (out: IVec3Like): void {\r\n        getContactPosition(this.impl, out, this.event.impl);\r\n    }\r\n\r\n    getWorldPointOnB (out: IVec3Like): void {\r\n        getContactPosition(this.impl, out, this.event.impl);\r\n    }\r\n\r\n    getLocalNormalOnA (out: IVec3Like): void {\r\n        this.getWorldNormalOnA(out);\r\n        Quat.conjugate(quat, this.colliderA.node.worldRotation);\r\n        Vec3.transformQuat(out, out, quat);\r\n    }\r\n\r\n    getLocalNormalOnB (out: IVec3Like): void {\r\n        this.getWorldNormalOnB(out);\r\n        Quat.conjugate(quat, this.colliderB.node.worldRotation);\r\n        Vec3.transformQuat(out, out, quat);\r\n    }\r\n\r\n    getWorldNormalOnA (out: IVec3Like): void {\r\n        getContactNormal(this.impl, out, this.event.impl);\r\n        if (!this.isBodyA) Vec3.negate(out, out);\r\n    }\r\n\r\n    getWorldNormalOnB (out: IVec3Like): void {\r\n        getContactNormal(this.impl, out, this.event.impl);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { IVec3Like, Quat, Vec3, geometry } from '../../../core';\r\nimport { Collider, RigidBody, PhysicsMaterial, PhysicsSystem } from '../../framework';\r\nimport { IBaseShape } from '../../spec/i-physics-shape';\r\nimport {\r\n    addReference, getShapeFlags, getShapeMaterials, getShapeWorldBounds, getTempTransform,\r\n    PX, removeReference, _trans,\r\n} from '../physx-adapter';\r\nimport { EFilterDataWord3 } from '../physx-enum';\r\nimport { PhysXSharedBody } from '../physx-shared-body';\r\nimport { PhysXWorld } from '../physx-world';\r\nimport { PhysXInstance } from '../physx-instance';\r\n\r\nexport enum EPhysXShapeType {\r\n    SPHERE,\r\n    BOX,\r\n    CAPSULE,\r\n    CYLINDER,\r\n    CONE,\r\n    PLANE,\r\n    TERRAIN,\r\n    MESH,\r\n}\r\n\r\n/** @mangle */\r\nexport class PhysXShape implements IBaseShape {\r\n    private static _MESH_SCALE: any;\r\n    static get MESH_SCALE (): any {\r\n        if (!this._MESH_SCALE) { this._MESH_SCALE = new PX.MeshScale(Vec3.ZERO, Quat.IDENTITY); }\r\n        return this._MESH_SCALE;\r\n    }\r\n\r\n    get impl (): any { return this._impl; }\r\n    get collider (): Collider { return this._collider; }\r\n    get attachedRigidBody (): RigidBody | null { return null; }\r\n\r\n    private static idCounter = 0;\r\n\r\n    readonly id: number;\r\n    readonly type: EPhysXShapeType;\r\n\r\n    protected _impl: any = null;\r\n    protected _collider: Collider = null as any;\r\n    protected _flags: any;\r\n    protected _sharedBody!: PhysXSharedBody;\r\n    protected _rotation = new Quat(0, 0, 0, 1);\r\n    protected _index = -1;\r\n    protected _word3 = 0;\r\n    protected _isEnabled = false;\r\n\r\n    constructor (type: EPhysXShapeType) {\r\n        this.type = type;\r\n        this.id = PhysXShape.idCounter++;\r\n    }\r\n\r\n    initialize (v: Collider): void {\r\n        this._collider = v;\r\n        this._flags = getShapeFlags(v.isTrigger);\r\n        this._sharedBody = (PhysicsSystem.instance.physicsWorld as PhysXWorld).getSharedBody(v.node);\r\n        this._sharedBody.reference = true;\r\n        this.onComponentSet();\r\n        addReference(this, this._impl);\r\n    }\r\n\r\n    setIndex (v: number): void {\r\n        this._index = v;\r\n    }\r\n\r\n    // virtual\r\n    onComponentSet (): void { }\r\n\r\n    // virtual\r\n    updateScale (): void { }\r\n\r\n    onLoad (): void {\r\n        this.setMaterial(this._collider.sharedMaterial);\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    onEnable (): void {\r\n        this.addToBody();\r\n        this._isEnabled = true;\r\n        this._sharedBody.enabled = true;\r\n    }\r\n\r\n    onDisable (): void {\r\n        this.removeFromBody();\r\n        this._isEnabled = false;\r\n        this._sharedBody.enabled = false;\r\n    }\r\n\r\n    onDestroy (): void {\r\n        this._sharedBody.reference = false;\r\n        if (this._impl) {\r\n            removeReference(this, this._impl);\r\n            this._impl.release();\r\n            this._impl = null;\r\n        }\r\n        this._flags = null;\r\n        this._collider = null as any;\r\n    }\r\n\r\n    setMaterial (v: PhysicsMaterial | null): void {\r\n        const mat = this.getSharedMaterial(v);\r\n        this._impl.setMaterials(getShapeMaterials(mat));\r\n    }\r\n\r\n    protected getSharedMaterial (v: PhysicsMaterial | null): any {\r\n        const v1 = (v == null) ? PhysicsSystem.instance.defaultMaterial : v;\r\n        if (!PX.CACHE_MAT[v1.id]) {\r\n            const physics = PhysXInstance.physics;\r\n            const mat = physics.createMaterial(v1.friction, v1.friction, v1.restitution);\r\n            mat.setFrictionCombineMode(PX.CombineMode.eMULTIPLY);\r\n            mat.setRestitutionCombineMode(PX.CombineMode.eMULTIPLY);\r\n            PX.CACHE_MAT[v1.id] = mat;\r\n            return mat;\r\n        }\r\n        const mat = PX.CACHE_MAT[v1.id];\r\n        mat.setStaticFriction(v1.friction);\r\n        mat.setDynamicFriction(v1.friction);\r\n        mat.setRestitution(v1.restitution);\r\n        return mat;\r\n    }\r\n\r\n    setAsTrigger (v: boolean): void {\r\n        if (v) {\r\n            this._impl.setFlag(PX.ShapeFlag.eSIMULATION_SHAPE, !v);\r\n            this._impl.setFlag(PX.ShapeFlag.eTRIGGER_SHAPE, v);\r\n        } else {\r\n            this._impl.setFlag(PX.ShapeFlag.eTRIGGER_SHAPE, v);\r\n            this._impl.setFlag(PX.ShapeFlag.eSIMULATION_SHAPE, !v);\r\n        }\r\n        if (this._index >= 0) {\r\n            this._sharedBody.removeShape(this);\r\n            this._sharedBody.addShape(this);\r\n        }\r\n    }\r\n\r\n    setCenter (v: IVec3Like): void {\r\n        const pos = _trans.translation;\r\n        const rot = _trans.rotation;\r\n        Vec3.multiply(pos, v, this._collider.node.worldScale);\r\n        Quat.copy(rot, this._rotation);\r\n        const trans = getTempTransform(pos, rot);\r\n        this._impl.setLocalPose(trans);\r\n    }\r\n\r\n    getAABB (v: geometry.AABB): void {\r\n        getShapeWorldBounds(this.impl, this._sharedBody.impl, 1, v);\r\n    }\r\n\r\n    getBoundingSphere (v: geometry.Sphere): void {\r\n        geometry.AABB.toBoundingSphere(v, this._collider.worldBounds as geometry.AABB);\r\n    }\r\n\r\n    setGroup (v: number): void {\r\n        this._sharedBody.setGroup(v);\r\n    }\r\n\r\n    getGroup (): number {\r\n        return this._sharedBody.getGroup();\r\n    }\r\n\r\n    addGroup (v: number): void {\r\n        this._sharedBody.addGroup(v);\r\n    }\r\n\r\n    removeGroup (v: number): void {\r\n        this._sharedBody.removeGroup(v);\r\n    }\r\n\r\n    setMask (v: number): void {\r\n        this._sharedBody.setMask(v);\r\n    }\r\n\r\n    getMask (): number {\r\n        return this._sharedBody.getMask();\r\n    }\r\n\r\n    addMask (v: number): void {\r\n        this._sharedBody.addMask(v);\r\n    }\r\n\r\n    removeMask (v: number): void {\r\n        this._sharedBody.removeMask(v);\r\n    }\r\n\r\n    updateFilterData (filterData: any): void {\r\n        this._word3 = EFilterDataWord3.DETECT_CONTACT_CCD;\r\n        if (this._collider.needTriggerEvent) {\r\n            this._word3 |= EFilterDataWord3.DETECT_TRIGGER_EVENT;\r\n        }\r\n        if (this._collider.needCollisionEvent) {\r\n            this._word3 |= EFilterDataWord3.DETECT_CONTACT_EVENT | EFilterDataWord3.DETECT_CONTACT_POINT;\r\n        }\r\n        //filterData.word2 = this.id;//useless\r\n        filterData.word3 = this._word3;\r\n        this.setFilerData(filterData);\r\n    }\r\n\r\n    updateEventListener (): void {\r\n        if (this._sharedBody) this.updateFilterData(this._sharedBody.filterData);\r\n    }\r\n\r\n    updateByReAdd (): void {\r\n        if (this._isEnabled) {\r\n            this.removeFromBody();\r\n            this.addToBody();\r\n        }\r\n    }\r\n\r\n    // virtual\r\n    setFilerData (filterData: any): void {\r\n        this._impl.setQueryFilterData(filterData);\r\n        this._impl.setSimulationFilterData(filterData);\r\n    }\r\n\r\n    // virtual\r\n    addToBody (): void {\r\n        this._sharedBody.addShape(this);\r\n    }\r\n\r\n    // virtual\r\n    removeFromBody (): void {\r\n        this._sharedBody.removeShape(this);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { error, IVec3Like, Vec3 } from '../../../core';\r\nimport { PhysicsSystem  } from '../../framework';\r\nimport { CharacterController } from '../../framework/components/character-controllers/character-controller';\r\nimport { IBaseCharacterController } from '../../spec/i-character-controller';\r\nimport { getWrapShape, PX, _trans } from '../physx-adapter';\r\nimport { PhysXWorld } from '../physx-world';\r\nimport { PhysXShape } from '../shapes/physx-shape';\r\nimport { degreesToRadians } from '../../../core/utils/misc';\r\nimport { TransformBit } from '../../../scene-graph';\r\n\r\nconst v3_0 = new Vec3(0, 0, 0);\r\nconst v3_1 = new Vec3(0, 0, 0);\r\n\r\n/** @mangle */\r\nexport class PhysXCharacterController implements IBaseCharacterController {\r\n    private _isEnabled = false;\r\n    protected _impl: any = null;\r\n    protected _comp: CharacterController = null as any;\r\n    private _pxCollisionFlags = 0;//: PX.PxControllerCollisionFlags;\r\n    private _filterData: any;\r\n    private _queryFilterCB: any = null;\r\n    protected _word3 = 0;\r\n    protected _overlapRecovery = true;\r\n\r\n    readonly id: number;\r\n    private static idCounter = 0;\r\n\r\n    get isEnabled (): boolean { return this._isEnabled; }\r\n    get impl (): any {\r\n        /* eslint-disable @typescript-eslint/no-unsafe-return */\r\n        return this._impl;\r\n    }\r\n    get characterController (): CharacterController { return this._comp; }\r\n\r\n    get filterData (): any {\r\n        /* eslint-disable @typescript-eslint/no-unsafe-return */\r\n        return this._filterData;\r\n    }\r\n\r\n    get queryFilterCB (): any {\r\n        /* eslint-disable @typescript-eslint/no-unsafe-return */\r\n        return this._queryFilterCB;\r\n    }\r\n\r\n    constructor () {\r\n        this.id = PhysXCharacterController.idCounter++;\r\n        this._filterData = { word0: 1, word1: 1, word2: 1, word3: 0 };\r\n    }\r\n\r\n    // virtual\r\n    protected onComponentSet (): void { }\r\n    protected create (): void { }\r\n    protected updateScale (): void { }\r\n\r\n    initialize (comp: CharacterController): boolean {\r\n        this._comp = comp;\r\n\r\n        this._queryFilterCB = PX.PxQueryFilterCallback.implement(PhysXCharacterController.queryCallback);\r\n\r\n        const group = this._comp.group;\r\n        this._filterData.word0 = this._comp.group;\r\n        const mask = PhysicsSystem.instance.collisionMatrix[group];\r\n        this._filterData.word1 = mask;\r\n\r\n        this.onComponentSet();\r\n\r\n        if (this._impl == null) {\r\n            error('[Physics]: Initialize PhysXCharacterController Failed');\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onEnable (): void {\r\n        this._isEnabled = true;\r\n        if (!this._impl) {\r\n            this.onComponentSet();\r\n        }\r\n        this.setDetectCollisions(true);\r\n        this.setOverlapRecovery(true);\r\n        (PhysicsSystem.instance.physicsWorld as PhysXWorld).addCCT(this);\r\n    }\r\n\r\n    onDisable (): void {\r\n        this._isEnabled = false;\r\n        (PhysicsSystem.instance.physicsWorld as PhysXWorld).removeCCT(this);\r\n        this.onDestroy();//to be optimized\r\n    }\r\n\r\n    onLoad (): void {\r\n\r\n    }\r\n\r\n    release (): void {\r\n        if (this._impl) {\r\n            if (this._impl.$$) {\r\n                PX.IMPL_PTR[this._impl.$$.ptr] = null;\r\n                delete PX.IMPL_PTR[this._impl.$$.ptr];\r\n                const shapePtr = this._impl.getShape().$$.ptr;\r\n                PX.IMPL_PTR[shapePtr] = null;\r\n                delete PX.IMPL_PTR[shapePtr];\r\n            }\r\n            this._impl.release();\r\n            this._impl = null;\r\n        }\r\n    }\r\n\r\n    onDestroy (): void {\r\n        this.release();\r\n    }\r\n\r\n    //world position of cct\r\n    getPosition (out: IVec3Like): void {\r\n        if (!this._impl) return;\r\n        Vec3.copy(out, this._impl.getPosition());\r\n    }\r\n\r\n    setPosition (value: IVec3Like): void {\r\n        if (!this._impl) return;\r\n        this._impl.setPosition(value);\r\n        this.syncPhysicsToScene();\r\n    }\r\n\r\n    setContactOffset (value: number): void {\r\n        if (!this._impl) return;\r\n        this._impl.setContactOffset(value);\r\n    }\r\n\r\n    setStepOffset (value: number): void {\r\n        if (!this._impl) return;\r\n        this._impl.setStepOffset(value);\r\n    }\r\n\r\n    setSlopeLimit (value: number): void {\r\n        if (!this._impl) return;\r\n        this._impl.setSlopeLimit(Math.cos(degreesToRadians(value)));\r\n    }\r\n\r\n    setDetectCollisions (value: boolean): void {\r\n        if (!this._impl) return;\r\n        this._impl.setCollision(value);\r\n    }\r\n\r\n    setQuery (value: boolean): void {\r\n        if (!this._impl) return;\r\n        this._impl.setQuery(value);\r\n    }\r\n\r\n    setOverlapRecovery (value: boolean): void {\r\n        this._overlapRecovery = value;\r\n    }\r\n\r\n    onGround (): boolean {\r\n        return (this._pxCollisionFlags & (1 << 2)) > 0;//PxControllerCollisionFlag::Enum::eCOLLISION_DOWN\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        const node = this.characterController.node;\r\n        if (node.hasChangedFlags) {\r\n            if (node.hasChangedFlags & TransformBit.SCALE) this.syncScale();\r\n            //teleport\r\n            if (node.hasChangedFlags & TransformBit.POSITION) {\r\n                Vec3.add(v3_0, node.worldPosition, this.scaledCenter);\r\n                this.setPosition(v3_0);\r\n            }\r\n        }\r\n    }\r\n\r\n    syncPhysicsToScene (): void {\r\n        this.getPosition(v3_0);\r\n        v3_0.subtract(this.scaledCenter);\r\n        this._comp.node.setWorldPosition(v3_0);\r\n    }\r\n\r\n    syncScale (): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    get scaledCenter (): Vec3 {\r\n        Vec3.multiply(v3_1, this._comp.center, this._comp.node.worldScale);\r\n        return v3_1;\r\n    }\r\n\r\n    // eNONE = 0,   //!< the query should ignore this shape\r\n    // eTOUCH = 1,  //!< a hit on the shape touches the intersection geometry of the query but does not block it\r\n    // eBLOCK = 2   //!< a hit on the shape blocks the query (does not block overlap queries)\r\n    static queryCallback = {\r\n        preFilter (filterData: any, shape: any, _actor: any, _out: any): number {\r\n            const pxShape = getWrapShape<PhysXShape>(shape);\r\n            if (!pxShape) {\r\n                return PX.QueryHitType.eNONE;\r\n            }\r\n\r\n            const collider = pxShape.collider;\r\n            if (!(filterData.word0 & collider.getMask()) || !(filterData.word1 & collider.getGroup())) {\r\n                return PX.QueryHitType.eNONE;\r\n            }\r\n\r\n            // Ignore trigger shape\r\n            // this is done in physx::Cct::findTouchedGeometry\r\n            // Ubi (EA) : Discarding Triggers\r\n            // const shapeFlags = shape.getFlags();\r\n            // if (shapeFlags.isSet(PX.ShapeFlag.eTRIGGER_SHAPE)) {\r\n            //     return PX.QueryHitType.eNONE;\r\n            // }\r\n\r\n            return PX.QueryHitType.eBLOCK;\r\n        },\r\n    };\r\n\r\n    move (movement: IVec3Like, minDist: number, elapsedTime: number): void {\r\n        if (!this._isEnabled) { return; }\r\n        (PhysicsSystem.instance.physicsWorld as PhysXWorld).controllerManager.setOverlapRecoveryModule(this._overlapRecovery);\r\n        this._pxCollisionFlags = this._impl.move(movement, minDist, elapsedTime, this.filterData, this.queryFilterCB);\r\n    }\r\n\r\n    setGroup (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word0 = v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    getGroup (): number {\r\n        return this._filterData.word0;\r\n    }\r\n\r\n    addGroup (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word0 |= v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    removeGroup (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word0 &= ~v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    setMask (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word1 = v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    getMask (): number {\r\n        return this._filterData.word1;\r\n    }\r\n\r\n    addMask (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word1 |= v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    removeMask (v: number): void {\r\n        v >>>= 0; //convert to unsigned int(32bit) for physx\r\n        this._filterData.word1 &= ~v;\r\n        this.updateFilterData();\r\n    }\r\n\r\n    updateEventListener (): void {\r\n        this.updateFilterData();\r\n    }\r\n\r\n    updateFilterData (): void {\r\n        if (!this._impl) return;\r\n        // this._impl.setQueryFilterData(filterData);//set inside move()\r\n        this._impl.setSimulationFilterData(this.filterData);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { IPhysicsWorld, IRaycastOptions } from '../spec/i-physics-world';\r\nimport { PhysicsMaterial, PhysicsRayResult, CollisionEventType, TriggerEventType, CharacterTriggerEventType,\r\n    CharacterControllerContact,\r\n    EPhysicsDrawFlags } from '../framework';\r\nimport { error, RecyclePool, js, IVec3Like, geometry, IQuatLike, Vec3, Quat, Color } from '../../core';\r\nimport { IBaseConstraint } from '../spec/i-physics-constraint';\r\nimport { PhysXRigidBody } from './physx-rigid-body';\r\nimport {\r\n    addActorToScene, raycastAll, simulateScene, initializeWorld, raycastClosest, sweepClosest,\r\n    getWrapShape, PX, getContactDataOrByteOffset, sweepAll, getColorPXColor,\r\n} from './physx-adapter';\r\nimport { PhysXSharedBody } from './physx-shared-body';\r\nimport { TupleDictionary } from '../utils/tuple-dictionary';\r\nimport { PhysXContactEquation } from './physx-contact-equation';\r\nimport { CollisionEventObject, TriggerEventObject, CharacterTriggerEventObject } from '../utils/util';\r\nimport { PhysXShape } from './shapes/physx-shape';\r\nimport { EFilterDataWord3 } from './physx-enum';\r\nimport { PhysXInstance } from './physx-instance';\r\nimport { Node } from '../../scene-graph';\r\nimport { PhysXCharacterController } from './character-controllers/physx-character-controller';\r\nimport { GeometryRenderer } from '../../rendering/geometry-renderer';\r\nimport { director } from '../../game';\r\n\r\nconst CC_QUAT_0 = new Quat();\r\nconst CC_V3_0 = new Vec3();\r\nconst CC_V3_1 = new Vec3();\r\nconst CC_V3_2 = new Vec3();\r\nconst CC_COLOR_0 = new Color(0, 0, 0, 0);\r\nexport class PhysXWorld extends PhysXInstance implements IPhysicsWorld {\r\n    setAllowSleep (_v: boolean): void { }\r\n    setDefaultMaterial (_v: PhysicsMaterial): void { }\r\n    setGravity (gravity: IVec3Like): void {\r\n        this.scene.setGravity(gravity);\r\n    }\r\n\r\n    get impl (): any { return this.scene; }\r\n    readonly scene: any;\r\n    readonly callback = PhysXCallback;\r\n    readonly wrappedBodies: PhysXSharedBody[] = [];\r\n    readonly ccts: PhysXCharacterController[] = [];\r\n\r\n    controllerManager: any;\r\n\r\n    private _isNeedFetch = false;\r\n\r\n    private static _sweepBoxGeometry: any;\r\n    private static _sweepSphereGeometry: any;\r\n    private static _sweepCapsuleGeometry: any;\r\n\r\n    private _debugLineCount = 0;\r\n    private _MAX_DEBUG_LINE_COUNT = 16384;\r\n    private _debugDrawFlags = EPhysicsDrawFlags.NONE;\r\n    private _debugConstraintSize = 0.3;\r\n\r\n    constructor () {\r\n        super();\r\n        initializeWorld(this);\r\n    }\r\n\r\n    destroy (): void {\r\n        if (this.wrappedBodies.length) error('You should destroy all physics component first.');\r\n        this.scene.release();\r\n    }\r\n\r\n    step (deltaTime: number, _timeSinceLastCalled?: number, _maxSubStep = 0): void {\r\n        if (this.wrappedBodies.length === 0) return;\r\n        this._simulate(deltaTime);\r\n        if (!PX.MULTI_THREAD) {\r\n            this._fetchResults();\r\n            for (let i = 0; i < this.wrappedBodies.length; i++) {\r\n                const body = this.wrappedBodies[i];\r\n                body.syncPhysicsToScene();\r\n            }\r\n        }\r\n\r\n        this._debugDraw();\r\n    }\r\n\r\n    private _simulate (dt: number): void {\r\n        if (!this._isNeedFetch) {\r\n            simulateScene(this.scene, dt);\r\n            this._isNeedFetch = true;\r\n        }\r\n    }\r\n\r\n    private _fetchResults (): void {\r\n        if (this._isNeedFetch) {\r\n            this.scene.fetchResults(true);\r\n            this._isNeedFetch = false;\r\n        }\r\n    }\r\n\r\n    syncSceneToPhysics (): void {\r\n        for (let i = 0; i < this.wrappedBodies.length; i++) {\r\n            const body = this.wrappedBodies[i];\r\n            body.syncSceneToPhysics();\r\n        }\r\n        const ccts = this.ccts;\r\n        const length = ccts.length;\r\n        for (let i = 0; i < length; i++) {\r\n            const cct = ccts[i];\r\n            cct.syncSceneToPhysics();\r\n        }\r\n    }\r\n\r\n    // only used in muti-thread for now\r\n    syncPhysicsToScene (): void {\r\n        this._fetchResults();\r\n        for (let i = 0; i < this.wrappedBodies.length; i++) {\r\n            const body = this.wrappedBodies[i];\r\n            body.syncPhysicsToScene();\r\n        }\r\n    }\r\n\r\n    syncAfterEvents (): void {\r\n        for (let i = 0; i < this.wrappedBodies.length; i++) {\r\n            const body = this.wrappedBodies[i];\r\n            body.syncSceneWithCheck();\r\n        }\r\n    }\r\n\r\n    get debugDrawFlags (): EPhysicsDrawFlags {\r\n        return this._debugDrawFlags;\r\n    }\r\n\r\n    set debugDrawFlags (v: EPhysicsDrawFlags) {\r\n        this._debugDrawFlags = v;\r\n        this._setDebugDrawMode();\r\n    }\r\n\r\n    get debugDrawConstraintSize (): number {\r\n        return this._debugConstraintSize;\r\n    }\r\n\r\n    set debugDrawConstraintSize (v) {\r\n        this._debugConstraintSize = v;\r\n        this._setDebugDrawMode();\r\n    }\r\n\r\n    private _setDebugDrawMode (): void {\r\n        if (this._debugDrawFlags & EPhysicsDrawFlags.WIRE_FRAME) {\r\n            this.scene.setVisualizationParameter(PX.PxVisualizationParameter.eCOLLISION_SHAPES, 1);\r\n        } else {\r\n            this.scene.setVisualizationParameter(PX.PxVisualizationParameter.eCOLLISION_SHAPES, 0);\r\n        }\r\n\r\n        const drawConstraint = Boolean(this._debugDrawFlags & EPhysicsDrawFlags.CONSTRAINT);\r\n        const internalConstraintSize = drawConstraint ? this._debugConstraintSize : 0;\r\n        this.scene.setVisualizationParameter(PX.PxVisualizationParameter.eJOINT_LOCAL_FRAMES, internalConstraintSize);\r\n        this.scene.setVisualizationParameter(PX.PxVisualizationParameter.eJOINT_LIMITS, internalConstraintSize);\r\n\r\n        if (this._debugDrawFlags & EPhysicsDrawFlags.AABB) {\r\n            this.scene.setVisualizationParameter(PX.PxVisualizationParameter.eCOLLISION_AABBS, 1);\r\n        } else {\r\n            this.scene.setVisualizationParameter(PX.PxVisualizationParameter.eCOLLISION_AABBS, 0);\r\n        }\r\n    }\r\n\r\n    private _getDebugRenderer (): GeometryRenderer|null {\r\n        const cameras = director.root!.mainWindow?.cameras;\r\n        if (!cameras) return null;\r\n        if (cameras.length === 0) return null;\r\n        if (!cameras[0]) return null;\r\n        cameras[0].initGeometryRenderer();\r\n\r\n        return cameras[0].geometryRenderer;\r\n    }\r\n\r\n    private _debugDraw (): void {\r\n        const debugRenderer = this._getDebugRenderer();\r\n        if (!debugRenderer) return;\r\n\r\n        this._debugLineCount = 0;\r\n        const rbPtr = this.scene.getRenderBufferPtr();//PxRenderBuffer\r\n        const nbLine = PX.PxRenderBuffer_GetNbLines(rbPtr);\r\n        for (let i = 0; i < nbLine; i++) {\r\n            const linePtr = PX.PxRenderBuffer_GetLineAt(rbPtr, i) as number;//PxDebugLine\r\n            this._onDebugDrawLine(linePtr);\r\n        }\r\n        const nbTriangle = PX.PxRenderBuffer_GetNbTriangles(rbPtr);\r\n        for (let i = 0; i < nbTriangle; i++) {\r\n            const trianglePtr = PX.PxRenderBuffer_GetTriangleAt(rbPtr, i) as number;//PxDebugTriangle\r\n            this._onDebugDrawTriangle(trianglePtr);\r\n        }\r\n    }\r\n\r\n    private _onDebugDrawLine (linePtr: number): void {\r\n        const debugRenderer = this._getDebugRenderer();\r\n        if (debugRenderer && this._debugLineCount < this._MAX_DEBUG_LINE_COUNT) {\r\n            this._debugLineCount++;\r\n            const f32RawPtr = PX.HEAPF32.subarray(linePtr / 4, linePtr / 4 + 3 * 8);\r\n            const u32RawPtr = PX.HEAPU32.subarray(linePtr / 4, linePtr / 4 + 3 * 8);\r\n            CC_V3_0.x = f32RawPtr[0];\r\n            CC_V3_0.y = f32RawPtr[1];\r\n            CC_V3_0.z = f32RawPtr[2];\r\n            const color0 = u32RawPtr[3] as number;\r\n            CC_V3_1.x = f32RawPtr[4];\r\n            CC_V3_1.y = f32RawPtr[5];\r\n            CC_V3_1.z = f32RawPtr[6];\r\n            getColorPXColor(CC_COLOR_0, color0);\r\n            debugRenderer.addLine(CC_V3_0, CC_V3_1, CC_COLOR_0);\r\n        }\r\n    }\r\n\r\n    private _onDebugDrawTriangle (trianglePtr: number): void {\r\n        const debugRenderer = this._getDebugRenderer();\r\n        if (debugRenderer && (this._MAX_DEBUG_LINE_COUNT - this._debugLineCount) >= 3) {\r\n            this._debugLineCount += 3;\r\n            const f32RawPtr = PX.HEAPF32.subarray(trianglePtr / 4, trianglePtr / 4 + 3 * 12);\r\n            const u32RawPtr = PX.HEAPU32.subarray(trianglePtr / 4, trianglePtr / 4 + 3 * 12);\r\n            CC_V3_0.x = f32RawPtr[0];\r\n            CC_V3_0.y = f32RawPtr[1];\r\n            CC_V3_0.z = f32RawPtr[2];\r\n            const color0 = u32RawPtr[3] as number;\r\n            CC_V3_1.x = f32RawPtr[4];\r\n            CC_V3_1.y = f32RawPtr[5];\r\n            CC_V3_1.z = f32RawPtr[6];\r\n            // const color1 = u32RawPtr[7] as number;\r\n            CC_V3_2.x = f32RawPtr[8];\r\n            CC_V3_2.y = f32RawPtr[9];\r\n            CC_V3_2.z = f32RawPtr[10];\r\n            // const color2 = u32RawPtr[11] as number;\r\n            getColorPXColor(CC_COLOR_0, color0);\r\n            debugRenderer.addLine(CC_V3_0, CC_V3_1, CC_COLOR_0);\r\n            // getColorPXColor(CC_COLOR_0, color1);\r\n            debugRenderer.addLine(CC_V3_1, CC_V3_2, CC_COLOR_0);\r\n            // getColorPXColor(CC_COLOR_0, color2);\r\n            debugRenderer.addLine(CC_V3_2, CC_V3_0, CC_COLOR_0);\r\n        }\r\n    }\r\n\r\n    getSharedBody (node: Node, wrappedBody?: PhysXRigidBody): PhysXSharedBody {\r\n        return PhysXSharedBody.getSharedBody(node, this, wrappedBody);\r\n    }\r\n\r\n    addActor (body: PhysXSharedBody): void {\r\n        const index = this.wrappedBodies.indexOf(body);\r\n        if (index < 0) {\r\n            addActorToScene(this.scene, body.impl);\r\n            this.wrappedBodies.push(body);\r\n        }\r\n    }\r\n\r\n    removeActor (body: PhysXSharedBody): void {\r\n        const index = this.wrappedBodies.indexOf(body);\r\n        if (index >= 0) {\r\n            this.scene.removeActor(body.impl, true);\r\n            js.array.fastRemoveAt(this.wrappedBodies, index);\r\n        }\r\n    }\r\n\r\n    addCCT (cct: PhysXCharacterController): void {\r\n        const index = this.ccts.indexOf(cct);\r\n        if (index < 0) {\r\n            this.ccts.push(cct);\r\n        }\r\n    }\r\n\r\n    removeCCT (cct: PhysXCharacterController): void {\r\n        const index = this.ccts.indexOf(cct);\r\n        if (index >= 0) {\r\n            js.array.fastRemoveAt(this.ccts, index);\r\n        }\r\n    }\r\n\r\n    addConstraint (_constraint: IBaseConstraint): void { }\r\n\r\n    removeConstraint (_constraint: IBaseConstraint): void { }\r\n\r\n    raycast (worldRay: geometry.Ray, options: IRaycastOptions, pool: RecyclePool<PhysicsRayResult>, results: PhysicsRayResult[]): boolean {\r\n        return raycastAll(this, worldRay, options, pool, results);\r\n    }\r\n\r\n    raycastClosest (worldRay: geometry.Ray, options: IRaycastOptions, result: PhysicsRayResult): boolean {\r\n        return raycastClosest(this, worldRay, options, result);\r\n    }\r\n\r\n    sweepBox (\r\n        worldRay: geometry.Ray,\r\n        halfExtent: IVec3Like,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        pool: RecyclePool<PhysicsRayResult>,\r\n        results: PhysicsRayResult[],\r\n    ): boolean {\r\n        if (!PhysXWorld._sweepBoxGeometry) {\r\n            PhysXWorld._sweepBoxGeometry = new PX.BoxGeometry(halfExtent);\r\n        }\r\n        PhysXWorld._sweepBoxGeometry.setHalfExtents(halfExtent);\r\n        return sweepAll(this, worldRay, PhysXWorld._sweepBoxGeometry, orientation, options, pool, results);\r\n    }\r\n\r\n    sweepBoxClosest (\r\n        worldRay: geometry.Ray,\r\n        halfExtent: IVec3Like,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        result: PhysicsRayResult,\r\n    ): boolean {\r\n        if (!PhysXWorld._sweepBoxGeometry) {\r\n            PhysXWorld._sweepBoxGeometry = new PX.BoxGeometry(halfExtent);\r\n        }\r\n        PhysXWorld._sweepBoxGeometry.setHalfExtents(halfExtent);\r\n        return sweepClosest(this, worldRay, PhysXWorld._sweepBoxGeometry, orientation, options, result);\r\n    }\r\n\r\n    sweepSphere (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        options: IRaycastOptions,\r\n        pool: RecyclePool<PhysicsRayResult>,\r\n        results: PhysicsRayResult[],\r\n    ): boolean {\r\n        if (!PhysXWorld._sweepSphereGeometry) {\r\n            PhysXWorld._sweepSphereGeometry = new PX.SphereGeometry(radius);\r\n        }\r\n        PhysXWorld._sweepSphereGeometry.setRadius(radius);\r\n        return sweepAll(this, worldRay, PhysXWorld._sweepSphereGeometry, Quat.IDENTITY, options, pool, results);\r\n    }\r\n\r\n    sweepSphereClosest (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        options: IRaycastOptions,\r\n        result: PhysicsRayResult,\r\n    ): boolean {\r\n        if (!PhysXWorld._sweepSphereGeometry) {\r\n            PhysXWorld._sweepSphereGeometry = new PX.SphereGeometry(radius);\r\n        }\r\n        PhysXWorld._sweepSphereGeometry.setRadius(radius);\r\n        return sweepClosest(this, worldRay, PhysXWorld._sweepSphereGeometry, Quat.IDENTITY, options, result);\r\n    }\r\n\r\n    sweepCapsule (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        height: number,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        pool: RecyclePool<PhysicsRayResult>,\r\n        results: PhysicsRayResult[],\r\n    ): boolean {\r\n        if (!PhysXWorld._sweepCapsuleGeometry) {\r\n            PhysXWorld._sweepCapsuleGeometry = new PX.CapsuleGeometry(radius, height / 2);\r\n        }\r\n        PhysXWorld._sweepCapsuleGeometry.setRadius(radius);\r\n        PhysXWorld._sweepCapsuleGeometry.setHalfHeight(height / 2);\r\n        //add an extra 90 degree rotation to PxCapsuleGeometry whose axis is originally along the X axis\r\n        const finalOrientation = CC_QUAT_0;\r\n        Quat.fromEuler(finalOrientation, 0, 0, 90);\r\n        Quat.multiply(finalOrientation, orientation, finalOrientation);\r\n        return sweepAll(this, worldRay, PhysXWorld._sweepCapsuleGeometry, finalOrientation, options, pool, results);\r\n    }\r\n\r\n    sweepCapsuleClosest (\r\n        worldRay: geometry.Ray,\r\n        radius: number,\r\n        height: number,\r\n        orientation: IQuatLike,\r\n        options: IRaycastOptions,\r\n        result: PhysicsRayResult,\r\n    ): boolean {\r\n        if (!PhysXWorld._sweepCapsuleGeometry) {\r\n            PhysXWorld._sweepCapsuleGeometry = new PX.CapsuleGeometry(radius, height / 2);\r\n        }\r\n        PhysXWorld._sweepCapsuleGeometry.setRadius(radius);\r\n        PhysXWorld._sweepCapsuleGeometry.setHalfHeight(height / 2);\r\n        //add an extra 90 degree rotation to PxCapsuleGeometry whose axis is originally along the X axis\r\n        const finalOrientation = CC_QUAT_0;\r\n        Quat.fromEuler(finalOrientation, 0, 0, 90);\r\n        Quat.multiply(finalOrientation, orientation, finalOrientation);\r\n        return sweepClosest(this, worldRay, PhysXWorld._sweepCapsuleGeometry, finalOrientation, options, result);\r\n    }\r\n\r\n    emitEvents (): void {\r\n        PhysXCallback.emitTriggerEvent();\r\n        PhysXCallback.emitCollisionEvent();\r\n        PhysXCallback.emitCCTCollisionEvent();\r\n        PhysXCallback.emitCCTTriggerEvent();\r\n    }\r\n}\r\n\r\n///\r\n/// Event Callback\r\n///\r\n\r\ninterface ITriggerEventItem {\r\n    a: PhysXShape,\r\n    b: PhysXShape,\r\n    times: number,\r\n}\r\n\r\ninterface ICollisionEventItem {\r\n    type: CollisionEventType,\r\n    a: PhysXShape,\r\n    b: PhysXShape,\r\n    contactCount: number,\r\n    buffer: any,\r\n    offset: number,\r\n}\r\n\r\ninterface ITriggerEventItemCCT {\r\n    a: PhysXShape,\r\n    b: PhysXCharacterController,\r\n    times: number,\r\n}\r\n\r\nconst triggerEventBeginDic = new TupleDictionary();\r\nconst triggerEventEndDic = new TupleDictionary();\r\nconst triggerEventsPool: ITriggerEventItem[] = [];\r\nconst contactEventDic = new TupleDictionary();\r\nconst contactEventsPool: ICollisionEventItem[] = [];\r\nconst contactsPool: [] = [];\r\nconst cctShapeEventDic = new TupleDictionary();\r\nconst emitHit = new CharacterControllerContact();\r\nconst cctTriggerEventBeginDic = new TupleDictionary();\r\nconst cctTriggerEventEndDic = new TupleDictionary();\r\nconst cctTriggerEventsPool: ITriggerEventItemCCT[] = [];\r\n\r\nconst PhysXCallback = {\r\n    eventCallback: {\r\n        onContactBegin: (a: any, b: any, c: any, d: any, o: number): void => {\r\n            const wpa = getWrapShape<PhysXShape>(a);\r\n            const wpb = getWrapShape<PhysXShape>(b);\r\n            PhysXCallback.onCollision('onCollisionEnter', wpa, wpb, c, d, o);\r\n        },\r\n        onContactEnd: (a: any, b: any, c: any, d: any, o: number): void => {\r\n            const wpa = getWrapShape<PhysXShape>(a);\r\n            const wpb = getWrapShape<PhysXShape>(b);\r\n            PhysXCallback.onCollision('onCollisionExit', wpa, wpb, c, d, o);\r\n        },\r\n        onContactPersist: (a: any, b: any, c: any, d: any, o: number): void => {\r\n            const wpa = getWrapShape<PhysXShape>(a);\r\n            const wpb = getWrapShape<PhysXShape>(b);\r\n            PhysXCallback.onCollision('onCollisionStay', wpa, wpb, c, d, o);\r\n        },\r\n        onTriggerBegin: (a: any, b: any): void => {\r\n            const wpa = getWrapShape<any>(a);\r\n            const wpb = getWrapShape<any>(b);\r\n            if (wpa instanceof PhysXShape && wpb instanceof PhysXShape) {\r\n                PhysXCallback.onTrigger('onTriggerEnter', wpa, wpb, true);\r\n            } else if (wpa instanceof PhysXShape && wpb instanceof PhysXCharacterController) {\r\n                PhysXCallback.onTriggerCCT('onControllerTriggerEnter', wpa, wpb, true);\r\n            } else if (wpa instanceof PhysXCharacterController && wpb instanceof PhysXShape) {\r\n                PhysXCallback.onTriggerCCT('onControllerTriggerEnter', wpb, wpa, true);\r\n            }\r\n        },\r\n        onTriggerEnd: (a: any, b: any): void => {\r\n            const wpa = getWrapShape<any>(a);\r\n            const wpb = getWrapShape<any>(b);\r\n            if (wpa instanceof PhysXShape && wpb instanceof PhysXShape) {\r\n                PhysXCallback.onTrigger('onTriggerExit', wpa, wpb, false);\r\n            } else if (wpa instanceof PhysXShape && wpb instanceof PhysXCharacterController) {\r\n                PhysXCallback.onTriggerCCT('onControllerTriggerExit', wpa, wpb, false);\r\n            } else if (wpa instanceof PhysXCharacterController && wpb instanceof PhysXShape) {\r\n                PhysXCallback.onTriggerCCT('onControllerTriggerExit', wpb, wpa, false);\r\n            }\r\n        },\r\n    },\r\n\r\n    // eNONE = 0,   //!< the query should ignore this shape\r\n    // eTOUCH = 1,  //!< a hit on the shape touches the intersection geometry of the query but does not block it\r\n    // eBLOCK = 2   //!< a hit on the shape blocks the query (does not block overlap queries)\r\n    queryCallback: {\r\n        preFilter (filterData: any, shape: any, _actor: any, _out: any): number {\r\n            const word3 = filterData.word3;\r\n            const shapeFlags = shape.getFlags();\r\n            if ((word3 & EFilterDataWord3.QUERY_CHECK_TRIGGER)\r\n                && (shapeFlags.isSet(PX.ShapeFlag.eTRIGGER_SHAPE))) {\r\n                return PX.QueryHitType.eNONE;\r\n            }\r\n            return word3 & EFilterDataWord3.QUERY_SINGLE_HIT ? PX.QueryHitType.eBLOCK : PX.QueryHitType.eTOUCH;\r\n        },\r\n        preFilterForByteDance (filterData: FilterData, shapeFlags: number, hitFlags: number): number {\r\n            const word3 = filterData.word3;\r\n            if ((word3 & EFilterDataWord3.QUERY_CHECK_TRIGGER)\r\n                && (shapeFlags & PX.ShapeFlag.eTRIGGER_SHAPE)) {\r\n                return PX.QueryHitType.eNONE;\r\n            }\r\n            return word3 & EFilterDataWord3.QUERY_SINGLE_HIT ? PX.QueryHitType.eBLOCK : PX.QueryHitType.eTOUCH;\r\n        },\r\n    },\r\n\r\n    onTrigger (type: TriggerEventType, wpa: PhysXShape, wpb: PhysXShape, isEnter: boolean): void {\r\n        if (wpa && wpb) {\r\n            if (wpa.collider.needTriggerEvent || wpb.collider.needTriggerEvent) {\r\n                let tE: ITriggerEventItem;\r\n                if (triggerEventsPool.length > 0) {\r\n                    tE = triggerEventsPool.pop() as ITriggerEventItem;\r\n                    tE.a = wpa; tE.b = wpb; tE.times = 0;\r\n                } else {\r\n                    tE = { a: wpa, b: wpb, times: 0 };\r\n                }\r\n                if (isEnter) {\r\n                    triggerEventBeginDic.set(wpa.id, wpb.id, tE);\r\n                } else {\r\n                    triggerEventEndDic.set(wpa.id, wpb.id, tE);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    onTriggerCCT (type: CharacterTriggerEventType, wpa: PhysXShape, cct: PhysXCharacterController, isEnter: boolean): void {\r\n        if (wpa && cct) {\r\n            if (wpa.collider.needTriggerEvent) {\r\n                let tE: ITriggerEventItemCCT;\r\n                if (cctTriggerEventsPool.length > 0) {\r\n                    tE = cctTriggerEventsPool.pop() as ITriggerEventItemCCT;\r\n                    tE.a = wpa; tE.b = cct; tE.times = 0;\r\n                } else {\r\n                    tE = { a: wpa, b: cct, times: 0 };\r\n                }\r\n                if (isEnter) {\r\n                    cctTriggerEventBeginDic.set(wpa.id, cct.id, tE);\r\n                } else {\r\n                    cctTriggerEventEndDic.set(wpa.id, cct.id, tE);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    emitTriggerEvent (): void {\r\n        let len = triggerEventEndDic.getLength();\r\n        while (len--) {\r\n            const key = triggerEventEndDic.getKeyByIndex(len);\r\n            const data = triggerEventEndDic.getDataByKey<ITriggerEventItem>(key);\r\n            triggerEventsPool.push(data);\r\n            const dataBeg = triggerEventBeginDic.getDataByKey<ITriggerEventItem>(key);\r\n            if (dataBeg) {\r\n                triggerEventsPool.push(dataBeg);\r\n                triggerEventBeginDic.set(data.a.id, data.b.id, null);\r\n            }\r\n            const colliderA = data.a.collider;\r\n            const colliderB = data.b.collider;\r\n            if (colliderA && colliderB) {\r\n                const type: TriggerEventType = 'onTriggerExit';\r\n                TriggerEventObject.type = type;\r\n                if (colliderA.needTriggerEvent) {\r\n                    TriggerEventObject.selfCollider = colliderA;\r\n                    TriggerEventObject.otherCollider = colliderB;\r\n                    colliderA.emit(type, TriggerEventObject);\r\n                }\r\n                if (colliderB.needTriggerEvent) {\r\n                    TriggerEventObject.selfCollider = colliderB;\r\n                    TriggerEventObject.otherCollider = colliderA;\r\n                    colliderB.emit(type, TriggerEventObject);\r\n                }\r\n            }\r\n        }\r\n        triggerEventEndDic.reset();\r\n\r\n        len = triggerEventBeginDic.getLength();\r\n        while (len--) {\r\n            const key = triggerEventBeginDic.getKeyByIndex(len);\r\n            const data = triggerEventBeginDic.getDataByKey<ITriggerEventItem>(key);\r\n            const colliderA = data.a.collider;\r\n            const colliderB = data.b.collider;\r\n            if (!colliderA || !colliderA.isValid || !colliderB || !colliderB.isValid) {\r\n                triggerEventsPool.push(data);\r\n                triggerEventBeginDic.set(data.a.id, data.b.id, null);\r\n            } else {\r\n                const type: TriggerEventType = data.times++ ? 'onTriggerStay' : 'onTriggerEnter';\r\n                TriggerEventObject.type = type;\r\n                if (colliderA.needTriggerEvent) {\r\n                    TriggerEventObject.selfCollider = colliderA;\r\n                    TriggerEventObject.otherCollider = colliderB;\r\n                    colliderA.emit(type, TriggerEventObject);\r\n                }\r\n                if (colliderB.needTriggerEvent) {\r\n                    TriggerEventObject.selfCollider = colliderB;\r\n                    TriggerEventObject.otherCollider = colliderA;\r\n                    colliderB.emit(type, TriggerEventObject);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @param c the contact count, how many the contacts in this pair\r\n     * @param d the contact buffer, the buffer stores all contacts\r\n     * @param o the data offset, the first contact offset in the contact buffer\r\n     */\r\n    onCollision (type: CollisionEventType, wpa: PhysXShape, wpb: PhysXShape, c: number, d: any, o: number): void {\r\n        if (wpa && wpb) {\r\n            if (wpa.collider.needCollisionEvent || wpb.collider.needCollisionEvent) {\r\n                if (contactEventsPool.length > 0) {\r\n                    const cE = contactEventsPool.pop() as ICollisionEventItem;\r\n                    cE.type = type; cE.a = wpa; cE.b = wpb; cE.contactCount = c; cE.buffer = d; cE.offset = o;\r\n                    contactEventDic.set(wpa.id, wpb.id, cE);\r\n                } else {\r\n                    const cE: ICollisionEventItem = { type, a: wpa, b: wpb, contactCount: c, buffer: d, offset: o };\r\n                    contactEventDic.set(wpa.id, wpb.id, cE);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    emitCollisionEvent (): void {\r\n        let len = contactEventDic.getLength();\r\n        while (len--) {\r\n            const key = contactEventDic.getKeyByIndex(len);\r\n            const data = contactEventDic.getDataByKey<ICollisionEventItem>(key);\r\n            contactEventsPool.push(data);\r\n            const colliderA = data.a.collider;\r\n            const colliderB = data.b.collider;\r\n            if (colliderA && colliderA.isValid && colliderB && colliderB.isValid) {\r\n                CollisionEventObject.type = data.type;\r\n                CollisionEventObject.impl = data.buffer;\r\n                const c = data.contactCount; const d = data.buffer; const o = data.offset;\r\n                const contacts = CollisionEventObject.contacts;\r\n                contactsPool.push.apply(contactsPool, contacts as any);\r\n                contacts.length = 0;\r\n                for (let i = 0; i < c; i++) {\r\n                    if (contactsPool.length > 0) {\r\n                        const c = contactsPool.pop() as unknown as PhysXContactEquation;\r\n                        c.colliderA = colliderA; c.colliderB = colliderB;\r\n                        c.impl = getContactDataOrByteOffset(i, o); contacts.push(c);\r\n                    } else {\r\n                        const c = new PhysXContactEquation(CollisionEventObject);\r\n                        c.colliderA = colliderA; c.colliderB = colliderB;\r\n                        c.impl = getContactDataOrByteOffset(i, o); contacts.push(c);\r\n                    }\r\n                }\r\n                if (colliderA.needCollisionEvent) {\r\n                    CollisionEventObject.selfCollider = colliderA;\r\n                    CollisionEventObject.otherCollider = colliderB;\r\n                    colliderA.emit(CollisionEventObject.type, CollisionEventObject);\r\n                }\r\n                if (colliderB.needCollisionEvent) {\r\n                    CollisionEventObject.selfCollider = colliderB;\r\n                    CollisionEventObject.otherCollider = colliderA;\r\n                    colliderB.emit(CollisionEventObject.type, CollisionEventObject);\r\n                }\r\n            }\r\n        }\r\n        contactEventDic.reset();\r\n    },\r\n    controllerHitReportCB: {\r\n        onShapeHit (hit: any): void { //PX.ControllerShapeHit\r\n            const cct = getWrapShape<PhysXCharacterController>(hit.getCurrentController());\r\n            const s = getWrapShape<PhysXShape>(hit.getTouchedShape());\r\n            let item = cctShapeEventDic.get<any>(hit.getCurrentController(), hit.getTouchedShape());\r\n            if (!item) {\r\n                const worldPos = new Vec3();\r\n                worldPos.set(hit.worldPos.x, hit.worldPos.y, hit.worldPos.z);\r\n                const worldNormal = new Vec3();\r\n                worldNormal.set(hit.worldNormal.x, hit.worldNormal.y, hit.worldNormal.z);\r\n                const motionDir = new Vec3();\r\n                motionDir.set(hit.dir.x, hit.dir.y, hit.dir.z);\r\n                const motionLength = hit.length;\r\n                item = cctShapeEventDic.set(\r\n                    hit.getCurrentController(),\r\n                    hit.getTouchedShape(),\r\n                    { PhysXCharacterController: cct, PhysXShape: s, worldPos, worldNormal, motionDir, motionLength },\r\n                );\r\n            }\r\n        },\r\n        onControllerHit (hit: any): void { //PX.ControllersHit\r\n        },\r\n    },\r\n    emitCCTCollisionEvent (): void {\r\n        let dicL = cctShapeEventDic.getLength();\r\n        while (dicL--) {\r\n            const key = cctShapeEventDic.getKeyByIndex(dicL);\r\n            const data = cctShapeEventDic.getDataByKey<any>(key);\r\n            const cct = data.PhysXCharacterController.characterController;\r\n            const collider = data.PhysXShape.collider;\r\n            if (cct && cct.isValid && collider && collider.isValid) {\r\n                emitHit.controller = cct;\r\n                emitHit.collider = collider;\r\n                emitHit.worldPosition.set(data.worldPos);\r\n                emitHit.worldNormal.set(data.worldNormal);\r\n                emitHit.motionDirection.set(data.motionDir);\r\n                emitHit.motionLength = data.motionLength;\r\n                cct.emit('onControllerColliderHit', emitHit);\r\n            }\r\n        }\r\n        cctShapeEventDic.reset();\r\n    },\r\n    emitCCTTriggerEvent (): void {\r\n        let len = cctTriggerEventEndDic.getLength();\r\n        while (len--) {\r\n            const key = cctTriggerEventEndDic.getKeyByIndex(len);\r\n            const data = cctTriggerEventEndDic.getDataByKey<ITriggerEventItemCCT>(key);\r\n            cctTriggerEventsPool.push(data);\r\n            const dataBeg = cctTriggerEventBeginDic.getDataByKey<ITriggerEventItemCCT>(key);\r\n            if (dataBeg) {\r\n                cctTriggerEventsPool.push(dataBeg);\r\n                cctTriggerEventBeginDic.set(data.a.id, data.b.id, null);\r\n            }\r\n            const collider = data.a.collider;\r\n            const characterController = data.b.characterController;\r\n            if (collider && characterController) {\r\n                const type: CharacterTriggerEventType = 'onControllerTriggerExit';\r\n                CharacterTriggerEventObject.type = type;\r\n                if (collider.needTriggerEvent) {\r\n                    CharacterTriggerEventObject.collider = collider;\r\n                    CharacterTriggerEventObject.characterController = characterController;\r\n                    collider.emit(type, CharacterTriggerEventObject);\r\n                }\r\n                if (characterController.needTriggerEvent) {\r\n                    CharacterTriggerEventObject.collider = collider;\r\n                    CharacterTriggerEventObject.characterController = characterController;\r\n                    characterController.emit(type, CharacterTriggerEventObject);\r\n                }\r\n            }\r\n        }\r\n        cctTriggerEventEndDic.reset();\r\n\r\n        len = cctTriggerEventBeginDic.getLength();\r\n        while (len--) {\r\n            const key = cctTriggerEventBeginDic.getKeyByIndex(len);\r\n            const data = cctTriggerEventBeginDic.getDataByKey<ITriggerEventItemCCT>(key);\r\n            const collider = data.a.collider;\r\n            const characterController = data.b.characterController;\r\n            if (!collider || !collider.isValid || !characterController || !characterController.isValid) {\r\n                cctTriggerEventsPool.push(data);\r\n                cctTriggerEventBeginDic.set(data.a.id, data.b.id, null);\r\n            } else {\r\n                const type: CharacterTriggerEventType = data.times++ ? 'onControllerTriggerStay' : 'onControllerTriggerEnter';\r\n                CharacterTriggerEventObject.type = type;\r\n                if (collider.needTriggerEvent) {\r\n                    CharacterTriggerEventObject.collider = collider;\r\n                    CharacterTriggerEventObject.characterController = characterController;\r\n                    collider.emit(type, CharacterTriggerEventObject);\r\n                }\r\n                if (characterController.needTriggerEvent) {\r\n                    CharacterTriggerEventObject.collider = collider;\r\n                    CharacterTriggerEventObject.characterController = characterController;\r\n                    characterController.emit(type, CharacterTriggerEventObject);\r\n                }\r\n            }\r\n        }\r\n    },\r\n};\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { IVec3Like, Vec3 } from '../../core';\r\nimport { ERigidBodyType, PhysicsSystem, RigidBody } from '../framework';\r\nimport { IRigidBody } from '../spec/i-rigid-body';\r\nimport { applyForce, applyImpulse, applyTorqueForce, PX, _trans } from './physx-adapter';\r\nimport { PhysXSharedBody } from './physx-shared-body';\r\nimport { PhysXWorld } from './physx-world';\r\n\r\nconst v3_0 = new Vec3();\r\n\r\n/** @mangle */\r\nexport class PhysXRigidBody implements IRigidBody {\r\n    get impl (): any { return this._sharedBody.impl; }\r\n\r\n    get isAwake (): boolean {\r\n        if (!this.isInScene || this.isStatic) return false;\r\n        return !this.impl.isSleeping();\r\n    }\r\n\r\n    get isSleeping (): boolean {\r\n        if (!this.isInScene || this.isStatic) return true;\r\n        return this.impl.isSleeping();\r\n    }\r\n\r\n    get isEnabled (): boolean { return this._isEnabled; }\r\n    get rigidBody (): RigidBody { return this._rigidBody; }\r\n    get sharedBody (): PhysXSharedBody { return this._sharedBody; }\r\n    get isStatic (): boolean { return !this.impl || this._sharedBody.isStatic; }\r\n    get isStaticOrKinematic (): boolean { return !this.impl || this._sharedBody.isStatic || this._sharedBody.isKinematic; }\r\n    get isInScene (): boolean { return this._sharedBody.isInScene; }\r\n\r\n    isSleepy = false;\r\n    private _isEnabled = false;\r\n    private _isUsingCCD = false;\r\n    private _rigidBody!: RigidBody;\r\n    private _sharedBody!: PhysXSharedBody;\r\n\r\n    initialize (v: RigidBody): void {\r\n        this._rigidBody = v;\r\n        this._sharedBody = (PhysicsSystem.instance.physicsWorld as PhysXWorld).getSharedBody(v.node, this);\r\n        this._sharedBody.reference = true;\r\n        this.setSleepThreshold(PhysicsSystem.instance.sleepThreshold);\r\n    }\r\n\r\n    onEnable (): void {\r\n        this._isEnabled = true;\r\n        this.setMass(this._rigidBody.mass);\r\n        this.setType(this._rigidBody.type);\r\n        this.setAllowSleep(this._rigidBody.allowSleep);\r\n        this.setLinearDamping(this._rigidBody.linearDamping);\r\n        this.setAngularDamping(this._rigidBody.angularDamping);\r\n        this.setLinearFactor(this._rigidBody.linearFactor);\r\n        this.setAngularFactor(this._rigidBody.angularFactor);\r\n        this.useGravity(this._rigidBody.useGravity);\r\n        this._sharedBody.enabled = true;\r\n    }\r\n\r\n    onDisable (): void {\r\n        this._isEnabled = false;\r\n        this._sharedBody.enabled = false;\r\n    }\r\n\r\n    onDestroy (): void {\r\n        this._sharedBody.reference = false;\r\n        (this._rigidBody as any) = null;\r\n        (this._sharedBody as any) = null;\r\n    }\r\n\r\n    setType (v: ERigidBodyType): void {\r\n        this._sharedBody.setType(v);\r\n    }\r\n\r\n    setMass (v: number): void {\r\n        if (this.isStatic) return;\r\n        this._sharedBody.setMass(v);\r\n    }\r\n\r\n    setLinearDamping (v: number): void {\r\n        this._sharedBody.setLinearDamping(v);\r\n    }\r\n\r\n    setAngularDamping (v: number): void {\r\n        this._sharedBody.setAngularDamping(v);\r\n    }\r\n\r\n    useGravity (v: boolean): void {\r\n        if (this.isStatic) return;\r\n        this.impl.setActorFlag(PX.ActorFlag.eDISABLE_GRAVITY, !v);\r\n    }\r\n\r\n    useCCD (v: boolean): void {\r\n        if (this.isStatic) return;\r\n        this.impl.setRigidBodyFlag(PX.RigidBodyFlag.eENABLE_CCD, v);\r\n        this._isUsingCCD = v;\r\n    }\r\n\r\n    isUsingCCD (): boolean { return this._isUsingCCD; }\r\n\r\n    setLinearFactor (v: IVec3Like): void {\r\n        if (this.isStatic) return;\r\n        this.impl.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_LINEAR_X, !v.x);\r\n        this.impl.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_LINEAR_Y, !v.y);\r\n        this.impl.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_LINEAR_Z, !v.z);\r\n    }\r\n\r\n    setAngularFactor (v: IVec3Like): void {\r\n        if (this.isStatic) return;\r\n        this.impl.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_ANGULAR_X, !v.x);\r\n        this.impl.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_ANGULAR_Y, !v.y);\r\n        this.impl.setRigidDynamicLockFlag(PX.RigidDynamicLockFlag.eLOCK_ANGULAR_Z, !v.z);\r\n    }\r\n\r\n    setAllowSleep (v: boolean): void {\r\n        if (this.isStaticOrKinematic) return;\r\n        const wc = v ? 0.0001 : 0xffffffff;\r\n        this.impl.setWakeCounter(wc);\r\n    }\r\n\r\n    wakeUp (): void {\r\n        if (!this.isInScene || this.isStatic) return;\r\n        this.impl.wakeUp();\r\n    }\r\n\r\n    sleep (): void {\r\n        if (!this.isInScene || this.isStatic) return;\r\n        this.impl.putToSleep();\r\n    }\r\n\r\n    clearState (): void {\r\n        if (!this.isInScene || this.isStatic) return;\r\n        this.clearForces();\r\n        this.clearVelocity();\r\n    }\r\n\r\n    clearForces (): void {\r\n        if (!this.isInScene || this.isStatic) return;\r\n        this._sharedBody.clearForces();\r\n    }\r\n\r\n    clearVelocity (): void {\r\n        if (this.isStatic) return;\r\n        this._sharedBody.clearVelocity();\r\n    }\r\n\r\n    setSleepThreshold (v: number): void {\r\n        if (this.isStatic) return;\r\n        //(approximated) mass-normalized kinetic energy\r\n        const ke = 0.5 * v * v;\r\n        this.impl.setSleepThreshold(ke);\r\n    }\r\n\r\n    getSleepThreshold (): number {\r\n        if (this.isStatic) return 0;\r\n        const ke = this.impl.getSleepThreshold();\r\n        const v = Math.sqrt(2 * ke);\r\n        return v;\r\n    }\r\n\r\n    getLinearVelocity (out: IVec3Like): void {\r\n        if (this.isStatic) return;\r\n        Vec3.copy(out, this.impl.getLinearVelocity());\r\n    }\r\n\r\n    setLinearVelocity (value: IVec3Like): void {\r\n        if (this.isStaticOrKinematic) return;\r\n        this.impl.setLinearVelocity(value, true);\r\n    }\r\n\r\n    getAngularVelocity (out: IVec3Like): void {\r\n        if (this.isStatic) return;\r\n        Vec3.copy(out, this.impl.getAngularVelocity());\r\n    }\r\n\r\n    setAngularVelocity (value: IVec3Like): void {\r\n        if (this.isStaticOrKinematic) return;\r\n        this.impl.setAngularVelocity(value, true);\r\n    }\r\n\r\n    applyForce (force: IVec3Like, relativePoint?: IVec3Like): void {\r\n        if (!this.isInScene || this.isStaticOrKinematic) return;\r\n        this._sharedBody.syncSceneToPhysics();\r\n        const rp = relativePoint || Vec3.ZERO;\r\n        applyForce(true, this.impl, force, rp);\r\n    }\r\n\r\n    applyLocalForce (force: IVec3Like, relativePoint?: IVec3Like): void {\r\n        if (!this.isInScene || this.isStaticOrKinematic) return;\r\n        this._sharedBody.syncSceneToPhysics();\r\n        const rp = relativePoint || Vec3.ZERO;\r\n        applyForce(false, this.impl, force, rp);\r\n    }\r\n\r\n    applyImpulse (force: IVec3Like, relativePoint?: IVec3Like): void {\r\n        if (!this.isInScene || this.isStaticOrKinematic) return;\r\n        this._sharedBody.syncSceneToPhysics();\r\n        const rp = relativePoint || Vec3.ZERO;\r\n        applyImpulse(true, this.impl, force, rp);\r\n    }\r\n\r\n    applyLocalImpulse (force: IVec3Like, relativePoint?: IVec3Like): void {\r\n        if (!this.isInScene || this.isStaticOrKinematic) return;\r\n        this._sharedBody.syncSceneToPhysics();\r\n        const rp = relativePoint || Vec3.ZERO;\r\n        applyImpulse(false, this.impl, force, rp);\r\n    }\r\n\r\n    applyTorque (torque: IVec3Like): void {\r\n        if (!this.isInScene || this.isStaticOrKinematic) return;\r\n        applyTorqueForce(this.impl, torque);\r\n    }\r\n\r\n    applyLocalTorque (torque: IVec3Like): void {\r\n        if (!this.isInScene || this.isStaticOrKinematic) return;\r\n        this._sharedBody.syncSceneToPhysics();\r\n        Vec3.transformQuat(v3_0, torque, this._sharedBody.node.worldRotation);\r\n        applyTorqueForce(this.impl, v3_0);\r\n    }\r\n\r\n    setGroup (v: number): void {\r\n        this._sharedBody.setGroup(v);\r\n    }\r\n\r\n    getGroup (): number {\r\n        return this._sharedBody.getGroup();\r\n    }\r\n\r\n    addGroup (v: number): void {\r\n        this._sharedBody.addGroup(v);\r\n    }\r\n\r\n    removeGroup (v: number): void {\r\n        this._sharedBody.removeGroup(v);\r\n    }\r\n\r\n    setMask (v: number): void {\r\n        this._sharedBody.setMask(v);\r\n    }\r\n\r\n    getMask (): number {\r\n        return this._sharedBody.getMask();\r\n    }\r\n\r\n    addMask (v: number): void {\r\n        this._sharedBody.addMask(v);\r\n    }\r\n\r\n    removeMask (v: number): void {\r\n        this._sharedBody.removeMask(v);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { absMaxComponent } from '../../../core';\r\nimport { SphereCollider } from '../../framework';\r\nimport { ISphereShape } from '../../spec/i-physics-shape';\r\nimport { PX } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\n\r\n/** @mangle */\r\nexport class PhysXSphereShape extends PhysXShape implements ISphereShape {\r\n    static SPHERE_GEOMETRY: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.SPHERE);\r\n        if (!PhysXSphereShape.SPHERE_GEOMETRY) {\r\n            PhysXSphereShape.SPHERE_GEOMETRY = new PX.SphereGeometry(0.5);\r\n        }\r\n    }\r\n\r\n    updateRadius (): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    get collider (): SphereCollider {\r\n        return this._collider as SphereCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.updateGeometry();\r\n        const pxmat = this.getSharedMaterial(this.collider.sharedMaterial);\r\n        this._impl = PhysXInstance.physics.createShape(PhysXSphereShape.SPHERE_GEOMETRY, pxmat, true, this._flags);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n        this._impl.setGeometry(PhysXSphereShape.SPHERE_GEOMETRY);\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const co = this.collider;\r\n        const maxSp = Math.abs(absMaxComponent(this.collider.node.worldScale));\r\n        PhysXSphereShape.SPHERE_GEOMETRY.setRadius(Math.max(0.0001, co.radius * maxSp));\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BoxCollider } from '../../framework';\r\nimport { absolute, VEC3_0 } from '../../utils/util';\r\nimport { IBoxShape } from '../../spec/i-physics-shape';\r\nimport { PX } from '../physx-adapter';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\nimport { PhysXInstance } from '../physx-instance';\r\n\r\n/** @mangle */\r\nexport class PhysXBoxShape extends PhysXShape implements IBoxShape {\r\n    static BOX_GEOMETRY: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.BOX);\r\n        if (!PhysXBoxShape.BOX_GEOMETRY) {\r\n            VEC3_0.set(0.5, 0.5, 0.5);\r\n            PhysXBoxShape.BOX_GEOMETRY = new PX.BoxGeometry(VEC3_0);\r\n        }\r\n    }\r\n\r\n    updateSize (): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    get collider (): BoxCollider {\r\n        return this._collider as BoxCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.updateGeometry();\r\n        const pxmat = this.getSharedMaterial(this._collider.sharedMaterial);\r\n        this._impl = PhysXInstance.physics.createShape(PhysXBoxShape.BOX_GEOMETRY, pxmat, true, this._flags);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n        this._impl.setGeometry(PhysXBoxShape.BOX_GEOMETRY);\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const co = this.collider;\r\n        const ws = co.node.worldScale;\r\n        VEC3_0.set(co.size).multiplyScalar(0.5).multiply(ws);\r\n        PhysXBoxShape.BOX_GEOMETRY.setHalfExtents(absolute(VEC3_0));\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { absMax, Quat } from '../../../core';\r\nimport { CapsuleCollider, EAxisDirection } from '../../framework';\r\nimport { ICapsuleShape } from '../../spec/i-physics-shape';\r\nimport { PX } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\n\r\n/** @mangle */\r\nexport class PhysXCapsuleShape extends PhysXShape implements ICapsuleShape {\r\n    static CAPSULE_GEOMETRY: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.CAPSULE);\r\n        if (!PhysXCapsuleShape.CAPSULE_GEOMETRY) {\r\n            PhysXCapsuleShape.CAPSULE_GEOMETRY = new PX.CapsuleGeometry(0.5, 0.5);\r\n        }\r\n    }\r\n\r\n    setCylinderHeight (v: number): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    setDirection (v: number): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    setRadius (v: number): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    get collider (): CapsuleCollider {\r\n        return this._collider as CapsuleCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.updateGeometry();\r\n        const pxmat = this.getSharedMaterial(this._collider.sharedMaterial);\r\n        this._impl = PhysXInstance.physics.createShape(PhysXCapsuleShape.CAPSULE_GEOMETRY, pxmat, true, this._flags);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n        this._impl.setGeometry(PhysXCapsuleShape.CAPSULE_GEOMETRY);\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const co = this.collider;\r\n        const ws = co.node.worldScale;\r\n        const upAxis = co.direction;\r\n        let r = 0.5; let hf = 0.5;\r\n        if (upAxis === EAxisDirection.Y_AXIS) {\r\n            r = co.radius * Math.abs(absMax(ws.x, ws.z));\r\n            hf = co.cylinderHeight / 2 * Math.abs(ws.y);\r\n            Quat.fromEuler(this._rotation, 0, 0, 90);\r\n        } else if (upAxis === EAxisDirection.X_AXIS) {\r\n            r = co.radius * Math.abs(absMax(ws.y, ws.z));\r\n            hf = co.cylinderHeight / 2 * Math.abs(ws.x);\r\n            Quat.fromEuler(this._rotation, 0, 0, 0);\r\n        } else {\r\n            r = co.radius * Math.abs(absMax(ws.x, ws.y));\r\n            hf = co.cylinderHeight / 2 * Math.abs(ws.z);\r\n            Quat.fromEuler(this._rotation, 0, 90, 0);\r\n        }\r\n        PhysXCapsuleShape.CAPSULE_GEOMETRY.setRadius(Math.max(0.0001, r));\r\n        PhysXCapsuleShape.CAPSULE_GEOMETRY.setHalfHeight(Math.max(0.0001, hf));\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like, Quat, Vec3 } from '../../../core';\r\nimport { PlaneCollider } from '../../framework';\r\nimport { IPlaneShape } from '../../spec/i-physics-shape';\r\nimport { getTempTransform, PX, _trans } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\n\r\n/** @mangle */\r\nexport class PhysXPlaneShape extends PhysXShape implements IPlaneShape {\r\n    static PLANE_GEOMETRY: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.PLANE);\r\n        if (!PhysXPlaneShape.PLANE_GEOMETRY) {\r\n            PhysXPlaneShape.PLANE_GEOMETRY = new PX.PlaneGeometry();\r\n        }\r\n    }\r\n\r\n    setNormal (v: IVec3Like): void {\r\n        this.setCenter();\r\n    }\r\n\r\n    setConstant (v: number): void {\r\n        this.setCenter();\r\n    }\r\n\r\n    setCenter (): void {\r\n        const co = this.collider;\r\n        const pos = _trans.translation;\r\n        const rot = _trans.rotation;\r\n        Vec3.scaleAndAdd(pos, co.center, co.normal, co.constant);\r\n        Quat.rotationTo(rot, Vec3.UNIT_X, co.normal);\r\n        const trans = getTempTransform(pos, rot);\r\n        this._impl.setLocalPose(trans);\r\n    }\r\n\r\n    get collider (): PlaneCollider {\r\n        return this._collider as PlaneCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        const co = this.collider;\r\n        const pxmat = this.getSharedMaterial(co.sharedMaterial);\r\n        this._impl = PhysXInstance.physics.createShape(PhysXPlaneShape.PLANE_GEOMETRY, pxmat, true, this._flags);\r\n        this.setCenter();\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.setCenter();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like, Quat, Vec3 } from '../../../core';\r\n\r\nimport { Mesh } from '../../../3d/assets';\r\nimport { MeshCollider, PhysicsMaterial } from '../../framework';\r\nimport { ITrimeshShape } from '../../spec/i-physics-shape';\r\nimport { addReference, createConvexMesh, createMeshGeometryFlags, createTriangleMesh, PX, _trans, removeReference } from '../physx-adapter';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\nimport { PhysXInstance } from '../physx-instance';\r\n\r\n/** @mangle */\r\nexport class PhysXTrimeshShape extends PhysXShape implements ITrimeshShape {\r\n    geometry: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.MESH);\r\n    }\r\n\r\n    setMesh (v: Mesh | null): void {\r\n        if (v && v.renderingSubMeshes.length > 0) {\r\n            if (this._impl != null) {\r\n                this.removeFromBody();\r\n                removeReference(this, this._impl);\r\n                this._impl.release();\r\n                this._impl = null;\r\n            }\r\n\r\n            const physics = PhysXInstance.physics;\r\n            const collider = this.collider;\r\n            const pxmat = this.getSharedMaterial(collider.sharedMaterial);\r\n            const meshScale = PhysXShape.MESH_SCALE;\r\n            meshScale.setScale(Vec3.ONE);\r\n            meshScale.setRotation(Quat.IDENTITY);\r\n            const posBuf = v.renderingSubMeshes[0].geometricInfo.positions;\r\n            let indBuf = v.renderingSubMeshes[0].geometricInfo.indices;\r\n            if (indBuf instanceof Uint16Array) {\r\n                indBuf = new Uint32Array(indBuf);\r\n            }\r\n            if (indBuf instanceof Uint8Array) {\r\n                indBuf = new Uint32Array(indBuf);\r\n            }\r\n            if (collider.convex || indBuf === undefined) {\r\n                if (PX.MESH_CONVEX[v._uuid] == null) {\r\n                    const cooking = PhysXInstance.cooking;\r\n                    PX.MESH_CONVEX[v._uuid] = createConvexMesh(posBuf, cooking, physics);\r\n                }\r\n                const convexMesh = PX.MESH_CONVEX[v._uuid];\r\n                this.geometry = new PX.ConvexMeshGeometry(convexMesh, meshScale, createMeshGeometryFlags(0, true));\r\n            } else {\r\n                if (PX.MESH_STATIC[v._uuid] == null) {\r\n                    const cooking = PhysXInstance.cooking;\r\n                    PX.MESH_STATIC[v._uuid] = createTriangleMesh(posBuf, indBuf, cooking, physics);\r\n                }\r\n                const trimesh = PX.MESH_STATIC[v._uuid];\r\n                this.geometry = new PX.TriangleMeshGeometry(trimesh, meshScale, createMeshGeometryFlags(0, false));\r\n            }\r\n            this.updateGeometry();\r\n            this._impl = physics.createShape(this.geometry, pxmat, true, this._flags);\r\n            this.addToBody();\r\n            addReference(this, this._impl);//in case setMesh is called after initialization\r\n        }\r\n    }\r\n\r\n    get collider (): MeshCollider {\r\n        return this._collider as MeshCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.setMesh(this.collider.mesh);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const meshScale = PhysXShape.MESH_SCALE;\r\n        meshScale.setScale(this.collider.node.worldScale);\r\n        meshScale.setRotation(Quat.IDENTITY);\r\n        this.geometry.setScale(meshScale);\r\n    }\r\n\r\n    /* override */\r\n\r\n    setMaterial (v: PhysicsMaterial | null): void {\r\n        if (this._impl) super.setMaterial(v);\r\n    }\r\n\r\n    setCenter (v: IVec3Like): void {\r\n        if (this._impl) super.setCenter(v);\r\n    }\r\n\r\n    setAsTrigger (v: boolean): void {\r\n        if (this._impl) super.setAsTrigger(v);\r\n    }\r\n\r\n    setFilerData (v: any): void {\r\n        if (this._impl) super.setFilerData(v);\r\n    }\r\n\r\n    addToBody (): void {\r\n        if (this._impl) super.addToBody();\r\n    }\r\n\r\n    removeFromBody (): void {\r\n        if (this._impl) super.removeFromBody();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like } from '../../../core';\r\nimport { PhysicsMaterial, TerrainCollider } from '../../framework';\r\nimport { ITerrainAsset } from '../../spec/i-external';\r\nimport { ITerrainShape } from '../../spec/i-physics-shape';\r\nimport { createHeightField, createHeightFieldGeometry, getTempTransform, PX } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\n\r\n/** @mangle */\r\nexport class PhysXTerrainShape extends PhysXShape implements ITerrainShape {\r\n    static heightScale = 1 / 512;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.TERRAIN);\r\n    }\r\n\r\n    setTerrain (v: ITerrainAsset | null): void {\r\n        if (v && this._impl == null) {\r\n            const physics = PhysXInstance.physics;\r\n            const collider = this.collider;\r\n            if (PX.TERRAIN_STATIC[v._uuid] == null) {\r\n                const cooking = PhysXInstance.cooking;\r\n                PX.TERRAIN_STATIC[v._uuid] = createHeightField(v, PhysXTerrainShape.heightScale, cooking, physics);\r\n            }\r\n            const hf = PX.TERRAIN_STATIC[v._uuid];\r\n            const pxmat = this.getSharedMaterial(collider.sharedMaterial);\r\n            const geometry = createHeightFieldGeometry(hf, 0, PhysXTerrainShape.heightScale, v.tileSize, v.tileSize);\r\n            this._impl = physics.createShape(geometry, pxmat, true, this._flags);\r\n            this.updateByReAdd();\r\n        }\r\n    }\r\n\r\n    get collider (): TerrainCollider {\r\n        return this._collider as TerrainCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.setTerrain(this.collider.terrain);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    /* override */\r\n\r\n    setCenter (v: IVec3Like): void {\r\n        if (this._impl) this._impl.setLocalPose(getTempTransform(v, this._rotation));\r\n    }\r\n\r\n    setMaterial (v: PhysicsMaterial | null): void {\r\n        if (this._impl) super.setMaterial(v);\r\n    }\r\n\r\n    setAsTrigger (v: boolean): void {\r\n        if (this._impl) super.setAsTrigger(v);\r\n    }\r\n\r\n    setFilerData (v: any): void {\r\n        if (this._impl) super.setFilerData(v);\r\n    }\r\n\r\n    addToBody (): void {\r\n        if (this._impl) super.addToBody();\r\n    }\r\n\r\n    removeFromBody (): void {\r\n        if (this._impl) super.removeFromBody();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Quat, Vec3 } from '../../../core';\r\nimport cylinder from '../../../primitive/cylinder';\r\nimport { CylinderCollider, EAxisDirection } from '../../framework';\r\nimport { ICylinderShape } from '../../spec/i-physics-shape';\r\nimport { createConvexMesh, createMeshGeometryFlags, PX, _trans } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\n\r\n/** @mangle */\r\nexport class PhysXCylinderShape extends PhysXShape implements ICylinderShape {\r\n    static CONVEX_MESH: any;\r\n    geometry: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.CYLINDER);\r\n    }\r\n\r\n    setRadius (v: number): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    setHeight (v: number): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    setDirection (v: number): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    get collider (): CylinderCollider {\r\n        return this._collider as CylinderCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        const collider = this.collider;\r\n        const physics = PhysXInstance.physics;\r\n        if (!PhysXCylinderShape.CONVEX_MESH) {\r\n            const cooking = PhysXInstance.cooking;\r\n            const primitive = cylinder(0.5, 0.5, 2, { radialSegments: 32, heightSegments: 1 });\r\n            PhysXCylinderShape.CONVEX_MESH = createConvexMesh(primitive.positions, cooking, physics);\r\n        }\r\n        const meshScale = PhysXShape.MESH_SCALE;\r\n        meshScale.setScale(Vec3.ONE);\r\n        meshScale.setRotation(Quat.IDENTITY);\r\n        const convexMesh = PhysXCylinderShape.CONVEX_MESH;\r\n        const pxmat = this.getSharedMaterial(collider.sharedMaterial);\r\n        this.geometry = new PX.ConvexMeshGeometry(convexMesh, meshScale, createMeshGeometryFlags(0, true));\r\n        this.updateGeometry();\r\n        this._impl = physics.createShape(this.geometry, pxmat, true, this._flags);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const collider = this.collider;\r\n        const r = collider.radius;\r\n        const h = collider.height;\r\n        const a = collider.direction;\r\n        const scale = _trans.translation;\r\n        Vec3.copy(scale, collider.node.worldScale);\r\n        scale.y *= Math.max(0.0001, h / 2);\r\n        const radius = Math.max(0.0001, r / 0.5);\r\n        const xzMaxNorm = Math.max(scale.x, scale.z);\r\n        scale.x = scale.z = xzMaxNorm * radius;\r\n        const quat = _trans.rotation;\r\n        switch (a) {\r\n        case EAxisDirection.X_AXIS:\r\n            Quat.fromEuler(quat, 0, 0, 90);\r\n            break;\r\n        case EAxisDirection.Y_AXIS:\r\n        default:\r\n            Quat.copy(quat, Quat.IDENTITY);\r\n            break;\r\n        case EAxisDirection.Z_AXIS:\r\n            Quat.fromEuler(quat, 90, 0, 0);\r\n            break;\r\n        }\r\n        const meshScale = PhysXShape.MESH_SCALE;\r\n        meshScale.setScale(scale);\r\n        meshScale.setRotation(quat);\r\n        this.geometry.setScale(meshScale);\r\n        Quat.copy(this._rotation, quat);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Quat, Vec3 } from '../../../core';\r\nimport cylinder from '../../../primitive/cylinder';\r\nimport { ConeCollider, EAxisDirection } from '../../framework';\r\nimport { IConeShape } from '../../spec/i-physics-shape';\r\nimport { createConvexMesh, createMeshGeometryFlags, PX, _trans } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { EPhysXShapeType, PhysXShape } from './physx-shape';\r\n\r\n/** @mangle */\r\nexport class PhysXConeShape extends PhysXShape implements IConeShape {\r\n    static CONVEX_MESH: any;\r\n    geometry: any;\r\n\r\n    constructor () {\r\n        super(EPhysXShapeType.CONE);\r\n    }\r\n\r\n    setRadius (v: number): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    setHeight (v: number): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    setDirection (v: number): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    get collider (): ConeCollider {\r\n        return this._collider as ConeCollider;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        const collider = this.collider;\r\n        const physics = PhysXInstance.physics;\r\n        if (!PhysXConeShape.CONVEX_MESH) {\r\n            const cooking = PhysXInstance.cooking;\r\n            const primitive = cylinder(0, 0.5, 1, { radialSegments: 32, heightSegments: 1 });\r\n            PhysXConeShape.CONVEX_MESH = createConvexMesh(primitive.positions, cooking, physics);\r\n        }\r\n        const meshScale = PhysXShape.MESH_SCALE;\r\n        meshScale.setScale(Vec3.ONE);\r\n        meshScale.setRotation(Quat.IDENTITY);\r\n        const convexMesh = PhysXConeShape.CONVEX_MESH;\r\n        const pxmat = this.getSharedMaterial(collider.sharedMaterial);\r\n        this.geometry = new PX.ConvexMeshGeometry(convexMesh, meshScale, createMeshGeometryFlags(0, true));\r\n        this.updateGeometry();\r\n        this._impl = physics.createShape(this.geometry, pxmat, true, this._flags);\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n        this.setCenter(this._collider.center);\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const collider = this.collider;\r\n        const r = collider.radius;\r\n        const h = collider.height;\r\n        const a = collider.direction;\r\n        const scale = _trans.translation;\r\n        Vec3.copy(scale, collider.node.worldScale);\r\n        scale.y *= Math.max(0.0001, h / 1);\r\n        const radius = Math.max(0.0001, r / 0.5);\r\n        const xzMaxNorm = Math.max(scale.x, scale.z);\r\n        scale.x = scale.z = xzMaxNorm * radius;\r\n        const quat = _trans.rotation;\r\n        switch (a) {\r\n        case EAxisDirection.X_AXIS:\r\n            Quat.fromEuler(quat, 0, 0, 90);\r\n            break;\r\n        case EAxisDirection.Y_AXIS:\r\n        default:\r\n            Quat.copy(quat, Quat.IDENTITY);\r\n            break;\r\n        case EAxisDirection.Z_AXIS:\r\n            Quat.fromEuler(quat, 90, 0, 0);\r\n            break;\r\n        }\r\n        const meshScale = PhysXShape.MESH_SCALE;\r\n        meshScale.setScale(scale);\r\n        meshScale.setRotation(quat);\r\n        this.geometry.setScale(meshScale);\r\n        Quat.copy(this._rotation, quat);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\nimport { Constraint, RigidBody } from '../../framework';\r\nimport { IBaseConstraint } from '../../spec/i-physics-constraint';\r\nimport { PX, setJointActors, _pxtrans } from '../physx-adapter';\r\nimport { PhysXRigidBody } from '../physx-rigid-body';\r\nimport { PhysXInstance } from '../physx-instance';\r\n\r\n/** @mangle */\r\nexport class PhysXJoint implements IBaseConstraint {\r\n    private static _tempActor: any;\r\n\r\n    static get tempActor (): any {\r\n        if (!this._tempActor) {\r\n            this._tempActor = PhysXInstance.physics.createRigidDynamic(_pxtrans);\r\n        }\r\n        return this._tempActor;\r\n    }\r\n\r\n    setConnectedBody (v: RigidBody | null): void {\r\n        if (this._connectedBody === v) return;\r\n\r\n        // // unregister old\r\n        const oldBody2 = this._connectedBody;\r\n        if (oldBody2) {\r\n            const oldSB2 = (oldBody2.body as PhysXRigidBody).sharedBody;\r\n            oldSB2.removeJoint(this, 1);\r\n        }\r\n\r\n        const sb = (this._rigidBody.body as PhysXRigidBody).sharedBody;\r\n        sb.removeJoint(this, 0);\r\n        sb.addJoint(this, 0); // add to inner body if this joint is not added to sb\r\n        if (v) {\r\n            const sb2 = (v.body as PhysXRigidBody).sharedBody;\r\n            setJointActors(this._impl, sb.impl, sb2.impl);\r\n            sb2.addJoint(this, 1); // add to new sb2\r\n        } else {\r\n            setJointActors(this._impl, sb.impl, null);\r\n        }\r\n\r\n        if (oldBody2) {\r\n            oldBody2.wakeUp(); // wake it up, or the old body will be sleep for a while\r\n        }\r\n\r\n        this._connectedBody = v;\r\n        this.updateScale0();\r\n        this.updateScale1();\r\n    }\r\n\r\n    setEnableCollision (v: boolean): void {\r\n        this._impl.setConstraintFlag(1 << 3, v);\r\n    }\r\n\r\n    get impl (): any { return this._impl; }\r\n    get constraint (): Constraint { return this._com; }\r\n\r\n    protected _impl!: any;\r\n    protected _com!: Constraint;\r\n    protected _rigidBody!: RigidBody;\r\n    protected _connectedBody: RigidBody | null = null;\r\n\r\n    initialize (v: Constraint): void {\r\n        this._com = v;\r\n        this._rigidBody = v.attachedBody!;\r\n        this._connectedBody = v.connectedBody;\r\n        this.onComponentSet();\r\n        this.setEnableCollision(this._com.enableCollision);\r\n        if (this._impl.$$) {\r\n            PX.IMPL_PTR[this._impl.$$.ptr] = this;\r\n        }\r\n    }\r\n\r\n    enableDebugVisualization (v: boolean): void {\r\n        if (this.impl) {\r\n            this.impl.setConstraintFlag(1 << 4, v);// PxConstraintFlag::eVISUALIZATION\r\n        }\r\n    }\r\n\r\n    // virtual\r\n    protected onComponentSet (): void { }\r\n\r\n    // virtual\r\n    updateScale0 (): void { }\r\n    updateScale1 (): void { }\r\n\r\n    onEnable (): void {\r\n        const sb = (this._rigidBody.body as PhysXRigidBody).sharedBody;\r\n        const connect = this._com.connectedBody;\r\n        sb.addJoint(this, 0);\r\n        if (connect) {\r\n            const sb2 = (connect.body as PhysXRigidBody).sharedBody;\r\n            setJointActors(this._impl, sb.impl, sb2.impl);\r\n            sb2.addJoint(this, 1);\r\n        } else {\r\n            setJointActors(this._impl, sb.impl, null);\r\n        }\r\n    }\r\n\r\n    onDisable (): void {\r\n        setJointActors(this._impl, PhysXJoint.tempActor, null);\r\n        const sb = (this._rigidBody.body as PhysXRigidBody).sharedBody;\r\n        sb.removeJoint(this, 0);\r\n        const connect = this.constraint.connectedBody;\r\n        if (connect) {\r\n            const sb2 = (connect.body as PhysXRigidBody).sharedBody;\r\n            sb2.removeJoint(this, 1);\r\n        }\r\n    }\r\n\r\n    onDestroy (): void {\r\n        if (this._impl.$$) {\r\n            PX.IMPL_PTR[this._impl.$$.ptr] = null;\r\n            delete PX.IMPL_PTR[this._impl.$$.ptr];\r\n        }\r\n        this._impl.release();\r\n        (this._com as any) = null;\r\n        (this._rigidBody as any) = null;\r\n        (this._connectedBody as any) = null;\r\n        this._impl = null;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, Quat, Mat4 } from '../../../core';\r\nimport { FixedConstraint } from '../../framework';\r\nimport { IFixedConstraint } from '../../spec/i-physics-constraint';\r\nimport { PX, _trans, getTempTransform, _pxtrans } from '../physx-adapter';\r\nimport { PhysXRigidBody } from '../physx-rigid-body';\r\nimport { PhysXJoint } from './physx-joint';\r\n\r\nconst v3_0 = new Vec3();\r\nconst quat_0 = new Quat();\r\nconst mat_0 = new Mat4();\r\n\r\n/** @mangle */\r\nexport class PhysXFixedJoint extends PhysXJoint implements IFixedConstraint {\r\n    setBreakForce (v: number): void {\r\n        this._breakForce = this.constraint.breakForce;\r\n        this._impl.setBreakForce(this._breakForce, this._breakTorque);\r\n    }\r\n\r\n    setBreakTorque (v: number): void {\r\n        this._breakTorque = this.constraint.breakTorque;\r\n        this._impl.setBreakForce(this._breakForce, this._breakTorque);\r\n    }\r\n\r\n    get constraint (): FixedConstraint {\r\n        return this._com as FixedConstraint;\r\n    }\r\n\r\n    private _breakForce = 0;\r\n    private _breakTorque = 0;\r\n\r\n    onComponentSet (): void {\r\n        this._impl = PX.createFixedConstraint(PhysXJoint.tempActor, _pxtrans, null, _pxtrans);\r\n        this.setBreakForce(this.constraint.breakForce);\r\n        this.setBreakTorque(this.constraint.breakTorque);\r\n        this.updateFrame();\r\n        this.enableDebugVisualization(true);\r\n    }\r\n\r\n    updateFrame (): void {\r\n        const bodyA = (this._rigidBody.body as PhysXRigidBody).sharedBody;\r\n        const cb = this.constraint.connectedBody;\r\n\r\n        Mat4.fromRT(mat_0, bodyA.node.worldRotation, bodyA.node.worldPosition);\r\n        Mat4.invert(mat_0, mat_0);\r\n        Mat4.getRotation(quat_0, mat_0);\r\n        Mat4.getTranslation(v3_0, mat_0);\r\n        this._impl.setLocalPose(0, getTempTransform(v3_0, quat_0));\r\n\r\n        if (cb) {\r\n            const bodyB = (cb.body as PhysXRigidBody).sharedBody;\r\n            Mat4.fromRT(mat_0, bodyB.node.worldRotation, bodyB.node.worldPosition);\r\n            Mat4.invert(mat_0, mat_0);\r\n            Mat4.getRotation(quat_0, mat_0);\r\n            Mat4.getTranslation(v3_0, mat_0);\r\n            this._impl.setLocalPose(1, getTempTransform(v3_0, quat_0));\r\n        } else {\r\n            this._impl.setLocalPose(1, getTempTransform(Vec3.ZERO, Quat.IDENTITY));\r\n        }\r\n    }\r\n\r\n    updateScale0 (): void {\r\n        this.updateFrame();\r\n    }\r\n\r\n    updateScale1 (): void {\r\n        this.updateFrame();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like, Quat, Vec3 } from '../../../core';\r\nimport { PointToPointConstraint } from '../../framework';\r\nimport { IPointToPointConstraint } from '../../spec/i-physics-constraint';\r\nimport { PX, _trans, getTempTransform, _pxtrans } from '../physx-adapter';\r\nimport { PhysXJoint } from './physx-joint';\r\n\r\n/** @mangle */\r\nexport class PhysXSphericalJoint extends PhysXJoint implements IPointToPointConstraint {\r\n    setPivotA (v: IVec3Like): void {\r\n        const cs = this.constraint;\r\n        const pos = _trans.translation;\r\n        const rot = _trans.rotation;\r\n        Vec3.multiply(pos, cs.node.worldScale, cs.pivotA);\r\n        Quat.copy(rot, Quat.IDENTITY);\r\n        this._impl.setLocalPose(0, getTempTransform(pos, rot));\r\n        if (!cs.connectedBody) this.setPivotB(cs.pivotB);\r\n    }\r\n\r\n    setPivotB (v: IVec3Like): void {\r\n        const cs = this.constraint;\r\n        const cb = cs.connectedBody;\r\n        const pos = _trans.translation;\r\n        const rot = _trans.rotation;\r\n        Vec3.copy(pos, cs.pivotB);\r\n        Quat.copy(rot, Quat.IDENTITY);\r\n        if (cb) {\r\n            Vec3.multiply(pos, cb.node.worldScale, cs.pivotB);\r\n        } else {\r\n            const node = cs.node;\r\n            Vec3.multiply(pos, node.worldScale, cs.pivotA);\r\n            Vec3.transformQuat(pos, pos, node.worldRotation);\r\n            Vec3.add(pos, pos, node.worldPosition);\r\n            Quat.multiply(rot, rot, node.worldRotation);\r\n        }\r\n        this._impl.setLocalPose(1, getTempTransform(pos, rot));\r\n    }\r\n\r\n    get constraint (): PointToPointConstraint {\r\n        return this._com as PointToPointConstraint;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this._impl = PX.createSphericalJoint(PhysXJoint.tempActor, _pxtrans, null, _pxtrans);\r\n        this.setPivotA(this.constraint.pivotA);\r\n        this.setPivotB(this.constraint.pivotB);\r\n        this.enableDebugVisualization(true);\r\n    }\r\n\r\n    updateScale0 (): void {\r\n        this.setPivotA(this.constraint.pivotA);\r\n    }\r\n\r\n    updateScale1 (): void {\r\n        this.setPivotB(this.constraint.pivotB);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IVec3Like, Mat4, Quat, Vec3 } from '../../../core';\r\nimport { HingeConstraint } from '../../framework';\r\nimport { IHingeConstraint } from '../../spec/i-physics-constraint';\r\nimport { getTempTransform, PX, _pxtrans, _trans } from '../physx-adapter';\r\nimport { PhysXJoint } from './physx-joint';\r\nimport { toRadian } from '../../../core/math';\r\n\r\nconst v3_0 = new Vec3();\r\nconst v3_1 = new Vec3();\r\nconst v3_2 = new Vec3();\r\nconst quat_0 = new Quat();\r\nconst mat_0 = new Mat4();\r\n\r\n/** @mangle */\r\nexport class PhysXRevoluteJoint extends PhysXJoint implements IHingeConstraint {\r\n    private _limitPair = new PX.PxJointAngularLimitPair(0, 0);\r\n\r\n    setLimitEnabled (v: boolean): void {\r\n        this._impl.setRevoluteJointFlag(PX.RevoluteJointFlags.eLIMIT_ENABLED, v);\r\n        if (v) {\r\n            this._impl.setLimit(this._limitPair);\r\n        }\r\n    }\r\n    setLowerLimit (min: number): void {\r\n        this._limitPair.lower = toRadian(this.constraint.lowerLimit);\r\n        if (this.constraint.limitEnabled) {\r\n            this._impl.setLimit(this._limitPair);\r\n        }\r\n    }\r\n    setUpperLimit (max: number): void {\r\n        this._limitPair.upper = toRadian(this.constraint.upperLimit);\r\n        if (this.constraint.limitEnabled) {\r\n            this._impl.setLimit(this._limitPair);\r\n        }\r\n    }\r\n    setMotorEnabled (v: boolean): void {\r\n        this._impl.setRevoluteJointFlag(PX.RevoluteJointFlags.eDRIVE_ENABLED, v);\r\n        if (v) {\r\n            this._impl.setDriveVelocity(this.constraint.motorVelocity / 60.0, true);\r\n            this._impl.setDriveForceLimit(this.constraint.motorForceLimit);\r\n        }\r\n    }\r\n    setMotorVelocity (v: number): void {\r\n        if (this.constraint.motorEnabled) {\r\n            this._impl.setDriveVelocity(v / 60.0, true);\r\n        }\r\n    }\r\n    setMotorForceLimit (v: number): void {\r\n        if (this.constraint.motorEnabled) {\r\n            this._impl.setDriveForceLimit(v);\r\n        }\r\n    }\r\n\r\n    setPivotA (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    setPivotB (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    setAxis (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    get constraint (): HingeConstraint {\r\n        return this._com as HingeConstraint;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this._impl = PX.createRevoluteJoint(PhysXJoint.tempActor, _pxtrans, null, _pxtrans);\r\n\r\n        this._limitPair.stiffness = 0;\r\n        this._limitPair.damping = 0;\r\n        this._limitPair.restitution = 0.4;\r\n        this._limitPair.contactDistance = 0.01;\r\n\r\n        this._impl.setConstraintFlag(6, true); // enable projection for both bodies\r\n        this._impl.setConstraintFlag(32, true); // enable force limit\r\n        this._impl.setProjectionAngularTolerance(0.2);\r\n        this._impl.setProjectionLinearTolerance(0.2);\r\n\r\n        this.setPivotA(this.constraint.pivotA);\r\n        this.setPivotB(this.constraint.pivotB);\r\n\r\n        this.setLimitEnabled(this.constraint.limitEnabled);\r\n        this.setMotorEnabled(this.constraint.motorEnabled);\r\n        this.setLowerLimit(this.constraint.lowerLimit);\r\n        this.setUpperLimit(this.constraint.upperLimit);\r\n        this.setMotorVelocity(this.constraint.motorVelocity);\r\n        this.setMotorForceLimit(this.constraint.motorForceLimit);\r\n        this.updateFrames();\r\n        this.enableDebugVisualization(true);\r\n    }\r\n\r\n    updateFrames (): void {\r\n        const cs = this.constraint;\r\n        const cb = cs.connectedBody;\r\n        const pos = _trans.translation;\r\n        const rot = _trans.rotation;\r\n        const node = cs.node;\r\n\r\n        Vec3.normalize(v3_0, cs.axis);\r\n        Vec3.cross(v3_2, v3_0, Vec3.UNIT_Y); // z\r\n        if (Vec3.len(v3_2) < 0.0001) {\r\n            Vec3.cross(v3_1, Vec3.UNIT_Z, v3_0); // y\r\n            Vec3.cross(v3_2, v3_0, v3_1); // z\r\n        } else {\r\n            Vec3.cross(v3_1, v3_2, v3_0); // y\r\n        }\r\n\r\n        Vec3.normalize(v3_1, v3_1);\r\n        Vec3.normalize(v3_2, v3_2);\r\n\r\n        mat_0.set(\r\n            v3_0.x,\r\n            v3_0.y,\r\n            v3_0.z,\r\n            0, // x\r\n            v3_1.x,\r\n            v3_1.y,\r\n            v3_1.z,\r\n            0, // y\r\n            v3_2.x,\r\n            v3_2.y,\r\n            v3_2.z,\r\n            0, // z\r\n            0,\r\n            0,\r\n            0,\r\n            1,\r\n        );\r\n\r\n        mat_0.getRotation(quat_0);\r\n        Vec3.multiply(pos, cs.node.worldScale, cs.pivotA);\r\n        this._impl.setLocalPose(0, getTempTransform(pos, quat_0));\r\n\r\n        if (cb) {\r\n            // orientation of axis in local space of body1\r\n            Quat.multiply(quat_0, node.worldRotation, quat_0);\r\n            Quat.invert(rot, cb.node.worldRotation);\r\n            Quat.multiply(quat_0, rot, quat_0);\r\n            // position in local space body0\r\n            Vec3.multiply(pos, cb.node.worldScale, cs.pivotB);\r\n        } else {\r\n            // orientation of axis in local space of body1\r\n            Quat.multiply(quat_0, node.worldRotation, quat_0);\r\n            // position in world space\r\n            Vec3.multiply(pos, node.worldScale, cs.pivotA);\r\n            Vec3.transformQuat(pos, pos, node.worldRotation);\r\n            Vec3.add(pos, pos, node.worldPosition);\r\n        }\r\n        this._impl.setLocalPose(1, getTempTransform(pos, quat_0));\r\n    }\r\n\r\n    updateScale0 (): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    updateScale1 (): void {\r\n        this.updateFrames();\r\n    }\r\n}\r\n","/*\r\nCopyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n\r\nimport { IVec3Like, Vec3, Quat, Mat4, toRadian } from '../../../core';\r\nimport { ConfigurableConstraint, EConstraintMode, EDriverMode } from '../../framework';\r\nimport { IConfigurableConstraint } from '../../spec/i-physics-constraint';\r\nimport { PX, _trans, getTempTransform, _pxtrans } from '../physx-adapter';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { PhysXJoint } from './physx-joint';\r\n\r\nconst CC_V3_0 = new Vec3();\r\nconst CC_V3_1 = new Vec3();\r\nconst CC_QUAT_0 = new Quat();\r\nconst CC_MAT4_0 = new Mat4();\r\n\r\nfunction getConstraintFlag (v: EConstraintMode): any {\r\n    switch (v) {\r\n    case EConstraintMode.FREE: return PX.D6Motion.eFREE;\r\n    case EConstraintMode.LIMITED: return PX.D6Motion.eLIMITED;\r\n    case EConstraintMode.LOCKED: return PX.D6Motion.eLOCKED;\r\n    default:\r\n        return PX.D6Motion.eFREE;\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nexport class PhysXConfigurableJoint extends PhysXJoint implements IConfigurableConstraint {\r\n    protected _setLinearLimit (): void {\r\n        const linearLimit = this.constraint.linearLimitSettings;\r\n\r\n        const limitPairX = PhysXConfigurableJoint._linearLimitX;\r\n        const limitPairY = PhysXConfigurableJoint._linearLimitY;\r\n        const limitPairZ = PhysXConfigurableJoint._linearLimitZ;\r\n\r\n        const setLimitPair = (limitPair: any): void => {\r\n            if (linearLimit.enableSoftConstraint) {\r\n                limitPair.stiffness = linearLimit.stiffness;\r\n                limitPair.damping = linearLimit.damping;\r\n            } else {\r\n                limitPair.stiffness = 0;\r\n                limitPair.damping = 0;\r\n            }\r\n            limitPair.bounceThreshold = 0.1;\r\n            limitPair.contactDistance = 0.1;\r\n            limitPair.restitution = linearLimit.restitution;\r\n        };\r\n\r\n        setLimitPair(limitPairX);\r\n        setLimitPair(limitPairY);\r\n        setLimitPair(limitPairZ);\r\n\r\n        const lower = linearLimit.lower;\r\n        const upper = linearLimit.upper;\r\n        if (linearLimit.xMotion === EConstraintMode.LIMITED) {\r\n            limitPairX.lower = lower.x;\r\n            limitPairX.upper = upper.x;\r\n            this._impl.setLinearLimit(PX.D6Axis.eX, limitPairX);\r\n        }\r\n\r\n        if (linearLimit.yMotion === EConstraintMode.LIMITED) {\r\n            limitPairY.lower = lower.y;\r\n            limitPairY.upper = upper.y;\r\n            this._impl.setLinearLimit(PX.D6Axis.eY, limitPairY);\r\n        }\r\n\r\n        if (linearLimit.zMotion === EConstraintMode.LIMITED) {\r\n            limitPairZ.lower = lower.z;\r\n            limitPairZ.upper = upper.z;\r\n            this._impl.setLinearLimit(PX.D6Axis.eZ, limitPairZ);\r\n        }\r\n    }\r\n\r\n    protected _setSwingLimit (): void {\r\n        const angularLimit = this.constraint.angularLimitSettings;\r\n        const limitCone = PhysXConfigurableJoint._swingLimit;\r\n\r\n        if (angularLimit.enableSoftConstraintSwing) {\r\n            limitCone.stiffness = angularLimit.swingStiffness;\r\n            limitCone.damping = angularLimit.swingDamping;\r\n        } else {\r\n            limitCone.stiffness = 0;\r\n            limitCone.springDamping = 0;\r\n        }\r\n\r\n        limitCone.yAngle = Math.PI;\r\n        limitCone.zAngle = Math.PI;\r\n        limitCone.contactDistance = 0.1;\r\n        limitCone.bounceThreshold = 0.1;\r\n        limitCone.restitution = angularLimit.swingRestitution;\r\n\r\n        if (angularLimit.swingMotion1 === EConstraintMode.LIMITED) {\r\n            limitCone.yAngle = toRadian(Math.max(angularLimit.swingExtent1, 1e-9)) * 0.5;\r\n            this._impl.setSwingLimit(limitCone);\r\n        }\r\n        if (angularLimit.swingMotion2 === EConstraintMode.LIMITED) {\r\n            limitCone.zAngle = toRadian(Math.max(angularLimit.swingExtent2, 1e-9)) * 0.5;\r\n            this._impl.setSwingLimit(limitCone);\r\n        }\r\n    }\r\n\r\n    protected _setTwistLimit (): void {\r\n        const angularLimit = this.constraint.angularLimitSettings;\r\n        const limitPair = PhysXConfigurableJoint._twistLimit;\r\n\r\n        if (angularLimit.enableSoftConstraintTwist) {\r\n            limitPair.stiffness = angularLimit.twistStiffness;\r\n            limitPair.damping = angularLimit.twistDamping;\r\n        } else {\r\n            limitPair.stiffness = 0;\r\n            limitPair.damping = 0;\r\n        }\r\n\r\n        limitPair.contactDistance = 0.1;\r\n        limitPair.bounceThreshold = 0.1;\r\n        limitPair.restitution = angularLimit.twistRestitution;\r\n\r\n        if (angularLimit.twistMotion === EConstraintMode.LIMITED) {\r\n            limitPair.lower = toRadian(Math.max(angularLimit.twistExtent, 1e-9)) * -0.5;\r\n            limitPair.upper = toRadian(Math.max(angularLimit.twistExtent, 1e-9)) * 0.5;\r\n            this._impl.setTwistLimit(limitPair);\r\n        }\r\n    }\r\n\r\n    protected _updateDrive (idx: number): void {\r\n        let axis = PX.D6Axis.eX;\r\n        let driveMode = EDriverMode.DISABLED;\r\n        const com = this.constraint;\r\n        const ld = com.linearDriverSettings;\r\n        const ad = com.angularDriverSettings;\r\n\r\n        const getSwingDriveMode =  (): EDriverMode => {\r\n            const ad = this.constraint.angularDriverSettings;\r\n            if (ad.swingDrive1 === EDriverMode.INDUCTION || ad.swingDrive2 === EDriverMode.INDUCTION) {\r\n                return EDriverMode.INDUCTION;\r\n            } else if (ad.swingDrive1 === EDriverMode.SERVO || ad.swingDrive2 === EDriverMode.SERVO) {\r\n                return EDriverMode.SERVO;\r\n            } else {\r\n                return EDriverMode.DISABLED;\r\n            }\r\n        };\r\n\r\n        switch (idx) {\r\n        case 0: axis = PX.D6Drive.eX; driveMode = ld.xDrive;  break;\r\n        case 1: axis = PX.D6Drive.eY; driveMode = ld.yDrive; break;\r\n        case 2: axis = PX.D6Drive.eZ; driveMode = ld.zDrive; break;\r\n        case 3: axis = PX.D6Drive.eTWIST; driveMode = ad.twistDrive; break;\r\n        case 4: axis = PX.D6Drive.eSWING; driveMode = getSwingDriveMode(); break;\r\n        case 5: axis = PX.D6Drive.eSWING; driveMode = getSwingDriveMode(); break;\r\n        default: break;\r\n        }\r\n        const drive = PhysXConfigurableJoint._drive[idx];\r\n        if (idx >= 0 && idx < 3) {\r\n            drive.forceLimit = com.linearDriverSettings.strength;\r\n        } else if (idx < 6) {\r\n            drive.forceLimit = com.angularDriverSettings.strength;\r\n        }\r\n        if (driveMode === EDriverMode.DISABLED) {\r\n            drive.forceLimit = 0;\r\n        } else if (driveMode === EDriverMode.SERVO) {\r\n            drive.damping = 0;\r\n            drive.stiffness = 1000;\r\n        } else if (driveMode === EDriverMode.INDUCTION) {\r\n            drive.damping = 1000;\r\n            drive.stiffness = 0;\r\n        }\r\n        this._impl.setDrive(axis, drive);\r\n    }\r\n\r\n    protected _updateDriveTarget (): void {\r\n        const linearTarget = this.constraint.linearDriverSettings.targetPosition;\r\n        const angularTarget = this.constraint.angularDriverSettings.targetOrientation;\r\n        const quat = Quat.fromEuler(CC_QUAT_0, angularTarget.x, angularTarget.y, angularTarget.z);\r\n        getTempTransform(linearTarget, quat);\r\n        this._impl.setDrivePosition(_pxtrans, true);\r\n    }\r\n\r\n    protected _updateDriveVelocity (): void {\r\n        const linearVelocity = this.constraint.linearDriverSettings.targetVelocity;\r\n        const angularVelocity = this.constraint.angularDriverSettings.targetVelocity;\r\n        const lv = Vec3.set(CC_V3_0, linearVelocity.x, linearVelocity.y, linearVelocity.z);\r\n        const av = Vec3.set(CC_V3_1, toRadian(-angularVelocity.x), toRadian(-angularVelocity.y), toRadian(-angularVelocity.z));\r\n        this._impl.setDriveVelocity(lv, av, true);\r\n    }\r\n\r\n    protected _updateDriveSettings (): void {\r\n        this._updateDrive(0);\r\n        this._updateDrive(1);\r\n        this._updateDrive(2);\r\n        this._updateDrive(3);\r\n        this._updateDrive(4);\r\n        this._updateDrive(5);\r\n        this._updateDriveTarget();\r\n        this._updateDriveVelocity();\r\n    }\r\n\r\n    setConstraintMode (idx: number, v: EConstraintMode): void {\r\n        let axis = PX.D6Axis.eX;\r\n        switch (idx) {\r\n        case 0: axis = PX.D6Axis.eX; break;\r\n        case 1: axis = PX.D6Axis.eY; break;\r\n        case 2: axis = PX.D6Axis.eZ; break;\r\n        case 3: axis = PX.D6Axis.eTWIST; break;\r\n        case 4: axis = PX.D6Axis.eSWING1; break;\r\n        case 5: axis = PX.D6Axis.eSWING2; break;\r\n        default: break;\r\n        }\r\n        const mode = getConstraintFlag(v);\r\n        this._impl.setMotion(axis, mode);\r\n    }\r\n\r\n    setLinearLimit (idx: number, lower: number, upper: number): void {\r\n        this._setLinearLimit();\r\n    }\r\n    setAngularExtent (twist: number, swing1: number, swing2: number): void {\r\n        this._setSwingLimit();\r\n        this._setTwistLimit();\r\n    }\r\n    setLinearRestitution (v: number): void {\r\n        this._setLinearLimit();\r\n    }\r\n    setSwingRestitution (v: number): void {\r\n        this._setSwingLimit();\r\n    }\r\n    setTwistRestitution (v: number): void {\r\n        this._setTwistLimit();\r\n    }\r\n\r\n    setLinearSoftConstraint (v: boolean): void {\r\n        this._setLinearLimit();\r\n    }\r\n    setLinearStiffness (v: number): void {\r\n        this._setLinearLimit();\r\n    }\r\n    setLinearDamping (v: number): void {\r\n        this._setLinearLimit();\r\n    }\r\n\r\n    setSwingSoftConstraint (v: boolean): void {\r\n        this._setSwingLimit();\r\n    }\r\n    setSwingStiffness (v: number): void {\r\n        this._setSwingLimit();\r\n    }\r\n    setSwingDamping (v: number): void {\r\n        this._setSwingLimit();\r\n    }\r\n\r\n    setTwistSoftConstraint (v: boolean): void {\r\n        this._setTwistLimit();\r\n    }\r\n    setTwistStiffness (v: number): void {\r\n        this._setTwistLimit();\r\n    }\r\n    setTwistDamping (v: number): void {\r\n        this._setTwistLimit();\r\n    }\r\n\r\n    setDriverMode (idx: number, v: EDriverMode): void {\r\n        this._updateDrive(idx);\r\n    }\r\n    setLinearMotorTarget (v: IVec3Like): void {\r\n        this._updateDriveTarget();\r\n    }\r\n    setLinearMotorVelocity (v: IVec3Like): void {\r\n        this._updateDriveVelocity();\r\n    }\r\n    setLinearMotorForceLimit (v: number): void {\r\n        this._updateDrive(0);\r\n        this._updateDrive(1);\r\n        this._updateDrive(2);\r\n    }\r\n    setAngularMotorTarget (v: IVec3Like): void {\r\n        this._updateDriveTarget();\r\n    }\r\n    setAngularMotorVelocity (v: IVec3Like): void {\r\n        this._updateDriveVelocity();\r\n    }\r\n    setAngularMotorForceLimit (v: number): void {\r\n        this._updateDrive(3);\r\n        this._updateDrive(4);\r\n        this._updateDrive(5);\r\n    }\r\n\r\n    setPivotA (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n    setPivotB (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n    setAutoPivotB (v: boolean): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    setAxis (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n    setSecondaryAxis (v: IVec3Like): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    setBreakForce (v: number): void {\r\n        const force = this.constraint.breakForce;\r\n        const torque = this.constraint.breakTorque;\r\n        this._impl.setBreakForce(force, torque);\r\n    }\r\n    setBreakTorque (v: number): void {\r\n        const force = this.constraint.breakForce;\r\n        const torque = this.constraint.breakTorque;\r\n        this._impl.setBreakForce(force, torque);\r\n    }\r\n\r\n    get constraint (): ConfigurableConstraint {\r\n        return this._com as ConfigurableConstraint;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        PhysXConfigurableJoint._initCache();\r\n\r\n        const cs = this.constraint;\r\n        this._impl = PX.createD6Joint(PhysXJoint.tempActor, _pxtrans, null, _pxtrans);\r\n        this.setBreakForce(cs.breakForce);\r\n        this.setBreakTorque(cs.breakTorque);\r\n\r\n        const ll = cs.linearLimitSettings;\r\n        const al = cs.angularLimitSettings;\r\n        this.setConstraintMode(0, ll.xMotion);\r\n        this.setConstraintMode(1, ll.yMotion);\r\n        this.setConstraintMode(2, ll.zMotion);\r\n        this.setConstraintMode(3, al.twistMotion);\r\n        this.setConstraintMode(4, al.swingMotion1);\r\n        this.setConstraintMode(5, al.swingMotion2);\r\n        this._setLinearLimit();\r\n        this._setSwingLimit();\r\n        this._setTwistLimit();\r\n\r\n        this._updateDriveSettings();\r\n\r\n        this.updateFrames();\r\n        this.enableDebugVisualization(true);\r\n    }\r\n\r\n    updateFrames (): void {\r\n        const cs = this.constraint;\r\n        const node = cs.node;\r\n        const pos = _trans.translation;\r\n        const rot = _trans.rotation;\r\n        const cb = cs.connectedBody;\r\n\r\n        const axisX = cs.axis;\r\n        const axisY = cs.secondaryAxis;\r\n        const axisZ = Vec3.cross(CC_V3_0, axisX, axisY);\r\n\r\n        const _rot = CC_QUAT_0;\r\n        const mat = Mat4.set(\r\n            CC_MAT4_0,\r\n            axisX.x,\r\n            axisX.y,\r\n            axisX.z,\r\n            0,\r\n            axisY.x,\r\n            axisY.y,\r\n            axisY.z,\r\n            0,\r\n            axisZ.x,\r\n            axisZ.y,\r\n            axisZ.z,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            1,\r\n        );\r\n        mat.getRotation(_rot);\r\n\r\n        Vec3.multiply(pos, cs.node.worldScale, cs.pivotA);\r\n        this._impl.setLocalPose(0, getTempTransform(pos, _rot));\r\n\r\n        if (cb) {\r\n            Quat.multiply(_rot, node.worldRotation, _rot);\r\n            Quat.invert(rot, cb.node.worldRotation);\r\n            Quat.multiply(_rot, rot, _rot);\r\n            if (cs.autoPivotB) {\r\n                Vec3.multiply(pos, cs.node.worldScale, cs.pivotA);\r\n                Vec3.transformQuat(pos, pos, node.worldRotation);\r\n                Vec3.add(pos, pos, node.worldPosition);\r\n                Vec3.subtract(pos, pos, cb.node.worldPosition);\r\n                Vec3.transformQuat(pos, pos, rot);\r\n            } else {\r\n                Vec3.multiply(pos, cb.node.worldScale, cs.pivotB);\r\n            }\r\n        } else {\r\n            Vec3.multiply(pos, node.worldScale, cs.pivotA);\r\n            Vec3.transformQuat(pos, pos, node.worldRotation);\r\n            Vec3.add(pos, pos, node.worldPosition);\r\n            Quat.multiply(_rot, node.worldRotation, _rot);\r\n        }\r\n        this._impl.setLocalPose(1, getTempTransform(pos, _rot));\r\n    }\r\n\r\n    updateScale0 (): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    updateScale1 (): void {\r\n        this.updateFrames();\r\n    }\r\n\r\n    private static _jointToleranceScale: any = null;\r\n    private static _linearLimitX: any = null;\r\n    private static _linearLimitY: any = null;\r\n    private static _linearLimitZ: any = null;\r\n    private static _twistLimit: any = null;\r\n    private static _swingLimit: any = null;\r\n    private static _drive_x: any = null;\r\n    private static _drive_y: any = null;\r\n    private static _drive_z: any = null;\r\n    private static _drive_twist: any =  null;\r\n    private static _drive_swing1: any = null;\r\n    private static _drive_swing2: any = null;\r\n    private static _drive: any[] = [];\r\n    private static _initCache (): void {\r\n        if (!PhysXConfigurableJoint._jointToleranceScale) {\r\n            PhysXConfigurableJoint._jointToleranceScale = PhysXInstance.physics.getTolerancesScale();\r\n            PhysXConfigurableJoint._linearLimitX = new PX.PxJointLinearLimitPair(PhysXConfigurableJoint._jointToleranceScale, 0, 0);\r\n            PhysXConfigurableJoint._linearLimitY = new PX.PxJointLinearLimitPair(PhysXConfigurableJoint._jointToleranceScale, 0, 0);\r\n            PhysXConfigurableJoint._linearLimitZ = new PX.PxJointLinearLimitPair(PhysXConfigurableJoint._jointToleranceScale, 0, 0);\r\n            PhysXConfigurableJoint._twistLimit =   new PX.PxJointAngularLimitPair(0, 0);\r\n            PhysXConfigurableJoint._swingLimit =   new PX.PxJointLimitCone(1.5, 1.5);\r\n            PhysXConfigurableJoint._drive_x =  new PX.D6JointDrive();\r\n            PhysXConfigurableJoint._drive_y = new PX.D6JointDrive();\r\n            PhysXConfigurableJoint._drive_z = new PX.D6JointDrive();\r\n            PhysXConfigurableJoint._drive_twist = new PX.D6JointDrive();\r\n            PhysXConfigurableJoint._drive_swing1 = new PX.D6JointDrive();\r\n            PhysXConfigurableJoint._drive_swing2 = new PX.D6JointDrive();\r\n            PhysXConfigurableJoint._drive = [\r\n                PhysXConfigurableJoint._drive_x,\r\n                PhysXConfigurableJoint._drive_y,\r\n                PhysXConfigurableJoint._drive_z,\r\n                PhysXConfigurableJoint._drive_twist,\r\n                PhysXConfigurableJoint._drive_swing1,\r\n                PhysXConfigurableJoint._drive_swing2,\r\n            ];\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3 } from '../../../core';\r\nimport { PhysicsSystem } from '../../framework';\r\nimport { BoxCharacterController } from '../../framework/components/character-controllers/box-character-controller';\r\nimport { IBoxCharacterController } from '../../spec/i-character-controller';\r\nimport { PX, _trans } from '../physx-adapter';\r\nimport { PhysXCharacterController } from './physx-character-controller';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { PhysXWorld } from '../physx-world';\r\nimport { degreesToRadians } from '../../../core/utils/misc';\r\n\r\nconst v3_0 = new Vec3(0, 0, 0);\r\nconst upDir = new Vec3(0, 1, 0);\r\n\r\n/** @mangle */\r\nexport class PhysXBoxCharacterController extends PhysXCharacterController implements IBoxCharacterController {\r\n    get component (): BoxCharacterController {\r\n        return this._comp as BoxCharacterController;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.create();\r\n    }\r\n\r\n    create (): void {\r\n        super.release();\r\n\r\n        this.component.node.getWorldPosition(v3_0);\r\n        v3_0.add(this.scaledCenter);\r\n        const pxMtl = PhysXInstance.physics.createMaterial(0.5, 0.5, 0.5);//temp\r\n        const physxWorld = (PhysicsSystem.instance.physicsWorld as PhysXWorld);\r\n\r\n        const controllerDesc = new PX.PxBoxControllerDesc();\r\n        controllerDesc.halfHeight = this.component.halfHeight;\r\n        controllerDesc.halfSideExtent = this.component.halfSideExtent;\r\n        controllerDesc.halfForwardExtent = this.component.halfForwardExtent;\r\n        controllerDesc.density = 10.0;\r\n        controllerDesc.scaleCoeff = 0.8;\r\n        controllerDesc.volumeGrowth = 1.5;\r\n        controllerDesc.contactOffset = this.component.skinWidth;\r\n        controllerDesc.stepOffset = this.component.stepOffset;\r\n        controllerDesc.slopeLimit = Math.cos(degreesToRadians(this.component.slopeLimit));\r\n        controllerDesc.upDirection = upDir;\r\n        controllerDesc.position = { x: v3_0.x, y: v3_0.y, z: v3_0.z };//PxExtendedVec3\r\n        controllerDesc.setMaterial(pxMtl);\r\n        controllerDesc.setReportCallback(PX.PxUserControllerHitReport.implement(physxWorld.callback.controllerHitReportCB));\r\n        this._impl = PX.createBoxCharacterController(physxWorld.controllerManager, controllerDesc);\r\n\r\n        if (this._impl.$$) {\r\n            PX.IMPL_PTR[this._impl.$$.ptr] = this;\r\n            const shapePtr = this._impl.getShape().$$.ptr;\r\n            PX.IMPL_PTR[shapePtr] = this;\r\n        }\r\n\r\n        this.updateScale();\r\n    }\r\n\r\n    setHalfHeight (value: number): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    setHalfSideExtent (value: number): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    setHalfForwardExtent (value: number): void {\r\n        this.updateScale();\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const ws = this.component.node.worldScale;\r\n        this._impl.setHalfSideExtent(this.component.halfSideExtent * ws.x);\r\n        this._impl.setHalfHeight(this.component.halfHeight * ws.y);\r\n        this._impl.setHalfForwardExtent(this.component.halfForwardExtent * ws.z);\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Vec3, absMax } from '../../../core';\r\nimport { PhysicsSystem } from '../../framework';\r\nimport { CapsuleCharacterController } from '../../framework/components/character-controllers/capsule-character-controller';\r\nimport { ICapsuleCharacterController } from '../../spec/i-character-controller';\r\nimport {  PX, _trans } from '../physx-adapter';\r\nimport { PhysXCharacterController } from './physx-character-controller';\r\nimport { PhysXInstance } from '../physx-instance';\r\nimport { PhysXWorld } from '../physx-world';\r\nimport { degreesToRadians } from '../../../core/utils/misc';\r\n\r\nconst v3_0 = new Vec3(0, 0, 0);\r\nconst upDir = new Vec3(0, 1, 0);//temp\r\n\r\n/** @mangle */\r\nexport class PhysXCapsuleCharacterController extends PhysXCharacterController implements ICapsuleCharacterController {\r\n    get component (): CapsuleCharacterController {\r\n        return this._comp as CapsuleCharacterController;\r\n    }\r\n\r\n    onComponentSet (): void {\r\n        this.create();\r\n    }\r\n\r\n    create (): void {\r\n        super.release();\r\n\r\n        this.component.node.getWorldPosition(v3_0);\r\n        v3_0.add(this.scaledCenter);\r\n\r\n        const pxMtl = PhysXInstance.physics.createMaterial(0.5, 0.5, 0.5);//temp\r\n        const physxWorld = (PhysicsSystem.instance.physicsWorld as PhysXWorld);\r\n\r\n        const controllerDesc = new PX.PxCapsuleControllerDesc();\r\n        controllerDesc.radius = this.component.radius;\r\n        controllerDesc.height = this.component.height;\r\n        controllerDesc.climbingMode = PX.PxCapsuleClimbingMode.eCONSTRAINED;\r\n        controllerDesc.density = 10.0;\r\n        controllerDesc.scaleCoeff = 0.8;\r\n        controllerDesc.volumeGrowth = 1.5;\r\n        controllerDesc.contactOffset = this.component.skinWidth;\r\n        controllerDesc.stepOffset = this.component.stepOffset;\r\n        controllerDesc.slopeLimit = Math.cos(degreesToRadians(this.component.slopeLimit));\r\n        controllerDesc.upDirection = upDir;\r\n        controllerDesc.position = { x: v3_0.x, y: v3_0.y, z: v3_0.z };//PxExtendedVec3\r\n        controllerDesc.setMaterial(pxMtl);\r\n        controllerDesc.setReportCallback(PX.PxUserControllerHitReport.implement(physxWorld.callback.controllerHitReportCB));\r\n        this._impl = PX.createCapsuleCharacterController(physxWorld.controllerManager, controllerDesc);\r\n\r\n        if (this._impl.$$) {\r\n            PX.IMPL_PTR[this._impl.$$.ptr] = this;\r\n            const shapePtr = this._impl.getShape().$$.ptr;\r\n            PX.IMPL_PTR[shapePtr] = this;\r\n        }\r\n\r\n        this.updateScale();\r\n    }\r\n\r\n    setRadius (value: number): void {\r\n        if (!this._impl) return;\r\n        this.updateScale();\r\n    }\r\n\r\n    setHeight (value: number): void {\r\n        if (!this._impl) return;\r\n        this.updateScale();\r\n    }\r\n\r\n    updateScale (): void {\r\n        this.updateGeometry();\r\n    }\r\n\r\n    updateGeometry (): void {\r\n        const ws = this.component.node.worldScale;\r\n        const r = this.component.radius * Math.abs(absMax(ws.x, ws.z));\r\n        const h = this.component.height * Math.abs(ws.y);\r\n        this._impl.setRadius(Math.max(0.0001, r));\r\n        this._impl.setHeight(Math.max(0.0001, h));\r\n    }\r\n}\r\n"],"names":["Promise","resolve","EFilterDataWord3","PxHitFlag","PxQueryFlag","PxPairFlag","PxContactPairFlag","PxTriggerPairFlag","PhysXInstance","foundation","physics","cooking","pvd","queryfilterData","singleResult","mutipleResults","simulationCB","queryFilterCB","mutipleResultSize","singleSweepResult","mutipleSweepResults","ePOSITION","eNORMAL","eFACE_INDEX","eMESH_MULTIPLE","eMESH_BOTH_SIDES","eASSUME_NO_INITIAL_OVERLAP","ePRECISE_SWEEP","PX","globalThis","cclegacy","_global","USE_EXTERNAL_PHYSX","PHYSX","initConfigAndCacheObject","PhysX","EPSILON","MULTI_THREAD","SUB_THREAD_COUNT","CACHE_MAT","IMPL_PTR","MESH_CONVEX","MESH_STATIC","TERRAIN_STATIC","initAdaptWrapper","obj","VECTOR_MAT","PxMaterialVector","MeshScale","PxMeshScale","ShapeFlag","PxShapeFlag","ActorFlag","PxActorFlag","ForceMode","PxForceMode","CombineMode","PxCombineMode","BoxGeometry","PxBoxGeometry","QueryHitType","PxQueryHitType","RigidBodyFlag","PxRigidBodyFlag","PlaneGeometry","PxPlaneGeometry","SphereGeometry","PxSphereGeometry","CapsuleGeometry","PxCapsuleGeometry","ConvexMeshGeometry","PxConvexMeshGeometry","D6Motion","PxD6Motion","D6Axis","PxD6Axis","D6Drive","PxD6Drive","D6JointDrive","PxD6JointDrive","LinearLimitPair","PxJointLinearLimitPair","AngularLimitPair","PxJointAngularLimitPair","TriangleMeshGeometry","PxTriangleMeshGeometry","RigidDynamicLockFlag","PxRigidDynamicLockFlag","TolerancesScale","PxTolerancesScale","RevoluteJointFlags","eLIMIT_ENABLED","eDRIVE_ENABLED","eDRIVE_FREESPIN","JointAngularLimitPair","createRevoluteJoint","a","b","c","d","PxRevoluteJointCreate","createFixedConstraint","PxFixedJointCreate","createSphericalJoint","PxSphericalJointCreate","createD6Joint","PxD6JointCreate","game","onPostInfrastructureInitDelegate","add","ensureWasmModuleReady","then","sys","hasFeature","Feature","WASM","all","module","import","n","p","_ref","physxWasmFactory","physxWasmUrl","instantiateWasm","importObject","receiveInstance","result","instance","Instance","console","debug","reason","error","_ref2","physxAsmFactory","Object","assign","msg","_v3","x","y","z","_v4","w","_trans","translation","rotation","q","getColorPXColor","color","rgba","g","r","_pxtrans","addReference","shape","impl","$$","ptr","removeReference","getWrapShape","pxShape","getTempTransform","pos","quat","Vec3","copy","Quat","getJsTransform","addActorToScene","scene","actor","addActor","setJointActors","joint","actor0","actor1","setActors","setMassAndUpdateInertia","mass","copyPhysXTransform","node","transform","wp","worldPosition","wr","worldRotation","physXEqualsCocosVec3","physXEqualsCocosQuat","setWorldPosition","setWorldRotation","trans","v3","equals","applyImpulse","isGlobal","vec","rp","applyLocalImpulse","applyForce","applyLocalForce","applyTorqueForce","addTorque","createConvexMesh","_buffer","vertices","shrinkPositions","l","length","vArr","PxVec3Vector","i","push_back","createMeshGeometryFlags","flags","isConvex","PxConvexMeshGeometryFlags","PxMeshGeometryFlags","createTriangleMesh","indices","l2","iArr","PxU16Vector","createTriMeshExt","createHeightField","terrain","heightScale","sizeI","getVertexCountI","sizeJ","getVertexCountJ","samples","PxHeightFieldSampleVector","j","s","PxHeightFieldSample","height","getHeight","createHeightFieldExt","createHeightFieldGeometry","hf","hs","xs","zs","PxHeightFieldGeometry","raycastAll","world","worldRay","options","pool","results","maxDistance","word3","QUERY_FILTER","queryTrigger","QUERY_CHECK_TRIGGER","queryFlags","eSTATIC","eDYNAMIC","ePREFILTER","eNO_BLOCK","setWords","mask","setFlags","blocks","raycastMultiple","o","size","block","get","collider","getShape","_assign","position","distance","normal","push","raycastClosest","QUERY_SINGLE_HIT","raycastSingle","sweepAll","geometry","geometryRotation","sweepMultiple","sweepClosest","sweepSingle","initializeWorld","version","PX_PHYSICS_VERSION","allocator","PxDefaultAllocator","defaultErrorCallback","PxDefaultErrorCallback","PxCreateFoundation","scale","PxCreatePhysics","PxCreateCooking","PxCookingParams","PxInitExtensions","PxRaycastHit","PxRaycastHitVector","resize","PxQueryFilterData","PxSimulationEventCallback","implement","callback","eventCallback","PxQueryFilterCallback","queryCallback","PxSweepHit","PxSweepHitVector","sceneDesc","getDefaultSceneDesc","getTolerancesScale","createScene","setVisualizationParameter","PxVisualizationParameter","eSCALE","controllerManager","PxCreateControllerManager","getContactPosition","pxContactOrOffset","out","getContactNormal","getContactDataOrByteOffset","index","offset","getGContacts","PhysXSharedBody","wrappedWorld","this","id","wrappedShapes","wrappedJoints0","wrappedJoints1","_index","_isStatic","_isKinematic","_dynamicActor","_staticActor","_wrappedBody","_filterData","idCounter","word0","word1","word2","getSharedBody","wrappedBody","newSB","key","uuid","sharedBodesMap","has","filterData","PhysicsGroup","DEFAULT","PhysicsSystem","collisionMatrix","set","rigidBody","group","m","_proto","prototype","_initActor","st","wb","type","ERigidBodyType","STATIC","_initStaticActor","_initDynamicActor","_switchActor","t","createRigidStatic","setActorFlag","eVISUALIZATION","createRigidDynamic","rb","setMass","eDISABLE_GRAVITY","useGravity","setLinearDamping","linearDamping","setAngularDamping","angularDamping","setRigidBodyFlag","eKINEMATIC","isKinematic","lf","linearFactor","setRigidDynamicLockFlag","eLOCK_LINEAR_X","eLOCK_LINEAR_Y","eLOCK_LINEAR_Z","af","angularFactor","eLOCK_ANGULAR_X","eLOCK_ANGULAR_Y","eLOCK_ANGULAR_Z","isStaticBefore","a0","a1","removeActor","ws","detachShape","attachShape","addShape","indexOf","setIndex","updateFilterData","isTrigger","isDynamic","removeShape","js","addJoint","v","removeJoint","linDamp","dt","fixedTimeStep","Math","pow","angDamp","setType","isStatic","DYNAMIC","KINEMATIC","syncSceneToPhysics","hasChangedFlags","TransformBit","SCALE","syncScale","setKinematicTarget","setGlobalPose","syncSceneWithCheck","pose","getGlobalPose","syncPhysicsToScene","isSleeping","updateScale","updateScale0","updateScale1","setGroup","getGroup","addGroup","removeGroup","setMask","getMask","addMask","removeMask","clearForces","clearForce","eFORCE","eIMPULSE","clearTorque","clearVelocity","setLinearVelocity","ZERO","setAngularVelocity","destroy","release","_createClass","wrappedBodies","isEnabled","Map","EPhysXShapeType","PhysXContactEquation","event","colliderA","colliderB","getLocalPointOnA","subtract","getLocalPointOnB","getWorldPointOnA","getWorldPointOnB","getLocalNormalOnA","getWorldNormalOnA","conjugate","transformQuat","getLocalNormalOnB","getWorldNormalOnB","isBodyA","negate","selfCollider","PhysXShape","_impl","_collider","_flags","_sharedBody","_rotation","_word3","_isEnabled","initialize","flag","eTRIGGER_SHAPE","value","eSIMULATION_SHAPE","eSCENE_QUERY_SHAPE","PxShapeFlags","physicsWorld","reference","onComponentSet","onLoad","setMaterial","sharedMaterial","setCenter","center","onEnable","addToBody","enabled","onDisable","removeFromBody","onDestroy","pxMtl","mat","getSharedMaterial","setMaterials","v1","defaultMaterial","createMaterial","friction","restitution","setFrictionCombineMode","eMULTIPLY","setRestitutionCombineMode","setStaticFriction","setDynamicFriction","setRestitution","setAsTrigger","setFlag","rot","multiply","worldScale","setLocalPose","getAABB","b3","getWorldBounds","fromPoints","minimum","maximum","getBoundingSphere","toBoundingSphere","worldBounds","DETECT_CONTACT_CCD","needTriggerEvent","DETECT_TRIGGER_EVENT","needCollisionEvent","DETECT_CONTACT_EVENT","DETECT_CONTACT_POINT","setFilerData","updateEventListener","updateByReAdd","setQueryFilterData","setSimulationFilterData","_MESH_SCALE","IDENTITY","v3_0","v3_1","PhysXCharacterController","_comp","_pxCollisionFlags","_queryFilterCB","_overlapRecovery","create","comp","setDetectCollisions","setOverlapRecovery","addCCT","removeCCT","shapePtr","getPosition","setPosition","setContactOffset","setStepOffset","setSlopeLimit","cos","degreesToRadians","setCollision","setQuery","onGround","characterController","POSITION","scaledCenter","move","movement","minDist","elapsedTime","setOverlapRecoveryModule","preFilter","eNONE","eBLOCK","CC_QUAT_0","CC_V3_0","CC_V3_1","CC_V3_2","CC_COLOR_0","Color","PhysXWorld","_PhysXInstance","_inheritsLoose","_this","call","PhysXCallback","ccts","_isNeedFetch","_debugLineCount","_MAX_DEBUG_LINE_COUNT","_debugDrawFlags","EPhysicsDrawFlags","NONE","_debugConstraintSize","_assertThisInitialized","setAllowSleep","setDefaultMaterial","setGravity","gravity","step","deltaTime","_simulate","_fetchResults","_debugDraw","simulate","fetchResults","syncAfterEvents","_setDebugDrawMode","WIRE_FRAME","eCOLLISION_SHAPES","internalConstraintSize","Boolean","CONSTRAINT","eJOINT_LOCAL_FRAMES","eJOINT_LIMITS","AABB","eCOLLISION_AABBS","_getDebugRenderer","_mainWindow","cameras","director","root","mainWindow","initGeometryRenderer","geometryRenderer","rbPtr","getRenderBufferPtr","nbLine","PxRenderBuffer_GetNbLines","linePtr","PxRenderBuffer_GetLineAt","_onDebugDrawLine","nbTriangle","PxRenderBuffer_GetNbTriangles","trianglePtr","PxRenderBuffer_GetTriangleAt","_onDebugDrawTriangle","debugRenderer","f32RawPtr","HEAPF32","subarray","u32RawPtr","HEAPU32","color0","addLine","body","cct","addConstraint","removeConstraint","raycast","sweepBox","halfExtent","orientation","_sweepBoxGeometry","setHalfExtents","sweepBoxClosest","sweepSphere","radius","_sweepSphereGeometry","setRadius","sweepSphereClosest","sweepCapsule","_sweepCapsuleGeometry","setHalfHeight","finalOrientation","fromEuler","sweepCapsuleClosest","emitEvents","emitTriggerEvent","emitCollisionEvent","emitCCTCollisionEvent","emitCCTTriggerEvent","triggerEventBeginDic","TupleDictionary","triggerEventEndDic","triggerEventsPool","contactEventDic","contactEventsPool","contactsPool","cctShapeEventDic","emitHit","CharacterControllerContact","cctTriggerEventBeginDic","cctTriggerEventEndDic","cctTriggerEventsPool","onContactBegin","wpa","wpb","onCollision","onContactEnd","onContactPersist","onTriggerBegin","onTrigger","onTriggerCCT","onTriggerEnd","shapeFlags","getFlags","isSet","eTOUCH","preFilterForByteDance","isEnter","tE","pop","times","len","getLength","getKeyByIndex","data","getDataByKey","dataBeg","TriggerEventObject","otherCollider","emit","reset","isValid","cE","contactCount","buffer","CollisionEventObject","contacts","apply","controllerHitReportCB","onShapeHit","hit","getCurrentController","getTouchedShape","item","worldPos","worldNormal","motionDir","dir","motionLength","onControllerHit","dicL","controller","motionDirection","CharacterTriggerEventObject","PhysXRigidBody","isSleepy","_isUsingCCD","_rigidBody","setSleepThreshold","sleepThreshold","allowSleep","setLinearFactor","setAngularFactor","useCCD","eENABLE_CCD","isUsingCCD","isStaticOrKinematic","wc","setWakeCounter","wakeUp","isInScene","sleep","putToSleep","clearState","ke","getSleepThreshold","sqrt","getLinearVelocity","getAngularVelocity","force","relativePoint","applyTorque","torque","applyLocalTorque","PhysXSphereShape","_PhysXShape","SPHERE","SPHERE_GEOMETRY","updateRadius","updateGeometry","pxmat","createShape","setGeometry","co","maxSp","abs","absMaxComponent","max","PhysXBoxShape","BOX","BOX_GEOMETRY","VEC3_0","updateSize","multiplyScalar","absolute","PhysXCapsuleShape","CAPSULE","CAPSULE_GEOMETRY","setCylinderHeight","setDirection","upAxis","direction","EAxisDirection","Y_AXIS","absMax","cylinderHeight","X_AXIS","PhysXPlaneShape","PLANE","PLANE_GEOMETRY","setNormal","setConstant","scaleAndAdd","constant","rotationTo","UNIT_X","PhysXTrimeshShape","MESH","setMesh","renderingSubMeshes","meshScale","MESH_SCALE","setScale","ONE","setRotation","posBuf","geometricInfo","positions","indBuf","Uint16Array","Uint32Array","Uint8Array","convex","undefined","_uuid","convexMesh","trimesh","mesh","PhysXTerrainShape","TERRAIN","setTerrain","tileSize","PhysXCylinderShape","CYLINDER","setHeight","CONVEX_MESH","primitive","cylinder","radialSegments","heightSegments","h","xzMaxNorm","Z_AXIS","PhysXConeShape","CONE","PhysXJoint","_com","_connectedBody","setConnectedBody","oldBody2","sharedBody","sb","sb2","setEnableCollision","setConstraintFlag","attachedBody","connectedBody","enableCollision","enableDebugVisualization","connect","tempActor","constraint","_tempActor","quat_0","mat_0","Mat4","PhysXFixedJoint","_PhysXJoint","_len","arguments","args","Array","_key","concat","_breakForce","_breakTorque","setBreakForce","breakForce","setBreakTorque","breakTorque","updateFrame","bodyA","cb","fromRT","invert","getRotation","getTranslation","bodyB","PhysXSphericalJoint","setPivotA","cs","pivotA","setPivotB","pivotB","v3_2","PhysXRevoluteJoint","_limitPair","setLimitEnabled","setRevoluteJointFlag","setLimit","setLowerLimit","lower","toRadian","lowerLimit","limitEnabled","setUpperLimit","upper","upperLimit","setMotorEnabled","setDriveVelocity","motorVelocity","setDriveForceLimit","motorForceLimit","setMotorVelocity","motorEnabled","setMotorForceLimit","updateFrames","setAxis","stiffness","damping","contactDistance","setProjectionAngularTolerance","setProjectionLinearTolerance","normalize","axis","cross","UNIT_Y","UNIT_Z","CC_MAT4_0","getConstraintFlag","EConstraintMode","FREE","eFREE","LIMITED","eLIMITED","LOCKED","eLOCKED","PhysXConfigurableJoint","_setLinearLimit","linearLimit","linearLimitSettings","limitPairX","_linearLimitX","limitPairY","_linearLimitY","limitPairZ","_linearLimitZ","setLimitPair","limitPair","enableSoftConstraint","bounceThreshold","xMotion","setLinearLimit","eX","yMotion","eY","zMotion","eZ","_setSwingLimit","angularLimit","angularLimitSettings","limitCone","_swingLimit","enableSoftConstraintSwing","swingStiffness","swingDamping","springDamping","yAngle","PI","zAngle","swingRestitution","swingMotion1","swingExtent1","setSwingLimit","swingMotion2","swingExtent2","_setTwistLimit","_twistLimit","enableSoftConstraintTwist","twistStiffness","twistDamping","twistRestitution","twistMotion","twistExtent","setTwistLimit","_updateDrive","idx","driveMode","EDriverMode","DISABLED","com","ld","linearDriverSettings","ad","angularDriverSettings","xDrive","yDrive","zDrive","eTWIST","twistDrive","eSWING","swingDrive1","INDUCTION","swingDrive2","SERVO","getSwingDriveMode","drive","_drive","forceLimit","strength","setDrive","_updateDriveTarget","linearTarget","targetPosition","angularTarget","targetOrientation","setDrivePosition","_updateDriveVelocity","linearVelocity","targetVelocity","angularVelocity","lv","av","_updateDriveSettings","setConstraintMode","eSWING1","eSWING2","mode","setMotion","setAngularExtent","setLinearRestitution","setSwingRestitution","setTwistRestitution","setLinearSoftConstraint","setLinearStiffness","setSwingSoftConstraint","setSwingStiffness","setSwingDamping","setTwistSoftConstraint","setTwistStiffness","setTwistDamping","setDriverMode","setLinearMotorTarget","setLinearMotorVelocity","setLinearMotorForceLimit","setAngularMotorTarget","setAngularMotorVelocity","setAngularMotorForceLimit","setAutoPivotB","setSecondaryAxis","_initCache","ll","al","axisX","axisY","secondaryAxis","axisZ","_rot","autoPivotB","_jointToleranceScale","PxJointLimitCone","_drive_x","_drive_y","_drive_z","_drive_twist","_drive_swing1","_drive_swing2","upDir","PhysXBoxCharacterController","_PhysXCharacterContro","component","getWorldPosition","physxWorld","controllerDesc","PxBoxControllerDesc","halfHeight","halfSideExtent","halfForwardExtent","density","scaleCoeff","volumeGrowth","contactOffset","skinWidth","stepOffset","slopeLimit","upDirection","setReportCallback","PxUserControllerHitReport","createBoxCharacterController","setHalfSideExtent","setHalfForwardExtent","PhysXCapsuleCharacterController","PxCapsuleControllerDesc","climbingMode","PxCapsuleClimbingMode","eCONSTRAINED","createCapsuleCharacterController","once","Game","EVENT_PRE_SUBSYSTEM_INIT","selector","register","PhysicsWorld","RigidBody","BoxShape","SphereShape","CapsuleShape","TrimeshShape","CylinderShape","ConeShape","TerrainShape","PlaneShape","PointToPointConstraint","HingeConstraint","FixedConstraint","ConfigurableConstraint","BoxCharacterController","CapsuleCharacterController"],"mappings":"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"}