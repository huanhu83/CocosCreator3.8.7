{"version":3,"file":"pipeline-state-manager-C4BAah3w.js","sources":["../../../cocos/scene-graph/layers.ts","../../../cocos/rendering/define.ts","../../../cocos/rendering/pipeline-state-manager.ts"],"sourcesContent":["/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BitMask, Enum } from '../core/value-types';\r\nimport { legacyCC } from '../core/global-exports';\r\nimport { log2 } from '../core/math/bits';\r\nimport { js } from '../core';\r\nimport { assertIsTrue } from '../core/data/utils/asserts';\r\nimport { getError, warnID } from '../core/platform/debug';\r\nimport { settings, SettingsCategory } from '../core/settings';\r\n\r\n// built-in layers, users can use 0~19 bits, 20~31 are system preserve bits.\r\nconst layerList = {\r\n    NONE: 0,\r\n    IGNORE_RAYCAST: (1 << 20),\r\n    GIZMOS: (1 << 21),\r\n    EDITOR: (1 << 22),\r\n    UI_3D: (1 << 23),\r\n    SCENE_GIZMO: (1 << 24),\r\n    UI_2D: (1 << 25),\r\n\r\n    PROFILER: (1 << 28),\r\n    DEFAULT: (1 << 30),\r\n    ALL: 0xffffffff,\r\n};\r\n\r\nexport interface LayerItem {\r\n    name: string;\r\n    bit: number;\r\n}\r\n\r\n/**\r\n * @zh 节点层管理器，层数据是以掩码数据方式存储在 [[Node.layer]] 中，用于射线检测、物理碰撞和用户自定义脚本逻辑。\r\n * 每个节点可属于一个或多个层，可通过 “包含式” 或 “排除式” 两种检测器进行层检测。\r\n * @en Node's layer manager, it's stored as bit mask data in [[Node.layer]].\r\n * Layer information is widely used in raycast, physics and user logic.\r\n * Every node can be assigned to multiple layers with different bit masks, you can setup layer with inclusive or exclusive operation.\r\n */\r\nexport class Layers {\r\n    private constructor () {}\r\n    /**\r\n     * @en All layers in an Enum\r\n     * @zh 以 Enum 形式存在的所有层列表\r\n     */\r\n    public static Enum = Enum(layerList);\r\n\r\n    /**\r\n     * @en All layers in [[BitMask]] type\r\n     * @zh 包含所有层的 [[BitMask]]\r\n     */\r\n    public static BitMask = BitMask({ ...layerList });\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static init (): void {\r\n        const userLayers = settings.querySettings<LayerItem[]>(SettingsCategory.ENGINE, 'customLayers');\r\n        if (!userLayers) return;\r\n        for (let i = 0; i < userLayers.length; i++) {\r\n            const layer = userLayers[i];\r\n            Layers.addLayer(layer.name, layer.bit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Make a layer mask accepting nothing but the listed layers\r\n     * @zh\r\n     * 创建一个包含式层检测器，只接受列表中的层\r\n     * @param includes All accepted layers\r\n     * @return A filter which can detect all accepted layers\r\n     */\r\n    public static makeMaskInclude (includes: number[]): number {\r\n        return includes.reduce((mask, inc) => mask | inc, 0);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Make a layer mask accepting everything but the listed layers\r\n     * @zh\r\n     * 创建一个排除式层检测器，只拒绝列表中的层\r\n     * @param excludes All excluded layers\r\n     * @return A filter which can detect for excluded layers\r\n     */\r\n    public static makeMaskExclude (excludes: number[]): number {\r\n        return ~Layers.makeMaskInclude(excludes);\r\n    }\r\n\r\n    /**\r\n     * @zh 添加一个新层，用户可编辑 0 - 19 位为用户自定义层\r\n     * @en Add a new layer, user can use layers from bit position 0 to 19, other bits are reserved.\r\n     * @param name Layer's name\r\n     * @param bitNum Layer's bit position\r\n     */\r\n    public static addLayer (name: string, bitNum: number): void {\r\n        if (bitNum === undefined) {\r\n            warnID(16364);\r\n            return;\r\n        }\r\n        if (bitNum > 19 || bitNum < 0) {\r\n            warnID(16365);\r\n            return;\r\n        }\r\n        const val = 1 << bitNum;\r\n        assertIsTrue(!Layers.Enum[name], getError(2104, name));\r\n        Layers.Enum[name] = val;\r\n        js.value(Layers.Enum, String(val), name);\r\n        Layers.BitMask[name] = val;\r\n        js.value(Layers.BitMask, String(val), name);\r\n\r\n        BitMask.update(Layers.BitMask);\r\n        Enum.update(Layers.Enum);\r\n    }\r\n\r\n    /**\r\n     * @en Remove a layer, user can remove layers from bit position 0 to 19, other bits are reserved.\r\n     * @zh 移除一个层，用户可编辑 0 - 19 位为用户自定义层\r\n     * @param bitNum Layer's bit position\r\n     */\r\n    public static deleteLayer (bitNum: number): void {\r\n        if (bitNum > 19 || bitNum < 0) {\r\n            warnID(16366);\r\n            return;\r\n        }\r\n        const val = 1 << bitNum;\r\n        delete Layers.Enum[Layers.Enum[val]];\r\n        delete Layers.Enum[val];\r\n        delete Layers.BitMask[Layers.BitMask[val]];\r\n        delete Layers.BitMask[val];\r\n\r\n        BitMask.update(Layers.BitMask);\r\n        Enum.update(Layers.Enum);\r\n    }\r\n\r\n    /**\r\n     * @en Given a layer name, returns the layer index as defined by either a Builtin or a User Layer in the Tags and Layers manager.\r\n     * @zh 给定层名称，返回由标记和层管理器中的内置层或用户层定义的层索引。\r\n     * @param name layer's name\r\n     */\r\n    public static nameToLayer (name: string): number {\r\n        if (name === undefined) {\r\n            warnID(16367);\r\n            return -1;\r\n        }\r\n\r\n        return log2(Layers.Enum[name] as number);\r\n    }\r\n\r\n    /**\r\n     * @en Given a layer number, returns the name of the layer as defined in either a Builtin or a User Layer in the Tags and Layers manager.\r\n     * @zh 给定层数，返回在标记和层管理器中的内置层或用户层中定义的层名称。\r\n     * @param bitNum layer's value\r\n     */\r\n    public static layerToName (bitNum: number): string {\r\n        if (bitNum > 31 || bitNum < 0) {\r\n            warnID(16368);\r\n            return '';\r\n        }\r\n\r\n        return Layers.Enum[1 << bitNum] as string;\r\n    }\r\n}\r\nexport declare namespace Layers {\r\n    export type Enum = EnumAlias<typeof Layers.Enum>;\r\n    export type BitMask = EnumAlias<typeof Layers.BitMask>;\r\n}\r\n\r\nlegacyCC.Layers = Layers;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Pass } from '../render-scene/core/pass';\r\nimport { Model } from '../render-scene/scene/model';\r\nimport { SubModel } from '../render-scene/scene/submodel';\r\nimport { Layers } from '../scene-graph/layers';\r\nimport { cclegacy, RecyclePool } from '../core';\r\nimport { BindingMappingInfo, DescriptorType, Type, ShaderStageFlagBit, UniformStorageBuffer, DescriptorSetLayoutBinding,\r\n    Uniform, UniformBlock, UniformSamplerTexture, UniformStorageImage, Device, FormatFeatureBit, Format, API,\r\n    Texture,\r\n    TextureInfo,\r\n    TextureType,\r\n    TextureUsageBit,\r\n    TextureFlagBit,\r\n    SampleCount,\r\n    MemoryAccessBit,\r\n    ViewDimension,\r\n    SampleType,\r\n} from '../gfx';\r\n\r\nexport const PIPELINE_FLOW_MAIN = 'MainFlow';\r\nexport const PIPELINE_FLOW_FORWARD = 'ForwardFlow';\r\nexport const PIPELINE_FLOW_SHADOW = 'ShadowFlow';\r\nexport const PIPELINE_FLOW_SMAA = 'SMAAFlow';\r\nexport const PIPELINE_FLOW_TONEMAP = 'ToneMapFlow';\r\n\r\n/**\r\n * @en The predefined render pass stage ids\r\n * @zh 预设的渲染阶段。\r\n */\r\nexport enum RenderPassStage {\r\n    DEFAULT = 100,\r\n    UI = 200,\r\n}\r\ncclegacy.RenderPassStage = RenderPassStage;\r\n\r\n/**\r\n * @en The predefined render priorities\r\n * @zh 预设的渲染优先级。\r\n */\r\nexport enum RenderPriority {\r\n    MIN = 0,\r\n    MAX = 0xff,\r\n    DEFAULT = 0x80,\r\n}\r\n\r\n/**\r\n * @en Render object interface\r\n * @zh 渲染对象接口。\r\n */\r\nexport interface IRenderObject {\r\n    model: Model;\r\n    depth: number;\r\n}\r\n\r\n/*\r\n * @en The render pass interface\r\n * @zh 渲染过程接口。\r\n */\r\nexport interface IRenderPass {\r\n    priority: number;\r\n    hash: number;\r\n    depth: number;\r\n    shaderId: number;\r\n    subModel: SubModel;\r\n    passIdx: number;\r\n}\r\n\r\n/**\r\n * @en Render batch interface\r\n * @zh 渲染批次接口。\r\n */\r\nexport interface IRenderBatch {\r\n    pass: Pass;\r\n}\r\n\r\n/**\r\n * @en Render queue descriptor\r\n * @zh 渲染队列描述。\r\n */\r\nexport interface IRenderQueueDesc {\r\n    isTransparent: boolean;\r\n    phases: number;\r\n    sortFunc: (a: IRenderPass, b: IRenderPass) => number;\r\n}\r\n\r\nexport interface IDescriptorSetLayoutInfo {\r\n    bindings: DescriptorSetLayoutBinding[];\r\n    layouts: Record<string, UniformBlock | UniformSamplerTexture | UniformStorageImage | UniformStorageBuffer>;\r\n}\r\n\r\nexport const globalDescriptorSetLayout: IDescriptorSetLayoutInfo = { bindings: [], layouts: {} };\r\nexport const localDescriptorSetLayout: IDescriptorSetLayoutInfo = { bindings: [], layouts: {} };\r\n\r\n/**\r\n * @en The uniform bindings\r\n * @zh Uniform 参数绑定。\r\n */\r\nexport enum PipelineGlobalBindings {\r\n    UBO_GLOBAL,\r\n    UBO_CAMERA,\r\n    UBO_SHADOW,\r\n    UBO_CSM, // should reserve slot for this optional ubo\r\n\r\n    SAMPLER_SHADOWMAP,\r\n    SAMPLER_ENVIRONMENT, // don't put this as the first sampler binding due to Mac GL driver issues: cubemap at texture unit 0 causes rendering issues\r\n    SAMPLER_SPOT_SHADOW_MAP,\r\n    SAMPLER_DIFFUSEMAP,\r\n\r\n    COUNT,\r\n}\r\nconst GLOBAL_UBO_COUNT = PipelineGlobalBindings.SAMPLER_SHADOWMAP;\r\nconst GLOBAL_SAMPLER_COUNT = PipelineGlobalBindings.COUNT - GLOBAL_UBO_COUNT;\r\n\r\nexport enum ModelLocalBindings {\r\n    UBO_LOCAL,\r\n    UBO_FORWARD_LIGHTS,\r\n    UBO_SKINNING_ANIMATION,\r\n    UBO_SKINNING_TEXTURE,\r\n    UBO_MORPH,\r\n    UBO_UI_LOCAL,\r\n    UBO_SH,\r\n\r\n    SAMPLER_JOINTS,\r\n    SAMPLER_MORPH_POSITION,\r\n    SAMPLER_MORPH_NORMAL,\r\n    SAMPLER_MORPH_TANGENT,\r\n    SAMPLER_LIGHTMAP,\r\n    SAMPLER_SPRITE,\r\n\r\n    SAMPLER_REFLECTION_PROBE_CUBE,\r\n    SAMPLER_REFLECTION_PROBE_PLANAR,\r\n    SAMPLER_REFLECTION_PROBE_DATA_MAP,\r\n    // SAMPLER_REFLECTION_PROBE_BLEND_CUBE, // Disable for WebGPU\r\n\r\n    COUNT,\r\n}\r\nconst LOCAL_UBO_COUNT = ModelLocalBindings.SAMPLER_JOINTS;\r\nconst LOCAL_SAMPLER_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT;\r\nconst LOCAL_STORAGE_IMAGE_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT - LOCAL_SAMPLER_COUNT;\r\n\r\nexport enum SetIndex {\r\n    GLOBAL,\r\n    MATERIAL,\r\n    LOCAL,\r\n    COUNT\r\n}\r\n// parameters passed to GFX Device\r\nexport const bindingMappingInfo = new BindingMappingInfo(\r\n    [GLOBAL_UBO_COUNT, 0, LOCAL_UBO_COUNT, 0],         // Uniform Buffer Counts\r\n    [GLOBAL_SAMPLER_COUNT, 0, LOCAL_SAMPLER_COUNT, 0], // Combined Sampler Texture Counts\r\n    [0, 0, 0, 0],                                      // Sampler Counts\r\n    [0, 0, 0, 0],                                      // Texture Counts\r\n    [0, 0, 0, 0],                                      // Storage Buffer Counts\r\n    [0, 0, LOCAL_STORAGE_IMAGE_COUNT, 0],              // Storage Image Counts\r\n    [0, 0, 0, 0],                                      // Subpass Input Counts\r\n    [0, 2, 1, 3],                                      // Set Order Indices\r\n);\r\n\r\nexport enum UBOGlobalEnum {\r\n    TIME_OFFSET = 0,\r\n    SCREEN_SIZE_OFFSET = TIME_OFFSET + 4,\r\n    NATIVE_SIZE_OFFSET = SCREEN_SIZE_OFFSET + 4,\r\n    PROBE_INFO_OFFSET = NATIVE_SIZE_OFFSET + 4,\r\n\r\n    DEBUG_VIEW_MODE_OFFSET = PROBE_INFO_OFFSET + 4,\r\n\r\n    COUNT = DEBUG_VIEW_MODE_OFFSET + 4,\r\n    SIZE = COUNT * 4,\r\n}\r\n\r\n/**\r\n * @en The global uniform buffer object\r\n * @zh 全局 UBO。\r\n */\r\nexport class UBOGlobal {\r\n    public static readonly TIME_OFFSET = UBOGlobalEnum.TIME_OFFSET;\r\n    public static readonly SCREEN_SIZE_OFFSET = UBOGlobalEnum.SCREEN_SIZE_OFFSET;\r\n    public static readonly NATIVE_SIZE_OFFSET = UBOGlobalEnum.NATIVE_SIZE_OFFSET;\r\n    public static readonly PROBE_INFO_OFFSET = UBOGlobalEnum.PROBE_INFO_OFFSET;\r\n\r\n    public static readonly DEBUG_VIEW_MODE_OFFSET = UBOGlobalEnum.DEBUG_VIEW_MODE_OFFSET;\r\n\r\n    public static readonly COUNT = UBOGlobalEnum.COUNT;\r\n    public static readonly SIZE = UBOGlobalEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCGlobal';\r\n    public static readonly BINDING = PipelineGlobalBindings.UBO_GLOBAL;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(UBOGlobal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, UBOGlobal.NAME, [\r\n        new Uniform('cc_time', Type.FLOAT4, 1),\r\n        new Uniform('cc_screenSize', Type.FLOAT4, 1),\r\n        new Uniform('cc_nativeSize', Type.FLOAT4, 1),\r\n        new Uniform('cc_probeInfo', Type.FLOAT4, 1),\r\n\r\n        new Uniform('cc_debug_view_mode', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nglobalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UBOGlobal.BINDING] = UBOGlobal.DESCRIPTOR;\r\n\r\nexport enum UBOCameraEnum {\r\n    MAT_VIEW_OFFSET = 0,\r\n    MAT_VIEW_INV_OFFSET = MAT_VIEW_OFFSET + 16,\r\n    MAT_PROJ_OFFSET = MAT_VIEW_INV_OFFSET + 16,\r\n    MAT_PROJ_INV_OFFSET = MAT_PROJ_OFFSET + 16,\r\n    MAT_VIEW_PROJ_OFFSET = MAT_PROJ_INV_OFFSET + 16,\r\n    MAT_VIEW_PROJ_INV_OFFSET = MAT_VIEW_PROJ_OFFSET + 16,\r\n    CAMERA_POS_OFFSET = MAT_VIEW_PROJ_INV_OFFSET + 16,\r\n    SURFACE_TRANSFORM_OFFSET = CAMERA_POS_OFFSET + 4,\r\n    SCREEN_SCALE_OFFSET = SURFACE_TRANSFORM_OFFSET + 4,\r\n    EXPOSURE_OFFSET = SCREEN_SCALE_OFFSET + 4,\r\n    MAIN_LIT_DIR_OFFSET = EXPOSURE_OFFSET + 4,\r\n    MAIN_LIT_COLOR_OFFSET = MAIN_LIT_DIR_OFFSET + 4,\r\n    AMBIENT_SKY_OFFSET = MAIN_LIT_COLOR_OFFSET + 4,\r\n    AMBIENT_GROUND_OFFSET = AMBIENT_SKY_OFFSET + 4,\r\n    GLOBAL_FOG_COLOR_OFFSET = AMBIENT_GROUND_OFFSET + 4,\r\n    GLOBAL_FOG_BASE_OFFSET = GLOBAL_FOG_COLOR_OFFSET + 4,\r\n    GLOBAL_FOG_ADD_OFFSET = GLOBAL_FOG_BASE_OFFSET + 4,\r\n    NEAR_FAR_OFFSET = GLOBAL_FOG_ADD_OFFSET + 4,\r\n    VIEW_PORT_OFFSET = NEAR_FAR_OFFSET + 4,\r\n    COUNT = VIEW_PORT_OFFSET + 4,\r\n    SIZE = COUNT * 4,\r\n}\r\n\r\n/**\r\n * @en The global camera uniform buffer object\r\n * @zh 全局相机 UBO。\r\n */\r\nexport class UBOCamera {\r\n    public static readonly MAT_VIEW_OFFSET = UBOCameraEnum.MAT_VIEW_OFFSET;\r\n    public static readonly MAT_VIEW_INV_OFFSET = UBOCameraEnum.MAT_VIEW_INV_OFFSET;\r\n    public static readonly MAT_PROJ_OFFSET = UBOCameraEnum.MAT_PROJ_OFFSET;\r\n    public static readonly MAT_PROJ_INV_OFFSET = UBOCameraEnum.MAT_PROJ_INV_OFFSET;\r\n    public static readonly MAT_VIEW_PROJ_OFFSET = UBOCameraEnum.MAT_VIEW_PROJ_OFFSET;\r\n    public static readonly MAT_VIEW_PROJ_INV_OFFSET = UBOCameraEnum.MAT_VIEW_PROJ_INV_OFFSET;\r\n    public static readonly CAMERA_POS_OFFSET = UBOCameraEnum.CAMERA_POS_OFFSET;\r\n    public static readonly SURFACE_TRANSFORM_OFFSET = UBOCameraEnum.SURFACE_TRANSFORM_OFFSET;\r\n    public static readonly SCREEN_SCALE_OFFSET = UBOCameraEnum.SCREEN_SCALE_OFFSET;\r\n    public static readonly EXPOSURE_OFFSET = UBOCameraEnum.EXPOSURE_OFFSET;\r\n    public static readonly MAIN_LIT_DIR_OFFSET = UBOCameraEnum.MAIN_LIT_DIR_OFFSET;\r\n    public static readonly MAIN_LIT_COLOR_OFFSET = UBOCameraEnum.MAIN_LIT_COLOR_OFFSET;\r\n    public static readonly AMBIENT_SKY_OFFSET = UBOCameraEnum.AMBIENT_SKY_OFFSET;\r\n    public static readonly AMBIENT_GROUND_OFFSET = UBOCameraEnum.AMBIENT_GROUND_OFFSET;\r\n    public static readonly GLOBAL_FOG_COLOR_OFFSET = UBOCameraEnum.GLOBAL_FOG_COLOR_OFFSET;\r\n    public static readonly GLOBAL_FOG_BASE_OFFSET = UBOCameraEnum.GLOBAL_FOG_BASE_OFFSET;\r\n    public static readonly GLOBAL_FOG_ADD_OFFSET = UBOCameraEnum.GLOBAL_FOG_ADD_OFFSET;\r\n    public static readonly NEAR_FAR_OFFSET = UBOCameraEnum.NEAR_FAR_OFFSET;\r\n    public static readonly VIEW_PORT_OFFSET = UBOCameraEnum.VIEW_PORT_OFFSET;\r\n    public static readonly COUNT = UBOCameraEnum.COUNT;\r\n    public static readonly SIZE = UBOCameraEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCCamera';\r\n    public static readonly BINDING = PipelineGlobalBindings.UBO_CAMERA;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCamera.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCamera.BINDING, UBOCamera.NAME, [\r\n        new Uniform('cc_matView', Type.MAT4, 1),\r\n        new Uniform('cc_matViewInv', Type.MAT4, 1),\r\n        new Uniform('cc_matProj', Type.MAT4, 1),\r\n        new Uniform('cc_matProjInv', Type.MAT4, 1),\r\n        new Uniform('cc_matViewProj', Type.MAT4, 1),\r\n        new Uniform('cc_matViewProjInv', Type.MAT4, 1),\r\n        new Uniform('cc_cameraPos', Type.FLOAT4, 1),\r\n        new Uniform('cc_surfaceTransform', Type.FLOAT4, 1),\r\n        new Uniform('cc_screenScale', Type.FLOAT4, 1),\r\n        new Uniform('cc_exposure', Type.FLOAT4, 1),\r\n        new Uniform('cc_mainLitDir', Type.FLOAT4, 1),\r\n        new Uniform('cc_mainLitColor', Type.FLOAT4, 1),\r\n        new Uniform('cc_ambientSky', Type.FLOAT4, 1),\r\n        new Uniform('cc_ambientGround', Type.FLOAT4, 1),\r\n        new Uniform('cc_fogColor', Type.FLOAT4, 1),\r\n        new Uniform('cc_fogBase', Type.FLOAT4, 1),\r\n        new Uniform('cc_fogAdd', Type.FLOAT4, 1),\r\n        new Uniform('cc_nearFar', Type.FLOAT4, 1),\r\n        new Uniform('cc_viewPort', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nglobalDescriptorSetLayout.layouts[UBOCamera.NAME] = UBOCamera.LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UBOCamera.BINDING] = UBOCamera.DESCRIPTOR;\r\n\r\nexport enum UBOShadowEnum {\r\n    MAT_LIGHT_VIEW_OFFSET = 0,\r\n    MAT_LIGHT_VIEW_PROJ_OFFSET = MAT_LIGHT_VIEW_OFFSET + 16,\r\n    SHADOW_INV_PROJ_DEPTH_INFO_OFFSET = MAT_LIGHT_VIEW_PROJ_OFFSET + 16,\r\n    SHADOW_PROJ_DEPTH_INFO_OFFSET = SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 4,\r\n    SHADOW_PROJ_INFO_OFFSET = SHADOW_PROJ_DEPTH_INFO_OFFSET + 4,\r\n    SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET = SHADOW_PROJ_INFO_OFFSET + 4,\r\n    SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 4,\r\n    SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 4,\r\n    SHADOW_COLOR_OFFSET = SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 4,\r\n    PLANAR_NORMAL_DISTANCE_INFO_OFFSET = SHADOW_COLOR_OFFSET + 4,\r\n    COUNT = PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 4,\r\n    SIZE = COUNT * 4,\r\n}\r\n\r\n/**\r\n * @en The uniform buffer object for 'cast shadow(fixed || csm)' && 'dir fixed area shadow' && 'spot shadow' && 'sphere shadow' && 'planar shadow'\r\n * @zh 这个 UBO 仅仅只给 'cast shadow(fixed || csm)' && 'dir fixed area shadow' && 'spot shadow' && 'sphere shadow' && 'planar shadow' 使用\r\n */\r\nexport class UBOShadow {\r\n    public static readonly MAT_LIGHT_VIEW_OFFSET = UBOShadowEnum.MAT_LIGHT_VIEW_OFFSET;\r\n    public static readonly MAT_LIGHT_VIEW_PROJ_OFFSET = UBOShadowEnum.MAT_LIGHT_VIEW_PROJ_OFFSET;\r\n    public static readonly SHADOW_INV_PROJ_DEPTH_INFO_OFFSET = UBOShadowEnum.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET;\r\n    public static readonly SHADOW_PROJ_DEPTH_INFO_OFFSET = UBOShadowEnum.SHADOW_PROJ_DEPTH_INFO_OFFSET;\r\n    public static readonly SHADOW_PROJ_INFO_OFFSET = UBOShadowEnum.SHADOW_PROJ_INFO_OFFSET;\r\n    public static readonly SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET = UBOShadowEnum.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET;\r\n    public static readonly SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = UBOShadowEnum.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET;\r\n    public static readonly SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = UBOShadowEnum.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET;\r\n    public static readonly SHADOW_COLOR_OFFSET = UBOShadowEnum.SHADOW_COLOR_OFFSET;\r\n    public static readonly PLANAR_NORMAL_DISTANCE_INFO_OFFSET = UBOShadowEnum.PLANAR_NORMAL_DISTANCE_INFO_OFFSET;\r\n    public static readonly COUNT = UBOShadowEnum.COUNT;\r\n    public static readonly SIZE = UBOShadowEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCShadow';\r\n    public static readonly BINDING = PipelineGlobalBindings.UBO_SHADOW;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(UBOShadow.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, UBOShadow.NAME, [\r\n        new Uniform('cc_matLightView', Type.MAT4, 1),\r\n        new Uniform('cc_matLightViewProj', Type.MAT4, 1),\r\n        new Uniform('cc_shadowInvProjDepthInfo', Type.FLOAT4, 1),\r\n        new Uniform('cc_shadowProjDepthInfo', Type.FLOAT4, 1),\r\n        new Uniform('cc_shadowProjInfo', Type.FLOAT4, 1),\r\n        new Uniform('cc_shadowNFLSInfo', Type.FLOAT4, 1),\r\n        new Uniform('cc_shadowWHPBInfo', Type.FLOAT4, 1),\r\n        new Uniform('cc_shadowLPNNInfo', Type.FLOAT4, 1),\r\n        new Uniform('cc_shadowColor', Type.FLOAT4, 1),\r\n        new Uniform('cc_planarNDInfo', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nglobalDescriptorSetLayout.layouts[UBOShadow.NAME] = UBOShadow.LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UBOShadow.BINDING] = UBOShadow.DESCRIPTOR;\r\n\r\nexport enum UBOCSMEnum {\r\n    CSM_LEVEL_COUNT = 4,\r\n    CSM_VIEW_DIR_0_OFFSET = 0,\r\n    CSM_VIEW_DIR_1_OFFSET = CSM_VIEW_DIR_0_OFFSET + 4 * CSM_LEVEL_COUNT,\r\n    CSM_VIEW_DIR_2_OFFSET = CSM_VIEW_DIR_1_OFFSET + 4 * CSM_LEVEL_COUNT,\r\n    CSM_ATLAS_OFFSET = CSM_VIEW_DIR_2_OFFSET + 4 * CSM_LEVEL_COUNT,\r\n    MAT_CSM_VIEW_PROJ_OFFSET = CSM_ATLAS_OFFSET + 4 * CSM_LEVEL_COUNT,\r\n    CSM_PROJ_DEPTH_INFO_OFFSET = MAT_CSM_VIEW_PROJ_OFFSET + 16 * CSM_LEVEL_COUNT,\r\n    CSM_PROJ_INFO_OFFSET = CSM_PROJ_DEPTH_INFO_OFFSET + 4 * CSM_LEVEL_COUNT,\r\n    CSM_SPLITS_INFO_OFFSET = CSM_PROJ_INFO_OFFSET + 4 * CSM_LEVEL_COUNT,\r\n    COUNT = CSM_SPLITS_INFO_OFFSET + 4,\r\n    SIZE = COUNT * 4,\r\n}\r\n\r\n/**\r\n * @en The uniform buffer object only for dir csm shadow(level: 1 ~ 4)\r\n * @zh 级联阴影使用的UBO\r\n */\r\nexport class UBOCSM {\r\n    public static readonly CSM_LEVEL_COUNT = UBOCSMEnum.CSM_LEVEL_COUNT;\r\n    public static readonly CSM_VIEW_DIR_0_OFFSET = UBOCSMEnum.CSM_VIEW_DIR_0_OFFSET;\r\n    public static readonly CSM_VIEW_DIR_1_OFFSET = UBOCSMEnum.CSM_VIEW_DIR_1_OFFSET;\r\n    public static readonly CSM_VIEW_DIR_2_OFFSET = UBOCSMEnum.CSM_VIEW_DIR_2_OFFSET;\r\n    public static readonly CSM_ATLAS_OFFSET = UBOCSMEnum.CSM_ATLAS_OFFSET;\r\n    public static readonly MAT_CSM_VIEW_PROJ_OFFSET = UBOCSMEnum.MAT_CSM_VIEW_PROJ_OFFSET;\r\n    public static readonly CSM_PROJ_DEPTH_INFO_OFFSET = UBOCSMEnum.CSM_PROJ_DEPTH_INFO_OFFSET;\r\n    public static readonly CSM_PROJ_INFO_OFFSET = UBOCSMEnum.CSM_PROJ_INFO_OFFSET;\r\n    public static readonly CSM_SPLITS_INFO_OFFSET = UBOCSMEnum.CSM_SPLITS_INFO_OFFSET;\r\n    public static readonly COUNT: number = UBOCSMEnum.COUNT;\r\n    public static readonly SIZE = UBOCSMEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCCSM';\r\n    public static readonly BINDING = PipelineGlobalBindings.UBO_CSM;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCSM.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCSM.BINDING, UBOCSM.NAME, [\r\n        new Uniform('cc_csmViewDir0', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_csmViewDir1', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_csmViewDir2', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_csmAtlas', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_matCSMViewProj', Type.MAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_csmProjDepthInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_csmProjInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT),\r\n        new Uniform('cc_csmSplitsInfo', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nglobalDescriptorSetLayout.layouts[UBOCSM.NAME] = UBOCSM.LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UBOCSM.BINDING] = UBOCSM.DESCRIPTOR;\r\n\r\n/* eslint-disable max-len */\r\n\r\n/**\r\n * @en The sampler for Main light shadow map\r\n * @zh 主光源阴影纹理采样器\r\n */\r\nconst UNIFORM_SHADOWMAP_NAME = 'cc_shadowMap';\r\nexport const UNIFORM_SHADOWMAP_BINDING = PipelineGlobalBindings.SAMPLER_SHADOWMAP;\r\nconst UNIFORM_SHADOWMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SHADOWMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);\r\nconst UNIFORM_SHADOWMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SHADOWMAP_NAME, Type.SAMPLER2D, 1);\r\nglobalDescriptorSetLayout.layouts[UNIFORM_SHADOWMAP_NAME] = UNIFORM_SHADOWMAP_LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UNIFORM_SHADOWMAP_BINDING] = UNIFORM_SHADOWMAP_DESCRIPTOR;\r\n\r\nconst UNIFORM_ENVIRONMENT_NAME = 'cc_environment';\r\nexport const UNIFORM_ENVIRONMENT_BINDING = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;\r\nconst UNIFORM_ENVIRONMENT_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_ENVIRONMENT_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);\r\nconst UNIFORM_ENVIRONMENT_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_ENVIRONMENT_BINDING, UNIFORM_ENVIRONMENT_NAME, Type.SAMPLER_CUBE, 1);\r\nglobalDescriptorSetLayout.layouts[UNIFORM_ENVIRONMENT_NAME] = UNIFORM_ENVIRONMENT_LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UNIFORM_ENVIRONMENT_BINDING] = UNIFORM_ENVIRONMENT_DESCRIPTOR;\r\n\r\nconst UNIFORM_DIFFUSEMAP_NAME = 'cc_diffuseMap';\r\nexport const UNIFORM_DIFFUSEMAP_BINDING = PipelineGlobalBindings.SAMPLER_DIFFUSEMAP;\r\nconst UNIFORM_DIFFUSEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_DIFFUSEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);\r\nconst UNIFORM_DIFFUSEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_DIFFUSEMAP_BINDING, UNIFORM_DIFFUSEMAP_NAME, Type.SAMPLER_CUBE, 1);\r\nglobalDescriptorSetLayout.layouts[UNIFORM_DIFFUSEMAP_NAME] = UNIFORM_DIFFUSEMAP_LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UNIFORM_DIFFUSEMAP_BINDING] = UNIFORM_DIFFUSEMAP_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for spot light shadow map\r\n * @zh 聚光灯阴影纹理采样器\r\n */\r\nconst UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME = 'cc_spotShadowMap';\r\nexport const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING = PipelineGlobalBindings.SAMPLER_SPOT_SHADOW_MAP;\r\nconst UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);\r\nconst UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME, Type.SAMPLER2D, 1);\r\nglobalDescriptorSetLayout.layouts[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT;\r\nglobalDescriptorSetLayout.bindings[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR;\r\n\r\nexport enum UBOLocalEnum {\r\n    MAT_WORLD_OFFSET = 0,\r\n    MAT_WORLD_IT_OFFSET = MAT_WORLD_OFFSET + 16,\r\n    LIGHTINGMAP_UVPARAM = MAT_WORLD_IT_OFFSET + 16,\r\n    LOCAL_SHADOW_BIAS = LIGHTINGMAP_UVPARAM + 4,\r\n    REFLECTION_PROBE_DATA1 = LOCAL_SHADOW_BIAS + 4,\r\n    REFLECTION_PROBE_DATA2 = REFLECTION_PROBE_DATA1 + 4,\r\n    REFLECTION_PROBE_BLEND_DATA1 = REFLECTION_PROBE_DATA2 + 4,\r\n    REFLECTION_PROBE_BLEND_DATA2 = REFLECTION_PROBE_BLEND_DATA1 + 4,\r\n    COUNT = REFLECTION_PROBE_BLEND_DATA2 + 4,\r\n    SIZE = COUNT * 4,\r\n    BINDING = ModelLocalBindings.UBO_LOCAL,\r\n}\r\n\r\n/**\r\n * @en The local uniform buffer object\r\n * @zh 本地 UBO。\r\n */\r\nexport class UBOLocal {\r\n    public static readonly MAT_WORLD_OFFSET = UBOLocalEnum.MAT_WORLD_OFFSET;\r\n    public static readonly MAT_WORLD_IT_OFFSET = UBOLocalEnum.MAT_WORLD_IT_OFFSET;\r\n    public static readonly LIGHTINGMAP_UVPARAM = UBOLocalEnum.LIGHTINGMAP_UVPARAM;\r\n    public static readonly LOCAL_SHADOW_BIAS = UBOLocalEnum.LOCAL_SHADOW_BIAS;\r\n    public static readonly REFLECTION_PROBE_DATA1 = UBOLocalEnum.REFLECTION_PROBE_DATA1;\r\n    public static readonly REFLECTION_PROBE_DATA2 = UBOLocalEnum.REFLECTION_PROBE_DATA2;\r\n    public static readonly REFLECTION_PROBE_BLEND_DATA1 = UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA1;\r\n    public static readonly REFLECTION_PROBE_BLEND_DATA2 = UBOLocalEnum.REFLECTION_PROBE_BLEND_DATA2;\r\n    public static readonly COUNT = UBOLocalEnum.COUNT;\r\n    public static readonly SIZE = UBOLocalEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCLocal';\r\n    public static readonly BINDING = UBOLocalEnum.BINDING;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOLocalEnum.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.FRAGMENT | ShaderStageFlagBit.COMPUTE,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocalEnum.BINDING, UBOLocal.NAME, [\r\n        new Uniform('cc_matWorld', Type.MAT4, 1),\r\n        new Uniform('cc_matWorldIT', Type.MAT4, 1),\r\n        new Uniform('cc_lightingMapUVParam', Type.FLOAT4, 1),\r\n        new Uniform('cc_localShadowBias', Type.FLOAT4, 1),\r\n        new Uniform('cc_reflectionProbeData1', Type.FLOAT4, 1),\r\n        new Uniform('cc_reflectionProbeData2', Type.FLOAT4, 1),\r\n        new Uniform('cc_reflectionProbeBlendData1', Type.FLOAT4, 1),\r\n        new Uniform('cc_reflectionProbeBlendData2', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOLocal.NAME] = UBOLocal.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOLocalEnum.BINDING] = UBOLocal.DESCRIPTOR;\r\n\r\n/**\r\n * @en The world bound uniform buffer object\r\n * @zh 世界空间包围盒 UBO。\r\n */\r\nexport class UBOWorldBound {\r\n    public static readonly WORLD_BOUND_CENTER = 0;\r\n    public static readonly WORLD_BOUND_HALF_EXTENTS = UBOWorldBound.WORLD_BOUND_CENTER + 4;\r\n    public static readonly COUNT = UBOWorldBound.WORLD_BOUND_HALF_EXTENTS + 4;\r\n    public static readonly SIZE = UBOWorldBound.COUNT * 4;\r\n\r\n    public static readonly NAME = 'CCWorldBound';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_LOCAL;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOWorldBound.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOWorldBound.BINDING, UBOWorldBound.NAME, [\r\n        new Uniform('cc_worldBoundCenter', Type.FLOAT4, 1),\r\n        new Uniform('cc_worldBoundHalfExtents', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOWorldBound.NAME] = UBOWorldBound.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOWorldBound.BINDING] = UBOWorldBound.DESCRIPTOR;\r\n\r\nexport const INST_MAT_WORLD = 'a_matWorld0';\r\nexport const INST_SH = 'a_sh_linear_const_r';\r\n\r\nexport class UBOLocalBatched {\r\n    public static readonly BATCHING_COUNT = 10;\r\n    public static readonly MAT_WORLDS_OFFSET = 0;\r\n    public static readonly COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;\r\n    public static readonly SIZE = UBOLocalBatched.COUNT * 4;\r\n\r\n    public static readonly NAME = 'CCLocalBatched';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_LOCAL;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOLocalBatched.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, UBOLocalBatched.NAME, [\r\n        new Uniform('cc_matWorlds', Type.MAT4, UBOLocalBatched.BATCHING_COUNT),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOLocalBatched.NAME] = UBOLocalBatched.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOLocalBatched.BINDING] = UBOLocalBatched.DESCRIPTOR;\r\n\r\nexport enum UBOForwardLightEnum {\r\n    LIGHTS_PER_PASS = 1,\r\n    LIGHT_POS_OFFSET = 0,\r\n    LIGHT_COLOR_OFFSET = LIGHT_POS_OFFSET + LIGHTS_PER_PASS * 4,\r\n    LIGHT_SIZE_RANGE_ANGLE_OFFSET = LIGHT_COLOR_OFFSET + LIGHTS_PER_PASS * 4,\r\n    LIGHT_DIR_OFFSET = LIGHT_SIZE_RANGE_ANGLE_OFFSET + LIGHTS_PER_PASS * 4,\r\n    LIGHT_BOUNDING_SIZE_VS_OFFSET = LIGHT_DIR_OFFSET + LIGHTS_PER_PASS * 4,\r\n    COUNT = LIGHT_BOUNDING_SIZE_VS_OFFSET + LIGHTS_PER_PASS * 4,\r\n    SIZE = COUNT * 4,\r\n}\r\n\r\n/**\r\n * @en The uniform buffer object for forward lighting\r\n * @zh 前向灯光 UBO。\r\n */\r\nexport class UBOForwardLight {\r\n    public static readonly LIGHTS_PER_PASS = UBOForwardLightEnum.LIGHTS_PER_PASS;\r\n\r\n    public static readonly LIGHT_POS_OFFSET = UBOForwardLightEnum.LIGHT_POS_OFFSET;\r\n    public static readonly LIGHT_COLOR_OFFSET = UBOForwardLightEnum.LIGHT_COLOR_OFFSET;\r\n    public static readonly LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLightEnum.LIGHT_SIZE_RANGE_ANGLE_OFFSET;\r\n    public static readonly LIGHT_DIR_OFFSET = UBOForwardLightEnum.LIGHT_DIR_OFFSET;\r\n    public static readonly LIGHT_BOUNDING_SIZE_VS_OFFSET = UBOForwardLightEnum.LIGHT_BOUNDING_SIZE_VS_OFFSET;\r\n    public static readonly COUNT = UBOForwardLightEnum.COUNT;\r\n    public static readonly SIZE = UBOForwardLightEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCForwardLight';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_FORWARD_LIGHTS;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOForwardLight.BINDING,\r\n        DescriptorType.DYNAMIC_UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.FRAGMENT,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, UBOForwardLight.NAME, [\r\n        new Uniform('cc_lightPos', Type.FLOAT4, UBOForwardLightEnum.LIGHTS_PER_PASS),\r\n        new Uniform('cc_lightColor', Type.FLOAT4, UBOForwardLightEnum.LIGHTS_PER_PASS),\r\n        new Uniform('cc_lightSizeRangeAngle', Type.FLOAT4, UBOForwardLightEnum.LIGHTS_PER_PASS),\r\n        new Uniform('cc_lightDir', Type.FLOAT4, UBOForwardLightEnum.LIGHTS_PER_PASS),\r\n        new Uniform('cc_lightBoundingSizeVS', Type.FLOAT4, UBOForwardLightEnum.LIGHTS_PER_PASS),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOForwardLight.NAME] = UBOForwardLight.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOForwardLight.BINDING] = UBOForwardLight.DESCRIPTOR;\r\n\r\nexport class UBODeferredLight {\r\n    public static readonly LIGHTS_PER_PASS = 10;\r\n}\r\n\r\nexport const JOINT_UNIFORM_CAPACITY = 30;\r\n\r\n/**\r\n * @en The uniform buffer object for skinning texture\r\n * @zh 骨骼贴图 UBO。\r\n */\r\nexport class UBOSkinningTexture {\r\n    public static readonly JOINTS_TEXTURE_INFO_OFFSET = 0;\r\n    public static readonly COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;\r\n    public static readonly SIZE = UBOSkinningTexture.COUNT * 4;\r\n\r\n    public static readonly NAME = 'CCSkinningTexture';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOSkinningTexture.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, UBOSkinningTexture.NAME, [\r\n        new Uniform('cc_jointTextureInfo', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOSkinningTexture.NAME] = UBOSkinningTexture.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOSkinningTexture.BINDING] = UBOSkinningTexture.DESCRIPTOR;\r\n\r\nexport class UBOSkinningAnimation {\r\n    public static readonly JOINTS_ANIM_INFO_OFFSET = 0;\r\n    public static readonly COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;\r\n    public static readonly SIZE = UBOSkinningAnimation.COUNT * 4;\r\n\r\n    public static readonly NAME = 'CCSkinningAnimation';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_SKINNING_ANIMATION;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOSkinningAnimation.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, UBOSkinningAnimation.NAME, [\r\n        new Uniform('cc_jointAnimInfo', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOSkinningAnimation.NAME] = UBOSkinningAnimation.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOSkinningAnimation.BINDING] = UBOSkinningAnimation.DESCRIPTOR;\r\n\r\nexport const INST_JOINT_ANIM_INFO = 'a_jointAnimInfo';\r\nexport class UBOSkinning {\r\n    private static _jointUniformCapacity = 0;\r\n    public static get JOINT_UNIFORM_CAPACITY (): number { return UBOSkinning._jointUniformCapacity; }\r\n    private static _count = 0;\r\n    public static get COUNT (): number { return UBOSkinning._count; }\r\n    private static _size = 0;\r\n    public static get SIZE (): number { return UBOSkinning._size; }\r\n\r\n    public static readonly NAME = 'CCSkinning';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOSkinning.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, UBOSkinning.NAME, [\r\n        new Uniform('cc_joints', Type.FLOAT4, 1),\r\n    ], 1);\r\n\r\n    /**\r\n     * @internal This method only used init UBOSkinning configure.\r\n    */\r\n    public static initLayout (capacity: number): void {\r\n        UBOSkinning._jointUniformCapacity = capacity;\r\n        UBOSkinning._count = capacity * 12;\r\n        UBOSkinning._size = UBOSkinning._count * 4;\r\n        UBOSkinning.LAYOUT.members[0].count = capacity * 3;\r\n    }\r\n}\r\n\r\n/**\r\n * @internal This method only used to init localDescriptorSetLayout.layouts[UBOSkinning.NAME]\r\n * @engineInternal\r\n*/\r\nexport function localDescriptorSetLayout_ResizeMaxJoints (maxCount: number): void {\r\n    UBOSkinning.initLayout(maxCount);\r\n    localDescriptorSetLayout.layouts[UBOSkinning.NAME] = UBOSkinning.LAYOUT;\r\n    localDescriptorSetLayout.bindings[UBOSkinning.BINDING] = UBOSkinning.DESCRIPTOR;\r\n}\r\n\r\nexport enum UBOMorphEnum {\r\n    MAX_MORPH_TARGET_COUNT = 60,\r\n    OFFSET_OF_WEIGHTS = 0,\r\n    OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * MAX_MORPH_TARGET_COUNT,\r\n    OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4,\r\n    OFFSET_OF_VERTICES_COUNT = OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT + 4,\r\n    COUNT_BASE_4_BYTES = 4 * (MAX_MORPH_TARGET_COUNT / 4) + 4,\r\n    SIZE = COUNT_BASE_4_BYTES * 4,\r\n}\r\n\r\n/**\r\n * @en The uniform buffer object for morph setting\r\n * @zh 形变配置的 UBO\r\n */\r\nexport class UBOMorph {\r\n    public static readonly MAX_MORPH_TARGET_COUNT = UBOMorphEnum.MAX_MORPH_TARGET_COUNT;\r\n    public static readonly OFFSET_OF_WEIGHTS = UBOMorphEnum.OFFSET_OF_WEIGHTS;\r\n    public static readonly OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = UBOMorphEnum.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH;\r\n    public static readonly OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorphEnum.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT;\r\n    public static readonly OFFSET_OF_VERTICES_COUNT = UBOMorphEnum.OFFSET_OF_VERTICES_COUNT;\r\n    public static readonly COUNT_BASE_4_BYTES = UBOMorphEnum.COUNT_BASE_4_BYTES;\r\n    public static readonly SIZE = UBOMorphEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCMorph';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_MORPH;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOMorph.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, UBOMorph.NAME, [\r\n        new Uniform('cc_displacementWeights', Type.FLOAT4, UBOMorphEnum.MAX_MORPH_TARGET_COUNT / 4),\r\n        new Uniform('cc_displacementTextureInfo', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOMorph.NAME] = UBOMorph.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOMorph.BINDING] = UBOMorph.DESCRIPTOR;\r\n\r\n// UI local uniform UBO\r\nexport class UBOUILocal { // pre one vec4\r\n    private constructor () {}\r\n    public static readonly NAME = 'CCUILocal';\r\n    public static readonly BINDING = ModelLocalBindings.UBO_UI_LOCAL;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOUILocal.BINDING,\r\n        DescriptorType.DYNAMIC_UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.VERTEX,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOUILocal.BINDING, UBOUILocal.NAME, [\r\n        new Uniform('cc_local_data', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOUILocal.NAME] = UBOUILocal.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOUILocal.BINDING] = UBOUILocal.DESCRIPTOR;\r\n\r\nexport enum UBOSHEnum {\r\n    SH_LINEAR_CONST_R_OFFSET = 0,\r\n    SH_LINEAR_CONST_G_OFFSET = SH_LINEAR_CONST_R_OFFSET + 4,\r\n    SH_LINEAR_CONST_B_OFFSET = SH_LINEAR_CONST_G_OFFSET + 4,\r\n    SH_QUADRATIC_R_OFFSET = SH_LINEAR_CONST_B_OFFSET + 4,\r\n    SH_QUADRATIC_G_OFFSET = SH_QUADRATIC_R_OFFSET + 4,\r\n    SH_QUADRATIC_B_OFFSET = SH_QUADRATIC_G_OFFSET + 4,\r\n    SH_QUADRATIC_A_OFFSET = SH_QUADRATIC_B_OFFSET + 4,\r\n    COUNT = SH_QUADRATIC_A_OFFSET + 4,\r\n    SIZE = COUNT * 4,\r\n    BINDING = ModelLocalBindings.UBO_SH,\r\n}\r\n\r\n/**\r\n * @en The SH uniform buffer object\r\n * @zh 球谐 UBO。\r\n */\r\nexport class UBOSH {\r\n    public static readonly SH_LINEAR_CONST_R_OFFSET = UBOSHEnum.SH_LINEAR_CONST_R_OFFSET;\r\n    public static readonly SH_LINEAR_CONST_G_OFFSET = UBOSHEnum.SH_LINEAR_CONST_G_OFFSET;\r\n    public static readonly SH_LINEAR_CONST_B_OFFSET = UBOSHEnum.SH_LINEAR_CONST_B_OFFSET;\r\n    public static readonly SH_QUADRATIC_R_OFFSET = UBOSHEnum.SH_QUADRATIC_R_OFFSET;\r\n    public static readonly SH_QUADRATIC_G_OFFSET = UBOSHEnum.SH_QUADRATIC_G_OFFSET;\r\n    public static readonly SH_QUADRATIC_B_OFFSET = UBOSHEnum.SH_QUADRATIC_B_OFFSET;\r\n    public static readonly SH_QUADRATIC_A_OFFSET = UBOSHEnum.SH_QUADRATIC_A_OFFSET;\r\n    public static readonly COUNT = UBOSHEnum.COUNT;\r\n    public static readonly SIZE = UBOSHEnum.SIZE;\r\n\r\n    public static readonly NAME = 'CCSH';\r\n    public static readonly BINDING = UBOSHEnum.BINDING;\r\n    public static readonly DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n        UBOSHEnum.BINDING,\r\n        DescriptorType.UNIFORM_BUFFER,\r\n        1,\r\n        ShaderStageFlagBit.FRAGMENT,\r\n        MemoryAccessBit.READ_ONLY,\r\n        ViewDimension.BUFFER,\r\n    );\r\n    public static readonly LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSHEnum.BINDING, UBOSH.NAME, [\r\n        new Uniform('cc_sh_linear_const_r', Type.FLOAT4, 1),\r\n        new Uniform('cc_sh_linear_const_g', Type.FLOAT4, 1),\r\n        new Uniform('cc_sh_linear_const_b', Type.FLOAT4, 1),\r\n        new Uniform('cc_sh_quadratic_r', Type.FLOAT4, 1),\r\n        new Uniform('cc_sh_quadratic_g', Type.FLOAT4, 1),\r\n        new Uniform('cc_sh_quadratic_b', Type.FLOAT4, 1),\r\n        new Uniform('cc_sh_quadratic_a', Type.FLOAT4, 1),\r\n    ], 1);\r\n}\r\nlocalDescriptorSetLayout.layouts[UBOSH.NAME] = UBOSH.LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UBOSHEnum.BINDING] = UBOSH.DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for joint texture\r\n * @zh 骨骼纹理采样器。\r\n */\r\nconst UNIFORM_JOINT_TEXTURE_NAME = 'cc_jointTexture';\r\nexport const UNIFORM_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;\r\nconst UNIFORM_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_JOINT_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.VERTEX,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_JOINT_TEXTURE_BINDING, UNIFORM_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_JOINT_TEXTURE_NAME] = UNIFORM_JOINT_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_JOINT_TEXTURE_BINDING] = UNIFORM_JOINT_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for real-time joint texture\r\n * @zh 实时骨骼纹理采样器。\r\n */\r\nconst UNIFORM_REALTIME_JOINT_TEXTURE_NAME = 'cc_realtimeJoint';\r\nexport const UNIFORM_REALTIME_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;\r\nconst UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_REALTIME_JOINT_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.VERTEX,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, UNIFORM_REALTIME_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_REALTIME_JOINT_TEXTURE_NAME] = UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_REALTIME_JOINT_TEXTURE_BINDING] = UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for morph texture of position\r\n * @zh 位置形变纹理采样器。\r\n */\r\nconst UNIFORM_POSITION_MORPH_TEXTURE_NAME = 'cc_PositionDisplacements';\r\nexport const UNIFORM_POSITION_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_POSITION;\r\nconst UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_POSITION_MORPH_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.VERTEX,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_POSITION_MORPH_TEXTURE_BINDING, UNIFORM_POSITION_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_POSITION_MORPH_TEXTURE_NAME] = UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_POSITION_MORPH_TEXTURE_BINDING] = UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for morph texture of normal\r\n * @zh 法线形变纹理采样器。\r\n */\r\nconst UNIFORM_NORMAL_MORPH_TEXTURE_NAME = 'cc_NormalDisplacements';\r\nexport const UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_NORMAL;\r\nconst UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_NORMAL_MORPH_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.VERTEX,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_NORMAL_MORPH_TEXTURE_BINDING,\r\n    UNIFORM_NORMAL_MORPH_TEXTURE_NAME,\r\n    Type.SAMPLER2D,\r\n    1,\r\n);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_NORMAL_MORPH_TEXTURE_NAME] = UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_NORMAL_MORPH_TEXTURE_BINDING] = UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for morph texture of tangent\r\n * @zh 切线形变纹理采样器。\r\n */\r\nconst UNIFORM_TANGENT_MORPH_TEXTURE_NAME = 'cc_TangentDisplacements';\r\nexport const UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_TANGENT;\r\nconst UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_TANGENT_MORPH_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.VERTEX,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_TANGENT_MORPH_TEXTURE_BINDING,\r\n    UNIFORM_TANGENT_MORPH_TEXTURE_NAME,\r\n    Type.SAMPLER2D,\r\n    1,\r\n);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_TANGENT_MORPH_TEXTURE_NAME] = UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_TANGENT_MORPH_TEXTURE_BINDING] = UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for light map texture\r\n * @zh 光照图纹理采样器。\r\n */\r\nconst UNIFORM_LIGHTMAP_TEXTURE_NAME = 'cc_lightingMap';\r\nexport const UNIFORM_LIGHTMAP_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_LIGHTMAP;\r\nconst UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_LIGHTMAP_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.FRAGMENT,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_LIGHTMAP_TEXTURE_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_LIGHTMAP_TEXTURE_BINDING,\r\n    UNIFORM_LIGHTMAP_TEXTURE_NAME,\r\n    Type.SAMPLER2D,\r\n    1,\r\n);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_LIGHTMAP_TEXTURE_NAME] = UNIFORM_LIGHTMAP_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_LIGHTMAP_TEXTURE_BINDING] = UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for UI sprites.\r\n * @zh UI 精灵纹理采样器。\r\n */\r\nconst UNIFORM_SPRITE_TEXTURE_NAME = 'cc_spriteTexture';\r\nexport const UNIFORM_SPRITE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_SPRITE;\r\nconst UNIFORM_SPRITE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_SPRITE_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.FRAGMENT,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_SPRITE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_SPRITE_TEXTURE_BINDING, UNIFORM_SPRITE_TEXTURE_NAME, Type.SAMPLER2D, 1);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_SPRITE_TEXTURE_NAME] = UNIFORM_SPRITE_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_SPRITE_TEXTURE_BINDING] = UNIFORM_SPRITE_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for reflection probe cubemap\r\n * @zh 反射探针立方体贴图纹理采样器。\r\n */\r\nconst UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME = 'cc_reflectionProbeCubemap';\r\nexport const UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_CUBE;\r\nconst UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.FRAGMENT,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEXCUBE,\r\n);\r\nconst UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING,\r\n    UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME,\r\n    Type.SAMPLER_CUBE,\r\n    1,\r\n);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME] = UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING] = UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for reflection probe planar reflection\r\n * @zh 反射探针平面反射贴图纹理采样器。\r\n */\r\nconst UNIFORM_REFLECTION_PROBE_TEXTURE_NAME = 'cc_reflectionProbePlanarMap';\r\nexport const UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_PLANAR;\r\nconst UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.FRAGMENT,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING,\r\n    UNIFORM_REFLECTION_PROBE_TEXTURE_NAME,\r\n    Type.SAMPLER2D,\r\n    1,\r\n);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_TEXTURE_NAME] = UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING] = UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for reflection probe data map\r\n * @zh 反射探针数据贴图采样器。\r\n */\r\nconst UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME = 'cc_reflectionProbeDataMap';\r\nexport const UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_DATA_MAP;\r\nconst UNIFORM_REFLECTION_PROBE_DATA_MAP_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.FRAGMENT,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEX2D,\r\n);\r\nconst UNIFORM_REFLECTION_PROBE_DATA_MAP_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING,\r\n    UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME,\r\n    Type.SAMPLER2D,\r\n    1,\r\n);\r\nlocalDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME] = UNIFORM_REFLECTION_PROBE_DATA_MAP_LAYOUT;\r\nlocalDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING] = UNIFORM_REFLECTION_PROBE_DATA_MAP_DESCRIPTOR;\r\n\r\n/**\r\n * @en The sampler for reflection probe cubemap for blend.\r\n * @zh 用于blend的反射探针立方体贴图纹理采样器。\r\n */\r\nconst UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_NAME = 'cc_reflectionProbeBlendCubemap';\r\nexport const UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_DATA_MAP + 1; // SAMPLER_REFLECTION_PROBE_BLEND_CUBE\r\nconst UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(\r\n    UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING,\r\n    DescriptorType.SAMPLER_TEXTURE,\r\n    1,\r\n    ShaderStageFlagBit.FRAGMENT,\r\n    MemoryAccessBit.READ_ONLY,\r\n    ViewDimension.TEXCUBE,\r\n);\r\nconst UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_LAYOUT = new UniformSamplerTexture(\r\n    SetIndex.LOCAL,\r\n    UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING,\r\n    UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_NAME,\r\n    Type.SAMPLER_CUBE,\r\n    1,\r\n);\r\n/**\r\n * @engineInternal\r\n */\r\nexport const ENABLE_PROBE_BLEND = false;\r\nif (ENABLE_PROBE_BLEND) {\r\n    localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_NAME] = UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_LAYOUT;\r\n    localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING] = UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_DESCRIPTOR;\r\n}\r\n\r\nexport const CAMERA_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR,\r\n    Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]);\r\n\r\nexport const CAMERA_EDITOR_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.PROFILER]);\r\n\r\nexport const MODEL_ALWAYS_MASK = Layers.Enum.ALL;\r\n\r\n/**\r\n * @en Does the device support single-channeled half float texture? (for both color attachment and sampling)\r\n * @zh 当前设备是否支持单通道半浮点贴图？（颜色输出和采样）\r\n */\r\nexport function supportsR16HalfFloatTexture (device: Device): boolean {\r\n    return (device.getFormatFeatures(Format.R16F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE))\r\n        === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);\r\n}\r\n\r\nlet dftShadowTexture: Texture;\r\nexport function getDefaultShadowTexture (device: Device): Texture {\r\n    if (dftShadowTexture) return dftShadowTexture;\r\n    const texInfo = new TextureInfo(\r\n        TextureType.TEX2D,\r\n        TextureUsageBit.NONE,\r\n        supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8,\r\n        16,\r\n        16,\r\n        TextureFlagBit.NONE,\r\n        1,\r\n        1,\r\n        SampleCount.X1,\r\n        1,\r\n    );\r\n    dftShadowTexture = device.createTexture(texInfo);\r\n    return dftShadowTexture;\r\n}\r\n\r\n/**\r\n * @en Does the device support single-channeled float texture? (for both color attachment and sampling)\r\n * @zh 当前设备是否支持单通道浮点贴图？（颜色输出和采样）\r\n */\r\nexport function supportsR32FloatTexture (device: Device): boolean {\r\n    return (device.getFormatFeatures(Format.R32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE))\r\n        === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)\r\n        && !(device.gfxAPI === API.WEBGL); // wegl 1  Single-channel float type is not supported under webgl1, so it is excluded\r\n}\r\n\r\n/**\r\n * @en Does the device support 4-channeled float texture? (for both color attachment and sampling)\r\n * @zh 当前设备是否支持4通道浮点贴图？（颜色输出和采样）\r\n */\r\nexport function supportsRGBA16HalfFloatTexture (device: Device): boolean {\r\n    // WebGL: https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float#browser_compatibility\r\n    // GLES2: https://registry.khronos.org/OpenGL/extensions/OES/OES_texture_float.txt\r\n    return (device.getFormatFeatures(Format.RGBA16F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE))\r\n        === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);\r\n}\r\n\r\n/**\r\n * @en Does the device support 4-channeled float texture? (for both color attachment and sampling)\r\n * @zh 当前设备是否支持4通道浮点贴图？（颜色输出和采样）\r\n */\r\nexport function supportsRGBA32FloatTexture (device: Device): boolean {\r\n    // WebGL: https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float#browser_compatibility\r\n    // GLES2: https://registry.khronos.org/OpenGL/extensions/OES/OES_texture_float.txt\r\n    return (device.getFormatFeatures(Format.RGBA32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE))\r\n        === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);\r\n}\r\n\r\nexport function isEnableEffect (): boolean {\r\n    return !!(cclegacy.rendering && cclegacy.rendering.enableEffectImport);\r\n}\r\n\r\n/* eslint-enable max-len */\r\n\r\nexport function getPassPool (): RecyclePool<IRenderPass> {\r\n    return new RecyclePool<IRenderPass>((): {\r\n                priority: number;\r\n                hash: number;\r\n                depth: number;\r\n                shaderId: number;\r\n                subModel: any;\r\n                passIdx: number;\r\n            } => ({\r\n        priority: 0,\r\n        hash: 0,\r\n        depth: 0,\r\n        shaderId: 0,\r\n        subModel: null!,\r\n        passIdx: 0,\r\n    }), 64);\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Shader, RenderPass, InputAssembler, Device, PipelineState, InputState, PipelineStateInfo } from '../gfx';\r\nimport { Pass } from '../render-scene/core/pass';\r\n\r\nexport class PipelineStateManager {\r\n    private constructor () {}\r\n\r\n    private static _PSOHashMap: Map<number, PipelineState> = new Map<number, PipelineState>();\r\n\r\n    // pass is only needed on TS.\r\n    static getOrCreatePipelineState (device: Device, pass: Pass, shader: Shader, renderPass: RenderPass, ia: InputAssembler): PipelineState {\r\n        const hash1 = pass.hash;\r\n        const hash2 = renderPass.hash;\r\n        const hash3 = ia.attributesHash;\r\n        const hash4 = shader.typedID;\r\n\r\n        const newHash = hash1 ^ hash2 ^ hash3 ^ hash4;\r\n        let pso = this._PSOHashMap.get(newHash);\r\n        if (!pso) {\r\n            const pipelineLayout = pass.pipelineLayout;\r\n            const inputState = new InputState(ia.attributes);\r\n            const psoInfo = new PipelineStateInfo(\r\n                shader,\r\n                pipelineLayout,\r\n                renderPass,\r\n                inputState,\r\n                pass.rasterizerState,\r\n                pass.depthStencilState,\r\n                pass.blendState,\r\n                pass.primitive,\r\n                pass.dynamicStates,\r\n            );\r\n            pso = device.createPipelineState(psoInfo);\r\n            this._PSOHashMap.set(newHash, pso);\r\n        }\r\n\r\n        return pso;\r\n    }\r\n}\r\n"],"names":["layerList","NONE","IGNORE_RAYCAST","GIZMOS","EDITOR","UI_3D","SCENE_GIZMO","UI_2D","PROFILER","DEFAULT","ALL","Layers","init","userLayers","settings","querySettings","SettingsCategory","ENGINE","i","length","layer","addLayer","name","bit","makeMaskInclude","includes","reduce","mask","inc","makeMaskExclude","excludes","bitNum","undefined","warnID","val","assertIsTrue","Enum","getError","js","String","BitMask","update","deleteLayer","nameToLayer","log2","layerToName","_extends","legacyCC","RenderPassStage","RenderPriority","PIPELINE_FLOW_MAIN","exports","PIPELINE_FLOW_FORWARD","PIPELINE_FLOW_SHADOW","cclegacy","PipelineGlobalBindings","globalDescriptorSetLayout","bindings","layouts","localDescriptorSetLayout","ModelLocalBindings","GLOBAL_UBO_COUNT","SAMPLER_SHADOWMAP","GLOBAL_SAMPLER_COUNT","COUNT","SetIndex","LOCAL_UBO_COUNT","SAMPLER_JOINTS","LOCAL_SAMPLER_COUNT","LOCAL_STORAGE_IMAGE_COUNT","bindingMappingInfo","UBOGlobalEnum","BindingMappingInfo","UBOCameraEnum","UBOGlobal","_class","TIME_OFFSET","SCREEN_SIZE_OFFSET","NATIVE_SIZE_OFFSET","PROBE_INFO_OFFSET","DEBUG_VIEW_MODE_OFFSET","SIZE","NAME","BINDING","UBO_GLOBAL","DESCRIPTOR","DescriptorSetLayoutBinding","DescriptorType","UNIFORM_BUFFER","ShaderStageFlagBit","LAYOUT","UniformBlock","GLOBAL","Uniform","Type","FLOAT4","UBOShadowEnum","UBOCamera","_class2","MAT_VIEW_OFFSET","MAT_VIEW_INV_OFFSET","MAT_PROJ_OFFSET","MAT_PROJ_INV_OFFSET","MAT_VIEW_PROJ_OFFSET","MAT_VIEW_PROJ_INV_OFFSET","CAMERA_POS_OFFSET","SURFACE_TRANSFORM_OFFSET","SCREEN_SCALE_OFFSET","EXPOSURE_OFFSET","MAIN_LIT_DIR_OFFSET","MAIN_LIT_COLOR_OFFSET","AMBIENT_SKY_OFFSET","AMBIENT_GROUND_OFFSET","GLOBAL_FOG_COLOR_OFFSET","GLOBAL_FOG_BASE_OFFSET","GLOBAL_FOG_ADD_OFFSET","NEAR_FAR_OFFSET","VIEW_PORT_OFFSET","UBO_CAMERA","MAT4","UBOCSMEnum","UBOShadow","_class3","MAT_LIGHT_VIEW_OFFSET","MAT_LIGHT_VIEW_PROJ_OFFSET","SHADOW_INV_PROJ_DEPTH_INFO_OFFSET","SHADOW_PROJ_DEPTH_INFO_OFFSET","SHADOW_PROJ_INFO_OFFSET","SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET","SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET","SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET","SHADOW_COLOR_OFFSET","PLANAR_NORMAL_DISTANCE_INFO_OFFSET","UBO_SHADOW","UBOCSM","_class4","CSM_LEVEL_COUNT","CSM_VIEW_DIR_0_OFFSET","CSM_VIEW_DIR_1_OFFSET","CSM_VIEW_DIR_2_OFFSET","CSM_ATLAS_OFFSET","MAT_CSM_VIEW_PROJ_OFFSET","CSM_PROJ_DEPTH_INFO_OFFSET","CSM_PROJ_INFO_OFFSET","CSM_SPLITS_INFO_OFFSET","UBO_CSM","FRAGMENT","UNIFORM_SHADOWMAP_NAME","UNIFORM_SHADOWMAP_BINDING","UNIFORM_SHADOWMAP_DESCRIPTOR","SAMPLER_TEXTURE","UNIFORM_SHADOWMAP_LAYOUT","UniformSamplerTexture","SAMPLER2D","UNIFORM_ENVIRONMENT_NAME","UNIFORM_ENVIRONMENT_BINDING","SAMPLER_ENVIRONMENT","UNIFORM_ENVIRONMENT_DESCRIPTOR","UNIFORM_ENVIRONMENT_LAYOUT","SAMPLER_CUBE","UNIFORM_DIFFUSEMAP_NAME","UNIFORM_DIFFUSEMAP_BINDING","SAMPLER_DIFFUSEMAP","UNIFORM_DIFFUSEMAP_DESCRIPTOR","UNIFORM_DIFFUSEMAP_LAYOUT","UBOLocalEnum","UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME","UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING","SAMPLER_SPOT_SHADOW_MAP","UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR","UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT","UBO_LOCAL","UBOLocal","_class5","MAT_WORLD_OFFSET","MAT_WORLD_IT_OFFSET","LIGHTINGMAP_UVPARAM","LOCAL_SHADOW_BIAS","REFLECTION_PROBE_DATA1","REFLECTION_PROBE_DATA2","REFLECTION_PROBE_BLEND_DATA1","REFLECTION_PROBE_BLEND_DATA2","VERTEX","COMPUTE","MemoryAccessBit","READ_ONLY","ViewDimension","BUFFER","LOCAL","UBOWorldBound","_class6","WORLD_BOUND_CENTER","WORLD_BOUND_HALF_EXTENTS","UBOForwardLightEnum","INST_MAT_WORLD","INST_SH","UBOLocalBatched","_class7","BATCHING_COUNT","MAT_WORLDS_OFFSET","UBOForwardLight","_class8","LIGHTS_PER_PASS","LIGHT_POS_OFFSET","LIGHT_COLOR_OFFSET","LIGHT_SIZE_RANGE_ANGLE_OFFSET","LIGHT_DIR_OFFSET","LIGHT_BOUNDING_SIZE_VS_OFFSET","UBO_FORWARD_LIGHTS","DYNAMIC_UNIFORM_BUFFER","UBODeferredLight","UBOSkinningTexture","_class10","JOINTS_TEXTURE_INFO_OFFSET","UBO_SKINNING_TEXTURE","UBOSkinningAnimation","_class11","JOINTS_ANIM_INFO_OFFSET","UBO_SKINNING_ANIMATION","UBOMorphEnum","INST_JOINT_ANIM_INFO","UBOSkinning","initLayout","capacity","_jointUniformCapacity","_count","_size","members","count","_createClass","key","get","localDescriptorSetLayout_ResizeMaxJoints","maxCount","_class12","UBOMorph","_class13","MAX_MORPH_TARGET_COUNT","OFFSET_OF_WEIGHTS","OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH","OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT","OFFSET_OF_VERTICES_COUNT","COUNT_BASE_4_BYTES","UBO_MORPH","UBOSHEnum","UBOUILocal","_class14","UBO_UI_LOCAL","UBO_SH","UBOSH","_class15","SH_LINEAR_CONST_R_OFFSET","SH_LINEAR_CONST_G_OFFSET","SH_LINEAR_CONST_B_OFFSET","SH_QUADRATIC_R_OFFSET","SH_QUADRATIC_G_OFFSET","SH_QUADRATIC_B_OFFSET","SH_QUADRATIC_A_OFFSET","UNIFORM_JOINT_TEXTURE_NAME","UNIFORM_JOINT_TEXTURE_BINDING","UNIFORM_JOINT_TEXTURE_DESCRIPTOR","TEX2D","UNIFORM_JOINT_TEXTURE_LAYOUT","UNIFORM_REALTIME_JOINT_TEXTURE_NAME","UNIFORM_REALTIME_JOINT_TEXTURE_BINDING","UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR","UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT","UNIFORM_POSITION_MORPH_TEXTURE_NAME","UNIFORM_POSITION_MORPH_TEXTURE_BINDING","SAMPLER_MORPH_POSITION","UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR","UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT","UNIFORM_NORMAL_MORPH_TEXTURE_NAME","UNIFORM_NORMAL_MORPH_TEXTURE_BINDING","SAMPLER_MORPH_NORMAL","UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR","UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT","UNIFORM_TANGENT_MORPH_TEXTURE_NAME","UNIFORM_TANGENT_MORPH_TEXTURE_BINDING","SAMPLER_MORPH_TANGENT","UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR","UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT","UNIFORM_LIGHTMAP_TEXTURE_NAME","UNIFORM_LIGHTMAP_TEXTURE_BINDING","SAMPLER_LIGHTMAP","UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR","UNIFORM_LIGHTMAP_TEXTURE_LAYOUT","UNIFORM_SPRITE_TEXTURE_NAME","UNIFORM_SPRITE_TEXTURE_BINDING","SAMPLER_SPRITE","UNIFORM_SPRITE_TEXTURE_DESCRIPTOR","UNIFORM_SPRITE_TEXTURE_LAYOUT","UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME","UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING","SAMPLER_REFLECTION_PROBE_CUBE","UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR","TEXCUBE","UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT","UNIFORM_REFLECTION_PROBE_TEXTURE_NAME","UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING","SAMPLER_REFLECTION_PROBE_PLANAR","UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR","UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT","UNIFORM_REFLECTION_PROBE_DATA_MAP_NAME","UNIFORM_REFLECTION_PROBE_DATA_MAP_BINDING","SAMPLER_REFLECTION_PROBE_DATA_MAP","UNIFORM_REFLECTION_PROBE_DATA_MAP_DESCRIPTOR","UNIFORM_REFLECTION_PROBE_DATA_MAP_LAYOUT","UNIFORM_REFLECTION_PROBE_BLEND_CUBEMAP_BINDING","dftShadowTexture","CAMERA_DEFAULT_MASK","CAMERA_EDITOR_MASK","MODEL_ALWAYS_MASK","getDefaultShadowTexture","device","texInfo","TextureInfo","TextureType","TextureUsageBit","supportsR32FloatTexture","Format","R32F","RGBA8","TextureFlagBit","SampleCount","X1","createTexture","getFormatFeatures","FormatFeatureBit","RENDER_TARGET","SAMPLED_TEXTURE","gfxAPI","API","WEBGL","supportsRGBA16HalfFloatTexture","RGBA16F","isEnableEffect","rendering","enableEffectImport","getPassPool","RecyclePool","priority","hash","depth","shaderId","subModel","passIdx","R16F","RGBA32F","PipelineStateManager","getOrCreatePipelineState","pass","shader","renderPass","ia","newHash","attributesHash","typedID","pso","this","_PSOHashMap","pipelineLayout","inputState","InputState","attributes","psoInfo","PipelineStateInfo","rasterizerState","depthStencilState","blendState","primitive","dynamicStates","createPipelineState","set","Map"],"mappings":"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"}