{"version":3,"file":"skeletal-animation.js","sources":["../../../cocos/3d/skeletal-animation/data-pool-manager.ts","../../../cocos/3d/skeletal-animation/skeletal-animation-state.ts","../../../cocos/3d/skeletal-animation/skeletal-animation.ts","../../../cocos/3d/skeletal-animation/deprecated.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport type { AnimationClip } from '../../animation/animation-clip';\r\nimport type { Skeleton } from '../assets';\r\nimport { Device } from '../../gfx';\r\nimport { JointAnimationInfo, JointTexturePool } from './skeletal-animation-utils';\r\nimport { cclegacy } from '../../core';\r\n\r\nexport class DataPoolManager {\r\n    public jointTexturePool: JointTexturePool;\r\n    public jointAnimationInfo: JointAnimationInfo;\r\n\r\n    constructor (device: Device) {\r\n        this.jointTexturePool = new JointTexturePool(device);\r\n        this.jointAnimationInfo = new JointAnimationInfo(device);\r\n    }\r\n\r\n    public releaseSkeleton (skeleton: Skeleton): void {\r\n        this.jointTexturePool.releaseSkeleton(skeleton);\r\n    }\r\n\r\n    public releaseAnimationClip (clip: AnimationClip): void {\r\n        this.jointTexturePool.releaseAnimationClip(clip);\r\n    }\r\n\r\n    public clear (): void {\r\n        this.jointTexturePool.clear();\r\n        this.jointAnimationInfo.clear();\r\n    }\r\n}\r\n\r\ncclegacy.internal.DataPoolManager = DataPoolManager;\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { Mat4, Quat, Vec3, cclegacy } from '../../core';\r\nimport { IAnimInfo, JointAnimationInfo } from './skeletal-animation-utils';\r\nimport { Node } from '../../scene-graph/node';\r\nimport type { AnimationClip } from '../../animation/animation-clip';\r\nimport { AnimationState } from '../../animation/animation-state';\r\nimport { SkeletalAnimation, Socket } from './skeletal-animation';\r\nimport { SkelAnimDataHub } from './skeletal-animation-data-hub';\r\n\r\nconst m4_1 = new Mat4();\r\nconst m4_2 = new Mat4();\r\n\r\ninterface ITransform {\r\n    pos: Vec3;\r\n    rot: Quat;\r\n    scale: Vec3;\r\n}\r\n\r\ninterface ISocketData {\r\n    target: Node;\r\n    frames: ITransform[];\r\n}\r\n\r\n/**\r\n * @en The animation state for skeletal animations.\r\n * @zh 骨骼动画的动画状态控制对象。\r\n */\r\nexport class SkeletalAnimationState extends AnimationState {\r\n    protected _frames = 1;\r\n\r\n    protected _bakedDuration = 0;\r\n\r\n    protected _animInfo: IAnimInfo | null = null;\r\n\r\n    protected _sockets: ISocketData[] = [];\r\n\r\n    protected _animInfoMgr: JointAnimationInfo;\r\n\r\n    protected _parent: SkeletalAnimation | null = null;\r\n\r\n    protected _curvesInited = false;\r\n\r\n    constructor (clip: AnimationClip, name = '') {\r\n        super(clip, name);\r\n        this._animInfoMgr = cclegacy.director.root.dataPoolManager.jointAnimationInfo;\r\n    }\r\n\r\n    public initialize (root: Node): void {\r\n        if (this._curveLoaded) { return; }\r\n        this._parent = root.getComponent('cc.SkeletalAnimation') as SkeletalAnimation;\r\n        const baked = this._parent.useBakedAnimation;\r\n        this._doNotCreateEval = baked;\r\n        super.initialize(root);\r\n        this._curvesInited = !baked;\r\n        const { frames, samples } = SkelAnimDataHub.getOrExtract(this.clip);\r\n        this._frames = frames - 1;\r\n        this._animInfo = this._animInfoMgr.getData(root.uuid);\r\n        this._bakedDuration = this._frames / samples; // last key\r\n        this.setUseBaked(baked);\r\n    }\r\n\r\n    protected onPlay (): void {\r\n        super.onPlay();\r\n        const baked = this._parent!.useBakedAnimation;\r\n        if (baked) {\r\n            this._animInfoMgr.switchClip(this._animInfo!, this.clip);\r\n            const users = this._parent!.getUsers();\r\n            users.forEach((user) => {\r\n                user.uploadAnimation(this.clip);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal This method only friends to `SkeletalAnimation`.\r\n     */\r\n    public setUseBaked (useBaked: boolean): void {\r\n        if (useBaked) {\r\n            this._sampleCurves = this._sampleCurvesBaked;\r\n            this.duration = this._bakedDuration;\r\n        } else {\r\n            this._sampleCurves = super._sampleCurves;\r\n            this.duration = this.clip.duration;\r\n            if (!this._curvesInited) {\r\n                this._curveLoaded = false;\r\n                super.initialize(this._targetNode!);\r\n                this._curvesInited = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Rebuild animation curves and register the socket transforms per frame to the sockets. It will replace the internal sockets list.\r\n     * @zh 为所有指定挂点更新动画曲线运算结果，并存储所有挂点的逐帧变换矩阵。这个方法会用传入的挂点更新取代内部挂点列表。\r\n     * @param sockets @en The sockets need update @zh 需要重建的挂点列表\r\n     * @returns void\r\n     */\r\n    public rebuildSocketCurves (sockets: Socket[]): void {\r\n        this._sockets.length = 0;\r\n        if (!this._targetNode) { return; }\r\n        const root = this._targetNode;\r\n        for (let i = 0; i < sockets.length; ++i) {\r\n            const socket = sockets[i];\r\n            const targetNode = root.getChildByPath(socket.path);\r\n            if (!socket.target) { continue; }\r\n            const clipData = SkelAnimDataHub.getOrExtract(this.clip);\r\n            let animPath = socket.path;\r\n            let source = clipData.joints[animPath];\r\n            let animNode = targetNode;\r\n            let downstream: Mat4 | undefined;\r\n            while (!source) {\r\n                const idx = animPath.lastIndexOf('/');\r\n                animPath = animPath.substring(0, idx);\r\n                source = clipData.joints[animPath];\r\n                if (animNode) {\r\n                    if (!downstream) { downstream = Mat4.identity(m4_2); }\r\n                    Mat4.fromRTS(m4_1, animNode.rotation, animNode.position, animNode.scale);\r\n                    Mat4.multiply(downstream, m4_1, downstream);\r\n                    animNode = animNode.parent;\r\n                }\r\n                if (idx < 0) { break; }\r\n            }\r\n            const curveData: Mat4[] | undefined = source && source.transforms;\r\n            const { frames } = clipData;\r\n            const transforms: ITransform[] = [];\r\n            for (let f = 0; f < frames; f++) {\r\n                let mat: Mat4;\r\n                if (curveData && downstream) { // curve & static two-way combination\r\n                    mat = Mat4.multiply(m4_1, curveData[f], downstream);\r\n                } else if (curveData) { // there is a curve directly controlling the joint\r\n                    mat = curveData[f];\r\n                } else if (downstream) { // fallback to default pose if no animation curve can be found upstream\r\n                    mat = downstream;\r\n                } else { // bottom line: render the original mesh as-is\r\n                    mat = new Mat4();\r\n                }\r\n                const tfm = { pos: new Vec3(), rot: new Quat(), scale: new Vec3() };\r\n                Mat4.toSRT(mat, tfm.rot, tfm.pos, tfm.scale);\r\n                transforms.push(tfm);\r\n            }\r\n            this._sockets.push({\r\n                target: socket.target,\r\n                frames: transforms,\r\n            });\r\n        }\r\n    }\r\n\r\n    private _sampleCurvesBaked (time: number): void {\r\n        const ratio = time / this.duration;\r\n        const info = this._animInfo!;\r\n        const clip = this.clip;\r\n\r\n        // Ensure I'm the one on which the anim info is sampling.\r\n        if (info.currentClip !== clip) {\r\n            // If not, switch to me.\r\n            this._animInfoMgr.switchClip(this._animInfo!, clip);\r\n\r\n            const users = this._parent!.getUsers();\r\n            users.forEach((user) => {\r\n                user.uploadAnimation(clip);\r\n            });\r\n            info.data[0] = -1; // reset frame index to -1. sampleCurves will calculate frame to 0.\r\n        }\r\n\r\n        const curFrame = (ratio * this._frames + 0.5) | 0;\r\n        if (curFrame === info.data[0]) { return; }\r\n        info.data[0] = curFrame;\r\n        info.dirty = true;\r\n        if (JSB) {\r\n            info.dirtyForJSB[0] = 1;\r\n        }\r\n        for (let i = 0; i < this._sockets.length; ++i) {\r\n            const { target, frames } = this._sockets[i];\r\n            const { pos, rot, scale } = frames[curFrame]; // ratio guaranteed to be in [0, 1]\r\n            target.setRTS(rot, pos, scale);\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport {\r\n    ccclass, executeInEditMode, executionOrder, help, menu, type, serializable, editable,\r\n} from 'cc.decorator';\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { SkinnedMeshRenderer } from '../skinned-mesh-renderer';\r\nimport { Mat4, cclegacy, js, assertIsTrue, warn } from '../../core';\r\nimport { DataPoolManager } from './data-pool-manager';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { AnimationClip } from '../../animation/animation-clip';\r\nimport { Animation } from '../../animation/animation-component';\r\nimport { SkelAnimDataHub } from './skeletal-animation-data-hub';\r\nimport { SkeletalAnimationState } from './skeletal-animation-state';\r\nimport { getWorldTransformUntilRoot } from '../../animation/transform-utils';\r\nimport type { AnimationState } from '../../animation/animation-state';\r\nimport { getGlobalAnimationManager } from '../../animation/global-animation-manager';\r\n\r\nconst FORCE_BAN_BAKED_ANIMATION = EDITOR_NOT_IN_PREVIEW;\r\n\r\n/**\r\n * @en The socket to synchronize transform from skeletal joint to target node.\r\n * @zh 骨骼动画的挂点，用于将骨骼树的挂点节点变化矩阵同步到目标节点上\r\n */\r\n@ccclass('cc.SkeletalAnimation.Socket')\r\nexport class Socket {\r\n    /**\r\n     * @en Path of the target joint.\r\n     * @zh 此挂点的目标骨骼路径。\r\n     */\r\n    @serializable\r\n    @editable\r\n    public path = '';\r\n\r\n    /**\r\n     * @en Transform output node.\r\n     * @zh 此挂点的变换信息输出节点。\r\n     */\r\n    @type(Node)\r\n    public target: Node | null = null;\r\n\r\n    constructor (path = '', target: Node | null = null) {\r\n        this.path = path;\r\n        this.target = target;\r\n    }\r\n}\r\n\r\njs.setClassAlias(Socket, 'cc.SkeletalAnimationComponent.Socket');\r\n\r\nconst m4_1 = new Mat4();\r\nconst m4_2 = new Mat4();\r\n\r\nfunction collectRecursively (node: Node, prefix = '', out: string[] = []): string[] {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n        if (!child) { continue; }\r\n        const path = prefix ? `${prefix}/${child.name}` : child.name;\r\n        out.push(path);\r\n        collectRecursively(child, path, out);\r\n    }\r\n    return out;\r\n}\r\n\r\n/**\r\n * @en\r\n * Skeletal animation component, offers the following features on top of [[Animation]]:\r\n * * Choice between baked animation and real-time calculation, to leverage efficiency and expressiveness.\r\n * * Joint socket system: Create any socket node directly under the animation component root node,\r\n *   find your target joint and register both to the socket list, so that the socket node would be in-sync with the joint.\r\n * @zh\r\n * 骨骼动画组件，在普通动画组件基础上额外提供以下功能：\r\n * * 可选预烘焙动画模式或实时计算模式，用以权衡运行时效率与效果；\r\n * * 提供骨骼挂点功能：通过在动画根节点下创建挂点节点，并在骨骼动画组件上配置 socket 列表，挂点节点的 Transform 就能与骨骼保持同步。\r\n */\r\n@ccclass('cc.SkeletalAnimation')\r\n@help('i18n:cc.SkeletalAnimation')\r\n@executionOrder(99)\r\n@executeInEditMode\r\n@menu('Animation/SkeletalAnimation')\r\nexport class SkeletalAnimation extends Animation {\r\n    public static Socket = Socket;\r\n\r\n    /**\r\n     * @en\r\n     * The joint sockets this animation component maintains.<br>\r\n     * Sockets have to be registered here before attaching custom nodes to animated joints.\r\n     * @zh\r\n     * 当前动画组件维护的挂点数组。要挂载自定义节点到受动画驱动的骨骼上，必须先在此注册挂点。\r\n     */\r\n    @type([Socket])\r\n    @editable\r\n    get sockets (): Socket[] {\r\n        return this._sockets;\r\n    }\r\n\r\n    set sockets (val) {\r\n        if (!this._useBakedEffectively) {\r\n            const animMgr = getGlobalAnimationManager();\r\n            animMgr.removeSockets(this.node, this._sockets);\r\n            animMgr.addSockets(this.node, val);\r\n        }\r\n        this._sockets = val;\r\n        this.rebuildSocketAnimations();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Whether to bake animations. Default to true,<br>\r\n     * which substantially increases performance while making all animations completely fixed.<br>\r\n     * Dynamically changing this property will take effect when playing the next animation clip.\r\n     * Note, in editor(not in preview) mode, this option takes no effect: animation is always non-baked.\r\n     * @zh\r\n     * 是否使用预烘焙动画，默认启用，可以大幅提高运行效时率，但所有动画效果会被彻底固定，不支持任何形式的编辑和混合。<br>\r\n     * 运行时动态修改此选项会在播放下一条动画片段时生效。\r\n     * 注意，在编辑器（非预览）模式下，此选项不起作用：动画总是非预烘焙的。\r\n     */\r\n    @editable\r\n    get useBakedAnimation (): boolean {\r\n        return this._useBakedAnimation;\r\n    }\r\n\r\n    set useBakedAnimation (value) {\r\n        this._useBakedAnimation = value;\r\n        this._applyBakeFlagChange();\r\n    }\r\n\r\n    @serializable\r\n    protected _useBakedAnimation = true;\r\n\r\n    @type([Socket])\r\n    protected _sockets: Socket[] = [];\r\n\r\n    public onLoad (): void {\r\n        super.onLoad();\r\n        // Actively search for potential users and notify them that an animation is usable.\r\n        const comps = this.node.getComponentsInChildren(SkinnedMeshRenderer);\r\n        for (let i = 0; i < comps.length; ++i) {\r\n            const comp = comps[i];\r\n            if (comp.skinningRoot === this.node) {\r\n                this.notifySkinnedMeshAdded(comp);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        super.onDestroy();\r\n        (cclegacy.director.root.dataPoolManager as DataPoolManager).jointAnimationInfo.destroy(this.node.uuid);\r\n        getGlobalAnimationManager().removeSockets(this.node, this._sockets);\r\n        this._removeAllUsers();\r\n    }\r\n\r\n    public onEnable (): void {\r\n        super.onEnable();\r\n        this._currentBakedState?.resume();\r\n    }\r\n\r\n    public onDisable (): void {\r\n        super.onDisable();\r\n        this._currentBakedState?.pause();\r\n    }\r\n\r\n    public start (): void {\r\n        this.sockets = this._sockets;\r\n        this._applyBakeFlagChange();\r\n        super.start();\r\n    }\r\n\r\n    public pause (): void {\r\n        if (!this._useBakedEffectively) {\r\n            super.pause();\r\n        } else {\r\n            this._currentBakedState?.pause();\r\n        }\r\n    }\r\n\r\n    public resume (): void {\r\n        if (!this._useBakedEffectively) {\r\n            super.resume();\r\n        } else {\r\n            this._currentBakedState?.resume();\r\n        }\r\n    }\r\n\r\n    public stop (): void {\r\n        if (!this._useBakedEffectively) {\r\n            super.stop();\r\n        } else if (this._currentBakedState) {\r\n            this._currentBakedState.stop();\r\n            this._currentBakedState = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Query all socket paths\r\n     * @zh 获取所有挂点的骨骼路径\r\n     * @returns @en All socket paths @zh 所有挂点的骨骼路径\r\n     */\r\n    public querySockets (): string[] {\r\n        const animPaths = (this._defaultClip && Object.keys(SkelAnimDataHub.getOrExtract(this._defaultClip).joints).sort()\r\n            .reduce((acc, cur): string[] => (cur.startsWith(`${acc[acc.length - 1]}/`) ? acc : (acc.push(cur), acc)), [] as string[])) || [];\r\n        if (!animPaths.length) { return ['please specify a valid default animation clip first']; }\r\n        const out: string[] = [];\r\n        for (let i = 0; i < animPaths.length; i++) {\r\n            const path = animPaths[i];\r\n            const node = this.node.getChildByPath(path);\r\n            if (!node) { continue; }\r\n            out.push(path);\r\n            collectRecursively(node, path, out);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * @en Rebuild animations to synchronize immediately all sockets to their target node.\r\n     * @zh 重建动画并立即同步所有挂点的转换矩阵到它们的目标节点上。\r\n     */\r\n    public rebuildSocketAnimations (): void {\r\n        this._sockets.forEach((socket) => {\r\n            const joint = this.node.getChildByPath(socket.path);\r\n            const { target } = socket;\r\n            if (joint && target) {\r\n                target.name = `${socket.path.substring(socket.path.lastIndexOf('/') + 1)} Socket`;\r\n                target.parent = this.node;\r\n                getWorldTransformUntilRoot(joint, this.node, m4_1);\r\n                Mat4.fromRTS(m4_2, target.rotation, target.position, target.scale);\r\n                if (!Mat4.equals(m4_2, m4_1)) { target.matrix = m4_1; }\r\n            }\r\n        });\r\n        for (const stateName in this._nameToState) {\r\n            const state = this._nameToState[stateName] as SkeletalAnimationState;\r\n            state.rebuildSocketCurves(this._sockets);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Create or get the target node from a socket.\r\n     * If a socket haven't been created for the corresponding path, this function will register a new socket.\r\n     * @zh 创建或获取一个挂点的同步目标节点。\r\n     * 如果对应路径还没有创建挂点，这个函数会创建一个新的挂点。\r\n     * @param path @en Path of the target joint. @zh 此挂点的骨骼路径。\r\n     * @returns @en The target node of the socket. @zh 挂点的目标节点\r\n     */\r\n    public createSocket (path: string): Node | null {\r\n        const socket = this._sockets.find((s) => s.path === path);\r\n        if (socket) { return socket.target; }\r\n        const joint = this.node.getChildByPath(path);\r\n        if (!joint) { warn('illegal socket path'); return null; }\r\n        const target = new Node();\r\n        target.parent = this.node;\r\n        this._sockets.push(new Socket(path, target));\r\n        this.rebuildSocketAnimations();\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * @internal This method only friends to skinned mesh renderer.\r\n     */\r\n    public notifySkinnedMeshAdded (skinnedMeshRenderer: SkinnedMeshRenderer): void {\r\n        const { _useBakedEffectively } = this;\r\n        const formerBound = skinnedMeshRenderer.associatedAnimation;\r\n        if (formerBound) {\r\n            formerBound._users.delete(skinnedMeshRenderer);\r\n        }\r\n        skinnedMeshRenderer.associatedAnimation = this;\r\n        skinnedMeshRenderer.setUseBakedAnimation(_useBakedEffectively, true);\r\n        if (_useBakedEffectively) {\r\n            const { _currentBakedState: playingState } = this;\r\n            if (playingState) {\r\n                skinnedMeshRenderer.uploadAnimation(playingState.clip);\r\n            }\r\n        }\r\n        this._users.add(skinnedMeshRenderer);\r\n    }\r\n\r\n    /**\r\n     * @internal This method only friends to skinned mesh renderer.\r\n     */\r\n    public notifySkinnedMeshRemoved (skinnedMeshRenderer: SkinnedMeshRenderer): void {\r\n        assertIsTrue(skinnedMeshRenderer.associatedAnimation === this || skinnedMeshRenderer.associatedAnimation === null);\r\n        skinnedMeshRenderer.setUseBakedAnimation(false);\r\n        skinnedMeshRenderer.associatedAnimation = null;\r\n        this._users.delete(skinnedMeshRenderer);\r\n    }\r\n\r\n    /**\r\n     * Get all users.\r\n     * @internal This method only friends to the skeleton animation state.\r\n     */\r\n    public getUsers (): Set<SkinnedMeshRenderer> {\r\n        return this._users;\r\n    }\r\n\r\n    protected _createState (clip: AnimationClip, name?: string): SkeletalAnimationState {\r\n        return new SkeletalAnimationState(clip, name);\r\n    }\r\n\r\n    protected _doCreateState (clip: AnimationClip, name: string): SkeletalAnimationState {\r\n        const state = super._doCreateState(clip, name) as SkeletalAnimationState;\r\n        state.rebuildSocketCurves(this._sockets);\r\n        return state;\r\n    }\r\n\r\n    protected doPlayOrCrossFade (state: AnimationState, duration: number): void {\r\n        if (this._useBakedEffectively) {\r\n            if (this._currentBakedState) {\r\n                this._currentBakedState.stop();\r\n            }\r\n            const skeletalAnimationState = state as SkeletalAnimationState;\r\n            this._currentBakedState = skeletalAnimationState;\r\n            skeletalAnimationState.play();\r\n        } else {\r\n            super.doPlayOrCrossFade(state, duration);\r\n        }\r\n    }\r\n\r\n    private _users = new Set<SkinnedMeshRenderer>();\r\n\r\n    private _currentBakedState: SkeletalAnimationState | null = null;\r\n\r\n    private _removeAllUsers (): void {\r\n        Array.from(this._users).forEach((user) => {\r\n            this.notifySkinnedMeshRemoved(user);\r\n        });\r\n    }\r\n\r\n    private get _useBakedEffectively (): boolean {\r\n        if (FORCE_BAN_BAKED_ANIMATION) {\r\n            return false;\r\n        } else {\r\n            return this._useBakedAnimation;\r\n        }\r\n    }\r\n\r\n    private _applyBakeFlagChange (): void {\r\n        const useBakedEffectively = this._useBakedEffectively;\r\n\r\n        for (const stateName in this._nameToState) {\r\n            const state = this._nameToState[stateName] as SkeletalAnimationState;\r\n            state.setUseBaked(useBakedEffectively);\r\n        }\r\n\r\n        this._users.forEach((user) => {\r\n            user.setUseBakedAnimation(useBakedEffectively);\r\n        });\r\n\r\n        if (useBakedEffectively) {\r\n            getGlobalAnimationManager().removeSockets(this.node, this._sockets);\r\n        } else {\r\n            getGlobalAnimationManager().addSockets(this.node, this._sockets);\r\n            this._currentBakedState = null;\r\n        }\r\n\r\n        this._setSkeletonTransformEnabled(!useBakedEffectively);\r\n    }\r\n\r\n    private _setSkeletonTransformEnabled (enabled: boolean): void {\r\n        this.node.children.forEach((child) => {\r\n            if (!this._sockets.find((socket) => socket.target === child)) {\r\n                child.isSkipTransformUpdate = !enabled;\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { js, cclegacy } from '../../core';\r\nimport { SkeletalAnimation } from './skeletal-animation';\r\n/**\r\n * Alias of [[SkeletalAnimation]]\r\n * @deprecated Since v1.2\r\n */\r\nexport { SkeletalAnimation as SkeletalAnimationComponent };\r\ncclegacy.SkeletalAnimationComponent = SkeletalAnimation;\r\njs.setClassAlias(SkeletalAnimation, 'cc.SkeletalAnimationComponent');\r\n"],"names":["DataPoolManager","device","this","jointTexturePool","jointAnimationInfo","JointTexturePool","JointAnimationInfo","_proto","prototype","releaseSkeleton","skeleton","releaseAnimationClip","clip","clear","cclegacy","internal","m4_1","Mat4","m4_2","SkeletalAnimationState","exports","_AnimationState","name","_this","_frames","_bakedDuration","_animInfo","_sockets","_animInfoMgr","_parent","_curvesInited","director","root","dataPoolManager","_inheritsLoose","initialize","_curveLoaded","getComponent","baked","useBakedAnimation","_doNotCreateEval","_SkelAnimDataHub$getO","SkelAnimDataHub","getOrExtract","frames","samples","getData","uuid","setUseBaked","onPlay","_this2","call","switchClip","getUsers","forEach","user","uploadAnimation","useBaked","_sampleCurves","_sampleCurvesBaked","duration","_targetNode","rebuildSocketCurves","sockets","length","i","socket","targetNode","getChildByPath","path","target","clipData","animPath","source","joints","animNode","downstream","idx","lastIndexOf","substring","identity","fromRTS","rotation","position","scale","multiply","parent","curveData","transforms","f","mat","tfm","pos","Vec3","rot","Quat","toSRT","push","time","ratio","info","currentClip","data","curFrame","dirty","_this$_sockets$i2","setRTS","AnimationState","Socket","ccclass","type","Node","_dec","_class2","_initializer","_initializer2","serializable","_applyDecoratedInitializer","_dec2","_class","js","collectRecursively","node","prefix","out","children","child","SkeletalAnimation","executionOrder","_dec5","_dec6","_dec3","_class4","_dec4","_class6","_Animation","_len","arguments","args","Array","_key","apply","concat","_useBakedAnimation","_initializer3","_initializer4","_users","Set","_currentBakedState","onLoad","comps","getComponentsInChildren","SkinnedMeshRenderer","comp","skinningRoot","notifySkinnedMeshAdded","onDestroy","destroy","getGlobalAnimationManager","removeSockets","_removeAllUsers","onEnable","_this$_currentBakedSt","resume","onDisable","_this$_currentBakedSt2","pause","start","_applyBakeFlagChange","_this$_currentBakedSt3","_useBakedEffectively","_this$_currentBakedSt4","stop","querySockets","animPaths","_defaultClip","Object","keys","sort","reduce","acc","cur","startsWith","rebuildSocketAnimations","stateName","joint","getWorldTransformUntilRoot","equals","matrix","_nameToState","createSocket","find","s","warn","skinnedMeshRenderer","formerBound","associatedAnimation","setUseBakedAnimation","playingState","add","notifySkinnedMeshRemoved","assertIsTrue","_createState","_doCreateState","state","doPlayOrCrossFade","skeletalAnimationState","play","_this3","from","useBakedEffectively","addSockets","_setSkeletonTransformEnabled","enabled","_this4","isSkipTransformUpdate","_createClass","key","get","set","val","animMgr","value","Animation","_class5","SkeletalAnimationComponent"],"mappings":"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"}