{"version":3,"file":"sorting-2d-CIasnD0H.js","sources":["../../../cocos/2d/assembler/utils.ts","../../../cocos/2d/renderer/draw-batch.ts","../../../cocos/2d/renderer/batcher-2d.ts","../../../cocos/sorting/sorting-2d.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Color, Vec4, clamp } from '../../core';\r\nimport { RenderData } from '../renderer/render-data';\r\nimport { IBatcher } from '../renderer/i-batcher';\r\nimport { Node } from '../../scene-graph/node';\r\nimport { FormatInfos, Attribute, FormatInfo } from '../../gfx';\r\n\r\nconst _col = new Vec4();\r\n\r\nexport function fillMeshVertices3D (node: Node, renderer: IBatcher, renderData: RenderData | null, color: Color): void {\r\n    if (!renderData) return;\r\n    const chunk = renderData.chunk;\r\n    const dataList = renderData.data;\r\n    const vData = chunk.vb;\r\n    const vertexCount = renderData.vertexCount;\r\n    const m = node.worldMatrix;\r\n\r\n    const m00 = m.m00; const m01 = m.m01; const m02 = m.m02; const m03 = m.m03;\r\n    const m04 = m.m04; const m05 = m.m05; const m06 = m.m06; const m07 = m.m07;\r\n    const m12 = m.m12; const m13 = m.m13; const m14 = m.m14; const m15 = m.m15;\r\n\r\n    // convert to 0 ~ 1\r\n    _col.set(color.r / 255, color.g / 255, color.b / 255, color.a / 255);\r\n\r\n    let vertexOffset = 0;\r\n    for (let i = 0; i < vertexCount; ++i) {\r\n        const vert = dataList[i];\r\n        const x = vert.x;\r\n        const y = vert.y;\r\n        let rhw = m03 * x + m07 * y + m15;\r\n        rhw = rhw ? 1 / rhw : 1;\r\n        vData[vertexOffset + 0] = (m00 * x + m04 * y + m12) * rhw;\r\n        vData[vertexOffset + 1] = (m01 * x + m05 * y + m13) * rhw;\r\n        vData[vertexOffset + 2] = (m02 * x + m06 * y + m14) * rhw;\r\n        Vec4.toArray(vData, _col, vertexOffset + 5);\r\n        vertexOffset += renderData.floatStride;\r\n    }\r\n\r\n    // fill index data\r\n    const bid = chunk.bufferId;\r\n    const vid = chunk.vertexOffset;\r\n    const meshBuffer = chunk.meshBuffer;\r\n    const ib = chunk.meshBuffer.iData;\r\n    let indexOffset = meshBuffer.indexOffset;\r\n    for (let i = 0, count = vertexCount / 4; i < count; i++) {\r\n        const start = vid + i * 4;\r\n        ib[indexOffset++] = start;\r\n        ib[indexOffset++] = start + 1;\r\n        ib[indexOffset++] = start + 2;\r\n        ib[indexOffset++] = start + 1;\r\n        ib[indexOffset++] = start + 3;\r\n        ib[indexOffset++] = start + 2;\r\n    }\r\n    meshBuffer.indexOffset += renderData.indexCount;\r\n    meshBuffer.setDirty();\r\n}\r\n\r\nexport function updateOpacity (renderData: RenderData, opacity: number): void {\r\n    if(!renderData.chunk) {\r\n        // When the allocation of chunk in StaticVBAccessor fails (when the allocated buffer is too large), chunk will be null.\r\n        return;\r\n    }\r\n    const vfmt = renderData.vertexFormat;\r\n    const vb = renderData.chunk.vb;\r\n    let vbUint32View: Uint32Array | undefined;\r\n    let attr: Attribute;\r\n    let format: FormatInfo;\r\n    let stride: number;\r\n    // Color component offset\r\n    let offset = 0;\r\n    for (let i = 0; i < vfmt.length; ++i) {\r\n        attr = vfmt[i];\r\n        format = FormatInfos[attr.format];\r\n        if (format.hasAlpha) {\r\n            stride = renderData.floatStride;\r\n            if (format.size / format.count === 1) {\r\n                if (!vbUint32View) {\r\n                    vbUint32View = new Uint32Array(vb.buffer, vb.byteOffset, vb.length);\r\n                }\r\n                const alpha = ~~clamp(Math.round(opacity * 255), 0, 255);\r\n                // Uint color RGBA8\r\n                for (let color = offset; color < vbUint32View.length; color += stride) {\r\n                    vbUint32View[color] = ((vbUint32View[color] & 0x00ffffff) | (alpha << 24)) >>> 0;\r\n                }\r\n            } else if (format.size / format.count === 4) {\r\n                // RGBA32 color, alpha at position 3\r\n                for (let alpha = offset + 3; alpha < vb.length; alpha += stride) {\r\n                    vb[alpha] = opacity;\r\n                }\r\n            }\r\n        }\r\n        offset += format.size >> 2;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Material } from '../../asset/assets/material';\r\nimport { Texture, Sampler, InputAssembler, DescriptorSet, Shader, DepthStencilState } from '../../gfx';\r\nimport { Node } from '../../scene-graph';\r\nimport { Model } from '../../render-scene/scene/model';\r\nimport { Layers } from '../../scene-graph/layers';\r\nimport { cclegacy } from '../../core';\r\nimport { IMacroPatch, Pass } from '../../render-scene/core/pass';\r\nimport { IBatcher } from './i-batcher';\r\nimport type { Root } from '../../root';\r\n\r\nconst UI_VIS_FLAG = Layers.Enum.NONE | Layers.Enum.UI_3D;\r\n\r\n/** @mangle */\r\nexport class DrawBatch2D {\r\n    get passes (): Pass[] {\r\n        return this._passes;\r\n    }\r\n\r\n    public get shaders (): Shader[] {\r\n        return this._shaders;\r\n    }\r\n\r\n    // public bufferBatch: MeshBuffer | null = null; // use less\r\n    // public camera: Camera | null = null; // use less\r\n    // public renderScene: RenderScene | null = null; // use less for now\r\n    public model: Model | null = null; // for uimodel\r\n    public texture: Texture | null = null;\r\n    public sampler: Sampler | null = null;\r\n    public useLocalData: Node | null = null;\r\n    public isStatic = false; // use less,remove when remove Static batch\r\n    public textureHash = 0;\r\n    public samplerHash = 0;\r\n    private _passes: Pass[] = [];\r\n    private _shaders: Shader[] = [];\r\n    public visFlags: number = UI_VIS_FLAG;\r\n    public inputAssembler: InputAssembler | null = null;\r\n    public descriptorSet: DescriptorSet | null = null;\r\n    //private declare _nativeObj: any;\r\n\r\n    public destroy (ui: IBatcher): void {\r\n        this._passes = [];\r\n    }\r\n\r\n    public clear (): void {\r\n        // this.bufferBatch = null;\r\n        this.inputAssembler = null;\r\n        this.descriptorSet = null;\r\n        // this.camera = null;\r\n        this.texture = null;\r\n        this.sampler = null;\r\n        this.textureHash = 0;\r\n        this.samplerHash = 0;\r\n        this.model = null;\r\n        this.isStatic = false;\r\n        this.useLocalData = null;\r\n        this.visFlags = UI_VIS_FLAG;\r\n        // this.renderScene = null;\r\n    }\r\n\r\n    // object version\r\n    public fillPasses (mat: Material | null, dss: DepthStencilState | null, dssHash: number, patches: Readonly<IMacroPatch[] | null>): void {\r\n        if (mat) {\r\n            const passes = mat.passes;\r\n            if (!passes) { return; }\r\n\r\n            const hashFactor = 0;\r\n            let dirty = false;\r\n\r\n            this._shaders.length = passes.length;\r\n\r\n            for (let i = 0; i < passes.length; i++) {\r\n                if (!this._passes[i]) {\r\n                    this._passes[i] = new Pass(cclegacy.director.root as Root);\r\n                }\r\n                const mtlPass = passes[i];\r\n                const passInUse = this._passes[i];\r\n\r\n                mtlPass.update();\r\n\r\n                // Hack: Cause pass.hash can not check all pass value\r\n                if (!dss) { dss = mtlPass.depthStencilState; dssHash = 0; }\r\n\r\n                passInUse._initPassFromTarget(mtlPass, dss, dssHash);\r\n\r\n                this._shaders[i] = passInUse.getShaderVariant(patches)!;\r\n\r\n                dirty = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG, JSB, USE_SORTING_2D } from 'internal:constants';\r\nimport { Camera, Model } from '../../render-scene/scene';\r\nimport type { UIStaticBatch } from '../components/ui-static-batch';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { RenderRoot2D, UIRenderer } from '../framework';\r\nimport { Texture, Device, Attribute, Sampler, DescriptorSetInfo, Buffer,\r\n    BufferInfo, BufferUsageBit, MemoryUsageBit, DescriptorSet, InputAssembler, deviceManager, PrimitiveMode,\r\n    DepthStencilState } from '../../gfx';\r\nimport { CachedArray, Pool, Mat4, cclegacy, assertIsTrue, assert, approx, EPSILON, RecyclePool } from '../../core';\r\nimport { Root } from '../../root';\r\nimport { Node } from '../../scene-graph';\r\nimport { Stage, StencilManager } from './stencil-manager';\r\nimport { DrawBatch2D } from './draw-batch';\r\nimport { ModelLocalBindings, UBOLocal, UBOLocalEnum } from '../../rendering/define';\r\nimport { SpriteFrame } from '../assets';\r\nimport { TextureBase } from '../../asset/assets/texture-base';\r\nimport { IBatcher } from './i-batcher';\r\nimport { StaticVBAccessor } from './static-vb-accessor';\r\nimport { getAttributeStride, vfmt, vfmtPosUvColor } from './vertex-format';\r\nimport { updateOpacity } from '../assembler/utils';\r\nimport { BaseRenderData, MeshRenderData } from './render-data';\r\nimport { UIMeshRenderer } from '../components/ui-mesh-renderer';\r\nimport { NativeBatcher2d } from './native-2d';\r\nimport { MeshBuffer } from './mesh-buffer';\r\nimport { scene } from '../../render-scene';\r\nimport { builtinResMgr } from '../../asset/asset-manager';\r\nimport { RenderingSubMesh } from '../../asset/assets';\r\nimport { IAssembler } from './base';\r\nimport { RenderEntityFillColorType } from './render-entity';\r\nimport type { Director } from '../../game/director';\r\n\r\nlet sorting2DCount = 0;\r\n\r\n/**\r\n * @engineInternal\r\n */\r\nexport function _setSorting2DCount (v: number): void {\r\n    sorting2DCount = v;\r\n    if (JSB) {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-expect-error\r\n        n2d.Batcher2d.setSorting2DCount(v);\r\n    }\r\n}\r\n\r\nconst _dsInfo = new DescriptorSetInfo(null!);\r\nconst m4_1 = new Mat4();\r\ninterface RecordedRendererInfo {\r\n    uiRenderer: UIRenderer | null;\r\n    finalOpacity: number; // float\r\n    opacityDirty: boolean;\r\n}\r\n\r\nconst recordedRendererInfoPool = new RecyclePool<RecordedRendererInfo>(() => ({\r\n    uiRenderer: null,\r\n    finalOpacity: 0,\r\n    opacityDirty: false,\r\n}), 128);\r\n\r\n/**\r\n * @en UI rendering process\r\n * @zh UI 渲染流程\r\n */\r\nexport class Batcher2D implements IBatcher {\r\n    protected declare _nativeObj: NativeBatcher2d;\r\n    public get nativeObj (): NativeBatcher2d  {\r\n        return this._nativeObj;\r\n    }\r\n\r\n    get currBufferAccessor (): StaticVBAccessor {\r\n        if (this._staticVBBuffer) return this._staticVBBuffer;\r\n        // create if not set\r\n        this._staticVBBuffer = this.switchBufferAccessor();\r\n        return this._staticVBBuffer;\r\n    }\r\n\r\n    get batches (): CachedArray<DrawBatch2D> {\r\n        return this._batches;\r\n    }\r\n\r\n    set currStaticRoot (value: UIStaticBatch | null) {\r\n        this._currStaticRoot = value;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.8.7\r\n     */\r\n    set currIsStatic (value: boolean) {\r\n    }\r\n\r\n    public declare device: Device;\r\n    private _screens: RenderRoot2D[] = [];\r\n    private _staticVBBuffer: StaticVBAccessor | null = null;\r\n    private _bufferAccessors: Map<number, StaticVBAccessor> = new Map();\r\n\r\n    private declare _drawBatchPool: Pool<DrawBatch2D>;\r\n    private declare _batches: CachedArray<DrawBatch2D>;\r\n    private _currBID = -1;\r\n    private _indexStart = 0;\r\n\r\n    private _emptyMaterial = new Material();\r\n    private _currRenderData: BaseRenderData | null = null;\r\n    private _currMaterial: Material = this._emptyMaterial;\r\n    private _currTexture: Texture | null = null;\r\n    private _currSampler: Sampler | null = null;\r\n    private _currStaticRoot: UIStaticBatch | null = null;\r\n    private _currComponent: UIRenderer | null = null;\r\n    private _currTransform: Node | null = null;\r\n    private _currTextureHash = 0;\r\n    private _currSamplerHash = 0;\r\n    private _currLayer = 0;\r\n    private _currDepthStencilStateStage: Stage | null = null;\r\n    private _currHash = 0;\r\n\r\n    //for middleware\r\n    private _currIsMiddleware = false;\r\n    private _middlewareEnableBatch = false;\r\n    private _middlewareBuffer: MeshBuffer | null = null;\r\n    private _middlewareIndexStart = 0;\r\n    private _middlewareIndexCount = 0;\r\n\r\n    private _pOpacity = 1;\r\n    private _opacityDirty = 0;\r\n\r\n    // DescriptorSet Cache Map\r\n    private _descriptorSetCache = new DescriptorSetCache();\r\n\r\n    private _meshDataArray: MeshRenderData[] = [];\r\n\r\n    // mask use\r\n    private _maskClearModel: Model | null = null;\r\n    private _maskClearMtl: Material | null = null;\r\n    private _maskModelMesh: RenderingSubMesh | null = null;\r\n\r\n    private _recordedRendererInfoQueue: RecordedRendererInfo[] = [];\r\n\r\n    constructor (private _root: Root) {\r\n        this.device = _root.device;\r\n        this._batches = new CachedArray(64);\r\n        this._drawBatchPool = new Pool(() => new DrawBatch2D(), 128, (obj) => obj.destroy(this));\r\n    }\r\n\r\n    private getRecordedRendererInfoQueue (): RecordedRendererInfo[] {\r\n        return this._recordedRendererInfoQueue;\r\n    }\r\n\r\n    public initialize (): boolean {\r\n        return true;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this._recordedRendererInfoQueue.length = 0;\r\n\r\n        for (let i = 0; i < this._batches.length; i++) {\r\n            if (this._batches.array[i]) {\r\n                this._batches.array[i].destroy(this);\r\n            }\r\n        }\r\n        this._batches.destroy();\r\n\r\n        for (const accessor of this._bufferAccessors.values()) {\r\n            accessor.destroy();\r\n        }\r\n        this._bufferAccessors.clear();\r\n\r\n        if (this._drawBatchPool) {\r\n            this._drawBatchPool.destroy();\r\n        }\r\n\r\n        this._descriptorSetCache.destroy();\r\n\r\n        StencilManager.sharedManager!.destroy();\r\n\r\n        if (this._maskClearModel && this._maskModelMesh) {\r\n            (cclegacy.director.root as Root).destroyModel(this._maskClearModel);\r\n            this._maskModelMesh.destroy();\r\n        }\r\n        if (this._maskClearMtl) {\r\n            this._maskClearMtl.destroy();\r\n        }\r\n    }\r\n\r\n    private syncRootNodesToNative (): void {\r\n        if (JSB) {\r\n            const rootNodes: Node[] = [];\r\n            for (const screen of this._screens) {\r\n                rootNodes.push(screen.node);\r\n            }\r\n            this._nativeObj.syncRootNodesToNative(rootNodes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Add the managed Canvas.\r\n     *\r\n     * @zh\r\n     * 添加屏幕组件管理。\r\n     *\r\n     * @param comp @en The render root of 2d.\r\n     *             @zh 2d 渲染入口组件。\r\n     */\r\n    public addScreen (comp: RenderRoot2D): void {\r\n        this._screens.push(comp);\r\n        this._screens.sort(this._screenSort);\r\n        if (JSB) {\r\n            this.syncRootNodesToNative();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh\r\n     * Removes the Canvas from the list.\r\n     *\r\n     * @param comp @en The target to removed.\r\n     *             @zh 被移除的屏幕。\r\n     */\r\n    public removeScreen (comp: RenderRoot2D): void {\r\n        const idx = this._screens.indexOf(comp);\r\n        if (idx === -1) {\r\n            return;\r\n        }\r\n        this._screens.splice(idx, 1);\r\n        if (JSB) {\r\n            this.syncRootNodesToNative();\r\n        }\r\n    }\r\n\r\n    public sortScreens (): void {\r\n        this._screens.sort(this._screenSort);\r\n        if (JSB) {\r\n            this.syncRootNodesToNative();\r\n        }\r\n    }\r\n\r\n    public getFirstRenderCamera (node: Node): Camera | null {\r\n        if (node.scene && node.scene.renderScene) {\r\n            const cameras = node.scene.renderScene.cameras;\r\n            for (let i = 0; i < cameras.length; i++) {\r\n                const camera = cameras[i];\r\n                if (camera.visibility & node.layer) {\r\n                    return camera;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public update (): void {\r\n        if (JSB) {\r\n            return;\r\n        }\r\n\r\n        const screens = this._screens;\r\n        let offset = 0;\r\n        for (let i = 0; i < screens.length; ++i) {\r\n            const screen = screens[i];\r\n            const scene = screen._getRenderScene();\r\n            if (!screen.enabledInHierarchy || !scene) {\r\n                continue;\r\n            }\r\n            // Reset state and walk\r\n            this._opacityDirty = 0;\r\n            this._pOpacity = 1;\r\n\r\n            this.walk(screen.node);\r\n\r\n            if (USE_SORTING_2D && sorting2DCount > 0) {\r\n                this._flushRecordedUIRenderers();\r\n            }\r\n\r\n            this.autoMergeBatches(this._currComponent!);\r\n            this.resetRenderStates();\r\n\r\n            let batchPriority = 0;\r\n            if (this._batches.length > offset) {\r\n                for (; offset < this._batches.length; ++offset) {\r\n                    const batch = this._batches.array[offset];\r\n\r\n                    if (batch.model) {\r\n                        const subModels = batch.model.subModels;\r\n                        for (let j = 0; j < subModels.length; j++) {\r\n                            subModels[j].priority = batchPriority++;\r\n                        }\r\n                    } else {\r\n                        batch.descriptorSet = this._descriptorSetCache.getDescriptorSet(batch);\r\n                    }\r\n                    scene.addBatch(batch);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (USE_SORTING_2D && sorting2DCount > 0) {\r\n            recordedRendererInfoPool.reset();\r\n        }\r\n    }\r\n\r\n    public uploadBuffers (): void {\r\n        if (JSB) {\r\n            this._nativeObj.uploadBuffers();\r\n        } else if (this._batches.length > 0) {\r\n            const length = this._meshDataArray.length;\r\n            for (let i = 0; i < length; i++) {\r\n                this._meshDataArray[i].uploadBuffers();\r\n            }\r\n\r\n            for (const accessor of this._bufferAccessors.values()) {\r\n                accessor.uploadBuffers();\r\n                accessor.reset();\r\n            }\r\n\r\n            this._descriptorSetCache.update();\r\n        }\r\n    }\r\n\r\n    public reset (): void {\r\n        if (JSB) {\r\n            this._nativeObj.reset();\r\n        } else {\r\n            for (let i = 0; i < this._batches.length; ++i) {\r\n                const batch = this._batches.array[i];\r\n                if (batch.isStatic) {\r\n                    continue;\r\n                }\r\n\r\n                batch.clear();\r\n                this._drawBatchPool.free(batch);\r\n            }\r\n            // Reset buffer accessors\r\n            for (const accessor of this._bufferAccessors.values()) {\r\n                accessor.reset();\r\n            }\r\n            const length = this._meshDataArray.length;\r\n            for (let i = 0; i < length; i++) {\r\n                this._meshDataArray[i].freeIAPool();\r\n            }\r\n            this._meshDataArray.length = 0;\r\n            this._staticVBBuffer = null;\r\n\r\n            this._currBID = -1;\r\n            this._indexStart = 0;\r\n            this._currHash = 0;\r\n            this._currLayer = 0;\r\n            this._currRenderData = null;\r\n            this._currMaterial = this._emptyMaterial;\r\n            this._currTexture = null;\r\n            this._currSampler = null;\r\n            this._currComponent = null;\r\n            this._currTransform = null;\r\n            this._batches.clear();\r\n            StencilManager.sharedManager!.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @zh 如果有必要，为相应的顶点布局切换网格缓冲区。\r\n     * @en Switch the mesh buffer for corresponding vertex layout if necessary.\r\n     * @param attributes use VertexFormat.vfmtPosUvColor by default\r\n     */\r\n    public switchBufferAccessor (attributes: Attribute[] = vfmtPosUvColor): StaticVBAccessor {\r\n        const strideBytes = attributes === vfmtPosUvColor ? 36 /* 9x4 */ : getAttributeStride(attributes);\r\n        // If current accessor not compatible with the requested attributes\r\n        if (!this._staticVBBuffer || (this._staticVBBuffer.vertexFormatBytes) !== strideBytes) {\r\n            let accessor = this._bufferAccessors.get(strideBytes);\r\n            if (!accessor) {\r\n                accessor = new StaticVBAccessor(this.device, attributes);\r\n                this._bufferAccessors.set(strideBytes, accessor);\r\n            }\r\n\r\n            this._staticVBBuffer = accessor;\r\n            this._currBID = -1;\r\n        }\r\n        return this._staticVBBuffer;\r\n    }\r\n\r\n    public registerBufferAccessor (key: number, accessor: StaticVBAccessor): void {\r\n        this._bufferAccessors.set(key, accessor);\r\n    }\r\n\r\n    public updateBuffer (attributes: Attribute[], bid: number): void {\r\n        const accessor = this.switchBufferAccessor(attributes);\r\n        // If accessor changed, then current bid will be reset to -1, this check will pass too\r\n        if (this._currBID !== bid) {\r\n            this._currBID = bid;\r\n            this._indexStart = accessor.getMeshBuffer(bid).indexOffset;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Render component data submission process of UI.\r\n     * The submitted vertex data is the UI for world coordinates.\r\n     * For example: The UI components except Graphics and UIModel.\r\n     *\r\n     * @zh\r\n     * UI 渲染组件数据提交流程（针对提交的顶点数据是世界坐标的提交流程，例如：除 Graphics 和 UIModel 的大部分 ui 组件）。\r\n     * 此处的数据最终会生成需要提交渲染的 model 数据。\r\n     *\r\n     * @param comp - The committed renderable component\r\n     * @param renderData - The render data being committed\r\n     * @param frame - Texture or sprite frame related to the draw batch, could be null\r\n     * @param assembler - The assembler for the current component, could be null\r\n     * @param transform - Node type transform, if passed, then batcher will consider it's using model matrix, could be null\r\n     */\r\n    public commitComp (\r\n        comp: UIRenderer,\r\n        renderData: BaseRenderData | null,\r\n        frame: TextureBase | SpriteFrame | null,\r\n        assembler: IAssembler,\r\n        transform: Node | null,\r\n    ): void {\r\n        let dataHash = 0;\r\n        let mat;\r\n        let bufferID = -1;\r\n        if (renderData && renderData.chunk) {\r\n            if (!renderData.isValid()) return;\r\n            dataHash = renderData.dataHash;\r\n            mat = renderData.material;\r\n            bufferID = renderData.chunk.bufferId;\r\n        }\r\n        // Notice: A little hack, if it is for mask, not need update here, while control by stencilManger\r\n        if (comp.stencilStage === Stage.ENTER_LEVEL || comp.stencilStage === Stage.ENTER_LEVEL_INVERTED) {\r\n            this._insertMaskBatch(comp);\r\n        } else {\r\n            comp.stencilStage = StencilManager.sharedManager!.stage;\r\n        }\r\n        const depthStencilStateStage = comp.stencilStage;\r\n\r\n        if (this._currHash !== dataHash || dataHash === 0 || this._currMaterial !== mat\r\n            || this._currDepthStencilStateStage !== depthStencilStateStage) {\r\n            // Merge all previous data to a render batch, and update buffer for next render data\r\n            this.autoMergeBatches(this._currComponent!);\r\n            if (renderData && !renderData._isMeshBuffer) {\r\n                this.updateBuffer(renderData.vertexFormat, bufferID);\r\n            }\r\n\r\n            this._currRenderData = renderData;\r\n            this._currHash = renderData ? renderData.dataHash : 0;\r\n            this._currComponent = comp;\r\n            this._currTransform = transform;\r\n            this._currMaterial = comp.getRenderMaterial(0)!;\r\n            this._currDepthStencilStateStage = depthStencilStateStage;\r\n            this._currLayer = comp.node.layer;\r\n            if (frame) {\r\n                if (DEBUG) {\r\n                    assert(frame.isValid, 'frame should not be invalid, it may have been released');\r\n                }\r\n                this._currTexture = frame.getGFXTexture();\r\n                this._currSampler = frame.getGFXSampler();\r\n                this._currTextureHash = frame.getHash();\r\n                this._currSamplerHash = this._currSampler.hash;\r\n            } else {\r\n                this._currTexture = null;\r\n                this._currSampler = null;\r\n                this._currTextureHash = 0;\r\n                this._currSamplerHash = 0;\r\n            }\r\n        }\r\n\r\n        if (assembler.fillBuffers) assembler.fillBuffers(comp, this);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Render component data submission process for individual [[gfx.InputAssembler]]\r\n     * @zh\r\n     * 渲染组件中针对独立 [[gfx.InputAssembler]] 的提交流程\r\n     * 例如：Spine 和 DragonBones 等包含动态数据和材质的组件在内部管理 IA 并提交批次\r\n     * @param comp - The committed renderable component\r\n     * @param ia - The committed [[gfx.InputAssembler]]\r\n     * @param tex - The texture used\r\n     * @param mat - The material used\r\n     * @param [transform] - The related node transform if the render data is based on node's local coordinates\r\n     * @deprecated since v3.6.2, please use [[commitMiddleware]] instead\r\n     */\r\n    public commitIA (renderComp: UIRenderer, ia: InputAssembler, tex?: TextureBase, mat?: Material, transform?: Node): void {\r\n        // if the last comp is spriteComp, previous comps should be batched.\r\n        if (this._currMaterial !== this._emptyMaterial) {\r\n            this.autoMergeBatches(this._currComponent!);\r\n            this.resetRenderStates();\r\n        }\r\n        let depthStencil: DepthStencilState | null = null;\r\n        let dssHash = 0;\r\n        if (renderComp) {\r\n            renderComp.stencilStage = StencilManager.sharedManager!.stage;\r\n            if (renderComp.customMaterial !== null) {\r\n                depthStencil = StencilManager.sharedManager!.getStencilStage(renderComp.stencilStage, mat);\r\n            } else {\r\n                depthStencil = StencilManager.sharedManager!.getStencilStage(renderComp.stencilStage);\r\n            }\r\n            dssHash = StencilManager.sharedManager!.getStencilHash(renderComp.stencilStage);\r\n        }\r\n\r\n        const curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();\r\n        curDrawBatch.visFlags = renderComp.node.layer;\r\n        curDrawBatch.inputAssembler = ia;\r\n        curDrawBatch.useLocalData = transform || null;\r\n        if (tex) {\r\n            curDrawBatch.texture = tex.getGFXTexture();\r\n            curDrawBatch.sampler = tex.getGFXSampler();\r\n            curDrawBatch.textureHash = tex.getHash();\r\n            curDrawBatch.samplerHash = curDrawBatch.sampler.hash;\r\n        }\r\n        curDrawBatch.fillPasses(mat || null, depthStencil, dssHash, null);\r\n        this._batches.push(curDrawBatch);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Render component data submission process for middleware2d components\r\n     * @zh\r\n     * 渲染组件中针对2D中间件组件渲染数据的提交流程\r\n     * 例如：Spine 和 DragonBones 包含动态数据和材质的组件\r\n     * @param comp - The committed renderable component\r\n     * @param meshBuffer - The MeshBuffer used\r\n     * @param indexOffset - indices offset\r\n     * @param indexCount - indices count\r\n     * @param tex - The texture used\r\n     * @param mat - The material used\r\n     * @param enableBatch - component support multi draw batch or not\r\n     */\r\n    public commitMiddleware (\r\n        comp: UIRenderer,\r\n        meshBuffer: MeshBuffer,\r\n        indexOffset: number,\r\n        indexCount: number,\r\n        tex: TextureBase,\r\n        mat: Material,\r\n        enableBatch: boolean,\r\n    ): void {\r\n        // check if need merge draw batch\r\n        const texture = tex.getGFXTexture();\r\n        if (enableBatch && this._middlewareEnableBatch && this._middlewareBuffer === meshBuffer\r\n            && this._currTexture === texture\r\n            && this._currMaterial.hash === mat.hash\r\n            && this._middlewareIndexStart + this._middlewareIndexCount === indexOffset\r\n            && this._currLayer === comp.node.layer) {\r\n            this._middlewareIndexCount += indexCount;\r\n        } else {\r\n            this.autoMergeBatches(this._currComponent!);\r\n            this.resetRenderStates();\r\n\r\n            this._currComponent = comp;\r\n            this._currTexture = texture;\r\n            this._currSampler = tex.getGFXSampler();\r\n            this._currTextureHash = tex.getHash();\r\n            this._currLayer = comp.node.layer;\r\n            this._currSamplerHash = this._currSampler.hash;\r\n            this._currHash = 0;\r\n            this._currTransform = enableBatch ? null : comp.node;\r\n\r\n            this._middlewareEnableBatch = enableBatch;\r\n            this._middlewareBuffer = meshBuffer;\r\n            this._currMaterial = mat;\r\n            this._middlewareIndexStart = indexOffset;\r\n            this._middlewareIndexCount = indexCount;\r\n        }\r\n\r\n        this._currIsMiddleware = true;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Render component data submission process of UI.\r\n     * The submitted vertex data is the UI for local coordinates.\r\n     * For example: The UI components of Graphics and UIModel.\r\n     *\r\n     * @zh\r\n     * UI 渲染组件数据提交流程（针对例如： Graphics 和 UIModel 等数据量较为庞大的 ui 组件）。\r\n     *\r\n     * @param comp - The committed renderable component\r\n     * @param model - The committed model\r\n     * @param mat - The material used, could be null\r\n     */\r\n    public commitModel (comp: UIMeshRenderer | UIRenderer, model: Model | null, mat: Material | null): void {\r\n        // if the last comp is spriteComp, previous comps should be batched.\r\n        if (this._currMaterial !== this._emptyMaterial) {\r\n            this.autoMergeBatches(this._currComponent!);\r\n            this.resetRenderStates();\r\n        }\r\n\r\n        let depthStencil: DepthStencilState | null = null;\r\n        let dssHash = 0;\r\n        if (mat) {\r\n            // Notice: A little hack, if it is for mask, not need update here, while control by stencilManger\r\n            if (comp.stencilStage === Stage.ENTER_LEVEL || comp.stencilStage === Stage.ENTER_LEVEL_INVERTED) {\r\n                this._insertMaskBatch(comp);\r\n            } else {\r\n                comp.stencilStage = StencilManager.sharedManager!.stage;\r\n            }\r\n            depthStencil = StencilManager.sharedManager!.getStencilStage(comp.stencilStage, mat);\r\n            dssHash = StencilManager.sharedManager!.getStencilHash(comp.stencilStage);\r\n        }\r\n\r\n        const stamp: number = (cclegacy.director as Director).getTotalFrames();\r\n        if (model) {\r\n            model.updateTransform(stamp);\r\n            model.updateUBOs(stamp);\r\n        }\r\n\r\n        for (let i = 0; i < model!.subModels.length; i++) {\r\n            const curDrawBatch = this._drawBatchPool.alloc();\r\n            const subModel = model!.subModels[i];\r\n            curDrawBatch.visFlags = comp.node.layer;\r\n            curDrawBatch.model = model;\r\n            curDrawBatch.texture = null;\r\n            curDrawBatch.sampler = null;\r\n            curDrawBatch.useLocalData = null;\r\n            if (!depthStencil) { depthStencil = null; }\r\n            curDrawBatch.fillPasses(mat, depthStencil, dssHash, subModel.patches);\r\n            curDrawBatch.inputAssembler = subModel.inputAssembler;\r\n            curDrawBatch.model!.visFlags = curDrawBatch.visFlags;\r\n            curDrawBatch.descriptorSet = subModel.descriptorSet;\r\n            this._batches.push(curDrawBatch);\r\n        }\r\n    }\r\n\r\n    public setupStaticBatch (staticComp: UIStaticBatch, bufferAccessor: StaticVBAccessor): void {\r\n        this.finishMergeBatches();\r\n        this._staticVBBuffer = bufferAccessor;\r\n        this.currStaticRoot = staticComp;\r\n    }\r\n\r\n    public endStaticBatch (): void {\r\n        this.finishMergeBatches();\r\n        this.currStaticRoot = null;\r\n        // Clear linear buffer to switch to the correct internal accessor\r\n        this._staticVBBuffer = null;\r\n        this.switchBufferAccessor();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Submit separate render data.\r\n     * This data does not participate in the batch.\r\n     *\r\n     * @zh\r\n     * 提交独立渲染数据.\r\n     * @param comp @en The UIStaticBatch component.\r\n     *             @zh 静态组件\r\n     */\r\n    public commitStaticBatch (comp: UIStaticBatch): void {\r\n        this._batches.concat(comp.drawBatchList);\r\n        this.finishMergeBatches();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * End a section of render data and submit according to the batch condition.\r\n     *\r\n     * @zh\r\n     * 根据合批条件，结束一段渲染数据并提交。\r\n     */\r\n    public autoMergeBatches (renderComp?: UIRenderer): void {\r\n        if (this._currIsMiddleware) {\r\n            this.mergeBatchesForMiddleware(renderComp!);\r\n            return;\r\n        }\r\n        const mat = this._currMaterial;\r\n        if (!mat) {\r\n            return;\r\n        }\r\n        let ia: InputAssembler | undefined;\r\n        const rd = this._currRenderData as MeshRenderData;\r\n        const accessor = this._staticVBBuffer;\r\n        // Previous batch using mesh buffer\r\n        if (rd && rd._isMeshBuffer) {\r\n            ia = rd.requestIA(this.device);\r\n            if (this._meshDataArray.indexOf(rd) === -1) {\r\n                this._meshDataArray.push(rd);\r\n            }\r\n        } else if (accessor) {\r\n        // Previous batch using static vb buffer\r\n            const bid = this._currBID;\r\n            const buf = accessor.getMeshBuffer(bid);\r\n            if (!buf) {\r\n                return;\r\n            }\r\n            const indexCount = buf.indexOffset - this._indexStart;\r\n            if (indexCount <= 0) return;\r\n            assertIsTrue(this._indexStart < buf.indexOffset);\r\n            buf.setDirty();\r\n            // Request ia\r\n            ia = buf.requireFreeIA(this.device);\r\n            ia.firstIndex = this._indexStart;\r\n            ia.indexCount = indexCount;\r\n            // Update index tracker and bid\r\n            this._indexStart = buf.indexOffset;\r\n        }\r\n        this._currBID = -1;\r\n\r\n        // Request ia failed\r\n        if (!ia || !this._currTexture) {\r\n            return;\r\n        }\r\n\r\n        let depthStencil: DepthStencilState | null = null;\r\n        let dssHash = 0;\r\n        if (renderComp) {\r\n            if (renderComp.customMaterial !== null) {\r\n                depthStencil = StencilManager.sharedManager!.getStencilStage(renderComp.stencilStage, mat);\r\n            } else {\r\n                depthStencil = StencilManager.sharedManager!.getStencilStage(renderComp.stencilStage);\r\n            }\r\n            dssHash = StencilManager.sharedManager!.getStencilHash(renderComp.stencilStage);\r\n        }\r\n\r\n        const curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();\r\n        curDrawBatch.visFlags = this._currLayer;\r\n        curDrawBatch.texture = this._currTexture;\r\n        curDrawBatch.sampler = this._currSampler;\r\n        curDrawBatch.inputAssembler = ia;\r\n        curDrawBatch.useLocalData = this._currTransform;\r\n        curDrawBatch.textureHash = this._currTextureHash;\r\n        curDrawBatch.samplerHash = this._currSamplerHash;\r\n        curDrawBatch.fillPasses(mat, depthStencil, dssHash, null);\r\n\r\n        this._batches.push(curDrawBatch);\r\n    }\r\n\r\n    private mergeBatchesForMiddleware (renderComp: UIRenderer): void {\r\n        let depthStencil: DepthStencilState | null = null;\r\n        let dssHash = 0;\r\n        renderComp.stencilStage = StencilManager.sharedManager!.stage;\r\n        if (renderComp.customMaterial !== null) {\r\n            depthStencil = StencilManager.sharedManager!.getStencilStage(renderComp.stencilStage, this._currMaterial);\r\n        } else {\r\n            depthStencil = StencilManager.sharedManager!.getStencilStage(renderComp.stencilStage);\r\n        }\r\n        dssHash = StencilManager.sharedManager!.getStencilHash(renderComp.stencilStage);\r\n\r\n        const curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();\r\n        curDrawBatch.visFlags = renderComp.node.layer;\r\n        const ia = this._middlewareBuffer!.requireFreeIA(this.device);\r\n        ia.firstIndex = this._middlewareIndexStart;\r\n        ia.indexCount = this._middlewareIndexCount;\r\n\r\n        curDrawBatch.inputAssembler = ia;\r\n        curDrawBatch.useLocalData = this._currTransform;\r\n        curDrawBatch.texture = this._currTexture;\r\n        curDrawBatch.sampler = this._currSampler;\r\n        curDrawBatch.textureHash = this._currTextureHash;\r\n        curDrawBatch.samplerHash = this._currSamplerHash;\r\n        curDrawBatch.fillPasses(this._currMaterial || null, depthStencil, dssHash, null);\r\n        this._batches.push(curDrawBatch);\r\n\r\n        this._currIsMiddleware = false;\r\n        this._middlewareBuffer = null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Force changes to current batch data and merge\r\n     *\r\n     * @zh\r\n     * 强行修改当前批次数据并合并。\r\n     *\r\n     * @param material @en The material of the current batch.\r\n     *                 @zh 当前批次的材质。\r\n     * @param sprite @en Sprite frame of current batch.\r\n     *               @zh 当前批次的精灵帧。\r\n     */\r\n    public forceMergeBatches (material: Material, frame: TextureBase | SpriteFrame | null, renderComp: UIRenderer): void {\r\n        this._currMaterial = material;\r\n\r\n        if (frame) {\r\n            this._currTexture = frame.getGFXTexture();\r\n            this._currSampler = frame.getGFXSampler();\r\n            this._currTextureHash = frame.getHash();\r\n            this._currSamplerHash = this._currSampler.hash;\r\n        } else {\r\n            this._currTexture = this._currSampler = null;\r\n            this._currTextureHash = this._currSamplerHash = 0;\r\n        }\r\n        this._currLayer = renderComp.node.layer;\r\n\r\n        this.autoMergeBatches(renderComp);\r\n    }\r\n\r\n    public resetRenderStates (): void {\r\n        this._currMaterial = this._emptyMaterial;\r\n        this._currRenderData = null;\r\n        this._currTexture = null;\r\n        this._currComponent = null;\r\n        this._currTransform = null;\r\n        this._currTextureHash = 0;\r\n        this._currSamplerHash = 0;\r\n        this._currLayer = 0;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Forced to merge the data of the previous batch to start a new batch.\r\n     *\r\n     * @zh\r\n     * 强制合并上一个批次的数据，开启新一轮合批。\r\n     */\r\n    public finishMergeBatches (): void {\r\n        this.autoMergeBatches();\r\n        this.resetRenderStates();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Force to change the current material.\r\n     *\r\n     * @zh\r\n     * 强制刷新材质。\r\n     */\r\n    public flushMaterial (mat: Material): void {\r\n        this._currMaterial = mat;\r\n    }\r\n\r\n    private _handleUIRenderer (render: UIRenderer, finalOpacity: number, opacityDirty: boolean): void {\r\n        const renderData = render ? render.renderData : null;\r\n        const vertexCount = renderData ? renderData.vertexCount : 0;\r\n\r\n        // Render assembler update logic\r\n        if (render && render.enabledInHierarchy) {\r\n            render.fillBuffers(this);// for rendering\r\n        }\r\n\r\n        // Update cascaded opacity to vertex buffer\r\n        if (opacityDirty && vertexCount > 0) {\r\n            // HARD COUPLING\r\n            switch (render.getFillColorType()) {\r\n            case RenderEntityFillColorType.COLOR: {\r\n                updateOpacity(renderData!, finalOpacity);\r\n                break;\r\n            }\r\n            case RenderEntityFillColorType.VERTEX: {\r\n                // Use vertex color directly, so do nothing here.\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n            }\r\n\r\n            const buffer = renderData!.getMeshBuffer();\r\n            if (buffer) {\r\n                buffer.setDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _recordUIRenderer (render: UIRenderer, finalOpacity: number, opacityDirty: boolean): RecordedRendererInfo {\r\n        if (!USE_SORTING_2D) return null!;\r\n        const queue = this.getRecordedRendererInfoQueue();\r\n        const info = recordedRendererInfoPool.add();\r\n        info.uiRenderer = render;\r\n        info.finalOpacity = finalOpacity;\r\n        info.opacityDirty = opacityDirty;\r\n        queue.push(info);\r\n        return info;\r\n    }\r\n\r\n    private _flushRecordedUIRenderers (): void {\r\n        if (!USE_SORTING_2D) return;\r\n        const queue = this.getRecordedRendererInfoQueue();\r\n        const length = queue.length;\r\n        if (length === 0) return;\r\n\r\n        queue.sort((a, b) => a.uiRenderer!.priority - b.uiRenderer!.priority);\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            const info = queue[i];\r\n            const render = info.uiRenderer;\r\n\r\n            if (render) {\r\n                this._handleUIRenderer(render, info.finalOpacity, info.opacityDirty);\r\n                if (render.enabledInHierarchy) {\r\n                    render.postUpdateAssembler(this);\r\n                }\r\n            }\r\n            info.finalOpacity = 1;\r\n            info.opacityDirty = false;\r\n            info.uiRenderer = null;\r\n        }\r\n        queue.length = 0;\r\n    }\r\n\r\n    public walk (node: Node, level = 0): void {\r\n        if (!node.activeInHierarchy) {\r\n            return;\r\n        }\r\n        const children = node.children;\r\n        const uiProps = node._uiProps;\r\n        const render = uiProps.uiComp as UIRenderer | null;\r\n\r\n        // Save opacity\r\n        const parentOpacity = this._pOpacity;\r\n        let opacity = parentOpacity;\r\n        // TODO Always cascade ui property's local opacity before remove it\r\n        const selfOpacity = render && render.color ? render.color.a / 255 : 1;\r\n        this._pOpacity = opacity *= selfOpacity * uiProps.localOpacity;\r\n        // TODO Set opacity to ui property's opacity before remove it\r\n        uiProps.setOpacity(opacity);\r\n\r\n        const visable = !approx(opacity, 0, EPSILON);\r\n        if (visable) {\r\n            if (uiProps.colorDirty) {\r\n                // Cascade color dirty state\r\n                this._opacityDirty++;\r\n            }\r\n            if (render) {\r\n                if (USE_SORTING_2D && sorting2DCount > 0) {\r\n                    if (render.stencilStage === Stage.ENTER_LEVEL || render.stencilStage === Stage.ENTER_LEVEL_INVERTED) {\r\n                        this._flushRecordedUIRenderers();\r\n\r\n                        this.autoMergeBatches(this._currComponent!);\r\n                        this.resetRenderStates();\r\n                    }\r\n                    this._recordUIRenderer(render, opacity, !!this._opacityDirty);\r\n                } else {\r\n                    this._handleUIRenderer(render, opacity, !!this._opacityDirty);\r\n                }\r\n            }\r\n\r\n            if (children.length > 0 && !node._static) {\r\n                for (let i = 0; i < children.length; ++i) {\r\n                    const child = children[i];\r\n                    this.walk(child, level);\r\n                }\r\n            }\r\n\r\n            if (uiProps.colorDirty) {\r\n                // Reduce cascaded color dirty state\r\n                this._opacityDirty--;\r\n                // Reset color dirty\r\n                uiProps.colorDirty = false;\r\n            }\r\n        }\r\n        // Restore opacity\r\n        this._pOpacity = parentOpacity;\r\n\r\n        // Post render assembler update logic\r\n        // ATTENTION: Will also reset colorDirty inside postUpdateAssembler\r\n        if (render && render.enabledInHierarchy) {\r\n            if (!USE_SORTING_2D) {\r\n                render.postUpdateAssembler(this);\r\n            }\r\n            if (visable && (render.stencilStage === Stage.ENTER_LEVEL || render.stencilStage === Stage.ENTER_LEVEL_INVERTED)) {\r\n                if (USE_SORTING_2D && sorting2DCount > 0) {\r\n                    this._flushRecordedUIRenderers();\r\n                }\r\n\r\n                if (StencilManager.sharedManager!.getMaskStackSize() > 0) {\r\n                    this.autoMergeBatches(this._currComponent!);\r\n                    this.resetRenderStates();\r\n                    StencilManager.sharedManager!.exitMask();\r\n                }\r\n            }\r\n        }\r\n\r\n        level += 1;\r\n    }\r\n\r\n    private _screenSort (a: RenderRoot2D, b: RenderRoot2D): number {\r\n        return a.node.siblingIndex - b.node.siblingIndex;\r\n    }\r\n\r\n    // TODO: Not a good way to do the job\r\n    // Although it's a private method, it is invoked in text-processing.ts and texture-base.ts\r\n    // by legacyCC.director.root.batcher2D._releaseDescriptorSetCache\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _releaseDescriptorSetCache (textureHash: number | Texture | null, sampler: Sampler | null = null): void {\r\n        if (JSB) {\r\n            this._nativeObj.releaseDescriptorSetCache(textureHash as Texture, sampler as Sampler);\r\n        } else {\r\n            this._descriptorSetCache.releaseDescriptorSetCache(textureHash as number);\r\n        }\r\n    }\r\n\r\n    // Mask use\r\n    private _createClearModel (): void {\r\n        if (!this._maskClearModel) {\r\n            this._maskClearMtl = builtinResMgr.get<Material>('default-clear-stencil');\r\n\r\n            this._maskClearModel = (cclegacy.director.root as Root).createModel(scene.Model);\r\n            const stride = getAttributeStride(vfmt);\r\n            const gfxDevice: Device = deviceManager.gfxDevice;\r\n            const vertexBuffer = gfxDevice.createBuffer(new BufferInfo(\r\n                BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.DEVICE,\r\n                4 * stride,\r\n                stride,\r\n            ));\r\n\r\n            const vb = new Float32Array([-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0]);\r\n            vertexBuffer.update(vb);\r\n            const indexBuffer = gfxDevice.createBuffer(new BufferInfo(\r\n                BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.DEVICE,\r\n                6 * Uint16Array.BYTES_PER_ELEMENT,\r\n                Uint16Array.BYTES_PER_ELEMENT,\r\n            ));\r\n\r\n            const ib = new Uint16Array([0, 1, 2, 2, 1, 3]);\r\n            indexBuffer.update(ib);\r\n            this._maskModelMesh = new RenderingSubMesh([vertexBuffer], vfmt, PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n            this._maskModelMesh.subMeshIdx = 0;\r\n\r\n            this._maskClearModel.initSubModel(0, this._maskModelMesh, this._maskClearMtl);\r\n        }\r\n    }\r\n\r\n    private _insertMaskBatch (comp: UIRenderer | UIMeshRenderer): void {\r\n        this.autoMergeBatches(this._currComponent!);\r\n        this.resetRenderStates();\r\n        this._createClearModel();\r\n        this._maskClearModel!.node = this._maskClearModel!.transform = comp.node;\r\n        const stencilManager = StencilManager.sharedManager!;\r\n        stencilManager.pushMask(1);//not need object，only use length\r\n        const stage =  stencilManager.clear(comp); //invert\r\n\r\n        let depthStencil: DepthStencilState | null = null;\r\n        let dssHash = 0;\r\n        const mat = this._maskClearMtl;\r\n        if (mat) {\r\n            depthStencil = stencilManager.getStencilStage(stage, mat);\r\n            dssHash = stencilManager.getStencilHash(stage);\r\n        }\r\n\r\n        const model = this._maskClearModel!;\r\n        const stamp: number = (cclegacy.director as Director).getTotalFrames();\r\n        if (model) {\r\n            model.updateTransform(stamp);\r\n            model.updateUBOs(stamp);\r\n        }\r\n\r\n        for (let i = 0; i < model.subModels.length; i++) {\r\n            const curDrawBatch = this._drawBatchPool.alloc();\r\n            const subModel = model.subModels[i];\r\n            curDrawBatch.visFlags = comp.node.layer;\r\n            curDrawBatch.model = model;\r\n            curDrawBatch.texture = null;\r\n            curDrawBatch.sampler = null;\r\n            curDrawBatch.useLocalData = null;\r\n            if (!depthStencil) { depthStencil = null; }\r\n            curDrawBatch.fillPasses(mat, depthStencil, dssHash, subModel.patches);\r\n            curDrawBatch.inputAssembler = subModel.inputAssembler;\r\n            curDrawBatch.model.visFlags = curDrawBatch.visFlags;\r\n            curDrawBatch.descriptorSet = subModel.descriptorSet;\r\n            this._batches.push(curDrawBatch);\r\n        }\r\n        stencilManager.enableMask();\r\n    }\r\n\r\n    //sync mesh buffer to naive\r\n    public syncMeshBuffersToNative (accId: number, buffers: MeshBuffer[]): void {\r\n        if (JSB) {\r\n            const nativeBuffers = buffers.map((buf) => buf.nativeObj);\r\n            this._nativeObj.syncMeshBuffersToNative(accId, nativeBuffers);\r\n        }\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nclass LocalDescriptorSet  {\r\n    private _descriptorSet: DescriptorSet | null = null;\r\n    private _transform: Node | null = null;\r\n    private _textureHash = 0;\r\n    private _samplerHash = 0;\r\n    private _localBuffer: Buffer | null = null;\r\n    private _transformUpdate = true;\r\n    private declare _localData: Float32Array | null;\r\n\r\n    // NOTE: Internal modules should avoid using getter/setter accessors since we're using babel to convert TS to JS\r\n    // and terser minifier could not handle the getter/setter generated JS code correctly.\r\n    // See the issue: https://github.com/terser/terser/issues/322\r\n    // Change get descriptorSet() to getDescriptorSet() in v3.8.6.\r\n    public getDescriptorSet (): DescriptorSet | null {\r\n        return this._descriptorSet;\r\n    }\r\n\r\n    constructor () {\r\n        const device = deviceManager.gfxDevice;\r\n        this._localData = new Float32Array(UBOLocalEnum.COUNT);\r\n        this._localBuffer = device.createBuffer(new BufferInfo(\r\n            BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST,\r\n            MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n            UBOLocalEnum.SIZE,\r\n            UBOLocalEnum.SIZE,\r\n        ));\r\n    }\r\n\r\n    public initialize (batch: DrawBatch2D): void {\r\n        const device = deviceManager.gfxDevice;\r\n        this._transform = batch.useLocalData;\r\n        this._textureHash = batch.textureHash;\r\n        this._samplerHash = batch.samplerHash;\r\n        _dsInfo.layout = batch.passes[0].localSetLayout;\r\n        this._descriptorSet = device.createDescriptorSet(_dsInfo);\r\n        this._descriptorSet.bindBuffer(UBOLocalEnum.BINDING, this._localBuffer!);\r\n        const binding = ModelLocalBindings.SAMPLER_SPRITE;\r\n        this._descriptorSet.bindTexture(binding, batch.texture!);\r\n        this._descriptorSet.bindSampler(binding, batch.sampler!);\r\n        this._descriptorSet.update();\r\n        this._transformUpdate = true;\r\n    }\r\n\r\n    public updateTransform (transform: Node): void {\r\n        if (transform === this._transform) return;\r\n        this._transform = transform;\r\n        this._transformUpdate = true;\r\n        this.uploadLocalData();\r\n    }\r\n\r\n    public equals (transform, textureHash, samplerHash): boolean {\r\n        return this._transform === transform && this._textureHash === textureHash && this._samplerHash === samplerHash;\r\n    }\r\n\r\n    public reset (): void {\r\n        this._transform = null;\r\n        this._textureHash = 0;\r\n        this._samplerHash = 0;\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._localBuffer) {\r\n            this._localBuffer.destroy();\r\n            this._localBuffer = null;\r\n        }\r\n\r\n        if (this._descriptorSet) {\r\n            this._descriptorSet.destroy();\r\n            this._descriptorSet = null;\r\n        }\r\n\r\n        this._localData = null;\r\n    }\r\n\r\n    public isValid (): boolean | null {\r\n        return this._transform && this._transform.isValid;\r\n    }\r\n\r\n    public uploadLocalData (): void {\r\n        const node = this._transform!;\r\n        if (node.hasChangedFlags || node.isTransformDirty()) {\r\n            node.updateWorldTransform();\r\n            this._transformUpdate = true;\r\n        }\r\n        if (this._transformUpdate) {\r\n            const worldMatrix = node.worldMatrix;\r\n            Mat4.toArray(this._localData!, worldMatrix, UBOLocalEnum.MAT_WORLD_OFFSET);\r\n\r\n            Mat4.invert(m4_1, worldMatrix);\r\n            Mat4.transpose(m4_1, m4_1);\r\n\r\n            if (!JSB) {\r\n                // fix precision lost of webGL on android device\r\n                // scale worldIT mat to around 1.0 by product its sqrt of determinant.\r\n                const det = Mat4.determinant(m4_1);\r\n                const factor = 1.0 / Math.sqrt(det);\r\n                Mat4.multiplyScalar(m4_1, m4_1, factor);\r\n            }\r\n            Mat4.toArray(this._localData!, m4_1, UBOLocalEnum.MAT_WORLD_IT_OFFSET);\r\n            this._localBuffer!.update(this._localData!);\r\n            this._transformUpdate = false;\r\n        }\r\n    }\r\n}\r\n\r\n/** @mangle */\r\nclass DescriptorSetCache {\r\n    private _descriptorSetCache = new Map<number, DescriptorSet>();\r\n    private _dsCacheHashByTexture = new Map<number, number>();\r\n    private _localDescriptorSetCache: LocalDescriptorSet[] = [];\r\n    private declare _localCachePool: Pool<LocalDescriptorSet>;\r\n\r\n    constructor () {\r\n        this._localCachePool = new Pool(() => new LocalDescriptorSet(), 16, (obj) => obj.destroy());\r\n    }\r\n\r\n    public getDescriptorSet (batch: DrawBatch2D): DescriptorSet {\r\n        if (batch.useLocalData) {\r\n            const caches = this._localDescriptorSetCache;\r\n            for (let i = 0, len = caches.length; i < len; i++) {\r\n                const cache: LocalDescriptorSet = caches[i];\r\n                if (cache.equals(batch.useLocalData, batch.textureHash, batch.samplerHash)) {\r\n                    return cache.getDescriptorSet()!;\r\n                }\r\n            }\r\n            const localDs = this._localCachePool.alloc();\r\n            localDs.initialize(batch);\r\n            this._localDescriptorSetCache.push(localDs);\r\n            return localDs.getDescriptorSet()!;\r\n        } else {\r\n            const hash = batch.textureHash ^ batch.samplerHash;\r\n            if (this._descriptorSetCache.has(hash)) {\r\n                return this._descriptorSetCache.get(hash)!;\r\n            } else {\r\n                _dsInfo.layout = batch.passes[0].localSetLayout;\r\n                const descriptorSet = deviceManager.gfxDevice.createDescriptorSet(_dsInfo);\r\n                const binding = ModelLocalBindings.SAMPLER_SPRITE;\r\n                descriptorSet.bindTexture(binding, batch.texture!);\r\n                descriptorSet.bindSampler(binding, batch.sampler!);\r\n                descriptorSet.update();\r\n\r\n                this._descriptorSetCache.set(hash, descriptorSet);\r\n                this._dsCacheHashByTexture.set(batch.textureHash, hash);\r\n\r\n                return descriptorSet;\r\n            }\r\n        }\r\n    }\r\n\r\n    public update (): void {\r\n        const caches = this._localDescriptorSetCache;\r\n        const length = caches.length;\r\n        if (length === 0) { return; }\r\n        const uselessArray: number[] = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const value = caches[i];\r\n            if (value.isValid()) {\r\n                value.uploadLocalData();\r\n            } else {\r\n                value.reset();\r\n                const pos = caches.indexOf(value);\r\n                uselessArray.push(pos);\r\n            }\r\n        }\r\n        for (let i = uselessArray.length - 1; i >= 0; i--) {\r\n            const index = uselessArray[i];\r\n            const localDs = caches[index];\r\n            caches.splice(index, 1);\r\n            this._localCachePool.free(localDs);\r\n        }\r\n    }\r\n\r\n    public reset (): void {\r\n        const caches = this._localDescriptorSetCache;\r\n        const length = caches.length;\r\n        for (let i = 0; i < length; i++) {\r\n            const value = caches[i];\r\n            this._localCachePool.free(value);\r\n        }\r\n        this._localDescriptorSetCache.length = 0;\r\n    }\r\n\r\n    public releaseDescriptorSetCache (textureHash: number): void {\r\n        const key = this._dsCacheHashByTexture.get(textureHash);\r\n        if (key && this._descriptorSetCache.has(key)) {\r\n            this._descriptorSetCache.get(key)!.destroy();\r\n            this._descriptorSetCache.delete(key);\r\n            this._dsCacheHashByTexture.delete(textureHash);\r\n        }\r\n    }\r\n\r\n    public destroy (): void {\r\n        for (const value of this._descriptorSetCache.values()) {\r\n            value.destroy();\r\n        }\r\n        this._descriptorSetCache.clear();\r\n        this._dsCacheHashByTexture.clear();\r\n        this._localDescriptorSetCache.length = 0;\r\n        this._localCachePool.destroy();\r\n    }\r\n}\r\n\r\ncclegacy.internal.Batcher2D = Batcher2D;\r\n","/*\r\n Copyright (c) 2025 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, disallowMultiple, editable, executeInEditMode, help, menu, range, serializable, type, requireComponent } from 'cc.decorator';\r\nimport { clamp } from '../core/math';\r\nimport { SortingLayers } from './sorting-layers';\r\nimport { Component } from '../scene-graph/component';\r\nimport { warnID } from '../core/platform/debug';\r\nimport { UIRenderer } from '../2d/framework/ui-renderer';\r\nimport { _setSorting2DCount } from '../2d/renderer/batcher-2d';\r\n\r\nconst MAX_INT16 = (1 << 15) - 1;\r\nconst MIN_INT16 = -1 << 15;\r\n\r\nlet sorting2DCount = 0;\r\n\r\n/**\r\n * @en\r\n * 2D Render sort component.\r\n *\r\n * @zh\r\n * 2D 渲染排序组件。\r\n */\r\n@ccclass('cc.Sorting2D')\r\n@menu('Sorting/Sorting2D')\r\n@help('i18n:cc.Sorting2D')\r\n@disallowMultiple\r\n@executeInEditMode\r\n@requireComponent(UIRenderer)\r\nexport class Sorting2D extends Component {\r\n    private _isSorting2DEnabled = false;\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @zh 组件所属排序层 id，影响组件的渲染排序。\r\n     * @en The sorting layer id of the component, which affects the rendering order of the component.\r\n     */\r\n    @editable\r\n    @type(SortingLayers.Enum)\r\n    get sortingLayer (): number {\r\n        return this._sortingLayer;\r\n    }\r\n    set sortingLayer (val) {\r\n        if (val === this._sortingLayer || !SortingLayers.isLayerValid(val)) return;\r\n        this._sortingLayer = val;\r\n        this._updateSortingPriority();\r\n    }\r\n\r\n    /**\r\n     * @zh 组件在当前排序层中的顺序，在默认排序规则中，越小越先渲染。\r\n     * @en Model Renderer's order within a sorting layer. In the default sorting rule, smaller values are rendered first.\r\n     */\r\n    @range([MIN_INT16, MAX_INT16, 1])\r\n    get sortingOrder (): number {\r\n        return this._sortingOrder;\r\n    }\r\n    set sortingOrder (val) {\r\n        if (val === this._sortingOrder) return;\r\n        this._sortingOrder = clamp(val, MIN_INT16, MAX_INT16);\r\n        this._updateSortingPriority();\r\n    }\r\n\r\n    @serializable\r\n    protected _sortingLayer = SortingLayers.Enum.default; // Actually saved id\r\n    @serializable\r\n    protected _sortingOrder = 0;\r\n\r\n    private _uiRenderer: UIRenderer | null = null;\r\n\r\n    protected override __preload (): void {\r\n        this._uiRenderer = this.getComponent(UIRenderer);\r\n        if (!this._uiRenderer) {\r\n            warnID(16300, this.node.name);\r\n        }\r\n    }\r\n\r\n    protected override onEnable (): void {\r\n        this._isSorting2DEnabled = true;\r\n        this._updateSortingPriority();\r\n        ++sorting2DCount;\r\n        _setSorting2DCount(sorting2DCount);\r\n    }\r\n\r\n    protected override onDisable (): void {\r\n        this._isSorting2DEnabled = false;\r\n        this._updateSortingPriority();\r\n        --sorting2DCount;\r\n        _setSorting2DCount(sorting2DCount);\r\n    }\r\n\r\n    protected _updateSortingPriority (): void {\r\n        const uiRenderer = this._uiRenderer;\r\n        if (uiRenderer && uiRenderer.isValid) {\r\n            if (this._isSorting2DEnabled) {\r\n                const sortingLayerValue = SortingLayers.getLayerIndex(this._sortingLayer);\r\n                const sortingPriority = SortingLayers.getSortingPriority(sortingLayerValue, this._sortingOrder);\r\n                uiRenderer.priority = sortingPriority;\r\n            } else {\r\n                uiRenderer.priority = SortingLayers.getDefaultPriority();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["node","renderer","renderData","color","chunk","dataList","data","vData","vb","vertexCount","m","worldMatrix","m00","m01","m02","m03","m04","m05","m06","m07","m12","m13","m14","m15","_col","set","r","g","b","a","vertexOffset","i","vert","x","y","rhw","Vec4","toArray","floatStride","bufferId","vid","meshBuffer","ib","iData","indexOffset","count","start","indexCount","setDirty","updateOpacity","opacity","vbUint32View","attr","format","stride","vfmt","vertexFormat","offset","length","FormatInfos","hasAlpha","size","Uint32Array","buffer","byteOffset","alpha","clamp","Math","round","UI_VIS_FLAG","Layers","Enum","NONE","UI_3D","DrawBatch2D","this","model","texture","sampler","useLocalData","isStatic","textureHash","samplerHash","_passes","_shaders","visFlags","inputAssembler","descriptorSet","_proto","prototype","destroy","clear","fillPasses","mat","dss","dssHash","patches","passes","Pass","cclegacy","director","root","mtlPass","passInUse","update","depthStencilState","_initPassFromTarget","getShaderVariant","_createClass","key","get","sorting2DCount","_setSorting2DCount","v","_dsInfo","DescriptorSetInfo","m4_1","Mat4","recordedRendererInfoPool","RecyclePool","uiRenderer","finalOpacity","opacityDirty","Batcher2D","_root","_this","_screens","_staticVBBuffer","_bufferAccessors","Map","_currBID","_indexStart","_emptyMaterial","Material","_currRenderData","_currMaterial","_currTexture","_currSampler","_currStaticRoot","_currComponent","_currTransform","_currTextureHash","_currSamplerHash","_currLayer","_currDepthStencilStateStage","_currHash","_currIsMiddleware","_middlewareEnableBatch","_middlewareBuffer","_middlewareIndexStart","_middlewareIndexCount","_pOpacity","_opacityDirty","_descriptorSetCache","DescriptorSetCache","_meshDataArray","_maskClearModel","_maskClearMtl","_maskModelMesh","_recordedRendererInfoQueue","device","_batches","CachedArray","_drawBatchPool","Pool","obj","getRecordedRendererInfoQueue","initialize","array","_step","_iterator","_createForOfIteratorHelperLoose","values","done","value","StencilManager","sharedManager","destroyModel","syncRootNodesToNative","addScreen","comp","push","sort","_screenSort","removeScreen","idx","indexOf","splice","sortScreens","getFirstRenderCamera","scene","renderScene","cameras","camera","visibility","layer","screens","screen","_getRenderScene","enabledInHierarchy","walk","_flushRecordedUIRenderers","autoMergeBatches","resetRenderStates","batchPriority","batch","subModels","j","priority","getDescriptorSet","addBatch","reset","uploadBuffers","_step3","_iterator3","accessor","free","_step4","_iterator4","freeIAPool","switchBufferAccessor","attributes","vfmtPosUvColor","strideBytes","getAttributeStride","vertexFormatBytes","StaticVBAccessor","registerBufferAccessor","updateBuffer","bid","getMeshBuffer","commitComp","frame","assembler","transform","dataHash","bufferID","isValid","material","stencilStage","Stage","ENTER_LEVEL","ENTER_LEVEL_INVERTED","_insertMaskBatch","stage","depthStencilStateStage","_isMeshBuffer","getRenderMaterial","assert","getGFXTexture","getGFXSampler","getHash","hash","fillBuffers","commitIA","renderComp","ia","tex","depthStencil","customMaterial","getStencilStage","getStencilHash","curDrawBatch","_requireDrawBatch","alloc","commitMiddleware","enableBatch","commitModel","stamp","getTotalFrames","updateTransform","updateUBOs","subModel","setupStaticBatch","staticComp","bufferAccessor","finishMergeBatches","currStaticRoot","endStaticBatch","commitStaticBatch","concat","drawBatchList","mergeBatchesForMiddleware","rd","requestIA","buf","assertIsTrue","requireFreeIA","firstIndex","forceMergeBatches","flushMaterial","_handleUIRenderer","render","getFillColorType","RenderEntityFillColorType","COLOR","VERTEX","_recordUIRenderer","queue","info","add","postUpdateAssembler","level","activeInHierarchy","children","uiProps","_uiProps","uiComp","parentOpacity","selfOpacity","localOpacity","setOpacity","visable","approx","EPSILON","colorDirty","_static","child","getMaskStackSize","exitMask","siblingIndex","_releaseDescriptorSetCache","releaseDescriptorSetCache","_createClearModel","builtinResMgr","createModel","gfxDevice","deviceManager","vertexBuffer","createBuffer","BufferInfo","BufferUsageBit","TRANSFER_DST","MemoryUsageBit","DEVICE","Float32Array","indexBuffer","INDEX","Uint16Array","BYTES_PER_ELEMENT","RenderingSubMesh","PrimitiveMode","TRIANGLE_LIST","subMeshIdx","initSubModel","stencilManager","pushMask","enableMask","syncMeshBuffersToNative","_nativeObj","LocalDescriptorSet","_proto2","_descriptorSet","_transform","_textureHash","_samplerHash","_localBuffer","_transformUpdate","_localData","UBOLocalEnum","COUNT","UNIFORM","HOST","SIZE","layout","localSetLayout","createDescriptorSet","bindBuffer","BINDING","binding","ModelLocalBindings","SAMPLER_SPRITE","bindTexture","bindSampler","uploadLocalData","equals","hasChangedFlags","isTransformDirty","updateWorldTransform","MAT_WORLD_OFFSET","invert","transpose","det","determinant","factor","sqrt","multiplyScalar","MAT_WORLD_IT_OFFSET","_dsCacheHashByTexture","_localDescriptorSetCache","_localCachePool","_proto3","caches","len","cache","localDs","has","uselessArray","pos","index","_step5","_iterator5","internal","ccclass","requireComponent","UIRenderer","_dec3","type","SortingLayers","disallowMultiple","_class","_dec2","_class2","_Component","Sorting2D","call","_isSorting2DEnabled","_sortingLayer","_initializer","_sortingOrder","_initializer2","_uiRenderer","_inheritsLoose","__preload","getComponent","warnID","name","onEnable","_updateSortingPriority","onDisable","sortingLayerValue","getLayerIndex","sortingPriority","getSortingPriority","getDefaultPriority","val","isLayerValid","Component","serializable","_applyDecoratedInitializer"],"mappings":"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"}