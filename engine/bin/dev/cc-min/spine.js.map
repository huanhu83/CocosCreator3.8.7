{"version":3,"file":"spine.js","sources":["../../../cocos/spine/lib/spine-core.js","../../../cocos/spine/lib/spine-define.ts","../../../cocos/spine/lib/spine-wasm-utils.ts","../../../cocos/spine/lib/instantiated.ts","../../../cocos/spine/lib/spine-instantiate-4.2.ts","../../../cocos/spine/track-entry-listeners.ts","../../../cocos/spine/skeleton-cache.ts","../../../cocos/spine/skeleton-data.ts","../../../cocos/spine/skeleton-system.ts","../../../cocos/spine/attach-util.ts","../../../cocos/spine/skeleton.ts","../../../cocos/spine/vertex-effect-delegate.ts","../../../cocos/spine/assembler/simple.ts","../../../cocos/spine/assembler/index.ts","../../../cocos/spine/index.ts","../../../cocos/spine/lib/spine-version-4.2.ts"],"sourcesContent":["var spine;\r\n(function (spine) {\r\n\r\n    function defineReverseKeyEnum(e) {\r\n        for (var key in e) {\r\n            var value = e[key];\r\n            e[value] = key;\r\n        }\r\n    }\r\n\r\n    var e = spine.MixBlend = {\r\n        setup: 0,\r\n        first: 1,\r\n        replace: 2,\r\n        add: 3\r\n    };\r\n    defineReverseKeyEnum(e);\r\n    \r\n    e = spine.MixDirection = {\r\n        mixIn: 0,\r\n        mixOut: 1\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.TimelineType = {\r\n        rotate: 0,\r\n        translate: 1,\r\n        scale: 2,\r\n        shear: 3,\r\n        attachment: 4,\r\n        color: 5,\r\n        deform: 6,\r\n        event: 7,\r\n        drawOrder: 8,\r\n        ikConstraint: 9,\r\n        transformConstraint: 10,\r\n        pathConstraintPosition: 11,\r\n        pathConstraintSpacing: 12,\r\n        pathConstraintMix: 13,\r\n        twoColor: 14\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.EventType = {\r\n        start:0,\r\n        interrupt: 1,\r\n        end: 2,\r\n        complete: 3,\r\n        dispose: 4,\r\n        event: 5\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.BlendMode = {\r\n        Normal:0,\r\n        Additive: 1,\r\n        Multiply: 2,\r\n        Screen: 3\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.TransformMode = {\r\n        Normal: 0,\r\n        OnlyTranslation: 1,\r\n        NoRotationOrReflection: 2,\r\n        NoScale: 3,\r\n        NoScaleOrReflection: 4\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.PositionMode = {\r\n        Fixed: 0,\r\n        Percent: 1\r\n    };\r\n    defineReverseKeyEnum(e);\r\n    \r\n    e = spine.SpacingMode = {\r\n        Length: 0,\r\n        Fixed: 1,\r\n        Percent: 2\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.RotateMode = {\r\n        Tangent: 0,\r\n        Chain: 1,\r\n        ChainScale: 2\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.TextureFilter = {\r\n        Nearest: 9728,\r\n        Linear: 9729,\r\n        MipMap: 9987,\r\n        MipMapNearestNearest: 9984,\r\n        MipMapLinearNearest: 9985,\r\n        MipMapNearestLinear: 9986,\r\n        MipMapLinearLinear: 9987\r\n    };\r\n    defineReverseKeyEnum(e);\r\n    \r\n    e = spine.TextureWrap = {\r\n        MirroredRepeat: 33648,\r\n        ClampToEdge: 33071,\r\n        Repeat: 10497\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = spine.AttachmentType = {\r\n        Region: 0,\r\n        BoundingBox: 1,\r\n        Mesh: 2,\r\n        LinkedMesh: 3,\r\n        Path: 4,\r\n        Point: 5,\r\n        Clipping: 6\r\n    };\r\n    defineReverseKeyEnum(e);\r\n\r\n    e = null;\r\n\r\n    const PI = 3.1415927;\r\n    const PI2 = PI * 2;\r\n    const radiansToDegrees = 180 / PI;\r\n    const radDeg = radiansToDegrees;\r\n    const degreesToRadians = PI / 180;\r\n    const degRad = degreesToRadians;\r\n\r\n    spine.MathUtils = class MathUtils {\r\n        static PI = PI;\r\n        static PI2 = PI2;\r\n        static radiansToDegrees = radiansToDegrees;\r\n        static radDeg = radDeg;\r\n        static degreesToRadians = degreesToRadians;\r\n        static degRad = degRad;\r\n\r\n\t\tstatic clamp (value, min, max) {\r\n\t\t\tif (value < min) return min;\r\n\t\t\tif (value > max) return max;\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tstatic cosDeg (degrees) {\r\n\t\t\treturn Math.cos(degrees * degRad);\r\n\t\t}\r\n\r\n\t\tstatic sinDeg (degrees) {\r\n\t\t\treturn Math.sin(degrees * degRad);\r\n\t\t}\r\n\r\n\t\tstatic signum (value) {\r\n\t\t\treturn value > 0 ? 1 : value < 0 ? -1 : 0;\r\n\t\t}\r\n\r\n\t\tstatic toInt (x) {\r\n\t\t\treturn x > 0 ? Math.floor(x) : Math.ceil(x);\r\n\t\t}\r\n\r\n\t\tstatic cbrt (x) {\r\n\t\t\tlet y = Math.pow(Math.abs(x), 1/3);\r\n\t\t\treturn x < 0 ? -y : y;\r\n\t\t}\r\n\r\n\t\tstatic randomTriangular (min, max) {\r\n\t\t\treturn MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\r\n\t\t}\r\n\r\n\t\tstatic randomTriangularWith (min, max, mode) {\r\n\t\t\tlet u = Math.random();\r\n\t\t\tlet d = max - min;\r\n\t\t\tif (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\r\n\t\t\treturn max - Math.sqrt((1 - u) * d * (max - mode));\r\n\t\t}\r\n\t}\r\n\r\n})(spine || (spine = {}));\r\nexport default spine;\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n/* eslint @typescript-eslint/no-explicit-any: \"off\" */\r\n/* eslint @typescript-eslint/no-unsafe-argument: \"off\" */\r\n\r\nimport spine from './spine-core';\r\nimport { SPINE_VERSION } from './spine-version';\r\nimport { js } from '../../core';\r\n\r\nfunction resizeArray (array: any[], newSize: number): any[] {\r\n    if (!array) return new Array(newSize);\r\n    if (newSize === array.length) return array;\r\n    if (newSize < array.length) return array.slice(0, newSize);\r\n    else return new Array(newSize);\r\n}\r\n\r\nfunction overrideDefineArrayProp (prototype: any, getPropVector: any, name: string): void {\r\n    const _name = `_${name}`;\r\n    Object.defineProperty(prototype, name, {\r\n        get (): any[] {\r\n            const vectors = getPropVector.call(this);\r\n            const count = vectors.size();\r\n            let array = this[_name] as any[];\r\n            array = resizeArray(array, count);\r\n            for (let i = 0; i < count; i++) array[i] = vectors.get(i);\r\n            this[_name] = array;\r\n            return array;\r\n        },\r\n    });\r\n}\r\n\r\nfunction overrideDefineArrayArrayProp (prototype: any, getPropVector: any, name: string): void {\r\n    const _name = `_${name}`;\r\n    Object.defineProperty(prototype, name, {\r\n        get (): any[] {\r\n            const vectors = getPropVector.call(this);\r\n            const count = vectors.size();\r\n            let array = this[_name];\r\n            array = resizeArray(array, count);\r\n            for (let i = 0; i < count; i++) {\r\n                const vectorI = vectors.get(i);\r\n                const countJ = vectorI.size();\r\n                let arrayJ: any[] = array[i];\r\n                arrayJ = resizeArray(arrayJ, countJ);\r\n                for (let j = 0; j < countJ; j++) arrayJ[j] = vectorI.get(j);\r\n                array[i] = arrayJ;\r\n            }\r\n            this[_name] = array;\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n            return array;\r\n        },\r\n    });\r\n}\r\n\r\nfunction overrideDefineArrayFunction (prototype: any, getPropVector: any, name: string): void {\r\n    const _name = `_${name}`;\r\n    Object.defineProperty(prototype, name, {\r\n        value (): any[] {\r\n            const vectors = getPropVector.call(this);\r\n            const count = vectors.size();\r\n            let array = this[_name] as any[];\r\n            array = resizeArray(array, count);\r\n            for (let i = 0; i < count; i++) array[i] = vectors.get(i);\r\n            this[_name] = array;\r\n            return array;\r\n        },\r\n    });\r\n}\r\n\r\nfunction overrideClass (wasm): void {\r\n    spine.wasmUtil = wasm.SpineWasmUtil;\r\n    spine.wasmUtil.wasm = wasm;\r\n    spine.wasmUtil.spineWasmInit();\r\n\r\n    for (const k in wasm) {\r\n        const v = wasm[k];\r\n        if (!spine[k]) {\r\n            spine[k] = v;\r\n        }\r\n    }\r\n}\r\n\r\nfunction overrideProperty_IkConstraintData (): void {\r\n    const prototype = spine.IkConstraintData.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n}\r\n\r\nfunction overrideProperty_PathConstraintData (): void {\r\n    const prototype = spine.PathConstraintData.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n}\r\n\r\nfunction overrideProperty_VertexAttachment (): void {\r\n    const prototype = spine.VertexAttachment.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n    overrideDefineArrayProp(prototype, prototype.getVertices, 'vertices');\r\n    const originComputeWorldVertices = prototype.computeWorldVertices;\r\n    const vectors = new spine.SPVectorFloat();\r\n    Object.defineProperty(prototype, 'computeWorldVertices', {\r\n        value (slot: spine.Slot, start: number, count: number, worldVertices: number[], offset: number, stride: number) {\r\n            const length = worldVertices.length;\r\n            vectors.resize(length, 0);\r\n            for (let i = 0; i < length; i++) vectors.set(i, worldVertices[i]);\r\n            originComputeWorldVertices.call(this, slot, start, count, vectors, offset, stride);\r\n            for (let i = 0; i < length; i++) worldVertices[i] = vectors.get(i);\r\n        },\r\n    });\r\n}\r\n\r\nfunction overrideProperty_MeshAttachment (): void {\r\n    const prototype = spine.MeshAttachment.prototype as any;\r\n\r\n    overrideDefineArrayProp(prototype, prototype.getRegionUVs, 'regionUVs');\r\n    overrideDefineArrayProp(prototype, prototype.getUVs, 'uvs');\r\n    overrideDefineArrayProp(prototype, prototype.getTriangles, 'triangles');\r\n    overrideDefineArrayProp(prototype, prototype.getEdges, 'edges');\r\n}\r\n\r\nfunction overrideProperty_PathAttachment (): void {\r\n    const prototype = spine.PathAttachment.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getLengths, 'lengths');\r\n}\r\n\r\nfunction overrideProperty_RegionAttachment (): void {\r\n    const prototype = spine.RegionAttachment.prototype as any;\r\n\r\n    overrideDefineArrayProp(prototype, prototype.getOffset, 'offset');\r\n    const getUVs = prototype.getUVs;\r\n    const setUVs = prototype.setUVs;\r\n    const _uvs = '_uvs';\r\n    Object.defineProperty(prototype, 'uvs', {\r\n        get (): any {\r\n            const vectors = getUVs.call(this);\r\n            const count = vectors.size();\r\n            let array = prototype[_uvs];\r\n            array = resizeArray(array, count);\r\n            for (let i = 0; i < count; i++) array[i] = vectors.get(i);\r\n            prototype[_uvs] = array;\r\n            return array;\r\n        },\r\n        set (value: number[]) {\r\n            setUVs.call(this, value[0], value[1], value[2], value[3], value[4] === 1);\r\n        },\r\n    });\r\n\r\n    const originComputeWorldVertices = prototype.computeWorldVertices;\r\n    const vectors = new spine.SPVectorFloat();\r\n    Object.defineProperty(prototype, 'computeWorldVertices', {\r\n        value (bone: spine.Bone, worldVertices: number[], offset: number, stride: number) {\r\n            const length = worldVertices.length;\r\n            vectors.resize(length, 0);\r\n            for (let i = 0; i < length; i++) vectors.set(i, worldVertices[i]);\r\n            originComputeWorldVertices.call(this, bone, vectors, offset, stride);\r\n            for (let i = 0; i < length; i++) worldVertices[i] = vectors.get(i);\r\n        },\r\n    });\r\n}\r\n\r\nfunction overrideProperty_IkConstraint (): void {\r\n    const prototype = spine.IkConstraint.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n}\r\n\r\nfunction overrideProperty_PathConstraint (): void {\r\n    const prototype = spine.PathConstraint.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n}\r\n\r\nfunction overrideProperty_TransformConstraintData (): void {\r\n    const prototype = spine.TransformConstraintData.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n}\r\n\r\nfunction overrideProperty_TransformConstraint (): void {\r\n    const prototype = spine.TransformConstraint.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n}\r\n\r\nfunction overrideProperty_Bone (): void {\r\n    const prototype = spine.Bone.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getChildren, 'children');\r\n}\r\n\r\nfunction overrideProperty_Slot (): void {\r\n    const prototype = spine.Slot.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getDeform, 'deform');\r\n}\r\n\r\nfunction overrideProperty_Skin (): void {\r\n    const prototype = spine.Skin.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n    overrideDefineArrayProp(prototype, prototype.getAttachments, 'attachments');\r\n    overrideDefineArrayProp(prototype, prototype.getConstraints, 'constraints');\r\n    overrideDefineArrayFunction(prototype, prototype.getAttachments, 'getAttachments');\r\n    const originGetAttachmentsForSlot = prototype.getAttachmentsForSlot;\r\n    Object.defineProperty(prototype, 'getAttachmentsForSlot', {\r\n        value (slotIndex: number, attachments: Array<spine.SkinEntry>) {\r\n            const vectors = originGetAttachmentsForSlot.call(this, slotIndex);\r\n            const count = vectors.size();\r\n            attachments.length = count;\r\n            for (let i = 0; i < count; i++) {\r\n                attachments[i] = vectors.get(i);\r\n            }\r\n            vectors.delete();\r\n        },\r\n    });\r\n    const originFindNamesForSlot = prototype.findNamesForSlot;\r\n    Object.defineProperty(prototype, 'findNamesForSlot', {\r\n        value (slotIndex: number, names: Array<string>) {\r\n            const vectors = originFindNamesForSlot.call(this, slotIndex);\r\n            const count = vectors.size();\r\n            names.length = count;\r\n            for (let i = 0; i < count; i++) {\r\n                names[i] = vectors.get(i);\r\n            }\r\n            vectors.delete();\r\n        },\r\n    });\r\n}\r\n\r\nfunction overrideProperty_SkinEntry (): void {\r\n    const prototype = spine.SkinEntry.prototype as any;\r\n    const propertyPolyfills = [\r\n        ['name', prototype.getName],\r\n        ['attachment', prototype.getAttachment],\r\n    ];\r\n    propertyPolyfills.forEach((prop): void => {\r\n        js.getset(prototype, prop[0], prop[1]);\r\n    });\r\n}\r\n\r\nfunction overrideProperty_SkeletonData (): void {\r\n    const prototype = spine.SkeletonData.prototype as any;\r\n\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n    overrideDefineArrayProp(prototype, prototype.getSlots, 'slots');\r\n    overrideDefineArrayProp(prototype, prototype.getSkins, 'skins');\r\n    overrideDefineArrayProp(prototype, prototype.getAnimations, 'animations');\r\n    overrideDefineArrayProp(prototype, prototype.getEvents, 'events');\r\n    overrideDefineArrayProp(prototype, prototype.getIkConstraints, 'ikConstraints');\r\n    overrideDefineArrayProp(prototype, prototype.getTransformConstraints, 'transformConstraints');\r\n    overrideDefineArrayProp(prototype, prototype.getPathConstraints, 'pathConstraints');\r\n}\r\n\r\nfunction overrideProperty_RotateTimeline (): void {\r\n    const prototype = spine.RotateTimeline.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n}\r\n\r\nfunction overrideProperty_ColorTimeline (): void {\r\n    const prototype = spine.ColorTimeline.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n}\r\n\r\nfunction overrideProperty_Timeline (): void {\r\n    const prototype = spine.Timeline.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n}\r\n\r\nfunction overrideProperty_AttachmentTimeline (): void {\r\n    const prototype = spine.AttachmentTimeline.prototype as any;\r\n    if (SPINE_VERSION === '3.8') {\r\n        overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n    }\r\n    overrideDefineArrayProp(prototype, prototype.getAttachmentNames, 'attachmentNames');\r\n}\r\n\r\nfunction overrideProperty_DeformTimeline (): void {\r\n    const prototype = spine.DeformTimeline.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n    overrideDefineArrayArrayProp(prototype, prototype.getFrameVertices, 'frameVertices');\r\n}\r\n\r\nfunction overrideProperty_EventTimeline (): void {\r\n    const prototype = spine.EventTimeline.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n    overrideDefineArrayProp(prototype, prototype.getEvents, 'events');\r\n}\r\n\r\nfunction overrideProperty_DrawOrderTimeline (): void {\r\n    const prototype = spine.DrawOrderTimeline.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getFrames, 'frames');\r\n}\r\n\r\nfunction overrideProperty_AnimationState (): void {\r\n    const prototype = spine.AnimationState.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getTracks, 'tracks');\r\n}\r\n\r\nfunction overrideProperty_Animation (): void {\r\n    const prototype = spine.Animation.prototype as any;\r\n    overrideDefineArrayProp(prototype, prototype.getTimelines, 'timelines');\r\n}\r\n\r\nfunction overrideProperty_Skeleton (): void {\r\n    const prototype = spine.Skeleton.prototype as any;\r\n\r\n    overrideDefineArrayProp(prototype, prototype.getBones, 'bones');\r\n    overrideDefineArrayProp(prototype, prototype.getSlots, 'slots');\r\n    overrideDefineArrayProp(prototype, prototype.getDrawOrder, 'drawOrder');\r\n    overrideDefineArrayProp(prototype, prototype.getIkConstraints, 'ikConstraints');\r\n    overrideDefineArrayProp(prototype, prototype.getTransformConstraints, 'transformConstraints');\r\n    overrideDefineArrayProp(prototype, prototype.getPathConstraints, 'pathConstraints');\r\n    overrideDefineArrayProp(prototype, prototype.getUpdateCacheList, '_updateCache');\r\n}\r\n\r\nexport function overrideSpineDefine (wasm): void {\r\n    overrideClass(wasm);\r\n    overrideProperty_IkConstraintData();\r\n    overrideProperty_PathConstraintData();\r\n    overrideProperty_MeshAttachment();\r\n    overrideProperty_PathAttachment();\r\n    overrideProperty_RegionAttachment();\r\n    overrideProperty_VertexAttachment();\r\n    overrideProperty_IkConstraint();\r\n    overrideProperty_PathConstraint();\r\n    overrideProperty_TransformConstraintData();\r\n    overrideProperty_TransformConstraint();\r\n    overrideProperty_Bone();\r\n    overrideProperty_Slot();\r\n    overrideProperty_Skin();\r\n    overrideProperty_SkinEntry();\r\n    overrideProperty_SkeletonData();\r\n    overrideProperty_RotateTimeline();\r\n    if (SPINE_VERSION === '3.8') {\r\n        overrideProperty_ColorTimeline();\r\n    } else if (SPINE_VERSION === '4.2') {\r\n        overrideProperty_Timeline();\r\n    }\r\n    overrideProperty_AttachmentTimeline();\r\n    overrideProperty_DeformTimeline();\r\n    overrideProperty_EventTimeline();\r\n    overrideProperty_DrawOrderTimeline();\r\n    overrideProperty_AnimationState();\r\n    overrideProperty_Animation();\r\n    overrideProperty_Skeleton();\r\n}\r\n","import { instantiateWasm, fetchBuffer } from 'pal/wasm';\r\nimport { NATIVE_CODE_BUNDLE_MODE } from 'internal:constants';\r\nimport { sys } from '../../core';\r\nimport { NativeCodeBundleMode } from '../../misc/webassembly-support';\r\nimport { overrideSpineDefine } from './spine-define';\r\n\r\nconst PAGESIZE = 65536; // 64KiB\r\n\r\n// How many pages of the wasm memory\r\n// TODO: let this can be canfiguable by user.\r\nconst PAGECOUNT = 32 * 16;\r\n\r\n// How mush memory size of the wasm memory\r\nconst MEMORYSIZE = PAGESIZE * PAGECOUNT; // 32 MiB\r\n\r\nlet wasmInstance: SpineWasm.instance = null!;\r\nconst registerList: any[] = [];\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nexport function initWasm (wasmFactory, wasmUrl: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        const errorMessage = (err: any): string => `[Spine]: Spine wasm load failed: ${err}`;\r\n        wasmFactory({\r\n            instantiateWasm (\r\n                importObject: WebAssembly.Imports,\r\n                receiveInstance: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\r\n            ) {\r\n                // NOTE: the Promise return by instantiateWasm hook can't be caught.\r\n                instantiateWasm(wasmUrl, importObject).then((result) => {\r\n                    receiveInstance(result.instance, result.module);\r\n                }).catch((err) => reject(errorMessage(err)));\r\n            },\r\n        }).then((Instance: any) => {\r\n            wasmInstance = Instance;\r\n            registerList.forEach((cb) => {\r\n                cb(wasmInstance);\r\n            });\r\n        }).then(resolve).catch((err: any) => reject(errorMessage(err)));\r\n    });\r\n}\r\n\r\nexport function initAsmJS (asmFactory, asmJsMemUrl: string): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n        fetchBuffer(asmJsMemUrl).then((arrayBuffer) => {\r\n            const wasmMemory: any = {};\r\n            wasmMemory.buffer = new ArrayBuffer(MEMORYSIZE);\r\n            const module = {\r\n                wasmMemory,\r\n                memoryInitializerRequest: {\r\n                    response: arrayBuffer,\r\n                    status: 200,\r\n                } as Partial<XMLHttpRequest>,\r\n            };\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n            return asmFactory(module).then((instance: any) => {\r\n                wasmInstance = instance;\r\n                registerList.forEach((cb) => {\r\n                    cb(wasmInstance);\r\n                });\r\n            });\r\n        }).then(resolve).catch(reject);\r\n    });\r\n}\r\n\r\nexport function shouldUseWasmModule (): boolean {\r\n    if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.BOTH as number)) {\r\n        return sys.hasFeature(sys.Feature.WASM);\r\n    } else if (NATIVE_CODE_BUNDLE_MODE === (NativeCodeBundleMode.WASM as number)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nregisterList.push(overrideSpineDefine);\r\n","/*\r\n Copyright (c) 2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD, JSB, LOAD_SPINE_MANUALLY } from 'internal:constants';\r\nimport { game } from '../../game';\r\nimport './spine-define'; // Make spine._overrideSpineDefine take effect.\r\nimport { waitForSpineWasmInstantiation } from './spine-instantiate';\r\n\r\nif (!JSB && (!BUILD || !LOAD_SPINE_MANUALLY)) {\r\n    game.onPostInfrastructureInitDelegate.add(waitForSpineWasmInstantiation);\r\n}\r\n\r\nexport { waitForSpineWasmInstantiation };\r\n\r\nexport const SPINE_WASM = 1;\r\n","/*\r\n Copyright (c) 2025 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ensureWasmModuleReady } from 'pal/wasm';\r\nimport { error } from '../../core';\r\nimport { shouldUseWasmModule, initWasm, initAsmJS } from './spine-wasm-utils';\r\n\r\nexport function waitForSpineWasmInstantiation (): Promise<void> {\r\n    const errorReport = (msg: any): void => { error(msg); };\r\n    return ensureWasmModuleReady().then((): Promise<void> => {\r\n        //We should use static code here, import operation will cause file copy to cache folder.\r\n        if (shouldUseWasmModule()) {\r\n            return Promise.all([\r\n                import('external:emscripten/spine/4.2/spine.wasm.js'),\r\n                import('external:emscripten/spine/4.2/spine.wasm'),\r\n            ]).then(([\r\n                { default: wasmFactory },\r\n                { default: spineWasmUrl },\r\n            ]) => initWasm(wasmFactory, spineWasmUrl));\r\n        } else {\r\n            return Promise.all([\r\n                import('external:emscripten/spine/4.2/spine.asm.js'),\r\n                import('external:emscripten/spine/4.2/spine.js.mem'),\r\n            ]).then(([\r\n                { default: asmFactory },\r\n                { default: asmJsMemUrl },\r\n            ]) => initAsmJS(asmFactory, asmJsMemUrl));\r\n        }\r\n    }).catch(errorReport);\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport spine from './lib/spine-core';\r\nimport { warn } from '../core';\r\n\r\nlet _listener_ID = 0;\r\nlet _track_ID = 0;\r\n\r\ntype TrackListener = (x: spine.TrackEntry) => void;\r\ntype TrackListener2 = (x: spine.TrackEntry, ev: spine.Event) => void;\r\n\r\ntype CommonTrackEntryListener = TrackListener | TrackListener2;\r\nexport class TrackEntryListeners {\r\n    start?: ((entry: spine.TrackEntry) => void);\r\n    interrupt?: ((entry: spine.TrackEntry) => void);\r\n    end?: ((entry: spine.TrackEntry) => void);\r\n    dispose?: ((entry: spine.TrackEntry) => void);\r\n    complete?: ((entry: spine.TrackEntry) => void);\r\n    event?: ((entry: spine.TrackEntry, event: spine.Event) => void);\r\n\r\n    static getListeners (entry: spine.TrackEntry, instance: spine.SkeletonInstance): spine.AnimationStateListener {\r\n        if (!entry.listener) {\r\n            entry.listener = new TrackEntryListeners() as any;\r\n            const id = ++_track_ID;\r\n            instance.setTrackEntryListener(id, entry);\r\n            TrackEntryListeners._trackSet.set(id, entry);\r\n        }\r\n        return entry.listener;\r\n    }\r\n\r\n    static emitListener (id: number, entry: spine.TrackEntry, event: spine.Event, eventType: spine.EventType): void {\r\n        const listener = TrackEntryListeners._listenerSet.get(id);\r\n        if (!listener) return;\r\n        switch (eventType) {\r\n        case spine.EventType.event:\r\n            if (listener.event) {\r\n                listener.event(entry, event);\r\n            }\r\n            break;\r\n        case spine.EventType.start:\r\n            if (listener.start) {\r\n                listener.start(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.interrupt:\r\n            if (listener.interrupt) {\r\n                listener.interrupt(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.end:\r\n            if (listener.end) {\r\n                listener.end(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.dispose:\r\n            if (listener.dispose) {\r\n                listener.dispose(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.complete:\r\n            if (listener.complete) {\r\n                listener.complete(entry);\r\n            }\r\n            break;\r\n        default:\r\n            warn('emitListener doesn\\'t handled', eventType);\r\n            break;\r\n        }\r\n    }\r\n\r\n    static emitTrackEntryListener (id: number, entry: spine.TrackEntry, event: spine.Event, eventType: spine.EventType): void {\r\n        const curTrack = this._trackSet.get(id);\r\n        if (!curTrack) return;\r\n        switch (eventType) {\r\n        case spine.EventType.start:\r\n            if (curTrack.listener.start) {\r\n                curTrack.listener.start(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.interrupt:\r\n            if (curTrack.listener.interrupt) {\r\n                curTrack.listener.interrupt(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.end:\r\n            if (curTrack.listener.end) {\r\n                curTrack.listener.end(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.dispose:\r\n            if (curTrack.listener.dispose) {\r\n                curTrack.listener.dispose(entry);\r\n            }\r\n            this._trackSet.delete(id);\r\n            curTrack.listener = null as any;\r\n            break;\r\n        case spine.EventType.complete:\r\n            if (curTrack.listener.complete) {\r\n                curTrack.listener.complete(entry);\r\n            }\r\n            break;\r\n        case spine.EventType.event:\r\n            if (curTrack.listener.event) {\r\n                curTrack.listener.event(entry, event);\r\n            }\r\n            break;\r\n        default:\r\n            warn('TrackEntry doesn\\'t handled', eventType);\r\n            break;\r\n        }\r\n    }\r\n\r\n    static addListener (listener: TrackEntryListeners): number {\r\n        const id = ++_listener_ID;\r\n        TrackEntryListeners._listenerSet.set(id, listener);\r\n        return id;\r\n    }\r\n\r\n    static removeListener (id: number): void {\r\n        TrackEntryListeners._listenerSet.delete(id);\r\n    }\r\n\r\n    private static _listenerSet = new Map<number, TrackEntryListeners>();\r\n    private static _trackSet = new Map<number, spine.TrackEntry>();\r\n}\r\n\r\nglobalThis.TrackEntryListeners = TrackEntryListeners;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { TrackEntryListeners } from './track-entry-listeners';\r\nimport { vfmtPosUvColor4B, vfmtPosUvTwoColor4B, getAttributeStride } from '../2d/renderer/vertex-format';\r\n\r\nimport spine from './lib/spine-core';\r\nimport { SkeletonData } from './skeleton-data';\r\nimport { warn } from '../core/platform/debug';\r\n\r\nconst MaxCacheTime = 30;\r\nconst FrameTime = 1 / 60;\r\nconst _useTint = true;\r\nconst _byteStrideOneColor = getAttributeStride(vfmtPosUvColor4B);\r\nconst _byteStrideTwoColor = getAttributeStride(vfmtPosUvTwoColor4B);\r\n\r\nexport class FrameBoneInfo {\r\n    a = 0;\r\n    b = 0;\r\n    c = 0;\r\n    d = 0;\r\n    worldX = 0;\r\n    worldY = 0;\r\n}\r\n\r\nexport interface SkeletonCacheItemInfo {\r\n    skeleton: spine.Skeleton | null;\r\n    clipper: spine.SkeletonClipping | null;\r\n    state: spine.AnimationState | null;\r\n    listener: TrackEntryListeners;\r\n    curAnimationCache: AnimationCache | null;\r\n    animationsCache: { [key: string]: AnimationCache };\r\n    assetUUID: string;\r\n}\r\n\r\nclass SpineModel {\r\n    public vCount = 0;\r\n    public iCount = 0;\r\n    public vData: Uint8Array = null!;\r\n    public iData: Uint16Array = null!;\r\n    public meshes: SpineDrawItem[] = [];\r\n}\r\n\r\nclass SpineDrawItem {\r\n    public iCount = 0;\r\n    public blendMode = 0;\r\n    public textureID = 0;\r\n}\r\n\r\nexport interface AnimationFrame {\r\n    model: SpineModel;\r\n    boneInfos: FrameBoneInfo[];\r\n}\r\n\r\nexport class AnimationCache {\r\n    protected _instance: spine.SkeletonInstance | null = null;\r\n    protected _state: spine.AnimationState = null!;\r\n    protected _skeletonData: spine.SkeletonData = null!;\r\n    protected _skeleton: spine.Skeleton = null!;\r\n    public _privateMode = false;\r\n    protected _curIndex = -1;\r\n    protected _isCompleted = false;\r\n    protected _maxFrameIdex = 0;\r\n    protected _frameIdx = -1;\r\n    protected _inited = false;\r\n    protected _invalid = true;\r\n    protected _enableCacheAttachedInfo = false;\r\n    protected _skeletonInfo: SkeletonCacheItemInfo | null = null;\r\n    protected _animationName: string | null = null;\r\n    public isCompleted = false;\r\n    public totalTime = 0;\r\n    public frames: AnimationFrame[] = [];\r\n\r\n    constructor (data: spine.SkeletonData) {\r\n        this._privateMode = false;\r\n        this._inited = false;\r\n        this._invalid = true;\r\n        this._instance = new spine.SkeletonInstance();\r\n        this._instance.isCache = true;\r\n        this._skeletonData = data;\r\n        this._skeleton = this._instance.initSkeleton(data);\r\n        this._instance.setUseTint(_useTint);\r\n    }\r\n\r\n    public init (skeletonInfo: SkeletonCacheItemInfo, animationName: string): void {\r\n        this._inited = true;\r\n        this._animationName = animationName;\r\n        this._skeletonInfo = skeletonInfo;\r\n    }\r\n\r\n    get skeleton (): spine.Skeleton {\r\n        return this._skeleton;\r\n    }\r\n\r\n    public setSkin (skinName: string): void {\r\n        if (this._skeleton) this._skeleton.setSkinByName(skinName);\r\n        this._instance!.setSkin(skinName);\r\n    }\r\n\r\n    public setAnimation (animationName: string): void {\r\n        const animations = this._skeletonData.animations;\r\n        let animation: spine.Animation | null = null;\r\n        animations.forEach((element): void => {\r\n            if (element.name === animationName) {\r\n                animation = element;\r\n            }\r\n        });\r\n        if (!animation) {\r\n            warn(`find no animation named ${animationName} !!!`);\r\n            return;\r\n        }\r\n        this._maxFrameIdex = Math.floor((animation as any).duration / FrameTime);\r\n        if (this._maxFrameIdex <= 0) this._maxFrameIdex = 1;\r\n        this._instance!.setAnimation(0, animationName, false);\r\n    }\r\n\r\n    public updateToFrame (frameIdx: number): void {\r\n        if (!this._inited) return;\r\n        this.begin();\r\n        if (!this.needToUpdate(frameIdx)) return;\r\n        do {\r\n            // Solid update frame rate 1/60.\r\n            this._frameIdx++;\r\n            this.totalTime += FrameTime;\r\n            this._instance!.updateAnimation(FrameTime);\r\n            const model = this._instance!.updateRenderData();\r\n            this.updateRenderData(this._frameIdx, model);\r\n            if (this._frameIdx >= this._maxFrameIdex) {\r\n                this.isCompleted = true;\r\n            }\r\n        } while (this.needToUpdate(frameIdx));\r\n    }\r\n\r\n    public getFrame (frameIdx: number): AnimationFrame {\r\n        const index = frameIdx % this._maxFrameIdex;\r\n        return this.frames[index];\r\n    }\r\n\r\n    public invalidAnimationFrames (): void {\r\n        this._curIndex = -1;\r\n        this._isCompleted = false;\r\n        this.frames.length = 0;\r\n    }\r\n\r\n    private updateRenderData (index: number, model: any): void {\r\n        const vc: number = model.vCount;\r\n        const ic: number = model.iCount;\r\n        const floatStride = (_useTint ?  _byteStrideTwoColor : _byteStrideOneColor) / Float32Array.BYTES_PER_ELEMENT;\r\n        const vUint8Buf = new Uint8Array(Float32Array.BYTES_PER_ELEMENT * floatStride * vc);\r\n        const iUint16Buf = new Uint16Array(ic);\r\n\r\n        const HEAPU8: Uint8Array = spine.wasmUtil.wasm.HEAPU8;\r\n        const vPtr = model.vPtr;\r\n        const vLength = vc * Float32Array.BYTES_PER_ELEMENT * floatStride;\r\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\r\n        vUint8Buf.set(HEAPU8.subarray(vPtr, vPtr + vLength));\r\n\r\n        const iPtr = model.iPtr;\r\n        const iLength = Uint16Array.BYTES_PER_ELEMENT * ic;\r\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\r\n        const iUint8Buf = new Uint8Array(iUint16Buf.buffer);\r\n        iUint8Buf.set(HEAPU8.subarray(iPtr, iPtr + iLength));\r\n\r\n        const modelData = new SpineModel();\r\n        modelData.vCount = vc;\r\n        modelData.iCount = ic;\r\n        modelData.vData = vUint8Buf;\r\n        modelData.iData = iUint16Buf;\r\n\r\n        const data = model.getData();\r\n        const textures = model.getTextures();\r\n        const count = data.size();\r\n        for (let i = 0; i < count; i += 5) {\r\n            const meshData = new SpineDrawItem();\r\n            meshData.iCount = data.get(i + 3);\r\n            meshData.blendMode = data.get(i + 4);\r\n            meshData.textureID = textures.get(i / 5);\r\n            modelData.meshes.push(meshData);\r\n        }\r\n\r\n        const bones = this._skeleton.bones;\r\n        const boneInfosArray: FrameBoneInfo[] = [];\r\n        bones.forEach((bone): void => {\r\n            const boneInfo = new FrameBoneInfo();\r\n            boneInfo.a = bone.a;\r\n            boneInfo.b = bone.b;\r\n            boneInfo.c = bone.c;\r\n            boneInfo.d = bone.d;\r\n            boneInfo.worldX = bone.worldX;\r\n            boneInfo.worldY = bone.worldY;\r\n            boneInfosArray.push(boneInfo);\r\n        });\r\n        this.frames[index] = {\r\n            model: modelData,\r\n            boneInfos: boneInfosArray,\r\n        };\r\n    }\r\n\r\n    public begin (): void {\r\n        if (!this._invalid) return;\r\n\r\n        const skeletonInfo = this._skeletonInfo;\r\n        const preAnimationCache = skeletonInfo?.curAnimationCache;\r\n\r\n        if (preAnimationCache && preAnimationCache !== this) {\r\n            if (this._privateMode) {\r\n                // Private cache mode just invalid pre animation frame.\r\n                preAnimationCache.invalidAllFrame();\r\n            } else {\r\n                // If pre animation not finished, play it to the end.\r\n                preAnimationCache.updateToFrame(0);\r\n            }\r\n        }\r\n        const listener = skeletonInfo?.listener;\r\n        this._instance!.setAnimation(0, this._animationName!, false);\r\n        this.bind(listener!);\r\n\r\n        // record cur animation cache\r\n        skeletonInfo!.curAnimationCache = this;\r\n        this._frameIdx = -1;\r\n        this.isCompleted = false;\r\n        this.totalTime = 0;\r\n        this._invalid = false;\r\n    }\r\n\r\n    public end (): void {\r\n        if (!this.needToUpdate()) {\r\n            // clear cur animation cache\r\n            this._skeletonInfo!.curAnimationCache = null;\r\n            this.frames.length = this._frameIdx + 1;\r\n            this.isCompleted = true;\r\n            this.unbind(this._skeletonInfo!.listener);\r\n        }\r\n    }\r\n\r\n    public bind (listener: TrackEntryListeners): void {\r\n        const completeHandle = (entry: spine.TrackEntry): void => {\r\n            if (entry && entry.animation.name === this._animationName) {\r\n                this.isCompleted = true;\r\n            }\r\n        };\r\n\r\n        listener.complete = completeHandle;\r\n    }\r\n\r\n    public unbind (listener: TrackEntryListeners): void {\r\n        (listener as any).complete = null;\r\n    }\r\n\r\n    protected needToUpdate (toFrameIdx?: number): boolean {\r\n        return !this.isCompleted\r\n            && this.totalTime < MaxCacheTime\r\n            && (toFrameIdx === undefined || this._frameIdx < toFrameIdx);\r\n    }\r\n\r\n    public isInited (): boolean {\r\n        return this._inited;\r\n    }\r\n\r\n    public isInvalid (): boolean {\r\n        return this._invalid;\r\n    }\r\n\r\n    public invalidAllFrame (): void {\r\n        this.isCompleted = false;\r\n        this._invalid = true;\r\n    }\r\n\r\n    public enableCacheAttachedInfo (): void {\r\n        if (!this._enableCacheAttachedInfo) {\r\n            this._enableCacheAttachedInfo = true;\r\n            this.invalidAllFrame();\r\n        }\r\n    }\r\n\r\n    // Clear texture quote.\r\n    public clear (): void {\r\n        this._inited = false;\r\n        this.invalidAllFrame();\r\n    }\r\n\r\n    public destroy (): void {\r\n        if (this._instance) {\r\n            this._instance.destroy();\r\n            this._instance = null;\r\n        }\r\n    }\r\n}\r\n\r\nclass SkeletonCache {\r\n    public static readonly FrameTime = FrameTime;\r\n    public static sharedCache = new SkeletonCache();\r\n\r\n    protected _privateMode: boolean;\r\n    protected _skeletonCache: { [key: string]: SkeletonCacheItemInfo };\r\n\r\n    //for shared mode only\r\n    protected _animationPool: { [key: string]: AnimationCache };\r\n    //for shared mode only, key is asset uuid and value is ref count.\r\n    private _sharedCacheMap: Map<string, number> = new Map<string, number>();\r\n    constructor () {\r\n        this._privateMode = false;\r\n        this._animationPool = {};\r\n        this._skeletonCache = {};\r\n    }\r\n\r\n    public enablePrivateMode (): void {\r\n        this._privateMode = true;\r\n    }\r\n\r\n    public clear (): void {\r\n        this._animationPool = {};\r\n        this._skeletonCache = {};\r\n    }\r\n\r\n    public invalidAnimationCache (uuid: string): void {\r\n        const skeletonInfo = this._skeletonCache[uuid];\r\n        const skeleton = skeletonInfo && skeletonInfo.skeleton;\r\n        if (!skeleton) return;\r\n\r\n        const animationsCache = skeletonInfo.animationsCache;\r\n        for (const aniKey in animationsCache) {\r\n            const animationCache = animationsCache[aniKey];\r\n            animationCache.invalidAllFrame();\r\n        }\r\n    }\r\n\r\n    public destroySkeleton (assetUuid: string): void {\r\n        if (!this._privateMode) {\r\n            let refCount = this._sharedCacheMap.get(assetUuid);\r\n            if (refCount) {\r\n                refCount -= 1;\r\n                if (refCount > 0) {\r\n                    this._sharedCacheMap.set(assetUuid, refCount);\r\n                    return;\r\n                }\r\n                this._sharedCacheMap.delete(assetUuid);\r\n            }\r\n        }\r\n\r\n        const skeletonInfo = this._skeletonCache[assetUuid];\r\n        if (!skeletonInfo) return;\r\n\r\n        const sharedOperate = (aniKey: string, animationCache: AnimationCache): void => {\r\n            this._animationPool[`${assetUuid}#${aniKey}`] = animationCache;\r\n            animationCache.clear();\r\n        };\r\n        const privateOperate = (aniKey: string, animationCache: AnimationCache): void => {\r\n            animationCache.destroy();\r\n        };\r\n        const operate = this._privateMode ? privateOperate : sharedOperate;\r\n        const animationsCache = skeletonInfo.animationsCache;\r\n        for (const aniKey in animationsCache) {\r\n            // Clear cache texture, and put cache into pool.\r\n            // No need to create TypedArray next time.\r\n            const animationCache = animationsCache[aniKey];\r\n            if (!animationCache) continue;\r\n            operate(aniKey, animationCache);\r\n        }\r\n\r\n        if (skeletonInfo.skeleton) {\r\n            spine.wasmUtil.destroySpineSkeleton(skeletonInfo.skeleton);\r\n        }\r\n        delete this._skeletonCache[assetUuid];\r\n    }\r\n\r\n    public createSkeletonInfo (skeletonAsset: SkeletonData): SkeletonCacheItemInfo {\r\n        const uuid = skeletonAsset.uuid;\r\n        const runtimeData = skeletonAsset.getRuntimeData();\r\n        if (!this._privateMode) {\r\n            let refCount = this._sharedCacheMap.get(uuid);\r\n            if (!refCount) {\r\n                refCount = 1;\r\n            } else {\r\n                refCount += 1;\r\n            }\r\n            this._sharedCacheMap.set(uuid, refCount);\r\n        }\r\n        if (this._skeletonCache[uuid]) {\r\n            return this._skeletonCache[uuid];\r\n        }\r\n\r\n        const skeleton = new spine.Skeleton(runtimeData!);\r\n        const clipper = null;\r\n        const state = null;\r\n        const listener = new TrackEntryListeners();\r\n\r\n        const skeletonInfo = this._skeletonCache[uuid] = {\r\n            skeleton,\r\n            clipper,\r\n            state,\r\n            listener,\r\n            // Cache all kinds of animation frame.\r\n            // When skeleton is dispose, clear all animation cache.\r\n            animationsCache: {} as any,\r\n            curAnimationCache: null,\r\n            assetUUID: uuid,\r\n        };\r\n        return skeletonInfo;\r\n    }\r\n\r\n    public getSkeletonInfo (skeletonAsset: SkeletonData): null | SkeletonCacheItemInfo {\r\n        const uuid = skeletonAsset.uuid;\r\n        return this._skeletonCache[uuid];\r\n    }\r\n\r\n    public getAnimationCache (uuid: string, animationName: string): null | AnimationCache {\r\n        const skeletonInfo = this._skeletonCache[uuid];\r\n        if (!skeletonInfo) return null;\r\n        const animationsCache = skeletonInfo.animationsCache;\r\n        return animationsCache[animationName];\r\n    }\r\n\r\n    public initAnimationCache (uuid: string, data: SkeletonData,  animationName: string): null | AnimationCache {\r\n        const spData = data.getRuntimeData();\r\n        if (!spData) return null;\r\n        const skeletonInfo = this._skeletonCache[uuid];\r\n        const skeleton = skeletonInfo && skeletonInfo.skeleton;\r\n        if (!skeleton) return null;\r\n        const animationsCache = skeletonInfo.animationsCache;\r\n        let animationCache = animationsCache[animationName];\r\n        if (!animationCache) {\r\n            // If cache exist in pool, then just use it.\r\n            const poolKey = `${uuid}#${animationName}`;\r\n            animationCache = this._animationPool[poolKey];\r\n            if (animationCache) {\r\n                delete this._animationPool[poolKey];\r\n            } else {\r\n                animationCache = new AnimationCache(spData);\r\n                animationCache._privateMode = this._privateMode;\r\n            }\r\n            animationCache.init(skeletonInfo, animationName);\r\n            animationsCache[animationName] = animationCache;\r\n        }\r\n        animationCache.init(skeletonInfo, animationName);\r\n        animationCache.setAnimation(animationName);\r\n        return animationCache;\r\n    }\r\n\r\n    public destroyCachedAnimations (uuid?: string): void {\r\n        if (uuid) {\r\n            const animationPool = this._animationPool;\r\n            for (const key in animationPool) {\r\n                if (key.includes(uuid)) {\r\n                    animationPool[key].destroy();\r\n                    delete animationPool[key];\r\n                }\r\n            }\r\n            const skeletonInfo = this._skeletonCache[uuid];\r\n            const skeleton = skeletonInfo && skeletonInfo.skeleton;\r\n            if (skeleton) {\r\n                spine.wasmUtil.destroySpineSkeleton(skeleton);\r\n            }\r\n            if (skeletonInfo) {\r\n                delete this._skeletonCache[uuid];\r\n            }\r\n        } else {\r\n            const animationPool = this._animationPool;\r\n            for (const key in animationPool) {\r\n                animationPool[key].destroy();\r\n                delete animationPool[key];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default SkeletonCache;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { EDITOR_NOT_IN_PREVIEW } from 'internal:constants';\r\nimport { CCString, Enum, error, murmurhash2_32_gc } from '../core';\r\nimport SkeletonCache from './skeleton-cache';\r\nimport { Skeleton } from './skeleton';\r\nimport spine from './lib/spine-core';\r\nimport { ccclass, serializable, type } from '../core/data/decorators';\r\nimport { legacyCC } from '../core/global-exports';\r\nimport { Texture2D, Asset } from '../asset/assets';\r\nimport { Node } from '../scene-graph';\r\n/**\r\n * @en The skeleton data of spine.\r\n * @zh Spine 的骨骼数据。\r\n * @class SkeletonData\r\n * @extends Asset\r\n */\r\n@ccclass('sp.SkeletonData')\r\nexport class SkeletonData extends Asset {\r\n    /**\r\n     * @en See http://en.esotericsoftware.com/spine-json-format\r\n     * @zh 可查看 Spine 官方文档 http://zh.esotericsoftware.com/spine-json-format\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    @serializable\r\n    public _skeletonJson: spine.SkeletonJson | null = null;\r\n\r\n    /**\r\n     * @en A string parsed from the _skeletonJson.\r\n     * @zh 从 _skeletonJson 中解析出的字符串。\r\n     */\r\n    get skeletonJsonStr (): string {\r\n        if (this._skeletonJson) {\r\n            return JSON.stringify(this._skeletonJson);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @en See http://en.esotericsoftware.com/spine-json-format\r\n     * @zh 可查看 Spine 官方文档 http://zh.esotericsoftware.com/spine-json-format\r\n     */\r\n    get skeletonJson (): spine.SkeletonJson {\r\n        return this._skeletonJson!;\r\n    }\r\n    set skeletonJson (value: spine.SkeletonJson) {\r\n        this.reset();\r\n        if (typeof (value) === 'string') {\r\n            this._skeletonJson = JSON.parse(value);\r\n        } else {\r\n            this._skeletonJson = value;\r\n        }\r\n        // If create by manual, uuid is empty.\r\n        if (!this._uuid && (value as any).skeleton) {\r\n            this._uuid = (value as any).skeleton.hash;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en An atlas text description.\r\n     * @zh Atlas 文本描述。\r\n     */\r\n    get atlasText (): string {\r\n        return this._atlasText;\r\n    }\r\n    set atlasText (value) {\r\n        this._atlasText = value;\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * @en Texture array.\r\n     * @zh 纹理数组。\r\n     */\r\n    @serializable\r\n    @type([Texture2D])\r\n    public textures: Texture2D[] = [];\r\n\r\n    /**\r\n     * @en Texture name array.\r\n     * @zh 纹理名称数组。\r\n     * @private\r\n     */\r\n    @serializable\r\n    @type([CCString])\r\n    public textureNames: string[] = [];\r\n\r\n    /**\r\n     * @en\r\n     * A scale can be specified on the JSON or binary loader which will scale the bone positions,\r\n     * image sizes, and animation translations.\r\n     * This can be useful when using different sized images than were used when design ing the skeleton\r\n     * in Spine. For example, if using images that are half the size than were used in Spine,\r\n     * a scale of 0.5 can be used. This is commonly used for games that can run with either low or high\r\n     * resolution texture atlases.\r\n     * see http://en.esotericsoftware.com/spine-using-runtimes#Scaling\r\n     * @zh 在 JSON 或二进制加载器上可以指定一个缩放比例，该缩放比例将缩放骨头位置、图像大小和动画平移。\r\n     * 这在使用与 Spine 中设计骨架不同大小的图像时非常有用。例如，如果使用的图像大小是 Spine 中使用的\r\n     * 图像大小的一半，可以使用 0.5 的缩放比例。这在游戏中经常使用，因为游戏可以使用低分辨率或高分辨率\r\n     * 的纹理图集。可查看 Spine 官方文档：\r\n     * http://zh.esotericsoftware.com/spine-using-runtimes#Scaling\r\n     */\r\n    @serializable\r\n    public scale = 1;\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get _nativeAsset (): ArrayBuffer {\r\n        return this._buffer!;\r\n    }\r\n    set _nativeAsset (bin: ArrayBuffer) {\r\n        this._buffer = bin;\r\n        this.reset();\r\n    }\r\n    /**\r\n     * @en A string describing atlas.\r\n     * @zh 描述图集信息的字符串。\r\n     */\r\n    @serializable\r\n    protected _atlasText = '';\r\n\r\n    private _buffer?: ArrayBuffer;\r\n\r\n    private _skeletonCache: spine.SkeletonData | null = null;\r\n\r\n    private _skinsEnum: { [key: string]: number } | null = null;\r\n    private _animsEnum: { [key: string]: number } | null = null;\r\n\r\n    constructor () {\r\n        super();\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @deprecated Since v3.7.2, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public createNode (callback: (err: Error|null, node: Node) => void): void {\r\n        const node = new Node(this.name);\r\n        const skeleton = node.addComponent('cc.Skeleton') as Skeleton;\r\n        skeleton.skeletonData = this;\r\n\r\n        return callback(null, node);\r\n    }\r\n    /**\r\n     * @en Resets skeleton data state.\r\n     * @zh 重置数据。\r\n     */\r\n    public reset (): void {\r\n        this._skeletonCache = null;\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            this._skinsEnum = null;\r\n            this._animsEnum = null;\r\n        }\r\n    }\r\n    /**\r\n     * @internal Since v3.7.2, this is an engine private function, only works in editor.\r\n     * @en Reset skeleton skin and animation enumeration.\r\n     * @zh 重置皮肤和动画枚举。\r\n     */\r\n    public resetEnums (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            this._skinsEnum = null;\r\n            this._animsEnum = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Gets the included SkeletonData used in spine runtime.<br>\r\n     * Returns a sp.spine.SkeletonData object.\r\n     * @zh 获取 Spine Runtime 使用的 SkeletonData。<br>\r\n     * 返回一个 p.spine.SkeletonData 对象。\r\n     * @param quiet @en If vaulue is false, feedback information will be printed when an error occurs.\r\n     *              @zh 值为 false 时，当发生错误时将打印出反馈信息。\r\n     */\r\n    public getRuntimeData (quiet?: boolean): spine.SkeletonData | null {\r\n        if (this._skeletonCache) {\r\n            return this._skeletonCache;\r\n        }\r\n\r\n        if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {\r\n            if (!quiet) {\r\n                error(`${this.name} no textures found!`);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const uuid = this.mergedUUID();\r\n        const spData = spine.wasmUtil.querySpineSkeletonDataByUUID(uuid);\r\n        if (spData) {\r\n            this._skeletonCache = spData;\r\n        } else {\r\n            const size = this.textures.length;\r\n            const textureUUIDs: string[] = [];\r\n            for (let i = 0; i < size; ++i) {\r\n                const tex = this.textures[i];\r\n                textureUUIDs.push(tex.uuid || tex.getId());\r\n            }\r\n            if (this._skeletonJson) {\r\n                this._skeletonCache = spine.wasmUtil.createSpineSkeletonDataWithJson(this.skeletonJsonStr, this._atlasText, this.textureNames, textureUUIDs);\r\n                spine.wasmUtil.registerSpineSkeletonDataWithUUID(this._skeletonCache, uuid);\r\n            } else {\r\n                const rawData = new Uint8Array(this._nativeAsset);\r\n                const byteSize = rawData.length;\r\n                const ptr = spine.wasmUtil.createStoreMemory(byteSize);\r\n                const wasmMem = spine.wasmUtil.wasm.HEAPU8.subarray(ptr, ptr + byteSize);\r\n                wasmMem.set(rawData);\r\n                this._skeletonCache = spine.wasmUtil.createSpineSkeletonDataWithBinary(byteSize, this._atlasText, this.textureNames, textureUUIDs);\r\n                spine.wasmUtil.registerSpineSkeletonDataWithUUID(this._skeletonCache, uuid);\r\n                spine.wasmUtil.freeStoreMemory();\r\n            }\r\n        }\r\n        return this._skeletonCache;\r\n    }\r\n\r\n    /**\r\n     * @internal Since v3.7.2, this is an engine private function, it only works in editor.\r\n     */\r\n    public getSkinsEnum (): {\r\n        [key: string]: number;\r\n    } | null {\r\n        if (this._skinsEnum /* && Object.keys(this._skinsEnum).length > 0 */) {\r\n            return this._skinsEnum;\r\n        }\r\n        const sd = this.getRuntimeData(true);\r\n        if (sd) {\r\n            const skins = sd.skins;\r\n            const enumDef: {[key: string]: number} = {};\r\n            for (let i = 0; i < skins.length; i++) {\r\n                const name = skins[i].name;\r\n                enumDef[name] = i;\r\n            }\r\n            return this._skinsEnum = Enum(enumDef);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @internal Since v3.7.2, this is an engine private function, it only works in editor.\r\n     */\r\n    public getAnimsEnum (): {\r\n        [key: string]: number;\r\n    } | null {\r\n        if (this._animsEnum && Object.keys(this._animsEnum).length > 1) {\r\n            return this._animsEnum;\r\n        }\r\n        const sd = this.getRuntimeData(true);\r\n        if (sd) {\r\n            const enumDef: {[key: string]: number} = { '<None>': 0 };\r\n            const anims = sd.animations;\r\n            for (let i = 0; i < anims.length; i++) {\r\n                const name = anims[i].name;\r\n                enumDef[name] = i + 1;\r\n            }\r\n            return this._animsEnum = Enum(enumDef);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private mergedUUID (): string {\r\n        // merge texture's id and atlas content\r\n        const hashContent = [\r\n            this._atlasText,\r\n            ...this.textures.map((texture) => texture.getId()),\r\n        ].join('');\r\n\r\n        // merge asset's uuid & hashContent\r\n        return `${this._uuid}${murmurhash2_32_gc(hashContent, 668)}`;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy skeleton data.\r\n     * @zh 销毁 skeleton data。\r\n     */\r\n    public destroy (): boolean {\r\n        SkeletonCache.sharedCache.destroyCachedAnimations(this._uuid);\r\n        spine.wasmUtil.destroySpineSkeletonDataWithUUID(this.mergedUUID());\r\n        return super.destroy();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public isEmpty (): boolean {\r\n        return this._atlasText.length === 0 && !this._skeletonJson && !this._nativeAsset;\r\n    }\r\n}\r\n\r\nlegacyCC.internal.SpineSkeletonData = SkeletonData;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { director } from '../game/director';\r\nimport { System, SystemPriority } from '../core';\r\nimport { Skeleton } from './skeleton';\r\nimport { legacyCC } from '../core/global-exports';\r\n\r\nexport class SkeletonSystem extends System {\r\n    /**\r\n     * @en\r\n     * The ID flag of the system.\r\n     * @zh\r\n     * 此系统的 ID 标记。\r\n     */\r\n    static readonly ID = 'SKELETON';\r\n\r\n    private static _instance: SkeletonSystem;\r\n\r\n    private constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Gets the instance of the Spine Skeleton system.\r\n     * @zh\r\n     * 获取 Spine 骨骼系统的单例。\r\n     */\r\n    public static getInstance (): SkeletonSystem {\r\n        if (!SkeletonSystem._instance) {\r\n            SkeletonSystem._instance = new SkeletonSystem();\r\n            director.registerSystem(SkeletonSystem.ID, SkeletonSystem._instance, SystemPriority.HIGH);\r\n        }\r\n        return SkeletonSystem._instance;\r\n    }\r\n\r\n    private _skeletons = new Set<Skeleton>();\r\n\r\n    public add (skeleton: Skeleton | null): void {\r\n        if (!skeleton) return;\r\n        if (!this._skeletons.has(skeleton)) {\r\n            this._skeletons.add(skeleton);\r\n        }\r\n    }\r\n\r\n    public remove (skeleton: Skeleton | null): void {\r\n        if (!skeleton) return;\r\n        if (this._skeletons.has(skeleton)) {\r\n            this._skeletons.delete(skeleton);\r\n        }\r\n    }\r\n\r\n    postUpdate (dt: number): void {\r\n        if (!this._skeletons) {\r\n            return;\r\n        }\r\n        this._skeletons.forEach((skeleton) => {\r\n            skeleton.updateAnimation(dt);\r\n        });\r\n    }\r\n\r\n    public prepareRenderData (): void {\r\n        if (!this._skeletons) {\r\n            return;\r\n        }\r\n        this._skeletons.forEach((skeleton) => {\r\n            skeleton._markForUpdateRenderData();\r\n        });\r\n    }\r\n}\r\nlegacyCC.internal.SpineSkeletonSystem = SkeletonSystem;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Mat4 } from '../core';\r\nimport { Skeleton } from './skeleton';\r\nimport { Node } from '../scene-graph';\r\nimport spine from './lib/spine-core';\r\nimport { FrameBoneInfo } from './skeleton-cache';\r\n\r\nconst tempMat4 = new Mat4();\r\n\r\n/**\r\n * @en Attach node tool\r\n * @zh 挂点工具类\r\n * @class sp.AttachUtil\r\n */\r\nexport class AttachUtil {\r\n    protected _isInitialized = false;\r\n    protected _skeletonBones: spine.Bone[] | FrameBoneInfo[] | null = null;\r\n    protected _socketNodes: Map<number, Node> | null = null;\r\n    private _keysToDelete: number[] = [];\r\n\r\n    constructor () {\r\n        this._isInitialized = false;\r\n    }\r\n\r\n    init (skeletonComp: Skeleton): void {\r\n        this._isInitialized = false;\r\n        if (!skeletonComp || skeletonComp.socketNodes?.size === 0) return;\r\n        this._skeletonBones = skeletonComp._skeleton.bones;\r\n        if (!this._skeletonBones || this._skeletonBones.length < 1) return;\r\n        this._socketNodes = skeletonComp.socketNodes;\r\n        if (!this._socketNodes || this._socketNodes.size <= 0) return;\r\n        this._isInitialized = true;\r\n        this._syncAttachedNode();\r\n    }\r\n\r\n    updateSkeletonBones (bones: FrameBoneInfo[]): void {\r\n        this._skeletonBones = bones;\r\n    }\r\n\r\n    reset (): void {\r\n        this._isInitialized = false;\r\n        this._skeletonBones = null;\r\n        this._socketNodes = null;\r\n        this._keysToDelete.length = 0;\r\n    }\r\n\r\n    _syncAttachedNode (): void {\r\n        if (!this._isInitialized) return;\r\n        const socketNodes = this._socketNodes!;\r\n        for (const [boneIdx, boneNode] of socketNodes) {\r\n            if (!boneNode || !boneNode.isValid) {\r\n                this._keysToDelete.push(boneIdx);\r\n                continue;\r\n            }\r\n            const bone =  this._skeletonBones![boneIdx];\r\n            if (bone) this.matrixHandle(boneNode, bone);\r\n        }\r\n        if (this._keysToDelete.length <= 0) return;\r\n        for (const boneIdx of this._keysToDelete) {\r\n            socketNodes.delete(boneIdx);\r\n        }\r\n        this._keysToDelete.length = 0;\r\n    }\r\n\r\n    matrixHandle (node: Node, bone: any): void {\r\n        const tm = tempMat4;\r\n        tm.m00 = bone.a;\r\n        tm.m01 = bone.c;\r\n        tm.m04 = bone.b;\r\n        tm.m05 = bone.d;\r\n        tm.m12 = bone.worldX;\r\n        tm.m13 = bone.worldY;\r\n        node.matrix = tempMat4;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { EDITOR_NOT_IN_PREVIEW, JSB } from 'internal:constants';\r\nimport { ccclass, executeInEditMode, help, menu, serializable, type, override, displayOrder, editable, visible } from 'cc.decorator';\r\nimport { Material, Texture2D } from '../asset/assets';\r\nimport { error, errorID, logID, warnID } from '../core/platform/debug';\r\nimport { Enum, EnumType, ccenum } from '../core/value-types/enum';\r\nimport { Node, NodeEventType } from '../scene-graph';\r\nimport { CCObjectFlags, Color, RecyclePool, js } from '../core';\r\nimport { SkeletonData } from './skeleton-data';\r\nimport type { Graphics } from '../2d/components/graphics';\r\nimport { UIRenderer } from '../2d/framework/ui-renderer';\r\nimport { Batcher2D } from '../2d/renderer/batcher-2d';\r\nimport { BlendFactor, BlendOp } from '../gfx';\r\nimport { MaterialInstance } from '../render-scene';\r\nimport { assetManager, builtinResMgr } from '../asset/asset-manager';\r\nimport { legacyCC } from '../core/global-exports';\r\nimport { SkeletonSystem } from './skeleton-system';\r\nimport { RenderEntity, RenderEntityType } from '../2d/renderer/render-entity';\r\nimport { AttachUtil } from './attach-util';\r\nimport spine from './lib/spine-core';\r\nimport { VertexEffectDelegate } from './vertex-effect-delegate';\r\nimport SkeletonCache, { AnimationCache, AnimationFrame, SkeletonCacheItemInfo } from './skeleton-cache';\r\nimport { TrackEntryListeners } from './track-entry-listeners';\r\nimport { setPropertyEnumType } from '../core/internal-index';\r\nimport { RenderData } from '../2d/renderer/render-data';\r\nimport { SPINE_VERSION } from './lib/spine-version';\r\n\r\nfunction isSkeletonDataValid (skeletonData: SkeletonData | null): skeletonData is SkeletonData {\r\n    return !!skeletonData && !skeletonData.isEmpty();\r\n}\r\n\r\nconst CachedFrameTime = 1 / 60;\r\n\r\ntype TrackListener = (x: spine.TrackEntry) => void;\r\ntype TrackListener2 = (x: spine.TrackEntry, ev: spine.Event | number) => void;\r\n/**\r\n * @en\r\n * Animation playback rate.\r\n * @zh\r\n * 动画播放速率。\r\n */\r\nexport const timeScale = 1.0;\r\n\r\n/**\r\n * @en Enum for animation cache mode type.\r\n * @zh Spine 动画缓存类型。\r\n */\r\nexport enum SpineAnimationCacheMode {\r\n    /**\r\n     * @en Unset mode.\r\n     * @zh 未设置模式。\r\n     */\r\n    UNSET = -1,\r\n    /**\r\n     * @en The realtime mode.\r\n     * @zh 实时计算模式。\r\n     */\r\n    REALTIME = 0,\r\n    /**\r\n     * @en The shared cache mode.\r\n     * @zh 共享缓存模式。\r\n     */\r\n    SHARED_CACHE = 1,\r\n    /**\r\n     * @en The private cache mode.\r\n     * @zh 私有缓存模式。\r\n     */\r\n    PRIVATE_CACHE = 2,\r\n}\r\nccenum(SpineAnimationCacheMode);\r\n\r\n// To keep the compatibility, don't use it internally, otherwise, enum value may be inlined to wrong value.\r\n// Use AnimationCacheMode instead.\r\nexport const AnimationCacheMode = SpineAnimationCacheMode;\r\n\r\ninterface AnimationItem {\r\n    animationName: string;\r\n    loop: boolean;\r\n    delay: number;\r\n}\r\n\r\n/**\r\n * @engineInternal\r\n */\r\nexport enum DefaultSkinsEnum {\r\n    default = 0,\r\n}\r\nccenum(DefaultSkinsEnum);\r\n\r\n/**\r\n * @engineInternal\r\n */\r\nexport enum SpineDefaultAnimsEnum {\r\n    '<None>' = 0\r\n}\r\nccenum(SpineDefaultAnimsEnum);\r\n// To keep the compatibility, don't use it internally, otherwise, enum value may be inlined to wrong value.\r\n// Use SpineDefaultAnimsEnum instead.\r\nexport const DefaultAnimsEnum = SpineDefaultAnimsEnum;\r\n\r\n/**\r\n * @engineInternal\r\n */\r\nexport enum SpineMaterialType {\r\n    COLORED_TEXTURED = 0,\r\n    TWO_COLORED = 1,\r\n}\r\n\r\ninterface AnimationItem {\r\n    animationName: string;\r\n    loop: boolean;\r\n    delay: number;\r\n}\r\n\r\n/**\r\n * @engineInternal\r\n */\r\nexport interface SkeletonDrawData {\r\n    material: Material | null;\r\n    texture: Texture2D | null;\r\n    indexOffset: number;\r\n    indexCount: number;\r\n}\r\n\r\nexport interface TempColor {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n    a: number;\r\n}\r\n\r\n/**\r\n * @en\r\n * The Sockets attached to bones, synchronous transform with spine animation.\r\n * @zh\r\n * Spine 挂点，可附着在目标骨骼上随 spine 动画一起运动。\r\n * @class SpineSocket\r\n */\r\n@ccclass('sp.Skeleton.SpineSocket')\r\nexport class SpineSocket {\r\n    /**\r\n     * @en Path of the target joint.\r\n     * @zh 此挂点的目标骨骼路径。\r\n     */\r\n    @serializable\r\n    @editable\r\n    public path = '';\r\n\r\n    /**\r\n     * @en Transform output node.\r\n     * @zh 此挂点的变换信息输出节点。\r\n     */\r\n    @type(Node)\r\n    @editable\r\n    @serializable\r\n    public target: Node | null = null;\r\n\r\n    constructor (path = '', target: Node | null = null) {\r\n        this.path = path;\r\n        this.target = target;\r\n    }\r\n}\r\n\r\njs.setClassAlias(SpineSocket, 'sp.Skeleton.SpineSocket');\r\n\r\n/**\r\n * @en\r\n * The skeleton of Spine <br/>\r\n * <br/>\r\n * (Skeleton has a reference to a SkeletonData and stores the state for skeleton instance,\r\n * which consists of the current pose's bone SRT, slot colors, and which slot attachments are visible. <br/>\r\n * Multiple skeletons can use the same SkeletonData which includes all animations, skins, and attachments.) <br/>\r\n * Cocos Creator supports spine versions lower than 3.8.99.\r\n * @zh\r\n * Spine 骨骼动画 <br/>\r\n * <br/>\r\n * (Skeleton 具有对骨骼数据的引用并且存储了骨骼实例的状态，\r\n * 它由当前的骨骼动作，slot 颜色，和可见的 slot attachments 组成。<br/>\r\n * 多个 Skeleton 可以使用相同的骨骼数据，其中包括所有的动画，皮肤和 attachments。\r\n * Cocos Creator 支持 spine 版本最高到3.8.99。\r\n * @class Skeleton\r\n * @extends UIRenderer\r\n */\r\n@ccclass('sp.Skeleton')\r\n@help('i18n:cc.Spine')\r\n@menu('Spine/Skeleton')\r\n@executeInEditMode\r\nexport class Skeleton extends UIRenderer {\r\n    public static SpineSocket = SpineSocket;\r\n    public static AnimationCacheMode = SpineAnimationCacheMode;\r\n\r\n    @serializable\r\n    protected _skeletonData: SkeletonData | null = null;\r\n    @serializable\r\n    protected defaultSkin = '';\r\n    @serializable\r\n    protected defaultAnimation = '';\r\n    /**\r\n     * @en Indicates whether to enable premultiplied alpha.\r\n     * You should disable this option when image's transparent area appears to have opaque pixels,\r\n     * or enable this option when image's half transparent area appears to be darken.\r\n     * @zh 是否启用贴图预乘。\r\n     * 当图片的透明区域出现色块时需要关闭该选项，当图片的半透明区域颜色变黑时需要启用该选项。\r\n     */\r\n    @serializable\r\n    protected _premultipliedAlpha = true;\r\n    @serializable\r\n    protected _timeScale = 1;\r\n    @serializable\r\n    protected _preCacheMode: SpineAnimationCacheMode = SpineAnimationCacheMode.UNSET;\r\n    @serializable\r\n    protected _cacheMode = SpineAnimationCacheMode.REALTIME;\r\n    @serializable\r\n    protected _sockets: SpineSocket[] = [];\r\n    @serializable\r\n    protected _useTint = false;\r\n    @serializable\r\n    protected _debugMesh = false;\r\n    @serializable\r\n    protected _debugBones = false;\r\n    @serializable\r\n    protected _debugSlots = false;\r\n    @serializable\r\n    protected _enableBatch = false;\r\n\r\n    protected _runtimeData: spine.SkeletonData | null = null;\r\n    public _skeleton: spine.Skeleton = null!;\r\n    protected _instance: spine.SkeletonInstance | null = null;\r\n    protected _state: spine.AnimationState = null!;\r\n    protected _textures: Texture2D[] = [];\r\n    private _skeletonInfo: SkeletonCacheItemInfo | null = null;\r\n    // Animation name\r\n    protected _animationName = '';\r\n    protected _skinName = '';\r\n    protected _drawList = new RecyclePool<SkeletonDrawData>((): SkeletonDrawData => ({\r\n        material: null,\r\n        texture: null,\r\n        indexOffset: 0,\r\n        indexCount: 0,\r\n    }), 1);\r\n    protected _materialCache: { [key: string]: MaterialInstance } = {} as any;\r\n    public paused = false;\r\n    protected _enumSkins: EnumType = Enum({});\r\n    protected _enumAnimations: EnumType = Enum({});\r\n    protected attachUtil: AttachUtil;\r\n    protected _socketNodes: Map<number, Node> = new Map();\r\n    protected _cachedSockets: Map<string, number> = new Map<string, number>();\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public _startEntry: spine.TrackEntry;\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public _endEntry: spine.TrackEntry;\r\n    // Paused or playing state\r\n    protected _paused = false;\r\n\r\n    // Below properties will effect when cache mode is SHARED_CACHE or PRIVATE_CACHE.\r\n    // accumulate time\r\n    protected _accTime = 0;\r\n    // Play times counter\r\n    protected _playCount = 0;\r\n    // Skeleton cache\r\n    protected _skeletonCache: SkeletonCache | null = null;\r\n    protected _animCache: AnimationCache | null = null;\r\n    protected _animationQueue: AnimationItem[] = [];\r\n    // Head animation info of\r\n    protected _headAniInfo: AnimationItem | null = null;\r\n    // Is animation complete.\r\n    protected _isAniComplete = true;\r\n    // Play times\r\n    protected _playTimes = 0;\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public _curFrame: AnimationFrame | null = null;\r\n    protected _listener: TrackEntryListeners | null = null;\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _debugRenderer: Graphics | null = null;\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _startSlotIndex: number;\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _endSlotIndex: number;\r\n\r\n    private _customMaterialInstance: MaterialInstance | null = null;\r\n    _vLength = 0;\r\n    _vBuffer: Uint8Array | null = null;\r\n    _iLength = 0;\r\n    _iBuffer: Uint8Array | null = null;\r\n    _model: any;\r\n    _tempColor: TempColor = { r: 0, g: 0, b: 0, a: 0 };\r\n    private _eventListenerID: number = -1;\r\n    private _slotTextures: Map<string, Texture2D> | null = null;\r\n\r\n    private _isRenderable: boolean = false;\r\n\r\n    constructor () {\r\n        super();\r\n        this._useVertexOpacity = true;\r\n        this._startEntry = { animation: { name: '' }, trackIndex: 0 } as spine.TrackEntry;\r\n        this._endEntry = { animation: { name: '' }, trackIndex: 0 } as spine.TrackEntry;\r\n        this._startSlotIndex = -1;\r\n        this._endSlotIndex = -1;\r\n        if (!JSB) {\r\n            this._instance = new spine.SkeletonInstance();\r\n            this._instance.dtRate = this._timeScale * timeScale;\r\n            this._instance.isCache = this.isAnimationCached();\r\n        }\r\n        this.attachUtil = new AttachUtil();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    get drawList (): RecyclePool<SkeletonDrawData> { return this._drawList; }\r\n\r\n    /**\r\n     * @en\r\n     * The skeleton data contains the skeleton information (bind pose bones, slots, draw order,\r\n     * attachments, skins, etc) and animations but does not hold any state.<br/>\r\n     * Multiple skeletons can share the same skeleton data.\r\n     * @zh\r\n     * 骨骼数据包含了骨骼信息（绑定骨骼动作，slots，渲染顺序，\r\n     * attachments，皮肤等等）和动画但不持有任何状态。<br/>\r\n     * 多个 Skeleton 可以共用相同的骨骼数据。\r\n     * @property {sp.SkeletonData} skeletonData\r\n     */\r\n    @editable\r\n    @type(SkeletonData)\r\n    get skeletonData (): SkeletonData | null {\r\n        return this._skeletonData;\r\n    }\r\n    set skeletonData (value: SkeletonData | null) {\r\n        if (value) value.resetEnums();\r\n        if (this._skeletonData !== value) {\r\n            this.destroyRenderData();\r\n            this._skeletonData = value as any;\r\n            this.defaultSkin = '';\r\n            this.defaultAnimation = '';\r\n            this._animationName = '';\r\n            this._skinName = '';\r\n            this._updateSkeletonData();\r\n            this._updateUITransform();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    @visible(true)\r\n    @type(DefaultSkinsEnum)\r\n    get _defaultSkinIndex (): number {\r\n        if (isSkeletonDataValid(this.skeletonData)) {\r\n            const skinsEnum = this.skeletonData.getSkinsEnum();\r\n            if (skinsEnum) {\r\n                if (this.defaultSkin === '') {\r\n                    // eslint-disable-next-line no-prototype-builtins\r\n                    if (skinsEnum.hasOwnProperty(0)) {\r\n                        this._defaultSkinIndex = 0;\r\n                        return 0;\r\n                    }\r\n                } else {\r\n                    const skinIndex = skinsEnum[this.defaultSkin];\r\n                    if (skinIndex !== undefined) {\r\n                        return skinIndex;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set _defaultSkinIndex (value: number) {\r\n        let skinsEnum;\r\n        if (isSkeletonDataValid(this.skeletonData)) {\r\n            skinsEnum = this.skeletonData.getSkinsEnum();\r\n        }\r\n        if (!skinsEnum) {\r\n            error(`${this.name} skin enums are invalid`);\r\n            return;\r\n        }\r\n\r\n        const skinName = skinsEnum[value];\r\n        if (skinName !== undefined) {\r\n            this.defaultSkin = String(skinName);\r\n            this.setSkin(this.defaultSkin);\r\n            this._refreshInspector();\r\n            this._markForUpdateRenderData();\r\n        } else {\r\n            error(`${this.name} skin enums are invalid`);\r\n        }\r\n    }\r\n\r\n    // value of 0 represents no animation\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    @visible(true)\r\n    @type(SpineDefaultAnimsEnum)\r\n    get _animationIndex (): number {\r\n        const animationName = EDITOR_NOT_IN_PREVIEW ? this.defaultAnimation : this.animation;\r\n        if (isSkeletonDataValid(this.skeletonData)) {\r\n            if (animationName) {\r\n                const animsEnum = this.skeletonData.getAnimsEnum();\r\n                if (animsEnum) {\r\n                    const animIndex = animsEnum[animationName];\r\n                    if (animIndex !== undefined) {\r\n                        return animIndex;\r\n                    }\r\n                }\r\n            } else {\r\n                this._refreshInspector();\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    set _animationIndex (value: number) {\r\n        let animsEnum;\r\n        if (isSkeletonDataValid(this.skeletonData)) {\r\n            animsEnum = this.skeletonData.getAnimsEnum();\r\n        }\r\n        if (!animsEnum) {\r\n            error(`${this.name} animation enums are invalid`);\r\n            return;\r\n        }\r\n        const animName = String(animsEnum[value]);\r\n        if (animName !== undefined) {\r\n            this.animation = animName;\r\n            if (EDITOR_NOT_IN_PREVIEW) {\r\n                this.defaultAnimation = animName;\r\n                this._refreshInspector();\r\n            } else {\r\n                this.animation = animName;\r\n            }\r\n        } else {\r\n            error(`${this.name} animation enums are invalid`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Animation mode, with options for real-time mode, private cached, or public cached mode.\r\n     * @zh 动画模式，可选实时模式，私有 cached 或公共 cached 模式。\r\n     */\r\n    @editable\r\n    @type(SpineAnimationCacheMode)\r\n    get defaultCacheMode (): SpineAnimationCacheMode {\r\n        return this._cacheMode;\r\n    }\r\n    set defaultCacheMode (mode: SpineAnimationCacheMode) {\r\n        this._cacheMode = mode;\r\n        this.setAnimationCacheMode(this._cacheMode);\r\n    }\r\n\r\n    /**\r\n     * @en Whether premultipliedAlpha enabled.\r\n     * @zh 是否启用 alpha 预乘。\r\n     */\r\n    @editable\r\n    get premultipliedAlpha (): boolean { return this._premultipliedAlpha; }\r\n    set premultipliedAlpha (v: boolean) {\r\n        if (v !== this._premultipliedAlpha) {\r\n            this._premultipliedAlpha = v;\r\n            this._instance!.setPremultipliedAlpha(v);\r\n            this._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Whether play animations in loop mode.\r\n     * @zh 是否循环播放当前骨骼动画。\r\n     */\r\n    @visible(true)\r\n    @serializable\r\n    public loop = true;\r\n\r\n    /**\r\n     * @en The time scale of this skeleton.\r\n     * @zh 当前骨骼中所有动画的时间缩放率。\r\n     */\r\n    @editable\r\n    get timeScale (): number { return this._timeScale; }\r\n    set timeScale (value) {\r\n        if (value !== this._timeScale) {\r\n            this._timeScale = value;\r\n            if (this._instance) {\r\n                this._instance.dtRate = this._timeScale * timeScale;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @en Enabled two color tint.\r\n     * @zh 是否启用染色效果。\r\n     */\r\n    @editable\r\n    get useTint (): boolean { return this._useTint; }\r\n    set useTint (value) {\r\n        if (value !== this._useTint) {\r\n            this._useTint = value;\r\n            this._updateUseTint();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en If rendering a large number of identical textures and simple skeletal animations,\r\n     * enabling batching can reduce the number of draw calls and improve rendering performance.\r\n     * @zh 如果渲染大量相同纹理，且结构简单的骨骼动画，开启合批可以降低 draw call 数量提升渲染性能。\r\n     */\r\n    @editable\r\n    get enableBatch (): boolean { return this._enableBatch; }\r\n    set enableBatch (value) {\r\n        if (value !== this._enableBatch) {\r\n            this._enableBatch = value;\r\n            this._updateBatch();\r\n        }\r\n    }\r\n    /**\r\n     * @en\r\n     * The bone sockets this animation component maintains.<br>\r\n     * A SpineSocket object contains a path reference to bone, and a target node.\r\n     * @zh\r\n     * 当前动画组件维护的挂点数组。一个挂点组件包括动画节点路径和目标节点。\r\n     */\r\n    @type([SpineSocket])\r\n    get sockets (): SpineSocket[] {\r\n        return this._sockets;\r\n    }\r\n    set sockets (val: SpineSocket[]) {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            this._verifySockets(val);\r\n        }\r\n        this._sockets = val;\r\n        this._updateSocketBindings();\r\n        this.attachUtil.init(this);\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether open debug slots.\r\n     * @zh 是否显示 slot 的 debug 信息。\r\n     */\r\n    @editable\r\n    get debugSlots (): boolean { return this._debugSlots; }\r\n    set debugSlots (v: boolean) {\r\n        if (v !== this._debugSlots) {\r\n            this._debugSlots = v;\r\n            this._updateDebugDraw();\r\n            this._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether open debug bones.\r\n     * @zh 是否显示 bone 的 debug 信息。\r\n     */\r\n    @editable\r\n    get debugBones (): boolean { return this._debugBones; }\r\n    set debugBones (v: boolean) {\r\n        if (v !== this._debugBones) {\r\n            this._debugBones = v;\r\n            this._updateDebugDraw();\r\n            this._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Indicates whether open debug mesh.\r\n     * @zh 是否显示 mesh 的 debug 信息。\r\n     */\r\n    @editable\r\n    get debugMesh (): boolean { return this._debugMesh; }\r\n    set debugMesh (value) {\r\n        if (value !== this._debugMesh) {\r\n            this._debugMesh = value;\r\n            this._updateDebugDraw();\r\n            this._markForUpdateRenderData();\r\n        }\r\n    }\r\n    get socketNodes (): Map<number, Node> | null { return this._socketNodes; }\r\n\r\n    /**\r\n     * @en The name of current playing animation.\r\n     * @zh 当前播放的动画名称。\r\n     * @property {String} animation\r\n     */\r\n    get animation (): string {\r\n        return this._animationName;\r\n    }\r\n    set animation (value: string) {\r\n        if (value) {\r\n            this.setAnimation(0, value, this.loop);\r\n        } else {\r\n            this.clearAnimation(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The customMaterial。\r\n     * @zh 用户自定材质。\r\n     */\r\n    @override\r\n    @type(Material)\r\n    @displayOrder(0)\r\n    get customMaterial (): Material | null {\r\n        return this._customMaterial;\r\n    }\r\n    set customMaterial (val) {\r\n        this._customMaterial = val;\r\n        this.updateMaterial();\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.8.7, it will be removed in the future.\r\n     * We are deprecating the `customMaterialInstance` field because it leads to shared material state across all slots,\r\n     * causing unexpected behavior (like the last blendMode change affecting all slots).\r\n     * Workaround:\r\n     *    Switch to customMaterial. Whenever its value is modified, immediately call updateMaterial at the exact point of change.\r\n     */\r\n    get customMaterialInstance (): MaterialInstance | null {\r\n        if (!this._customMaterial) {\r\n            return null;\r\n        }\r\n        if (!this._customMaterialInstance) {\r\n            const matInfo = {\r\n                parent: this._customMaterial,\r\n                subModelIdx: 0,\r\n                owner: this,\r\n            };\r\n            this._customMaterialInstance = new MaterialInstance(matInfo);\r\n        }\r\n        return this._customMaterialInstance;\r\n    }\r\n\r\n    public __preload (): void {\r\n        super.__preload();\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            this.paused = true;\r\n        }\r\n        this._updateSkeletonData();\r\n        this._updateDebugDraw();\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public onRestore (): void {\r\n        this.updateMaterial();\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    /**\r\n     * @en Gets the animation state object.\r\n     * @zh 获取动画状态。\r\n     * @method getState\r\n     * @return {sp.spine.AnimationState} state\r\n     */\r\n    public getState (): spine.AnimationState | undefined {\r\n        return this._state;\r\n    }\r\n\r\n    /**\r\n     * @en Be called when component state becomes available.\r\n     * @zh 组件状态变为可用时调用。\r\n     */\r\n    public onEnable (): void {\r\n        super.onEnable();\r\n        this._flushAssembler();\r\n        SkeletonSystem.getInstance().add(this);\r\n        this._isRenderable = true;\r\n    }\r\n    /**\r\n     * @en Be called when component state becomes disabled.\r\n     * @zh 组件状态变为禁用状态时调用。\r\n     */\r\n    public onDisable (): void {\r\n        super.onDisable();\r\n        SkeletonSystem.getInstance().remove(this);\r\n        this._isRenderable = false;\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        if (this._eventListenerID > 0) {\r\n            TrackEntryListeners.removeListener(this._eventListenerID);\r\n            this._eventListenerID = -1;\r\n        }\r\n        this._drawList.destroy();\r\n        this.destroyRenderData();\r\n        this._cleanMaterialCache();\r\n        this._vBuffer = null;\r\n        this._iBuffer = null;\r\n        this.attachUtil.reset();\r\n        this._slotTextures?.clear();\r\n        this._slotTextures = null;\r\n        this._cachedSockets.clear();\r\n        this._socketNodes.clear();\r\n        //if (this._cacheMode == SpineAnimationCacheMode.PRIVATE_CACHE) this._animCache?.destroy();\r\n        this._animCache = null;\r\n        SkeletonSystem.getInstance().remove(this);\r\n        if (!JSB && this._instance) {\r\n            this._instance.destroy();\r\n            this._instance = null;\r\n        }\r\n        this._destroySkeletonInfo(this._skeletonCache);\r\n        this._skeletonCache = null;\r\n        super.onDestroy();\r\n    }\r\n\r\n    /**\r\n     * @en Clear animation and set to setup pose, default value of track index is 0.\r\n     * @zh 清除指定动画并还原到初始姿势, 默认清除 track索引 为0的动画。\r\n     * @param {Number} [trackIndex] @en track index. @zh track 的索引。\r\n     */\r\n    public clearAnimation (trackIndex?: number): void {\r\n        if (!this.isAnimationCached()) {\r\n            this.clearTrack(trackIndex || 0);\r\n            this.setToSetupPose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clear all animations and set to setup pose.\r\n     * @zh 清除所有动画并还原到初始姿势。\r\n     */\r\n    public clearAnimations (): void {\r\n        if (!this.isAnimationCached()) {\r\n            this.clearTracks();\r\n            this.setToSetupPose();\r\n        }\r\n    }\r\n\r\n    protected _updateSkeletonData (): void {\r\n        const skeletonData = this._skeletonData;\r\n        if (!isSkeletonDataValid(this._skeletonData)) {\r\n            this._runtimeData = null!;\r\n            this._state = null!;\r\n            this._skeleton = null!;\r\n            this._textures = [];\r\n            this._refreshInspector();\r\n            if (this._isRenderable) {\r\n                SkeletonSystem.getInstance().remove(this);\r\n            }\r\n            return;\r\n        }\r\n        if (this._instance) {\r\n            this._instance.dtRate = this._timeScale * timeScale;\r\n        }\r\n        //const data = this.skeletonData?.getRuntimeData();\r\n        //if (!data) return;\r\n        //this.setSkeletonData(data);\r\n        this._runtimeData = skeletonData!.getRuntimeData();\r\n        if (!this._runtimeData) return;\r\n        this.setSkeletonData(this._runtimeData);\r\n        this._textures = skeletonData!.textures;\r\n\r\n        this._refreshInspector();\r\n        /* The animation must be configured after the skin because the animation depends on the skin.\r\n           If the animation is set before the skin,\r\n           it will cause rendering issues when a prefab with Spine assets is added to the scene node tree.\r\n        */\r\n        if (this.defaultSkin && this.defaultSkin !== '') {\r\n            this.setSkin(this.defaultSkin);\r\n        } else if (this._skinName && this._skinName !== '') {\r\n            this.setSkin(this._skinName);\r\n        }\r\n        if (this.defaultAnimation) {\r\n            this.animation = this.defaultAnimation.toString();\r\n        } else if (this._animationName) {\r\n            this.animation = this._animationName;\r\n        } else {\r\n            this.animation = '';\r\n        }\r\n\r\n        this._updateUseTint();\r\n        this._indexBoneSockets();\r\n        this._updateSocketBindings();\r\n        this.attachUtil.init(this);\r\n        this._preCacheMode = this._cacheMode;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets runtime skeleton data to sp.Skeleton.<br>\r\n     * This method is different from the `skeletonData` property. This method is passed in the raw data provided by the\r\n     *  Spine runtime, and the skeletonData type is the asset type provided by Creator.\r\n     * @zh\r\n     * 设置底层运行时用到的 SkeletonData。<br>\r\n     * 这个接口有别于 `skeletonData` 属性，这个接口传入的是 Spine runtime 提供的原始数据，而 skeletonData 的类型是 Creator 提供的资源类型。\r\n     * @param skeletonData @en The skeleton data contains the skeleton information (bind pose bones, slots, draw order, attachments,\r\n     * skins, etc) and animations but does not hold any state. @zh 骨架数据(SkeletonData)包含骨架信息(绑定pose的骨骼、槽位、绘制顺序、附件、\r\n     * 皮肤等)和动画, 但不保存任何状态。\r\n     */\r\n    public setSkeletonData (skeletonData: spine.SkeletonData): void {\r\n        if (!EDITOR_NOT_IN_PREVIEW) {\r\n            const preSkeletonCache = this._skeletonCache;\r\n            if (this._cacheMode === SpineAnimationCacheMode.SHARED_CACHE) {\r\n                this._skeletonCache = SkeletonCache.sharedCache;\r\n            } else if (this._cacheMode === SpineAnimationCacheMode.PRIVATE_CACHE) {\r\n                this._skeletonCache = new SkeletonCache();\r\n                this._skeletonCache.enablePrivateMode();\r\n            } else {\r\n                this._skeletonCache = null;\r\n            }\r\n            //cache mode may be changed\r\n            if (preSkeletonCache !== this._skeletonCache) {\r\n                this._destroySkeletonInfo(preSkeletonCache);\r\n            }\r\n        }\r\n        if (this.isAnimationCached()) {\r\n            if (this.debugBones || this.debugSlots) {\r\n                warnID(16410);\r\n            }\r\n            const skeletonInfo = this._skeletonCache!.getSkeletonInfo(this._skeletonData!);\r\n            if (this._skeletonInfo !== skeletonInfo) {\r\n                this._destroySkeletonInfo(this._skeletonCache);\r\n                if (!skeletonInfo && this._cacheMode === SpineAnimationCacheMode.PRIVATE_CACHE) {\r\n                    this._animCache = this._skeletonCache!.initAnimationCache(this.skeletonData!.uuid, this._skeletonData!, this._animationName);\r\n                }\r\n                this._skeletonInfo = this._skeletonCache!.createSkeletonInfo(this._skeletonData!);\r\n            }\r\n            if (this._skeletonInfo) {\r\n                this._skeleton = this._skeletonInfo.skeleton!;\r\n            }\r\n        } else {\r\n            this._skeleton = this._instance!.initSkeleton(skeletonData);\r\n            this._state = this._instance!.getAnimationState();\r\n            this._instance!.setPremultipliedAlpha(this._premultipliedAlpha);\r\n        }\r\n        if (this._isRenderable) {\r\n            SkeletonSystem.getInstance().add(this);\r\n        }\r\n        // Recreate render data and mark dirty\r\n        this._flushAssembler();\r\n    }\r\n\r\n    /**\r\n     * @en Sets slots visible range.\r\n     * @zh 设置骨骼插槽可视范围。\r\n     * @param {Number} startSlotIndex @en start slot index. @zh 开始插槽的索引。\r\n     * @param {Number} endSlotIndex @en end slot index. @zh 结束插槽的索引。\r\n     */\r\n    public setSlotsRange (startSlotIndex: number, endSlotIndex: number): void {\r\n        if (this.isAnimationCached()) {\r\n            warnID(16411);\r\n        } else {\r\n            this._startSlotIndex = startSlotIndex;\r\n            this._endSlotIndex = endSlotIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Returns the attachment for the slot and attachment name.\r\n     * The skeleton looks first in its skin, then in the skeleton data’s default skin.<br>\r\n     * Returns a {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Attachment object.\r\n     * @zh\r\n     * 通过 slot 和 attachment 的名称获取 attachment。Skeleton 优先查找它的皮肤，然后才是 Skeleton Data 中默认的皮肤。<br>\r\n     * 返回一个 {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Attachment 对象。\r\n     *\r\n     * @method getAttachment\r\n     * @param {String} slotName @en slot name. @zh 插槽的名字。\r\n     * @param {String} attachmentName @en attachment name. @en 附件的名称。\r\n     * @return {sp.spine.Attachment}\r\n     */\r\n    public getAttachment (slotName: string, attachmentName: string): spine.Attachment | null {\r\n        if (this._skeleton) {\r\n            return this._skeleton.getAttachmentByName(slotName, attachmentName);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the attachment for the slot and attachment name.\r\n     * The skeleton looks first in its skin, then in the skeleton data’s default skin.\r\n     * @zh\r\n     * 通过 slot 和 attachment 的名字来设置 attachment。\r\n     * Skeleton 优先查找它的皮肤，然后才是 Skeleton Data 中默认的皮肤。\r\n     * @method setAttachment\r\n     * @param {String} slotName @en slot name. @zh 插槽的名字。\r\n     * @param {String} attachmentName @en attachment name. @en 附件的名称。\r\n     */\r\n    public setAttachment (slotName: string, attachmentName: string): void {\r\n        if (this._skeleton) {\r\n            this._skeleton.setAttachment(slotName, attachmentName);\r\n        }\r\n        this.invalidAnimationCache();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Get Texture Atlas used in attachments.\r\n     * @zh\r\n     * 获取附件图集。\r\n     * @param regionAttachment @en An attachment type of RegionAttachment or BoundingBoxAttachment. @zh RegionAttachment 或 BoundingBoxAttachment 的附件。\r\n     * @return @en TextureRegion contains texture and atlas text information. @zh TextureRegion包含纹理和图集文本信息。\r\n     */\r\n    public getTextureAtlas (regionAttachment: spine.RegionAttachment | spine.BoundingBoxAttachment): spine.TextureRegion  {\r\n        return (regionAttachment as spine.RegionAttachment).region;\r\n    }\r\n    /**\r\n     * @en Set the current animation. Any queued animations are cleared.<br>\r\n     * @zh 设置当前动画。队列中的任何的动画将被清除。<br>\r\n     * @param trackIndex @en Index of track. @zh 动画通道索引。\r\n     * @param name @en The name of animation. @zh 动画名称。\r\n     * @param loop @en Use loop mode or not. @zh 是否使用循环播放模式。\r\n     */\r\n    public setAnimation (trackIndex: number, name: string, loop?: boolean): spine.TrackEntry | null {\r\n        if (!(typeof name === 'string')) {\r\n            logID(7511);\r\n            return null;\r\n        }\r\n        const skeleton = this._skeleton;\r\n        const animation = skeleton ? skeleton.data.findAnimation(name) : null;\r\n        if (!animation) {\r\n            logID(7509, name);\r\n            return null;\r\n        }\r\n        let trackEntry: spine.TrackEntry | null = null;\r\n        if (loop === undefined) loop = true;\r\n        this._playTimes = loop ? 0 : 1;\r\n        if (this.isAnimationCached()) {\r\n            if (trackIndex !== 0) {\r\n                warnID(16412);\r\n            }\r\n            if (!this._skeletonCache) return null;\r\n            let cache = this._skeletonCache.getAnimationCache(this._skeletonData!.uuid, name);\r\n            if (!cache) {\r\n                cache = this._skeletonCache.initAnimationCache(this.skeletonData!.uuid, this._skeletonData!, name);\r\n                if (cache && this._skinName) cache.setSkin(this._skinName);\r\n            }\r\n            if (cache) {\r\n                this._animationName = name;\r\n                this._isAniComplete = false;\r\n                this._accTime = 0;\r\n                this._playCount = 0;\r\n                this._animCache = cache;\r\n                if (this._socketNodes.size > 0) {\r\n                    this._animCache.enableCacheAttachedInfo();\r\n                }\r\n                this._animCache.updateToFrame(0);\r\n                this._curFrame = this._animCache.frames[0];\r\n            }\r\n        } else {\r\n            this._animationName = name;\r\n            trackEntry = this._instance!.setAnimation(trackIndex, name, loop);\r\n        }\r\n        this._markForUpdateRenderData();\r\n        return trackEntry;\r\n    }\r\n    /**\r\n     * @en Adds an animation to be played delay seconds after the current or last queued animation.<br>\r\n     * Returns a {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.TrackEntry object.\r\n     * @zh 添加一个动画到动画队列尾部，还可以延迟指定的秒数。<br>\r\n     * 返回一个 {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.TrackEntry 对象。\r\n     * @param trackIndex @en Index of trackEntry. @zh TrackEntry 索引。\r\n     * @param name @en The name of animation. @zh 动画名称。\r\n     * @param loop @en Set play animation in a loop. @zh 是否循环播放。\r\n     * @param delay @en Delay time of animation start. @zh 动画开始的延迟时间。\r\n     * @return {sp.spine.TrackEntry}\r\n     */\r\n    public addAnimation (trackIndex: number, name: string, loop: boolean, delay?: number): spine.TrackEntry | null {\r\n        delay = delay || 0;\r\n        if (this.isAnimationCached()) {\r\n            if (trackIndex !== 0) {\r\n                warnID(16413);\r\n            }\r\n            this._animationQueue.push({ animationName: name, loop, delay });\r\n            return null;\r\n        } else if (this._skeleton) {\r\n            const animation = this._skeleton.data.findAnimation(name);\r\n            if (!animation) {\r\n                logID(7510, name);\r\n                return null;\r\n            }\r\n            return this._state?.addAnimationWith(trackIndex, animation, loop, delay);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @en Find animation with specified name.\r\n     * @zh 查找指定名称的动画\r\n     * @param name @en The name of animation. @zh 动画名称。\r\n     * @returns {sp.spine.Animation}\r\n     */\r\n    public findAnimation (name: string): spine.Animation | null {\r\n        if (this._skeleton) {\r\n            return this._skeleton.data.findAnimation(name);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @en Returns track entry by trackIndex.<br>\r\n     * Returns a {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.TrackEntry object.\r\n     * @zh 通过 track 索引获取 TrackEntry。<br>\r\n     * 返回一个 {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.TrackEntry 对象。\r\n     * @param trackIndex @en The index of trackEntry. @zh TrackEntry 索引。\r\n     * @return {sp.spine.TrackEntry}\r\n     */\r\n    public getCurrent (trackIndex: number): spine.TrackEntry | null {\r\n        if (this.isAnimationCached()) {\r\n            warnID(16414);\r\n        } else if (this._state) {\r\n            return this._state.getCurrent(trackIndex);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Finds a skin by name and makes it the active skin.\r\n     * This does a string comparison for every skin.<br>\r\n     * Note that setting the skin does not change which attachments are visible.<br>\r\n     * Returns a {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Skin object.\r\n     * @zh\r\n     * 按名称查找皮肤，激活该皮肤。这里对每个皮肤的名称进行了比较。<br>\r\n     * 注意：设置皮肤不会改变 attachment 的可见性。<br>\r\n     * 返回一个 {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Skin 对象。\r\n     *\r\n     * @param skinName @en The name of skin. @zh 皮肤名称。\r\n     */\r\n    public setSkin (name: string): void {\r\n        if (!name) return;\r\n        if (this._skeleton) this._skeleton.setSkinByName(name);\r\n        this._instance!.setSkin(name);\r\n        if (this.isAnimationCached()) {\r\n            if (this._animCache) {\r\n                this._animCache.setSkin(name);\r\n            }\r\n        }\r\n        this._skinName = name;\r\n        this.invalidAnimationCache();\r\n    }\r\n\r\n    /**\r\n     * @en Update skeleton animation.\r\n     * @zh 更新骨骼动画。\r\n     * @param dt @en delta time. @zh 时间差。\r\n     */\r\n    public updateAnimation (dt: number): void {\r\n        this._markForUpdateRenderData();\r\n        if (this.paused) return;\r\n        if (this.isAnimationCached()) {\r\n            // On realTime mode, dt is multiplied at native side.\r\n            dt *= this._timeScale * timeScale;\r\n            if (this._isAniComplete) {\r\n                if (this._animationQueue.length === 0 && !this._headAniInfo) {\r\n                    const frameCache = this._animCache;\r\n                    if (frameCache && frameCache.isInvalid()) {\r\n                        frameCache.updateToFrame(0);\r\n                        const frames = frameCache.frames;\r\n                        this._curFrame = frames[frames.length - 1];\r\n                    }\r\n                    return;\r\n                }\r\n                if (!this._headAniInfo) {\r\n                    this._headAniInfo = this._animationQueue.shift()!;\r\n                }\r\n                this._accTime += dt;\r\n                if (this._accTime > this._headAniInfo?.delay) {\r\n                    const aniInfo = this._headAniInfo;\r\n                    this._headAniInfo = null;\r\n                    this.setAnimation(0, aniInfo?.animationName, aniInfo?.loop);\r\n                }\r\n                return;\r\n            }\r\n            this._updateCache(dt);\r\n        } else {\r\n            this._instance!.updateAnimation(dt);\r\n        }\r\n    }\r\n\r\n    protected _updateCache (dt: number): void {\r\n        const frameCache = this._animCache!;\r\n        if (!frameCache.isInited()) {\r\n            return;\r\n        }\r\n        const frames = frameCache.frames;\r\n        const frameTime = SkeletonCache.FrameTime;\r\n        // Animation Start, the event different from _customMaterial inner event,\r\n        // It has no event object.\r\n        if (this._accTime === 0 && this._playCount === 0) {\r\n            this._startEntry.animation.name = this._animationName;\r\n            if (this._listener && this._listener.start) {\r\n                this._listener.start(this._startEntry);\r\n            }\r\n        }\r\n\r\n        this._accTime += dt;\r\n        let frameIdx = Math.floor(this._accTime / frameTime);\r\n        if (!frameCache.isCompleted) {\r\n            frameCache.updateToFrame(frameIdx);\r\n        }\r\n        this._curFrame = frames[frameIdx];\r\n        if (this._curFrame !== undefined) {\r\n            this.attachUtil.updateSkeletonBones(this._curFrame.boneInfos);\r\n        }\r\n        if (frameCache.isCompleted && frameIdx >= frames.length) {\r\n            this._playCount++;\r\n            if (this._playTimes > 0 && this._playCount >= this._playTimes) {\r\n                // set frame to end frame.\r\n                this._curFrame = frames[frames.length - 1];\r\n                this._accTime = 0;\r\n                this._playCount = 0;\r\n                this._isAniComplete = true;\r\n                this._emitCacheCompleteEvent();\r\n                return;\r\n            }\r\n            this._accTime = 0;\r\n            frameIdx = 0;\r\n            this._curFrame = frames[frameIdx];\r\n            this._emitCacheCompleteEvent();\r\n        }\r\n    }\r\n\r\n    protected _emitCacheCompleteEvent (): void {\r\n        if (!this._listener) return;\r\n        this._endEntry.animation.name = this._animationName;\r\n        if (this._listener.complete) this._listener.complete(this._endEntry);\r\n        if (this._listener.end) this._listener.end(this._endEntry);\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public updateRenderData (): any {\r\n        if (this.isAnimationCached()) {\r\n            if (!this._curFrame) return null;\r\n            const model = this._curFrame.model;\r\n            return model;\r\n        } else {\r\n            const model = this._instance!.updateRenderData();\r\n            return model;\r\n        }\r\n    }\r\n\r\n    protected _flushAssembler (): void {\r\n        const assembler = Skeleton.Assembler.getAssembler(this);\r\n        if (this._assembler !== assembler) {\r\n            this._assembler = assembler;\r\n        }\r\n        if (this._skeleton && this._assembler && this._assembler.createData) {\r\n            this._renderData = this._assembler.createData(this) as RenderData;\r\n            this._markForUpdateRenderData();\r\n            this._updateColor();\r\n        }\r\n    }\r\n\r\n    protected _render (batcher: Batcher2D): void {\r\n        let indicesCount = 0;\r\n        if (this.renderData && this._drawList.length > 0) {\r\n            const rd = this.renderData;\r\n            const chunk = rd.chunk;\r\n            const accessor = chunk.vertexAccessor;\r\n            const meshBuffer = rd.getMeshBuffer()!;\r\n            const origin = meshBuffer.indexOffset;\r\n            // Fill index buffer\r\n            for (let i = 0; i < this._drawList.length; i++) {\r\n                const dc = this._drawList.data[i];\r\n                if (dc.texture) {\r\n                    batcher.commitMiddleware(this, meshBuffer, origin + dc.indexOffset, dc.indexCount, dc.texture, dc.material!, this._enableBatch);\r\n                }\r\n                indicesCount += dc.indexCount;\r\n            }\r\n            const subIndices = rd.indices!.subarray(0, indicesCount);\r\n            accessor.appendIndices(chunk.bufferId, subIndices);\r\n            accessor.getMeshBuffer(chunk.bufferId).setDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public requestDrawData (material: Material, textureUUID: string, indexOffset: number, indexCount: number): SkeletonDrawData {\r\n        const draw = this._drawList.add();\r\n        draw.material = material;\r\n        let tex: Texture2D = assetManager.assets.get(textureUUID) as Texture2D;\r\n        if (!tex) {\r\n            // read from skeleton's texture map\r\n            tex = this.skeletonData?.textures.find((t) => (t.uuid === textureUUID || t.getId() === textureUUID)) as Texture2D;\r\n            if (!tex) {\r\n                // read from setSlotTexture's cache\r\n                tex = this._slotTextures?.get(textureUUID) as Texture2D;\r\n            }\r\n        }\r\n        draw.texture = tex;\r\n        draw.indexOffset = indexOffset;\r\n        draw.indexCount = indexCount;\r\n        return draw;\r\n    }\r\n\r\n    protected _updateBuiltinMaterial (): Material {\r\n        const material = builtinResMgr.get<Material>('default-spine-material');\r\n        return material;\r\n    }\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public override updateMaterial (): void {\r\n        let mat: Material;\r\n        if (this._customMaterial) mat = this._customMaterial;\r\n        else mat = this._updateBuiltinMaterial();\r\n        this.setSharedMaterial(mat, 0);\r\n        this._cleanMaterialCache();\r\n    }\r\n\r\n    private getMaterialTemplate (): Material {\r\n        if (this.customMaterial !== null) return this.customMaterial;\r\n        if (this.material) return this.material;\r\n        this.updateMaterial();\r\n        return this.material!;\r\n    }\r\n    private _cleanMaterialCache (): void {\r\n        for (const val in this._materialCache) {\r\n            this._materialCache[val].destroy();\r\n        }\r\n        this._materialCache = {};\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public getMaterialForBlendAndTint (src: BlendFactor, dst: BlendFactor, type: SpineMaterialType): MaterialInstance {\r\n        const key = `${type}/${src}/${dst}`;\r\n        let inst = this._materialCache[key];\r\n        if (inst) {\r\n            return inst;\r\n        }\r\n        if (this._customMaterialInstance) {\r\n            inst = this._customMaterialInstance;\r\n        } else {\r\n            const material = this.getMaterialTemplate();\r\n            const matInfo = {\r\n                parent: material,\r\n                subModelIdx: 0,\r\n                owner: this,\r\n            };\r\n            inst = new MaterialInstance(matInfo);\r\n        }\r\n        this._materialCache[key] = inst;\r\n        inst.overridePipelineStates({\r\n            blendState: {\r\n                blendColor: Color.WHITE,\r\n                targets: [{\r\n                    blendEq: BlendOp.ADD,\r\n                    blendAlphaEq: BlendOp.ADD,\r\n                    blendSrc: src,\r\n                    blendDst: dst,\r\n                    blendSrcAlpha: src,\r\n                    blendDstAlpha: dst,\r\n                }],\r\n            },\r\n        });\r\n        let useTwoColor = false;\r\n        if (type === SpineMaterialType.TWO_COLORED) {\r\n            useTwoColor = true;\r\n        }\r\n        const useLocal = !this._enableBatch;\r\n        inst.recompileShaders({ TWO_COLORED: useTwoColor, USE_LOCAL: useLocal });\r\n        return inst;\r\n    }\r\n\r\n    // update animation list for editor\r\n    protected _updateAnimEnum (): void {\r\n        let animEnum;\r\n        if (isSkeletonDataValid(this.skeletonData)) {\r\n            animEnum = this.skeletonData.getAnimsEnum();\r\n        } else {\r\n            animEnum = SpineDefaultAnimsEnum;\r\n        }\r\n\r\n        // reset enum type\r\n        this._enumAnimations = Enum({});\r\n        Object.assign(this._enumAnimations, animEnum);\r\n        Enum.update(this._enumAnimations);\r\n        setPropertyEnumType(this, '_animationIndex', this._enumAnimations);\r\n    }\r\n    // update skin list for editor\r\n    protected _updateSkinEnum (): void {\r\n        let skinEnum;\r\n        if (isSkeletonDataValid(this.skeletonData)) {\r\n            skinEnum = this.skeletonData.getSkinsEnum();\r\n        } else {\r\n            skinEnum = DefaultSkinsEnum;\r\n        }\r\n\r\n        this._enumSkins = Enum({});\r\n        Object.assign(this._enumSkins, skinEnum);\r\n        Enum.update(this._enumSkins);\r\n        setPropertyEnumType(this, '_defaultSkinIndex', this._enumSkins);\r\n    }\r\n\r\n    protected _refreshInspector (): void {\r\n        if (EDITOR_NOT_IN_PREVIEW) {\r\n            // update inspector\r\n            this._updateAnimEnum();\r\n            this._updateSkinEnum();\r\n            // TODO: refresh inspector\r\n            // Editor.Utils.refreshSelectedInspector('node', this.node.uuid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Call this method to destroy the rendering data.\r\n     * @zh 调用该方法销毁渲染数据。\r\n     */\r\n    public destroyRenderData (): void {\r\n        this._drawList.reset();\r\n        super.destroyRenderData();\r\n    }\r\n\r\n    protected createRenderEntity (): RenderEntity {\r\n        const renderEntity = new RenderEntity(RenderEntityType.DYNAMIC);\r\n        renderEntity.setUseLocal(true);\r\n        return renderEntity;\r\n    }\r\n    /**\r\n     * @en Mark to re-update the rendering data, usually used to force refresh the display.\r\n     * @zh 标记重新更新渲染数据，一般用于强制刷新显示。\r\n     */\r\n    public markForUpdateRenderData (enable = true): void {\r\n        super._markForUpdateRenderData(enable);\r\n        if (this._debugRenderer) {\r\n            this._debugRenderer._markForUpdateRenderData(enable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public syncAttachedNode (): void {\r\n        // sync attached node matrix\r\n        this.attachUtil._syncAttachedNode();\r\n    }\r\n\r\n    /**\r\n     * @en Whether in cached mode.\r\n     * @zh 当前是否处于缓存模式。\r\n     */\r\n    public isAnimationCached (): boolean {\r\n        if (EDITOR_NOT_IN_PREVIEW) return false;\r\n        return this._cacheMode !== SpineAnimationCacheMode.REALTIME;\r\n    }\r\n    /**\r\n     * @en\r\n     * It's best to set cache mode before set property 'dragonAsset', or will waste some cpu time.\r\n     * If set the mode in editor, then no need to worry about order problem.\r\n     * @zh\r\n     * 若想切换渲染模式，最好在设置'dragonAsset'之前，先设置好渲染模式，否则有运行时开销。\r\n     * 若在编辑中设置渲染模式，则无需担心设置次序的问题。\r\n     *\r\n     * @example\r\n     * skeleton.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.SHARED_CACHE);\r\n     */\r\n    public setAnimationCacheMode (cacheMode: SpineAnimationCacheMode): void {\r\n        if (this._preCacheMode  !== cacheMode) {\r\n            this._cacheMode = cacheMode;\r\n            this._preCacheMode = cacheMode;\r\n            if (this._instance) {\r\n                this._instance.isCache = this.isAnimationCached();\r\n            }\r\n            this._updateSkeletonData();\r\n            this._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the bones and slots to the setup pose.\r\n     * @zh 还原到起始动作。\r\n     */\r\n    public setToSetupPose (): void {\r\n        if (this._skeleton) {\r\n            this._skeleton.setToSetupPose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the bones to the setup pose,\r\n     * using the values from the `BoneData` list in the `SkeletonData`.\r\n     * @zh\r\n     * 设置 bone 到起始动作。\r\n     * 使用 SkeletonData 中的 BoneData 列表中的值。\r\n     */\r\n    public setBonesToSetupPose (): void {\r\n        if (this._skeleton) {\r\n            this._skeleton.setBonesToSetupPose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the slots to the setup pose,\r\n     * using the values from the `SlotData` list in the `SkeletonData`.\r\n     * @zh\r\n     * 设置 slot 到起始动作。\r\n     * 使用 SkeletonData 中的 SlotData 列表中的值。\r\n     */\r\n    public setSlotsToSetupPose (): void {\r\n        if (this._skeleton) {\r\n            this._skeleton.setSlotsToSetupPose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Invalidates the animation cache, which is then recomputed on each frame.\r\n     * @zh\r\n     * 使动画缓存失效，之后会在每帧重新计算。\r\n     * @method invalidAnimationCache\r\n     */\r\n    public invalidAnimationCache (): void {\r\n        if (!this.isAnimationCached()) return;\r\n        if (this._skeletonCache) {\r\n            this._skeletonCache.invalidAnimationCache(this._skeletonData!.uuid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Finds a bone by name.\r\n     * This does a string comparison for every bone.<br>\r\n     * Returns a {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Bone object.\r\n     * @zh\r\n     * 通过名称查找 bone。\r\n     * 这里对每个 bone 的名称进行了对比。<br>\r\n     * 返回一个 {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Bone 对象。\r\n     *\r\n     * @param boneName @en The name of bone. @zh 骨骼名称。\r\n     */\r\n    public findBone (boneName: string): spine.Bone | null {\r\n        if (this._skeleton) {\r\n            return this._skeleton.findBone(boneName);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Finds a slot by name. This does a string comparison for every slot.<br>\r\n     * Returns a {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Slot object.\r\n     * @zh\r\n     * 通过名称查找 slot。这里对每个 slot 的名称进行了比较。<br>\r\n     * 返回一个 {{#crossLinkModule \"sp.spine\"}}sp.spine{{/crossLinkModule}}.Slot 对象。\r\n     *\r\n     * @param slotName @en The name of slot. @zh 插槽名称。\r\n     */\r\n    public findSlot (slotName: string): spine.Slot | null {\r\n        if (this._skeleton) {\r\n            return this._skeleton.findSlot(slotName);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ANIMATION\r\n    /**\r\n     * @en\r\n     * Mix applies all keyframe values,\r\n     * interpolated for the specified time and mixed with the current values.\r\n     * @zh 为所有关键帧设定混合及混合时间（从当前值开始差值）。\r\n     * @param fromAnimation @en Mix start animation. @zh 过渡起始动画。\r\n     * @param toAnimation @en Mix end animation. @zh 过渡结束动画。\r\n     * @param duration @ Time of animation mix. @zh 动画过渡时间。\r\n     */\r\n    public setMix (fromAnimation: string, toAnimation: string, duration: number): void {\r\n        if (this.isAnimationCached()) {\r\n            warnID(16415);\r\n            return;\r\n        }\r\n        if (this._state) {\r\n            this._instance!.setMix(fromAnimation, toAnimation, duration);\r\n            //this._state.data.setMix(fromAnimation, toAnimation, duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clears all tracks of animation state.\r\n     * @zh 清除所有 track 的动画状态。\r\n     */\r\n    public clearTracks (): void {\r\n        if (this.isAnimationCached()) {\r\n            warnID(16416);\r\n        } else if (this._state) {\r\n            this._state.clearTracks();\r\n            this.setToSetupPose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Clears track of animation state by trackIndex.\r\n     * @zh 清除出指定 track 的动画状态。\r\n     * @param trackIndex @en Index of track. @zh 动画通道索引。\r\n     */\r\n    public clearTrack (trackIndex: number): void {\r\n        if (this.isAnimationCached()) {\r\n            warnID(16417);\r\n        } else if (this._state) {\r\n            this._state.clearTrack(trackIndex);\r\n            if (EDITOR_NOT_IN_PREVIEW) {\r\n                this._state.update(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Computes the world SRT from the local SRT for each bone.\r\n     * @zh 重新更新所有骨骼的世界 Transform，\r\n     * 当获取 bone 的数值未更新时，即可使用该函数进行更新数值。\r\n     * @example\r\n     * var bone = spine.findBone('head');\r\n     * cc.log(bone.worldX); // return 0;\r\n     * spine.updateWorldTransform();\r\n     * bone = spine.findBone('head');\r\n     * cc.log(bone.worldX); // return -23.12;\r\n     */\r\n    protected updateWorldTransform (): void {\r\n        if (!this.isAnimationCached()) return;\r\n\r\n        if (this._skeleton) {\r\n            this._skeleton.updateWorldTransform();\r\n        }\r\n    }\r\n\r\n    private _verifySockets (sockets: SpineSocket[]): void {\r\n        for (let i = 0, l = sockets.length; i < l; i++) {\r\n            const target = sockets[i].target;\r\n            if (target) {\r\n                if (!target.parent || (target.parent !== this.node)) {\r\n                    error(`Target node ${target.name} is expected to be a direct child of ${this.node.name}`);\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        const uniqueSocketNode: Map<Node, boolean> = new Map();\r\n        sockets.forEach((x: SpineSocket): void => {\r\n            if (x.target) {\r\n                if (uniqueSocketNode.get(x.target)) {\r\n                    error(`Target node ${x.target.name} has existed.`);\r\n                } else {\r\n                    uniqueSocketNode.set(x.target, true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _updateSocketBindings (): void {\r\n        if (!this._skeleton) return;\r\n        this._socketNodes.clear();\r\n        for (let i = 0, l = this._sockets.length; i < l; i++) {\r\n            const socket = this._sockets[i];\r\n            if (socket.path && socket.target) {\r\n                const boneIdx = this._cachedSockets.get(socket.path);\r\n                if (!boneIdx) {\r\n                    error(`Skeleton data does not contain path ${socket.path}`);\r\n                    continue;\r\n                }\r\n                this._socketNodes.set(boneIdx, socket.target);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _indexBoneSockets (): void {\r\n        if (!this._skeleton) {\r\n            return;\r\n        }\r\n        this._cachedSockets.clear();\r\n        const bones = this._skeleton.bones;\r\n        const getBoneName = (bone: spine.Bone): string => {\r\n            if (bone.parent == null) return bone.data.name || '<Unamed>';\r\n            return `${getBoneName(bones[bone.parent.data.index])}/${bone.data.name}`;\r\n        };\r\n        for (let i = 0, l = bones.length; i < l; i++) {\r\n            const bd = bones[i].data;\r\n            const boneName: string = getBoneName(bones[i]);\r\n            this._cachedSockets.set(boneName, bd.index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Query all bones that can attach sockets.\r\n     * @zh 查询所有可以添加挂点的所有骨骼。\r\n     * @return String typed array of bones's path.\r\n     */\r\n    public querySockets (): string[] {\r\n        if (!this._skeleton) {\r\n            return [];\r\n        }\r\n        if (this._cachedSockets.size === 0) {\r\n            this._indexBoneSockets();\r\n        }\r\n\r\n        if (this._cachedSockets.size > 0) {\r\n            return Array.from(this._cachedSockets.keys()).sort();\r\n        }\r\n        return [];\r\n    }\r\n\r\n    // if change use tint mode, just clear material cache\r\n    protected _updateUseTint (): void {\r\n        this._cleanMaterialCache();\r\n        this.destroyRenderData();\r\n        if (!JSB) {\r\n            if (!this.isAnimationCached()) {\r\n                this._instance!.setUseTint(this._useTint);\r\n            }\r\n        }\r\n        const assembler = this._assembler;\r\n        if (assembler && assembler.createData && this._skeleton) {\r\n            this._renderData = assembler.createData(this) as RenderData;\r\n            this._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    // if change use batch mode, just clear material cache\r\n    protected _updateBatch (): void {\r\n        this._cleanMaterialCache();\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    protected _updateDebugDraw (): void {\r\n        if (this.debugBones || this.debugSlots || this.debugMesh) {\r\n            if (!this._debugRenderer) {\r\n                let debugDrawNode: Node | null = new Node('DEBUG_DRAW_NODE');\r\n                debugDrawNode.layer = this.node.layer;\r\n                debugDrawNode.hideFlags |= CCObjectFlags.DontSave | CCObjectFlags.HideInHierarchy;\r\n                let debugDraw: Graphics | null = null;\r\n\r\n                try {\r\n                    debugDraw = debugDrawNode.addComponent('cc.Graphics') as Graphics;\r\n                    debugDraw.lineWidth = 5;\r\n                    debugDraw.strokeColor = new Color(255, 0, 0, 255);\r\n\r\n                    this._debugRenderer = debugDraw;\r\n                    debugDrawNode.parent = this.node;\r\n                    this.node.on(NodeEventType.LAYER_CHANGED, this._applyLayer, this);\r\n                } catch (e: any) {\r\n                    errorID(4501, e.message as string);\r\n                    debugDrawNode.destroy();\r\n                    debugDrawNode = null;\r\n                }\r\n            }\r\n            if (this.isAnimationCached()) {\r\n                warnID(16418);\r\n            } else if (!JSB) {\r\n                this._instance!.setDebugMode(true);\r\n            }\r\n        } else if (this._debugRenderer) {\r\n            this.node.off(NodeEventType.LAYER_CHANGED, this._applyLayer, this);\r\n            this._debugRenderer.node.destroy();\r\n            this._debugRenderer = null;\r\n            if (!this.isAnimationCached()) {\r\n                if (this._instance) {\r\n                    this._instance.setDebugMode(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateUITransform (): void {\r\n        const uiTrans = this.node._getUITransformComp()!;\r\n        const skeletonData = this._runtimeData;\r\n        if (!skeletonData) {\r\n            uiTrans.setContentSize(100, 100);\r\n            uiTrans.anchorX = 0.5;\r\n            uiTrans.anchorX = 0.5;\r\n            return;\r\n        }\r\n        const width = skeletonData.width;\r\n        const height = skeletonData.height;\r\n        if (width && height) {\r\n            uiTrans.setContentSize(width, height);\r\n            if (width !== 0) uiTrans.anchorX = Math.abs(skeletonData.x) / width;\r\n            if (height !== 0) uiTrans.anchorY = Math.abs(skeletonData.y) / height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public _updateColor (): void {\r\n        const self = this;\r\n        const uiProps = self.node._uiProps;\r\n        const tempColor = self._tempColor;\r\n        const color = self._color;\r\n        const parentOpacity = self.node.parent ? self.node.parent._uiProps.opacity : 1.0;\r\n        //Calculate the final opacity here, because the first frame affected by parent's opacity\r\n        const a = uiProps.localOpacity * parentOpacity * color.a / 255;\r\n\r\n        if (tempColor.r === color.r && tempColor.g === color.g && tempColor.b === color.b && tempColor.a === a) {\r\n            return;\r\n        }\r\n        uiProps.colorDirty = true;\r\n        tempColor.r = color.r;\r\n        tempColor.g = color.g;\r\n        tempColor.b = color.b;\r\n        tempColor.a = a;\r\n        const r = color.r / 255.0;\r\n        const g = color.g / 255.0;\r\n        const b = color.b / 255.0;\r\n        this._instance!.setColor(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * @version 3.8, deprecated since spine 4.2\r\n     * @en Sets vertex effect delegate.\r\n     * @zh 设置顶点特效动画代理。\r\n     * @param effectDelegate @en Vertex effect delegate. @zh 顶点特效代理。\r\n     */\r\n    public setVertexEffectDelegate (effectDelegate: VertexEffectDelegate | null | undefined): void {\r\n        if (SPINE_VERSION !== '3.8') {\r\n            warnID(16409);\r\n            return;\r\n        }\r\n        if (!this._instance) {\r\n            return;\r\n        }\r\n        if (!effectDelegate) {\r\n            this._instance.clearEffect();\r\n            return;\r\n        }\r\n        const effectType = effectDelegate?.getEffectType();\r\n        if (effectType === 'jitter') {\r\n            const jitterEffect = effectDelegate?.getJitterVertexEffect();\r\n            this._instance.setJitterEffect(jitterEffect);\r\n        } else if (effectType === 'swirl') {\r\n            const swirlEffect = effectDelegate?.getJitterVertexEffect();\r\n            this._instance.setSwirlEffect(swirlEffect);\r\n        }\r\n    }\r\n\r\n    protected _ensureListener (): void {\r\n        if (!this._listener) {\r\n            this._listener = new TrackEntryListeners();\r\n            this._eventListenerID = TrackEntryListeners.addListener(this._listener);\r\n            this._instance!.setListener(this._eventListenerID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Sets the start event listener.\r\n     * @zh 用来设置开始播放动画的事件监听。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setStartListener (listener: TrackListener): void {\r\n        this._ensureListener();\r\n        this._listener!.start = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the interrupt event listener.\r\n     * @zh 用来设置动画被打断的事件监听。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setInterruptListener (listener: TrackListener): void {\r\n        this._ensureListener();\r\n        this._listener!.interrupt = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the end event listener.\r\n     * @zh 用来设置动画播放完后的事件监听。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setEndListener (listener: TrackListener): void {\r\n        this._ensureListener();\r\n        this._listener!.end = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the dispose event listener.\r\n     * @zh 用来设置动画将被销毁的事件监听。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setDisposeListener (listener: TrackListener): void {\r\n        this._ensureListener();\r\n        this._listener!.dispose = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the complete event listener.\r\n     * @zh 用来设置动画播放一次循环结束后的事件监听。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setCompleteListener (listener: TrackListener): void {\r\n        this._ensureListener();\r\n        this._listener!.complete = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the animation event listener.\r\n     * @zh 用来设置动画播放过程中帧事件的监听。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setEventListener (listener: TrackListener2): void {\r\n        this._ensureListener();\r\n        this._listener!.event = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the start event listener for specified TrackEntry.\r\n     * @zh 用来为指定的 TrackEntry 设置动画开始播放的事件监听。\r\n     * @param entry @en Animation track entry. @zh Track entry。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setTrackStartListener (entry: spine.TrackEntry, listener: TrackListener): void {\r\n        TrackEntryListeners.getListeners(entry, this._instance!).start = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the interrupt event listener for specified TrackEntry.\r\n     * @zh 用来为指定的 TrackEntry 设置动画被打断的事件监听。\r\n     * @param entry\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setTrackInterruptListener (entry: spine.TrackEntry, listener: TrackListener): void {\r\n        TrackEntryListeners.getListeners(entry, this._instance!).interrupt = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the end event listener for specified TrackEntry.\r\n     * @zh 用来为指定的 TrackEntry 设置动画播放结束的事件监听。\r\n     * @param entry\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setTrackEndListener (entry: spine.TrackEntry, listener: TrackListener): void {\r\n        TrackEntryListeners.getListeners(entry, this._instance!).end = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the dispose event listener for specified TrackEntry.\r\n     * @zh 用来为指定的 TrackEntry 设置动画即将被销毁的事件监听。\r\n     * @param entry\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setTrackDisposeListener (entry: spine.TrackEntry, listener: TrackListener): void {\r\n        TrackEntryListeners.getListeners(entry, this._instance!).dispose = listener;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the complete event listener for specified TrackEntry.\r\n     * @zh 用来为指定的 TrackEntry 设置动画一次循环播放结束的事件监听。\r\n     * @param entry @en AnimationState track. @zn 动画轨道属性。\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setTrackCompleteListener (entry: spine.TrackEntry, listener: TrackListener2): void {\r\n        const onComplete = (trackEntry: spine.TrackEntry): void => {\r\n            const loopCount = Math.floor(trackEntry.trackTime / trackEntry.animationEnd);\r\n            listener(trackEntry, loopCount);\r\n            // this._instance.setListener(listenerID, spine.EventType.event);\r\n            // this._listener!.event = listener;\r\n        };\r\n        TrackEntryListeners.getListeners(entry, this._instance!).complete = onComplete;\r\n    }\r\n\r\n    /**\r\n     * @en Sets the event listener for specified TrackEntry.\r\n     * @zh 用来为指定的 TrackEntry 设置动画帧事件的监听。\r\n     * @param entry\r\n     * @param listener @en Listener for registering callback functions. @zh 监听器对象，可注册回调方法。\r\n     */\r\n    public setTrackEventListener (entry: spine.TrackEntry, listener: TrackListener|TrackListener2): void {\r\n        TrackEntryListeners.getListeners(entry, this._instance!).event = listener;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n    */\r\n    public getDebugShapes (): any {\r\n        return this._instance!.getDebugShapes();\r\n    }\r\n\r\n    /**\r\n     * @en Set texture for slot, this function can be use to changing local skin.\r\n     * @zh 为 slot 设置贴图纹理，可使用该该方法实现局部换装功能。\r\n     * @param slotName @en The name of slot. @zh Slot 名字。\r\n     * @param tex2d @en The texture will show on the slot. @zh 在该 Slot 上显示的 2D 纹理。\r\n     * @param createNew @en Whether to create new Attachment. If value is false, all sp.Skeleton share the\r\n     * same attachment will be changed. @zh 是否需要创建新的 attachment，如果值为 false, 所有共享相同 attachment\r\n     * 的组件都将受影响。\r\n     */\r\n    public setSlotTexture (slotName: string, tex2d: Texture2D, createNew?: boolean): void {\r\n        if (this.isAnimationCached()) {\r\n            error(`Cached mode can't change texture of slot`);\r\n            return;\r\n        }\r\n        const slot = this.findSlot(slotName);\r\n        if (!slot) {\r\n            error(`No slot named:${slotName}`);\r\n            return;\r\n        }\r\n        const width = tex2d.width;\r\n        const height = tex2d.height;\r\n        const createNewAttachment = createNew || false;\r\n        this._instance!.resizeSlotRegion(slotName, width, height, createNewAttachment);\r\n        let uuid = tex2d.uuid;\r\n        if (!uuid) {\r\n            uuid = tex2d.getId();\r\n        }\r\n        this._instance!.setSlotTexture(slotName, uuid);\r\n\r\n        if (!this._slotTextures) this._slotTextures = new Map<string, Texture2D>();\r\n        this._slotTextures.set(uuid, tex2d);\r\n    }\r\n\r\n    private _destroySkeletonInfo (skeletonCache: SkeletonCache | null): void {\r\n        if (skeletonCache && this._skeletonInfo) {\r\n            skeletonCache.destroySkeleton(this._skeletonInfo.assetUUID);\r\n            this._skeletonInfo = null;\r\n        }\r\n    }\r\n\r\n    protected _applyLayer (): void {\r\n        if (this._debugRenderer) {\r\n            this._debugRenderer.node.layer = this.node.layer;\r\n        }\r\n    }\r\n}\r\n\r\nlegacyCC.internal.SpineSkeleton = Skeleton;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport spine from './lib/spine-core';\r\n\r\n/**\r\n * @en\r\n * The delegate of spine vertex effect.\r\n * @zh\r\n * Spine 顶点动画代理。\r\n * @class VertexEffectDelegate\r\n */\r\nexport class VertexEffectDelegate {\r\n    /**\r\n     * @internal\r\n     * @deprecated Since v3.7.2, this is an engine private variable that will be removed in the future.\r\n     */\r\n    name = 'sp.VertexEffectDelegate';\r\n    /**\r\n     * @en Spine vertex effect object instance.\r\n     * @zh Spine 顶点特效对象实例。\r\n     */\r\n    _vertexEffect: spine.VertexEffect;\r\n    private _interpolation: spine.Interpolation;\r\n    private _effectType: string;\r\n\r\n    constructor () {\r\n        this._vertexEffect = null!;\r\n        this._interpolation = null!;\r\n        this._effectType = 'none';\r\n    }\r\n\r\n    /**\r\n     * @en Clears vertex effect.\r\n     * @zh 清空顶点特效。\r\n     */\r\n    clear (): void {\r\n        this._vertexEffect = null!;\r\n        this._interpolation = null!;\r\n        this._effectType = 'none';\r\n    }\r\n\r\n    /**\r\n     * @en Inits delegate with jitter effect.\r\n     * @zh 设置顶点抖动特效。\r\n     * @param {Number} jitterX\r\n     * @param {Number} jitterY\r\n     * @return {spine.VertexEffect} @en Return a vertex effect type of jitter. @zh 返回一个 jitter 类型的顶点特效对象实例。\r\n     */\r\n    initJitter (jitterX: number, jitterY: number): spine.VertexEffect {\r\n        this._effectType = 'jitter';\r\n        this._vertexEffect = new spine.JitterEffect(jitterX, jitterY);\r\n        return this._vertexEffect;\r\n    }\r\n\r\n    /**\r\n     * @en Inits delegate with swirl effect.\r\n     * @zh 设置顶点漩涡特效。\r\n     * @method initSwirlWithPow\r\n     * @param {Number} radius\r\n     * @param {Number} power\r\n     * @return {sp.spine.JitterEffect} @en Return a vertex effect type of swirl. @zh 返回一个 swirl 类型的顶点特效对象实例。\r\n     */\r\n    initSwirlWithPow (radius: number, power: number): spine.VertexEffect {\r\n        this._effectType = 'swirl';\r\n        this._interpolation = new spine.Pow(power);\r\n        this._vertexEffect = new spine.SwirlEffect(radius, this._interpolation);\r\n        return this._vertexEffect;\r\n    }\r\n\r\n    /**\r\n     * @en Inits delegate with swirl effect.\r\n     * @zh 设置顶点漩涡特效。\r\n     * @method initSwirlWithPowOut\r\n     * @param {Number} radius\r\n     * @param {Number} power\r\n     * @return {sp.spine.SwirlEffect} @en Return a vertex effect type of swirl. @zh 返回一个 swirl 类型的顶点特效对象实例。\r\n     */\r\n    initSwirlWithPowOut (radius: number, power: number): spine.VertexEffect {\r\n        this._effectType = 'swirl';\r\n        this._interpolation = new spine.PowOut(power);\r\n        this._vertexEffect = new spine.SwirlEffect(radius, this._interpolation);\r\n        return this._vertexEffect;\r\n    }\r\n\r\n    /**\r\n     * @en Gets jitter vertex effect.\r\n     * @zh 获取顶点抖动特效。\r\n     * @method getJitterVertexEffect\r\n     * @return {sp.spine.JitterEffect}\r\n     */\r\n    getJitterVertexEffect (): spine.VertexEffect {\r\n        return this._vertexEffect;\r\n    }\r\n\r\n    /**\r\n     * @en Gets swirl vertex effect.\r\n     * @zh 获取顶点漩涡特效。\r\n     * @method getSwirlVertexEffect\r\n     * @return {sp.spine.SwirlEffect}\r\n     */\r\n    getSwirlVertexEffect (): spine.VertexEffect {\r\n        return this._vertexEffect;\r\n    }\r\n\r\n    /**\r\n     * @en Gets vertex effect.\r\n     * @zh 获取顶点特效。\r\n     * @method getVertexEffect\r\n     * @return {sp.spine.JitterEffect|sp.spine.SwirlEffect}\r\n     */\r\n    getVertexEffect (): spine.VertexEffect {\r\n        return this._vertexEffect;\r\n    }\r\n\r\n    /**\r\n     * @en Gets effect type.\r\n     * @zh 获取特效类型。\r\n     * @method getEffectType\r\n     * @return {String}\r\n     */\r\n    getEffectType (): string {\r\n        return this._effectType;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IAssembler } from '../../2d/renderer/base';\r\n\r\nimport { StaticVBAccessor } from '../../2d/renderer/static-vb-accessor';\r\nimport { vfmtPosUvColor4B, vfmtPosUvTwoColor4B, getAttributeStride } from '../../2d/renderer/vertex-format';\r\nimport { type Skeleton, SpineMaterialType } from '../skeleton';\r\nimport { BlendFactor } from '../../gfx';\r\nimport { legacyCC } from '../../core/global-exports';\r\nimport { RenderData } from '../../2d/renderer/render-data';\r\nimport { director } from '../../game';\r\nimport spine from '../lib/spine-core';\r\nimport { Color, EPSILON, Vec3 } from '../../core';\r\nimport type { MaterialInstance } from '../../render-scene';\r\nimport type { IBatcher } from '../../2d/renderer/i-batcher';\r\n\r\n/**\r\n * If Spine instance counts exceeding thresholds cause issues, first adjust the ADJUST_SIZE_RATE value.\r\n    Going forward, we need to implement independent memory management for Spine that bypasses the chunk approach.\r\n    Similar to native IOBuffers where populated content transfers directly to GPU buffers without going through static_vb_accessor.\r\n    For now, provide the minimal viable change.\r\n */\r\nconst ADJUST_SIZE_RATE = 1.1;\r\nconst _slotColor = new Color(0, 0, 255, 255);\r\nconst _boneColor = new Color(255, 0, 0, 255);\r\nconst _originColor = new Color(0, 255, 0, 255);\r\nconst _meshColor = new Color(255, 255, 0, 255);\r\nlet _nodeR: number;\r\nlet _nodeG: number;\r\nlet _nodeB: number;\r\nlet _nodeA: number;\r\n\r\nlet _accessor: StaticVBAccessor = null!;\r\nlet _tintAccessor: StaticVBAccessor = null!;\r\n\r\nlet _premultipliedAlpha = false;\r\nlet _useTint = false;\r\n\r\nconst _byteStrideOneColor = getAttributeStride(vfmtPosUvColor4B);\r\nconst _byteStrideTwoColor = getAttributeStride(vfmtPosUvTwoColor4B);\r\n\r\nconst DEBUG_TYPE_REGION = 0;\r\nconst DEBUG_TYPE_MESH = 1;\r\n\r\nconst tempVecPos = new Vec3(0, 0, 0);\r\n\r\nfunction _getSlotMaterial (blendMode: number, comp: Skeleton): MaterialInstance {\r\n    let src: BlendFactor;\r\n    let dst: BlendFactor;\r\n    switch (blendMode) {\r\n    case 1:\r\n        src =  _premultipliedAlpha ? BlendFactor.ONE :  BlendFactor.SRC_ALPHA;\r\n        dst = BlendFactor.ONE;\r\n        break;\r\n    case 2:\r\n        src = BlendFactor.DST_COLOR;\r\n        dst = BlendFactor.ONE_MINUS_SRC_ALPHA;\r\n        break;\r\n    case 3:\r\n        src = _premultipliedAlpha ? BlendFactor.ONE :  BlendFactor.SRC_ALPHA;\r\n        dst = BlendFactor.ONE_MINUS_SRC_COLOR;\r\n        break;\r\n    case 0:\r\n    default:\r\n        src = _premultipliedAlpha ? BlendFactor.ONE : BlendFactor.SRC_ALPHA;\r\n        dst = BlendFactor.ONE_MINUS_SRC_ALPHA;\r\n        break;\r\n    }\r\n    return comp.getMaterialForBlendAndTint(src, dst, _useTint ? SpineMaterialType.TWO_COLORED : SpineMaterialType.COLORED_TEXTURED);\r\n}\r\n\r\nclass Simple implements IAssembler {\r\n    vCount = 32767;\r\n    private ensureAccessor (useTint: boolean): StaticVBAccessor {\r\n        let accessor = useTint ? _tintAccessor : _accessor;\r\n        if (!accessor) {\r\n            const device = director.root!.device;\r\n            const batcher = director.root!.batcher2D;\r\n            const attributes = useTint ? vfmtPosUvTwoColor4B : vfmtPosUvColor4B;\r\n            if (useTint) {\r\n                accessor = _tintAccessor = new StaticVBAccessor(device, attributes, this.vCount);\r\n                // Register to batcher so that batcher can upload buffers after batching process\r\n                batcher.registerBufferAccessor(Number.parseInt('SPINETINT', 36), _tintAccessor);\r\n            } else {\r\n                accessor = _accessor = new StaticVBAccessor(device, attributes, this.vCount);\r\n                // Register to batcher so that batcher can upload buffers after batching process\r\n                batcher.registerBufferAccessor(Number.parseInt('SPINE', 36), _accessor);\r\n            }\r\n        }\r\n        return accessor;\r\n    }\r\n\r\n    createData (comp: Skeleton): RenderData {\r\n        let rd = comp.renderData;\r\n        if (!rd) {\r\n            const useTint = comp.useTint || comp.isAnimationCached();\r\n            const accessor = this.ensureAccessor(useTint);\r\n            rd = RenderData.add(useTint ? vfmtPosUvTwoColor4B : vfmtPosUvColor4B, accessor);\r\n        }\r\n        return rd;\r\n    }\r\n\r\n    updateRenderData (comp: Skeleton): void {\r\n        const skeleton = comp._skeleton;\r\n        if (skeleton && comp.node.active && comp.skeletonData?.isValid) {\r\n            updateComponentRenderData(comp);\r\n        }\r\n    }\r\n}\r\n\r\nexport const simple = new Simple();\r\n\r\nfunction updateComponentRenderData (comp: Skeleton): void {\r\n    comp.drawList.reset();\r\n    const rd = comp.renderData;\r\n    if (comp.color.a === 0 || !rd) return;\r\n    comp._updateColor();\r\n    _premultipliedAlpha = comp.premultipliedAlpha;\r\n    _useTint = comp.useTint || comp.isAnimationCached();\r\n    if (comp.isAnimationCached()) {\r\n        cacheTraverse(comp);\r\n    } else {\r\n        realTimeTraverse(comp);\r\n    }\r\n    const accessor = _useTint ? _tintAccessor : _accessor;\r\n    comp.syncAttachedNode();\r\n    if (rd.vertexCount > 0 || rd.indexCount > 0) accessor.getMeshBuffer(rd.chunk.bufferId).setDirty();\r\n}\r\n\r\nfunction realTimeTraverse (comp: Skeleton): void {\r\n    const floatStride = (comp.useTint ?  _byteStrideTwoColor : _byteStrideOneColor) / Float32Array.BYTES_PER_ELEMENT;\r\n    const model = comp.updateRenderData();\r\n    const vc = model.vCount as number;\r\n    const ic = model.iCount as number;\r\n    const rd = comp.renderData;\r\n    if (!rd || vc < 1 || ic < 1) return;\r\n\r\n    if (rd.vertexCount !== vc || rd.indexCount !== ic) {\r\n        if (rd.vertexCount < vc || rd.indexCount < ic) {\r\n            rd.resize(Math.ceil(vc * ADJUST_SIZE_RATE), Math.ceil(ic * ADJUST_SIZE_RATE));\r\n        }\r\n        rd.indices = new Uint16Array(ic);\r\n        comp._vLength = vc * Float32Array.BYTES_PER_ELEMENT * floatStride;\r\n        comp._vBuffer = new Uint8Array(rd.chunk.vb.buffer, rd.chunk.vb.byteOffset, comp._vLength);\r\n        comp._iLength = Uint16Array.BYTES_PER_ELEMENT * ic;\r\n        comp._iBuffer = new Uint8Array(rd.indices.buffer);\r\n    }\r\n\r\n    const vbuf = rd.chunk.vb;\r\n    const vPtr: number = model.vPtr;\r\n    const iPtr: number = model.iPtr;\r\n    const ibuf = rd.indices!;\r\n    const HEAPU8: Uint8Array = spine.wasmUtil.wasm.HEAPU8;\r\n\r\n    comp._vBuffer?.set(HEAPU8.subarray(vPtr, vPtr + comp._vLength), 0);\r\n    comp._iBuffer?.set(HEAPU8.subarray(iPtr, iPtr + comp._iLength), 0);\r\n    const chunkOffset = rd.chunk.vertexOffset;\r\n    for (let i = 0; i < ic; i++) ibuf[i] += chunkOffset;\r\n\r\n    const data = model.getData();\r\n    const textures = model.getTextures();\r\n    const count = data.size();\r\n    let indexOffset = 0;\r\n    let indexCount = 0;\r\n    for (let i = 0; i < count; i += 5) {\r\n        indexCount = data.get(i + 3);\r\n        const material = _getSlotMaterial(data.get(i + 4) as number, comp);\r\n        comp.requestDrawData(material, textures.get(i / 5) as string, indexOffset, indexCount);\r\n        indexOffset += indexCount;\r\n    }\r\n\r\n    // if enableBatch apply worldMatrix\r\n    if (comp.enableBatch) {\r\n        const worldMat = comp.node.worldMatrix;\r\n        let index = 0;\r\n        for (let i = 0; i < vc; i++) {\r\n            index = i * floatStride;\r\n            tempVecPos.x = vbuf[index];\r\n            tempVecPos.y = vbuf[index + 1];\r\n            tempVecPos.z = 0;\r\n            tempVecPos.transformMat4(worldMat);\r\n            vbuf[index] = tempVecPos.x;\r\n            vbuf[index + 1] = tempVecPos.y;\r\n            vbuf[index + 2] = tempVecPos.z;\r\n        }\r\n    }\r\n\r\n    // debug renderer\r\n    const graphics = comp._debugRenderer;\r\n    const locSkeleton = comp._skeleton;\r\n    if (graphics && (comp.debugBones || comp.debugSlots || comp.debugMesh)) {\r\n        graphics.clear();\r\n\r\n        const debugShapes = comp.getDebugShapes();\r\n        const shapeCount = debugShapes.size();\r\n        for (let i = 0; i < shapeCount; i++) {\r\n            const shape = debugShapes.get(i);\r\n            if (shape.type === DEBUG_TYPE_REGION && comp.debugSlots) {\r\n                graphics.strokeColor = _slotColor;\r\n                const vertexFloatOffset = shape.vOffset * floatStride;\r\n                const vertexFloatCount = shape.vCount * floatStride;\r\n                graphics.moveTo(vbuf[vertexFloatOffset], vbuf[vertexFloatOffset + 1]);\r\n                for (let ii = vertexFloatOffset + floatStride, nn = vertexFloatOffset + vertexFloatCount; ii < nn; ii += floatStride) {\r\n                    graphics.lineTo(vbuf[ii], vbuf[ii + 1]);\r\n                }\r\n                graphics.close();\r\n                graphics.stroke();\r\n            } else if (shape.type === DEBUG_TYPE_MESH && comp.debugMesh) {\r\n                // draw debug mesh if enabled graphics\r\n                graphics.strokeColor = _meshColor;\r\n                const iCount = shape.iCount as number;\r\n                const iOffset = shape.iOffset as number;\r\n\r\n                for (let ii = iOffset, nn = iOffset + iCount; ii < nn; ii += 3) {\r\n                    const v1 = ibuf[ii] * floatStride;\r\n                    const v2 = ibuf[ii + 1] * floatStride;\r\n                    const v3 = ibuf[ii + 2] * floatStride;\r\n\r\n                    graphics.moveTo(vbuf[v1], vbuf[v1 + 1]);\r\n                    graphics.lineTo(vbuf[v2], vbuf[v2 + 1]);\r\n                    graphics.lineTo(vbuf[v3], vbuf[v3 + 1]);\r\n                    graphics.close();\r\n                    graphics.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (comp.debugBones) {\r\n            graphics.strokeColor = _boneColor;\r\n            graphics.fillColor = _slotColor; // Root bone color is same as slot color.\r\n\r\n            for (let i = 0, n = locSkeleton.bones.length; i < n; i++) {\r\n                const bone = locSkeleton.bones[i];\r\n                const x = bone.data.length * bone.a + bone.worldX;\r\n                const y = bone.data.length * bone.c + bone.worldY;\r\n\r\n                // Bone lengths.\r\n                graphics.moveTo(bone.worldX, bone.worldY);\r\n                graphics.lineTo(x, y);\r\n                graphics.stroke();\r\n\r\n                // Bone origins.\r\n                graphics.circle(bone.worldX, bone.worldY, Math.PI * 1.5);\r\n                graphics.fill();\r\n                if (i === 0) {\r\n                    graphics.fillColor = _originColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction cacheTraverse (comp: Skeleton): void {\r\n    const model = comp.updateRenderData();\r\n    if (!model) return;\r\n\r\n    const vc = model.vCount as number;\r\n    const ic = model.iCount as number;\r\n    const rd = comp.renderData;\r\n    if (!rd || vc < 1 || ic < 1) return;\r\n    if (rd.vertexCount !== vc || rd.indexCount !== ic) {\r\n        if (rd.vertexCount < vc || rd.indexCount < ic) {\r\n            rd.resize(Math.ceil(vc * ADJUST_SIZE_RATE), Math.ceil(ic * ADJUST_SIZE_RATE));\r\n        }\r\n        rd.indices = new Uint16Array(ic);\r\n    }\r\n\r\n    const vbuf = rd.chunk.vb;\r\n    const vUint8Buf = new Uint8Array(vbuf.buffer, vbuf.byteOffset, Float32Array.BYTES_PER_ELEMENT * vbuf.length);\r\n    vUint8Buf.set(model.vData as TypedArray);\r\n\r\n    const nodeColor = comp.color;\r\n    const opacity = comp.node._uiProps.opacity;\r\n    if ((1 - opacity) > EPSILON || Color.toUint32(nodeColor) !== 0xffffffff ||  _premultipliedAlpha) {\r\n        _nodeR = nodeColor.r / 255;\r\n        _nodeG = nodeColor.g / 255;\r\n        _nodeB = nodeColor.b / 255;\r\n        _nodeA = opacity;\r\n        for (let i = 0; i < vc; i++) {\r\n            const index = i * _byteStrideTwoColor + 5 * Float32Array.BYTES_PER_ELEMENT;\r\n            const R = vUint8Buf[index];\r\n            const G = vUint8Buf[index + 1];\r\n            const B = vUint8Buf[index + 2];\r\n            const A = vUint8Buf[index + 3];\r\n            const fA = A * _nodeA;\r\n            const multiplier = _premultipliedAlpha ? fA / 255 :  1;\r\n            vUint8Buf[index] = Math.floor(multiplier * R * _nodeR);\r\n            vUint8Buf[index + 1] = Math.floor(multiplier * G * _nodeG);\r\n            vUint8Buf[index + 2] = Math.floor(multiplier * B * _nodeB);\r\n            vUint8Buf[index + 3] = Math.floor(fA);\r\n\r\n            vUint8Buf[index + 4] = Math.floor(vUint8Buf[index + 4] * _nodeR);\r\n            vUint8Buf[index + 5] = Math.floor(vUint8Buf[index + 5] * _nodeG);\r\n            vUint8Buf[index + 6] = Math.floor(vUint8Buf[index + 6] * _nodeB);\r\n            vUint8Buf[index + 7] = _premultipliedAlpha ? 255 : 0;\r\n        }\r\n    }\r\n\r\n    const iUint16Buf = rd.indices!;\r\n    iUint16Buf.set(model.iData as TypedArray);\r\n    const chunkOffset = rd.chunk.vertexOffset;\r\n    for (let i = 0; i < ic; i++) {\r\n        iUint16Buf[i] += chunkOffset;\r\n    }\r\n\r\n    const meshes = model.meshes;\r\n    const count = meshes.length;\r\n    let indexOffset = 0;\r\n    let indexCount = 0;\r\n    for (let i = 0; i < count; i++) {\r\n        const mesh = meshes[i];\r\n        const material = _getSlotMaterial(mesh.blendMode as number, comp);\r\n        const textureID = mesh.textureID;\r\n        indexCount = mesh.iCount;\r\n        comp.requestDrawData(material, textureID as string, indexOffset, indexCount);\r\n        indexOffset += indexCount;\r\n    }\r\n\r\n    const floatStride = _byteStrideTwoColor / Float32Array.BYTES_PER_ELEMENT;\r\n    if (comp.enableBatch) {\r\n        const worldMat = comp.node.worldMatrix;\r\n        let index = 0;\r\n        for (let i = 0; i < vc; i++) {\r\n            index = i * floatStride;\r\n            tempVecPos.x = vbuf[index];\r\n            tempVecPos.y = vbuf[index + 1];\r\n            tempVecPos.z = 0;\r\n            tempVecPos.transformMat4(worldMat);\r\n            vbuf[index] = tempVecPos.x;\r\n            vbuf[index + 1] = tempVecPos.y;\r\n            vbuf[index + 2] = tempVecPos.z;\r\n        }\r\n    }\r\n}\r\n\r\nlegacyCC.internal.SpineAssembler = simple;\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { IAssemblerManager } from '../../2d/renderer/base';\r\nimport { Skeleton } from '../skeleton';\r\nimport { simple } from './simple';\r\n\r\n// Inline all type switch to avoid jit deoptimization during inlined function change\r\n/**\r\n * @internal Since v3.7.2 this is an engine private object.\r\n */\r\nexport const simpleSpineAssembler: IAssemblerManager = {\r\n    getAssembler () {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return simple;\r\n    },\r\n};\r\n\r\nSkeleton.Assembler = simpleSpineAssembler;\r\n","/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { BUILD, LOAD_SPINE_MANUALLY } from 'internal:constants';\r\nimport { ccenum } from '../core';\r\nimport spine from './lib/spine-core';\r\nimport { waitForSpineWasmInstantiation } from './lib/instantiated';\r\n\r\n/**\r\n * @en\r\n * The global main namespace of Spine, all classes, functions,\r\n * properties and constants of Spine are defined in this namespace\r\n * @zh\r\n * Spine 的全局的命名空间，\r\n * 与 Spine 相关的所有的类，函数，属性，常量都在这个命名空间中定义。\r\n * @module sp\r\n * @main sp\r\n */\r\n\r\n/*\r\n * Reference:\r\n * http://esotericsoftware.com/spine-runtime-terminology\r\n * http://esotericsoftware.com/files/runtime-diagram.png\r\n * http://en.esotericsoftware.com/spine-using-runtimes\r\n */\r\n\r\nexport * from './skeleton';\r\nexport * from './skeleton-data';\r\nexport * from './vertex-effect-delegate';\r\nexport * from './assembler';\r\nexport * from './lib/spine-version';\r\n\r\nexport { spine };\r\n\r\n/**\r\n* @internal Since v3.7.2, this is an engine private type.\r\n*/\r\n/**\r\n * @en\r\n * The attachment type of spine. It contains three type: REGION(0), BOUNDING_BOX(1), MESH(2) and SKINNED_MESH.\r\n * [REGION] An attachment that displays a textured quadrilateral.\r\n * [BOUNDING_BOX] An attachment with vertices that make up a polygon. Can be used for hit detection,\r\n * creating physics bodies, spawning particle effects, and more.\r\n * [MESH] An attachment that displays a textured mesh.\r\n * [SKINNED_MESH] No used any more.\r\n * @zh\r\n * Attachment 类型枚举。类型包括 REGION, BOUNDING_BOX, MESH, SKINNED_MESH。\r\n * [REGION] 一个用于显示 texture 四边形的附件。\r\n * [BOUNDING_BOX] 一个带有顶点的附件。顶点构成的多边形可用于碰撞检测，创建物理实体，生成粒子特效等等。\r\n * [MESH] 一个可以显示 texture 网格的附件。\r\n * [SKINNED_MESH] 已废弃。\r\n */\r\nexport enum ATTACHMENT_TYPE {\r\n    REGION = 0,\r\n    BOUNDING_BOX = 1,\r\n    MESH = 2,\r\n    SKINNED_MESH = 3\r\n}\r\nccenum(ATTACHMENT_TYPE);\r\n\r\n/**\r\n * @en The event type of spine skeleton animation.\r\n * @zh 骨骼动画事件类型。\r\n * @enum AnimationEventType\r\n */\r\nexport enum AnimationEventType {\r\n    /**\r\n     * @en The play spine skeleton animation start type.\r\n     * @zh 开始播放骨骼动画。\r\n     * @property {Number} START\r\n     */\r\n    START = 0,\r\n    /**\r\n     * @en Another entry has replaced this entry as the current entry. This entry may continue being applied for mixing.\r\n     * @zh 当前的 entry 被其他的 entry 替换。当使用 mixing 时，当前的 entry 会继续运行。\r\n     */\r\n    INTERRUPT = 1,\r\n    /**\r\n     * @en The play spine skeleton animation finish type.\r\n     * @zh 播放骨骼动画结束。\r\n     * @property {Number} END\r\n     */\r\n    END = 2,\r\n    /**\r\n     * @en The play spine skeleton animation complete type.\r\n     * @zh 播放骨骼动画完成。\r\n     * @property {Number} COMPLETE\r\n     */\r\n    COMPLETE = 3,\r\n    /**\r\n     * @en The entry will be disposed.\r\n     * @zh entry 将被销毁。\r\n     */\r\n    DISPOSE = 4,\r\n    /**\r\n     * @en The spine skeleton animation event type.\r\n     * @zh 骨骼动画事件。\r\n     * @property {Number} EVENT\r\n     */\r\n    EVENT = 5\r\n}\r\nccenum(AnimationEventType);\r\n\r\nlet loadSpinePromise: Promise<void> | undefined;\r\n\r\nexport function loadWasmModuleSpine (): Promise<void> {\r\n    if (BUILD && LOAD_SPINE_MANUALLY) {\r\n        if (loadSpinePromise) return loadSpinePromise;\r\n        loadSpinePromise = Promise.resolve()\r\n            .then(() => waitForSpineWasmInstantiation());\r\n        return loadSpinePromise;\r\n    } else {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2025 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\nimport { DataInput, SkeletonBinary } from \"./spine-binary\";\r\nimport { BUILD } from 'internal:constants';\r\nexport const SPINE_VERSION = '4.2';\r\n\r\nfunction isVersionCompatible(version: string | null): boolean {\r\n    if (!BUILD) {\r\n        if (!version || !version.startsWith('4.2.')) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * @internal Used only by editor. \r\n */\r\nexport function isBinaryCompatible (buffer: Uint8Array): boolean {\r\n    if (!BUILD) {\r\n        const input = new DataInput(buffer);\r\n        SkeletonBinary.readInt(input);// read hash\r\n        SkeletonBinary.readInt(input);// read hash\r\n        const version = SkeletonBinary.readString(input);\r\n\r\n        return isVersionCompatible(version);\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * @internal Used only by editor.\r\n */\r\nexport function isJsonCompatible (json: JSON): boolean {\r\n    if (!BUILD) {\r\n        return isVersionCompatible(json['skeleton']['spine']);\r\n    }\r\n    return false;\r\n}\r\n"],"names":["spine","_class","defineReverseKeyEnum","e","key","MixBlend","setup","first","replace","add","MixDirection","mixIn","mixOut","TimelineType","rotate","translate","scale","shear","attachment","color","deform","event","drawOrder","ikConstraint","transformConstraint","pathConstraintPosition","pathConstraintSpacing","pathConstraintMix","twoColor","EventType","start","interrupt","end","complete","dispose","BlendMode","Normal","Additive","Multiply","Screen","TransformMode","OnlyTranslation","NoRotationOrReflection","NoScale","NoScaleOrReflection","PositionMode","Fixed","Percent","SpacingMode","Length","RotateMode","Tangent","Chain","ChainScale","TextureFilter","Nearest","Linear","MipMap","MipMapNearestNearest","MipMapLinearNearest","MipMapNearestLinear","MipMapLinearLinear","TextureWrap","MirroredRepeat","ClampToEdge","Repeat","AttachmentType","Region","BoundingBox","Mesh","LinkedMesh","Path","Point","Clipping","PI","PI2","radiansToDegrees","radDeg","degreesToRadians","degRad","MathUtils","clamp","value","min","max","cosDeg","degrees","Math","cos","sinDeg","sin","signum","toInt","x","floor","ceil","cbrt","y","pow","abs","randomTriangular","randomTriangularWith","mode","u","random","d","sqrt","spine$1","resizeArray","array","newSize","length","slice","Array","overrideDefineArrayProp","prototype","getPropVector","name","_name","Object","defineProperty","get","vectors","call","this","count","size","i","overrideDefineArrayArrayProp","vectorI","countJ","arrayJ","j","overrideDefineArrayFunction","overrideClass","wasm","k","wasmUtil","SpineWasmUtil","spineWasmInit","v","overrideProperty_PathConstraintData","PathConstraintData","getBones","overrideProperty_VertexAttachment","VertexAttachment","getVertices","originComputeWorldVertices","computeWorldVertices","SPVectorFloat","slot","worldVertices","offset","stride","resize","set","overrideProperty_MeshAttachment","MeshAttachment","getRegionUVs","getUVs","getTriangles","getEdges","overrideProperty_PathAttachment","PathAttachment","getLengths","overrideProperty_RegionAttachment","RegionAttachment","getOffset","setUVs","_uvs","bone","overrideProperty_IkConstraint","IkConstraint","overrideProperty_PathConstraint","PathConstraint","overrideProperty_TransformConstraintData","TransformConstraintData","overrideProperty_TransformConstraint","TransformConstraint","overrideProperty_Bone","Bone","getChildren","overrideProperty_Slot","Slot","getDeform","overrideProperty_Skin","Skin","getAttachments","getConstraints","originGetAttachmentsForSlot","getAttachmentsForSlot","slotIndex","attachments","originFindNamesForSlot","findNamesForSlot","names","overrideProperty_SkinEntry","SkinEntry","getName","getAttachment","forEach","prop","js","overrideProperty_SkeletonData","SkeletonData","getSlots","getSkins","getAnimations","getEvents","getIkConstraints","getTransformConstraints","getPathConstraints","overrideProperty_RotateTimeline","RotateTimeline","getFrames","overrideProperty_Timeline","Timeline","overrideProperty_AttachmentTimeline","AttachmentTimeline","getAttachmentNames","overrideProperty_DeformTimeline","DeformTimeline","getFrameVertices","overrideProperty_EventTimeline","EventTimeline","overrideProperty_DrawOrderTimeline","DrawOrderTimeline","overrideProperty_AnimationState","AnimationState","getTracks","overrideProperty_Animation","Animation","getTimelines","overrideProperty_Skeleton","Skeleton","getDrawOrder","getUpdateCacheList","wasmInstance","registerList","push","IkConstraintData","game","onPostInfrastructureInitDelegate","ensureWasmModuleReady","then","sys","hasFeature","Feature","WASM","Promise","all","module","import","_ref","wasmFactory","wasmUrl","resolve","reject","errorMessage","err","instantiateWasm","importObject","receiveInstance","result","instance","Instance","cb","_ref2","asmFactory","asmJsMemUrl","fetchBuffer","arrayBuffer","wasmMemory","buffer","ArrayBuffer","PAGESIZE","memoryInitializerRequest","response","status","msg","error","_listener_ID","_track_ID","TrackEntryListeners","getListeners","entry","listener","id","setTrackEntryListener","_trackSet","emitListener","eventType","_listenerSet","warn","emitTrackEntryListener","curTrack","addListener","removeListener","Map","globalThis","FrameTime","getAttributeStride","vfmtPosUvColor4B","_byteStrideTwoColor","vfmtPosUvTwoColor4B","FrameBoneInfo","a","b","c","worldX","worldY","SpineModel","vCount","iCount","vData","iData","meshes","SpineDrawItem","blendMode","textureID","AnimationCache","data","_instance","_state","_skeletonData","_skeleton","_privateMode","_curIndex","_isCompleted","_maxFrameIdex","_frameIdx","_inited","_invalid","_enableCacheAttachedInfo","_skeletonInfo","_animationName","isCompleted","totalTime","frames","SkeletonInstance","isCache","initSkeleton","setUseTint","_proto","init","skeletonInfo","animationName","setSkin","skinName","setSkinByName","setAnimation","animations","animation","element","duration","updateToFrame","frameIdx","begin","needToUpdate","updateAnimation","model","updateRenderData","getFrame","index","invalidAnimationFrames","vc","ic","floatStride","Float32Array","BYTES_PER_ELEMENT","vUint8Buf","Uint8Array","iUint16Buf","Uint16Array","HEAPU8","vPtr","vLength","subarray","iPtr","iLength","modelData","getData","textures","getTextures","meshData","bones","boneInfosArray","boneInfo","boneInfos","preAnimationCache","curAnimationCache","invalidAllFrame","bind","unbind","_this","toFrameIdx","undefined","isInited","isInvalid","enableCacheAttachedInfo","clear","destroy","_createClass","SkeletonCache","_skeletonCache","_animationPool","_sharedCacheMap","_proto2","enablePrivateMode","invalidAnimationCache","uuid","skeleton","animationsCache","aniKey","destroySkeleton","assetUuid","_this2","refCount","operate","animationCache","destroySpineSkeleton","createSkeletonInfo","skeletonAsset","runtimeData","getRuntimeData","clipper","state","assetUUID","getSkeletonInfo","getAnimationCache","initAnimationCache","spData","poolKey","destroyCachedAnimations","animationPool","includes","_class5","sharedCache","ccclass","type","Texture2D","CCString","_dec","_class2","_Asset","_skeletonJson","_initializer","_initializer2","textureNames","_initializer3","_initializer4","_atlasText","_initializer5","_buffer","_skinsEnum","_animsEnum","reset","_inheritsLoose","createNode","callback","node","Node","addComponent","skeletonData","resetEnums","quiet","mergedUUID","querySpineSkeletonDataByUUID","textureUUIDs","tex","getId","createSpineSkeletonDataWithJson","skeletonJsonStr","registerSpineSkeletonDataWithUUID","rawData","_nativeAsset","byteSize","ptr","createStoreMemory","createSpineSkeletonDataWithBinary","freeStoreMemory","getSkinsEnum","sd","skins","enumDef","Enum","getAnimsEnum","keys","anims","hashContent","concat","map","texture","join","_uuid","murmurhash2_32_gc","destroySpineSkeletonDataWithUUID","isEmpty","JSON","stringify","parse","hash","bin","Asset","serializable","_applyDecoratedInitializer","_dec2","_dec3","legacyCC","internal","SpineSkeletonData","SkeletonSystem","_System","_skeletons","Set","getInstance","director","registerSystem","ID","SystemPriority","HIGH","has","remove","postUpdate","dt","prepareRenderData","_markForUpdateRenderData","System","SpineSkeletonSystem","SpineAnimationCacheMode","tempMat4","Mat4","AttachUtil","_isInitialized","_skeletonBones","_socketNodes","_keysToDelete","skeletonComp","_skeletonComp$socketN","socketNodes","_syncAttachedNode","updateSkeletonBones","_step","_iterator","_createForOfIteratorHelperLoose","done","_step$value2","boneIdx","boneNode","isValid","matrixHandle","_step2","_iterator2","tm","m00","m01","m04","m05","m12","m13","matrix","isSkeletonDataValid","ccenum","DefaultSkinsEnum","SpineDefaultAnimsEnum","AnimationCacheMode","SpineMaterialType","DefaultAnimsEnum","SpineSocket","path","target","Material","_class6","_UIRenderer","defaultSkin","defaultAnimation","_premultipliedAlpha","_initializer6","_timeScale","_initializer7","_preCacheMode","_initializer8","_cacheMode","_initializer9","_sockets","_initializer10","_useTint","_initializer11","_debugMesh","_initializer12","_debugBones","_initializer13","_debugSlots","_initializer14","_enableBatch","_initializer15","_runtimeData","_textures","_skinName","_drawList","RecyclePool","material","indexOffset","indexCount","_materialCache","paused","_enumSkins","_enumAnimations","attachUtil","_cachedSockets","_startEntry","_endEntry","_paused","_accTime","_playCount","_animCache","_animationQueue","_headAniInfo","_isAniComplete","_playTimes","_curFrame","_listener","_debugRenderer","_startSlotIndex","_endSlotIndex","_customMaterialInstance","_vLength","_vBuffer","_iLength","_iBuffer","_model","_tempColor","r","g","_eventListenerID","_slotTextures","_isRenderable","loop","_initializer16","_useVertexOpacity","trackIndex","dtRate","isAnimationCached","__preload","_updateSkeletonData","_updateDebugDraw","onRestore","updateMaterial","getState","onEnable","_flushAssembler","onDisable","onDestroy","_this$_slotTextures","destroyRenderData","_cleanMaterialCache","_destroySkeletonInfo","clearAnimation","clearTrack","setToSetupPose","clearAnimations","clearTracks","_refreshInspector","setSkeletonData","toString","_updateUseTint","_indexBoneSockets","_updateSocketBindings","preSkeletonCache","SHARED_CACHE","PRIVATE_CACHE","debugBones","debugSlots","warnID","getAnimationState","setPremultipliedAlpha","setSlotsRange","startSlotIndex","endSlotIndex","slotName","attachmentName","getAttachmentByName","setAttachment","getTextureAtlas","regionAttachment","region","logID","findAnimation","trackEntry","cache","addAnimation","delay","_this$_state","addAnimationWith","getCurrent","_this$_headAniInfo","frameCache","shift","aniInfo","_updateCache","frameTime","_emitCacheCompleteEvent","assembler","Assembler","getAssembler","_assembler","createData","_renderData","_updateColor","_render","batcher","indicesCount","renderData","rd","chunk","accessor","vertexAccessor","meshBuffer","getMeshBuffer","origin","dc","commitMiddleware","subIndices","indices","appendIndices","bufferId","setDirty","requestDrawData","textureUUID","draw","_this$skeletonData","_this$_slotTextures2","assetManager","assets","find","t","_updateBuiltinMaterial","builtinResMgr","mat","_customMaterial","setSharedMaterial","getMaterialTemplate","customMaterial","val","getMaterialForBlendAndTint","src","dst","inst","MaterialInstance","parent","subModelIdx","owner","overridePipelineStates","blendState","blendColor","Color","WHITE","targets","blendEq","BlendOp","ADD","blendAlphaEq","blendSrc","blendDst","blendSrcAlpha","blendDstAlpha","useTwoColor","TWO_COLORED","useLocal","recompileShaders","USE_LOCAL","_updateAnimEnum","animEnum","assign","update","setPropertyEnumType","_updateSkinEnum","skinEnum","createRenderEntity","renderEntity","RenderEntity","RenderEntityType","DYNAMIC","setUseLocal","markForUpdateRenderData","enable","syncAttachedNode","REALTIME","setAnimationCacheMode","cacheMode","setBonesToSetupPose","setSlotsToSetupPose","findBone","boneName","findSlot","setMix","fromAnimation","toAnimation","updateWorldTransform","_verifySockets","sockets","l","uniqueSocketNode","socket","getBoneName","bd","querySockets","from","sort","_updateBatch","debugMesh","debugDrawNode","layer","hideFlags","CCObjectFlags","DontSave","HideInHierarchy","debugDraw","lineWidth","strokeColor","on","NodeEventType","LAYER_CHANGED","_applyLayer","errorID","message","setDebugMode","off","_updateUITransform","uiTrans","_getUITransformComp","setContentSize","anchorX","width","height","anchorY","self","uiProps","_uiProps","tempColor","_color","parentOpacity","opacity","localOpacity","colorDirty","setColor","setVertexEffectDelegate","_ensureListener","setListener","setStartListener","setInterruptListener","setEndListener","setDisposeListener","setCompleteListener","setEventListener","setTrackStartListener","setTrackInterruptListener","setTrackEndListener","setTrackDisposeListener","setTrackCompleteListener","loopCount","trackTime","animationEnd","setTrackEventListener","getDebugShapes","setSlotTexture","tex2d","createNew","createNewAttachment","resizeSlotRegion","skeletonCache","skinsEnum","hasOwnProperty","_defaultSkinIndex","skinIndex","String","animsEnum","animIndex","animName","matInfo","UIRenderer","UNSET","_applyDecoratedDescriptor","_dec4","getOwnPropertyDescriptor","_dec5","_dec6","_dec7","_dec8","override","_dec9","_class4","SpineSkeleton","_nodeR","_nodeG","_nodeB","_nodeA","VertexEffectDelegate","_vertexEffect","_interpolation","_effectType","initJitter","jitterX","jitterY","JitterEffect","initSwirlWithPow","radius","power","Pow","SwirlEffect","initSwirlWithPowOut","PowOut","getJitterVertexEffect","getSwirlVertexEffect","getVertexEffect","getEffectType","ADJUST_SIZE_RATE","_slotColor","_boneColor","_originColor","_meshColor","_accessor","_tintAccessor","_byteStrideOneColor","tempVecPos","Vec3","_getSlotMaterial","comp","BlendFactor","ONE","SRC_ALPHA","DST_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_SRC_COLOR","COLORED_TEXTURED","simple","Simple","ensureAccessor","useTint","device","root","batcher2D","attributes","StaticVBAccessor","registerBufferAccessor","Number","parseInt","RenderData","_comp$skeletonData","active","updateComponentRenderData","drawList","premultipliedAlpha","cacheTraverse","realTimeTraverse","vertexCount","_comp$_vBuffer","_comp$_iBuffer","vb","byteOffset","vbuf","ibuf","chunkOffset","vertexOffset","enableBatch","worldMat","worldMatrix","z","transformMat4","graphics","locSkeleton","debugShapes","shapeCount","shape","vertexFloatOffset","vOffset","vertexFloatCount","moveTo","ii","nn","lineTo","close","stroke","iOffset","v1","v2","v3","fillColor","n","circle","fill","nodeColor","EPSILON","toUint32","R","G","B","fA","multiplier","mesh","SpineAssembler","ATTACHMENT_TYPE","AnimationEventType","simpleSpineAssembler","loadWasmModuleSpine"],"mappings":"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"}