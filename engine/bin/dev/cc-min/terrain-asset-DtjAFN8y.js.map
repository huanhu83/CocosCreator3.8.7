{"version":3,"file":"terrain-asset-DtjAFN8y.js","sources":["../../../cocos/terrain/terrain-asset.ts"],"sourcesContent":["/*\r\n Copyright (c) 2020-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, serializable } from 'cc.decorator';\r\nimport { Asset, Texture2D } from '../asset/assets';\r\n\r\nexport const TERRAIN_MAX_LEVELS = 4;\r\nexport const TERRAIN_MAX_BLEND_LAYERS = 4;\r\nexport const TERRAIN_MAX_LAYER_COUNT = 256;\r\nexport const TERRAIN_BLOCK_TILE_COMPLEXITY = 32;\r\nexport const TERRAIN_BLOCK_VERTEX_COMPLEXITY = 33;\r\nexport const TERRAIN_BLOCK_VERTEX_SIZE = 8; // position + normal + uv\r\nexport const TERRAIN_HEIGHT_BASE = 32768;\r\nexport const TERRAIN_HEIGHT_FACTORY = 1.0 / 128.0;\r\nexport const TERRAIN_HEIGHT_FACTORY_V7 = 1.0 / 512.0;\r\nexport const TERRAIN_HEIGHT_FMIN = (-TERRAIN_HEIGHT_BASE) * TERRAIN_HEIGHT_FACTORY;\r\nexport const TERRAIN_HEIGHT_FMAX = (65535 - TERRAIN_HEIGHT_BASE) * TERRAIN_HEIGHT_FACTORY;\r\nexport const TERRAIN_NORTH_INDEX = 0;\r\nexport const TERRAIN_SOUTH_INDEX = 1;\r\nexport const TERRAIN_WEST_INDEX = 2;\r\nexport const TERRAIN_EAST_INDEX = 3;\r\n\r\nexport const TERRAIN_DATA_VERSION = 0x01010001;\r\nexport const TERRAIN_DATA_VERSION2 = 0x01010002;\r\nexport const TERRAIN_DATA_VERSION3 = 0x01010003;\r\nexport const TERRAIN_DATA_VERSION4 = 0x01010004;\r\nexport const TERRAIN_DATA_VERSION5 = 0x01010005;\r\nexport const TERRAIN_DATA_VERSION6 = 0x01010006;\r\nexport const TERRAIN_DATA_VERSION7 = 0x01010007;\r\nexport const TERRAIN_DATA_VERSION8 = 0x01010008;\r\nexport const TERRAIN_DATA_VERSION_DEFAULT = 0x01010111;\r\n\r\nclass TerrainBuffer {\r\n    public length = 0;\r\n    public buffer: Uint8Array = new Uint8Array(2048);\r\n    private _buffView: DataView = new DataView(this.buffer.buffer);\r\n    private _seekPos = 0;\r\n\r\n    public reserve (size: number): void {\r\n        if (this.buffer.byteLength > size) {\r\n            return;\r\n        }\r\n\r\n        let capacity = this.buffer.byteLength;\r\n        while (capacity < size) {\r\n            capacity += capacity;\r\n        }\r\n\r\n        const temp = new Uint8Array(capacity);\r\n        for (let i = 0; i < this.length; ++i) {\r\n            temp[i] = this.buffer[i];\r\n        }\r\n\r\n        this.buffer = temp;\r\n        this._buffView = new DataView(this.buffer.buffer);\r\n    }\r\n\r\n    public assign (buff: Uint8Array): void {\r\n        this.buffer = buff;\r\n        this.length = buff.length;\r\n        this._seekPos = buff.byteOffset;\r\n        this._buffView = new DataView(buff.buffer);\r\n    }\r\n\r\n    public writeInt8 (value: number): void {\r\n        this.reserve(this.length + 1);\r\n\r\n        this._buffView.setInt8(this.length, value);\r\n        this.length += 1;\r\n    }\r\n\r\n    public writeInt16 (value: number): void {\r\n        this.reserve(this.length + 2);\r\n\r\n        this._buffView.setInt16(this.length, value, true);\r\n        this.length += 2;\r\n    }\r\n\r\n    public writeInt32 (value: number): void {\r\n        this.reserve(this.length + 4);\r\n\r\n        this._buffView.setInt32(this.length, value, true);\r\n        this.length += 4;\r\n    }\r\n\r\n    public writeIntArray (value: number[]): void {\r\n        this.reserve(this.length + 4 * value.length);\r\n\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._buffView.setInt32(this.length + i * 4, value[i], true);\r\n        }\r\n        this.length += 4 * value.length;\r\n    }\r\n\r\n    public writeFloat (value: number): void {\r\n        this.reserve(this.length + 4);\r\n\r\n        this._buffView.setFloat32(this.length, value, true);\r\n        this.length += 4;\r\n    }\r\n\r\n    public writeFloatArray (value: number[]): void {\r\n        this.reserve(this.length + 4 * value.length);\r\n\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._buffView.setFloat32(this.length + i * 4, value[i], true);\r\n        }\r\n        this.length += 4 * value.length;\r\n    }\r\n\r\n    public writeDouble (value: number): void {\r\n        this.reserve(this.length + 8);\r\n\r\n        this._buffView.setFloat64(this.length, value, true);\r\n        this.length += 8;\r\n    }\r\n\r\n    public writeDoubleArray (value: number[]): void {\r\n        this.reserve(this.length + 8 * value.length);\r\n\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._buffView.setFloat64(this.length + i * 8, value[i], true);\r\n        }\r\n        this.length += 8 * value.length;\r\n    }\r\n\r\n    public writeString (value: string): void {\r\n        this.reserve(this.length + value.length + 4);\r\n\r\n        this._buffView.setInt32(this.length, value.length, true);\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._buffView.setInt8(this.length + 4 + i, value.charCodeAt(i));\r\n        }\r\n        this.length += value.length + 4;\r\n    }\r\n\r\n    public readInt8 (): number {\r\n        const value = this._buffView.getInt8(this._seekPos);\r\n        this._seekPos += 1;\r\n        return value;\r\n    }\r\n\r\n    public readInt16 (): number {\r\n        const value = this._buffView.getInt16(this._seekPos, true);\r\n        this._seekPos += 2;\r\n        return value;\r\n    }\r\n\r\n    public readInt (): number {\r\n        const value = this._buffView.getInt32(this._seekPos, true);\r\n        this._seekPos += 4;\r\n        return value;\r\n    }\r\n\r\n    public readIntArray (value: number[]): number[] {\r\n        for (let i = 0; i < value.length; ++i) {\r\n            value[i] = this._buffView.getInt32(this._seekPos + i * 4, true);\r\n        }\r\n        this._seekPos += 4 * value.length;\r\n        return value;\r\n    }\r\n\r\n    public readFloat (): number {\r\n        const value = this._buffView.getFloat32(this._seekPos, true);\r\n        this._seekPos += 4;\r\n        return value;\r\n    }\r\n\r\n    public readFloatArray (value: number[]): number[] {\r\n        for (let i = 0; i < value.length; ++i) {\r\n            value[i] = this._buffView.getFloat32(this._seekPos + i * 4, true);\r\n        }\r\n        this._seekPos += 4 * value.length;\r\n        return value;\r\n    }\r\n\r\n    public readDouble (): number {\r\n        const value = this._buffView.getFloat64(this._seekPos, true);\r\n        this._seekPos += 8;\r\n        return value;\r\n    }\r\n\r\n    public readDoubleArray (value: number[]): number[] {\r\n        for (let i = 0; i < value.length; ++i) {\r\n            value[i] = this._buffView.getFloat64(this._seekPos + i * 4, true);\r\n        }\r\n        this._seekPos += 8 * value.length;\r\n        return value;\r\n    }\r\n\r\n    public readString (): string {\r\n        const length = this.readInt();\r\n\r\n        let value = '';\r\n        for (let i = 0; i < length; ++i) {\r\n            value += String.fromCharCode(this.readInt8());\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n\r\n/**\r\n * @en terrain layer info\r\n * @zh 地形纹理信息\r\n */\r\n@ccclass('cc.TerrainLayerInfo')\r\nexport class TerrainLayerInfo {\r\n    @serializable\r\n    public slot = 0;\r\n    @serializable\r\n    public tileSize = 1;\r\n    @serializable\r\n    public detailMap: Texture2D|null = null;\r\n    @serializable\r\n    public normalMap: Texture2D|null = null;\r\n    @serializable\r\n    public roughness = 1;\r\n    @serializable\r\n    public metallic = 0;\r\n}\r\n\r\n/**\r\n * @en terrain layer binary info\r\n * @zh 地形纹理二进制信息\r\n */\r\n@ccclass('cc.TerrainLayerBinaryInfo')\r\nexport class TerrainLayerBinaryInfo {\r\n    public slot = 0;\r\n    public tileSize = 1;\r\n    public roughness = 1;\r\n    public metallic = 0;\r\n    public detailMapId = '';\r\n    public normalMapId = '';\r\n}\r\n\r\n/**\r\n * @en terrain asset\r\n * @zh 地形资源\r\n */\r\n@ccclass('cc.TerrainAsset')\r\nexport class TerrainAsset extends Asset {\r\n    protected _version = 0;\r\n    protected _data: Uint8Array|null = null;\r\n    protected _tileSize = 1;\r\n    protected _blockCount: number[] = [1, 1];\r\n    protected _weightMapSize = 128;\r\n    protected _lightMapSize = 128;\r\n    protected _heights: Uint16Array = new Uint16Array();\r\n    protected _normals: Float32Array = new Float32Array();\r\n    protected _weights: Uint8Array = new Uint8Array();\r\n    protected _layerBuffer: number[] = [-1, -1, -1, -1];\r\n    protected _layerBinaryInfos: TerrainLayerBinaryInfo[] = [];\r\n    @serializable\r\n    protected _layerInfos: TerrainLayerInfo[] = [];\r\n\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get _nativeAsset (): ArrayBuffer {\r\n        return this._data!.buffer;\r\n    }\r\n    set _nativeAsset (value: ArrayBuffer) {\r\n        if (this._data && this._data.byteLength === value.byteLength) {\r\n            this._data.set(new Uint8Array(value));\r\n        } else {\r\n            this._data = new Uint8Array(value);\r\n        }\r\n\r\n        this._loadNativeData(this._data);\r\n    }\r\n\r\n    /**\r\n     * @en version\r\n     * @zh 版本\r\n     */\r\n    get version (): number {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * @en tile size\r\n     * @zh 栅格大小\r\n     */\r\n    set tileSize (value: number) {\r\n        this._tileSize = value;\r\n    }\r\n\r\n    get tileSize (): number {\r\n        return this._tileSize;\r\n    }\r\n\r\n    /**\r\n     * @en block count\r\n     * @zh 块数量\r\n     */\r\n    set blockCount (value: number[]) {\r\n        this._blockCount = value;\r\n    }\r\n\r\n    get blockCount (): number[] {\r\n        return this._blockCount;\r\n    }\r\n\r\n    /**\r\n     * @en light map size\r\n     * @zh 光照图大小\r\n     */\r\n    set lightMapSize (value: number) {\r\n        this._lightMapSize = value;\r\n    }\r\n\r\n    get lightMapSize (): number {\r\n        return this._lightMapSize;\r\n    }\r\n\r\n    /**\r\n     * @en weight map size\r\n     * @zh 权重图大小\r\n     */\r\n    set weightMapSize (value: number) {\r\n        this._weightMapSize = value;\r\n    }\r\n\r\n    get weightMapSize (): number {\r\n        return this._weightMapSize;\r\n    }\r\n\r\n    /**\r\n     * @en height buffer\r\n     * @zh 高度缓存\r\n     */\r\n    set heights (value: Uint16Array) {\r\n        this._heights = value;\r\n    }\r\n\r\n    get heights (): Uint16Array {\r\n        return this._heights;\r\n    }\r\n\r\n    /**\r\n     * @en normal buffer\r\n     * @zh 法线缓存\r\n     */\r\n    set normals (value: Float32Array) {\r\n        this._normals = value;\r\n    }\r\n\r\n    get normals (): Float32Array {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * @en weight buffer\r\n     * @zh 权重缓存\r\n     */\r\n    set weights (value: Uint8Array) {\r\n        this._weights = value;\r\n    }\r\n\r\n    get weights (): Uint8Array {\r\n        return this._weights;\r\n    }\r\n\r\n    /**\r\n     * @en layer buffer\r\n     * @zh 纹理索引缓存\r\n     */\r\n    set layerBuffer (value: number[]) {\r\n        this._layerBuffer = value;\r\n    }\r\n\r\n    get layerBuffer (): number[] {\r\n        return this._layerBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en layer info\r\n     * @zh 纹理信息\r\n     */\r\n    set layerInfos (value: TerrainLayerInfo[]) {\r\n        this._layerInfos = value;\r\n    }\r\n\r\n    get layerInfos (): TerrainLayerInfo[] {\r\n        return this._layerInfos;\r\n    }\r\n\r\n    get layerBinaryInfos (): TerrainLayerBinaryInfo[] {\r\n        return this._layerBinaryInfos;\r\n    }\r\n\r\n    /**\r\n     * @en get layer\r\n     * @zh 获得纹理索引\r\n     * @param xBlock block index x\r\n     * @param yBlock block index y\r\n     * @param layerId layer id\r\n     */\r\n    public getLayer (xBlock: number, yBlock: number, layerId: number): number {\r\n        const blockId = yBlock * this.blockCount[0] + xBlock;\r\n        const index = blockId * 4 + layerId;\r\n\r\n        if (xBlock < this.blockCount[0] && yBlock < this.blockCount[1] && index < this._layerBuffer.length) {\r\n            return this._layerBuffer[index];\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public getHeight (i: number, j: number): number {\r\n        const vertexCountX = this._blockCount[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + 1;\r\n        return (this._heights[j * vertexCountX + i] - TERRAIN_HEIGHT_BASE) * TERRAIN_HEIGHT_FACTORY;\r\n    }\r\n\r\n    public getVertexCountI (): number {\r\n        if (this._blockCount.length < 1) return 0;\r\n        return this._blockCount[0] * TERRAIN_BLOCK_TILE_COMPLEXITY + 1;\r\n    }\r\n\r\n    public getVertexCountJ (): number {\r\n        if (this._blockCount.length < 2) return 0;\r\n        return this._blockCount[1] * TERRAIN_BLOCK_TILE_COMPLEXITY + 1;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _setNativeData (_nativeData: Uint8Array): void {\r\n        this._data = _nativeData;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _loadNativeData (_nativeData: Uint8Array): boolean {\r\n        if (!_nativeData || _nativeData.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        const stream = new TerrainBuffer();\r\n        stream.assign(_nativeData);\r\n\r\n        // version\r\n        this._version = stream.readInt();\r\n        if (this._version === TERRAIN_DATA_VERSION_DEFAULT) {\r\n            return true;\r\n        }\r\n        if (this._version !== TERRAIN_DATA_VERSION\r\n            && this._version !== TERRAIN_DATA_VERSION2\r\n            && this._version !== TERRAIN_DATA_VERSION3\r\n            && this._version !== TERRAIN_DATA_VERSION4\r\n            && this._version !== TERRAIN_DATA_VERSION5\r\n            && this._version !== TERRAIN_DATA_VERSION6\r\n            && this._version !== TERRAIN_DATA_VERSION7\r\n            && this._version !== TERRAIN_DATA_VERSION8) {\r\n            return false;\r\n        }\r\n\r\n        // geometry info\r\n        if (this._version >= TERRAIN_DATA_VERSION7) {\r\n            this.tileSize = stream.readDouble();\r\n        } else {\r\n            this.tileSize = stream.readFloat();\r\n        }\r\n        this.tileSize = Math.floor(this.tileSize * 100) / 100.0;\r\n\r\n        stream.readIntArray(this._blockCount);\r\n        this.weightMapSize = stream.readInt16();\r\n        this.lightMapSize = stream.readInt16();\r\n\r\n        // heights\r\n        const heightBufferSize = stream.readInt();\r\n        this.heights = new Uint16Array(heightBufferSize);\r\n        for (let i = 0; i < this.heights.length; ++i) {\r\n            this.heights[i] = stream.readInt16();\r\n        }\r\n\r\n        if (this._version < TERRAIN_DATA_VERSION8) {\r\n            for (let i = 0; i < this.heights.length; ++i) {\r\n                const h = (this._heights[i] - TERRAIN_HEIGHT_BASE) * TERRAIN_HEIGHT_FACTORY_V7;\r\n                const ch = TERRAIN_HEIGHT_BASE + h / TERRAIN_HEIGHT_FACTORY;\r\n                this.heights[i] = ch;\r\n            }\r\n        }\r\n\r\n        // normals\r\n        if (this._version >= TERRAIN_DATA_VERSION6) {\r\n            const normalBufferSize = stream.readInt();\r\n            this.normals = new Float32Array(normalBufferSize);\r\n            for (let i = 0; i < this.normals.length; ++i) {\r\n                this.normals[i] = stream.readFloat();\r\n            }\r\n        }\r\n\r\n        // weights\r\n        const WeightBufferSize = stream.readInt();\r\n        this.weights = new Uint8Array(WeightBufferSize);\r\n        for (let i = 0; i < this.weights.length; ++i) {\r\n            this.weights[i] = stream.readInt8();\r\n        }\r\n\r\n        // layer buffer\r\n        if (this._version >= TERRAIN_DATA_VERSION2) {\r\n            const layerBufferSize = stream.readInt();\r\n            this.layerBuffer = new Array<number>(layerBufferSize);\r\n            for (let i = 0; i < this.layerBuffer.length; ++i) {\r\n                this.layerBuffer[i] = stream.readInt16();\r\n            }\r\n        }\r\n\r\n        // layer infos\r\n        if (this._version >= TERRAIN_DATA_VERSION3) {\r\n            const layerInfoSize = stream.readInt();\r\n            this._layerBinaryInfos = new Array<TerrainLayerBinaryInfo>(layerInfoSize);\r\n            for (let i = 0; i < this._layerBinaryInfos.length; ++i) {\r\n                this._layerBinaryInfos[i] = new TerrainLayerBinaryInfo();\r\n                this._layerBinaryInfos[i].slot = stream.readInt();\r\n                if (this._version >= TERRAIN_DATA_VERSION7) {\r\n                    this._layerBinaryInfos[i].tileSize = stream.readDouble();\r\n                } else {\r\n                    this._layerBinaryInfos[i].tileSize = stream.readFloat();\r\n                }\r\n\r\n                this._layerBinaryInfos[i].detailMapId = stream.readString();\r\n                if (this._version >= TERRAIN_DATA_VERSION4) {\r\n                    this._layerBinaryInfos[i].normalMapId = stream.readString();\r\n                    if (this._version >= TERRAIN_DATA_VERSION7) {\r\n                        this._layerBinaryInfos[i].roughness = stream.readDouble();\r\n                        this._layerBinaryInfos[i].metallic = stream.readDouble();\r\n                    } else {\r\n                        this._layerBinaryInfos[i].roughness = stream.readFloat();\r\n                        this._layerBinaryInfos[i].metallic = stream.readFloat();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _exportNativeData (): Uint8Array {\r\n        const stream = new TerrainBuffer();\r\n\r\n        // version\r\n        stream.writeInt32(TERRAIN_DATA_VERSION8);\r\n\r\n        // geometry info\r\n        stream.writeDouble(this.tileSize);\r\n        stream.writeIntArray(this._blockCount);\r\n        stream.writeInt16(this.weightMapSize);\r\n        stream.writeInt16(this.lightMapSize);\r\n\r\n        // heights\r\n        stream.writeInt32(this.heights.length);\r\n        for (let i = 0; i < this.heights.length; ++i) {\r\n            stream.writeInt16(this.heights[i]);\r\n        }\r\n\r\n        // normals\r\n        stream.writeInt32(this.normals.length);\r\n        for (let i = 0; i < this.normals.length; ++i) {\r\n            stream.writeFloat(this.normals[i]);\r\n        }\r\n\r\n        // weights\r\n        stream.writeInt32(this.weights.length);\r\n        for (let i = 0; i < this.weights.length; ++i) {\r\n            stream.writeInt8(this.weights[i]);\r\n        }\r\n\r\n        // layer buffer\r\n        stream.writeInt32(this.layerBuffer.length);\r\n        for (let i = 0; i < this.layerBuffer.length; ++i) {\r\n            stream.writeInt16(this.layerBuffer[i]);\r\n        }\r\n\r\n        // layer infos\r\n        const layerBinaryInfos: TerrainLayerBinaryInfo[] = [];\r\n        layerBinaryInfos.length = this.layerInfos.length;\r\n        for (let i = 0; i < layerBinaryInfos.length; ++i) {\r\n            const layer = this.layerInfos[i];\r\n\r\n            const binaryLayer = new TerrainLayerBinaryInfo();\r\n            binaryLayer.slot = i;\r\n            binaryLayer.tileSize = layer.tileSize;\r\n            binaryLayer.detailMapId = layer.detailMap ? layer.detailMap._uuid : '';\r\n            binaryLayer.normalMapId = layer.normalMap ? layer.normalMap._uuid : '';\r\n            binaryLayer.metallic = layer.metallic;\r\n            binaryLayer.roughness = layer.roughness;\r\n            layerBinaryInfos[i] = binaryLayer;\r\n        }\r\n\r\n        stream.writeInt32(layerBinaryInfos.length);\r\n        for (let i = 0; i < layerBinaryInfos.length; ++i) {\r\n            stream.writeInt32(layerBinaryInfos[i].slot);\r\n            stream.writeDouble(layerBinaryInfos[i].tileSize);\r\n            stream.writeString(layerBinaryInfos[i].detailMapId);\r\n            stream.writeString(layerBinaryInfos[i].normalMapId);\r\n            stream.writeDouble(layerBinaryInfos[i].roughness);\r\n            stream.writeDouble(layerBinaryInfos[i].metallic);\r\n        }\r\n\r\n        return stream.buffer;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _exportDefaultNativeData (): Uint8Array {\r\n        const stream = new TerrainBuffer();\r\n        stream.writeInt32(TERRAIN_DATA_VERSION_DEFAULT);\r\n        return stream.buffer;\r\n    }\r\n}\r\n"],"names":["exports","TERRAIN_BLOCK_TILE_COMPLEXITY","TERRAIN_HEIGHT_BASE","TERRAIN_HEIGHT_FACTORY","TERRAIN_HEIGHT_FACTORY_V7","TERRAIN_DATA_VERSION","TERRAIN_DATA_VERSION2","TERRAIN_DATA_VERSION3","TERRAIN_DATA_VERSION4","TERRAIN_DATA_VERSION5","TERRAIN_DATA_VERSION6","TERRAIN_DATA_VERSION7","TERRAIN_DATA_VERSION8","TERRAIN_DATA_VERSION_DEFAULT","TerrainBuffer","this","length","buffer","Uint8Array","_buffView","DataView","_seekPos","_proto","prototype","reserve","size","byteLength","capacity","temp","i","assign","buff","byteOffset","writeInt8","value","setInt8","writeInt16","setInt16","writeInt32","setInt32","writeIntArray","writeFloat","setFloat32","writeFloatArray","writeDouble","setFloat64","writeDoubleArray","writeString","charCodeAt","readInt8","getInt8","readInt16","getInt16","readInt","getInt32","readIntArray","readFloat","getFloat32","readFloatArray","readDouble","getFloat64","readDoubleArray","readString","String","fromCharCode","TerrainLayerBinaryInfo","ccclass","_dec","_class3","slot","_initializer","tileSize","_initializer2","detailMap","_initializer3","normalMap","_initializer4","roughness","_initializer5","metallic","_initializer6","_applyDecoratedInitializer","serializable","_class2","_dec2","_class5","detailMapId","normalMapId","_dec3","_class8","_Asset","TerrainAsset","_this","call","_version","_data","_tileSize","_blockCount","_weightMapSize","_lightMapSize","_heights","Uint16Array","_normals","Float32Array","_weights","_layerBuffer","_layerBinaryInfos","_layerInfos","_initializer7","_inheritsLoose","_proto2","getLayer","xBlock","yBlock","layerId","index","blockCount","getHeight","j","vertexCountX","getVertexCountI","getVertexCountJ","_setNativeData","_nativeData","_loadNativeData","stream","Math","floor","weightMapSize","lightMapSize","heightBufferSize","heights","h","ch","normalBufferSize","normals","WeightBufferSize","weights","layerBufferSize","layerBuffer","Array","layerInfoSize","_exportNativeData","layerBinaryInfos","layerInfos","layer","binaryLayer","_uuid","_exportDefaultNativeData","_createClass","key","get","set","Asset","_class7"],"mappings":"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"}