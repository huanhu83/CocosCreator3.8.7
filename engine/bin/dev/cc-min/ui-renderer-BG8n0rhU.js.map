{"version":3,"file":"ui-renderer-BG8n0rhU.js","sources":["../../../cocos/2d/renderer/vertex-format.ts","../../../cocos/2d/renderer/mesh-buffer.ts","../../../cocos/2d/renderer/render-draw-info.ts","../../../cocos/2d/renderer/stencil-manager.ts","../../../cocos/2d/renderer/buffer-accessor.ts","../../../cocos/2d/renderer/static-vb-accessor.ts","../../../cocos/2d/renderer/render-entity.ts","../../../cocos/2d/framework/ui-renderer.ts","../../../cocos/2d/renderer/render-data.ts","../../../cocos/2d/framework/ui-transform.ts"],"sourcesContent":["/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { AttributeName, Format, FormatInfos, Attribute } from '../../gfx';\r\nimport { cclegacy } from '../../core';\r\n\r\nconst ATTR_POSITION = AttributeName.ATTR_POSITION;\r\nconst ATTR_COLOR = AttributeName.ATTR_COLOR;\r\nconst ATTR_TEX_COORD = AttributeName.ATTR_TEX_COORD;\r\nconst ATTR_COLOR2 = AttributeName.ATTR_COLOR2;\r\n\r\n/**\r\n * @en Vertex format with vector 3 position attribute\r\n * @zh 包含三维位置属性的顶点格式\r\n */\r\nexport const vfmt = [\r\n    new Attribute(ATTR_POSITION, Format.RGB32F),\r\n];\r\n\r\n/**\r\n * @en Vertex format with the following layout.\r\n * 1. Vector 3 position attribute (Float32)\r\n * 2. Vector 4 color attribute (Float32)\r\n * @zh 包含以下数据的顶点格式\r\n * 1. 三维位置属性（Float32）\r\n * 2. RGBA 颜色属性（Float32）\r\n */\r\nexport const vfmtPosColor = [\r\n    new Attribute(ATTR_POSITION, Format.RGB32F),\r\n    new Attribute(ATTR_COLOR, Format.RGBA32F),\r\n];\r\n\r\n/**\r\n * @en Vertex format with the following layout\r\n * 1. Vector 3 position attribute (Float32)\r\n * 2. Vector 2 uv attribute (Float32)\r\n * 3. Vector 4 color attribute (Float32)\r\n * @zh 包含以下数据的顶点格式\r\n * 1. 三维位置属性（Float32）\r\n * 2. 二维贴图 UV 属性（Float32）\r\n * 3. RGBA 颜色属性（Float32）\r\n */\r\nexport const vfmtPosUvColor = [\r\n    new Attribute(ATTR_POSITION, Format.RGB32F),\r\n    new Attribute(ATTR_TEX_COORD, Format.RG32F),\r\n    new Attribute(ATTR_COLOR, Format.RGBA32F),\r\n];\r\n\r\n/**\r\n * @en Vertex format with the following layout\r\n * 1. Vector 3 position attribute (Float32)\r\n * 2. Vector 2 uv attribute (Float32)\r\n * 3. Byte 4 color attribute (Byte)\r\n * @zh 包含以下数据的顶点格式\r\n * 1. 三维位置属性（Float32）\r\n * 2. 二维贴图 UV 属性（Float32）\r\n * 3. RGBA 颜色属性（Byte）\r\n */\r\nexport const vfmtPosUvColor4B = [\r\n    new Attribute(ATTR_POSITION, Format.RGB32F),\r\n    new Attribute(ATTR_TEX_COORD, Format.RG32F),\r\n    new Attribute(ATTR_COLOR, Format.RGBA8, true),\r\n];\r\n\r\n/**\r\n * @en Vertex format with the following layout\r\n * 1. Vector 3 position attribute (Float32)\r\n * 2. Vector 2 uv attribute (Float32)\r\n * 3. First vector 4 color attribute (Float32)\r\n * 4. Second vector 4 color attribute (Float32)\r\n * @zh 包含以下数据的顶点格式\r\n * 1. 三维位置属性（Float32）\r\n * 2. 二维贴图 UV 属性（Float32）\r\n * 3. 第一套 RGBA 颜色属性（Float32）\r\n * 4. 第二套 RGBA 颜色属性（Float32）\r\n */\r\nexport const vfmtPosUvTwoColor = [\r\n    new Attribute(ATTR_POSITION, Format.RGB32F),\r\n    new Attribute(ATTR_TEX_COORD, Format.RG32F),\r\n    new Attribute(ATTR_COLOR, Format.RGBA32F),\r\n    new Attribute(ATTR_COLOR2, Format.RGBA32F),\r\n];\r\n\r\n/**\r\n * @en Vertex format with the following layout\r\n * 1. Vector 3 position attribute (Float32)\r\n * 2. Vector 2 uv attribute (Float32)\r\n * 3. First byte 4 color attribute (Byte)\r\n * 4. Second byte 4 color attribute (Byte)\r\n * @zh 包含以下数据的顶点格式\r\n * 1. 三维位置属性（Float32）\r\n * 2. 二维贴图 UV 属性（Float32）\r\n * 3. 第一套 RGBA 颜色属性（Byte）\r\n * 4. 第二套 RGBA 颜色属性（Byte）\r\n */\r\nexport const vfmtPosUvTwoColor4B = [\r\n    new Attribute(ATTR_POSITION, Format.RGB32F),\r\n    new Attribute(ATTR_TEX_COORD, Format.RG32F),\r\n    new Attribute(ATTR_COLOR, Format.RGBA8, true),\r\n    new Attribute(ATTR_COLOR2, Format.RGBA8, true),\r\n];\r\n\r\n/**\r\n * @en Get total components count for all attributes per vertex.\r\n * @zh 获取每个顶点上所有属性的分量数总和\r\n * @param attrs All attributes of the vertex format\r\n * @returns Total components count\r\n */\r\nexport function getComponentPerVertex (attrs: Attribute[]): number {\r\n    let count = 0;\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        const attr = attrs[i];\r\n        const info = FormatInfos[attr.format];\r\n        count += info.count;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\n/**\r\n * @en Get total stride for all attributes per vertex.\r\n * @zh 获取每个顶点上所有属性的总步进\r\n * @param attrs All attributes of the vertex format\r\n * @returns Total stride\r\n */\r\nexport function getAttributeStride (attrs: Attribute[]): number {\r\n    let count = 0;\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        const attr = attrs[i];\r\n        const info = FormatInfos[attr.format];\r\n        count += info.size;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\ncclegacy.internal.vfmtPosUvColor = vfmtPosUvColor;\r\ncclegacy.internal.vfmtPosUvTwoColor = vfmtPosUvTwoColor;\r\ncclegacy.internal.vfmtPosUvColor4B = vfmtPosUvColor4B;\r\ncclegacy.internal.vfmtPosUvTwoColor4B = vfmtPosUvTwoColor4B;\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { Device, BufferUsageBit, MemoryUsageBit, Attribute, Buffer, BufferInfo, InputAssembler, InputAssemblerInfo } from '../../gfx';\r\nimport { getAttributeStride } from './vertex-format';\r\nimport { sys, getError, warnID, assertIsTrue } from '../../core';\r\nimport { NativeUIMeshBuffer } from './native-2d';\r\n\r\ninterface IIARef {\r\n    ia: InputAssembler;\r\n    vertexBuffers: Buffer[];\r\n    indexBuffer: Buffer;\r\n}\r\n\r\nenum MeshBufferSharedBufferView {\r\n    byteOffset,\r\n    vertexOffset,\r\n    indexOffset,\r\n    dirty,\r\n    count,\r\n}\r\n\r\nconst IA_POOL_USED_SCALE = 1 / 2;\r\n\r\n/**\r\n * @en Mesh buffer used for 2d rendering, used internally and not of concern to the user.\r\n * @zh 2d 渲染使用的网格缓冲数据，内部使用，用户不须关心。\r\n * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport class MeshBuffer {\r\n    /**\r\n     * @en The vertex attributes of the buffer.\r\n     * @zh buffer 的顶点属性。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get attributes (): Attribute[] { return this._attributes; }\r\n    /**\r\n     * @en Number of bytes in vertex format.\r\n     * @zh 顶点格式的字节数。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get vertexFormatBytes (): number { return this._vertexFormatBytes; }\r\n\r\n    protected _byteOffset = 0;\r\n    /**\r\n     * @en byte offset.\r\n     * @zh 字节偏移量。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get byteOffset (): number {\r\n        return this._byteOffset;\r\n    }\r\n    set byteOffset (val: number) {\r\n        this._byteOffset = val;\r\n        if (JSB) {\r\n            this._sharedBuffer[MeshBufferSharedBufferView.byteOffset] = val;\r\n        }\r\n    }\r\n\r\n    protected _vertexOffset = 0;\r\n    /**\r\n     * @en Vertexes offset.\r\n     * @zh 顶点数偏移。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get vertexOffset (): number {\r\n        return this._vertexOffset;\r\n    }\r\n    set vertexOffset (val: number) {\r\n        this._vertexOffset = val;\r\n        if (JSB) {\r\n            this._sharedBuffer[MeshBufferSharedBufferView.vertexOffset] = val;\r\n        }\r\n    }\r\n\r\n    protected _indexOffset = 0;\r\n    /**\r\n     * @en Indices offset.\r\n     * @zh 索引偏移。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get indexOffset (): number {\r\n        return this._indexOffset;\r\n    }\r\n    set indexOffset (val: number) {\r\n        this._indexOffset = val;\r\n        if (JSB) {\r\n            this._sharedBuffer[MeshBufferSharedBufferView.indexOffset] = val;\r\n        }\r\n    }\r\n\r\n    protected _dirty = false;\r\n    /**\r\n     * @en Dirty flag.\r\n     * @zh 脏标记。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get dirty (): boolean {\r\n        return this._dirty;\r\n    }\r\n    set dirty (val: boolean) {\r\n        this._dirty = val;\r\n        if (JSB) {\r\n            this._sharedBuffer[MeshBufferSharedBufferView.dirty] = val ? 1 : 0;\r\n        }\r\n    }\r\n\r\n    protected _floatsPerVertex = 0;\r\n    /**\r\n     * @en Float numbers per vertex.\r\n     * @zh 每顶点的浮点数长度。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get floatsPerVertex (): number {\r\n        return this._floatsPerVertex;\r\n    }\r\n    set floatsPerVertex (val: number) {\r\n        this._floatsPerVertex = val;\r\n    }\r\n\r\n    protected _vData: Float32Array = null!;\r\n    /**\r\n     * @en Vertexes data.\r\n     * @zh 顶点数据。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get vData (): Float32Array {\r\n        return this._vData;\r\n    }\r\n    set vData (val: Float32Array) {\r\n        this._vData = val;\r\n        //还得看是否需要共享.buffer\r\n        if (JSB) {\r\n            this._nativeObj.vData = val;\r\n        }\r\n    }\r\n\r\n    protected _iData: Uint16Array = null!;\r\n    /**\r\n     * @en Indices data.\r\n     * @zh 索引数据。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get iData (): Uint16Array {\r\n        return this._iData;\r\n    }\r\n    set iData (val: Uint16Array) {\r\n        this._iData = val;\r\n        if (JSB) {\r\n            this._nativeObj.iData = val;\r\n        }\r\n    }\r\n\r\n    private _vertexFormatBytes = 0;\r\n    private _initVDataCount = 0;\r\n    private _initIDataCount = 0;\r\n    private _attributes: Attribute[] = null!;\r\n\r\n    // InputAssembler pools for each mesh buffer, array offset correspondent\r\n    private _iaPool: IIARef[] = [];\r\n    private _iaInfo: InputAssemblerInfo = null!;\r\n    private _nextFreeIAHandle = 0;\r\n\r\n    //nativeObj\r\n    protected declare _nativeObj: NativeUIMeshBuffer;\r\n    /**\r\n     * @en Native object.\r\n     * @zh 原生对象。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get nativeObj (): NativeUIMeshBuffer {\r\n        return this._nativeObj;\r\n    }\r\n\r\n    //sharedBuffer\r\n    protected declare _sharedBuffer: Uint32Array;\r\n    /**\r\n     * @en Native shared buffer.\r\n     * @zh 原生共享缓冲。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get sharedBuffer (): Uint32Array {\r\n        return this._sharedBuffer;\r\n    }\r\n\r\n    /**\r\n     * @en Initial native shared buffer.\r\n     * @zh 初始化原生共享缓冲。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public initSharedBuffer (): void {\r\n        if (JSB) {\r\n            this._sharedBuffer = new Uint32Array(MeshBufferSharedBufferView.count);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Synchronized native shared buffer.\r\n     * @zh 同步原生共享缓冲。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public syncSharedBufferToNative (): void {\r\n        if (JSB) {\r\n            this._nativeObj.syncSharedBufferToNative(this._sharedBuffer);\r\n        }\r\n    }\r\n\r\n    constructor () {\r\n        if (JSB) {\r\n            this._nativeObj = new NativeUIMeshBuffer();\r\n            this.initSharedBuffer();\r\n            this.syncSharedBufferToNative();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Initialize mesh buffer.\r\n     * @zh 初始化对象。\r\n     * @param device @en The GFX device. @zh GFX设备。\r\n     * @param attrs @en The vertex attributes of the buffer. @zh 缓冲区的顶点属性。\r\n     * @param vFloatCount @en The vertexes float count. @zh 每顶点所需的 float 数量。\r\n     * @param iCount @en The indices count. @zh 索引数量。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public initialize (device: Device, attrs: Attribute[], vFloatCount: number, iCount: number): void {\r\n        this._initVDataCount = vFloatCount;\r\n        this._initIDataCount = iCount;\r\n        this._attributes = attrs;\r\n\r\n        this.floatsPerVertex = getAttributeStride(attrs) >> 2;\r\n\r\n        assertIsTrue(this._initVDataCount / this._floatsPerVertex < 65536, getError(9005));\r\n\r\n        if (!this.vData || !this.iData) {\r\n            this.vData = new Float32Array(this._initVDataCount);\r\n            this.iData = new Uint16Array(this._initIDataCount);\r\n        }\r\n        // Initialize the first ia\r\n        this._iaPool.push(this.createNewIA(device));\r\n        if (JSB) {\r\n            this._nativeObj.initialize(attrs);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Reset state.\r\n     * @zh 重置状态。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public reset (): void {\r\n        this._nextFreeIAHandle = 0;\r\n        this.dirty = false;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.reset();\r\n        this._attributes = null!;\r\n        this._iaInfo = null!;\r\n        this.vData = null!;\r\n        this.iData = null!;\r\n\r\n        // Destroy InputAssemblers\r\n        for (let i = 0; i < this._iaPool.length; ++i) {\r\n            const iaRef = this._iaPool[i];\r\n            const vertexBuffer0 = iaRef.vertexBuffers[0];\r\n            if (vertexBuffer0) {\r\n                vertexBuffer0.destroy();\r\n            }\r\n            const indexBuffer = iaRef.indexBuffer;\r\n            if (indexBuffer) {\r\n                indexBuffer.destroy();\r\n            }\r\n            iaRef.ia.destroy();\r\n        }\r\n        this._iaPool.length = 0;\r\n    }\r\n\r\n    /**\r\n     * @en Set dirty flag.\r\n     * @zh 设置脏标签。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public setDirty (): void {\r\n        this.dirty = true;\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.4.0, please use BufferAccessor's request\r\n     * @see [[BufferAccessor.request]]\r\n     */\r\n    public request (vertexCount: number, indexCount: number): boolean {\r\n        warnID(9002);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @en require Free input assembler.\r\n     * @zh 请求可用的输入汇集器。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public requireFreeIA (device: Device): InputAssembler {\r\n        if (this._iaPool.length <= this._nextFreeIAHandle) {\r\n            this._iaPool.push(this.createNewIA(device));\r\n        }\r\n        const ia = this._iaPool[this._nextFreeIAHandle++].ia;\r\n        return ia;\r\n    }\r\n\r\n    /**\r\n     * @en recycle input assembler.\r\n     * @zh 回收输入汇集器。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public recycleIA (ia: InputAssembler): void {\r\n        const pool = this._iaPool;\r\n        for (let i = 0; i < this._nextFreeIAHandle; ++i) {\r\n            if (ia === pool[i].ia) {\r\n                // Swap to recycle the ia\r\n                const iaRef = pool[i];\r\n                pool[i] = pool[--this._nextFreeIAHandle];\r\n                pool[this._nextFreeIAHandle] = iaRef;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en check capacity.\r\n     * @zh 检查可分配余量。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public checkCapacity (vertexCount: number, indexCount: number): boolean {\r\n        const maxVertex = (this.vertexOffset + vertexCount) * this._floatsPerVertex;\r\n        const maxIndex = this.indexOffset + indexCount;\r\n        if (maxVertex > this._initVDataCount || maxIndex > this._initIDataCount) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en Upload and update buffers data.\r\n     * @zh 上传更新缓冲内容。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public uploadBuffers (): void {\r\n        if (this.byteOffset === 0 || !this._dirty) {\r\n            return;\r\n        }\r\n\r\n        // On iOS14, different IAs can not share same GPU buffer, so must submit the same date to different buffers\r\n        const iOS14 = sys.__isWebIOS14OrIPadOS14Env;\r\n        const submitCount = iOS14 ? this._nextFreeIAHandle : 1;\r\n        if (iOS14 && (submitCount / this._iaPool.length < IA_POOL_USED_SCALE)) {\r\n            const count = submitCount / IA_POOL_USED_SCALE;\r\n            const length = this._iaPool.length;\r\n            // Destroy InputAssemblers\r\n            for (let i = length - 1; i >= count; i--) {\r\n                const iaRef = this._iaPool[i];\r\n                if (iaRef.vertexBuffers[0]) {\r\n                    iaRef.vertexBuffers[0].destroy();\r\n                }\r\n                if (iaRef.indexBuffer) {\r\n                    iaRef.indexBuffer.destroy();\r\n                }\r\n                iaRef.ia.destroy();\r\n            }\r\n            this._iaPool.length = count;\r\n        }\r\n        const byteCount = this.byteOffset;\r\n        const indexCount = this.indexOffset;\r\n        for (let i = 0; i < submitCount; ++i) {\r\n            const iaRef = this._iaPool[i];\r\n\r\n            const verticesData = new Float32Array(this.vData.buffer, 0, byteCount >> 2);\r\n            const indicesData = new Uint16Array(this.iData.buffer, 0, indexCount);\r\n\r\n            const vertexBuffer = iaRef.vertexBuffers[0];\r\n            if (byteCount > vertexBuffer.size) {\r\n                vertexBuffer.resize(byteCount);\r\n            }\r\n            vertexBuffer.update(verticesData);\r\n\r\n            if (indexCount * 2 > iaRef.indexBuffer.size) {\r\n                iaRef.indexBuffer.resize(indexCount * 2);\r\n            }\r\n            iaRef.indexBuffer.update(indicesData);\r\n        }\r\n        this.dirty = false;\r\n    }\r\n\r\n    private createNewIA (device: Device): IIARef {\r\n        let ia: InputAssembler;\r\n        let vertexBuffers: Buffer[];\r\n        let indexBuffer: Buffer;\r\n        // HACK: After sharing buffer between drawcalls, the performance degradation a lots on iOS 14 or iPad OS 14 device\r\n        // TODO: Maybe it can be removed after Apple fixes it?\r\n        if (sys.__isWebIOS14OrIPadOS14Env || !this._iaPool[0]) {\r\n            const vbStride = this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;\r\n            const ibStride = Uint16Array.BYTES_PER_ELEMENT;\r\n            const vertexBuffer = device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n                vbStride,\r\n                vbStride,\r\n            ));\r\n            indexBuffer = device.createBuffer(new BufferInfo(\r\n                BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n                MemoryUsageBit.HOST | MemoryUsageBit.DEVICE,\r\n                ibStride,\r\n                ibStride,\r\n            ));\r\n\r\n            vertexBuffers = [vertexBuffer];\r\n            // Reuse purpose for new IAs\r\n            this._iaInfo = new InputAssemblerInfo(this._attributes, vertexBuffers, indexBuffer);\r\n            ia = device.createInputAssembler(this._iaInfo);\r\n        } else {\r\n            ia = device.createInputAssembler(this._iaInfo);\r\n            vertexBuffers = this._iaInfo.vertexBuffers;\r\n            indexBuffer = this._iaInfo.indexBuffer!;\r\n        }\r\n        return {\r\n            ia,\r\n            vertexBuffers,\r\n            indexBuffer,\r\n        };\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { IRenderData } from './render-data';\r\nimport { NativeRenderDrawInfo } from './native-2d';\r\nimport { Node } from '../../scene-graph';\r\nimport { Sampler, Texture } from '../../gfx';\r\nimport { Model } from '../../render-scene/scene';\r\nimport { Material } from '../../asset/assets';\r\n\r\nconst bitIndexForIsMeshBuffer = 0;\r\nconst bitIndexForIsVertexPositionInWorld = 1;\r\n\r\nexport enum AttrUInt8ArrayView {\r\n    DrawInfoType,\r\n    VertDirty,\r\n    BooleanValues, // 0 index bit: for IsMeshBuffer, 1 index bit: for isVertexPositionInWorld, remain 6 bits are reserved.\r\n    Stride,\r\n    Count\r\n}\r\n\r\nexport enum AttrUInt16ArrayView {\r\n    BufferID,\r\n    AccessorID,\r\n    Count\r\n}\r\n\r\nexport enum AttrUInt32ArrayView {\r\n    VertexOffset,\r\n    IndexOffset,\r\n    VBCount,\r\n    IBCount,\r\n    DataHash,\r\n    Count\r\n}\r\n\r\nexport enum RenderDrawInfoType {\r\n    COMP,\r\n    MODEL,\r\n    MIDDLEWARE,\r\n    SUB_NODE,\r\n}\r\n\r\nfunction setBitInTypedArray (arr: TypedArray, index: number, bitPosition: number): void {\r\n    arr[index] |= (1 << bitPosition);\r\n}\r\n\r\nfunction clearBitInTypedArray (arr: TypedArray, index: number, bitPosition: number): void {\r\n    arr[index] &= ~(1 << bitPosition);\r\n}\r\n\r\n/** @mangle */\r\nexport class RenderDrawInfo {\r\n    protected _accId = -1;\r\n    protected _bufferId = -1;\r\n    protected _vertexOffset = 0;\r\n    protected _indexOffset = 0;\r\n    protected _vb: Float32Array | null = null;\r\n    protected _ib: Uint16Array | null = null;\r\n    protected _vData: Float32Array | null = null;\r\n    protected _iData: Uint16Array | null = null;\r\n    protected _vertDirty = false;\r\n    protected _vbCount = 0;\r\n    protected _ibCount = 0;\r\n    protected _dataHash = 0;\r\n    protected _isMeshBuffer = false;\r\n    protected _material: Material | null = null;\r\n    protected _texture: Texture | null = null;\r\n    protected _sampler: Sampler | null = null;\r\n    protected _stride = 0;\r\n    protected _useLocal = false;\r\n\r\n    protected _model: Model | null = null;\r\n    protected _drawInfoType: RenderDrawInfoType = RenderDrawInfoType.COMP;\r\n    protected _subNode: Node | null = null;\r\n\r\n    protected declare _nativeObj: NativeRenderDrawInfo;\r\n    protected declare _uint8SharedBuffer: Uint8Array;\r\n    protected declare _uint16SharedBuffer: Uint16Array;\r\n    protected declare _uint32SharedBuffer: Uint32Array;\r\n\r\n    // SharedBuffer of pos/uv/color\r\n    protected _render2dBuffer: Float32Array | null = null;\r\n\r\n    constructor (nativeDrawInfo?: NativeRenderDrawInfo) {\r\n        if (JSB) {\r\n            this.init(nativeDrawInfo);\r\n            const attrSharedBuffer = this._nativeObj.getAttrSharedBufferForJS();\r\n            let offset = 0;\r\n            this._uint8SharedBuffer = new Uint8Array(attrSharedBuffer, offset, AttrUInt8ArrayView.Count);\r\n            offset += AttrUInt8ArrayView.Count * Uint8Array.BYTES_PER_ELEMENT;\r\n            this._uint16SharedBuffer = new Uint16Array(attrSharedBuffer, offset, AttrUInt16ArrayView.Count);\r\n            offset += AttrUInt16ArrayView.Count * Uint16Array.BYTES_PER_ELEMENT;\r\n            this._uint32SharedBuffer = new Uint32Array(attrSharedBuffer, offset, AttrUInt32ArrayView.Count);\r\n        }\r\n    }\r\n\r\n    get nativeObj (): NativeRenderDrawInfo {\r\n        return this._nativeObj;\r\n    }\r\n\r\n    get render2dBuffer (): Float32Array | null {\r\n        return this._render2dBuffer;\r\n    }\r\n\r\n    private init (nativeDrawInfo?: NativeRenderDrawInfo): void {\r\n        if (JSB) {\r\n            if (nativeDrawInfo) {\r\n                this._nativeObj = nativeDrawInfo;\r\n            }\r\n            if (!this._nativeObj) {\r\n                this._nativeObj = new NativeRenderDrawInfo();\r\n            }\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        if (!JSB) return;\r\n        this._bufferId = 0;\r\n        this._vertexOffset = 0;\r\n        this._indexOffset = 0;\r\n        this._vertDirty = false;\r\n    }\r\n\r\n    public setAccId (accId: number): void {\r\n        if (JSB) {\r\n            if (this._accId !== accId) {\r\n                this._uint16SharedBuffer[AttrUInt16ArrayView.AccessorID] = accId;\r\n            }\r\n        }\r\n        this._accId = accId;\r\n    }\r\n\r\n    public setBufferId (bufferId: number): void {\r\n        if (JSB) {\r\n            if (this._bufferId !== bufferId) {\r\n                this._uint16SharedBuffer[AttrUInt16ArrayView.BufferID] = bufferId;\r\n                this._nativeObj.changeMeshBuffer();\r\n            }\r\n        }\r\n        this._bufferId = bufferId;\r\n    }\r\n\r\n    public setAccAndBuffer (accId: number, bufferId: number): void {\r\n        if (JSB) {\r\n            if (this._accId !== accId || this._bufferId !== bufferId) {\r\n                this._uint16SharedBuffer[AttrUInt16ArrayView.AccessorID] = accId;\r\n                this._uint16SharedBuffer[AttrUInt16ArrayView.BufferID] = bufferId;\r\n                this._nativeObj.changeMeshBuffer();\r\n            }\r\n        }\r\n        this._bufferId = bufferId;\r\n        this._accId = accId;\r\n    }\r\n\r\n    public setVertexOffset (vertexOffset: number): void {\r\n        this._vertexOffset = vertexOffset;\r\n        if (JSB) {\r\n            this._uint32SharedBuffer[AttrUInt32ArrayView.VertexOffset] = vertexOffset;\r\n        }\r\n    }\r\n\r\n    public setIndexOffset (indexOffset: number): void {\r\n        this._indexOffset = indexOffset;\r\n        if (JSB) {\r\n            this._uint32SharedBuffer[AttrUInt32ArrayView.IndexOffset] = indexOffset;\r\n        }\r\n    }\r\n\r\n    public setVB (vbBuffer: Float32Array): void {\r\n        if (JSB) {\r\n            this._nativeObj.vbBuffer = vbBuffer;\r\n        }\r\n    }\r\n\r\n    public setIB (ibBuffer: Uint16Array): void {\r\n        if (JSB) {\r\n            this._nativeObj.ibBuffer = ibBuffer;\r\n        }\r\n    }\r\n\r\n    public setVData (vDataBuffer: ArrayBufferLike): void {\r\n        if (JSB) {\r\n            this._nativeObj.vDataBuffer = vDataBuffer;\r\n        }\r\n    }\r\n\r\n    public setIData (iDataBuffer: ArrayBufferLike): void {\r\n        if (JSB) {\r\n            this._nativeObj.iDataBuffer = iDataBuffer;\r\n        }\r\n    }\r\n\r\n    public setVBCount (vbCount: number): void {\r\n        if (JSB) {\r\n            this._uint32SharedBuffer[AttrUInt32ArrayView.VBCount] = vbCount;\r\n        }\r\n        this._vbCount = vbCount;\r\n    }\r\n\r\n    public setIBCount (ibCount: number): void {\r\n        if (JSB) {\r\n            this._uint32SharedBuffer[AttrUInt32ArrayView.IBCount] = ibCount;\r\n        }\r\n    }\r\n\r\n    public setVertDirty (val: boolean): void {\r\n        if (JSB) {\r\n            this._uint8SharedBuffer[AttrUInt8ArrayView.VertDirty] = val ? 1 : 0;\r\n        }\r\n        this._vertDirty = val;\r\n    }\r\n\r\n    public setDataHash (dataHash: number): void {\r\n        if (JSB) {\r\n            this._uint32SharedBuffer[AttrUInt32ArrayView.DataHash] = dataHash;\r\n        }\r\n        this._dataHash = dataHash;\r\n    }\r\n\r\n    public setIsMeshBuffer (isMeshBuffer: boolean): void {\r\n        if (JSB) {\r\n            if (isMeshBuffer) {\r\n                setBitInTypedArray(this._uint8SharedBuffer, AttrUInt8ArrayView.BooleanValues, bitIndexForIsMeshBuffer);\r\n            } else {\r\n                clearBitInTypedArray(this._uint8SharedBuffer, AttrUInt8ArrayView.BooleanValues, bitIndexForIsMeshBuffer);\r\n            }\r\n        }\r\n        this._isMeshBuffer = isMeshBuffer;\r\n    }\r\n\r\n    public setVertexPositionInWorld (isVertexPositionInWorld: boolean): void {\r\n        if (JSB) {\r\n            if (isVertexPositionInWorld) {\r\n                setBitInTypedArray(this._uint8SharedBuffer, AttrUInt8ArrayView.BooleanValues, bitIndexForIsVertexPositionInWorld);\r\n            } else {\r\n                clearBitInTypedArray(this._uint8SharedBuffer, AttrUInt8ArrayView.BooleanValues, bitIndexForIsVertexPositionInWorld);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setMaterial (material: Material): void {\r\n        if (JSB) {\r\n            if (this._material !== material) {\r\n                this._nativeObj.material = material;\r\n            }\r\n        }\r\n        this._material = material;\r\n    }\r\n\r\n    public setTexture (texture: Texture | null): void {\r\n        if (JSB) {\r\n            if (this._texture !== texture) {\r\n                this._nativeObj.texture = texture;\r\n            }\r\n        }\r\n        this._texture = texture;\r\n    }\r\n\r\n    public setSampler (sampler: Sampler | null): void {\r\n        if (JSB) {\r\n            if (this._sampler !== sampler) {\r\n                this._nativeObj.sampler = sampler;\r\n            }\r\n        }\r\n        this._sampler = sampler;\r\n    }\r\n\r\n    public setModel (model: Model): void {\r\n        if (JSB) {\r\n            if (this._model !== model) {\r\n                this._nativeObj.model = model;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setDrawInfoType (drawInfoType: RenderDrawInfoType): void {\r\n        if (JSB) {\r\n            if (this._drawInfoType !== drawInfoType) {\r\n                this._uint8SharedBuffer[AttrUInt8ArrayView.DrawInfoType] = drawInfoType;\r\n            }\r\n        }\r\n        this._drawInfoType = drawInfoType;\r\n    }\r\n\r\n    public setSubNode (node: Node): void {\r\n        if (JSB) {\r\n            if (this._subNode !== node) {\r\n                this._nativeObj.subNode = node;\r\n            }\r\n        }\r\n        this._subNode = node;\r\n    }\r\n\r\n    public setStride (stride: number): void {\r\n        if (JSB) {\r\n            this._uint8SharedBuffer[AttrUInt8ArrayView.Stride] = stride;\r\n        }\r\n        this._stride = stride;\r\n    }\r\n\r\n    public initRender2dBuffer (): void {\r\n        if (JSB) {\r\n            this._render2dBuffer = new Float32Array(this._vbCount * this._stride);\r\n            this._nativeObj.setRender2dBufferToNative(this._render2dBuffer);\r\n        }\r\n    }\r\n\r\n    public fillRender2dBuffer (vertexDataArr: IRenderData[]): void {\r\n        if (JSB) {\r\n            if (!this._render2dBuffer) {\r\n                return;\r\n            }\r\n            const fillLength = Math.min(this._vbCount, vertexDataArr.length);\r\n            let bufferOffset = 0;\r\n            for (let i = 0; i < fillLength; i++) {\r\n                const temp = vertexDataArr[i];\r\n                this._render2dBuffer[bufferOffset] = temp.x;\r\n                this._render2dBuffer[bufferOffset + 1] = temp.y;\r\n                this._render2dBuffer[bufferOffset + 2] = temp.z;\r\n                bufferOffset += this._stride;\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ComparisonFunc, StencilOp, DepthStencilState } from '../../gfx';\r\nimport { Material } from '../../asset/assets';\r\nimport { UIRenderer } from '../framework/ui-renderer';\r\nimport { UIMeshRenderer } from '../components/ui-mesh-renderer';\r\n\r\n/**\r\n * @en Stencil stage types enum.\r\n * @zh 模板状态类型枚举。\r\n * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport enum Stage {\r\n    // Stencil disabled\r\n    DISABLED = 0,\r\n    // Clear stencil buffer\r\n    CLEAR = 1,\r\n    // Entering a new level, should handle new stencil\r\n    ENTER_LEVEL = 2,\r\n    // In content\r\n    ENABLED = 3,\r\n    // Exiting a level, should restore old stencil or disable\r\n    EXIT_LEVEL = 4,\r\n    // Clear stencil buffer & USE INVERTED\r\n    CLEAR_INVERTED = 5,\r\n    // Entering a new level & USE INVERTED\r\n    ENTER_LEVEL_INVERTED = 6,\r\n}\r\n\r\n/**\r\n * @en Native stencil buffer format enum.\r\n * @zh 原生模板缓冲格式枚举。\r\n * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport enum StencilSharedBufferView {\r\n    stencilTest,\r\n    func,\r\n    stencilMask,\r\n    writeMask,\r\n    failOp,\r\n    zFailOp,\r\n    passOp,\r\n    ref,\r\n    count,\r\n}\r\n\r\n/** @mangle */\r\ninterface StencilPattern {\r\n    stencilTest: boolean;\r\n    func: ComparisonFunc;\r\n    stencilMask: number;\r\n    writeMask: number;\r\n    failOp: StencilOp;\r\n    zFailOp: StencilOp;\r\n    passOp: StencilOp;\r\n    ref: number;\r\n}\r\n\r\n/**\r\n * @en Stencil state manager.\r\n * @zh 模板状态管理器。\r\n * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport class StencilManager {\r\n    public static sharedManager: StencilManager | null = null;\r\n    private _maskStack: number[] = [];\r\n    private _stencilPattern: StencilPattern = {\r\n        stencilTest: true,\r\n        func: ComparisonFunc.ALWAYS,\r\n        stencilMask: 0xffff,\r\n        writeMask: 0xffff,\r\n        failOp: StencilOp.KEEP,\r\n        zFailOp: StencilOp.KEEP,\r\n        passOp: StencilOp.KEEP,\r\n        ref: 1,\r\n    };\r\n\r\n    private _stage: Stage = Stage.DISABLED;\r\n    /**\r\n     * @en Stencil stage.\r\n     * @zh 模板缓冲阶段。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get stage (): Stage {\r\n        return this._stage;\r\n    }\r\n    set stage (val: Stage) {\r\n        this._stage = val;\r\n    }\r\n\r\n    /**\r\n     * @en Stencil pattern.\r\n     * @zh 模板缓冲样式。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get pattern (): {\r\n        stencilTest: boolean;\r\n        func: ComparisonFunc;\r\n        stencilMask: number;\r\n        writeMask: number;\r\n        failOp: StencilOp;\r\n        zFailOp: StencilOp;\r\n        passOp: StencilOp;\r\n        ref: number;\r\n        } {\r\n        return this._stencilPattern;\r\n    }\r\n\r\n    /**\r\n     * @en Add mask nesting.\r\n     * @zh 添加mask嵌套。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public pushMask (mask: number): void {\r\n        this._maskStack.push(mask);\r\n    }\r\n\r\n    /**\r\n     * @en clear stencil stage.\r\n     * @zh 清空模板状态。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public clear (comp: UIRenderer | UIMeshRenderer): Stage {\r\n        const isInverted = (comp.stencilStage !== Stage.ENTER_LEVEL);\r\n        return isInverted ? Stage.CLEAR_INVERTED : Stage.CLEAR;\r\n    }\r\n\r\n    /**\r\n     * @en Open stencil stage to enabled.\r\n     * @zh 开启模板状态。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public enableMask (): void {\r\n        this.stage = Stage.ENABLED;\r\n    }\r\n\r\n    /**\r\n     * @en exit stencil.\r\n     * @zh 退出模板状态。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public exitMask (): void {\r\n        if (this._maskStack.length === 0) {\r\n            // cc.errorID(9001);\r\n            return;\r\n        }\r\n        this._maskStack.pop();\r\n        if (this._maskStack.length === 0) {\r\n            this.stage = Stage.DISABLED;\r\n        } else {\r\n            this.stage = Stage.ENABLED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Get write mask count.\r\n     * @zh 获取写入模板缓冲的位数。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public getWriteMask (): number {\r\n        return 1 << (this._maskStack.length - 1);\r\n    }\r\n\r\n    /**\r\n     * @en Get write mask count when exit.\r\n     * @zh 获取退出时模板缓冲的位数。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public getExitWriteMask (): number {\r\n        return 1 << this._maskStack.length;\r\n    }\r\n\r\n    private getStencilRef (): number {\r\n        let result = 0;\r\n        for (let i = 0; i < this._maskStack.length; ++i) {\r\n            result += (0x00000001 << i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @en Get mask nesting count.\r\n     * @zh 获取mask嵌套数量。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public getMaskStackSize (): number {\r\n        return this._maskStack.length;\r\n    }\r\n\r\n    /**\r\n     * @en Reset stencil stage.\r\n     * @zh 重置模板状态。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public reset (): void {\r\n        // reset stack and stage\r\n        this._maskStack.length = 0;\r\n        this.stage = Stage.DISABLED;\r\n    }\r\n\r\n    public destroy (): void {\r\n        this.stencilStateMap.forEach((value, key) => {\r\n            value.destroy();\r\n        });\r\n        this.stencilStateMap.clear();\r\n    }\r\n\r\n    private stencilStateMap = new Map<number, DepthStencilState>();\r\n    private stencilStateMapWithDepth = new Map<number, DepthStencilState>();\r\n\r\n    /**\r\n     * @en Get stencil stage.\r\n     * @zh 获取模板状态。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public getStencilStage (stage: Stage, mat?: Material): DepthStencilState {\r\n        let key = 0;\r\n        let depthTest = false;\r\n        let depthWrite = false;\r\n        let depthFunc = ComparisonFunc.LESS;\r\n        let cacheMap = this.stencilStateMap;\r\n        if (mat && mat.passes[0]) {\r\n            const pass = mat.passes[0];\r\n            const dss = pass.depthStencilState;\r\n            let depthTestValue = 0;\r\n            let depthWriteValue = 0;\r\n            if (dss.depthTest) depthTestValue = 1;\r\n            if (dss.depthWrite) depthWriteValue = 1;\r\n            key = (depthTestValue) | (depthWriteValue << 1) | ((dss.depthFunc as number) << 2) | ((stage as number) << 6) | (this._maskStack.length << 9);\r\n            depthTest = dss.depthTest;\r\n            depthWrite = dss.depthWrite;\r\n            depthFunc = dss.depthFunc;\r\n            cacheMap = this.stencilStateMapWithDepth;\r\n        } else {\r\n            key = ((stage as number) << 16) | this._maskStack.length;\r\n        }\r\n        if (cacheMap && cacheMap.has(key)) {\r\n            return cacheMap.get(key) as DepthStencilState;\r\n        }\r\n        this.setStateFromStage(stage);\r\n        const stencilPattern = this._stencilPattern;\r\n        const depthStencilState = new DepthStencilState(\r\n            depthTest,\r\n            depthWrite,\r\n            depthFunc,\r\n            stencilPattern.stencilTest,\r\n            stencilPattern.func,\r\n            stencilPattern.stencilMask,\r\n            stencilPattern.writeMask,\r\n            stencilPattern.failOp,\r\n            stencilPattern.zFailOp,\r\n            stencilPattern.passOp,\r\n            stencilPattern.ref,\r\n            stencilPattern.stencilTest,\r\n            stencilPattern.func,\r\n            stencilPattern.stencilMask,\r\n            stencilPattern.writeMask,\r\n            stencilPattern.failOp,\r\n            stencilPattern.zFailOp,\r\n            stencilPattern.passOp,\r\n            stencilPattern.ref,\r\n        );\r\n        cacheMap.set(key, depthStencilState);\r\n        return depthStencilState;\r\n    }\r\n\r\n    /**\r\n     * @en Get stencil hash.\r\n     * @zh 获取模板状态的哈希值。\r\n     * @deprecated since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public getStencilHash (stage: Stage): number {\r\n        return (stage << 8) | this._maskStack.length;\r\n    }\r\n\r\n    // Notice: Only children node in Mask need use this.stage\r\n    private setStateFromStage (stage: Stage): void {\r\n        const pattern = this._stencilPattern;\r\n        if (stage === Stage.DISABLED) {\r\n            pattern.stencilTest = false;\r\n            pattern.func = ComparisonFunc.ALWAYS;\r\n            pattern.failOp = StencilOp.KEEP;\r\n            pattern.stencilMask = pattern.writeMask = 0xffff;\r\n            pattern.ref = 1;\r\n        } else {\r\n            pattern.stencilTest = true;\r\n            if (stage === Stage.ENABLED) {\r\n                pattern.func = ComparisonFunc.EQUAL;\r\n                pattern.failOp = StencilOp.KEEP;\r\n                pattern.stencilMask = pattern.ref = this.getStencilRef();\r\n                pattern.writeMask = this.getWriteMask();\r\n            } else if (stage === Stage.CLEAR) {\r\n                pattern.func = ComparisonFunc.NEVER;\r\n                pattern.failOp = StencilOp.ZERO;\r\n                pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();\r\n            } else if (stage === Stage.CLEAR_INVERTED) {\r\n                pattern.func = ComparisonFunc.NEVER;\r\n                pattern.failOp = StencilOp.REPLACE;\r\n                pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();\r\n            } else if (stage === Stage.ENTER_LEVEL) {\r\n                pattern.func = ComparisonFunc.NEVER;\r\n                pattern.failOp = StencilOp.REPLACE;\r\n                pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();\r\n            }  else if (stage === Stage.ENTER_LEVEL_INVERTED) {\r\n                pattern.func = ComparisonFunc.NEVER;\r\n                pattern.failOp = StencilOp.ZERO;\r\n                pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nStencilManager.sharedManager = new StencilManager();\r\n","/*\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { Attribute, Device } from '../../gfx';\r\nimport type { MeshBuffer } from './mesh-buffer';\r\nimport { getAttributeStride } from './vertex-format';\r\n\r\nexport class BufferAccessor {\r\n    public get attributes (): Readonly<Attribute[]> { return this._attributes; }\r\n    public get vertexFormatBytes (): number { return this._vertexFormatBytes; }\r\n    public get floatsPerVertex (): number { return this._floatsPerVertex; }\r\n\r\n    protected declare _device: Device;\r\n    protected declare _attributes: Attribute[];\r\n    protected declare _vertexFormatBytes: number;\r\n    protected declare _floatsPerVertex: number;\r\n    protected _buffers: MeshBuffer[] = [];\r\n\r\n    constructor (device: Device, attributes: Attribute[]) {\r\n        this._device = device;\r\n        this._attributes = attributes;\r\n\r\n        this._floatsPerVertex = getAttributeStride(attributes) >> 2;\r\n        this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;\r\n    }\r\n\r\n    public initialize (): void {}\r\n    public reset (): void {}\r\n    public request (vertexCount = 4, indexCount = 6): void {}\r\n    public appendBuffers (vertices: Float32Array, indices: Uint16Array): void {}\r\n    public uploadBuffers (): void {}\r\n    public destroy (): void {\r\n        this._attributes.length = 0;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2021-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { Device, Attribute } from '../../gfx';\r\nimport { MeshBuffer } from './mesh-buffer';\r\nimport { BufferAccessor } from './buffer-accessor';\r\nimport { assertID, errorID, Pool, macro, assertIsTrue } from '../../core';\r\nimport { director } from '../../game';\r\n\r\ninterface IFreeEntry {\r\n    offset: number;\r\n    length: number;\r\n}\r\n\r\nconst _entryPool = new Pool<IFreeEntry>(() => ({\r\n    offset: 0,\r\n    length: 0,\r\n}), 32);\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class StaticVBChunk {\r\n    // JSB\r\n    public get ib (): Readonly<Uint16Array> {\r\n        return this._ib;\r\n    }\r\n    private declare _ib: Uint16Array;\r\n\r\n    constructor (\r\n        public vertexAccessor: StaticVBAccessor,\r\n        public bufferId: number,\r\n        public meshBuffer: MeshBuffer,\r\n        public vertexOffset: number,\r\n        public vb: Float32Array,\r\n        public indexCount: number,\r\n    ) {\r\n        if (JSB) {\r\n            this._ib = new Uint16Array(indexCount); // JSB\r\n        }\r\n        assertIsTrue(meshBuffer === vertexAccessor.getMeshBuffer(bufferId));\r\n    }\r\n\r\n    setIndexBuffer (indices: ArrayLike<number>): void {\r\n        if (JSB) {\r\n            // 放到原生\r\n            assertIsTrue(indices.length === this.ib.length);\r\n            for (let i = 0; i < indices.length; ++i) {\r\n                const vid = indices[i];\r\n                this._ib[i] = this.vertexOffset + vid;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class StaticVBAccessor extends BufferAccessor {\r\n    public static IB_SCALE = 4; // ib size scale based on vertex count\r\n    public static ID_COUNT = 0;\r\n\r\n    private _freeLists: IFreeEntry[][] = [];\r\n    private _vCount = 0;\r\n    private _iCount = 0;\r\n    private _id = 0;\r\n    get id (): number { return this._id; }\r\n\r\n    public constructor (device: Device, attributes: Attribute[], vCount?: number, iCount?: number) {\r\n        super(device, attributes);\r\n        this._vCount = vCount || Math.floor(macro.BATCHER2D_MEM_INCREMENT * 1024 / this._vertexFormatBytes);\r\n        this._iCount = iCount || (this._vCount * StaticVBAccessor.IB_SCALE);\r\n        this._id = StaticVBAccessor.generateID();\r\n        // Initialize first mesh buffer\r\n        this._allocateBuffer();\r\n    }\r\n\r\n    public destroy (): void {\r\n        // Destroy mesh buffers and reuse free entries\r\n        for (let i = 0; i < this._buffers.length; ++i) {\r\n            this._buffers[i].destroy();\r\n            const freeList = this._freeLists[i];\r\n            for (let j = 0; j < freeList.length; ++j) {\r\n                _entryPool.free(freeList[j]);\r\n            }\r\n        }\r\n        this._buffers.length = 0;\r\n        this._freeLists.length = 0;\r\n        super.destroy();\r\n    }\r\n\r\n    public reset (): void {\r\n        for (let i = 0; i < this._buffers.length; ++i) {\r\n            const buffer = this._buffers[i];\r\n            // Reset index buffer\r\n            buffer.indexOffset = 0;\r\n            buffer.reset();\r\n        }\r\n    }\r\n\r\n    public getVertexBuffer (bid: number): Float32Array {\r\n        return this._buffers[bid].vData;\r\n    }\r\n\r\n    public getIndexBuffer (bid: number): Uint16Array {\r\n        return this._buffers[bid].iData;\r\n    }\r\n\r\n    public getMeshBuffer (bid: number): MeshBuffer {\r\n        return this._buffers[bid];\r\n    }\r\n\r\n    public uploadBuffers (): void {\r\n        for (let i = 0; i < this._buffers.length; ++i) {\r\n            const firstEntry = this._freeLists[i][0];\r\n            const buffer = this._buffers[i];\r\n            // Recognize active buffers\r\n            if (!firstEntry || firstEntry.length < buffer.vData.byteLength) {\r\n                buffer.uploadBuffers();\r\n            }\r\n            // Need destroy empty buffer\r\n        }\r\n    }\r\n\r\n    public appendIndices (bufferId: number, indices: Uint16Array): void {\r\n        const buf = this._buffers[bufferId];\r\n        const iCount = indices.length;\r\n        if (iCount) {\r\n            //make sure iData length enough\r\n            const needLength = buf.indexOffset + indices.length;\r\n            if (buf.iData.length < needLength) {\r\n                const expansionLength = Math.floor(1.25 * needLength);\r\n                const newIData = new Uint16Array(expansionLength);\r\n                newIData.set(buf.iData);\r\n                buf.iData = newIData;\r\n            }\r\n            // Append index buffer\r\n            buf.iData.set(indices, buf.indexOffset);\r\n            buf.indexOffset += indices.length;\r\n        }\r\n    }\r\n\r\n    public allocateChunk (vertexCount: number, indexCount: number): StaticVBChunk | null {\r\n        const byteLength = vertexCount * this.vertexFormatBytes;\r\n        if (vertexCount > this._vCount || indexCount > this._iCount) {\r\n            errorID(9004, byteLength);\r\n            return null;\r\n        }\r\n        let buf: MeshBuffer = null!;\r\n        let freeList: IFreeEntry[];\r\n        let bid = 0;\r\n        let eid = -1;\r\n        let entry: IFreeEntry | null = null;\r\n        // Loop buffers\r\n        for (let i = 0; i < this._buffers.length; ++i) {\r\n            buf = this._buffers[i];\r\n            freeList = this._freeLists[i];\r\n            // Loop entries\r\n            for (let e = 0; e < freeList.length; ++e) {\r\n                // Found suitable free entry\r\n                if (freeList[e].length >= byteLength) {\r\n                    entry = freeList[e];\r\n                    bid = i;\r\n                    eid = e;\r\n                    break;\r\n                }\r\n            }\r\n            if (entry) break;\r\n        }\r\n        // Allocation fail\r\n        if (!entry) {\r\n            bid = this._allocateBuffer();\r\n            buf = this._buffers[bid];\r\n            if (buf) {\r\n                eid = 0;\r\n                entry = this._freeLists[bid][eid];\r\n            }\r\n        }\r\n        // Allocation succeed\r\n        if (entry) {\r\n            const vertexOffset = entry.offset / this.vertexFormatBytes;\r\n            assertIsTrue(Number.isInteger(vertexOffset));\r\n            const vb = new Float32Array(buf.vData.buffer, entry.offset, byteLength >> 2).fill(0);\r\n            this._allocateChunkFromEntry(bid, eid, entry, byteLength);\r\n\r\n            return new StaticVBChunk(this, bid, buf, vertexOffset, vb, indexCount);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public recycleChunk (chunk: StaticVBChunk): void {\r\n        const freeList = this._freeLists[chunk.bufferId];\r\n        const buf = this._buffers[chunk.bufferId];\r\n        let offset = chunk.vertexOffset * this.vertexFormatBytes;\r\n        let bytes = chunk.vb.byteLength;\r\n        if (bytes === 0) return;\r\n        let recycled = false;\r\n        let i = 0;\r\n        let prevEntry: IFreeEntry | null = null;\r\n        let nextEntry: IFreeEntry | null = freeList[i];\r\n        // Loop entries\r\n        while (nextEntry && nextEntry.offset < offset) {\r\n            prevEntry = nextEntry;\r\n            nextEntry = freeList[++i];\r\n        }\r\n        // Found previous entry\r\n        if (prevEntry) {\r\n            const distance = offset - (prevEntry.offset + prevEntry.length);\r\n            // Ensure no overlap with previous chunk\r\n            assertIsTrue(distance >= 0);\r\n            // Can be merged\r\n            if (distance === 0) {\r\n                prevEntry.length += bytes;\r\n                offset = prevEntry.offset;\r\n                bytes = prevEntry.length;\r\n\r\n                // Can also merge with next entry\r\n                if (nextEntry && nextEntry.offset - (offset + bytes) === 0) {\r\n                    prevEntry.length += nextEntry.length;\r\n                    // Free next entry\r\n                    freeList.splice(i, 1);\r\n                    _entryPool.free(nextEntry);\r\n                    nextEntry = null;\r\n                }\r\n                recycled = true;\r\n            }\r\n        }\r\n        // Found next entry\r\n        if (!recycled && nextEntry) {\r\n            const distance = nextEntry.offset - (offset + bytes);\r\n            // Ensure no overlap with next chunk\r\n            assertIsTrue(distance >= 0);\r\n            // Can be merged\r\n            if (distance === 0) {\r\n                nextEntry.offset = offset;\r\n                nextEntry.length += bytes;\r\n            } else {\r\n                // Can not be merged\r\n                const newEntry = _entryPool.alloc();\r\n                newEntry.offset = offset;\r\n                newEntry.length = bytes;\r\n                freeList.splice(i, 0, newEntry);\r\n            }\r\n            recycled = true;\r\n        }\r\n        if (recycled) {\r\n            // If the last chunk is recycled, ensure correct mesh buffer byte offset\r\n            if (offset + bytes === buf.byteOffset) {\r\n                buf.byteOffset = offset;\r\n            }\r\n        } else {\r\n            // Haven't found any entry or any entry after the buffer chunk\r\n            const newEntry = _entryPool.alloc();\r\n            newEntry.offset = offset;\r\n            newEntry.length = bytes;\r\n            freeList.push(newEntry);\r\n        }\r\n    }\r\n\r\n    private _allocateChunkFromEntry (bid: number, eid: number, entry: IFreeEntry, bytes: number): void {\r\n        const remaining = entry.length - bytes;\r\n        const offset = entry.offset + bytes;\r\n        const buf = this._buffers[bid];\r\n        if (buf.byteOffset < offset) {\r\n            // Ensure buffer length covers all buffer chunks\r\n            buf.byteOffset = offset;\r\n        }\r\n        assertID(remaining >= 0, 9004, bid, entry.offset, entry.length);\r\n        if (remaining === 0) {\r\n            this._freeLists[bid].splice(eid, 1);\r\n            _entryPool.free(entry);\r\n        } else {\r\n            entry.offset += bytes;\r\n            entry.length = remaining;\r\n        }\r\n    }\r\n\r\n    private _allocateBuffer (): number {\r\n        // Validate length of buffer array\r\n        assertID(this._buffers.length === this._freeLists.length, 9003);\r\n\r\n        const buffer = new MeshBuffer();\r\n        const vFloatCount = this._vCount * this._floatsPerVertex;\r\n        buffer.initialize(this._device, this._attributes, vFloatCount, this._iCount);\r\n        this._buffers.push(buffer);\r\n        const entry = _entryPool.alloc();\r\n        entry.offset = 0;\r\n        entry.length = buffer.vData.byteLength;\r\n        const freeList = [entry];\r\n        this._freeLists.push(freeList);\r\n\r\n        //sync to native\r\n        // temporarily batcher transports buffers\r\n        // It is better to put accessor to native\r\n        const batcher = director.root!.batcher2D;\r\n        batcher.syncMeshBuffersToNative(this.id, this._buffers);\r\n\r\n        return this._buffers.length - 1;\r\n    }\r\n    static generateID (): number {\r\n        return StaticVBAccessor.ID_COUNT++;\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { JSB } from 'internal:constants';\r\nimport { NativeRenderEntity } from './native-2d';\r\nimport { RenderDrawInfo } from './render-draw-info';\r\nimport { Color } from '../../core';\r\nimport { Stage } from './stencil-manager';\r\nimport { Node } from '../../scene-graph';\r\n\r\nexport enum RenderEntityFillColorType {\r\n    COLOR = 0,\r\n    VERTEX\r\n}\r\n\r\nexport enum RenderEntityType {\r\n    STATIC,\r\n    DYNAMIC,\r\n    CROSSED,\r\n}\r\n\r\nenum RenderEntityUInt32SharedBufferView {\r\n    priority,\r\n    count,\r\n}\r\n\r\nenum RenderEntityUInt8SharedBufferView {\r\n    colorR,\r\n    colorG,\r\n    colorB,\r\n    colorA,\r\n    maskMode,\r\n    fillColorType,\r\n    count,\r\n}\r\n\r\nenum RenderEntityBoolSharedBufferViewBitIndex {\r\n    enabled,\r\n    useLocal,\r\n    count,\r\n}\r\n\r\nexport enum MaskMode {\r\n    NONE,\r\n    MASK,\r\n    MASK_INVERTED,\r\n    MASK_NODE,\r\n    MASK_NODE_INVERTED\r\n}\r\n\r\n/** @mangle */\r\nexport class RenderEntity {\r\n    private _renderEntityType: RenderEntityType = RenderEntityType.STATIC;\r\n\r\n    private _dynamicDrawInfoArr: RenderDrawInfo[] = [];\r\n\r\n    protected _node: Node | null = null;\r\n    protected _renderTransform: Node | null = null;\r\n    protected _stencilStage: Stage = Stage.DISABLED;\r\n\r\n    protected _colorDirty = true;\r\n    protected _enabled = false;\r\n    protected _useLocal = false;\r\n    protected _maskMode = MaskMode.NONE;\r\n\r\n    protected declare _uint32SharedBuffer: Uint32Array;\r\n    protected declare _uint8SharedBuffer: Uint8Array;\r\n    protected declare _boolSharedBuffer: Uint8Array;\r\n\r\n    private declare _nativeObj: NativeRenderEntity;\r\n    get nativeObj (): NativeRenderEntity {\r\n        return this._nativeObj;\r\n    }\r\n\r\n    get renderDrawInfoArr (): RenderDrawInfo[] {\r\n        return this._dynamicDrawInfoArr;\r\n    }\r\n\r\n    get renderEntityType (): RenderEntityType {\r\n        return this._renderEntityType;\r\n    }\r\n    // set renderEntityType (val:RenderEntityType) {\r\n    //     this._renderEntityType = val;\r\n    // }\r\n\r\n    setPriority (val: number): void {\r\n        if (JSB) {\r\n            this._uint32SharedBuffer[RenderEntityUInt32SharedBufferView.priority] = val;\r\n        }\r\n    }\r\n\r\n    protected _color: Color = Color.WHITE.clone();\r\n    get color (): Color {\r\n        return this._color;\r\n    }\r\n    set color (val: Color) {\r\n        this._color = val;\r\n        if (JSB) {\r\n            this._uint8SharedBuffer[RenderEntityUInt8SharedBufferView.colorR] = val.r;\r\n            this._uint8SharedBuffer[RenderEntityUInt8SharedBufferView.colorG] = val.g;\r\n            this._uint8SharedBuffer[RenderEntityUInt8SharedBufferView.colorB] = val.b;\r\n            this._uint8SharedBuffer[RenderEntityUInt8SharedBufferView.colorA] = val.a;\r\n        }\r\n    }\r\n\r\n    get colorDirty (): boolean {\r\n        if (JSB && this._node) {\r\n            this._colorDirty = (this._node as any)._colorDirty;\r\n        }\r\n        return this._colorDirty;\r\n    }\r\n\r\n    set colorDirty (val: boolean) {\r\n        this._colorDirty = val;\r\n        if (JSB && this._node) {\r\n            (this._node as any)._colorDirty = val;\r\n        }\r\n    }\r\n\r\n    get enabled (): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    set enabled (val: boolean) {\r\n        this._enabled = val;\r\n        if (JSB) {\r\n            if (val) {\r\n                this._boolSharedBuffer[0] |= (1 << RenderEntityBoolSharedBufferViewBitIndex.enabled);\r\n            } else {\r\n                this._boolSharedBuffer[0] &= ~(1 << RenderEntityBoolSharedBufferViewBitIndex.enabled);\r\n            }\r\n        }\r\n    }\r\n\r\n    setUseLocal (useLocal: boolean): void {\r\n        this._useLocal = useLocal;\r\n        if (JSB) {\r\n            if (useLocal) {\r\n                this._boolSharedBuffer[0] |= (1 << RenderEntityBoolSharedBufferViewBitIndex.useLocal);\r\n            } else {\r\n                this._boolSharedBuffer[0] &= ~(1 << RenderEntityBoolSharedBufferViewBitIndex.useLocal);\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor (entityType: RenderEntityType) {\r\n        if (JSB) {\r\n            if (!this._nativeObj) {\r\n                this._nativeObj = new NativeRenderEntity(entityType);\r\n            }\r\n            this._renderEntityType = entityType;\r\n            this.initSharedBuffer();\r\n        }\r\n    }\r\n\r\n    public addDynamicRenderDrawInfo (renderDrawInfo: RenderDrawInfo | null): void {\r\n        if (JSB) {\r\n            if (renderDrawInfo) {\r\n                this._dynamicDrawInfoArr.push(renderDrawInfo);\r\n                this._nativeObj.addDynamicRenderDrawInfo(renderDrawInfo.nativeObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    public removeDynamicRenderDrawInfo (): void {\r\n        if (JSB) {\r\n            this._dynamicDrawInfoArr.pop();\r\n            this._nativeObj.removeDynamicRenderDrawInfo();\r\n        }\r\n    }\r\n\r\n    public clearDynamicRenderDrawInfos (): void {\r\n        if (JSB) {\r\n            this._dynamicDrawInfoArr.length = 0;\r\n            this._nativeObj.clearDynamicRenderDrawInfos();\r\n        }\r\n    }\r\n\r\n    public clearStaticRenderDrawInfos (): void {\r\n        if (JSB) {\r\n            this._nativeObj.clearStaticRenderDrawInfos();\r\n        }\r\n    }\r\n\r\n    public clearRenderDrawInfos (): void {\r\n        if (JSB) {\r\n            if (this._renderEntityType === RenderEntityType.DYNAMIC) {\r\n                this.removeDynamicRenderDrawInfo();\r\n            } else if (this._renderEntityType === RenderEntityType.STATIC) {\r\n                this.clearStaticRenderDrawInfos();\r\n            }\r\n        }\r\n    }\r\n\r\n    public setDynamicRenderDrawInfo (renderDrawInfo: RenderDrawInfo | null, index: number): void {\r\n        if (JSB) {\r\n            if (renderDrawInfo) {\r\n                if (this._dynamicDrawInfoArr.length < index + 1) {\r\n                    this._dynamicDrawInfoArr.push(renderDrawInfo);\r\n                    this._nativeObj.addDynamicRenderDrawInfo(renderDrawInfo.nativeObj);\r\n                } else {\r\n                    this._dynamicDrawInfoArr[index] = renderDrawInfo;\r\n                    this._nativeObj.setDynamicRenderDrawInfo(renderDrawInfo.nativeObj, index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public setMaskMode (mode: MaskMode): void {\r\n        if (JSB) {\r\n            this._uint8SharedBuffer[RenderEntityUInt8SharedBufferView.maskMode] = mode;\r\n        }\r\n        this._maskMode = mode;\r\n    }\r\n\r\n    public setFillColorType (fillColorType: RenderEntityFillColorType): void {\r\n        if (JSB) {\r\n            this._uint8SharedBuffer[RenderEntityUInt8SharedBufferView.fillColorType] = fillColorType;\r\n        }\r\n    }\r\n\r\n    public getStaticRenderDrawInfo (): RenderDrawInfo | null {\r\n        if (JSB) {\r\n            const nativeDrawInfo = this._nativeObj.getStaticRenderDrawInfo(this._nativeObj.staticDrawInfoSize++);\r\n            const drawInfo = new RenderDrawInfo(nativeDrawInfo);\r\n            return drawInfo;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setNode (node: Node | null): void {\r\n        if (JSB) {\r\n            if (this._node !== node) {\r\n                this._nativeObj.node = node;\r\n            }\r\n        }\r\n        this._node = node;\r\n    }\r\n\r\n    setRenderTransform (renderTransform: Node | null): void {\r\n        if (JSB) {\r\n            if (this._renderTransform !== renderTransform) {\r\n                this._nativeObj.renderTransform = renderTransform;\r\n            }\r\n        }\r\n        this._renderTransform = renderTransform;\r\n    }\r\n\r\n    setStencilStage (stage: Stage): void {\r\n        if (JSB) {\r\n            if (this._stencilStage !== stage) {\r\n                this._nativeObj.stencilStage = stage;\r\n            }\r\n        }\r\n        this._stencilStage = stage;\r\n    }\r\n\r\n    private initSharedBuffer (): void {\r\n        if (JSB) {\r\n            const buffer = this._nativeObj.getEntitySharedBufferForJS();\r\n            let offset = 0;\r\n            this._uint32SharedBuffer = new Uint32Array(buffer, offset, RenderEntityUInt32SharedBufferView.count);\r\n            offset += RenderEntityUInt32SharedBufferView.count * 4;\r\n            this._uint8SharedBuffer = new Uint8Array(buffer, offset, RenderEntityUInt8SharedBufferView.count);\r\n            offset += RenderEntityUInt8SharedBufferView.count * 1;\r\n            this._boolSharedBuffer = new Uint8Array(buffer, offset, 1); // Only use 1 bytes for at most 8 booleans\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG, EDITOR, JSB, USE_SORTING_2D } from \"internal:constants\";\r\nimport { ccclass, executeInEditMode, requireComponent, tooltip, type, displayOrder, serializable, override, visible, displayName, disallowAnimation } from \"cc.decorator\";\r\nimport { Color, assert, ccenum, cclegacy } from \"../../core\";\r\nimport { builtinResMgr } from \"../../asset/asset-manager\";\r\nimport { Material } from \"../../asset/assets\";\r\nimport { BlendFactor, BlendOp, ColorMask } from \"../../gfx\";\r\nimport { IAssembler, IAssemblerManager } from \"../renderer/base\";\r\nimport { RenderData } from \"../renderer/render-data\";\r\nimport { IBatcher } from \"../renderer/i-batcher\";\r\nimport { Node } from \"../../scene-graph\";\r\nimport { TransformBit } from \"../../scene-graph/node-enum\";\r\nimport { UITransform } from \"./ui-transform\";\r\nimport { Stage } from \"../renderer/stencil-manager\";\r\nimport { NodeEventType } from \"../../scene-graph/node-event\";\r\nimport { Renderer } from \"../../misc/renderer\";\r\nimport { RenderEntity, RenderEntityType, RenderEntityFillColorType } from \"../renderer/render-entity\";\r\nimport { uiRendererManager } from \"./ui-renderer-manager\";\r\nimport { RenderDrawInfoType } from \"../renderer/render-draw-info\";\r\nimport { director } from \"../../game\";\r\nimport { SortingLayers } from \"../../sorting/sorting-layers\";\r\nimport type { Batcher2D } from \"../renderer/batcher-2d\";\r\n\r\n// hack\r\nccenum(BlendFactor);\r\nccenum(BlendOp);\r\nccenum(ColorMask);\r\n\r\n/**\r\n * @en\r\n * The shader property type of the material after instantiation.\r\n *\r\n * @zh\r\n * 实例后的材质的着色器属性类型。\r\n */\r\nexport enum InstanceMaterialType {\r\n    /**\r\n     * @en\r\n     * The shader only has color properties.\r\n     *\r\n     * @zh\r\n     * 着色器只带颜色属性。\r\n     */\r\n    ADD_COLOR = 0,\r\n\r\n    /**\r\n     * @en\r\n     * The shader has color and texture properties.\r\n     *\r\n     * @zh\r\n     * 着色器带颜色和贴图属性。\r\n     */\r\n    ADD_COLOR_AND_TEXTURE = 1,\r\n\r\n    /**\r\n     * @en\r\n     * The shader has color and texture properties and uses grayscale mode.\r\n     *\r\n     * @zh\r\n     * 着色器带颜色和贴图属性,并使用灰度模式。\r\n     */\r\n    GRAYSCALE = 2,\r\n\r\n    /**\r\n     * @en\r\n     * The shader has color and texture properties and uses embedded alpha mode.\r\n     *\r\n     * @zh\r\n     * 着色器带颜色和贴图属性,并使用透明通道分离贴图。\r\n     */\r\n    USE_ALPHA_SEPARATED = 3,\r\n\r\n    /**\r\n     * @en\r\n     * The shader has color and texture properties and uses embedded alpha and grayscale mode.\r\n     *\r\n     * @zh\r\n     * 着色器带颜色和贴图属性,并使用灰度模式。\r\n     */\r\n    USE_ALPHA_SEPARATED_AND_GRAY = 4,\r\n}\r\n\r\n/**\r\n * @en Base class for UI components which supports rendering features.\r\n * This component will setup NodeUIProperties.uiComp in its owner [[Node]]\r\n *\r\n * @zh 所有支持渲染的 UI 组件的基类。\r\n * 这个组件会设置 [[Node]] 上的 NodeUIProperties.uiComp。\r\n */\r\n@ccclass(\"cc.UIRenderer\")\r\n@requireComponent(UITransform)\r\n@executeInEditMode\r\nexport class UIRenderer extends Renderer {\r\n    /**\r\n     * @en The blend factor enums\r\n     * @zh 混合模式枚举类型\r\n     * @see [[gfx.BlendFactor]]\r\n     * @internal\r\n     */\r\n    public static BlendState = BlendFactor;\r\n    /**\r\n     * @en The render data assembler\r\n     * @zh 渲染数据组装器\r\n     * @internal\r\n     */\r\n    public static Assembler: IAssemblerManager = null!;\r\n    /**\r\n     * @en The post render data assembler\r\n     * @zh 后置渲染数据组装器\r\n     * @internal\r\n     */\r\n    public static PostAssembler: IAssemblerManager | null = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this._renderEntity = this.createRenderEntity();\r\n\r\n        if (USE_SORTING_2D) {\r\n            this.priority = SortingLayers.getDefaultPriority();\r\n        }\r\n    }\r\n\r\n    @override\r\n    @visible(false)\r\n    get sharedMaterials(): (Material | null)[] {\r\n        // if we don't create an array copy, the editor will modify the original array directly.\r\n        return (EDITOR && this._materials.slice()) || this._materials;\r\n    }\r\n\r\n    set sharedMaterials(val) {\r\n        for (let i = 0; i < val.length; i++) {\r\n            if (val[i] !== this._materials[i]) {\r\n                this.setSharedMaterial(val[i], i);\r\n            }\r\n        }\r\n        if (val.length < this._materials.length) {\r\n            for (let i = val.length; i < this._materials.length; i++) {\r\n                this.setSharedMaterial(null, i);\r\n            }\r\n            this._materials.splice(val.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en The customMaterial\r\n     * @zh 用户自定材质\r\n     */\r\n    @type(Material)\r\n    @displayOrder(0)\r\n    @disallowAnimation\r\n    get customMaterial(): Material | null {\r\n        return this._customMaterial;\r\n    }\r\n\r\n    set customMaterial(val) {\r\n        this._customMaterial = val;\r\n        this.updateMaterial();\r\n    }\r\n\r\n    /**\r\n     * @en Main color for rendering, it normally multiplies with texture color.\r\n     * @zh 渲染颜色，一般情况下会和贴图颜色相乘。\r\n     */\r\n    @displayOrder(1)\r\n    get color(): Readonly<Color> {\r\n        return this._color;\r\n    }\r\n    set color(value) {\r\n        if (this._color.equals(value)) {\r\n            return;\r\n        }\r\n        this._color.set(value);\r\n        this._updateColor();\r\n        if (EDITOR) {\r\n            const clone = this._color.clone();\r\n            this.node.emit(NodeEventType.COLOR_CHANGED, clone);\r\n        }\r\n    }\r\n\r\n    protected _renderData: RenderData | null = null;\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get renderData(): RenderData | null {\r\n        return this._renderData;\r\n    }\r\n    /**\r\n     * As can not set setter internal individually, so add setRenderData();\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    setRenderData(renderData: RenderData | null): void {\r\n        this._renderData = renderData;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     * @en The component stencil stage (please do not any modification directly on this object)\r\n     * @zh 组件模板缓冲状态 (注意：请不要直接修改它的值)\r\n     */\r\n    get stencilStage(): Stage {\r\n        return this._stencilStage;\r\n    }\r\n    set stencilStage(val: Stage) {\r\n        this._stencilStage = val;\r\n        this._renderEntity.setStencilStage(val);\r\n    }\r\n\r\n    @override\r\n    protected _materials: (Material | null)[] = [];\r\n    @type(Material)\r\n    protected _customMaterial: Material | null = null;\r\n\r\n    @serializable\r\n    protected _srcBlendFactor = BlendFactor.SRC_ALPHA;\r\n    /**\r\n     * @engineInternal\r\n     * @internal\r\n     */\r\n    get srcBlendFactor(): BlendFactor {\r\n        return this._srcBlendFactor;\r\n    }\r\n    set srcBlendFactor(srcBlendFactor: BlendFactor) {\r\n        this._srcBlendFactor = srcBlendFactor;\r\n    }\r\n    @serializable\r\n    protected _dstBlendFactor = BlendFactor.ONE_MINUS_SRC_ALPHA;\r\n    @serializable\r\n    protected _color: Color = Color.WHITE.clone();\r\n\r\n    protected _stencilStage: Stage = Stage.DISABLED;\r\n\r\n    protected _assembler: IAssembler | null = null;\r\n    protected _postAssembler: IAssembler | null = null;\r\n\r\n    protected _renderFlag = true;\r\n\r\n    protected declare _renderEntity: RenderEntity;\r\n\r\n    protected _instanceMaterialType = -1;\r\n    protected _srcBlendFactorCache = BlendFactor.SRC_ALPHA;\r\n    protected _dstBlendFactorCache = BlendFactor.ONE_MINUS_SRC_ALPHA;\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _dirtyVersion = -1;\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _internalId = -1;\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _flagChangedVersion = -1;\r\n\r\n    private _priority = 0;\r\n\r\n    get priority(): number {\r\n        return this._priority;\r\n    }\r\n\r\n    set priority(val: number) {\r\n        this._priority = val;\r\n        if (JSB) {\r\n            this._renderEntity.setPriority(val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get batcher(): Batcher2D {\r\n        return director.root!.batcher2D;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get renderEntity(): RenderEntity {\r\n        if (DEBUG) {\r\n            assert(Boolean(this._renderEntity), \"this._renderEntity should not be invalid\");\r\n        }\r\n        return this._renderEntity;\r\n    }\r\n\r\n    /**\r\n     * @en UI rendering component fill color type, COLOR means using color property value to fill, VERTEX means using vertex color value to fill.\r\n     * @zh UI 渲染组件填充颜色类型，COLOR 表示使用 color 属性值填充，VERTEX 表示使用顶点颜色值填充。\r\n     */\r\n    private _fillColorType = RenderEntityFillColorType.COLOR;\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    public getFillColorType(): RenderEntityFillColorType {\r\n        return this._fillColorType;\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     */\r\n    protected setFillColorType(val: RenderEntityFillColorType): void {\r\n        this._fillColorType = val;\r\n        if (JSB) {\r\n            this._renderEntity.setFillColorType(val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    protected set _useVertexOpacity(val: boolean) {\r\n        this.setFillColorType(RenderEntityFillColorType.VERTEX);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    protected get _useVertexOpacity(): boolean {\r\n        return this._fillColorType === RenderEntityFillColorType.VERTEX;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    get useVertexOpacity(): boolean {\r\n        return this._fillColorType === RenderEntityFillColorType.VERTEX;\r\n    }\r\n\r\n    protected _lastParent: Node | null = null;\r\n\r\n    public onLoad(): void {\r\n        this._renderEntity.setNode(this.node);\r\n    }\r\n\r\n    public __preload(): void {\r\n        this.node._uiProps.uiComp = this;\r\n        if (this._flushAssembler) {\r\n            this._flushAssembler();\r\n        }\r\n    }\r\n\r\n    public onEnable(): void {\r\n        this.node.on(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);\r\n        this.node.on(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);\r\n        this.node.on(NodeEventType.PARENT_CHANGED, this._colorDirty, this);\r\n        // If the renderData is invalid, it needs to be rebuilt to recalculate the batch processing.\r\n        if (!this._renderData && this._flushAssembler) {\r\n            this._flushAssembler();\r\n        }\r\n        this.updateMaterial();\r\n        this._colorDirty();\r\n        uiRendererManager.addRenderer(this);\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    // For Redo, Undo\r\n    public onRestore(): void {\r\n        this.updateMaterial();\r\n        // restore render data\r\n        this._markForUpdateRenderData();\r\n    }\r\n\r\n    private _destroyData(): void {\r\n        this.destroyRenderData();\r\n        if (this._materials) {\r\n            for (let i = 0; i < this._materials.length; i++) {\r\n                this.setSharedMaterial(null, i, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onDisable(): void {\r\n        this.node.off(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);\r\n        this.node.off(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);\r\n        this.node.off(NodeEventType.PARENT_CHANGED, this._colorDirty, this);\r\n        // When disabling, it is necessary to free up idle space to fully utilize chunks\r\n        // and avoid breaking batch processing.\r\n        // this._destroyData(); //[自定义],注释掉这行代码，不然共享材质无法修改属性\r\n        uiRendererManager.removeRenderer(this);\r\n        this._renderFlag = false;\r\n        this._renderEntity.enabled = false;\r\n    }\r\n\r\n    public onDestroy(): void {\r\n        this._renderEntity.setNode(null);\r\n        if (this.node._uiProps.uiComp === this) {\r\n            this.node._uiProps.uiComp = null;\r\n        }\r\n        this._destroyData();\r\n    }\r\n\r\n    /**\r\n     * @en Marks the render data of the current component as modified so that the render data is recalculated.\r\n     * @zh 标记当前组件的渲染数据为已修改状态，这样渲染数据才会重新计算。\r\n     * @param enable Marked necessary to update or not\r\n     */\r\n    public markForUpdateRenderData(enable = true): void {\r\n        this._markForUpdateRenderData(enable);\r\n    }\r\n\r\n    /**\r\n     * An internal method that marks the render data of the current component as modified so that the render data is recalculated.\r\n     * Adding this method is to minify the function name by `@mangle` since this method is frequently used in the engine.\r\n     * To keep the compatibility, the original method is still kept.\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public _markForUpdateRenderData(enable = true): void {\r\n        if (enable) {\r\n            const renderData = this._renderData;\r\n            if (renderData) {\r\n                renderData.vertDirty = true;\r\n            }\r\n            uiRendererManager.markDirtyRenderer(this);\r\n        }\r\n    }\r\n    /**\r\n     * @en Request new render data object.\r\n     * @zh 请求新的渲染数据对象。\r\n     * @return @en The new render data. @zh 新的渲染数据。\r\n     */\r\n    public requestRenderData(drawInfoType = RenderDrawInfoType.COMP): RenderData {\r\n        const data = RenderData.add();\r\n        data.initRenderDrawInfo(this, drawInfoType);\r\n        this._renderData = data;\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @en Destroy current render data.\r\n     * @zh 销毁当前渲染数据。\r\n     */\r\n    public destroyRenderData(): void {\r\n        this.renderEntity.clearRenderDrawInfos();\r\n        if (!this._renderData) {\r\n            return;\r\n        }\r\n\r\n        RenderData.remove(this._renderData);\r\n        this._renderData = null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public updateRenderer(): void {\r\n        const assembler = this._assembler;\r\n        if (assembler && assembler.updateRenderData) {\r\n            assembler.updateRenderData(this);\r\n        }\r\n        this._renderFlag = this._canRender();\r\n        this._renderEntity.enabled = this._renderFlag;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public fillBuffers(render: IBatcher): void {\r\n        if (this._renderFlag) {\r\n            this._render(render);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @en Post render data submission procedure, it's executed after assembler updated for all children.\r\n     * It may assemble some extra render data to the geometry buffers, or it may only change some render states.\r\n     * Don't call it unless you know what you are doing.\r\n     * @zh 后置渲染数据组装程序，它会在所有子节点的渲染数据组装完成后被调用。\r\n     * 它可能会组装额外的渲染数据到顶点数据缓冲区，也可能只是重置一些渲染状态。\r\n     * 注意：不要手动调用该函数，除非你理解整个流程。\r\n     */\r\n    public postUpdateAssembler(render: IBatcher): void {\r\n        if (this._postAssembler && this._renderFlag) {\r\n            this._postRender(render);\r\n        }\r\n    }\r\n\r\n    protected _render(render: IBatcher): void {\r\n        // Implemented by subclasses\r\n    }\r\n\r\n    protected _postRender(render: IBatcher): void {\r\n        // Implemented by subclasses\r\n    }\r\n\r\n    protected _canRender(): boolean {\r\n        if (DEBUG) {\r\n            assert(this.isValid, \"this component should not be invalid!\");\r\n        }\r\n        return this.getSharedMaterial(0) !== null && this._enabled && this._color.a > 0;\r\n    }\r\n\r\n    protected _postCanRender(): void {\r\n        // Implemented by subclasses\r\n    }\r\n\r\n    /**\r\n     * cocos-test-projects/assets/cases/rendertexture depends on this method, so it should not be marked as `@mangle` now.\r\n     * FIXME(cjh): `protected` is not equal to `@engineInternal + public`, because `protected` methods are also APIs exposed to developers,\r\n     * For example, developers could implement a class which extends `UIRenderer` and call this method.\r\n     * The mistake was merged in https://github.com/cocos/cocos-engine/pull/14572 , and it needs to be fixed in the future.\r\n     * @engineInternal\r\n     */\r\n    public updateMaterial(): void {\r\n        if (this._customMaterial) {\r\n            if (this.getSharedMaterial(0) !== this._customMaterial) {\r\n                this.setSharedMaterial(this._customMaterial, 0);\r\n            }\r\n            return;\r\n        }\r\n        const mat = this._updateBuiltinMaterial();\r\n        this.setSharedMaterial(mat, 0);\r\n        if (this.stencilStage === Stage.ENTER_LEVEL || this.stencilStage === Stage.ENTER_LEVEL_INVERTED) {\r\n            this.getMaterialInstance(0)!.recompileShaders({ USE_ALPHA_TEST: true });\r\n        }\r\n        this._updateBlendFunc();\r\n    }\r\n\r\n    protected _updateColor(): void {\r\n        this.node._uiProps.colorDirty = true;\r\n        this.setEntityColorDirty(true);\r\n        this.setEntityColor(this._color);\r\n\r\n        const assembler = this._assembler;\r\n        if (assembler) {\r\n            if (assembler.updateColor) {\r\n                assembler.updateColor(this);\r\n            }\r\n            // Need update rendFlag when opacity changes from 0 to !0 or 0 to !0\r\n            const renderFlag = this._renderFlag;\r\n            this._renderFlag = this._canRender();\r\n            this.setEntityEnabled(this._renderFlag);\r\n            if (renderFlag !== this._renderFlag) {\r\n                const renderData = this.renderData;\r\n                if (renderData) {\r\n                    renderData.vertDirty = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setEntityColorDirty(dirty: boolean): void {\r\n        if (JSB) {\r\n            this._renderEntity.colorDirty = dirty;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public setEntityColor(color: Color): void {\r\n        if (JSB) {\r\n            this._renderEntity.color = color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public setEntityOpacity(opacity: number): void {\r\n        if (JSB) {\r\n            (this.node as any)._setLocalOpacity(opacity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public setEntityEnabled(enabled: boolean): void {\r\n        if (JSB) {\r\n            this._renderEntity.enabled = enabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public _updateBlendFunc(): void {\r\n        // todo: Not only Pass[0].target[0]\r\n        let target = this.getRenderMaterial(0)!.passes[0].blendState.targets[0];\r\n        this._dstBlendFactorCache = target.blendDst;\r\n        this._srcBlendFactorCache = target.blendSrc;\r\n        if (this._dstBlendFactorCache !== this._dstBlendFactor || this._srcBlendFactorCache !== this._srcBlendFactor) {\r\n            target = this.getMaterialInstance(0)!.passes[0].blendState.targets[0];\r\n            target.blend = true;\r\n            target.blendDstAlpha = BlendFactor.ONE_MINUS_SRC_ALPHA;\r\n            target.blendDst = this._dstBlendFactor;\r\n            target.blendSrc = this._srcBlendFactor;\r\n            const targetPass = this.getMaterialInstance(0)!.passes[0];\r\n            targetPass.blendState.setTarget(0, target);\r\n            targetPass._updatePassHash();\r\n            this._dstBlendFactorCache = this._dstBlendFactor;\r\n            this._srcBlendFactorCache = this._srcBlendFactor;\r\n        }\r\n    }\r\n\r\n    // pos, rot, scale changed\r\n    protected _nodeStateChange(transformType: TransformBit): void {\r\n        if (this._renderData) {\r\n            this._markForUpdateRenderData();\r\n        }\r\n\r\n        for (let i = 0; i < this.node.children.length; ++i) {\r\n            const child = this.node.children[i];\r\n            const renderComp = child.getComponent(UIRenderer);\r\n            if (renderComp) {\r\n                renderComp._markForUpdateRenderData();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _colorDirty(): void {\r\n        this.node._uiProps.colorDirty = true;\r\n        this.setEntityColorDirty(true);\r\n    }\r\n\r\n    protected _onMaterialModified(idx: number, material: Material | null): void {\r\n        if (this._renderData) {\r\n            this._markForUpdateRenderData();\r\n            this._renderData.passDirty = true;\r\n        }\r\n        super._onMaterialModified(idx, material);\r\n    }\r\n\r\n    protected _updateBuiltinMaterial(): Material {\r\n        let mat: Material;\r\n        switch (this._instanceMaterialType) {\r\n            case InstanceMaterialType.ADD_COLOR:\r\n                mat = builtinResMgr.get(`ui-base-material`);\r\n                break;\r\n            case InstanceMaterialType.GRAYSCALE:\r\n                mat = builtinResMgr.get(`ui-sprite-gray-material`);\r\n                break;\r\n            case InstanceMaterialType.USE_ALPHA_SEPARATED:\r\n                mat = builtinResMgr.get(`ui-sprite-alpha-sep-material`);\r\n                break;\r\n            case InstanceMaterialType.USE_ALPHA_SEPARATED_AND_GRAY:\r\n                mat = builtinResMgr.get(`ui-sprite-gray-alpha-sep-material`);\r\n                break;\r\n            default:\r\n                mat = builtinResMgr.get(`ui-sprite-material`);\r\n                break;\r\n        }\r\n        return mat;\r\n    }\r\n\r\n    protected _flushAssembler?(): void;\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public setNodeDirty(): void {\r\n        if (this._renderData) {\r\n            this._renderData.nodeDirty = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     */\r\n    public setTextureDirty(): void {\r\n        if (this._renderData) {\r\n            this._renderData.textureDirty = true;\r\n        }\r\n    }\r\n\r\n    // RenderEntity\r\n    // it should be overwritten by inherited classes\r\n    protected createRenderEntity(): RenderEntity {\r\n        return new RenderEntity(RenderEntityType.STATIC);\r\n    }\r\n}\r\n\r\ncclegacy.internal.UIRenderer = UIRenderer;\r\n","/*\r\n Copyright (c) 2019-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { DEBUG, JSB } from 'internal:constants';\r\nimport { director } from '../../game/director';\r\nimport { Material } from '../../asset/assets/material';\r\nimport { TextureBase } from '../../asset/assets/texture-base';\r\nimport { Color, Pool, RecyclePool, murmurhash2_32_gc, assert, assertIsTrue } from '../../core';\r\nimport { SpriteFrame } from '../assets/sprite-frame';\r\nimport { UIRenderer } from '../framework/ui-renderer';\r\nimport { StaticVBAccessor, StaticVBChunk } from './static-vb-accessor';\r\nimport { getAttributeStride, vfmtPosUvColor } from './vertex-format';\r\nimport { Buffer, BufferInfo, BufferUsageBit, Device, Attribute, InputAssembler, InputAssemblerInfo, MemoryUsageBit } from '../../gfx';\r\nimport { RenderDrawInfo, RenderDrawInfoType } from './render-draw-info';\r\nimport { Batcher2D } from './batcher-2d';\r\nimport { RenderEntity, RenderEntityType } from './render-entity';\r\nimport type { MeshBuffer } from './mesh-buffer';\r\n\r\n/**\r\n * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport interface IRenderData {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    u: number;\r\n    v: number;\r\n    color: Color;\r\n}\r\n\r\nconst DEFAULT_STRIDE = getAttributeStride(vfmtPosUvColor) >> 2;\r\n\r\n/**\r\n * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport class BaseRenderData {\r\n    get vertexCount (): number {\r\n        return this._vc;\r\n    }\r\n    get indexCount (): number {\r\n        return this._ic;\r\n    }\r\n    get stride (): number {\r\n        return this._floatStride << 2;\r\n    }\r\n    get floatStride (): number {\r\n        return this._floatStride;\r\n    }\r\n    get vertexFormat (): Attribute[] {\r\n        return this._vertexFormat;\r\n    }\r\n\r\n    get drawInfoType (): RenderDrawInfoType {\r\n        return this._drawInfoType;\r\n    }\r\n    set drawInfoType (type: RenderDrawInfoType) {\r\n        this._drawInfoType = type;\r\n        if (JSB && this._renderDrawInfo) {\r\n            this._renderDrawInfo.setDrawInfoType(type);\r\n        }\r\n    }\r\n\r\n    public chunk: StaticVBChunk = null!;\r\n\r\n    // entity for native\r\n    protected _renderDrawInfo: RenderDrawInfo = null!;\r\n    public get renderDrawInfo (): RenderDrawInfo {\r\n        return this._renderDrawInfo;\r\n    }\r\n\r\n    protected _material: Material | null = null;\r\n    get material (): Material | null {\r\n        return this._material!;\r\n    }\r\n    set material (val: Material | null) {\r\n        this._material = val;\r\n        if (JSB && this._renderDrawInfo) {\r\n            this._renderDrawInfo.setMaterial(val!);\r\n        }\r\n    }\r\n\r\n    protected _dataHash = 0;\r\n    get dataHash (): number {\r\n        return this._dataHash;\r\n    }\r\n    set dataHash (val: number) {\r\n        this._dataHash = val;\r\n        if (JSB && this._renderDrawInfo) {\r\n            this._renderDrawInfo.setDataHash(val);\r\n        }\r\n    }\r\n\r\n    public _isMeshBuffer = false;\r\n\r\n    protected _vc = 0;\r\n    protected _ic = 0;\r\n    protected _floatStride = 0;\r\n    protected _vertexFormat = vfmtPosUvColor;\r\n    protected _drawInfoType: RenderDrawInfoType = RenderDrawInfoType.COMP;\r\n    protected _multiOwner = false;\r\n    get multiOwner (): boolean { return this._multiOwner; }\r\n    set multiOwner (val) {\r\n        this._multiOwner = val;\r\n    }\r\n\r\n    protected _batcher: Batcher2D | null = null;\r\n    get batcher (): Batcher2D {\r\n        if (!this._batcher) {\r\n            this._batcher = director.root!.batcher2D;\r\n        }\r\n        return this._batcher;\r\n    }\r\n\r\n    constructor (vertexFormat = vfmtPosUvColor) {\r\n        this._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : (getAttributeStride(vertexFormat) >> 2);\r\n        this._vertexFormat = vertexFormat;\r\n    }\r\n\r\n    public isValid (): false | StaticVBAccessor {\r\n        return this._ic > 0 && this.chunk.vertexAccessor;\r\n    }\r\n\r\n    // it should be invoked at where a render data is allocated.\r\n    public initRenderDrawInfo (comp: UIRenderer, drawInfoType: RenderDrawInfoType = RenderDrawInfoType.COMP): void {\r\n        if (JSB) {\r\n            const renderEntity: RenderEntity = comp.renderEntity;\r\n\r\n            if (renderEntity.renderEntityType === RenderEntityType.STATIC) {\r\n                if (!this._renderDrawInfo) {\r\n                    // initialization should be in native\r\n                    const drawInfo = renderEntity.getStaticRenderDrawInfo();\r\n                    if (drawInfo) {\r\n                        this._renderDrawInfo = drawInfo;\r\n                    }\r\n                }\r\n            } else if (this.multiOwner === false) {\r\n                if (!this._renderDrawInfo) {\r\n                    this._renderDrawInfo = new RenderDrawInfo();\r\n                    // for no resize() invoking components\r\n                    //this.setRenderDrawInfoAttributes();\r\n                    renderEntity.addDynamicRenderDrawInfo(this._renderDrawInfo);\r\n                }\r\n            }\r\n\r\n            this.drawInfoType = drawInfoType;\r\n            this.setRenderDrawInfoAttributes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Please use RenderEntity.clearRenderDrawInfos instead.\r\n     */\r\n    public removeRenderDrawInfo (comp: UIRenderer): void {\r\n        if (JSB) {\r\n            const renderEntity: RenderEntity = comp.renderEntity;\r\n            if (renderEntity.renderEntityType === RenderEntityType.DYNAMIC) {\r\n                renderEntity.removeDynamicRenderDrawInfo();\r\n            } else if (renderEntity.renderEntityType === RenderEntityType.STATIC) {\r\n                renderEntity.clearStaticRenderDrawInfos();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    protected setRenderDrawInfoAttributes (): void {\r\n        if (JSB) {\r\n            const renderDrawInfo = this._renderDrawInfo;\r\n            if (!renderDrawInfo) {\r\n                return;\r\n            }\r\n            const chunk = this.chunk;\r\n            if (chunk) {\r\n                renderDrawInfo.setBufferId(chunk.bufferId);\r\n                renderDrawInfo.setVertexOffset(chunk.vertexOffset);\r\n                renderDrawInfo.setVB(chunk.vb);\r\n                // TODO: on TS 4.2, argument of type 'Readonly<Uint16Array>' is not assignable to parameter of type 'Uint16Array'.\r\n                renderDrawInfo.setIB(chunk.ib as Uint16Array);\r\n                const meshBuffer = chunk.meshBuffer;\r\n                if (meshBuffer) {\r\n                    renderDrawInfo.setIndexOffset(meshBuffer.indexOffset);\r\n                    renderDrawInfo.setVData(meshBuffer.vData.buffer);\r\n                    renderDrawInfo.setIData(meshBuffer.iData.buffer);\r\n                }\r\n            }\r\n            renderDrawInfo.setVBCount(this._vc);\r\n            renderDrawInfo.setIBCount(this._ic);\r\n\r\n            renderDrawInfo.setDataHash(this.dataHash);\r\n            renderDrawInfo.setIsMeshBuffer(this._isMeshBuffer);\r\n            renderDrawInfo.setMaterial(this.material!);\r\n            renderDrawInfo.setDrawInfoType(this._drawInfoType);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport class RenderData extends BaseRenderData {\r\n    public static add (vertexFormat = vfmtPosUvColor, accessor: StaticVBAccessor | null = null): RenderData {\r\n        const rd = new RenderData(vertexFormat, accessor);\r\n        if (!accessor) {\r\n            const batcher = director.root!.batcher2D;\r\n            accessor = batcher.switchBufferAccessor(rd._vertexFormat);\r\n        }\r\n        rd._accessor = accessor;\r\n        return rd;\r\n    }\r\n\r\n    public static remove (data: RenderData): void {\r\n        // const idx = _pool.data.indexOf(data);\r\n        // if (idx === -1) {\r\n        //     return;\r\n        // }\r\n\r\n        data.clear();\r\n        data._accessor = null!;\r\n        // _pool.removeAt(idx);\r\n    }\r\n\r\n    get dataLength (): number {\r\n        return this._data.length;\r\n    }\r\n\r\n    set dataLength (length: number) {\r\n        const data: IRenderData[] = this._data;\r\n        if (data.length !== length) {\r\n            for (let i = data.length; i < length; i++) {\r\n                data.push({\r\n                    x: 0,\r\n                    y: 0,\r\n                    z: 0,\r\n                    u: 0,\r\n                    v: 0,\r\n                    color: Color.WHITE.clone(),\r\n                });\r\n            }\r\n\r\n            data.length = length;\r\n        }\r\n\r\n        this.syncRender2dBuffer();\r\n    }\r\n\r\n    get data (): IRenderData[] {\r\n        return this._data;\r\n    }\r\n\r\n    public _vertDirty = true;\r\n    get vertDirty (): boolean {\r\n        return this._vertDirty;\r\n    }\r\n    set vertDirty (val: boolean) {\r\n        this._vertDirty = val;\r\n        if (JSB && this._renderDrawInfo && val) {\r\n            this._renderDrawInfo.setVertDirty(val);\r\n        }\r\n    }\r\n\r\n    protected _textureHash = 0;\r\n    get textureHash (): number {\r\n        return this._textureHash;\r\n    }\r\n    set textureHash (val: number) {\r\n        this._textureHash = val;\r\n    }\r\n\r\n    public indices: Uint16Array | null = null;\r\n\r\n    public set frame (val: SpriteFrame | TextureBase | null) {\r\n        this._frame = val;\r\n        if (JSB && this._renderDrawInfo) {\r\n            if (this._frame) {\r\n                this._renderDrawInfo.setTexture(this._frame.getGFXTexture());\r\n                this._renderDrawInfo.setSampler(this._frame.getGFXSampler());\r\n            } else {\r\n                this._renderDrawInfo.setTexture(null);\r\n                this._renderDrawInfo.setSampler(null);\r\n            }\r\n        }\r\n    }\r\n    public get frame (): SpriteFrame | TextureBase | null {\r\n        return this._frame;\r\n    }\r\n    public layer = 0;\r\n\r\n    public nodeDirty = true;\r\n    public passDirty = true;\r\n    public textureDirty = true;\r\n    public hashDirty = true;\r\n\r\n    private _data: IRenderData[] = [];\r\n    private _frame: SpriteFrame | TextureBase | null = null;\r\n    protected _accessor: StaticVBAccessor = null!;\r\n    get accessor (): StaticVBAccessor { return this._accessor; }\r\n\r\n    public vertexRow = 1;\r\n    public vertexCol = 1;\r\n\r\n    public constructor (vertexFormat = vfmtPosUvColor, accessor: StaticVBAccessor | null = null) {\r\n        super(vertexFormat);\r\n        if (!accessor) {\r\n            accessor = this.batcher.switchBufferAccessor(this._vertexFormat);\r\n        }\r\n        this._accessor = accessor;\r\n    }\r\n\r\n    public resize (vertexCount: number, indexCount: number): void {\r\n        if (vertexCount === this._vc && indexCount === this._ic && this.chunk) return;\r\n        this._vc = vertexCount;\r\n        this._ic = indexCount;\r\n        if (this.chunk) {\r\n            this._accessor.recycleChunk(this.chunk);\r\n            this.chunk = null!;\r\n        }\r\n        // renderData always have chunk\r\n        this.chunk = this._accessor.allocateChunk(vertexCount, indexCount)!;\r\n        this.updateHash();\r\n\r\n        if (JSB && this.multiOwner === false && this._renderDrawInfo) {\r\n            const renderDrawInfo = this._renderDrawInfo;\r\n            const chunk = this.chunk;\r\n            const meshBuffer = chunk.meshBuffer;\r\n            // for sync vData and iData address to native\r\n            renderDrawInfo.setDrawInfoType(this._drawInfoType);\r\n            renderDrawInfo.setBufferId(chunk.bufferId);\r\n            renderDrawInfo.setVertexOffset(chunk.vertexOffset);\r\n            renderDrawInfo.setIndexOffset(meshBuffer.indexOffset);\r\n            renderDrawInfo.setVB(chunk.vb);\r\n            // TODO: on TS 4.2, argument of type 'Readonly<Uint16Array>' is not assignable to parameter of type 'Uint16Array'.\r\n            renderDrawInfo.setIB(chunk.ib as Uint16Array);\r\n            renderDrawInfo.setVData(meshBuffer.vData.buffer);\r\n            renderDrawInfo.setIData(meshBuffer.iData.buffer);\r\n            renderDrawInfo.setVBCount(this._vc);\r\n            renderDrawInfo.setIBCount(this._ic);\r\n        }\r\n    }\r\n\r\n    /** @mangle */\r\n    protected override setRenderDrawInfoAttributes (): void {\r\n        if (JSB) {\r\n            if (!this._renderDrawInfo) {\r\n                return;\r\n            }\r\n            this._renderDrawInfo.setAccId(this._accessor.id);\r\n            super.setRenderDrawInfoAttributes();\r\n            this._renderDrawInfo.setTexture(this.frame ? this.frame.getGFXTexture() : null);\r\n            this._renderDrawInfo.setSampler(this.frame ? this.frame.getGFXSampler() : null);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     * @mangle\r\n     */\r\n    public fillDrawInfoAttributes (drawInfo: RenderDrawInfo): void {\r\n        if (JSB) {\r\n            if (!drawInfo) {\r\n                return;\r\n            }\r\n            drawInfo.setDrawInfoType(this._drawInfoType);\r\n            drawInfo.setAccAndBuffer(this._accessor.id, this.chunk.bufferId);\r\n            drawInfo.setVertexOffset(this.chunk.vertexOffset);\r\n            drawInfo.setIndexOffset(this.chunk.meshBuffer.indexOffset);\r\n            drawInfo.setVB(this.chunk.vb);\r\n            // TODO: on TS 4.2, argument of type 'Readonly<Uint16Array>' is not assignable to parameter of type 'Uint16Array'.\r\n            drawInfo.setIB(this.chunk.ib as Uint16Array);\r\n            drawInfo.setVData(this.chunk.meshBuffer.vData.buffer);\r\n            drawInfo.setIData(this.chunk.meshBuffer.iData.buffer);\r\n            drawInfo.setVBCount(this._vc);\r\n            drawInfo.setIBCount(this._ic);\r\n            drawInfo.setDataHash(this.dataHash);\r\n            drawInfo.setIsMeshBuffer(this._isMeshBuffer);\r\n        }\r\n    }\r\n\r\n    // Initial advance render data for native\r\n    /** @mangle */\r\n    protected syncRender2dBuffer (): void {\r\n        if (JSB && this.multiOwner === false) {\r\n            if (!this._renderDrawInfo) {\r\n                return;\r\n            }\r\n            this.renderDrawInfo.setStride(this.floatStride);\r\n            this.renderDrawInfo.setVBCount(this.dataLength);\r\n            this.renderDrawInfo.initRender2dBuffer();\r\n        }\r\n    }\r\n\r\n    public resizeAndCopy (vertexCount: number, indexCount: number): void {\r\n        if (vertexCount === this._vc && indexCount === this._ic && this.chunk) return;\r\n        this._vc = vertexCount;\r\n        this._ic = indexCount;\r\n        const oldChunk = this.chunk;\r\n        // renderData always have chunk\r\n        this.chunk = this._accessor.allocateChunk(vertexCount, indexCount)!;\r\n        // Copy old chunk data\r\n        if (oldChunk) {\r\n            this.chunk.vb.set(oldChunk.vb);\r\n            this._accessor.recycleChunk(oldChunk);\r\n        }\r\n        this.updateHash();\r\n    }\r\n\r\n    public getMeshBuffer (): MeshBuffer | null {\r\n        if (this.chunk && this._accessor) {\r\n            return this._accessor.getMeshBuffer(this.chunk.bufferId);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public updateNode (comp: UIRenderer): void {\r\n        this.layer = comp.node.layer;\r\n        this.nodeDirty = false;\r\n        this.hashDirty = true;\r\n    }\r\n\r\n    public updatePass (comp: UIRenderer): void {\r\n        this.material = comp.getRenderMaterial(0)!;\r\n        this.passDirty = false;\r\n        this.hashDirty = true;\r\n    }\r\n\r\n    public updateTexture (frame: SpriteFrame | TextureBase): void {\r\n        this.frame = frame;\r\n        this.textureHash = frame.getHash();\r\n        this.textureDirty = false;\r\n        this.hashDirty = true;\r\n    }\r\n\r\n    public updateHash (): void {\r\n        const bid = this.chunk ? this.chunk.bufferId : -1;\r\n        const hashString = `${bid}${this.layer} ${this.textureHash}`;\r\n        this.dataHash = murmurhash2_32_gc(hashString, 666);\r\n        this.hashDirty = false;\r\n    }\r\n\r\n    public updateRenderData (comp: UIRenderer, frame: SpriteFrame | TextureBase): void {\r\n        if (this.passDirty) {\r\n            this.material = comp.getRenderMaterial(0)!;\r\n            this.passDirty = false;\r\n            this.hashDirty = true;\r\n\r\n            if (JSB && this._renderDrawInfo) {\r\n                this._renderDrawInfo.setMaterial(this.material);\r\n            }\r\n        }\r\n        if (this.nodeDirty) {\r\n            const renderScene = comp.node.scene ? comp._getRenderScene() : null;\r\n            this.layer = comp.node.layer;\r\n            // Hack for updateRenderData when node not add to scene\r\n            if (renderScene !== null) {\r\n                this.nodeDirty = false;\r\n            }\r\n            this.hashDirty = true;\r\n        }\r\n        if (this.textureDirty) {\r\n            this.frame = frame;\r\n            this.textureHash = frame.getHash();\r\n            this.textureDirty = false;\r\n            this.hashDirty = true;\r\n\r\n            if (JSB && this._renderDrawInfo) {\r\n                this._renderDrawInfo.setTexture(this.frame ? this.frame.getGFXTexture() : null);\r\n                this._renderDrawInfo.setSampler(this.frame ? this.frame.getGFXSampler() : null);\r\n            }\r\n        }\r\n        if (this.hashDirty) {\r\n            this.updateHash();\r\n\r\n            if (JSB && this._renderDrawInfo) {\r\n                this._renderDrawInfo.setDataHash(this.dataHash);\r\n            }\r\n        }\r\n\r\n        // Hack Do not update pre frame\r\n        if (JSB && this.multiOwner === false) {\r\n            if (DEBUG) {\r\n                if (this._renderDrawInfo && this._renderDrawInfo.render2dBuffer) {\r\n                    assert(this._renderDrawInfo.render2dBuffer.length === this._floatStride * this._data.length, 'Vertex count doesn\\'t match.');\r\n                }\r\n            }\r\n            // sync shared buffer to native\r\n            this._renderDrawInfo.fillRender2dBuffer(this._data);\r\n        }\r\n    }\r\n\r\n    public clear (): void {\r\n        this.resize(0, 0);\r\n        this._data.length = 0;\r\n        this.indices = null;\r\n        this.vertDirty = true;\r\n        this.material = null;\r\n\r\n        this.nodeDirty = true;\r\n        this.passDirty = true;\r\n        this.textureDirty = true;\r\n        this.hashDirty = true;\r\n\r\n        this.layer = 0;\r\n        this.frame = null;\r\n        this.textureHash = 0;\r\n        this.dataHash = 0;\r\n        if (JSB && this._renderDrawInfo) {\r\n            this._renderDrawInfo.clear();\r\n        }\r\n    }\r\n    public static createStaticVBAccessor (attributes: Attribute[], vCount?: number, iCount?: number): StaticVBAccessor {\r\n        const device = director.root!.device;\r\n        const accessor = new StaticVBAccessor(device, attributes, vCount, iCount);\r\n        return accessor;\r\n    }\r\n}\r\n\r\n/**\r\n * @deprecated since v3.5.0, this is an engine private interface that will be removed in the future.\r\n */\r\nexport class MeshRenderData extends BaseRenderData {\r\n    public static add (vertexFormat = vfmtPosUvColor): MeshRenderData {\r\n        // const rd = _meshDataPool.add();\r\n        const rd = new MeshRenderData();\r\n        rd._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : (getAttributeStride(vertexFormat) >> 2);\r\n        rd._vertexFormat = vertexFormat;\r\n        return rd;\r\n    }\r\n\r\n    public static remove (data: MeshRenderData): void {\r\n        // const idx = _meshDataPool.data.indexOf(data);\r\n        // if (idx === -1) {\r\n        //     return;\r\n        // }\r\n\r\n        // _meshDataPool.data[idx].clear();\r\n        // _meshDataPool.removeAt(idx);\r\n\r\n        data.clear();\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    set formatByte (value: number) {\r\n        // empty\r\n    }\r\n    get formatByte (): number { return this.stride; }\r\n\r\n    get floatStride (): number { return this._floatStride; }\r\n\r\n    /**\r\n     * Index of Float32Array: vData\r\n     */\r\n    get vDataOffset (): number { return this._byteLength >>> 2; }\r\n\r\n    public _isMeshBuffer = true;\r\n    public declare vData: Float32Array;\r\n    public declare iData: Uint16Array;\r\n    /**\r\n     * First vertex used in the current IA\r\n     */\r\n    public vertexStart = 0;\r\n    /**\r\n     * Vertex count used in the current IA\r\n     */\r\n    public vertexRange = 0;\r\n    /**\r\n     * First index used in the current IA\r\n     */\r\n    public indexStart = 0;\r\n    /**\r\n     * Index count used in the current IA\r\n     */\r\n    public indexRange = 0;\r\n    // only for graphics\r\n    public lastFilledIndex = 0;\r\n    public lastFilledVertex = 0;\r\n\r\n    public frame: SpriteFrame | null = null;\r\n\r\n    private _byteLength = 0;\r\n    private _vertexBuffers: Buffer[] = [];\r\n    private _indexBuffer: Buffer = null!;\r\n\r\n    private _iaPool: RecyclePool<InputAssembler> | null = null;\r\n    private _iaInfo: InputAssemblerInfo = null!;\r\n\r\n    constructor (vertexFormat = vfmtPosUvColor) {\r\n        super(vertexFormat);\r\n        this.vData = new Float32Array(256 * this.stride);\r\n        this.iData = new Uint16Array(256 * 6);\r\n    }\r\n\r\n    public request (vertexCount: number, indexCount: number): boolean {\r\n        const byteOffset = this._byteLength + vertexCount * this.stride;\r\n        const succeed = this.reserve(vertexCount, indexCount);\r\n        if (!succeed) return false;\r\n        this._vc += vertexCount; // vertexOffset\r\n        this._ic += indexCount; // indicesOffset\r\n        this._byteLength = byteOffset; // byteOffset\r\n        this.vertexRange = this._vc;\r\n        this.indexRange = this._ic;\r\n        return true;\r\n    }\r\n\r\n    public reserve (vertexCount: number, indexCount: number): boolean {\r\n        const newVBytes = this._byteLength + vertexCount * this.stride;\r\n        const newICount = this.indexCount + indexCount;\r\n\r\n        if (vertexCount + this.vertexCount > 65535) {\r\n            return false;\r\n        }\r\n\r\n        let byteLength = this.vData.byteLength;\r\n        let indicesLength = this.iData.length;\r\n        let vCount = this.vData.length;\r\n        let iCount = this.iData.length;\r\n        if (newVBytes > byteLength || newICount > indicesLength) {\r\n            while (byteLength < newVBytes || indicesLength < newICount) {\r\n                vCount *= 2;\r\n                iCount *= 2;\r\n\r\n                byteLength = vCount * 4;\r\n                indicesLength = iCount;\r\n            }\r\n\r\n            this._reallocBuffer(vCount, iCount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // overload\r\n    // Resize buffer and IA range\r\n    public resize (vertexCount: number, indexCount: number): void {\r\n        const byteLength = vertexCount * this.stride;\r\n        assertIsTrue(vertexCount >= 0 && indexCount >= 0 && byteLength <= this.vData.byteLength && indexCount <= this.iData.length);\r\n        this._vc = vertexCount;\r\n        this._ic = indexCount;\r\n        this._byteLength = byteLength;\r\n        this.updateRange(0, vertexCount, 0, indexCount);\r\n    }\r\n\r\n    // Only resize IA range\r\n    public updateRange (vertOffset: number, vertexCount: number, indexOffset: number, indexCount: number): void {\r\n        assertIsTrue(vertexCount >= 0 && indexCount >= 0 && vertexCount <= this._vc && indexCount <= this._ic);\r\n        this.vertexStart = vertOffset;\r\n        this.indexStart = indexOffset;\r\n        this.vertexRange = vertexCount;\r\n        this.indexRange = indexCount;\r\n    }\r\n\r\n    public requestIA (device: Device): InputAssembler {\r\n        this._initIAInfo(device);\r\n        const ia = this._iaPool!.add();\r\n        ia.firstIndex = this.indexStart;\r\n        ia.indexCount = this.indexRange;\r\n        return ia;\r\n    }\r\n\r\n    public uploadBuffers (): void {\r\n        if (this._byteLength === 0 || !this._vertexBuffers[0] || !this._indexBuffer) {\r\n            return;\r\n        }\r\n\r\n        const indexCount = this._ic;\r\n        const verticesData = new Float32Array(this.vData.buffer, 0, this._byteLength >> 2);\r\n        const indicesData = new Uint16Array(this.iData.buffer, 0, indexCount);\r\n\r\n        const vertexBuffer = this._vertexBuffers[0];\r\n        if (this._byteLength > vertexBuffer.size) {\r\n            vertexBuffer.resize(this._byteLength);\r\n        }\r\n        vertexBuffer.update(verticesData);\r\n\r\n        const indexBytes = indexCount << 1;\r\n        if (indexBytes > this._indexBuffer.size) {\r\n            this._indexBuffer.resize(indexBytes);\r\n        }\r\n        this._indexBuffer.update(indicesData);\r\n    }\r\n\r\n    public freeIAPool (): void {\r\n        if (this._iaPool) {\r\n            this._iaPool.reset();\r\n        }\r\n    }\r\n\r\n    public reset (): void {\r\n        this._vc = 0;\r\n        this._ic = 0;\r\n        this._byteLength = 0;\r\n        this.vertexStart = 0;\r\n        this.vertexRange = 0;\r\n        this.indexStart = 0;\r\n        this.indexRange = 0;\r\n        this.lastFilledIndex = 0;\r\n        this.lastFilledVertex = 0;\r\n        this.material = null;\r\n        this.freeIAPool();\r\n    }\r\n\r\n    public clear (): void {\r\n        this.reset();\r\n        if (this._iaPool) {\r\n            this._iaPool.destroy();\r\n        }\r\n        if (this._vertexBuffers[0]) {\r\n            this._vertexBuffers[0].destroy();\r\n            this._vertexBuffers = [];\r\n        }\r\n        this._iaInfo = null!;\r\n        this.vData = new Float32Array(256 * this.stride);\r\n        this.iData = new Uint16Array(256 * 6);\r\n    }\r\n\r\n    protected _initIAInfo (device: Device): void {\r\n        if (!this._iaInfo) {\r\n            const vbStride = this.stride;\r\n            const vbs = this._vertexBuffers;\r\n            if (!vbs.length) {\r\n                vbs.push(device.createBuffer(new BufferInfo(\r\n                    BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST,\r\n                    MemoryUsageBit.DEVICE,\r\n                    vbStride,\r\n                    vbStride,\r\n                )));\r\n            }\r\n            const ibStride = Uint16Array.BYTES_PER_ELEMENT;\r\n            if (!this._indexBuffer) {\r\n                this._indexBuffer = device.createBuffer(new BufferInfo(\r\n                    BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST,\r\n                    MemoryUsageBit.DEVICE,\r\n                    ibStride,\r\n                    ibStride,\r\n                ));\r\n            }\r\n            this._iaInfo = new InputAssemblerInfo(this._vertexFormat, vbs, this._indexBuffer);\r\n            this._iaPool = new RecyclePool(() => device.createInputAssembler(this._iaInfo), 1, (ia) => { ia.destroy(); });\r\n        }\r\n    }\r\n\r\n    protected _reallocBuffer (vCount: number, iCount: number): void {\r\n        // copy old data\r\n        const oldVData = this.vData;\r\n        this.vData = new Float32Array(vCount);\r\n        if (oldVData) {\r\n            this.vData.set(oldVData, 0);\r\n        }\r\n        const oldIData = this.iData;\r\n        this.iData = new Uint16Array(iCount);\r\n        if (oldIData) {\r\n            this.iData.set(oldIData, 0);\r\n        }\r\n    }\r\n\r\n    public override setRenderDrawInfoAttributes (): void {\r\n        if (JSB) {\r\n            const renderDrawInfo = this._renderDrawInfo;\r\n            if (!renderDrawInfo) {\r\n                return;\r\n            }\r\n            renderDrawInfo.setVData(this.vData.buffer);\r\n            renderDrawInfo.setIData(this.iData.buffer);\r\n            renderDrawInfo.setVBCount(this._vc);\r\n            renderDrawInfo.setIBCount(this._ic);\r\n            renderDrawInfo.setVertexOffset(this.vertexStart);\r\n            renderDrawInfo.setIndexOffset(this.indexStart);\r\n\r\n            renderDrawInfo.setIsMeshBuffer(this._isMeshBuffer);\r\n            renderDrawInfo.setMaterial(this.material!);\r\n            const frame = this.frame;\r\n            if (frame) {\r\n                renderDrawInfo.setTexture(frame.getGFXTexture());\r\n                renderDrawInfo.setSampler(frame.getGFXSampler());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * only for particle2d\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public particleInitRenderDrawInfo (entity: RenderEntity): void {\r\n        if (JSB) {\r\n            if (entity.renderEntityType === RenderEntityType.STATIC) {\r\n                if (!this._renderDrawInfo) {\r\n                    // initialization should be in native\r\n                    const drawInfo = entity.getStaticRenderDrawInfo();\r\n                    if (drawInfo) {\r\n                        this._renderDrawInfo = drawInfo;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nimport { ccclass, help, executeInEditMode, executionOrder, menu, tooltip, displayOrder, serializable, disallowMultiple } from 'cc.decorator';\r\nimport { EDITOR } from 'internal:constants';\r\nimport { Component, Node } from '../../scene-graph';\r\nimport { Mat4, Rect, Size, Vec2, Vec3, geometry, warnID, visibleRect, approx, EPSILON } from '../../core';\r\nimport { director, DirectorEvent } from '../../game/director';\r\nimport { NodeEventType } from '../../scene-graph/node-event';\r\nimport { IMask } from '../../scene-graph/node-event-processor';\r\nimport type { Mask } from '../components/mask';\r\n\r\nconst _vec2a = new Vec2();\r\nconst _vec2b = new Vec2();\r\nconst _vec3a = new Vec3();\r\nconst _mat4_temp = new Mat4();\r\nconst _matrix = new Mat4();\r\nconst _worldMatrix = new Mat4();\r\nconst _zeroMatrix = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\nconst _rect = new Rect();\r\n/**\r\n * @en\r\n * The component of transform in UI.\r\n *\r\n * @zh\r\n * UI 变换组件。\r\n */\r\n@ccclass('cc.UITransform')\r\n@help('i18n:cc.UITransform')\r\n@executionOrder(110)\r\n@menu('UI/UITransform')\r\n@disallowMultiple\r\n@executeInEditMode\r\nexport class UITransform extends Component {\r\n    constructor () {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Size of the UI node.\r\n     *\r\n     * @zh\r\n     * 内容尺寸。\r\n     */\r\n    @displayOrder(0)\r\n    @tooltip('i18n:ui_transform.content_size')\r\n    get contentSize (): Readonly<Size> {\r\n        return this._contentSize;\r\n    }\r\n\r\n    set contentSize (value) {\r\n        if (this._contentSize.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        if (EDITOR) {\r\n            const clone = new Size(this._contentSize);\r\n            this._contentSize.set(value);\r\n            this.node.emit(NodeEventType.SIZE_CHANGED, clone);\r\n        } else {\r\n            this._contentSize.set(value);\r\n            this.node.emit(NodeEventType.SIZE_CHANGED);\r\n        }\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * component width.\r\n     * @zh\r\n     * 组件宽度。\r\n     */\r\n    get width (): number {\r\n        return this._contentSize.width;\r\n    }\r\n\r\n    set width (value) {\r\n        if (this._contentSize.width === value) {\r\n            return;\r\n        }\r\n\r\n        if (EDITOR) {\r\n            const clone = new Size(this._contentSize);\r\n            this._contentSize.width = value;\r\n            this.node.emit(NodeEventType.SIZE_CHANGED, clone);\r\n        } else {\r\n            this._contentSize.width = value;\r\n            this.node.emit(NodeEventType.SIZE_CHANGED);\r\n        }\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * component height.\r\n     * @zh\r\n     * 组件高度。\r\n     */\r\n    get height (): number {\r\n        return this._contentSize.height;\r\n    }\r\n\r\n    set height (value) {\r\n        if (this.contentSize.height === value) {\r\n            return;\r\n        }\r\n\r\n        if (EDITOR) {\r\n            const clone = new Size(this._contentSize);\r\n            this._contentSize.height = value;\r\n            this.node.emit(NodeEventType.SIZE_CHANGED, clone);\r\n        } else {\r\n            this._contentSize.height = value;\r\n            this.node.emit(NodeEventType.SIZE_CHANGED);\r\n        }\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Anchor point of the UI node.\r\n     *\r\n     * @zh\r\n     * 锚点位置。\r\n     */\r\n    @displayOrder(1)\r\n    @tooltip('i18n:ui_transform.anchor_point')\r\n    // @constget\r\n    get anchorPoint (): Readonly<Vec2> {\r\n        return this._anchorPoint;\r\n    }\r\n\r\n    set anchorPoint (value) {\r\n        if (this._anchorPoint.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._anchorPoint.set(value);\r\n        this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The x-axis anchor of the node.\r\n     *\r\n     * @zh\r\n     * 锚点位置的 X 坐标。\r\n     */\r\n    get anchorX (): number {\r\n        return this._anchorPoint.x;\r\n    }\r\n\r\n    set anchorX (value) {\r\n        if (this._anchorPoint.x === value) {\r\n            return;\r\n        }\r\n\r\n        this._anchorPoint.x = value;\r\n        this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * The y-axis anchor of the node.\r\n     *\r\n     * @zh\r\n     * 锚点位置的 Y 坐标。\r\n     */\r\n    get anchorY (): number {\r\n        return this._anchorPoint.y;\r\n    }\r\n\r\n    set anchorY (value) {\r\n        if (this._anchorPoint.y === value) {\r\n            return;\r\n        }\r\n\r\n        this._anchorPoint.y = value;\r\n        this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Render sequence.\r\n     * Note: UI rendering is only about priority.\r\n     *\r\n     * @zh\r\n     * 渲染先后顺序，按照广度渲染排列，按同级节点下进行一次排列。\r\n     * @deprecated Since v3.1\r\n     */\r\n    get priority (): number {\r\n        return this._priority;\r\n    }\r\n\r\n    set priority (value) {\r\n        if (this._priority === value) {\r\n            return;\r\n        }\r\n\r\n        if (this.node.getComponent('cc.RenderRoot2D')) {\r\n            warnID(6706);\r\n            return;\r\n        }\r\n\r\n        this._priority = value;\r\n        if (this.node.parent) {\r\n            UITransform.insertChangeMap(this.node.parent);\r\n        }\r\n    }\r\n\r\n    protected _priority = 0;\r\n\r\n    /**\r\n     * @en Get the visibility bit-mask of the rendering camera\r\n     * @zh 查找被渲染相机的可见性掩码。\r\n     * @deprecated since v3.0\r\n     */\r\n    get visibility (): number {\r\n        const camera = director.root!.batcher2D.getFirstRenderCamera(this.node);\r\n        return camera ? camera.visibility : 0;\r\n    }\r\n\r\n    /**\r\n     * @en Get the priority of the rendering camera\r\n     * @zh 查找被渲染相机的渲染优先级。\r\n     */\r\n    get cameraPriority (): number {\r\n        const camera = director.root!.batcher2D.getFirstRenderCamera(this.node);\r\n        return camera ? camera.priority : 0;\r\n    }\r\n\r\n    public static EventType = NodeEventType;\r\n\r\n    @serializable\r\n    protected _contentSize = new Size(100, 100);\r\n    @serializable\r\n    protected _anchorPoint = new Vec2(0.5, 0.5);\r\n\r\n    public __preload (): void {\r\n        this.node._uiProps.uiTransformComp = this;\r\n    }\r\n\r\n    public onLoad (): void {\r\n        if (this.node.parent) {\r\n            UITransform.insertChangeMap(this.node.parent);\r\n        }\r\n    }\r\n\r\n    public onEnable (): void {\r\n        this.node.on(NodeEventType.PARENT_CHANGED, this._parentChanged, this);\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    public onDisable (): void {\r\n        this.node.off(NodeEventType.PARENT_CHANGED, this._parentChanged, this);\r\n    }\r\n\r\n    public onDestroy (): void {\r\n        this.node._uiProps.uiTransformComp = null;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the untransformed size of the ui transform.<br/>\r\n     * The contentSize remains the same no matter if the node is scaled or rotated.<br/>\r\n     * @zh\r\n     * 设置节点 UI Transform 的原始大小，不受该节点是否被缩放或者旋转的影响。\r\n     *\r\n     * @param size @en The size of the UI transform. @zh UI Transform 的 Size 大小。\r\n     * @example\r\n     * ```ts\r\n     * import { Size } from 'cc';\r\n     * node.setContentSize(new Size(100, 100));\r\n     * ```\r\n     */\r\n    public setContentSize(size: Size): void;\r\n\r\n    /**\r\n     * @en\r\n     * Sets the untransformed size of the ui transform.<br/>\r\n     * The contentSize remains the same no matter if the node is scaled or rotated.<br/>\r\n     * @zh\r\n     * 设置节点 UI Transform 的原始大小，不受该节点是否被缩放或者旋转的影响。\r\n     *\r\n     * @param width  @en The width of the UI transform. @zh UI Transform 的宽。\r\n     * @param height @en The height of the UI transform. @zh UI Transform 的高。\r\n     * @example\r\n     * ```ts\r\n     * import { Size } from 'cc';\r\n     * node.setContentSize(100, 100);\r\n     * ```\r\n     */\r\n    public setContentSize(width: number, height: number): void;\r\n\r\n    public setContentSize (size: Size | number, height?: number): void {\r\n        const locContentSize = this._contentSize;\r\n        let locWidth: number;\r\n        let locHeight: number;\r\n        if (height === undefined) {\r\n            size = size as Size;\r\n            if (approx(size.width, locContentSize.width, EPSILON) && approx(size.height, locContentSize.height, EPSILON)) {\r\n                return;\r\n            }\r\n            locWidth = size.width;\r\n            locHeight = size.height;\r\n        } else {\r\n            size = size as number;\r\n            if (approx(size, locContentSize.width, EPSILON) && approx(height, locContentSize.height, EPSILON)) {\r\n                return;\r\n            }\r\n            locWidth = size;\r\n            locHeight = height;\r\n        }\r\n\r\n        if (EDITOR) {\r\n            const clone = new Size(this._contentSize);\r\n            locContentSize.width = locWidth;\r\n            locContentSize.height = locHeight;\r\n            this.node.emit(NodeEventType.SIZE_CHANGED, clone);\r\n        } else {\r\n            locContentSize.width = locWidth;\r\n            locContentSize.height = locHeight;\r\n            this.node.emit(NodeEventType.SIZE_CHANGED);\r\n        }\r\n\r\n        this._markRenderDataDirty();\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Sets the anchor point in percent. <br/>\r\n     * anchor point is the point around which all transformations and positioning manipulations take place. <br/>\r\n     * It's like a pin in the node where it is \"attached\" to its parent. <br/>\r\n     * The anchorPoint is normalized, like a percentage. (0,0) means the bottom-left corner and (1,1) means the top-right corner.<br/>\r\n     * But you can use values higher than (1,1) and lower than (0,0) too.<br/>\r\n     * The default anchor point is (0.5,0.5), so it starts at the center of the node.\r\n     *\r\n     * @zh\r\n     * 设置锚点的百分比。<br>\r\n     * 锚点应用于所有变换和坐标点的操作，它就像在节点上连接其父节点的大头针。<br>\r\n     * 锚点是标准化的，就像百分比一样。(0，0) 表示左下角，(1，1) 表示右上角。<br>\r\n     * 但是你可以使用比（1，1）更高的值或者比（0，0）更低的值。<br>\r\n     * 默认的锚点是（0.5，0.5），因此它开始于节点的中心位置。<br>\r\n     * 注意：Creator 中的锚点仅用于定位所在的节点，子节点的定位不受影响。\r\n     *\r\n     * @param point @en Node anchor point or node x-axis anchor.\r\n     *              @zh 节点锚点或节点 x 轴锚。\r\n     * @param y @en The y-axis anchor of the node.\r\n     *          @zh 节点 y 轴锚。\r\n     * @example\r\n     * ```ts\r\n     * import { Vec2 } from 'cc';\r\n     * node.setAnchorPoint(new Vec2(1, 1));\r\n     * node.setAnchorPoint(1, 1);\r\n     * ```\r\n     */\r\n    public setAnchorPoint (point: Vec2 | Readonly<Vec2> | number, y?: number): void {\r\n        const locAnchorPoint = this._anchorPoint;\r\n        if (y === undefined) {\r\n            point = point as Vec2;\r\n            if ((point.x === locAnchorPoint.x) && (point.y === locAnchorPoint.y)) {\r\n                return;\r\n            }\r\n            locAnchorPoint.x = point.x;\r\n            locAnchorPoint.y = point.y;\r\n        } else {\r\n            if ((point === locAnchorPoint.x) && (y === locAnchorPoint.y)) {\r\n                return;\r\n            }\r\n            locAnchorPoint.x = point as number;\r\n            locAnchorPoint.y = y;\r\n        }\r\n\r\n        // this.setLocalDirty(LocalDirtyFlag.POSITION);\r\n        // if (this._eventMask & ANCHOR_ON) {\r\n        this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);\r\n        this._markRenderDataDirty();\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * @zh UI 空间中的点击测试。\r\n     * @en Hit test with point in UI Space.\r\n     *\r\n     * @param uiPoint point in UI Space.\r\n     * @deprecated since v3.5.0, please use `uiTransform.hitTest(screenPoint: Vec2)` instead.\r\n     */\r\n    public isHit (uiPoint: Vec2): boolean {\r\n        const w = this._contentSize.width;\r\n        const h = this._contentSize.height;\r\n        const v2WorldPt = _vec2a;\r\n        const testPt = _vec2b;\r\n\r\n        const cameras = this._getRenderScene().cameras;\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const camera = cameras[i];\r\n            if (!(camera.visibility & this.node.layer)) continue;\r\n\r\n            // Convert UI Space into World Space.\r\n            camera.node.getWorldRT(_mat4_temp);\r\n            const m12 = _mat4_temp.m12;\r\n            const m13 = _mat4_temp.m13;\r\n            const center = visibleRect.center;\r\n            _mat4_temp.m12 = center.x - (_mat4_temp.m00 * m12 + _mat4_temp.m04 * m13);\r\n            _mat4_temp.m13 = center.y - (_mat4_temp.m01 * m12 + _mat4_temp.m05 * m13);\r\n            Mat4.invert(_mat4_temp, _mat4_temp);\r\n            Vec2.transformMat4(v2WorldPt, uiPoint, _mat4_temp);\r\n\r\n            // Convert World Space into Local Node Space.\r\n            this.node.getWorldMatrix(_worldMatrix);\r\n            Mat4.invert(_mat4_temp, _worldMatrix);\r\n            if (Mat4.strictEquals(_mat4_temp, _zeroMatrix)) {\r\n                continue;\r\n            }\r\n            Vec2.transformMat4(testPt, v2WorldPt, _mat4_temp);\r\n            testPt.x += this._anchorPoint.x * w;\r\n            testPt.y += this._anchorPoint.y * h;\r\n            let hit = false;\r\n            if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {\r\n                hit = this._maskTest(v2WorldPt);\r\n            }\r\n            if (hit) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @zh 屏幕空间中的点击测试。\r\n     * @en Hit test with point in Screen Space.\r\n     *\r\n     * @param screenPoint @en point in Screen Space. @zh 屏幕坐标中的点。\r\n     */\r\n    public hitTest (screenPoint: Vec2, windowId = 0): boolean {\r\n        const w = this._contentSize.width;\r\n        const h = this._contentSize.height;\r\n        const v3WorldPt = _vec3a;\r\n        const v2WorldPt = _vec2a;\r\n        const testPt = _vec2b;\r\n\r\n        const cameras = this._getRenderScene().cameras;\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const camera = cameras[i];\r\n            if (!(camera.visibility & this.node.layer) || (camera.window && !camera.window.swapchain)) { continue; }\r\n            if (camera.systemWindowId !== windowId) {\r\n                continue;\r\n            }\r\n\r\n            // Convert Screen Space into World Space.\r\n            Vec3.set(v3WorldPt, screenPoint.x, screenPoint.y, 0);  // vec3 screen pos\r\n            camera.screenToWorld(v3WorldPt, v3WorldPt);\r\n            Vec2.set(v2WorldPt, v3WorldPt.x, v3WorldPt.y);\r\n\r\n            // Convert World Space into Local Node Space.\r\n            this.node.getWorldMatrix(_worldMatrix);\r\n            Mat4.invert(_mat4_temp, _worldMatrix);\r\n            if (Mat4.strictEquals(_mat4_temp, _zeroMatrix)) {\r\n                continue;\r\n            }\r\n            Vec2.transformMat4(testPt, v2WorldPt, _mat4_temp);\r\n            testPt.x += this._anchorPoint.x * w;\r\n            testPt.y += this._anchorPoint.y * h;\r\n            let hit = false;\r\n            if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {\r\n                hit = this._maskTest(v2WorldPt);\r\n            }\r\n            if (hit) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private _maskTest (pointInWorldSpace: Vec2): boolean {\r\n        const maskList = this.node?.eventProcessor?.maskList as IMask[] | undefined;\r\n        if (maskList) {\r\n            let parent: Node | null = this.node;\r\n            const length = maskList.length;\r\n            // find mask parent, should hit test it\r\n            for (let i = 0, j = 0; parent && j < length; ++i, parent = parent.parent) {\r\n                const temp = maskList[j];\r\n                if (i === temp.index) {\r\n                    if (parent === temp.comp.node) {\r\n                        const comp = temp.comp as Mask;\r\n                        if (comp && comp._enabled && !comp.isHit(pointInWorldSpace)) {\r\n                            return false;\r\n                        }\r\n\r\n                        j++;\r\n                    } else {\r\n                        // mask parent no longer exists\r\n                        maskList.length = j;\r\n                        break;\r\n                    }\r\n                } else if (i > temp.index) {\r\n                    // mask parent no longer exists\r\n                    maskList.length = j;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Converts a Point to node (local) space coordinates.\r\n     *\r\n     * @zh\r\n     * 将一个 UI 节点世界坐标系下点转换到另一个 UI 节点 (局部) 空间坐标系，这个坐标系以锚点为原点。\r\n     * 非 UI 节点转换到 UI 节点(局部) 空间坐标系，请走 Camera 的 `convertToUINode`。\r\n     *\r\n     * @param worldPoint @en Point in world space.\r\n     *                   @zh 世界坐标点。\r\n     * @param out @en Point in local space.\r\n     *            @zh 转换后坐标。\r\n     * @returns @en Return the relative position to the target node.\r\n     *          @zh 返回与目标节点的相对位置。\r\n     * @example\r\n     * ```ts\r\n     * const newVec3 = uiTransform.convertToNodeSpaceAR(cc.v3(100, 100, 0));\r\n     * ```\r\n     */\r\n    public convertToNodeSpaceAR (worldPoint: Vec3, out?: Vec3): Vec3 {\r\n        this.node.getWorldMatrix(_worldMatrix);\r\n        Mat4.invert(_mat4_temp, _worldMatrix);\r\n        if (!out) {\r\n            out = new Vec3();\r\n        }\r\n\r\n        return Vec3.transformMat4(out, worldPoint, _mat4_temp);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Converts a Point in node coordinates to world space coordinates.\r\n     *\r\n     * @zh\r\n     * 将距当前节点坐标系下的一个点转换到世界坐标系。\r\n     *\r\n     * @param nodePoint @en Point in local space.\r\n     *                  @zh 节点坐标。\r\n     * @param out @en Point in world space.\r\n     *            @zh 转换后坐标。\r\n     * @returns @en Returns the coordinates in the UI world coordinate system.\r\n     *          @zh 返回 UI 世界坐标系。\r\n     * @example\r\n     * ```ts\r\n     * const newVec3 = uiTransform.convertToWorldSpaceAR(3(100, 100, 0));\r\n     * ```\r\n     */\r\n    public convertToWorldSpaceAR (nodePoint: Vec3, out?: Vec3): Vec3 {\r\n        this.node.getWorldMatrix(_worldMatrix);\r\n        if (!out) {\r\n            out = new Vec3();\r\n        }\r\n\r\n        return Vec3.transformMat4(out, nodePoint, _worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Returns an axis aligned bounding box of this node in local space coordinate.\r\n     * The returned box is relative only to its parent, and it doesn't contain any child nodes.\r\n     * The behavior is slightly different with [[getBoundingBoxToWorld]] and [[getBoundingBoxTo]].\r\n     *\r\n     * @zh\r\n     * 返回父节坐标系下的轴向对齐的包围盒。\r\n     * 返回的包围盒仅仅只包含当前节点的轴向对齐包围盒，不包含子节点。\r\n     * 这个 API 的行为和 [[getBoundingBoxToWorld]] 和 [[getBoundingBoxTo]] 略有不同。\r\n     *\r\n     * @returns @en An axis aligned bounding box of this node in local space coordinate.  @zh 本地坐标系下的包围盒。\r\n     * @example\r\n     * ```ts\r\n     * const boundingBox = uiTransform.getBoundingBox();\r\n     * ```\r\n     */\r\n    public getBoundingBox (): Rect {\r\n        const rect = new Rect();\r\n        this._selfBoundingBox(rect);\r\n        Mat4.fromSRT(_matrix, this.node.rotation, this.node.position, this.node.scale);\r\n        rect.transformMat4(_matrix);\r\n        return rect;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Returns an axis aligned bounding box of this node in world space coordinate.\r\n     * The bounding box contains self and active children's world bounding box, and it will eliminate all zero sized nodes.\r\n     * @zh\r\n     * 返回节点在世界坐标系下的对齐轴向的包围盒（AABB）。\r\n     * 该边框包含自身和已激活的子节点的世界边框，但会剔除所有零大小的节点。\r\n     * @returns @en An axis aligned bounding box of this node in world space coordinate. @zh 世界坐标系下包围盒。\r\n     * @example\r\n     * ```ts\r\n     * const newRect = uiTransform.getBoundingBoxToWorld();\r\n     * ```\r\n     */\r\n    public getBoundingBoxToWorld (): Rect {\r\n        const rect = new Rect();\r\n        const locChildren = this.node.children;\r\n        for (let i = 0; i < locChildren.length; ++i) {\r\n            const child = locChildren[i];\r\n            if (child && child.active) {\r\n                const uiTransform = child.getComponent(UITransform);\r\n                // Zero sized rect is not accepted\r\n                if (uiTransform && uiTransform.contentSize.width && uiTransform.contentSize.height) {\r\n                    uiTransform._selfBoundingBox(_rect);\r\n                    _rect.transformMat4(child.worldMatrix);\r\n                    if (rect.width === 0) {\r\n                        // Initializing\r\n                        rect.set(_rect);\r\n                    } else {\r\n                        Rect.union(rect, rect, _rect);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this._contentSize.width && this._contentSize.height) {\r\n            this._selfBoundingBox(_rect);\r\n            _rect.transformMat4(this.node.worldMatrix);\r\n            if (rect.width === 0) {\r\n                // Initializing\r\n                rect.set(_rect);\r\n            } else {\r\n                Rect.union(rect, rect, _rect);\r\n            }\r\n        }\r\n        return rect;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Returns the minimum bounding box in the coordinate system of the target node.\r\n     * The result contains the current node and its child node tree, and it will eliminates all zero size nodes.\r\n     * E.g. passing an identical matrix will return the world bounding box of the current node tree.\r\n     * @zh\r\n     * 返回在目标节点坐标系下包含当前包围盒及其子节点包围盒的最小总包围盒，但会剔除所有零大小的节点。\r\n     * 如果传入单位矩阵，将得到世界坐标系下的包围盒。\r\n     *\r\n     * @param targetMat @en The target node's world matrix representing its coordinate system.\r\n     *                  @zh 表示目标节点坐标系的世界矩阵。\r\n     * @returns @en The minimum bounding box containing the current bounding box and its child nodes.\r\n     *          @zh 包含当前节点包围盒及其子节点包围盒的最小包围盒。\r\n     */\r\n    public getBoundingBoxTo (targetMat: Mat4): Rect {\r\n        const rect = new Rect();\r\n        const locChildren = this.node.children;\r\n        Mat4.invert(_mat4_temp, targetMat);\r\n        for (let i = 0; i < locChildren.length; ++i) {\r\n            const child = locChildren[i];\r\n            if (child && child.active) {\r\n                const uiTransform = child.getComponent(UITransform);\r\n                // Zero sized rect is not accepted\r\n                if (uiTransform && uiTransform.contentSize.width && uiTransform.contentSize.height) {\r\n                    uiTransform._selfBoundingBox(_rect);\r\n                    // Must combine all matrix because rect can only be transformed once.\r\n                    Mat4.multiply(_matrix, child.worldMatrix, _mat4_temp);\r\n                    _rect.transformMat4(_matrix);\r\n                    if (rect.width === 0) {\r\n                        // Initializing\r\n                        rect.set(_rect);\r\n                    } else {\r\n                        Rect.union(rect, rect, _rect);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this._contentSize.width && this._contentSize.height) {\r\n            this._selfBoundingBox(_rect);\r\n            // Must combine all matrix because rect can only be transformed once.\r\n            Mat4.multiply(_matrix, this.node.worldMatrix, _mat4_temp);\r\n            _rect.transformMat4(_matrix);\r\n            if (rect.width === 0) {\r\n                // Initializing\r\n                rect.set(_rect);\r\n            } else {\r\n                Rect.union(rect, rect, _rect);\r\n            }\r\n        }\r\n        return rect;\r\n    }\r\n\r\n    /**\r\n     * @en\r\n     * Compute the corresponding aabb in world space for raycast.\r\n     * @zh\r\n     * 计算出此 UI_2D 节点在世界空间下的 aabb 包围盒。\r\n     * @param out @en The out object of aabb bounding box of the node in world space.  @zh 输出节点在世界空间下的 aabb 包围盒。\r\n     * @returns @en The aabb bounding box of the node in world space. @zh 节点在世界空间下的 aabb 包围盒。\r\n     */\r\n    public getComputeAABB (out?: geometry.AABB): geometry.AABB {\r\n        const width = this._contentSize.width;\r\n        const height = this._contentSize.height;\r\n        _rect.set(\r\n            -this._anchorPoint.x * width,\r\n            -this._anchorPoint.y * height,\r\n            width,\r\n            height,\r\n        );\r\n        _rect.transformMat4(this.node.worldMatrix);\r\n        const px = _rect.x + _rect.width * 0.5;\r\n        const py = _rect.y + _rect.height * 0.5;\r\n        const pz = this.node.worldPosition.z;\r\n        const w = _rect.width / 2;\r\n        const h = _rect.height / 2;\r\n        const l = 0.001;\r\n        if (out != null) {\r\n            geometry.AABB.set(out, px, py, pz, w, h, l);\r\n            return out;\r\n        } else {\r\n            return new geometry.AABB(px, py, pz, w, h, l);\r\n        }\r\n    }\r\n\r\n    protected _selfBoundingBox (out: Rect): Rect {\r\n        const width = this._contentSize.width;\r\n        const height = this._contentSize.height;\r\n        out.set(\r\n            -this._anchorPoint.x * width,\r\n            -this._anchorPoint.y * height,\r\n            width,\r\n            height,\r\n        );\r\n        return out;\r\n    }\r\n\r\n    protected _parentChanged (node: Node): void {\r\n        if (this.node.getComponent('cc.RenderRoot2D')) {\r\n            return;\r\n        }\r\n\r\n        if (this.node.parent) {\r\n            UITransform.insertChangeMap(this.node.parent);\r\n        }\r\n    }\r\n\r\n    private _markRenderDataDirty (): void {\r\n        const uiComp = this.node._uiProps.uiComp;\r\n        if (uiComp) {\r\n            uiComp._markForUpdateRenderData();\r\n        }\r\n    }\r\n\r\n    private static priorityChangeNodeMap = new Map<string, Node>();\r\n\r\n    private static insertChangeMap (node: Node): void {\r\n        const key = node.uuid;\r\n        if (!UITransform.priorityChangeNodeMap.has(key)) {\r\n            UITransform.priorityChangeNodeMap.set(key, node);\r\n        }\r\n    }\r\n\r\n    private static _sortChildrenSibling (node: Node): void {\r\n        const siblings = node.children;\r\n        if (siblings) {\r\n            siblings.sort((a: Node, b: Node): number => {\r\n                const aComp = a._getUITransformComp();\r\n                const bComp = b._getUITransformComp();\r\n                const ca = aComp ? aComp._priority : 0;\r\n                const cb = bComp ? bComp._priority : 0;\r\n                const diff = ca - cb;\r\n                if (diff === 0) return a.siblingIndex - b.siblingIndex;\r\n                return diff;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public static _sortSiblings (): void {\r\n        UITransform.priorityChangeNodeMap.forEach((node, ID): void => {\r\n            UITransform._sortChildrenSibling(node);\r\n            node._updateSiblingIndex();\r\n            node.emit('childrenSiblingOrderChanged');\r\n        });\r\n        UITransform.priorityChangeNodeMap.clear();\r\n    }\r\n\r\n    /**\r\n     * @deprecated Since v3.7.0, this is an engine private interface that will be removed in the future.\r\n     * @engineInternal\r\n     * @mangle\r\n     */\r\n    public static _cleanChangeMap (): void {\r\n        UITransform.priorityChangeNodeMap.clear();\r\n    }\r\n}\r\n\r\n// HACK\r\ndirector.on(DirectorEvent.AFTER_UPDATE, UITransform._sortSiblings);\r\ndirector.on(DirectorEvent.BEFORE_SCENE_LAUNCH, UITransform._cleanChangeMap);\r\n"],"names":["MeshBufferSharedBufferView","ATTR_POSITION","AttributeName","ATTR_COLOR","ATTR_TEX_COORD","ATTR_COLOR2","vfmt","exports","Attribute","Format","RGB32F","vfmtPosColor","RGBA32F","vfmtPosUvColor","RG32F","vfmtPosUvColor4B","RGBA8","vfmtPosUvTwoColor","vfmtPosUvTwoColor4B","getComponentPerVertex","attrs","count","i","length","attr","FormatInfos","format","getAttributeStride","size","cclegacy","internal","AttrUInt8ArrayView","AttrUInt16ArrayView","AttrUInt32ArrayView","RenderDrawInfoType","Stage","StencilSharedBufferView","MeshBuffer","_proto","prototype","this","_byteOffset","_vertexOffset","_indexOffset","_dirty","_floatsPerVertex","_vData","_iData","_vertexFormatBytes","_initVDataCount","_initIDataCount","_attributes","_iaPool","_iaInfo","_nextFreeIAHandle","initSharedBuffer","syncSharedBufferToNative","initialize","device","vFloatCount","iCount","floatsPerVertex","assertIsTrue","getError","vData","iData","Float32Array","Uint16Array","push","createNewIA","reset","dirty","destroy","iaRef","vertexBuffer0","vertexBuffers","indexBuffer","ia","setDirty","request","warnID","requireFreeIA","recycleIA","pool","checkCapacity","vertexCount","indexCount","maxVertex","vertexOffset","maxIndex","indexOffset","uploadBuffers","byteOffset","iOS14","sys","__isWebIOS14OrIPadOS14Env","submitCount","byteCount","verticesData","buffer","indicesData","vertexBuffer","resize","update","vbStride","BYTES_PER_ELEMENT","ibStride","createBuffer","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","HOST","DEVICE","INDEX","InputAssemblerInfo","createInputAssembler","_createClass","key","get","set","val","_nativeObj","_sharedBuffer","BufferAccessor","attributes","_buffers","_device","appendBuffers","_entryPool","Pool","offset","StaticVBChunk","vertexAccessor","bufferId","meshBuffer","vb","getMeshBuffer","setIndexBuffer","_ib","StaticVBAccessor","_BufferAccessor","vCount","_this","_freeLists","_vCount","_iCount","_id","Math","floor","macro","BATCHER2D_MEM_INCREMENT","IB_SCALE","generateID","_allocateBuffer","_inheritsLoose","_proto2","freeList","j","free","call","getVertexBuffer","bid","getIndexBuffer","firstEntry","byteLength","appendIndices","indices","buf","needLength","expansionLength","newIData","allocateChunk","vertexFormatBytes","errorID","eid","entry","e","Number","isInteger","fill","_allocateChunkFromEntry","recycleChunk","chunk","bytes","recycled","prevEntry","nextEntry","distance","splice","newEntry","alloc","remaining","assertID","director","root","batcher2D","syncMeshBuffersToNative","id","ID_COUNT","RenderDrawInfo","_accId","_bufferId","_vb","_vertDirty","_vbCount","_ibCount","_dataHash","_isMeshBuffer","_material","_texture","_sampler","_stride","_useLocal","_model","_drawInfoType","COMP","_subNode","_render2dBuffer","init","clear","setAccId","accId","setBufferId","setAccAndBuffer","setVertexOffset","setIndexOffset","setVB","setIB","setVData","setIData","setVBCount","vbCount","setIBCount","setVertDirty","setDataHash","dataHash","setIsMeshBuffer","isMeshBuffer","setVertexPositionInWorld","setMaterial","material","setTexture","texture","setSampler","sampler","setModel","setDrawInfoType","drawInfoType","setSubNode","node","setStride","stride","initRender2dBuffer","fillRender2dBuffer","StencilManager","RenderEntityFillColorType","RenderEntityType","RenderEntityUInt32SharedBufferView","RenderEntityUInt8SharedBufferView","RenderEntityBoolSharedBufferViewBitIndex","MaskMode","_maskStack","_stencilPattern","stencilTest","func","ComparisonFunc","ALWAYS","stencilMask","writeMask","failOp","StencilOp","KEEP","zFailOp","passOp","ref","_stage","DISABLED","stencilStateMap","Map","stencilStateMapWithDepth","pushMask","mask","comp","stencilStage","ENTER_LEVEL","CLEAR_INVERTED","CLEAR","enableMask","stage","ENABLED","exitMask","pop","getWriteMask","getExitWriteMask","getStencilRef","result","getMaskStackSize","forEach","value","getStencilStage","mat","depthTest","depthWrite","depthFunc","LESS","cacheMap","passes","dss","depthStencilState","depthTestValue","depthWriteValue","has","setStateFromStage","stencilPattern","DepthStencilState","getStencilHash","pattern","EQUAL","NEVER","ZERO","REPLACE","ENTER_LEVEL_INVERTED","sharedManager","RenderEntity","InstanceMaterialType","_renderEntityType","STATIC","_dynamicDrawInfoArr","_node","_renderTransform","_stencilStage","_colorDirty","_enabled","_maskMode","NONE","_color","Color","WHITE","clone","setPriority","setUseLocal","useLocal","addDynamicRenderDrawInfo","removeDynamicRenderDrawInfo","clearDynamicRenderDrawInfos","clearStaticRenderDrawInfos","clearRenderDrawInfos","setDynamicRenderDrawInfo","setMaskMode","mode","setFillColorType","getStaticRenderDrawInfo","setNode","setRenderTransform","renderTransform","setStencilStage","DEFAULT_STRIDE","BaseRenderData","vertexFormat","_renderDrawInfo","_vc","_ic","_floatStride","_vertexFormat","_multiOwner","_batcher","isValid","initRenderDrawInfo","removeRenderDrawInfo","setRenderDrawInfoAttributes","type","RenderData","_BaseRenderData","accessor","_textureHash","layer","nodeDirty","passDirty","textureDirty","hashDirty","_data","_frame","_accessor","vertexRow","vertexCol","batcher","switchBufferAccessor","add","rd","remove","data","updateHash","fillDrawInfoAttributes","syncRender2dBuffer","resizeAndCopy","oldChunk","updateNode","updatePass","getRenderMaterial","updateTexture","frame","textureHash","getHash","hashString","murmurhash2_32_gc","updateRenderData","renderScene","scene","_getRenderScene","vertDirty","createStaticVBAccessor","x","y","z","u","v","color","_vec2a","_BaseRenderData2","MeshRenderData","_this2","vertexStart","vertexRange","indexStart","indexRange","lastFilledIndex","lastFilledVertex","_byteLength","_vertexBuffers","_indexBuffer","_proto3","reserve","newVBytes","newICount","indicesLength","_reallocBuffer","updateRange","vertOffset","requestIA","_initIAInfo","firstIndex","indexBytes","freeIAPool","_this3","vbs","RecyclePool","oldVData","oldIData","particleInitRenderDrawInfo","Vec2","_vec2b","_vec3a","Vec3","_mat4_temp","Mat4","_matrix","_worldMatrix","_zeroMatrix","_rect","Rect","UITransform","ccclass","_dec","_class","executionOrder","_dec2","disallowMultiple","_class3","_Component","_priority","_contentSize","_initializer","_anchorPoint","_initializer2","__preload","_uiProps","uiTransformComp","onLoad","parent","insertChangeMap","onEnable","on","NodeEventType","PARENT_CHANGED","_parentChanged","_markRenderDataDirty","onDisable","off","onDestroy","setContentSize","height","locWidth","locHeight","locContentSize","undefined","approx","width","EPSILON","emit","SIZE_CHANGED","setAnchorPoint","point","locAnchorPoint","ANCHOR_CHANGED","isHit","uiPoint","w","h","v2WorldPt","testPt","cameras","camera","visibility","getWorldRT","m12","m13","center","visibleRect","m00","m04","m01","m05","invert","transformMat4","getWorldMatrix","strictEquals","hit","_maskTest","hitTest","screenPoint","windowId","v3WorldPt","window","swapchain","systemWindowId","screenToWorld","pointInWorldSpace","_this$node","_this$node$eventProce","maskList","eventProcessor","temp","index","convertToNodeSpaceAR","worldPoint","out","convertToWorldSpaceAR","nodePoint","getBoundingBox","rect","_selfBoundingBox","fromSRT","rotation","position","scale","getBoundingBoxToWorld","locChildren","children","child","active","uiTransform","getComponent","contentSize","worldMatrix","union","getBoundingBoxTo","targetMat","multiply","getComputeAABB","px","py","pz","worldPosition","geometry","uiComp","_markForUpdateRenderData","uuid","priorityChangeNodeMap","_sortChildrenSibling","siblings","sort","a","b","aComp","_getUITransformComp","bComp","diff","siblingIndex","_sortSiblings","_updateSiblingIndex","_cleanChangeMap","equals","getFirstRenderCamera","priority","Component","EventType","_applyDecoratedInitializer","_class2","serializable","Size","DirectorEvent","AFTER_UPDATE","BEFORE_SCENE_LAUNCH","ccenum","BlendFactor","BlendOp","ColorMask","UIRenderer","requireComponent","Material","_Renderer","_renderData","_materials","_customMaterial","_srcBlendFactor","_initializer3","_dstBlendFactor","_initializer4","_initializer5","_assembler","_postAssembler","_renderFlag","_instanceMaterialType","_srcBlendFactorCache","SRC_ALPHA","_dstBlendFactorCache","ONE_MINUS_SRC_ALPHA","_dirtyVersion","_internalId","_flagChangedVersion","_fillColorType","COLOR","_lastParent","_renderEntity","createRenderEntity","SortingLayers","getDefaultPriority","setRenderData","renderData","getFillColorType","_flushAssembler","_nodeStateChange","updateMaterial","uiRendererManager","addRenderer","onRestore","_destroyData","destroyRenderData","setSharedMaterial","removeRenderer","enabled","markForUpdateRenderData","enable","markDirtyRenderer","requestRenderData","renderEntity","updateRenderer","assembler","_canRender","fillBuffers","render","_render","postUpdateAssembler","_postRender","assert","getSharedMaterial","_postCanRender","_updateBuiltinMaterial","getMaterialInstance","recompileShaders","USE_ALPHA_TEST","_updateBlendFunc","_updateColor","colorDirty","setEntityColorDirty","setEntityColor","updateColor","renderFlag","setEntityEnabled","setEntityOpacity","target","blendState","targets","blendDst","blendSrc","blend","blendDstAlpha","targetPass","setTarget","_updatePassHash","renderComp","_onMaterialModified","idx","ADD_COLOR","builtinResMgr","GRAYSCALE","USE_ALPHA_SEPARATED","USE_ALPHA_SEPARATED_AND_GRAY","setNodeDirty","setTextureDirty","srcBlendFactor","Boolean","Renderer","BlendState","Assembler","PostAssembler","override","_dec4"],"mappings":"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"}